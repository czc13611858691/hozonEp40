
microchip_studio_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000041c  00806000  0000c952  000081e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008152  00004800  00004800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ed  0080641c  0080641c  00008602  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00008602  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a10  00000000  00000000  000086a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017c10  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000068e6  00000000  00000000  00020cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000811f  00000000  00000000  000275a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a08  00000000  00000000  0002f6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007b94  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088ff  00000000  00000000  00038c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  00041563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004800 <__vectors>:
    4800:	0c 94 f0 24 	jmp	0x49e0	; 0x49e0 <__ctors_end>
    4804:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4808:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    480c:	0c 94 69 25 	jmp	0x4ad2	; 0x4ad2 <__vector_3>
    4810:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4814:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4818:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    481c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4820:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4824:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4828:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    482c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4830:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <__vector_12>
    4834:	0c 94 e6 25 	jmp	0x4bcc	; 0x4bcc <__vector_13>
    4838:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    483c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4840:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4844:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4848:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    484c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4850:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4854:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4858:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    485c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4860:	0c 94 2f 53 	jmp	0xa65e	; 0xa65e <__vector_24>
    4864:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4868:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    486c:	0c 94 b9 52 	jmp	0xa572	; 0xa572 <__vector_27>
    4870:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4874:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4878:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    487c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4880:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4884:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4888:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    488c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4890:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4894:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4898:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    489c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48a0:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48a4:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48a8:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48ac:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48b0:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48b4:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48b8:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48bc:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48c0:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48c4:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48c8:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48cc:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48d0:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48d4:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48d8:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48dc:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__vector_55>
    48e0:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48e4:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48e8:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48ec:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48f0:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48f4:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48f8:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    48fc:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__bad_interrupt>
    4900:	65 26       	eor	r6, r21
    4902:	97 26       	eor	r9, r23
    4904:	cc 26       	eor	r12, r28
    4906:	01 27       	eor	r16, r17
    4908:	36 27       	eor	r19, r22
    490a:	68 27       	eor	r22, r24
    490c:	9d 27       	eor	r25, r29
    490e:	d2 27       	eor	r29, r18
    4910:	07 28       	or	r0, r7
    4912:	3c 28       	or	r3, r12
    4914:	64 39       	cpi	r22, 0x94	; 148
    4916:	51 3d       	cpi	r21, 0xD1	; 209
    4918:	51 3d       	cpi	r21, 0xD1	; 209
    491a:	51 3d       	cpi	r21, 0xD1	; 209
    491c:	51 3d       	cpi	r21, 0xD1	; 209
    491e:	51 3d       	cpi	r21, 0xD1	; 209
    4920:	e7 39       	cpi	r30, 0x97	; 151
    4922:	f8 3a       	cpi	r31, 0xA8	; 168
    4924:	9e 38       	cpi	r25, 0x8E	; 142
    4926:	51 3d       	cpi	r21, 0xD1	; 209
    4928:	14 3a       	cpi	r17, 0xA4	; 164
    492a:	54 3a       	cpi	r21, 0xA4	; 164
    492c:	96 3a       	cpi	r25, 0xA6	; 166
    492e:	51 3d       	cpi	r21, 0xD1	; 209
    4930:	51 3d       	cpi	r21, 0xD1	; 209
    4932:	51 3d       	cpi	r21, 0xD1	; 209
    4934:	49 3b       	cpi	r20, 0xB9	; 185
    4936:	a6 39       	cpi	r26, 0x96	; 150
    4938:	51 3d       	cpi	r21, 0xD1	; 209
    493a:	51 3d       	cpi	r21, 0xD1	; 209
    493c:	51 3d       	cpi	r21, 0xD1	; 209
    493e:	51 3d       	cpi	r21, 0xD1	; 209
    4940:	51 3d       	cpi	r21, 0xD1	; 209
    4942:	51 3d       	cpi	r21, 0xD1	; 209
    4944:	ab 3b       	cpi	r26, 0xBB	; 187
    4946:	fc 3b       	cpi	r31, 0xBC	; 188
    4948:	51 3d       	cpi	r21, 0xD1	; 209
    494a:	51 3d       	cpi	r21, 0xD1	; 209
    494c:	51 3d       	cpi	r21, 0xD1	; 209
    494e:	3e 3c       	cpi	r19, 0xCE	; 206
    4950:	51 3d       	cpi	r21, 0xD1	; 209
    4952:	51 3d       	cpi	r21, 0xD1	; 209
    4954:	51 3d       	cpi	r21, 0xD1	; 209
    4956:	51 3d       	cpi	r21, 0xD1	; 209
    4958:	22 39       	cpi	r18, 0x92	; 146
    495a:	51 3d       	cpi	r21, 0xD1	; 209
    495c:	51 3d       	cpi	r21, 0xD1	; 209
    495e:	51 3d       	cpi	r21, 0xD1	; 209
    4960:	51 3d       	cpi	r21, 0xD1	; 209
    4962:	51 3d       	cpi	r21, 0xD1	; 209
    4964:	51 3d       	cpi	r21, 0xD1	; 209
    4966:	51 3d       	cpi	r21, 0xD1	; 209
    4968:	51 3d       	cpi	r21, 0xD1	; 209
    496a:	51 3d       	cpi	r21, 0xD1	; 209
    496c:	51 3d       	cpi	r21, 0xD1	; 209
    496e:	51 3d       	cpi	r21, 0xD1	; 209
    4970:	51 3d       	cpi	r21, 0xD1	; 209
    4972:	51 3d       	cpi	r21, 0xD1	; 209
    4974:	e0 38       	cpi	r30, 0x80	; 128
    4976:	51 3d       	cpi	r21, 0xD1	; 209
    4978:	51 3d       	cpi	r21, 0xD1	; 209
    497a:	51 3d       	cpi	r21, 0xD1	; 209
    497c:	51 3d       	cpi	r21, 0xD1	; 209
    497e:	51 3d       	cpi	r21, 0xD1	; 209
    4980:	51 3d       	cpi	r21, 0xD1	; 209
    4982:	51 3d       	cpi	r21, 0xD1	; 209
    4984:	51 3d       	cpi	r21, 0xD1	; 209
    4986:	51 3d       	cpi	r21, 0xD1	; 209
    4988:	51 3d       	cpi	r21, 0xD1	; 209
    498a:	51 3d       	cpi	r21, 0xD1	; 209
    498c:	51 3d       	cpi	r21, 0xD1	; 209
    498e:	51 3d       	cpi	r21, 0xD1	; 209
    4990:	51 3d       	cpi	r21, 0xD1	; 209
    4992:	7f 3c       	cpi	r23, 0xCF	; 207
    4994:	bf 3c       	cpi	r27, 0xCF	; 207
    4996:	51 3d       	cpi	r21, 0xD1	; 209
    4998:	51 3d       	cpi	r21, 0xD1	; 209
    499a:	51 3d       	cpi	r21, 0xD1	; 209
    499c:	51 3d       	cpi	r21, 0xD1	; 209
    499e:	51 3d       	cpi	r21, 0xD1	; 209
    49a0:	51 3d       	cpi	r21, 0xD1	; 209
    49a2:	51 3d       	cpi	r21, 0xD1	; 209
    49a4:	51 3d       	cpi	r21, 0xD1	; 209
    49a6:	51 3d       	cpi	r21, 0xD1	; 209
    49a8:	51 3d       	cpi	r21, 0xD1	; 209
    49aa:	51 3d       	cpi	r21, 0xD1	; 209
    49ac:	51 3d       	cpi	r21, 0xD1	; 209
    49ae:	51 3d       	cpi	r21, 0xD1	; 209
    49b0:	51 3d       	cpi	r21, 0xD1	; 209
    49b2:	51 3d       	cpi	r21, 0xD1	; 209
    49b4:	01 3d       	cpi	r16, 0xD1	; 209
    49b6:	28 42       	sbci	r18, 0x28	; 40
    49b8:	3e 42       	sbci	r19, 0x2E	; 46
    49ba:	22 42       	sbci	r18, 0x22	; 34
    49bc:	c4 41       	sbci	r28, 0x14	; 20
    49be:	3e 42       	sbci	r19, 0x2E	; 46
    49c0:	07 42       	sbci	r16, 0x27	; 39
    49c2:	bf 41       	sbci	r27, 0x1F	; 31
    49c4:	e3 41       	sbci	r30, 0x13	; 19
    49c6:	01 42       	sbci	r16, 0x21	; 33
    49c8:	fb 41       	sbci	r31, 0x1B	; 27
    49ca:	f5 41       	sbci	r31, 0x15	; 21
    49cc:	e9 41       	sbci	r30, 0x19	; 25
    49ce:	ef 41       	sbci	r30, 0x1F	; 31
    49d0:	f2 4c       	sbci	r31, 0xC2	; 194
    49d2:	f6 4c       	sbci	r31, 0xC6	; 198
    49d4:	1a 4d       	sbci	r17, 0xDA	; 218
    49d6:	1e 4d       	sbci	r17, 0xDE	; 222
    49d8:	22 4d       	sbci	r18, 0xD2	; 210
    49da:	27 4d       	sbci	r18, 0xD7	; 215
    49dc:	2b 4d       	sbci	r18, 0xDB	; 219
    49de:	cf 4c       	sbci	r28, 0xCF	; 207

000049e0 <__ctors_end>:
    49e0:	11 24       	eor	r1, r1
    49e2:	1f be       	out	0x3f, r1	; 63
    49e4:	cf ef       	ldi	r28, 0xFF	; 255
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	df e7       	ldi	r29, 0x7F	; 127
    49ea:	de bf       	out	0x3e, r29	; 62

000049ec <__do_copy_data>:
    49ec:	14 e6       	ldi	r17, 0x64	; 100
    49ee:	a0 e0       	ldi	r26, 0x00	; 0
    49f0:	b0 e6       	ldi	r27, 0x60	; 96
    49f2:	e2 e5       	ldi	r30, 0x52	; 82
    49f4:	f9 ec       	ldi	r31, 0xC9	; 201
    49f6:	02 c0       	rjmp	.+4      	; 0x49fc <__do_copy_data+0x10>
    49f8:	05 90       	lpm	r0, Z+
    49fa:	0d 92       	st	X+, r0
    49fc:	ac 31       	cpi	r26, 0x1C	; 28
    49fe:	b1 07       	cpc	r27, r17
    4a00:	d9 f7       	brne	.-10     	; 0x49f8 <__do_copy_data+0xc>

00004a02 <__do_clear_bss>:
    4a02:	29 e6       	ldi	r18, 0x69	; 105
    4a04:	ac e1       	ldi	r26, 0x1C	; 28
    4a06:	b4 e6       	ldi	r27, 0x64	; 100
    4a08:	01 c0       	rjmp	.+2      	; 0x4a0c <.do_clear_bss_start>

00004a0a <.do_clear_bss_loop>:
    4a0a:	1d 92       	st	X+, r1

00004a0c <.do_clear_bss_start>:
    4a0c:	a9 30       	cpi	r26, 0x09	; 9
    4a0e:	b2 07       	cpc	r27, r18
    4a10:	e1 f7       	brne	.-8      	; 0x4a0a <.do_clear_bss_loop>
    4a12:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <main>
    4a16:	0c 94 a7 64 	jmp	0xc94e	; 0xc94e <_exit>

00004a1a <__bad_interrupt>:
    4a1a:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__vectors>

00004a1e <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
    4a1e:	0e 94 2e 54 	call	0xa85c	; 0xa85c <system_init>

	touch_init();
    4a22:	0e 94 2f 52 	call	0xa45e	; 0xa45e <touch_init>
    4a26:	08 95       	ret

00004a28 <__vector_55>:


/* lin RX接收到一个完整数据产生的中断 */
ISR(USART4_RXC_vect)

{
    4a28:	1f 92       	push	r1
    4a2a:	0f 92       	push	r0
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	0f 92       	push	r0
    4a30:	11 24       	eor	r1, r1
    4a32:	2f 93       	push	r18
    4a34:	3f 93       	push	r19
    4a36:	4f 93       	push	r20
    4a38:	5f 93       	push	r21
    4a3a:	6f 93       	push	r22
    4a3c:	7f 93       	push	r23
    4a3e:	8f 93       	push	r24
    4a40:	9f 93       	push	r25
    4a42:	af 93       	push	r26
    4a44:	bf 93       	push	r27
    4a46:	ef 93       	push	r30
    4a48:	ff 93       	push	r31
   uint8_t index;
   index = (USART4.STATUS & USART_ISFIF_bm) >> USART_ISFIF_bp;
    4a4a:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7f0884>
    4a4e:	88 70       	andi	r24, 0x08	; 8
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	95 95       	asr	r25
    4a54:	87 95       	ror	r24
    4a56:	95 95       	asr	r25
    4a58:	87 95       	ror	r24
    4a5a:	95 95       	asr	r25
    4a5c:	87 95       	ror	r24
   if (index == 1)
    4a5e:	81 30       	cpi	r24, 0x01	; 1
    4a60:	61 f4       	brne	.+24     	; 0x4a7a <__vector_55+0x52>
   {
      LIN_DRV_IRQHandler(0, -1);
    4a62:	4f ef       	ldi	r20, 0xFF	; 255
    4a64:	60 e0       	ldi	r22, 0x00	; 0
    4a66:	70 e0       	ldi	r23, 0x00	; 0
    4a68:	cb 01       	movw	r24, r22
    4a6a:	0e 94 a2 4f 	call	0x9f44	; 0x9f44 <LIN_DRV_IRQHandler>
      USART4.STATUS |= USART_ISFIF_bm;
    4a6e:	e0 e8       	ldi	r30, 0x80	; 128
    4a70:	f8 e0       	ldi	r31, 0x08	; 8
    4a72:	84 81       	ldd	r24, Z+4	; 0x04
    4a74:	88 60       	ori	r24, 0x08	; 8
    4a76:	84 83       	std	Z+4, r24	; 0x04
      return;
    4a78:	1b c0       	rjmp	.+54     	; 0x4ab0 <__vector_55+0x88>
   }

   index = (USART4.RXDATAH & USART_DATA8_bm) >> USART_DATA8_bp;
    4a7a:	80 91 81 08 	lds	r24, 0x0881	; 0x800881 <__TEXT_REGION_LENGTH__+0x7f0881>
   if (index == 0) /* is pid */
    4a7e:	80 fd       	sbrc	r24, 0
    4a80:	0c c0       	rjmp	.+24     	; 0x4a9a <__vector_55+0x72>
   {
      LIN_DRV_IRQHandler(0, 1);
    4a82:	41 e0       	ldi	r20, 0x01	; 1
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	cb 01       	movw	r24, r22
    4a8a:	0e 94 a2 4f 	call	0x9f44	; 0x9f44 <LIN_DRV_IRQHandler>
      USART4.STATUS |= USART_ISFIF_bm;
    4a8e:	e0 e8       	ldi	r30, 0x80	; 128
    4a90:	f8 e0       	ldi	r31, 0x08	; 8
    4a92:	84 81       	ldd	r24, Z+4	; 0x04
    4a94:	88 60       	ori	r24, 0x08	; 8
    4a96:	84 83       	std	Z+4, r24	; 0x04
      return;
    4a98:	0b c0       	rjmp	.+22     	; 0x4ab0 <__vector_55+0x88>
   }

   LIN_DRV_IRQHandler(0, 0);
    4a9a:	40 e0       	ldi	r20, 0x00	; 0
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	70 e0       	ldi	r23, 0x00	; 0
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	0e 94 a2 4f 	call	0x9f44	; 0x9f44 <LIN_DRV_IRQHandler>
   USART4.STATUS |= USART_ISFIF_bm;
    4aa6:	e0 e8       	ldi	r30, 0x80	; 128
    4aa8:	f8 e0       	ldi	r31, 0x08	; 8
    4aaa:	84 81       	ldd	r24, Z+4	; 0x04
    4aac:	88 60       	ori	r24, 0x08	; 8
    4aae:	84 83       	std	Z+4, r24	; 0x04
}
    4ab0:	ff 91       	pop	r31
    4ab2:	ef 91       	pop	r30
    4ab4:	bf 91       	pop	r27
    4ab6:	af 91       	pop	r26
    4ab8:	9f 91       	pop	r25
    4aba:	8f 91       	pop	r24
    4abc:	7f 91       	pop	r23
    4abe:	6f 91       	pop	r22
    4ac0:	5f 91       	pop	r21
    4ac2:	4f 91       	pop	r20
    4ac4:	3f 91       	pop	r19
    4ac6:	2f 91       	pop	r18
    4ac8:	0f 90       	pop	r0
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	0f 90       	pop	r0
    4ace:	1f 90       	pop	r1
    4ad0:	18 95       	reti

00004ad2 <__vector_3>:

/* RTC时钟定时器中断用于触摸时基 */
ISR(RTC_CNT_vect)
{
    4ad2:	1f 92       	push	r1
    4ad4:	0f 92       	push	r0
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	0f 92       	push	r0
    4ada:	11 24       	eor	r1, r1
    4adc:	2f 93       	push	r18
    4ade:	3f 93       	push	r19
    4ae0:	4f 93       	push	r20
    4ae2:	5f 93       	push	r21
    4ae4:	6f 93       	push	r22
    4ae6:	7f 93       	push	r23
    4ae8:	8f 93       	push	r24
    4aea:	9f 93       	push	r25
    4aec:	af 93       	push	r26
    4aee:	bf 93       	push	r27
    4af0:	ef 93       	push	r30
    4af2:	ff 93       	push	r31
	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
    4af4:	0e 94 74 52 	call	0xa4e8	; 0xa4e8 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
    4af8:	82 e0       	ldi	r24, 0x02	; 2
    4afa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f0143>
}
    4afe:	ff 91       	pop	r31
    4b00:	ef 91       	pop	r30
    4b02:	bf 91       	pop	r27
    4b04:	af 91       	pop	r26
    4b06:	9f 91       	pop	r25
    4b08:	8f 91       	pop	r24
    4b0a:	7f 91       	pop	r23
    4b0c:	6f 91       	pop	r22
    4b0e:	5f 91       	pop	r21
    4b10:	4f 91       	pop	r20
    4b12:	3f 91       	pop	r19
    4b14:	2f 91       	pop	r18
    4b16:	0f 90       	pop	r0
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	0f 90       	pop	r0
    4b1c:	1f 90       	pop	r1
    4b1e:	18 95       	reti

00004b20 <__vector_12>:

/* 软件时基定时器中断 */
ISR(TCB0_INT_vect)
{
    4b20:	1f 92       	push	r1
    4b22:	0f 92       	push	r0
    4b24:	0f b6       	in	r0, 0x3f	; 63
    4b26:	0f 92       	push	r0
    4b28:	11 24       	eor	r1, r1
    4b2a:	2f 93       	push	r18
    4b2c:	3f 93       	push	r19
    4b2e:	4f 93       	push	r20
    4b30:	5f 93       	push	r21
    4b32:	6f 93       	push	r22
    4b34:	7f 93       	push	r23
    4b36:	8f 93       	push	r24
    4b38:	9f 93       	push	r25
    4b3a:	af 93       	push	r26
    4b3c:	bf 93       	push	r27
    4b3e:	ef 93       	push	r30
    4b40:	ff 93       	push	r31
	lin_lld_timeout_service(0);
    4b42:	80 e0       	ldi	r24, 0x00	; 0
    4b44:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <lin_lld_timeout_service>
	g_soft_timer_ticks++;
    4b48:	80 91 62 67 	lds	r24, 0x6762	; 0x806762 <g_soft_timer_ticks>
    4b4c:	90 91 63 67 	lds	r25, 0x6763	; 0x806763 <g_soft_timer_ticks+0x1>
    4b50:	01 96       	adiw	r24, 0x01	; 1
    4b52:	80 93 62 67 	sts	0x6762, r24	; 0x806762 <g_soft_timer_ticks>
    4b56:	90 93 63 67 	sts	0x6763, r25	; 0x806763 <g_soft_timer_ticks+0x1>
	TCB0.INTFLAGS = TCB_CAPT_bm;
    4b5a:	81 e0       	ldi	r24, 0x01	; 1
    4b5c:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
}
    4b60:	ff 91       	pop	r31
    4b62:	ef 91       	pop	r30
    4b64:	bf 91       	pop	r27
    4b66:	af 91       	pop	r26
    4b68:	9f 91       	pop	r25
    4b6a:	8f 91       	pop	r24
    4b6c:	7f 91       	pop	r23
    4b6e:	6f 91       	pop	r22
    4b70:	5f 91       	pop	r21
    4b72:	4f 91       	pop	r20
    4b74:	3f 91       	pop	r19
    4b76:	2f 91       	pop	r18
    4b78:	0f 90       	pop	r0
    4b7a:	0f be       	out	0x3f, r0	; 63
    4b7c:	0f 90       	pop	r0
    4b7e:	1f 90       	pop	r1
    4b80:	18 95       	reti

00004b82 <soft_timer_sin_data_task>:
};
uint8_t sin_data_out_flg=0;

void soft_timer_sin_data_task(void)
{
	if(sin_data_out_flg==1)
    4b82:	80 91 1c 64 	lds	r24, 0x641C	; 0x80641c <__data_end>
    4b86:	81 30       	cpi	r24, 0x01	; 1
    4b88:	01 f5       	brne	.+64     	; 0x4bca <soft_timer_sin_data_task+0x48>
	{
		if(sin_data_index<(sizeof(sin_data)/sizeof(sin_data[0])))
    4b8a:	80 91 1d 64 	lds	r24, 0x641D	; 0x80641d <sin_data_index>
    4b8e:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <sin_data_index+0x1>
    4b92:	85 33       	cpi	r24, 0x35	; 53
    4b94:	91 05       	cpc	r25, r1
    4b96:	98 f4       	brcc	.+38     	; 0x4bbe <soft_timer_sin_data_task+0x3c>
		{
			DAC_0_set_output(sin_data[sin_data_index]);
    4b98:	88 0f       	add	r24, r24
    4b9a:	99 1f       	adc	r25, r25
    4b9c:	fc 01       	movw	r30, r24
    4b9e:	ea 5f       	subi	r30, 0xFA	; 250
    4ba0:	ff 49       	sbci	r31, 0x9F	; 159
    4ba2:	80 81       	ld	r24, Z
    4ba4:	91 81       	ldd	r25, Z+1	; 0x01
    4ba6:	0e 94 74 53 	call	0xa6e8	; 0xa6e8 <DAC_0_set_output>
			sin_data_index++;
    4baa:	80 91 1d 64 	lds	r24, 0x641D	; 0x80641d <sin_data_index>
    4bae:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <sin_data_index+0x1>
    4bb2:	01 96       	adiw	r24, 0x01	; 1
    4bb4:	80 93 1d 64 	sts	0x641D, r24	; 0x80641d <sin_data_index>
    4bb8:	90 93 1e 64 	sts	0x641E, r25	; 0x80641e <sin_data_index+0x1>
    4bbc:	08 95       	ret
		}else{
			sin_data_index=0;
    4bbe:	10 92 1d 64 	sts	0x641D, r1	; 0x80641d <sin_data_index>
    4bc2:	10 92 1e 64 	sts	0x641E, r1	; 0x80641e <sin_data_index+0x1>
			sin_data_out_flg=0;
    4bc6:	10 92 1c 64 	sts	0x641C, r1	; 0x80641c <__data_end>
    4bca:	08 95       	ret

00004bcc <__vector_13>:
		}
	}
}

ISR(TCB1_INT_vect)
{
    4bcc:	1f 92       	push	r1
    4bce:	0f 92       	push	r0
    4bd0:	0f b6       	in	r0, 0x3f	; 63
    4bd2:	0f 92       	push	r0
    4bd4:	11 24       	eor	r1, r1
    4bd6:	2f 93       	push	r18
    4bd8:	3f 93       	push	r19
    4bda:	4f 93       	push	r20
    4bdc:	5f 93       	push	r21
    4bde:	6f 93       	push	r22
    4be0:	7f 93       	push	r23
    4be2:	8f 93       	push	r24
    4be4:	9f 93       	push	r25
    4be6:	af 93       	push	r26
    4be8:	bf 93       	push	r27
    4bea:	ef 93       	push	r30
    4bec:	ff 93       	push	r31
	soft_timer_sin_data_task();
    4bee:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <soft_timer_sin_data_task>
	TCB1.INTFLAGS = TCB_CAPT_bm;
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7f0b16>
}
    4bf8:	ff 91       	pop	r31
    4bfa:	ef 91       	pop	r30
    4bfc:	bf 91       	pop	r27
    4bfe:	af 91       	pop	r26
    4c00:	9f 91       	pop	r25
    4c02:	8f 91       	pop	r24
    4c04:	7f 91       	pop	r23
    4c06:	6f 91       	pop	r22
    4c08:	5f 91       	pop	r21
    4c0a:	4f 91       	pop	r20
    4c0c:	3f 91       	pop	r19
    4c0e:	2f 91       	pop	r18
    4c10:	0f 90       	pop	r0
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	0f 90       	pop	r0
    4c16:	1f 90       	pop	r1
    4c18:	18 95       	reti

00004c1a <backlight_cb>:
/* 背光亮度控制回调函数注册 */
void backlight_cb(uint32_t duty);
backlight_cb_t g_backlight_cb = backlight_cb;
void backlight_cb(uint32_t duty)
{
    TCA0.SPLIT.HCMP0 = duty;
    4c1a:	60 93 29 0a 	sts	0x0A29, r22	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f0a29>
    4c1e:	08 95       	ret

00004c20 <rear_led_ctrl>:
    btn_rear_tick_task();
}

void rear_led_ctrl(uint8_t status)
{
    if (status == 1)
    4c20:	81 30       	cpi	r24, 0x01	; 1
    4c22:	49 f4       	brne	.+18     	; 0x4c36 <rear_led_ctrl+0x16>
    {
        led_set_level(led_d5, 1);
    4c24:	61 e0       	ldi	r22, 0x01	; 1
    4c26:	82 e0       	ldi	r24, 0x02	; 2
    4c28:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
        led_set_level(led_d6, 0);
    4c2c:	60 e0       	ldi	r22, 0x00	; 0
    4c2e:	83 e0       	ldi	r24, 0x03	; 3
    4c30:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
    4c34:	08 95       	ret
    }
    else
    {
        led_set_level(led_d5, 0);
    4c36:	60 e0       	ldi	r22, 0x00	; 0
    4c38:	82 e0       	ldi	r24, 0x02	; 2
    4c3a:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
        led_set_level(led_d6, 1);
    4c3e:	61 e0       	ldi	r22, 0x01	; 1
    4c40:	83 e0       	ldi	r24, 0x03	; 3
    4c42:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
    4c46:	08 95       	ret

00004c48 <window_lock_led_cb>:
    .signal_cb = window_lock_signal_cb,
};

void window_lock_led_cb(uint8_t status)
{
    if (status == 1)
    4c48:	81 30       	cpi	r24, 0x01	; 1
    4c4a:	49 f4       	brne	.+18     	; 0x4c5e <window_lock_led_cb+0x16>
    {
        led_set_level(led_d7, 1);
    4c4c:	61 e0       	ldi	r22, 0x01	; 1
    4c4e:	84 e0       	ldi	r24, 0x04	; 4
    4c50:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
        led_set_level(led_d8, 0);
    4c54:	60 e0       	ldi	r22, 0x00	; 0
    4c56:	85 e0       	ldi	r24, 0x05	; 5
    4c58:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
    4c5c:	08 95       	ret
    }
    else
    {
        led_set_level(led_d7, 0);
    4c5e:	60 e0       	ldi	r22, 0x00	; 0
    4c60:	84 e0       	ldi	r24, 0x04	; 4
    4c62:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
        led_set_level(led_d8, 1);
    4c66:	61 e0       	ldi	r22, 0x01	; 1
    4c68:	85 e0       	ldi	r24, 0x05	; 5
    4c6a:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <led_set_level>
    4c6e:	08 95       	ret

00004c70 <soft_timer_lin_signal_update_task>:
    .backlight_brightness = 3,
};
/* lin信号更新到变量定时器任务 */
void soft_timer_lin_signal_update_task(void)
{
    if (l_u8_rd_LI0_DDCU_BDCS1_Backlight_brightness_fb() != 0)
    4c70:	80 91 dc 60 	lds	r24, 0x60DC	; 0x8060dc <g_lin_frame_data_buffer+0x4>
    4c74:	82 95       	swap	r24
    4c76:	8f 70       	andi	r24, 0x0F	; 15
    4c78:	59 f0       	breq	.+22     	; 0x4c90 <soft_timer_lin_signal_update_task+0x20>
    {
        g_lin_rx_signal.backlight_brightness = l_u8_rd_LI0_DDCU_BDCS1_Backlight_brightness_fb();
    4c7a:	80 91 dc 60 	lds	r24, 0x60DC	; 0x8060dc <g_lin_frame_data_buffer+0x4>
    4c7e:	98 2f       	mov	r25, r24
    4c80:	92 95       	swap	r25
    4c82:	9f 70       	andi	r25, 0x0F	; 15
    4c84:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    4c88:	80 7f       	andi	r24, 0xF0	; 240
    4c8a:	89 2b       	or	r24, r25
    4c8c:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    }
    g_lin_rx_signal.backlight_status = l_bool_rd_LI0_DDCU_BDCS1_BacklightStatus();
    4c90:	e8 ed       	ldi	r30, 0xD8	; 216
    4c92:	f0 e6       	ldi	r31, 0x60	; 96
    4c94:	90 81       	ld	r25, Z
    4c96:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    4c9a:	90 fb       	bst	r25, 0
    4c9c:	85 f9       	bld	r24, 5
    4c9e:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    g_lin_rx_signal.ctrl_window_lock = l_bool_rd_LI0_DDCU_ControlWindowLockSwInd();
    4ca2:	95 81       	ldd	r25, Z+5	; 0x05
    4ca4:	90 fb       	bst	r25, 0
    4ca6:	84 f9       	bld	r24, 4
    4ca8:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    4cac:	08 95       	ret

00004cae <ep40_lin_signal_update_while_task>:

lin_signal_cnt_t g_lin_signal_cnt[LIN_NUM_OF_SIGS];

void ep40_lin_signal_update_while_task(void)
{
    for (uint8_t i = 0; i < LIN_NUM_OF_SIGS; i++)
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	18 c2       	rjmp	.+1072   	; 0x50e2 <ep40_lin_signal_update_while_task+0x434>
    {
        switch (i)
    4cb2:	82 2f       	mov	r24, r18
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	34 97       	sbiw	r30, 0x04	; 4
    4cba:	ea 30       	cpi	r30, 0x0A	; 10
    4cbc:	f1 05       	cpc	r31, r1
    4cbe:	08 f0       	brcs	.+2      	; 0x4cc2 <ep40_lin_signal_update_while_task+0x14>
    4cc0:	0f c2       	rjmp	.+1054   	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
    4cc2:	e0 58       	subi	r30, 0x80	; 128
    4cc4:	fb 4d       	sbci	r31, 0xDB	; 219
    4cc6:	0c 94 3c 63 	jmp	0xc678	; 0xc678 <__tablejump2__>
        {
        case LI0_DFGLS_FLWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4cca:	82 2f       	mov	r24, r18
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	fc 01       	movw	r30, r24
    4cd0:	ee 0f       	add	r30, r30
    4cd2:	ff 1f       	adc	r31, r31
    4cd4:	e8 0f       	add	r30, r24
    4cd6:	f9 1f       	adc	r31, r25
    4cd8:	eb 59       	subi	r30, 0x9B	; 155
    4cda:	f8 49       	sbci	r31, 0x98	; 152
    4cdc:	30 81       	ld	r19, Z
    4cde:	33 23       	and	r19, r19
    4ce0:	d9 f0       	breq	.+54     	; 0x4d18 <ep40_lin_signal_update_while_task+0x6a>
            {
                g_lin_signal_cnt[i].cnt--;
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	ee 0f       	add	r30, r30
    4ce6:	ff 1f       	adc	r31, r31
    4ce8:	8e 0f       	add	r24, r30
    4cea:	9f 1f       	adc	r25, r31
    4cec:	fc 01       	movw	r30, r24
    4cee:	eb 59       	subi	r30, 0x9B	; 155
    4cf0:	f8 49       	sbci	r31, 0x98	; 152
    4cf2:	31 50       	subi	r19, 0x01	; 1
    4cf4:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_FLWindowControl(g_lin_signal_cnt[i].val);
    4cf6:	a8 ed       	ldi	r26, 0xD8	; 216
    4cf8:	b0 e6       	ldi	r27, 0x60	; 96
    4cfa:	18 96       	adiw	r26, 0x08	; 8
    4cfc:	9c 91       	ld	r25, X
    4cfe:	18 97       	sbiw	r26, 0x08	; 8
    4d00:	81 81       	ldd	r24, Z+1	; 0x01
    4d02:	98 7f       	andi	r25, 0xF8	; 248
    4d04:	87 70       	andi	r24, 0x07	; 7
    4d06:	89 2b       	or	r24, r25
    4d08:	18 96       	adiw	r26, 0x08	; 8
    4d0a:	8c 93       	st	X, r24
    4d0c:	e5 ed       	ldi	r30, 0xD5	; 213
    4d0e:	f0 e6       	ldi	r31, 0x60	; 96
    4d10:	81 81       	ldd	r24, Z+1	; 0x01
    4d12:	8e 7f       	andi	r24, 0xFE	; 254
    4d14:	81 83       	std	Z+1, r24	; 0x01
    4d16:	e4 c1       	rjmp	.+968    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_FLWindowControl(0);
    4d18:	e8 ed       	ldi	r30, 0xD8	; 216
    4d1a:	f0 e6       	ldi	r31, 0x60	; 96
    4d1c:	80 85       	ldd	r24, Z+8	; 0x08
    4d1e:	88 7f       	andi	r24, 0xF8	; 248
    4d20:	80 87       	std	Z+8, r24	; 0x08
    4d22:	e5 ed       	ldi	r30, 0xD5	; 213
    4d24:	f0 e6       	ldi	r31, 0x60	; 96
    4d26:	81 81       	ldd	r24, Z+1	; 0x01
    4d28:	8e 7f       	andi	r24, 0xFE	; 254
    4d2a:	81 83       	std	Z+1, r24	; 0x01
    4d2c:	d9 c1       	rjmp	.+946    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_FRWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4d2e:	82 2f       	mov	r24, r18
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	fc 01       	movw	r30, r24
    4d34:	ee 0f       	add	r30, r30
    4d36:	ff 1f       	adc	r31, r31
    4d38:	e8 0f       	add	r30, r24
    4d3a:	f9 1f       	adc	r31, r25
    4d3c:	eb 59       	subi	r30, 0x9B	; 155
    4d3e:	f8 49       	sbci	r31, 0x98	; 152
    4d40:	30 81       	ld	r19, Z
    4d42:	33 23       	and	r19, r19
    4d44:	f1 f0       	breq	.+60     	; 0x4d82 <ep40_lin_signal_update_while_task+0xd4>
            {
                g_lin_signal_cnt[i].cnt--;
    4d46:	fc 01       	movw	r30, r24
    4d48:	ee 0f       	add	r30, r30
    4d4a:	ff 1f       	adc	r31, r31
    4d4c:	8e 0f       	add	r24, r30
    4d4e:	9f 1f       	adc	r25, r31
    4d50:	fc 01       	movw	r30, r24
    4d52:	eb 59       	subi	r30, 0x9B	; 155
    4d54:	f8 49       	sbci	r31, 0x98	; 152
    4d56:	31 50       	subi	r19, 0x01	; 1
    4d58:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_FRWindowControl(g_lin_signal_cnt[i].val);
    4d5a:	a8 ed       	ldi	r26, 0xD8	; 216
    4d5c:	b0 e6       	ldi	r27, 0x60	; 96
    4d5e:	18 96       	adiw	r26, 0x08	; 8
    4d60:	8c 91       	ld	r24, X
    4d62:	18 97       	sbiw	r26, 0x08	; 8
    4d64:	91 81       	ldd	r25, Z+1	; 0x01
    4d66:	99 0f       	add	r25, r25
    4d68:	99 0f       	add	r25, r25
    4d6a:	99 0f       	add	r25, r25
    4d6c:	98 73       	andi	r25, 0x38	; 56
    4d6e:	87 7c       	andi	r24, 0xC7	; 199
    4d70:	89 2b       	or	r24, r25
    4d72:	18 96       	adiw	r26, 0x08	; 8
    4d74:	8c 93       	st	X, r24
    4d76:	e5 ed       	ldi	r30, 0xD5	; 213
    4d78:	f0 e6       	ldi	r31, 0x60	; 96
    4d7a:	81 81       	ldd	r24, Z+1	; 0x01
    4d7c:	8d 7f       	andi	r24, 0xFD	; 253
    4d7e:	81 83       	std	Z+1, r24	; 0x01
    4d80:	af c1       	rjmp	.+862    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_FRWindowControl(0);
    4d82:	e8 ed       	ldi	r30, 0xD8	; 216
    4d84:	f0 e6       	ldi	r31, 0x60	; 96
    4d86:	80 85       	ldd	r24, Z+8	; 0x08
    4d88:	87 7c       	andi	r24, 0xC7	; 199
    4d8a:	80 87       	std	Z+8, r24	; 0x08
    4d8c:	e5 ed       	ldi	r30, 0xD5	; 213
    4d8e:	f0 e6       	ldi	r31, 0x60	; 96
    4d90:	81 81       	ldd	r24, Z+1	; 0x01
    4d92:	8d 7f       	andi	r24, 0xFD	; 253
    4d94:	81 83       	std	Z+1, r24	; 0x01
    4d96:	a4 c1       	rjmp	.+840    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ControlWindowLockSw:
            if (g_lin_signal_cnt[i].cnt > 0)
    4d98:	82 2f       	mov	r24, r18
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	fc 01       	movw	r30, r24
    4d9e:	ee 0f       	add	r30, r30
    4da0:	ff 1f       	adc	r31, r31
    4da2:	e8 0f       	add	r30, r24
    4da4:	f9 1f       	adc	r31, r25
    4da6:	eb 59       	subi	r30, 0x9B	; 155
    4da8:	f8 49       	sbci	r31, 0x98	; 152
    4daa:	30 81       	ld	r19, Z
    4dac:	33 23       	and	r19, r19
    4dae:	f1 f0       	breq	.+60     	; 0x4dec <ep40_lin_signal_update_while_task+0x13e>
            {
                g_lin_signal_cnt[i].cnt--;
    4db0:	fc 01       	movw	r30, r24
    4db2:	ee 0f       	add	r30, r30
    4db4:	ff 1f       	adc	r31, r31
    4db6:	8e 0f       	add	r24, r30
    4db8:	9f 1f       	adc	r25, r31
    4dba:	fc 01       	movw	r30, r24
    4dbc:	eb 59       	subi	r30, 0x9B	; 155
    4dbe:	f8 49       	sbci	r31, 0x98	; 152
    4dc0:	31 50       	subi	r19, 0x01	; 1
    4dc2:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ControlWindowLockSw(g_lin_signal_cnt[i].val);
    4dc4:	81 81       	ldd	r24, Z+1	; 0x01
    4dc6:	88 23       	and	r24, r24
    4dc8:	31 f0       	breq	.+12     	; 0x4dd6 <ep40_lin_signal_update_while_task+0x128>
    4dca:	e8 ed       	ldi	r30, 0xD8	; 216
    4dcc:	f0 e6       	ldi	r31, 0x60	; 96
    4dce:	80 85       	ldd	r24, Z+8	; 0x08
    4dd0:	80 64       	ori	r24, 0x40	; 64
    4dd2:	80 87       	std	Z+8, r24	; 0x08
    4dd4:	05 c0       	rjmp	.+10     	; 0x4de0 <ep40_lin_signal_update_while_task+0x132>
    4dd6:	e8 ed       	ldi	r30, 0xD8	; 216
    4dd8:	f0 e6       	ldi	r31, 0x60	; 96
    4dda:	80 85       	ldd	r24, Z+8	; 0x08
    4ddc:	8f 7b       	andi	r24, 0xBF	; 191
    4dde:	80 87       	std	Z+8, r24	; 0x08
    4de0:	e5 ed       	ldi	r30, 0xD5	; 213
    4de2:	f0 e6       	ldi	r31, 0x60	; 96
    4de4:	81 81       	ldd	r24, Z+1	; 0x01
    4de6:	8b 7f       	andi	r24, 0xFB	; 251
    4de8:	81 83       	std	Z+1, r24	; 0x01
    4dea:	7a c1       	rjmp	.+756    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ControlWindowLockSw(0);
    4dec:	e8 ed       	ldi	r30, 0xD8	; 216
    4dee:	f0 e6       	ldi	r31, 0x60	; 96
    4df0:	80 85       	ldd	r24, Z+8	; 0x08
    4df2:	8f 7b       	andi	r24, 0xBF	; 191
    4df4:	80 87       	std	Z+8, r24	; 0x08
    4df6:	e5 ed       	ldi	r30, 0xD5	; 213
    4df8:	f0 e6       	ldi	r31, 0x60	; 96
    4dfa:	81 81       	ldd	r24, Z+1	; 0x01
    4dfc:	8b 7f       	andi	r24, 0xFB	; 251
    4dfe:	81 83       	std	Z+1, r24	; 0x01
    4e00:	6f c1       	rjmp	.+734    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ErrorSts:
            if (g_lin_signal_cnt[i].cnt > 0)
    4e02:	82 2f       	mov	r24, r18
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	fc 01       	movw	r30, r24
    4e08:	ee 0f       	add	r30, r30
    4e0a:	ff 1f       	adc	r31, r31
    4e0c:	e8 0f       	add	r30, r24
    4e0e:	f9 1f       	adc	r31, r25
    4e10:	eb 59       	subi	r30, 0x9B	; 155
    4e12:	f8 49       	sbci	r31, 0x98	; 152
    4e14:	30 81       	ld	r19, Z
    4e16:	33 23       	and	r19, r19
    4e18:	f1 f0       	breq	.+60     	; 0x4e56 <ep40_lin_signal_update_while_task+0x1a8>
            {
                g_lin_signal_cnt[i].cnt--;
    4e1a:	fc 01       	movw	r30, r24
    4e1c:	ee 0f       	add	r30, r30
    4e1e:	ff 1f       	adc	r31, r31
    4e20:	8e 0f       	add	r24, r30
    4e22:	9f 1f       	adc	r25, r31
    4e24:	fc 01       	movw	r30, r24
    4e26:	eb 59       	subi	r30, 0x9B	; 155
    4e28:	f8 49       	sbci	r31, 0x98	; 152
    4e2a:	31 50       	subi	r19, 0x01	; 1
    4e2c:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ErrorSts(g_lin_signal_cnt[i].val);
    4e2e:	81 81       	ldd	r24, Z+1	; 0x01
    4e30:	88 23       	and	r24, r24
    4e32:	31 f0       	breq	.+12     	; 0x4e40 <ep40_lin_signal_update_while_task+0x192>
    4e34:	e8 ed       	ldi	r30, 0xD8	; 216
    4e36:	f0 e6       	ldi	r31, 0x60	; 96
    4e38:	80 85       	ldd	r24, Z+8	; 0x08
    4e3a:	80 68       	ori	r24, 0x80	; 128
    4e3c:	80 87       	std	Z+8, r24	; 0x08
    4e3e:	05 c0       	rjmp	.+10     	; 0x4e4a <ep40_lin_signal_update_while_task+0x19c>
    4e40:	e8 ed       	ldi	r30, 0xD8	; 216
    4e42:	f0 e6       	ldi	r31, 0x60	; 96
    4e44:	80 85       	ldd	r24, Z+8	; 0x08
    4e46:	8f 77       	andi	r24, 0x7F	; 127
    4e48:	80 87       	std	Z+8, r24	; 0x08
    4e4a:	e5 ed       	ldi	r30, 0xD5	; 213
    4e4c:	f0 e6       	ldi	r31, 0x60	; 96
    4e4e:	81 81       	ldd	r24, Z+1	; 0x01
    4e50:	87 7f       	andi	r24, 0xF7	; 247
    4e52:	81 83       	std	Z+1, r24	; 0x01
    4e54:	45 c1       	rjmp	.+650    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ErrorSts(0);
    4e56:	e8 ed       	ldi	r30, 0xD8	; 216
    4e58:	f0 e6       	ldi	r31, 0x60	; 96
    4e5a:	80 85       	ldd	r24, Z+8	; 0x08
    4e5c:	8f 77       	andi	r24, 0x7F	; 127
    4e5e:	80 87       	std	Z+8, r24	; 0x08
    4e60:	e5 ed       	ldi	r30, 0xD5	; 213
    4e62:	f0 e6       	ldi	r31, 0x60	; 96
    4e64:	81 81       	ldd	r24, Z+1	; 0x01
    4e66:	87 7f       	andi	r24, 0xF7	; 247
    4e68:	81 83       	std	Z+1, r24	; 0x01
    4e6a:	3a c1       	rjmp	.+628    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_RLWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4e6c:	82 2f       	mov	r24, r18
    4e6e:	90 e0       	ldi	r25, 0x00	; 0
    4e70:	fc 01       	movw	r30, r24
    4e72:	ee 0f       	add	r30, r30
    4e74:	ff 1f       	adc	r31, r31
    4e76:	e8 0f       	add	r30, r24
    4e78:	f9 1f       	adc	r31, r25
    4e7a:	eb 59       	subi	r30, 0x9B	; 155
    4e7c:	f8 49       	sbci	r31, 0x98	; 152
    4e7e:	30 81       	ld	r19, Z
    4e80:	33 23       	and	r19, r19
    4e82:	d9 f0       	breq	.+54     	; 0x4eba <ep40_lin_signal_update_while_task+0x20c>
            {
                g_lin_signal_cnt[i].cnt--;
    4e84:	fc 01       	movw	r30, r24
    4e86:	ee 0f       	add	r30, r30
    4e88:	ff 1f       	adc	r31, r31
    4e8a:	8e 0f       	add	r24, r30
    4e8c:	9f 1f       	adc	r25, r31
    4e8e:	fc 01       	movw	r30, r24
    4e90:	eb 59       	subi	r30, 0x9B	; 155
    4e92:	f8 49       	sbci	r31, 0x98	; 152
    4e94:	31 50       	subi	r19, 0x01	; 1
    4e96:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_RLWindowControl(g_lin_signal_cnt[i].val);
    4e98:	a8 ed       	ldi	r26, 0xD8	; 216
    4e9a:	b0 e6       	ldi	r27, 0x60	; 96
    4e9c:	19 96       	adiw	r26, 0x09	; 9
    4e9e:	9c 91       	ld	r25, X
    4ea0:	19 97       	sbiw	r26, 0x09	; 9
    4ea2:	81 81       	ldd	r24, Z+1	; 0x01
    4ea4:	98 7f       	andi	r25, 0xF8	; 248
    4ea6:	87 70       	andi	r24, 0x07	; 7
    4ea8:	89 2b       	or	r24, r25
    4eaa:	19 96       	adiw	r26, 0x09	; 9
    4eac:	8c 93       	st	X, r24
    4eae:	e5 ed       	ldi	r30, 0xD5	; 213
    4eb0:	f0 e6       	ldi	r31, 0x60	; 96
    4eb2:	81 81       	ldd	r24, Z+1	; 0x01
    4eb4:	8f 7e       	andi	r24, 0xEF	; 239
    4eb6:	81 83       	std	Z+1, r24	; 0x01
    4eb8:	13 c1       	rjmp	.+550    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_RLWindowControl(0);
    4eba:	e8 ed       	ldi	r30, 0xD8	; 216
    4ebc:	f0 e6       	ldi	r31, 0x60	; 96
    4ebe:	81 85       	ldd	r24, Z+9	; 0x09
    4ec0:	88 7f       	andi	r24, 0xF8	; 248
    4ec2:	81 87       	std	Z+9, r24	; 0x09
    4ec4:	e5 ed       	ldi	r30, 0xD5	; 213
    4ec6:	f0 e6       	ldi	r31, 0x60	; 96
    4ec8:	81 81       	ldd	r24, Z+1	; 0x01
    4eca:	8f 7e       	andi	r24, 0xEF	; 239
    4ecc:	81 83       	std	Z+1, r24	; 0x01
    4ece:	08 c1       	rjmp	.+528    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_RRWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4ed0:	82 2f       	mov	r24, r18
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	fc 01       	movw	r30, r24
    4ed6:	ee 0f       	add	r30, r30
    4ed8:	ff 1f       	adc	r31, r31
    4eda:	e8 0f       	add	r30, r24
    4edc:	f9 1f       	adc	r31, r25
    4ede:	eb 59       	subi	r30, 0x9B	; 155
    4ee0:	f8 49       	sbci	r31, 0x98	; 152
    4ee2:	30 81       	ld	r19, Z
    4ee4:	33 23       	and	r19, r19
    4ee6:	f1 f0       	breq	.+60     	; 0x4f24 <ep40_lin_signal_update_while_task+0x276>
            {
                g_lin_signal_cnt[i].cnt--;
    4ee8:	fc 01       	movw	r30, r24
    4eea:	ee 0f       	add	r30, r30
    4eec:	ff 1f       	adc	r31, r31
    4eee:	8e 0f       	add	r24, r30
    4ef0:	9f 1f       	adc	r25, r31
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	eb 59       	subi	r30, 0x9B	; 155
    4ef6:	f8 49       	sbci	r31, 0x98	; 152
    4ef8:	31 50       	subi	r19, 0x01	; 1
    4efa:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_RRWindowControl(g_lin_signal_cnt[i].val);
    4efc:	a8 ed       	ldi	r26, 0xD8	; 216
    4efe:	b0 e6       	ldi	r27, 0x60	; 96
    4f00:	19 96       	adiw	r26, 0x09	; 9
    4f02:	8c 91       	ld	r24, X
    4f04:	19 97       	sbiw	r26, 0x09	; 9
    4f06:	91 81       	ldd	r25, Z+1	; 0x01
    4f08:	99 0f       	add	r25, r25
    4f0a:	99 0f       	add	r25, r25
    4f0c:	99 0f       	add	r25, r25
    4f0e:	98 73       	andi	r25, 0x38	; 56
    4f10:	87 7c       	andi	r24, 0xC7	; 199
    4f12:	89 2b       	or	r24, r25
    4f14:	19 96       	adiw	r26, 0x09	; 9
    4f16:	8c 93       	st	X, r24
    4f18:	e5 ed       	ldi	r30, 0xD5	; 213
    4f1a:	f0 e6       	ldi	r31, 0x60	; 96
    4f1c:	81 81       	ldd	r24, Z+1	; 0x01
    4f1e:	8f 7d       	andi	r24, 0xDF	; 223
    4f20:	81 83       	std	Z+1, r24	; 0x01
    4f22:	de c0       	rjmp	.+444    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_RRWindowControl(0);
    4f24:	e8 ed       	ldi	r30, 0xD8	; 216
    4f26:	f0 e6       	ldi	r31, 0x60	; 96
    4f28:	81 85       	ldd	r24, Z+9	; 0x09
    4f2a:	87 7c       	andi	r24, 0xC7	; 199
    4f2c:	81 87       	std	Z+9, r24	; 0x09
    4f2e:	e5 ed       	ldi	r30, 0xD5	; 213
    4f30:	f0 e6       	ldi	r31, 0x60	; 96
    4f32:	81 81       	ldd	r24, Z+1	; 0x01
    4f34:	8f 7d       	andi	r24, 0xDF	; 223
    4f36:	81 83       	std	Z+1, r24	; 0x01
    4f38:	d3 c0       	rjmp	.+422    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ButtonSoundRequest:
            if (g_lin_signal_cnt[i].cnt > 0)
    4f3a:	82 2f       	mov	r24, r18
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	fc 01       	movw	r30, r24
    4f40:	ee 0f       	add	r30, r30
    4f42:	ff 1f       	adc	r31, r31
    4f44:	e8 0f       	add	r30, r24
    4f46:	f9 1f       	adc	r31, r25
    4f48:	eb 59       	subi	r30, 0x9B	; 155
    4f4a:	f8 49       	sbci	r31, 0x98	; 152
    4f4c:	30 81       	ld	r19, Z
    4f4e:	33 23       	and	r19, r19
    4f50:	f1 f0       	breq	.+60     	; 0x4f8e <ep40_lin_signal_update_while_task+0x2e0>
            {
                g_lin_signal_cnt[i].cnt--;
    4f52:	fc 01       	movw	r30, r24
    4f54:	ee 0f       	add	r30, r30
    4f56:	ff 1f       	adc	r31, r31
    4f58:	8e 0f       	add	r24, r30
    4f5a:	9f 1f       	adc	r25, r31
    4f5c:	fc 01       	movw	r30, r24
    4f5e:	eb 59       	subi	r30, 0x9B	; 155
    4f60:	f8 49       	sbci	r31, 0x98	; 152
    4f62:	31 50       	subi	r19, 0x01	; 1
    4f64:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ButtonSoundRequest(g_lin_signal_cnt[i].val);
    4f66:	81 81       	ldd	r24, Z+1	; 0x01
    4f68:	88 23       	and	r24, r24
    4f6a:	31 f0       	breq	.+12     	; 0x4f78 <ep40_lin_signal_update_while_task+0x2ca>
    4f6c:	e8 ed       	ldi	r30, 0xD8	; 216
    4f6e:	f0 e6       	ldi	r31, 0x60	; 96
    4f70:	81 85       	ldd	r24, Z+9	; 0x09
    4f72:	80 64       	ori	r24, 0x40	; 64
    4f74:	81 87       	std	Z+9, r24	; 0x09
    4f76:	05 c0       	rjmp	.+10     	; 0x4f82 <ep40_lin_signal_update_while_task+0x2d4>
    4f78:	e8 ed       	ldi	r30, 0xD8	; 216
    4f7a:	f0 e6       	ldi	r31, 0x60	; 96
    4f7c:	81 85       	ldd	r24, Z+9	; 0x09
    4f7e:	8f 7b       	andi	r24, 0xBF	; 191
    4f80:	81 87       	std	Z+9, r24	; 0x09
    4f82:	e5 ed       	ldi	r30, 0xD5	; 213
    4f84:	f0 e6       	ldi	r31, 0x60	; 96
    4f86:	81 81       	ldd	r24, Z+1	; 0x01
    4f88:	8f 7b       	andi	r24, 0xBF	; 191
    4f8a:	81 83       	std	Z+1, r24	; 0x01
    4f8c:	a9 c0       	rjmp	.+338    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ButtonSoundRequest(0);
    4f8e:	e8 ed       	ldi	r30, 0xD8	; 216
    4f90:	f0 e6       	ldi	r31, 0x60	; 96
    4f92:	81 85       	ldd	r24, Z+9	; 0x09
    4f94:	8f 7b       	andi	r24, 0xBF	; 191
    4f96:	81 87       	std	Z+9, r24	; 0x09
    4f98:	e5 ed       	ldi	r30, 0xD5	; 213
    4f9a:	f0 e6       	ldi	r31, 0x60	; 96
    4f9c:	81 81       	ldd	r24, Z+1	; 0x01
    4f9e:	8f 7b       	andi	r24, 0xBF	; 191
    4fa0:	81 83       	std	Z+1, r24	; 0x01
    4fa2:	9e c0       	rjmp	.+316    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Voltage_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
    4fa4:	82 2f       	mov	r24, r18
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	fc 01       	movw	r30, r24
    4faa:	ee 0f       	add	r30, r30
    4fac:	ff 1f       	adc	r31, r31
    4fae:	e8 0f       	add	r30, r24
    4fb0:	f9 1f       	adc	r31, r25
    4fb2:	eb 59       	subi	r30, 0x9B	; 155
    4fb4:	f8 49       	sbci	r31, 0x98	; 152
    4fb6:	30 81       	ld	r19, Z
    4fb8:	33 23       	and	r19, r19
    4fba:	f1 f0       	breq	.+60     	; 0x4ff8 <ep40_lin_signal_update_while_task+0x34a>
            {
                g_lin_signal_cnt[i].cnt--;
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	ee 0f       	add	r30, r30
    4fc0:	ff 1f       	adc	r31, r31
    4fc2:	8e 0f       	add	r24, r30
    4fc4:	9f 1f       	adc	r25, r31
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	eb 59       	subi	r30, 0x9B	; 155
    4fca:	f8 49       	sbci	r31, 0x98	; 152
    4fcc:	31 50       	subi	r19, 0x01	; 1
    4fce:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Voltage_errorCode(g_lin_signal_cnt[i].val);
    4fd0:	81 81       	ldd	r24, Z+1	; 0x01
    4fd2:	88 23       	and	r24, r24
    4fd4:	31 f0       	breq	.+12     	; 0x4fe2 <ep40_lin_signal_update_while_task+0x334>
    4fd6:	e8 ed       	ldi	r30, 0xD8	; 216
    4fd8:	f0 e6       	ldi	r31, 0x60	; 96
    4fda:	82 85       	ldd	r24, Z+10	; 0x0a
    4fdc:	81 60       	ori	r24, 0x01	; 1
    4fde:	82 87       	std	Z+10, r24	; 0x0a
    4fe0:	05 c0       	rjmp	.+10     	; 0x4fec <ep40_lin_signal_update_while_task+0x33e>
    4fe2:	e8 ed       	ldi	r30, 0xD8	; 216
    4fe4:	f0 e6       	ldi	r31, 0x60	; 96
    4fe6:	82 85       	ldd	r24, Z+10	; 0x0a
    4fe8:	8e 7f       	andi	r24, 0xFE	; 254
    4fea:	82 87       	std	Z+10, r24	; 0x0a
    4fec:	e5 ed       	ldi	r30, 0xD5	; 213
    4fee:	f0 e6       	ldi	r31, 0x60	; 96
    4ff0:	81 81       	ldd	r24, Z+1	; 0x01
    4ff2:	8f 77       	andi	r24, 0x7F	; 127
    4ff4:	81 83       	std	Z+1, r24	; 0x01
    4ff6:	74 c0       	rjmp	.+232    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Voltage_errorCode(0);
    4ff8:	e8 ed       	ldi	r30, 0xD8	; 216
    4ffa:	f0 e6       	ldi	r31, 0x60	; 96
    4ffc:	82 85       	ldd	r24, Z+10	; 0x0a
    4ffe:	8e 7f       	andi	r24, 0xFE	; 254
    5000:	82 87       	std	Z+10, r24	; 0x0a
    5002:	e5 ed       	ldi	r30, 0xD5	; 213
    5004:	f0 e6       	ldi	r31, 0x60	; 96
    5006:	81 81       	ldd	r24, Z+1	; 0x01
    5008:	8f 77       	andi	r24, 0x7F	; 127
    500a:	81 83       	std	Z+1, r24	; 0x01
    500c:	69 c0       	rjmp	.+210    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Capsense_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
    500e:	82 2f       	mov	r24, r18
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	fc 01       	movw	r30, r24
    5014:	ee 0f       	add	r30, r30
    5016:	ff 1f       	adc	r31, r31
    5018:	e8 0f       	add	r30, r24
    501a:	f9 1f       	adc	r31, r25
    501c:	eb 59       	subi	r30, 0x9B	; 155
    501e:	f8 49       	sbci	r31, 0x98	; 152
    5020:	30 81       	ld	r19, Z
    5022:	33 23       	and	r19, r19
    5024:	f1 f0       	breq	.+60     	; 0x5062 <ep40_lin_signal_update_while_task+0x3b4>
            {
                g_lin_signal_cnt[i].cnt--;
    5026:	fc 01       	movw	r30, r24
    5028:	ee 0f       	add	r30, r30
    502a:	ff 1f       	adc	r31, r31
    502c:	8e 0f       	add	r24, r30
    502e:	9f 1f       	adc	r25, r31
    5030:	fc 01       	movw	r30, r24
    5032:	eb 59       	subi	r30, 0x9B	; 155
    5034:	f8 49       	sbci	r31, 0x98	; 152
    5036:	31 50       	subi	r19, 0x01	; 1
    5038:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Capsense_errorCode(g_lin_signal_cnt[i].val);
    503a:	81 81       	ldd	r24, Z+1	; 0x01
    503c:	88 23       	and	r24, r24
    503e:	31 f0       	breq	.+12     	; 0x504c <ep40_lin_signal_update_while_task+0x39e>
    5040:	e8 ed       	ldi	r30, 0xD8	; 216
    5042:	f0 e6       	ldi	r31, 0x60	; 96
    5044:	82 85       	ldd	r24, Z+10	; 0x0a
    5046:	82 60       	ori	r24, 0x02	; 2
    5048:	82 87       	std	Z+10, r24	; 0x0a
    504a:	05 c0       	rjmp	.+10     	; 0x5056 <ep40_lin_signal_update_while_task+0x3a8>
    504c:	e8 ed       	ldi	r30, 0xD8	; 216
    504e:	f0 e6       	ldi	r31, 0x60	; 96
    5050:	82 85       	ldd	r24, Z+10	; 0x0a
    5052:	8d 7f       	andi	r24, 0xFD	; 253
    5054:	82 87       	std	Z+10, r24	; 0x0a
    5056:	e5 ed       	ldi	r30, 0xD5	; 213
    5058:	f0 e6       	ldi	r31, 0x60	; 96
    505a:	82 81       	ldd	r24, Z+2	; 0x02
    505c:	8e 7f       	andi	r24, 0xFE	; 254
    505e:	82 83       	std	Z+2, r24	; 0x02
    5060:	3f c0       	rjmp	.+126    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Capsense_errorCode(0);
    5062:	e8 ed       	ldi	r30, 0xD8	; 216
    5064:	f0 e6       	ldi	r31, 0x60	; 96
    5066:	82 85       	ldd	r24, Z+10	; 0x0a
    5068:	8d 7f       	andi	r24, 0xFD	; 253
    506a:	82 87       	std	Z+10, r24	; 0x0a
    506c:	e5 ed       	ldi	r30, 0xD5	; 213
    506e:	f0 e6       	ldi	r31, 0x60	; 96
    5070:	82 81       	ldd	r24, Z+2	; 0x02
    5072:	8e 7f       	andi	r24, 0xFE	; 254
    5074:	82 83       	std	Z+2, r24	; 0x02
    5076:	34 c0       	rjmp	.+104    	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Motor_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
    5078:	82 2f       	mov	r24, r18
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	fc 01       	movw	r30, r24
    507e:	ee 0f       	add	r30, r30
    5080:	ff 1f       	adc	r31, r31
    5082:	e8 0f       	add	r30, r24
    5084:	f9 1f       	adc	r31, r25
    5086:	eb 59       	subi	r30, 0x9B	; 155
    5088:	f8 49       	sbci	r31, 0x98	; 152
    508a:	30 81       	ld	r19, Z
    508c:	33 23       	and	r19, r19
    508e:	f1 f0       	breq	.+60     	; 0x50cc <ep40_lin_signal_update_while_task+0x41e>
            {
                g_lin_signal_cnt[i].cnt--;
    5090:	fc 01       	movw	r30, r24
    5092:	ee 0f       	add	r30, r30
    5094:	ff 1f       	adc	r31, r31
    5096:	8e 0f       	add	r24, r30
    5098:	9f 1f       	adc	r25, r31
    509a:	fc 01       	movw	r30, r24
    509c:	eb 59       	subi	r30, 0x9B	; 155
    509e:	f8 49       	sbci	r31, 0x98	; 152
    50a0:	31 50       	subi	r19, 0x01	; 1
    50a2:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Motor_errorCode(g_lin_signal_cnt[i].val);
    50a4:	81 81       	ldd	r24, Z+1	; 0x01
    50a6:	88 23       	and	r24, r24
    50a8:	31 f0       	breq	.+12     	; 0x50b6 <ep40_lin_signal_update_while_task+0x408>
    50aa:	e8 ed       	ldi	r30, 0xD8	; 216
    50ac:	f0 e6       	ldi	r31, 0x60	; 96
    50ae:	82 85       	ldd	r24, Z+10	; 0x0a
    50b0:	84 60       	ori	r24, 0x04	; 4
    50b2:	82 87       	std	Z+10, r24	; 0x0a
    50b4:	05 c0       	rjmp	.+10     	; 0x50c0 <ep40_lin_signal_update_while_task+0x412>
    50b6:	e8 ed       	ldi	r30, 0xD8	; 216
    50b8:	f0 e6       	ldi	r31, 0x60	; 96
    50ba:	82 85       	ldd	r24, Z+10	; 0x0a
    50bc:	8b 7f       	andi	r24, 0xFB	; 251
    50be:	82 87       	std	Z+10, r24	; 0x0a
    50c0:	e5 ed       	ldi	r30, 0xD5	; 213
    50c2:	f0 e6       	ldi	r31, 0x60	; 96
    50c4:	82 81       	ldd	r24, Z+2	; 0x02
    50c6:	8d 7f       	andi	r24, 0xFD	; 253
    50c8:	82 83       	std	Z+2, r24	; 0x02
    50ca:	0a c0       	rjmp	.+20     	; 0x50e0 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Motor_errorCode(0);
    50cc:	e8 ed       	ldi	r30, 0xD8	; 216
    50ce:	f0 e6       	ldi	r31, 0x60	; 96
    50d0:	82 85       	ldd	r24, Z+10	; 0x0a
    50d2:	8b 7f       	andi	r24, 0xFB	; 251
    50d4:	82 87       	std	Z+10, r24	; 0x0a
    50d6:	e5 ed       	ldi	r30, 0xD5	; 213
    50d8:	f0 e6       	ldi	r31, 0x60	; 96
    50da:	82 81       	ldd	r24, Z+2	; 0x02
    50dc:	8d 7f       	andi	r24, 0xFD	; 253
    50de:	82 83       	std	Z+2, r24	; 0x02

lin_signal_cnt_t g_lin_signal_cnt[LIN_NUM_OF_SIGS];

void ep40_lin_signal_update_while_task(void)
{
    for (uint8_t i = 0; i < LIN_NUM_OF_SIGS; i++)
    50e0:	2f 5f       	subi	r18, 0xFF	; 255
    50e2:	2e 30       	cpi	r18, 0x0E	; 14
    50e4:	08 f4       	brcc	.+2      	; 0x50e8 <ep40_lin_signal_update_while_task+0x43a>
    50e6:	e5 cd       	rjmp	.-1078   	; 0x4cb2 <ep40_lin_signal_update_while_task+0x4>

        default:
            break;
        }
    }
}
    50e8:	08 95       	ret

000050ea <lin_signal_send_x_times>:

void lin_signal_send_x_times(l_signal_handle signal_handle, uint8_t cnt, uint8_t val)
{
    g_lin_signal_cnt[signal_handle].cnt = cnt;
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	fc 01       	movw	r30, r24
    50ee:	ee 0f       	add	r30, r30
    50f0:	ff 1f       	adc	r31, r31
    50f2:	8e 0f       	add	r24, r30
    50f4:	9f 1f       	adc	r25, r31
    50f6:	fc 01       	movw	r30, r24
    50f8:	eb 59       	subi	r30, 0x9B	; 155
    50fa:	f8 49       	sbci	r31, 0x98	; 152
    50fc:	60 83       	st	Z, r22
    g_lin_signal_cnt[signal_handle].val = val;
    50fe:	41 83       	std	Z+1, r20	; 0x01
    5100:	08 95       	ret

00005102 <soft_timer_rear_btn_task>:
    .rear_led_ctrl_cb = rear_led_ctrl,
};

/* REAR触摸检测定时器任务 */
void soft_timer_rear_btn_task(void)
{
    5102:	cf 93       	push	r28
    5104:	df 93       	push	r29
    static uint8_t btn_status_last = 0;
    static uint8_t btn_status = 0;
    uint8_t all_cap_status = 0;
    btn_status_last = btn_status;
    5106:	80 91 24 64 	lds	r24, 0x6424	; 0x806424 <btn_status.6367>
    510a:	80 93 23 64 	sts	0x6423, r24	; 0x806423 <btn_status_last.6366>
    btn_status = get_sensor_state(0) & 0x80;
    510e:	80 e0       	ldi	r24, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	0e 94 85 52 	call	0xa50a	; 0xa50a <get_sensor_state>
    5116:	80 78       	andi	r24, 0x80	; 128
    5118:	80 93 24 64 	sts	0x6424, r24	; 0x806424 <btn_status.6367>

    g_btn_rear.press_trig_flg = 1;
    511c:	91 e0       	ldi	r25, 0x01	; 1
    511e:	90 93 aa 60 	sts	0x60AA, r25	; 0x8060aa <g_btn_rear+0x3>

    if ((btn_status != 0) && (btn_status_last == 0))
    5122:	88 23       	and	r24, r24
    5124:	61 f0       	breq	.+24     	; 0x513e <soft_timer_rear_btn_task+0x3c>
    5126:	80 91 23 64 	lds	r24, 0x6423	; 0x806423 <btn_status_last.6366>
    512a:	81 11       	cpse	r24, r1
    512c:	08 c0       	rjmp	.+16     	; 0x513e <soft_timer_rear_btn_task+0x3c>
    {
        g_btn_rear.cap_trig_flg = 1;
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	80 93 a8 60 	sts	0x60A8, r24	; 0x8060a8 <g_btn_rear+0x1>
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    5134:	41 e0       	ldi	r20, 0x01	; 1
    5136:	61 e0       	ldi	r22, 0x01	; 1
    5138:	8a e0       	ldi	r24, 0x0A	; 10
    513a:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>

    for (uint8_t i = 0; i < 6; i++)
    {
        if ((get_sensor_state(i) & 0x80) != 0)
        {
            all_cap_status = 1;
    513e:	c0 e0       	ldi	r28, 0x00	; 0
    5140:	d0 e0       	ldi	r29, 0x00	; 0
    5142:	08 c0       	rjmp	.+16     	; 0x5154 <soft_timer_rear_btn_task+0x52>
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    }

    for (uint8_t i = 0; i < 6; i++)
    {
        if ((get_sensor_state(i) & 0x80) != 0)
    5144:	8c 2f       	mov	r24, r28
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	0e 94 85 52 	call	0xa50a	; 0xa50a <get_sensor_state>
    514c:	88 23       	and	r24, r24
    514e:	0c f4       	brge	.+2      	; 0x5152 <soft_timer_rear_btn_task+0x50>
        {
            all_cap_status = 1;
    5150:	d1 e0       	ldi	r29, 0x01	; 1
    {
        g_btn_rear.cap_trig_flg = 1;
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    }

    for (uint8_t i = 0; i < 6; i++)
    5152:	cf 5f       	subi	r28, 0xFF	; 255
    5154:	c6 30       	cpi	r28, 0x06	; 6
    5156:	b0 f3       	brcs	.-20     	; 0x5144 <soft_timer_rear_btn_task+0x42>
    5158:	c0 e0       	ldi	r28, 0x00	; 0
    515a:	07 c0       	rjmp	.+14     	; 0x516a <soft_timer_rear_btn_task+0x68>
            all_cap_status = 1;
        }
    }
    for (uint8_t i = 0; i < 2; i++)
    {
        if (get_scroller_state(i) != 0)
    515c:	8c 2f       	mov	r24, r28
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	0e 94 94 52 	call	0xa528	; 0xa528 <get_scroller_state>
    5164:	81 11       	cpse	r24, r1
        {
            all_cap_status = 1;
    5166:	d1 e0       	ldi	r29, 0x01	; 1
        if ((get_sensor_state(i) & 0x80) != 0)
        {
            all_cap_status = 1;
        }
    }
    for (uint8_t i = 0; i < 2; i++)
    5168:	cf 5f       	subi	r28, 0xFF	; 255
    516a:	c2 30       	cpi	r28, 0x02	; 2
    516c:	b8 f3       	brcs	.-18     	; 0x515c <soft_timer_rear_btn_task+0x5a>
        {
            all_cap_status = 1;
        }
    }

    g_btn_rear.all_cap_status = all_cap_status;
    516e:	d0 93 a9 60 	sts	0x60A9, r29	; 0x8060a9 <g_btn_rear+0x2>

    btn_rear_tick_task();
    5172:	0e 94 17 2b 	call	0x562e	; 0x562e <btn_rear_tick_task>
}
    5176:	df 91       	pop	r29
    5178:	cf 91       	pop	r28
    517a:	08 95       	ret

0000517c <soft_timer_window_lock_task>:
/* 窗锁止定时器按键触摸检测任务 */
void soft_timer_window_lock_task(void)
{
    static uint8_t btn_status_last = 0;
    static uint8_t btn_status = 0;
    btn_status_last = btn_status;
    517c:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <btn_status.6392>
    5180:	80 93 21 64 	sts	0x6421, r24	; 0x806421 <btn_status_last.6391>
    btn_status = get_sensor_state(3) & 0x80;
    5184:	83 e0       	ldi	r24, 0x03	; 3
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	0e 94 85 52 	call	0xa50a	; 0xa50a <get_sensor_state>
    518c:	80 78       	andi	r24, 0x80	; 128
    518e:	80 93 22 64 	sts	0x6422, r24	; 0x806422 <btn_status.6392>

    g_window_lock.press_flg = 1;
    5192:	91 e0       	ldi	r25, 0x01	; 1
    5194:	90 93 a2 60 	sts	0x60A2, r25	; 0x8060a2 <g_window_lock+0x1>

    if ((btn_status != 0) && (btn_status_last == 0))
    5198:	88 23       	and	r24, r24
    519a:	61 f0       	breq	.+24     	; 0x51b4 <soft_timer_window_lock_task+0x38>
    519c:	80 91 21 64 	lds	r24, 0x6421	; 0x806421 <btn_status_last.6391>
    51a0:	81 11       	cpse	r24, r1
    51a2:	08 c0       	rjmp	.+16     	; 0x51b4 <soft_timer_window_lock_task+0x38>
    {
        g_window_lock.capsense_flg = 1;
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	80 93 a1 60 	sts	0x60A1, r24	; 0x8060a1 <g_window_lock>
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    51aa:	41 e0       	ldi	r20, 0x01	; 1
    51ac:	61 e0       	ldi	r22, 0x01	; 1
    51ae:	8a e0       	ldi	r24, 0x0A	; 10
    51b0:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    }

    window_lock_task();
    51b4:	0e 94 2d 2c 	call	0x585a	; 0x585a <window_lock_task>
    51b8:	08 95       	ret

000051ba <window_lock_signal_cb>:
}

void window_lock_signal_cb(void)
{
    lin_signal_send_x_times(LI0_DFGLS_ControlWindowLockSw, 3, 1);
    51ba:	41 e0       	ldi	r20, 0x01	; 1
    51bc:	63 e0       	ldi	r22, 0x03	; 3
    51be:	86 e0       	ldi	r24, 0x06	; 6
    51c0:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    51c4:	08 95       	ret

000051c6 <left_window_signal_out_cb>:
}

/* 左边窗提升信号输出回调函数 */
void left_window_signal_out_cb(uint8_t signal)
{
    uint8_t rear_status = g_btn_rear.status;
    51c6:	90 91 a7 60 	lds	r25, 0x60A7	; 0x8060a7 <g_btn_rear>

    if (rear_status == 0)
    51ca:	91 11       	cpse	r25, r1
    51cc:	06 c0       	rjmp	.+12     	; 0x51da <left_window_signal_out_cb+0x14>
    {
        lin_signal_send_x_times(LI0_DFGLS_FLWindowControl, 3, signal);
    51ce:	48 2f       	mov	r20, r24
    51d0:	63 e0       	ldi	r22, 0x03	; 3
    51d2:	84 e0       	ldi	r24, 0x04	; 4
    51d4:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    51d8:	08 95       	ret
    }
    else
    {
        lin_signal_send_x_times(LI0_DFGLS_RLWindowControl, 3, signal);
    51da:	48 2f       	mov	r20, r24
    51dc:	63 e0       	ldi	r22, 0x03	; 3
    51de:	88 e0       	ldi	r24, 0x08	; 8
    51e0:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    51e4:	08 95       	ret

000051e6 <right_window_signal_out_cb>:
}

/* 右边窗提升信号输出回调函数 */
void right_window_signal_out_cb(uint8_t signal)
{
    uint8_t rear_status = g_btn_rear.status;
    51e6:	90 91 a7 60 	lds	r25, 0x60A7	; 0x8060a7 <g_btn_rear>

    if (rear_status == 0)
    51ea:	91 11       	cpse	r25, r1
    51ec:	06 c0       	rjmp	.+12     	; 0x51fa <right_window_signal_out_cb+0x14>
    {
        lin_signal_send_x_times(LI0_DFGLS_FRWindowControl, 3, signal);
    51ee:	48 2f       	mov	r20, r24
    51f0:	63 e0       	ldi	r22, 0x03	; 3
    51f2:	85 e0       	ldi	r24, 0x05	; 5
    51f4:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    51f8:	08 95       	ret
    }
    else
    {
        lin_signal_send_x_times(LI0_DFGLS_RRWindowControl, 3, signal);
    51fa:	48 2f       	mov	r20, r24
    51fc:	63 e0       	ldi	r22, 0x03	; 3
    51fe:	89 e0       	ldi	r24, 0x09	; 9
    5200:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    5204:	08 95       	ret

00005206 <window_obj_var_clear>:
    g_lin_signal_cnt[signal_handle].cnt = cnt;
    g_lin_signal_cnt[signal_handle].val = val;
}

void window_obj_var_clear(window_obj_t *handle)
{
    5206:	fc 01       	movw	r30, r24
    handle->status = 0;
    5208:	10 82       	st	Z, r1
    handle->ticks = 0;
    520a:	11 82       	std	Z+1, r1	; 0x01
    520c:	12 82       	std	Z+2, r1	; 0x02
    handle->btn_a_status_last = 0;
    520e:	13 82       	std	Z+3, r1	; 0x03
    handle->btn_a_status = 0;
    5210:	14 82       	std	Z+4, r1	; 0x04
    handle->btn_b_status_last = 0;
    5212:	15 82       	std	Z+5, r1	; 0x05
    handle->btn_b_status = 0;
    5214:	16 82       	std	Z+6, r1	; 0x06
    handle->slide_status_last = 0;
    5216:	17 82       	std	Z+7, r1	; 0x07
    handle->slide_status = 0;
    5218:	10 86       	std	Z+8, r1	; 0x08
    handle->slide_pos_first = 0;
    521a:	11 86       	std	Z+9, r1	; 0x09
    handle->slide_pos = 0;
    521c:	12 86       	std	Z+10, r1	; 0x0a
    handle->window.status = 0;
    521e:	13 86       	std	Z+11, r1	; 0x0b
    handle->window.long_flg = 0;
    5220:	14 86       	std	Z+12, r1	; 0x0c
    handle->window.btn_b_cap_trig_flg = 0;
    5222:	15 86       	std	Z+13, r1	; 0x0d
    handle->window.btn_a_cap_trig_flg = 0;
    5224:	16 86       	std	Z+14, r1	; 0x0e
    handle->window.slide_1_to_2_flg = 0;
    5226:	17 86       	std	Z+15, r1	; 0x0f
    handle->window.slide_2_to_1_flg = 0;
    5228:	10 8a       	std	Z+16, r1	; 0x10
    handle->window.btn_a_status = 0;
    522a:	11 8a       	std	Z+17, r1	; 0x11
    handle->window.btn_b_status = 0;
    522c:	12 8a       	std	Z+18, r1	; 0x12
    handle->window.slide_status = 0;
    522e:	13 8a       	std	Z+19, r1	; 0x13
    handle->window.signal = 0;
    5230:	14 8a       	std	Z+20, r1	; 0x14
    5232:	08 95       	ret

00005234 <soft_timer_window_task>:
    }
}

/* 窗提升滑条按键软件定时器任务 */
void soft_timer_window_task(void)
{
    5234:	cf 93       	push	r28
    5236:	df 93       	push	r29
    window_obj_t *window_obj_ptr = &g_left_window_obj;
    window_t *window_ptr = &g_left_window_obj.window;
    static uint8_t rear_status_last = 0;
    static uint8_t rear_status = 0;

    rear_status_last = rear_status;
    5238:	90 91 20 64 	lds	r25, 0x6420	; 0x806420 <rear_status.6473>
    523c:	90 93 1f 64 	sts	0x641F, r25	; 0x80641f <rear_status_last.6472>
    rear_status = g_btn_rear.status;
    5240:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <g_btn_rear>
    5244:	80 93 20 64 	sts	0x6420, r24	; 0x806420 <rear_status.6473>

    /*************************************LEFT************************************************/

    if (rear_status_last != rear_status)
    5248:	98 17       	cp	r25, r24
    524a:	21 f0       	breq	.+8      	; 0x5254 <soft_timer_window_task+0x20>
    {
        window_obj_var_clear(window_obj_ptr);
    524c:	87 e8       	ldi	r24, 0x87	; 135
    524e:	90 e6       	ldi	r25, 0x60	; 96
    5250:	0e 94 03 29 	call	0x5206	; 0x5206 <window_obj_var_clear>
    }

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
    5254:	c7 e8       	ldi	r28, 0x87	; 135
    5256:	d0 e6       	ldi	r29, 0x60	; 96
    5258:	8c 81       	ldd	r24, Y+4	; 0x04
    525a:	8b 83       	std	Y+3, r24	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(5) & 0x80;
    525c:	85 e0       	ldi	r24, 0x05	; 5
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	0e 94 85 52 	call	0xa50a	; 0xa50a <get_sensor_state>
    5264:	80 78       	andi	r24, 0x80	; 128
    5266:	8c 83       	std	Y+4, r24	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
    5268:	8e 81       	ldd	r24, Y+6	; 0x06
    526a:	8d 83       	std	Y+5, r24	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(4) & 0x80;
    526c:	84 e0       	ldi	r24, 0x04	; 4
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	0e 94 85 52 	call	0xa50a	; 0xa50a <get_sensor_state>
    5274:	80 78       	andi	r24, 0x80	; 128
    5276:	8e 83       	std	Y+6, r24	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
    5278:	9c 81       	ldd	r25, Y+4	; 0x04
    527a:	99 8b       	std	Y+17, r25	; 0x11
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
    527c:	8a 8b       	std	Y+18, r24	; 0x12

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
    527e:	99 23       	and	r25, r25
    5280:	69 f0       	breq	.+26     	; 0x529c <soft_timer_window_task+0x68>
    5282:	80 91 8a 60 	lds	r24, 0x608A	; 0x80608a <g_left_window_obj+0x3>
    5286:	81 11       	cpse	r24, r1
    5288:	09 c0       	rjmp	.+18     	; 0x529c <soft_timer_window_task+0x68>
    {
        window_obj_ptr->ticks = 0;
    528a:	19 82       	std	Y+1, r1	; 0x01
    528c:	1a 82       	std	Y+2, r1	; 0x02
        window_obj_ptr->status = 2;
    528e:	82 e0       	ldi	r24, 0x02	; 2
    5290:	88 83       	st	Y, r24
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    5292:	41 e0       	ldi	r20, 0x01	; 1
    5294:	61 e0       	ldi	r22, 0x01	; 1
    5296:	8a e0       	ldi	r24, 0x0A	; 10
    5298:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    }

    if (window_obj_ptr->status == 2)
    529c:	80 91 87 60 	lds	r24, 0x6087	; 0x806087 <g_left_window_obj>
    52a0:	82 30       	cpi	r24, 0x02	; 2
    52a2:	c1 f4       	brne	.+48     	; 0x52d4 <soft_timer_window_task+0xa0>
    {
        window_obj_ptr->ticks++;
    52a4:	e7 e8       	ldi	r30, 0x87	; 135
    52a6:	f0 e6       	ldi	r31, 0x60	; 96
    52a8:	81 81       	ldd	r24, Z+1	; 0x01
    52aa:	92 81       	ldd	r25, Z+2	; 0x02
    52ac:	01 96       	adiw	r24, 0x01	; 1
    52ae:	81 83       	std	Z+1, r24	; 0x01
    52b0:	92 83       	std	Z+2, r25	; 0x02
        window_ptr->long_flg = 1;
    52b2:	21 e0       	ldi	r18, 0x01	; 1
    52b4:	24 87       	std	Z+12, r18	; 0x0c
        window_ptr->btn_a_cap_trig_flg = 1;
    52b6:	26 87       	std	Z+14, r18	; 0x0e
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    52b8:	0f 97       	sbiw	r24, 0x0f	; 15
    52ba:	10 f0       	brcs	.+4      	; 0x52c0 <soft_timer_window_task+0x8c>
        {
            window_obj_ptr->status = 0;
    52bc:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_a_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_a_status == 0)
    52c0:	80 91 8b 60 	lds	r24, 0x608B	; 0x80608b <g_left_window_obj+0x4>
    52c4:	81 11       	cpse	r24, r1
    52c6:	06 c0       	rjmp	.+12     	; 0x52d4 <soft_timer_window_task+0xa0>
        {
            window_obj_ptr->status = 0;
    52c8:	e7 e8       	ldi	r30, 0x87	; 135
    52ca:	f0 e6       	ldi	r31, 0x60	; 96
    52cc:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    52ce:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_a_cap_trig_flg = 1;
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	86 87       	std	Z+14, r24	; 0x0e
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
    52d4:	80 91 8d 60 	lds	r24, 0x608D	; 0x80608d <g_left_window_obj+0x6>
    52d8:	88 23       	and	r24, r24
    52da:	79 f0       	breq	.+30     	; 0x52fa <soft_timer_window_task+0xc6>
    52dc:	80 91 8c 60 	lds	r24, 0x608C	; 0x80608c <g_left_window_obj+0x5>
    52e0:	81 11       	cpse	r24, r1
    52e2:	0b c0       	rjmp	.+22     	; 0x52fa <soft_timer_window_task+0xc6>
    {
        window_obj_ptr->ticks = 0;
    52e4:	e7 e8       	ldi	r30, 0x87	; 135
    52e6:	f0 e6       	ldi	r31, 0x60	; 96
    52e8:	11 82       	std	Z+1, r1	; 0x01
    52ea:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
    52ec:	83 e0       	ldi	r24, 0x03	; 3
    52ee:	80 83       	st	Z, r24
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    52f0:	41 e0       	ldi	r20, 0x01	; 1
    52f2:	61 e0       	ldi	r22, 0x01	; 1
    52f4:	8a e0       	ldi	r24, 0x0A	; 10
    52f6:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    }

    if (window_obj_ptr->status == 3)
    52fa:	80 91 87 60 	lds	r24, 0x6087	; 0x806087 <g_left_window_obj>
    52fe:	83 30       	cpi	r24, 0x03	; 3
    5300:	c1 f4       	brne	.+48     	; 0x5332 <soft_timer_window_task+0xfe>
    {
        window_obj_ptr->ticks++;
    5302:	e7 e8       	ldi	r30, 0x87	; 135
    5304:	f0 e6       	ldi	r31, 0x60	; 96
    5306:	81 81       	ldd	r24, Z+1	; 0x01
    5308:	92 81       	ldd	r25, Z+2	; 0x02
    530a:	01 96       	adiw	r24, 0x01	; 1
    530c:	81 83       	std	Z+1, r24	; 0x01
    530e:	92 83       	std	Z+2, r25	; 0x02
        window_ptr->long_flg = 1;
    5310:	21 e0       	ldi	r18, 0x01	; 1
    5312:	24 87       	std	Z+12, r18	; 0x0c
        window_ptr->btn_b_cap_trig_flg = 1;
    5314:	25 87       	std	Z+13, r18	; 0x0d
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    5316:	0f 97       	sbiw	r24, 0x0f	; 15
    5318:	10 f0       	brcs	.+4      	; 0x531e <soft_timer_window_task+0xea>
        {
            window_obj_ptr->status = 0;
    531a:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_b_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_b_status == 0)
    531e:	80 91 8d 60 	lds	r24, 0x608D	; 0x80608d <g_left_window_obj+0x6>
    5322:	81 11       	cpse	r24, r1
    5324:	06 c0       	rjmp	.+12     	; 0x5332 <soft_timer_window_task+0xfe>
        {
            window_obj_ptr->status = 0;
    5326:	e7 e8       	ldi	r30, 0x87	; 135
    5328:	f0 e6       	ldi	r31, 0x60	; 96
    532a:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    532c:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_b_cap_trig_flg = 1;
    532e:	81 e0       	ldi	r24, 0x01	; 1
    5330:	85 87       	std	Z+13, r24	; 0x0d
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
    5332:	c7 e8       	ldi	r28, 0x87	; 135
    5334:	d0 e6       	ldi	r29, 0x60	; 96
    5336:	88 85       	ldd	r24, Y+8	; 0x08
    5338:	8f 83       	std	Y+7, r24	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(1);
    533a:	81 e0       	ldi	r24, 0x01	; 1
    533c:	90 e0       	ldi	r25, 0x00	; 0
    533e:	0e 94 94 52 	call	0xa528	; 0xa528 <get_scroller_state>
    5342:	88 87       	std	Y+8, r24	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
    5344:	8b 8b       	std	Y+19, r24	; 0x13

    window_obj_ptr->slide_pos = get_scroller_position(1);
    5346:	81 e0       	ldi	r24, 0x01	; 1
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	0e 94 a6 52 	call	0xa54c	; 0xa54c <get_scroller_position>
    534e:	8a 87       	std	Y+10, r24	; 0x0a

    if (window_obj_ptr->status == 0)
    5350:	98 81       	ld	r25, Y
    5352:	91 11       	cpse	r25, r1
    5354:	0f c0       	rjmp	.+30     	; 0x5374 <soft_timer_window_task+0x140>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
    5356:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <g_left_window_obj+0x8>
    535a:	99 23       	and	r25, r25
    535c:	09 f4       	brne	.+2      	; 0x5360 <soft_timer_window_task+0x12c>
    535e:	66 c0       	rjmp	.+204    	; 0x542c <soft_timer_window_task+0x1f8>
    5360:	90 91 8e 60 	lds	r25, 0x608E	; 0x80608e <g_left_window_obj+0x7>
    5364:	91 11       	cpse	r25, r1
    5366:	62 c0       	rjmp	.+196    	; 0x542c <soft_timer_window_task+0x1f8>
        {
            window_obj_ptr->ticks = 0;
    5368:	19 82       	std	Y+1, r1	; 0x01
    536a:	1a 82       	std	Y+2, r1	; 0x02
            window_obj_ptr->status = 4;
    536c:	94 e0       	ldi	r25, 0x04	; 4
    536e:	98 83       	st	Y, r25
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
    5370:	89 87       	std	Y+9, r24	; 0x09
    5372:	5c c0       	rjmp	.+184    	; 0x542c <soft_timer_window_task+0x1f8>
        }
    }
    else if (window_obj_ptr->status == 4)
    5374:	94 30       	cpi	r25, 0x04	; 4
    5376:	09 f0       	breq	.+2      	; 0x537a <soft_timer_window_task+0x146>
    5378:	51 c0       	rjmp	.+162    	; 0x541c <soft_timer_window_task+0x1e8>
    {
        if (window_obj_ptr->slide_status == 0)
    537a:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <g_left_window_obj+0x8>
    537e:	91 11       	cpse	r25, r1
    5380:	19 c0       	rjmp	.+50     	; 0x53b4 <soft_timer_window_task+0x180>
        {
            window_obj_ptr->status = 0;
    5382:	e7 e8       	ldi	r30, 0x87	; 135
    5384:	f0 e6       	ldi	r31, 0x60	; 96
    5386:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
    5388:	91 85       	ldd	r25, Z+9	; 0x09
    538a:	94 36       	cpi	r25, 0x64	; 100
    538c:	38 f4       	brcc	.+14     	; 0x539c <soft_timer_window_task+0x168>
            {
                if (window_obj_ptr->slide_pos > 150)
    538e:	87 39       	cpi	r24, 0x97	; 151
    5390:	08 f4       	brcc	.+2      	; 0x5394 <soft_timer_window_task+0x160>
    5392:	4c c0       	rjmp	.+152    	; 0x542c <soft_timer_window_task+0x1f8>
                {
                    window_ptr->long_flg = 0;
    5394:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_1_to_2_flg = 1;
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	87 87       	std	Z+15, r24	; 0x0f
    539a:	48 c0       	rjmp	.+144    	; 0x542c <soft_timer_window_task+0x1f8>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
    539c:	97 39       	cpi	r25, 0x97	; 151
    539e:	08 f4       	brcc	.+2      	; 0x53a2 <soft_timer_window_task+0x16e>
    53a0:	45 c0       	rjmp	.+138    	; 0x542c <soft_timer_window_task+0x1f8>
            {
                if (window_obj_ptr->slide_pos < 100)
    53a2:	84 36       	cpi	r24, 0x64	; 100
    53a4:	08 f0       	brcs	.+2      	; 0x53a8 <soft_timer_window_task+0x174>
    53a6:	42 c0       	rjmp	.+132    	; 0x542c <soft_timer_window_task+0x1f8>
                {
                    window_ptr->long_flg = 0;
    53a8:	e7 e8       	ldi	r30, 0x87	; 135
    53aa:	f0 e6       	ldi	r31, 0x60	; 96
    53ac:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_2_to_1_flg = 1;
    53ae:	81 e0       	ldi	r24, 0x01	; 1
    53b0:	80 8b       	std	Z+16, r24	; 0x10
    53b2:	3c c0       	rjmp	.+120    	; 0x542c <soft_timer_window_task+0x1f8>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
    53b4:	e7 e8       	ldi	r30, 0x87	; 135
    53b6:	f0 e6       	ldi	r31, 0x60	; 96
    53b8:	21 81       	ldd	r18, Z+1	; 0x01
    53ba:	32 81       	ldd	r19, Z+2	; 0x02
    53bc:	2f 5f       	subi	r18, 0xFF	; 255
    53be:	3f 4f       	sbci	r19, 0xFF	; 255
    53c0:	21 83       	std	Z+1, r18	; 0x01
    53c2:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
    53c4:	99 23       	and	r25, r25
    53c6:	91 f1       	breq	.+100    	; 0x542c <soft_timer_window_task+0x1f8>
            {
                if (window_obj_ptr->slide_pos_first < 100)
    53c8:	90 91 90 60 	lds	r25, 0x6090	; 0x806090 <g_left_window_obj+0x9>
    53cc:	94 36       	cpi	r25, 0x64	; 100
    53ce:	88 f4       	brcc	.+34     	; 0x53f2 <soft_timer_window_task+0x1be>
                {
                    if (window_obj_ptr->slide_pos > 150)
    53d0:	87 39       	cpi	r24, 0x97	; 151
    53d2:	60 f1       	brcs	.+88     	; 0x542c <soft_timer_window_task+0x1f8>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    53d4:	2f 30       	cpi	r18, 0x0F	; 15
    53d6:	31 05       	cpc	r19, r1
    53d8:	30 f0       	brcs	.+12     	; 0x53e6 <soft_timer_window_task+0x1b2>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	87 87       	std	Z+15, r24	; 0x0f
                            window_obj_ptr->status = 5;
    53de:	95 e0       	ldi	r25, 0x05	; 5
    53e0:	90 83       	st	Z, r25
                            window_ptr->long_flg = 1;
    53e2:	84 87       	std	Z+12, r24	; 0x0c
    53e4:	23 c0       	rjmp	.+70     	; 0x542c <soft_timer_window_task+0x1f8>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    53e6:	e7 e8       	ldi	r30, 0x87	; 135
    53e8:	f0 e6       	ldi	r31, 0x60	; 96
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	87 87       	std	Z+15, r24	; 0x0f
                            window_ptr->long_flg = 1;
    53ee:	84 87       	std	Z+12, r24	; 0x0c
    53f0:	1d c0       	rjmp	.+58     	; 0x542c <soft_timer_window_task+0x1f8>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
    53f2:	97 39       	cpi	r25, 0x97	; 151
    53f4:	d8 f0       	brcs	.+54     	; 0x542c <soft_timer_window_task+0x1f8>
                {
                    if (window_obj_ptr->slide_pos < 100)
    53f6:	84 36       	cpi	r24, 0x64	; 100
    53f8:	c8 f4       	brcc	.+50     	; 0x542c <soft_timer_window_task+0x1f8>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    53fa:	2f 30       	cpi	r18, 0x0F	; 15
    53fc:	31 05       	cpc	r19, r1
    53fe:	40 f0       	brcs	.+16     	; 0x5410 <soft_timer_window_task+0x1dc>
                        {
                            window_obj_ptr->status = 5;
    5400:	e7 e8       	ldi	r30, 0x87	; 135
    5402:	f0 e6       	ldi	r31, 0x60	; 96
    5404:	85 e0       	ldi	r24, 0x05	; 5
    5406:	80 83       	st	Z, r24
                            window_ptr->long_flg = 1;
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    540c:	80 8b       	std	Z+16, r24	; 0x10
    540e:	0e c0       	rjmp	.+28     	; 0x542c <soft_timer_window_task+0x1f8>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
    5410:	e7 e8       	ldi	r30, 0x87	; 135
    5412:	f0 e6       	ldi	r31, 0x60	; 96
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    5418:	80 8b       	std	Z+16, r24	; 0x10
    541a:	08 c0       	rjmp	.+16     	; 0x542c <soft_timer_window_task+0x1f8>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
    541c:	95 30       	cpi	r25, 0x05	; 5
    541e:	31 f4       	brne	.+12     	; 0x542c <soft_timer_window_task+0x1f8>
    {
        if (window_obj_ptr->slide_status == 0)
    5420:	80 91 8f 60 	lds	r24, 0x608F	; 0x80608f <g_left_window_obj+0x8>
    5424:	81 11       	cpse	r24, r1
    5426:	02 c0       	rjmp	.+4      	; 0x542c <soft_timer_window_task+0x1f8>
        {
            window_obj_ptr->status = 0;
    5428:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
        }
    }
    window_task(window_ptr);
    542c:	82 e9       	ldi	r24, 0x92	; 146
    542e:	90 e6       	ldi	r25, 0x60	; 96
    5430:	0e 94 81 2b 	call	0x5702	; 0x5702 <window_task>

    /*************************************RIGHT************************************************/
    window_obj_ptr = &g_right_window_obj;
    window_ptr = &g_right_window_obj.window;
    if (rear_status_last != rear_status)
    5434:	90 91 1f 64 	lds	r25, 0x641F	; 0x80641f <rear_status_last.6472>
    5438:	80 91 20 64 	lds	r24, 0x6420	; 0x806420 <rear_status.6473>
    543c:	98 17       	cp	r25, r24
    543e:	21 f0       	breq	.+8      	; 0x5448 <soft_timer_window_task+0x214>
    {
        window_obj_var_clear(window_obj_ptr);
    5440:	80 e7       	ldi	r24, 0x70	; 112
    5442:	90 e6       	ldi	r25, 0x60	; 96
    5444:	0e 94 03 29 	call	0x5206	; 0x5206 <window_obj_var_clear>
    }

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
    5448:	c0 e7       	ldi	r28, 0x70	; 112
    544a:	d0 e6       	ldi	r29, 0x60	; 96
    544c:	8c 81       	ldd	r24, Y+4	; 0x04
    544e:	8b 83       	std	Y+3, r24	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(2) & 0x80;
    5450:	82 e0       	ldi	r24, 0x02	; 2
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	0e 94 85 52 	call	0xa50a	; 0xa50a <get_sensor_state>
    5458:	80 78       	andi	r24, 0x80	; 128
    545a:	8c 83       	std	Y+4, r24	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
    545c:	8e 81       	ldd	r24, Y+6	; 0x06
    545e:	8d 83       	std	Y+5, r24	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(1) & 0x80;
    5460:	81 e0       	ldi	r24, 0x01	; 1
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	0e 94 85 52 	call	0xa50a	; 0xa50a <get_sensor_state>
    5468:	80 78       	andi	r24, 0x80	; 128
    546a:	8e 83       	std	Y+6, r24	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
    546c:	9c 81       	ldd	r25, Y+4	; 0x04
    546e:	99 8b       	std	Y+17, r25	; 0x11
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
    5470:	8a 8b       	std	Y+18, r24	; 0x12

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
    5472:	99 23       	and	r25, r25
    5474:	69 f0       	breq	.+26     	; 0x5490 <soft_timer_window_task+0x25c>
    5476:	80 91 73 60 	lds	r24, 0x6073	; 0x806073 <g_right_window_obj+0x3>
    547a:	81 11       	cpse	r24, r1
    547c:	09 c0       	rjmp	.+18     	; 0x5490 <soft_timer_window_task+0x25c>
    {
        window_obj_ptr->ticks = 0;
    547e:	19 82       	std	Y+1, r1	; 0x01
    5480:	1a 82       	std	Y+2, r1	; 0x02
        window_obj_ptr->status = 2;
    5482:	82 e0       	ldi	r24, 0x02	; 2
    5484:	88 83       	st	Y, r24
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    5486:	41 e0       	ldi	r20, 0x01	; 1
    5488:	61 e0       	ldi	r22, 0x01	; 1
    548a:	8a e0       	ldi	r24, 0x0A	; 10
    548c:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    }

    if (window_obj_ptr->status == 2)
    5490:	80 91 70 60 	lds	r24, 0x6070	; 0x806070 <g_right_window_obj>
    5494:	82 30       	cpi	r24, 0x02	; 2
    5496:	c1 f4       	brne	.+48     	; 0x54c8 <soft_timer_window_task+0x294>
    {
        window_obj_ptr->ticks++;
    5498:	e0 e7       	ldi	r30, 0x70	; 112
    549a:	f0 e6       	ldi	r31, 0x60	; 96
    549c:	81 81       	ldd	r24, Z+1	; 0x01
    549e:	92 81       	ldd	r25, Z+2	; 0x02
    54a0:	01 96       	adiw	r24, 0x01	; 1
    54a2:	81 83       	std	Z+1, r24	; 0x01
    54a4:	92 83       	std	Z+2, r25	; 0x02
        window_ptr->long_flg = 1;
    54a6:	21 e0       	ldi	r18, 0x01	; 1
    54a8:	24 87       	std	Z+12, r18	; 0x0c
        window_ptr->btn_a_cap_trig_flg = 1;
    54aa:	26 87       	std	Z+14, r18	; 0x0e
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    54ac:	0f 97       	sbiw	r24, 0x0f	; 15
    54ae:	10 f0       	brcs	.+4      	; 0x54b4 <soft_timer_window_task+0x280>
        {
            window_obj_ptr->status = 0;
    54b0:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_a_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_a_status == 0)
    54b4:	80 91 74 60 	lds	r24, 0x6074	; 0x806074 <g_right_window_obj+0x4>
    54b8:	81 11       	cpse	r24, r1
    54ba:	06 c0       	rjmp	.+12     	; 0x54c8 <soft_timer_window_task+0x294>
        {
            window_obj_ptr->status = 0;
    54bc:	e0 e7       	ldi	r30, 0x70	; 112
    54be:	f0 e6       	ldi	r31, 0x60	; 96
    54c0:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    54c2:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_a_cap_trig_flg = 1;
    54c4:	81 e0       	ldi	r24, 0x01	; 1
    54c6:	86 87       	std	Z+14, r24	; 0x0e
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
    54c8:	80 91 76 60 	lds	r24, 0x6076	; 0x806076 <g_right_window_obj+0x6>
    54cc:	88 23       	and	r24, r24
    54ce:	79 f0       	breq	.+30     	; 0x54ee <soft_timer_window_task+0x2ba>
    54d0:	80 91 75 60 	lds	r24, 0x6075	; 0x806075 <g_right_window_obj+0x5>
    54d4:	81 11       	cpse	r24, r1
    54d6:	0b c0       	rjmp	.+22     	; 0x54ee <soft_timer_window_task+0x2ba>
    {
        window_obj_ptr->ticks = 0;
    54d8:	e0 e7       	ldi	r30, 0x70	; 112
    54da:	f0 e6       	ldi	r31, 0x60	; 96
    54dc:	11 82       	std	Z+1, r1	; 0x01
    54de:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
    54e0:	83 e0       	ldi	r24, 0x03	; 3
    54e2:	80 83       	st	Z, r24
        lin_signal_send_x_times(LI0_DFGLS_ButtonSoundRequest, 1, 1);
    54e4:	41 e0       	ldi	r20, 0x01	; 1
    54e6:	61 e0       	ldi	r22, 0x01	; 1
    54e8:	8a e0       	ldi	r24, 0x0A	; 10
    54ea:	0e 94 75 28 	call	0x50ea	; 0x50ea <lin_signal_send_x_times>
    }

    if (window_obj_ptr->status == 3)
    54ee:	80 91 70 60 	lds	r24, 0x6070	; 0x806070 <g_right_window_obj>
    54f2:	83 30       	cpi	r24, 0x03	; 3
    54f4:	c1 f4       	brne	.+48     	; 0x5526 <soft_timer_window_task+0x2f2>
    {
        window_obj_ptr->ticks++;
    54f6:	e0 e7       	ldi	r30, 0x70	; 112
    54f8:	f0 e6       	ldi	r31, 0x60	; 96
    54fa:	81 81       	ldd	r24, Z+1	; 0x01
    54fc:	92 81       	ldd	r25, Z+2	; 0x02
    54fe:	01 96       	adiw	r24, 0x01	; 1
    5500:	81 83       	std	Z+1, r24	; 0x01
    5502:	92 83       	std	Z+2, r25	; 0x02
        window_ptr->long_flg = 1;
    5504:	21 e0       	ldi	r18, 0x01	; 1
    5506:	24 87       	std	Z+12, r18	; 0x0c
        window_ptr->btn_b_cap_trig_flg = 1;
    5508:	25 87       	std	Z+13, r18	; 0x0d
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    550a:	0f 97       	sbiw	r24, 0x0f	; 15
    550c:	10 f0       	brcs	.+4      	; 0x5512 <soft_timer_window_task+0x2de>
        {
            window_obj_ptr->status = 0;
    550e:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_b_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_b_status == 0)
    5512:	80 91 76 60 	lds	r24, 0x6076	; 0x806076 <g_right_window_obj+0x6>
    5516:	81 11       	cpse	r24, r1
    5518:	06 c0       	rjmp	.+12     	; 0x5526 <soft_timer_window_task+0x2f2>
        {
            window_obj_ptr->status = 0;
    551a:	e0 e7       	ldi	r30, 0x70	; 112
    551c:	f0 e6       	ldi	r31, 0x60	; 96
    551e:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    5520:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_b_cap_trig_flg = 1;
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	85 87       	std	Z+13, r24	; 0x0d
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
    5526:	c0 e7       	ldi	r28, 0x70	; 112
    5528:	d0 e6       	ldi	r29, 0x60	; 96
    552a:	88 85       	ldd	r24, Y+8	; 0x08
    552c:	8f 83       	std	Y+7, r24	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(0);
    552e:	80 e0       	ldi	r24, 0x00	; 0
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	0e 94 94 52 	call	0xa528	; 0xa528 <get_scroller_state>
    5536:	88 87       	std	Y+8, r24	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
    5538:	8b 8b       	std	Y+19, r24	; 0x13

    window_obj_ptr->slide_pos = get_scroller_position(0);
    553a:	80 e0       	ldi	r24, 0x00	; 0
    553c:	90 e0       	ldi	r25, 0x00	; 0
    553e:	0e 94 a6 52 	call	0xa54c	; 0xa54c <get_scroller_position>
    5542:	8a 87       	std	Y+10, r24	; 0x0a

    if (window_obj_ptr->status == 0)
    5544:	98 81       	ld	r25, Y
    5546:	91 11       	cpse	r25, r1
    5548:	0f c0       	rjmp	.+30     	; 0x5568 <soft_timer_window_task+0x334>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
    554a:	90 91 78 60 	lds	r25, 0x6078	; 0x806078 <g_right_window_obj+0x8>
    554e:	99 23       	and	r25, r25
    5550:	09 f4       	brne	.+2      	; 0x5554 <soft_timer_window_task+0x320>
    5552:	66 c0       	rjmp	.+204    	; 0x5620 <soft_timer_window_task+0x3ec>
    5554:	90 91 77 60 	lds	r25, 0x6077	; 0x806077 <g_right_window_obj+0x7>
    5558:	91 11       	cpse	r25, r1
    555a:	62 c0       	rjmp	.+196    	; 0x5620 <soft_timer_window_task+0x3ec>
        {
            window_obj_ptr->ticks = 0;
    555c:	19 82       	std	Y+1, r1	; 0x01
    555e:	1a 82       	std	Y+2, r1	; 0x02
            window_obj_ptr->status = 4;
    5560:	94 e0       	ldi	r25, 0x04	; 4
    5562:	98 83       	st	Y, r25
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
    5564:	89 87       	std	Y+9, r24	; 0x09
    5566:	5c c0       	rjmp	.+184    	; 0x5620 <soft_timer_window_task+0x3ec>
        }
    }
    else if (window_obj_ptr->status == 4)
    5568:	94 30       	cpi	r25, 0x04	; 4
    556a:	09 f0       	breq	.+2      	; 0x556e <soft_timer_window_task+0x33a>
    556c:	51 c0       	rjmp	.+162    	; 0x5610 <soft_timer_window_task+0x3dc>
    {
        if (window_obj_ptr->slide_status == 0)
    556e:	90 91 78 60 	lds	r25, 0x6078	; 0x806078 <g_right_window_obj+0x8>
    5572:	91 11       	cpse	r25, r1
    5574:	19 c0       	rjmp	.+50     	; 0x55a8 <soft_timer_window_task+0x374>
        {
            window_obj_ptr->status = 0;
    5576:	e0 e7       	ldi	r30, 0x70	; 112
    5578:	f0 e6       	ldi	r31, 0x60	; 96
    557a:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
    557c:	91 85       	ldd	r25, Z+9	; 0x09
    557e:	94 36       	cpi	r25, 0x64	; 100
    5580:	38 f4       	brcc	.+14     	; 0x5590 <soft_timer_window_task+0x35c>
            {
                if (window_obj_ptr->slide_pos > 150)
    5582:	87 39       	cpi	r24, 0x97	; 151
    5584:	08 f4       	brcc	.+2      	; 0x5588 <soft_timer_window_task+0x354>
    5586:	4c c0       	rjmp	.+152    	; 0x5620 <soft_timer_window_task+0x3ec>
                {
                    window_ptr->long_flg = 0;
    5588:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_1_to_2_flg = 1;
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	87 87       	std	Z+15, r24	; 0x0f
    558e:	48 c0       	rjmp	.+144    	; 0x5620 <soft_timer_window_task+0x3ec>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
    5590:	97 39       	cpi	r25, 0x97	; 151
    5592:	08 f4       	brcc	.+2      	; 0x5596 <soft_timer_window_task+0x362>
    5594:	45 c0       	rjmp	.+138    	; 0x5620 <soft_timer_window_task+0x3ec>
            {
                if (window_obj_ptr->slide_pos < 100)
    5596:	84 36       	cpi	r24, 0x64	; 100
    5598:	08 f0       	brcs	.+2      	; 0x559c <soft_timer_window_task+0x368>
    559a:	42 c0       	rjmp	.+132    	; 0x5620 <soft_timer_window_task+0x3ec>
                {
                    window_ptr->long_flg = 0;
    559c:	e0 e7       	ldi	r30, 0x70	; 112
    559e:	f0 e6       	ldi	r31, 0x60	; 96
    55a0:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_2_to_1_flg = 1;
    55a2:	81 e0       	ldi	r24, 0x01	; 1
    55a4:	80 8b       	std	Z+16, r24	; 0x10
    55a6:	3c c0       	rjmp	.+120    	; 0x5620 <soft_timer_window_task+0x3ec>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
    55a8:	e0 e7       	ldi	r30, 0x70	; 112
    55aa:	f0 e6       	ldi	r31, 0x60	; 96
    55ac:	21 81       	ldd	r18, Z+1	; 0x01
    55ae:	32 81       	ldd	r19, Z+2	; 0x02
    55b0:	2f 5f       	subi	r18, 0xFF	; 255
    55b2:	3f 4f       	sbci	r19, 0xFF	; 255
    55b4:	21 83       	std	Z+1, r18	; 0x01
    55b6:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
    55b8:	99 23       	and	r25, r25
    55ba:	91 f1       	breq	.+100    	; 0x5620 <soft_timer_window_task+0x3ec>
            {
                if (window_obj_ptr->slide_pos_first < 100)
    55bc:	90 91 79 60 	lds	r25, 0x6079	; 0x806079 <g_right_window_obj+0x9>
    55c0:	94 36       	cpi	r25, 0x64	; 100
    55c2:	88 f4       	brcc	.+34     	; 0x55e6 <soft_timer_window_task+0x3b2>
                {
                    if (window_obj_ptr->slide_pos > 150)
    55c4:	87 39       	cpi	r24, 0x97	; 151
    55c6:	60 f1       	brcs	.+88     	; 0x5620 <soft_timer_window_task+0x3ec>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    55c8:	2f 30       	cpi	r18, 0x0F	; 15
    55ca:	31 05       	cpc	r19, r1
    55cc:	30 f0       	brcs	.+12     	; 0x55da <soft_timer_window_task+0x3a6>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	87 87       	std	Z+15, r24	; 0x0f
                            window_obj_ptr->status = 5;
    55d2:	95 e0       	ldi	r25, 0x05	; 5
    55d4:	90 83       	st	Z, r25
                            window_ptr->long_flg = 1;
    55d6:	84 87       	std	Z+12, r24	; 0x0c
    55d8:	23 c0       	rjmp	.+70     	; 0x5620 <soft_timer_window_task+0x3ec>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    55da:	e0 e7       	ldi	r30, 0x70	; 112
    55dc:	f0 e6       	ldi	r31, 0x60	; 96
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	87 87       	std	Z+15, r24	; 0x0f
                            window_ptr->long_flg = 1;
    55e2:	84 87       	std	Z+12, r24	; 0x0c
    55e4:	1d c0       	rjmp	.+58     	; 0x5620 <soft_timer_window_task+0x3ec>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
    55e6:	97 39       	cpi	r25, 0x97	; 151
    55e8:	d8 f0       	brcs	.+54     	; 0x5620 <soft_timer_window_task+0x3ec>
                {
                    if (window_obj_ptr->slide_pos < 100)
    55ea:	84 36       	cpi	r24, 0x64	; 100
    55ec:	c8 f4       	brcc	.+50     	; 0x5620 <soft_timer_window_task+0x3ec>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    55ee:	2f 30       	cpi	r18, 0x0F	; 15
    55f0:	31 05       	cpc	r19, r1
    55f2:	40 f0       	brcs	.+16     	; 0x5604 <soft_timer_window_task+0x3d0>
                        {
                            window_obj_ptr->status = 5;
    55f4:	e0 e7       	ldi	r30, 0x70	; 112
    55f6:	f0 e6       	ldi	r31, 0x60	; 96
    55f8:	85 e0       	ldi	r24, 0x05	; 5
    55fa:	80 83       	st	Z, r24
                            window_ptr->long_flg = 1;
    55fc:	81 e0       	ldi	r24, 0x01	; 1
    55fe:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    5600:	80 8b       	std	Z+16, r24	; 0x10
    5602:	0e c0       	rjmp	.+28     	; 0x5620 <soft_timer_window_task+0x3ec>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
    5604:	e0 e7       	ldi	r30, 0x70	; 112
    5606:	f0 e6       	ldi	r31, 0x60	; 96
    5608:	81 e0       	ldi	r24, 0x01	; 1
    560a:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    560c:	80 8b       	std	Z+16, r24	; 0x10
    560e:	08 c0       	rjmp	.+16     	; 0x5620 <soft_timer_window_task+0x3ec>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
    5610:	95 30       	cpi	r25, 0x05	; 5
    5612:	31 f4       	brne	.+12     	; 0x5620 <soft_timer_window_task+0x3ec>
    {
        if (window_obj_ptr->slide_status == 0)
    5614:	80 91 78 60 	lds	r24, 0x6078	; 0x806078 <g_right_window_obj+0x8>
    5618:	81 11       	cpse	r24, r1
    561a:	02 c0       	rjmp	.+4      	; 0x5620 <soft_timer_window_task+0x3ec>
        {
            window_obj_ptr->status = 0;
    561c:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
        }
    }
    window_task(window_ptr);
    5620:	8b e7       	ldi	r24, 0x7B	; 123
    5622:	90 e6       	ldi	r25, 0x60	; 96
    5624:	0e 94 81 2b 	call	0x5702	; 0x5702 <window_task>
}
    5628:	df 91       	pop	r29
    562a:	cf 91       	pop	r28
    562c:	08 95       	ret

0000562e <btn_rear_tick_task>:
#include "atmel_start_pins.h"

void btn_rear_tick_task(void)
{
    btn_rear_t *btn_rear_ptr = &g_btn_rear;
    switch (btn_rear_ptr->status)
    562e:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <g_btn_rear>
    5632:	88 23       	and	r24, r24
    5634:	19 f0       	breq	.+6      	; 0x563c <btn_rear_tick_task+0xe>
    5636:	81 30       	cpi	r24, 0x01	; 1
    5638:	d9 f0       	breq	.+54     	; 0x5670 <btn_rear_tick_task+0x42>
    563a:	08 95       	ret
    {
    case 0:
        if (btn_rear_ptr->cap_trig_flg == 1)
    563c:	80 91 a8 60 	lds	r24, 0x60A8	; 0x8060a8 <g_btn_rear+0x1>
    5640:	81 30       	cpi	r24, 0x01	; 1
    5642:	09 f0       	breq	.+2      	; 0x5646 <btn_rear_tick_task+0x18>
    5644:	5d c0       	rjmp	.+186    	; 0x5700 <btn_rear_tick_task+0xd2>
        {
            btn_rear_ptr->cap_trig_flg = 0;
    5646:	e7 ea       	ldi	r30, 0xA7	; 167
    5648:	f0 e6       	ldi	r31, 0x60	; 96
    564a:	11 82       	std	Z+1, r1	; 0x01
            if (btn_rear_ptr->press_trig_flg == 1)
    564c:	83 81       	ldd	r24, Z+3	; 0x03
    564e:	81 30       	cpi	r24, 0x01	; 1
    5650:	09 f0       	breq	.+2      	; 0x5654 <btn_rear_tick_task+0x26>
    5652:	56 c0       	rjmp	.+172    	; 0x5700 <btn_rear_tick_task+0xd2>
            {
                btn_rear_ptr->press_trig_flg = 0;
    5654:	13 82       	std	Z+3, r1	; 0x03

                btn_rear_ptr->status = 1;
    5656:	80 83       	st	Z, r24
                btn_rear_ptr->ticks = 0;
    5658:	14 82       	std	Z+4, r1	; 0x04
    565a:	15 82       	std	Z+5, r1	; 0x05
    565c:	16 82       	std	Z+6, r1	; 0x06
    565e:	17 82       	std	Z+7, r1	; 0x07
                if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
    5660:	00 84       	ldd	r0, Z+8	; 0x08
    5662:	f1 85       	ldd	r31, Z+9	; 0x09
    5664:	e0 2d       	mov	r30, r0
    5666:	30 97       	sbiw	r30, 0x00	; 0
    5668:	09 f4       	brne	.+2      	; 0x566c <btn_rear_tick_task+0x3e>
    566a:	4a c0       	rjmp	.+148    	; 0x5700 <btn_rear_tick_task+0xd2>
                {
                    btn_rear_ptr->rear_led_ctrl_cb(1);
    566c:	09 95       	icall
    566e:	08 95       	ret
                }
            }
        }
        break;
    case 1:
        if (btn_rear_ptr->all_cap_status == 1)
    5670:	80 91 a9 60 	lds	r24, 0x60A9	; 0x8060a9 <g_btn_rear+0x2>
    5674:	81 30       	cpi	r24, 0x01	; 1
    5676:	49 f4       	brne	.+18     	; 0x568a <btn_rear_tick_task+0x5c>
        {
            btn_rear_ptr->ticks = 0;
    5678:	10 92 ab 60 	sts	0x60AB, r1	; 0x8060ab <g_btn_rear+0x4>
    567c:	10 92 ac 60 	sts	0x60AC, r1	; 0x8060ac <g_btn_rear+0x5>
    5680:	10 92 ad 60 	sts	0x60AD, r1	; 0x8060ad <g_btn_rear+0x6>
    5684:	10 92 ae 60 	sts	0x60AE, r1	; 0x8060ae <g_btn_rear+0x7>
    5688:	0d c0       	rjmp	.+26     	; 0x56a4 <btn_rear_tick_task+0x76>
        }
        else
        {
            btn_rear_ptr->ticks++;
    568a:	e7 ea       	ldi	r30, 0xA7	; 167
    568c:	f0 e6       	ldi	r31, 0x60	; 96
    568e:	84 81       	ldd	r24, Z+4	; 0x04
    5690:	95 81       	ldd	r25, Z+5	; 0x05
    5692:	a6 81       	ldd	r26, Z+6	; 0x06
    5694:	b7 81       	ldd	r27, Z+7	; 0x07
    5696:	01 96       	adiw	r24, 0x01	; 1
    5698:	a1 1d       	adc	r26, r1
    569a:	b1 1d       	adc	r27, r1
    569c:	84 83       	std	Z+4, r24	; 0x04
    569e:	95 83       	std	Z+5, r25	; 0x05
    56a0:	a6 83       	std	Z+6, r26	; 0x06
    56a2:	b7 83       	std	Z+7, r27	; 0x07
        }
        if (btn_rear_ptr->ticks >= ((uint32_t)TIMEOUT_REAR_UNIT_S * 1000 / ONE_TICK_UNIT_MS))
    56a4:	80 91 ab 60 	lds	r24, 0x60AB	; 0x8060ab <g_btn_rear+0x4>
    56a8:	90 91 ac 60 	lds	r25, 0x60AC	; 0x8060ac <g_btn_rear+0x5>
    56ac:	a0 91 ad 60 	lds	r26, 0x60AD	; 0x8060ad <g_btn_rear+0x6>
    56b0:	b0 91 ae 60 	lds	r27, 0x60AE	; 0x8060ae <g_btn_rear+0x7>
    56b4:	88 3b       	cpi	r24, 0xB8	; 184
    56b6:	9b 40       	sbci	r25, 0x0B	; 11
    56b8:	a1 05       	cpc	r26, r1
    56ba:	b1 05       	cpc	r27, r1
    56bc:	70 f0       	brcs	.+28     	; 0x56da <btn_rear_tick_task+0xac>
        {
            btn_rear_ptr->ticks = 0;
    56be:	e7 ea       	ldi	r30, 0xA7	; 167
    56c0:	f0 e6       	ldi	r31, 0x60	; 96
    56c2:	14 82       	std	Z+4, r1	; 0x04
    56c4:	15 82       	std	Z+5, r1	; 0x05
    56c6:	16 82       	std	Z+6, r1	; 0x06
    56c8:	17 82       	std	Z+7, r1	; 0x07

            btn_rear_ptr->status = 0;
    56ca:	10 82       	st	Z, r1
            if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
    56cc:	00 84       	ldd	r0, Z+8	; 0x08
    56ce:	f1 85       	ldd	r31, Z+9	; 0x09
    56d0:	e0 2d       	mov	r30, r0
    56d2:	30 97       	sbiw	r30, 0x00	; 0
    56d4:	11 f0       	breq	.+4      	; 0x56da <btn_rear_tick_task+0xac>
            {
                btn_rear_ptr->rear_led_ctrl_cb(0);
    56d6:	80 e0       	ldi	r24, 0x00	; 0
    56d8:	09 95       	icall
            }
        }
        if (btn_rear_ptr->cap_trig_flg == 1)
    56da:	80 91 a8 60 	lds	r24, 0x60A8	; 0x8060a8 <g_btn_rear+0x1>
    56de:	81 30       	cpi	r24, 0x01	; 1
    56e0:	79 f4       	brne	.+30     	; 0x5700 <btn_rear_tick_task+0xd2>
        {
            btn_rear_ptr->cap_trig_flg = 0;
    56e2:	e7 ea       	ldi	r30, 0xA7	; 167
    56e4:	f0 e6       	ldi	r31, 0x60	; 96
    56e6:	11 82       	std	Z+1, r1	; 0x01
            if (btn_rear_ptr->press_trig_flg == 1)
    56e8:	83 81       	ldd	r24, Z+3	; 0x03
    56ea:	81 30       	cpi	r24, 0x01	; 1
    56ec:	49 f4       	brne	.+18     	; 0x5700 <btn_rear_tick_task+0xd2>
            {
                btn_rear_ptr->press_trig_flg = 0;
    56ee:	13 82       	std	Z+3, r1	; 0x03

                btn_rear_ptr->status = 0;
    56f0:	10 82       	st	Z, r1
                if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
    56f2:	00 84       	ldd	r0, Z+8	; 0x08
    56f4:	f1 85       	ldd	r31, Z+9	; 0x09
    56f6:	e0 2d       	mov	r30, r0
    56f8:	30 97       	sbiw	r30, 0x00	; 0
    56fa:	11 f0       	breq	.+4      	; 0x5700 <btn_rear_tick_task+0xd2>
                {
                    btn_rear_ptr->rear_led_ctrl_cb(0);
    56fc:	80 e0       	ldi	r24, 0x00	; 0
    56fe:	09 95       	icall
    5700:	08 95       	ret

00005702 <window_task>:
        break;
    }
}

void window_task(window_t *window_ptr)
{
    5702:	cf 93       	push	r28
    5704:	df 93       	push	r29
    5706:	ec 01       	movw	r28, r24
    switch (window_ptr->status)
    5708:	88 81       	ld	r24, Y
    570a:	81 30       	cpi	r24, 0x01	; 1
    570c:	09 f4       	brne	.+2      	; 0x5710 <window_task+0xe>
    570e:	6c c0       	rjmp	.+216    	; 0x57e8 <window_task+0xe6>
    5710:	20 f0       	brcs	.+8      	; 0x571a <window_task+0x18>
    5712:	82 30       	cpi	r24, 0x02	; 2
    5714:	09 f4       	brne	.+2      	; 0x5718 <window_task+0x16>
    5716:	8d c0       	rjmp	.+282    	; 0x5832 <window_task+0x130>
    5718:	9d c0       	rjmp	.+314    	; 0x5854 <window_task+0x152>
    {
    case 0:
    {
        window_ptr->signal = SIGNAL_VAL_NO_REQUEST;
    571a:	19 86       	std	Y+9, r1	; 0x09
        if (window_ptr->btn_a_cap_trig_flg == 1)
    571c:	8b 81       	ldd	r24, Y+3	; 0x03
    571e:	81 30       	cpi	r24, 0x01	; 1
    5720:	b1 f4       	brne	.+44     	; 0x574e <window_task+0x4c>
        {
            window_ptr->btn_a_cap_trig_flg = 0;
    5722:	1b 82       	std	Y+3, r1	; 0x03

            if (window_ptr->long_flg == 1)
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	81 30       	cpi	r24, 0x01	; 1
    5728:	49 f4       	brne	.+18     	; 0x573c <window_task+0x3a>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    572a:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    572c:	ea 85       	ldd	r30, Y+10	; 0x0a
    572e:	fb 85       	ldd	r31, Y+11	; 0x0b
    5730:	30 97       	sbiw	r30, 0x00	; 0
    5732:	09 f0       	breq	.+2      	; 0x5736 <window_task+0x34>
                {
                    window_ptr->cb(window_ptr->signal);
    5734:	09 95       	icall
                }
                window_ptr->status = 1;
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	88 83       	st	Y, r24
    573a:	8c c0       	rjmp	.+280    	; 0x5854 <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    573c:	83 e0       	ldi	r24, 0x03	; 3
    573e:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    5740:	ea 85       	ldd	r30, Y+10	; 0x0a
    5742:	fb 85       	ldd	r31, Y+11	; 0x0b
    5744:	30 97       	sbiw	r30, 0x00	; 0
    5746:	09 f4       	brne	.+2      	; 0x574a <window_task+0x48>
    5748:	85 c0       	rjmp	.+266    	; 0x5854 <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    574a:	09 95       	icall
    574c:	83 c0       	rjmp	.+262    	; 0x5854 <window_task+0x152>
                }
            }
        }
        else if (window_ptr->btn_b_cap_trig_flg == 1)
    574e:	8a 81       	ldd	r24, Y+2	; 0x02
    5750:	81 30       	cpi	r24, 0x01	; 1
    5752:	b9 f4       	brne	.+46     	; 0x5782 <window_task+0x80>
        {
            window_ptr->btn_b_cap_trig_flg = 0;
    5754:	1a 82       	std	Y+2, r1	; 0x02

            if (window_ptr->long_flg == 1)
    5756:	89 81       	ldd	r24, Y+1	; 0x01
    5758:	81 30       	cpi	r24, 0x01	; 1
    575a:	51 f4       	brne	.+20     	; 0x5770 <window_task+0x6e>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    575c:	82 e0       	ldi	r24, 0x02	; 2
    575e:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    5760:	ea 85       	ldd	r30, Y+10	; 0x0a
    5762:	fb 85       	ldd	r31, Y+11	; 0x0b
    5764:	30 97       	sbiw	r30, 0x00	; 0
    5766:	09 f0       	breq	.+2      	; 0x576a <window_task+0x68>
                {
                    window_ptr->cb(window_ptr->signal);
    5768:	09 95       	icall
                }
                window_ptr->status = 1;
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	88 83       	st	Y, r24
    576e:	72 c0       	rjmp	.+228    	; 0x5854 <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    5770:	84 e0       	ldi	r24, 0x04	; 4
    5772:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    5774:	ea 85       	ldd	r30, Y+10	; 0x0a
    5776:	fb 85       	ldd	r31, Y+11	; 0x0b
    5778:	30 97       	sbiw	r30, 0x00	; 0
    577a:	09 f4       	brne	.+2      	; 0x577e <window_task+0x7c>
    577c:	6b c0       	rjmp	.+214    	; 0x5854 <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    577e:	09 95       	icall
    5780:	69 c0       	rjmp	.+210    	; 0x5854 <window_task+0x152>
                }
            }
        }
        else if (window_ptr->slide_1_to_2_flg == 1)
    5782:	8c 81       	ldd	r24, Y+4	; 0x04
    5784:	81 30       	cpi	r24, 0x01	; 1
    5786:	b1 f4       	brne	.+44     	; 0x57b4 <window_task+0xb2>
        {
            window_ptr->slide_1_to_2_flg = 0;
    5788:	1c 82       	std	Y+4, r1	; 0x04
            if (window_ptr->long_flg == 1)
    578a:	89 81       	ldd	r24, Y+1	; 0x01
    578c:	81 30       	cpi	r24, 0x01	; 1
    578e:	49 f4       	brne	.+18     	; 0x57a2 <window_task+0xa0>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    5790:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    5792:	ea 85       	ldd	r30, Y+10	; 0x0a
    5794:	fb 85       	ldd	r31, Y+11	; 0x0b
    5796:	30 97       	sbiw	r30, 0x00	; 0
    5798:	09 f0       	breq	.+2      	; 0x579c <window_task+0x9a>
                {
                    window_ptr->cb(window_ptr->signal);
    579a:	09 95       	icall
                }
                window_ptr->status = 2;
    579c:	82 e0       	ldi	r24, 0x02	; 2
    579e:	88 83       	st	Y, r24
    57a0:	59 c0       	rjmp	.+178    	; 0x5854 <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    57a2:	83 e0       	ldi	r24, 0x03	; 3
    57a4:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    57a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    57a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    57aa:	30 97       	sbiw	r30, 0x00	; 0
    57ac:	09 f4       	brne	.+2      	; 0x57b0 <window_task+0xae>
    57ae:	52 c0       	rjmp	.+164    	; 0x5854 <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    57b0:	09 95       	icall
    57b2:	50 c0       	rjmp	.+160    	; 0x5854 <window_task+0x152>
                }
            }
        }
        else if (window_ptr->slide_2_to_1_flg == 1)
    57b4:	8d 81       	ldd	r24, Y+5	; 0x05
    57b6:	81 30       	cpi	r24, 0x01	; 1
    57b8:	09 f0       	breq	.+2      	; 0x57bc <window_task+0xba>
    57ba:	4c c0       	rjmp	.+152    	; 0x5854 <window_task+0x152>
        {
            window_ptr->slide_2_to_1_flg = 0;
    57bc:	1d 82       	std	Y+5, r1	; 0x05
            if (window_ptr->long_flg == 1)
    57be:	89 81       	ldd	r24, Y+1	; 0x01
    57c0:	81 30       	cpi	r24, 0x01	; 1
    57c2:	51 f4       	brne	.+20     	; 0x57d8 <window_task+0xd6>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    57c4:	82 e0       	ldi	r24, 0x02	; 2
    57c6:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    57c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    57ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    57cc:	30 97       	sbiw	r30, 0x00	; 0
    57ce:	09 f0       	breq	.+2      	; 0x57d2 <window_task+0xd0>
                {
                    window_ptr->cb(window_ptr->signal);
    57d0:	09 95       	icall
                }
                window_ptr->status = 2;
    57d2:	82 e0       	ldi	r24, 0x02	; 2
    57d4:	88 83       	st	Y, r24
    57d6:	3e c0       	rjmp	.+124    	; 0x5854 <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    57d8:	84 e0       	ldi	r24, 0x04	; 4
    57da:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    57dc:	ea 85       	ldd	r30, Y+10	; 0x0a
    57de:	fb 85       	ldd	r31, Y+11	; 0x0b
    57e0:	30 97       	sbiw	r30, 0x00	; 0
    57e2:	c1 f1       	breq	.+112    	; 0x5854 <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    57e4:	09 95       	icall
    57e6:	36 c0       	rjmp	.+108    	; 0x5854 <window_task+0x152>
        }
    }
    break;
    case 1:
    {
        if (window_ptr->signal == SIGNAL_VAL_MANUAL_DOWN)
    57e8:	89 85       	ldd	r24, Y+9	; 0x09
    57ea:	82 30       	cpi	r24, 0x02	; 2
    57ec:	81 f4       	brne	.+32     	; 0x580e <window_task+0x10c>
        {
            if (window_ptr->btn_b_status != 0)
    57ee:	9f 81       	ldd	r25, Y+7	; 0x07
    57f0:	99 23       	and	r25, r25
    57f2:	31 f0       	breq	.+12     	; 0x5800 <window_task+0xfe>
            {
                if (window_ptr->cb != NULL)
    57f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    57f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    57f8:	30 97       	sbiw	r30, 0x00	; 0
    57fa:	61 f1       	breq	.+88     	; 0x5854 <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    57fc:	09 95       	icall
    57fe:	2a c0       	rjmp	.+84     	; 0x5854 <window_task+0x152>
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    5800:	ea 85       	ldd	r30, Y+10	; 0x0a
    5802:	fb 85       	ldd	r31, Y+11	; 0x0b
    5804:	30 97       	sbiw	r30, 0x00	; 0
    5806:	09 f0       	breq	.+2      	; 0x580a <window_task+0x108>
                {
                    window_ptr->cb(window_ptr->signal);
    5808:	09 95       	icall
                }
                window_ptr->status = 0;
    580a:	18 82       	st	Y, r1
    580c:	23 c0       	rjmp	.+70     	; 0x5854 <window_task+0x152>
            }
        }
        else if (window_ptr->signal == SIGNAL_VAL_MANUAL_UP)
    580e:	81 30       	cpi	r24, 0x01	; 1
    5810:	09 f5       	brne	.+66     	; 0x5854 <window_task+0x152>
        {
            if (window_ptr->btn_a_status != 0)
    5812:	9e 81       	ldd	r25, Y+6	; 0x06
    5814:	99 23       	and	r25, r25
    5816:	31 f0       	breq	.+12     	; 0x5824 <window_task+0x122>
            {
                if (window_ptr->cb != NULL)
    5818:	ea 85       	ldd	r30, Y+10	; 0x0a
    581a:	fb 85       	ldd	r31, Y+11	; 0x0b
    581c:	30 97       	sbiw	r30, 0x00	; 0
    581e:	d1 f0       	breq	.+52     	; 0x5854 <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    5820:	09 95       	icall
    5822:	18 c0       	rjmp	.+48     	; 0x5854 <window_task+0x152>
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    5824:	ea 85       	ldd	r30, Y+10	; 0x0a
    5826:	fb 85       	ldd	r31, Y+11	; 0x0b
    5828:	30 97       	sbiw	r30, 0x00	; 0
    582a:	09 f0       	breq	.+2      	; 0x582e <window_task+0x12c>
                {
                    window_ptr->cb(window_ptr->signal);
    582c:	09 95       	icall
                }
                window_ptr->status = 0;
    582e:	18 82       	st	Y, r1
    5830:	11 c0       	rjmp	.+34     	; 0x5854 <window_task+0x152>
        }
    }
    break;
    case 2:
    {
        if (window_ptr->slide_status != 0)
    5832:	88 85       	ldd	r24, Y+8	; 0x08
    5834:	88 23       	and	r24, r24
    5836:	39 f0       	breq	.+14     	; 0x5846 <window_task+0x144>
        {
            if (window_ptr->cb != NULL)
    5838:	ea 85       	ldd	r30, Y+10	; 0x0a
    583a:	fb 85       	ldd	r31, Y+11	; 0x0b
    583c:	30 97       	sbiw	r30, 0x00	; 0
    583e:	51 f0       	breq	.+20     	; 0x5854 <window_task+0x152>
            {
                window_ptr->cb(window_ptr->signal);
    5840:	89 85       	ldd	r24, Y+9	; 0x09
    5842:	09 95       	icall
    5844:	07 c0       	rjmp	.+14     	; 0x5854 <window_task+0x152>
            }
        }
        else
        {
            if (window_ptr->cb != NULL)
    5846:	ea 85       	ldd	r30, Y+10	; 0x0a
    5848:	fb 85       	ldd	r31, Y+11	; 0x0b
    584a:	30 97       	sbiw	r30, 0x00	; 0
    584c:	11 f0       	breq	.+4      	; 0x5852 <window_task+0x150>
            {
                window_ptr->cb(window_ptr->signal);
    584e:	89 85       	ldd	r24, Y+9	; 0x09
    5850:	09 95       	icall
            }
            window_ptr->status = 0;
    5852:	18 82       	st	Y, r1
    }
    break;
    default:
        break;
    }
}
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	08 95       	ret

0000585a <window_lock_task>:
void window_lock_task(void)
{
    window_lock_t *window_lock_ptr = &g_window_lock;
    LIN_RX_signal_t *signal_ptr = &g_lin_rx_signal;

    if (window_lock_ptr->capsense_flg == 1)
    585a:	80 91 a1 60 	lds	r24, 0x60A1	; 0x8060a1 <g_window_lock>
    585e:	81 30       	cpi	r24, 0x01	; 1
    5860:	69 f4       	brne	.+26     	; 0x587c <window_lock_task+0x22>
    {
        window_lock_ptr->capsense_flg = 0;
    5862:	e1 ea       	ldi	r30, 0xA1	; 161
    5864:	f0 e6       	ldi	r31, 0x60	; 96
    5866:	10 82       	st	Z, r1

        if (window_lock_ptr->press_flg == 1)
    5868:	81 81       	ldd	r24, Z+1	; 0x01
    586a:	81 30       	cpi	r24, 0x01	; 1
    586c:	39 f4       	brne	.+14     	; 0x587c <window_lock_task+0x22>
        {
            window_lock_ptr->press_flg = 0;
    586e:	11 82       	std	Z+1, r1	; 0x01

            if (window_lock_ptr->signal_cb != NULL)
    5870:	04 80       	ldd	r0, Z+4	; 0x04
    5872:	f5 81       	ldd	r31, Z+5	; 0x05
    5874:	e0 2d       	mov	r30, r0
    5876:	30 97       	sbiw	r30, 0x00	; 0
    5878:	09 f0       	breq	.+2      	; 0x587c <window_lock_task+0x22>
            {
                window_lock_ptr->signal_cb();
    587a:	09 95       	icall
            }
        }
    }

    if (window_lock_ptr->led_cb != NULL)
    587c:	e0 91 a3 60 	lds	r30, 0x60A3	; 0x8060a3 <g_window_lock+0x2>
    5880:	f0 91 a4 60 	lds	r31, 0x60A4	; 0x8060a4 <g_window_lock+0x3>
    5884:	30 97       	sbiw	r30, 0x00	; 0
    5886:	29 f0       	breq	.+10     	; 0x5892 <window_lock_task+0x38>
    {
        window_lock_ptr->led_cb(signal_ptr->ctrl_window_lock);
    5888:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    588c:	82 95       	swap	r24
    588e:	81 70       	andi	r24, 0x01	; 1
    5890:	09 95       	icall
    5892:	08 95       	ret

00005894 <backlight_task>:

    uint32_t tmp = 0;
    uint32_t night_gain = 0;
    uint32_t pwm_index = 0;

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
    5894:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    5898:	85 ff       	sbrs	r24, 5
    589a:	07 c0       	rjmp	.+14     	; 0x58aa <backlight_task+0x16>
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
        pwm_index = signal_ptr->backlight_brightness;
    589c:	8f 70       	andi	r24, 0x0F	; 15
    589e:	90 e0       	ldi	r25, 0x00	; 0
    uint32_t night_gain = 0;
    uint32_t pwm_index = 0;

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
    58a0:	22 e3       	ldi	r18, 0x32	; 50
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	40 e0       	ldi	r20, 0x00	; 0
    58a6:	50 e0       	ldi	r21, 0x00	; 0
    58a8:	08 c0       	rjmp	.+16     	; 0x58ba <backlight_task+0x26>
        pwm_index = signal_ptr->backlight_brightness;
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
        pwm_index = 9;
    58aa:	89 e0       	ldi	r24, 0x09	; 9
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	a0 e0       	ldi	r26, 0x00	; 0
    58b0:	b0 e0       	ldi	r27, 0x00	; 0
        night_gain = BACKLIGHT_NIGHT_GAIN;
        pwm_index = signal_ptr->backlight_brightness;
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
    58b2:	24 e6       	ldi	r18, 0x64	; 100
    58b4:	30 e0       	ldi	r19, 0x00	; 0
    58b6:	40 e0       	ldi	r20, 0x00	; 0
    58b8:	50 e0       	ldi	r21, 0x00	; 0
        pwm_index = 9;
    }

    tmp = g_level[pwm_index] * night_gain * DUTY_MAX / 10000;
    58ba:	88 0f       	add	r24, r24
    58bc:	99 1f       	adc	r25, r25
    58be:	88 0f       	add	r24, r24
    58c0:	99 1f       	adc	r25, r25
    58c2:	fc 01       	movw	r30, r24
    58c4:	e0 50       	subi	r30, 0x00	; 0
    58c6:	fd 49       	sbci	r31, 0x9D	; 157
    58c8:	60 81       	ld	r22, Z
    58ca:	71 81       	ldd	r23, Z+1	; 0x01
    58cc:	82 81       	ldd	r24, Z+2	; 0x02
    58ce:	93 81       	ldd	r25, Z+3	; 0x03
    58d0:	0e 94 0a 63 	call	0xc614	; 0xc614 <__mulsi3>
    58d4:	9b 01       	movw	r18, r22
    58d6:	ac 01       	movw	r20, r24
    58d8:	aa e4       	ldi	r26, 0x4A	; 74
    58da:	b0 e0       	ldi	r27, 0x00	; 0
    58dc:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    58e0:	20 e1       	ldi	r18, 0x10	; 16
    58e2:	37 e2       	ldi	r19, 0x27	; 39
    58e4:	40 e0       	ldi	r20, 0x00	; 0
    58e6:	50 e0       	ldi	r21, 0x00	; 0
    58e8:	0e 94 1a 63 	call	0xc634	; 0xc634 <__udivmodsi4>

    if (g_backlight_cb != NULL)
    58ec:	e0 91 9e 60 	lds	r30, 0x609E	; 0x80609e <g_backlight_cb>
    58f0:	f0 91 9f 60 	lds	r31, 0x609F	; 0x80609f <g_backlight_cb+0x1>
    58f4:	30 97       	sbiw	r30, 0x00	; 0
    58f6:	19 f0       	breq	.+6      	; 0x58fe <backlight_task+0x6a>
    {
        g_backlight_cb(tmp);
    58f8:	ca 01       	movw	r24, r20
    58fa:	b9 01       	movw	r22, r18
    58fc:	09 95       	icall
    58fe:	08 95       	ret

00005900 <lin_go_to_sleep>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5900:	81 b1       	in	r24, 0x01	; 1
    5902:	8e 7f       	andi	r24, 0xFE	; 254
    5904:	81 b9       	out	0x01, r24	; 1
{
    /* 使能脚设置低电平 */
    LIN_EN_set_level(0);

    /* 关闭usart模块 */
    Disable_global_interrupt();
    5906:	f8 94       	cli
    USART4.CTRLA &= ~(1 << USART_ABEIE_bp | 1 << USART_RXCIE_bp);
    5908:	e0 e8       	ldi	r30, 0x80	; 128
    590a:	f8 e0       	ldi	r31, 0x08	; 8
    590c:	85 81       	ldd	r24, Z+5	; 0x05
    590e:	8b 77       	andi	r24, 0x7B	; 123
    5910:	85 83       	std	Z+5, r24	; 0x05
    USART4.CTRLB &= ~(1 << USART_TXEN_bp | USART_RXMODE_LINAUTO_gc | 1 << USART_RXEN_bp);
    5912:	86 81       	ldd	r24, Z+6	; 0x06
    5914:	89 73       	andi	r24, 0x39	; 57
    5916:	86 83       	std	Z+6, r24	; 0x06
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    5918:	80 b3       	in	r24, 0x10	; 16
    591a:	81 60       	ori	r24, 0x01	; 1
    591c:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    591e:	81 b3       	in	r24, 0x11	; 17
    5920:	8e 7f       	andi	r24, 0xFE	; 254
    5922:	81 bb       	out	0x11, r24	; 17
    5924:	08 95       	ret

00005926 <HC595_Write>:
#define HC595_STCP_RST LED_CS_set_level(false)
#define HC595_SHCP_SET LED_MCLK_set_level(true)
#define HC595_SHCP_RST LED_MCLK_set_level(false)

void HC595_Write(uint8_t *dataPtr, uint8_t icNum, uint8_t bitLen)
{
    5926:	cf 93       	push	r28
    5928:	df 93       	push	r29
    592a:	00 d0       	rcall	.+0      	; 0x592c <HC595_Write+0x6>
    592c:	cd b7       	in	r28, 0x3d	; 61
    592e:	de b7       	in	r29, 0x3e	; 62
    5930:	dc 01       	movw	r26, r24
    uint8_t _dataArr[HC595_NUM] = {0};
    5932:	19 82       	std	Y+1, r1	; 0x01
    5934:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    5936:	90 e0       	ldi	r25, 0x00	; 0
    5938:	12 c0       	rjmp	.+36     	; 0x595e <HC595_Write+0x38>
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    593a:	e6 2f       	mov	r30, r22
    593c:	f0 e0       	ldi	r31, 0x00	; 0
    593e:	31 97       	sbiw	r30, 0x01	; 1
    5940:	29 2f       	mov	r18, r25
    5942:	30 e0       	ldi	r19, 0x00	; 0
    5944:	e2 1b       	sub	r30, r18
    5946:	f3 0b       	sbc	r31, r19
    5948:	ea 0f       	add	r30, r26
    594a:	fb 1f       	adc	r31, r27
    594c:	80 81       	ld	r24, Z
    594e:	e1 e0       	ldi	r30, 0x01	; 1
    5950:	f0 e0       	ldi	r31, 0x00	; 0
    5952:	ec 0f       	add	r30, r28
    5954:	fd 1f       	adc	r31, r29
    5956:	e2 0f       	add	r30, r18
    5958:	f3 1f       	adc	r31, r19
    595a:	80 83       	st	Z, r24
{
    uint8_t _dataArr[HC595_NUM] = {0};
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    595c:	9f 5f       	subi	r25, 0xFF	; 255
    595e:	96 17       	cp	r25, r22
    5960:	60 f3       	brcs	.-40     	; 0x593a <HC595_Write+0x14>
    5962:	20 e0       	ldi	r18, 0x00	; 0
    5964:	28 c0       	rjmp	.+80     	; 0x59b6 <HC595_Write+0x90>

    for (uint8_t i = 0; i < bitLen; i++)
    {
        arrIdx = i / 8;
        bitIdx = i % 8;
        bitVal = _dataArr[arrIdx] & (0x01 << (7 - bitIdx));
    5966:	82 2f       	mov	r24, r18
    5968:	86 95       	lsr	r24
    596a:	86 95       	lsr	r24
    596c:	86 95       	lsr	r24
    596e:	e1 e0       	ldi	r30, 0x01	; 1
    5970:	f0 e0       	ldi	r31, 0x00	; 0
    5972:	ec 0f       	add	r30, r28
    5974:	fd 1f       	adc	r31, r29
    5976:	e8 0f       	add	r30, r24
    5978:	f1 1d       	adc	r31, r1
    597a:	30 81       	ld	r19, Z
    597c:	67 e0       	ldi	r22, 0x07	; 7
    597e:	70 e0       	ldi	r23, 0x00	; 0
    5980:	92 2f       	mov	r25, r18
    5982:	97 70       	andi	r25, 0x07	; 7
    5984:	69 1b       	sub	r22, r25
    5986:	71 09       	sbc	r23, r1
    5988:	81 e0       	ldi	r24, 0x01	; 1
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	02 c0       	rjmp	.+4      	; 0x5992 <HC595_Write+0x6c>
    598e:	88 0f       	add	r24, r24
    5990:	99 1f       	adc	r25, r25
    5992:	6a 95       	dec	r22
    5994:	e2 f7       	brpl	.-8      	; 0x598e <HC595_Write+0x68>
    5996:	83 23       	and	r24, r19

        if (bitVal != 0)
    5998:	21 f0       	breq	.+8      	; 0x59a2 <HC595_Write+0x7c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    599a:	81 b1       	in	r24, 0x01	; 1
    599c:	88 60       	ori	r24, 0x08	; 8
    599e:	81 b9       	out	0x01, r24	; 1
    59a0:	03 c0       	rjmp	.+6      	; 0x59a8 <HC595_Write+0x82>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    59a2:	81 b1       	in	r24, 0x01	; 1
    59a4:	87 7f       	andi	r24, 0xF7	; 247
    59a6:	81 b9       	out	0x01, r24	; 1
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    59a8:	89 b1       	in	r24, 0x09	; 9
    59aa:	8f 77       	andi	r24, 0x7F	; 127
    59ac:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    59ae:	89 b1       	in	r24, 0x09	; 9
    59b0:	80 68       	ori	r24, 0x80	; 128
    59b2:	89 b9       	out	0x09, r24	; 9
    for (uint8_t i = 0; i < icNum; i++)
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    }

    for (uint8_t i = 0; i < bitLen; i++)
    59b4:	2f 5f       	subi	r18, 0xFF	; 255
    59b6:	24 17       	cp	r18, r20
    59b8:	b0 f2       	brcs	.-84     	; 0x5966 <HC595_Write+0x40>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    59ba:	81 b1       	in	r24, 0x01	; 1
    59bc:	8b 7f       	andi	r24, 0xFB	; 251
    59be:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    59c0:	81 b1       	in	r24, 0x01	; 1
    59c2:	84 60       	ori	r24, 0x04	; 4
    59c4:	81 b9       	out	0x01, r24	; 1
        HC595_SHCP_RST;
        HC595_SHCP_SET;
    }
    HC595_STCP_RST;
    HC595_STCP_SET;
}
    59c6:	0f 90       	pop	r0
    59c8:	0f 90       	pop	r0
    59ca:	df 91       	pop	r29
    59cc:	cf 91       	pop	r28
    59ce:	08 95       	ret

000059d0 <led_set_level>:

void led_set_level(led_Dx_e Dx, uint8_t level)
{
	uint8_t byte = 0;
	uint8_t bit = 0;
	byte = g_led_Dx[Dx].byte;
    59d0:	e8 2f       	mov	r30, r24
    59d2:	f0 e0       	ldi	r31, 0x00	; 0
    59d4:	ee 0f       	add	r30, r30
    59d6:	ff 1f       	adc	r31, r31
    59d8:	e8 5d       	subi	r30, 0xD8	; 216
    59da:	fc 49       	sbci	r31, 0x9C	; 156
    59dc:	80 81       	ld	r24, Z
	bit = g_led_Dx[Dx].bit;
    59de:	21 81       	ldd	r18, Z+1	; 0x01
	if (level == 1)
    59e0:	61 30       	cpi	r22, 0x01	; 1
    59e2:	99 f4       	brne	.+38     	; 0x5a0a <led_set_level+0x3a>
	{
		bitSet(g_hc595_buffer[byte], bit);
    59e4:	e8 2f       	mov	r30, r24
    59e6:	f0 e0       	ldi	r31, 0x00	; 0
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	a0 e0       	ldi	r26, 0x00	; 0
    59ee:	b0 e0       	ldi	r27, 0x00	; 0
    59f0:	04 c0       	rjmp	.+8      	; 0x59fa <led_set_level+0x2a>
    59f2:	88 0f       	add	r24, r24
    59f4:	99 1f       	adc	r25, r25
    59f6:	aa 1f       	adc	r26, r26
    59f8:	bb 1f       	adc	r27, r27
    59fa:	2a 95       	dec	r18
    59fc:	d2 f7       	brpl	.-12     	; 0x59f2 <led_set_level+0x22>
    59fe:	ef 54       	subi	r30, 0x4F	; 79
    5a00:	ff 49       	sbci	r31, 0x9F	; 159
    5a02:	20 81       	ld	r18, Z
    5a04:	82 2b       	or	r24, r18
    5a06:	80 83       	st	Z, r24
    5a08:	08 95       	ret
	}
	else
	{
		bitClear(g_hc595_buffer[byte], bit);
    5a0a:	e8 2f       	mov	r30, r24
    5a0c:	f0 e0       	ldi	r31, 0x00	; 0
    5a0e:	81 e0       	ldi	r24, 0x01	; 1
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	a0 e0       	ldi	r26, 0x00	; 0
    5a14:	b0 e0       	ldi	r27, 0x00	; 0
    5a16:	04 c0       	rjmp	.+8      	; 0x5a20 <led_set_level+0x50>
    5a18:	88 0f       	add	r24, r24
    5a1a:	99 1f       	adc	r25, r25
    5a1c:	aa 1f       	adc	r26, r26
    5a1e:	bb 1f       	adc	r27, r27
    5a20:	2a 95       	dec	r18
    5a22:	d2 f7       	brpl	.-12     	; 0x5a18 <led_set_level+0x48>
    5a24:	ef 54       	subi	r30, 0x4F	; 79
    5a26:	ff 49       	sbci	r31, 0x9F	; 159
    5a28:	80 95       	com	r24
    5a2a:	90 81       	ld	r25, Z
    5a2c:	89 23       	and	r24, r25
    5a2e:	80 83       	st	Z, r24
    5a30:	08 95       	ret

00005a32 <led_update_buf_task>:
	}
}

void led_update_buf_task(void)
{
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    5a32:	40 e1       	ldi	r20, 0x10	; 16
    5a34:	62 e0       	ldi	r22, 0x02	; 2
    5a36:	81 eb       	ldi	r24, 0xB1	; 177
    5a38:	90 e6       	ldi	r25, 0x60	; 96
    5a3a:	0e 94 93 2c 	call	0x5926	; 0x5926 <HC595_Write>
    5a3e:	08 95       	ret

00005a40 <led_init>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5a40:	89 b1       	in	r24, 0x09	; 9
    5a42:	8f 7b       	andi	r24, 0xBF	; 191
    5a44:	89 b9       	out	0x09, r24	; 9
{
	/* 亮度控制，目前20KHz，最大0x4a,默认%45亮度 */
	// TCA0.SPLIT.HCMP0 = 33;

	LED_ON_N_set_level(0);
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    5a46:	40 e1       	ldi	r20, 0x10	; 16
    5a48:	62 e0       	ldi	r22, 0x02	; 2
    5a4a:	81 eb       	ldi	r24, 0xB1	; 177
    5a4c:	90 e6       	ldi	r25, 0x60	; 96
    5a4e:	0e 94 93 2c 	call	0x5926	; 0x5926 <HC595_Write>
    5a52:	08 95       	ret

00005a54 <main>:
 ********************* MAIN **********************
 ************************************************/
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    5a54:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <atmel_start_init>
	Enable_global_interrupt();
    5a58:	78 94       	sei

	led_init();
    5a5a:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <led_init>

	/* REAR按键软件定时器任务 */
	soft_timer_create(20, soft_timer_rear_btn_task);
    5a5e:	61 e8       	ldi	r22, 0x81	; 129
    5a60:	78 e2       	ldi	r23, 0x28	; 40
    5a62:	84 e1       	ldi	r24, 0x14	; 20
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <soft_timer_create>

	/* WINDOW LOCK按键软件定时器任务 */
	soft_timer_create(20, soft_timer_window_lock_task);
    5a6a:	6e eb       	ldi	r22, 0xBE	; 190
    5a6c:	78 e2       	ldi	r23, 0x28	; 40
    5a6e:	84 e1       	ldi	r24, 0x14	; 20
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <soft_timer_create>

	/* WINDOW 提升软件定时器任务 */
	soft_timer_create(20, soft_timer_window_task);
    5a76:	6a e1       	ldi	r22, 0x1A	; 26
    5a78:	79 e2       	ldi	r23, 0x29	; 41
    5a7a:	84 e1       	ldi	r24, 0x14	; 20
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <soft_timer_create>

	/* led灯光更新任务 */
	soft_timer_create(50, led_update_buf_task);
    5a82:	69 e1       	ldi	r22, 0x19	; 25
    5a84:	7d e2       	ldi	r23, 0x2D	; 45
    5a86:	82 e3       	ldi	r24, 0x32	; 50
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <soft_timer_create>

	/* lin 接收信号变量更新任务 */
	soft_timer_create(10, soft_timer_lin_signal_update_task);
    5a8e:	68 e3       	ldi	r22, 0x38	; 56
    5a90:	76 e2       	ldi	r23, 0x26	; 38
    5a92:	8a e0       	ldi	r24, 0x0A	; 10
    5a94:	90 e0       	ldi	r25, 0x00	; 0
    5a96:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <soft_timer_create>

	/* 背光亮度控制更新任务 */
	soft_timer_create(100, backlight_task);
    5a9a:	6a e4       	ldi	r22, 0x4A	; 74
    5a9c:	7c e2       	ldi	r23, 0x2C	; 44
    5a9e:	84 e6       	ldi	r24, 0x64	; 100
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	0e 94 dd 52 	call	0xa5ba	; 0xa5ba <soft_timer_create>

	l_sys_init();
    5aa6:	0e 94 75 2d 	call	0x5aea	; 0x5aea <l_sys_init>
	l_ifc_init(LI0);
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	0e 94 77 2d 	call	0x5aee	; 0x5aee <l_ifc_init>
	ld_init(LI0);
    5ab0:	80 e0       	ldi	r24, 0x00	; 0
    5ab2:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <ld_init>

	/* Replace with your application code */
	while (1)
	{
		soft_timer_run();
    5ab6:	0e 94 02 53 	call	0xa604	; 0xa604 <soft_timer_run>
		touch_process();
    5aba:	0e 94 37 52 	call	0xa46e	; 0xa46e <touch_process>

		if (eeprom_set_boot_flg == 1)
    5abe:	80 91 2f 66 	lds	r24, 0x662F	; 0x80662f <eeprom_set_boot_flg>
    5ac2:	81 30       	cpi	r24, 0x01	; 1
    5ac4:	c1 f7       	brne	.-16     	; 0x5ab6 <main+0x62>
		{
			eeprom_set_boot_flg = 0;
    5ac6:	10 92 2f 66 	sts	0x662F, r1	; 0x80662f <eeprom_set_boot_flg>
			FLASH_0_write_eeprom_byte(0x00, 0xaa);
    5aca:	6a ea       	ldi	r22, 0xAA	; 170
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	90 e0       	ldi	r25, 0x00	; 0
    5ad0:	0e 94 6f 54 	call	0xa8de	; 0xa8de <FLASH_0_write_eeprom_byte>
			while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    5ad4:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f1002>
    5ad8:	83 70       	andi	r24, 0x03	; 3
    5ada:	e1 f7       	brne	.-8      	; 0x5ad4 <main+0x80>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    5adc:	41 e0       	ldi	r20, 0x01	; 1
    5ade:	68 ed       	ldi	r22, 0xD8	; 216
    5ae0:	81 e4       	ldi	r24, 0x41	; 65
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	0e 94 8b 54 	call	0xa916	; 0xa916 <protected_write_io>
    5ae8:	e6 cf       	rjmp	.-52     	; 0x5ab6 <main+0x62>

00005aea <l_sys_init>:
 * Implements    : l_sys_init_Activity
 *END**************************************************************************/
l_bool l_sys_init(void)
{
    return (l_bool)0;
}
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	08 95       	ret

00005aee <l_ifc_init>:
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    static l_u8 lin_schedule_start_entry[LIN_NUM_OF_SCHD_TBL];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    l_bool ret_val;
    prot_state_ptr->diagnostic_mode = DIAG_NONE;
    5aee:	96 e1       	ldi	r25, 0x16	; 22
    5af0:	89 9f       	mul	r24, r25
    5af2:	f0 01       	movw	r30, r0
    5af4:	11 24       	eor	r1, r1
    5af6:	e8 53       	subi	r30, 0x38	; 56
    5af8:	f8 49       	sbci	r31, 0x98	; 152
    5afa:	10 8a       	std	Z+16, r1	; 0x10

    /* Call Low level initialization function */
    ret_val = lin_lld_init(iii);
    5afc:	0e 94 67 42 	call	0x84ce	; 0x84ce <lin_lld_init>
        }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }

    return ret_val;
}
    5b00:	08 95       	ret

00005b02 <lin_update_tx_flags>:
    l_u8 flag_size;
    l_u8 i;
    l_u8 associate_frame_offset;
    const lin_frame_t * lin_frame_ptr;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frm_id]);
    5b02:	2c e1       	ldi	r18, 0x1C	; 28
    5b04:	82 9f       	mul	r24, r18
    5b06:	c0 01       	movw	r24, r0
    5b08:	11 24       	eor	r1, r1
    5b0a:	fc 01       	movw	r30, r24
    5b0c:	e8 5b       	subi	r30, 0xB8	; 184
    5b0e:	fc 49       	sbci	r31, 0x9C	; 156
    5b10:	46 81       	ldd	r20, Z+6	; 0x06
    5b12:	57 81       	ldd	r21, Z+7	; 0x07
    5b14:	70 e0       	ldi	r23, 0x00	; 0
    5b16:	fb 01       	movw	r30, r22
    5b18:	ee 0f       	add	r30, r30
    5b1a:	ff 1f       	adc	r31, r31
    5b1c:	66 0f       	add	r22, r22
    5b1e:	77 1f       	adc	r23, r23
    5b20:	66 0f       	add	r22, r22
    5b22:	77 1f       	adc	r23, r23
    5b24:	66 0f       	add	r22, r22
    5b26:	77 1f       	adc	r23, r23
    5b28:	e6 0f       	add	r30, r22
    5b2a:	f7 1f       	adc	r31, r23
    5b2c:	e4 0f       	add	r30, r20
    5b2e:	f5 1f       	adc	r31, r21

    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    5b30:	80 81       	ld	r24, Z
    5b32:	81 11       	cpse	r24, r1
    5b34:	0e c0       	rjmp	.+28     	; 0x5b52 <lin_update_tx_flags+0x50>
    {
        flag_offset = lin_frame_ptr->flag_offset;
    5b36:	25 81       	ldd	r18, Z+5	; 0x05
    5b38:	36 81       	ldd	r19, Z+6	; 0x06
        flag_size = lin_frame_ptr->flag_size;
    5b3a:	67 81       	ldd	r22, Z+7	; 0x07
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5b3c:	08 c0       	rjmp	.+16     	; 0x5b4e <lin_update_tx_flags+0x4c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU; //在这里更新flag位，整字节更新
    5b3e:	d9 01       	movw	r26, r18
    5b40:	ab 52       	subi	r26, 0x2B	; 43
    5b42:	bf 49       	sbci	r27, 0x9F	; 159
    5b44:	9f ef       	ldi	r25, 0xFF	; 255
    5b46:	9c 93       	st	X, r25
            flag_offset++;
    5b48:	2f 5f       	subi	r18, 0xFF	; 255
    5b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    {
        flag_offset = lin_frame_ptr->flag_offset;
        flag_size = lin_frame_ptr->flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5b4c:	8f 5f       	subi	r24, 0xFF	; 255
    5b4e:	86 17       	cp	r24, r22
    5b50:	b0 f3       	brcs	.-20     	; 0x5b3e <lin_update_tx_flags+0x3c>
            flag_offset++;
        }
    }

    /* check event trigger frame and clear flag */
    if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    5b52:	80 81       	ld	r24, Z
    5b54:	81 30       	cpi	r24, 0x01	; 1
    5b56:	29 f5       	brne	.+74     	; 0x5ba2 <lin_update_tx_flags+0xa0>
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    5b58:	00 84       	ldd	r0, Z+8	; 0x08
    5b5a:	f1 85       	ldd	r31, Z+9	; 0x09
    5b5c:	e0 2d       	mov	r30, r0
    5b5e:	01 80       	ldd	r0, Z+1	; 0x01
    5b60:	f2 81       	ldd	r31, Z+2	; 0x02
    5b62:	e0 2d       	mov	r30, r0
    5b64:	80 81       	ld	r24, Z
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	fc 01       	movw	r30, r24
    5b6a:	ee 0f       	add	r30, r30
    5b6c:	ff 1f       	adc	r31, r31
    5b6e:	88 0f       	add	r24, r24
    5b70:	99 1f       	adc	r25, r25
    5b72:	88 0f       	add	r24, r24
    5b74:	99 1f       	adc	r25, r25
    5b76:	88 0f       	add	r24, r24
    5b78:	99 1f       	adc	r25, r25
    5b7a:	8e 0f       	add	r24, r30
    5b7c:	9f 1f       	adc	r25, r31
    5b7e:	fa 01       	movw	r30, r20
    5b80:	e8 0f       	add	r30, r24
    5b82:	f9 1f       	adc	r31, r25
    5b84:	25 81       	ldd	r18, Z+5	; 0x05
    5b86:	36 81       	ldd	r19, Z+6	; 0x06
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
    5b88:	47 81       	ldd	r20, Z+7	; 0x07
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5b8a:	80 e0       	ldi	r24, 0x00	; 0
    5b8c:	08 c0       	rjmp	.+16     	; 0x5b9e <lin_update_tx_flags+0x9c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    5b8e:	f9 01       	movw	r30, r18
    5b90:	eb 52       	subi	r30, 0x2B	; 43
    5b92:	ff 49       	sbci	r31, 0x9F	; 159
    5b94:	9f ef       	ldi	r25, 0xFF	; 255
    5b96:	90 83       	st	Z, r25
            flag_offset++;
    5b98:	2f 5f       	subi	r18, 0xFF	; 255
    5b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5b9c:	8f 5f       	subi	r24, 0xFF	; 255
    5b9e:	84 17       	cp	r24, r20
    5ba0:	b0 f3       	brcs	.-20     	; 0x5b8e <lin_update_tx_flags+0x8c>
    5ba2:	08 95       	ret

00005ba4 <lin_bus_activity_timeout>:
 * Description   : This function set bus activity timeout
 *
 * Implements    : lin_bus_activity_timeout_Activity
 *END**************************************************************************/
static void lin_bus_activity_timeout(l_ifc_handle iii)
{
    5ba4:	cf 93       	push	r28
    5ba6:	c8 2f       	mov	r28, r24
    /* Set goto sleep mode */
#if (1U == SUPPORT_SLAVE_MODE)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5ba8:	90 e0       	ldi	r25, 0x00	; 0

    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5baa:	2c e1       	ldi	r18, 0x1C	; 28
    5bac:	28 9f       	mul	r18, r24
    5bae:	f0 01       	movw	r30, r0
    5bb0:	29 9f       	mul	r18, r25
    5bb2:	f0 0d       	add	r31, r0
    5bb4:	11 24       	eor	r1, r1
    5bb6:	e8 5b       	subi	r30, 0xB8	; 184
    5bb8:	fc 49       	sbci	r31, 0x9C	; 156
    5bba:	23 81       	ldd	r18, Z+3	; 0x03
    5bbc:	21 11       	cpse	r18, r1
    5bbe:	11 c0       	rjmp	.+34     	; 0x5be2 <lin_bus_activity_timeout+0x3e>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    5bc0:	2c e1       	ldi	r18, 0x1C	; 28
    5bc2:	28 9f       	mul	r18, r24
    5bc4:	f0 01       	movw	r30, r0
    5bc6:	29 9f       	mul	r18, r25
    5bc8:	f0 0d       	add	r31, r0
    5bca:	11 24       	eor	r1, r1
    5bcc:	e8 5b       	subi	r30, 0xB8	; 184
    5bce:	fc 49       	sbci	r31, 0x9C	; 156
    5bd0:	80 81       	ld	r24, Z
    5bd2:	88 23       	and	r24, r24
    5bd4:	11 f0       	breq	.+4      	; 0x5bda <lin_bus_activity_timeout+0x36>
    5bd6:	83 30       	cpi	r24, 0x03	; 3
    5bd8:	21 f4       	brne	.+8      	; 0x5be2 <lin_bus_activity_timeout+0x3e>
        {
            lin_update_word_status_lin21(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT);
    5bda:	68 e0       	ldi	r22, 0x08	; 8
    5bdc:	8c 2f       	mov	r24, r28
    5bde:	0e 94 ab 32 	call	0x6556	; 0x6556 <lin_update_word_status_lin21>
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */

    /* Change to low power mode */
    (void)lin_lld_set_low_power_mode(iii);
    5be2:	8c 2f       	mov	r24, r28
    5be4:	0e 94 c7 43 	call	0x878e	; 0x878e <lin_lld_set_low_power_mode>
}
    5be8:	cf 91       	pop	r28
    5bea:	08 95       	ret

00005bec <lin_get_frame_index>:
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5bec:	48 2f       	mov	r20, r24
    5bee:	50 e0       	ldi	r21, 0x00	; 0

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    5bf0:	8c e1       	ldi	r24, 0x1C	; 28
    5bf2:	84 9f       	mul	r24, r20
    5bf4:	f0 01       	movw	r30, r0
    5bf6:	85 9f       	mul	r24, r21
    5bf8:	f0 0d       	add	r31, r0
    5bfa:	11 24       	eor	r1, r1
    5bfc:	e8 5b       	subi	r30, 0xB8	; 184
    5bfe:	fc 49       	sbci	r31, 0x9C	; 156
    5c00:	94 81       	ldd	r25, Z+4	; 0x04
    5c02:	1d c0       	rjmp	.+58     	; 0x5c3e <lin_get_frame_index+0x52>
    {
        if (prot_user_config_ptr->list_identifiers_RAM_ptr[i] == id)
    5c04:	2c e1       	ldi	r18, 0x1C	; 28
    5c06:	24 9f       	mul	r18, r20
    5c08:	f0 01       	movw	r30, r0
    5c0a:	25 9f       	mul	r18, r21
    5c0c:	f0 0d       	add	r31, r0
    5c0e:	11 24       	eor	r1, r1
    5c10:	e8 5b       	subi	r30, 0xB8	; 184
    5c12:	fc 49       	sbci	r31, 0x9C	; 156
    5c14:	02 84       	ldd	r0, Z+10	; 0x0a
    5c16:	f3 85       	ldd	r31, Z+11	; 0x0b
    5c18:	e0 2d       	mov	r30, r0
    5c1a:	e9 0f       	add	r30, r25
    5c1c:	f1 1d       	adc	r31, r1
    5c1e:	20 81       	ld	r18, Z
    5c20:	26 13       	cpse	r18, r22
    5c22:	0c c0       	rjmp	.+24     	; 0x5c3c <lin_get_frame_index+0x50>
        {
            retVal = (l_u8)(i + prot_user_config_ptr->frame_start - 1U);
    5c24:	8c e1       	ldi	r24, 0x1C	; 28
    5c26:	84 9f       	mul	r24, r20
    5c28:	f0 01       	movw	r30, r0
    5c2a:	85 9f       	mul	r24, r21
    5c2c:	f0 0d       	add	r31, r0
    5c2e:	11 24       	eor	r1, r1
    5c30:	e8 5b       	subi	r30, 0xB8	; 184
    5c32:	fc 49       	sbci	r31, 0x9C	; 156
    5c34:	85 81       	ldd	r24, Z+5	; 0x05
    5c36:	89 0f       	add	r24, r25
    5c38:	81 50       	subi	r24, 0x01	; 1
            //找到一个就退出
            break;
    5c3a:	08 95       	ret
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    5c3c:	91 50       	subi	r25, 0x01	; 1
    5c3e:	91 11       	cpse	r25, r1
    5c40:	e1 cf       	rjmp	.-62     	; 0x5c04 <lin_get_frame_index+0x18>
 *END**************************************************************************/
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    5c42:	8f ef       	ldi	r24, 0xFF	; 255
            break;
        }
    }

    return retVal;
}
    5c44:	08 95       	ret

00005c46 <lin_update_tx>:
 *
 * Implements    : lin_update_tx_Activity
 *END**************************************************************************/
static void lin_update_tx(l_ifc_handle iii,
                          l_u8 id)
{
    5c46:	ef 92       	push	r14
    5c48:	ff 92       	push	r15
    5c4a:	0f 93       	push	r16
    5c4c:	1f 93       	push	r17
    5c4e:	cf 93       	push	r28
    5c50:	df 93       	push	r29
    5c52:	18 2f       	mov	r17, r24
    5c54:	06 2f       	mov	r16, r22
    l_u8 frame_index; //index用来获取当前数据的号
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5c56:	c8 2f       	mov	r28, r24
    5c58:	d0 e0       	ldi	r29, 0x00	; 0
    l_u16* byte_offset_temp_ptr;
    const lin_node_attribute_t * node_attr_ptr;
#endif /*((1U == SUPPORT_PROTOCOL_J2602) && (1U == SUPPORT_SLAVE_MODE)) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    5c5a:	86 e1       	ldi	r24, 0x16	; 22
    5c5c:	8c 9f       	mul	r24, r28
    5c5e:	f0 01       	movw	r30, r0
    5c60:	8d 9f       	mul	r24, r29
    5c62:	f0 0d       	add	r31, r0
    5c64:	11 24       	eor	r1, r1
    5c66:	e8 53       	subi	r30, 0x38	; 56
    5c68:	f8 49       	sbci	r31, 0x98	; 152
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	85 83       	std	Z+5, r24	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    5c6e:	82 85       	ldd	r24, Z+10	; 0x0a
    5c70:	8f 3f       	cpi	r24, 0xFF	; 255
    5c72:	51 f0       	breq	.+20     	; 0x5c88 <lin_update_tx+0x42>
    {
        prot_state_ptr->num_of_processed_frame++;
    5c74:	96 e1       	ldi	r25, 0x16	; 22
    5c76:	9c 9f       	mul	r25, r28
    5c78:	f0 01       	movw	r30, r0
    5c7a:	9d 9f       	mul	r25, r29
    5c7c:	f0 0d       	add	r31, r0
    5c7e:	11 24       	eor	r1, r1
    5c80:	e8 53       	subi	r30, 0x38	; 56
    5c82:	f8 49       	sbci	r31, 0x98	; 152
    5c84:	8f 5f       	subi	r24, 0xFF	; 255
    5c86:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    5c88:	86 e1       	ldi	r24, 0x16	; 22
    5c8a:	8c 9f       	mul	r24, r28
    5c8c:	f0 01       	movw	r30, r0
    5c8e:	8d 9f       	mul	r24, r29
    5c90:	f0 0d       	add	r31, r0
    5c92:	11 24       	eor	r1, r1
    5c94:	e8 53       	subi	r30, 0x38	; 56
    5c96:	f8 49       	sbci	r31, 0x98	; 152
    5c98:	82 85       	ldd	r24, Z+10	; 0x0a
    5c9a:	82 30       	cpi	r24, 0x02	; 2
    5c9c:	a8 f0       	brcs	.+42     	; 0x5cc8 <lin_update_tx+0x82>
    5c9e:	86 e1       	ldi	r24, 0x16	; 22
    5ca0:	8c 9f       	mul	r24, r28
    5ca2:	f0 01       	movw	r30, r0
    5ca4:	8d 9f       	mul	r24, r29
    5ca6:	f0 0d       	add	r31, r0
    5ca8:	11 24       	eor	r1, r1
    5caa:	e8 53       	subi	r30, 0x38	; 56
    5cac:	f8 49       	sbci	r31, 0x98	; 152
    5cae:	83 85       	ldd	r24, Z+11	; 0x0b
    5cb0:	81 11       	cpse	r24, r1
    5cb2:	0a c0       	rjmp	.+20     	; 0x5cc8 <lin_update_tx+0x82>
    {
        prot_state_ptr->overrun_flg = 1U;
    5cb4:	86 e1       	ldi	r24, 0x16	; 22
    5cb6:	8c 9f       	mul	r24, r28
    5cb8:	f0 01       	movw	r30, r0
    5cba:	8d 9f       	mul	r24, r29
    5cbc:	f0 0d       	add	r31, r0
    5cbe:	11 24       	eor	r1, r1
    5cc0:	e8 53       	subi	r30, 0x38	; 56
    5cc2:	f8 49       	sbci	r31, 0x98	; 152
    5cc4:	81 e0       	ldi	r24, 0x01	; 1
    5cc6:	83 87       	std	Z+11, r24	; 0x0b
    }

    if ((bool)1U == prot_state_ptr->transmit_error_resp_sig_flg)
    5cc8:	86 e1       	ldi	r24, 0x16	; 22
    5cca:	8c 9f       	mul	r24, r28
    5ccc:	f0 01       	movw	r30, r0
    5cce:	8d 9f       	mul	r24, r29
    5cd0:	f0 0d       	add	r31, r0
    5cd2:	11 24       	eor	r1, r1
    5cd4:	e8 53       	subi	r30, 0x38	; 56
    5cd6:	f8 49       	sbci	r31, 0x98	; 152
    5cd8:	85 89       	ldd	r24, Z+21	; 0x15
    5cda:	88 23       	and	r24, r24
    5cdc:	51 f0       	breq	.+20     	; 0x5cf2 <lin_update_tx+0xac>
    {
        /* Set no error in response */
        prot_state_ptr->error_in_response = 0U;
    5cde:	86 e1       	ldi	r24, 0x16	; 22
    5ce0:	8c 9f       	mul	r24, r28
    5ce2:	f0 01       	movw	r30, r0
    5ce4:	8d 9f       	mul	r24, r29
    5ce6:	f0 0d       	add	r31, r0
    5ce8:	11 24       	eor	r1, r1
    5cea:	e8 53       	subi	r30, 0x38	; 56
    5cec:	f8 49       	sbci	r31, 0x98	; 152
    5cee:	16 82       	std	Z+6, r1	; 0x06
        prot_state_ptr->transmit_error_resp_sig_flg = (bool)0U;
    5cf0:	15 8a       	std	Z+21, r1	; 0x15
            (void)lin_lld_set_low_power_mode(iii);
        }
    }
#endif /* (1U == SUPPORT_MASTER_MODE) */
    /* Find frame index by pid */
    frame_index = lin_get_frame_index(iii, id);
    5cf2:	60 2f       	mov	r22, r16
    5cf4:	81 2f       	mov	r24, r17
    5cf6:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <lin_get_frame_index>
    5cfa:	e8 2e       	mov	r14, r24
    if ((((bool)LIN_MASTER == prot_user_config_ptr->function) && (0x3CU == id) && (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)) ||
    5cfc:	8c e1       	ldi	r24, 0x1C	; 28
    5cfe:	8c 9f       	mul	r24, r28
    5d00:	f0 01       	movw	r30, r0
    5d02:	8d 9f       	mul	r24, r29
    5d04:	f0 0d       	add	r31, r0
    5d06:	11 24       	eor	r1, r1
    5d08:	e8 5b       	subi	r30, 0xB8	; 184
    5d0a:	fc 49       	sbci	r31, 0x9C	; 156
    5d0c:	f3 80       	ldd	r15, Z+3	; 0x03
    5d0e:	ff 20       	and	r15, r15
    5d10:	69 f0       	breq	.+26     	; 0x5d2c <lin_update_tx+0xe6>
    5d12:	0c 33       	cpi	r16, 0x3C	; 60
    5d14:	59 f4       	brne	.+22     	; 0x5d2c <lin_update_tx+0xe6>
    5d16:	86 e1       	ldi	r24, 0x16	; 22
    5d18:	8c 9f       	mul	r24, r28
    5d1a:	f0 01       	movw	r30, r0
    5d1c:	8d 9f       	mul	r24, r29
    5d1e:	f0 0d       	add	r31, r0
    5d20:	11 24       	eor	r1, r1
    5d22:	e8 53       	subi	r30, 0x38	; 56
    5d24:	f8 49       	sbci	r31, 0x98	; 152
    5d26:	80 89       	ldd	r24, Z+16	; 0x10
    5d28:	81 30       	cpi	r24, 0x01	; 1
    5d2a:	21 f0       	breq	.+8      	; 0x5d34 <lin_update_tx+0xee>
    5d2c:	f1 10       	cpse	r15, r1
    5d2e:	07 c0       	rjmp	.+14     	; 0x5d3e <lin_update_tx+0xf8>
        (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (0x3DU == id)))
    5d30:	0d 33       	cpi	r16, 0x3D	; 61
    5d32:	29 f4       	brne	.+10     	; 0x5d3e <lin_update_tx+0xf8>
    {
        /* Call transport layer callback to process TL_TX_COMPLETED event*/
        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TX_COMPLETED, id);
    5d34:	40 2f       	mov	r20, r16
    5d36:	62 e0       	ldi	r22, 0x02	; 2
    5d38:	81 2f       	mov	r24, r17
    5d3a:	0e 94 bf 4c 	call	0x997e	; 0x997e <lin_tl_callback_handler>
    }
    if (frame_index < LIN_NUM_OF_FRMS)
    5d3e:	83 e0       	ldi	r24, 0x03	; 3
    5d40:	8e 15       	cp	r24, r14
    5d42:	50 f0       	brcs	.+20     	; 0x5d58 <lin_update_tx+0x112>
    {
        /* Update signal flag */
        lin_update_tx_flags(iii, frame_index);
    5d44:	6e 2d       	mov	r22, r14
    5d46:	81 2f       	mov	r24, r17
    5d48:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <lin_update_tx_flags>
        /* Update tx frame flag */
        g_lin_frame_flag_handle_tbl[frame_index] = true;
    5d4c:	ee 2d       	mov	r30, r14
    5d4e:	f0 e0       	ldi	r31, 0x00	; 0
    5d50:	ec 58       	subi	r30, 0x8C	; 140
    5d52:	f9 49       	sbci	r31, 0x99	; 153
    5d54:	81 e0       	ldi	r24, 0x01	; 1
    5d56:	80 83       	st	Z, r24
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5d58:	f1 10       	cpse	r15, r1
    5d5a:	15 c0       	rjmp	.+42     	; 0x5d86 <lin_update_tx+0x140>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    5d5c:	8c e1       	ldi	r24, 0x1C	; 28
    5d5e:	8c 9f       	mul	r24, r28
    5d60:	f0 01       	movw	r30, r0
    5d62:	8d 9f       	mul	r24, r29
    5d64:	f0 0d       	add	r31, r0
    5d66:	11 24       	eor	r1, r1
    5d68:	e8 5b       	subi	r30, 0xB8	; 184
    5d6a:	fc 49       	sbci	r31, 0x9C	; 156
    5d6c:	80 81       	ld	r24, Z
    5d6e:	88 23       	and	r24, r24
    5d70:	11 f0       	breq	.+4      	; 0x5d76 <lin_update_tx+0x130>
    5d72:	83 30       	cpi	r24, 0x03	; 3
    5d74:	41 f4       	brne	.+16     	; 0x5d86 <lin_update_tx+0x140>
        {
            lin_update_err_signal(iii, frame_index);
    5d76:	6e 2d       	mov	r22, r14
    5d78:	81 2f       	mov	r24, r17
    5d7a:	0e 94 0c 33 	call	0x6618	; 0x6618 <lin_update_err_signal>
            lin_update_word_status_lin21(iii, LIN_LLD_TX_COMPLETED);
    5d7e:	61 e0       	ldi	r22, 0x01	; 1
    5d80:	81 2f       	mov	r24, r17
    5d82:	0e 94 ab 32 	call	0x6556	; 0x6556 <lin_update_word_status_lin21>

    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    5d86:	df 91       	pop	r29
    5d88:	cf 91       	pop	r28
    5d8a:	1f 91       	pop	r17
    5d8c:	0f 91       	pop	r16
    5d8e:	ff 90       	pop	r15
    5d90:	ef 90       	pop	r14
    5d92:	08 95       	ret

00005d94 <lin_handle_error>:
 * Implements    : lin_handle_error_Activity
 *END**************************************************************************/
static void lin_handle_error(l_ifc_handle iii,
                             lin_lld_event_id_t event_id,
                             l_u8 id)
{
    5d94:	ef 92       	push	r14
    5d96:	ff 92       	push	r15
    5d98:	0f 93       	push	r16
    5d9a:	1f 93       	push	r17
    5d9c:	cf 93       	push	r28
    5d9e:	df 93       	push	r29
    5da0:	08 2f       	mov	r16, r24
    5da2:	16 2f       	mov	r17, r22
    5da4:	f4 2e       	mov	r15, r20
#if ((1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_SLAVE_MODE))
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5da6:	c8 2f       	mov	r28, r24
    5da8:	d0 e0       	ldi	r29, 0x00	; 0
    lin_master_data_t * master_data_ptr;
#endif /* ((1U == SUPPORT_MASTER_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))) */

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
    l_u8 frame_index;
    frame_index = lin_get_frame_index(iii, id);
    5daa:	64 2f       	mov	r22, r20
    5dac:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <lin_get_frame_index>
    5db0:	e8 2e       	mov	r14, r24
#endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */

    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    5db2:	86 e1       	ldi	r24, 0x16	; 22
    5db4:	8c 9f       	mul	r24, r28
    5db6:	f0 01       	movw	r30, r0
    5db8:	8d 9f       	mul	r24, r29
    5dba:	f0 0d       	add	r31, r0
    5dbc:	11 24       	eor	r1, r1
    5dbe:	e8 53       	subi	r30, 0x38	; 56
    5dc0:	f8 49       	sbci	r31, 0x98	; 152
    5dc2:	82 85       	ldd	r24, Z+10	; 0x0a
    5dc4:	8f 3f       	cpi	r24, 0xFF	; 255
    5dc6:	51 f0       	breq	.+20     	; 0x5ddc <lin_handle_error+0x48>
    {
        prot_state_ptr->num_of_processed_frame++;
    5dc8:	96 e1       	ldi	r25, 0x16	; 22
    5dca:	9c 9f       	mul	r25, r28
    5dcc:	f0 01       	movw	r30, r0
    5dce:	9d 9f       	mul	r25, r29
    5dd0:	f0 0d       	add	r31, r0
    5dd2:	11 24       	eor	r1, r1
    5dd4:	e8 53       	subi	r30, 0x38	; 56
    5dd6:	f8 49       	sbci	r31, 0x98	; 152
    5dd8:	8f 5f       	subi	r24, 0xFF	; 255
    5dda:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    5ddc:	86 e1       	ldi	r24, 0x16	; 22
    5dde:	8c 9f       	mul	r24, r28
    5de0:	f0 01       	movw	r30, r0
    5de2:	8d 9f       	mul	r24, r29
    5de4:	f0 0d       	add	r31, r0
    5de6:	11 24       	eor	r1, r1
    5de8:	e8 53       	subi	r30, 0x38	; 56
    5dea:	f8 49       	sbci	r31, 0x98	; 152
    5dec:	82 85       	ldd	r24, Z+10	; 0x0a
    5dee:	82 30       	cpi	r24, 0x02	; 2
    5df0:	a8 f0       	brcs	.+42     	; 0x5e1c <lin_handle_error+0x88>
    5df2:	86 e1       	ldi	r24, 0x16	; 22
    5df4:	8c 9f       	mul	r24, r28
    5df6:	f0 01       	movw	r30, r0
    5df8:	8d 9f       	mul	r24, r29
    5dfa:	f0 0d       	add	r31, r0
    5dfc:	11 24       	eor	r1, r1
    5dfe:	e8 53       	subi	r30, 0x38	; 56
    5e00:	f8 49       	sbci	r31, 0x98	; 152
    5e02:	83 85       	ldd	r24, Z+11	; 0x0b
    5e04:	81 11       	cpse	r24, r1
    5e06:	0a c0       	rjmp	.+20     	; 0x5e1c <lin_handle_error+0x88>
    {
        prot_state_ptr->overrun_flg = 1U;
    5e08:	86 e1       	ldi	r24, 0x16	; 22
    5e0a:	8c 9f       	mul	r24, r28
    5e0c:	f0 01       	movw	r30, r0
    5e0e:	8d 9f       	mul	r24, r29
    5e10:	f0 0d       	add	r31, r0
    5e12:	11 24       	eor	r1, r1
    5e14:	e8 53       	subi	r30, 0x38	; 56
    5e16:	f8 49       	sbci	r31, 0x98	; 152
    5e18:	81 e0       	ldi	r24, 0x01	; 1
    5e1a:	83 87       	std	Z+11, r24	; 0x0b
    }

    switch (event_id)
    5e1c:	13 30       	cpi	r17, 0x03	; 3
    5e1e:	21 f0       	breq	.+8      	; 0x5e28 <lin_handle_error+0x94>
    5e20:	a8 f1       	brcs	.+106    	; 0x5e8c <lin_handle_error+0xf8>
    5e22:	18 30       	cpi	r17, 0x08	; 8
    5e24:	18 f0       	brcs	.+6      	; 0x5e2c <lin_handle_error+0x98>
    5e26:	32 c0       	rjmp	.+100    	; 0x5e8c <lin_handle_error+0xf8>
    {
        /* PID error */
        case LIN_LLD_PID_ERR:
            /* do nothing here */
			frame_index=1;
    5e28:	ee 24       	eor	r14, r14
    5e2a:	e3 94       	inc	r14
        case LIN_LLD_NODATA_TIMEOUT:
        #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
            /* Check if frame type is event trigger */
            /* Find the corresponding frame */

            if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    5e2c:	8c e1       	ldi	r24, 0x1C	; 28
    5e2e:	8c 9f       	mul	r24, r28
    5e30:	f0 01       	movw	r30, r0
    5e32:	8d 9f       	mul	r24, r29
    5e34:	f0 0d       	add	r31, r0
    5e36:	11 24       	eor	r1, r1
    5e38:	e8 5b       	subi	r30, 0xB8	; 184
    5e3a:	fc 49       	sbci	r31, 0x9C	; 156
    5e3c:	26 81       	ldd	r18, Z+6	; 0x06
    5e3e:	37 81       	ldd	r19, Z+7	; 0x07
    5e40:	8e 2d       	mov	r24, r14
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	fc 01       	movw	r30, r24
    5e46:	ee 0f       	add	r30, r30
    5e48:	ff 1f       	adc	r31, r31
    5e4a:	88 0f       	add	r24, r24
    5e4c:	99 1f       	adc	r25, r25
    5e4e:	88 0f       	add	r24, r24
    5e50:	99 1f       	adc	r25, r25
    5e52:	88 0f       	add	r24, r24
    5e54:	99 1f       	adc	r25, r25
    5e56:	8e 0f       	add	r24, r30
    5e58:	9f 1f       	adc	r25, r31
    5e5a:	f9 01       	movw	r30, r18
    5e5c:	e8 0f       	add	r30, r24
    5e5e:	f9 1f       	adc	r31, r25
    5e60:	80 81       	ld	r24, Z
    5e62:	81 30       	cpi	r24, 0x01	; 1
    5e64:	99 f0       	breq	.+38     	; 0x5e8c <lin_handle_error+0xf8>
            }
            else
        #endif  /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */
            {
                /* Set response error */
                prot_state_ptr->error_in_response = 1U;
    5e66:	86 e1       	ldi	r24, 0x16	; 22
    5e68:	8c 9f       	mul	r24, r28
    5e6a:	f0 01       	movw	r30, r0
    5e6c:	8d 9f       	mul	r24, r29
    5e6e:	f0 0d       	add	r31, r0
    5e70:	11 24       	eor	r1, r1
    5e72:	e8 53       	subi	r30, 0x38	; 56
    5e74:	f8 49       	sbci	r31, 0x98	; 152
    5e76:	81 e0       	ldi	r24, 0x01	; 1
    5e78:	86 83       	std	Z+6, r24	; 0x06
                /* TL support */
                if ((0x3CU == id) || (0x3DU == id))
    5e7a:	84 ec       	ldi	r24, 0xC4	; 196
    5e7c:	8f 0d       	add	r24, r15
    5e7e:	82 30       	cpi	r24, 0x02	; 2
    5e80:	28 f4       	brcc	.+10     	; 0x5e8c <lin_handle_error+0xf8>
                {
                    /* Call transport layer callback to handle TL_ERROR */
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_ERROR, id);
    5e82:	4f 2d       	mov	r20, r15
    5e84:	64 e0       	ldi	r22, 0x04	; 4
    5e86:	80 2f       	mov	r24, r16
    5e88:	0e 94 bf 4c 	call	0x997e	; 0x997e <lin_tl_callback_handler>
            break;
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5e8c:	8c e1       	ldi	r24, 0x1C	; 28
    5e8e:	8c 9f       	mul	r24, r28
    5e90:	f0 01       	movw	r30, r0
    5e92:	8d 9f       	mul	r24, r29
    5e94:	f0 0d       	add	r31, r0
    5e96:	11 24       	eor	r1, r1
    5e98:	e8 5b       	subi	r30, 0xB8	; 184
    5e9a:	fc 49       	sbci	r31, 0x9C	; 156
    5e9c:	83 81       	ldd	r24, Z+3	; 0x03
    5e9e:	81 11       	cpse	r24, r1
    5ea0:	20 c0       	rjmp	.+64     	; 0x5ee2 <lin_handle_error+0x14e>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    5ea2:	8c e1       	ldi	r24, 0x1C	; 28
    5ea4:	8c 9f       	mul	r24, r28
    5ea6:	f0 01       	movw	r30, r0
    5ea8:	8d 9f       	mul	r24, r29
    5eaa:	f0 0d       	add	r31, r0
    5eac:	11 24       	eor	r1, r1
    5eae:	e8 5b       	subi	r30, 0xB8	; 184
    5eb0:	fc 49       	sbci	r31, 0x9C	; 156
    5eb2:	80 81       	ld	r24, Z
    5eb4:	88 23       	and	r24, r24
    5eb6:	11 f0       	breq	.+4      	; 0x5ebc <lin_handle_error+0x128>
    5eb8:	83 30       	cpi	r24, 0x03	; 3
    5eba:	99 f4       	brne	.+38     	; 0x5ee2 <lin_handle_error+0x14e>
        {
            if (prot_state_ptr->error_in_response == 1U)
    5ebc:	86 e1       	ldi	r24, 0x16	; 22
    5ebe:	8c 9f       	mul	r24, r28
    5ec0:	f0 01       	movw	r30, r0
    5ec2:	8d 9f       	mul	r24, r29
    5ec4:	f0 0d       	add	r31, r0
    5ec6:	11 24       	eor	r1, r1
    5ec8:	e8 53       	subi	r30, 0x38	; 56
    5eca:	f8 49       	sbci	r31, 0x98	; 152
    5ecc:	86 81       	ldd	r24, Z+6	; 0x06
    5ece:	81 30       	cpi	r24, 0x01	; 1
    5ed0:	21 f4       	brne	.+8      	; 0x5eda <lin_handle_error+0x146>
            {
                lin_update_err_signal(iii, frame_index);
    5ed2:	6e 2d       	mov	r22, r14
    5ed4:	80 2f       	mov	r24, r16
    5ed6:	0e 94 0c 33 	call	0x6618	; 0x6618 <lin_update_err_signal>
            }
            lin_update_word_status_lin21(iii, event_id);
    5eda:	61 2f       	mov	r22, r17
    5edc:	80 2f       	mov	r24, r16
    5ede:	0e 94 ab 32 	call	0x6556	; 0x6556 <lin_update_word_status_lin21>
            lin_update_word_status_j2602(iii);
        }
    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }
#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    5ee2:	df 91       	pop	r29
    5ee4:	cf 91       	pop	r28
    5ee6:	1f 91       	pop	r17
    5ee8:	0f 91       	pop	r16
    5eea:	ff 90       	pop	r15
    5eec:	ef 90       	pop	r14
    5eee:	08 95       	ret

00005ef0 <lin_process_uncd_frame>:
 * Implements    : lin_process_uncd_frame_Activity
 *END**************************************************************************/
void lin_process_uncd_frame(l_ifc_handle iii,
                            l_u8 id,
                            l_u8 type)
{
    5ef0:	0f 93       	push	r16
    5ef2:	1f 93       	push	r17
    5ef4:	cf 93       	push	r28
    5ef6:	df 93       	push	r29
    5ef8:	16 2f       	mov	r17, r22
    5efa:	04 2f       	mov	r16, r20
    l_u8 frame_index;
    l_u8 * response_buffer_ptr;
    l_u16 frame_byte_offset;
    l_u8 i;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5efc:	c8 2f       	mov	r28, r24
    5efe:	d0 e0       	ldi	r29, 0x00	; 0
    l_u8 flag;
#endif /* (1U == SUPPORT_SLAVE_MODE) */
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */
    frame_index = lin_get_frame_index(iii, id);
    5f00:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <lin_get_frame_index>

    if (0xFFU != frame_index)
    5f04:	8f 3f       	cpi	r24, 0xFF	; 255
    5f06:	09 f4       	brne	.+2      	; 0x5f0a <lin_process_uncd_frame+0x1a>
    5f08:	bb c0       	rjmp	.+374    	; 0x6080 <lin_process_uncd_frame+0x190>
    {
        response_buffer_ptr = prot_state_ptr->response_buffer_ptr;
    5f0a:	96 e1       	ldi	r25, 0x16	; 22
    5f0c:	9c 9f       	mul	r25, r28
    5f0e:	d0 01       	movw	r26, r0
    5f10:	9d 9f       	mul	r25, r29
    5f12:	b0 0d       	add	r27, r0
    5f14:	11 24       	eor	r1, r1
    5f16:	a8 53       	subi	r26, 0x38	; 56
    5f18:	b8 49       	sbci	r27, 0x98	; 152
    5f1a:	12 96       	adiw	r26, 0x02	; 2
    5f1c:	4d 91       	ld	r20, X+
    5f1e:	5c 91       	ld	r21, X
    5f20:	13 97       	sbiw	r26, 0x03	; 3

        /* Set frame length */
        prot_state_ptr->response_length = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_len;  // 长度参数也需要考虑在内
    5f22:	9c e1       	ldi	r25, 0x1C	; 28
    5f24:	9c 9f       	mul	r25, r28
    5f26:	f0 01       	movw	r30, r0
    5f28:	9d 9f       	mul	r25, r29
    5f2a:	f0 0d       	add	r31, r0
    5f2c:	11 24       	eor	r1, r1
    5f2e:	e8 5b       	subi	r30, 0xB8	; 184
    5f30:	fc 49       	sbci	r31, 0x9C	; 156
    5f32:	66 81       	ldd	r22, Z+6	; 0x06
    5f34:	77 81       	ldd	r23, Z+7	; 0x07
    5f36:	28 2f       	mov	r18, r24
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	f9 01       	movw	r30, r18
    5f3c:	ee 0f       	add	r30, r30
    5f3e:	ff 1f       	adc	r31, r31
    5f40:	22 0f       	add	r18, r18
    5f42:	33 1f       	adc	r19, r19
    5f44:	22 0f       	add	r18, r18
    5f46:	33 1f       	adc	r19, r19
    5f48:	22 0f       	add	r18, r18
    5f4a:	33 1f       	adc	r19, r19
    5f4c:	2e 0f       	add	r18, r30
    5f4e:	3f 1f       	adc	r19, r31
    5f50:	fb 01       	movw	r30, r22
    5f52:	e2 0f       	add	r30, r18
    5f54:	f3 1f       	adc	r31, r19
    5f56:	31 81       	ldd	r19, Z+1	; 0x01
    5f58:	14 96       	adiw	r26, 0x04	; 4
    5f5a:	3c 93       	st	X, r19
        frame_byte_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_offset;             // frm_offset是啥意思
    5f5c:	63 81       	ldd	r22, Z+3	; 0x03
    5f5e:	74 81       	ldd	r23, Z+4	; 0x04

        /* Make unconditional frame */                                                               //
        if (MAKE_UNCONDITIONAL_FRAME == type)                                                        
    5f60:	01 11       	cpse	r16, r1
    5f62:	72 c0       	rjmp	.+228    	; 0x6048 <lin_process_uncd_frame+0x158>
        {
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5f64:	9c 9f       	mul	r25, r28
    5f66:	f0 01       	movw	r30, r0
    5f68:	9d 9f       	mul	r25, r29
    5f6a:	f0 0d       	add	r31, r0
    5f6c:	11 24       	eor	r1, r1
    5f6e:	e8 5b       	subi	r30, 0xB8	; 184
    5f70:	fc 49       	sbci	r31, 0x9C	; 156
    5f72:	93 81       	ldd	r25, Z+3	; 0x03
    5f74:	91 11       	cpse	r25, r1
    5f76:	84 c0       	rjmp	.+264    	; 0x6080 <lin_process_uncd_frame+0x190>
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    5f78:	9c e1       	ldi	r25, 0x1C	; 28
    5f7a:	9c 9f       	mul	r25, r28
    5f7c:	f0 01       	movw	r30, r0
    5f7e:	9d 9f       	mul	r25, r29
    5f80:	f0 0d       	add	r31, r0
    5f82:	11 24       	eor	r1, r1
    5f84:	e8 5b       	subi	r30, 0xB8	; 184
    5f86:	fc 49       	sbci	r31, 0x9C	; 156
    5f88:	22 89       	ldd	r18, Z+18	; 0x12
    5f8a:	30 e0       	ldi	r19, 0x00	; 0

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	1c c0       	rjmp	.+56     	; 0x5fc8 <lin_process_uncd_frame+0xd8>
                {
                    /* Check if frame contain error signal */
                    if (id == node_attr_ptr->resp_err_frm_id_ptr[i])
    5f90:	a4 e2       	ldi	r26, 0x24	; 36
    5f92:	a2 9f       	mul	r26, r18
    5f94:	f0 01       	movw	r30, r0
    5f96:	a3 9f       	mul	r26, r19
    5f98:	f0 0d       	add	r31, r0
    5f9a:	11 24       	eor	r1, r1
    5f9c:	ec 59       	subi	r30, 0x9C	; 156
    5f9e:	fc 49       	sbci	r31, 0x9C	; 156
    5fa0:	04 84       	ldd	r0, Z+12	; 0x0c
    5fa2:	f5 85       	ldd	r31, Z+13	; 0x0d
    5fa4:	e0 2d       	mov	r30, r0
    5fa6:	e9 0f       	add	r30, r25
    5fa8:	f1 1d       	adc	r31, r1
    5faa:	e0 81       	ld	r30, Z
    5fac:	1e 13       	cpse	r17, r30
    5fae:	0b c0       	rjmp	.+22     	; 0x5fc6 <lin_process_uncd_frame+0xd6>
                    {
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
    5fb0:	96 e1       	ldi	r25, 0x16	; 22
    5fb2:	9c 9f       	mul	r25, r28
    5fb4:	f0 01       	movw	r30, r0
    5fb6:	9d 9f       	mul	r25, r29
    5fb8:	f0 0d       	add	r31, r0
    5fba:	11 24       	eor	r1, r1
    5fbc:	e8 53       	subi	r30, 0x38	; 56
    5fbe:	f8 49       	sbci	r31, 0x98	; 152
    5fc0:	91 e0       	ldi	r25, 0x01	; 1
    5fc2:	95 8b       	std	Z+21, r25	; 0x15
                        break;
    5fc4:	0c c0       	rjmp	.+24     	; 0x5fde <lin_process_uncd_frame+0xee>
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    5fc6:	9f 5f       	subi	r25, 0xFF	; 255
    5fc8:	a4 e2       	ldi	r26, 0x24	; 36
    5fca:	a2 9f       	mul	r26, r18
    5fcc:	f0 01       	movw	r30, r0
    5fce:	a3 9f       	mul	r26, r19
    5fd0:	f0 0d       	add	r31, r0
    5fd2:	11 24       	eor	r1, r1
    5fd4:	ec 59       	subi	r30, 0x9C	; 156
    5fd6:	fc 49       	sbci	r31, 0x9C	; 156
    5fd8:	e6 85       	ldd	r30, Z+14	; 0x0e
    5fda:	9e 17       	cp	r25, r30
    5fdc:	c8 f2       	brcs	.-78     	; 0x5f90 <lin_process_uncd_frame+0xa0>
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
                        break;
                    }
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];
    5fde:	e8 2f       	mov	r30, r24
    5fe0:	f0 e0       	ldi	r31, 0x00	; 0
    5fe2:	e0 59       	subi	r30, 0x90	; 144
    5fe4:	f9 49       	sbci	r31, 0x99	; 153
    5fe6:	a0 81       	ld	r26, Z

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    5fe8:	80 e0       	ldi	r24, 0x00	; 0
    5fea:	22 c0       	rjmp	.+68     	; 0x6030 <lin_process_uncd_frame+0x140>
                {
                    if((flag & (1U << i)) != 0U)
    5fec:	e8 2f       	mov	r30, r24
    5fee:	f0 e0       	ldi	r31, 0x00	; 0
    5ff0:	2a 2f       	mov	r18, r26
    5ff2:	30 e0       	ldi	r19, 0x00	; 0
    5ff4:	08 2e       	mov	r0, r24
    5ff6:	02 c0       	rjmp	.+4      	; 0x5ffc <lin_process_uncd_frame+0x10c>
    5ff8:	36 95       	lsr	r19
    5ffa:	27 95       	ror	r18
    5ffc:	0a 94       	dec	r0
    5ffe:	e2 f7       	brpl	.-8      	; 0x5ff8 <lin_process_uncd_frame+0x108>
    6000:	20 ff       	sbrs	r18, 0
    6002:	08 c0       	rjmp	.+16     	; 0x6014 <lin_process_uncd_frame+0x124>
                    {
                        response_buffer_ptr[i] = g_buffer_backup_data[i];
    6004:	e8 58       	subi	r30, 0x88	; 136
    6006:	f9 49       	sbci	r31, 0x99	; 153
    6008:	90 81       	ld	r25, Z
    600a:	fa 01       	movw	r30, r20
    600c:	e8 0f       	add	r30, r24
    600e:	f1 1d       	adc	r31, r1
    6010:	90 83       	st	Z, r25
    6012:	0d c0       	rjmp	.+26     	; 0x602e <lin_process_uncd_frame+0x13e>
                    }
                    else
                    {
                        response_buffer_ptr[i] = g_lin_frame_data_buffer[frame_byte_offset + i];
    6014:	28 2f       	mov	r18, r24
    6016:	30 e0       	ldi	r19, 0x00	; 0
    6018:	8a 01       	movw	r16, r20
    601a:	02 0f       	add	r16, r18
    601c:	13 1f       	adc	r17, r19
    601e:	26 0f       	add	r18, r22
    6020:	37 1f       	adc	r19, r23
    6022:	f9 01       	movw	r30, r18
    6024:	e8 52       	subi	r30, 0x28	; 40
    6026:	ff 49       	sbci	r31, 0x9F	; 159
    6028:	90 81       	ld	r25, Z
    602a:	f8 01       	movw	r30, r16
    602c:	90 83       	st	Z, r25
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    602e:	8f 5f       	subi	r24, 0xFF	; 255
    6030:	96 e1       	ldi	r25, 0x16	; 22
    6032:	9c 9f       	mul	r25, r28
    6034:	f0 01       	movw	r30, r0
    6036:	9d 9f       	mul	r25, r29
    6038:	f0 0d       	add	r31, r0
    603a:	11 24       	eor	r1, r1
    603c:	e8 53       	subi	r30, 0x38	; 56
    603e:	f8 49       	sbci	r31, 0x98	; 152
    6040:	94 81       	ldd	r25, Z+4	; 0x04
    6042:	89 17       	cp	r24, r25
    6044:	98 f2       	brcs	.-90     	; 0x5fec <lin_process_uncd_frame+0xfc>
    6046:	1c c0       	rjmp	.+56     	; 0x6080 <lin_process_uncd_frame+0x190>
            }
        }
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6048:	8c e1       	ldi	r24, 0x1C	; 28
    604a:	8c 9f       	mul	r24, r28
    604c:	f0 01       	movw	r30, r0
    604e:	8d 9f       	mul	r24, r29
    6050:	f0 0d       	add	r31, r0
    6052:	11 24       	eor	r1, r1
    6054:	e8 5b       	subi	r30, 0xB8	; 184
    6056:	fc 49       	sbci	r31, 0x9C	; 156
    6058:	83 81       	ldd	r24, Z+3	; 0x03
    605a:	81 11       	cpse	r24, r1
    605c:	11 c0       	rjmp	.+34     	; 0x6080 <lin_process_uncd_frame+0x190>
    605e:	20 e0       	ldi	r18, 0x00	; 0
    6060:	0d c0       	rjmp	.+26     	; 0x607c <lin_process_uncd_frame+0x18c>
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
                {
                    g_lin_frame_data_buffer[frame_byte_offset + i] = response_buffer_ptr[i];
    6062:	82 2f       	mov	r24, r18
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	fb 01       	movw	r30, r22
    6068:	e8 0f       	add	r30, r24
    606a:	f9 1f       	adc	r31, r25
    606c:	da 01       	movw	r26, r20
    606e:	a8 0f       	add	r26, r24
    6070:	b9 1f       	adc	r27, r25
    6072:	8c 91       	ld	r24, X
    6074:	e8 52       	subi	r30, 0x28	; 40
    6076:	ff 49       	sbci	r31, 0x9F	; 159
    6078:	80 83       	st	Z, r24
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    607a:	2f 5f       	subi	r18, 0xFF	; 255
    607c:	23 17       	cp	r18, r19
    607e:	88 f3       	brcs	.-30     	; 0x6062 <lin_process_uncd_frame+0x172>
                }
            }
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }
    }
}
    6080:	df 91       	pop	r29
    6082:	cf 91       	pop	r28
    6084:	1f 91       	pop	r17
    6086:	0f 91       	pop	r16
    6088:	08 95       	ret

0000608a <lin_process_id>:
 *
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    608a:	af 92       	push	r10
    608c:	bf 92       	push	r11
    608e:	cf 92       	push	r12
    6090:	df 92       	push	r13
    6092:	ef 92       	push	r14
    6094:	ff 92       	push	r15
    6096:	0f 93       	push	r16
    6098:	1f 93       	push	r17
    609a:	cf 93       	push	r28
    609c:	df 93       	push	r29
    609e:	1f 92       	push	r1
    60a0:	cd b7       	in	r28, 0x3d	; 61
    60a2:	de b7       	in	r29, 0x3e	; 62
    60a4:	b8 2e       	mov	r11, r24
    60a6:	a6 2e       	mov	r10, r22
    l_u16 flag_offset;
    l_u8 flag_size;
    l_u8 i;
#endif /* ((1U == SUPPORT_SLAVE_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))) */

    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];                              //获取用户协议配置信息
    60a8:	e8 2e       	mov	r14, r24
    60aa:	f1 2c       	mov	r15, r1
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];                                                   //获取协议

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    60ac:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <lin_get_frame_index>
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    60b0:	9c e1       	ldi	r25, 0x1C	; 28
    60b2:	9e 9d       	mul	r25, r14
    60b4:	f0 01       	movw	r30, r0
    60b6:	9f 9d       	mul	r25, r15
    60b8:	f0 0d       	add	r31, r0
    60ba:	11 24       	eor	r1, r1
    60bc:	e8 5b       	subi	r30, 0xB8	; 184
    60be:	fc 49       	sbci	r31, 0x9C	; 156
    60c0:	c6 80       	ldd	r12, Z+6	; 0x06
    60c2:	d7 80       	ldd	r13, Z+7	; 0x07
    60c4:	28 2f       	mov	r18, r24
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	89 01       	movw	r16, r18
    60ca:	00 0f       	add	r16, r16
    60cc:	11 1f       	adc	r17, r17
    60ce:	22 0f       	add	r18, r18
    60d0:	33 1f       	adc	r19, r19
    60d2:	22 0f       	add	r18, r18
    60d4:	33 1f       	adc	r19, r19
    60d6:	22 0f       	add	r18, r18
    60d8:	33 1f       	adc	r19, r19
    60da:	02 0f       	add	r16, r18
    60dc:	13 1f       	adc	r17, r19
    60de:	0c 0d       	add	r16, r12
    60e0:	1d 1d       	adc	r17, r13
    if (0xFFU != frame_index)
    60e2:	8f 3f       	cpi	r24, 0xFF	; 255
    60e4:	09 f4       	brne	.+2      	; 0x60e8 <lin_process_id+0x5e>
    60e6:	b9 c0       	rjmp	.+370    	; 0x625a <lin_process_id+0x1d0>
    {
        action = 1U;
        prot_state_ptr->last_pid = lin_process_parity(id,MAKE_PARITY);                      //判断pid校验是否正确
    60e8:	60 e0       	ldi	r22, 0x00	; 0
    60ea:	8a 2d       	mov	r24, r10
    60ec:	0e 94 64 42 	call	0x84c8	; 0x84c8 <lin_process_parity>
    60f0:	96 e1       	ldi	r25, 0x16	; 22
    60f2:	9e 9d       	mul	r25, r14
    60f4:	f0 01       	movw	r30, r0
    60f6:	9f 9d       	mul	r25, r15
    60f8:	f0 0d       	add	r31, r0
    60fa:	11 24       	eor	r1, r1
    60fc:	e8 53       	subi	r30, 0x38	; 56
    60fe:	f8 49       	sbci	r31, 0x98	; 152
    6100:	81 87       	std	Z+9, r24	; 0x09
        /* PID belongs to this node, then check type of frame */
        switch (lin_frame_ptr->frm_type)                                                
    6102:	d8 01       	movw	r26, r16
    6104:	8c 91       	ld	r24, X
    6106:	81 30       	cpi	r24, 0x01	; 1
    6108:	81 f0       	breq	.+32     	; 0x612a <lin_process_id+0xa0>
    610a:	20 f0       	brcs	.+8      	; 0x6114 <lin_process_id+0x8a>
    610c:	81 31       	cpi	r24, 0x11	; 17
    610e:	09 f4       	brne	.+2      	; 0x6112 <lin_process_id+0x88>
    6110:	70 c0       	rjmp	.+224    	; 0x61f2 <lin_process_id+0x168>
    6112:	a5 c0       	rjmp	.+330    	; 0x625e <lin_process_id+0x1d4>
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    6114:	f8 01       	movw	r30, r16
    6116:	82 81       	ldd	r24, Z+2	; 0x02
    6118:	81 11       	cpse	r24, r1
    611a:	a3 c0       	rjmp	.+326    	; 0x6262 <lin_process_id+0x1d8>
                {
                    lin_process_uncd_frame(iii, id, MAKE_UNCONDITIONAL_FRAME);
    611c:	40 e0       	ldi	r20, 0x00	; 0
    611e:	6a 2d       	mov	r22, r10
    6120:	8b 2d       	mov	r24, r11
    6122:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <lin_process_uncd_frame>
                    /* Set response */
                    action = 2U;
    6126:	82 e0       	ldi	r24, 0x02	; 2
    6128:	a5 c0       	rjmp	.+330    	; 0x6274 <lin_process_id+0x1ea>
                }
                break;
            #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    612a:	8c e1       	ldi	r24, 0x1C	; 28
    612c:	8e 9d       	mul	r24, r14
    612e:	f0 01       	movw	r30, r0
    6130:	8f 9d       	mul	r24, r15
    6132:	f0 0d       	add	r31, r0
    6134:	11 24       	eor	r1, r1
    6136:	e8 5b       	subi	r30, 0xB8	; 184
    6138:	fc 49       	sbci	r31, 0x9C	; 156
    613a:	83 81       	ldd	r24, Z+3	; 0x03
    613c:	81 11       	cpse	r24, r1
    613e:	93 c0       	rjmp	.+294    	; 0x6266 <lin_process_id+0x1dc>
                }
            #if (1U == SUPPORT_SLAVE_MODE)
                else
                {
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    6140:	d8 01       	movw	r26, r16
    6142:	18 96       	adiw	r26, 0x08	; 8
    6144:	ed 91       	ld	r30, X+
    6146:	fc 91       	ld	r31, X
    6148:	19 97       	sbiw	r26, 0x09	; 9
    614a:	01 80       	ldd	r0, Z+1	; 0x01
    614c:	f2 81       	ldd	r31, Z+2	; 0x02
    614e:	e0 2d       	mov	r30, r0
    6150:	80 81       	ld	r24, Z
    6152:	89 83       	std	Y+1, r24	; 0x01
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
    6154:	89 81       	ldd	r24, Y+1	; 0x01
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	fc 01       	movw	r30, r24
    615a:	ee 0f       	add	r30, r30
    615c:	ff 1f       	adc	r31, r31
    615e:	88 0f       	add	r24, r24
    6160:	99 1f       	adc	r25, r25
    6162:	88 0f       	add	r24, r24
    6164:	99 1f       	adc	r25, r25
    6166:	88 0f       	add	r24, r24
    6168:	99 1f       	adc	r25, r25
    616a:	e8 0f       	add	r30, r24
    616c:	f9 1f       	adc	r31, r25
    616e:	ec 0d       	add	r30, r12
    6170:	fd 1d       	adc	r31, r13
    6172:	85 81       	ldd	r24, Z+5	; 0x05
    6174:	96 81       	ldd	r25, Z+6	; 0x06
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
    6176:	29 81       	ldd	r18, Y+1	; 0x01
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	a9 01       	movw	r20, r18
    617c:	44 0f       	add	r20, r20
    617e:	55 1f       	adc	r21, r21
    6180:	22 0f       	add	r18, r18
    6182:	33 1f       	adc	r19, r19
    6184:	22 0f       	add	r18, r18
    6186:	33 1f       	adc	r19, r19
    6188:	22 0f       	add	r18, r18
    618a:	33 1f       	adc	r19, r19
    618c:	24 0f       	add	r18, r20
    618e:	35 1f       	adc	r19, r21
    6190:	f6 01       	movw	r30, r12
    6192:	e2 0f       	add	r30, r18
    6194:	f3 1f       	adc	r31, r19
    6196:	37 81       	ldd	r19, Z+7	; 0x07
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    6198:	20 e0       	ldi	r18, 0x00	; 0
    619a:	27 c0       	rjmp	.+78     	; 0x61ea <lin_process_id+0x160>
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    619c:	ac 01       	movw	r20, r24
    619e:	4f 5f       	subi	r20, 0xFF	; 255
    61a0:	5f 4f       	sbci	r21, 0xFF	; 255
    61a2:	fc 01       	movw	r30, r24
    61a4:	eb 52       	subi	r30, 0x2B	; 43
    61a6:	ff 49       	sbci	r31, 0x9F	; 159
    61a8:	80 81       	ld	r24, Z
    61aa:	8f 3f       	cpi	r24, 0xFF	; 255
    61ac:	e1 f0       	breq	.+56     	; 0x61e6 <lin_process_id+0x15c>
                        {
                            /* Frame is updated */
                            lin_make_res_evnt_frame(iii, prot_user_config_ptr->list_identifiers_RAM_ptr[1U + associate_frame - prot_user_config_ptr->frame_start]);
    61ae:	8c e1       	ldi	r24, 0x1C	; 28
    61b0:	8e 9d       	mul	r24, r14
    61b2:	d0 01       	movw	r26, r0
    61b4:	8f 9d       	mul	r24, r15
    61b6:	b0 0d       	add	r27, r0
    61b8:	11 24       	eor	r1, r1
    61ba:	a8 5b       	subi	r26, 0xB8	; 184
    61bc:	bc 49       	sbci	r27, 0x9C	; 156
    61be:	1a 96       	adiw	r26, 0x0a	; 10
    61c0:	2d 91       	ld	r18, X+
    61c2:	3c 91       	ld	r19, X
    61c4:	1b 97       	sbiw	r26, 0x0b	; 11
    61c6:	89 81       	ldd	r24, Y+1	; 0x01
    61c8:	15 96       	adiw	r26, 0x05	; 5
    61ca:	9c 91       	ld	r25, X
    61cc:	e8 2f       	mov	r30, r24
    61ce:	f0 e0       	ldi	r31, 0x00	; 0
    61d0:	e9 1b       	sub	r30, r25
    61d2:	f1 09       	sbc	r31, r1
    61d4:	31 96       	adiw	r30, 0x01	; 1
    61d6:	e2 0f       	add	r30, r18
    61d8:	f3 1f       	adc	r31, r19
    61da:	60 81       	ld	r22, Z
    61dc:	8b 2d       	mov	r24, r11
    61de:	0e 94 f3 33 	call	0x67e6	; 0x67e6 <lin_make_res_evnt_frame>
                            /* Set response */
                            action = 2U;
    61e2:	82 e0       	ldi	r24, 0x02	; 2
                            break;
    61e4:	47 c0       	rjmp	.+142    	; 0x6274 <lin_process_id+0x1ea>
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    61e6:	2f 5f       	subi	r18, 0xFF	; 255
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    61e8:	ca 01       	movw	r24, r20
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    61ea:	23 17       	cp	r18, r19
    61ec:	b8 f2       	brcs	.-82     	; 0x619c <lin_process_id+0x112>

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    if (0xFFU != frame_index)
    {
        action = 1U;
    61ee:	81 e0       	ldi	r24, 0x01	; 1
    61f0:	41 c0       	rjmp	.+130    	; 0x6274 <lin_process_id+0x1ea>
                break;
            #endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13)) */

            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
    61f2:	8c e1       	ldi	r24, 0x1C	; 28
    61f4:	8e 9d       	mul	r24, r14
    61f6:	f0 01       	movw	r30, r0
    61f8:	8f 9d       	mul	r24, r15
    61fa:	f0 0d       	add	r31, r0
    61fc:	11 24       	eor	r1, r1
    61fe:	e8 5b       	subi	r30, 0xB8	; 184
    6200:	fc 49       	sbci	r31, 0x9C	; 156
    6202:	80 81       	ld	r24, Z
    6204:	82 30       	cpi	r24, 0x02	; 2
    6206:	89 f1       	breq	.+98     	; 0x626a <lin_process_id+0x1e0>
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    6208:	f8 01       	movw	r30, r16
    620a:	82 81       	ldd	r24, Z+2	; 0x02
    620c:	81 11       	cpse	r24, r1
    620e:	1e c0       	rjmp	.+60     	; 0x624c <lin_process_id+0x1c2>
                    {
                        action = 2U;
                        if (0x3CU == id)
    6210:	fc e3       	ldi	r31, 0x3C	; 60
    6212:	af 12       	cpse	r10, r31
    6214:	12 c0       	rjmp	.+36     	; 0x623a <lin_process_id+0x1b0>
                        {
                            if (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)
    6216:	86 e1       	ldi	r24, 0x16	; 22
    6218:	8e 9d       	mul	r24, r14
    621a:	f0 01       	movw	r30, r0
    621c:	8f 9d       	mul	r24, r15
    621e:	f0 0d       	add	r31, r0
    6220:	11 24       	eor	r1, r1
    6222:	e8 53       	subi	r30, 0x38	; 56
    6224:	f8 49       	sbci	r31, 0x98	; 152
    6226:	80 89       	ldd	r24, Z+16	; 0x10
    6228:	81 30       	cpi	r24, 0x01	; 1
    622a:	09 f5       	brne	.+66     	; 0x626e <lin_process_id+0x1e4>
                            {
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
    622c:	4a 2d       	mov	r20, r10
    622e:	60 e0       	ldi	r22, 0x00	; 0
    6230:	8b 2d       	mov	r24, r11
    6232:	0e 94 bf 4c 	call	0x997e	; 0x997e <lin_tl_callback_handler>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    6236:	82 e0       	ldi	r24, 0x02	; 2
    6238:	1d c0       	rjmp	.+58     	; 0x6274 <lin_process_id+0x1ea>
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
                            }
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
    623a:	4a 2d       	mov	r20, r10
    623c:	61 e0       	ldi	r22, 0x01	; 1
    623e:	8b 2d       	mov	r24, r11
    6240:	0e 94 bf 4c 	call	0x997e	; 0x997e <lin_tl_callback_handler>
    6244:	81 30       	cpi	r24, 0x01	; 1
    6246:	a9 f0       	breq	.+42     	; 0x6272 <lin_process_id+0x1e8>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    6248:	82 e0       	ldi	r24, 0x02	; 2
    624a:	14 c0       	rjmp	.+40     	; 0x6274 <lin_process_id+0x1ea>
                            }
                        }
                    }
                    else
                    {
                        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RECEIVE_MESSAGE, id);
    624c:	4a 2d       	mov	r20, r10
    624e:	67 e0       	ldi	r22, 0x07	; 7
    6250:	8b 2d       	mov	r24, r11
    6252:	0e 94 bf 4c 	call	0x997e	; 0x997e <lin_tl_callback_handler>
                        /* Rx response */
                        action = 1U;
    6256:	81 e0       	ldi	r24, 0x01	; 1
    6258:	0d c0       	rjmp	.+26     	; 0x6274 <lin_process_id+0x1ea>
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    l_u8 action = 0U;
    625a:	80 e0       	ldi	r24, 0x00	; 0
    625c:	0b c0       	rjmp	.+22     	; 0x6274 <lin_process_id+0x1ea>

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    if (0xFFU != frame_index)
    {
        action = 1U;
    625e:	81 e0       	ldi	r24, 0x01	; 1
    6260:	09 c0       	rjmp	.+18     	; 0x6274 <lin_process_id+0x1ea>
    6262:	81 e0       	ldi	r24, 0x01	; 1
    6264:	07 c0       	rjmp	.+14     	; 0x6274 <lin_process_id+0x1ea>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
                {
                    /* Rx response */
                    action = 1U;
    6266:	81 e0       	ldi	r24, 0x01	; 1
    6268:	05 c0       	rjmp	.+10     	; 0x6274 <lin_process_id+0x1ea>
                        action = 1U;
                    }
                }
                else
                {
                    action = 0U;
    626a:	80 e0       	ldi	r24, 0x00	; 0
    626c:	03 c0       	rjmp	.+6      	; 0x6274 <lin_process_id+0x1ea>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    626e:	82 e0       	ldi	r24, 0x02	; 2
    6270:	01 c0       	rjmp	.+2      	; 0x6274 <lin_process_id+0x1ea>
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
                            {
                                action = 0U;
    6272:	80 e0       	ldi	r24, 0x00	; 0
                /* do nothing */
                break;
        }
    }

    switch (action)
    6274:	81 30       	cpi	r24, 0x01	; 1
    6276:	19 f0       	breq	.+6      	; 0x627e <lin_process_id+0x1f4>
    6278:	82 30       	cpi	r24, 0x02	; 2
    627a:	41 f0       	breq	.+16     	; 0x628c <lin_process_id+0x202>
    627c:	0d c0       	rjmp	.+26     	; 0x6298 <lin_process_id+0x20e>
    {
        case 1U:
            /* Receive response */
            (void)lin_lld_rx_response(iii, lin_frame_ptr->frm_len);
    627e:	d8 01       	movw	r26, r16
    6280:	11 96       	adiw	r26, 0x01	; 1
    6282:	6c 91       	ld	r22, X
    6284:	8b 2d       	mov	r24, r11
    6286:	0e 94 2b 44 	call	0x8856	; 0x8856 <lin_lld_rx_response>
            break;
    628a:	09 c0       	rjmp	.+18     	; 0x629e <lin_process_id+0x214>
        case 2U:
            /* Set response */
            (void)lin_lld_set_response(iii, lin_frame_ptr->frm_len);
    628c:	f8 01       	movw	r30, r16
    628e:	61 81       	ldd	r22, Z+1	; 0x01
    6290:	8b 2d       	mov	r24, r11
    6292:	0e 94 db 43 	call	0x87b6	; 0x87b6 <lin_lld_set_response>
            break;
    6296:	03 c0       	rjmp	.+6      	; 0x629e <lin_process_id+0x214>
        default:
            /* ignore response */
            (void)lin_lld_ignore_response(iii);
    6298:	8b 2d       	mov	r24, r11
    629a:	0e 94 b3 43 	call	0x8766	; 0x8766 <lin_lld_ignore_response>
            break;
    }
}
    629e:	0f 90       	pop	r0
    62a0:	df 91       	pop	r29
    62a2:	cf 91       	pop	r28
    62a4:	1f 91       	pop	r17
    62a6:	0f 91       	pop	r16
    62a8:	ff 90       	pop	r15
    62aa:	ef 90       	pop	r14
    62ac:	df 90       	pop	r13
    62ae:	cf 90       	pop	r12
    62b0:	bf 90       	pop	r11
    62b2:	af 90       	pop	r10
    62b4:	08 95       	ret

000062b6 <lin_update_rx>:
 *
 * Implements    : lin_update_rx_Activity
 *END**************************************************************************/
static void lin_update_rx(l_ifc_handle iii,
                          l_u8 id)
{
    62b6:	df 92       	push	r13
    62b8:	ef 92       	push	r14
    62ba:	ff 92       	push	r15
    62bc:	0f 93       	push	r16
    62be:	1f 93       	push	r17
    62c0:	cf 93       	push	r28
    62c2:	df 93       	push	r29
    62c4:	f8 2e       	mov	r15, r24
    62c6:	d6 2e       	mov	r13, r22
    l_u8 frame_index, flag_size, i, associate_id;
    l_u16 flag_offset;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    62c8:	c8 2f       	mov	r28, r24
    62ca:	d0 e0       	ldi	r29, 0x00	; 0
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    62cc:	86 e1       	ldi	r24, 0x16	; 22
    62ce:	8c 9f       	mul	r24, r28
    62d0:	f0 01       	movw	r30, r0
    62d2:	8d 9f       	mul	r24, r29
    62d4:	f0 0d       	add	r31, r0
    62d6:	11 24       	eor	r1, r1
    62d8:	e8 53       	subi	r30, 0x38	; 56
    62da:	f8 49       	sbci	r31, 0x98	; 152
    62dc:	81 e0       	ldi	r24, 0x01	; 1
    62de:	85 83       	std	Z+5, r24	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    62e0:	82 85       	ldd	r24, Z+10	; 0x0a
    62e2:	8f 3f       	cpi	r24, 0xFF	; 255
    62e4:	51 f0       	breq	.+20     	; 0x62fa <lin_update_rx+0x44>
    {
        prot_state_ptr->num_of_processed_frame++; 
    62e6:	96 e1       	ldi	r25, 0x16	; 22
    62e8:	9c 9f       	mul	r25, r28
    62ea:	f0 01       	movw	r30, r0
    62ec:	9d 9f       	mul	r25, r29
    62ee:	f0 0d       	add	r31, r0
    62f0:	11 24       	eor	r1, r1
    62f2:	e8 53       	subi	r30, 0x38	; 56
    62f4:	f8 49       	sbci	r31, 0x98	; 152
    62f6:	8f 5f       	subi	r24, 0xFF	; 255
    62f8:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    62fa:	86 e1       	ldi	r24, 0x16	; 22
    62fc:	8c 9f       	mul	r24, r28
    62fe:	f0 01       	movw	r30, r0
    6300:	8d 9f       	mul	r24, r29
    6302:	f0 0d       	add	r31, r0
    6304:	11 24       	eor	r1, r1
    6306:	e8 53       	subi	r30, 0x38	; 56
    6308:	f8 49       	sbci	r31, 0x98	; 152
    630a:	82 85       	ldd	r24, Z+10	; 0x0a
    630c:	82 30       	cpi	r24, 0x02	; 2
    630e:	a8 f0       	brcs	.+42     	; 0x633a <lin_update_rx+0x84>
    6310:	86 e1       	ldi	r24, 0x16	; 22
    6312:	8c 9f       	mul	r24, r28
    6314:	f0 01       	movw	r30, r0
    6316:	8d 9f       	mul	r24, r29
    6318:	f0 0d       	add	r31, r0
    631a:	11 24       	eor	r1, r1
    631c:	e8 53       	subi	r30, 0x38	; 56
    631e:	f8 49       	sbci	r31, 0x98	; 152
    6320:	83 85       	ldd	r24, Z+11	; 0x0b
    6322:	81 11       	cpse	r24, r1
    6324:	0a c0       	rjmp	.+20     	; 0x633a <lin_update_rx+0x84>
    {
        prot_state_ptr->overrun_flg = 1U;
    6326:	86 e1       	ldi	r24, 0x16	; 22
    6328:	8c 9f       	mul	r24, r28
    632a:	f0 01       	movw	r30, r0
    632c:	8d 9f       	mul	r24, r29
    632e:	f0 0d       	add	r31, r0
    6330:	11 24       	eor	r1, r1
    6332:	e8 53       	subi	r30, 0x38	; 56
    6334:	f8 49       	sbci	r31, 0x98	; 152
    6336:	81 e0       	ldi	r24, 0x01	; 1
    6338:	83 87       	std	Z+11, r24	; 0x0b
    }

    frame_index = lin_get_frame_index(iii, id);
    633a:	6d 2d       	mov	r22, r13
    633c:	8f 2d       	mov	r24, r15
    633e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <lin_get_frame_index>
    6342:	e8 2e       	mov	r14, r24
    if (frame_index < LIN_NUM_OF_FRMS)
    6344:	83 e0       	ldi	r24, 0x03	; 3
    6346:	8e 15       	cp	r24, r14
    6348:	08 f4       	brcc	.+2      	; 0x634c <lin_update_rx+0x96>
    634a:	b4 c0       	rjmp	.+360    	; 0x64b4 <lin_update_rx+0x1fe>
    {
        /* This PID doesn't belong to this node */
        /* PID belongs to this node, then check type of frame */
        switch (prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    634c:	8c e1       	ldi	r24, 0x1C	; 28
    634e:	8c 9f       	mul	r24, r28
    6350:	f0 01       	movw	r30, r0
    6352:	8d 9f       	mul	r24, r29
    6354:	f0 0d       	add	r31, r0
    6356:	11 24       	eor	r1, r1
    6358:	e8 5b       	subi	r30, 0xB8	; 184
    635a:	fc 49       	sbci	r31, 0x9C	; 156
    635c:	06 81       	ldd	r16, Z+6	; 0x06
    635e:	17 81       	ldd	r17, Z+7	; 0x07
    6360:	8e 2d       	mov	r24, r14
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	fc 01       	movw	r30, r24
    6366:	ee 0f       	add	r30, r30
    6368:	ff 1f       	adc	r31, r31
    636a:	88 0f       	add	r24, r24
    636c:	99 1f       	adc	r25, r25
    636e:	88 0f       	add	r24, r24
    6370:	99 1f       	adc	r25, r25
    6372:	88 0f       	add	r24, r24
    6374:	99 1f       	adc	r25, r25
    6376:	e8 0f       	add	r30, r24
    6378:	f9 1f       	adc	r31, r25
    637a:	e0 0f       	add	r30, r16
    637c:	f1 1f       	adc	r31, r17
    637e:	80 81       	ld	r24, Z
    6380:	81 30       	cpi	r24, 0x01	; 1
    6382:	51 f0       	breq	.+20     	; 0x6398 <lin_update_rx+0xe2>
    6384:	18 f0       	brcs	.+6      	; 0x638c <lin_update_rx+0xd6>
    6386:	81 31       	cpi	r24, 0x11	; 17
    6388:	01 f1       	breq	.+64     	; 0x63ca <lin_update_rx+0x114>
    638a:	40 c0       	rjmp	.+128    	; 0x640c <lin_update_rx+0x156>
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                lin_process_uncd_frame(iii, id, UPDATE_UNCONDITIONAL_FRAME);
    638c:	41 e0       	ldi	r20, 0x01	; 1
    638e:	6d 2d       	mov	r22, r13
    6390:	8f 2d       	mov	r24, r15
    6392:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <lin_process_uncd_frame>
                break;
    6396:	3a c0       	rjmp	.+116    	; 0x640c <lin_update_rx+0x156>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                lin_update_rx_evnt_frame(iii, id);
    6398:	6d 2d       	mov	r22, r13
    639a:	8f 2d       	mov	r24, r15
    639c:	0e 94 83 33 	call	0x6706	; 0x6706 <lin_update_rx_evnt_frame>
                /* Recalculate frame_index by updating associate PID */
                associate_id = lin_process_parity(prot_state_ptr->response_buffer_ptr[0], CHECK_PARITY);
    63a0:	86 e1       	ldi	r24, 0x16	; 22
    63a2:	8c 9f       	mul	r24, r28
    63a4:	f0 01       	movw	r30, r0
    63a6:	8d 9f       	mul	r24, r29
    63a8:	f0 0d       	add	r31, r0
    63aa:	11 24       	eor	r1, r1
    63ac:	e8 53       	subi	r30, 0x38	; 56
    63ae:	f8 49       	sbci	r31, 0x98	; 152
    63b0:	02 80       	ldd	r0, Z+2	; 0x02
    63b2:	f3 81       	ldd	r31, Z+3	; 0x03
    63b4:	e0 2d       	mov	r30, r0
    63b6:	61 e0       	ldi	r22, 0x01	; 1
    63b8:	80 81       	ld	r24, Z
    63ba:	0e 94 64 42 	call	0x84c8	; 0x84c8 <lin_process_parity>
                frame_index = lin_get_frame_index(iii, associate_id);
    63be:	68 2f       	mov	r22, r24
    63c0:	8f 2d       	mov	r24, r15
    63c2:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <lin_get_frame_index>
    63c6:	e8 2e       	mov	r14, r24
                break;
    63c8:	21 c0       	rjmp	.+66     	; 0x640c <lin_update_rx+0x156>
            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                /* If goto sleep signal */
                if (0U == prot_state_ptr->response_buffer_ptr[0])
    63ca:	86 e1       	ldi	r24, 0x16	; 22
    63cc:	8c 9f       	mul	r24, r28
    63ce:	f0 01       	movw	r30, r0
    63d0:	8d 9f       	mul	r24, r29
    63d2:	f0 0d       	add	r31, r0
    63d4:	11 24       	eor	r1, r1
    63d6:	e8 53       	subi	r30, 0x38	; 56
    63d8:	f8 49       	sbci	r31, 0x98	; 152
    63da:	02 80       	ldd	r0, Z+2	; 0x02
    63dc:	f3 81       	ldd	r31, Z+3	; 0x03
    63de:	e0 2d       	mov	r30, r0
    63e0:	80 81       	ld	r24, Z
    63e2:	81 11       	cpse	r24, r1
    63e4:	0e c0       	rjmp	.+28     	; 0x6402 <lin_update_rx+0x14c>
                {
                    /* In a slave node, set go to sleep flag in state structure */
                    prot_state_ptr->go_to_sleep_flg = true;
    63e6:	86 e1       	ldi	r24, 0x16	; 22
    63e8:	8c 9f       	mul	r24, r28
    63ea:	f0 01       	movw	r30, r0
    63ec:	8d 9f       	mul	r24, r29
    63ee:	f0 0d       	add	r31, r0
    63f0:	11 24       	eor	r1, r1
    63f2:	e8 53       	subi	r30, 0x38	; 56
    63f4:	f8 49       	sbci	r31, 0x98	; 152
    63f6:	81 e0       	ldi	r24, 0x01	; 1
    63f8:	87 83       	std	Z+7, r24	; 0x07
                    (void)lin_lld_set_low_power_mode(iii);
    63fa:	8f 2d       	mov	r24, r15
    63fc:	0e 94 c7 43 	call	0x878e	; 0x878e <lin_lld_set_low_power_mode>
    6400:	05 c0       	rjmp	.+10     	; 0x640c <lin_update_rx+0x156>
                }
                else
                {
                    /* Call transport layer callback to process TL_RX_COMPLETED event*/
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RX_COMPLETED, id);
    6402:	4d 2d       	mov	r20, r13
    6404:	63 e0       	ldi	r22, 0x03	; 3
    6406:	8f 2d       	mov	r24, r15
    6408:	0e 94 bf 4c 	call	0x997e	; 0x997e <lin_tl_callback_handler>
            default:
                /* do nothing */
                break;
        }

        if (frame_index < LIN_NUM_OF_FRMS)
    640c:	83 e0       	ldi	r24, 0x03	; 3
    640e:	8e 15       	cp	r24, r14
    6410:	78 f1       	brcs	.+94     	; 0x6470 <lin_update_rx+0x1ba>
        {
            /* Update rx frame flag */
            g_lin_frame_flag_handle_tbl[frame_index] = true;
    6412:	ee 2d       	mov	r30, r14
    6414:	f0 e0       	ldi	r31, 0x00	; 0
    6416:	ec 58       	subi	r30, 0x8C	; 140
    6418:	f9 49       	sbci	r31, 0x99	; 153
    641a:	81 e0       	ldi	r24, 0x01	; 1
    641c:	80 83       	st	Z, r24

            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    641e:	8c e1       	ldi	r24, 0x1C	; 28
    6420:	8c 9f       	mul	r24, r28
    6422:	f0 01       	movw	r30, r0
    6424:	8d 9f       	mul	r24, r29
    6426:	f0 0d       	add	r31, r0
    6428:	11 24       	eor	r1, r1
    642a:	e8 5b       	subi	r30, 0xB8	; 184
    642c:	fc 49       	sbci	r31, 0x9C	; 156
    642e:	83 81       	ldd	r24, Z+3	; 0x03
    6430:	81 11       	cpse	r24, r1
    6432:	1e c0       	rjmp	.+60     	; 0x6470 <lin_update_rx+0x1ba>
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
    6434:	8e 2d       	mov	r24, r14
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	fc 01       	movw	r30, r24
    643a:	ee 0f       	add	r30, r30
    643c:	ff 1f       	adc	r31, r31
    643e:	88 0f       	add	r24, r24
    6440:	99 1f       	adc	r25, r25
    6442:	88 0f       	add	r24, r24
    6444:	99 1f       	adc	r25, r25
    6446:	88 0f       	add	r24, r24
    6448:	99 1f       	adc	r25, r25
    644a:	e8 0f       	add	r30, r24
    644c:	f9 1f       	adc	r31, r25
    644e:	e0 0f       	add	r30, r16
    6450:	f1 1f       	adc	r31, r17
    6452:	25 81       	ldd	r18, Z+5	; 0x05
    6454:	36 81       	ldd	r19, Z+6	; 0x06
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
    6456:	47 81       	ldd	r20, Z+7	; 0x07
                for (i = 0U; i < flag_size; i++)
    6458:	80 e0       	ldi	r24, 0x00	; 0
    645a:	08 c0       	rjmp	.+16     	; 0x646c <lin_update_rx+0x1b6>
                {
                    g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    645c:	f9 01       	movw	r30, r18
    645e:	eb 52       	subi	r30, 0x2B	; 43
    6460:	ff 49       	sbci	r31, 0x9F	; 159
    6462:	9f ef       	ldi	r25, 0xFF	; 255
    6464:	90 83       	st	Z, r25
                    flag_offset++;
    6466:	2f 5f       	subi	r18, 0xFF	; 255
    6468:	3f 4f       	sbci	r19, 0xFF	; 255
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
                for (i = 0U; i < flag_size; i++)
    646a:	8f 5f       	subi	r24, 0xFF	; 255
    646c:	84 17       	cp	r24, r20
    646e:	b0 f3       	brcs	.-20     	; 0x645c <lin_update_rx+0x1a6>
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }

    #if (1U == SUPPORT_SLAVE_MODE)
        /* update word status */
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6470:	8c e1       	ldi	r24, 0x1C	; 28
    6472:	8c 9f       	mul	r24, r28
    6474:	f0 01       	movw	r30, r0
    6476:	8d 9f       	mul	r24, r29
    6478:	f0 0d       	add	r31, r0
    647a:	11 24       	eor	r1, r1
    647c:	e8 5b       	subi	r30, 0xB8	; 184
    647e:	fc 49       	sbci	r31, 0x9C	; 156
    6480:	83 81       	ldd	r24, Z+3	; 0x03
    6482:	81 11       	cpse	r24, r1
    6484:	17 c0       	rjmp	.+46     	; 0x64b4 <lin_update_rx+0x1fe>
        {
            if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    6486:	8c e1       	ldi	r24, 0x1C	; 28
    6488:	8c 9f       	mul	r24, r28
    648a:	f0 01       	movw	r30, r0
    648c:	8d 9f       	mul	r24, r29
    648e:	f0 0d       	add	r31, r0
    6490:	11 24       	eor	r1, r1
    6492:	e8 5b       	subi	r30, 0xB8	; 184
    6494:	fc 49       	sbci	r31, 0x9C	; 156
    6496:	80 81       	ld	r24, Z
    6498:	88 23       	and	r24, r24
    649a:	11 f0       	breq	.+4      	; 0x64a0 <lin_update_rx+0x1ea>
    649c:	83 30       	cpi	r24, 0x03	; 3
    649e:	29 f4       	brne	.+10     	; 0x64aa <lin_update_rx+0x1f4>
            {
                lin_update_word_status_lin21(iii, LIN_LLD_RX_COMPLETED);
    64a0:	62 e0       	ldi	r22, 0x02	; 2
    64a2:	8f 2d       	mov	r24, r15
    64a4:	0e 94 ab 32 	call	0x6556	; 0x6556 <lin_update_word_status_lin21>
    64a8:	05 c0       	rjmp	.+10     	; 0x64b4 <lin_update_rx+0x1fe>
            }
            else
            {
                if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_J2602)
    64aa:	81 30       	cpi	r24, 0x01	; 1
    64ac:	19 f4       	brne	.+6      	; 0x64b4 <lin_update_rx+0x1fe>
                {
                    lin_update_word_status_j2602(iii);
    64ae:	8f 2d       	mov	r24, r15
    64b0:	0e 94 81 32 	call	0x6502	; 0x6502 <lin_update_word_status_j2602>
                }
            }
        }
    #endif /* (1U == SUPPORT_SLAVE_MODE) */
    }
}
    64b4:	df 91       	pop	r29
    64b6:	cf 91       	pop	r28
    64b8:	1f 91       	pop	r17
    64ba:	0f 91       	pop	r16
    64bc:	ff 90       	pop	r15
    64be:	ef 90       	pop	r14
    64c0:	df 90       	pop	r13
    64c2:	08 95       	ret

000064c4 <lin_pid_resp_callback_handler>:
 *END**************************************************************************/
void lin_pid_resp_callback_handler(l_ifc_handle iii,
                                   const lin_lld_event_id_t event_id,
                                   l_u8 id)
{
    switch (event_id)
    64c4:	62 30       	cpi	r22, 0x02	; 2
    64c6:	99 f0       	breq	.+38     	; 0x64ee <lin_pid_resp_callback_handler+0x2a>
    64c8:	28 f4       	brcc	.+10     	; 0x64d4 <lin_pid_resp_callback_handler+0x10>
    64ca:	66 23       	and	r22, r22
    64cc:	41 f0       	breq	.+16     	; 0x64de <lin_pid_resp_callback_handler+0x1a>
    64ce:	61 30       	cpi	r22, 0x01	; 1
    64d0:	51 f0       	breq	.+20     	; 0x64e6 <lin_pid_resp_callback_handler+0x22>
    64d2:	08 95       	ret
    64d4:	68 30       	cpi	r22, 0x08	; 8
    64d6:	90 f0       	brcs	.+36     	; 0x64fc <lin_pid_resp_callback_handler+0x38>
    64d8:	68 30       	cpi	r22, 0x08	; 8
    64da:	69 f0       	breq	.+26     	; 0x64f6 <lin_pid_resp_callback_handler+0x32>
    64dc:	08 95       	ret
    {
        case LIN_LLD_PID_OK:
            lin_process_id(iii, id);
    64de:	64 2f       	mov	r22, r20
    64e0:	0e 94 45 30 	call	0x608a	; 0x608a <lin_process_id>
            break;
    64e4:	08 95       	ret
        case LIN_LLD_TX_COMPLETED:
            lin_update_tx(iii, id);
    64e6:	64 2f       	mov	r22, r20
    64e8:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <lin_update_tx>
            break;
    64ec:	08 95       	ret
        case LIN_LLD_RX_COMPLETED:
            lin_update_rx(iii, id);
    64ee:	64 2f       	mov	r22, r20
    64f0:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <lin_update_rx>
            break;
    64f4:	08 95       	ret
        case LIN_LLD_BUS_ACTIVITY_TIMEOUT:
            lin_bus_activity_timeout(iii);
    64f6:	0e 94 d2 2d 	call	0x5ba4	; 0x5ba4 <lin_bus_activity_timeout>
            break;
    64fa:	08 95       	ret
        case LIN_LLD_PID_ERR:
        case LIN_LLD_FRAME_ERR:
        case LIN_LLD_CHECKSUM_ERR:
        case LIN_LLD_READBACK_ERR:
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
    64fc:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <lin_handle_error>
    6500:	08 95       	ret

00006502 <lin_update_word_status_j2602>:
{
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 overrun_flg;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6502:	28 2f       	mov	r18, r24
    6504:	30 e0       	ldi	r19, 0x00	; 0

    err_in_res = prot_state_ptr->error_in_response;
    6506:	86 e1       	ldi	r24, 0x16	; 22
    6508:	82 9f       	mul	r24, r18
    650a:	d0 01       	movw	r26, r0
    650c:	83 9f       	mul	r24, r19
    650e:	b0 0d       	add	r27, r0
    6510:	11 24       	eor	r1, r1
    6512:	fd 01       	movw	r30, r26
    6514:	e8 53       	subi	r30, 0x38	; 56
    6516:	f8 49       	sbci	r31, 0x98	; 152
    6518:	46 81       	ldd	r20, Z+6	; 0x06
    prot_state_ptr->error_in_response = 0;
    651a:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    651c:	85 81       	ldd	r24, Z+5	; 0x05
    overrun_flg = prot_state_ptr->overrun_flg;
    651e:	53 85       	ldd	r21, Z+11	; 0x0b

    word_status_ptr = &prot_state_ptr->word_status;

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    6520:	ac 52       	subi	r26, 0x2C	; 44
    6522:	b8 49       	sbci	r27, 0x98	; 152
    6524:	9c 91       	ld	r25, X
    6526:	69 2f       	mov	r22, r25
    6528:	61 70       	andi	r22, 0x01	; 1
    652a:	46 2b       	or	r20, r22
    652c:	40 fb       	bst	r20, 0
    652e:	90 f9       	bld	r25, 0
    word_status_ptr->successful_transfer |= suc_in_tras;
    6530:	91 fb       	bst	r25, 1
    6532:	44 27       	eor	r20, r20
    6534:	40 f9       	bld	r20, 0
    6536:	84 2b       	or	r24, r20
    6538:	80 fb       	bst	r24, 0
    653a:	91 f9       	bld	r25, 1


    word_status_ptr->overrun = overrun_flg;
    653c:	50 fb       	bst	r21, 0
    653e:	92 f9       	bld	r25, 2
    6540:	9c 93       	st	X, r25
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    6542:	81 85       	ldd	r24, Z+9	; 0x09
    6544:	85 87       	std	Z+13, r24	; 0x0d

    if(prot_state_ptr->go_to_sleep_flg == true)
    6546:	87 81       	ldd	r24, Z+7	; 0x07
    6548:	88 23       	and	r24, r24
    654a:	21 f0       	breq	.+8      	; 0x6554 <lin_update_word_status_j2602+0x52>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    654c:	fd 01       	movw	r30, r26
    654e:	89 2f       	mov	r24, r25
    6550:	88 60       	ori	r24, 0x08	; 8
    6552:	80 83       	st	Z, r24
    6554:	08 95       	ret

00006556 <lin_update_word_status_lin21>:
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 save_config;
    l_u8 overrun_flag;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6556:	28 2f       	mov	r18, r24
    6558:	30 e0       	ldi	r19, 0x00	; 0
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_master_data_t * master_data_ptr;
    l_u8 active_schedule_id;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    err_in_res = prot_state_ptr->error_in_response;
    655a:	86 e1       	ldi	r24, 0x16	; 22
    655c:	82 9f       	mul	r24, r18
    655e:	f0 01       	movw	r30, r0
    6560:	83 9f       	mul	r24, r19
    6562:	f0 0d       	add	r31, r0
    6564:	11 24       	eor	r1, r1
    6566:	e8 53       	subi	r30, 0x38	; 56
    6568:	f8 49       	sbci	r31, 0x98	; 152
    656a:	46 81       	ldd	r20, Z+6	; 0x06
    prot_state_ptr->error_in_response = 0;
    656c:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    656e:	85 81       	ldd	r24, Z+5	; 0x05
    /* use of ternary operator below is for being MISRA compliant */
    save_config = (l_u8)(prot_state_ptr->save_config_flg ? 1U : 0U);
    6570:	97 85       	ldd	r25, Z+15	; 0x0f
    6572:	99 23       	and	r25, r25
    6574:	11 f0       	breq	.+4      	; 0x657a <lin_update_word_status_lin21+0x24>
    6576:	51 e0       	ldi	r21, 0x01	; 1
    6578:	01 c0       	rjmp	.+2      	; 0x657c <lin_update_word_status_lin21+0x26>
    657a:	50 e0       	ldi	r21, 0x00	; 0
    overrun_flag = prot_state_ptr->overrun_flg;
    657c:	96 e1       	ldi	r25, 0x16	; 22
    657e:	92 9f       	mul	r25, r18
    6580:	f0 01       	movw	r30, r0
    6582:	93 9f       	mul	r25, r19
    6584:	f0 0d       	add	r31, r0
    6586:	11 24       	eor	r1, r1
    6588:	df 01       	movw	r26, r30
    658a:	a8 53       	subi	r26, 0x38	; 56
    658c:	b8 49       	sbci	r27, 0x98	; 152
    658e:	1b 96       	adiw	r26, 0x0b	; 11
    6590:	7c 91       	ld	r23, X
    6592:	1b 97       	sbiw	r26, 0x0b	; 11

    word_status_ptr = &prot_state_ptr->word_status;
    word_status_ptr->overrun = overrun_flag;
    6594:	ec 52       	subi	r30, 0x2C	; 44
    6596:	f8 49       	sbci	r31, 0x98	; 152
    6598:	90 81       	ld	r25, Z
    659a:	70 fb       	bst	r23, 0
    659c:	92 f9       	bld	r25, 2

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    659e:	79 2f       	mov	r23, r25
    65a0:	71 70       	andi	r23, 0x01	; 1
    65a2:	47 2b       	or	r20, r23
    65a4:	40 fb       	bst	r20, 0
    65a6:	90 f9       	bld	r25, 0
    word_status_ptr->successful_transfer |= suc_in_tras;
    65a8:	91 fb       	bst	r25, 1
    65aa:	44 27       	eor	r20, r20
    65ac:	40 f9       	bld	r20, 0
    65ae:	84 2b       	or	r24, r20
    65b0:	80 fb       	bst	r24, 0
    65b2:	91 f9       	bld	r25, 1
    65b4:	90 83       	st	Z, r25
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    65b6:	19 96       	adiw	r26, 0x09	; 9
    65b8:	8c 91       	ld	r24, X
    65ba:	19 97       	sbiw	r26, 0x09	; 9
    65bc:	1d 96       	adiw	r26, 0x0d	; 13
    65be:	8c 93       	st	X, r24
    65c0:	1d 97       	sbiw	r26, 0x0d	; 13

    if(prot_state_ptr->go_to_sleep_flg == true)
    65c2:	17 96       	adiw	r26, 0x07	; 7
    65c4:	8c 91       	ld	r24, X
    65c6:	88 23       	and	r24, r24
    65c8:	59 f0       	breq	.+22     	; 0x65e0 <lin_update_word_status_lin21+0x8a>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    65ca:	86 e1       	ldi	r24, 0x16	; 22
    65cc:	82 9f       	mul	r24, r18
    65ce:	f0 01       	movw	r30, r0
    65d0:	83 9f       	mul	r24, r19
    65d2:	f0 0d       	add	r31, r0
    65d4:	11 24       	eor	r1, r1
    65d6:	ec 52       	subi	r30, 0x2C	; 44
    65d8:	f8 49       	sbci	r31, 0x98	; 152
    65da:	89 2f       	mov	r24, r25
    65dc:	88 60       	ori	r24, 0x08	; 8
    65de:	80 83       	st	Z, r24
    }

    if(LIN_LLD_BUS_ACTIVITY_TIMEOUT != event_id)
    65e0:	68 30       	cpi	r22, 0x08	; 8
    65e2:	59 f0       	breq	.+22     	; 0x65fa <lin_update_word_status_lin21+0xa4>
    {
        /* Set bus activity timeout */
        word_status_ptr->bus_activity = 1U;
    65e4:	86 e1       	ldi	r24, 0x16	; 22
    65e6:	82 9f       	mul	r24, r18
    65e8:	f0 01       	movw	r30, r0
    65ea:	83 9f       	mul	r24, r19
    65ec:	f0 0d       	add	r31, r0
    65ee:	11 24       	eor	r1, r1
    65f0:	ec 52       	subi	r30, 0x2C	; 44
    65f2:	f8 49       	sbci	r31, 0x98	; 152
    65f4:	80 81       	ld	r24, Z
    65f6:	80 61       	ori	r24, 0x10	; 16
    65f8:	80 83       	st	Z, r24
    }
    else
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* For Slave node - using ternary operator is a workaround for MISRA */
        word_status_ptr->event_trigger_collision_flg = 0U;
    65fa:	86 e1       	ldi	r24, 0x16	; 22
    65fc:	82 9f       	mul	r24, r18
    65fe:	f0 01       	movw	r30, r0
    6600:	83 9f       	mul	r24, r19
    6602:	f0 0d       	add	r31, r0
    6604:	11 24       	eor	r1, r1
    6606:	ec 52       	subi	r30, 0x2C	; 44
    6608:	f8 49       	sbci	r31, 0x98	; 152
    660a:	80 81       	ld	r24, Z
        /* Updated save configuration value to word status */
        word_status_ptr->save_config_flg = save_config;
    660c:	8f 7d       	andi	r24, 0xDF	; 223
    660e:	50 fb       	bst	r21, 0
    6610:	86 f9       	bld	r24, 6
        word_status_ptr->reserved = 0U;
    6612:	8f 77       	andi	r24, 0x7F	; 127
    6614:	80 83       	st	Z, r24
    6616:	08 95       	ret

00006618 <lin_update_err_signal>:
 *
 * Implements    : lin_update_err_signal_Activity
 *END**************************************************************************/
void lin_update_err_signal(l_ifc_handle iii,
                           l_u8 frm_id)
{
    6618:	1f 93       	push	r17
    661a:	cf 93       	push	r28
    661c:	df 93       	push	r29
    l_u8 i;
    const l_u16* byte_offset_temp_ptr;
    const l_u8* bit_offset_temp_ptr;
    l_u8 err_in_res = g_lin_protocol_state_array[iii].error_in_response;
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	26 e1       	ldi	r18, 0x16	; 22
    6622:	28 9f       	mul	r18, r24
    6624:	f0 01       	movw	r30, r0
    6626:	29 9f       	mul	r18, r25
    6628:	f0 0d       	add	r31, r0
    662a:	11 24       	eor	r1, r1
    662c:	e8 53       	subi	r30, 0x38	; 56
    662e:	f8 49       	sbci	r31, 0x98	; 152
    6630:	16 81       	ldd	r17, Z+6	; 0x06
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    6632:	2c e1       	ldi	r18, 0x1C	; 28
    6634:	28 9f       	mul	r18, r24
    6636:	f0 01       	movw	r30, r0
    6638:	29 9f       	mul	r18, r25
    663a:	f0 0d       	add	r31, r0
    663c:	11 24       	eor	r1, r1
    663e:	e8 5b       	subi	r30, 0xB8	; 184
    6640:	fc 49       	sbci	r31, 0x9C	; 156
    6642:	42 89       	ldd	r20, Z+18	; 0x12
    6644:	50 e0       	ldi	r21, 0x00	; 0

    if (frm_id < LIN_NUM_OF_FRMS)
    6646:	64 30       	cpi	r22, 0x04	; 4
    6648:	08 f0       	brcs	.+2      	; 0x664c <lin_update_err_signal+0x34>
    664a:	59 c0       	rjmp	.+178    	; 0x66fe <lin_update_err_signal+0xe6>
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    664c:	28 9f       	mul	r18, r24
    664e:	f0 01       	movw	r30, r0
    6650:	29 9f       	mul	r18, r25
    6652:	f0 0d       	add	r31, r0
    6654:	11 24       	eor	r1, r1
    6656:	e8 5b       	subi	r30, 0xB8	; 184
    6658:	fc 49       	sbci	r31, 0x9C	; 156
    665a:	86 81       	ldd	r24, Z+6	; 0x06
    665c:	97 81       	ldd	r25, Z+7	; 0x07
    665e:	70 e0       	ldi	r23, 0x00	; 0
    6660:	fb 01       	movw	r30, r22
    6662:	ee 0f       	add	r30, r30
    6664:	ff 1f       	adc	r31, r31
    6666:	66 0f       	add	r22, r22
    6668:	77 1f       	adc	r23, r23
    666a:	66 0f       	add	r22, r22
    666c:	77 1f       	adc	r23, r23
    666e:	66 0f       	add	r22, r22
    6670:	77 1f       	adc	r23, r23
    6672:	6e 0f       	add	r22, r30
    6674:	7f 1f       	adc	r23, r31
    6676:	fc 01       	movw	r30, r24
    6678:	e6 0f       	add	r30, r22
    667a:	f7 1f       	adc	r31, r23
    667c:	80 81       	ld	r24, Z
    667e:	81 30       	cpi	r24, 0x01	; 1
    6680:	91 f5       	brne	.+100    	; 0x66e6 <lin_update_err_signal+0xce>
    6682:	3d c0       	rjmp	.+122    	; 0x66fe <lin_update_err_signal+0xe6>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
    6684:	84 e2       	ldi	r24, 0x24	; 36
    6686:	84 9f       	mul	r24, r20
    6688:	f0 01       	movw	r30, r0
    668a:	85 9f       	mul	r24, r21
    668c:	f0 0d       	add	r31, r0
    668e:	11 24       	eor	r1, r1
    6690:	ec 59       	subi	r30, 0x9C	; 156
    6692:	fc 49       	sbci	r31, 0x9C	; 156
    6694:	a0 89       	ldd	r26, Z+16	; 0x10
    6696:	b1 89       	ldd	r27, Z+17	; 0x11
    6698:	86 2f       	mov	r24, r22
    669a:	90 e0       	ldi	r25, 0x00	; 0
    669c:	9c 01       	movw	r18, r24
    669e:	22 0f       	add	r18, r18
    66a0:	33 1f       	adc	r19, r19
    66a2:	2a 0f       	add	r18, r26
    66a4:	3b 1f       	adc	r19, r27
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
    66a6:	a2 89       	ldd	r26, Z+18	; 0x12
    66a8:	b3 89       	ldd	r27, Z+19	; 0x13
    66aa:	a8 0f       	add	r26, r24
    66ac:	b9 1f       	adc	r27, r25
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    66ae:	e9 01       	movw	r28, r18
    66b0:	e8 81       	ld	r30, Y
    66b2:	f9 81       	ldd	r31, Y+1	; 0x01
    66b4:	e8 52       	subi	r30, 0x28	; 40
    66b6:	ff 49       	sbci	r31, 0x9F	; 159
    66b8:	70 81       	ld	r23, Z
    66ba:	ac 91       	ld	r26, X
    66bc:	21 e0       	ldi	r18, 0x01	; 1
    66be:	30 e0       	ldi	r19, 0x00	; 0
    66c0:	0a 2e       	mov	r0, r26
    66c2:	02 c0       	rjmp	.+4      	; 0x66c8 <lin_update_err_signal+0xb0>
    66c4:	22 0f       	add	r18, r18
    66c6:	33 1f       	adc	r19, r19
    66c8:	0a 94       	dec	r0
    66ca:	e2 f7       	brpl	.-8      	; 0x66c4 <lin_update_err_signal+0xac>
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
    66cc:	81 2f       	mov	r24, r17
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	02 c0       	rjmp	.+4      	; 0x66d6 <lin_update_err_signal+0xbe>
    66d2:	88 0f       	add	r24, r24
    66d4:	99 1f       	adc	r25, r25
    66d6:	aa 95       	dec	r26
    66d8:	e2 f7       	brpl	.-8      	; 0x66d2 <lin_update_err_signal+0xba>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    66da:	20 95       	com	r18
    66dc:	27 23       	and	r18, r23
    66de:	82 2b       	or	r24, r18
    66e0:	80 83       	st	Z, r24
    if (frm_id < LIN_NUM_OF_FRMS)
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
    66e2:	6f 5f       	subi	r22, 0xFF	; 255
    66e4:	01 c0       	rjmp	.+2      	; 0x66e8 <lin_update_err_signal+0xd0>
    66e6:	60 e0       	ldi	r22, 0x00	; 0
    66e8:	84 e2       	ldi	r24, 0x24	; 36
    66ea:	84 9f       	mul	r24, r20
    66ec:	f0 01       	movw	r30, r0
    66ee:	85 9f       	mul	r24, r21
    66f0:	f0 0d       	add	r31, r0
    66f2:	11 24       	eor	r1, r1
    66f4:	ec 59       	subi	r30, 0x9C	; 156
    66f6:	fc 49       	sbci	r31, 0x9C	; 156
    66f8:	86 85       	ldd	r24, Z+14	; 0x0e
    66fa:	68 17       	cp	r22, r24
    66fc:	18 f2       	brcs	.-122    	; 0x6684 <lin_update_err_signal+0x6c>
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
            }
        }
    }
}
    66fe:	df 91       	pop	r29
    6700:	cf 91       	pop	r28
    6702:	1f 91       	pop	r17
    6704:	08 95       	ret

00006706 <lin_update_rx_evnt_frame>:
 *
 * Implements    : lin_update_rx_evnt_frame_Activity
 *END**************************************************************************/
void lin_update_rx_evnt_frame(l_ifc_handle iii,
                              l_u8 pid)
{
    6706:	cf 92       	push	r12
    6708:	df 92       	push	r13
    670a:	ef 92       	push	r14
    670c:	ff 92       	push	r15
    670e:	0f 93       	push	r16
    6710:	1f 93       	push	r17
    6712:	cf 93       	push	r28
    6714:	df 93       	push	r29
    6716:	18 2f       	mov	r17, r24
    const lin_associate_frame_t * ptr;
    l_u8 frame_index, i, associate_id;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6718:	c8 2f       	mov	r28, r24
    671a:	d0 e0       	ldi	r29, 0x00	; 0

    /* Get frame index of the event trigger frame */
    frame_index = lin_get_frame_index(iii, pid);
    671c:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <lin_get_frame_index>
    6720:	08 2f       	mov	r16, r24

    if (0xFFU != frame_index) /* This PID doesn't belong to this node */
    6722:	8f 3f       	cpi	r24, 0xFF	; 255
    6724:	09 f4       	brne	.+2      	; 0x6728 <lin_update_rx_evnt_frame+0x22>
    6726:	56 c0       	rjmp	.+172    	; 0x67d4 <lin_update_rx_evnt_frame+0xce>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
    6728:	86 e1       	ldi	r24, 0x16	; 22
    672a:	8c 9f       	mul	r24, r28
    672c:	f0 01       	movw	r30, r0
    672e:	8d 9f       	mul	r24, r29
    6730:	f0 0d       	add	r31, r0
    6732:	11 24       	eor	r1, r1
    6734:	e8 53       	subi	r30, 0x38	; 56
    6736:	f8 49       	sbci	r31, 0x98	; 152
    6738:	02 80       	ldd	r0, Z+2	; 0x02
    673a:	f3 81       	ldd	r31, Z+3	; 0x03
    673c:	e0 2d       	mov	r30, r0
    673e:	61 e0       	ldi	r22, 0x01	; 1
    6740:	80 81       	ld	r24, Z
    6742:	0e 94 64 42 	call	0x84c8	; 0x84c8 <lin_process_parity>
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;
    6746:	9c e1       	ldi	r25, 0x1C	; 28
    6748:	9c 9f       	mul	r25, r28
    674a:	f0 01       	movw	r30, r0
    674c:	9d 9f       	mul	r25, r29
    674e:	f0 0d       	add	r31, r0
    6750:	11 24       	eor	r1, r1
    6752:	e8 5b       	subi	r30, 0xB8	; 184
    6754:	fc 49       	sbci	r31, 0x9C	; 156
    6756:	46 81       	ldd	r20, Z+6	; 0x06
    6758:	57 81       	ldd	r21, Z+7	; 0x07
    675a:	20 2f       	mov	r18, r16
    675c:	30 e0       	ldi	r19, 0x00	; 0
    675e:	f9 01       	movw	r30, r18
    6760:	ee 0f       	add	r30, r30
    6762:	ff 1f       	adc	r31, r31
    6764:	22 0f       	add	r18, r18
    6766:	33 1f       	adc	r19, r19
    6768:	22 0f       	add	r18, r18
    676a:	33 1f       	adc	r19, r19
    676c:	22 0f       	add	r18, r18
    676e:	33 1f       	adc	r19, r19
    6770:	2e 0f       	add	r18, r30
    6772:	3f 1f       	adc	r19, r31
    6774:	fa 01       	movw	r30, r20
    6776:	e2 0f       	add	r30, r18
    6778:	f3 1f       	adc	r31, r19
    677a:	e0 84       	ldd	r14, Z+8	; 0x08
    677c:	f1 84       	ldd	r15, Z+9	; 0x09

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    677e:	20 e0       	ldi	r18, 0x00	; 0
    6780:	25 c0       	rjmp	.+74     	; 0x67cc <lin_update_rx_evnt_frame+0xc6>
        {
            /* First byte of response for event trigger is the PID of the associate frame */
            if (prot_user_config_ptr->list_identifiers_RAM_ptr[((l_u8)ptr->associated_uncond_frame_ptr[i] - prot_user_config_ptr->frame_start) + 1U] == associate_id)
    6782:	9c e1       	ldi	r25, 0x1C	; 28
    6784:	9c 9f       	mul	r25, r28
    6786:	d0 01       	movw	r26, r0
    6788:	9d 9f       	mul	r25, r29
    678a:	b0 0d       	add	r27, r0
    678c:	11 24       	eor	r1, r1
    678e:	a8 5b       	subi	r26, 0xB8	; 184
    6790:	bc 49       	sbci	r27, 0x9C	; 156
    6792:	1a 96       	adiw	r26, 0x0a	; 10
    6794:	cd 90       	ld	r12, X+
    6796:	dc 90       	ld	r13, X
    6798:	1b 97       	sbiw	r26, 0x0b	; 11
    679a:	f7 01       	movw	r30, r14
    679c:	41 81       	ldd	r20, Z+1	; 0x01
    679e:	52 81       	ldd	r21, Z+2	; 0x02
    67a0:	fa 01       	movw	r30, r20
    67a2:	e2 0f       	add	r30, r18
    67a4:	f1 1d       	adc	r31, r1
    67a6:	90 81       	ld	r25, Z
    67a8:	15 96       	adiw	r26, 0x05	; 5
    67aa:	3c 91       	ld	r19, X
    67ac:	e9 2f       	mov	r30, r25
    67ae:	f0 e0       	ldi	r31, 0x00	; 0
    67b0:	e3 1b       	sub	r30, r19
    67b2:	f1 09       	sbc	r31, r1
    67b4:	ec 0d       	add	r30, r12
    67b6:	fd 1d       	adc	r31, r13
    67b8:	91 81       	ldd	r25, Z+1	; 0x01
    67ba:	89 13       	cpse	r24, r25
    67bc:	06 c0       	rjmp	.+12     	; 0x67ca <lin_update_rx_evnt_frame+0xc4>
            {
                /* Update unconditional frame */
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
    67be:	41 e0       	ldi	r20, 0x01	; 1
    67c0:	68 2f       	mov	r22, r24
    67c2:	81 2f       	mov	r24, r17
    67c4:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <lin_process_uncd_frame>
                break;
    67c8:	05 c0       	rjmp	.+10     	; 0x67d4 <lin_update_rx_evnt_frame+0xce>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    67ca:	2f 5f       	subi	r18, 0xFF	; 255
    67cc:	f7 01       	movw	r30, r14
    67ce:	90 81       	ld	r25, Z
    67d0:	29 17       	cp	r18, r25
    67d2:	b8 f2       	brcs	.-82     	; 0x6782 <lin_update_rx_evnt_frame+0x7c>
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
                break;
            }
        }
    }
}
    67d4:	df 91       	pop	r29
    67d6:	cf 91       	pop	r28
    67d8:	1f 91       	pop	r17
    67da:	0f 91       	pop	r16
    67dc:	ff 90       	pop	r15
    67de:	ef 90       	pop	r14
    67e0:	df 90       	pop	r13
    67e2:	cf 90       	pop	r12
    67e4:	08 95       	ret

000067e6 <lin_make_res_evnt_frame>:
 *
 * Implements    : lin_make_res_evnt_frame_Activity
 *END**************************************************************************/
void lin_make_res_evnt_frame(l_ifc_handle iii,
                             l_u8 pid)
{
    67e6:	0f 93       	push	r16
    67e8:	1f 93       	push	r17
    67ea:	cf 93       	push	r28
    67ec:	df 93       	push	r29
    67ee:	c8 2f       	mov	r28, r24
    67f0:	d6 2f       	mov	r29, r22
    /* Create response */
    lin_process_uncd_frame(iii, pid, MAKE_UNCONDITIONAL_FRAME);
    67f2:	40 e0       	ldi	r20, 0x00	; 0
    67f4:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <lin_process_uncd_frame>
    /* Set associate PID */
    g_lin_protocol_state_array[iii].response_buffer_ptr[0] = lin_process_parity(pid, MAKE_PARITY);
    67f8:	86 e1       	ldi	r24, 0x16	; 22
    67fa:	c8 9f       	mul	r28, r24
    67fc:	f0 01       	movw	r30, r0
    67fe:	11 24       	eor	r1, r1
    6800:	e8 53       	subi	r30, 0x38	; 56
    6802:	f8 49       	sbci	r31, 0x98	; 152
    6804:	02 81       	ldd	r16, Z+2	; 0x02
    6806:	13 81       	ldd	r17, Z+3	; 0x03
    6808:	60 e0       	ldi	r22, 0x00	; 0
    680a:	8d 2f       	mov	r24, r29
    680c:	0e 94 64 42 	call	0x84c8	; 0x84c8 <lin_process_parity>
    6810:	f8 01       	movw	r30, r16
    6812:	80 83       	st	Z, r24
}
    6814:	df 91       	pop	r29
    6816:	cf 91       	pop	r28
    6818:	1f 91       	pop	r17
    681a:	0f 91       	pop	r16
    681c:	08 95       	ret

0000681e <ld_make_slave_response_pdu>:
        /* Get current configuration */
        service_flag = node_attr_ptr->service_flags_ptr;

        if (flag_order < node_attr_ptr->number_support_sid)
        {
            service_flag[flag_order] = 0U;
    681e:	af 92       	push	r10
    6820:	bf 92       	push	r11
    6822:	cf 92       	push	r12
    6824:	df 92       	push	r13
    6826:	ef 92       	push	r14
    6828:	ff 92       	push	r15
    682a:	0f 93       	push	r16
    682c:	1f 93       	push	r17
    682e:	cf 93       	push	r28
    6830:	df 93       	push	r29
    6832:	cd b7       	in	r28, 0x3d	; 61
    6834:	de b7       	in	r29, 0x3e	; 62
    6836:	2d 97       	sbiw	r28, 0x0d	; 13
    6838:	cd bf       	out	0x3d, r28	; 61
    683a:	de bf       	out	0x3e, r29	; 62
    683c:	08 2f       	mov	r16, r24
    683e:	10 e0       	ldi	r17, 0x00	; 0
    6840:	9c e1       	ldi	r25, 0x1C	; 28
    6842:	90 9f       	mul	r25, r16
    6844:	f0 01       	movw	r30, r0
    6846:	91 9f       	mul	r25, r17
    6848:	f0 0d       	add	r31, r0
    684a:	11 24       	eor	r1, r1
    684c:	e8 5b       	subi	r30, 0xB8	; 184
    684e:	fc 49       	sbci	r31, 0x9C	; 156
    6850:	e2 88       	ldd	r14, Z+18	; 0x12
    6852:	f1 2c       	mov	r15, r1
    6854:	94 e3       	ldi	r25, 0x34	; 52
    6856:	90 9f       	mul	r25, r16
    6858:	d0 01       	movw	r26, r0
    685a:	91 9f       	mul	r25, r17
    685c:	b0 0d       	add	r27, r0
    685e:	11 24       	eor	r1, r1
    6860:	ac 56       	subi	r26, 0x6C	; 108
    6862:	b8 49       	sbci	r27, 0x98	; 152
    6864:	54 96       	adiw	r26, 0x14	; 20
    6866:	cd 90       	ld	r12, X+
    6868:	dc 90       	ld	r13, X
    686a:	55 97       	sbiw	r26, 0x15	; 21
    686c:	1b 96       	adiw	r26, 0x0b	; 11
    686e:	ed 91       	ld	r30, X+
    6870:	fc 91       	ld	r31, X
    6872:	1c 97       	sbiw	r26, 0x0c	; 12
    6874:	ee 0f       	add	r30, r30
    6876:	ff 1f       	adc	r31, r31
    6878:	ee 0f       	add	r30, r30
    687a:	ff 1f       	adc	r31, r31
    687c:	ee 0f       	add	r30, r30
    687e:	ff 1f       	adc	r31, r31
    6880:	ec 0d       	add	r30, r12
    6882:	fd 1d       	adc	r31, r13
    6884:	90 81       	ld	r25, Z
    6886:	9e 37       	cpi	r25, 0x7E	; 126
    6888:	09 f4       	brne	.+2      	; 0x688c <ld_make_slave_response_pdu+0x6e>
    688a:	d8 c0       	rjmp	.+432    	; 0x6a3c <ld_make_slave_response_pdu+0x21e>
    688c:	d8 2e       	mov	r13, r24
    688e:	84 e2       	ldi	r24, 0x24	; 36
    6890:	8e 9d       	mul	r24, r14
    6892:	d0 01       	movw	r26, r0
    6894:	8f 9d       	mul	r24, r15
    6896:	b0 0d       	add	r27, r0
    6898:	11 24       	eor	r1, r1
    689a:	ac 59       	subi	r26, 0x9C	; 156
    689c:	bc 49       	sbci	r27, 0x9C	; 156
    689e:	ad 90       	ld	r10, X+
    68a0:	bc 90       	ld	r11, X
    68a2:	d5 01       	movw	r26, r10
    68a4:	8c 91       	ld	r24, X
    68a6:	89 83       	std	Y+1, r24	; 0x01
    68a8:	83 e0       	ldi	r24, 0x03	; 3
    68aa:	8a 83       	std	Y+2, r24	; 0x02
    68ac:	8f e7       	ldi	r24, 0x7F	; 127
    68ae:	8b 83       	std	Y+3, r24	; 0x03
    68b0:	6c 83       	std	Y+4, r22	; 0x04
    68b2:	2d 83       	std	Y+5, r18	; 0x05
    68b4:	9f ef       	ldi	r25, 0xFF	; 255
    68b6:	9e 83       	std	Y+6, r25	; 0x06
    68b8:	9f 83       	std	Y+7, r25	; 0x07
    68ba:	98 87       	std	Y+8, r25	; 0x08
    68bc:	62 3b       	cpi	r22, 0xB2	; 178
    68be:	91 f0       	breq	.+36     	; 0x68e4 <ld_make_slave_response_pdu+0xc6>
    68c0:	38 f4       	brcc	.+14     	; 0x68d0 <ld_make_slave_response_pdu+0xb2>
    68c2:	60 3b       	cpi	r22, 0xB0	; 176
    68c4:	09 f4       	brne	.+2      	; 0x68c8 <ld_make_slave_response_pdu+0xaa>
    68c6:	79 c0       	rjmp	.+242    	; 0x69ba <ld_make_slave_response_pdu+0x19c>
    68c8:	61 3b       	cpi	r22, 0xB1	; 177
    68ca:	09 f4       	brne	.+2      	; 0x68ce <ld_make_slave_response_pdu+0xb0>
    68cc:	6b c0       	rjmp	.+214    	; 0x69a4 <ld_make_slave_response_pdu+0x186>
    68ce:	a5 c0       	rjmp	.+330    	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    68d0:	66 3b       	cpi	r22, 0xB6	; 182
    68d2:	09 f4       	brne	.+2      	; 0x68d6 <ld_make_slave_response_pdu+0xb8>
    68d4:	91 c0       	rjmp	.+290    	; 0x69f8 <ld_make_slave_response_pdu+0x1da>
    68d6:	67 3b       	cpi	r22, 0xB7	; 183
    68d8:	09 f4       	brne	.+2      	; 0x68dc <ld_make_slave_response_pdu+0xbe>
    68da:	96 c0       	rjmp	.+300    	; 0x6a08 <ld_make_slave_response_pdu+0x1ea>
    68dc:	63 3b       	cpi	r22, 0xB3	; 179
    68de:	09 f0       	breq	.+2      	; 0x68e2 <ld_make_slave_response_pdu+0xc4>
    68e0:	9c c0       	rjmp	.+312    	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    68e2:	82 c0       	rjmp	.+260    	; 0x69e8 <ld_make_slave_response_pdu+0x1ca>
    68e4:	41 30       	cpi	r20, 0x01	; 1
    68e6:	09 f0       	breq	.+2      	; 0x68ea <ld_make_slave_response_pdu+0xcc>
    68e8:	98 c0       	rjmp	.+304    	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    68ea:	86 e0       	ldi	r24, 0x06	; 6
    68ec:	8a 83       	std	Y+2, r24	; 0x02
    68ee:	60 5c       	subi	r22, 0xC0	; 192
    68f0:	6b 83       	std	Y+3, r22	; 0x03
    68f2:	21 11       	cpse	r18, r1
    68f4:	13 c0       	rjmp	.+38     	; 0x691c <ld_make_slave_response_pdu+0xfe>
    68f6:	84 e2       	ldi	r24, 0x24	; 36
    68f8:	8e 9d       	mul	r24, r14
    68fa:	f0 01       	movw	r30, r0
    68fc:	8f 9d       	mul	r24, r15
    68fe:	f0 0d       	add	r31, r0
    6900:	11 24       	eor	r1, r1
    6902:	ec 59       	subi	r30, 0x9C	; 156
    6904:	fc 49       	sbci	r31, 0x9C	; 156
    6906:	93 81       	ldd	r25, Z+3	; 0x03
    6908:	84 81       	ldd	r24, Z+4	; 0x04
    690a:	9c 83       	std	Y+4, r25	; 0x04
    690c:	8d 83       	std	Y+5, r24	; 0x05
    690e:	95 81       	ldd	r25, Z+5	; 0x05
    6910:	86 81       	ldd	r24, Z+6	; 0x06
    6912:	9e 83       	std	Y+6, r25	; 0x06
    6914:	8f 83       	std	Y+7, r24	; 0x07
    6916:	87 81       	ldd	r24, Z+7	; 0x07
    6918:	88 87       	std	Y+8, r24	; 0x08
    691a:	7f c0       	rjmp	.+254    	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    691c:	21 30       	cpi	r18, 0x01	; 1
    691e:	99 f4       	brne	.+38     	; 0x6946 <ld_make_slave_response_pdu+0x128>
    6920:	84 e2       	ldi	r24, 0x24	; 36
    6922:	8e 9d       	mul	r24, r14
    6924:	f0 01       	movw	r30, r0
    6926:	8f 9d       	mul	r24, r15
    6928:	f0 0d       	add	r31, r0
    692a:	11 24       	eor	r1, r1
    692c:	ec 59       	subi	r30, 0x9C	; 156
    692e:	fc 49       	sbci	r31, 0x9C	; 156
    6930:	80 85       	ldd	r24, Z+8	; 0x08
    6932:	8c 83       	std	Y+4, r24	; 0x04
    6934:	81 85       	ldd	r24, Z+9	; 0x09
    6936:	8d 83       	std	Y+5, r24	; 0x05
    6938:	82 85       	ldd	r24, Z+10	; 0x0a
    693a:	8e 83       	std	Y+6, r24	; 0x06
    693c:	83 85       	ldd	r24, Z+11	; 0x0b
    693e:	8f 83       	std	Y+7, r24	; 0x07
    6940:	85 e0       	ldi	r24, 0x05	; 5
    6942:	8a 83       	std	Y+2, r24	; 0x02
    6944:	6a c0       	rjmp	.+212    	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    6946:	85 e0       	ldi	r24, 0x05	; 5
    6948:	eb ef       	ldi	r30, 0xFB	; 251
    694a:	f2 e6       	ldi	r31, 0x62	; 98
    694c:	de 01       	movw	r26, r28
    694e:	19 96       	adiw	r26, 0x09	; 9
    6950:	01 90       	ld	r0, Z+
    6952:	0d 92       	st	X+, r0
    6954:	8a 95       	dec	r24
    6956:	e1 f7       	brne	.-8      	; 0x6950 <ld_make_slave_response_pdu+0x132>
    6958:	ae 01       	movw	r20, r28
    695a:	47 5f       	subi	r20, 0xF7	; 247
    695c:	5f 4f       	sbci	r21, 0xFF	; 255
    695e:	62 2f       	mov	r22, r18
    6960:	80 2f       	mov	r24, r16
    6962:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <ld_read_by_id_callout>
    6966:	89 85       	ldd	r24, Y+9	; 0x09
    6968:	8c 83       	std	Y+4, r24	; 0x04
    696a:	8a 85       	ldd	r24, Y+10	; 0x0a
    696c:	8d 83       	std	Y+5, r24	; 0x05
    696e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6970:	8e 83       	std	Y+6, r24	; 0x06
    6972:	8c 85       	ldd	r24, Y+12	; 0x0c
    6974:	8f 83       	std	Y+7, r24	; 0x07
    6976:	8d 85       	ldd	r24, Y+13	; 0x0d
    6978:	88 87       	std	Y+8, r24	; 0x08
    697a:	85 e0       	ldi	r24, 0x05	; 5
    697c:	10 c0       	rjmp	.+32     	; 0x699e <ld_make_slave_response_pdu+0x180>
    697e:	e8 2f       	mov	r30, r24
    6980:	f0 e0       	ldi	r31, 0x00	; 0
    6982:	31 97       	sbiw	r30, 0x01	; 1
    6984:	29 e0       	ldi	r18, 0x09	; 9
    6986:	30 e0       	ldi	r19, 0x00	; 0
    6988:	2c 0f       	add	r18, r28
    698a:	3d 1f       	adc	r19, r29
    698c:	e2 0f       	add	r30, r18
    698e:	f3 1f       	adc	r31, r19
    6990:	90 81       	ld	r25, Z
    6992:	9f 3f       	cpi	r25, 0xFF	; 255
    6994:	19 f0       	breq	.+6      	; 0x699c <ld_make_slave_response_pdu+0x17e>
    6996:	8f 5f       	subi	r24, 0xFF	; 255
    6998:	8a 83       	std	Y+2, r24	; 0x02
    699a:	3f c0       	rjmp	.+126    	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    699c:	81 50       	subi	r24, 0x01	; 1
    699e:	81 11       	cpse	r24, r1
    69a0:	ee cf       	rjmp	.-36     	; 0x697e <ld_make_slave_response_pdu+0x160>
    69a2:	3b c0       	rjmp	.+118    	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    69a4:	d5 01       	movw	r26, r10
    69a6:	8c 91       	ld	r24, X
    69a8:	89 83       	std	Y+1, r24	; 0x01
    69aa:	81 e0       	ldi	r24, 0x01	; 1
    69ac:	8a 83       	std	Y+2, r24	; 0x02
    69ae:	81 ef       	ldi	r24, 0xF1	; 241
    69b0:	8b 83       	std	Y+3, r24	; 0x03
    69b2:	8f ef       	ldi	r24, 0xFF	; 255
    69b4:	8c 83       	std	Y+4, r24	; 0x04
    69b6:	8d 83       	std	Y+5, r24	; 0x05
    69b8:	30 c0       	rjmp	.+96     	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    69ba:	24 e2       	ldi	r18, 0x24	; 36
    69bc:	2e 9d       	mul	r18, r14
    69be:	c0 01       	movw	r24, r0
    69c0:	2f 9d       	mul	r18, r15
    69c2:	90 0d       	add	r25, r0
    69c4:	11 24       	eor	r1, r1
    69c6:	8c 59       	subi	r24, 0x9C	; 156
    69c8:	9c 49       	sbci	r25, 0x9C	; 156
    69ca:	dc 01       	movw	r26, r24
    69cc:	12 96       	adiw	r26, 0x02	; 2
    69ce:	8c 91       	ld	r24, X
    69d0:	89 83       	std	Y+1, r24	; 0x01
    69d2:	87 81       	ldd	r24, Z+7	; 0x07
    69d4:	f5 01       	movw	r30, r10
    69d6:	80 83       	st	Z, r24
    69d8:	81 e0       	ldi	r24, 0x01	; 1
    69da:	8a 83       	std	Y+2, r24	; 0x02
    69dc:	80 ef       	ldi	r24, 0xF0	; 240
    69de:	8b 83       	std	Y+3, r24	; 0x03
    69e0:	8f ef       	ldi	r24, 0xFF	; 255
    69e2:	8c 83       	std	Y+4, r24	; 0x04
    69e4:	8d 83       	std	Y+5, r24	; 0x05
    69e6:	19 c0       	rjmp	.+50     	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    69e8:	81 e0       	ldi	r24, 0x01	; 1
    69ea:	8a 83       	std	Y+2, r24	; 0x02
    69ec:	83 ef       	ldi	r24, 0xF3	; 243
    69ee:	8b 83       	std	Y+3, r24	; 0x03
    69f0:	8f ef       	ldi	r24, 0xFF	; 255
    69f2:	8c 83       	std	Y+4, r24	; 0x04
    69f4:	8d 83       	std	Y+5, r24	; 0x05
    69f6:	11 c0       	rjmp	.+34     	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    69f8:	81 e0       	ldi	r24, 0x01	; 1
    69fa:	8a 83       	std	Y+2, r24	; 0x02
    69fc:	60 5c       	subi	r22, 0xC0	; 192
    69fe:	6b 83       	std	Y+3, r22	; 0x03
    6a00:	8f ef       	ldi	r24, 0xFF	; 255
    6a02:	8c 83       	std	Y+4, r24	; 0x04
    6a04:	8d 83       	std	Y+5, r24	; 0x05
    6a06:	09 c0       	rjmp	.+18     	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    6a08:	41 30       	cpi	r20, 0x01	; 1
    6a0a:	39 f4       	brne	.+14     	; 0x6a1a <ld_make_slave_response_pdu+0x1fc>
    6a0c:	81 e0       	ldi	r24, 0x01	; 1
    6a0e:	8a 83       	std	Y+2, r24	; 0x02
    6a10:	60 5c       	subi	r22, 0xC0	; 192
    6a12:	6b 83       	std	Y+3, r22	; 0x03
    6a14:	8f ef       	ldi	r24, 0xFF	; 255
    6a16:	8c 83       	std	Y+4, r24	; 0x04
    6a18:	8d 83       	std	Y+5, r24	; 0x05
    6a1a:	be 01       	movw	r22, r28
    6a1c:	6f 5f       	subi	r22, 0xFF	; 255
    6a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a20:	8d 2d       	mov	r24, r13
    6a22:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    6a26:	84 e3       	ldi	r24, 0x34	; 52
    6a28:	80 9f       	mul	r24, r16
    6a2a:	f0 01       	movw	r30, r0
    6a2c:	81 9f       	mul	r24, r17
    6a2e:	f0 0d       	add	r31, r0
    6a30:	11 24       	eor	r1, r1
    6a32:	ec 56       	subi	r30, 0x6C	; 108
    6a34:	f8 49       	sbci	r31, 0x98	; 152
    6a36:	82 e0       	ldi	r24, 0x02	; 2
    6a38:	86 a3       	std	Z+38, r24	; 0x26
    6a3a:	0a c0       	rjmp	.+20     	; 0x6a50 <ld_make_slave_response_pdu+0x232>
    6a3c:	84 e3       	ldi	r24, 0x34	; 52
    6a3e:	80 9f       	mul	r24, r16
    6a40:	f0 01       	movw	r30, r0
    6a42:	81 9f       	mul	r24, r17
    6a44:	f0 0d       	add	r31, r0
    6a46:	11 24       	eor	r1, r1
    6a48:	ec 56       	subi	r30, 0x6C	; 108
    6a4a:	f8 49       	sbci	r31, 0x98	; 152
    6a4c:	81 e0       	ldi	r24, 0x01	; 1
    6a4e:	86 a3       	std	Z+38, r24	; 0x26
    6a50:	2d 96       	adiw	r28, 0x0d	; 13
    6a52:	cd bf       	out	0x3d, r28	; 61
    6a54:	de bf       	out	0x3e, r29	; 62
    6a56:	df 91       	pop	r29
    6a58:	cf 91       	pop	r28
    6a5a:	1f 91       	pop	r17
    6a5c:	0f 91       	pop	r16
    6a5e:	ff 90       	pop	r15
    6a60:	ef 90       	pop	r14
    6a62:	df 90       	pop	r13
    6a64:	cf 90       	pop	r12
    6a66:	bf 90       	pop	r11
    6a68:	af 90       	pop	r10
    6a6a:	08 95       	ret

00006a6c <lin_condittional_change_nad>:
    6a6c:	cf 92       	push	r12
    6a6e:	df 92       	push	r13
    6a70:	ef 92       	push	r14
    6a72:	ff 92       	push	r15
    6a74:	0f 93       	push	r16
    6a76:	1f 93       	push	r17
    6a78:	cf 93       	push	r28
    6a7a:	df 93       	push	r29
    6a7c:	cd b7       	in	r28, 0x3d	; 61
    6a7e:	de b7       	in	r29, 0x3e	; 62
    6a80:	25 97       	sbiw	r28, 0x05	; 5
    6a82:	cd bf       	out	0x3d, r28	; 61
    6a84:	de bf       	out	0x3e, r29	; 62
    6a86:	e8 2e       	mov	r14, r24
    6a88:	f1 2c       	mov	r15, r1
    6a8a:	9c e1       	ldi	r25, 0x1C	; 28
    6a8c:	9e 9d       	mul	r25, r14
    6a8e:	f0 01       	movw	r30, r0
    6a90:	9f 9d       	mul	r25, r15
    6a92:	f0 0d       	add	r31, r0
    6a94:	11 24       	eor	r1, r1
    6a96:	e8 5b       	subi	r30, 0xB8	; 184
    6a98:	fc 49       	sbci	r31, 0x9C	; 156
    6a9a:	02 89       	ldd	r16, Z+18	; 0x12
    6a9c:	10 e0       	ldi	r17, 0x00	; 0
    6a9e:	94 e2       	ldi	r25, 0x24	; 36
    6aa0:	90 9f       	mul	r25, r16
    6aa2:	90 01       	movw	r18, r0
    6aa4:	91 9f       	mul	r25, r17
    6aa6:	30 0d       	add	r19, r0
    6aa8:	11 24       	eor	r1, r1
    6aaa:	f9 01       	movw	r30, r18
    6aac:	e9 59       	subi	r30, 0x99	; 153
    6aae:	fc 49       	sbci	r31, 0x9C	; 156
    6ab0:	95 e0       	ldi	r25, 0x05	; 5
    6ab2:	de 01       	movw	r26, r28
    6ab4:	11 96       	adiw	r26, 0x01	; 1
    6ab6:	01 90       	ld	r0, Z+
    6ab8:	0d 92       	st	X+, r0
    6aba:	9a 95       	dec	r25
    6abc:	e1 f7       	brne	.-8      	; 0x6ab6 <lin_condittional_change_nad+0x4a>
    6abe:	d9 01       	movw	r26, r18
    6ac0:	ac 59       	subi	r26, 0x9C	; 156
    6ac2:	bc 49       	sbci	r27, 0x9C	; 156
    6ac4:	fd 01       	movw	r30, r26
    6ac6:	38 96       	adiw	r30, 0x08	; 8
    6ac8:	18 96       	adiw	r26, 0x08	; 8
    6aca:	cc 90       	ld	r12, X
    6acc:	d1 80       	ldd	r13, Z+1	; 0x01
    6ace:	52 81       	ldd	r21, Z+2	; 0x02
    6ad0:	43 81       	ldd	r20, Z+3	; 0x03
    6ad2:	94 e3       	ldi	r25, 0x34	; 52
    6ad4:	9e 9d       	mul	r25, r14
    6ad6:	d0 01       	movw	r26, r0
    6ad8:	9f 9d       	mul	r25, r15
    6ada:	b0 0d       	add	r27, r0
    6adc:	11 24       	eor	r1, r1
    6ade:	ac 56       	subi	r26, 0x6C	; 108
    6ae0:	b8 49       	sbci	r27, 0x98	; 152
    6ae2:	54 96       	adiw	r26, 0x14	; 20
    6ae4:	2d 91       	ld	r18, X+
    6ae6:	3c 91       	ld	r19, X
    6ae8:	55 97       	sbiw	r26, 0x15	; 21
    6aea:	1b 96       	adiw	r26, 0x0b	; 11
    6aec:	ed 91       	ld	r30, X+
    6aee:	fc 91       	ld	r31, X
    6af0:	1c 97       	sbiw	r26, 0x0c	; 12
    6af2:	ee 0f       	add	r30, r30
    6af4:	ff 1f       	adc	r31, r31
    6af6:	ee 0f       	add	r30, r30
    6af8:	ff 1f       	adc	r31, r31
    6afa:	ee 0f       	add	r30, r30
    6afc:	ff 1f       	adc	r31, r31
    6afe:	e2 0f       	add	r30, r18
    6b00:	f3 1f       	adc	r31, r19
    6b02:	33 81       	ldd	r19, Z+3	; 0x03
    6b04:	94 81       	ldd	r25, Z+4	; 0x04
    6b06:	75 81       	ldd	r23, Z+5	; 0x05
    6b08:	66 81       	ldd	r22, Z+6	; 0x06
    6b0a:	33 23       	and	r19, r19
    6b0c:	19 f0       	breq	.+6      	; 0x6b14 <lin_condittional_change_nad+0xa8>
    6b0e:	31 30       	cpi	r19, 0x01	; 1
    6b10:	c1 f1       	breq	.+112    	; 0x6b82 <lin_condittional_change_nad+0x116>
    6b12:	54 c0       	rjmp	.+168    	; 0x6bbc <lin_condittional_change_nad+0x150>
    6b14:	2f ef       	ldi	r18, 0xFF	; 255
    6b16:	29 0f       	add	r18, r25
    6b18:	25 30       	cpi	r18, 0x05	; 5
    6b1a:	08 f0       	brcs	.+2      	; 0x6b1e <lin_condittional_change_nad+0xb2>
    6b1c:	51 c0       	rjmp	.+162    	; 0x6bc0 <lin_condittional_change_nad+0x154>
    6b1e:	22 30       	cpi	r18, 0x02	; 2
    6b20:	90 f4       	brcc	.+36     	; 0x6b46 <lin_condittional_change_nad+0xda>
    6b22:	49 81       	ldd	r20, Y+1	; 0x01
    6b24:	5a 81       	ldd	r21, Y+2	; 0x02
    6b26:	29 2f       	mov	r18, r25
    6b28:	30 e0       	ldi	r19, 0x00	; 0
    6b2a:	21 50       	subi	r18, 0x01	; 1
    6b2c:	30 4e       	sbci	r19, 0xE0	; 224
    6b2e:	22 0f       	add	r18, r18
    6b30:	33 1f       	adc	r19, r19
    6b32:	22 0f       	add	r18, r18
    6b34:	33 1f       	adc	r19, r19
    6b36:	22 0f       	add	r18, r18
    6b38:	33 1f       	adc	r19, r19
    6b3a:	02 c0       	rjmp	.+4      	; 0x6b40 <lin_condittional_change_nad+0xd4>
    6b3c:	56 95       	lsr	r21
    6b3e:	47 95       	ror	r20
    6b40:	2a 95       	dec	r18
    6b42:	e2 f7       	brpl	.-8      	; 0x6b3c <lin_condittional_change_nad+0xd0>
    6b44:	19 c0       	rjmp	.+50     	; 0x6b78 <lin_condittional_change_nad+0x10c>
    6b46:	2d ef       	ldi	r18, 0xFD	; 253
    6b48:	29 0f       	add	r18, r25
    6b4a:	22 30       	cpi	r18, 0x02	; 2
    6b4c:	a0 f4       	brcc	.+40     	; 0x6b76 <lin_condittional_change_nad+0x10a>
    6b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    6b50:	3c 81       	ldd	r19, Y+4	; 0x04
    6b52:	49 2f       	mov	r20, r25
    6b54:	50 e0       	ldi	r21, 0x00	; 0
    6b56:	43 50       	subi	r20, 0x03	; 3
    6b58:	50 4e       	sbci	r21, 0xE0	; 224
    6b5a:	44 0f       	add	r20, r20
    6b5c:	55 1f       	adc	r21, r21
    6b5e:	44 0f       	add	r20, r20
    6b60:	55 1f       	adc	r21, r21
    6b62:	44 0f       	add	r20, r20
    6b64:	55 1f       	adc	r21, r21
    6b66:	f9 01       	movw	r30, r18
    6b68:	02 c0       	rjmp	.+4      	; 0x6b6e <lin_condittional_change_nad+0x102>
    6b6a:	f6 95       	lsr	r31
    6b6c:	e7 95       	ror	r30
    6b6e:	4a 95       	dec	r20
    6b70:	e2 f7       	brpl	.-8      	; 0x6b6a <lin_condittional_change_nad+0xfe>
    6b72:	af 01       	movw	r20, r30
    6b74:	01 c0       	rjmp	.+2      	; 0x6b78 <lin_condittional_change_nad+0x10c>
    6b76:	4d 81       	ldd	r20, Y+5	; 0x05
    6b78:	46 27       	eor	r20, r22
    6b7a:	47 23       	and	r20, r23
    6b7c:	19 f1       	breq	.+70     	; 0x6bc4 <lin_condittional_change_nad+0x158>
    6b7e:	90 e0       	ldi	r25, 0x00	; 0
    6b80:	26 c0       	rjmp	.+76     	; 0x6bce <lin_condittional_change_nad+0x162>
    6b82:	2f ef       	ldi	r18, 0xFF	; 255
    6b84:	29 0f       	add	r18, r25
    6b86:	24 30       	cpi	r18, 0x04	; 4
    6b88:	f8 f4       	brcc	.+62     	; 0x6bc8 <lin_condittional_change_nad+0x15c>
    6b8a:	92 30       	cpi	r25, 0x02	; 2
    6b8c:	59 f0       	breq	.+22     	; 0x6ba4 <lin_condittional_change_nad+0x138>
    6b8e:	18 f4       	brcc	.+6      	; 0x6b96 <lin_condittional_change_nad+0x12a>
    6b90:	91 30       	cpi	r25, 0x01	; 1
    6b92:	31 f0       	breq	.+12     	; 0x6ba0 <lin_condittional_change_nad+0x134>
    6b94:	0c c0       	rjmp	.+24     	; 0x6bae <lin_condittional_change_nad+0x142>
    6b96:	93 30       	cpi	r25, 0x03	; 3
    6b98:	39 f0       	breq	.+14     	; 0x6ba8 <lin_condittional_change_nad+0x13c>
    6b9a:	94 30       	cpi	r25, 0x04	; 4
    6b9c:	39 f0       	breq	.+14     	; 0x6bac <lin_condittional_change_nad+0x140>
    6b9e:	07 c0       	rjmp	.+14     	; 0x6bae <lin_condittional_change_nad+0x142>
    6ba0:	9c 2d       	mov	r25, r12
    6ba2:	05 c0       	rjmp	.+10     	; 0x6bae <lin_condittional_change_nad+0x142>
    6ba4:	9d 2d       	mov	r25, r13
    6ba6:	03 c0       	rjmp	.+6      	; 0x6bae <lin_condittional_change_nad+0x142>
    6ba8:	95 2f       	mov	r25, r21
    6baa:	01 c0       	rjmp	.+2      	; 0x6bae <lin_condittional_change_nad+0x142>
    6bac:	94 2f       	mov	r25, r20
    6bae:	29 2f       	mov	r18, r25
    6bb0:	26 27       	eor	r18, r22
    6bb2:	47 2f       	mov	r20, r23
    6bb4:	42 23       	and	r20, r18
    6bb6:	51 f0       	breq	.+20     	; 0x6bcc <lin_condittional_change_nad+0x160>
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	09 c0       	rjmp	.+18     	; 0x6bce <lin_condittional_change_nad+0x162>
    6bbc:	90 e0       	ldi	r25, 0x00	; 0
    6bbe:	07 c0       	rjmp	.+14     	; 0x6bce <lin_condittional_change_nad+0x162>
    6bc0:	90 e0       	ldi	r25, 0x00	; 0
    6bc2:	05 c0       	rjmp	.+10     	; 0x6bce <lin_condittional_change_nad+0x162>
    6bc4:	91 e0       	ldi	r25, 0x01	; 1
    6bc6:	03 c0       	rjmp	.+6      	; 0x6bce <lin_condittional_change_nad+0x162>
    6bc8:	90 e0       	ldi	r25, 0x00	; 0
    6bca:	01 c0       	rjmp	.+2      	; 0x6bce <lin_condittional_change_nad+0x162>
    6bcc:	91 e0       	ldi	r25, 0x01	; 1
    6bce:	99 23       	and	r25, r25
    6bd0:	51 f1       	breq	.+84     	; 0x6c26 <lin_condittional_change_nad+0x1ba>
    6bd2:	20 e0       	ldi	r18, 0x00	; 0
    6bd4:	41 e0       	ldi	r20, 0x01	; 1
    6bd6:	63 eb       	ldi	r22, 0xB3	; 179
    6bd8:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    6bdc:	84 e2       	ldi	r24, 0x24	; 36
    6bde:	80 9f       	mul	r24, r16
    6be0:	f0 01       	movw	r30, r0
    6be2:	81 9f       	mul	r24, r17
    6be4:	f0 0d       	add	r31, r0
    6be6:	11 24       	eor	r1, r1
    6be8:	ec 59       	subi	r30, 0x9C	; 156
    6bea:	fc 49       	sbci	r31, 0x9C	; 156
    6bec:	80 81       	ld	r24, Z
    6bee:	91 81       	ldd	r25, Z+1	; 0x01
    6bf0:	24 e3       	ldi	r18, 0x34	; 52
    6bf2:	2e 9d       	mul	r18, r14
    6bf4:	d0 01       	movw	r26, r0
    6bf6:	2f 9d       	mul	r18, r15
    6bf8:	b0 0d       	add	r27, r0
    6bfa:	11 24       	eor	r1, r1
    6bfc:	ac 56       	subi	r26, 0x6C	; 108
    6bfe:	b8 49       	sbci	r27, 0x98	; 152
    6c00:	54 96       	adiw	r26, 0x14	; 20
    6c02:	2d 91       	ld	r18, X+
    6c04:	3c 91       	ld	r19, X
    6c06:	55 97       	sbiw	r26, 0x15	; 21
    6c08:	1b 96       	adiw	r26, 0x0b	; 11
    6c0a:	ed 91       	ld	r30, X+
    6c0c:	fc 91       	ld	r31, X
    6c0e:	1c 97       	sbiw	r26, 0x0c	; 12
    6c10:	ee 0f       	add	r30, r30
    6c12:	ff 1f       	adc	r31, r31
    6c14:	ee 0f       	add	r30, r30
    6c16:	ff 1f       	adc	r31, r31
    6c18:	ee 0f       	add	r30, r30
    6c1a:	ff 1f       	adc	r31, r31
    6c1c:	e2 0f       	add	r30, r18
    6c1e:	f3 1f       	adc	r31, r19
    6c20:	27 81       	ldd	r18, Z+7	; 0x07
    6c22:	fc 01       	movw	r30, r24
    6c24:	20 83       	st	Z, r18
    6c26:	25 96       	adiw	r28, 0x05	; 5
    6c28:	cd bf       	out	0x3d, r28	; 61
    6c2a:	de bf       	out	0x3e, r29	; 62
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28
    6c30:	1f 91       	pop	r17
    6c32:	0f 91       	pop	r16
    6c34:	ff 90       	pop	r15
    6c36:	ef 90       	pop	r14
    6c38:	df 90       	pop	r13
    6c3a:	cf 90       	pop	r12
    6c3c:	08 95       	ret

00006c3e <lin_assign_nad>:
    6c3e:	cf 93       	push	r28
    6c40:	df 93       	push	r29
    6c42:	cd b7       	in	r28, 0x3d	; 61
    6c44:	de b7       	in	r29, 0x3e	; 62
    6c46:	2d 97       	sbiw	r28, 0x0d	; 13
    6c48:	cd bf       	out	0x3d, r28	; 61
    6c4a:	de bf       	out	0x3e, r29	; 62
    6c4c:	48 2f       	mov	r20, r24
    6c4e:	50 e0       	ldi	r21, 0x00	; 0
    6c50:	9c e1       	ldi	r25, 0x1C	; 28
    6c52:	94 9f       	mul	r25, r20
    6c54:	f0 01       	movw	r30, r0
    6c56:	95 9f       	mul	r25, r21
    6c58:	f0 0d       	add	r31, r0
    6c5a:	11 24       	eor	r1, r1
    6c5c:	e8 5b       	subi	r30, 0xB8	; 184
    6c5e:	fc 49       	sbci	r31, 0x9C	; 156
    6c60:	e2 89       	ldd	r30, Z+18	; 0x12
    6c62:	94 e2       	ldi	r25, 0x24	; 36
    6c64:	e9 9f       	mul	r30, r25
    6c66:	f0 01       	movw	r30, r0
    6c68:	11 24       	eor	r1, r1
    6c6a:	e9 59       	subi	r30, 0x99	; 153
    6c6c:	fc 49       	sbci	r31, 0x9C	; 156
    6c6e:	95 e0       	ldi	r25, 0x05	; 5
    6c70:	de 01       	movw	r26, r28
    6c72:	19 96       	adiw	r26, 0x09	; 9
    6c74:	01 90       	ld	r0, Z+
    6c76:	0d 92       	st	X+, r0
    6c78:	9a 95       	dec	r25
    6c7a:	e1 f7       	brne	.-8      	; 0x6c74 <lin_assign_nad+0x36>
    6c7c:	90 e0       	ldi	r25, 0x00	; 0
    6c7e:	25 c0       	rjmp	.+74     	; 0x6cca <lin_assign_nad+0x8c>
    6c80:	24 e3       	ldi	r18, 0x34	; 52
    6c82:	24 9f       	mul	r18, r20
    6c84:	d0 01       	movw	r26, r0
    6c86:	25 9f       	mul	r18, r21
    6c88:	b0 0d       	add	r27, r0
    6c8a:	11 24       	eor	r1, r1
    6c8c:	ac 56       	subi	r26, 0x6C	; 108
    6c8e:	b8 49       	sbci	r27, 0x98	; 152
    6c90:	54 96       	adiw	r26, 0x14	; 20
    6c92:	2d 91       	ld	r18, X+
    6c94:	3c 91       	ld	r19, X
    6c96:	55 97       	sbiw	r26, 0x15	; 21
    6c98:	1b 96       	adiw	r26, 0x0b	; 11
    6c9a:	ed 91       	ld	r30, X+
    6c9c:	fc 91       	ld	r31, X
    6c9e:	1c 97       	sbiw	r26, 0x0c	; 12
    6ca0:	ee 0f       	add	r30, r30
    6ca2:	ff 1f       	adc	r31, r31
    6ca4:	ee 0f       	add	r30, r30
    6ca6:	ff 1f       	adc	r31, r31
    6ca8:	ee 0f       	add	r30, r30
    6caa:	ff 1f       	adc	r31, r31
    6cac:	e2 0f       	add	r30, r18
    6cae:	f3 1f       	adc	r31, r19
    6cb0:	29 2f       	mov	r18, r25
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	e2 0f       	add	r30, r18
    6cb6:	f3 1f       	adc	r31, r19
    6cb8:	60 81       	ld	r22, Z
    6cba:	e1 e0       	ldi	r30, 0x01	; 1
    6cbc:	f0 e0       	ldi	r31, 0x00	; 0
    6cbe:	ec 0f       	add	r30, r28
    6cc0:	fd 1f       	adc	r31, r29
    6cc2:	e2 0f       	add	r30, r18
    6cc4:	f3 1f       	adc	r31, r19
    6cc6:	60 83       	st	Z, r22
    6cc8:	9f 5f       	subi	r25, 0xFF	; 255
    6cca:	98 30       	cpi	r25, 0x08	; 8
    6ccc:	c8 f2       	brcs	.-78     	; 0x6c80 <lin_assign_nad+0x42>
    6cce:	2d 81       	ldd	r18, Y+5	; 0x05
    6cd0:	30 e0       	ldi	r19, 0x00	; 0
    6cd2:	32 2f       	mov	r19, r18
    6cd4:	22 27       	eor	r18, r18
    6cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    6cd8:	29 2b       	or	r18, r25
    6cda:	6f 81       	ldd	r22, Y+7	; 0x07
    6cdc:	70 e0       	ldi	r23, 0x00	; 0
    6cde:	76 2f       	mov	r23, r22
    6ce0:	66 27       	eor	r22, r22
    6ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    6ce4:	69 2b       	or	r22, r25
    6ce6:	e9 85       	ldd	r30, Y+9	; 0x09
    6ce8:	fa 85       	ldd	r31, Y+10	; 0x0a
    6cea:	2e 17       	cp	r18, r30
    6cec:	3f 07       	cpc	r19, r31
    6cee:	19 f0       	breq	.+6      	; 0x6cf6 <lin_assign_nad+0xb8>
    6cf0:	2f 3f       	cpi	r18, 0xFF	; 255
    6cf2:	3f 47       	sbci	r19, 0x7F	; 127
    6cf4:	41 f4       	brne	.+16     	; 0x6d06 <lin_assign_nad+0xc8>
    6cf6:	2b 85       	ldd	r18, Y+11	; 0x0b
    6cf8:	3c 85       	ldd	r19, Y+12	; 0x0c
    6cfa:	62 17       	cp	r22, r18
    6cfc:	73 07       	cpc	r23, r19
    6cfe:	69 f0       	breq	.+26     	; 0x6d1a <lin_assign_nad+0xdc>
    6d00:	6f 3f       	cpi	r22, 0xFF	; 255
    6d02:	7f 4f       	sbci	r23, 0xFF	; 255
    6d04:	51 f0       	breq	.+20     	; 0x6d1a <lin_assign_nad+0xdc>
    6d06:	84 e3       	ldi	r24, 0x34	; 52
    6d08:	84 9f       	mul	r24, r20
    6d0a:	f0 01       	movw	r30, r0
    6d0c:	85 9f       	mul	r24, r21
    6d0e:	f0 0d       	add	r31, r0
    6d10:	11 24       	eor	r1, r1
    6d12:	ec 56       	subi	r30, 0x6C	; 108
    6d14:	f8 49       	sbci	r31, 0x98	; 152
    6d16:	12 a6       	std	Z+42, r1	; 0x2a
    6d18:	05 c0       	rjmp	.+10     	; 0x6d24 <lin_assign_nad+0xe6>
    6d1a:	20 e0       	ldi	r18, 0x00	; 0
    6d1c:	41 e0       	ldi	r20, 0x01	; 1
    6d1e:	60 eb       	ldi	r22, 0xB0	; 176
    6d20:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    6d24:	2d 96       	adiw	r28, 0x0d	; 13
    6d26:	cd bf       	out	0x3d, r28	; 61
    6d28:	de bf       	out	0x3e, r29	; 62
    6d2a:	df 91       	pop	r29
    6d2c:	cf 91       	pop	r28
    6d2e:	08 95       	ret

00006d30 <lin_diagservice_assign_frame_id_range>:
    6d30:	af 92       	push	r10
    6d32:	bf 92       	push	r11
    6d34:	df 92       	push	r13
    6d36:	ef 92       	push	r14
    6d38:	ff 92       	push	r15
    6d3a:	0f 93       	push	r16
    6d3c:	1f 93       	push	r17
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	cd b7       	in	r28, 0x3d	; 61
    6d44:	de b7       	in	r29, 0x3e	; 62
    6d46:	28 97       	sbiw	r28, 0x08	; 8
    6d48:	cd bf       	out	0x3d, r28	; 61
    6d4a:	de bf       	out	0x3e, r29	; 62
    6d4c:	f8 2e       	mov	r15, r24
    6d4e:	08 2f       	mov	r16, r24
    6d50:	10 e0       	ldi	r17, 0x00	; 0
    6d52:	20 e0       	ldi	r18, 0x00	; 0
    6d54:	25 c0       	rjmp	.+74     	; 0x6da0 <lin_diagservice_assign_frame_id_range+0x70>
    6d56:	84 e3       	ldi	r24, 0x34	; 52
    6d58:	80 9f       	mul	r24, r16
    6d5a:	d0 01       	movw	r26, r0
    6d5c:	81 9f       	mul	r24, r17
    6d5e:	b0 0d       	add	r27, r0
    6d60:	11 24       	eor	r1, r1
    6d62:	ac 56       	subi	r26, 0x6C	; 108
    6d64:	b8 49       	sbci	r27, 0x98	; 152
    6d66:	54 96       	adiw	r26, 0x14	; 20
    6d68:	8d 91       	ld	r24, X+
    6d6a:	9c 91       	ld	r25, X
    6d6c:	55 97       	sbiw	r26, 0x15	; 21
    6d6e:	1b 96       	adiw	r26, 0x0b	; 11
    6d70:	ed 91       	ld	r30, X+
    6d72:	fc 91       	ld	r31, X
    6d74:	1c 97       	sbiw	r26, 0x0c	; 12
    6d76:	ee 0f       	add	r30, r30
    6d78:	ff 1f       	adc	r31, r31
    6d7a:	ee 0f       	add	r30, r30
    6d7c:	ff 1f       	adc	r31, r31
    6d7e:	ee 0f       	add	r30, r30
    6d80:	ff 1f       	adc	r31, r31
    6d82:	e8 0f       	add	r30, r24
    6d84:	f9 1f       	adc	r31, r25
    6d86:	82 2f       	mov	r24, r18
    6d88:	90 e0       	ldi	r25, 0x00	; 0
    6d8a:	e8 0f       	add	r30, r24
    6d8c:	f9 1f       	adc	r31, r25
    6d8e:	30 81       	ld	r19, Z
    6d90:	e1 e0       	ldi	r30, 0x01	; 1
    6d92:	f0 e0       	ldi	r31, 0x00	; 0
    6d94:	ec 0f       	add	r30, r28
    6d96:	fd 1f       	adc	r31, r29
    6d98:	e8 0f       	add	r30, r24
    6d9a:	f9 1f       	adc	r31, r25
    6d9c:	30 83       	st	Z, r19
    6d9e:	2f 5f       	subi	r18, 0xFF	; 255
    6da0:	28 30       	cpi	r18, 0x08	; 8
    6da2:	c8 f2       	brcs	.-78     	; 0x6d56 <lin_diagservice_assign_frame_id_range+0x26>
    6da4:	ec 80       	ldd	r14, Y+4	; 0x04
    6da6:	90 e0       	ldi	r25, 0x00	; 0
    6da8:	81 e0       	ldi	r24, 0x01	; 1
    6daa:	02 c0       	rjmp	.+4      	; 0x6db0 <lin_diagservice_assign_frame_id_range+0x80>
    6dac:	9f 5f       	subi	r25, 0xFF	; 255
    6dae:	84 2f       	mov	r24, r20
    6db0:	2c e1       	ldi	r18, 0x1C	; 28
    6db2:	20 9f       	mul	r18, r16
    6db4:	f0 01       	movw	r30, r0
    6db6:	21 9f       	mul	r18, r17
    6db8:	f0 0d       	add	r31, r0
    6dba:	11 24       	eor	r1, r1
    6dbc:	e8 5b       	subi	r30, 0xB8	; 184
    6dbe:	fc 49       	sbci	r31, 0x9C	; 156
    6dc0:	20 85       	ldd	r18, Z+8	; 0x08
    6dc2:	31 85       	ldd	r19, Z+9	; 0x09
    6dc4:	41 e0       	ldi	r20, 0x01	; 1
    6dc6:	48 0f       	add	r20, r24
    6dc8:	e8 2f       	mov	r30, r24
    6dca:	f0 e0       	ldi	r31, 0x00	; 0
    6dcc:	ee 0f       	add	r30, r30
    6dce:	ff 1f       	adc	r31, r31
    6dd0:	e2 0f       	add	r30, r18
    6dd2:	f3 1f       	adc	r31, r19
    6dd4:	20 81       	ld	r18, Z
    6dd6:	31 81       	ldd	r19, Z+1	; 0x01
    6dd8:	2f 3f       	cpi	r18, 0xFF	; 255
    6dda:	3f 4f       	sbci	r19, 0xFF	; 255
    6ddc:	39 f7       	brne	.-50     	; 0x6dac <lin_diagservice_assign_frame_id_range+0x7c>
    6dde:	6d ef       	ldi	r22, 0xFD	; 253
    6de0:	69 0f       	add	r22, r25
    6de2:	4e 2d       	mov	r20, r14
    6de4:	54 e0       	ldi	r21, 0x04	; 4
    6de6:	17 c0       	rjmp	.+46     	; 0x6e16 <lin_diagservice_assign_frame_id_range+0xe6>
    6de8:	91 e0       	ldi	r25, 0x01	; 1
    6dea:	95 0f       	add	r25, r21
    6dec:	e1 e0       	ldi	r30, 0x01	; 1
    6dee:	f0 e0       	ldi	r31, 0x00	; 0
    6df0:	ec 0f       	add	r30, r28
    6df2:	fd 1f       	adc	r31, r29
    6df4:	e5 0f       	add	r30, r21
    6df6:	f1 1d       	adc	r31, r1
    6df8:	80 81       	ld	r24, Z
    6dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    6dfc:	51 f0       	breq	.+20     	; 0x6e12 <lin_diagservice_assign_frame_id_range+0xe2>
    6dfe:	64 17       	cp	r22, r20
    6e00:	40 f4       	brcc	.+16     	; 0x6e12 <lin_diagservice_assign_frame_id_range+0xe2>
    6e02:	20 e1       	ldi	r18, 0x10	; 16
    6e04:	40 e0       	ldi	r20, 0x00	; 0
    6e06:	67 eb       	ldi	r22, 0xB7	; 183
    6e08:	8f 2d       	mov	r24, r15
    6e0a:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    6e0e:	80 e0       	ldi	r24, 0x00	; 0
    6e10:	0b c0       	rjmp	.+22     	; 0x6e28 <lin_diagservice_assign_frame_id_range+0xf8>
    6e12:	4f 5f       	subi	r20, 0xFF	; 255
    6e14:	59 2f       	mov	r21, r25
    6e16:	24 2f       	mov	r18, r20
    6e18:	30 e0       	ldi	r19, 0x00	; 0
    6e1a:	8e 2d       	mov	r24, r14
    6e1c:	90 e0       	ldi	r25, 0x00	; 0
    6e1e:	04 96       	adiw	r24, 0x04	; 4
    6e20:	28 17       	cp	r18, r24
    6e22:	39 07       	cpc	r19, r25
    6e24:	08 f3       	brcs	.-62     	; 0x6de8 <lin_diagservice_assign_frame_id_range+0xb8>
    6e26:	81 e0       	ldi	r24, 0x01	; 1
    6e28:	81 30       	cpi	r24, 0x01	; 1
    6e2a:	f1 f5       	brne	.+124    	; 0x6ea8 <lin_diagservice_assign_frame_id_range+0x178>
    6e2c:	31 c0       	rjmp	.+98     	; 0x6e90 <lin_diagservice_assign_frame_id_range+0x160>
    6e2e:	e1 e0       	ldi	r30, 0x01	; 1
    6e30:	f0 e0       	ldi	r31, 0x00	; 0
    6e32:	ec 0f       	add	r30, r28
    6e34:	fd 1f       	adc	r31, r29
    6e36:	ed 0d       	add	r30, r13
    6e38:	f1 1d       	adc	r31, r1
    6e3a:	80 81       	ld	r24, Z
    6e3c:	88 23       	and	r24, r24
    6e3e:	19 f0       	breq	.+6      	; 0x6e46 <lin_diagservice_assign_frame_id_range+0x116>
    6e40:	8f 3f       	cpi	r24, 0xFF	; 255
    6e42:	21 f1       	breq	.+72     	; 0x6e8c <lin_diagservice_assign_frame_id_range+0x15c>
    6e44:	11 c0       	rjmp	.+34     	; 0x6e68 <lin_diagservice_assign_frame_id_range+0x138>
    6e46:	e3 94       	inc	r14
    6e48:	8c e1       	ldi	r24, 0x1C	; 28
    6e4a:	80 9f       	mul	r24, r16
    6e4c:	f0 01       	movw	r30, r0
    6e4e:	81 9f       	mul	r24, r17
    6e50:	f0 0d       	add	r31, r0
    6e52:	11 24       	eor	r1, r1
    6e54:	e8 5b       	subi	r30, 0xB8	; 184
    6e56:	fc 49       	sbci	r31, 0x9C	; 156
    6e58:	02 84       	ldd	r0, Z+10	; 0x0a
    6e5a:	f3 85       	ldd	r31, Z+11	; 0x0b
    6e5c:	e0 2d       	mov	r30, r0
    6e5e:	ee 0d       	add	r30, r14
    6e60:	f1 1d       	adc	r31, r1
    6e62:	8f ef       	ldi	r24, 0xFF	; 255
    6e64:	80 83       	st	Z, r24
    6e66:	12 c0       	rjmp	.+36     	; 0x6e8c <lin_diagservice_assign_frame_id_range+0x15c>
    6e68:	e3 94       	inc	r14
    6e6a:	9c e1       	ldi	r25, 0x1C	; 28
    6e6c:	90 9f       	mul	r25, r16
    6e6e:	f0 01       	movw	r30, r0
    6e70:	91 9f       	mul	r25, r17
    6e72:	f0 0d       	add	r31, r0
    6e74:	11 24       	eor	r1, r1
    6e76:	e8 5b       	subi	r30, 0xB8	; 184
    6e78:	fc 49       	sbci	r31, 0x9C	; 156
    6e7a:	a2 84       	ldd	r10, Z+10	; 0x0a
    6e7c:	b3 84       	ldd	r11, Z+11	; 0x0b
    6e7e:	ae 0c       	add	r10, r14
    6e80:	b1 1c       	adc	r11, r1
    6e82:	61 e0       	ldi	r22, 0x01	; 1
    6e84:	0e 94 64 42 	call	0x84c8	; 0x84c8 <lin_process_parity>
    6e88:	f5 01       	movw	r30, r10
    6e8a:	80 83       	st	Z, r24
    6e8c:	d3 94       	inc	r13
    6e8e:	03 c0       	rjmp	.+6      	; 0x6e96 <lin_diagservice_assign_frame_id_range+0x166>
    6e90:	68 94       	set
    6e92:	dd 24       	eor	r13, r13
    6e94:	d2 f8       	bld	r13, 2
    6e96:	f7 e0       	ldi	r31, 0x07	; 7
    6e98:	fd 15       	cp	r31, r13
    6e9a:	48 f6       	brcc	.-110    	; 0x6e2e <lin_diagservice_assign_frame_id_range+0xfe>
    6e9c:	20 e0       	ldi	r18, 0x00	; 0
    6e9e:	41 e0       	ldi	r20, 0x01	; 1
    6ea0:	67 eb       	ldi	r22, 0xB7	; 183
    6ea2:	8f 2d       	mov	r24, r15
    6ea4:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    6ea8:	28 96       	adiw	r28, 0x08	; 8
    6eaa:	cd bf       	out	0x3d, r28	; 61
    6eac:	de bf       	out	0x3e, r29	; 62
    6eae:	df 91       	pop	r29
    6eb0:	cf 91       	pop	r28
    6eb2:	1f 91       	pop	r17
    6eb4:	0f 91       	pop	r16
    6eb6:	ff 90       	pop	r15
    6eb8:	ef 90       	pop	r14
    6eba:	df 90       	pop	r13
    6ebc:	bf 90       	pop	r11
    6ebe:	af 90       	pop	r10
    6ec0:	08 95       	ret

00006ec2 <lin_diagservice_read_by_identifier>:
    6ec2:	ef 92       	push	r14
    6ec4:	ff 92       	push	r15
    6ec6:	0f 93       	push	r16
    6ec8:	1f 93       	push	r17
    6eca:	cf 93       	push	r28
    6ecc:	df 93       	push	r29
    6ece:	cd b7       	in	r28, 0x3d	; 61
    6ed0:	de b7       	in	r29, 0x3e	; 62
    6ed2:	62 97       	sbiw	r28, 0x12	; 18
    6ed4:	cd bf       	out	0x3d, r28	; 61
    6ed6:	de bf       	out	0x3e, r29	; 62
    6ed8:	08 2f       	mov	r16, r24
    6eda:	10 e0       	ldi	r17, 0x00	; 0
    6edc:	9c e1       	ldi	r25, 0x1C	; 28
    6ede:	90 9f       	mul	r25, r16
    6ee0:	f0 01       	movw	r30, r0
    6ee2:	91 9f       	mul	r25, r17
    6ee4:	f0 0d       	add	r31, r0
    6ee6:	11 24       	eor	r1, r1
    6ee8:	e8 5b       	subi	r30, 0xB8	; 184
    6eea:	fc 49       	sbci	r31, 0x9C	; 156
    6eec:	42 89       	ldd	r20, Z+18	; 0x12
    6eee:	50 e0       	ldi	r21, 0x00	; 0
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	25 c0       	rjmp	.+74     	; 0x6f3e <lin_diagservice_read_by_identifier+0x7c>
    6ef4:	24 e3       	ldi	r18, 0x34	; 52
    6ef6:	20 9f       	mul	r18, r16
    6ef8:	d0 01       	movw	r26, r0
    6efa:	21 9f       	mul	r18, r17
    6efc:	b0 0d       	add	r27, r0
    6efe:	11 24       	eor	r1, r1
    6f00:	ac 56       	subi	r26, 0x6C	; 108
    6f02:	b8 49       	sbci	r27, 0x98	; 152
    6f04:	54 96       	adiw	r26, 0x14	; 20
    6f06:	2d 91       	ld	r18, X+
    6f08:	3c 91       	ld	r19, X
    6f0a:	55 97       	sbiw	r26, 0x15	; 21
    6f0c:	1b 96       	adiw	r26, 0x0b	; 11
    6f0e:	ed 91       	ld	r30, X+
    6f10:	fc 91       	ld	r31, X
    6f12:	1c 97       	sbiw	r26, 0x0c	; 12
    6f14:	ee 0f       	add	r30, r30
    6f16:	ff 1f       	adc	r31, r31
    6f18:	ee 0f       	add	r30, r30
    6f1a:	ff 1f       	adc	r31, r31
    6f1c:	ee 0f       	add	r30, r30
    6f1e:	ff 1f       	adc	r31, r31
    6f20:	e2 0f       	add	r30, r18
    6f22:	f3 1f       	adc	r31, r19
    6f24:	29 2f       	mov	r18, r25
    6f26:	30 e0       	ldi	r19, 0x00	; 0
    6f28:	e2 0f       	add	r30, r18
    6f2a:	f3 1f       	adc	r31, r19
    6f2c:	60 81       	ld	r22, Z
    6f2e:	e6 e0       	ldi	r30, 0x06	; 6
    6f30:	f0 e0       	ldi	r31, 0x00	; 0
    6f32:	ec 0f       	add	r30, r28
    6f34:	fd 1f       	adc	r31, r29
    6f36:	e2 0f       	add	r30, r18
    6f38:	f3 1f       	adc	r31, r19
    6f3a:	60 83       	st	Z, r22
    6f3c:	9f 5f       	subi	r25, 0xFF	; 255
    6f3e:	98 30       	cpi	r25, 0x08	; 8
    6f40:	c8 f2       	brcs	.-78     	; 0x6ef4 <lin_diagservice_read_by_identifier+0x32>
    6f42:	94 e2       	ldi	r25, 0x24	; 36
    6f44:	94 9f       	mul	r25, r20
    6f46:	f0 01       	movw	r30, r0
    6f48:	95 9f       	mul	r25, r21
    6f4a:	f0 0d       	add	r31, r0
    6f4c:	11 24       	eor	r1, r1
    6f4e:	e9 59       	subi	r30, 0x99	; 153
    6f50:	fc 49       	sbci	r31, 0x9C	; 156
    6f52:	95 e0       	ldi	r25, 0x05	; 5
    6f54:	de 01       	movw	r26, r28
    6f56:	11 96       	adiw	r26, 0x01	; 1
    6f58:	01 90       	ld	r0, Z+
    6f5a:	0d 92       	st	X+, r0
    6f5c:	9a 95       	dec	r25
    6f5e:	e1 f7       	brne	.-8      	; 0x6f58 <lin_diagservice_read_by_identifier+0x96>
    6f60:	2b 85       	ldd	r18, Y+11	; 0x0b
    6f62:	30 e0       	ldi	r19, 0x00	; 0
    6f64:	32 2f       	mov	r19, r18
    6f66:	22 27       	eor	r18, r18
    6f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f6a:	29 2b       	or	r18, r25
    6f6c:	4d 85       	ldd	r20, Y+13	; 0x0d
    6f6e:	50 e0       	ldi	r21, 0x00	; 0
    6f70:	54 2f       	mov	r21, r20
    6f72:	44 27       	eor	r20, r20
    6f74:	9c 85       	ldd	r25, Y+12	; 0x0c
    6f76:	49 2b       	or	r20, r25
    6f78:	69 81       	ldd	r22, Y+1	; 0x01
    6f7a:	7a 81       	ldd	r23, Y+2	; 0x02
    6f7c:	26 17       	cp	r18, r22
    6f7e:	37 07       	cpc	r19, r23
    6f80:	19 f0       	breq	.+6      	; 0x6f88 <lin_diagservice_read_by_identifier+0xc6>
    6f82:	2f 3f       	cpi	r18, 0xFF	; 255
    6f84:	3f 47       	sbci	r19, 0x7F	; 127
    6f86:	41 f4       	brne	.+16     	; 0x6f98 <lin_diagservice_read_by_identifier+0xd6>
    6f88:	2b 81       	ldd	r18, Y+3	; 0x03
    6f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    6f8c:	42 17       	cp	r20, r18
    6f8e:	53 07       	cpc	r21, r19
    6f90:	69 f0       	breq	.+26     	; 0x6fac <lin_diagservice_read_by_identifier+0xea>
    6f92:	4f 3f       	cpi	r20, 0xFF	; 255
    6f94:	5f 4f       	sbci	r21, 0xFF	; 255
    6f96:	51 f0       	breq	.+20     	; 0x6fac <lin_diagservice_read_by_identifier+0xea>
    6f98:	84 e3       	ldi	r24, 0x34	; 52
    6f9a:	80 9f       	mul	r24, r16
    6f9c:	f0 01       	movw	r30, r0
    6f9e:	81 9f       	mul	r24, r17
    6fa0:	f0 0d       	add	r31, r0
    6fa2:	11 24       	eor	r1, r1
    6fa4:	ec 56       	subi	r30, 0x6C	; 108
    6fa6:	f8 49       	sbci	r31, 0x98	; 152
    6fa8:	12 a6       	std	Z+42, r1	; 0x2a
    6faa:	66 c0       	rjmp	.+204    	; 0x7078 <lin_diagservice_read_by_identifier+0x1b6>
    6fac:	f8 2e       	mov	r15, r24
    6fae:	e9 84       	ldd	r14, Y+9	; 0x09
    6fb0:	ee 20       	and	r14, r14
    6fb2:	21 f0       	breq	.+8      	; 0x6fbc <lin_diagservice_read_by_identifier+0xfa>
    6fb4:	81 e0       	ldi	r24, 0x01	; 1
    6fb6:	e8 16       	cp	r14, r24
    6fb8:	39 f0       	breq	.+14     	; 0x6fc8 <lin_diagservice_read_by_identifier+0x106>
    6fba:	0d c0       	rjmp	.+26     	; 0x6fd6 <lin_diagservice_read_by_identifier+0x114>
    6fbc:	2e 2d       	mov	r18, r14
    6fbe:	41 e0       	ldi	r20, 0x01	; 1
    6fc0:	62 eb       	ldi	r22, 0xB2	; 178
    6fc2:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    6fc6:	58 c0       	rjmp	.+176    	; 0x7078 <lin_diagservice_read_by_identifier+0x1b6>
    6fc8:	2e 2d       	mov	r18, r14
    6fca:	41 e0       	ldi	r20, 0x01	; 1
    6fcc:	62 eb       	ldi	r22, 0xB2	; 178
    6fce:	8f 2d       	mov	r24, r15
    6fd0:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    6fd4:	51 c0       	rjmp	.+162    	; 0x7078 <lin_diagservice_read_by_identifier+0x1b6>
    6fd6:	80 ee       	ldi	r24, 0xE0	; 224
    6fd8:	8e 0d       	add	r24, r14
    6fda:	80 32       	cpi	r24, 0x20	; 32
    6fdc:	08 f0       	brcs	.+2      	; 0x6fe0 <lin_diagservice_read_by_identifier+0x11e>
    6fde:	46 c0       	rjmp	.+140    	; 0x706c <lin_diagservice_read_by_identifier+0x1aa>
    6fe0:	85 e0       	ldi	r24, 0x05	; 5
    6fe2:	eb ef       	ldi	r30, 0xFB	; 251
    6fe4:	f2 e6       	ldi	r31, 0x62	; 98
    6fe6:	de 01       	movw	r26, r28
    6fe8:	1e 96       	adiw	r26, 0x0e	; 14
    6fea:	01 90       	ld	r0, Z+
    6fec:	0d 92       	st	X+, r0
    6fee:	8a 95       	dec	r24
    6ff0:	e1 f7       	brne	.-8      	; 0x6fea <lin_diagservice_read_by_identifier+0x128>
    6ff2:	ae 01       	movw	r20, r28
    6ff4:	42 5f       	subi	r20, 0xF2	; 242
    6ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ff8:	6e 2d       	mov	r22, r14
    6ffa:	8f 2d       	mov	r24, r15
    6ffc:	0e 94 37 4d 	call	0x9a6e	; 0x9a6e <ld_read_by_id_callout>
    7000:	84 35       	cpi	r24, 0x54	; 84
    7002:	f9 f4       	brne	.+62     	; 0x7042 <lin_diagservice_read_by_identifier+0x180>
    7004:	02 c0       	rjmp	.+4      	; 0x700a <lin_diagservice_read_by_identifier+0x148>
    7006:	8f 5f       	subi	r24, 0xFF	; 255
    7008:	01 c0       	rjmp	.+2      	; 0x700c <lin_diagservice_read_by_identifier+0x14a>
    700a:	80 e0       	ldi	r24, 0x00	; 0
    700c:	85 30       	cpi	r24, 0x05	; 5
    700e:	48 f4       	brcc	.+18     	; 0x7022 <lin_diagservice_read_by_identifier+0x160>
    7010:	ee e0       	ldi	r30, 0x0E	; 14
    7012:	f0 e0       	ldi	r31, 0x00	; 0
    7014:	ec 0f       	add	r30, r28
    7016:	fd 1f       	adc	r31, r29
    7018:	e8 0f       	add	r30, r24
    701a:	f1 1d       	adc	r31, r1
    701c:	90 81       	ld	r25, Z
    701e:	9f 3f       	cpi	r25, 0xFF	; 255
    7020:	91 f3       	breq	.-28     	; 0x7006 <lin_diagservice_read_by_identifier+0x144>
    7022:	85 30       	cpi	r24, 0x05	; 5
    7024:	38 f4       	brcc	.+14     	; 0x7034 <lin_diagservice_read_by_identifier+0x172>
    7026:	2e 2d       	mov	r18, r14
    7028:	41 e0       	ldi	r20, 0x01	; 1
    702a:	62 eb       	ldi	r22, 0xB2	; 178
    702c:	8f 2d       	mov	r24, r15
    702e:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    7032:	22 c0       	rjmp	.+68     	; 0x7078 <lin_diagservice_read_by_identifier+0x1b6>
    7034:	22 e1       	ldi	r18, 0x12	; 18
    7036:	40 e0       	ldi	r20, 0x00	; 0
    7038:	62 eb       	ldi	r22, 0xB2	; 178
    703a:	8f 2d       	mov	r24, r15
    703c:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    7040:	1b c0       	rjmp	.+54     	; 0x7078 <lin_diagservice_read_by_identifier+0x1b6>
    7042:	83 35       	cpi	r24, 0x53	; 83
    7044:	39 f4       	brne	.+14     	; 0x7054 <lin_diagservice_read_by_identifier+0x192>
    7046:	22 e1       	ldi	r18, 0x12	; 18
    7048:	40 e0       	ldi	r20, 0x00	; 0
    704a:	62 eb       	ldi	r22, 0xB2	; 178
    704c:	8f 2d       	mov	r24, r15
    704e:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    7052:	12 c0       	rjmp	.+36     	; 0x7078 <lin_diagservice_read_by_identifier+0x1b6>
    7054:	84 e3       	ldi	r24, 0x34	; 52
    7056:	80 9f       	mul	r24, r16
    7058:	f0 01       	movw	r30, r0
    705a:	81 9f       	mul	r24, r17
    705c:	f0 0d       	add	r31, r0
    705e:	11 24       	eor	r1, r1
    7060:	ec 56       	subi	r30, 0x6C	; 108
    7062:	f8 49       	sbci	r31, 0x98	; 152
    7064:	12 a6       	std	Z+42, r1	; 0x2a
    7066:	82 e0       	ldi	r24, 0x02	; 2
    7068:	83 a7       	std	Z+43, r24	; 0x2b
    706a:	06 c0       	rjmp	.+12     	; 0x7078 <lin_diagservice_read_by_identifier+0x1b6>
    706c:	22 e1       	ldi	r18, 0x12	; 18
    706e:	40 e0       	ldi	r20, 0x00	; 0
    7070:	62 eb       	ldi	r22, 0xB2	; 178
    7072:	8f 2d       	mov	r24, r15
    7074:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    7078:	62 96       	adiw	r28, 0x12	; 18
    707a:	cd bf       	out	0x3d, r28	; 61
    707c:	de bf       	out	0x3e, r29	; 62
    707e:	df 91       	pop	r29
    7080:	cf 91       	pop	r28
    7082:	1f 91       	pop	r17
    7084:	0f 91       	pop	r16
    7086:	ff 90       	pop	r15
    7088:	ef 90       	pop	r14
    708a:	08 95       	ret

0000708c <lin_read_data_by_identify>:
    708c:	8f 92       	push	r8
    708e:	9f 92       	push	r9
    7090:	af 92       	push	r10
    7092:	bf 92       	push	r11
    7094:	cf 92       	push	r12
    7096:	df 92       	push	r13
    7098:	ef 92       	push	r14
    709a:	ff 92       	push	r15
    709c:	0f 93       	push	r16
    709e:	1f 93       	push	r17
    70a0:	cf 93       	push	r28
    70a2:	df 93       	push	r29
    70a4:	cd b7       	in	r28, 0x3d	; 61
    70a6:	de b7       	in	r29, 0x3e	; 62
    70a8:	28 97       	sbiw	r28, 0x08	; 8
    70aa:	cd bf       	out	0x3d, r28	; 61
    70ac:	de bf       	out	0x3e, r29	; 62
    70ae:	d8 2e       	mov	r13, r24
    70b0:	08 2f       	mov	r16, r24
    70b2:	10 e0       	ldi	r17, 0x00	; 0
    70b4:	8c e1       	ldi	r24, 0x1C	; 28
    70b6:	80 9f       	mul	r24, r16
    70b8:	f0 01       	movw	r30, r0
    70ba:	81 9f       	mul	r24, r17
    70bc:	f0 0d       	add	r31, r0
    70be:	11 24       	eor	r1, r1
    70c0:	e8 5b       	subi	r30, 0xB8	; 184
    70c2:	fc 49       	sbci	r31, 0x9C	; 156
    70c4:	e2 88       	ldd	r14, Z+18	; 0x12
    70c6:	f1 2c       	mov	r15, r1
    70c8:	20 e0       	ldi	r18, 0x00	; 0
    70ca:	25 c0       	rjmp	.+74     	; 0x7116 <lin_read_data_by_identify+0x8a>
    70cc:	84 e3       	ldi	r24, 0x34	; 52
    70ce:	80 9f       	mul	r24, r16
    70d0:	d0 01       	movw	r26, r0
    70d2:	81 9f       	mul	r24, r17
    70d4:	b0 0d       	add	r27, r0
    70d6:	11 24       	eor	r1, r1
    70d8:	ac 56       	subi	r26, 0x6C	; 108
    70da:	b8 49       	sbci	r27, 0x98	; 152
    70dc:	54 96       	adiw	r26, 0x14	; 20
    70de:	8d 91       	ld	r24, X+
    70e0:	9c 91       	ld	r25, X
    70e2:	55 97       	sbiw	r26, 0x15	; 21
    70e4:	1b 96       	adiw	r26, 0x0b	; 11
    70e6:	ed 91       	ld	r30, X+
    70e8:	fc 91       	ld	r31, X
    70ea:	1c 97       	sbiw	r26, 0x0c	; 12
    70ec:	ee 0f       	add	r30, r30
    70ee:	ff 1f       	adc	r31, r31
    70f0:	ee 0f       	add	r30, r30
    70f2:	ff 1f       	adc	r31, r31
    70f4:	ee 0f       	add	r30, r30
    70f6:	ff 1f       	adc	r31, r31
    70f8:	e8 0f       	add	r30, r24
    70fa:	f9 1f       	adc	r31, r25
    70fc:	82 2f       	mov	r24, r18
    70fe:	90 e0       	ldi	r25, 0x00	; 0
    7100:	e8 0f       	add	r30, r24
    7102:	f9 1f       	adc	r31, r25
    7104:	30 81       	ld	r19, Z
    7106:	e1 e0       	ldi	r30, 0x01	; 1
    7108:	f0 e0       	ldi	r31, 0x00	; 0
    710a:	ec 0f       	add	r30, r28
    710c:	fd 1f       	adc	r31, r29
    710e:	e8 0f       	add	r30, r24
    7110:	f9 1f       	adc	r31, r25
    7112:	30 83       	st	Z, r19
    7114:	2f 5f       	subi	r18, 0xFF	; 255
    7116:	28 30       	cpi	r18, 0x08	; 8
    7118:	c8 f2       	brcs	.-78     	; 0x70cc <lin_read_data_by_identify+0x40>
    711a:	ec 81       	ldd	r30, Y+4	; 0x04
    711c:	f0 e0       	ldi	r31, 0x00	; 0
    711e:	fe 2f       	mov	r31, r30
    7120:	ee 27       	eor	r30, r30
    7122:	8d 81       	ldd	r24, Y+5	; 0x05
    7124:	e8 2b       	or	r30, r24
    7126:	cb 80       	ldd	r12, Y+3	; 0x03
    7128:	e0 58       	subi	r30, 0x80	; 128
    712a:	f1 4f       	sbci	r31, 0xF1	; 241
    712c:	e1 35       	cpi	r30, 0x51	; 81
    712e:	f1 05       	cpc	r31, r1
    7130:	08 f0       	brcs	.+2      	; 0x7134 <lin_read_data_by_identify+0xa8>
    7132:	b7 c4       	rjmp	.+2414   	; 0x7aa2 <lin_read_data_by_identify+0xa16>
    7134:	e6 57       	subi	r30, 0x76	; 118
    7136:	fb 4d       	sbci	r31, 0xDB	; 219
    7138:	0c 94 3c 63 	jmp	0xc678	; 0xc678 <__tablejump2__>
    713c:	84 e2       	ldi	r24, 0x24	; 36
    713e:	8e 9d       	mul	r24, r14
    7140:	f0 01       	movw	r30, r0
    7142:	8f 9d       	mul	r24, r15
    7144:	f0 0d       	add	r31, r0
    7146:	11 24       	eor	r1, r1
    7148:	ec 59       	subi	r30, 0x9C	; 156
    714a:	fc 49       	sbci	r31, 0x9C	; 156
    714c:	a0 80       	ld	r10, Z
    714e:	b1 80       	ldd	r11, Z+1	; 0x01
    7150:	f5 01       	movw	r30, r10
    7152:	80 81       	ld	r24, Z
    7154:	89 83       	std	Y+1, r24	; 0x01
    7156:	80 e1       	ldi	r24, 0x10	; 16
    7158:	8a 83       	std	Y+2, r24	; 0x02
    715a:	8a e0       	ldi	r24, 0x0A	; 10
    715c:	8b 83       	std	Y+3, r24	; 0x03
    715e:	80 e4       	ldi	r24, 0x40	; 64
    7160:	8c 0d       	add	r24, r12
    7162:	8c 83       	std	Y+4, r24	; 0x04
    7164:	81 ef       	ldi	r24, 0xF1	; 241
    7166:	8d 83       	std	Y+5, r24	; 0x05
    7168:	88 e8       	ldi	r24, 0x88	; 136
    716a:	8e 83       	std	Y+6, r24	; 0x06
    716c:	0f 2e       	mov	r0, r31
    716e:	f0 e3       	ldi	r31, 0x30	; 48
    7170:	ff 2e       	mov	r15, r31
    7172:	f0 2d       	mov	r31, r0
    7174:	ff 82       	std	Y+7, r15	; 0x07
    7176:	83 e3       	ldi	r24, 0x33	; 51
    7178:	88 87       	std	Y+8, r24	; 0x08
    717a:	be 01       	movw	r22, r28
    717c:	6f 5f       	subi	r22, 0xFF	; 255
    717e:	7f 4f       	sbci	r23, 0xFF	; 255
    7180:	8d 2d       	mov	r24, r13
    7182:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7186:	f5 01       	movw	r30, r10
    7188:	80 81       	ld	r24, Z
    718a:	89 83       	std	Y+1, r24	; 0x01
    718c:	81 e2       	ldi	r24, 0x21	; 33
    718e:	8a 83       	std	Y+2, r24	; 0x02
    7190:	8e e2       	ldi	r24, 0x2E	; 46
    7192:	8b 83       	std	Y+3, r24	; 0x03
    7194:	fc 82       	std	Y+4, r15	; 0x04
    7196:	fd 82       	std	Y+5, r15	; 0x05
    7198:	8e 83       	std	Y+6, r24	; 0x06
    719a:	ff 82       	std	Y+7, r15	; 0x07
    719c:	f8 86       	std	Y+8, r15	; 0x08
    719e:	be 01       	movw	r22, r28
    71a0:	6f 5f       	subi	r22, 0xFF	; 255
    71a2:	7f 4f       	sbci	r23, 0xFF	; 255
    71a4:	8d 2d       	mov	r24, r13
    71a6:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    71aa:	84 e3       	ldi	r24, 0x34	; 52
    71ac:	80 9f       	mul	r24, r16
    71ae:	f0 01       	movw	r30, r0
    71b0:	81 9f       	mul	r24, r17
    71b2:	f0 0d       	add	r31, r0
    71b4:	11 24       	eor	r1, r1
    71b6:	ec 56       	subi	r30, 0x6C	; 108
    71b8:	f8 49       	sbci	r31, 0x98	; 152
    71ba:	82 e0       	ldi	r24, 0x02	; 2
    71bc:	86 a3       	std	Z+38, r24	; 0x26
    71be:	77 c4       	rjmp	.+2286   	; 0x7aae <lin_read_data_by_identify+0xa22>
    71c0:	84 e2       	ldi	r24, 0x24	; 36
    71c2:	8e 9d       	mul	r24, r14
    71c4:	f0 01       	movw	r30, r0
    71c6:	8f 9d       	mul	r24, r15
    71c8:	f0 0d       	add	r31, r0
    71ca:	11 24       	eor	r1, r1
    71cc:	ec 59       	subi	r30, 0x9C	; 156
    71ce:	fc 49       	sbci	r31, 0x9C	; 156
    71d0:	a0 80       	ld	r10, Z
    71d2:	b1 80       	ldd	r11, Z+1	; 0x01
    71d4:	f5 01       	movw	r30, r10
    71d6:	80 81       	ld	r24, Z
    71d8:	89 83       	std	Y+1, r24	; 0x01
    71da:	80 e1       	ldi	r24, 0x10	; 16
    71dc:	8a 83       	std	Y+2, r24	; 0x02
    71de:	8a e0       	ldi	r24, 0x0A	; 10
    71e0:	8b 83       	std	Y+3, r24	; 0x03
    71e2:	80 e4       	ldi	r24, 0x40	; 64
    71e4:	8c 0d       	add	r24, r12
    71e6:	8c 83       	std	Y+4, r24	; 0x04
    71e8:	81 ef       	ldi	r24, 0xF1	; 241
    71ea:	8d 83       	std	Y+5, r24	; 0x05
    71ec:	88 e8       	ldi	r24, 0x88	; 136
    71ee:	8e 83       	std	Y+6, r24	; 0x06
    71f0:	0f 2e       	mov	r0, r31
    71f2:	f0 e3       	ldi	r31, 0x30	; 48
    71f4:	ff 2e       	mov	r15, r31
    71f6:	f0 2d       	mov	r31, r0
    71f8:	ff 82       	std	Y+7, r15	; 0x07
    71fa:	83 e3       	ldi	r24, 0x33	; 51
    71fc:	88 87       	std	Y+8, r24	; 0x08
    71fe:	be 01       	movw	r22, r28
    7200:	6f 5f       	subi	r22, 0xFF	; 255
    7202:	7f 4f       	sbci	r23, 0xFF	; 255
    7204:	8d 2d       	mov	r24, r13
    7206:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    720a:	f5 01       	movw	r30, r10
    720c:	80 81       	ld	r24, Z
    720e:	89 83       	std	Y+1, r24	; 0x01
    7210:	81 e2       	ldi	r24, 0x21	; 33
    7212:	8a 83       	std	Y+2, r24	; 0x02
    7214:	8e e2       	ldi	r24, 0x2E	; 46
    7216:	8b 83       	std	Y+3, r24	; 0x03
    7218:	fc 82       	std	Y+4, r15	; 0x04
    721a:	fd 82       	std	Y+5, r15	; 0x05
    721c:	8e 83       	std	Y+6, r24	; 0x06
    721e:	ff 82       	std	Y+7, r15	; 0x07
    7220:	f8 86       	std	Y+8, r15	; 0x08
    7222:	be 01       	movw	r22, r28
    7224:	6f 5f       	subi	r22, 0xFF	; 255
    7226:	7f 4f       	sbci	r23, 0xFF	; 255
    7228:	8d 2d       	mov	r24, r13
    722a:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    722e:	84 e3       	ldi	r24, 0x34	; 52
    7230:	80 9f       	mul	r24, r16
    7232:	f0 01       	movw	r30, r0
    7234:	81 9f       	mul	r24, r17
    7236:	f0 0d       	add	r31, r0
    7238:	11 24       	eor	r1, r1
    723a:	ec 56       	subi	r30, 0x6C	; 108
    723c:	f8 49       	sbci	r31, 0x98	; 152
    723e:	82 e0       	ldi	r24, 0x02	; 2
    7240:	86 a3       	std	Z+38, r24	; 0x26
    7242:	35 c4       	rjmp	.+2154   	; 0x7aae <lin_read_data_by_identify+0xa22>
    7244:	84 e2       	ldi	r24, 0x24	; 36
    7246:	8e 9d       	mul	r24, r14
    7248:	f0 01       	movw	r30, r0
    724a:	8f 9d       	mul	r24, r15
    724c:	f0 0d       	add	r31, r0
    724e:	11 24       	eor	r1, r1
    7250:	ec 59       	subi	r30, 0x9C	; 156
    7252:	fc 49       	sbci	r31, 0x9C	; 156
    7254:	a0 80       	ld	r10, Z
    7256:	b1 80       	ldd	r11, Z+1	; 0x01
    7258:	f5 01       	movw	r30, r10
    725a:	80 81       	ld	r24, Z
    725c:	89 83       	std	Y+1, r24	; 0x01
    725e:	80 e1       	ldi	r24, 0x10	; 16
    7260:	8a 83       	std	Y+2, r24	; 0x02
    7262:	8a e0       	ldi	r24, 0x0A	; 10
    7264:	8b 83       	std	Y+3, r24	; 0x03
    7266:	80 e4       	ldi	r24, 0x40	; 64
    7268:	8c 0d       	add	r24, r12
    726a:	8c 83       	std	Y+4, r24	; 0x04
    726c:	81 ef       	ldi	r24, 0xF1	; 241
    726e:	8d 83       	std	Y+5, r24	; 0x05
    7270:	88 e8       	ldi	r24, 0x88	; 136
    7272:	8e 83       	std	Y+6, r24	; 0x06
    7274:	0f 2e       	mov	r0, r31
    7276:	f0 e3       	ldi	r31, 0x30	; 48
    7278:	ff 2e       	mov	r15, r31
    727a:	f0 2d       	mov	r31, r0
    727c:	ff 82       	std	Y+7, r15	; 0x07
    727e:	83 e3       	ldi	r24, 0x33	; 51
    7280:	88 87       	std	Y+8, r24	; 0x08
    7282:	be 01       	movw	r22, r28
    7284:	6f 5f       	subi	r22, 0xFF	; 255
    7286:	7f 4f       	sbci	r23, 0xFF	; 255
    7288:	8d 2d       	mov	r24, r13
    728a:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    728e:	f5 01       	movw	r30, r10
    7290:	80 81       	ld	r24, Z
    7292:	89 83       	std	Y+1, r24	; 0x01
    7294:	81 e2       	ldi	r24, 0x21	; 33
    7296:	8a 83       	std	Y+2, r24	; 0x02
    7298:	8e e2       	ldi	r24, 0x2E	; 46
    729a:	8b 83       	std	Y+3, r24	; 0x03
    729c:	fc 82       	std	Y+4, r15	; 0x04
    729e:	fd 82       	std	Y+5, r15	; 0x05
    72a0:	8e 83       	std	Y+6, r24	; 0x06
    72a2:	ff 82       	std	Y+7, r15	; 0x07
    72a4:	f8 86       	std	Y+8, r15	; 0x08
    72a6:	be 01       	movw	r22, r28
    72a8:	6f 5f       	subi	r22, 0xFF	; 255
    72aa:	7f 4f       	sbci	r23, 0xFF	; 255
    72ac:	8d 2d       	mov	r24, r13
    72ae:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    72b2:	84 e3       	ldi	r24, 0x34	; 52
    72b4:	80 9f       	mul	r24, r16
    72b6:	f0 01       	movw	r30, r0
    72b8:	81 9f       	mul	r24, r17
    72ba:	f0 0d       	add	r31, r0
    72bc:	11 24       	eor	r1, r1
    72be:	ec 56       	subi	r30, 0x6C	; 108
    72c0:	f8 49       	sbci	r31, 0x98	; 152
    72c2:	82 e0       	ldi	r24, 0x02	; 2
    72c4:	86 a3       	std	Z+38, r24	; 0x26
    72c6:	f3 c3       	rjmp	.+2022   	; 0x7aae <lin_read_data_by_identify+0xa22>
    72c8:	84 e2       	ldi	r24, 0x24	; 36
    72ca:	8e 9d       	mul	r24, r14
    72cc:	f0 01       	movw	r30, r0
    72ce:	8f 9d       	mul	r24, r15
    72d0:	f0 0d       	add	r31, r0
    72d2:	11 24       	eor	r1, r1
    72d4:	ec 59       	subi	r30, 0x9C	; 156
    72d6:	fc 49       	sbci	r31, 0x9C	; 156
    72d8:	a0 80       	ld	r10, Z
    72da:	b1 80       	ldd	r11, Z+1	; 0x01
    72dc:	f5 01       	movw	r30, r10
    72de:	80 81       	ld	r24, Z
    72e0:	89 83       	std	Y+1, r24	; 0x01
    72e2:	80 e1       	ldi	r24, 0x10	; 16
    72e4:	8a 83       	std	Y+2, r24	; 0x02
    72e6:	8a e0       	ldi	r24, 0x0A	; 10
    72e8:	8b 83       	std	Y+3, r24	; 0x03
    72ea:	80 e4       	ldi	r24, 0x40	; 64
    72ec:	8c 0d       	add	r24, r12
    72ee:	8c 83       	std	Y+4, r24	; 0x04
    72f0:	81 ef       	ldi	r24, 0xF1	; 241
    72f2:	8d 83       	std	Y+5, r24	; 0x05
    72f4:	80 e8       	ldi	r24, 0x80	; 128
    72f6:	8e 83       	std	Y+6, r24	; 0x06
    72f8:	0f 2e       	mov	r0, r31
    72fa:	f0 e3       	ldi	r31, 0x30	; 48
    72fc:	ff 2e       	mov	r15, r31
    72fe:	f0 2d       	mov	r31, r0
    7300:	ff 82       	std	Y+7, r15	; 0x07
    7302:	83 e3       	ldi	r24, 0x33	; 51
    7304:	88 87       	std	Y+8, r24	; 0x08
    7306:	be 01       	movw	r22, r28
    7308:	6f 5f       	subi	r22, 0xFF	; 255
    730a:	7f 4f       	sbci	r23, 0xFF	; 255
    730c:	8d 2d       	mov	r24, r13
    730e:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7312:	f5 01       	movw	r30, r10
    7314:	80 81       	ld	r24, Z
    7316:	89 83       	std	Y+1, r24	; 0x01
    7318:	81 e2       	ldi	r24, 0x21	; 33
    731a:	8a 83       	std	Y+2, r24	; 0x02
    731c:	8e e2       	ldi	r24, 0x2E	; 46
    731e:	8b 83       	std	Y+3, r24	; 0x03
    7320:	fc 82       	std	Y+4, r15	; 0x04
    7322:	fd 82       	std	Y+5, r15	; 0x05
    7324:	8e 83       	std	Y+6, r24	; 0x06
    7326:	ff 82       	std	Y+7, r15	; 0x07
    7328:	f8 86       	std	Y+8, r15	; 0x08
    732a:	be 01       	movw	r22, r28
    732c:	6f 5f       	subi	r22, 0xFF	; 255
    732e:	7f 4f       	sbci	r23, 0xFF	; 255
    7330:	8d 2d       	mov	r24, r13
    7332:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7336:	84 e3       	ldi	r24, 0x34	; 52
    7338:	80 9f       	mul	r24, r16
    733a:	f0 01       	movw	r30, r0
    733c:	81 9f       	mul	r24, r17
    733e:	f0 0d       	add	r31, r0
    7340:	11 24       	eor	r1, r1
    7342:	ec 56       	subi	r30, 0x6C	; 108
    7344:	f8 49       	sbci	r31, 0x98	; 152
    7346:	82 e0       	ldi	r24, 0x02	; 2
    7348:	86 a3       	std	Z+38, r24	; 0x26
    734a:	b1 c3       	rjmp	.+1890   	; 0x7aae <lin_read_data_by_identify+0xa22>
    734c:	84 e2       	ldi	r24, 0x24	; 36
    734e:	8e 9d       	mul	r24, r14
    7350:	f0 01       	movw	r30, r0
    7352:	8f 9d       	mul	r24, r15
    7354:	f0 0d       	add	r31, r0
    7356:	11 24       	eor	r1, r1
    7358:	ec 59       	subi	r30, 0x9C	; 156
    735a:	fc 49       	sbci	r31, 0x9C	; 156
    735c:	e0 80       	ld	r14, Z
    735e:	f1 80       	ldd	r15, Z+1	; 0x01
    7360:	f7 01       	movw	r30, r14
    7362:	80 81       	ld	r24, Z
    7364:	89 83       	std	Y+1, r24	; 0x01
    7366:	80 e1       	ldi	r24, 0x10	; 16
    7368:	8a 83       	std	Y+2, r24	; 0x02
    736a:	87 e0       	ldi	r24, 0x07	; 7
    736c:	8b 83       	std	Y+3, r24	; 0x03
    736e:	80 e4       	ldi	r24, 0x40	; 64
    7370:	8c 0d       	add	r24, r12
    7372:	8c 83       	std	Y+4, r24	; 0x04
    7374:	81 ef       	ldi	r24, 0xF1	; 241
    7376:	8d 83       	std	Y+5, r24	; 0x05
    7378:	81 e9       	ldi	r24, 0x91	; 145
    737a:	8e 83       	std	Y+6, r24	; 0x06
    737c:	88 e4       	ldi	r24, 0x48	; 72
    737e:	8f 83       	std	Y+7, r24	; 0x07
    7380:	82 e3       	ldi	r24, 0x32	; 50
    7382:	88 87       	std	Y+8, r24	; 0x08
    7384:	be 01       	movw	r22, r28
    7386:	6f 5f       	subi	r22, 0xFF	; 255
    7388:	7f 4f       	sbci	r23, 0xFF	; 255
    738a:	8d 2d       	mov	r24, r13
    738c:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7390:	f7 01       	movw	r30, r14
    7392:	80 81       	ld	r24, Z
    7394:	89 83       	std	Y+1, r24	; 0x01
    7396:	81 e2       	ldi	r24, 0x21	; 33
    7398:	8a 83       	std	Y+2, r24	; 0x02
    739a:	8e e2       	ldi	r24, 0x2E	; 46
    739c:	8b 83       	std	Y+3, r24	; 0x03
    739e:	80 e3       	ldi	r24, 0x30	; 48
    73a0:	8c 83       	std	Y+4, r24	; 0x04
    73a2:	81 e3       	ldi	r24, 0x31	; 49
    73a4:	8d 83       	std	Y+5, r24	; 0x05
    73a6:	1e 82       	std	Y+6, r1	; 0x06
    73a8:	1f 82       	std	Y+7, r1	; 0x07
    73aa:	18 86       	std	Y+8, r1	; 0x08
    73ac:	be 01       	movw	r22, r28
    73ae:	6f 5f       	subi	r22, 0xFF	; 255
    73b0:	7f 4f       	sbci	r23, 0xFF	; 255
    73b2:	8d 2d       	mov	r24, r13
    73b4:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    73b8:	84 e3       	ldi	r24, 0x34	; 52
    73ba:	80 9f       	mul	r24, r16
    73bc:	f0 01       	movw	r30, r0
    73be:	81 9f       	mul	r24, r17
    73c0:	f0 0d       	add	r31, r0
    73c2:	11 24       	eor	r1, r1
    73c4:	ec 56       	subi	r30, 0x6C	; 108
    73c6:	f8 49       	sbci	r31, 0x98	; 152
    73c8:	82 e0       	ldi	r24, 0x02	; 2
    73ca:	86 a3       	std	Z+38, r24	; 0x26
    73cc:	70 c3       	rjmp	.+1760   	; 0x7aae <lin_read_data_by_identify+0xa22>
    73ce:	84 e2       	ldi	r24, 0x24	; 36
    73d0:	8e 9d       	mul	r24, r14
    73d2:	f0 01       	movw	r30, r0
    73d4:	8f 9d       	mul	r24, r15
    73d6:	f0 0d       	add	r31, r0
    73d8:	11 24       	eor	r1, r1
    73da:	ec 59       	subi	r30, 0x9C	; 156
    73dc:	fc 49       	sbci	r31, 0x9C	; 156
    73de:	01 90       	ld	r0, Z+
    73e0:	f0 81       	ld	r31, Z
    73e2:	e0 2d       	mov	r30, r0
    73e4:	80 81       	ld	r24, Z
    73e6:	89 83       	std	Y+1, r24	; 0x01
    73e8:	80 e1       	ldi	r24, 0x10	; 16
    73ea:	8a 83       	std	Y+2, r24	; 0x02
    73ec:	83 e0       	ldi	r24, 0x03	; 3
    73ee:	8b 83       	std	Y+3, r24	; 0x03
    73f0:	80 e4       	ldi	r24, 0x40	; 64
    73f2:	8c 0d       	add	r24, r12
    73f4:	8c 83       	std	Y+4, r24	; 0x04
    73f6:	81 ef       	ldi	r24, 0xF1	; 241
    73f8:	8d 83       	std	Y+5, r24	; 0x05
    73fa:	86 e8       	ldi	r24, 0x86	; 134
    73fc:	8e 83       	std	Y+6, r24	; 0x06
    73fe:	80 91 93 67 	lds	r24, 0x6793	; 0x806793 <sub_func_id>
    7402:	8f 83       	std	Y+7, r24	; 0x07
    7404:	18 86       	std	Y+8, r1	; 0x08
    7406:	be 01       	movw	r22, r28
    7408:	6f 5f       	subi	r22, 0xFF	; 255
    740a:	7f 4f       	sbci	r23, 0xFF	; 255
    740c:	8d 2d       	mov	r24, r13
    740e:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7412:	84 e3       	ldi	r24, 0x34	; 52
    7414:	80 9f       	mul	r24, r16
    7416:	f0 01       	movw	r30, r0
    7418:	81 9f       	mul	r24, r17
    741a:	f0 0d       	add	r31, r0
    741c:	11 24       	eor	r1, r1
    741e:	ec 56       	subi	r30, 0x6C	; 108
    7420:	f8 49       	sbci	r31, 0x98	; 152
    7422:	82 e0       	ldi	r24, 0x02	; 2
    7424:	86 a3       	std	Z+38, r24	; 0x26
    7426:	43 c3       	rjmp	.+1670   	; 0x7aae <lin_read_data_by_identify+0xa22>
    7428:	84 e2       	ldi	r24, 0x24	; 36
    742a:	8e 9d       	mul	r24, r14
    742c:	f0 01       	movw	r30, r0
    742e:	8f 9d       	mul	r24, r15
    7430:	f0 0d       	add	r31, r0
    7432:	11 24       	eor	r1, r1
    7434:	ec 59       	subi	r30, 0x9C	; 156
    7436:	fc 49       	sbci	r31, 0x9C	; 156
    7438:	a0 80       	ld	r10, Z
    743a:	b1 80       	ldd	r11, Z+1	; 0x01
    743c:	f5 01       	movw	r30, r10
    743e:	80 81       	ld	r24, Z
    7440:	89 83       	std	Y+1, r24	; 0x01
    7442:	80 e1       	ldi	r24, 0x10	; 16
    7444:	8a 83       	std	Y+2, r24	; 0x02
    7446:	85 e0       	ldi	r24, 0x05	; 5
    7448:	8b 83       	std	Y+3, r24	; 0x03
    744a:	80 e4       	ldi	r24, 0x40	; 64
    744c:	8c 0d       	add	r24, r12
    744e:	8c 83       	std	Y+4, r24	; 0x04
    7450:	81 ef       	ldi	r24, 0xF1	; 241
    7452:	8d 83       	std	Y+5, r24	; 0x05
    7454:	8a e8       	ldi	r24, 0x8A	; 138
    7456:	8e 83       	std	Y+6, r24	; 0x06
    7458:	0f 2e       	mov	r0, r31
    745a:	f0 e3       	ldi	r31, 0x30	; 48
    745c:	ff 2e       	mov	r15, r31
    745e:	f0 2d       	mov	r31, r0
    7460:	ff 82       	std	Y+7, r15	; 0x07
    7462:	f8 86       	std	Y+8, r15	; 0x08
    7464:	be 01       	movw	r22, r28
    7466:	6f 5f       	subi	r22, 0xFF	; 255
    7468:	7f 4f       	sbci	r23, 0xFF	; 255
    746a:	8d 2d       	mov	r24, r13
    746c:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7470:	f5 01       	movw	r30, r10
    7472:	80 81       	ld	r24, Z
    7474:	89 83       	std	Y+1, r24	; 0x01
    7476:	81 e2       	ldi	r24, 0x21	; 33
    7478:	8a 83       	std	Y+2, r24	; 0x02
    747a:	fb 82       	std	Y+3, r15	; 0x03
    747c:	1c 82       	std	Y+4, r1	; 0x04
    747e:	1d 82       	std	Y+5, r1	; 0x05
    7480:	1e 82       	std	Y+6, r1	; 0x06
    7482:	1f 82       	std	Y+7, r1	; 0x07
    7484:	18 86       	std	Y+8, r1	; 0x08
    7486:	be 01       	movw	r22, r28
    7488:	6f 5f       	subi	r22, 0xFF	; 255
    748a:	7f 4f       	sbci	r23, 0xFF	; 255
    748c:	8d 2d       	mov	r24, r13
    748e:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7492:	84 e3       	ldi	r24, 0x34	; 52
    7494:	80 9f       	mul	r24, r16
    7496:	f0 01       	movw	r30, r0
    7498:	81 9f       	mul	r24, r17
    749a:	f0 0d       	add	r31, r0
    749c:	11 24       	eor	r1, r1
    749e:	ec 56       	subi	r30, 0x6C	; 108
    74a0:	f8 49       	sbci	r31, 0x98	; 152
    74a2:	82 e0       	ldi	r24, 0x02	; 2
    74a4:	86 a3       	std	Z+38, r24	; 0x26
    74a6:	03 c3       	rjmp	.+1542   	; 0x7aae <lin_read_data_by_identify+0xa22>
    74a8:	84 e2       	ldi	r24, 0x24	; 36
    74aa:	8e 9d       	mul	r24, r14
    74ac:	f0 01       	movw	r30, r0
    74ae:	8f 9d       	mul	r24, r15
    74b0:	f0 0d       	add	r31, r0
    74b2:	11 24       	eor	r1, r1
    74b4:	ec 59       	subi	r30, 0x9C	; 156
    74b6:	fc 49       	sbci	r31, 0x9C	; 156
    74b8:	a0 80       	ld	r10, Z
    74ba:	b1 80       	ldd	r11, Z+1	; 0x01
    74bc:	f5 01       	movw	r30, r10
    74be:	80 81       	ld	r24, Z
    74c0:	89 83       	std	Y+1, r24	; 0x01
    74c2:	80 e1       	ldi	r24, 0x10	; 16
    74c4:	8a 83       	std	Y+2, r24	; 0x02
    74c6:	86 e0       	ldi	r24, 0x06	; 6
    74c8:	8b 83       	std	Y+3, r24	; 0x03
    74ca:	80 e4       	ldi	r24, 0x40	; 64
    74cc:	8c 0d       	add	r24, r12
    74ce:	8c 83       	std	Y+4, r24	; 0x04
    74d0:	81 ef       	ldi	r24, 0xF1	; 241
    74d2:	8d 83       	std	Y+5, r24	; 0x05
    74d4:	8b e8       	ldi	r24, 0x8B	; 139
    74d6:	8e 83       	std	Y+6, r24	; 0x06
    74d8:	80 e2       	ldi	r24, 0x20	; 32
    74da:	8f 83       	std	Y+7, r24	; 0x07
    74dc:	0f 2e       	mov	r0, r31
    74de:	f1 e2       	ldi	r31, 0x21	; 33
    74e0:	ff 2e       	mov	r15, r31
    74e2:	f0 2d       	mov	r31, r0
    74e4:	f8 86       	std	Y+8, r15	; 0x08
    74e6:	be 01       	movw	r22, r28
    74e8:	6f 5f       	subi	r22, 0xFF	; 255
    74ea:	7f 4f       	sbci	r23, 0xFF	; 255
    74ec:	8d 2d       	mov	r24, r13
    74ee:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    74f2:	f5 01       	movw	r30, r10
    74f4:	80 81       	ld	r24, Z
    74f6:	89 83       	std	Y+1, r24	; 0x01
    74f8:	fa 82       	std	Y+2, r15	; 0x02
    74fa:	82 e1       	ldi	r24, 0x12	; 18
    74fc:	8b 83       	std	Y+3, r24	; 0x03
    74fe:	86 e2       	ldi	r24, 0x26	; 38
    7500:	8c 83       	std	Y+4, r24	; 0x04
    7502:	1d 82       	std	Y+5, r1	; 0x05
    7504:	1e 82       	std	Y+6, r1	; 0x06
    7506:	1f 82       	std	Y+7, r1	; 0x07
    7508:	18 86       	std	Y+8, r1	; 0x08
    750a:	be 01       	movw	r22, r28
    750c:	6f 5f       	subi	r22, 0xFF	; 255
    750e:	7f 4f       	sbci	r23, 0xFF	; 255
    7510:	8d 2d       	mov	r24, r13
    7512:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7516:	84 e3       	ldi	r24, 0x34	; 52
    7518:	80 9f       	mul	r24, r16
    751a:	f0 01       	movw	r30, r0
    751c:	81 9f       	mul	r24, r17
    751e:	f0 0d       	add	r31, r0
    7520:	11 24       	eor	r1, r1
    7522:	ec 56       	subi	r30, 0x6C	; 108
    7524:	f8 49       	sbci	r31, 0x98	; 152
    7526:	82 e0       	ldi	r24, 0x02	; 2
    7528:	86 a3       	std	Z+38, r24	; 0x26
    752a:	c1 c2       	rjmp	.+1410   	; 0x7aae <lin_read_data_by_identify+0xa22>
    752c:	84 e2       	ldi	r24, 0x24	; 36
    752e:	8e 9d       	mul	r24, r14
    7530:	f0 01       	movw	r30, r0
    7532:	8f 9d       	mul	r24, r15
    7534:	f0 0d       	add	r31, r0
    7536:	11 24       	eor	r1, r1
    7538:	ec 59       	subi	r30, 0x9C	; 156
    753a:	fc 49       	sbci	r31, 0x9C	; 156
    753c:	a0 80       	ld	r10, Z
    753e:	b1 80       	ldd	r11, Z+1	; 0x01
    7540:	f5 01       	movw	r30, r10
    7542:	80 81       	ld	r24, Z
    7544:	89 83       	std	Y+1, r24	; 0x01
    7546:	80 e1       	ldi	r24, 0x10	; 16
    7548:	8a 83       	std	Y+2, r24	; 0x02
    754a:	8b 83       	std	Y+3, r24	; 0x03
    754c:	84 e1       	ldi	r24, 0x14	; 20
    754e:	8c 83       	std	Y+4, r24	; 0x04
    7550:	80 e4       	ldi	r24, 0x40	; 64
    7552:	8c 0d       	add	r24, r12
    7554:	8d 83       	std	Y+5, r24	; 0x05
    7556:	81 ef       	ldi	r24, 0xF1	; 241
    7558:	8e 83       	std	Y+6, r24	; 0x06
    755a:	8c e8       	ldi	r24, 0x8C	; 140
    755c:	8f 83       	std	Y+7, r24	; 0x07
    755e:	0f 2e       	mov	r0, r31
    7560:	f0 e3       	ldi	r31, 0x30	; 48
    7562:	ff 2e       	mov	r15, r31
    7564:	f0 2d       	mov	r31, r0
    7566:	f8 86       	std	Y+8, r15	; 0x08
    7568:	be 01       	movw	r22, r28
    756a:	6f 5f       	subi	r22, 0xFF	; 255
    756c:	7f 4f       	sbci	r23, 0xFF	; 255
    756e:	8d 2d       	mov	r24, r13
    7570:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7574:	f5 01       	movw	r30, r10
    7576:	80 81       	ld	r24, Z
    7578:	89 83       	std	Y+1, r24	; 0x01
    757a:	81 e2       	ldi	r24, 0x21	; 33
    757c:	8a 83       	std	Y+2, r24	; 0x02
    757e:	fb 82       	std	Y+3, r15	; 0x03
    7580:	fc 82       	std	Y+4, r15	; 0x04
    7582:	fd 82       	std	Y+5, r15	; 0x05
    7584:	fe 82       	std	Y+6, r15	; 0x06
    7586:	ff 82       	std	Y+7, r15	; 0x07
    7588:	f8 86       	std	Y+8, r15	; 0x08
    758a:	be 01       	movw	r22, r28
    758c:	6f 5f       	subi	r22, 0xFF	; 255
    758e:	7f 4f       	sbci	r23, 0xFF	; 255
    7590:	8d 2d       	mov	r24, r13
    7592:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7596:	f5 01       	movw	r30, r10
    7598:	80 81       	ld	r24, Z
    759a:	89 83       	std	Y+1, r24	; 0x01
    759c:	82 e2       	ldi	r24, 0x22	; 34
    759e:	8a 83       	std	Y+2, r24	; 0x02
    75a0:	fb 82       	std	Y+3, r15	; 0x03
    75a2:	fc 82       	std	Y+4, r15	; 0x04
    75a4:	fd 82       	std	Y+5, r15	; 0x05
    75a6:	fe 82       	std	Y+6, r15	; 0x06
    75a8:	ff 82       	std	Y+7, r15	; 0x07
    75aa:	f8 86       	std	Y+8, r15	; 0x08
    75ac:	be 01       	movw	r22, r28
    75ae:	6f 5f       	subi	r22, 0xFF	; 255
    75b0:	7f 4f       	sbci	r23, 0xFF	; 255
    75b2:	8d 2d       	mov	r24, r13
    75b4:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    75b8:	f5 01       	movw	r30, r10
    75ba:	80 81       	ld	r24, Z
    75bc:	89 83       	std	Y+1, r24	; 0x01
    75be:	83 e2       	ldi	r24, 0x23	; 35
    75c0:	8a 83       	std	Y+2, r24	; 0x02
    75c2:	fb 82       	std	Y+3, r15	; 0x03
    75c4:	fc 82       	std	Y+4, r15	; 0x04
    75c6:	fd 82       	std	Y+5, r15	; 0x05
    75c8:	fe 82       	std	Y+6, r15	; 0x06
    75ca:	ff 82       	std	Y+7, r15	; 0x07
    75cc:	18 86       	std	Y+8, r1	; 0x08
    75ce:	be 01       	movw	r22, r28
    75d0:	6f 5f       	subi	r22, 0xFF	; 255
    75d2:	7f 4f       	sbci	r23, 0xFF	; 255
    75d4:	8d 2d       	mov	r24, r13
    75d6:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    75da:	84 e3       	ldi	r24, 0x34	; 52
    75dc:	80 9f       	mul	r24, r16
    75de:	f0 01       	movw	r30, r0
    75e0:	81 9f       	mul	r24, r17
    75e2:	f0 0d       	add	r31, r0
    75e4:	11 24       	eor	r1, r1
    75e6:	ec 56       	subi	r30, 0x6C	; 108
    75e8:	f8 49       	sbci	r31, 0x98	; 152
    75ea:	82 e0       	ldi	r24, 0x02	; 2
    75ec:	86 a3       	std	Z+38, r24	; 0x26
    75ee:	5f c2       	rjmp	.+1214   	; 0x7aae <lin_read_data_by_identify+0xa22>
    75f0:	84 e2       	ldi	r24, 0x24	; 36
    75f2:	8e 9d       	mul	r24, r14
    75f4:	f0 01       	movw	r30, r0
    75f6:	8f 9d       	mul	r24, r15
    75f8:	f0 0d       	add	r31, r0
    75fa:	11 24       	eor	r1, r1
    75fc:	ec 59       	subi	r30, 0x9C	; 156
    75fe:	fc 49       	sbci	r31, 0x9C	; 156
    7600:	a0 80       	ld	r10, Z
    7602:	b1 80       	ldd	r11, Z+1	; 0x01
    7604:	f5 01       	movw	r30, r10
    7606:	80 81       	ld	r24, Z
    7608:	89 83       	std	Y+1, r24	; 0x01
    760a:	80 e1       	ldi	r24, 0x10	; 16
    760c:	8a 83       	std	Y+2, r24	; 0x02
    760e:	8f e0       	ldi	r24, 0x0F	; 15
    7610:	8b 83       	std	Y+3, r24	; 0x03
    7612:	80 e4       	ldi	r24, 0x40	; 64
    7614:	8c 0d       	add	r24, r12
    7616:	8c 83       	std	Y+4, r24	; 0x04
    7618:	81 ef       	ldi	r24, 0xF1	; 241
    761a:	8d 83       	std	Y+5, r24	; 0x05
    761c:	87 e8       	ldi	r24, 0x87	; 135
    761e:	8e 83       	std	Y+6, r24	; 0x06
    7620:	0f 2e       	mov	r0, r31
    7622:	f0 e3       	ldi	r31, 0x30	; 48
    7624:	ff 2e       	mov	r15, r31
    7626:	f0 2d       	mov	r31, r0
    7628:	ff 82       	std	Y+7, r15	; 0x07
    762a:	f8 86       	std	Y+8, r15	; 0x08
    762c:	be 01       	movw	r22, r28
    762e:	6f 5f       	subi	r22, 0xFF	; 255
    7630:	7f 4f       	sbci	r23, 0xFF	; 255
    7632:	8d 2d       	mov	r24, r13
    7634:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7638:	f5 01       	movw	r30, r10
    763a:	80 81       	ld	r24, Z
    763c:	89 83       	std	Y+1, r24	; 0x01
    763e:	81 e2       	ldi	r24, 0x21	; 33
    7640:	8a 83       	std	Y+2, r24	; 0x02
    7642:	fb 82       	std	Y+3, r15	; 0x03
    7644:	fc 82       	std	Y+4, r15	; 0x04
    7646:	fd 82       	std	Y+5, r15	; 0x05
    7648:	fe 82       	std	Y+6, r15	; 0x06
    764a:	ff 82       	std	Y+7, r15	; 0x07
    764c:	f8 86       	std	Y+8, r15	; 0x08
    764e:	be 01       	movw	r22, r28
    7650:	6f 5f       	subi	r22, 0xFF	; 255
    7652:	7f 4f       	sbci	r23, 0xFF	; 255
    7654:	8d 2d       	mov	r24, r13
    7656:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    765a:	f5 01       	movw	r30, r10
    765c:	80 81       	ld	r24, Z
    765e:	89 83       	std	Y+1, r24	; 0x01
    7660:	82 e2       	ldi	r24, 0x22	; 34
    7662:	8a 83       	std	Y+2, r24	; 0x02
    7664:	fb 82       	std	Y+3, r15	; 0x03
    7666:	fc 82       	std	Y+4, r15	; 0x04
    7668:	fd 82       	std	Y+5, r15	; 0x05
    766a:	fe 82       	std	Y+6, r15	; 0x06
    766c:	ff 82       	std	Y+7, r15	; 0x07
    766e:	18 86       	std	Y+8, r1	; 0x08
    7670:	be 01       	movw	r22, r28
    7672:	6f 5f       	subi	r22, 0xFF	; 255
    7674:	7f 4f       	sbci	r23, 0xFF	; 255
    7676:	8d 2d       	mov	r24, r13
    7678:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    767c:	84 e3       	ldi	r24, 0x34	; 52
    767e:	80 9f       	mul	r24, r16
    7680:	f0 01       	movw	r30, r0
    7682:	81 9f       	mul	r24, r17
    7684:	f0 0d       	add	r31, r0
    7686:	11 24       	eor	r1, r1
    7688:	ec 56       	subi	r30, 0x6C	; 108
    768a:	f8 49       	sbci	r31, 0x98	; 152
    768c:	82 e0       	ldi	r24, 0x02	; 2
    768e:	86 a3       	std	Z+38, r24	; 0x26
    7690:	0e c2       	rjmp	.+1052   	; 0x7aae <lin_read_data_by_identify+0xa22>
    7692:	84 e2       	ldi	r24, 0x24	; 36
    7694:	8e 9d       	mul	r24, r14
    7696:	f0 01       	movw	r30, r0
    7698:	8f 9d       	mul	r24, r15
    769a:	f0 0d       	add	r31, r0
    769c:	11 24       	eor	r1, r1
    769e:	ec 59       	subi	r30, 0x9C	; 156
    76a0:	fc 49       	sbci	r31, 0x9C	; 156
    76a2:	a0 80       	ld	r10, Z
    76a4:	b1 80       	ldd	r11, Z+1	; 0x01
    76a6:	f5 01       	movw	r30, r10
    76a8:	80 81       	ld	r24, Z
    76aa:	89 83       	std	Y+1, r24	; 0x01
    76ac:	80 e1       	ldi	r24, 0x10	; 16
    76ae:	8a 83       	std	Y+2, r24	; 0x02
    76b0:	8b 83       	std	Y+3, r24	; 0x03
    76b2:	83 e1       	ldi	r24, 0x13	; 19
    76b4:	8c 83       	std	Y+4, r24	; 0x04
    76b6:	80 e4       	ldi	r24, 0x40	; 64
    76b8:	8c 0d       	add	r24, r12
    76ba:	8d 83       	std	Y+5, r24	; 0x05
    76bc:	81 ef       	ldi	r24, 0xF1	; 241
    76be:	8e 83       	std	Y+6, r24	; 0x06
    76c0:	80 e9       	ldi	r24, 0x90	; 144
    76c2:	8f 83       	std	Y+7, r24	; 0x07
    76c4:	0f 2e       	mov	r0, r31
    76c6:	f0 e3       	ldi	r31, 0x30	; 48
    76c8:	ff 2e       	mov	r15, r31
    76ca:	f0 2d       	mov	r31, r0
    76cc:	f8 86       	std	Y+8, r15	; 0x08
    76ce:	be 01       	movw	r22, r28
    76d0:	6f 5f       	subi	r22, 0xFF	; 255
    76d2:	7f 4f       	sbci	r23, 0xFF	; 255
    76d4:	8d 2d       	mov	r24, r13
    76d6:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    76da:	f5 01       	movw	r30, r10
    76dc:	80 81       	ld	r24, Z
    76de:	89 83       	std	Y+1, r24	; 0x01
    76e0:	81 e2       	ldi	r24, 0x21	; 33
    76e2:	8a 83       	std	Y+2, r24	; 0x02
    76e4:	fb 82       	std	Y+3, r15	; 0x03
    76e6:	fc 82       	std	Y+4, r15	; 0x04
    76e8:	fd 82       	std	Y+5, r15	; 0x05
    76ea:	fe 82       	std	Y+6, r15	; 0x06
    76ec:	ff 82       	std	Y+7, r15	; 0x07
    76ee:	f8 86       	std	Y+8, r15	; 0x08
    76f0:	be 01       	movw	r22, r28
    76f2:	6f 5f       	subi	r22, 0xFF	; 255
    76f4:	7f 4f       	sbci	r23, 0xFF	; 255
    76f6:	8d 2d       	mov	r24, r13
    76f8:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    76fc:	f5 01       	movw	r30, r10
    76fe:	80 81       	ld	r24, Z
    7700:	89 83       	std	Y+1, r24	; 0x01
    7702:	82 e2       	ldi	r24, 0x22	; 34
    7704:	8a 83       	std	Y+2, r24	; 0x02
    7706:	fb 82       	std	Y+3, r15	; 0x03
    7708:	fc 82       	std	Y+4, r15	; 0x04
    770a:	fd 82       	std	Y+5, r15	; 0x05
    770c:	fe 82       	std	Y+6, r15	; 0x06
    770e:	ff 82       	std	Y+7, r15	; 0x07
    7710:	f8 86       	std	Y+8, r15	; 0x08
    7712:	be 01       	movw	r22, r28
    7714:	6f 5f       	subi	r22, 0xFF	; 255
    7716:	7f 4f       	sbci	r23, 0xFF	; 255
    7718:	8d 2d       	mov	r24, r13
    771a:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    771e:	f5 01       	movw	r30, r10
    7720:	80 81       	ld	r24, Z
    7722:	89 83       	std	Y+1, r24	; 0x01
    7724:	83 e2       	ldi	r24, 0x23	; 35
    7726:	8a 83       	std	Y+2, r24	; 0x02
    7728:	fb 82       	std	Y+3, r15	; 0x03
    772a:	fc 82       	std	Y+4, r15	; 0x04
    772c:	fd 82       	std	Y+5, r15	; 0x05
    772e:	fe 82       	std	Y+6, r15	; 0x06
    7730:	1f 82       	std	Y+7, r1	; 0x07
    7732:	18 86       	std	Y+8, r1	; 0x08
    7734:	be 01       	movw	r22, r28
    7736:	6f 5f       	subi	r22, 0xFF	; 255
    7738:	7f 4f       	sbci	r23, 0xFF	; 255
    773a:	8d 2d       	mov	r24, r13
    773c:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7740:	84 e3       	ldi	r24, 0x34	; 52
    7742:	80 9f       	mul	r24, r16
    7744:	f0 01       	movw	r30, r0
    7746:	81 9f       	mul	r24, r17
    7748:	f0 0d       	add	r31, r0
    774a:	11 24       	eor	r1, r1
    774c:	ec 56       	subi	r30, 0x6C	; 108
    774e:	f8 49       	sbci	r31, 0x98	; 152
    7750:	82 e0       	ldi	r24, 0x02	; 2
    7752:	86 a3       	std	Z+38, r24	; 0x26
    7754:	ac c1       	rjmp	.+856    	; 0x7aae <lin_read_data_by_identify+0xa22>
    7756:	84 e2       	ldi	r24, 0x24	; 36
    7758:	8e 9d       	mul	r24, r14
    775a:	f0 01       	movw	r30, r0
    775c:	8f 9d       	mul	r24, r15
    775e:	f0 0d       	add	r31, r0
    7760:	11 24       	eor	r1, r1
    7762:	ec 59       	subi	r30, 0x9C	; 156
    7764:	fc 49       	sbci	r31, 0x9C	; 156
    7766:	a0 80       	ld	r10, Z
    7768:	b1 80       	ldd	r11, Z+1	; 0x01
    776a:	f5 01       	movw	r30, r10
    776c:	80 81       	ld	r24, Z
    776e:	89 83       	std	Y+1, r24	; 0x01
    7770:	80 e1       	ldi	r24, 0x10	; 16
    7772:	8a 83       	std	Y+2, r24	; 0x02
    7774:	8c e0       	ldi	r24, 0x0C	; 12
    7776:	8b 83       	std	Y+3, r24	; 0x03
    7778:	80 e4       	ldi	r24, 0x40	; 64
    777a:	8c 0d       	add	r24, r12
    777c:	8c 83       	std	Y+4, r24	; 0x04
    777e:	81 ef       	ldi	r24, 0xF1	; 241
    7780:	8d 83       	std	Y+5, r24	; 0x05
    7782:	88 e9       	ldi	r24, 0x98	; 152
    7784:	8e 83       	std	Y+6, r24	; 0x06
    7786:	0f 2e       	mov	r0, r31
    7788:	f0 e3       	ldi	r31, 0x30	; 48
    778a:	ff 2e       	mov	r15, r31
    778c:	f0 2d       	mov	r31, r0
    778e:	ff 82       	std	Y+7, r15	; 0x07
    7790:	f8 86       	std	Y+8, r15	; 0x08
    7792:	be 01       	movw	r22, r28
    7794:	6f 5f       	subi	r22, 0xFF	; 255
    7796:	7f 4f       	sbci	r23, 0xFF	; 255
    7798:	8d 2d       	mov	r24, r13
    779a:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    779e:	f5 01       	movw	r30, r10
    77a0:	80 81       	ld	r24, Z
    77a2:	89 83       	std	Y+1, r24	; 0x01
    77a4:	81 e2       	ldi	r24, 0x21	; 33
    77a6:	8a 83       	std	Y+2, r24	; 0x02
    77a8:	fb 82       	std	Y+3, r15	; 0x03
    77aa:	fc 82       	std	Y+4, r15	; 0x04
    77ac:	fd 82       	std	Y+5, r15	; 0x05
    77ae:	fe 82       	std	Y+6, r15	; 0x06
    77b0:	ff 82       	std	Y+7, r15	; 0x07
    77b2:	f8 86       	std	Y+8, r15	; 0x08
    77b4:	be 01       	movw	r22, r28
    77b6:	6f 5f       	subi	r22, 0xFF	; 255
    77b8:	7f 4f       	sbci	r23, 0xFF	; 255
    77ba:	8d 2d       	mov	r24, r13
    77bc:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    77c0:	f5 01       	movw	r30, r10
    77c2:	80 81       	ld	r24, Z
    77c4:	89 83       	std	Y+1, r24	; 0x01
    77c6:	82 e2       	ldi	r24, 0x22	; 34
    77c8:	8a 83       	std	Y+2, r24	; 0x02
    77ca:	fb 82       	std	Y+3, r15	; 0x03
    77cc:	fc 82       	std	Y+4, r15	; 0x04
    77ce:	1d 82       	std	Y+5, r1	; 0x05
    77d0:	1e 82       	std	Y+6, r1	; 0x06
    77d2:	1f 82       	std	Y+7, r1	; 0x07
    77d4:	18 86       	std	Y+8, r1	; 0x08
    77d6:	be 01       	movw	r22, r28
    77d8:	6f 5f       	subi	r22, 0xFF	; 255
    77da:	7f 4f       	sbci	r23, 0xFF	; 255
    77dc:	8d 2d       	mov	r24, r13
    77de:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    77e2:	84 e3       	ldi	r24, 0x34	; 52
    77e4:	80 9f       	mul	r24, r16
    77e6:	f0 01       	movw	r30, r0
    77e8:	81 9f       	mul	r24, r17
    77ea:	f0 0d       	add	r31, r0
    77ec:	11 24       	eor	r1, r1
    77ee:	ec 56       	subi	r30, 0x6C	; 108
    77f0:	f8 49       	sbci	r31, 0x98	; 152
    77f2:	82 e0       	ldi	r24, 0x02	; 2
    77f4:	86 a3       	std	Z+38, r24	; 0x26
    77f6:	5b c1       	rjmp	.+694    	; 0x7aae <lin_read_data_by_identify+0xa22>
    77f8:	84 e2       	ldi	r24, 0x24	; 36
    77fa:	8e 9d       	mul	r24, r14
    77fc:	f0 01       	movw	r30, r0
    77fe:	8f 9d       	mul	r24, r15
    7800:	f0 0d       	add	r31, r0
    7802:	11 24       	eor	r1, r1
    7804:	ec 59       	subi	r30, 0x9C	; 156
    7806:	fc 49       	sbci	r31, 0x9C	; 156
    7808:	a0 80       	ld	r10, Z
    780a:	b1 80       	ldd	r11, Z+1	; 0x01
    780c:	f5 01       	movw	r30, r10
    780e:	80 81       	ld	r24, Z
    7810:	89 83       	std	Y+1, r24	; 0x01
    7812:	80 e1       	ldi	r24, 0x10	; 16
    7814:	8a 83       	std	Y+2, r24	; 0x02
    7816:	86 e0       	ldi	r24, 0x06	; 6
    7818:	8b 83       	std	Y+3, r24	; 0x03
    781a:	80 e4       	ldi	r24, 0x40	; 64
    781c:	8c 0d       	add	r24, r12
    781e:	8c 83       	std	Y+4, r24	; 0x04
    7820:	81 ef       	ldi	r24, 0xF1	; 241
    7822:	8d 83       	std	Y+5, r24	; 0x05
    7824:	89 e9       	ldi	r24, 0x99	; 153
    7826:	8e 83       	std	Y+6, r24	; 0x06
    7828:	80 e2       	ldi	r24, 0x20	; 32
    782a:	8f 83       	std	Y+7, r24	; 0x07
    782c:	0f 2e       	mov	r0, r31
    782e:	f1 e2       	ldi	r31, 0x21	; 33
    7830:	ff 2e       	mov	r15, r31
    7832:	f0 2d       	mov	r31, r0
    7834:	f8 86       	std	Y+8, r15	; 0x08
    7836:	be 01       	movw	r22, r28
    7838:	6f 5f       	subi	r22, 0xFF	; 255
    783a:	7f 4f       	sbci	r23, 0xFF	; 255
    783c:	8d 2d       	mov	r24, r13
    783e:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7842:	f5 01       	movw	r30, r10
    7844:	80 81       	ld	r24, Z
    7846:	89 83       	std	Y+1, r24	; 0x01
    7848:	fa 82       	std	Y+2, r15	; 0x02
    784a:	82 e1       	ldi	r24, 0x12	; 18
    784c:	8b 83       	std	Y+3, r24	; 0x03
    784e:	86 e2       	ldi	r24, 0x26	; 38
    7850:	8c 83       	std	Y+4, r24	; 0x04
    7852:	1d 82       	std	Y+5, r1	; 0x05
    7854:	1e 82       	std	Y+6, r1	; 0x06
    7856:	1f 82       	std	Y+7, r1	; 0x07
    7858:	18 86       	std	Y+8, r1	; 0x08
    785a:	be 01       	movw	r22, r28
    785c:	6f 5f       	subi	r22, 0xFF	; 255
    785e:	7f 4f       	sbci	r23, 0xFF	; 255
    7860:	8d 2d       	mov	r24, r13
    7862:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7866:	84 e3       	ldi	r24, 0x34	; 52
    7868:	80 9f       	mul	r24, r16
    786a:	f0 01       	movw	r30, r0
    786c:	81 9f       	mul	r24, r17
    786e:	f0 0d       	add	r31, r0
    7870:	11 24       	eor	r1, r1
    7872:	ec 56       	subi	r30, 0x6C	; 108
    7874:	f8 49       	sbci	r31, 0x98	; 152
    7876:	82 e0       	ldi	r24, 0x02	; 2
    7878:	86 a3       	std	Z+38, r24	; 0x26
    787a:	19 c1       	rjmp	.+562    	; 0x7aae <lin_read_data_by_identify+0xa22>
    787c:	84 e2       	ldi	r24, 0x24	; 36
    787e:	8e 9d       	mul	r24, r14
    7880:	f0 01       	movw	r30, r0
    7882:	8f 9d       	mul	r24, r15
    7884:	f0 0d       	add	r31, r0
    7886:	11 24       	eor	r1, r1
    7888:	ec 59       	subi	r30, 0x9C	; 156
    788a:	fc 49       	sbci	r31, 0x9C	; 156
    788c:	80 80       	ld	r8, Z
    788e:	91 80       	ldd	r9, Z+1	; 0x01
    7890:	f4 01       	movw	r30, r8
    7892:	80 81       	ld	r24, Z
    7894:	89 83       	std	Y+1, r24	; 0x01
    7896:	80 e1       	ldi	r24, 0x10	; 16
    7898:	8a 83       	std	Y+2, r24	; 0x02
    789a:	86 e0       	ldi	r24, 0x06	; 6
    789c:	8b 83       	std	Y+3, r24	; 0x03
    789e:	80 e4       	ldi	r24, 0x40	; 64
    78a0:	8c 0d       	add	r24, r12
    78a2:	8c 83       	std	Y+4, r24	; 0x04
    78a4:	81 ef       	ldi	r24, 0xF1	; 241
    78a6:	8d 83       	std	Y+5, r24	; 0x05
    78a8:	8d e9       	ldi	r24, 0x9D	; 157
    78aa:	8e 83       	std	Y+6, r24	; 0x06
    78ac:	80 e2       	ldi	r24, 0x20	; 32
    78ae:	8f 83       	std	Y+7, r24	; 0x07
    78b0:	0f 2e       	mov	r0, r31
    78b2:	f1 e2       	ldi	r31, 0x21	; 33
    78b4:	bf 2e       	mov	r11, r31
    78b6:	f0 2d       	mov	r31, r0
    78b8:	b8 86       	std	Y+8, r11	; 0x08
    78ba:	be 01       	movw	r22, r28
    78bc:	6f 5f       	subi	r22, 0xFF	; 255
    78be:	7f 4f       	sbci	r23, 0xFF	; 255
    78c0:	8d 2d       	mov	r24, r13
    78c2:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    78c6:	f4 01       	movw	r30, r8
    78c8:	80 81       	ld	r24, Z
    78ca:	89 83       	std	Y+1, r24	; 0x01
    78cc:	ba 82       	std	Y+2, r11	; 0x02
    78ce:	82 e1       	ldi	r24, 0x12	; 18
    78d0:	8b 83       	std	Y+3, r24	; 0x03
    78d2:	86 e2       	ldi	r24, 0x26	; 38
    78d4:	8c 83       	std	Y+4, r24	; 0x04
    78d6:	1d 82       	std	Y+5, r1	; 0x05
    78d8:	1e 82       	std	Y+6, r1	; 0x06
    78da:	1f 82       	std	Y+7, r1	; 0x07
    78dc:	18 86       	std	Y+8, r1	; 0x08
    78de:	be 01       	movw	r22, r28
    78e0:	6f 5f       	subi	r22, 0xFF	; 255
    78e2:	7f 4f       	sbci	r23, 0xFF	; 255
    78e4:	8d 2d       	mov	r24, r13
    78e6:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    78ea:	84 e3       	ldi	r24, 0x34	; 52
    78ec:	80 9f       	mul	r24, r16
    78ee:	f0 01       	movw	r30, r0
    78f0:	81 9f       	mul	r24, r17
    78f2:	f0 0d       	add	r31, r0
    78f4:	11 24       	eor	r1, r1
    78f6:	ec 56       	subi	r30, 0x6C	; 108
    78f8:	f8 49       	sbci	r31, 0x98	; 152
    78fa:	82 e0       	ldi	r24, 0x02	; 2
    78fc:	86 a3       	std	Z+38, r24	; 0x26
    78fe:	84 e2       	ldi	r24, 0x24	; 36
    7900:	8e 9d       	mul	r24, r14
    7902:	f0 01       	movw	r30, r0
    7904:	8f 9d       	mul	r24, r15
    7906:	f0 0d       	add	r31, r0
    7908:	11 24       	eor	r1, r1
    790a:	ec 59       	subi	r30, 0x9C	; 156
    790c:	fc 49       	sbci	r31, 0x9C	; 156
    790e:	a0 80       	ld	r10, Z
    7910:	b1 80       	ldd	r11, Z+1	; 0x01
    7912:	f5 01       	movw	r30, r10
    7914:	80 81       	ld	r24, Z
    7916:	89 83       	std	Y+1, r24	; 0x01
    7918:	80 e1       	ldi	r24, 0x10	; 16
    791a:	8a 83       	std	Y+2, r24	; 0x02
    791c:	87 e0       	ldi	r24, 0x07	; 7
    791e:	8b 83       	std	Y+3, r24	; 0x03
    7920:	80 e4       	ldi	r24, 0x40	; 64
    7922:	8c 0d       	add	r24, r12
    7924:	8c 83       	std	Y+4, r24	; 0x04
    7926:	81 ef       	ldi	r24, 0xF1	; 241
    7928:	8d 83       	std	Y+5, r24	; 0x05
    792a:	8f eb       	ldi	r24, 0xBF	; 191
    792c:	8e 83       	std	Y+6, r24	; 0x06
    792e:	88 e4       	ldi	r24, 0x48	; 72
    7930:	8f 83       	std	Y+7, r24	; 0x07
    7932:	82 e3       	ldi	r24, 0x32	; 50
    7934:	88 87       	std	Y+8, r24	; 0x08
    7936:	be 01       	movw	r22, r28
    7938:	6f 5f       	subi	r22, 0xFF	; 255
    793a:	7f 4f       	sbci	r23, 0xFF	; 255
    793c:	8d 2d       	mov	r24, r13
    793e:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7942:	f5 01       	movw	r30, r10
    7944:	80 81       	ld	r24, Z
    7946:	89 83       	std	Y+1, r24	; 0x01
    7948:	81 e2       	ldi	r24, 0x21	; 33
    794a:	8a 83       	std	Y+2, r24	; 0x02
    794c:	8e e2       	ldi	r24, 0x2E	; 46
    794e:	8b 83       	std	Y+3, r24	; 0x03
    7950:	80 e3       	ldi	r24, 0x30	; 48
    7952:	8c 83       	std	Y+4, r24	; 0x04
    7954:	81 e3       	ldi	r24, 0x31	; 49
    7956:	8d 83       	std	Y+5, r24	; 0x05
    7958:	1e 82       	std	Y+6, r1	; 0x06
    795a:	1f 82       	std	Y+7, r1	; 0x07
    795c:	18 86       	std	Y+8, r1	; 0x08
    795e:	be 01       	movw	r22, r28
    7960:	6f 5f       	subi	r22, 0xFF	; 255
    7962:	7f 4f       	sbci	r23, 0xFF	; 255
    7964:	8d 2d       	mov	r24, r13
    7966:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    796a:	84 e3       	ldi	r24, 0x34	; 52
    796c:	80 9f       	mul	r24, r16
    796e:	f0 01       	movw	r30, r0
    7970:	81 9f       	mul	r24, r17
    7972:	f0 0d       	add	r31, r0
    7974:	11 24       	eor	r1, r1
    7976:	ec 56       	subi	r30, 0x6C	; 108
    7978:	f8 49       	sbci	r31, 0x98	; 152
    797a:	82 e0       	ldi	r24, 0x02	; 2
    797c:	86 a3       	std	Z+38, r24	; 0x26
    797e:	84 e2       	ldi	r24, 0x24	; 36
    7980:	8e 9d       	mul	r24, r14
    7982:	f0 01       	movw	r30, r0
    7984:	8f 9d       	mul	r24, r15
    7986:	f0 0d       	add	r31, r0
    7988:	11 24       	eor	r1, r1
    798a:	ec 59       	subi	r30, 0x9C	; 156
    798c:	fc 49       	sbci	r31, 0x9C	; 156
    798e:	a0 80       	ld	r10, Z
    7990:	b1 80       	ldd	r11, Z+1	; 0x01
    7992:	f5 01       	movw	r30, r10
    7994:	80 81       	ld	r24, Z
    7996:	89 83       	std	Y+1, r24	; 0x01
    7998:	80 e1       	ldi	r24, 0x10	; 16
    799a:	8a 83       	std	Y+2, r24	; 0x02
    799c:	8a e0       	ldi	r24, 0x0A	; 10
    799e:	8b 83       	std	Y+3, r24	; 0x03
    79a0:	80 e4       	ldi	r24, 0x40	; 64
    79a2:	8c 0d       	add	r24, r12
    79a4:	8c 83       	std	Y+4, r24	; 0x04
    79a6:	81 ef       	ldi	r24, 0xF1	; 241
    79a8:	8d 83       	std	Y+5, r24	; 0x05
    79aa:	80 ec       	ldi	r24, 0xC0	; 192
    79ac:	8e 83       	std	Y+6, r24	; 0x06
    79ae:	0f 2e       	mov	r0, r31
    79b0:	f0 e3       	ldi	r31, 0x30	; 48
    79b2:	ff 2e       	mov	r15, r31
    79b4:	f0 2d       	mov	r31, r0
    79b6:	ff 82       	std	Y+7, r15	; 0x07
    79b8:	83 e3       	ldi	r24, 0x33	; 51
    79ba:	88 87       	std	Y+8, r24	; 0x08
    79bc:	be 01       	movw	r22, r28
    79be:	6f 5f       	subi	r22, 0xFF	; 255
    79c0:	7f 4f       	sbci	r23, 0xFF	; 255
    79c2:	8d 2d       	mov	r24, r13
    79c4:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    79c8:	f5 01       	movw	r30, r10
    79ca:	80 81       	ld	r24, Z
    79cc:	89 83       	std	Y+1, r24	; 0x01
    79ce:	81 e2       	ldi	r24, 0x21	; 33
    79d0:	8a 83       	std	Y+2, r24	; 0x02
    79d2:	8e e2       	ldi	r24, 0x2E	; 46
    79d4:	8b 83       	std	Y+3, r24	; 0x03
    79d6:	fc 82       	std	Y+4, r15	; 0x04
    79d8:	fd 82       	std	Y+5, r15	; 0x05
    79da:	8e 83       	std	Y+6, r24	; 0x06
    79dc:	ff 82       	std	Y+7, r15	; 0x07
    79de:	f8 86       	std	Y+8, r15	; 0x08
    79e0:	be 01       	movw	r22, r28
    79e2:	6f 5f       	subi	r22, 0xFF	; 255
    79e4:	7f 4f       	sbci	r23, 0xFF	; 255
    79e6:	8d 2d       	mov	r24, r13
    79e8:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    79ec:	84 e3       	ldi	r24, 0x34	; 52
    79ee:	80 9f       	mul	r24, r16
    79f0:	f0 01       	movw	r30, r0
    79f2:	81 9f       	mul	r24, r17
    79f4:	f0 0d       	add	r31, r0
    79f6:	11 24       	eor	r1, r1
    79f8:	ec 56       	subi	r30, 0x6C	; 108
    79fa:	f8 49       	sbci	r31, 0x98	; 152
    79fc:	82 e0       	ldi	r24, 0x02	; 2
    79fe:	86 a3       	std	Z+38, r24	; 0x26
    7a00:	56 c0       	rjmp	.+172    	; 0x7aae <lin_read_data_by_identify+0xa22>
    7a02:	84 e2       	ldi	r24, 0x24	; 36
    7a04:	8e 9d       	mul	r24, r14
    7a06:	f0 01       	movw	r30, r0
    7a08:	8f 9d       	mul	r24, r15
    7a0a:	f0 0d       	add	r31, r0
    7a0c:	11 24       	eor	r1, r1
    7a0e:	ec 59       	subi	r30, 0x9C	; 156
    7a10:	fc 49       	sbci	r31, 0x9C	; 156
    7a12:	a0 80       	ld	r10, Z
    7a14:	b1 80       	ldd	r11, Z+1	; 0x01
    7a16:	f5 01       	movw	r30, r10
    7a18:	80 81       	ld	r24, Z
    7a1a:	89 83       	std	Y+1, r24	; 0x01
    7a1c:	80 e1       	ldi	r24, 0x10	; 16
    7a1e:	8a 83       	std	Y+2, r24	; 0x02
    7a20:	8f e0       	ldi	r24, 0x0F	; 15
    7a22:	8b 83       	std	Y+3, r24	; 0x03
    7a24:	80 e4       	ldi	r24, 0x40	; 64
    7a26:	8c 0d       	add	r24, r12
    7a28:	8c 83       	std	Y+4, r24	; 0x04
    7a2a:	81 ef       	ldi	r24, 0xF1	; 241
    7a2c:	8d 83       	std	Y+5, r24	; 0x05
    7a2e:	80 ed       	ldi	r24, 0xD0	; 208
    7a30:	8e 83       	std	Y+6, r24	; 0x06
    7a32:	0f 2e       	mov	r0, r31
    7a34:	f0 e3       	ldi	r31, 0x30	; 48
    7a36:	ff 2e       	mov	r15, r31
    7a38:	f0 2d       	mov	r31, r0
    7a3a:	ff 82       	std	Y+7, r15	; 0x07
    7a3c:	f8 86       	std	Y+8, r15	; 0x08
    7a3e:	be 01       	movw	r22, r28
    7a40:	6f 5f       	subi	r22, 0xFF	; 255
    7a42:	7f 4f       	sbci	r23, 0xFF	; 255
    7a44:	8d 2d       	mov	r24, r13
    7a46:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7a4a:	f5 01       	movw	r30, r10
    7a4c:	80 81       	ld	r24, Z
    7a4e:	89 83       	std	Y+1, r24	; 0x01
    7a50:	81 e2       	ldi	r24, 0x21	; 33
    7a52:	8a 83       	std	Y+2, r24	; 0x02
    7a54:	fb 82       	std	Y+3, r15	; 0x03
    7a56:	fc 82       	std	Y+4, r15	; 0x04
    7a58:	fd 82       	std	Y+5, r15	; 0x05
    7a5a:	fe 82       	std	Y+6, r15	; 0x06
    7a5c:	ff 82       	std	Y+7, r15	; 0x07
    7a5e:	f8 86       	std	Y+8, r15	; 0x08
    7a60:	be 01       	movw	r22, r28
    7a62:	6f 5f       	subi	r22, 0xFF	; 255
    7a64:	7f 4f       	sbci	r23, 0xFF	; 255
    7a66:	8d 2d       	mov	r24, r13
    7a68:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7a6c:	f5 01       	movw	r30, r10
    7a6e:	80 81       	ld	r24, Z
    7a70:	89 83       	std	Y+1, r24	; 0x01
    7a72:	82 e2       	ldi	r24, 0x22	; 34
    7a74:	8a 83       	std	Y+2, r24	; 0x02
    7a76:	fb 82       	std	Y+3, r15	; 0x03
    7a78:	fc 82       	std	Y+4, r15	; 0x04
    7a7a:	fd 82       	std	Y+5, r15	; 0x05
    7a7c:	fe 82       	std	Y+6, r15	; 0x06
    7a7e:	ff 82       	std	Y+7, r15	; 0x07
    7a80:	18 86       	std	Y+8, r1	; 0x08
    7a82:	be 01       	movw	r22, r28
    7a84:	6f 5f       	subi	r22, 0xFF	; 255
    7a86:	7f 4f       	sbci	r23, 0xFF	; 255
    7a88:	8d 2d       	mov	r24, r13
    7a8a:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7a8e:	84 e3       	ldi	r24, 0x34	; 52
    7a90:	80 9f       	mul	r24, r16
    7a92:	f0 01       	movw	r30, r0
    7a94:	81 9f       	mul	r24, r17
    7a96:	f0 0d       	add	r31, r0
    7a98:	11 24       	eor	r1, r1
    7a9a:	ec 56       	subi	r30, 0x6C	; 108
    7a9c:	f8 49       	sbci	r31, 0x98	; 152
    7a9e:	82 e0       	ldi	r24, 0x02	; 2
    7aa0:	86 a3       	std	Z+38, r24	; 0x26
    7aa2:	20 e0       	ldi	r18, 0x00	; 0
    7aa4:	40 e0       	ldi	r20, 0x00	; 0
    7aa6:	62 e2       	ldi	r22, 0x22	; 34
    7aa8:	8d 2d       	mov	r24, r13
    7aaa:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    7aae:	28 96       	adiw	r28, 0x08	; 8
    7ab0:	cd bf       	out	0x3d, r28	; 61
    7ab2:	de bf       	out	0x3e, r29	; 62
    7ab4:	df 91       	pop	r29
    7ab6:	cf 91       	pop	r28
    7ab8:	1f 91       	pop	r17
    7aba:	0f 91       	pop	r16
    7abc:	ff 90       	pop	r15
    7abe:	ef 90       	pop	r14
    7ac0:	df 90       	pop	r13
    7ac2:	cf 90       	pop	r12
    7ac4:	bf 90       	pop	r11
    7ac6:	af 90       	pop	r10
    7ac8:	9f 90       	pop	r9
    7aca:	8f 90       	pop	r8
    7acc:	08 95       	ret

00007ace <lin_slave_session_ctr>:
    7ace:	ff 92       	push	r15
    7ad0:	0f 93       	push	r16
    7ad2:	1f 93       	push	r17
    7ad4:	cf 93       	push	r28
    7ad6:	df 93       	push	r29
    7ad8:	cd b7       	in	r28, 0x3d	; 61
    7ada:	de b7       	in	r29, 0x3e	; 62
    7adc:	28 97       	sbiw	r28, 0x08	; 8
    7ade:	cd bf       	out	0x3d, r28	; 61
    7ae0:	de bf       	out	0x3e, r29	; 62
    7ae2:	08 2f       	mov	r16, r24
    7ae4:	10 e0       	ldi	r17, 0x00	; 0
    7ae6:	9c e1       	ldi	r25, 0x1C	; 28
    7ae8:	90 9f       	mul	r25, r16
    7aea:	f0 01       	movw	r30, r0
    7aec:	91 9f       	mul	r25, r17
    7aee:	f0 0d       	add	r31, r0
    7af0:	11 24       	eor	r1, r1
    7af2:	e8 5b       	subi	r30, 0xB8	; 184
    7af4:	fc 49       	sbci	r31, 0x9C	; 156
    7af6:	42 89       	ldd	r20, Z+18	; 0x12
    7af8:	50 e0       	ldi	r21, 0x00	; 0
    7afa:	94 e3       	ldi	r25, 0x34	; 52
    7afc:	90 9f       	mul	r25, r16
    7afe:	d0 01       	movw	r26, r0
    7b00:	91 9f       	mul	r25, r17
    7b02:	b0 0d       	add	r27, r0
    7b04:	11 24       	eor	r1, r1
    7b06:	ac 56       	subi	r26, 0x6C	; 108
    7b08:	b8 49       	sbci	r27, 0x98	; 152
    7b0a:	54 96       	adiw	r26, 0x14	; 20
    7b0c:	2d 91       	ld	r18, X+
    7b0e:	3c 91       	ld	r19, X
    7b10:	55 97       	sbiw	r26, 0x15	; 21
    7b12:	1b 96       	adiw	r26, 0x0b	; 11
    7b14:	ed 91       	ld	r30, X+
    7b16:	fc 91       	ld	r31, X
    7b18:	1c 97       	sbiw	r26, 0x0c	; 12
    7b1a:	ee 0f       	add	r30, r30
    7b1c:	ff 1f       	adc	r31, r31
    7b1e:	ee 0f       	add	r30, r30
    7b20:	ff 1f       	adc	r31, r31
    7b22:	ee 0f       	add	r30, r30
    7b24:	ff 1f       	adc	r31, r31
    7b26:	e2 0f       	add	r30, r18
    7b28:	f3 1f       	adc	r31, r19
    7b2a:	23 81       	ldd	r18, Z+3	; 0x03
    7b2c:	20 93 93 67 	sts	0x6793, r18	; 0x806793 <sub_func_id>
    7b30:	91 81       	ldd	r25, Z+1	; 0x01
    7b32:	9f 70       	andi	r25, 0x0F	; 15
    7b34:	92 30       	cpi	r25, 0x02	; 2
    7b36:	09 f0       	breq	.+2      	; 0x7b3a <lin_slave_session_ctr+0x6c>
    7b38:	85 c0       	rjmp	.+266    	; 0x7c44 <lin_slave_session_ctr+0x176>
    7b3a:	21 30       	cpi	r18, 0x01	; 1
    7b3c:	69 f1       	breq	.+90     	; 0x7b98 <lin_slave_session_ctr+0xca>
    7b3e:	20 f0       	brcs	.+8      	; 0x7b48 <lin_slave_session_ctr+0x7a>
    7b40:	22 30       	cpi	r18, 0x02	; 2
    7b42:	09 f4       	brne	.+2      	; 0x7b46 <lin_slave_session_ctr+0x78>
    7b44:	51 c0       	rjmp	.+162    	; 0x7be8 <lin_slave_session_ctr+0x11a>
    7b46:	78 c0       	rjmp	.+240    	; 0x7c38 <lin_slave_session_ctr+0x16a>
    7b48:	94 e2       	ldi	r25, 0x24	; 36
    7b4a:	94 9f       	mul	r25, r20
    7b4c:	f0 01       	movw	r30, r0
    7b4e:	95 9f       	mul	r25, r21
    7b50:	f0 0d       	add	r31, r0
    7b52:	11 24       	eor	r1, r1
    7b54:	ec 59       	subi	r30, 0x9C	; 156
    7b56:	fc 49       	sbci	r31, 0x9C	; 156
    7b58:	01 90       	ld	r0, Z+
    7b5a:	f0 81       	ld	r31, Z
    7b5c:	e0 2d       	mov	r30, r0
    7b5e:	90 81       	ld	r25, Z
    7b60:	99 83       	std	Y+1, r25	; 0x01
    7b62:	68 94       	set
    7b64:	ff 24       	eor	r15, r15
    7b66:	f1 f8       	bld	r15, 1
    7b68:	fa 82       	std	Y+2, r15	; 0x02
    7b6a:	90 e5       	ldi	r25, 0x50	; 80
    7b6c:	9b 83       	std	Y+3, r25	; 0x03
    7b6e:	2c 83       	std	Y+4, r18	; 0x04
    7b70:	9f ef       	ldi	r25, 0xFF	; 255
    7b72:	9d 83       	std	Y+5, r25	; 0x05
    7b74:	9e 83       	std	Y+6, r25	; 0x06
    7b76:	9f 83       	std	Y+7, r25	; 0x07
    7b78:	98 87       	std	Y+8, r25	; 0x08
    7b7a:	be 01       	movw	r22, r28
    7b7c:	6f 5f       	subi	r22, 0xFF	; 255
    7b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b80:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7b84:	84 e3       	ldi	r24, 0x34	; 52
    7b86:	80 9f       	mul	r24, r16
    7b88:	f0 01       	movw	r30, r0
    7b8a:	81 9f       	mul	r24, r17
    7b8c:	f0 0d       	add	r31, r0
    7b8e:	11 24       	eor	r1, r1
    7b90:	ec 56       	subi	r30, 0x6C	; 108
    7b92:	f8 49       	sbci	r31, 0x98	; 152
    7b94:	f6 a2       	std	Z+38, r15	; 0x26
    7b96:	5b c0       	rjmp	.+182    	; 0x7c4e <lin_slave_session_ctr+0x180>
    7b98:	94 e2       	ldi	r25, 0x24	; 36
    7b9a:	94 9f       	mul	r25, r20
    7b9c:	f0 01       	movw	r30, r0
    7b9e:	95 9f       	mul	r25, r21
    7ba0:	f0 0d       	add	r31, r0
    7ba2:	11 24       	eor	r1, r1
    7ba4:	ec 59       	subi	r30, 0x9C	; 156
    7ba6:	fc 49       	sbci	r31, 0x9C	; 156
    7ba8:	01 90       	ld	r0, Z+
    7baa:	f0 81       	ld	r31, Z
    7bac:	e0 2d       	mov	r30, r0
    7bae:	90 81       	ld	r25, Z
    7bb0:	99 83       	std	Y+1, r25	; 0x01
    7bb2:	68 94       	set
    7bb4:	ff 24       	eor	r15, r15
    7bb6:	f1 f8       	bld	r15, 1
    7bb8:	fa 82       	std	Y+2, r15	; 0x02
    7bba:	90 e5       	ldi	r25, 0x50	; 80
    7bbc:	9b 83       	std	Y+3, r25	; 0x03
    7bbe:	2c 83       	std	Y+4, r18	; 0x04
    7bc0:	9f ef       	ldi	r25, 0xFF	; 255
    7bc2:	9d 83       	std	Y+5, r25	; 0x05
    7bc4:	9e 83       	std	Y+6, r25	; 0x06
    7bc6:	9f 83       	std	Y+7, r25	; 0x07
    7bc8:	98 87       	std	Y+8, r25	; 0x08
    7bca:	be 01       	movw	r22, r28
    7bcc:	6f 5f       	subi	r22, 0xFF	; 255
    7bce:	7f 4f       	sbci	r23, 0xFF	; 255
    7bd0:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7bd4:	84 e3       	ldi	r24, 0x34	; 52
    7bd6:	80 9f       	mul	r24, r16
    7bd8:	f0 01       	movw	r30, r0
    7bda:	81 9f       	mul	r24, r17
    7bdc:	f0 0d       	add	r31, r0
    7bde:	11 24       	eor	r1, r1
    7be0:	ec 56       	subi	r30, 0x6C	; 108
    7be2:	f8 49       	sbci	r31, 0x98	; 152
    7be4:	f6 a2       	std	Z+38, r15	; 0x26
    7be6:	33 c0       	rjmp	.+102    	; 0x7c4e <lin_slave_session_ctr+0x180>
    7be8:	94 e2       	ldi	r25, 0x24	; 36
    7bea:	94 9f       	mul	r25, r20
    7bec:	f0 01       	movw	r30, r0
    7bee:	95 9f       	mul	r25, r21
    7bf0:	f0 0d       	add	r31, r0
    7bf2:	11 24       	eor	r1, r1
    7bf4:	ec 59       	subi	r30, 0x9C	; 156
    7bf6:	fc 49       	sbci	r31, 0x9C	; 156
    7bf8:	01 90       	ld	r0, Z+
    7bfa:	f0 81       	ld	r31, Z
    7bfc:	e0 2d       	mov	r30, r0
    7bfe:	90 81       	ld	r25, Z
    7c00:	99 83       	std	Y+1, r25	; 0x01
    7c02:	68 94       	set
    7c04:	ff 24       	eor	r15, r15
    7c06:	f1 f8       	bld	r15, 1
    7c08:	fa 82       	std	Y+2, r15	; 0x02
    7c0a:	90 e5       	ldi	r25, 0x50	; 80
    7c0c:	9b 83       	std	Y+3, r25	; 0x03
    7c0e:	2c 83       	std	Y+4, r18	; 0x04
    7c10:	9f ef       	ldi	r25, 0xFF	; 255
    7c12:	9d 83       	std	Y+5, r25	; 0x05
    7c14:	9e 83       	std	Y+6, r25	; 0x06
    7c16:	9f 83       	std	Y+7, r25	; 0x07
    7c18:	98 87       	std	Y+8, r25	; 0x08
    7c1a:	be 01       	movw	r22, r28
    7c1c:	6f 5f       	subi	r22, 0xFF	; 255
    7c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c20:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7c24:	84 e3       	ldi	r24, 0x34	; 52
    7c26:	80 9f       	mul	r24, r16
    7c28:	f0 01       	movw	r30, r0
    7c2a:	81 9f       	mul	r24, r17
    7c2c:	f0 0d       	add	r31, r0
    7c2e:	11 24       	eor	r1, r1
    7c30:	ec 56       	subi	r30, 0x6C	; 108
    7c32:	f8 49       	sbci	r31, 0x98	; 152
    7c34:	f6 a2       	std	Z+38, r15	; 0x26
    7c36:	0b c0       	rjmp	.+22     	; 0x7c4e <lin_slave_session_ctr+0x180>
    7c38:	22 e1       	ldi	r18, 0x12	; 18
    7c3a:	40 e0       	ldi	r20, 0x00	; 0
    7c3c:	60 e1       	ldi	r22, 0x10	; 16
    7c3e:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    7c42:	05 c0       	rjmp	.+10     	; 0x7c4e <lin_slave_session_ctr+0x180>
    7c44:	23 e1       	ldi	r18, 0x13	; 19
    7c46:	40 e0       	ldi	r20, 0x00	; 0
    7c48:	60 e1       	ldi	r22, 0x10	; 16
    7c4a:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
    7c4e:	28 96       	adiw	r28, 0x08	; 8
    7c50:	cd bf       	out	0x3d, r28	; 61
    7c52:	de bf       	out	0x3e, r29	; 62
    7c54:	df 91       	pop	r29
    7c56:	cf 91       	pop	r28
    7c58:	1f 91       	pop	r17
    7c5a:	0f 91       	pop	r16
    7c5c:	ff 90       	pop	r15
    7c5e:	08 95       	ret

00007c60 <lin_routine_control>:
    7c60:	0f 93       	push	r16
    7c62:	1f 93       	push	r17
    7c64:	cf 93       	push	r28
    7c66:	df 93       	push	r29
    7c68:	cd b7       	in	r28, 0x3d	; 61
    7c6a:	de b7       	in	r29, 0x3e	; 62
    7c6c:	28 97       	sbiw	r28, 0x08	; 8
    7c6e:	cd bf       	out	0x3d, r28	; 61
    7c70:	de bf       	out	0x3e, r29	; 62
    7c72:	08 2f       	mov	r16, r24
    7c74:	10 e0       	ldi	r17, 0x00	; 0
    7c76:	9c e1       	ldi	r25, 0x1C	; 28
    7c78:	90 9f       	mul	r25, r16
    7c7a:	f0 01       	movw	r30, r0
    7c7c:	91 9f       	mul	r25, r17
    7c7e:	f0 0d       	add	r31, r0
    7c80:	11 24       	eor	r1, r1
    7c82:	e8 5b       	subi	r30, 0xB8	; 184
    7c84:	fc 49       	sbci	r31, 0x9C	; 156
    7c86:	42 89       	ldd	r20, Z+18	; 0x12
    7c88:	50 e0       	ldi	r21, 0x00	; 0
    7c8a:	94 e3       	ldi	r25, 0x34	; 52
    7c8c:	90 9f       	mul	r25, r16
    7c8e:	d0 01       	movw	r26, r0
    7c90:	91 9f       	mul	r25, r17
    7c92:	b0 0d       	add	r27, r0
    7c94:	11 24       	eor	r1, r1
    7c96:	ac 56       	subi	r26, 0x6C	; 108
    7c98:	b8 49       	sbci	r27, 0x98	; 152
    7c9a:	54 96       	adiw	r26, 0x14	; 20
    7c9c:	2d 91       	ld	r18, X+
    7c9e:	3c 91       	ld	r19, X
    7ca0:	55 97       	sbiw	r26, 0x15	; 21
    7ca2:	1b 96       	adiw	r26, 0x0b	; 11
    7ca4:	ed 91       	ld	r30, X+
    7ca6:	fc 91       	ld	r31, X
    7ca8:	1c 97       	sbiw	r26, 0x0c	; 12
    7caa:	ee 0f       	add	r30, r30
    7cac:	ff 1f       	adc	r31, r31
    7cae:	ee 0f       	add	r30, r30
    7cb0:	ff 1f       	adc	r31, r31
    7cb2:	ee 0f       	add	r30, r30
    7cb4:	ff 1f       	adc	r31, r31
    7cb6:	e2 0f       	add	r30, r18
    7cb8:	f3 1f       	adc	r31, r19
    7cba:	91 81       	ldd	r25, Z+1	; 0x01
    7cbc:	92 95       	swap	r25
    7cbe:	9f 70       	andi	r25, 0x0F	; 15
    7cc0:	09 f0       	breq	.+2      	; 0x7cc4 <lin_routine_control+0x64>
    7cc2:	4c c0       	rjmp	.+152    	; 0x7d5c <lin_routine_control+0xfc>
    7cc4:	24 81       	ldd	r18, Z+4	; 0x04
    7cc6:	30 e0       	ldi	r19, 0x00	; 0
    7cc8:	32 2f       	mov	r19, r18
    7cca:	22 27       	eor	r18, r18
    7ccc:	95 81       	ldd	r25, Z+5	; 0x05
    7cce:	29 2b       	or	r18, r25
    7cd0:	93 81       	ldd	r25, Z+3	; 0x03
    7cd2:	91 30       	cpi	r25, 0x01	; 1
    7cd4:	f9 f4       	brne	.+62     	; 0x7d14 <lin_routine_control+0xb4>
    7cd6:	23 30       	cpi	r18, 0x03	; 3
    7cd8:	62 e0       	ldi	r22, 0x02	; 2
    7cda:	36 07       	cpc	r19, r22
    7cdc:	d9 f4       	brne	.+54     	; 0x7d14 <lin_routine_control+0xb4>
    7cde:	94 e2       	ldi	r25, 0x24	; 36
    7ce0:	94 9f       	mul	r25, r20
    7ce2:	f0 01       	movw	r30, r0
    7ce4:	95 9f       	mul	r25, r21
    7ce6:	f0 0d       	add	r31, r0
    7ce8:	11 24       	eor	r1, r1
    7cea:	ec 59       	subi	r30, 0x9C	; 156
    7cec:	fc 49       	sbci	r31, 0x9C	; 156
    7cee:	01 90       	ld	r0, Z+
    7cf0:	f0 81       	ld	r31, Z
    7cf2:	e0 2d       	mov	r30, r0
    7cf4:	90 81       	ld	r25, Z
    7cf6:	99 83       	std	Y+1, r25	; 0x01
    7cf8:	95 e0       	ldi	r25, 0x05	; 5
    7cfa:	9a 83       	std	Y+2, r25	; 0x02
    7cfc:	91 e7       	ldi	r25, 0x71	; 113
    7cfe:	9b 83       	std	Y+3, r25	; 0x03
    7d00:	91 e0       	ldi	r25, 0x01	; 1
    7d02:	9c 83       	std	Y+4, r25	; 0x04
    7d04:	92 e0       	ldi	r25, 0x02	; 2
    7d06:	9d 83       	std	Y+5, r25	; 0x05
    7d08:	23 e0       	ldi	r18, 0x03	; 3
    7d0a:	2e 83       	std	Y+6, r18	; 0x06
    7d0c:	9f 83       	std	Y+7, r25	; 0x07
    7d0e:	9f ef       	ldi	r25, 0xFF	; 255
    7d10:	98 87       	std	Y+8, r25	; 0x08
    7d12:	4f c0       	rjmp	.+158    	; 0x7db2 <lin_routine_control+0x152>
    7d14:	93 30       	cpi	r25, 0x03	; 3
    7d16:	09 f0       	breq	.+2      	; 0x7d1a <lin_routine_control+0xba>
    7d18:	4c c0       	rjmp	.+152    	; 0x7db2 <lin_routine_control+0x152>
    7d1a:	23 30       	cpi	r18, 0x03	; 3
    7d1c:	32 40       	sbci	r19, 0x02	; 2
    7d1e:	09 f0       	breq	.+2      	; 0x7d22 <lin_routine_control+0xc2>
    7d20:	48 c0       	rjmp	.+144    	; 0x7db2 <lin_routine_control+0x152>
    7d22:	94 e2       	ldi	r25, 0x24	; 36
    7d24:	94 9f       	mul	r25, r20
    7d26:	f0 01       	movw	r30, r0
    7d28:	95 9f       	mul	r25, r21
    7d2a:	f0 0d       	add	r31, r0
    7d2c:	11 24       	eor	r1, r1
    7d2e:	ec 59       	subi	r30, 0x9C	; 156
    7d30:	fc 49       	sbci	r31, 0x9C	; 156
    7d32:	01 90       	ld	r0, Z+
    7d34:	f0 81       	ld	r31, Z
    7d36:	e0 2d       	mov	r30, r0
    7d38:	90 81       	ld	r25, Z
    7d3a:	99 83       	std	Y+1, r25	; 0x01
    7d3c:	95 e0       	ldi	r25, 0x05	; 5
    7d3e:	9a 83       	std	Y+2, r25	; 0x02
    7d40:	91 e7       	ldi	r25, 0x71	; 113
    7d42:	9b 83       	std	Y+3, r25	; 0x03
    7d44:	23 e0       	ldi	r18, 0x03	; 3
    7d46:	2c 83       	std	Y+4, r18	; 0x04
    7d48:	92 e0       	ldi	r25, 0x02	; 2
    7d4a:	9d 83       	std	Y+5, r25	; 0x05
    7d4c:	2e 83       	std	Y+6, r18	; 0x06
    7d4e:	9f 83       	std	Y+7, r25	; 0x07
    7d50:	9f ef       	ldi	r25, 0xFF	; 255
    7d52:	98 87       	std	Y+8, r25	; 0x08
    7d54:	91 e0       	ldi	r25, 0x01	; 1
    7d56:	90 93 2f 66 	sts	0x662F, r25	; 0x80662f <eeprom_set_boot_flg>
    7d5a:	2b c0       	rjmp	.+86     	; 0x7db2 <lin_routine_control+0x152>
    7d5c:	25 81       	ldd	r18, Z+5	; 0x05
    7d5e:	30 e0       	ldi	r19, 0x00	; 0
    7d60:	32 2f       	mov	r19, r18
    7d62:	22 27       	eor	r18, r18
    7d64:	96 81       	ldd	r25, Z+6	; 0x06
    7d66:	29 2b       	or	r18, r25
    7d68:	94 81       	ldd	r25, Z+4	; 0x04
    7d6a:	91 30       	cpi	r25, 0x01	; 1
    7d6c:	11 f5       	brne	.+68     	; 0x7db2 <lin_routine_control+0x152>
    7d6e:	21 15       	cp	r18, r1
    7d70:	3f 4f       	sbci	r19, 0xFF	; 255
    7d72:	f9 f4       	brne	.+62     	; 0x7db2 <lin_routine_control+0x152>
    7d74:	21 e0       	ldi	r18, 0x01	; 1
    7d76:	30 e0       	ldi	r19, 0x00	; 0
    7d78:	20 93 2d 66 	sts	0x662D, r18	; 0x80662d <erase_flag>
    7d7c:	30 93 2e 66 	sts	0x662E, r19	; 0x80662e <erase_flag+0x1>
    7d80:	94 e2       	ldi	r25, 0x24	; 36
    7d82:	94 9f       	mul	r25, r20
    7d84:	f0 01       	movw	r30, r0
    7d86:	95 9f       	mul	r25, r21
    7d88:	f0 0d       	add	r31, r0
    7d8a:	11 24       	eor	r1, r1
    7d8c:	ec 59       	subi	r30, 0x9C	; 156
    7d8e:	fc 49       	sbci	r31, 0x9C	; 156
    7d90:	01 90       	ld	r0, Z+
    7d92:	f0 81       	ld	r31, Z
    7d94:	e0 2d       	mov	r30, r0
    7d96:	90 81       	ld	r25, Z
    7d98:	99 83       	std	Y+1, r25	; 0x01
    7d9a:	95 e0       	ldi	r25, 0x05	; 5
    7d9c:	9a 83       	std	Y+2, r25	; 0x02
    7d9e:	91 e7       	ldi	r25, 0x71	; 113
    7da0:	9b 83       	std	Y+3, r25	; 0x03
    7da2:	91 e0       	ldi	r25, 0x01	; 1
    7da4:	9c 83       	std	Y+4, r25	; 0x04
    7da6:	9f ef       	ldi	r25, 0xFF	; 255
    7da8:	9d 83       	std	Y+5, r25	; 0x05
    7daa:	1e 82       	std	Y+6, r1	; 0x06
    7dac:	22 e0       	ldi	r18, 0x02	; 2
    7dae:	2f 83       	std	Y+7, r18	; 0x07
    7db0:	98 87       	std	Y+8, r25	; 0x08
    7db2:	be 01       	movw	r22, r28
    7db4:	6f 5f       	subi	r22, 0xFF	; 255
    7db6:	7f 4f       	sbci	r23, 0xFF	; 255
    7db8:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7dbc:	84 e3       	ldi	r24, 0x34	; 52
    7dbe:	80 9f       	mul	r24, r16
    7dc0:	f0 01       	movw	r30, r0
    7dc2:	81 9f       	mul	r24, r17
    7dc4:	f0 0d       	add	r31, r0
    7dc6:	11 24       	eor	r1, r1
    7dc8:	ec 56       	subi	r30, 0x6C	; 108
    7dca:	f8 49       	sbci	r31, 0x98	; 152
    7dcc:	82 e0       	ldi	r24, 0x02	; 2
    7dce:	86 a3       	std	Z+38, r24	; 0x26
    7dd0:	28 96       	adiw	r28, 0x08	; 8
    7dd2:	cd bf       	out	0x3d, r28	; 61
    7dd4:	de bf       	out	0x3e, r29	; 62
    7dd6:	df 91       	pop	r29
    7dd8:	cf 91       	pop	r28
    7dda:	1f 91       	pop	r17
    7ddc:	0f 91       	pop	r16
    7dde:	08 95       	ret

00007de0 <control_dtc_setting>:
    7de0:	ff 92       	push	r15
    7de2:	0f 93       	push	r16
    7de4:	1f 93       	push	r17
    7de6:	cf 93       	push	r28
    7de8:	df 93       	push	r29
    7dea:	cd b7       	in	r28, 0x3d	; 61
    7dec:	de b7       	in	r29, 0x3e	; 62
    7dee:	28 97       	sbiw	r28, 0x08	; 8
    7df0:	cd bf       	out	0x3d, r28	; 61
    7df2:	de bf       	out	0x3e, r29	; 62
    7df4:	08 2f       	mov	r16, r24
    7df6:	10 e0       	ldi	r17, 0x00	; 0
    7df8:	9c e1       	ldi	r25, 0x1C	; 28
    7dfa:	90 9f       	mul	r25, r16
    7dfc:	f0 01       	movw	r30, r0
    7dfe:	91 9f       	mul	r25, r17
    7e00:	f0 0d       	add	r31, r0
    7e02:	11 24       	eor	r1, r1
    7e04:	e8 5b       	subi	r30, 0xB8	; 184
    7e06:	fc 49       	sbci	r31, 0x9C	; 156
    7e08:	22 89       	ldd	r18, Z+18	; 0x12
    7e0a:	30 e0       	ldi	r19, 0x00	; 0
    7e0c:	94 e3       	ldi	r25, 0x34	; 52
    7e0e:	90 9f       	mul	r25, r16
    7e10:	d0 01       	movw	r26, r0
    7e12:	91 9f       	mul	r25, r17
    7e14:	b0 0d       	add	r27, r0
    7e16:	11 24       	eor	r1, r1
    7e18:	ac 56       	subi	r26, 0x6C	; 108
    7e1a:	b8 49       	sbci	r27, 0x98	; 152
    7e1c:	54 96       	adiw	r26, 0x14	; 20
    7e1e:	4d 91       	ld	r20, X+
    7e20:	5c 91       	ld	r21, X
    7e22:	55 97       	sbiw	r26, 0x15	; 21
    7e24:	1b 96       	adiw	r26, 0x0b	; 11
    7e26:	ed 91       	ld	r30, X+
    7e28:	fc 91       	ld	r31, X
    7e2a:	1c 97       	sbiw	r26, 0x0c	; 12
    7e2c:	ee 0f       	add	r30, r30
    7e2e:	ff 1f       	adc	r31, r31
    7e30:	ee 0f       	add	r30, r30
    7e32:	ff 1f       	adc	r31, r31
    7e34:	ee 0f       	add	r30, r30
    7e36:	ff 1f       	adc	r31, r31
    7e38:	e4 0f       	add	r30, r20
    7e3a:	f5 1f       	adc	r31, r21
    7e3c:	93 81       	ldd	r25, Z+3	; 0x03
    7e3e:	91 30       	cpi	r25, 0x01	; 1
    7e40:	49 f5       	brne	.+82     	; 0x7e94 <control_dtc_setting+0xb4>
    7e42:	94 e2       	ldi	r25, 0x24	; 36
    7e44:	92 9f       	mul	r25, r18
    7e46:	f0 01       	movw	r30, r0
    7e48:	93 9f       	mul	r25, r19
    7e4a:	f0 0d       	add	r31, r0
    7e4c:	11 24       	eor	r1, r1
    7e4e:	ec 59       	subi	r30, 0x9C	; 156
    7e50:	fc 49       	sbci	r31, 0x9C	; 156
    7e52:	01 90       	ld	r0, Z+
    7e54:	f0 81       	ld	r31, Z
    7e56:	e0 2d       	mov	r30, r0
    7e58:	90 81       	ld	r25, Z
    7e5a:	99 83       	std	Y+1, r25	; 0x01
    7e5c:	68 94       	set
    7e5e:	ff 24       	eor	r15, r15
    7e60:	f1 f8       	bld	r15, 1
    7e62:	fa 82       	std	Y+2, r15	; 0x02
    7e64:	95 ec       	ldi	r25, 0xC5	; 197
    7e66:	9b 83       	std	Y+3, r25	; 0x03
    7e68:	91 e0       	ldi	r25, 0x01	; 1
    7e6a:	9c 83       	std	Y+4, r25	; 0x04
    7e6c:	9f ef       	ldi	r25, 0xFF	; 255
    7e6e:	9d 83       	std	Y+5, r25	; 0x05
    7e70:	9e 83       	std	Y+6, r25	; 0x06
    7e72:	9f 83       	std	Y+7, r25	; 0x07
    7e74:	98 87       	std	Y+8, r25	; 0x08
    7e76:	be 01       	movw	r22, r28
    7e78:	6f 5f       	subi	r22, 0xFF	; 255
    7e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e7c:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7e80:	84 e3       	ldi	r24, 0x34	; 52
    7e82:	80 9f       	mul	r24, r16
    7e84:	f0 01       	movw	r30, r0
    7e86:	81 9f       	mul	r24, r17
    7e88:	f0 0d       	add	r31, r0
    7e8a:	11 24       	eor	r1, r1
    7e8c:	ec 56       	subi	r30, 0x6C	; 108
    7e8e:	f8 49       	sbci	r31, 0x98	; 152
    7e90:	f6 a2       	std	Z+38, r15	; 0x26
    7e92:	29 c0       	rjmp	.+82     	; 0x7ee6 <control_dtc_setting+0x106>
    7e94:	92 30       	cpi	r25, 0x02	; 2
    7e96:	39 f5       	brne	.+78     	; 0x7ee6 <control_dtc_setting+0x106>
    7e98:	94 e2       	ldi	r25, 0x24	; 36
    7e9a:	92 9f       	mul	r25, r18
    7e9c:	f0 01       	movw	r30, r0
    7e9e:	93 9f       	mul	r25, r19
    7ea0:	f0 0d       	add	r31, r0
    7ea2:	11 24       	eor	r1, r1
    7ea4:	ec 59       	subi	r30, 0x9C	; 156
    7ea6:	fc 49       	sbci	r31, 0x9C	; 156
    7ea8:	01 90       	ld	r0, Z+
    7eaa:	f0 81       	ld	r31, Z
    7eac:	e0 2d       	mov	r30, r0
    7eae:	90 81       	ld	r25, Z
    7eb0:	99 83       	std	Y+1, r25	; 0x01
    7eb2:	68 94       	set
    7eb4:	ff 24       	eor	r15, r15
    7eb6:	f1 f8       	bld	r15, 1
    7eb8:	fa 82       	std	Y+2, r15	; 0x02
    7eba:	95 ec       	ldi	r25, 0xC5	; 197
    7ebc:	9b 83       	std	Y+3, r25	; 0x03
    7ebe:	fc 82       	std	Y+4, r15	; 0x04
    7ec0:	9f ef       	ldi	r25, 0xFF	; 255
    7ec2:	9d 83       	std	Y+5, r25	; 0x05
    7ec4:	9e 83       	std	Y+6, r25	; 0x06
    7ec6:	9f 83       	std	Y+7, r25	; 0x07
    7ec8:	98 87       	std	Y+8, r25	; 0x08
    7eca:	be 01       	movw	r22, r28
    7ecc:	6f 5f       	subi	r22, 0xFF	; 255
    7ece:	7f 4f       	sbci	r23, 0xFF	; 255
    7ed0:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    7ed4:	84 e3       	ldi	r24, 0x34	; 52
    7ed6:	80 9f       	mul	r24, r16
    7ed8:	f0 01       	movw	r30, r0
    7eda:	81 9f       	mul	r24, r17
    7edc:	f0 0d       	add	r31, r0
    7ede:	11 24       	eor	r1, r1
    7ee0:	ec 56       	subi	r30, 0x6C	; 108
    7ee2:	f8 49       	sbci	r31, 0x98	; 152
    7ee4:	f6 a2       	std	Z+38, r15	; 0x26
    7ee6:	28 96       	adiw	r28, 0x08	; 8
    7ee8:	cd bf       	out	0x3d, r28	; 61
    7eea:	de bf       	out	0x3e, r29	; 62
    7eec:	df 91       	pop	r29
    7eee:	cf 91       	pop	r28
    7ef0:	1f 91       	pop	r17
    7ef2:	0f 91       	pop	r16
    7ef4:	ff 90       	pop	r15
    7ef6:	08 95       	ret

00007ef8 <lin_transfer_data>:
    7ef8:	9f 92       	push	r9
    7efa:	af 92       	push	r10
    7efc:	bf 92       	push	r11
    7efe:	cf 92       	push	r12
    7f00:	df 92       	push	r13
    7f02:	ef 92       	push	r14
    7f04:	ff 92       	push	r15
    7f06:	0f 93       	push	r16
    7f08:	1f 93       	push	r17
    7f0a:	cf 93       	push	r28
    7f0c:	df 93       	push	r29
    7f0e:	cd b7       	in	r28, 0x3d	; 61
    7f10:	de b7       	in	r29, 0x3e	; 62
    7f12:	28 97       	sbiw	r28, 0x08	; 8
    7f14:	cd bf       	out	0x3d, r28	; 61
    7f16:	de bf       	out	0x3e, r29	; 62
    7f18:	c0 90 27 64 	lds	r12, 0x6427	; 0x806427 <update_cnt>
    7f1c:	d0 90 28 64 	lds	r13, 0x6428	; 0x806428 <update_cnt+0x1>
    7f20:	08 2f       	mov	r16, r24
    7f22:	10 e0       	ldi	r17, 0x00	; 0
    7f24:	9c e1       	ldi	r25, 0x1C	; 28
    7f26:	90 9f       	mul	r25, r16
    7f28:	f0 01       	movw	r30, r0
    7f2a:	91 9f       	mul	r25, r17
    7f2c:	f0 0d       	add	r31, r0
    7f2e:	11 24       	eor	r1, r1
    7f30:	e8 5b       	subi	r30, 0xB8	; 184
    7f32:	fc 49       	sbci	r31, 0x9C	; 156
    7f34:	e2 88       	ldd	r14, Z+18	; 0x12
    7f36:	f1 2c       	mov	r15, r1
    7f38:	94 e3       	ldi	r25, 0x34	; 52
    7f3a:	90 9f       	mul	r25, r16
    7f3c:	f0 01       	movw	r30, r0
    7f3e:	91 9f       	mul	r25, r17
    7f40:	f0 0d       	add	r31, r0
    7f42:	11 24       	eor	r1, r1
    7f44:	ec 56       	subi	r30, 0x6C	; 108
    7f46:	f8 49       	sbci	r31, 0x98	; 152
    7f48:	a4 89       	ldd	r26, Z+20	; 0x14
    7f4a:	b5 89       	ldd	r27, Z+21	; 0x15
    7f4c:	03 84       	ldd	r0, Z+11	; 0x0b
    7f4e:	f4 85       	ldd	r31, Z+12	; 0x0c
    7f50:	e0 2d       	mov	r30, r0
    7f52:	ee 0f       	add	r30, r30
    7f54:	ff 1f       	adc	r31, r31
    7f56:	ee 0f       	add	r30, r30
    7f58:	ff 1f       	adc	r31, r31
    7f5a:	ee 0f       	add	r30, r30
    7f5c:	ff 1f       	adc	r31, r31
    7f5e:	bf 01       	movw	r22, r30
    7f60:	6a 0f       	add	r22, r26
    7f62:	7b 1f       	adc	r23, r27
    7f64:	fb 01       	movw	r30, r22
    7f66:	91 81       	ldd	r25, Z+1	; 0x01
    7f68:	92 95       	swap	r25
    7f6a:	9f 70       	andi	r25, 0x0F	; 15
    7f6c:	09 f4       	brne	.+2      	; 0x7f70 <lin_transfer_data+0x78>
    7f6e:	f0 c0       	rjmp	.+480    	; 0x8150 <__RODATA_PM_OFFSET__+0x150>
    7f70:	94 80       	ldd	r9, Z+4	; 0x04
    7f72:	42 81       	ldd	r20, Z+2	; 0x02
    7f74:	42 50       	subi	r20, 0x02	; 2
    7f76:	b0 90 92 67 	lds	r11, 0x6792	; 0x806792 <history_blcok_count>
    7f7a:	9b 10       	cpse	r9, r11
    7f7c:	d2 c0       	rjmp	.+420    	; 0x8122 <__RODATA_PM_OFFSET__+0x122>
    7f7e:	95 81       	ldd	r25, Z+5	; 0x05
    7f80:	96 01       	movw	r18, r12
    7f82:	27 5d       	subi	r18, 0xD7	; 215
    7f84:	3b 49       	sbci	r19, 0x9B	; 155
    7f86:	f9 01       	movw	r30, r18
    7f88:	90 83       	st	Z, r25
    7f8a:	fb 01       	movw	r30, r22
    7f8c:	96 81       	ldd	r25, Z+6	; 0x06
    7f8e:	96 01       	movw	r18, r12
    7f90:	26 5d       	subi	r18, 0xD6	; 214
    7f92:	3b 49       	sbci	r19, 0x9B	; 155
    7f94:	f9 01       	movw	r30, r18
    7f96:	90 83       	st	Z, r25
    7f98:	96 01       	movw	r18, r12
    7f9a:	2d 5f       	subi	r18, 0xFD	; 253
    7f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    7f9e:	fb 01       	movw	r30, r22
    7fa0:	97 81       	ldd	r25, Z+7	; 0x07
    7fa2:	f6 01       	movw	r30, r12
    7fa4:	e5 5d       	subi	r30, 0xD5	; 213
    7fa6:	fb 49       	sbci	r31, 0x9B	; 155
    7fa8:	90 83       	st	Z, r25
    7faa:	61 e0       	ldi	r22, 0x01	; 1
    7fac:	70 e0       	ldi	r23, 0x00	; 0
    7fae:	90 e0       	ldi	r25, 0x00	; 0
    7fb0:	74 c0       	rjmp	.+232    	; 0x809a <__RODATA_PM_OFFSET__+0x9a>
    7fb2:	94 17       	cp	r25, r20
    7fb4:	88 f4       	brcc	.+34     	; 0x7fd8 <lin_transfer_data+0xe0>
    7fb6:	9f 5f       	subi	r25, 0xFF	; 255
    7fb8:	fb 01       	movw	r30, r22
    7fba:	ee 0f       	add	r30, r30
    7fbc:	ff 1f       	adc	r31, r31
    7fbe:	ee 0f       	add	r30, r30
    7fc0:	ff 1f       	adc	r31, r31
    7fc2:	ee 0f       	add	r30, r30
    7fc4:	ff 1f       	adc	r31, r31
    7fc6:	ea 0f       	add	r30, r26
    7fc8:	fb 1f       	adc	r31, r27
    7fca:	a2 80       	ldd	r10, Z+2	; 0x02
    7fcc:	f9 01       	movw	r30, r18
    7fce:	e7 5d       	subi	r30, 0xD7	; 215
    7fd0:	fb 49       	sbci	r31, 0x9B	; 155
    7fd2:	a0 82       	st	Z, r10
    7fd4:	2f 5f       	subi	r18, 0xFF	; 255
    7fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    7fd8:	94 17       	cp	r25, r20
    7fda:	88 f4       	brcc	.+34     	; 0x7ffe <lin_transfer_data+0x106>
    7fdc:	9f 5f       	subi	r25, 0xFF	; 255
    7fde:	fb 01       	movw	r30, r22
    7fe0:	ee 0f       	add	r30, r30
    7fe2:	ff 1f       	adc	r31, r31
    7fe4:	ee 0f       	add	r30, r30
    7fe6:	ff 1f       	adc	r31, r31
    7fe8:	ee 0f       	add	r30, r30
    7fea:	ff 1f       	adc	r31, r31
    7fec:	ea 0f       	add	r30, r26
    7fee:	fb 1f       	adc	r31, r27
    7ff0:	a3 80       	ldd	r10, Z+3	; 0x03
    7ff2:	f9 01       	movw	r30, r18
    7ff4:	e7 5d       	subi	r30, 0xD7	; 215
    7ff6:	fb 49       	sbci	r31, 0x9B	; 155
    7ff8:	a0 82       	st	Z, r10
    7ffa:	2f 5f       	subi	r18, 0xFF	; 255
    7ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    7ffe:	94 17       	cp	r25, r20
    8000:	88 f4       	brcc	.+34     	; 0x8024 <__RODATA_PM_OFFSET__+0x24>
    8002:	9f 5f       	subi	r25, 0xFF	; 255
    8004:	fb 01       	movw	r30, r22
    8006:	ee 0f       	add	r30, r30
    8008:	ff 1f       	adc	r31, r31
    800a:	ee 0f       	add	r30, r30
    800c:	ff 1f       	adc	r31, r31
    800e:	ee 0f       	add	r30, r30
    8010:	ff 1f       	adc	r31, r31
    8012:	ea 0f       	add	r30, r26
    8014:	fb 1f       	adc	r31, r27
    8016:	a4 80       	ldd	r10, Z+4	; 0x04
    8018:	f9 01       	movw	r30, r18
    801a:	e7 5d       	subi	r30, 0xD7	; 215
    801c:	fb 49       	sbci	r31, 0x9B	; 155
    801e:	a0 82       	st	Z, r10
    8020:	2f 5f       	subi	r18, 0xFF	; 255
    8022:	3f 4f       	sbci	r19, 0xFF	; 255
    8024:	94 17       	cp	r25, r20
    8026:	88 f4       	brcc	.+34     	; 0x804a <__RODATA_PM_OFFSET__+0x4a>
    8028:	9f 5f       	subi	r25, 0xFF	; 255
    802a:	fb 01       	movw	r30, r22
    802c:	ee 0f       	add	r30, r30
    802e:	ff 1f       	adc	r31, r31
    8030:	ee 0f       	add	r30, r30
    8032:	ff 1f       	adc	r31, r31
    8034:	ee 0f       	add	r30, r30
    8036:	ff 1f       	adc	r31, r31
    8038:	ea 0f       	add	r30, r26
    803a:	fb 1f       	adc	r31, r27
    803c:	a5 80       	ldd	r10, Z+5	; 0x05
    803e:	f9 01       	movw	r30, r18
    8040:	e7 5d       	subi	r30, 0xD7	; 215
    8042:	fb 49       	sbci	r31, 0x9B	; 155
    8044:	a0 82       	st	Z, r10
    8046:	2f 5f       	subi	r18, 0xFF	; 255
    8048:	3f 4f       	sbci	r19, 0xFF	; 255
    804a:	94 17       	cp	r25, r20
    804c:	88 f4       	brcc	.+34     	; 0x8070 <__RODATA_PM_OFFSET__+0x70>
    804e:	9f 5f       	subi	r25, 0xFF	; 255
    8050:	fb 01       	movw	r30, r22
    8052:	ee 0f       	add	r30, r30
    8054:	ff 1f       	adc	r31, r31
    8056:	ee 0f       	add	r30, r30
    8058:	ff 1f       	adc	r31, r31
    805a:	ee 0f       	add	r30, r30
    805c:	ff 1f       	adc	r31, r31
    805e:	ea 0f       	add	r30, r26
    8060:	fb 1f       	adc	r31, r27
    8062:	a6 80       	ldd	r10, Z+6	; 0x06
    8064:	f9 01       	movw	r30, r18
    8066:	e7 5d       	subi	r30, 0xD7	; 215
    8068:	fb 49       	sbci	r31, 0x9B	; 155
    806a:	a0 82       	st	Z, r10
    806c:	2f 5f       	subi	r18, 0xFF	; 255
    806e:	3f 4f       	sbci	r19, 0xFF	; 255
    8070:	94 17       	cp	r25, r20
    8072:	88 f4       	brcc	.+34     	; 0x8096 <__RODATA_PM_OFFSET__+0x96>
    8074:	9f 5f       	subi	r25, 0xFF	; 255
    8076:	fb 01       	movw	r30, r22
    8078:	ee 0f       	add	r30, r30
    807a:	ff 1f       	adc	r31, r31
    807c:	ee 0f       	add	r30, r30
    807e:	ff 1f       	adc	r31, r31
    8080:	ee 0f       	add	r30, r30
    8082:	ff 1f       	adc	r31, r31
    8084:	ea 0f       	add	r30, r26
    8086:	fb 1f       	adc	r31, r27
    8088:	a7 80       	ldd	r10, Z+7	; 0x07
    808a:	f9 01       	movw	r30, r18
    808c:	e7 5d       	subi	r30, 0xD7	; 215
    808e:	fb 49       	sbci	r31, 0x9B	; 155
    8090:	a0 82       	st	Z, r10
    8092:	2f 5f       	subi	r18, 0xFF	; 255
    8094:	3f 4f       	sbci	r19, 0xFF	; 255
    8096:	6f 5f       	subi	r22, 0xFF	; 255
    8098:	7f 4f       	sbci	r23, 0xFF	; 255
    809a:	54 e3       	ldi	r21, 0x34	; 52
    809c:	50 9f       	mul	r21, r16
    809e:	f0 01       	movw	r30, r0
    80a0:	51 9f       	mul	r21, r17
    80a2:	f0 0d       	add	r31, r0
    80a4:	11 24       	eor	r1, r1
    80a6:	ec 56       	subi	r30, 0x6C	; 108
    80a8:	f8 49       	sbci	r31, 0x98	; 152
    80aa:	05 84       	ldd	r0, Z+13	; 0x0d
    80ac:	f6 85       	ldd	r31, Z+14	; 0x0e
    80ae:	e0 2d       	mov	r30, r0
    80b0:	e6 17       	cp	r30, r22
    80b2:	f7 07       	cpc	r31, r23
    80b4:	08 f0       	brcs	.+2      	; 0x80b8 <__RODATA_PM_OFFSET__+0xb8>
    80b6:	7d cf       	rjmp	.-262    	; 0x7fb2 <lin_transfer_data+0xba>
    80b8:	b3 94       	inc	r11
    80ba:	b0 92 92 67 	sts	0x6792, r11	; 0x806792 <history_blcok_count>
    80be:	24 2f       	mov	r18, r20
    80c0:	30 e0       	ldi	r19, 0x00	; 0
    80c2:	c2 0e       	add	r12, r18
    80c4:	d3 1e       	adc	r13, r19
    80c6:	c0 92 27 64 	sts	0x6427, r12	; 0x806427 <update_cnt>
    80ca:	d0 92 28 64 	sts	0x6428, r13	; 0x806428 <update_cnt+0x1>
    80ce:	60 91 25 64 	lds	r22, 0x6425	; 0x806425 <bin_size_cnt>
    80d2:	70 91 26 64 	lds	r23, 0x6426	; 0x806426 <bin_size_cnt+0x1>
    80d6:	26 0f       	add	r18, r22
    80d8:	37 1f       	adc	r19, r23
    80da:	20 93 25 64 	sts	0x6425, r18	; 0x806425 <bin_size_cnt>
    80de:	30 93 26 64 	sts	0x6426, r19	; 0x806426 <bin_size_cnt+0x1>
    80e2:	c1 14       	cp	r12, r1
    80e4:	f2 e0       	ldi	r31, 0x02	; 2
    80e6:	df 06       	cpc	r13, r31
    80e8:	58 f0       	brcs	.+22     	; 0x8100 <__RODATA_PM_OFFSET__+0x100>
    80ea:	10 92 27 64 	sts	0x6427, r1	; 0x806427 <update_cnt>
    80ee:	10 92 28 64 	sts	0x6428, r1	; 0x806428 <update_cnt+0x1>
    80f2:	21 e0       	ldi	r18, 0x01	; 1
    80f4:	30 e0       	ldi	r19, 0x00	; 0
    80f6:	20 93 2b 66 	sts	0x662B, r18	; 0x80662b <flash_flag>
    80fa:	30 93 2c 66 	sts	0x662C, r19	; 0x80662c <flash_flag+0x1>
    80fe:	11 c0       	rjmp	.+34     	; 0x8122 <__RODATA_PM_OFFSET__+0x122>
    8100:	20 3d       	cpi	r18, 0xD0	; 208
    8102:	34 45       	sbci	r19, 0x54	; 84
    8104:	70 f0       	brcs	.+28     	; 0x8122 <__RODATA_PM_OFFSET__+0x122>
    8106:	10 92 27 64 	sts	0x6427, r1	; 0x806427 <update_cnt>
    810a:	10 92 28 64 	sts	0x6428, r1	; 0x806428 <update_cnt+0x1>
    810e:	21 e0       	ldi	r18, 0x01	; 1
    8110:	30 e0       	ldi	r19, 0x00	; 0
    8112:	20 93 2b 66 	sts	0x662B, r18	; 0x80662b <flash_flag>
    8116:	30 93 2c 66 	sts	0x662C, r19	; 0x80662c <flash_flag+0x1>
    811a:	20 93 29 66 	sts	0x6629, r18	; 0x806629 <jump_flag>
    811e:	30 93 2a 66 	sts	0x662A, r19	; 0x80662a <jump_flag+0x1>
    8122:	94 e2       	ldi	r25, 0x24	; 36
    8124:	9e 9d       	mul	r25, r14
    8126:	f0 01       	movw	r30, r0
    8128:	9f 9d       	mul	r25, r15
    812a:	f0 0d       	add	r31, r0
    812c:	11 24       	eor	r1, r1
    812e:	ec 59       	subi	r30, 0x9C	; 156
    8130:	fc 49       	sbci	r31, 0x9C	; 156
    8132:	01 90       	ld	r0, Z+
    8134:	f0 81       	ld	r31, Z
    8136:	e0 2d       	mov	r30, r0
    8138:	90 81       	ld	r25, Z
    813a:	99 83       	std	Y+1, r25	; 0x01
    813c:	92 e0       	ldi	r25, 0x02	; 2
    813e:	9a 83       	std	Y+2, r25	; 0x02
    8140:	96 e7       	ldi	r25, 0x76	; 118
    8142:	9b 83       	std	Y+3, r25	; 0x03
    8144:	9c 82       	std	Y+4, r9	; 0x04
    8146:	9f ef       	ldi	r25, 0xFF	; 255
    8148:	9d 83       	std	Y+5, r25	; 0x05
    814a:	9e 83       	std	Y+6, r25	; 0x06
    814c:	9f 83       	std	Y+7, r25	; 0x07
    814e:	98 87       	std	Y+8, r25	; 0x08
    8150:	be 01       	movw	r22, r28
    8152:	6f 5f       	subi	r22, 0xFF	; 255
    8154:	7f 4f       	sbci	r23, 0xFF	; 255
    8156:	0e 94 4e 46 	call	0x8c9c	; 0x8c9c <ld_put_raw>
    815a:	84 e3       	ldi	r24, 0x34	; 52
    815c:	80 9f       	mul	r24, r16
    815e:	f0 01       	movw	r30, r0
    8160:	81 9f       	mul	r24, r17
    8162:	f0 0d       	add	r31, r0
    8164:	11 24       	eor	r1, r1
    8166:	ec 56       	subi	r30, 0x6C	; 108
    8168:	f8 49       	sbci	r31, 0x98	; 152
    816a:	82 e0       	ldi	r24, 0x02	; 2
    816c:	86 a3       	std	Z+38, r24	; 0x26
    816e:	28 96       	adiw	r28, 0x08	; 8
    8170:	cd bf       	out	0x3d, r28	; 61
    8172:	de bf       	out	0x3e, r29	; 62
    8174:	df 91       	pop	r29
    8176:	cf 91       	pop	r28
    8178:	1f 91       	pop	r17
    817a:	0f 91       	pop	r16
    817c:	ff 90       	pop	r15
    817e:	ef 90       	pop	r14
    8180:	df 90       	pop	r13
    8182:	cf 90       	pop	r12
    8184:	bf 90       	pop	r11
    8186:	af 90       	pop	r10
    8188:	9f 90       	pop	r9
    818a:	08 95       	ret

0000818c <lin_diag_service_callback>:
 *
 * Implements    : lin_diag_service_callback_Activity
 *END**************************************************************************/
void lin_diag_service_callback(l_ifc_handle iii,
                               l_u8 sid)
{
    818c:	ef 92       	push	r14
    818e:	ff 92       	push	r15
    8190:	0f 93       	push	r16
    8192:	1f 93       	push	r17
    8194:	cf 93       	push	r28
    8196:	df 93       	push	r29
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    8198:	c8 2f       	mov	r28, r24
    819a:	d0 e0       	ldi	r29, 0x00	; 0
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    819c:	9c e1       	ldi	r25, 0x1C	; 28
    819e:	9c 9f       	mul	r25, r28
    81a0:	f0 01       	movw	r30, r0
    81a2:	9d 9f       	mul	r25, r29
    81a4:	f0 0d       	add	r31, r0
    81a6:	11 24       	eor	r1, r1
    81a8:	e8 5b       	subi	r30, 0xB8	; 184
    81aa:	fc 49       	sbci	r31, 0x9C	; 156
    81ac:	a2 89       	ldd	r26, Z+18	; 0x12
    81ae:	b0 e0       	ldi	r27, 0x00	; 0
    l_bool sid_supported_flg = (bool)0U;
    l_u8 i;
    const l_u8 *service_supported_ptr;
    l_u8 *service_flag_ptr;
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    81b0:	94 e2       	ldi	r25, 0x24	; 36
    81b2:	9a 9f       	mul	r25, r26
    81b4:	f0 01       	movw	r30, r0
    81b6:	9b 9f       	mul	r25, r27
    81b8:	f0 0d       	add	r31, r0
    81ba:	11 24       	eor	r1, r1
    81bc:	ec 59       	subi	r30, 0x9C	; 156
    81be:	fc 49       	sbci	r31, 0x9C	; 156
    81c0:	00 a1       	ldd	r16, Z+32	; 0x20
    81c2:	11 a1       	ldd	r17, Z+33	; 0x21
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;
    81c4:	e2 a0       	ldd	r14, Z+34	; 0x22
    81c6:	f3 a0       	ldd	r15, Z+35	; 0x23

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    81c8:	90 e0       	ldi	r25, 0x00	; 0
    81ca:	0f c0       	rjmp	.+30     	; 0x81ea <lin_diag_service_callback+0x5e>
    {
        if (service_supported_ptr[i] == sid)
    81cc:	29 2f       	mov	r18, r25
    81ce:	30 e0       	ldi	r19, 0x00	; 0
    81d0:	f8 01       	movw	r30, r16
    81d2:	e2 0f       	add	r30, r18
    81d4:	f3 1f       	adc	r31, r19
    81d6:	40 81       	ld	r20, Z
    81d8:	46 13       	cpse	r20, r22
    81da:	06 c0       	rjmp	.+12     	; 0x81e8 <lin_diag_service_callback+0x5c>
        {
            service_flag_ptr[i] = 1U;
    81dc:	f7 01       	movw	r30, r14
    81de:	e2 0f       	add	r30, r18
    81e0:	f3 1f       	adc	r31, r19
    81e2:	91 e0       	ldi	r25, 0x01	; 1
    81e4:	90 83       	st	Z, r25
            sid_supported_flg = (bool)1U;
            break;
    81e6:	0d c0       	rjmp	.+26     	; 0x8202 <lin_diag_service_callback+0x76>
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    81e8:	9f 5f       	subi	r25, 0xFF	; 255
    81ea:	34 e2       	ldi	r19, 0x24	; 36
    81ec:	3a 9f       	mul	r19, r26
    81ee:	f0 01       	movw	r30, r0
    81f0:	3b 9f       	mul	r19, r27
    81f2:	f0 0d       	add	r31, r0
    81f4:	11 24       	eor	r1, r1
    81f6:	ec 59       	subi	r30, 0x9C	; 156
    81f8:	fc 49       	sbci	r31, 0x9C	; 156
    81fa:	37 8d       	ldd	r19, Z+31	; 0x1f
    81fc:	93 17       	cp	r25, r19
    81fe:	30 f3       	brcs	.-52     	; 0x81cc <lin_diag_service_callback+0x40>
{
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    l_bool sid_supported_flg = (bool)0U;
    8200:	90 e0       	ldi	r25, 0x00	; 0
            sid_supported_flg = (bool)1U;
            break;
        }
    }

    if (sid_supported_flg == (bool)1U)
    8202:	99 23       	and	r25, r25
    8204:	09 f4       	brne	.+2      	; 0x8208 <lin_diag_service_callback+0x7c>
    8206:	72 c0       	rjmp	.+228    	; 0x82ec <lin_diag_service_callback+0x160>
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    8208:	65 38       	cpi	r22, 0x85	; 133
    820a:	09 f4       	brne	.+2      	; 0x820e <lin_diag_service_callback+0x82>
    820c:	69 c0       	rjmp	.+210    	; 0x82e0 <lin_diag_service_callback+0x154>
    820e:	78 f4       	brcc	.+30     	; 0x822e <lin_diag_service_callback+0xa2>
    8210:	62 32       	cpi	r22, 0x22	; 34
    8212:	09 f4       	brne	.+2      	; 0x8216 <lin_diag_service_callback+0x8a>
    8214:	5f c0       	rjmp	.+190    	; 0x82d4 <lin_diag_service_callback+0x148>
    8216:	20 f4       	brcc	.+8      	; 0x8220 <lin_diag_service_callback+0x94>
    8218:	60 31       	cpi	r22, 0x10	; 16
    821a:	09 f4       	brne	.+2      	; 0x821e <lin_diag_service_callback+0x92>
    821c:	58 c0       	rjmp	.+176    	; 0x82ce <lin_diag_service_callback+0x142>
    821e:	79 c0       	rjmp	.+242    	; 0x8312 <lin_diag_service_callback+0x186>
    8220:	61 33       	cpi	r22, 0x31	; 49
    8222:	09 f4       	brne	.+2      	; 0x8226 <lin_diag_service_callback+0x9a>
    8224:	5a c0       	rjmp	.+180    	; 0x82da <lin_diag_service_callback+0x14e>
    8226:	66 33       	cpi	r22, 0x36	; 54
    8228:	09 f4       	brne	.+2      	; 0x822c <lin_diag_service_callback+0xa0>
    822a:	5d c0       	rjmp	.+186    	; 0x82e6 <lin_diag_service_callback+0x15a>
    822c:	72 c0       	rjmp	.+228    	; 0x8312 <lin_diag_service_callback+0x186>
    822e:	63 3b       	cpi	r22, 0xB3	; 179
    8230:	71 f0       	breq	.+28     	; 0x824e <lin_diag_service_callback+0xc2>
    8232:	28 f4       	brcc	.+10     	; 0x823e <lin_diag_service_callback+0xb2>
    8234:	60 3b       	cpi	r22, 0xB0	; 176
    8236:	e1 f0       	breq	.+56     	; 0x8270 <lin_diag_service_callback+0xe4>
    8238:	62 3b       	cpi	r22, 0xB2	; 178
    823a:	31 f0       	breq	.+12     	; 0x8248 <lin_diag_service_callback+0xbc>
    823c:	6a c0       	rjmp	.+212    	; 0x8312 <lin_diag_service_callback+0x186>
    823e:	66 3b       	cpi	r22, 0xB6	; 182
    8240:	b1 f1       	breq	.+108    	; 0x82ae <lin_diag_service_callback+0x122>
    8242:	67 3b       	cpi	r22, 0xB7	; 183
    8244:	31 f1       	breq	.+76     	; 0x8292 <lin_diag_service_callback+0x106>
    8246:	65 c0       	rjmp	.+202    	; 0x8312 <lin_diag_service_callback+0x186>
        {
        case SERVICE_READ_BY_IDENTIFY: /* Mandatory for TL LIN 2.1 & 2.0, Optional for J2602 */
            lin_diagservice_read_by_identifier(iii);
    8248:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <lin_diagservice_read_by_identifier>
            break;
    824c:	62 c0       	rjmp	.+196    	; 0x8312 <lin_diag_service_callback+0x186>

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    824e:	9c e1       	ldi	r25, 0x1C	; 28
    8250:	9c 9f       	mul	r25, r28
    8252:	f0 01       	movw	r30, r0
    8254:	9d 9f       	mul	r25, r29
    8256:	f0 0d       	add	r31, r0
    8258:	11 24       	eor	r1, r1
    825a:	e8 5b       	subi	r30, 0xB8	; 184
    825c:	fc 49       	sbci	r31, 0x9C	; 156
    825e:	90 81       	ld	r25, Z
    8260:	99 23       	and	r25, r25
    8262:	19 f0       	breq	.+6      	; 0x826a <lin_diag_service_callback+0xde>
    8264:	93 30       	cpi	r25, 0x03	; 3
    8266:	09 f0       	breq	.+2      	; 0x826a <lin_diag_service_callback+0xde>
    8268:	54 c0       	rjmp	.+168    	; 0x8312 <lin_diag_service_callback+0x186>
            {
                lin_condittional_change_nad(iii);
    826a:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <lin_condittional_change_nad>
    826e:	51 c0       	rjmp	.+162    	; 0x8312 <lin_diag_service_callback+0x186>
            }
            break;
        case SERVICE_ASSIGN_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    8270:	9c e1       	ldi	r25, 0x1C	; 28
    8272:	9c 9f       	mul	r25, r28
    8274:	f0 01       	movw	r30, r0
    8276:	9d 9f       	mul	r25, r29
    8278:	f0 0d       	add	r31, r0
    827a:	11 24       	eor	r1, r1
    827c:	e8 5b       	subi	r30, 0xB8	; 184
    827e:	fc 49       	sbci	r31, 0x9C	; 156
    8280:	90 81       	ld	r25, Z
    8282:	99 23       	and	r25, r25
    8284:	19 f0       	breq	.+6      	; 0x828c <lin_diag_service_callback+0x100>
    8286:	93 30       	cpi	r25, 0x03	; 3
    8288:	09 f0       	breq	.+2      	; 0x828c <lin_diag_service_callback+0x100>
    828a:	43 c0       	rjmp	.+134    	; 0x8312 <lin_diag_service_callback+0x186>
            {
                lin_assign_nad(iii);
    828c:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <lin_assign_nad>
    8290:	40 c0       	rjmp	.+128    	; 0x8312 <lin_diag_service_callback+0x186>
            }
            break;

#if (1U == SUPPORT_PROTOCOL_21)
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version)
    8292:	9c e1       	ldi	r25, 0x1C	; 28
    8294:	9c 9f       	mul	r25, r28
    8296:	f0 01       	movw	r30, r0
    8298:	9d 9f       	mul	r25, r29
    829a:	f0 0d       	add	r31, r0
    829c:	11 24       	eor	r1, r1
    829e:	e8 5b       	subi	r30, 0xB8	; 184
    82a0:	fc 49       	sbci	r31, 0x9C	; 156
    82a2:	90 81       	ld	r25, Z
    82a4:	91 11       	cpse	r25, r1
    82a6:	35 c0       	rjmp	.+106    	; 0x8312 <lin_diag_service_callback+0x186>
            {
                lin_diagservice_assign_frame_id_range(iii);
    82a8:	0e 94 98 36 	call	0x6d30	; 0x6d30 <lin_diagservice_assign_frame_id_range>
    82ac:	32 c0       	rjmp	.+100    	; 0x8312 <lin_diag_service_callback+0x186>
            }
            break;
        case SERVICE_SAVE_CONFIGURATION:
            /* Set save configuration flag */
            g_lin_protocol_state_array[iii].save_config_flg = (l_bool)1U;
    82ae:	96 e1       	ldi	r25, 0x16	; 22
    82b0:	9c 9f       	mul	r25, r28
    82b2:	f0 01       	movw	r30, r0
    82b4:	9d 9f       	mul	r25, r29
    82b6:	f0 0d       	add	r31, r0
    82b8:	11 24       	eor	r1, r1
    82ba:	e8 53       	subi	r30, 0x38	; 56
    82bc:	f8 49       	sbci	r31, 0x98	; 152
    82be:	91 e0       	ldi	r25, 0x01	; 1
    82c0:	97 87       	std	Z+15, r25	; 0x0f
            /* Response to master - RSID */
            ld_make_slave_response_pdu(iii, SERVICE_SAVE_CONFIGURATION, POSITIVE, 0U);
    82c2:	20 e0       	ldi	r18, 0x00	; 0
    82c4:	41 e0       	ldi	r20, 0x01	; 1
    82c6:	66 eb       	ldi	r22, 0xB6	; 182
    82c8:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
            break;
    82cc:	22 c0       	rjmp	.+68     	; 0x8312 <lin_diag_service_callback+0x186>
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

#endif                                /* ((1U == SUPPORT_PROTOCOL_J2602) || (1U == SUPPORT_PROTOCOL_20)) */
        case SERVICE_SESSION_CONTROL: //诊断会话控制
            //诊断会话控制切换会话
            lin_slave_session_ctr(iii);
    82ce:	0e 94 67 3d 	call	0x7ace	; 0x7ace <lin_slave_session_ctr>
            break;
    82d2:	1f c0       	rjmp	.+62     	; 0x8312 <lin_diag_service_callback+0x186>
        case SERVICE_READ_DATA_BY_IDENTIFY:
            //根据id读取数据信息
            lin_read_data_by_identify(iii);
    82d4:	0e 94 46 38 	call	0x708c	; 0x708c <lin_read_data_by_identify>
            break;
    82d8:	1c c0       	rjmp	.+56     	; 0x8312 <lin_diag_service_callback+0x186>
        case SERIVCE_ROUTINE_CONTROL:
            //路由控制,支持在扩展模式下
            lin_routine_control(iii);
    82da:	0e 94 30 3e 	call	0x7c60	; 0x7c60 <lin_routine_control>
            break;
    82de:	19 c0       	rjmp	.+50     	; 0x8312 <lin_diag_service_callback+0x186>
        case 0x85:
            control_dtc_setting(iii);
    82e0:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <control_dtc_setting>
            break;
    82e4:	16 c0       	rjmp	.+44     	; 0x8312 <lin_diag_service_callback+0x186>
        case 0x36:
            lin_transfer_data(iii);
    82e6:	0e 94 7c 3f 	call	0x7ef8	; 0x7ef8 <lin_transfer_data>
            break;
    82ea:	13 c0       	rjmp	.+38     	; 0x8312 <lin_diag_service_callback+0x186>
            break;
        } /* end of switch */
    }
    else
    {
        ld_make_slave_response_pdu(iii, sid, NEGATIVE, SERVICE_NOT_SUPPORTED);
    82ec:	21 e1       	ldi	r18, 0x11	; 17
    82ee:	40 e0       	ldi	r20, 0x00	; 0
    82f0:	0e 94 0f 34 	call	0x681e	; 0x681e <ld_make_slave_response_pdu>
        /* clear queue */
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    82f4:	84 e3       	ldi	r24, 0x34	; 52
    82f6:	8c 9f       	mul	r24, r28
    82f8:	f0 01       	movw	r30, r0
    82fa:	8d 9f       	mul	r24, r29
    82fc:	f0 0d       	add	r31, r0
    82fe:	11 24       	eor	r1, r1
    8300:	ec 56       	subi	r30, 0x6C	; 108
    8302:	f8 49       	sbci	r31, 0x98	; 152
    8304:	17 86       	std	Z+15, r1	; 0x0f
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0U;
    8306:	10 8a       	std	Z+16, r1	; 0x10
    8308:	11 8a       	std	Z+17, r1	; 0x11
        tl_desc_ptr->tl_rx_queue.queue_header = tl_desc_ptr->tl_rx_queue.queue_tail;
    830a:	85 85       	ldd	r24, Z+13	; 0x0d
    830c:	96 85       	ldd	r25, Z+14	; 0x0e
    830e:	83 87       	std	Z+11, r24	; 0x0b
    8310:	94 87       	std	Z+12, r25	; 0x0c
    }
}
    8312:	df 91       	pop	r29
    8314:	cf 91       	pop	r28
    8316:	1f 91       	pop	r17
    8318:	0f 91       	pop	r16
    831a:	ff 90       	pop	r15
    831c:	ef 90       	pop	r14
    831e:	08 95       	ret

00008320 <CallbackHandler>:

    /* Call function LIN_DRV_DisableIRQ to disable interrupts */
    retVal = LIN_DRV_DisableIRQ(lin_hardware_instance);

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
}
    8320:	4f 92       	push	r4
    8322:	5f 92       	push	r5
    8324:	6f 92       	push	r6
    8326:	7f 92       	push	r7
    8328:	8f 92       	push	r8
    832a:	9f 92       	push	r9
    832c:	af 92       	push	r10
    832e:	bf 92       	push	r11
    8330:	cf 92       	push	r12
    8332:	df 92       	push	r13
    8334:	ef 92       	push	r14
    8336:	ff 92       	push	r15
    8338:	0f 93       	push	r16
    833a:	1f 93       	push	r17
    833c:	cf 93       	push	r28
    833e:	df 93       	push	r29
    8340:	1f 92       	push	r1
    8342:	cd b7       	in	r28, 0x3d	; 61
    8344:	de b7       	in	r29, 0x3e	; 62
    8346:	da 01       	movw	r26, r20
    8348:	1f 96       	adiw	r26, 0x0f	; 15
    834a:	cc 90       	ld	r12, X
    834c:	1f 97       	sbiw	r26, 0x0f	; 15
    834e:	19 82       	std	Y+1, r1	; 0x01
    8350:	fb 01       	movw	r30, r22
    8352:	ec 53       	subi	r30, 0x3C	; 60
    8354:	fc 49       	sbci	r31, 0x9C	; 156
    8356:	d0 80       	ld	r13, Z
    8358:	ed 2c       	mov	r14, r13
    835a:	f1 2c       	mov	r15, r1
    835c:	51 96       	adiw	r26, 0x11	; 17
    835e:	ec 91       	ld	r30, X
    8360:	4e 2e       	mov	r4, r30
    8362:	51 2c       	mov	r5, r1
    8364:	bd e0       	ldi	r27, 0x0D	; 13
    8366:	4b 16       	cp	r4, r27
    8368:	51 04       	cpc	r5, r1
    836a:	08 f0       	brcs	.+2      	; 0x836e <CallbackHandler+0x4e>
    836c:	87 c0       	rjmp	.+270    	; 0x847c <CallbackHandler+0x15c>
    836e:	8a 01       	movw	r16, r20
    8370:	4b 01       	movw	r8, r22
    8372:	5c 01       	movw	r10, r24
    8374:	f2 01       	movw	r30, r4
    8376:	e5 52       	subi	r30, 0x25	; 37
    8378:	fb 4d       	sbci	r31, 0xDB	; 219
    837a:	0c 94 3c 63 	jmp	0xc678	; 0xc678 <__tablejump2__>
    837e:	4c 2d       	mov	r20, r12
    8380:	60 e0       	ldi	r22, 0x00	; 0
    8382:	8d 2d       	mov	r24, r13
    8384:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    8388:	f7 01       	movw	r30, r14
    838a:	e2 95       	swap	r30
    838c:	f2 95       	swap	r31
    838e:	f0 7f       	andi	r31, 0xF0	; 240
    8390:	fe 27       	eor	r31, r30
    8392:	e0 7f       	andi	r30, 0xF0	; 240
    8394:	fe 27       	eor	r31, r30
    8396:	e5 5c       	subi	r30, 0xC5	; 197
    8398:	f9 49       	sbci	r31, 0x99	; 153
    839a:	26 85       	ldd	r18, Z+14	; 0x0e
    839c:	37 85       	ldd	r19, Z+15	; 0x0f
    839e:	f7 01       	movw	r30, r14
    83a0:	ee 0f       	add	r30, r30
    83a2:	ff 1f       	adc	r31, r31
    83a4:	e5 5b       	subi	r30, 0xB5	; 181
    83a6:	f9 49       	sbci	r31, 0x99	; 153
    83a8:	80 81       	ld	r24, Z
    83aa:	91 81       	ldd	r25, Z+1	; 0x01
    83ac:	82 0f       	add	r24, r18
    83ae:	93 1f       	adc	r25, r19
    83b0:	26 e1       	ldi	r18, 0x16	; 22
    83b2:	2e 9d       	mul	r18, r14
    83b4:	f0 01       	movw	r30, r0
    83b6:	2f 9d       	mul	r18, r15
    83b8:	f0 0d       	add	r31, r0
    83ba:	11 24       	eor	r1, r1
    83bc:	e8 53       	subi	r30, 0x38	; 56
    83be:	f8 49       	sbci	r31, 0x98	; 152
    83c0:	81 8b       	std	Z+17, r24	; 0x11
    83c2:	92 8b       	std	Z+18, r25	; 0x12
    83c4:	5b c0       	rjmp	.+182    	; 0x847c <CallbackHandler+0x15c>
    83c6:	4c 2d       	mov	r20, r12
    83c8:	63 e0       	ldi	r22, 0x03	; 3
    83ca:	8d 2d       	mov	r24, r13
    83cc:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    83d0:	55 c0       	rjmp	.+170    	; 0x847c <CallbackHandler+0x15c>
    83d2:	4c 2d       	mov	r20, r12
    83d4:	61 e0       	ldi	r22, 0x01	; 1
    83d6:	8d 2d       	mov	r24, r13
    83d8:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    83dc:	4f c0       	rjmp	.+158    	; 0x847c <CallbackHandler+0x15c>
    83de:	4c 2d       	mov	r20, r12
    83e0:	62 e0       	ldi	r22, 0x02	; 2
    83e2:	8d 2d       	mov	r24, r13
    83e4:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    83e8:	49 c0       	rjmp	.+146    	; 0x847c <CallbackHandler+0x15c>
    83ea:	4c 2d       	mov	r20, r12
    83ec:	65 e0       	ldi	r22, 0x05	; 5
    83ee:	8d 2d       	mov	r24, r13
    83f0:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    83f4:	43 c0       	rjmp	.+134    	; 0x847c <CallbackHandler+0x15c>
    83f6:	4c 2d       	mov	r20, r12
    83f8:	66 e0       	ldi	r22, 0x06	; 6
    83fa:	8d 2d       	mov	r24, r13
    83fc:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    8400:	3d c0       	rjmp	.+122    	; 0x847c <CallbackHandler+0x15c>
    8402:	4c 2d       	mov	r20, r12
    8404:	64 e0       	ldi	r22, 0x04	; 4
    8406:	8d 2d       	mov	r24, r13
    8408:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    840c:	37 c0       	rjmp	.+110    	; 0x847c <CallbackHandler+0x15c>
    840e:	4c 2d       	mov	r20, r12
    8410:	66 e0       	ldi	r22, 0x06	; 6
    8412:	8d 2d       	mov	r24, r13
    8414:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    8418:	f7 01       	movw	r30, r14
    841a:	e2 95       	swap	r30
    841c:	f2 95       	swap	r31
    841e:	f0 7f       	andi	r31, 0xF0	; 240
    8420:	fe 27       	eor	r31, r30
    8422:	e0 7f       	andi	r30, 0xF0	; 240
    8424:	fe 27       	eor	r31, r30
    8426:	e5 5c       	subi	r30, 0xC5	; 197
    8428:	f9 49       	sbci	r31, 0x99	; 153
    842a:	86 85       	ldd	r24, Z+14	; 0x0e
    842c:	97 85       	ldd	r25, Z+15	; 0x0f
    842e:	26 e1       	ldi	r18, 0x16	; 22
    8430:	2e 9d       	mul	r18, r14
    8432:	f0 01       	movw	r30, r0
    8434:	2f 9d       	mul	r18, r15
    8436:	f0 0d       	add	r31, r0
    8438:	11 24       	eor	r1, r1
    843a:	e8 53       	subi	r30, 0x38	; 56
    843c:	f8 49       	sbci	r31, 0x98	; 152
    843e:	81 8b       	std	Z+17, r24	; 0x11
    8440:	92 8b       	std	Z+18, r25	; 0x12
    8442:	1c c0       	rjmp	.+56     	; 0x847c <CallbackHandler+0x15c>
    8444:	81 e0       	ldi	r24, 0x01	; 1
    8446:	f7 01       	movw	r30, r14
    8448:	e6 5c       	subi	r30, 0xC6	; 198
    844a:	f9 49       	sbci	r31, 0x99	; 153
    844c:	80 83       	st	Z, r24
    844e:	16 c0       	rjmp	.+44     	; 0x847c <CallbackHandler+0x15c>
    8450:	fa 01       	movw	r30, r20
    8452:	87 89       	ldd	r24, Z+23	; 0x17
    8454:	88 23       	and	r24, r24
    8456:	91 f0       	breq	.+36     	; 0x847c <CallbackHandler+0x15c>
    8458:	ae 01       	movw	r20, r28
    845a:	4f 5f       	subi	r20, 0xFF	; 255
    845c:	5f 4f       	sbci	r21, 0xFF	; 255
    845e:	c5 01       	movw	r24, r10
    8460:	b4 01       	movw	r22, r8
    8462:	0e 94 10 51 	call	0xa220	; 0xa220 <LIN_DRV_GetReceiveStatus>
    8466:	d8 01       	movw	r26, r16
    8468:	16 96       	adiw	r26, 0x06	; 6
    846a:	9c 91       	ld	r25, X
    846c:	89 81       	ldd	r24, Y+1	; 0x01
    846e:	89 17       	cp	r24, r25
    8470:	28 f4       	brcc	.+10     	; 0x847c <CallbackHandler+0x15c>
    8472:	4c 2d       	mov	r20, r12
    8474:	67 e0       	ldi	r22, 0x07	; 7
    8476:	8d 2d       	mov	r24, r13
    8478:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>
    847c:	8c e1       	ldi	r24, 0x1C	; 28
    847e:	8e 9d       	mul	r24, r14
    8480:	f0 01       	movw	r30, r0
    8482:	8f 9d       	mul	r24, r15
    8484:	f0 0d       	add	r31, r0
    8486:	11 24       	eor	r1, r1
    8488:	e8 5b       	subi	r30, 0xB8	; 184
    848a:	fc 49       	sbci	r31, 0x9C	; 156
    848c:	84 85       	ldd	r24, Z+12	; 0x0c
    848e:	95 85       	ldd	r25, Z+13	; 0x0d
    8490:	26 e1       	ldi	r18, 0x16	; 22
    8492:	2e 9d       	mul	r18, r14
    8494:	f0 01       	movw	r30, r0
    8496:	2f 9d       	mul	r18, r15
    8498:	f0 0d       	add	r31, r0
    849a:	11 24       	eor	r1, r1
    849c:	e8 53       	subi	r30, 0x38	; 56
    849e:	f8 49       	sbci	r31, 0x98	; 152
    84a0:	83 8b       	std	Z+19, r24	; 0x13
    84a2:	94 8b       	std	Z+20, r25	; 0x14
    84a4:	0f 90       	pop	r0
    84a6:	df 91       	pop	r29
    84a8:	cf 91       	pop	r28
    84aa:	1f 91       	pop	r17
    84ac:	0f 91       	pop	r16
    84ae:	ff 90       	pop	r15
    84b0:	ef 90       	pop	r14
    84b2:	df 90       	pop	r13
    84b4:	cf 90       	pop	r12
    84b6:	bf 90       	pop	r11
    84b8:	af 90       	pop	r10
    84ba:	9f 90       	pop	r9
    84bc:	8f 90       	pop	r8
    84be:	7f 90       	pop	r7
    84c0:	6f 90       	pop	r6
    84c2:	5f 90       	pop	r5
    84c4:	4f 90       	pop	r4
    84c6:	08 95       	ret

000084c8 <lin_process_parity>:
    84c8:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <LIN_DRV_ProcessParity>
    84cc:	08 95       	ret

000084ce <lin_lld_init>:
    84ce:	3f 92       	push	r3
    84d0:	4f 92       	push	r4
    84d2:	5f 92       	push	r5
    84d4:	6f 92       	push	r6
    84d6:	7f 92       	push	r7
    84d8:	8f 92       	push	r8
    84da:	9f 92       	push	r9
    84dc:	af 92       	push	r10
    84de:	bf 92       	push	r11
    84e0:	ef 92       	push	r14
    84e2:	ff 92       	push	r15
    84e4:	0f 93       	push	r16
    84e6:	1f 93       	push	r17
    84e8:	cf 93       	push	r28
    84ea:	df 93       	push	r29
    84ec:	cd b7       	in	r28, 0x3d	; 61
    84ee:	de b7       	in	r29, 0x3e	; 62
    84f0:	26 97       	sbiw	r28, 0x06	; 6
    84f2:	cd bf       	out	0x3d, r28	; 61
    84f4:	de bf       	out	0x3e, r29	; 62
    84f6:	08 2f       	mov	r16, r24
    84f8:	10 e0       	ldi	r17, 0x00	; 0
    84fa:	98 01       	movw	r18, r16
    84fc:	22 0f       	add	r18, r18
    84fe:	33 1f       	adc	r19, r19
    8500:	c8 01       	movw	r24, r16
    8502:	88 0f       	add	r24, r24
    8504:	99 1f       	adc	r25, r25
    8506:	88 0f       	add	r24, r24
    8508:	99 1f       	adc	r25, r25
    850a:	88 0f       	add	r24, r24
    850c:	99 1f       	adc	r25, r25
    850e:	82 0f       	add	r24, r18
    8510:	93 1f       	adc	r25, r19
    8512:	80 5d       	subi	r24, 0xD0	; 208
    8514:	99 49       	sbci	r25, 0x99	; 153
    8516:	26 e1       	ldi	r18, 0x16	; 22
    8518:	20 9f       	mul	r18, r16
    851a:	f0 01       	movw	r30, r0
    851c:	21 9f       	mul	r18, r17
    851e:	f0 0d       	add	r31, r0
    8520:	11 24       	eor	r1, r1
    8522:	e8 53       	subi	r30, 0x38	; 56
    8524:	f8 49       	sbci	r31, 0x98	; 152
    8526:	82 83       	std	Z+2, r24	; 0x02
    8528:	93 83       	std	Z+3, r25	; 0x03
    852a:	f8 01       	movw	r30, r16
    852c:	ee 0f       	add	r30, r30
    852e:	ff 1f       	adc	r31, r31
    8530:	ee 0f       	add	r30, r30
    8532:	ff 1f       	adc	r31, r31
    8534:	e0 54       	subi	r30, 0x40	; 64
    8536:	fc 49       	sbci	r31, 0x9C	; 156
    8538:	80 80       	ld	r8, Z
    853a:	91 80       	ldd	r9, Z+1	; 0x01
    853c:	a2 80       	ldd	r10, Z+2	; 0x02
    853e:	b3 80       	ldd	r11, Z+3	; 0x03
    8540:	8c e1       	ldi	r24, 0x1C	; 28
    8542:	80 9f       	mul	r24, r16
    8544:	f0 01       	movw	r30, r0
    8546:	81 9f       	mul	r24, r17
    8548:	f0 0d       	add	r31, r0
    854a:	11 24       	eor	r1, r1
    854c:	e8 5b       	subi	r30, 0xB8	; 184
    854e:	fc 49       	sbci	r31, 0x9C	; 156
    8550:	e4 88       	ldd	r14, Z+20	; 0x14
    8552:	f5 88       	ldd	r15, Z+21	; 0x15
    8554:	f7 01       	movw	r30, r14
    8556:	85 81       	ldd	r24, Z+5	; 0x05
    8558:	88 23       	and	r24, r24
    855a:	09 f4       	brne	.+2      	; 0x855e <lin_lld_init+0x90>
    855c:	44 c0       	rjmp	.+136    	; 0x85e6 <lin_lld_init+0x118>
    855e:	f8 01       	movw	r30, r16
    8560:	ee 0f       	add	r30, r30
    8562:	ff 1f       	adc	r31, r31
    8564:	e5 5b       	subi	r30, 0xB5	; 181
    8566:	f9 49       	sbci	r31, 0x99	; 153
    8568:	84 e1       	ldi	r24, 0x14	; 20
    856a:	90 e0       	ldi	r25, 0x00	; 0
    856c:	80 83       	st	Z, r24
    856e:	91 83       	std	Z+1, r25	; 0x01
    8570:	ff 24       	eor	r15, r15
    8572:	f3 94       	inc	r15
    8574:	34 c0       	rjmp	.+104    	; 0x85de <lin_lld_init+0x110>
    8576:	8f 2d       	mov	r24, r15
    8578:	90 e0       	ldi	r25, 0x00	; 0
    857a:	9c 01       	movw	r18, r24
    857c:	21 50       	subi	r18, 0x01	; 1
    857e:	31 09       	sbc	r19, r1
    8580:	29 83       	std	Y+1, r18	; 0x01
    8582:	3a 83       	std	Y+2, r19	; 0x02
    8584:	01 96       	adiw	r24, 0x01	; 1
    8586:	88 0f       	add	r24, r24
    8588:	99 1f       	adc	r25, r25
    858a:	dc 01       	movw	r26, r24
    858c:	aa 0f       	add	r26, r26
    858e:	bb 1f       	adc	r27, r27
    8590:	aa 0f       	add	r26, r26
    8592:	bb 1f       	adc	r27, r27
    8594:	aa 0f       	add	r26, r26
    8596:	bb 1f       	adc	r27, r27
    8598:	a8 1b       	sub	r26, r24
    859a:	b9 0b       	sbc	r27, r25
    859c:	20 e4       	ldi	r18, 0x40	; 64
    859e:	32 e4       	ldi	r19, 0x42	; 66
    85a0:	4f e0       	ldi	r20, 0x0F	; 15
    85a2:	50 e0       	ldi	r21, 0x00	; 0
    85a4:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    85a8:	20 e0       	ldi	r18, 0x00	; 0
    85aa:	3f e9       	ldi	r19, 0x9F	; 159
    85ac:	44 e2       	ldi	r20, 0x24	; 36
    85ae:	50 e0       	ldi	r21, 0x00	; 0
    85b0:	0e 94 1a 63 	call	0xc634	; 0xc634 <__udivmodsi4>
    85b4:	2f 5f       	subi	r18, 0xFF	; 255
    85b6:	3f 4f       	sbci	r19, 0xFF	; 255
    85b8:	c8 01       	movw	r24, r16
    85ba:	88 0f       	add	r24, r24
    85bc:	99 1f       	adc	r25, r25
    85be:	88 0f       	add	r24, r24
    85c0:	99 1f       	adc	r25, r25
    85c2:	88 0f       	add	r24, r24
    85c4:	99 1f       	adc	r25, r25
    85c6:	49 81       	ldd	r20, Y+1	; 0x01
    85c8:	5a 81       	ldd	r21, Y+2	; 0x02
    85ca:	48 0f       	add	r20, r24
    85cc:	59 1f       	adc	r21, r25
    85ce:	44 0f       	add	r20, r20
    85d0:	55 1f       	adc	r21, r21
    85d2:	45 5c       	subi	r20, 0xC5	; 197
    85d4:	59 49       	sbci	r21, 0x99	; 153
    85d6:	fa 01       	movw	r30, r20
    85d8:	20 83       	st	Z, r18
    85da:	31 83       	std	Z+1, r19	; 0x01
    85dc:	f3 94       	inc	r15
    85de:	f8 e0       	ldi	r31, 0x08	; 8
    85e0:	ff 15       	cp	r31, r15
    85e2:	48 f6       	brcc	.-110    	; 0x8576 <lin_lld_init+0xa8>
    85e4:	66 c0       	rjmp	.+204    	; 0x86b2 <lin_lld_init+0x1e4>
    85e6:	f7 01       	movw	r30, r14
    85e8:	20 81       	ld	r18, Z
    85ea:	31 81       	ldd	r19, Z+1	; 0x01
    85ec:	42 81       	ldd	r20, Z+2	; 0x02
    85ee:	53 81       	ldd	r21, Z+3	; 0x03
    85f0:	a8 ee       	ldi	r26, 0xE8	; 232
    85f2:	b3 e0       	ldi	r27, 0x03	; 3
    85f4:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    85f8:	9b 01       	movw	r18, r22
    85fa:	ac 01       	movw	r20, r24
    85fc:	60 e8       	ldi	r22, 0x80	; 128
    85fe:	71 e5       	ldi	r23, 0x51	; 81
    8600:	86 ed       	ldi	r24, 0xD6	; 214
    8602:	92 e0       	ldi	r25, 0x02	; 2
    8604:	0e 94 1a 63 	call	0xc634	; 0xc634 <__udivmodsi4>
    8608:	2f 5f       	subi	r18, 0xFF	; 255
    860a:	3f 4f       	sbci	r19, 0xFF	; 255
    860c:	f8 01       	movw	r30, r16
    860e:	ee 0f       	add	r30, r30
    8610:	ff 1f       	adc	r31, r31
    8612:	e5 5b       	subi	r30, 0xB5	; 181
    8614:	f9 49       	sbci	r31, 0x99	; 153
    8616:	20 83       	st	Z, r18
    8618:	31 83       	std	Z+1, r19	; 0x01
    861a:	33 24       	eor	r3, r3
    861c:	33 94       	inc	r3
    861e:	45 c0       	rjmp	.+138    	; 0x86aa <lin_lld_init+0x1dc>
    8620:	83 2d       	mov	r24, r3
    8622:	90 e0       	ldi	r25, 0x00	; 0
    8624:	9c 01       	movw	r18, r24
    8626:	21 50       	subi	r18, 0x01	; 1
    8628:	31 09       	sbc	r19, r1
    862a:	2d 83       	std	Y+5, r18	; 0x05
    862c:	3e 83       	std	Y+6, r19	; 0x06
    862e:	f7 01       	movw	r30, r14
    8630:	40 80       	ld	r4, Z
    8632:	51 80       	ldd	r5, Z+1	; 0x01
    8634:	62 80       	ldd	r6, Z+2	; 0x02
    8636:	73 80       	ldd	r7, Z+3	; 0x03
    8638:	01 96       	adiw	r24, 0x01	; 1
    863a:	88 0f       	add	r24, r24
    863c:	99 1f       	adc	r25, r25
    863e:	dc 01       	movw	r26, r24
    8640:	aa 0f       	add	r26, r26
    8642:	bb 1f       	adc	r27, r27
    8644:	aa 0f       	add	r26, r26
    8646:	bb 1f       	adc	r27, r27
    8648:	aa 0f       	add	r26, r26
    864a:	bb 1f       	adc	r27, r27
    864c:	a8 1b       	sub	r26, r24
    864e:	b9 0b       	sbc	r27, r25
    8650:	20 e4       	ldi	r18, 0x40	; 64
    8652:	32 e4       	ldi	r19, 0x42	; 66
    8654:	4f e0       	ldi	r20, 0x0F	; 15
    8656:	50 e0       	ldi	r21, 0x00	; 0
    8658:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    865c:	69 83       	std	Y+1, r22	; 0x01
    865e:	7a 83       	std	Y+2, r23	; 0x02
    8660:	8b 83       	std	Y+3, r24	; 0x03
    8662:	9c 83       	std	Y+4, r25	; 0x04
    8664:	a8 ee       	ldi	r26, 0xE8	; 232
    8666:	b3 e0       	ldi	r27, 0x03	; 3
    8668:	a3 01       	movw	r20, r6
    866a:	92 01       	movw	r18, r4
    866c:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    8670:	9b 01       	movw	r18, r22
    8672:	ac 01       	movw	r20, r24
    8674:	69 81       	ldd	r22, Y+1	; 0x01
    8676:	7a 81       	ldd	r23, Y+2	; 0x02
    8678:	8b 81       	ldd	r24, Y+3	; 0x03
    867a:	9c 81       	ldd	r25, Y+4	; 0x04
    867c:	0e 94 1a 63 	call	0xc634	; 0xc634 <__udivmodsi4>
    8680:	2f 5f       	subi	r18, 0xFF	; 255
    8682:	3f 4f       	sbci	r19, 0xFF	; 255
    8684:	c8 01       	movw	r24, r16
    8686:	88 0f       	add	r24, r24
    8688:	99 1f       	adc	r25, r25
    868a:	88 0f       	add	r24, r24
    868c:	99 1f       	adc	r25, r25
    868e:	88 0f       	add	r24, r24
    8690:	99 1f       	adc	r25, r25
    8692:	4d 81       	ldd	r20, Y+5	; 0x05
    8694:	5e 81       	ldd	r21, Y+6	; 0x06
    8696:	48 0f       	add	r20, r24
    8698:	59 1f       	adc	r21, r25
    869a:	44 0f       	add	r20, r20
    869c:	55 1f       	adc	r21, r21
    869e:	45 5c       	subi	r20, 0xC5	; 197
    86a0:	59 49       	sbci	r21, 0x99	; 153
    86a2:	fa 01       	movw	r30, r20
    86a4:	20 83       	st	Z, r18
    86a6:	31 83       	std	Z+1, r19	; 0x01
    86a8:	33 94       	inc	r3
    86aa:	f8 e0       	ldi	r31, 0x08	; 8
    86ac:	f3 15       	cp	r31, r3
    86ae:	08 f0       	brcs	.+2      	; 0x86b2 <lin_lld_init+0x1e4>
    86b0:	b7 cf       	rjmp	.-146    	; 0x8620 <lin_lld_init+0x152>
    86b2:	f8 01       	movw	r30, r16
    86b4:	e2 95       	swap	r30
    86b6:	f2 95       	swap	r31
    86b8:	f0 7f       	andi	r31, 0xF0	; 240
    86ba:	fe 27       	eor	r31, r30
    86bc:	e0 7f       	andi	r30, 0xF0	; 240
    86be:	fe 27       	eor	r31, r30
    86c0:	e5 5c       	subi	r30, 0xC5	; 197
    86c2:	f9 49       	sbci	r31, 0x99	; 153
    86c4:	86 85       	ldd	r24, Z+14	; 0x0e
    86c6:	97 85       	ldd	r25, Z+15	; 0x0f
    86c8:	26 e1       	ldi	r18, 0x16	; 22
    86ca:	20 9f       	mul	r18, r16
    86cc:	d0 01       	movw	r26, r0
    86ce:	21 9f       	mul	r18, r17
    86d0:	b0 0d       	add	r27, r0
    86d2:	11 24       	eor	r1, r1
    86d4:	a8 53       	subi	r26, 0x38	; 56
    86d6:	b8 49       	sbci	r27, 0x98	; 152
    86d8:	51 96       	adiw	r26, 0x11	; 17
    86da:	8d 93       	st	X+, r24
    86dc:	9c 93       	st	X, r25
    86de:	52 97       	sbiw	r26, 0x12	; 18
    86e0:	8c e1       	ldi	r24, 0x1C	; 28
    86e2:	80 9f       	mul	r24, r16
    86e4:	f0 01       	movw	r30, r0
    86e6:	81 9f       	mul	r24, r17
    86e8:	f0 0d       	add	r31, r0
    86ea:	11 24       	eor	r1, r1
    86ec:	e8 5b       	subi	r30, 0xB8	; 184
    86ee:	fc 49       	sbci	r31, 0x9C	; 156
    86f0:	84 85       	ldd	r24, Z+12	; 0x0c
    86f2:	95 85       	ldd	r25, Z+13	; 0x0d
    86f4:	53 96       	adiw	r26, 0x13	; 19
    86f6:	8d 93       	st	X+, r24
    86f8:	9c 93       	st	X, r25
    86fa:	54 97       	sbiw	r26, 0x14	; 20
    86fc:	8e e1       	ldi	r24, 0x1E	; 30
    86fe:	80 9f       	mul	r24, r16
    8700:	90 01       	movw	r18, r0
    8702:	81 9f       	mul	r24, r17
    8704:	30 0d       	add	r19, r0
    8706:	11 24       	eor	r1, r1
    8708:	23 5b       	subi	r18, 0xB3	; 179
    870a:	39 49       	sbci	r19, 0x99	; 153
    870c:	44 89       	ldd	r20, Z+20	; 0x14
    870e:	55 89       	ldd	r21, Z+21	; 0x15
    8710:	c5 01       	movw	r24, r10
    8712:	b4 01       	movw	r22, r8
    8714:	0e 94 3d 4e 	call	0x9c7a	; 0x9c7a <LIN_DRV_Init>
    8718:	89 83       	std	Y+1, r24	; 0x01
    871a:	9a 83       	std	Y+2, r25	; 0x02
    871c:	89 2b       	or	r24, r25
    871e:	51 f4       	brne	.+20     	; 0x8734 <lin_lld_init+0x266>
    8720:	40 e9       	ldi	r20, 0x90	; 144
    8722:	51 e4       	ldi	r21, 0x41	; 65
    8724:	c5 01       	movw	r24, r10
    8726:	b4 01       	movw	r22, r8
    8728:	0e 94 95 4f 	call	0x9f2a	; 0x9f2a <LIN_DRV_InstallCallback>
    872c:	f8 01       	movw	r30, r16
    872e:	e6 5c       	subi	r30, 0xC6	; 198
    8730:	f9 49       	sbci	r31, 0x99	; 153
    8732:	10 82       	st	Z, r1
    8734:	81 e0       	ldi	r24, 0x01	; 1
    8736:	29 81       	ldd	r18, Y+1	; 0x01
    8738:	3a 81       	ldd	r19, Y+2	; 0x02
    873a:	23 2b       	or	r18, r19
    873c:	09 f4       	brne	.+2      	; 0x8740 <lin_lld_init+0x272>
    873e:	80 e0       	ldi	r24, 0x00	; 0
    8740:	26 96       	adiw	r28, 0x06	; 6
    8742:	cd bf       	out	0x3d, r28	; 61
    8744:	de bf       	out	0x3e, r29	; 62
    8746:	df 91       	pop	r29
    8748:	cf 91       	pop	r28
    874a:	1f 91       	pop	r17
    874c:	0f 91       	pop	r16
    874e:	ff 90       	pop	r15
    8750:	ef 90       	pop	r14
    8752:	bf 90       	pop	r11
    8754:	af 90       	pop	r10
    8756:	9f 90       	pop	r9
    8758:	8f 90       	pop	r8
    875a:	7f 90       	pop	r7
    875c:	6f 90       	pop	r6
    875e:	5f 90       	pop	r5
    8760:	4f 90       	pop	r4
    8762:	3f 90       	pop	r3
    8764:	08 95       	ret

00008766 <lin_lld_ignore_response>:

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    8766:	e8 2f       	mov	r30, r24
    8768:	f0 e0       	ldi	r31, 0x00	; 0
    876a:	ee 0f       	add	r30, r30
    876c:	ff 1f       	adc	r31, r31
    876e:	ee 0f       	add	r30, r30
    8770:	ff 1f       	adc	r31, r31
    8772:	e0 54       	subi	r30, 0x40	; 64
    8774:	fc 49       	sbci	r31, 0x9C	; 156
    8776:	60 81       	ld	r22, Z
    8778:	71 81       	ldd	r23, Z+1	; 0x01
    877a:	82 81       	ldd	r24, Z+2	; 0x02
    877c:	93 81       	ldd	r25, Z+3	; 0x03

    /* Abort frame data transferring */
    retVal = LIN_DRV_AbortTransferData(lin_hardware_instance);
    877e:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <LIN_DRV_AbortTransferData>

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    8782:	89 2b       	or	r24, r25
    8784:	11 f4       	brne	.+4      	; 0x878a <lin_lld_ignore_response+0x24>
    8786:	80 e0       	ldi	r24, 0x00	; 0
    8788:	08 95       	ret
    878a:	8f ef       	ldi	r24, 0xFF	; 255
}
    878c:	08 95       	ret

0000878e <lin_lld_set_low_power_mode>:

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    878e:	e8 2f       	mov	r30, r24
    8790:	f0 e0       	ldi	r31, 0x00	; 0
    8792:	ee 0f       	add	r30, r30
    8794:	ff 1f       	adc	r31, r31
    8796:	ee 0f       	add	r30, r30
    8798:	ff 1f       	adc	r31, r31
    879a:	e0 54       	subi	r30, 0x40	; 64
    879c:	fc 49       	sbci	r31, 0x9C	; 156
    879e:	60 81       	ld	r22, Z
    87a0:	71 81       	ldd	r23, Z+1	; 0x01
    87a2:	82 81       	ldd	r24, Z+2	; 0x02
    87a4:	93 81       	ldd	r25, Z+3	; 0x03

    /* Put current node to sleep mode */
    retVal = LIN_DRV_GoToSleepMode(lin_hardware_instance);
    87a6:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <LIN_DRV_GoToSleepMode>

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    87aa:	89 2b       	or	r24, r25
    87ac:	11 f4       	brne	.+4      	; 0x87b2 <lin_lld_set_low_power_mode+0x24>
    87ae:	80 e0       	ldi	r24, 0x00	; 0
    87b0:	08 95       	ret
    87b2:	8f ef       	ldi	r24, 0xFF	; 255
}
    87b4:	08 95       	ret

000087b6 <lin_lld_set_response>:
 *
 * Implements    : lin_lld_set_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_set_response(l_ifc_handle iii,
                          l_u8 response_length)
{
    87b6:	cf 92       	push	r12
    87b8:	df 92       	push	r13
    87ba:	ef 92       	push	r14
    87bc:	ff 92       	push	r15
    87be:	0f 93       	push	r16
    87c0:	1f 93       	push	r17
    87c2:	cf 93       	push	r28
    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    const l_u8 *buffer;

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    87c4:	9f ef       	ldi	r25, 0xFF	; 255
    87c6:	96 0f       	add	r25, r22
    87c8:	98 30       	cpi	r25, 0x08	; 8
    87ca:	b0 f5       	brcc	.+108    	; 0x8838 <lin_lld_set_response+0x82>
    87cc:	c6 2f       	mov	r28, r22
    {
        buffer = g_lin_protocol_state_array[iii].response_buffer_ptr;
    87ce:	90 e0       	ldi	r25, 0x00	; 0
    87d0:	26 e1       	ldi	r18, 0x16	; 22
    87d2:	28 9f       	mul	r18, r24
    87d4:	f0 01       	movw	r30, r0
    87d6:	29 9f       	mul	r18, r25
    87d8:	f0 0d       	add	r31, r0
    87da:	11 24       	eor	r1, r1
    87dc:	e8 53       	subi	r30, 0x38	; 56
    87de:	f8 49       	sbci	r31, 0x98	; 152
    87e0:	02 81       	ldd	r16, Z+2	; 0x02
    87e2:	13 81       	ldd	r17, Z+3	; 0x03
        /* Get the LIN hardware instance number */
        lin_hardware_instance = g_lin_virtual_ifc[iii];
    87e4:	dc 01       	movw	r26, r24
    87e6:	aa 0f       	add	r26, r26
    87e8:	bb 1f       	adc	r27, r27
    87ea:	aa 0f       	add	r26, r26
    87ec:	bb 1f       	adc	r27, r27
    87ee:	a0 54       	subi	r26, 0x40	; 64
    87f0:	bc 49       	sbci	r27, 0x9C	; 156
    87f2:	cd 90       	ld	r12, X+
    87f4:	dd 90       	ld	r13, X+
    87f6:	ed 90       	ld	r14, X+
    87f8:	fc 90       	ld	r15, X

        /* Put response length into buffer */
        g_lin_protocol_state_array[iii].response_length = response_length;
    87fa:	64 83       	std	Z+4, r22	; 0x04

        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    87fc:	e6 2f       	mov	r30, r22
    87fe:	f0 e0       	ldi	r31, 0x00	; 0
    8800:	31 97       	sbiw	r30, 0x01	; 1
    8802:	88 0f       	add	r24, r24
    8804:	99 1f       	adc	r25, r25
    8806:	88 0f       	add	r24, r24
    8808:	99 1f       	adc	r25, r25
    880a:	88 0f       	add	r24, r24
    880c:	99 1f       	adc	r25, r25
    880e:	e8 0f       	add	r30, r24
    8810:	f9 1f       	adc	r31, r25
    8812:	ee 0f       	add	r30, r30
    8814:	ff 1f       	adc	r31, r31
    8816:	e5 5c       	subi	r30, 0xC5	; 197
    8818:	f9 49       	sbci	r31, 0x99	; 153
    881a:	20 81       	ld	r18, Z
    881c:	31 81       	ldd	r19, Z+1	; 0x01
    881e:	40 e0       	ldi	r20, 0x00	; 0
    8820:	50 e0       	ldi	r21, 0x00	; 0
    8822:	c7 01       	movw	r24, r14
    8824:	b6 01       	movw	r22, r12
    8826:	0e 94 02 51 	call	0xa204	; 0xa204 <LIN_DRV_SetTimeoutCounter>

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    882a:	2c 2f       	mov	r18, r28
    882c:	a8 01       	movw	r20, r16
    882e:	c7 01       	movw	r24, r14
    8830:	b6 01       	movw	r22, r12
    8832:	0e 94 24 50 	call	0xa048	; 0xa048 <LIN_DRV_SendFrameData>
    8836:	02 c0       	rjmp	.+4      	; 0x883c <lin_lld_set_response+0x86>
                          l_u8 response_length)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    8838:	81 e0       	ldi	r24, 0x01	; 1
    883a:	90 e0       	ldi	r25, 0x00	; 0

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    883c:	89 2b       	or	r24, r25
    883e:	11 f4       	brne	.+4      	; 0x8844 <lin_lld_set_response+0x8e>
    8840:	80 e0       	ldi	r24, 0x00	; 0
    8842:	01 c0       	rjmp	.+2      	; 0x8846 <lin_lld_set_response+0x90>
    8844:	8f ef       	ldi	r24, 0xFF	; 255
}
    8846:	cf 91       	pop	r28
    8848:	1f 91       	pop	r17
    884a:	0f 91       	pop	r16
    884c:	ff 90       	pop	r15
    884e:	ef 90       	pop	r14
    8850:	df 90       	pop	r13
    8852:	cf 90       	pop	r12
    8854:	08 95       	ret

00008856 <lin_lld_rx_response>:
 *
 * Implements    : lin_lld_rx_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_rx_response(l_ifc_handle iii,
                         l_u8 response_length)
{
    8856:	cf 92       	push	r12
    8858:	df 92       	push	r13
    885a:	ef 92       	push	r14
    885c:	ff 92       	push	r15
    885e:	1f 93       	push	r17
    8860:	cf 93       	push	r28
    8862:	df 93       	push	r29

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    8864:	c8 2f       	mov	r28, r24
    8866:	d0 e0       	ldi	r29, 0x00	; 0
    8868:	fe 01       	movw	r30, r28
    886a:	ee 0f       	add	r30, r30
    886c:	ff 1f       	adc	r31, r31
    886e:	ee 0f       	add	r30, r30
    8870:	ff 1f       	adc	r31, r31
    8872:	e0 54       	subi	r30, 0x40	; 64
    8874:	fc 49       	sbci	r31, 0x9C	; 156
    8876:	c0 80       	ld	r12, Z
    8878:	d1 80       	ldd	r13, Z+1	; 0x01
    887a:	e2 80       	ldd	r14, Z+2	; 0x02
    887c:	f3 80       	ldd	r15, Z+3	; 0x03

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    887e:	8f ef       	ldi	r24, 0xFF	; 255
    8880:	86 0f       	add	r24, r22
    8882:	88 30       	cpi	r24, 0x08	; 8
    8884:	48 f5       	brcc	.+82     	; 0x88d8 <lin_lld_rx_response+0x82>
    8886:	16 2f       	mov	r17, r22
    {
        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    8888:	e6 2f       	mov	r30, r22
    888a:	f0 e0       	ldi	r31, 0x00	; 0
    888c:	31 97       	sbiw	r30, 0x01	; 1
    888e:	ce 01       	movw	r24, r28
    8890:	88 0f       	add	r24, r24
    8892:	99 1f       	adc	r25, r25
    8894:	88 0f       	add	r24, r24
    8896:	99 1f       	adc	r25, r25
    8898:	88 0f       	add	r24, r24
    889a:	99 1f       	adc	r25, r25
    889c:	e8 0f       	add	r30, r24
    889e:	f9 1f       	adc	r31, r25
    88a0:	ee 0f       	add	r30, r30
    88a2:	ff 1f       	adc	r31, r31
    88a4:	e5 5c       	subi	r30, 0xC5	; 197
    88a6:	f9 49       	sbci	r31, 0x99	; 153
    88a8:	20 81       	ld	r18, Z
    88aa:	31 81       	ldd	r19, Z+1	; 0x01
    88ac:	40 e0       	ldi	r20, 0x00	; 0
    88ae:	50 e0       	ldi	r21, 0x00	; 0
    88b0:	c7 01       	movw	r24, r14
    88b2:	b6 01       	movw	r22, r12
    88b4:	0e 94 02 51 	call	0xa204	; 0xa204 <LIN_DRV_SetTimeoutCounter>

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    88b8:	86 e1       	ldi	r24, 0x16	; 22
    88ba:	8c 9f       	mul	r24, r28
    88bc:	f0 01       	movw	r30, r0
    88be:	8d 9f       	mul	r24, r29
    88c0:	f0 0d       	add	r31, r0
    88c2:	11 24       	eor	r1, r1
    88c4:	e8 53       	subi	r30, 0x38	; 56
    88c6:	f8 49       	sbci	r31, 0x98	; 152
    88c8:	42 81       	ldd	r20, Z+2	; 0x02
    88ca:	53 81       	ldd	r21, Z+3	; 0x03
    88cc:	21 2f       	mov	r18, r17
    88ce:	c7 01       	movw	r24, r14
    88d0:	b6 01       	movw	r22, r12
    88d2:	0e 94 6f 50 	call	0xa0de	; 0xa0de <LIN_DRV_ReceiveFrameData>
    88d6:	02 c0       	rjmp	.+4      	; 0x88dc <lin_lld_rx_response+0x86>
                         l_u8 response_length)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    88d8:	81 e0       	ldi	r24, 0x01	; 1
    88da:	90 e0       	ldi	r25, 0x00	; 0

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    88dc:	89 2b       	or	r24, r25
    88de:	11 f4       	brne	.+4      	; 0x88e4 <lin_lld_rx_response+0x8e>
    88e0:	80 e0       	ldi	r24, 0x00	; 0
    88e2:	01 c0       	rjmp	.+2      	; 0x88e6 <lin_lld_rx_response+0x90>
    88e4:	8f ef       	ldi	r24, 0xFF	; 255
}
    88e6:	df 91       	pop	r29
    88e8:	cf 91       	pop	r28
    88ea:	1f 91       	pop	r17
    88ec:	ff 90       	pop	r15
    88ee:	ef 90       	pop	r14
    88f0:	df 90       	pop	r13
    88f2:	cf 90       	pop	r12
    88f4:	08 95       	ret

000088f6 <lin_lld_timeout_service>:
 * Description   : This is a part of Timer Interrupt Handler.
 *
 * Implements    : lin_lld_timeout_service_Activity
 *END**************************************************************************/
void lin_lld_timeout_service(l_ifc_handle iii)
{
    88f6:	4f 92       	push	r4
    88f8:	5f 92       	push	r5
    88fa:	6f 92       	push	r6
    88fc:	7f 92       	push	r7
    88fe:	bf 92       	push	r11
    8900:	cf 92       	push	r12
    8902:	df 92       	push	r13
    8904:	ef 92       	push	r14
    8906:	ff 92       	push	r15
    8908:	0f 93       	push	r16
    890a:	1f 93       	push	r17
    890c:	cf 93       	push	r28
    890e:	df 93       	push	r29
    8910:	cd b7       	in	r28, 0x3d	; 61
    8912:	de b7       	in	r29, 0x3e	; 62
    8914:	a2 97       	sbiw	r28, 0x22	; 34
    8916:	cd bf       	out	0x3d, r28	; 61
    8918:	de bf       	out	0x3e, r29	; 62
    891a:	18 2f       	mov	r17, r24
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);
    l_u32 lin_hardware_instance = g_lin_virtual_ifc[iii];
    891c:	e8 2e       	mov	r14, r24
    891e:	f1 2c       	mov	r15, r1
    8920:	f7 01       	movw	r30, r14
    8922:	ee 0f       	add	r30, r30
    8924:	ff 1f       	adc	r31, r31
    8926:	ee 0f       	add	r30, r30
    8928:	ff 1f       	adc	r31, r31
    892a:	e0 54       	subi	r30, 0x40	; 64
    892c:	fc 49       	sbci	r31, 0x9C	; 156
    892e:	40 80       	ld	r4, Z
    8930:	51 80       	ldd	r5, Z+1	; 0x01
    8932:	62 80       	ldd	r6, Z+2	; 0x02
    8934:	73 80       	ldd	r7, Z+3	; 0x03
    lin_state_t linState = s_lin_state_array[iii];
    8936:	8e e1       	ldi	r24, 0x1E	; 30
    8938:	8e 9d       	mul	r24, r14
    893a:	f0 01       	movw	r30, r0
    893c:	8f 9d       	mul	r24, r15
    893e:	f0 0d       	add	r31, r0
    8940:	11 24       	eor	r1, r1
    8942:	e3 5b       	subi	r30, 0xB3	; 179
    8944:	f9 49       	sbci	r31, 0x99	; 153
    8946:	de 01       	movw	r26, r28
    8948:	11 96       	adiw	r26, 0x01	; 1
    894a:	01 90       	ld	r0, Z+
    894c:	0d 92       	st	X+, r0
    894e:	8a 95       	dec	r24
    8950:	e1 f7       	brne	.-8      	; 0x894a <lin_lld_timeout_service+0x54>
    lin_protocol_state_t *prot_state_ptr = &g_lin_protocol_state_array[iii];
    l_u8 index;

    LIN_DRV_TimeoutService(lin_hardware_instance);
    8952:	c3 01       	movw	r24, r6
    8954:	b2 01       	movw	r22, r4
    8956:	0e 94 99 50 	call	0xa132	; 0xa132 <LIN_DRV_TimeoutService>
#if (SUPPORT_PROTOCOL_21 == 1U)
    /* Callback to transport layer to handle N_As and N_Cr timeout for LIN 2.1 and above*/
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
    895a:	40 e0       	ldi	r20, 0x00	; 0
    895c:	65 e0       	ldi	r22, 0x05	; 5
    895e:	81 2f       	mov	r24, r17
    8960:	0e 94 bf 4c 	call	0x997e	; 0x997e <lin_tl_callback_handler>
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    8964:	8b 89       	ldd	r24, Y+19	; 0x13
    8966:	87 30       	cpi	r24, 0x07	; 7
    8968:	30 f4       	brcc	.+12     	; 0x8976 <lin_lld_timeout_service+0x80>
    896a:	83 30       	cpi	r24, 0x03	; 3
    896c:	08 f0       	brcs	.+2      	; 0x8970 <lin_lld_timeout_service+0x7a>
    896e:	a6 c0       	rjmp	.+332    	; 0x8abc <lin_lld_timeout_service+0x1c6>
    8970:	82 30       	cpi	r24, 0x02	; 2
    8972:	29 f0       	breq	.+10     	; 0x897e <lin_lld_timeout_service+0x88>
    8974:	f9 c0       	rjmp	.+498    	; 0x8b68 <lin_lld_timeout_service+0x272>
    8976:	89 30       	cpi	r24, 0x09	; 9
    8978:	09 f4       	brne	.+2      	; 0x897c <lin_lld_timeout_service+0x86>
    897a:	cc c0       	rjmp	.+408    	; 0x8b14 <lin_lld_timeout_service+0x21e>
    897c:	f5 c0       	rjmp	.+490    	; 0x8b68 <lin_lld_timeout_service+0x272>
    {
    case LIN_NODE_STATE_IDLE:
        if (!(prot_state_ptr->idle_timeout_cnt-- > 0U))
    897e:	86 e1       	ldi	r24, 0x16	; 22
    8980:	8e 9d       	mul	r24, r14
    8982:	f0 01       	movw	r30, r0
    8984:	8f 9d       	mul	r24, r15
    8986:	f0 0d       	add	r31, r0
    8988:	11 24       	eor	r1, r1
    898a:	e8 53       	subi	r30, 0x38	; 56
    898c:	f8 49       	sbci	r31, 0x98	; 152
    898e:	83 89       	ldd	r24, Z+19	; 0x13
    8990:	94 89       	ldd	r25, Z+20	; 0x14
    8992:	9c 01       	movw	r18, r24
    8994:	21 50       	subi	r18, 0x01	; 1
    8996:	31 09       	sbc	r19, r1
    8998:	23 8b       	std	Z+19, r18	; 0x13
    899a:	34 8b       	std	Z+20, r19	; 0x14
    899c:	89 2b       	or	r24, r25
    899e:	e9 f4       	brne	.+58     	; 0x89da <lin_lld_timeout_service+0xe4>
        {
            /* Callback to handle timeout */
            CALLBACK_HANDLER(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT, 0xFFU);
    89a0:	4f ef       	ldi	r20, 0xFF	; 255
    89a2:	68 e0       	ldi	r22, 0x08	; 8
    89a4:	81 2f       	mov	r24, r17
    89a6:	0e 94 62 32 	call	0x64c4	; 0x64c4 <lin_pid_resp_callback_handler>

            /* Put current node to Idle state, reset idle timeout count */
            prot_state_ptr->idle_timeout_cnt = g_lin_protocol_user_cfg_array[iii].max_idle_timeout_cnt;
    89aa:	8c e1       	ldi	r24, 0x1C	; 28
    89ac:	8e 9d       	mul	r24, r14
    89ae:	f0 01       	movw	r30, r0
    89b0:	8f 9d       	mul	r24, r15
    89b2:	f0 0d       	add	r31, r0
    89b4:	11 24       	eor	r1, r1
    89b6:	e8 5b       	subi	r30, 0xB8	; 184
    89b8:	fc 49       	sbci	r31, 0x9C	; 156
    89ba:	84 85       	ldd	r24, Z+12	; 0x0c
    89bc:	95 85       	ldd	r25, Z+13	; 0x0d
    89be:	26 e1       	ldi	r18, 0x16	; 22
    89c0:	2e 9d       	mul	r18, r14
    89c2:	f0 01       	movw	r30, r0
    89c4:	2f 9d       	mul	r18, r15
    89c6:	f0 0d       	add	r31, r0
    89c8:	11 24       	eor	r1, r1
    89ca:	e8 53       	subi	r30, 0x38	; 56
    89cc:	f8 49       	sbci	r31, 0x98	; 152
    89ce:	83 8b       	std	Z+19, r24	; 0x13
    89d0:	94 8b       	std	Z+20, r25	; 0x14

            /* Put current node to sleep mode */
            (void)LIN_DRV_GoToSleepMode(lin_hardware_instance);
    89d2:	c3 01       	movw	r24, r6
    89d4:	b2 01       	movw	r22, r4
    89d6:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <LIN_DRV_GoToSleepMode>
        }
        /* Re-calculate s_lin_max_header_timeout and s_lin_max_frame_res_timeout_val */
        if (s_baudrate_adjusted_flg[iii])
    89da:	f7 01       	movw	r30, r14
    89dc:	e6 5c       	subi	r30, 0xC6	; 198
    89de:	f9 49       	sbci	r31, 0x99	; 153
    89e0:	80 81       	ld	r24, Z
    89e2:	88 23       	and	r24, r24
    89e4:	09 f4       	brne	.+2      	; 0x89e8 <lin_lld_timeout_service+0xf2>
    89e6:	c0 c0       	rjmp	.+384    	; 0x8b68 <lin_lld_timeout_service+0x272>
        {
            /* Clear baudrate adjusted flag */
            s_baudrate_adjusted_flg[iii] = false;
    89e8:	f7 01       	movw	r30, r14
    89ea:	e6 5c       	subi	r30, 0xC6	; 198
    89ec:	f9 49       	sbci	r31, 0x99	; 153
    89ee:	10 82       	st	Z, r1
            s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
    89f0:	c0 90 5c 63 	lds	r12, 0x635C	; 0x80635c <g_lin_protocol_user_cfg_array+0x14>
    89f4:	d0 90 5d 63 	lds	r13, 0x635D	; 0x80635d <g_lin_protocol_user_cfg_array+0x15>
    89f8:	f6 01       	movw	r30, r12
    89fa:	20 81       	ld	r18, Z
    89fc:	31 81       	ldd	r19, Z+1	; 0x01
    89fe:	42 81       	ldd	r20, Z+2	; 0x02
    8a00:	53 81       	ldd	r21, Z+3	; 0x03
 *
 * Implements : lin_calc_max_header_timeout_cnt_Activity
 */
static inline l_u16 lin_calc_max_header_timeout_cnt(l_u32 baudRate)
{
    return (l_u16)((14U * 34U * 100000U / (TIME_OUT_UNIT_US * baudRate)) + 1U);
    8a02:	a8 ee       	ldi	r26, 0xE8	; 232
    8a04:	b3 e0       	ldi	r27, 0x03	; 3
    8a06:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    8a0a:	9b 01       	movw	r18, r22
    8a0c:	ac 01       	movw	r20, r24
    8a0e:	60 e8       	ldi	r22, 0x80	; 128
    8a10:	71 e5       	ldi	r23, 0x51	; 81
    8a12:	86 ed       	ldi	r24, 0xD6	; 214
    8a14:	92 e0       	ldi	r25, 0x02	; 2
    8a16:	0e 94 1a 63 	call	0xc634	; 0xc634 <__udivmodsi4>
    8a1a:	2f 5f       	subi	r18, 0xFF	; 255
    8a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a1e:	f7 01       	movw	r30, r14
    8a20:	ee 0f       	add	r30, r30
    8a22:	ff 1f       	adc	r31, r31
    8a24:	e5 5b       	subi	r30, 0xB5	; 181
    8a26:	f9 49       	sbci	r31, 0x99	; 153
    8a28:	20 83       	st	Z, r18
    8a2a:	31 83       	std	Z+1, r19	; 0x01
            for (index = 1U; index < 9U; index++)
    8a2c:	bb 24       	eor	r11, r11
    8a2e:	b3 94       	inc	r11
    8a30:	40 c0       	rjmp	.+128    	; 0x8ab2 <lin_lld_timeout_service+0x1bc>
            {
                s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
    8a32:	8b 2d       	mov	r24, r11
    8a34:	90 e0       	ldi	r25, 0x00	; 0
    8a36:	8c 01       	movw	r16, r24
    8a38:	01 50       	subi	r16, 0x01	; 1
    8a3a:	11 09       	sbc	r17, r1
    8a3c:	f6 01       	movw	r30, r12
    8a3e:	40 80       	ld	r4, Z
    8a40:	51 80       	ldd	r5, Z+1	; 0x01
    8a42:	62 80       	ldd	r6, Z+2	; 0x02
    8a44:	73 80       	ldd	r7, Z+3	; 0x03
 * Implements : lin_calc_max_res_timeout_cnt_Activity
 */
static inline l_u16 lin_calc_max_res_timeout_cnt(l_u32 baudRate,
                                                 l_u8 size)
{
    l_u16 a = (l_u16)(14U * (1U + (l_u16)size));
    8a46:	01 96       	adiw	r24, 0x01	; 1
    8a48:	88 0f       	add	r24, r24
    8a4a:	99 1f       	adc	r25, r25
    8a4c:	dc 01       	movw	r26, r24
    8a4e:	aa 0f       	add	r26, r26
    8a50:	bb 1f       	adc	r27, r27
    8a52:	aa 0f       	add	r26, r26
    8a54:	bb 1f       	adc	r27, r27
    8a56:	aa 0f       	add	r26, r26
    8a58:	bb 1f       	adc	r27, r27
    8a5a:	a8 1b       	sub	r26, r24
    8a5c:	b9 0b       	sbc	r27, r25

    return (l_u16)((a * 1000000U / (TIME_OUT_UNIT_US * baudRate)) + 1U);
    8a5e:	20 e4       	ldi	r18, 0x40	; 64
    8a60:	32 e4       	ldi	r19, 0x42	; 66
    8a62:	4f e0       	ldi	r20, 0x0F	; 15
    8a64:	50 e0       	ldi	r21, 0x00	; 0
    8a66:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    8a6a:	6f 8f       	std	Y+31, r22	; 0x1f
    8a6c:	78 a3       	std	Y+32, r23	; 0x20
    8a6e:	89 a3       	std	Y+33, r24	; 0x21
    8a70:	9a a3       	std	Y+34, r25	; 0x22
    8a72:	a8 ee       	ldi	r26, 0xE8	; 232
    8a74:	b3 e0       	ldi	r27, 0x03	; 3
    8a76:	a3 01       	movw	r20, r6
    8a78:	92 01       	movw	r18, r4
    8a7a:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    8a7e:	9b 01       	movw	r18, r22
    8a80:	ac 01       	movw	r20, r24
    8a82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    8a84:	78 a1       	ldd	r23, Y+32	; 0x20
    8a86:	89 a1       	ldd	r24, Y+33	; 0x21
    8a88:	9a a1       	ldd	r25, Y+34	; 0x22
    8a8a:	0e 94 1a 63 	call	0xc634	; 0xc634 <__udivmodsi4>
    8a8e:	2f 5f       	subi	r18, 0xFF	; 255
    8a90:	3f 4f       	sbci	r19, 0xFF	; 255
    8a92:	f7 01       	movw	r30, r14
    8a94:	ee 0f       	add	r30, r30
    8a96:	ff 1f       	adc	r31, r31
    8a98:	ee 0f       	add	r30, r30
    8a9a:	ff 1f       	adc	r31, r31
    8a9c:	ee 0f       	add	r30, r30
    8a9e:	ff 1f       	adc	r31, r31
    8aa0:	e0 0f       	add	r30, r16
    8aa2:	f1 1f       	adc	r31, r17
    8aa4:	ee 0f       	add	r30, r30
    8aa6:	ff 1f       	adc	r31, r31
    8aa8:	e5 5c       	subi	r30, 0xC5	; 197
    8aaa:	f9 49       	sbci	r31, 0x99	; 153
    8aac:	20 83       	st	Z, r18
    8aae:	31 83       	std	Z+1, r19	; 0x01
        if (s_baudrate_adjusted_flg[iii])
        {
            /* Clear baudrate adjusted flag */
            s_baudrate_adjusted_flg[iii] = false;
            s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
            for (index = 1U; index < 9U; index++)
    8ab0:	b3 94       	inc	r11
    8ab2:	f8 e0       	ldi	r31, 0x08	; 8
    8ab4:	fb 15       	cp	r31, r11
    8ab6:	08 f0       	brcs	.+2      	; 0x8aba <lin_lld_timeout_service+0x1c4>
    8ab8:	bc cf       	rjmp	.-136    	; 0x8a32 <lin_lld_timeout_service+0x13c>
    8aba:	56 c0       	rjmp	.+172    	; 0x8b68 <lin_lld_timeout_service+0x272>
    case LIN_NODE_STATE_SEND_BREAK_FIELD:
    case LIN_NODE_STATE_RECV_SYNC:
    case LIN_NODE_STATE_RECV_PID:
    case LIN_NODE_STATE_SEND_PID:
        /* timeout send has occurred - change state of the node and inform core */
        if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    8abc:	86 e1       	ldi	r24, 0x16	; 22
    8abe:	8e 9d       	mul	r24, r14
    8ac0:	f0 01       	movw	r30, r0
    8ac2:	8f 9d       	mul	r24, r15
    8ac4:	f0 0d       	add	r31, r0
    8ac6:	11 24       	eor	r1, r1
    8ac8:	e8 53       	subi	r30, 0x38	; 56
    8aca:	f8 49       	sbci	r31, 0x98	; 152
    8acc:	81 89       	ldd	r24, Z+17	; 0x11
    8ace:	92 89       	ldd	r25, Z+18	; 0x12
    8ad0:	9c 01       	movw	r18, r24
    8ad2:	21 50       	subi	r18, 0x01	; 1
    8ad4:	31 09       	sbc	r19, r1
    8ad6:	21 8b       	std	Z+17, r18	; 0x11
    8ad8:	32 8b       	std	Z+18, r19	; 0x12
    8ada:	89 2b       	or	r24, r25
    8adc:	09 f0       	breq	.+2      	; 0x8ae0 <lin_lld_timeout_service+0x1ea>
    8ade:	44 c0       	rjmp	.+136    	; 0x8b68 <lin_lld_timeout_service+0x272>
        {
            /* Go to idle state */
            (void)LIN_DRV_GotoIdleState(lin_hardware_instance);
    8ae0:	c3 01       	movw	r24, r6
    8ae2:	b2 01       	movw	r22, r4
    8ae4:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>

            /* Reset frame count timeout */
            prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    8ae8:	f7 01       	movw	r30, r14
    8aea:	e2 95       	swap	r30
    8aec:	f2 95       	swap	r31
    8aee:	f0 7f       	andi	r31, 0xF0	; 240
    8af0:	fe 27       	eor	r31, r30
    8af2:	e0 7f       	andi	r30, 0xF0	; 240
    8af4:	fe 27       	eor	r31, r30
    8af6:	e5 5c       	subi	r30, 0xC5	; 197
    8af8:	f9 49       	sbci	r31, 0x99	; 153
    8afa:	86 85       	ldd	r24, Z+14	; 0x0e
    8afc:	97 85       	ldd	r25, Z+15	; 0x0f
    8afe:	26 e1       	ldi	r18, 0x16	; 22
    8b00:	2e 9d       	mul	r18, r14
    8b02:	f0 01       	movw	r30, r0
    8b04:	2f 9d       	mul	r18, r15
    8b06:	f0 0d       	add	r31, r0
    8b08:	11 24       	eor	r1, r1
    8b0a:	e8 53       	subi	r30, 0x38	; 56
    8b0c:	f8 49       	sbci	r31, 0x98	; 152
    8b0e:	81 8b       	std	Z+17, r24	; 0x11
    8b10:	92 8b       	std	Z+18, r25	; 0x12
    8b12:	2a c0       	rjmp	.+84     	; 0x8b68 <lin_lld_timeout_service+0x272>
        }
        break;
    case LIN_NODE_STATE_SEND_DATA:
        /* timeout send has occurred - change state of the node and inform core */
        if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    8b14:	86 e1       	ldi	r24, 0x16	; 22
    8b16:	8e 9d       	mul	r24, r14
    8b18:	f0 01       	movw	r30, r0
    8b1a:	8f 9d       	mul	r24, r15
    8b1c:	f0 0d       	add	r31, r0
    8b1e:	11 24       	eor	r1, r1
    8b20:	e8 53       	subi	r30, 0x38	; 56
    8b22:	f8 49       	sbci	r31, 0x98	; 152
    8b24:	81 89       	ldd	r24, Z+17	; 0x11
    8b26:	92 89       	ldd	r25, Z+18	; 0x12
    8b28:	9c 01       	movw	r18, r24
    8b2a:	21 50       	subi	r18, 0x01	; 1
    8b2c:	31 09       	sbc	r19, r1
    8b2e:	21 8b       	std	Z+17, r18	; 0x11
    8b30:	32 8b       	std	Z+18, r19	; 0x12
    8b32:	89 2b       	or	r24, r25
    8b34:	c9 f4       	brne	.+50     	; 0x8b68 <lin_lld_timeout_service+0x272>
        {
            /* Abort frame data transferring */
            (void)LIN_DRV_AbortTransferData(lin_hardware_instance);
    8b36:	c3 01       	movw	r24, r6
    8b38:	b2 01       	movw	r22, r4
    8b3a:	0e 94 83 4f 	call	0x9f06	; 0x9f06 <LIN_DRV_AbortTransferData>

            /* Reset frame count timeout */
            prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    8b3e:	f7 01       	movw	r30, r14
    8b40:	e2 95       	swap	r30
    8b42:	f2 95       	swap	r31
    8b44:	f0 7f       	andi	r31, 0xF0	; 240
    8b46:	fe 27       	eor	r31, r30
    8b48:	e0 7f       	andi	r30, 0xF0	; 240
    8b4a:	fe 27       	eor	r31, r30
    8b4c:	e5 5c       	subi	r30, 0xC5	; 197
    8b4e:	f9 49       	sbci	r31, 0x99	; 153
    8b50:	86 85       	ldd	r24, Z+14	; 0x0e
    8b52:	97 85       	ldd	r25, Z+15	; 0x0f
    8b54:	26 e1       	ldi	r18, 0x16	; 22
    8b56:	2e 9d       	mul	r18, r14
    8b58:	f0 01       	movw	r30, r0
    8b5a:	2f 9d       	mul	r18, r15
    8b5c:	f0 0d       	add	r31, r0
    8b5e:	11 24       	eor	r1, r1
    8b60:	e8 53       	subi	r30, 0x38	; 56
    8b62:	f8 49       	sbci	r31, 0x98	; 152
    8b64:	81 8b       	std	Z+17, r24	; 0x11
    8b66:	92 8b       	std	Z+18, r25	; 0x12
    case LIN_NODE_STATE_SEND_DATA_COMPLETED:
    default:
        /* do nothing */
        break;
    }
}
    8b68:	a2 96       	adiw	r28, 0x22	; 34
    8b6a:	cd bf       	out	0x3d, r28	; 61
    8b6c:	de bf       	out	0x3e, r29	; 62
    8b6e:	df 91       	pop	r29
    8b70:	cf 91       	pop	r28
    8b72:	1f 91       	pop	r17
    8b74:	0f 91       	pop	r16
    8b76:	ff 90       	pop	r15
    8b78:	ef 90       	pop	r14
    8b7a:	df 90       	pop	r13
    8b7c:	cf 90       	pop	r12
    8b7e:	bf 90       	pop	r11
    8b80:	7f 90       	pop	r7
    8b82:	6f 90       	pop	r6
    8b84:	5f 90       	pop	r5
    8b86:	4f 90       	pop	r4
    8b88:	08 95       	ret

00008b8a <ld_init>:
{

    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_tx_queue.queue_status);
}
    8b8a:	48 2f       	mov	r20, r24
    8b8c:	50 e0       	ldi	r21, 0x00	; 0
    8b8e:	8c e1       	ldi	r24, 0x1C	; 28
    8b90:	84 9f       	mul	r24, r20
    8b92:	f0 01       	movw	r30, r0
    8b94:	85 9f       	mul	r24, r21
    8b96:	f0 0d       	add	r31, r0
    8b98:	11 24       	eor	r1, r1
    8b9a:	e8 5b       	subi	r30, 0xB8	; 184
    8b9c:	fc 49       	sbci	r31, 0x9C	; 156
    8b9e:	22 8d       	ldd	r18, Z+26	; 0x1a
    8ba0:	33 8d       	ldd	r19, Z+27	; 0x1b
    8ba2:	27 30       	cpi	r18, 0x07	; 7
    8ba4:	31 05       	cpc	r19, r1
    8ba6:	48 f1       	brcs	.+82     	; 0x8bfa <ld_init+0x70>
    8ba8:	f9 01       	movw	r30, r18
    8baa:	35 97       	sbiw	r30, 0x05	; 5
    8bac:	9f 01       	movw	r18, r30
    8bae:	ab ea       	ldi	r26, 0xAB	; 171
    8bb0:	ba ea       	ldi	r27, 0xAA	; 170
    8bb2:	0e 94 42 63 	call	0xc684	; 0xc684 <__umulhisi3>
    8bb6:	96 95       	lsr	r25
    8bb8:	87 95       	ror	r24
    8bba:	96 95       	lsr	r25
    8bbc:	87 95       	ror	r24
    8bbe:	9c 01       	movw	r18, r24
    8bc0:	22 0f       	add	r18, r18
    8bc2:	33 1f       	adc	r19, r19
    8bc4:	82 0f       	add	r24, r18
    8bc6:	93 1f       	adc	r25, r19
    8bc8:	88 0f       	add	r24, r24
    8bca:	99 1f       	adc	r25, r25
    8bcc:	e8 17       	cp	r30, r24
    8bce:	f9 07       	cpc	r31, r25
    8bd0:	49 f4       	brne	.+18     	; 0x8be4 <ld_init+0x5a>
    8bd2:	9f 01       	movw	r18, r30
    8bd4:	0e 94 42 63 	call	0xc684	; 0xc684 <__umulhisi3>
    8bd8:	96 95       	lsr	r25
    8bda:	87 95       	ror	r24
    8bdc:	96 95       	lsr	r25
    8bde:	87 95       	ror	r24
    8be0:	01 96       	adiw	r24, 0x01	; 1
    8be2:	0d c0       	rjmp	.+26     	; 0x8bfe <ld_init+0x74>
    8be4:	9f 01       	movw	r18, r30
    8be6:	ab ea       	ldi	r26, 0xAB	; 171
    8be8:	ba ea       	ldi	r27, 0xAA	; 170
    8bea:	0e 94 42 63 	call	0xc684	; 0xc684 <__umulhisi3>
    8bee:	96 95       	lsr	r25
    8bf0:	87 95       	ror	r24
    8bf2:	96 95       	lsr	r25
    8bf4:	87 95       	ror	r24
    8bf6:	02 96       	adiw	r24, 0x02	; 2
    8bf8:	02 c0       	rjmp	.+4      	; 0x8bfe <ld_init+0x74>
    8bfa:	81 e0       	ldi	r24, 0x01	; 1
    8bfc:	90 e0       	ldi	r25, 0x00	; 0
    8bfe:	2c e1       	ldi	r18, 0x1C	; 28
    8c00:	24 9f       	mul	r18, r20
    8c02:	d0 01       	movw	r26, r0
    8c04:	25 9f       	mul	r18, r21
    8c06:	b0 0d       	add	r27, r0
    8c08:	11 24       	eor	r1, r1
    8c0a:	a8 5b       	subi	r26, 0xB8	; 184
    8c0c:	bc 49       	sbci	r27, 0x9C	; 156
    8c0e:	56 96       	adiw	r26, 0x16	; 22
    8c10:	2d 91       	ld	r18, X+
    8c12:	3c 91       	ld	r19, X
    8c14:	57 97       	sbiw	r26, 0x17	; 23
    8c16:	64 e3       	ldi	r22, 0x34	; 52
    8c18:	64 9f       	mul	r22, r20
    8c1a:	f0 01       	movw	r30, r0
    8c1c:	65 9f       	mul	r22, r21
    8c1e:	f0 0d       	add	r31, r0
    8c20:	11 24       	eor	r1, r1
    8c22:	ec 56       	subi	r30, 0x6C	; 108
    8c24:	f8 49       	sbci	r31, 0x98	; 152
    8c26:	21 87       	std	Z+9, r18	; 0x09
    8c28:	32 87       	std	Z+10, r19	; 0x0a
    8c2a:	58 96       	adiw	r26, 0x18	; 24
    8c2c:	2d 91       	ld	r18, X+
    8c2e:	3c 91       	ld	r19, X
    8c30:	59 97       	sbiw	r26, 0x19	; 25
    8c32:	24 8b       	std	Z+20, r18	; 0x14
    8c34:	35 8b       	std	Z+21, r19	; 0x15
    8c36:	9a 01       	movw	r18, r20
    8c38:	22 0f       	add	r18, r18
    8c3a:	33 1f       	adc	r19, r19
    8c3c:	22 0f       	add	r18, r18
    8c3e:	33 1f       	adc	r19, r19
    8c40:	42 0f       	add	r20, r18
    8c42:	53 1f       	adc	r21, r19
    8c44:	45 59       	subi	r20, 0x95	; 149
    8c46:	59 49       	sbci	r21, 0x99	; 153
    8c48:	42 a3       	std	Z+34, r20	; 0x22
    8c4a:	53 a3       	std	Z+35, r21	; 0x23
    8c4c:	87 83       	std	Z+7, r24	; 0x07
    8c4e:	90 87       	std	Z+8, r25	; 0x08
    8c50:	82 8b       	std	Z+18, r24	; 0x12
    8c52:	93 8b       	std	Z+19, r25	; 0x13
    8c54:	10 82       	st	Z, r1
    8c56:	11 82       	std	Z+1, r1	; 0x01
    8c58:	12 82       	std	Z+2, r1	; 0x02
    8c5a:	13 82       	std	Z+3, r1	; 0x03
    8c5c:	85 e0       	ldi	r24, 0x05	; 5
    8c5e:	84 83       	std	Z+4, r24	; 0x04
    8c60:	15 82       	std	Z+5, r1	; 0x05
    8c62:	16 82       	std	Z+6, r1	; 0x06
    8c64:	13 86       	std	Z+11, r1	; 0x0b
    8c66:	14 86       	std	Z+12, r1	; 0x0c
    8c68:	15 86       	std	Z+13, r1	; 0x0d
    8c6a:	16 86       	std	Z+14, r1	; 0x0e
    8c6c:	17 86       	std	Z+15, r1	; 0x0f
    8c6e:	10 8a       	std	Z+16, r1	; 0x10
    8c70:	11 8a       	std	Z+17, r1	; 0x11
    8c72:	82 e0       	ldi	r24, 0x02	; 2
    8c74:	86 8b       	std	Z+22, r24	; 0x16
    8c76:	81 8f       	std	Z+25, r24	; 0x19
    8c78:	14 8e       	std	Z+28, r1	; 0x1c
    8c7a:	15 8e       	std	Z+29, r1	; 0x1d
    8c7c:	16 8e       	std	Z+30, r1	; 0x1e
    8c7e:	15 a2       	std	Z+37, r1	; 0x25
    8c80:	14 a2       	std	Z+36, r1	; 0x24
    8c82:	12 a6       	std	Z+42, r1	; 0x2a
    8c84:	17 8e       	std	Z+31, r1	; 0x1f
    8c86:	10 a2       	std	Z+32, r1	; 0x20
    8c88:	11 a2       	std	Z+33, r1	; 0x21
    8c8a:	91 e0       	ldi	r25, 0x01	; 1
    8c8c:	96 a3       	std	Z+38, r25	; 0x26
    8c8e:	83 a7       	std	Z+43, r24	; 0x2b
    8c90:	17 a2       	std	Z+39, r1	; 0x27
    8c92:	10 a6       	std	Z+40, r1	; 0x28
    8c94:	11 a6       	std	Z+41, r1	; 0x29
    8c96:	15 a6       	std	Z+45, r1	; 0x2d
    8c98:	14 a6       	std	Z+44, r1	; 0x2c
    8c9a:	08 95       	ret

00008c9c <ld_put_raw>:
    8c9c:	28 2f       	mov	r18, r24
    8c9e:	30 e0       	ldi	r19, 0x00	; 0
    8ca0:	9c e1       	ldi	r25, 0x1C	; 28
    8ca2:	92 9f       	mul	r25, r18
    8ca4:	f0 01       	movw	r30, r0
    8ca6:	93 9f       	mul	r25, r19
    8ca8:	f0 0d       	add	r31, r0
    8caa:	11 24       	eor	r1, r1
    8cac:	e8 5b       	subi	r30, 0xB8	; 184
    8cae:	fc 49       	sbci	r31, 0x9C	; 156
    8cb0:	93 81       	ldd	r25, Z+3	; 0x03
    8cb2:	91 11       	cpse	r25, r1
    8cb4:	28 c0       	rjmp	.+80     	; 0x8d06 <ld_put_raw+0x6a>
    8cb6:	9c e1       	ldi	r25, 0x1C	; 28
    8cb8:	92 9f       	mul	r25, r18
    8cba:	f0 01       	movw	r30, r0
    8cbc:	93 9f       	mul	r25, r19
    8cbe:	f0 0d       	add	r31, r0
    8cc0:	11 24       	eor	r1, r1
    8cc2:	e8 5b       	subi	r30, 0xB8	; 184
    8cc4:	fc 49       	sbci	r31, 0x9C	; 156
    8cc6:	90 81       	ld	r25, Z
    8cc8:	91 11       	cpse	r25, r1
    8cca:	1d c0       	rjmp	.+58     	; 0x8d06 <ld_put_raw+0x6a>
    8ccc:	9c e1       	ldi	r25, 0x1C	; 28
    8cce:	92 9f       	mul	r25, r18
    8cd0:	f0 01       	movw	r30, r0
    8cd2:	93 9f       	mul	r25, r19
    8cd4:	f0 0d       	add	r31, r0
    8cd6:	11 24       	eor	r1, r1
    8cd8:	e8 5b       	subi	r30, 0xB8	; 184
    8cda:	fc 49       	sbci	r31, 0x9C	; 156
    8cdc:	e2 89       	ldd	r30, Z+18	; 0x12
    8cde:	94 e2       	ldi	r25, 0x24	; 36
    8ce0:	e9 9f       	mul	r30, r25
    8ce2:	f0 01       	movw	r30, r0
    8ce4:	11 24       	eor	r1, r1
    8ce6:	ec 59       	subi	r30, 0x9C	; 156
    8ce8:	fc 49       	sbci	r31, 0x9C	; 156
    8cea:	43 8d       	ldd	r20, Z+27	; 0x1b
    8cec:	54 8d       	ldd	r21, Z+28	; 0x1c
    8cee:	94 e3       	ldi	r25, 0x34	; 52
    8cf0:	92 9f       	mul	r25, r18
    8cf2:	f0 01       	movw	r30, r0
    8cf4:	93 9f       	mul	r25, r19
    8cf6:	f0 0d       	add	r31, r0
    8cf8:	11 24       	eor	r1, r1
    8cfa:	ec 56       	subi	r30, 0x6C	; 108
    8cfc:	f8 49       	sbci	r31, 0x98	; 152
    8cfe:	40 a3       	std	Z+32, r20	; 0x20
    8d00:	51 a3       	std	Z+33, r21	; 0x21
    8d02:	91 e0       	ldi	r25, 0x01	; 1
    8d04:	97 8f       	std	Z+31, r25	; 0x1f
    8d06:	94 e3       	ldi	r25, 0x34	; 52
    8d08:	92 9f       	mul	r25, r18
    8d0a:	a0 01       	movw	r20, r0
    8d0c:	93 9f       	mul	r25, r19
    8d0e:	50 0d       	add	r21, r0
    8d10:	11 24       	eor	r1, r1
    8d12:	4c 56       	subi	r20, 0x6C	; 108
    8d14:	58 49       	sbci	r21, 0x98	; 152
    8d16:	fa 01       	movw	r30, r20
    8d18:	92 a5       	ldd	r25, Z+42	; 0x2a
    8d1a:	9f 5f       	subi	r25, 0xFF	; 255
    8d1c:	92 a7       	std	Z+42, r25	; 0x2a
    8d1e:	20 e0       	ldi	r18, 0x00	; 0
    8d20:	0e 94 0d 49 	call	0x921a	; 0x921a <tl_put_raw>
    8d24:	08 95       	ret

00008d26 <ld_get_raw>:
    8d26:	94 e3       	ldi	r25, 0x34	; 52
    8d28:	89 9f       	mul	r24, r25
    8d2a:	a0 01       	movw	r20, r0
    8d2c:	11 24       	eor	r1, r1
    8d2e:	41 56       	subi	r20, 0x61	; 97
    8d30:	58 49       	sbci	r21, 0x98	; 152
    8d32:	21 e0       	ldi	r18, 0x01	; 1
    8d34:	0e 94 3f 4c 	call	0x987e	; 0x987e <tl_get_raw>
    8d38:	08 95       	ret

00008d3a <ld_raw_rx_status>:
 *END**************************************************************************/
l_u8 ld_raw_rx_status(l_ifc_handle iii)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_rx_queue.queue_status);
    8d3a:	24 e3       	ldi	r18, 0x34	; 52
    8d3c:	82 9f       	mul	r24, r18
    8d3e:	c0 01       	movw	r24, r0
    8d40:	11 24       	eor	r1, r1
    8d42:	fc 01       	movw	r30, r24
    8d44:	ec 56       	subi	r30, 0x6C	; 108
    8d46:	f8 49       	sbci	r31, 0x98	; 152
}
    8d48:	87 85       	ldd	r24, Z+15	; 0x0f
    8d4a:	08 95       	ret

00008d4c <lin_tl_handle_timeout>:
 *
 * Implements    : lin_tl_handle_timeout_Activity
 *END**************************************************************************/
static void lin_tl_handle_timeout(l_ifc_handle iii)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8d4c:	90 e0       	ldi	r25, 0x00	; 0
    #if (SUPPORT_MASTER_MODE == 1U)
    const lin_master_data_t * master_data_ptr;
    const lin_schedule_t * active_schedule_struct_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    if (LD_CHECK_N_CR_TIMEOUT == tl_desc_ptr->check_timeout_type)
    8d4e:	24 e3       	ldi	r18, 0x34	; 52
    8d50:	28 9f       	mul	r18, r24
    8d52:	f0 01       	movw	r30, r0
    8d54:	29 9f       	mul	r18, r25
    8d56:	f0 0d       	add	r31, r0
    8d58:	11 24       	eor	r1, r1
    8d5a:	ec 56       	subi	r30, 0x6C	; 108
    8d5c:	f8 49       	sbci	r31, 0x98	; 152
    8d5e:	27 8d       	ldd	r18, Z+31	; 0x1f
    8d60:	22 30       	cpi	r18, 0x02	; 2
    8d62:	59 f5       	brne	.+86     	; 0x8dba <lin_tl_handle_timeout+0x6e>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    8d64:	24 e3       	ldi	r18, 0x34	; 52
    8d66:	28 9f       	mul	r18, r24
    8d68:	f0 01       	movw	r30, r0
    8d6a:	29 9f       	mul	r18, r25
    8d6c:	f0 0d       	add	r31, r0
    8d6e:	11 24       	eor	r1, r1
    8d70:	ec 56       	subi	r30, 0x6C	; 108
    8d72:	f8 49       	sbci	r31, 0x98	; 152
    8d74:	20 a1       	ldd	r18, Z+32	; 0x20
    8d76:	31 a1       	ldd	r19, Z+33	; 0x21
    8d78:	a9 01       	movw	r20, r18
    8d7a:	41 50       	subi	r20, 0x01	; 1
    8d7c:	51 09       	sbc	r21, r1
    8d7e:	40 a3       	std	Z+32, r20	; 0x20
    8d80:	51 a3       	std	Z+33, r21	; 0x21
    8d82:	23 2b       	or	r18, r19
    8d84:	d1 f4       	brne	.+52     	; 0x8dba <lin_tl_handle_timeout+0x6e>
        {
            /* Update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    8d86:	26 e1       	ldi	r18, 0x16	; 22
    8d88:	28 9f       	mul	r18, r24
    8d8a:	f0 01       	movw	r30, r0
    8d8c:	29 9f       	mul	r18, r25
    8d8e:	f0 0d       	add	r31, r0
    8d90:	11 24       	eor	r1, r1
    8d92:	e8 53       	subi	r30, 0x38	; 56
    8d94:	f8 49       	sbci	r31, 0x98	; 152
    8d96:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    8d98:	24 e3       	ldi	r18, 0x34	; 52
    8d9a:	28 9f       	mul	r18, r24
    8d9c:	f0 01       	movw	r30, r0
    8d9e:	29 9f       	mul	r18, r25
    8da0:	f0 0d       	add	r31, r0
    8da2:	11 24       	eor	r1, r1
    8da4:	ec 56       	subi	r30, 0x6C	; 108
    8da6:	f8 49       	sbci	r31, 0x98	; 152
    8da8:	23 e0       	ldi	r18, 0x03	; 3
    8daa:	23 a7       	std	Z+43, r18	; 0x2b
            tl_desc_ptr->rx_msg_status = LD_N_CR_TIMEOUT;
    8dac:	25 e0       	ldi	r18, 0x05	; 5
    8dae:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->ld_return_data = false;
    8db0:	14 a6       	std	Z+44, r1	; 0x2c
            tl_desc_ptr->FF_pdu_received = false;
    8db2:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8db4:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    8db6:	21 e0       	ldi	r18, 0x01	; 1
    8db8:	26 a3       	std	Z+38, r18	; 0x26
        }
    }

    if (LD_CHECK_N_AS_TIMEOUT == tl_desc_ptr->check_timeout_type)
    8dba:	24 e3       	ldi	r18, 0x34	; 52
    8dbc:	28 9f       	mul	r18, r24
    8dbe:	f0 01       	movw	r30, r0
    8dc0:	29 9f       	mul	r18, r25
    8dc2:	f0 0d       	add	r31, r0
    8dc4:	11 24       	eor	r1, r1
    8dc6:	ec 56       	subi	r30, 0x6C	; 108
    8dc8:	f8 49       	sbci	r31, 0x98	; 152
    8dca:	27 8d       	ldd	r18, Z+31	; 0x1f
    8dcc:	21 30       	cpi	r18, 0x01	; 1
    8dce:	49 f5       	brne	.+82     	; 0x8e22 <lin_tl_handle_timeout+0xd6>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    8dd0:	24 e3       	ldi	r18, 0x34	; 52
    8dd2:	28 9f       	mul	r18, r24
    8dd4:	f0 01       	movw	r30, r0
    8dd6:	29 9f       	mul	r18, r25
    8dd8:	f0 0d       	add	r31, r0
    8dda:	11 24       	eor	r1, r1
    8ddc:	ec 56       	subi	r30, 0x6C	; 108
    8dde:	f8 49       	sbci	r31, 0x98	; 152
    8de0:	20 a1       	ldd	r18, Z+32	; 0x20
    8de2:	31 a1       	ldd	r19, Z+33	; 0x21
    8de4:	a9 01       	movw	r20, r18
    8de6:	41 50       	subi	r20, 0x01	; 1
    8de8:	51 09       	sbc	r21, r1
    8dea:	40 a3       	std	Z+32, r20	; 0x20
    8dec:	51 a3       	std	Z+33, r21	; 0x21
    8dee:	23 2b       	or	r18, r19
    8df0:	c1 f4       	brne	.+48     	; 0x8e22 <lin_tl_handle_timeout+0xd6>
        {
            /* update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    8df2:	26 e1       	ldi	r18, 0x16	; 22
    8df4:	28 9f       	mul	r18, r24
    8df6:	f0 01       	movw	r30, r0
    8df8:	29 9f       	mul	r18, r25
    8dfa:	f0 0d       	add	r31, r0
    8dfc:	11 24       	eor	r1, r1
    8dfe:	e8 53       	subi	r30, 0x38	; 56
    8e00:	f8 49       	sbci	r31, 0x98	; 152
    8e02:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    8e04:	24 e3       	ldi	r18, 0x34	; 52
    8e06:	28 9f       	mul	r18, r24
    8e08:	f0 01       	movw	r30, r0
    8e0a:	29 9f       	mul	r18, r25
    8e0c:	f0 0d       	add	r31, r0
    8e0e:	11 24       	eor	r1, r1
    8e10:	ec 56       	subi	r30, 0x6C	; 108
    8e12:	f8 49       	sbci	r31, 0x98	; 152
    8e14:	83 e0       	ldi	r24, 0x03	; 3
    8e16:	83 a7       	std	Z+43, r24	; 0x2b
            tl_desc_ptr->tx_msg_status = LD_N_AS_TIMEOUT;
    8e18:	84 e0       	ldi	r24, 0x04	; 4
    8e1a:	81 8f       	std	Z+25, r24	; 0x19
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8e1c:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    8e1e:	81 e0       	ldi	r24, 0x01	; 1
    8e20:	86 a3       	std	Z+38, r24	; 0x26
    8e22:	08 95       	ret

00008e24 <lin_tl_handler_error>:
 * Implements    : lin_tl_handler_error_Activity
 *END**************************************************************************/
static void lin_tl_handler_error(l_ifc_handle iii,
                                 l_u8 pid)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8e24:	90 e0       	ldi	r25, 0x00	; 0
    else
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* for slave */
        /* Master request */
        if (0x3CU == pid)
    8e26:	6c 33       	cpi	r22, 0x3C	; 60
    8e28:	61 f5       	brne	.+88     	; 0x8e82 <lin_tl_handler_error+0x5e>
        {
            /* update status of message and queue */
            tl_desc_ptr->rx_msg_status = LD_FAILED;
    8e2a:	24 e3       	ldi	r18, 0x34	; 52
    8e2c:	28 9f       	mul	r18, r24
    8e2e:	f0 01       	movw	r30, r0
    8e30:	29 9f       	mul	r18, r25
    8e32:	f0 0d       	add	r31, r0
    8e34:	11 24       	eor	r1, r1
    8e36:	ec 56       	subi	r30, 0x6C	; 108
    8e38:	f8 49       	sbci	r31, 0x98	; 152
    8e3a:	23 e0       	ldi	r18, 0x03	; 3
    8e3c:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->slave_resp_cnt = 0U;
    8e3e:	12 a6       	std	Z+42, r1	; 0x2a

            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    8e40:	2c e1       	ldi	r18, 0x1C	; 28
    8e42:	28 9f       	mul	r18, r24
    8e44:	f0 01       	movw	r30, r0
    8e46:	29 9f       	mul	r18, r25
    8e48:	f0 0d       	add	r31, r0
    8e4a:	11 24       	eor	r1, r1
    8e4c:	e8 5b       	subi	r30, 0xB8	; 184
    8e4e:	fc 49       	sbci	r31, 0x9C	; 156
    8e50:	20 81       	ld	r18, Z
    8e52:	21 11       	cpse	r18, r1
    8e54:	0b c0       	rjmp	.+22     	; 0x8e6c <lin_tl_handler_error+0x48>
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_RECEIVE_ERROR;
    8e56:	24 e3       	ldi	r18, 0x34	; 52
    8e58:	28 9f       	mul	r18, r24
    8e5a:	f0 01       	movw	r30, r0
    8e5c:	29 9f       	mul	r18, r25
    8e5e:	f0 0d       	add	r31, r0
    8e60:	11 24       	eor	r1, r1
    8e62:	ec 56       	subi	r30, 0x6C	; 108
    8e64:	f8 49       	sbci	r31, 0x98	; 152
    8e66:	22 e0       	ldi	r18, 0x02	; 2
    8e68:	27 87       	std	Z+15, r18	; 0x0f
    8e6a:	35 c0       	rjmp	.+106    	; 0x8ed6 <lin_tl_handler_error+0xb2>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_TRANSFER_ERROR;
    8e6c:	24 e3       	ldi	r18, 0x34	; 52
    8e6e:	28 9f       	mul	r18, r24
    8e70:	f0 01       	movw	r30, r0
    8e72:	29 9f       	mul	r18, r25
    8e74:	f0 0d       	add	r31, r0
    8e76:	11 24       	eor	r1, r1
    8e78:	ec 56       	subi	r30, 0x6C	; 108
    8e7a:	f8 49       	sbci	r31, 0x98	; 152
    8e7c:	27 e0       	ldi	r18, 0x07	; 7
    8e7e:	27 87       	std	Z+15, r18	; 0x0f
    8e80:	2a c0       	rjmp	.+84     	; 0x8ed6 <lin_tl_handler_error+0xb2>
        }
        else
        {
            /* Slave Response */
            /* update status of message and queue */
            tl_desc_ptr->tx_msg_status = LD_FAILED;
    8e82:	24 e3       	ldi	r18, 0x34	; 52
    8e84:	28 9f       	mul	r18, r24
    8e86:	f0 01       	movw	r30, r0
    8e88:	29 9f       	mul	r18, r25
    8e8a:	f0 0d       	add	r31, r0
    8e8c:	11 24       	eor	r1, r1
    8e8e:	ec 56       	subi	r30, 0x6C	; 108
    8e90:	f8 49       	sbci	r31, 0x98	; 152
    8e92:	23 e0       	ldi	r18, 0x03	; 3
    8e94:	21 8f       	std	Z+25, r18	; 0x19
            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    8e96:	2c e1       	ldi	r18, 0x1C	; 28
    8e98:	28 9f       	mul	r18, r24
    8e9a:	f0 01       	movw	r30, r0
    8e9c:	29 9f       	mul	r18, r25
    8e9e:	f0 0d       	add	r31, r0
    8ea0:	11 24       	eor	r1, r1
    8ea2:	e8 5b       	subi	r30, 0xB8	; 184
    8ea4:	fc 49       	sbci	r31, 0x9C	; 156
    8ea6:	20 81       	ld	r18, Z
    8ea8:	21 11       	cpse	r18, r1
    8eaa:	0b c0       	rjmp	.+22     	; 0x8ec2 <lin_tl_handler_error+0x9e>
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSMIT_ERROR;
    8eac:	24 e3       	ldi	r18, 0x34	; 52
    8eae:	28 9f       	mul	r18, r24
    8eb0:	f0 01       	movw	r30, r0
    8eb2:	29 9f       	mul	r18, r25
    8eb4:	f0 0d       	add	r31, r0
    8eb6:	11 24       	eor	r1, r1
    8eb8:	ec 56       	subi	r30, 0x6C	; 108
    8eba:	f8 49       	sbci	r31, 0x98	; 152
    8ebc:	26 e0       	ldi	r18, 0x06	; 6
    8ebe:	24 83       	std	Z+4, r18	; 0x04
    8ec0:	0a c0       	rjmp	.+20     	; 0x8ed6 <lin_tl_handler_error+0xb2>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSFER_ERROR;
    8ec2:	24 e3       	ldi	r18, 0x34	; 52
    8ec4:	28 9f       	mul	r18, r24
    8ec6:	f0 01       	movw	r30, r0
    8ec8:	29 9f       	mul	r18, r25
    8eca:	f0 0d       	add	r31, r0
    8ecc:	11 24       	eor	r1, r1
    8ece:	ec 56       	subi	r30, 0x6C	; 108
    8ed0:	f8 49       	sbci	r31, 0x98	; 152
    8ed2:	27 e0       	ldi	r18, 0x07	; 7
    8ed4:	24 83       	std	Z+4, r18	; 0x04
            }
        } /* end of (0x3C == pid) */

        tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    8ed6:	24 e3       	ldi	r18, 0x34	; 52
    8ed8:	28 9f       	mul	r18, r24
    8eda:	f0 01       	movw	r30, r0
    8edc:	29 9f       	mul	r18, r25
    8ede:	f0 0d       	add	r31, r0
    8ee0:	11 24       	eor	r1, r1
    8ee2:	ec 56       	subi	r30, 0x6C	; 108
    8ee4:	f8 49       	sbci	r31, 0x98	; 152
    8ee6:	83 e0       	ldi	r24, 0x03	; 3
    8ee8:	83 a7       	std	Z+43, r24	; 0x2b
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8eea:	17 8e       	std	Z+31, r1	; 0x1f
    8eec:	08 95       	ret

00008eee <lin_tl_handler_tx_completed>:
 *
 * Implements    : lin_tl_handler_tx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_tx_completed(l_ifc_handle iii)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8eee:	90 e0       	ldi	r25, 0x00	; 0
    #if (SUPPORT_MASTER_MODE == 1U)
    lin_master_data_t * master_data_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Reset interleave timeout */
    tl_desc_ptr->interleave_timeout_counter = 0;
    8ef0:	24 e3       	ldi	r18, 0x34	; 52
    8ef2:	28 9f       	mul	r18, r24
    8ef4:	f0 01       	movw	r30, r0
    8ef6:	29 9f       	mul	r18, r25
    8ef8:	f0 0d       	add	r31, r0
    8efa:	11 24       	eor	r1, r1
    8efc:	ec 56       	subi	r30, 0x6C	; 108
    8efe:	f8 49       	sbci	r31, 0x98	; 152
    8f00:	10 a6       	std	Z+40, r1	; 0x28
    8f02:	11 a6       	std	Z+41, r1	; 0x29
    /* Check message is sent completely */
    if (0U == tl_desc_ptr->tl_tx_queue.queue_current_size)
    8f04:	25 81       	ldd	r18, Z+5	; 0x05
    8f06:	36 81       	ldd	r19, Z+6	; 0x06
    8f08:	23 2b       	or	r18, r19
    8f0a:	19 f5       	brne	.+70     	; 0x8f52 <lin_tl_handler_tx_completed+0x64>
    {
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8f0c:	24 e3       	ldi	r18, 0x34	; 52
    8f0e:	28 9f       	mul	r18, r24
    8f10:	f0 01       	movw	r30, r0
    8f12:	29 9f       	mul	r18, r25
    8f14:	f0 0d       	add	r31, r0
    8f16:	11 24       	eor	r1, r1
    8f18:	ec 56       	subi	r30, 0x6C	; 108
    8f1a:	f8 49       	sbci	r31, 0x98	; 152
    8f1c:	17 8e       	std	Z+31, r1	; 0x1f
        tl_desc_ptr->tx_msg_status = LD_COMPLETED;
    8f1e:	22 e0       	ldi	r18, 0x02	; 2
    8f20:	21 8f       	std	Z+25, r18	; 0x19
        tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    8f22:	21 e0       	ldi	r18, 0x01	; 1
    8f24:	23 a7       	std	Z+43, r18	; 0x2b
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    8f26:	2c e1       	ldi	r18, 0x1C	; 28
    8f28:	28 9f       	mul	r18, r24
    8f2a:	f0 01       	movw	r30, r0
    8f2c:	29 9f       	mul	r18, r25
    8f2e:	f0 0d       	add	r31, r0
    8f30:	11 24       	eor	r1, r1
    8f32:	e8 5b       	subi	r30, 0xB8	; 184
    8f34:	fc 49       	sbci	r31, 0x9C	; 156
    8f36:	23 81       	ldd	r18, Z+3	; 0x03
    8f38:	21 11       	cpse	r18, r1
    8f3a:	3e c0       	rjmp	.+124    	; 0x8fb8 <lin_tl_handler_tx_completed+0xca>
        {
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    8f3c:	24 e3       	ldi	r18, 0x34	; 52
    8f3e:	28 9f       	mul	r18, r24
    8f40:	f0 01       	movw	r30, r0
    8f42:	29 9f       	mul	r18, r25
    8f44:	f0 0d       	add	r31, r0
    8f46:	11 24       	eor	r1, r1
    8f48:	ec 56       	subi	r30, 0x6C	; 108
    8f4a:	f8 49       	sbci	r31, 0x98	; 152
    8f4c:	81 e0       	ldi	r24, 0x01	; 1
    8f4e:	86 a3       	std	Z+38, r24	; 0x26
    8f50:	08 95       	ret
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }
    else
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    8f52:	2c e1       	ldi	r18, 0x1C	; 28
    8f54:	28 9f       	mul	r18, r24
    8f56:	f0 01       	movw	r30, r0
    8f58:	29 9f       	mul	r18, r25
    8f5a:	f0 0d       	add	r31, r0
    8f5c:	11 24       	eor	r1, r1
    8f5e:	e8 5b       	subi	r30, 0xB8	; 184
    8f60:	fc 49       	sbci	r31, 0x9C	; 156
    8f62:	23 81       	ldd	r18, Z+3	; 0x03
    8f64:	21 11       	cpse	r18, r1
    8f66:	28 c0       	rjmp	.+80     	; 0x8fb8 <lin_tl_handler_tx_completed+0xca>
        {
            if(prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    8f68:	2c e1       	ldi	r18, 0x1C	; 28
    8f6a:	28 9f       	mul	r18, r24
    8f6c:	f0 01       	movw	r30, r0
    8f6e:	29 9f       	mul	r18, r25
    8f70:	f0 0d       	add	r31, r0
    8f72:	11 24       	eor	r1, r1
    8f74:	e8 5b       	subi	r30, 0xB8	; 184
    8f76:	fc 49       	sbci	r31, 0x9C	; 156
    8f78:	20 81       	ld	r18, Z
    8f7a:	21 11       	cpse	r18, r1
    8f7c:	1d c0       	rjmp	.+58     	; 0x8fb8 <lin_tl_handler_tx_completed+0xca>
            {
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_As_timeout;
    8f7e:	2c e1       	ldi	r18, 0x1C	; 28
    8f80:	28 9f       	mul	r18, r24
    8f82:	f0 01       	movw	r30, r0
    8f84:	29 9f       	mul	r18, r25
    8f86:	f0 0d       	add	r31, r0
    8f88:	11 24       	eor	r1, r1
    8f8a:	e8 5b       	subi	r30, 0xB8	; 184
    8f8c:	fc 49       	sbci	r31, 0x9C	; 156
    8f8e:	e2 89       	ldd	r30, Z+18	; 0x12
    8f90:	24 e2       	ldi	r18, 0x24	; 36
    8f92:	e2 9f       	mul	r30, r18
    8f94:	f0 01       	movw	r30, r0
    8f96:	11 24       	eor	r1, r1
    8f98:	ec 59       	subi	r30, 0x9C	; 156
    8f9a:	fc 49       	sbci	r31, 0x9C	; 156
    8f9c:	23 8d       	ldd	r18, Z+27	; 0x1b
    8f9e:	34 8d       	ldd	r19, Z+28	; 0x1c
    8fa0:	44 e3       	ldi	r20, 0x34	; 52
    8fa2:	48 9f       	mul	r20, r24
    8fa4:	f0 01       	movw	r30, r0
    8fa6:	49 9f       	mul	r20, r25
    8fa8:	f0 0d       	add	r31, r0
    8faa:	11 24       	eor	r1, r1
    8fac:	ec 56       	subi	r30, 0x6C	; 108
    8fae:	f8 49       	sbci	r31, 0x98	; 152
    8fb0:	20 a3       	std	Z+32, r18	; 0x20
    8fb2:	31 a3       	std	Z+33, r19	; 0x21
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_AS_TIMEOUT;
    8fb4:	81 e0       	ldi	r24, 0x01	; 1
    8fb6:	87 8f       	std	Z+31, r24	; 0x1f
    8fb8:	08 95       	ret

00008fba <lin_tl_attach_service>:
 * This function is implemented for Slave only.
 *
 * Implements    : lin_tl_attach_service_Activity
 *END**************************************************************************/
static void lin_tl_attach_service(l_ifc_handle iii)
{
    8fba:	0f 93       	push	r16
    8fbc:	1f 93       	push	r17
    8fbe:	cf 93       	push	r28
    8fc0:	c8 2f       	mov	r28, r24
    l_u8 sid;
    l_u8 frame_type;
    l_u8 rx_queue_current_status;
    const lin_transport_layer_queue_t * rx_queue;
    lin_transport_layer_queue_t * tx_queue;
    rx_queue = &(g_lin_tl_descriptor_array[iii].tl_rx_queue);
    8fc2:	08 2f       	mov	r16, r24
    8fc4:	10 e0       	ldi	r17, 0x00	; 0
    tx_queue = &(g_lin_tl_descriptor_array[iii].tl_tx_queue);


    /* prepare tx queue */
    tx_queue->queue_current_size = 0;
    8fc6:	84 e3       	ldi	r24, 0x34	; 52
    8fc8:	80 9f       	mul	r24, r16
    8fca:	f0 01       	movw	r30, r0
    8fcc:	81 9f       	mul	r24, r17
    8fce:	f0 0d       	add	r31, r0
    8fd0:	11 24       	eor	r1, r1
    8fd2:	ec 56       	subi	r30, 0x6C	; 108
    8fd4:	f8 49       	sbci	r31, 0x98	; 152
    8fd6:	15 82       	std	Z+5, r1	; 0x05
    8fd8:	16 82       	std	Z+6, r1	; 0x06
    tx_queue->queue_header = 0;
    8fda:	10 82       	st	Z, r1
    8fdc:	11 82       	std	Z+1, r1	; 0x01
    tx_queue->queue_tail = 0;
    8fde:	12 82       	std	Z+2, r1	; 0x02
    8fe0:	13 82       	std	Z+3, r1	; 0x03
    tx_queue->queue_status = LD_QUEUE_EMPTY;
    8fe2:	85 e0       	ldi	r24, 0x05	; 5
    8fe4:	84 83       	std	Z+4, r24	; 0x04

    /* Get rx queue current status */
    rx_queue_current_status = ld_raw_rx_status(iii);
    8fe6:	8c 2f       	mov	r24, r28
    8fe8:	0e 94 9d 46 	call	0x8d3a	; 0x8d3a <ld_raw_rx_status>
    /* Check whether RX Queue contains data */
    if (((l_u8)LD_DATA_AVAILABLE == rx_queue_current_status) || ((l_u8)LD_QUEUE_FULL == rx_queue_current_status))
    8fec:	81 30       	cpi	r24, 0x01	; 1
    8fee:	11 f0       	breq	.+4      	; 0x8ff4 <lin_tl_attach_service+0x3a>
    8ff0:	83 30       	cpi	r24, 0x03	; 3
    8ff2:	19 f5       	brne	.+70     	; 0x903a <lin_tl_attach_service+0x80>
    {
        /* get frame type */
        frame_type = (l_u8)((rx_queue->tl_pdu_ptr[rx_queue->queue_header][1] & 0xF0U) >> 4U);
    8ff4:	84 e3       	ldi	r24, 0x34	; 52
    8ff6:	80 9f       	mul	r24, r16
    8ff8:	d0 01       	movw	r26, r0
    8ffa:	81 9f       	mul	r24, r17
    8ffc:	b0 0d       	add	r27, r0
    8ffe:	11 24       	eor	r1, r1
    9000:	ac 56       	subi	r26, 0x6C	; 108
    9002:	b8 49       	sbci	r27, 0x98	; 152
    9004:	54 96       	adiw	r26, 0x14	; 20
    9006:	8d 91       	ld	r24, X+
    9008:	9c 91       	ld	r25, X
    900a:	55 97       	sbiw	r26, 0x15	; 21
    900c:	1b 96       	adiw	r26, 0x0b	; 11
    900e:	ed 91       	ld	r30, X+
    9010:	fc 91       	ld	r31, X
    9012:	1c 97       	sbiw	r26, 0x0c	; 12
    9014:	ee 0f       	add	r30, r30
    9016:	ff 1f       	adc	r31, r31
    9018:	ee 0f       	add	r30, r30
    901a:	ff 1f       	adc	r31, r31
    901c:	ee 0f       	add	r30, r30
    901e:	ff 1f       	adc	r31, r31
    9020:	e8 0f       	add	r30, r24
    9022:	f9 1f       	adc	r31, r25
    9024:	81 81       	ldd	r24, Z+1	; 0x01
    9026:	82 95       	swap	r24
    9028:	8f 70       	andi	r24, 0x0F	; 15
        /* Get SID information */
        if (frame_type == PCI_FF)
    902a:	81 30       	cpi	r24, 0x01	; 1
    902c:	11 f4       	brne	.+4      	; 0x9032 <lin_tl_attach_service+0x78>
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][3];
    902e:	63 81       	ldd	r22, Z+3	; 0x03
    9030:	01 c0       	rjmp	.+2      	; 0x9034 <lin_tl_attach_service+0x7a>
        }
        else
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][2];
    9032:	62 81       	ldd	r22, Z+2	; 0x02
        }

        /* Callback to diagnostic layer to process SID */
        DIAG_SERVICE_CALLBACK_HANDLER(iii, sid);
    9034:	8c 2f       	mov	r24, r28
    9036:	0e 94 c6 40 	call	0x818c	; 0x818c <lin_diag_service_callback>
    }
}
    903a:	cf 91       	pop	r28
    903c:	1f 91       	pop	r17
    903e:	0f 91       	pop	r16
    9040:	08 95       	ret

00009042 <tl_receive_message>:
 *                 ld_receive_message() function
 *
 * Implements    : tl_receive_message_Activity
 *END**************************************************************************/
static void tl_receive_message(l_ifc_handle iii)
{
    9042:	9f 92       	push	r9
    9044:	af 92       	push	r10
    9046:	bf 92       	push	r11
    9048:	cf 92       	push	r12
    904a:	df 92       	push	r13
    904c:	ef 92       	push	r14
    904e:	ff 92       	push	r15
    9050:	0f 93       	push	r16
    9052:	1f 93       	push	r17
    9054:	cf 93       	push	r28
    9056:	df 93       	push	r29
    9058:	cd b7       	in	r28, 0x3d	; 61
    905a:	de b7       	in	r29, 0x3e	; 62
    905c:	28 97       	sbiw	r28, 0x08	; 8
    905e:	cd bf       	out	0x3d, r28	; 61
    9060:	de bf       	out	0x3e, r29	; 62
  lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9062:	a8 2e       	mov	r10, r24
    9064:	b1 2c       	mov	r11, r1
    lin_tl_pdu_data_t pdu;
    l_u16 i;
    l_u16 data_index = 0U;
    l_u16 tmp_length = 0U;
    l_u8 PCI_type;
    l_u8* data = tl_desc_ptr->receive_message_ptr;
    9066:	94 e3       	ldi	r25, 0x34	; 52
    9068:	9a 9d       	mul	r25, r10
    906a:	f0 01       	movw	r30, r0
    906c:	9b 9d       	mul	r25, r11
    906e:	f0 0d       	add	r31, r0
    9070:	11 24       	eor	r1, r1
    9072:	ec 56       	subi	r30, 0x6C	; 108
    9074:	f8 49       	sbci	r31, 0x98	; 152
    9076:	e6 a4       	ldd	r14, Z+46	; 0x2e
    9078:	f7 a4       	ldd	r15, Z+47	; 0x2f
    l_u8* NAD = tl_desc_ptr->receive_NAD_ptr;
    907a:	c0 a8       	ldd	r12, Z+48	; 0x30
    907c:	d1 a8       	ldd	r13, Z+49	; 0x31
    l_u16* length = tl_desc_ptr->receive_message_length_ptr;
    907e:	02 a9       	ldd	r16, Z+50	; 0x32
    9080:	13 a9       	ldd	r17, Z+51	; 0x33

    if (LD_NO_DATA != tl_desc_ptr->tl_rx_queue.queue_status)
    9082:	97 85       	ldd	r25, Z+15	; 0x0f
    9084:	99 23       	and	r25, r25
    9086:	09 f4       	brne	.+2      	; 0x908a <tl_receive_message+0x48>
    9088:	b9 c0       	rjmp	.+370    	; 0x91fc <tl_receive_message+0x1ba>
    908a:	98 2e       	mov	r9, r24
        /* Message is received completely */
        /* get data from receive queue */
        /*
        * @violates MISRA 2012 Required Rule 1.3 Required
        */
        ld_get_raw(iii, pdu);
    908c:	be 01       	movw	r22, r28
    908e:	6f 5f       	subi	r22, 0xFF	; 255
    9090:	7f 4f       	sbci	r23, 0xFF	; 255
    9092:	8a 2d       	mov	r24, r10
    9094:	0e 94 93 46 	call	0x8d26	; 0x8d26 <ld_get_raw>
        /* Analyze data */
        if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    9098:	8c e1       	ldi	r24, 0x1C	; 28
    909a:	8a 9d       	mul	r24, r10
    909c:	f0 01       	movw	r30, r0
    909e:	8b 9d       	mul	r24, r11
    90a0:	f0 0d       	add	r31, r0
    90a2:	11 24       	eor	r1, r1
    90a4:	e8 5b       	subi	r30, 0xB8	; 184
    90a6:	fc 49       	sbci	r31, 0x9C	; 156
    90a8:	83 81       	ldd	r24, Z+3	; 0x03
    90aa:	88 23       	and	r24, r24
    90ac:	19 f0       	breq	.+6      	; 0x90b4 <tl_receive_message+0x72>
        {
            *NAD = pdu[0];
    90ae:	89 81       	ldd	r24, Y+1	; 0x01
    90b0:	f6 01       	movw	r30, r12
    90b2:	80 83       	st	Z, r24
        }

        /* Check type of pdu */
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
    90b4:	8a 81       	ldd	r24, Y+2	; 0x02
    90b6:	98 2f       	mov	r25, r24
    90b8:	92 95       	swap	r25
    90ba:	9f 70       	andi	r25, 0x0F	; 15
        switch (PCI_type)
    90bc:	19 f0       	breq	.+6      	; 0x90c4 <tl_receive_message+0x82>
    90be:	91 30       	cpi	r25, 0x01	; 1
    90c0:	21 f1       	breq	.+72     	; 0x910a <tl_receive_message+0xc8>
    90c2:	91 c0       	rjmp	.+290    	; 0x91e6 <tl_receive_message+0x1a4>
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    90c4:	8f 70       	andi	r24, 0x0F	; 15
    90c6:	90 e0       	ldi	r25, 0x00	; 0
                i = *length;
    90c8:	f8 01       	movw	r30, r16
    90ca:	40 81       	ld	r20, Z
    90cc:	51 81       	ldd	r21, Z+1	; 0x01
                *length = tmp_length;
    90ce:	80 83       	st	Z, r24
    90d0:	91 83       	std	Z+1, r25	; 0x01
                if (i < tmp_length)
    90d2:	48 17       	cp	r20, r24
    90d4:	59 07       	cpc	r21, r25
    90d6:	08 f0       	brcs	.+2      	; 0x90da <tl_receive_message+0x98>
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
        switch (PCI_type)
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    90d8:	ac 01       	movw	r20, r24
                if (i < tmp_length)
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
    90da:	8b 81       	ldd	r24, Y+3	; 0x03
    90dc:	f7 01       	movw	r30, r14
    90de:	80 83       	st	Z, r24
                for (i = 1U; i < tmp_length; i++)
    90e0:	81 e0       	ldi	r24, 0x01	; 1
    90e2:	90 e0       	ldi	r25, 0x00	; 0
    90e4:	0e c0       	rjmp	.+28     	; 0x9102 <tl_receive_message+0xc0>
                {
                    data[i] = pdu[i + 2U];
    90e6:	d7 01       	movw	r26, r14
    90e8:	a8 0f       	add	r26, r24
    90ea:	b9 1f       	adc	r27, r25
    90ec:	fc 01       	movw	r30, r24
    90ee:	32 96       	adiw	r30, 0x02	; 2
    90f0:	21 e0       	ldi	r18, 0x01	; 1
    90f2:	30 e0       	ldi	r19, 0x00	; 0
    90f4:	2c 0f       	add	r18, r28
    90f6:	3d 1f       	adc	r19, r29
    90f8:	e2 0f       	add	r30, r18
    90fa:	f3 1f       	adc	r31, r19
    90fc:	20 81       	ld	r18, Z
    90fe:	2c 93       	st	X, r18
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
                for (i = 1U; i < tmp_length; i++)
    9100:	01 96       	adiw	r24, 0x01	; 1
    9102:	84 17       	cp	r24, r20
    9104:	95 07       	cpc	r25, r21
    9106:	78 f3       	brcs	.-34     	; 0x90e6 <tl_receive_message+0xa4>
    9108:	6e c0       	rjmp	.+220    	; 0x91e6 <tl_receive_message+0x1a4>
                }
                break;
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    910a:	8f 70       	andi	r24, 0x0F	; 15
    910c:	90 e0       	ldi	r25, 0x00	; 0
    910e:	98 2f       	mov	r25, r24
    9110:	88 27       	eor	r24, r24
    9112:	2b 81       	ldd	r18, Y+3	; 0x03
    9114:	82 0f       	add	r24, r18
    9116:	91 1d       	adc	r25, r1
                i = *length;
    9118:	f8 01       	movw	r30, r16
    911a:	c0 80       	ld	r12, Z
    911c:	d1 80       	ldd	r13, Z+1	; 0x01
                *length = tmp_length;
    911e:	80 83       	st	Z, r24
    9120:	91 83       	std	Z+1, r25	; 0x01
                if (i < tmp_length)
    9122:	c8 16       	cp	r12, r24
    9124:	d9 06       	cpc	r13, r25
    9126:	08 f0       	brcs	.+2      	; 0x912a <tl_receive_message+0xe8>
                }
                break;
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    9128:	6c 01       	movw	r12, r24
                *length = tmp_length;
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
    912a:	8c 81       	ldd	r24, Y+4	; 0x04
    912c:	f7 01       	movw	r30, r14
    912e:	80 83       	st	Z, r24
                for (i = 1U; i < 5U; i++)
    9130:	81 e0       	ldi	r24, 0x01	; 1
    9132:	90 e0       	ldi	r25, 0x00	; 0
    9134:	0e c0       	rjmp	.+28     	; 0x9152 <tl_receive_message+0x110>
                {
                    data[i] = pdu[i + 3U];
    9136:	d7 01       	movw	r26, r14
    9138:	a8 0f       	add	r26, r24
    913a:	b9 1f       	adc	r27, r25
    913c:	fc 01       	movw	r30, r24
    913e:	33 96       	adiw	r30, 0x03	; 3
    9140:	21 e0       	ldi	r18, 0x01	; 1
    9142:	30 e0       	ldi	r19, 0x00	; 0
    9144:	2c 0f       	add	r18, r28
    9146:	3d 1f       	adc	r19, r29
    9148:	e2 0f       	add	r30, r18
    914a:	f3 1f       	adc	r31, r19
    914c:	20 81       	ld	r18, Z
    914e:	2c 93       	st	X, r18
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
                for (i = 1U; i < 5U; i++)
    9150:	01 96       	adiw	r24, 0x01	; 1
    9152:	85 30       	cpi	r24, 0x05	; 5
    9154:	91 05       	cpc	r25, r1
    9156:	78 f3       	brcs	.-34     	; 0x9136 <tl_receive_message+0xf4>
                {
                    data[i] = pdu[i + 3U];
                }

                tmp_length -= 5U;
    9158:	35 e0       	ldi	r19, 0x05	; 5
    915a:	c3 1a       	sub	r12, r19
    915c:	d1 08       	sbc	r13, r1
                data_index += 5U;
    915e:	05 e0       	ldi	r16, 0x05	; 5
    9160:	10 e0       	ldi	r17, 0x00	; 0

                /* Consecutive frame */
                while (tmp_length > 6U)
    9162:	1e c0       	rjmp	.+60     	; 0x91a0 <tl_receive_message+0x15e>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    9164:	be 01       	movw	r22, r28
    9166:	6f 5f       	subi	r22, 0xFF	; 255
    9168:	7f 4f       	sbci	r23, 0xFF	; 255
    916a:	89 2d       	mov	r24, r9
    916c:	0e 94 93 46 	call	0x8d26	; 0x8d26 <ld_get_raw>
                    for (i = 2U; i < 8U; i++)
    9170:	22 e0       	ldi	r18, 0x02	; 2
    9172:	30 e0       	ldi	r19, 0x00	; 0
    9174:	0f c0       	rjmp	.+30     	; 0x9194 <tl_receive_message+0x152>
                    {
                        data[data_index] = pdu[i];
    9176:	d7 01       	movw	r26, r14
    9178:	a0 0f       	add	r26, r16
    917a:	b1 1f       	adc	r27, r17
    917c:	e1 e0       	ldi	r30, 0x01	; 1
    917e:	f0 e0       	ldi	r31, 0x00	; 0
    9180:	ec 0f       	add	r30, r28
    9182:	fd 1f       	adc	r31, r29
    9184:	e2 0f       	add	r30, r18
    9186:	f3 1f       	adc	r31, r19
    9188:	90 81       	ld	r25, Z
    918a:	9c 93       	st	X, r25
                        data_index++;
    918c:	0f 5f       	subi	r16, 0xFF	; 255
    918e:	1f 4f       	sbci	r17, 0xFF	; 255
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 2U; i < 8U; i++)
    9190:	2f 5f       	subi	r18, 0xFF	; 255
    9192:	3f 4f       	sbci	r19, 0xFF	; 255
    9194:	28 30       	cpi	r18, 0x08	; 8
    9196:	31 05       	cpc	r19, r1
    9198:	70 f3       	brcs	.-36     	; 0x9176 <tl_receive_message+0x134>
                    {
                        data[data_index] = pdu[i];
                        data_index++;
                    }

                    tmp_length -= 6U;
    919a:	86 e0       	ldi	r24, 0x06	; 6
    919c:	c8 1a       	sub	r12, r24
    919e:	d1 08       	sbc	r13, r1

                tmp_length -= 5U;
                data_index += 5U;

                /* Consecutive frame */
                while (tmp_length > 6U)
    91a0:	e7 e0       	ldi	r30, 0x07	; 7
    91a2:	ce 16       	cp	r12, r30
    91a4:	d1 04       	cpc	r13, r1
    91a6:	f0 f6       	brcc	.-68     	; 0x9164 <tl_receive_message+0x122>

                    tmp_length -= 6U;
                }

                /* Last frame */
                if (tmp_length > 0U)
    91a8:	c1 14       	cp	r12, r1
    91aa:	d1 04       	cpc	r13, r1
    91ac:	e1 f0       	breq	.+56     	; 0x91e6 <tl_receive_message+0x1a4>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    91ae:	be 01       	movw	r22, r28
    91b0:	6f 5f       	subi	r22, 0xFF	; 255
    91b2:	7f 4f       	sbci	r23, 0xFF	; 255
    91b4:	89 2d       	mov	r24, r9
    91b6:	0e 94 93 46 	call	0x8d26	; 0x8d26 <ld_get_raw>
                    for (i = 0U; i < tmp_length; i++)
    91ba:	80 e0       	ldi	r24, 0x00	; 0
    91bc:	90 e0       	ldi	r25, 0x00	; 0
    91be:	10 c0       	rjmp	.+32     	; 0x91e0 <tl_receive_message+0x19e>
                    {
                        data[data_index] = pdu[i + 2U];
    91c0:	d7 01       	movw	r26, r14
    91c2:	a0 0f       	add	r26, r16
    91c4:	b1 1f       	adc	r27, r17
    91c6:	fc 01       	movw	r30, r24
    91c8:	32 96       	adiw	r30, 0x02	; 2
    91ca:	21 e0       	ldi	r18, 0x01	; 1
    91cc:	30 e0       	ldi	r19, 0x00	; 0
    91ce:	2c 0f       	add	r18, r28
    91d0:	3d 1f       	adc	r19, r29
    91d2:	e2 0f       	add	r30, r18
    91d4:	f3 1f       	adc	r31, r19
    91d6:	20 81       	ld	r18, Z
    91d8:	2c 93       	st	X, r18
                        data_index++;
    91da:	0f 5f       	subi	r16, 0xFF	; 255
    91dc:	1f 4f       	sbci	r17, 0xFF	; 255
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 0U; i < tmp_length; i++)
    91de:	01 96       	adiw	r24, 0x01	; 1
    91e0:	8c 15       	cp	r24, r12
    91e2:	9d 05       	cpc	r25, r13
    91e4:	68 f3       	brcs	.-38     	; 0x91c0 <tl_receive_message+0x17e>
                break;
            default:
                /* do nothing */
                break;
        } /* end of switch */
        tl_desc_ptr->ld_return_data = false;
    91e6:	84 e3       	ldi	r24, 0x34	; 52
    91e8:	8a 9d       	mul	r24, r10
    91ea:	f0 01       	movw	r30, r0
    91ec:	8b 9d       	mul	r24, r11
    91ee:	f0 0d       	add	r31, r0
    91f0:	11 24       	eor	r1, r1
    91f2:	ec 56       	subi	r30, 0x6C	; 108
    91f4:	f8 49       	sbci	r31, 0x98	; 152
    91f6:	14 a6       	std	Z+44, r1	; 0x2c
        tl_desc_ptr->rx_msg_status = LD_COMPLETED;
    91f8:	82 e0       	ldi	r24, 0x02	; 2
    91fa:	86 8b       	std	Z+22, r24	; 0x16
    }
}
    91fc:	28 96       	adiw	r28, 0x08	; 8
    91fe:	cd bf       	out	0x3d, r28	; 61
    9200:	de bf       	out	0x3e, r29	; 62
    9202:	df 91       	pop	r29
    9204:	cf 91       	pop	r28
    9206:	1f 91       	pop	r17
    9208:	0f 91       	pop	r16
    920a:	ff 90       	pop	r15
    920c:	ef 90       	pop	r14
    920e:	df 90       	pop	r13
    9210:	cf 90       	pop	r12
    9212:	bf 90       	pop	r11
    9214:	af 90       	pop	r10
    9216:	9f 90       	pop	r9
    9218:	08 95       	ret

0000921a <tl_put_raw>:
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    921a:	cf 93       	push	r28
    921c:	df 93       	push	r29
    921e:	fa 01       	movw	r30, r20
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Get transmit queue */
    queue_data = queue->tl_pdu_ptr;
    9220:	c1 85       	ldd	r28, Z+9	; 0x09
    9222:	d2 85       	ldd	r29, Z+10	; 0x0a

    /* check status of queue */
    if ((queue->queue_current_size < queue->queue_max_size) && ((data[0] != LD_FUNCTIONAL_NAD) || (queue_data[queue->queue_header][0] != LD_FUNCTIONAL_NAD)))
    9224:	45 81       	ldd	r20, Z+5	; 0x05
    9226:	56 81       	ldd	r21, Z+6	; 0x06
    9228:	87 81       	ldd	r24, Z+7	; 0x07
    922a:	90 85       	ldd	r25, Z+8	; 0x08
    922c:	48 17       	cp	r20, r24
    922e:	59 07       	cpc	r21, r25
    9230:	08 f0       	brcs	.+2      	; 0x9234 <tl_put_raw+0x1a>
    9232:	5f c0       	rjmp	.+190    	; 0x92f2 <tl_put_raw+0xd8>
    9234:	db 01       	movw	r26, r22
    9236:	4c 91       	ld	r20, X
    9238:	4e 37       	cpi	r20, 0x7E	; 126
    923a:	71 f4       	brne	.+28     	; 0x9258 <tl_put_raw+0x3e>
    923c:	a0 81       	ld	r26, Z
    923e:	b1 81       	ldd	r27, Z+1	; 0x01
    9240:	aa 0f       	add	r26, r26
    9242:	bb 1f       	adc	r27, r27
    9244:	aa 0f       	add	r26, r26
    9246:	bb 1f       	adc	r27, r27
    9248:	aa 0f       	add	r26, r26
    924a:	bb 1f       	adc	r27, r27
    924c:	ac 0f       	add	r26, r28
    924e:	bd 1f       	adc	r27, r29
    9250:	3c 91       	ld	r19, X
    9252:	3e 37       	cpi	r19, 0x7E	; 126
    9254:	09 f4       	brne	.+2      	; 0x9258 <tl_put_raw+0x3e>
    9256:	4d c0       	rjmp	.+154    	; 0x92f2 <tl_put_raw+0xd8>
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
    9258:	34 81       	ldd	r19, Z+4	; 0x04
    925a:	35 30       	cpi	r19, 0x05	; 5
    925c:	11 f0       	breq	.+4      	; 0x9262 <tl_put_raw+0x48>
    925e:	31 11       	cpse	r19, r1
    9260:	08 c0       	rjmp	.+16     	; 0x9272 <tl_put_raw+0x58>
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    9262:	21 11       	cpse	r18, r1
    9264:	03 c0       	rjmp	.+6      	; 0x926c <tl_put_raw+0x52>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    9266:	84 e0       	ldi	r24, 0x04	; 4
    9268:	84 83       	std	Z+4, r24	; 0x04
    926a:	1e c0       	rjmp	.+60     	; 0x92a8 <tl_put_raw+0x8e>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    926c:	81 e0       	ldi	r24, 0x01	; 1
    926e:	84 83       	std	Z+4, r24	; 0x04
    9270:	1b c0       	rjmp	.+54     	; 0x92a8 <tl_put_raw+0x8e>
            }
        }
        else
        {
            if ((data[0] == LD_FUNCTIONAL_NAD) && (TRANSMITTING == direction))
    9272:	4e 37       	cpi	r20, 0x7E	; 126
    9274:	71 f4       	brne	.+28     	; 0x9292 <tl_put_raw+0x78>
    9276:	21 11       	cpse	r18, r1
    9278:	0c c0       	rjmp	.+24     	; 0x9292 <tl_put_raw+0x78>
            {
                if (0U == queue->queue_header)
    927a:	20 81       	ld	r18, Z
    927c:	31 81       	ldd	r19, Z+1	; 0x01
    927e:	23 2b       	or	r18, r19
    9280:	11 f4       	brne	.+4      	; 0x9286 <tl_put_raw+0x6c>
                {
                    queue->queue_header = queue->queue_max_size;
    9282:	80 83       	st	Z, r24
    9284:	91 83       	std	Z+1, r25	; 0x01
                }
                queue->queue_header--;
    9286:	80 81       	ld	r24, Z
    9288:	91 81       	ldd	r25, Z+1	; 0x01
    928a:	01 97       	sbiw	r24, 0x01	; 1
    928c:	80 83       	st	Z, r24
    928e:	91 83       	std	Z+1, r25	; 0x01
    9290:	0b c0       	rjmp	.+22     	; 0x92a8 <tl_put_raw+0x8e>
            }
            else
            {
                queue->queue_tail++;
    9292:	22 81       	ldd	r18, Z+2	; 0x02
    9294:	33 81       	ldd	r19, Z+3	; 0x03
    9296:	2f 5f       	subi	r18, 0xFF	; 255
    9298:	3f 4f       	sbci	r19, 0xFF	; 255
    929a:	22 83       	std	Z+2, r18	; 0x02
    929c:	33 83       	std	Z+3, r19	; 0x03
                /* Check if queue size equal to queue tail */
                if (queue->queue_max_size == queue->queue_tail)
    929e:	82 17       	cp	r24, r18
    92a0:	93 07       	cpc	r25, r19
    92a2:	11 f4       	brne	.+4      	; 0x92a8 <tl_put_raw+0x8e>
                {
                    queue->queue_tail = 0U;
    92a4:	12 82       	std	Z+2, r1	; 0x02
    92a6:	13 82       	std	Z+3, r1	; 0x03
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    92a8:	50 e0       	ldi	r21, 0x00	; 0
    92aa:	15 c0       	rjmp	.+42     	; 0x92d6 <tl_put_raw+0xbc>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
            {
                queue_data[queue->queue_tail][i] = data[i];
    92ac:	82 81       	ldd	r24, Z+2	; 0x02
    92ae:	93 81       	ldd	r25, Z+3	; 0x03
    92b0:	88 0f       	add	r24, r24
    92b2:	99 1f       	adc	r25, r25
    92b4:	88 0f       	add	r24, r24
    92b6:	99 1f       	adc	r25, r25
    92b8:	88 0f       	add	r24, r24
    92ba:	99 1f       	adc	r25, r25
    92bc:	8c 0f       	add	r24, r28
    92be:	9d 1f       	adc	r25, r29
    92c0:	25 2f       	mov	r18, r21
    92c2:	30 e0       	ldi	r19, 0x00	; 0
    92c4:	db 01       	movw	r26, r22
    92c6:	a2 0f       	add	r26, r18
    92c8:	b3 1f       	adc	r27, r19
    92ca:	4c 91       	ld	r20, X
    92cc:	dc 01       	movw	r26, r24
    92ce:	a2 0f       	add	r26, r18
    92d0:	b3 1f       	adc	r27, r19
    92d2:	4c 93       	st	X, r20
        }
        else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
    92d4:	5f 5f       	subi	r21, 0xFF	; 255
    92d6:	58 30       	cpi	r21, 0x08	; 8
    92d8:	48 f3       	brcs	.-46     	; 0x92ac <tl_put_raw+0x92>
                queue_data[queue->queue_tail][i] = data[i];
            }
        }

        /* update queue status */
        queue->queue_current_size++;
    92da:	85 81       	ldd	r24, Z+5	; 0x05
    92dc:	96 81       	ldd	r25, Z+6	; 0x06
    92de:	01 96       	adiw	r24, 0x01	; 1
    92e0:	85 83       	std	Z+5, r24	; 0x05
    92e2:	96 83       	std	Z+6, r25	; 0x06
        if (queue->queue_current_size >= queue->queue_max_size)
    92e4:	27 81       	ldd	r18, Z+7	; 0x07
    92e6:	30 85       	ldd	r19, Z+8	; 0x08
    92e8:	82 17       	cp	r24, r18
    92ea:	93 07       	cpc	r25, r19
    92ec:	10 f0       	brcs	.+4      	; 0x92f2 <tl_put_raw+0xd8>
        {
            queue->queue_status = LD_QUEUE_FULL;
    92ee:	83 e0       	ldi	r24, 0x03	; 3
    92f0:	84 83       	std	Z+4, r24	; 0x04
        }
    }
}
    92f2:	df 91       	pop	r29
    92f4:	cf 91       	pop	r28
    92f6:	08 95       	ret

000092f8 <lin_process_single_frame>:
 * Description   : Process single frame.
 *
 * Implements    : lin_process_single_frame_Activity
 *END**************************************************************************/
static void lin_process_single_frame(l_ifc_handle iii)
{
    92f8:	ff 92       	push	r15
    92fa:	0f 93       	push	r16
    92fc:	1f 93       	push	r17
    92fe:	cf 93       	push	r28
    9300:	df 93       	push	r29
    l_u8 length;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9302:	08 2f       	mov	r16, r24
    9304:	10 e0       	ldi	r17, 0x00	; 0
    const l_u8 * data = prot_state_ptr->response_buffer_ptr;
    9306:	96 e1       	ldi	r25, 0x16	; 22
    9308:	90 9f       	mul	r25, r16
    930a:	f0 01       	movw	r30, r0
    930c:	91 9f       	mul	r25, r17
    930e:	f0 0d       	add	r31, r0
    9310:	11 24       	eor	r1, r1
    9312:	e8 53       	subi	r30, 0x38	; 56
    9314:	f8 49       	sbci	r31, 0x98	; 152
    9316:	a2 81       	ldd	r26, Z+2	; 0x02
    9318:	b3 81       	ldd	r27, Z+3	; 0x03
    {
        master_data_ptr = &g_lin_master_data_array[g_lin_protocol_user_cfg_array[iii].master_ifc_handle];
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    length = (l_u8)(data[1] & 0x0FU);
    931a:	11 96       	adiw	r26, 0x01	; 1
    931c:	9c 91       	ld	r25, X
    931e:	11 97       	sbiw	r26, 0x01	; 1
    9320:	9f 70       	andi	r25, 0x0F	; 15
    /* check length of SF. If not valid, ignore this PDU */
    if (length <= 6U)
    9322:	97 30       	cpi	r25, 0x07	; 7
    9324:	08 f0       	brcs	.+2      	; 0x9328 <lin_process_single_frame+0x30>
    9326:	50 c0       	rjmp	.+160    	; 0x93c8 <lin_process_single_frame+0xd0>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
        #if (SUPPORT_SLAVE_MODE == 1U)
            /* Slave interface */
            /* put PDU to rx queue */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    9328:	94 e3       	ldi	r25, 0x34	; 52
    932a:	90 9f       	mul	r25, r16
    932c:	f0 01       	movw	r30, r0
    932e:	91 9f       	mul	r25, r17
    9330:	f0 0d       	add	r31, r0
    9332:	11 24       	eor	r1, r1
    9334:	ec 56       	subi	r30, 0x6C	; 108
    9336:	f8 49       	sbci	r31, 0x98	; 152
    9338:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    933a:	91 e0       	ldi	r25, 0x01	; 1
    933c:	93 a7       	std	Z+43, r25	; 0x2b
            /* reset queue header and queue tail */
            tl_desc_ptr->tl_rx_queue.queue_header = 0;
    933e:	13 86       	std	Z+11, r1	; 0x0b
    9340:	14 86       	std	Z+12, r1	; 0x0c
            tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    9342:	15 86       	std	Z+13, r1	; 0x0d
    9344:	16 86       	std	Z+14, r1	; 0x0e
            tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    9346:	10 8a       	std	Z+16, r1	; 0x10
    9348:	11 8a       	std	Z+17, r1	; 0x11
            tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    934a:	17 86       	std	Z+15, r1	; 0x0f

            if (data[0] == LD_FUNCTIONAL_NAD)
    934c:	9c 91       	ld	r25, X
    934e:	9e 37       	cpi	r25, 0x7E	; 126
    9350:	59 f4       	brne	.+22     	; 0x9368 <lin_process_single_frame+0x70>
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_FUNCTIONAL;
    9352:	94 e3       	ldi	r25, 0x34	; 52
    9354:	90 9f       	mul	r25, r16
    9356:	f0 01       	movw	r30, r0
    9358:	91 9f       	mul	r25, r17
    935a:	f0 0d       	add	r31, r0
    935c:	11 24       	eor	r1, r1
    935e:	ec 56       	subi	r30, 0x6C	; 108
    9360:	f8 49       	sbci	r31, 0x98	; 152
    9362:	96 e0       	ldi	r25, 0x06	; 6
    9364:	96 a3       	std	Z+38, r25	; 0x26
    9366:	0a c0       	rjmp	.+20     	; 0x937c <lin_process_single_frame+0x84>
            }
            else
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    9368:	94 e3       	ldi	r25, 0x34	; 52
    936a:	90 9f       	mul	r25, r16
    936c:	f0 01       	movw	r30, r0
    936e:	91 9f       	mul	r25, r17
    9370:	f0 0d       	add	r31, r0
    9372:	11 24       	eor	r1, r1
    9374:	ec 56       	subi	r30, 0x6C	; 108
    9376:	f8 49       	sbci	r31, 0x98	; 152
    9378:	95 e0       	ldi	r25, 0x05	; 5
    937a:	96 a3       	std	Z+38, r25	; 0x26
    937c:	f8 2e       	mov	r15, r24
            }

            /* put to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    937e:	84 e3       	ldi	r24, 0x34	; 52
    9380:	80 9f       	mul	r24, r16
    9382:	e0 01       	movw	r28, r0
    9384:	81 9f       	mul	r24, r17
    9386:	d0 0d       	add	r29, r0
    9388:	11 24       	eor	r1, r1
    938a:	ae 01       	movw	r20, r28
    938c:	41 56       	subi	r20, 0x61	; 97
    938e:	58 49       	sbci	r21, 0x98	; 152
    9390:	21 e0       	ldi	r18, 0x01	; 1
    9392:	bd 01       	movw	r22, r26
    9394:	8f 2d       	mov	r24, r15
    9396:	0e 94 0d 49 	call	0x921a	; 0x921a <tl_put_raw>
            tl_desc_ptr->frame_counter = 1;
    939a:	cc 56       	subi	r28, 0x6C	; 108
    939c:	d8 49       	sbci	r29, 0x98	; 152
    939e:	81 e0       	ldi	r24, 0x01	; 1
    93a0:	8d a3       	std	Y+37, r24	; 0x25
            tl_desc_ptr->num_of_pdu = 1;
    93a2:	8c a3       	std	Y+36, r24	; 0x24
            lin_tl_attach_service(iii);
    93a4:	8f 2d       	mov	r24, r15
    93a6:	0e 94 dd 47 	call	0x8fba	; 0x8fba <lin_tl_attach_service>
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        }

        /* If ld_receive_message() function is called before SF pdu to be sent */
        if(tl_desc_ptr->ld_return_data)
    93aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    93ac:	88 23       	and	r24, r24
    93ae:	19 f0       	breq	.+6      	; 0x93b6 <lin_process_single_frame+0xbe>
        {
            tl_receive_message(iii);
    93b0:	8f 2d       	mov	r24, r15
    93b2:	0e 94 21 48 	call	0x9042	; 0x9042 <tl_receive_message>
        }
        tl_desc_ptr->FF_pdu_received = false;
    93b6:	84 e3       	ldi	r24, 0x34	; 52
    93b8:	80 9f       	mul	r24, r16
    93ba:	f0 01       	movw	r30, r0
    93bc:	81 9f       	mul	r24, r17
    93be:	f0 0d       	add	r31, r0
    93c0:	11 24       	eor	r1, r1
    93c2:	ec 56       	subi	r30, 0x6C	; 108
    93c4:	f8 49       	sbci	r31, 0x98	; 152
    93c6:	15 a6       	std	Z+45, r1	; 0x2d
    }
}
    93c8:	df 91       	pop	r29
    93ca:	cf 91       	pop	r28
    93cc:	1f 91       	pop	r17
    93ce:	0f 91       	pop	r16
    93d0:	ff 90       	pop	r15
    93d2:	08 95       	ret

000093d4 <lin_process_first_frame>:
 * Description   : Process first frame.
 *
 * Implements    : lin_process_first_frame_Activity
 *END**************************************************************************/
static void lin_process_first_frame(l_ifc_handle iii)
{
    93d4:	0f 93       	push	r16
    93d6:	1f 93       	push	r17
    93d8:	cf 93       	push	r28
    93da:	df 93       	push	r29
    l_u16 length;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    93dc:	08 2f       	mov	r16, r24
    93de:	10 e0       	ldi	r17, 0x00	; 0
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    93e0:	96 e1       	ldi	r25, 0x16	; 22
    93e2:	90 9f       	mul	r25, r16
    93e4:	f0 01       	movw	r30, r0
    93e6:	91 9f       	mul	r25, r17
    93e8:	f0 0d       	add	r31, r0
    93ea:	11 24       	eor	r1, r1
    93ec:	e8 53       	subi	r30, 0x38	; 56
    93ee:	f8 49       	sbci	r31, 0x98	; 152
    93f0:	02 80       	ldd	r0, Z+2	; 0x02
    93f2:	f3 81       	ldd	r31, Z+3	; 0x03
    93f4:	e0 2d       	mov	r30, r0
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    /* for both MASTER and SLAVE */
    length = (l_u16)((((l_u16)data[1] & 0x0FU) << 8U) + (l_u16)data[2]);
    93f6:	c1 81       	ldd	r28, Z+1	; 0x01
    93f8:	cf 70       	andi	r28, 0x0F	; 15
    93fa:	d0 e0       	ldi	r29, 0x00	; 0
    93fc:	dc 2f       	mov	r29, r28
    93fe:	cc 27       	eor	r28, r28
    9400:	92 81       	ldd	r25, Z+2	; 0x02
    9402:	c9 0f       	add	r28, r25
    9404:	d1 1d       	adc	r29, r1
    /* check length of FF. If not valid, ignore this PDU */
    if ((length >= 7U) && (length <= prot_user_config_ptr->max_message_length))
    9406:	c7 30       	cpi	r28, 0x07	; 7
    9408:	d1 05       	cpc	r29, r1
    940a:	08 f4       	brcc	.+2      	; 0x940e <lin_process_first_frame+0x3a>
    940c:	b7 c0       	rjmp	.+366    	; 0x957c <lin_process_first_frame+0x1a8>
    940e:	9c e1       	ldi	r25, 0x1C	; 28
    9410:	90 9f       	mul	r25, r16
    9412:	d0 01       	movw	r26, r0
    9414:	91 9f       	mul	r25, r17
    9416:	b0 0d       	add	r27, r0
    9418:	11 24       	eor	r1, r1
    941a:	a8 5b       	subi	r26, 0xB8	; 184
    941c:	bc 49       	sbci	r27, 0x9C	; 156
    941e:	5a 96       	adiw	r26, 0x1a	; 26
    9420:	2d 91       	ld	r18, X+
    9422:	3c 91       	ld	r19, X
    9424:	5b 97       	sbiw	r26, 0x1b	; 27
    9426:	2c 17       	cp	r18, r28
    9428:	3d 07       	cpc	r19, r29
    942a:	08 f4       	brcc	.+2      	; 0x942e <lin_process_first_frame+0x5a>
    942c:	a7 c0       	rjmp	.+334    	; 0x957c <lin_process_first_frame+0x1a8>
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    942e:	90 9f       	mul	r25, r16
    9430:	d0 01       	movw	r26, r0
    9432:	91 9f       	mul	r25, r17
    9434:	b0 0d       	add	r27, r0
    9436:	11 24       	eor	r1, r1
    9438:	a8 5b       	subi	r26, 0xB8	; 184
    943a:	bc 49       	sbci	r27, 0x9C	; 156
    943c:	13 96       	adiw	r26, 0x03	; 3
    943e:	9c 91       	ld	r25, X
    9440:	91 11       	cpse	r25, r1
    9442:	39 c0       	rjmp	.+114    	; 0x94b6 <lin_process_first_frame+0xe2>
        {
            /* For misra compliant rule 9.1 */
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    9444:	94 e3       	ldi	r25, 0x34	; 52
    9446:	90 9f       	mul	r25, r16
    9448:	d0 01       	movw	r26, r0
    944a:	91 9f       	mul	r25, r17
    944c:	b0 0d       	add	r27, r0
    944e:	11 24       	eor	r1, r1
    9450:	ac 56       	subi	r26, 0x6C	; 108
    9452:	b8 49       	sbci	r27, 0x98	; 152
    9454:	95 e0       	ldi	r25, 0x05	; 5
    9456:	96 96       	adiw	r26, 0x26	; 38
    9458:	9c 93       	st	X, r25
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    945a:	9c e1       	ldi	r25, 0x1C	; 28
    945c:	90 9f       	mul	r25, r16
    945e:	d0 01       	movw	r26, r0
    9460:	91 9f       	mul	r25, r17
    9462:	b0 0d       	add	r27, r0
    9464:	11 24       	eor	r1, r1
    9466:	a8 5b       	subi	r26, 0xB8	; 184
    9468:	bc 49       	sbci	r27, 0x9C	; 156
    946a:	9c 91       	ld	r25, X
    946c:	91 11       	cpse	r25, r1
    946e:	23 c0       	rjmp	.+70     	; 0x94b6 <lin_process_first_frame+0xe2>
            {
                /* Set check N_Cr timeout */
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    9470:	9c e1       	ldi	r25, 0x1C	; 28
    9472:	90 9f       	mul	r25, r16
    9474:	d0 01       	movw	r26, r0
    9476:	91 9f       	mul	r25, r17
    9478:	b0 0d       	add	r27, r0
    947a:	11 24       	eor	r1, r1
    947c:	a8 5b       	subi	r26, 0xB8	; 184
    947e:	bc 49       	sbci	r27, 0x9C	; 156
    9480:	52 96       	adiw	r26, 0x12	; 18
    9482:	ac 91       	ld	r26, X
    9484:	94 e2       	ldi	r25, 0x24	; 36
    9486:	a9 9f       	mul	r26, r25
    9488:	d0 01       	movw	r26, r0
    948a:	11 24       	eor	r1, r1
    948c:	ac 59       	subi	r26, 0x9C	; 156
    948e:	bc 49       	sbci	r27, 0x9C	; 156
    9490:	5d 96       	adiw	r26, 0x1d	; 29
    9492:	2d 91       	ld	r18, X+
    9494:	3c 91       	ld	r19, X
    9496:	5e 97       	sbiw	r26, 0x1e	; 30
    9498:	94 e3       	ldi	r25, 0x34	; 52
    949a:	90 9f       	mul	r25, r16
    949c:	d0 01       	movw	r26, r0
    949e:	91 9f       	mul	r25, r17
    94a0:	b0 0d       	add	r27, r0
    94a2:	11 24       	eor	r1, r1
    94a4:	ac 56       	subi	r26, 0x6C	; 108
    94a6:	b8 49       	sbci	r27, 0x98	; 152
    94a8:	90 96       	adiw	r26, 0x20	; 32
    94aa:	2d 93       	st	X+, r18
    94ac:	3c 93       	st	X, r19
    94ae:	91 97       	sbiw	r26, 0x21	; 33
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    94b0:	92 e0       	ldi	r25, 0x02	; 2
    94b2:	5f 96       	adiw	r26, 0x1f	; 31
    94b4:	9c 93       	st	X, r25
            }
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        /* put PDU to rx queue */
        /* reset queue header and queue tail */
        tl_desc_ptr->tl_rx_queue.queue_header = 0;
    94b6:	94 e3       	ldi	r25, 0x34	; 52
    94b8:	90 9f       	mul	r25, r16
    94ba:	a0 01       	movw	r20, r0
    94bc:	91 9f       	mul	r25, r17
    94be:	50 0d       	add	r21, r0
    94c0:	11 24       	eor	r1, r1
    94c2:	da 01       	movw	r26, r20
    94c4:	ac 56       	subi	r26, 0x6C	; 108
    94c6:	b8 49       	sbci	r27, 0x98	; 152
    94c8:	1b 96       	adiw	r26, 0x0b	; 11
    94ca:	1d 92       	st	X+, r1
    94cc:	1c 92       	st	X, r1
    94ce:	1c 97       	sbiw	r26, 0x0c	; 12
        tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    94d0:	1d 96       	adiw	r26, 0x0d	; 13
    94d2:	1d 92       	st	X+, r1
    94d4:	1c 92       	st	X, r1
    94d6:	1e 97       	sbiw	r26, 0x0e	; 14
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    94d8:	50 96       	adiw	r26, 0x10	; 16
    94da:	1d 92       	st	X+, r1
    94dc:	1c 92       	st	X, r1
    94de:	51 97       	sbiw	r26, 0x11	; 17
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    94e0:	1f 96       	adiw	r26, 0x0f	; 15
    94e2:	1c 92       	st	X, r1
        tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    94e4:	41 56       	subi	r20, 0x61	; 97
    94e6:	58 49       	sbci	r21, 0x98	; 152
    94e8:	21 e0       	ldi	r18, 0x01	; 1
    94ea:	bf 01       	movw	r22, r30
    94ec:	0e 94 0d 49 	call	0x921a	; 0x921a <tl_put_raw>

        /* calculate number of PDU for this message */
        if (((length - 5U) % 6U) == 0U)
    94f0:	25 97       	sbiw	r28, 0x05	; 5
    94f2:	9e 01       	movw	r18, r28
    94f4:	ab ea       	ldi	r26, 0xAB	; 171
    94f6:	ba ea       	ldi	r27, 0xAA	; 170
    94f8:	0e 94 42 63 	call	0xc684	; 0xc684 <__umulhisi3>
    94fc:	96 95       	lsr	r25
    94fe:	87 95       	ror	r24
    9500:	96 95       	lsr	r25
    9502:	87 95       	ror	r24
    9504:	9c 01       	movw	r18, r24
    9506:	22 0f       	add	r18, r18
    9508:	33 1f       	adc	r19, r19
    950a:	82 0f       	add	r24, r18
    950c:	93 1f       	adc	r25, r19
    950e:	88 0f       	add	r24, r24
    9510:	99 1f       	adc	r25, r25
    9512:	c8 17       	cp	r28, r24
    9514:	d9 07       	cpc	r29, r25
    9516:	89 f4       	brne	.+34     	; 0x953a <lin_process_first_frame+0x166>
        {
            tl_desc_ptr->num_of_pdu = (l_u8)((length - 5U) / 6U);
    9518:	9e 01       	movw	r18, r28
    951a:	0e 94 42 63 	call	0xc684	; 0xc684 <__umulhisi3>
    951e:	96 95       	lsr	r25
    9520:	87 95       	ror	r24
    9522:	96 95       	lsr	r25
    9524:	87 95       	ror	r24
    9526:	94 e3       	ldi	r25, 0x34	; 52
    9528:	90 9f       	mul	r25, r16
    952a:	f0 01       	movw	r30, r0
    952c:	91 9f       	mul	r25, r17
    952e:	f0 0d       	add	r31, r0
    9530:	11 24       	eor	r1, r1
    9532:	ec 56       	subi	r30, 0x6C	; 108
    9534:	f8 49       	sbci	r31, 0x98	; 152
    9536:	84 a3       	std	Z+36, r24	; 0x24
    9538:	13 c0       	rjmp	.+38     	; 0x9560 <lin_process_first_frame+0x18c>
        }
        else
        {
            tl_desc_ptr->num_of_pdu = (l_u8)(((length - 5U) / 6U) + 1U);
    953a:	9e 01       	movw	r18, r28
    953c:	ab ea       	ldi	r26, 0xAB	; 171
    953e:	ba ea       	ldi	r27, 0xAA	; 170
    9540:	0e 94 42 63 	call	0xc684	; 0xc684 <__umulhisi3>
    9544:	96 95       	lsr	r25
    9546:	87 95       	ror	r24
    9548:	96 95       	lsr	r25
    954a:	87 95       	ror	r24
    954c:	8f 5f       	subi	r24, 0xFF	; 255
    954e:	94 e3       	ldi	r25, 0x34	; 52
    9550:	90 9f       	mul	r25, r16
    9552:	f0 01       	movw	r30, r0
    9554:	91 9f       	mul	r25, r17
    9556:	f0 0d       	add	r31, r0
    9558:	11 24       	eor	r1, r1
    955a:	ec 56       	subi	r30, 0x6C	; 108
    955c:	f8 49       	sbci	r31, 0x98	; 152
    955e:	84 a3       	std	Z+36, r24	; 0x24
        }

        /* set frame counter = 1 */
        tl_desc_ptr->frame_counter = 1U;
    9560:	84 e3       	ldi	r24, 0x34	; 52
    9562:	80 9f       	mul	r24, r16
    9564:	f0 01       	movw	r30, r0
    9566:	81 9f       	mul	r24, r17
    9568:	f0 0d       	add	r31, r0
    956a:	11 24       	eor	r1, r1
    956c:	ec 56       	subi	r30, 0x6C	; 108
    956e:	f8 49       	sbci	r31, 0x98	; 152
    9570:	81 e0       	ldi	r24, 0x01	; 1
    9572:	85 a3       	std	Z+37, r24	; 0x25
        tl_desc_ptr->service_status = LD_SERVICE_BUSY;
    9574:	13 a6       	std	Z+43, r1	; 0x2b

        /* Mark FF pdu is sent */
        tl_desc_ptr->FF_pdu_received = true;
    9576:	85 a7       	std	Z+45, r24	; 0x2d
        tl_desc_ptr->interleave_timeout_counter = 0;
    9578:	10 a6       	std	Z+40, r1	; 0x28
    957a:	11 a6       	std	Z+41, r1	; 0x29
    }
}
    957c:	df 91       	pop	r29
    957e:	cf 91       	pop	r28
    9580:	1f 91       	pop	r17
    9582:	0f 91       	pop	r16
    9584:	08 95       	ret

00009586 <lin_process_consecutive_frame>:
 * Description   : Process consecutive frame.
 *
 * Implements    : lin_process_consecutive_frame_Activity
 *END**************************************************************************/
static void lin_process_consecutive_frame(l_ifc_handle iii)
{
    9586:	ef 92       	push	r14
    9588:	ff 92       	push	r15
    958a:	1f 93       	push	r17
    958c:	cf 93       	push	r28
    958e:	df 93       	push	r29
    9590:	18 2f       	mov	r17, r24
    l_u8 tmp_frame_counter;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9592:	c8 2f       	mov	r28, r24
    9594:	d0 e0       	ldi	r29, 0x00	; 0
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    9596:	86 e1       	ldi	r24, 0x16	; 22
    9598:	8c 9f       	mul	r24, r28
    959a:	f0 01       	movw	r30, r0
    959c:	8d 9f       	mul	r24, r29
    959e:	f0 0d       	add	r31, r0
    95a0:	11 24       	eor	r1, r1
    95a2:	e8 53       	subi	r30, 0x38	; 56
    95a4:	f8 49       	sbci	r31, 0x98	; 152
    95a6:	a2 81       	ldd	r26, Z+2	; 0x02
    95a8:	b3 81       	ldd	r27, Z+3	; 0x03
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        /* for SLAVE */
        /* For misra compliant rule 9.1 */

        if (g_lin_protocol_user_cfg_array[iii].protocol_version == LIN_PROTOCOL_21)
    95aa:	8c e1       	ldi	r24, 0x1C	; 28
    95ac:	8c 9f       	mul	r24, r28
    95ae:	f0 01       	movw	r30, r0
    95b0:	8d 9f       	mul	r24, r29
    95b2:	f0 0d       	add	r31, r0
    95b4:	11 24       	eor	r1, r1
    95b6:	e8 5b       	subi	r30, 0xB8	; 184
    95b8:	fc 49       	sbci	r31, 0x9C	; 156
    95ba:	80 81       	ld	r24, Z
    95bc:	81 11       	cpse	r24, r1
    95be:	1d c0       	rjmp	.+58     	; 0x95fa <lin_process_consecutive_frame+0x74>
        {
            /* Set check N_Cr timeout */
            tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    95c0:	8c e1       	ldi	r24, 0x1C	; 28
    95c2:	8c 9f       	mul	r24, r28
    95c4:	f0 01       	movw	r30, r0
    95c6:	8d 9f       	mul	r24, r29
    95c8:	f0 0d       	add	r31, r0
    95ca:	11 24       	eor	r1, r1
    95cc:	e8 5b       	subi	r30, 0xB8	; 184
    95ce:	fc 49       	sbci	r31, 0x9C	; 156
    95d0:	e2 89       	ldd	r30, Z+18	; 0x12
    95d2:	24 e2       	ldi	r18, 0x24	; 36
    95d4:	e2 9f       	mul	r30, r18
    95d6:	f0 01       	movw	r30, r0
    95d8:	11 24       	eor	r1, r1
    95da:	ec 59       	subi	r30, 0x9C	; 156
    95dc:	fc 49       	sbci	r31, 0x9C	; 156
    95de:	85 8d       	ldd	r24, Z+29	; 0x1d
    95e0:	96 8d       	ldd	r25, Z+30	; 0x1e
    95e2:	24 e3       	ldi	r18, 0x34	; 52
    95e4:	2c 9f       	mul	r18, r28
    95e6:	f0 01       	movw	r30, r0
    95e8:	2d 9f       	mul	r18, r29
    95ea:	f0 0d       	add	r31, r0
    95ec:	11 24       	eor	r1, r1
    95ee:	ec 56       	subi	r30, 0x6C	; 108
    95f0:	f8 49       	sbci	r31, 0x98	; 152
    95f2:	80 a3       	std	Z+32, r24	; 0x20
    95f4:	91 a3       	std	Z+33, r25	; 0x21
            tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    95f6:	82 e0       	ldi	r24, 0x02	; 2
    95f8:	87 8f       	std	Z+31, r24	; 0x1f
        }
        /* get frame counter of this PDU */
        tmp_frame_counter = (l_u8)(data[1] & 0x0FU);
    95fa:	11 96       	adiw	r26, 0x01	; 1
    95fc:	8c 91       	ld	r24, X
    95fe:	11 97       	sbiw	r26, 0x01	; 1
    9600:	8f 70       	andi	r24, 0x0F	; 15
        /* Check valid frame counter */
        if (tmp_frame_counter == tl_desc_ptr->frame_counter)
    9602:	94 e3       	ldi	r25, 0x34	; 52
    9604:	9c 9f       	mul	r25, r28
    9606:	f0 01       	movw	r30, r0
    9608:	9d 9f       	mul	r25, r29
    960a:	f0 0d       	add	r31, r0
    960c:	11 24       	eor	r1, r1
    960e:	ec 56       	subi	r30, 0x6C	; 108
    9610:	f8 49       	sbci	r31, 0x98	; 152
    9612:	95 a1       	ldd	r25, Z+37	; 0x25
    9614:	89 13       	cpse	r24, r25
    9616:	2d c0       	rjmp	.+90     	; 0x9672 <lin_process_consecutive_frame+0xec>
        {
            /* increase frame counter */
            tl_desc_ptr->frame_counter++;
    9618:	9f 5f       	subi	r25, 0xFF	; 255
    961a:	84 e3       	ldi	r24, 0x34	; 52
    961c:	8c 9f       	mul	r24, r28
    961e:	f0 01       	movw	r30, r0
    9620:	8d 9f       	mul	r24, r29
    9622:	f0 0d       	add	r31, r0
    9624:	11 24       	eor	r1, r1
    9626:	ec 56       	subi	r30, 0x6C	; 108
    9628:	f8 49       	sbci	r31, 0x98	; 152
    962a:	95 a3       	std	Z+37, r25	; 0x25
            if (tl_desc_ptr->frame_counter > 15U)
    962c:	90 31       	cpi	r25, 0x10	; 16
    962e:	40 f0       	brcs	.+16     	; 0x9640 <lin_process_consecutive_frame+0xba>
            {
                tl_desc_ptr->frame_counter = 0U;
    9630:	8c 9f       	mul	r24, r28
    9632:	f0 01       	movw	r30, r0
    9634:	8d 9f       	mul	r24, r29
    9636:	f0 0d       	add	r31, r0
    9638:	11 24       	eor	r1, r1
    963a:	ec 56       	subi	r30, 0x6C	; 108
    963c:	f8 49       	sbci	r31, 0x98	; 152
    963e:	15 a2       	std	Z+37, r1	; 0x25
            }

            /* decrease number of PDU to check message is complete */
            tl_desc_ptr->num_of_pdu--;
    9640:	84 e3       	ldi	r24, 0x34	; 52
    9642:	8c 9f       	mul	r24, r28
    9644:	a0 01       	movw	r20, r0
    9646:	8d 9f       	mul	r24, r29
    9648:	50 0d       	add	r21, r0
    964a:	11 24       	eor	r1, r1
    964c:	ca 01       	movw	r24, r20
    964e:	8c 56       	subi	r24, 0x6C	; 108
    9650:	98 49       	sbci	r25, 0x98	; 152
    9652:	7c 01       	movw	r14, r24
    9654:	fc 01       	movw	r30, r24
    9656:	84 a1       	ldd	r24, Z+36	; 0x24
    9658:	81 50       	subi	r24, 0x01	; 1
    965a:	84 a3       	std	Z+36, r24	; 0x24
            /* put PDU to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    965c:	41 56       	subi	r20, 0x61	; 97
    965e:	58 49       	sbci	r21, 0x98	; 152
    9660:	21 e0       	ldi	r18, 0x01	; 1
    9662:	bd 01       	movw	r22, r26
    9664:	81 2f       	mov	r24, r17
    9666:	0e 94 0d 49 	call	0x921a	; 0x921a <tl_put_raw>
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    966a:	85 e0       	ldi	r24, 0x05	; 5
    966c:	f7 01       	movw	r30, r14
    966e:	86 a3       	std	Z+38, r24	; 0x26
    9670:	22 c0       	rjmp	.+68     	; 0x96b6 <lin_process_consecutive_frame+0x130>
        }
        else
        {
            /* abort this message */
            if(tl_desc_ptr->ld_return_data)
    9672:	84 e3       	ldi	r24, 0x34	; 52
    9674:	8c 9f       	mul	r24, r28
    9676:	f0 01       	movw	r30, r0
    9678:	8d 9f       	mul	r24, r29
    967a:	f0 0d       	add	r31, r0
    967c:	11 24       	eor	r1, r1
    967e:	ec 56       	subi	r30, 0x6C	; 108
    9680:	f8 49       	sbci	r31, 0x98	; 152
    9682:	84 a5       	ldd	r24, Z+44	; 0x2c
    9684:	88 23       	and	r24, r24
    9686:	49 f0       	breq	.+18     	; 0x969a <lin_process_consecutive_frame+0x114>
            {
               tl_desc_ptr->ld_return_data = false;
    9688:	84 e3       	ldi	r24, 0x34	; 52
    968a:	8c 9f       	mul	r24, r28
    968c:	f0 01       	movw	r30, r0
    968e:	8d 9f       	mul	r24, r29
    9690:	f0 0d       	add	r31, r0
    9692:	11 24       	eor	r1, r1
    9694:	ec 56       	subi	r30, 0x6C	; 108
    9696:	f8 49       	sbci	r31, 0x98	; 152
    9698:	14 a6       	std	Z+44, r1	; 0x2c
            }
            tl_desc_ptr->FF_pdu_received = false;
    969a:	84 e3       	ldi	r24, 0x34	; 52
    969c:	8c 9f       	mul	r24, r28
    969e:	f0 01       	movw	r30, r0
    96a0:	8d 9f       	mul	r24, r29
    96a2:	f0 0d       	add	r31, r0
    96a4:	11 24       	eor	r1, r1
    96a6:	ec 56       	subi	r30, 0x6C	; 108
    96a8:	f8 49       	sbci	r31, 0x98	; 152
    96aa:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->rx_msg_status = LD_WRONG_SN;
    96ac:	86 e0       	ldi	r24, 0x06	; 6
    96ae:	86 8b       	std	Z+22, r24	; 0x16
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    96b0:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state  = LD_DIAG_IDLE;
    96b2:	81 e0       	ldi	r24, 0x01	; 1
    96b4:	86 a3       	std	Z+38, r24	; 0x26
        }

        if (0U == tl_desc_ptr->num_of_pdu)
    96b6:	84 e3       	ldi	r24, 0x34	; 52
    96b8:	8c 9f       	mul	r24, r28
    96ba:	f0 01       	movw	r30, r0
    96bc:	8d 9f       	mul	r24, r29
    96be:	f0 0d       	add	r31, r0
    96c0:	11 24       	eor	r1, r1
    96c2:	ec 56       	subi	r30, 0x6C	; 108
    96c4:	f8 49       	sbci	r31, 0x98	; 152
    96c6:	84 a1       	ldd	r24, Z+36	; 0x24
    96c8:	81 11       	cpse	r24, r1
    96ca:	17 c0       	rjmp	.+46     	; 0x96fa <lin_process_consecutive_frame+0x174>
        {
            /* message is received completely */
            /* set status is IDLE to receive new message */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    96cc:	7f 01       	movw	r14, r30
    96ce:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    96d0:	81 e0       	ldi	r24, 0x01	; 1
    96d2:	83 a7       	std	Z+43, r24	; 0x2b

            lin_tl_attach_service(iii);
    96d4:	81 2f       	mov	r24, r17
    96d6:	0e 94 dd 47 	call	0x8fba	; 0x8fba <lin_tl_attach_service>
            /* If ld_receive_message() function is called before FF pdu to be sent */
            if(tl_desc_ptr->ld_return_data)
    96da:	f7 01       	movw	r30, r14
    96dc:	84 a5       	ldd	r24, Z+44	; 0x2c
    96de:	88 23       	and	r24, r24
    96e0:	19 f0       	breq	.+6      	; 0x96e8 <lin_process_consecutive_frame+0x162>
            {
                tl_receive_message(iii);
    96e2:	81 2f       	mov	r24, r17
    96e4:	0e 94 21 48 	call	0x9042	; 0x9042 <tl_receive_message>
            }
            tl_desc_ptr->FF_pdu_received = false;
    96e8:	84 e3       	ldi	r24, 0x34	; 52
    96ea:	8c 9f       	mul	r24, r28
    96ec:	f0 01       	movw	r30, r0
    96ee:	8d 9f       	mul	r24, r29
    96f0:	f0 0d       	add	r31, r0
    96f2:	11 24       	eor	r1, r1
    96f4:	ec 56       	subi	r30, 0x6C	; 108
    96f6:	f8 49       	sbci	r31, 0x98	; 152
    96f8:	15 a6       	std	Z+45, r1	; 0x2d
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    }
}
    96fa:	df 91       	pop	r29
    96fc:	cf 91       	pop	r28
    96fe:	1f 91       	pop	r17
    9700:	ff 90       	pop	r15
    9702:	ef 90       	pop	r14
    9704:	08 95       	ret

00009706 <lin_process_pdu>:
static void lin_process_pdu(l_ifc_handle iii,
                            const lin_tl_pdu_data_t * pdu)
{
    l_u8 pci_type;
#if (SUPPORT_SLAVE_MODE == 1U)
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9706:	28 2f       	mov	r18, r24
    9708:	30 e0       	ldi	r19, 0x00	; 0
    if ((bool)LIN_SLAVE == g_lin_protocol_user_cfg_array[iii].function)
    970a:	9c e1       	ldi	r25, 0x1C	; 28
    970c:	92 9f       	mul	r25, r18
    970e:	f0 01       	movw	r30, r0
    9710:	93 9f       	mul	r25, r19
    9712:	f0 0d       	add	r31, r0
    9714:	11 24       	eor	r1, r1
    9716:	e8 5b       	subi	r30, 0xB8	; 184
    9718:	fc 49       	sbci	r31, 0x9C	; 156
    971a:	93 81       	ldd	r25, Z+3	; 0x03
    971c:	91 11       	cpse	r25, r1
    971e:	11 c0       	rjmp	.+34     	; 0x9742 <lin_process_pdu+0x3c>
    {
        g_lin_tl_descriptor_array[iii].slave_resp_cnt = 0U;
    9720:	94 e3       	ldi	r25, 0x34	; 52
    9722:	92 9f       	mul	r25, r18
    9724:	f0 01       	movw	r30, r0
    9726:	93 9f       	mul	r25, r19
    9728:	f0 0d       	add	r31, r0
    972a:	11 24       	eor	r1, r1
    972c:	ec 56       	subi	r30, 0x6C	; 108
    972e:	f8 49       	sbci	r31, 0x98	; 152
    9730:	12 a6       	std	Z+42, r1	; 0x2a
        /* clear queue */
        tl_desc_ptr->tl_tx_queue.queue_status = LD_QUEUE_EMPTY;
    9732:	95 e0       	ldi	r25, 0x05	; 5
    9734:	94 83       	std	Z+4, r25	; 0x04
        tl_desc_ptr->tl_tx_queue.queue_current_size = 0U;
    9736:	15 82       	std	Z+5, r1	; 0x05
    9738:	16 82       	std	Z+6, r1	; 0x06
        tl_desc_ptr->tl_tx_queue.queue_header = tl_desc_ptr->tl_tx_queue.queue_tail;
    973a:	22 81       	ldd	r18, Z+2	; 0x02
    973c:	33 81       	ldd	r19, Z+3	; 0x03
    973e:	20 83       	st	Z, r18
    9740:	31 83       	std	Z+1, r19	; 0x01
    }
#endif /* End (SUPPORT_SLAVE_MODE == 1U) */

    /* get PCI type */
    pci_type = (l_u8)(((*pdu)[1] & 0xF0U) >> 4U);
    9742:	fb 01       	movw	r30, r22
    9744:	91 81       	ldd	r25, Z+1	; 0x01
    9746:	92 95       	swap	r25
    9748:	9f 70       	andi	r25, 0x0F	; 15
    switch (pci_type)
    974a:	91 30       	cpi	r25, 0x01	; 1
    974c:	39 f0       	breq	.+14     	; 0x975c <lin_process_pdu+0x56>
    974e:	18 f0       	brcs	.+6      	; 0x9756 <lin_process_pdu+0x50>
    9750:	92 30       	cpi	r25, 0x02	; 2
    9752:	39 f0       	breq	.+14     	; 0x9762 <lin_process_pdu+0x5c>
    9754:	08 95       	ret
    {
        case PCI_SF:
            lin_process_single_frame(iii);
    9756:	0e 94 7c 49 	call	0x92f8	; 0x92f8 <lin_process_single_frame>
            break;
    975a:	08 95       	ret
        case PCI_FF:
            lin_process_first_frame(iii);
    975c:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <lin_process_first_frame>
            break;
    9760:	08 95       	ret
        case PCI_CF:
            lin_process_consecutive_frame(iii);
    9762:	0e 94 c3 4a 	call	0x9586	; 0x9586 <lin_process_consecutive_frame>
    9766:	08 95       	ret

00009768 <lin_tl_handler_rx_completed>:
 * Implements    : lin_tl_handler_rx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_rx_completed(l_ifc_handle iii)
{
    l_u8 pci_type;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9768:	28 2f       	mov	r18, r24
    976a:	30 e0       	ldi	r19, 0x00	; 0
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    976c:	96 e1       	ldi	r25, 0x16	; 22
    976e:	92 9f       	mul	r25, r18
    9770:	f0 01       	movw	r30, r0
    9772:	93 9f       	mul	r25, r19
    9774:	f0 0d       	add	r31, r0
    9776:	11 24       	eor	r1, r1
    9778:	e8 53       	subi	r30, 0x38	; 56
    977a:	f8 49       	sbci	r31, 0x98	; 152
    977c:	a2 81       	ldd	r26, Z+2	; 0x02
    977e:	b3 81       	ldd	r27, Z+3	; 0x03
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    9780:	9c e1       	ldi	r25, 0x1C	; 28
    9782:	92 9f       	mul	r25, r18
    9784:	f0 01       	movw	r30, r0
    9786:	93 9f       	mul	r25, r19
    9788:	f0 0d       	add	r31, r0
    978a:	11 24       	eor	r1, r1
    978c:	e8 5b       	subi	r30, 0xB8	; 184
    978e:	fc 49       	sbci	r31, 0x9C	; 156
    9790:	43 81       	ldd	r20, Z+3	; 0x03
    9792:	41 11       	cpse	r20, r1
    9794:	3d c0       	rjmp	.+122    	; 0x9810 <lin_tl_handler_rx_completed+0xa8>
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    9796:	92 9f       	mul	r25, r18
    9798:	f0 01       	movw	r30, r0
    979a:	93 9f       	mul	r25, r19
    979c:	f0 0d       	add	r31, r0
    979e:	11 24       	eor	r1, r1
    97a0:	e8 5b       	subi	r30, 0xB8	; 184
    97a2:	fc 49       	sbci	r31, 0x9C	; 156
    97a4:	62 89       	ldd	r22, Z+18	; 0x12
    97a6:	70 e0       	ldi	r23, 0x00	; 0
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    97a8:	9c 91       	ld	r25, X
    97aa:	52 e8       	ldi	r21, 0x82	; 130
    97ac:	59 0f       	add	r21, r25
    97ae:	52 30       	cpi	r21, 0x02	; 2
    97b0:	28 f1       	brcs	.+74     	; 0x97fc <lin_tl_handler_rx_completed+0x94>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    97b2:	54 e2       	ldi	r21, 0x24	; 36
    97b4:	56 9f       	mul	r21, r22
    97b6:	f0 01       	movw	r30, r0
    97b8:	57 9f       	mul	r21, r23
    97ba:	f0 0d       	add	r31, r0
    97bc:	11 24       	eor	r1, r1
    97be:	ec 59       	subi	r30, 0x9C	; 156
    97c0:	fc 49       	sbci	r31, 0x9C	; 156
    97c2:	01 90       	ld	r0, Z+
    97c4:	f0 81       	ld	r31, Z
    97c6:	e0 2d       	mov	r30, r0
    97c8:	50 81       	ld	r21, Z
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    97ca:	95 17       	cp	r25, r21
    97cc:	29 f0       	breq	.+10     	; 0x97d8 <lin_tl_handler_rx_completed+0x70>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    97ce:	12 96       	adiw	r26, 0x02	; 2
    97d0:	5c 91       	ld	r21, X
    97d2:	12 97       	sbiw	r26, 0x02	; 2
    97d4:	50 3b       	cpi	r21, 0xB0	; 176
    97d6:	a1 f4       	brne	.+40     	; 0x9800 <lin_tl_handler_rx_completed+0x98>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    97d8:	54 e2       	ldi	r21, 0x24	; 36
    97da:	56 9f       	mul	r21, r22
    97dc:	f0 01       	movw	r30, r0
    97de:	57 9f       	mul	r21, r23
    97e0:	f0 0d       	add	r31, r0
    97e2:	11 24       	eor	r1, r1
    97e4:	ec 59       	subi	r30, 0x9C	; 156
    97e6:	fc 49       	sbci	r31, 0x9C	; 156
    97e8:	52 81       	ldd	r21, Z+2	; 0x02
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    97ea:	95 17       	cp	r25, r21
    97ec:	59 f0       	breq	.+22     	; 0x9804 <lin_tl_handler_rx_completed+0x9c>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    97ee:	12 96       	adiw	r26, 0x02	; 2
    97f0:	9c 91       	ld	r25, X
    97f2:	12 97       	sbiw	r26, 0x02	; 2
    97f4:	90 3b       	cpi	r25, 0xB0	; 176
    97f6:	41 f0       	breq	.+16     	; 0x9808 <lin_tl_handler_rx_completed+0xa0>
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    97f8:	90 e0       	ldi	r25, 0x00	; 0
    97fa:	07 c0       	rjmp	.+14     	; 0x980a <lin_tl_handler_rx_completed+0xa2>
    97fc:	90 e0       	ldi	r25, 0x00	; 0
    97fe:	05 c0       	rjmp	.+10     	; 0x980a <lin_tl_handler_rx_completed+0xa2>
    9800:	91 e0       	ldi	r25, 0x01	; 1
    9802:	03 c0       	rjmp	.+6      	; 0x980a <lin_tl_handler_rx_completed+0xa2>
    9804:	90 e0       	ldi	r25, 0x00	; 0
    9806:	01 c0       	rjmp	.+2      	; 0x980a <lin_tl_handler_rx_completed+0xa2>
    9808:	91 e0       	ldi	r25, 0x01	; 1
    980a:	59 2f       	mov	r21, r25
    980c:	51 70       	andi	r21, 0x01	; 1
    980e:	01 c0       	rjmp	.+2      	; 0x9812 <lin_tl_handler_rx_completed+0xaa>
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    9810:	50 e0       	ldi	r21, 0x00	; 0
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    }
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    pci_type = (l_u8)(((*lin_tl_pdu)[1] & 0xF0U) >> 4U);
    9812:	11 96       	adiw	r26, 0x01	; 1
    9814:	9c 91       	ld	r25, X
    9816:	11 97       	sbiw	r26, 0x01	; 1
    9818:	92 95       	swap	r25
    981a:	9f 70       	andi	r25, 0x0F	; 15
    /* check NAD whether or not belongs to this slave node */
    #if (SUPPORT_SLAVE_MODE == 1U)
    if (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (invalid_NAD || (pci_type > PCI_CF)))
    981c:	41 11       	cpse	r20, r1
    981e:	0e c0       	rjmp	.+28     	; 0x983c <lin_tl_handler_rx_completed+0xd4>
    9820:	51 11       	cpse	r21, r1
    9822:	02 c0       	rjmp	.+4      	; 0x9828 <lin_tl_handler_rx_completed+0xc0>
    9824:	93 30       	cpi	r25, 0x03	; 3
    9826:	50 f0       	brcs	.+20     	; 0x983c <lin_tl_handler_rx_completed+0xd4>
    {
        tl_desc_ptr->slave_resp_cnt = 0;
    9828:	84 e3       	ldi	r24, 0x34	; 52
    982a:	82 9f       	mul	r24, r18
    982c:	f0 01       	movw	r30, r0
    982e:	83 9f       	mul	r24, r19
    9830:	f0 0d       	add	r31, r0
    9832:	11 24       	eor	r1, r1
    9834:	ec 56       	subi	r30, 0x6C	; 108
    9836:	f8 49       	sbci	r31, 0x98	; 152
    9838:	12 a6       	std	Z+42, r1	; 0x2a
    983a:	08 95       	ret
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    983c:	44 e3       	ldi	r20, 0x34	; 52
    983e:	42 9f       	mul	r20, r18
    9840:	f0 01       	movw	r30, r0
    9842:	43 9f       	mul	r20, r19
    9844:	f0 0d       	add	r31, r0
    9846:	11 24       	eor	r1, r1
    9848:	ec 56       	subi	r30, 0x6C	; 108
    984a:	f8 49       	sbci	r31, 0x98	; 152
    984c:	46 a1       	ldd	r20, Z+38	; 0x26
    984e:	45 30       	cpi	r20, 0x05	; 5
    9850:	11 f0       	breq	.+4      	; 0x9856 <lin_tl_handler_rx_completed+0xee>
    9852:	42 30       	cpi	r20, 0x02	; 2
    9854:	19 f4       	brne	.+6      	; 0x985c <lin_tl_handler_rx_completed+0xf4>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
    9856:	4c 91       	ld	r20, X
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    9858:	4e 37       	cpi	r20, 0x7E	; 126
    985a:	81 f0       	breq	.+32     	; 0x987c <lin_tl_handler_rx_completed+0x114>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
        {
            /* check error */
            if (!((tl_desc_ptr->service_status == LD_SERVICE_ERROR) && (pci_type == PCI_CF)))
    985c:	44 e3       	ldi	r20, 0x34	; 52
    985e:	42 9f       	mul	r20, r18
    9860:	f0 01       	movw	r30, r0
    9862:	43 9f       	mul	r20, r19
    9864:	f0 0d       	add	r31, r0
    9866:	11 24       	eor	r1, r1
    9868:	ec 56       	subi	r30, 0x6C	; 108
    986a:	f8 49       	sbci	r31, 0x98	; 152
    986c:	23 a5       	ldd	r18, Z+43	; 0x2b
    986e:	23 30       	cpi	r18, 0x03	; 3
    9870:	11 f4       	brne	.+4      	; 0x9876 <lin_tl_handler_rx_completed+0x10e>
    9872:	92 30       	cpi	r25, 0x02	; 2
    9874:	19 f0       	breq	.+6      	; 0x987c <lin_tl_handler_rx_completed+0x114>
            {
                /* process received PDU */
                lin_process_pdu(iii, lin_tl_pdu);
    9876:	bd 01       	movw	r22, r26
    9878:	0e 94 83 4b 	call	0x9706	; 0x9706 <lin_process_pdu>
    987c:	08 95       	ret

0000987e <tl_get_raw>:
 *END**************************************************************************/
void tl_get_raw(l_ifc_handle iii,
                l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    987e:	0f 93       	push	r16
    9880:	1f 93       	push	r17
    9882:	cf 93       	push	r28
    9884:	df 93       	push	r29
    9886:	ea 01       	movw	r28, r20
    const lin_tl_pdu_data_t * queue_data;
    l_u8 i;
    l_u16 queue_header;
    tl_queue = queue;
    /* Get queue */
    queue_data = (const lin_tl_pdu_data_t *)tl_queue->tl_pdu_ptr;
    9888:	49 85       	ldd	r20, Y+9	; 0x09
    988a:	5a 85       	ldd	r21, Y+10	; 0x0a

    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    988c:	8d 81       	ldd	r24, Y+5	; 0x05
    988e:	9e 81       	ldd	r25, Y+6	; 0x06
    9890:	89 2b       	or	r24, r25
    9892:	d1 f1       	breq	.+116    	; 0x9908 <tl_get_raw+0x8a>
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
    9894:	08 81       	ld	r16, Y
    9896:	19 81       	ldd	r17, Y+1	; 0x01
        for (i = 0U; i < 8U; i++)
    9898:	30 e0       	ldi	r19, 0x00	; 0
    989a:	13 c0       	rjmp	.+38     	; 0x98c2 <tl_get_raw+0x44>
        {
            data[i] = queue_data[queue_header][i];
    989c:	83 2f       	mov	r24, r19
    989e:	90 e0       	ldi	r25, 0x00	; 0
    98a0:	db 01       	movw	r26, r22
    98a2:	a8 0f       	add	r26, r24
    98a4:	b9 1f       	adc	r27, r25
    98a6:	f8 01       	movw	r30, r16
    98a8:	ee 0f       	add	r30, r30
    98aa:	ff 1f       	adc	r31, r31
    98ac:	ee 0f       	add	r30, r30
    98ae:	ff 1f       	adc	r31, r31
    98b0:	ee 0f       	add	r30, r30
    98b2:	ff 1f       	adc	r31, r31
    98b4:	e4 0f       	add	r30, r20
    98b6:	f5 1f       	adc	r31, r21
    98b8:	e8 0f       	add	r30, r24
    98ba:	f9 1f       	adc	r31, r25
    98bc:	80 81       	ld	r24, Z
    98be:	8c 93       	st	X, r24
    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
        for (i = 0U; i < 8U; i++)
    98c0:	3f 5f       	subi	r19, 0xFF	; 255
    98c2:	38 30       	cpi	r19, 0x08	; 8
    98c4:	58 f3       	brcs	.-42     	; 0x989c <tl_get_raw+0x1e>
        {
            data[i] = queue_data[queue_header][i];
        }

        /* update queue status */
        if (0U == (--queue->queue_current_size))
    98c6:	8d 81       	ldd	r24, Y+5	; 0x05
    98c8:	9e 81       	ldd	r25, Y+6	; 0x06
    98ca:	01 97       	sbiw	r24, 0x01	; 1
    98cc:	8d 83       	std	Y+5, r24	; 0x05
    98ce:	9e 83       	std	Y+6, r25	; 0x06
    98d0:	89 2b       	or	r24, r25
    98d2:	39 f4       	brne	.+14     	; 0x98e2 <tl_get_raw+0x64>
        {
            if (TRANSMITTING == direction)
    98d4:	21 11       	cpse	r18, r1
    98d6:	03 c0       	rjmp	.+6      	; 0x98de <tl_get_raw+0x60>
            {
                queue->queue_status = LD_QUEUE_EMPTY;
    98d8:	85 e0       	ldi	r24, 0x05	; 5
    98da:	8c 83       	std	Y+4, r24	; 0x04
    98dc:	15 c0       	rjmp	.+42     	; 0x9908 <tl_get_raw+0x8a>
            }
            else
            {
                queue->queue_status = LD_NO_DATA;
    98de:	1c 82       	std	Y+4, r1	; 0x04
    98e0:	13 c0       	rjmp	.+38     	; 0x9908 <tl_get_raw+0x8a>
            }
        }
        else
        {
            if (TRANSMITTING == direction)
    98e2:	21 11       	cpse	r18, r1
    98e4:	03 c0       	rjmp	.+6      	; 0x98ec <tl_get_raw+0x6e>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    98e6:	84 e0       	ldi	r24, 0x04	; 4
    98e8:	8c 83       	std	Y+4, r24	; 0x04
    98ea:	02 c0       	rjmp	.+4      	; 0x98f0 <tl_get_raw+0x72>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    98ec:	81 e0       	ldi	r24, 0x01	; 1
    98ee:	8c 83       	std	Y+4, r24	; 0x04
            }
            /* change queue header */
            queue->queue_header++;
    98f0:	88 81       	ld	r24, Y
    98f2:	99 81       	ldd	r25, Y+1	; 0x01
    98f4:	01 96       	adiw	r24, 0x01	; 1
    98f6:	88 83       	st	Y, r24
    98f8:	99 83       	std	Y+1, r25	; 0x01
            if (queue->queue_header == queue->queue_max_size)
    98fa:	2f 81       	ldd	r18, Y+7	; 0x07
    98fc:	38 85       	ldd	r19, Y+8	; 0x08
    98fe:	82 17       	cp	r24, r18
    9900:	93 07       	cpc	r25, r19
    9902:	11 f4       	brne	.+4      	; 0x9908 <tl_get_raw+0x8a>
            {
                queue->queue_header = 0U;
    9904:	18 82       	st	Y, r1
    9906:	19 82       	std	Y+1, r1	; 0x01
            }
        }
    }
    (void)iii;
}
    9908:	df 91       	pop	r29
    990a:	cf 91       	pop	r28
    990c:	1f 91       	pop	r17
    990e:	0f 91       	pop	r16
    9910:	08 95       	ret

00009912 <lin_tl_make_master_request_pdu>:
 * This function is implemented for Master
 *
 * Implements    : lin_tl_make_master_request_pdu_Activity
 *END**************************************************************************/
static void lin_tl_make_master_request_pdu(l_ifc_handle iii)
{
    9912:	cf 93       	push	r28
    9914:	df 93       	push	r29
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9916:	28 2f       	mov	r18, r24
    9918:	30 e0       	ldi	r19, 0x00	; 0

    tl_get_raw(iii, prot_state_ptr->response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    991a:	94 e3       	ldi	r25, 0x34	; 52
    991c:	92 9f       	mul	r25, r18
    991e:	a0 01       	movw	r20, r0
    9920:	93 9f       	mul	r25, r19
    9922:	50 0d       	add	r21, r0
    9924:	11 24       	eor	r1, r1
    9926:	4c 56       	subi	r20, 0x6C	; 108
    9928:	58 49       	sbci	r21, 0x98	; 152
    992a:	96 e1       	ldi	r25, 0x16	; 22
    992c:	92 9f       	mul	r25, r18
    992e:	e0 01       	movw	r28, r0
    9930:	93 9f       	mul	r25, r19
    9932:	d0 0d       	add	r29, r0
    9934:	11 24       	eor	r1, r1
    9936:	c8 53       	subi	r28, 0x38	; 56
    9938:	d8 49       	sbci	r29, 0x98	; 152
    993a:	6a 81       	ldd	r22, Y+2	; 0x02
    993c:	7b 81       	ldd	r23, Y+3	; 0x03
    993e:	20 e0       	ldi	r18, 0x00	; 0
    9940:	0e 94 3f 4c 	call	0x987e	; 0x987e <tl_get_raw>
    prot_state_ptr->response_length = 8U;
    9944:	88 e0       	ldi	r24, 0x08	; 8
    9946:	8c 83       	std	Y+4, r24	; 0x04
}
    9948:	df 91       	pop	r29
    994a:	cf 91       	pop	r28
    994c:	08 95       	ret

0000994e <lin_tl_get_pdu>:
 * Implements    : lin_tl_get_pdu_Activity
 *END**************************************************************************/
static void lin_tl_get_pdu(l_ifc_handle iii)
{
    /* Get data from tx queue */
    tl_get_raw(iii, g_lin_protocol_state_array[iii].response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    994e:	28 2f       	mov	r18, r24
    9950:	30 e0       	ldi	r19, 0x00	; 0
    9952:	94 e3       	ldi	r25, 0x34	; 52
    9954:	92 9f       	mul	r25, r18
    9956:	a0 01       	movw	r20, r0
    9958:	93 9f       	mul	r25, r19
    995a:	50 0d       	add	r21, r0
    995c:	11 24       	eor	r1, r1
    995e:	4c 56       	subi	r20, 0x6C	; 108
    9960:	58 49       	sbci	r21, 0x98	; 152
    9962:	96 e1       	ldi	r25, 0x16	; 22
    9964:	92 9f       	mul	r25, r18
    9966:	f0 01       	movw	r30, r0
    9968:	93 9f       	mul	r25, r19
    996a:	f0 0d       	add	r31, r0
    996c:	11 24       	eor	r1, r1
    996e:	e8 53       	subi	r30, 0x38	; 56
    9970:	f8 49       	sbci	r31, 0x98	; 152
    9972:	62 81       	ldd	r22, Z+2	; 0x02
    9974:	73 81       	ldd	r23, Z+3	; 0x03
    9976:	20 e0       	ldi	r18, 0x00	; 0
    9978:	0e 94 3f 4c 	call	0x987e	; 0x987e <tl_get_raw>
    997c:	08 95       	ret

0000997e <lin_tl_callback_handler>:
 * Implements    : lin_tl_callback_handler_Activity
 *END**************************************************************************/
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    997e:	0f 93       	push	r16
    9980:	1f 93       	push	r17
    9982:	e6 2f       	mov	r30, r22
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9984:	68 2f       	mov	r22, r24
    9986:	70 e0       	ldi	r23, 0x00	; 0
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;

    switch (tl_event_id)
    9988:	0e 2f       	mov	r16, r30
    998a:	10 e0       	ldi	r17, 0x00	; 0
    998c:	08 30       	cpi	r16, 0x08	; 8
    998e:	11 05       	cpc	r17, r1
    9990:	08 f0       	brcs	.+2      	; 0x9994 <lin_tl_callback_handler+0x16>
    9992:	61 c0       	rjmp	.+194    	; 0x9a56 <lin_tl_callback_handler+0xd8>
    9994:	f8 01       	movw	r30, r16
    9996:	e8 51       	subi	r30, 0x18	; 24
    9998:	fb 4d       	sbci	r31, 0xDB	; 219
    999a:	0c 94 3c 63 	jmp	0xc678	; 0xc678 <__tablejump2__>
    {
        case TL_RECEIVE_MESSAGE:
            /* If ld_receive_message is called and first frame in multi PDU is not transmitted */
            if ((tl_desc_ptr->rx_msg_status == LD_IN_PROGRESS) && (tl_desc_ptr->FF_pdu_received == false))
    999e:	84 e3       	ldi	r24, 0x34	; 52
    99a0:	86 9f       	mul	r24, r22
    99a2:	f0 01       	movw	r30, r0
    99a4:	87 9f       	mul	r24, r23
    99a6:	f0 0d       	add	r31, r0
    99a8:	11 24       	eor	r1, r1
    99aa:	ec 56       	subi	r30, 0x6C	; 108
    99ac:	f8 49       	sbci	r31, 0x98	; 152
    99ae:	86 89       	ldd	r24, Z+22	; 0x16
    99b0:	81 30       	cpi	r24, 0x01	; 1
    99b2:	09 f0       	breq	.+2      	; 0x99b6 <lin_tl_callback_handler+0x38>
    99b4:	52 c0       	rjmp	.+164    	; 0x9a5a <lin_tl_callback_handler+0xdc>
    99b6:	84 e3       	ldi	r24, 0x34	; 52
    99b8:	86 9f       	mul	r24, r22
    99ba:	f0 01       	movw	r30, r0
    99bc:	87 9f       	mul	r24, r23
    99be:	f0 0d       	add	r31, r0
    99c0:	11 24       	eor	r1, r1
    99c2:	ec 56       	subi	r30, 0x6C	; 108
    99c4:	f8 49       	sbci	r31, 0x98	; 152
    99c6:	85 a5       	ldd	r24, Z+45	; 0x2d
    99c8:	81 11       	cpse	r24, r1
    99ca:	49 c0       	rjmp	.+146    	; 0x9a5e <lin_tl_callback_handler+0xe0>
            {
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
    99cc:	84 e3       	ldi	r24, 0x34	; 52
    99ce:	86 9f       	mul	r24, r22
    99d0:	f0 01       	movw	r30, r0
    99d2:	87 9f       	mul	r24, r23
    99d4:	f0 0d       	add	r31, r0
    99d6:	11 24       	eor	r1, r1
    99d8:	ec 56       	subi	r30, 0x6C	; 108
    99da:	f8 49       	sbci	r31, 0x98	; 152
    99dc:	81 e0       	ldi	r24, 0x01	; 1
    99de:	84 a7       	std	Z+44, r24	; 0x2c
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99e0:	80 e0       	ldi	r24, 0x00	; 0
    99e2:	42 c0       	rjmp	.+132    	; 0x9a68 <lin_tl_callback_handler+0xea>
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
            }
            break;
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
    99e4:	0e 94 89 4c 	call	0x9912	; 0x9912 <lin_tl_make_master_request_pdu>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99e8:	80 e0       	ldi	r24, 0x00	; 0
              tl_desc_ptr->ld_return_data = true;
            }
            break;
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
            break;
    99ea:	3e c0       	rjmp	.+124    	; 0x9a68 <lin_tl_callback_handler+0xea>
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
    99ec:	94 e3       	ldi	r25, 0x34	; 52
    99ee:	96 9f       	mul	r25, r22
    99f0:	f0 01       	movw	r30, r0
    99f2:	97 9f       	mul	r25, r23
    99f4:	f0 0d       	add	r31, r0
    99f6:	11 24       	eor	r1, r1
    99f8:	ec 56       	subi	r30, 0x6C	; 108
    99fa:	f8 49       	sbci	r31, 0x98	; 152
    99fc:	92 a5       	ldd	r25, Z+42	; 0x2a
    99fe:	99 23       	and	r25, r25
    9a00:	81 f1       	breq	.+96     	; 0x9a62 <lin_tl_callback_handler+0xe4>
    9a02:	24 e3       	ldi	r18, 0x34	; 52
    9a04:	26 9f       	mul	r18, r22
    9a06:	f0 01       	movw	r30, r0
    9a08:	27 9f       	mul	r18, r23
    9a0a:	f0 0d       	add	r31, r0
    9a0c:	11 24       	eor	r1, r1
    9a0e:	ec 56       	subi	r30, 0x6C	; 108
    9a10:	f8 49       	sbci	r31, 0x98	; 152
    9a12:	23 a5       	ldd	r18, Z+43	; 0x2b
    9a14:	23 30       	cpi	r18, 0x03	; 3
    9a16:	39 f1       	breq	.+78     	; 0x9a66 <lin_tl_callback_handler+0xe8>
            {
                tl_desc_ptr->slave_resp_cnt--;
    9a18:	24 e3       	ldi	r18, 0x34	; 52
    9a1a:	26 9f       	mul	r18, r22
    9a1c:	f0 01       	movw	r30, r0
    9a1e:	27 9f       	mul	r18, r23
    9a20:	f0 0d       	add	r31, r0
    9a22:	11 24       	eor	r1, r1
    9a24:	ec 56       	subi	r30, 0x6C	; 108
    9a26:	f8 49       	sbci	r31, 0x98	; 152
    9a28:	91 50       	subi	r25, 0x01	; 1
    9a2a:	92 a7       	std	Z+42, r25	; 0x2a
                lin_tl_get_pdu(iii);
    9a2c:	0e 94 a7 4c 	call	0x994e	; 0x994e <lin_tl_get_pdu>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9a30:	80 e0       	ldi	r24, 0x00	; 0
            break;
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
            {
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
    9a32:	1a c0       	rjmp	.+52     	; 0x9a68 <lin_tl_callback_handler+0xea>
            {
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
    9a34:	0e 94 77 47 	call	0x8eee	; 0x8eee <lin_tl_handler_tx_completed>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9a38:	80 e0       	ldi	r24, 0x00	; 0
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
            break;
    9a3a:	16 c0       	rjmp	.+44     	; 0x9a68 <lin_tl_callback_handler+0xea>
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
    9a3c:	0e 94 b4 4b 	call	0x9768	; 0x9768 <lin_tl_handler_rx_completed>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9a40:	80 e0       	ldi	r24, 0x00	; 0
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
            break;
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
            break;
    9a42:	12 c0       	rjmp	.+36     	; 0x9a68 <lin_tl_callback_handler+0xea>
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
    9a44:	64 2f       	mov	r22, r20
    9a46:	0e 94 12 47 	call	0x8e24	; 0x8e24 <lin_tl_handler_error>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9a4a:	80 e0       	ldi	r24, 0x00	; 0
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
            break;
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
            break;
    9a4c:	0d c0       	rjmp	.+26     	; 0x9a68 <lin_tl_callback_handler+0xea>
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
    9a4e:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <lin_tl_handle_timeout>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9a52:	80 e0       	ldi	r24, 0x00	; 0
            lin_tl_handler_error(iii, id);
            break;
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
            break;
    9a54:	09 c0       	rjmp	.+18     	; 0x9a68 <lin_tl_callback_handler+0xea>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9a56:	80 e0       	ldi	r24, 0x00	; 0
    9a58:	07 c0       	rjmp	.+14     	; 0x9a68 <lin_tl_callback_handler+0xea>
    9a5a:	80 e0       	ldi	r24, 0x00	; 0
    9a5c:	05 c0       	rjmp	.+10     	; 0x9a68 <lin_tl_callback_handler+0xea>
    9a5e:	80 e0       	ldi	r24, 0x00	; 0
    9a60:	03 c0       	rjmp	.+6      	; 0x9a68 <lin_tl_callback_handler+0xea>
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
            }
            else
            {
                ret_val = TL_ACTION_ID_IGNORE;
    9a62:	81 e0       	ldi	r24, 0x01	; 1
    9a64:	01 c0       	rjmp	.+2      	; 0x9a68 <lin_tl_callback_handler+0xea>
    9a66:	81 e0       	ldi	r24, 0x01	; 1
            /* Do nothing */
            break;
    }

    return ret_val;
}
    9a68:	1f 91       	pop	r17
    9a6a:	0f 91       	pop	r16
    9a6c:	08 95       	ret

00009a6e <ld_read_by_id_callout>:
    l_u8 retval = LD_NEGATIVE_RESPONSE;

    /* Get the current configuration */
    const lin_protocol_user_config_t  *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    9a6e:	2c e1       	ldi	r18, 0x1C	; 28
    9a70:	82 9f       	mul	r24, r18
    9a72:	c0 01       	movw	r24, r0
    9a74:	11 24       	eor	r1, r1
    9a76:	fc 01       	movw	r30, r24
    9a78:	e8 5b       	subi	r30, 0xB8	; 184
    9a7a:	fc 49       	sbci	r31, 0x9C	; 156
    9a7c:	83 81       	ldd	r24, Z+3	; 0x03
    9a7e:	81 11       	cpse	r24, r1
    9a80:	13 c0       	rjmp	.+38     	; 0x9aa8 <ld_read_by_id_callout+0x3a>
    {
        /* Following code is an example - Real implementation is application-dependent */
        /* the handling does essentially depend on the id of the requested item */
        /* This example implement with ID = 32 - LIN_READ_USR_DEF_MIN */
        if (id == LIN_READ_USR_DEF_MIN)
    9a82:	60 32       	cpi	r22, 0x20	; 32
    9a84:	99 f4       	brne	.+38     	; 0x9aac <ld_read_by_id_callout+0x3e>
        {
            /*
            * id received is user defined 32
            */
            /* A positive response is ready to be sent to the user defined request */
            data[0] = (l_u8) (id + 1U);    /* Data user define */
    9a86:	81 e0       	ldi	r24, 0x01	; 1
    9a88:	86 0f       	add	r24, r22
    9a8a:	fa 01       	movw	r30, r20
    9a8c:	80 83       	st	Z, r24
            data[1] = (l_u8) (id + 2U);    /* Data user define */
    9a8e:	82 e0       	ldi	r24, 0x02	; 2
    9a90:	86 0f       	add	r24, r22
    9a92:	81 83       	std	Z+1, r24	; 0x01
            data[2] = (l_u8) (id + 3U);    /* Data user define */
    9a94:	83 e0       	ldi	r24, 0x03	; 3
    9a96:	86 0f       	add	r24, r22
    9a98:	82 83       	std	Z+2, r24	; 0x02
            data[3] = (l_u8) (id + 4U);    /* Data user define */
    9a9a:	84 e0       	ldi	r24, 0x04	; 4
    9a9c:	86 0f       	add	r24, r22
    9a9e:	83 83       	std	Z+3, r24	; 0x03
            data[4] = (l_u8) (id + 5U);    /* Data user define */
    9aa0:	6b 5f       	subi	r22, 0xFB	; 251
    9aa2:	64 83       	std	Z+4, r22	; 0x04
            retval = LD_POSITIVE_RESPONSE;
    9aa4:	84 e5       	ldi	r24, 0x54	; 84
    9aa6:	08 95       	ret
 * Implements    : ld_read_by_id_callout_Activity
 *END**************************************************************************/

l_u8 ld_read_by_id_callout(l_ifc_handle iii, l_u8 id, l_u8 *data)
{
    l_u8 retval = LD_NEGATIVE_RESPONSE;
    9aa8:	83 e5       	ldi	r24, 0x53	; 83
    9aaa:	08 95       	ret
    9aac:	83 e5       	ldi	r24, 0x53	; 83
            * id received is user defined 63 - no response
            */
        }
    } /* End (conf->function == _SLAVE_) */
   return retval;
}
    9aae:	08 95       	ret

00009ab0 <LIN_DRV_ProcessParity>:
 *
 * Implements    : LIN_DRV_ProcessParity_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_ProcessParity(uint8_t PID,
                              uint8_t typeAction)
{
    9ab0:	cf 93       	push	r28
    9ab2:	df 93       	push	r29
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    return (uint8_t)((A >> B) & 0x01U);
    9ab4:	28 2f       	mov	r18, r24
    9ab6:	30 e0       	ldi	r19, 0x00	; 0
    9ab8:	e9 01       	movw	r28, r18
    9aba:	d5 95       	asr	r29
    9abc:	c7 95       	ror	r28
    9abe:	a9 01       	movw	r20, r18
    9ac0:	55 95       	asr	r21
    9ac2:	47 95       	ror	r20
    9ac4:	55 95       	asr	r21
    9ac6:	47 95       	ror	r20
    9ac8:	f9 01       	movw	r30, r18
    9aca:	f5 95       	asr	r31
    9acc:	e7 95       	ror	r30
    9ace:	f5 95       	asr	r31
    9ad0:	e7 95       	ror	r30
    9ad2:	f5 95       	asr	r31
    9ad4:	e7 95       	ror	r30
    9ad6:	f5 95       	asr	r31
    9ad8:	e7 95       	ror	r30
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    9ada:	9c 2f       	mov	r25, r28
    9adc:	98 27       	eor	r25, r24
    9ade:	49 27       	eor	r20, r25
    9ae0:	4e 27       	eor	r20, r30
    9ae2:	41 70       	andi	r20, 0x01	; 1
    9ae4:	42 95       	swap	r20
    9ae6:	44 0f       	add	r20, r20
    9ae8:	44 0f       	add	r20, r20
    9aea:	40 7c       	andi	r20, 0xC0	; 192
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    return (uint8_t)((A >> B) & 0x01U);
    9aec:	d9 01       	movw	r26, r18
    9aee:	b5 95       	asr	r27
    9af0:	a7 95       	ror	r26
    9af2:	b5 95       	asr	r27
    9af4:	a7 95       	ror	r26
    9af6:	b5 95       	asr	r27
    9af8:	a7 95       	ror	r26
    9afa:	35 95       	asr	r19
    9afc:	27 95       	ror	r18
    9afe:	35 95       	asr	r19
    9b00:	27 95       	ror	r18
    9b02:	35 95       	asr	r19
    9b04:	27 95       	ror	r18
    9b06:	35 95       	asr	r19
    9b08:	27 95       	ror	r18
    9b0a:	35 95       	asr	r19
    9b0c:	27 95       	ror	r18
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    9b0e:	9c 2f       	mov	r25, r28
    9b10:	9a 27       	eor	r25, r26
    9b12:	9e 27       	eor	r25, r30
    9b14:	92 27       	eor	r25, r18
    9b16:	91 70       	andi	r25, 0x01	; 1
    9b18:	90 95       	com	r25
    9b1a:	97 95       	ror	r25
    9b1c:	99 27       	eor	r25, r25
    9b1e:	97 95       	ror	r25
    9b20:	24 2f       	mov	r18, r20
    9b22:	29 2b       	or	r18, r25
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));

    /* Check if action is checking parity bits */
    if (CHECK_PARITY == typeAction)
    9b24:	61 30       	cpi	r22, 0x01	; 1
    9b26:	31 f4       	brne	.+12     	; 0x9b34 <LIN_DRV_ProcessParity+0x84>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
    9b28:	98 2f       	mov	r25, r24
    9b2a:	90 7c       	andi	r25, 0xC0	; 192
    9b2c:	92 13       	cpse	r25, r18
    9b2e:	04 c0       	rjmp	.+8      	; 0x9b38 <LIN_DRV_ProcessParity+0x88>
        }
        /* If parity bits are correct */
        else
        {
            /* Return ID if parity bits are correct */
            retVal = (uint8_t)(PID & 0x3FU);
    9b30:	8f 73       	andi	r24, 0x3F	; 63
    9b32:	03 c0       	rjmp	.+6      	; 0x9b3a <LIN_DRV_ProcessParity+0x8a>
    }
    /* If action is making parity bits */
    else
    {
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    9b34:	82 2b       	or	r24, r18
    9b36:	01 c0       	rjmp	.+2      	; 0x9b3a <LIN_DRV_ProcessParity+0x8a>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
        {
            /* Return 0xFF if parity bits are incorrect */
            retVal = 0xFFU;
    9b38:	8f ef       	ldi	r24, 0xFF	; 255
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    }

    return retVal;
}
    9b3a:	df 91       	pop	r29
    9b3c:	cf 91       	pop	r28
    9b3e:	08 95       	ret

00009b40 <LIN_DRV_MakeChecksumByte>:
 * 计算经典型校验方式，传入参数PID应该为0
 *
 * Implements    : LIN_DRV_MakeChecksumByte_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_MakeChecksumByte(const uint8_t * buffer, uint8_t sizeBuffer, uint8_t PID)
{
    9b40:	fc 01       	movw	r30, r24
    uint8_t length;
    uint16_t checksum = 0U;

    /* For PID is 0x3C (ID 0x3C) or 0x7D (ID 0x3D) or 0xFE (ID 0x3E) or 0xBF (ID 0x3F)
     * apply classic checksum and apply enhanced checksum for other PID */
    if ((0x3CU != PID) && (0x7DU != PID) && (0xFEU != PID) && (0xBFU != PID))
    9b42:	4c 33       	cpi	r20, 0x3C	; 60
    9b44:	41 f0       	breq	.+16     	; 0x9b56 <LIN_DRV_MakeChecksumByte+0x16>
    9b46:	4d 37       	cpi	r20, 0x7D	; 125
    9b48:	49 f0       	breq	.+18     	; 0x9b5c <LIN_DRV_MakeChecksumByte+0x1c>
    9b4a:	4e 3f       	cpi	r20, 0xFE	; 254
    9b4c:	51 f0       	breq	.+20     	; 0x9b62 <LIN_DRV_MakeChecksumByte+0x22>
    9b4e:	4f 3b       	cpi	r20, 0xBF	; 191
    9b50:	59 f0       	breq	.+22     	; 0x9b68 <LIN_DRV_MakeChecksumByte+0x28>
    {
        /* For PID other than 0x3C, 0x7D, 0xFE and 0xBF: Add PID in checksum calculation */
        checksum = PID;
    9b52:	50 e0       	ldi	r21, 0x00	; 0
    9b54:	16 c0       	rjmp	.+44     	; 0x9b82 <LIN_DRV_MakeChecksumByte+0x42>
    }
    else
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    9b56:	40 e0       	ldi	r20, 0x00	; 0
    9b58:	50 e0       	ldi	r21, 0x00	; 0
    9b5a:	13 c0       	rjmp	.+38     	; 0x9b82 <LIN_DRV_MakeChecksumByte+0x42>
    9b5c:	40 e0       	ldi	r20, 0x00	; 0
    9b5e:	50 e0       	ldi	r21, 0x00	; 0
    9b60:	10 c0       	rjmp	.+32     	; 0x9b82 <LIN_DRV_MakeChecksumByte+0x42>
    9b62:	40 e0       	ldi	r20, 0x00	; 0
    9b64:	50 e0       	ldi	r21, 0x00	; 0
    9b66:	0d c0       	rjmp	.+26     	; 0x9b82 <LIN_DRV_MakeChecksumByte+0x42>
    9b68:	40 e0       	ldi	r20, 0x00	; 0
    9b6a:	50 e0       	ldi	r21, 0x00	; 0
    9b6c:	0a c0       	rjmp	.+20     	; 0x9b82 <LIN_DRV_MakeChecksumByte+0x42>
    }

    for (length = sizeBuffer; 0U < length; length--)
    {
        checksum += *buffer;
    9b6e:	81 91       	ld	r24, Z+
    9b70:	48 0f       	add	r20, r24
    9b72:	51 1d       	adc	r21, r1
        buffer++;
        /* Deal with the carry */
        if (checksum > 0xFFU)
    9b74:	4f 3f       	cpi	r20, 0xFF	; 255
    9b76:	51 05       	cpc	r21, r1
    9b78:	19 f0       	breq	.+6      	; 0x9b80 <LIN_DRV_MakeChecksumByte+0x40>
    9b7a:	10 f0       	brcs	.+4      	; 0x9b80 <LIN_DRV_MakeChecksumByte+0x40>
        {
            checksum -= 0xFFU;
    9b7c:	4f 5f       	subi	r20, 0xFF	; 255
    9b7e:	51 09       	sbc	r21, r1
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    }

    for (length = sizeBuffer; 0U < length; length--)
    9b80:	61 50       	subi	r22, 0x01	; 1
    9b82:	61 11       	cpse	r22, r1
    9b84:	f4 cf       	rjmp	.-24     	; 0x9b6e <LIN_DRV_MakeChecksumByte+0x2e>
        }
    }

    /* Return reversed checksum */
    return (uint8_t)(~checksum);
}
    9b86:	84 2f       	mov	r24, r20
    9b88:	80 95       	com	r24
    9b8a:	08 95       	ret

00009b8c <LIN_DRV_ProcessFrameHeader>:

    /* Disable LPUART interrupts. */
    //TODO:
    
    return retVal;
}
    9b8c:	cf 92       	push	r12
    9b8e:	df 92       	push	r13
    9b90:	ef 92       	push	r14
    9b92:	ff 92       	push	r15
    9b94:	1f 93       	push	r17
    9b96:	cf 93       	push	r28
    9b98:	df 93       	push	r29
    9b9a:	9b 01       	movw	r18, r22
    9b9c:	22 0f       	add	r18, r18
    9b9e:	33 1f       	adc	r19, r19
    9ba0:	f9 01       	movw	r30, r18
    9ba2:	e4 5b       	subi	r30, 0xB4	; 180
    9ba4:	f8 49       	sbci	r31, 0x98	; 152
    9ba6:	01 90       	ld	r0, Z+
    9ba8:	f0 81       	ld	r31, Z
    9baa:	e0 2d       	mov	r30, r0
    9bac:	d9 01       	movw	r26, r18
    9bae:	a2 5b       	subi	r26, 0xB2	; 178
    9bb0:	b8 49       	sbci	r27, 0x98	; 152
    9bb2:	cd 91       	ld	r28, X+
    9bb4:	dc 91       	ld	r29, X
    9bb6:	2a 89       	ldd	r18, Y+18	; 0x12
    9bb8:	26 30       	cpi	r18, 0x06	; 6
    9bba:	59 f5       	brne	.+86     	; 0x9c12 <LIN_DRV_ProcessFrameHeader+0x86>
    9bbc:	24 81       	ldd	r18, Z+4	; 0x04
    9bbe:	21 11       	cpse	r18, r1
    9bc0:	28 c0       	rjmp	.+80     	; 0x9c12 <LIN_DRV_ProcessFrameHeader+0x86>
    9bc2:	14 2f       	mov	r17, r20
    9bc4:	6b 01       	movw	r12, r22
    9bc6:	7c 01       	movw	r14, r24
    9bc8:	61 e0       	ldi	r22, 0x01	; 1
    9bca:	84 2f       	mov	r24, r20
    9bcc:	0e 94 58 4d 	call	0x9ab0	; 0x9ab0 <LIN_DRV_ProcessParity>
    9bd0:	8f 87       	std	Y+15, r24	; 0x0f
    9bd2:	18 8b       	std	Y+16, r17	; 0x10
    9bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    9bd6:	a9 f0       	breq	.+42     	; 0x9c02 <LIN_DRV_ProcessFrameHeader+0x76>
    9bd8:	86 e0       	ldi	r24, 0x06	; 6
    9bda:	89 8b       	std	Y+17, r24	; 0x11
    9bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
    9bde:	88 23       	and	r24, r24
    9be0:	31 f0       	breq	.+12     	; 0x9bee <LIN_DRV_ProcessFrameHeader+0x62>
    9be2:	87 e0       	ldi	r24, 0x07	; 7
    9be4:	8a 8b       	std	Y+18, r24	; 0x12
    9be6:	81 e0       	ldi	r24, 0x01	; 1
    9be8:	8a 87       	std	Y+10, r24	; 0x0a
    9bea:	89 87       	std	Y+9, r24	; 0x09
    9bec:	12 c0       	rjmp	.+36     	; 0x9c12 <LIN_DRV_ProcessFrameHeader+0x86>
    9bee:	1a 86       	std	Y+10, r1	; 0x0a
    9bf0:	ed 85       	ldd	r30, Y+13	; 0x0d
    9bf2:	fe 85       	ldd	r31, Y+14	; 0x0e
    9bf4:	30 97       	sbiw	r30, 0x00	; 0
    9bf6:	69 f0       	breq	.+26     	; 0x9c12 <LIN_DRV_ProcessFrameHeader+0x86>
    9bf8:	ae 01       	movw	r20, r28
    9bfa:	c7 01       	movw	r24, r14
    9bfc:	b6 01       	movw	r22, r12
    9bfe:	09 95       	icall
    9c00:	08 c0       	rjmp	.+16     	; 0x9c12 <LIN_DRV_ProcessFrameHeader+0x86>
    9c02:	87 e0       	ldi	r24, 0x07	; 7
    9c04:	89 8b       	std	Y+17, r24	; 0x11
    9c06:	ed 85       	ldd	r30, Y+13	; 0x0d
    9c08:	fe 85       	ldd	r31, Y+14	; 0x0e
    9c0a:	ae 01       	movw	r20, r28
    9c0c:	c7 01       	movw	r24, r14
    9c0e:	b6 01       	movw	r22, r12
    9c10:	09 95       	icall
    9c12:	df 91       	pop	r29
    9c14:	cf 91       	pop	r28
    9c16:	1f 91       	pop	r17
    9c18:	ff 90       	pop	r15
    9c1a:	ef 90       	pop	r14
    9c1c:	df 90       	pop	r13
    9c1e:	cf 90       	pop	r12
    9c20:	08 95       	ret

00009c22 <LIN_COM_DRV_MakeChecksumByte>:
    9c22:	0f 93       	push	r16
    9c24:	cf 93       	push	r28
    9c26:	df 93       	push	r29
    9c28:	ea 01       	movw	r28, r20
    9c2a:	40 2f       	mov	r20, r16
    9c2c:	66 0f       	add	r22, r22
    9c2e:	77 1f       	adc	r23, r23
    9c30:	fb 01       	movw	r30, r22
    9c32:	e4 5b       	subi	r30, 0xB4	; 180
    9c34:	f8 49       	sbci	r31, 0x98	; 152
    9c36:	01 90       	ld	r0, Z+
    9c38:	f0 81       	ld	r31, Z
    9c3a:	e0 2d       	mov	r30, r0
    9c3c:	a0 85       	ldd	r26, Z+8	; 0x08
    9c3e:	b1 85       	ldd	r27, Z+9	; 0x09
    9c40:	52 85       	ldd	r21, Z+10	; 0x0a
    9c42:	5f 3f       	cpi	r21, 0xFF	; 255
    9c44:	79 f0       	breq	.+30     	; 0x9c64 <LIN_COM_DRV_MakeChecksumByte+0x42>
    9c46:	10 97       	sbiw	r26, 0x00	; 0
    9c48:	49 f4       	brne	.+18     	; 0x9c5c <LIN_COM_DRV_MakeChecksumByte+0x3a>
    9c4a:	0f c0       	rjmp	.+30     	; 0x9c6a <LIN_COM_DRV_MakeChecksumByte+0x48>
    9c4c:	fd 01       	movw	r30, r26
    9c4e:	e9 0f       	add	r30, r25
    9c50:	f1 1d       	adc	r31, r1
    9c52:	30 81       	ld	r19, Z
    9c54:	43 17       	cp	r20, r19
    9c56:	41 f0       	breq	.+16     	; 0x9c68 <LIN_COM_DRV_MakeChecksumByte+0x46>
    9c58:	9f 5f       	subi	r25, 0xFF	; 255
    9c5a:	01 c0       	rjmp	.+2      	; 0x9c5e <LIN_COM_DRV_MakeChecksumByte+0x3c>
    9c5c:	90 e0       	ldi	r25, 0x00	; 0
    9c5e:	95 17       	cp	r25, r21
    9c60:	a8 f3       	brcs	.-22     	; 0x9c4c <LIN_COM_DRV_MakeChecksumByte+0x2a>
    9c62:	03 c0       	rjmp	.+6      	; 0x9c6a <LIN_COM_DRV_MakeChecksumByte+0x48>
    9c64:	40 e0       	ldi	r20, 0x00	; 0
    9c66:	01 c0       	rjmp	.+2      	; 0x9c6a <LIN_COM_DRV_MakeChecksumByte+0x48>
    9c68:	40 e0       	ldi	r20, 0x00	; 0
    9c6a:	62 2f       	mov	r22, r18
    9c6c:	ce 01       	movw	r24, r28
    9c6e:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <LIN_DRV_MakeChecksumByte>
    9c72:	df 91       	pop	r29
    9c74:	cf 91       	pop	r28
    9c76:	0f 91       	pop	r16
    9c78:	08 95       	ret

00009c7a <LIN_DRV_Init>:
    9c7a:	f9 01       	movw	r30, r18
    9c7c:	66 0f       	add	r22, r22
    9c7e:	77 1f       	adc	r23, r23
    9c80:	db 01       	movw	r26, r22
    9c82:	a2 5b       	subi	r26, 0xB2	; 178
    9c84:	b8 49       	sbci	r27, 0x98	; 152
    9c86:	2d 93       	st	X+, r18
    9c88:	3c 93       	st	X, r19
    9c8a:	db 01       	movw	r26, r22
    9c8c:	a4 5b       	subi	r26, 0xB4	; 180
    9c8e:	b8 49       	sbci	r27, 0x98	; 152
    9c90:	4d 93       	st	X+, r20
    9c92:	5c 93       	st	X, r21
    9c94:	db 01       	movw	r26, r22
    9c96:	a6 5b       	subi	r26, 0xB6	; 182
    9c98:	b8 49       	sbci	r27, 0x98	; 152
    9c9a:	83 eb       	ldi	r24, 0xB3	; 179
    9c9c:	90 e6       	ldi	r25, 0x60	; 96
    9c9e:	8d 93       	st	X+, r24
    9ca0:	9c 93       	st	X, r25
    9ca2:	82 e0       	ldi	r24, 0x02	; 2
    9ca4:	82 8b       	std	Z+18, r24	; 0x12
    9ca6:	10 86       	std	Z+8, r1	; 0x08
    9ca8:	11 86       	std	Z+9, r1	; 0x09
    9caa:	12 86       	std	Z+10, r1	; 0x0a
    9cac:	14 86       	std	Z+12, r1	; 0x0c
    9cae:	13 86       	std	Z+11, r1	; 0x0b
    9cb0:	17 8a       	std	Z+23, r1	; 0x17
    9cb2:	13 8a       	std	Z+19, r1	; 0x13
    9cb4:	14 8a       	std	Z+20, r1	; 0x14
    9cb6:	15 8a       	std	Z+21, r1	; 0x15
    9cb8:	16 8a       	std	Z+22, r1	; 0x16
    9cba:	80 e0       	ldi	r24, 0x00	; 0
    9cbc:	90 e0       	ldi	r25, 0x00	; 0
    9cbe:	08 95       	ret

00009cc0 <LIN_DRV_GotoIdleState>:
    9cc0:	66 0f       	add	r22, r22
    9cc2:	77 1f       	adc	r23, r23
    9cc4:	fb 01       	movw	r30, r22
    9cc6:	e2 5b       	subi	r30, 0xB2	; 178
    9cc8:	f8 49       	sbci	r31, 0x98	; 152
    9cca:	01 90       	ld	r0, Z+
    9ccc:	f0 81       	ld	r31, Z
    9cce:	e0 2d       	mov	r30, r0
    9cd0:	11 8a       	std	Z+17, r1	; 0x11
    9cd2:	82 e0       	ldi	r24, 0x02	; 2
    9cd4:	82 8b       	std	Z+18, r24	; 0x12
    9cd6:	12 86       	std	Z+10, r1	; 0x0a
    9cd8:	80 e0       	ldi	r24, 0x00	; 0
    9cda:	90 e0       	ldi	r25, 0x00	; 0
    9cdc:	08 95       	ret

00009cde <LIN_DRV_ProcessReceiveFrameData>:
    9cde:	cf 92       	push	r12
    9ce0:	df 92       	push	r13
    9ce2:	ef 92       	push	r14
    9ce4:	ff 92       	push	r15
    9ce6:	0f 93       	push	r16
    9ce8:	cf 93       	push	r28
    9cea:	df 93       	push	r29
    9cec:	fb 01       	movw	r30, r22
    9cee:	ee 0f       	add	r30, r30
    9cf0:	ff 1f       	adc	r31, r31
    9cf2:	e2 5b       	subi	r30, 0xB2	; 178
    9cf4:	f8 49       	sbci	r31, 0x98	; 152
    9cf6:	c0 81       	ld	r28, Z
    9cf8:	d1 81       	ldd	r29, Z+1	; 0x01
    9cfa:	2e 81       	ldd	r18, Y+6	; 0x06
    9cfc:	30 e0       	ldi	r19, 0x00	; 0
    9cfe:	5c 81       	ldd	r21, Y+4	; 0x04
    9d00:	e5 2f       	mov	r30, r21
    9d02:	f0 e0       	ldi	r31, 0x00	; 0
    9d04:	31 96       	adiw	r30, 0x01	; 1
    9d06:	e2 17       	cp	r30, r18
    9d08:	f3 07       	cpc	r31, r19
    9d0a:	50 f4       	brcc	.+20     	; 0x9d20 <LIN_DRV_ProcessReceiveFrameData+0x42>
    9d0c:	ea 81       	ldd	r30, Y+2	; 0x02
    9d0e:	fb 81       	ldd	r31, Y+3	; 0x03
    9d10:	40 83       	st	Z, r20
    9d12:	2a 81       	ldd	r18, Y+2	; 0x02
    9d14:	3b 81       	ldd	r19, Y+3	; 0x03
    9d16:	2f 5f       	subi	r18, 0xFF	; 255
    9d18:	3f 4f       	sbci	r19, 0xFF	; 255
    9d1a:	2a 83       	std	Y+2, r18	; 0x02
    9d1c:	3b 83       	std	Y+3, r19	; 0x03
    9d1e:	08 c0       	rjmp	.+16     	; 0x9d30 <LIN_DRV_ProcessReceiveFrameData+0x52>
    9d20:	2e 81       	ldd	r18, Y+6	; 0x06
    9d22:	30 e0       	ldi	r19, 0x00	; 0
    9d24:	25 1b       	sub	r18, r21
    9d26:	31 09       	sbc	r19, r1
    9d28:	21 30       	cpi	r18, 0x01	; 1
    9d2a:	31 05       	cpc	r19, r1
    9d2c:	09 f4       	brne	.+2      	; 0x9d30 <LIN_DRV_ProcessReceiveFrameData+0x52>
    9d2e:	4f 83       	std	Y+7, r20	; 0x07
    9d30:	2c 81       	ldd	r18, Y+4	; 0x04
    9d32:	31 e0       	ldi	r19, 0x01	; 1
    9d34:	32 0f       	add	r19, r18
    9d36:	3c 83       	std	Y+4, r19	; 0x04
    9d38:	2e 81       	ldd	r18, Y+6	; 0x06
    9d3a:	32 13       	cpse	r19, r18
    9d3c:	3d c0       	rjmp	.+122    	; 0x9db8 <LIN_DRV_ProcessReceiveFrameData+0xda>
    9d3e:	6b 01       	movw	r12, r22
    9d40:	7c 01       	movw	r14, r24
    9d42:	8e 81       	ldd	r24, Y+6	; 0x06
    9d44:	90 e0       	ldi	r25, 0x00	; 0
    9d46:	01 97       	sbiw	r24, 0x01	; 1
    9d48:	4a 81       	ldd	r20, Y+2	; 0x02
    9d4a:	5b 81       	ldd	r21, Y+3	; 0x03
    9d4c:	48 1b       	sub	r20, r24
    9d4e:	59 0b       	sbc	r21, r25
    9d50:	4a 83       	std	Y+2, r20	; 0x02
    9d52:	5b 83       	std	Y+3, r21	; 0x03
    9d54:	2e 81       	ldd	r18, Y+6	; 0x06
    9d56:	21 50       	subi	r18, 0x01	; 1
    9d58:	08 89       	ldd	r16, Y+16	; 0x10
    9d5a:	c7 01       	movw	r24, r14
    9d5c:	b6 01       	movw	r22, r12
    9d5e:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <LIN_COM_DRV_MakeChecksumByte>
    9d62:	9f 81       	ldd	r25, Y+7	; 0x07
    9d64:	89 13       	cpse	r24, r25
    9d66:	19 c0       	rjmp	.+50     	; 0x9d9a <LIN_DRV_ProcessReceiveFrameData+0xbc>
    9d68:	8c e0       	ldi	r24, 0x0C	; 12
    9d6a:	89 8b       	std	Y+17, r24	; 0x11
    9d6c:	88 e0       	ldi	r24, 0x08	; 8
    9d6e:	8a 8b       	std	Y+18, r24	; 0x12
    9d70:	ed 85       	ldd	r30, Y+13	; 0x0d
    9d72:	fe 85       	ldd	r31, Y+14	; 0x0e
    9d74:	30 97       	sbiw	r30, 0x00	; 0
    9d76:	21 f0       	breq	.+8      	; 0x9d80 <LIN_DRV_ProcessReceiveFrameData+0xa2>
    9d78:	ae 01       	movw	r20, r28
    9d7a:	c7 01       	movw	r24, r14
    9d7c:	b6 01       	movw	r22, r12
    9d7e:	09 95       	icall
    9d80:	8c 85       	ldd	r24, Y+12	; 0x0c
    9d82:	81 11       	cpse	r24, r1
    9d84:	19 c0       	rjmp	.+50     	; 0x9db8 <LIN_DRV_ProcessReceiveFrameData+0xda>
    9d86:	1a 86       	std	Y+10, r1	; 0x0a
    9d88:	19 86       	std	Y+9, r1	; 0x09
    9d8a:	8a 89       	ldd	r24, Y+18	; 0x12
    9d8c:	81 30       	cpi	r24, 0x01	; 1
    9d8e:	a1 f0       	breq	.+40     	; 0x9db8 <LIN_DRV_ProcessReceiveFrameData+0xda>
    9d90:	c7 01       	movw	r24, r14
    9d92:	b6 01       	movw	r22, r12
    9d94:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>
    9d98:	0f c0       	rjmp	.+30     	; 0x9db8 <LIN_DRV_ProcessReceiveFrameData+0xda>
    9d9a:	8a e0       	ldi	r24, 0x0A	; 10
    9d9c:	89 8b       	std	Y+17, r24	; 0x11
    9d9e:	ed 85       	ldd	r30, Y+13	; 0x0d
    9da0:	fe 85       	ldd	r31, Y+14	; 0x0e
    9da2:	30 97       	sbiw	r30, 0x00	; 0
    9da4:	21 f0       	breq	.+8      	; 0x9dae <LIN_DRV_ProcessReceiveFrameData+0xd0>
    9da6:	ae 01       	movw	r20, r28
    9da8:	c7 01       	movw	r24, r14
    9daa:	b6 01       	movw	r22, r12
    9dac:	09 95       	icall
    9dae:	19 86       	std	Y+9, r1	; 0x09
    9db0:	c7 01       	movw	r24, r14
    9db2:	b6 01       	movw	r22, r12
    9db4:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>
    9db8:	df 91       	pop	r29
    9dba:	cf 91       	pop	r28
    9dbc:	0f 91       	pop	r16
    9dbe:	ff 90       	pop	r15
    9dc0:	ef 90       	pop	r14
    9dc2:	df 90       	pop	r13
    9dc4:	cf 90       	pop	r12
    9dc6:	08 95       	ret

00009dc8 <LIN_DRV_ProcessSendFrameData>:
    9dc8:	cf 92       	push	r12
    9dca:	df 92       	push	r13
    9dcc:	ef 92       	push	r14
    9dce:	ff 92       	push	r15
    9dd0:	0f 93       	push	r16
    9dd2:	1f 93       	push	r17
    9dd4:	cf 93       	push	r28
    9dd6:	df 93       	push	r29
    9dd8:	6b 01       	movw	r12, r22
    9dda:	7c 01       	movw	r14, r24
    9ddc:	cb 01       	movw	r24, r22
    9dde:	88 0f       	add	r24, r24
    9de0:	99 1f       	adc	r25, r25
    9de2:	fc 01       	movw	r30, r24
    9de4:	e2 5b       	subi	r30, 0xB2	; 178
    9de6:	f8 49       	sbci	r31, 0x98	; 152
    9de8:	c0 81       	ld	r28, Z
    9dea:	d1 81       	ldd	r29, Z+1	; 0x01
    9dec:	fc 01       	movw	r30, r24
    9dee:	e6 5b       	subi	r30, 0xB6	; 182
    9df0:	f8 49       	sbci	r31, 0x98	; 152
    9df2:	00 81       	ld	r16, Z
    9df4:	11 81       	ldd	r17, Z+1	; 0x01
    9df6:	8d 81       	ldd	r24, Y+5	; 0x05
    9df8:	2c 81       	ldd	r18, Y+4	; 0x04
    9dfa:	82 1b       	sub	r24, r18
    9dfc:	81 30       	cpi	r24, 0x01	; 1
    9dfe:	29 f4       	brne	.+10     	; 0x9e0a <LIN_DRV_ProcessSendFrameData+0x42>
    9e00:	9f 81       	ldd	r25, Y+7	; 0x07
    9e02:	94 13       	cpse	r25, r20
    9e04:	04 c0       	rjmp	.+8      	; 0x9e0e <LIN_DRV_ProcessSendFrameData+0x46>
    9e06:	90 e0       	ldi	r25, 0x00	; 0
    9e08:	03 c0       	rjmp	.+6      	; 0x9e10 <LIN_DRV_ProcessSendFrameData+0x48>
    9e0a:	90 e0       	ldi	r25, 0x00	; 0
    9e0c:	01 c0       	rjmp	.+2      	; 0x9e10 <LIN_DRV_ProcessSendFrameData+0x48>
    9e0e:	91 e0       	ldi	r25, 0x01	; 1
    9e10:	39 2f       	mov	r19, r25
    9e12:	31 70       	andi	r19, 0x01	; 1
    9e14:	e8 81       	ld	r30, Y
    9e16:	f9 81       	ldd	r31, Y+1	; 0x01
    9e18:	90 81       	ld	r25, Z
    9e1a:	49 17       	cp	r20, r25
    9e1c:	21 f0       	breq	.+8      	; 0x9e26 <LIN_DRV_ProcessSendFrameData+0x5e>
    9e1e:	81 30       	cpi	r24, 0x01	; 1
    9e20:	21 f4       	brne	.+8      	; 0x9e2a <LIN_DRV_ProcessSendFrameData+0x62>
    9e22:	90 e0       	ldi	r25, 0x00	; 0
    9e24:	03 c0       	rjmp	.+6      	; 0x9e2c <LIN_DRV_ProcessSendFrameData+0x64>
    9e26:	90 e0       	ldi	r25, 0x00	; 0
    9e28:	01 c0       	rjmp	.+2      	; 0x9e2c <LIN_DRV_ProcessSendFrameData+0x64>
    9e2a:	91 e0       	ldi	r25, 0x01	; 1
    9e2c:	89 2f       	mov	r24, r25
    9e2e:	81 70       	andi	r24, 0x01	; 1
    9e30:	11 f4       	brne	.+4      	; 0x9e36 <LIN_DRV_ProcessSendFrameData+0x6e>
    9e32:	33 23       	and	r19, r19
    9e34:	a1 f0       	breq	.+40     	; 0x9e5e <LIN_DRV_ProcessSendFrameData+0x96>
    9e36:	89 e0       	ldi	r24, 0x09	; 9
    9e38:	89 8b       	std	Y+17, r24	; 0x11
    9e3a:	ed 85       	ldd	r30, Y+13	; 0x0d
    9e3c:	fe 85       	ldd	r31, Y+14	; 0x0e
    9e3e:	30 97       	sbiw	r30, 0x00	; 0
    9e40:	21 f0       	breq	.+8      	; 0x9e4a <LIN_DRV_ProcessSendFrameData+0x82>
    9e42:	ae 01       	movw	r20, r28
    9e44:	c7 01       	movw	r24, r14
    9e46:	b6 01       	movw	r22, r12
    9e48:	09 95       	icall
    9e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    9e4c:	81 11       	cpse	r24, r1
    9e4e:	0e c0       	rjmp	.+28     	; 0x9e6c <LIN_DRV_ProcessSendFrameData+0xa4>
    9e50:	18 86       	std	Y+8, r1	; 0x08
    9e52:	c7 01       	movw	r24, r14
    9e54:	b6 01       	movw	r22, r12
    9e56:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>
    9e5a:	80 e0       	ldi	r24, 0x00	; 0
    9e5c:	08 c0       	rjmp	.+16     	; 0x9e6e <LIN_DRV_ProcessSendFrameData+0xa6>
    9e5e:	31 96       	adiw	r30, 0x01	; 1
    9e60:	e8 83       	st	Y, r30
    9e62:	f9 83       	std	Y+1, r31	; 0x01
    9e64:	2f 5f       	subi	r18, 0xFF	; 255
    9e66:	2c 83       	std	Y+4, r18	; 0x04
    9e68:	81 e0       	ldi	r24, 0x01	; 1
    9e6a:	01 c0       	rjmp	.+2      	; 0x9e6e <LIN_DRV_ProcessSendFrameData+0xa6>
    9e6c:	80 e0       	ldi	r24, 0x00	; 0
    9e6e:	88 23       	and	r24, r24
    9e70:	91 f1       	breq	.+100    	; 0x9ed6 <LIN_DRV_ProcessSendFrameData+0x10e>
    9e72:	2c 81       	ldd	r18, Y+4	; 0x04
    9e74:	8d 81       	ldd	r24, Y+5	; 0x05
    9e76:	28 17       	cp	r18, r24
    9e78:	c0 f4       	brcc	.+48     	; 0x9eaa <LIN_DRV_ProcessSendFrameData+0xe2>
    9e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    9e7c:	90 e0       	ldi	r25, 0x00	; 0
    9e7e:	82 1b       	sub	r24, r18
    9e80:	91 09       	sbc	r25, r1
    9e82:	01 97       	sbiw	r24, 0x01	; 1
    9e84:	49 f4       	brne	.+18     	; 0x9e98 <LIN_DRV_ProcessSendFrameData+0xd0>
    9e86:	d8 01       	movw	r26, r16
    9e88:	12 96       	adiw	r26, 0x02	; 2
    9e8a:	ed 91       	ld	r30, X+
    9e8c:	fc 91       	ld	r31, X
    9e8e:	13 97       	sbiw	r26, 0x03	; 3
    9e90:	ce 01       	movw	r24, r28
    9e92:	07 96       	adiw	r24, 0x07	; 7
    9e94:	09 95       	icall
    9e96:	1f c0       	rjmp	.+62     	; 0x9ed6 <LIN_DRV_ProcessSendFrameData+0x10e>
    9e98:	d8 01       	movw	r26, r16
    9e9a:	12 96       	adiw	r26, 0x02	; 2
    9e9c:	ed 91       	ld	r30, X+
    9e9e:	fc 91       	ld	r31, X
    9ea0:	13 97       	sbiw	r26, 0x03	; 3
    9ea2:	88 81       	ld	r24, Y
    9ea4:	99 81       	ldd	r25, Y+1	; 0x01
    9ea6:	09 95       	icall
    9ea8:	16 c0       	rjmp	.+44     	; 0x9ed6 <LIN_DRV_ProcessSendFrameData+0x10e>
    9eaa:	8b e0       	ldi	r24, 0x0B	; 11
    9eac:	89 8b       	std	Y+17, r24	; 0x11
    9eae:	8a e0       	ldi	r24, 0x0A	; 10
    9eb0:	8a 8b       	std	Y+18, r24	; 0x12
    9eb2:	ed 85       	ldd	r30, Y+13	; 0x0d
    9eb4:	fe 85       	ldd	r31, Y+14	; 0x0e
    9eb6:	30 97       	sbiw	r30, 0x00	; 0
    9eb8:	21 f0       	breq	.+8      	; 0x9ec2 <LIN_DRV_ProcessSendFrameData+0xfa>
    9eba:	ae 01       	movw	r20, r28
    9ebc:	c7 01       	movw	r24, r14
    9ebe:	b6 01       	movw	r22, r12
    9ec0:	09 95       	icall
    9ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
    9ec4:	81 11       	cpse	r24, r1
    9ec6:	05 c0       	rjmp	.+10     	; 0x9ed2 <LIN_DRV_ProcessSendFrameData+0x10a>
    9ec8:	18 86       	std	Y+8, r1	; 0x08
    9eca:	19 8a       	std	Y+17, r1	; 0x11
    9ecc:	82 e0       	ldi	r24, 0x02	; 2
    9ece:	8a 8b       	std	Y+18, r24	; 0x12
    9ed0:	1a 86       	std	Y+10, r1	; 0x0a
    9ed2:	0e 94 57 26 	call	0x4cae	; 0x4cae <ep40_lin_signal_update_while_task>
    9ed6:	df 91       	pop	r29
    9ed8:	cf 91       	pop	r28
    9eda:	1f 91       	pop	r17
    9edc:	0f 91       	pop	r16
    9ede:	ff 90       	pop	r15
    9ee0:	ef 90       	pop	r14
    9ee2:	df 90       	pop	r13
    9ee4:	cf 90       	pop	r12
    9ee6:	08 95       	ret

00009ee8 <LIN_DRV_GoToSleepMode>:
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    9ee8:	66 0f       	add	r22, r22
    9eea:	77 1f       	adc	r23, r23
    9eec:	fb 01       	movw	r30, r22
    9eee:	e2 5b       	subi	r30, 0xB2	; 178
    9ef0:	f8 49       	sbci	r31, 0x98	; 152
    9ef2:	01 90       	ld	r0, Z+
    9ef4:	f0 81       	ld	r31, Z
    9ef6:	e0 2d       	mov	r30, r0

    /* Update node's current state to SLEEP_MODE. */
    linCurrentState->currentNodeState = LIN_NODE_STATE_SLEEP_MODE;
    9ef8:	81 e0       	ldi	r24, 0x01	; 1
    9efa:	82 8b       	std	Z+18, r24	; 0x12

    lin_go_to_sleep();
    9efc:	0e 94 80 2c 	call	0x5900	; 0x5900 <lin_go_to_sleep>

    return STATUS_SUCCESS;
}
    9f00:	80 e0       	ldi	r24, 0x00	; 0
    9f02:	90 e0       	ldi	r25, 0x00	; 0
    9f04:	08 95       	ret

00009f06 <LIN_DRV_AbortTransferData>:
 * function to terminate immediately the transferring.
 *
 * Implements    : LIN_DRV_AbortTransferData_Activity
 *END**************************************************************************/
status_t LIN_DRV_AbortTransferData(uint32_t instance)
{
    9f06:	cf 93       	push	r28
    9f08:	df 93       	push	r29
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    9f0a:	fb 01       	movw	r30, r22
    9f0c:	ee 0f       	add	r30, r30
    9f0e:	ff 1f       	adc	r31, r31
    9f10:	e2 5b       	subi	r30, 0xB2	; 178
    9f12:	f8 49       	sbci	r31, 0x98	; 152
    9f14:	c0 81       	ld	r28, Z
    9f16:	d1 81       	ldd	r29, Z+1	; 0x01

    /* Change node's current state to IDLE */
    (void)LIN_DRV_GotoIdleState(instance);
    9f18:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>

    /* Clear LIN Tx and Rx Busy flag */
    linCurrentState->isTxBusy = false;
    9f1c:	18 86       	std	Y+8, r1	; 0x08
    linCurrentState->isRxBusy = false;
    9f1e:	19 86       	std	Y+9, r1	; 0x09

    return retVal;
}
    9f20:	80 e0       	ldi	r24, 0x00	; 0
    9f22:	90 e0       	ldi	r25, 0x00	; 0
    9f24:	df 91       	pop	r29
    9f26:	cf 91       	pop	r28
    9f28:	08 95       	ret

00009f2a <LIN_DRV_InstallCallback>:
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    9f2a:	66 0f       	add	r22, r22
    9f2c:	77 1f       	adc	r23, r23
    9f2e:	fb 01       	movw	r30, r22
    9f30:	e2 5b       	subi	r30, 0xB2	; 178
    9f32:	f8 49       	sbci	r31, 0x98	; 152
    9f34:	01 90       	ld	r0, Z+
    9f36:	f0 81       	ld	r31, Z
    9f38:	e0 2d       	mov	r30, r0

    /* Get the current callback function. */
    lin_callback_t currentCallback = linCurrentState->Callback;
    9f3a:	85 85       	ldd	r24, Z+13	; 0x0d
    9f3c:	96 85       	ldd	r25, Z+14	; 0x0e

    /* Install new callback function. */
    linCurrentState->Callback = function;
    9f3e:	45 87       	std	Z+13, r20	; 0x0d
    9f40:	56 87       	std	Z+14, r21	; 0x0e

    return currentCallback;
}
    9f42:	08 95       	ret

00009f44 <LIN_DRV_IRQHandler>:

/*  参数instance为串口标号，取决于配置的顺序
*/

void LIN_DRV_IRQHandler(uint32_t instance, int8_t event)
{
    9f44:	cf 92       	push	r12
    9f46:	df 92       	push	r13
    9f48:	ef 92       	push	r14
    9f4a:	ff 92       	push	r15
    9f4c:	cf 93       	push	r28
    9f4e:	df 93       	push	r29
    9f50:	1f 92       	push	r1
    9f52:	cd b7       	in	r28, 0x3d	; 61
    9f54:	de b7       	in	r29, 0x3e	; 62
    9f56:	6b 01       	movw	r12, r22
    9f58:	7c 01       	movw	r14, r24
    /* 一下功能实现只针对AVRxxDA系列8位单片机 */
    uint8_t temp_buf; 
    /************/
    const lin_user_config_t * linUserConfig = g_linUserconfigPtr[instance];
    9f5a:	cb 01       	movw	r24, r22
    9f5c:	88 0f       	add	r24, r24
    9f5e:	99 1f       	adc	r25, r25
    9f60:	fc 01       	movw	r30, r24
    9f62:	e4 5b       	subi	r30, 0xB4	; 180
    9f64:	f8 49       	sbci	r31, 0x98	; 152
    9f66:	20 81       	ld	r18, Z
    9f68:	31 81       	ldd	r19, Z+1	; 0x01
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    9f6a:	fc 01       	movw	r30, r24
    9f6c:	e2 5b       	subi	r30, 0xB2	; 178
    9f6e:	f8 49       	sbci	r31, 0x98	; 152
    9f70:	a0 81       	ld	r26, Z
    9f72:	b1 81       	ldd	r27, Z+1	; 0x01
    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    9f74:	fc 01       	movw	r30, r24
    9f76:	e6 5b       	subi	r30, 0xB6	; 182
    9f78:	f8 49       	sbci	r31, 0x98	; 152
    9f7a:	60 81       	ld	r22, Z
    9f7c:	71 81       	ldd	r23, Z+1	; 0x01

    if(event == 1) // 检测到PID
    9f7e:	41 30       	cpi	r20, 0x01	; 1
    9f80:	d9 f4       	brne	.+54     	; 0x9fb8 <LIN_DRV_IRQHandler+0x74>
    {
        //AVR系列单片机特殊的地方 BREAK SYNC PID 一起识别触发
        if(linUserConfig->nodeFunction == (bool)MASTER)
    9f82:	f9 01       	movw	r30, r18
    9f84:	84 81       	ldd	r24, Z+4	; 0x04
    9f86:	81 11       	cpse	r24, r1
    9f88:	57 c0       	rjmp	.+174    	; 0xa038 <LIN_DRV_IRQHandler+0xf4>
        {
            //TODO:主机模式后续更新，AVR 8位机无法实现主机模式
        }else
        {
            /* Set flag LIN bus busy */
            linCurrentState->isBusBusy = true;
    9f8a:	81 e0       	ldi	r24, 0x01	; 1
    9f8c:	1a 96       	adiw	r26, 0x0a	; 10
    9f8e:	8c 93       	st	X, r24
    9f90:	1a 97       	sbiw	r26, 0x0a	; 10
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentEventId = LIN_SYNC_OK;
    9f92:	84 e0       	ldi	r24, 0x04	; 4
    9f94:	51 96       	adiw	r26, 0x11	; 17
    9f96:	8c 93       	st	X, r24
    9f98:	51 97       	sbiw	r26, 0x11	; 17
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_PID;
    9f9a:	86 e0       	ldi	r24, 0x06	; 6
    9f9c:	52 96       	adiw	r26, 0x12	; 18
    9f9e:	8c 93       	st	X, r24
            /* 直接读取data缓冲区数据，存放得当前PID */
            linFuncCallback->ReadByte(&temp_buf);
    9fa0:	db 01       	movw	r26, r22
    9fa2:	ed 91       	ld	r30, X+
    9fa4:	fc 91       	ld	r31, X
    9fa6:	ce 01       	movw	r24, r28
    9fa8:	01 96       	adiw	r24, 0x01	; 1
    9faa:	09 95       	icall
            /* 判断PID是否合理，有错误 */
            LIN_DRV_ProcessFrameHeader(instance, temp_buf);
    9fac:	49 81       	ldd	r20, Y+1	; 0x01
    9fae:	c7 01       	movw	r24, r14
    9fb0:	b6 01       	movw	r22, r12
    9fb2:	0e 94 c6 4d 	call	0x9b8c	; 0x9b8c <LIN_DRV_ProcessFrameHeader>
    9fb6:	40 c0       	rjmp	.+128    	; 0xa038 <LIN_DRV_IRQHandler+0xf4>
            // {
            //     linCurrentState->Callback(instance, linCurrentState);
            // }
        }
    }
    else if(event == 0) //处理帧数据
    9fb8:	41 11       	cpse	r20, r1
    9fba:	2a c0       	rjmp	.+84     	; 0xa010 <LIN_DRV_IRQHandler+0xcc>
    {
        /* Check node's current state */
        switch (linCurrentState->currentNodeState)
    9fbc:	52 96       	adiw	r26, 0x12	; 18
    9fbe:	8c 91       	ld	r24, X
    9fc0:	87 30       	cpi	r24, 0x07	; 7
    9fc2:	39 f0       	breq	.+14     	; 0x9fd2 <LIN_DRV_IRQHandler+0x8e>
    9fc4:	18 f4       	brcc	.+6      	; 0x9fcc <LIN_DRV_IRQHandler+0x88>
    9fc6:	84 30       	cpi	r24, 0x04	; 4
    9fc8:	b8 f5       	brcc	.+110    	; 0xa038 <LIN_DRV_IRQHandler+0xf4>
    9fca:	1b c0       	rjmp	.+54     	; 0xa002 <LIN_DRV_IRQHandler+0xbe>
    9fcc:	89 30       	cpi	r24, 0x09	; 9
    9fce:	69 f0       	breq	.+26     	; 0x9fea <LIN_DRV_IRQHandler+0xa6>
    9fd0:	18 c0       	rjmp	.+48     	; 0xa002 <LIN_DRV_IRQHandler+0xbe>
            /* if current state is RECEIVE PID */
            case LIN_NODE_STATE_RECV_PID:
                break;
            /* if current state is RECEIVE DATA */
            case LIN_NODE_STATE_RECV_DATA:
                linFuncCallback->ReadByte(&temp_buf);
    9fd2:	db 01       	movw	r26, r22
    9fd4:	ed 91       	ld	r30, X+
    9fd6:	fc 91       	ld	r31, X
    9fd8:	ce 01       	movw	r24, r28
    9fda:	01 96       	adiw	r24, 0x01	; 1
    9fdc:	09 95       	icall
                LIN_DRV_ProcessReceiveFrameData(instance, temp_buf);
    9fde:	49 81       	ldd	r20, Y+1	; 0x01
    9fe0:	c7 01       	movw	r24, r14
    9fe2:	b6 01       	movw	r22, r12
    9fe4:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <LIN_DRV_ProcessReceiveFrameData>
                break;
    9fe8:	27 c0       	rjmp	.+78     	; 0xa038 <LIN_DRV_IRQHandler+0xf4>
            /* if current state is SENDING DATA */
            case LIN_NODE_STATE_SEND_DATA:
                /* 发送时会回显数据 读上次发送的回显数据 */
                linFuncCallback->ReadByte(&temp_buf);
    9fea:	db 01       	movw	r26, r22
    9fec:	ed 91       	ld	r30, X+
    9fee:	fc 91       	ld	r31, X
    9ff0:	ce 01       	movw	r24, r28
    9ff2:	01 96       	adiw	r24, 0x01	; 1
    9ff4:	09 95       	icall
                LIN_DRV_ProcessSendFrameData(instance, temp_buf);
    9ff6:	49 81       	ldd	r20, Y+1	; 0x01
    9ff8:	c7 01       	movw	r24, r14
    9ffa:	b6 01       	movw	r22, r12
    9ffc:	0e 94 e4 4e 	call	0x9dc8	; 0x9dc8 <LIN_DRV_ProcessSendFrameData>
                break;
    a000:	1b c0       	rjmp	.+54     	; 0xa038 <LIN_DRV_IRQHandler+0xf4>

            default:
                /* Other node state */
				linFuncCallback->ReadByte(&temp_buf);
    a002:	db 01       	movw	r26, r22
    a004:	ed 91       	ld	r30, X+
    a006:	fc 91       	ld	r31, X
    a008:	ce 01       	movw	r24, r28
    a00a:	01 96       	adiw	r24, 0x01	; 1
    a00c:	09 95       	icall
                break;
    a00e:	14 c0       	rjmp	.+40     	; 0xa038 <LIN_DRV_IRQHandler+0xf4>
        }
    }
    else if(event == -1) //报错
    a010:	4f 3f       	cpi	r20, 0xFF	; 255
    a012:	91 f4       	brne	.+36     	; 0xa038 <LIN_DRV_IRQHandler+0xf4>
        // else if(err == USART_ERROR_FRAMING)
        // {

        // }
        // AVRXXDA系列的型号
        linCurrentState->currentEventId = LIN_SYNC_ERROR;
    a014:	85 e0       	ldi	r24, 0x05	; 5
    a016:	51 96       	adiw	r26, 0x11	; 17
    a018:	8c 93       	st	X, r24
    a01a:	51 97       	sbiw	r26, 0x11	; 17
        if(linCurrentState->Callback != NULL)
    a01c:	1d 96       	adiw	r26, 0x0d	; 13
    a01e:	ed 91       	ld	r30, X+
    a020:	fc 91       	ld	r31, X
    a022:	1e 97       	sbiw	r26, 0x0e	; 14
    a024:	30 97       	sbiw	r30, 0x00	; 0
    a026:	21 f0       	breq	.+8      	; 0xa030 <LIN_DRV_IRQHandler+0xec>
        {
            linCurrentState->Callback(instance, linCurrentState);
    a028:	ad 01       	movw	r20, r26
    a02a:	c7 01       	movw	r24, r14
    a02c:	b6 01       	movw	r22, r12
    a02e:	09 95       	icall
        }
        (void)LIN_DRV_GotoIdleState(instance);
    a030:	c7 01       	movw	r24, r14
    a032:	b6 01       	movw	r22, r12
    a034:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>
    }
}
    a038:	0f 90       	pop	r0
    a03a:	df 91       	pop	r29
    a03c:	cf 91       	pop	r28
    a03e:	ff 90       	pop	r15
    a040:	ef 90       	pop	r14
    a042:	df 90       	pop	r13
    a044:	cf 90       	pop	r12
    a046:	08 95       	ret

0000a048 <LIN_DRV_SendFrameData>:
 * isBusBusy is currently true then the function will return STATUS_BUSY.
 * 非阻塞模式下发送数据,该函数会计算校验字节，并发送帧数据，立即返回
 * Implements    : LIN_LPUART_DRV_SendFrameData_Activity
 * */
status_t LIN_DRV_SendFrameData(uint32_t instance, const uint8_t * txBuff, uint8_t txSize)
{
    a048:	cf 92       	push	r12
    a04a:	df 92       	push	r13
    a04c:	ef 92       	push	r14
    a04e:	ff 92       	push	r15
    a050:	0f 93       	push	r16
    a052:	1f 93       	push	r17
    a054:	cf 93       	push	r28
    a056:	df 93       	push	r29
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    a058:	fb 01       	movw	r30, r22
    a05a:	ee 0f       	add	r30, r30
    a05c:	ff 1f       	adc	r31, r31
    a05e:	df 01       	movw	r26, r30
    a060:	a2 5b       	subi	r26, 0xB2	; 178
    a062:	b8 49       	sbci	r27, 0x98	; 152
    a064:	cd 91       	ld	r28, X+
    a066:	dc 91       	ld	r29, X

    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    a068:	e6 5b       	subi	r30, 0xB6	; 182
    a06a:	f8 49       	sbci	r31, 0x98	; 152
    a06c:	c0 80       	ld	r12, Z
    a06e:	d1 80       	ldd	r13, Z+1	; 0x01

    /* 判断节点是否处于睡眠状态 */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    a070:	ea 89       	ldd	r30, Y+18	; 0x12

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    a072:	3f ef       	ldi	r19, 0xFF	; 255
    a074:	32 0f       	add	r19, r18
    a076:	38 30       	cpi	r19, 0x08	; 8
    a078:	08 f5       	brcc	.+66     	; 0xa0bc <LIN_DRV_SendFrameData+0x74>
    a07a:	e1 30       	cpi	r30, 0x01	; 1
    a07c:	11 f1       	breq	.+68     	; 0xa0c2 <LIN_DRV_SendFrameData+0x7a>
        retVal = STATUS_ERROR;
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    a07e:	3a 85       	ldd	r19, Y+10	; 0x0a
    a080:	31 11       	cpse	r19, r1
    a082:	22 c0       	rjmp	.+68     	; 0xa0c8 <LIN_DRV_SendFrameData+0x80>
    a084:	12 2f       	mov	r17, r18
    a086:	7a 01       	movw	r14, r20
            retVal = STATUS_BUSY;
        }
        else
        {
            /* Make the checksum byte. */           
            linCurrentState->checkSum = LIN_COM_DRV_MakeChecksumByte(instance, txBuff, txSize, linCurrentState->currentPid);
    a088:	08 89       	ldd	r16, Y+16	; 0x10
    a08a:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <LIN_COM_DRV_MakeChecksumByte>
    a08e:	8f 83       	std	Y+7, r24	; 0x07

            /* Update the LIN state structure. */
            linCurrentState->txBuff = txBuff;
    a090:	e8 82       	st	Y, r14
    a092:	f9 82       	std	Y+1, r15	; 0x01
            /* Add a place for checksum byte */
            linCurrentState->txSize = (uint8_t)(txSize + 1U);
    a094:	21 e0       	ldi	r18, 0x01	; 1
    a096:	21 0f       	add	r18, r17
    a098:	2d 83       	std	Y+5, r18	; 0x05
            linCurrentState->cntByte = 0U;
    a09a:	1c 82       	std	Y+4, r1	; 0x04
            linCurrentState->currentNodeState = LIN_NODE_STATE_SEND_DATA;
    a09c:	89 e0       	ldi	r24, 0x09	; 9
    a09e:	8a 8b       	std	Y+18, r24	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    a0a0:	19 8a       	std	Y+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    a0a2:	81 e0       	ldi	r24, 0x01	; 1
    a0a4:	8a 87       	std	Y+10, r24	; 0x0a
            linCurrentState->isTxBusy = true;
    a0a6:	88 87       	std	Y+8, r24	; 0x08

            /* Set Break char detect length as 10 bits minimum */
            //LPUART_SetBreakCharDetectLength(base, LPUART_BREAK_CHAR_10_BIT_MINIMUM);  

            /* Start sending data */
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
    a0a8:	d6 01       	movw	r26, r12
    a0aa:	12 96       	adiw	r26, 0x02	; 2
    a0ac:	ed 91       	ld	r30, X+
    a0ae:	fc 91       	ld	r31, X
    a0b0:	13 97       	sbiw	r26, 0x03	; 3
    a0b2:	c7 01       	movw	r24, r14
    a0b4:	09 95       	icall
{
    /* Assert parameters. */
    DEV_ASSERT(txBuff != NULL);
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;
    a0b6:	80 e0       	ldi	r24, 0x00	; 0
    a0b8:	90 e0       	ldi	r25, 0x00	; 0
    a0ba:	08 c0       	rjmp	.+16     	; 0xa0cc <LIN_DRV_SendFrameData+0x84>

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    {
        retVal = STATUS_ERROR;
    a0bc:	81 e0       	ldi	r24, 0x01	; 1
    a0be:	90 e0       	ldi	r25, 0x00	; 0
    a0c0:	05 c0       	rjmp	.+10     	; 0xa0cc <LIN_DRV_SendFrameData+0x84>
    a0c2:	81 e0       	ldi	r24, 0x01	; 1
    a0c4:	90 e0       	ldi	r25, 0x00	; 0
    a0c6:	02 c0       	rjmp	.+4      	; 0xa0cc <LIN_DRV_SendFrameData+0x84>
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
        {
            retVal = STATUS_BUSY;
    a0c8:	82 e0       	ldi	r24, 0x02	; 2
    a0ca:	90 e0       	ldi	r25, 0x00	; 0
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
        }
    }

    return retVal;
}
    a0cc:	df 91       	pop	r29
    a0ce:	cf 91       	pop	r28
    a0d0:	1f 91       	pop	r17
    a0d2:	0f 91       	pop	r16
    a0d4:	ff 90       	pop	r15
    a0d6:	ef 90       	pop	r14
    a0d8:	df 90       	pop	r13
    a0da:	cf 90       	pop	r12
    a0dc:	08 95       	ret

0000a0de <LIN_DRV_ReceiveFrameData>:
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    a0de:	66 0f       	add	r22, r22
    a0e0:	77 1f       	adc	r23, r23
    a0e2:	fb 01       	movw	r30, r22
    a0e4:	e2 5b       	subi	r30, 0xB2	; 178
    a0e6:	f8 49       	sbci	r31, 0x98	; 152
    a0e8:	01 90       	ld	r0, Z+
    a0ea:	f0 81       	ld	r31, Z
    a0ec:	e0 2d       	mov	r30, r0

    /* Check whether current mode is sleep mode */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    a0ee:	92 89       	ldd	r25, Z+18	; 0x12

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    a0f0:	8f ef       	ldi	r24, 0xFF	; 255
    a0f2:	82 0f       	add	r24, r18
    a0f4:	88 30       	cpi	r24, 0x08	; 8
    a0f6:	a0 f4       	brcc	.+40     	; 0xa120 <LIN_DRV_ReceiveFrameData+0x42>
    a0f8:	91 30       	cpi	r25, 0x01	; 1
    a0fa:	a9 f0       	breq	.+42     	; 0xa126 <LIN_DRV_ReceiveFrameData+0x48>
        retVal = STATUS_ERROR;
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    a0fc:	82 85       	ldd	r24, Z+10	; 0x0a
    a0fe:	81 11       	cpse	r24, r1
    a100:	15 c0       	rjmp	.+42     	; 0xa12c <LIN_DRV_ReceiveFrameData+0x4e>
            retVal = STATUS_BUSY;
        }
        else
        {
            /* Update the LIN state structure. */
            linCurrentState->rxBuff = rxBuff;
    a102:	42 83       	std	Z+2, r20	; 0x02
    a104:	53 83       	std	Z+3, r21	; 0x03
            /* Add a place for checksum byte */
            linCurrentState->rxSize = (uint8_t)(rxSize + 1U);
    a106:	2f 5f       	subi	r18, 0xFF	; 255
    a108:	26 83       	std	Z+6, r18	; 0x06
            linCurrentState->cntByte = 0U;
    a10a:	14 82       	std	Z+4, r1	; 0x04

            /* Start receiving data */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA;
    a10c:	87 e0       	ldi	r24, 0x07	; 7
    a10e:	82 8b       	std	Z+18, r24	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    a110:	11 8a       	std	Z+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    a112:	81 e0       	ldi	r24, 0x01	; 1
    a114:	82 87       	std	Z+10, r24	; 0x0a
            linCurrentState->isRxBusy = true;
    a116:	81 87       	std	Z+9, r24	; 0x09
            linCurrentState->isRxBlocking = false;
    a118:	14 86       	std	Z+12, r1	; 0x0c
{
    /* Assert parameters. */
    DEV_ASSERT(rxBuff != NULL);
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    a11a:	80 e0       	ldi	r24, 0x00	; 0
    a11c:	90 e0       	ldi	r25, 0x00	; 0
    a11e:	08 95       	ret

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    {
        retVal = STATUS_ERROR;
    a120:	81 e0       	ldi	r24, 0x01	; 1
    a122:	90 e0       	ldi	r25, 0x00	; 0
    a124:	08 95       	ret
    a126:	81 e0       	ldi	r24, 0x01	; 1
    a128:	90 e0       	ldi	r25, 0x00	; 0
    a12a:	08 95       	ret
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
        {
            retVal = STATUS_BUSY;
    a12c:	82 e0       	ldi	r24, 0x02	; 2
    a12e:	90 e0       	ldi	r25, 0x00	; 0
            linCurrentState->isRxBlocking = false;
        }
    }

    return retVal;
}
    a130:	08 95       	ret

0000a132 <LIN_DRV_TimeoutService>:
 * Implements    : LIN_DRV_TimeoutService_Activity
 * 
 * 需要初始化一个定时器,每0.5ms需要回调一次该函数,计数没有实现,AVR单片机容易导致卡死
 *END**************************************************************************/
void LIN_DRV_TimeoutService(uint32_t instance)
{
    a132:	cf 92       	push	r12
    a134:	df 92       	push	r13
    a136:	ef 92       	push	r14
    a138:	ff 92       	push	r15
    a13a:	cf 93       	push	r28
    a13c:	df 93       	push	r29
    a13e:	6b 01       	movw	r12, r22
    a140:	7c 01       	movw	r14, r24
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    a142:	fb 01       	movw	r30, r22
    a144:	ee 0f       	add	r30, r30
    a146:	ff 1f       	adc	r31, r31
    a148:	e2 5b       	subi	r30, 0xB2	; 178
    a14a:	f8 49       	sbci	r31, 0x98	; 152
    a14c:	c0 81       	ld	r28, Z
    a14e:	d1 81       	ldd	r29, Z+1	; 0x01

    /* Get LIN node's current state */
    lin_node_state_t state = linCurrentState->currentNodeState;
    a150:	8a 89       	ldd	r24, Y+18	; 0x12

    switch (state)
    a152:	87 30       	cpi	r24, 0x07	; 7
    a154:	51 f1       	breq	.+84     	; 0xa1aa <LIN_DRV_TimeoutService+0x78>
    a156:	89 30       	cpi	r24, 0x09	; 9
    a158:	09 f0       	breq	.+2      	; 0xa15c <LIN_DRV_TimeoutService+0x2a>
    a15a:	4d c0       	rjmp	.+154    	; 0xa1f6 <LIN_DRV_TimeoutService+0xc4>
    {
        /* If the node is SENDING DATA */
        case LIN_NODE_STATE_SEND_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    a15c:	8b 89       	ldd	r24, Y+19	; 0x13
    a15e:	9c 89       	ldd	r25, Y+20	; 0x14
    a160:	ad 89       	ldd	r26, Y+21	; 0x15
    a162:	be 89       	ldd	r27, Y+22	; 0x16
    a164:	89 2b       	or	r24, r25
    a166:	8a 2b       	or	r24, r26
    a168:	8b 2b       	or	r24, r27
    a16a:	99 f4       	brne	.+38     	; 0xa192 <LIN_DRV_TimeoutService+0x60>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    a16c:	81 e0       	ldi	r24, 0x01	; 1
    a16e:	8f 8b       	std	Y+23, r24	; 0x17

                if (linCurrentState->isTxBlocking == false)
    a170:	8b 85       	ldd	r24, Y+11	; 0x0b
    a172:	81 11       	cpse	r24, r1
    a174:	40 c0       	rjmp	.+128    	; 0xa1f6 <LIN_DRV_TimeoutService+0xc4>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    a176:	ed 85       	ldd	r30, Y+13	; 0x0d
    a178:	fe 85       	ldd	r31, Y+14	; 0x0e
    a17a:	30 97       	sbiw	r30, 0x00	; 0
    a17c:	21 f0       	breq	.+8      	; 0xa186 <LIN_DRV_TimeoutService+0x54>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    a17e:	ae 01       	movw	r20, r28
    a180:	c7 01       	movw	r24, r14
    a182:	b6 01       	movw	r22, r12
    a184:	09 95       	icall
                    }

                    /* Clear Tx busy flag */
                    linCurrentState->isTxBusy = false;
    a186:	18 86       	std	Y+8, r1	; 0x08

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    a188:	c7 01       	movw	r24, r14
    a18a:	b6 01       	movw	r22, r12
    a18c:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>
    a190:	32 c0       	rjmp	.+100    	; 0xa1f6 <LIN_DRV_TimeoutService+0xc4>
                }
            }
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
    a192:	8b 89       	ldd	r24, Y+19	; 0x13
    a194:	9c 89       	ldd	r25, Y+20	; 0x14
    a196:	ad 89       	ldd	r26, Y+21	; 0x15
    a198:	be 89       	ldd	r27, Y+22	; 0x16
    a19a:	01 97       	sbiw	r24, 0x01	; 1
    a19c:	a1 09       	sbc	r26, r1
    a19e:	b1 09       	sbc	r27, r1
    a1a0:	8b 8b       	std	Y+19, r24	; 0x13
    a1a2:	9c 8b       	std	Y+20, r25	; 0x14
    a1a4:	ad 8b       	std	Y+21, r26	; 0x15
    a1a6:	be 8b       	std	Y+22, r27	; 0x16
    a1a8:	26 c0       	rjmp	.+76     	; 0xa1f6 <LIN_DRV_TimeoutService+0xc4>

            break;
        /* If the node is RECEIVING DATA */
        case LIN_NODE_STATE_RECV_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    a1aa:	8b 89       	ldd	r24, Y+19	; 0x13
    a1ac:	9c 89       	ldd	r25, Y+20	; 0x14
    a1ae:	ad 89       	ldd	r26, Y+21	; 0x15
    a1b0:	be 89       	ldd	r27, Y+22	; 0x16
    a1b2:	89 2b       	or	r24, r25
    a1b4:	8a 2b       	or	r24, r26
    a1b6:	8b 2b       	or	r24, r27
    a1b8:	99 f4       	brne	.+38     	; 0xa1e0 <LIN_DRV_TimeoutService+0xae>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    a1ba:	81 e0       	ldi	r24, 0x01	; 1
    a1bc:	8f 8b       	std	Y+23, r24	; 0x17

                /* Check if the reception is non-blocking */
                if (linCurrentState->isRxBlocking == false)
    a1be:	8c 85       	ldd	r24, Y+12	; 0x0c
    a1c0:	81 11       	cpse	r24, r1
    a1c2:	19 c0       	rjmp	.+50     	; 0xa1f6 <LIN_DRV_TimeoutService+0xc4>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    a1c4:	ed 85       	ldd	r30, Y+13	; 0x0d
    a1c6:	fe 85       	ldd	r31, Y+14	; 0x0e
    a1c8:	30 97       	sbiw	r30, 0x00	; 0
    a1ca:	21 f0       	breq	.+8      	; 0xa1d4 <LIN_DRV_TimeoutService+0xa2>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    a1cc:	ae 01       	movw	r20, r28
    a1ce:	c7 01       	movw	r24, r14
    a1d0:	b6 01       	movw	r22, r12
    a1d2:	09 95       	icall
                    }

                    /* Clear Rx busy flag */
                    linCurrentState->isRxBusy = false;
    a1d4:	19 86       	std	Y+9, r1	; 0x09

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    a1d6:	c7 01       	movw	r24, r14
    a1d8:	b6 01       	movw	r22, r12
    a1da:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <LIN_DRV_GotoIdleState>
    a1de:	0b c0       	rjmp	.+22     	; 0xa1f6 <LIN_DRV_TimeoutService+0xc4>
                }
            }
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
    a1e0:	8b 89       	ldd	r24, Y+19	; 0x13
    a1e2:	9c 89       	ldd	r25, Y+20	; 0x14
    a1e4:	ad 89       	ldd	r26, Y+21	; 0x15
    a1e6:	be 89       	ldd	r27, Y+22	; 0x16
    a1e8:	01 97       	sbiw	r24, 0x01	; 1
    a1ea:	a1 09       	sbc	r26, r1
    a1ec:	b1 09       	sbc	r27, r1
    a1ee:	8b 8b       	std	Y+19, r24	; 0x13
    a1f0:	9c 8b       	std	Y+20, r25	; 0x14
    a1f2:	ad 8b       	std	Y+21, r26	; 0x15
    a1f4:	be 8b       	std	Y+22, r27	; 0x16
            break;
        default:
            /* The node state is not SENDING nor RECEIVING data */
            break;
    }
}
    a1f6:	df 91       	pop	r29
    a1f8:	cf 91       	pop	r28
    a1fa:	ff 90       	pop	r15
    a1fc:	ef 90       	pop	r14
    a1fe:	df 90       	pop	r13
    a200:	cf 90       	pop	r12
    a202:	08 95       	ret

0000a204 <LIN_DRV_SetTimeoutCounter>:
{
    /* Assert parameters. */
    //DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    a204:	66 0f       	add	r22, r22
    a206:	77 1f       	adc	r23, r23
    a208:	fb 01       	movw	r30, r22
    a20a:	e2 5b       	subi	r30, 0xB2	; 178
    a20c:	f8 49       	sbci	r31, 0x98	; 152
    a20e:	01 90       	ld	r0, Z+
    a210:	f0 81       	ld	r31, Z
    a212:	e0 2d       	mov	r30, r0

    /* Clear Timeout Counter Flag */
    linCurrentState->timeoutCounterFlag = false;
    a214:	17 8a       	std	Z+23, r1	; 0x17

    /* Set new value for Timeout Counter */
    linCurrentState->timeoutCounter = timeoutValue;
    a216:	23 8b       	std	Z+19, r18	; 0x13
    a218:	34 8b       	std	Z+20, r19	; 0x14
    a21a:	45 8b       	std	Z+21, r20	; 0x15
    a21c:	56 8b       	std	Z+22, r21	; 0x16
    a21e:	08 95       	ret

0000a220 <LIN_DRV_GetReceiveStatus>:
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    const lin_state_t * linCurrentState = g_linStatePtr[instance];
    a220:	66 0f       	add	r22, r22
    a222:	77 1f       	adc	r23, r23
    a224:	fb 01       	movw	r30, r22
    a226:	e2 5b       	subi	r30, 0xB2	; 178
    a228:	f8 49       	sbci	r31, 0x98	; 152
    a22a:	01 90       	ld	r0, Z+
    a22c:	f0 81       	ld	r31, Z
    a22e:	e0 2d       	mov	r30, r0

    /* Get the number of bytes that is still needed to receive */
    *bytesRemaining = (uint8_t)(linCurrentState->rxSize - linCurrentState->cntByte);
    a230:	86 81       	ldd	r24, Z+6	; 0x06
    a232:	94 81       	ldd	r25, Z+4	; 0x04
    a234:	89 1b       	sub	r24, r25
    a236:	da 01       	movw	r26, r20
    a238:	8c 93       	st	X, r24

    /* Return status of the on-going reception */
    if ((linCurrentState->currentEventId == LIN_NO_EVENT) && (*bytesRemaining != 0U))
    a23a:	91 89       	ldd	r25, Z+17	; 0x11
    a23c:	91 11       	cpse	r25, r1
    a23e:	08 c0       	rjmp	.+16     	; 0xa250 <LIN_DRV_GetReceiveStatus+0x30>
    a240:	88 23       	and	r24, r24
    a242:	49 f0       	breq	.+18     	; 0xa256 <LIN_DRV_GetReceiveStatus+0x36>
    {
        if (linCurrentState->timeoutCounterFlag == false)
    a244:	87 89       	ldd	r24, Z+23	; 0x17
    a246:	81 11       	cpse	r24, r1
    a248:	09 c0       	rjmp	.+18     	; 0xa25c <LIN_DRV_GetReceiveStatus+0x3c>
        {
            retVal = STATUS_BUSY;
    a24a:	82 e0       	ldi	r24, 0x02	; 2
    a24c:	90 e0       	ldi	r25, 0x00	; 0
    a24e:	08 95       	ret
status_t LIN_DRV_GetReceiveStatus(uint32_t instance, uint8_t * bytesRemaining)
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    a250:	80 e0       	ldi	r24, 0x00	; 0
    a252:	90 e0       	ldi	r25, 0x00	; 0
    a254:	08 95       	ret
    a256:	80 e0       	ldi	r24, 0x00	; 0
    a258:	90 e0       	ldi	r25, 0x00	; 0
    a25a:	08 95       	ret
        {
            retVal = STATUS_BUSY;
        }
        else
        {
            retVal = STATUS_TIMEOUT;
    a25c:	83 e0       	ldi	r24, 0x03	; 3
    a25e:	90 e0       	ldi	r25, 0x00	; 0
        }
    }

    return retVal;
    a260:	08 95       	ret

0000a262 <touch_ptc_pin_config>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
    a262:	e4 e3       	ldi	r30, 0x34	; 52
    a264:	f4 e0       	ldi	r31, 0x04	; 4
    a266:	80 81       	ld	r24, Z
    a268:	87 7f       	andi	r24, 0xF7	; 247
    a26a:	80 83       	st	Z, r24
    a26c:	80 81       	ld	r24, Z
    a26e:	88 7f       	andi	r24, 0xF8	; 248
    a270:	84 60       	ori	r24, 0x04	; 4
    a272:	80 83       	st	Z, r24
    a274:	e5 e3       	ldi	r30, 0x35	; 53
    a276:	f4 e0       	ldi	r31, 0x04	; 4
    a278:	80 81       	ld	r24, Z
    a27a:	87 7f       	andi	r24, 0xF7	; 247
    a27c:	80 83       	st	Z, r24
    a27e:	80 81       	ld	r24, Z
    a280:	88 7f       	andi	r24, 0xF8	; 248
    a282:	84 60       	ori	r24, 0x04	; 4
    a284:	80 83       	st	Z, r24
    a286:	e7 e1       	ldi	r30, 0x17	; 23
    a288:	f4 e0       	ldi	r31, 0x04	; 4
    a28a:	80 81       	ld	r24, Z
    a28c:	87 7f       	andi	r24, 0xF7	; 247
    a28e:	80 83       	st	Z, r24
    a290:	80 81       	ld	r24, Z
    a292:	88 7f       	andi	r24, 0xF8	; 248
    a294:	84 60       	ori	r24, 0x04	; 4
    a296:	80 83       	st	Z, r24
    a298:	e7 e7       	ldi	r30, 0x77	; 119
    a29a:	f4 e0       	ldi	r31, 0x04	; 4
    a29c:	80 81       	ld	r24, Z
    a29e:	87 7f       	andi	r24, 0xF7	; 247
    a2a0:	80 83       	st	Z, r24
    a2a2:	80 81       	ld	r24, Z
    a2a4:	88 7f       	andi	r24, 0xF8	; 248
    a2a6:	84 60       	ori	r24, 0x04	; 4
    a2a8:	80 83       	st	Z, r24
    a2aa:	e4 e9       	ldi	r30, 0x94	; 148
    a2ac:	f4 e0       	ldi	r31, 0x04	; 4
    a2ae:	80 81       	ld	r24, Z
    a2b0:	87 7f       	andi	r24, 0xF7	; 247
    a2b2:	80 83       	st	Z, r24
    a2b4:	80 81       	ld	r24, Z
    a2b6:	88 7f       	andi	r24, 0xF8	; 248
    a2b8:	84 60       	ori	r24, 0x04	; 4
    a2ba:	80 83       	st	Z, r24
    a2bc:	e2 e7       	ldi	r30, 0x72	; 114
    a2be:	f4 e0       	ldi	r31, 0x04	; 4
    a2c0:	80 81       	ld	r24, Z
    a2c2:	87 7f       	andi	r24, 0xF7	; 247
    a2c4:	80 83       	st	Z, r24
    a2c6:	80 81       	ld	r24, Z
    a2c8:	88 7f       	andi	r24, 0xF8	; 248
    a2ca:	84 60       	ori	r24, 0x04	; 4
    a2cc:	80 83       	st	Z, r24
    a2ce:	e5 e1       	ldi	r30, 0x15	; 21
    a2d0:	f4 e0       	ldi	r31, 0x04	; 4
    a2d2:	80 81       	ld	r24, Z
    a2d4:	87 7f       	andi	r24, 0xF7	; 247
    a2d6:	80 83       	st	Z, r24
    a2d8:	80 81       	ld	r24, Z
    a2da:	88 7f       	andi	r24, 0xF8	; 248
    a2dc:	84 60       	ori	r24, 0x04	; 4
    a2de:	80 83       	st	Z, r24
    a2e0:	e4 e1       	ldi	r30, 0x14	; 20
    a2e2:	f4 e0       	ldi	r31, 0x04	; 4
    a2e4:	80 81       	ld	r24, Z
    a2e6:	87 7f       	andi	r24, 0xF7	; 247
    a2e8:	80 83       	st	Z, r24
    a2ea:	80 81       	ld	r24, Z
    a2ec:	88 7f       	andi	r24, 0xF8	; 248
    a2ee:	84 60       	ori	r24, 0x04	; 4
    a2f0:	80 83       	st	Z, r24
    a2f2:	e0 e3       	ldi	r30, 0x30	; 48
    a2f4:	f4 e0       	ldi	r31, 0x04	; 4
    a2f6:	80 81       	ld	r24, Z
    a2f8:	87 7f       	andi	r24, 0xF7	; 247
    a2fa:	80 83       	st	Z, r24
    a2fc:	80 81       	ld	r24, Z
    a2fe:	88 7f       	andi	r24, 0xF8	; 248
    a300:	84 60       	ori	r24, 0x04	; 4
    a302:	80 83       	st	Z, r24
    a304:	e1 e3       	ldi	r30, 0x31	; 49
    a306:	f4 e0       	ldi	r31, 0x04	; 4
    a308:	80 81       	ld	r24, Z
    a30a:	87 7f       	andi	r24, 0xF7	; 247
    a30c:	80 83       	st	Z, r24
    a30e:	80 81       	ld	r24, Z
    a310:	88 7f       	andi	r24, 0xF8	; 248
    a312:	84 60       	ori	r24, 0x04	; 4
    a314:	80 83       	st	Z, r24
    a316:	e2 e3       	ldi	r30, 0x32	; 50
    a318:	f4 e0       	ldi	r31, 0x04	; 4
    a31a:	80 81       	ld	r24, Z
    a31c:	87 7f       	andi	r24, 0xF7	; 247
    a31e:	80 83       	st	Z, r24
    a320:	80 81       	ld	r24, Z
    a322:	88 7f       	andi	r24, 0xF8	; 248
    a324:	84 60       	ori	r24, 0x04	; 4
    a326:	80 83       	st	Z, r24
    a328:	e3 e3       	ldi	r30, 0x33	; 51
    a32a:	f4 e0       	ldi	r31, 0x04	; 4
    a32c:	80 81       	ld	r24, Z
    a32e:	87 7f       	andi	r24, 0xF7	; 247
    a330:	80 83       	st	Z, r24
    a332:	80 81       	ld	r24, Z
    a334:	88 7f       	andi	r24, 0xF8	; 248
    a336:	84 60       	ori	r24, 0x04	; 4
    a338:	80 83       	st	Z, r24
    a33a:	e6 e1       	ldi	r30, 0x16	; 22
    a33c:	f4 e0       	ldi	r31, 0x04	; 4
    a33e:	80 81       	ld	r24, Z
    a340:	87 7f       	andi	r24, 0xF7	; 247
    a342:	80 83       	st	Z, r24
    a344:	80 81       	ld	r24, Z
    a346:	88 7f       	andi	r24, 0xF8	; 248
    a348:	84 60       	ori	r24, 0x04	; 4
    a34a:	80 83       	st	Z, r24
    a34c:	e0 e7       	ldi	r30, 0x70	; 112
    a34e:	f4 e0       	ldi	r31, 0x04	; 4
    a350:	80 81       	ld	r24, Z
    a352:	87 7f       	andi	r24, 0xF7	; 247
    a354:	80 83       	st	Z, r24
    a356:	80 81       	ld	r24, Z
    a358:	88 7f       	andi	r24, 0xF8	; 248
    a35a:	84 60       	ori	r24, 0x04	; 4
    a35c:	80 83       	st	Z, r24
    a35e:	e1 e7       	ldi	r30, 0x71	; 113
    a360:	f4 e0       	ldi	r31, 0x04	; 4
    a362:	80 81       	ld	r24, Z
    a364:	87 7f       	andi	r24, 0xF7	; 247
    a366:	80 83       	st	Z, r24
    a368:	80 81       	ld	r24, Z
    a36a:	88 7f       	andi	r24, 0xF8	; 248
    a36c:	84 60       	ori	r24, 0x04	; 4
    a36e:	80 83       	st	Z, r24
    a370:	e7 e3       	ldi	r30, 0x37	; 55
    a372:	f4 e0       	ldi	r31, 0x04	; 4
    a374:	80 81       	ld	r24, Z
    a376:	87 7f       	andi	r24, 0xF7	; 247
    a378:	80 83       	st	Z, r24
    a37a:	80 81       	ld	r24, Z
    a37c:	88 7f       	andi	r24, 0xF8	; 248
    a37e:	84 60       	ori	r24, 0x04	; 4
    a380:	80 83       	st	Z, r24
    a382:	e6 e3       	ldi	r30, 0x36	; 54
    a384:	f4 e0       	ldi	r31, 0x04	; 4
    a386:	80 81       	ld	r24, Z
    a388:	87 7f       	andi	r24, 0xF7	; 247
    a38a:	80 83       	st	Z, r24
    a38c:	80 81       	ld	r24, Z
    a38e:	88 7f       	andi	r24, 0xF8	; 248
    a390:	84 60       	ori	r24, 0x04	; 4
    a392:	80 83       	st	Z, r24
    a394:	e3 e7       	ldi	r30, 0x73	; 115
    a396:	f4 e0       	ldi	r31, 0x04	; 4
    a398:	80 81       	ld	r24, Z
    a39a:	87 7f       	andi	r24, 0xF7	; 247
    a39c:	80 83       	st	Z, r24
    a39e:	80 81       	ld	r24, Z
    a3a0:	88 7f       	andi	r24, 0xF8	; 248
    a3a2:	84 60       	ori	r24, 0x04	; 4
    a3a4:	80 83       	st	Z, r24
    a3a6:	e4 e7       	ldi	r30, 0x74	; 116
    a3a8:	f4 e0       	ldi	r31, 0x04	; 4
    a3aa:	80 81       	ld	r24, Z
    a3ac:	87 7f       	andi	r24, 0xF7	; 247
    a3ae:	80 83       	st	Z, r24
    a3b0:	80 81       	ld	r24, Z
    a3b2:	88 7f       	andi	r24, 0xF8	; 248
    a3b4:	84 60       	ori	r24, 0x04	; 4
    a3b6:	80 83       	st	Z, r24
    a3b8:	e5 e7       	ldi	r30, 0x75	; 117
    a3ba:	f4 e0       	ldi	r31, 0x04	; 4
    a3bc:	80 81       	ld	r24, Z
    a3be:	87 7f       	andi	r24, 0xF7	; 247
    a3c0:	80 83       	st	Z, r24
    a3c2:	80 81       	ld	r24, Z
    a3c4:	88 7f       	andi	r24, 0xF8	; 248
    a3c6:	84 60       	ori	r24, 0x04	; 4
    a3c8:	80 83       	st	Z, r24
    a3ca:	08 95       	ret

0000a3cc <qtm_measure_complete_callback>:
    a3cc:	81 e0       	ldi	r24, 0x01	; 1
    a3ce:	80 93 53 67 	sts	0x6753, r24	; 0x806753 <touch_postprocess_request>
    a3d2:	08 95       	ret

0000a3d4 <qtm_error_callback>:
    a3d4:	8f 5f       	subi	r24, 0xFF	; 255
    a3d6:	80 93 51 67 	sts	0x6751, r24	; 0x806751 <module_error_code>
    a3da:	08 95       	ret

0000a3dc <touch_sensors_config>:
    a3dc:	cf 93       	push	r28
    a3de:	df 93       	push	r29
    a3e0:	81 e5       	ldi	r24, 0x51	; 81
    a3e2:	91 e6       	ldi	r25, 0x61	; 97
    a3e4:	0e 94 dc 60 	call	0xc1b8	; 0xc1b8 <qtm_ptc_init_acquisition_module>
    a3e8:	8b e5       	ldi	r24, 0x5B	; 91
    a3ea:	98 e6       	ldi	r25, 0x68	; 104
    a3ec:	0e 94 93 61 	call	0xc326	; 0xc326 <qtm_ptc_qtlib_assign_signal_memory>
    a3f0:	c0 e0       	ldi	r28, 0x00	; 0
    a3f2:	d0 e0       	ldi	r29, 0x00	; 0
    a3f4:	0b c0       	rjmp	.+22     	; 0xa40c <touch_sensors_config+0x30>
    a3f6:	be 01       	movw	r22, r28
    a3f8:	81 e5       	ldi	r24, 0x51	; 81
    a3fa:	91 e6       	ldi	r25, 0x61	; 97
    a3fc:	0e 94 0d 62 	call	0xc41a	; 0xc41a <qtm_enable_sensor_node>
    a400:	be 01       	movw	r22, r28
    a402:	81 e5       	ldi	r24, 0x51	; 81
    a404:	91 e6       	ldi	r25, 0x61	; 97
    a406:	0e 94 2c 62 	call	0xc458	; 0xc458 <qtm_calibrate_sensor_node>
    a40a:	21 96       	adiw	r28, 0x01	; 1
    a40c:	c4 31       	cpi	r28, 0x14	; 20
    a40e:	d1 05       	cpc	r29, r1
    a410:	90 f3       	brcs	.-28     	; 0xa3f6 <touch_sensors_config+0x1a>
    a412:	c0 e0       	ldi	r28, 0x00	; 0
    a414:	d0 e0       	ldi	r29, 0x00	; 0
    a416:	0f c0       	rjmp	.+30     	; 0xa436 <touch_sensors_config+0x5a>
    a418:	ae 01       	movw	r20, r28
    a41a:	44 0f       	add	r20, r20
    a41c:	55 1f       	adc	r21, r21
    a41e:	44 0f       	add	r20, r20
    a420:	55 1f       	adc	r21, r21
    a422:	4c 0f       	add	r20, r28
    a424:	5d 1f       	adc	r21, r29
    a426:	4b 51       	subi	r20, 0x1B	; 27
    a428:	58 49       	sbci	r21, 0x98	; 152
    a42a:	6c 2f       	mov	r22, r28
    a42c:	83 e0       	ldi	r24, 0x03	; 3
    a42e:	91 e6       	ldi	r25, 0x61	; 97
    a430:	0e 94 7b 55 	call	0xaaf6	; 0xaaf6 <qtm_init_sensor_key>
    a434:	21 96       	adiw	r28, 0x01	; 1
    a436:	c4 31       	cpi	r28, 0x14	; 20
    a438:	d1 05       	cpc	r29, r1
    a43a:	70 f3       	brcs	.-36     	; 0xa418 <touch_sensors_config+0x3c>
    a43c:	88 ee       	ldi	r24, 0xE8	; 232
    a43e:	90 e6       	ldi	r25, 0x60	; 96
    a440:	0e 94 69 59 	call	0xb2d2	; 0xb2d2 <qtm_init_scroller_module>
    a444:	df 91       	pop	r29
    a446:	cf 91       	pop	r28
    a448:	08 95       	ret

0000a44a <Timer_set_period>:
    a44a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    a44e:	92 fd       	sbrc	r25, 2
    a450:	fc cf       	rjmp	.-8      	; 0xa44a <Timer_set_period>
    a452:	90 e0       	ldi	r25, 0x00	; 0
    a454:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x7f014a>
    a458:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x7f014b>
    a45c:	08 95       	ret

0000a45e <touch_init>:
    a45e:	80 e2       	ldi	r24, 0x20	; 32
    a460:	0e 94 25 52 	call	0xa44a	; 0xa44a <Timer_set_period>
    a464:	0e 94 31 51 	call	0xa262	; 0xa262 <touch_ptc_pin_config>
    a468:	0e 94 ee 51 	call	0xa3dc	; 0xa3dc <touch_sensors_config>
    a46c:	08 95       	ret

0000a46e <touch_process>:
    a46e:	80 91 54 67 	lds	r24, 0x6754	; 0x806754 <time_to_measure_touch_flag>
    a472:	81 30       	cpi	r24, 0x01	; 1
    a474:	51 f4       	brne	.+20     	; 0xa48a <touch_process+0x1c>
    a476:	66 ee       	ldi	r22, 0xE6	; 230
    a478:	71 e5       	ldi	r23, 0x51	; 81
    a47a:	81 e5       	ldi	r24, 0x51	; 81
    a47c:	91 e6       	ldi	r25, 0x61	; 97
    a47e:	0e 94 9d 61 	call	0xc33a	; 0xc33a <qtm_ptc_start_measurement_seq>
    a482:	81 11       	cpse	r24, r1
    a484:	02 c0       	rjmp	.+4      	; 0xa48a <touch_process+0x1c>
    a486:	10 92 54 67 	sts	0x6754, r1	; 0x806754 <time_to_measure_touch_flag>
    a48a:	80 91 53 67 	lds	r24, 0x6753	; 0x806753 <touch_postprocess_request>
    a48e:	81 30       	cpi	r24, 0x01	; 1
    a490:	51 f5       	brne	.+84     	; 0xa4e6 <touch_process+0x78>
    a492:	10 92 53 67 	sts	0x6753, r1	; 0x806753 <touch_postprocess_request>
    a496:	0e 94 5a 5e 	call	0xbcb4	; 0xbcb4 <qtm_acquisition_process>
    a49a:	81 11       	cpse	r24, r1
    a49c:	13 c0       	rjmp	.+38     	; 0xa4c4 <touch_process+0x56>
    a49e:	83 e0       	ldi	r24, 0x03	; 3
    a4a0:	91 e6       	ldi	r25, 0x61	; 97
    a4a2:	0e 94 9a 55 	call	0xab34	; 0xab34 <qtm_key_sensors_process>
    a4a6:	88 23       	and	r24, r24
    a4a8:	19 f0       	breq	.+6      	; 0xa4b0 <touch_process+0x42>
    a4aa:	81 e0       	ldi	r24, 0x01	; 1
    a4ac:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <qtm_error_callback>
    a4b0:	88 ee       	ldi	r24, 0xE8	; 232
    a4b2:	90 e6       	ldi	r25, 0x60	; 96
    a4b4:	0e 94 a9 59 	call	0xb352	; 0xb352 <qtm_scroller_process>
    a4b8:	88 23       	and	r24, r24
    a4ba:	39 f0       	breq	.+14     	; 0xa4ca <touch_process+0x5c>
    a4bc:	82 e0       	ldi	r24, 0x02	; 2
    a4be:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <qtm_error_callback>
    a4c2:	03 c0       	rjmp	.+6      	; 0xa4ca <touch_process+0x5c>
    a4c4:	80 e0       	ldi	r24, 0x00	; 0
    a4c6:	0e 94 ea 51 	call	0xa3d4	; 0xa3d4 <qtm_error_callback>
    a4ca:	e0 91 03 61 	lds	r30, 0x6103	; 0x806103 <qtlib_key_set1>
    a4ce:	f0 91 04 61 	lds	r31, 0x6104	; 0x806104 <qtlib_key_set1+0x1>
    a4d2:	80 81       	ld	r24, Z
    a4d4:	88 23       	and	r24, r24
    a4d6:	24 f4       	brge	.+8      	; 0xa4e0 <touch_process+0x72>
    a4d8:	81 e0       	ldi	r24, 0x01	; 1
    a4da:	80 93 54 67 	sts	0x6754, r24	; 0x806754 <time_to_measure_touch_flag>
    a4de:	08 95       	ret
    a4e0:	81 e0       	ldi	r24, 0x01	; 1
    a4e2:	80 93 52 67 	sts	0x6752, r24	; 0x806752 <measurement_done_touch>
    a4e6:	08 95       	ret

0000a4e8 <touch_timer_handler>:
    a4e8:	80 91 e4 67 	lds	r24, 0x67E4	; 0x8067e4 <interrupt_cnt>
    a4ec:	8f 5f       	subi	r24, 0xFF	; 255
    a4ee:	80 93 e4 67 	sts	0x67E4, r24	; 0x8067e4 <interrupt_cnt>
    a4f2:	84 31       	cpi	r24, 0x14	; 20
    a4f4:	48 f0       	brcs	.+18     	; 0xa508 <touch_timer_handler+0x20>
    a4f6:	10 92 e4 67 	sts	0x67E4, r1	; 0x8067e4 <interrupt_cnt>
    a4fa:	81 e0       	ldi	r24, 0x01	; 1
    a4fc:	80 93 54 67 	sts	0x6754, r24	; 0x806754 <time_to_measure_touch_flag>
    a500:	84 e1       	ldi	r24, 0x14	; 20
    a502:	90 e0       	ldi	r25, 0x00	; 0
    a504:	0e 94 70 55 	call	0xaae0	; 0xaae0 <qtm_update_qtlib_timer>
    a508:	08 95       	ret

0000a50a <get_sensor_state>:
    a50a:	e0 91 07 61 	lds	r30, 0x6107	; 0x806107 <qtlib_key_set1+0x4>
    a50e:	f0 91 08 61 	lds	r31, 0x6108	; 0x806108 <qtlib_key_set1+0x5>
    a512:	9c 01       	movw	r18, r24
    a514:	22 0f       	add	r18, r18
    a516:	33 1f       	adc	r19, r19
    a518:	82 0f       	add	r24, r18
    a51a:	93 1f       	adc	r25, r19
    a51c:	88 0f       	add	r24, r24
    a51e:	99 1f       	adc	r25, r25
    a520:	e8 0f       	add	r30, r24
    a522:	f9 1f       	adc	r31, r25
    a524:	80 81       	ld	r24, Z
    a526:	08 95       	ret

0000a528 <get_scroller_state>:

uint8_t get_scroller_state(uint16_t sensor_node)
{
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].scroller_status);
    a528:	20 91 ec 60 	lds	r18, 0x60EC	; 0x8060ec <qtm_scroller_control1+0x4>
    a52c:	30 91 ed 60 	lds	r19, 0x60ED	; 0x8060ed <qtm_scroller_control1+0x5>
    a530:	fc 01       	movw	r30, r24
    a532:	ee 0f       	add	r30, r30
    a534:	ff 1f       	adc	r31, r31
    a536:	ee 0f       	add	r30, r30
    a538:	ff 1f       	adc	r31, r31
    a53a:	ee 0f       	add	r30, r30
    a53c:	ff 1f       	adc	r31, r31
    a53e:	8e 0f       	add	r24, r30
    a540:	9f 1f       	adc	r25, r31
    a542:	f9 01       	movw	r30, r18
    a544:	e8 0f       	add	r30, r24
    a546:	f9 1f       	adc	r31, r25
}
    a548:	80 81       	ld	r24, Z
    a54a:	08 95       	ret

0000a54c <get_scroller_position>:

uint16_t get_scroller_position(uint16_t sensor_node)
{
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].position);
    a54c:	20 91 ec 60 	lds	r18, 0x60EC	; 0x8060ec <qtm_scroller_control1+0x4>
    a550:	30 91 ed 60 	lds	r19, 0x60ED	; 0x8060ed <qtm_scroller_control1+0x5>
    a554:	fc 01       	movw	r30, r24
    a556:	ee 0f       	add	r30, r30
    a558:	ff 1f       	adc	r31, r31
    a55a:	ee 0f       	add	r30, r30
    a55c:	ff 1f       	adc	r31, r31
    a55e:	ee 0f       	add	r30, r30
    a560:	ff 1f       	adc	r31, r31
    a562:	8e 0f       	add	r24, r30
    a564:	9f 1f       	adc	r25, r31
    a566:	f9 01       	movw	r30, r18
    a568:	e8 0f       	add	r30, r24
    a56a:	f9 1f       	adc	r31, r25
}
    a56c:	85 81       	ldd	r24, Z+5	; 0x05
    a56e:	96 81       	ldd	r25, Z+6	; 0x06
    a570:	08 95       	ret

0000a572 <__vector_27>:
#if defined(__ICCAVR__)
ISR(QTML_PTC_vect_iar)
#else
ISR(QTML_PTC_vect)
#endif
{
    a572:	1f 92       	push	r1
    a574:	0f 92       	push	r0
    a576:	0f b6       	in	r0, 0x3f	; 63
    a578:	0f 92       	push	r0
    a57a:	11 24       	eor	r1, r1
    a57c:	2f 93       	push	r18
    a57e:	3f 93       	push	r19
    a580:	4f 93       	push	r20
    a582:	5f 93       	push	r21
    a584:	6f 93       	push	r22
    a586:	7f 93       	push	r23
    a588:	8f 93       	push	r24
    a58a:	9f 93       	push	r25
    a58c:	af 93       	push	r26
    a58e:	bf 93       	push	r27
    a590:	ef 93       	push	r30
    a592:	ff 93       	push	r31
	qtm_avr_da_ptc_handler_eoc();
    a594:	0e 94 b3 62 	call	0xc566	; 0xc566 <qtm_avr_da_ptc_handler_eoc>
}
    a598:	ff 91       	pop	r31
    a59a:	ef 91       	pop	r30
    a59c:	bf 91       	pop	r27
    a59e:	af 91       	pop	r26
    a5a0:	9f 91       	pop	r25
    a5a2:	8f 91       	pop	r24
    a5a4:	7f 91       	pop	r23
    a5a6:	6f 91       	pop	r22
    a5a8:	5f 91       	pop	r21
    a5aa:	4f 91       	pop	r20
    a5ac:	3f 91       	pop	r19
    a5ae:	2f 91       	pop	r18
    a5b0:	0f 90       	pop	r0
    a5b2:	0f be       	out	0x3f, r0	; 63
    a5b4:	0f 90       	pop	r0
    a5b6:	1f 90       	pop	r1
    a5b8:	18 95       	reti

0000a5ba <soft_timer_create>:
} soft_timer_obj_t;

soft_timer_obj_t *g_soft_timer_head = NULL;

void soft_timer_create(soft_timer_base_t period, soft_timer_cb cb)
{
    a5ba:	0f 93       	push	r16
    a5bc:	1f 93       	push	r17
    a5be:	cf 93       	push	r28
    a5c0:	df 93       	push	r29
    a5c2:	8c 01       	movw	r16, r24
    a5c4:	eb 01       	movw	r28, r22
    soft_timer_obj_t *obj = NULL;
    obj = (soft_timer_obj_t *)malloc(sizeof(soft_timer_obj_t));
    a5c6:	88 e0       	ldi	r24, 0x08	; 8
    a5c8:	90 e0       	ldi	r25, 0x00	; 0
    a5ca:	0e 94 86 63 	call	0xc70c	; 0xc70c <malloc>
    a5ce:	fc 01       	movw	r30, r24
    if (obj == NULL)
    a5d0:	89 2b       	or	r24, r25
    a5d2:	99 f0       	breq	.+38     	; 0xa5fa <soft_timer_create+0x40>
    {
        return;
    }
    memset(obj, 0, sizeof(soft_timer_obj_t));
    a5d4:	88 e0       	ldi	r24, 0x08	; 8
    a5d6:	df 01       	movw	r26, r30
    a5d8:	1d 92       	st	X+, r1
    a5da:	8a 95       	dec	r24
    a5dc:	e9 f7       	brne	.-6      	; 0xa5d8 <soft_timer_create+0x1e>

    obj->period = period;
    a5de:	02 83       	std	Z+2, r16	; 0x02
    a5e0:	13 83       	std	Z+3, r17	; 0x03
    obj->cb = cb;
    a5e2:	c4 83       	std	Z+4, r28	; 0x04
    a5e4:	d5 83       	std	Z+5, r29	; 0x05
    obj->next = g_soft_timer_head;
    a5e6:	80 91 55 67 	lds	r24, 0x6755	; 0x806755 <g_soft_timer_head>
    a5ea:	90 91 56 67 	lds	r25, 0x6756	; 0x806756 <g_soft_timer_head+0x1>
    a5ee:	86 83       	std	Z+6, r24	; 0x06
    a5f0:	97 83       	std	Z+7, r25	; 0x07
    g_soft_timer_head = obj;
    a5f2:	e0 93 55 67 	sts	0x6755, r30	; 0x806755 <g_soft_timer_head>
    a5f6:	f0 93 56 67 	sts	0x6756, r31	; 0x806756 <g_soft_timer_head+0x1>
}
    a5fa:	df 91       	pop	r29
    a5fc:	cf 91       	pop	r28
    a5fe:	1f 91       	pop	r17
    a600:	0f 91       	pop	r16
    a602:	08 95       	ret

0000a604 <soft_timer_run>:

void soft_timer_run(void)
{
    a604:	cf 93       	push	r28
    a606:	df 93       	push	r29
    soft_timer_obj_t *obj = g_soft_timer_head;
    a608:	c0 91 55 67 	lds	r28, 0x6755	; 0x806755 <g_soft_timer_head>
    a60c:	d0 91 56 67 	lds	r29, 0x6756	; 0x806756 <g_soft_timer_head+0x1>
    for (; obj != NULL; obj = obj->next)
    a610:	16 c0       	rjmp	.+44     	; 0xa63e <soft_timer_run+0x3a>
    {
        if ((soft_timer_base_t)(g_soft_timer_ticks - obj->cnt) >= obj->period)
    a612:	80 91 62 67 	lds	r24, 0x6762	; 0x806762 <g_soft_timer_ticks>
    a616:	90 91 63 67 	lds	r25, 0x6763	; 0x806763 <g_soft_timer_ticks+0x1>
    a61a:	28 81       	ld	r18, Y
    a61c:	39 81       	ldd	r19, Y+1	; 0x01
    a61e:	ac 01       	movw	r20, r24
    a620:	42 1b       	sub	r20, r18
    a622:	53 0b       	sbc	r21, r19
    a624:	2a 81       	ldd	r18, Y+2	; 0x02
    a626:	3b 81       	ldd	r19, Y+3	; 0x03
    a628:	42 17       	cp	r20, r18
    a62a:	53 07       	cpc	r21, r19
    a62c:	28 f0       	brcs	.+10     	; 0xa638 <soft_timer_run+0x34>
        {
            obj->cnt = g_soft_timer_ticks;
    a62e:	88 83       	st	Y, r24
    a630:	99 83       	std	Y+1, r25	; 0x01
            obj->cb();
    a632:	ec 81       	ldd	r30, Y+4	; 0x04
    a634:	fd 81       	ldd	r31, Y+5	; 0x05
    a636:	09 95       	icall
}

void soft_timer_run(void)
{
    soft_timer_obj_t *obj = g_soft_timer_head;
    for (; obj != NULL; obj = obj->next)
    a638:	0e 80       	ldd	r0, Y+6	; 0x06
    a63a:	df 81       	ldd	r29, Y+7	; 0x07
    a63c:	c0 2d       	mov	r28, r0
    a63e:	20 97       	sbiw	r28, 0x00	; 0
    a640:	41 f7       	brne	.-48     	; 0xa612 <soft_timer_run+0xe>
        {
            obj->cnt = g_soft_timer_ticks;
            obj->cb();
        }
    }
    a642:	df 91       	pop	r29
    a644:	cf 91       	pop	r28
    a646:	08 95       	ret

0000a648 <ADC_0_init>:
 *
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
    a648:	e0 e0       	ldi	r30, 0x00	; 0
    a64a:	f6 e0       	ldi	r31, 0x06	; 6
    a64c:	87 e0       	ldi	r24, 0x07	; 7
    a64e:	81 83       	std	Z+1, r24	; 0x01
    a650:	81 e0       	ldi	r24, 0x01	; 1
    a652:	84 87       	std	Z+12, r24	; 0x0c
    a654:	9f e7       	ldi	r25, 0x7F	; 127
    a656:	95 83       	std	Z+5, r25	; 0x05
    a658:	80 83       	st	Z, r24
    a65a:	80 e0       	ldi	r24, 0x00	; 0
    a65c:	08 95       	ret

0000a65e <__vector_24>:
}

ISR(ADC0_RESRDY_vect)
{
    a65e:	1f 92       	push	r1
    a660:	0f 92       	push	r0
    a662:	0f b6       	in	r0, 0x3f	; 63
    a664:	0f 92       	push	r0
    a666:	11 24       	eor	r1, r1
    a668:	2f 93       	push	r18
    a66a:	3f 93       	push	r19
    a66c:	4f 93       	push	r20
    a66e:	5f 93       	push	r21
    a670:	6f 93       	push	r22
    a672:	7f 93       	push	r23
    a674:	8f 93       	push	r24
    a676:	9f 93       	push	r25
    a678:	af 93       	push	r26
    a67a:	bf 93       	push	r27
    a67c:	ef 93       	push	r30
    a67e:	ff 93       	push	r31
	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
    a680:	e0 e0       	ldi	r30, 0x00	; 0
    a682:	f6 e0       	ldi	r31, 0x06	; 6
    a684:	85 85       	ldd	r24, Z+13	; 0x0d
    a686:	81 60       	ori	r24, 0x01	; 1
    a688:	85 87       	std	Z+13, r24	; 0x0d

	if (ADC_0_cb != NULL) {
    a68a:	e0 91 57 67 	lds	r30, 0x6757	; 0x806757 <ADC_0_cb>
    a68e:	f0 91 58 67 	lds	r31, 0x6758	; 0x806758 <ADC_0_cb+0x1>
    a692:	30 97       	sbiw	r30, 0x00	; 0
    a694:	09 f0       	breq	.+2      	; 0xa698 <__vector_24+0x3a>
		ADC_0_cb();
    a696:	09 95       	icall
	}
}
    a698:	ff 91       	pop	r31
    a69a:	ef 91       	pop	r30
    a69c:	bf 91       	pop	r27
    a69e:	af 91       	pop	r26
    a6a0:	9f 91       	pop	r25
    a6a2:	8f 91       	pop	r24
    a6a4:	7f 91       	pop	r23
    a6a6:	6f 91       	pop	r22
    a6a8:	5f 91       	pop	r21
    a6aa:	4f 91       	pop	r20
    a6ac:	3f 91       	pop	r19
    a6ae:	2f 91       	pop	r18
    a6b0:	0f 90       	pop	r0
    a6b2:	0f be       	out	0x3f, r0	; 63
    a6b4:	0f 90       	pop	r0
    a6b6:	1f 90       	pop	r1
    a6b8:	18 95       	reti

0000a6ba <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    a6ba:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    a6be:	80 e0       	ldi	r24, 0x00	; 0
    a6c0:	08 95       	ret

0000a6c2 <CLKCTRL_init>:
    a6c2:	44 e2       	ldi	r20, 0x24	; 36
    a6c4:	68 ed       	ldi	r22, 0xD8	; 216
    a6c6:	88 e6       	ldi	r24, 0x68	; 104
    a6c8:	90 e0       	ldi	r25, 0x00	; 0
    a6ca:	0e 94 8b 54 	call	0xa916	; 0xa916 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    a6ce:	80 e0       	ldi	r24, 0x00	; 0
    a6d0:	08 95       	ret

0000a6d2 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    a6d2:	78 94       	sei

	return 0;
}
    a6d4:	80 e0       	ldi	r24, 0x00	; 0
    a6d6:	08 95       	ret

0000a6d8 <DAC_0_init>:
 *
 * \return Nothing
 */
void DAC_0_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
    a6d8:	e0 ea       	ldi	r30, 0xA0	; 160
    a6da:	f6 e0       	ldi	r31, 0x06	; 6
    a6dc:	12 82       	std	Z+2, r1	; 0x02
    a6de:	13 82       	std	Z+3, r1	; 0x03
    a6e0:	81 e4       	ldi	r24, 0x41	; 65
    a6e2:	80 83       	st	Z, r24
    a6e4:	80 e0       	ldi	r24, 0x00	; 0
    a6e6:	08 95       	ret

0000a6e8 <DAC_0_set_output>:
 *
 * \return Nothing
 */
void DAC_0_set_output(dac_resolution_t value)
{
	value     = value << DAC_DATA_gp;
    a6e8:	00 24       	eor	r0, r0
    a6ea:	96 95       	lsr	r25
    a6ec:	87 95       	ror	r24
    a6ee:	07 94       	ror	r0
    a6f0:	96 95       	lsr	r25
    a6f2:	87 95       	ror	r24
    a6f4:	07 94       	ror	r0
    a6f6:	98 2f       	mov	r25, r24
    a6f8:	80 2d       	mov	r24, r0
	value     = value & 0xFFC0;
	DAC0.DATA = value;
    a6fa:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7f06a2>
    a6fe:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <__TEXT_REGION_LENGTH__+0x7f06a3>
    a702:	08 95       	ret

0000a704 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    a704:	80 e0       	ldi	r24, 0x00	; 0
    a706:	08 c0       	rjmp	.+16     	; 0xa718 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    a708:	e8 2f       	mov	r30, r24
    a70a:	f0 e0       	ldi	r31, 0x00	; 0
    a70c:	e0 5f       	subi	r30, 0xF0	; 240
    a70e:	fb 4f       	sbci	r31, 0xFB	; 251
    a710:	90 81       	ld	r25, Z
    a712:	98 60       	ori	r25, 0x08	; 8
    a714:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    a716:	8f 5f       	subi	r24, 0xFF	; 255
    a718:	88 30       	cpi	r24, 0x08	; 8
    a71a:	b0 f3       	brcs	.-20     	; 0xa708 <mcu_init+0x4>
    a71c:	80 e0       	ldi	r24, 0x00	; 0
    a71e:	08 c0       	rjmp	.+16     	; 0xa730 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    a720:	e8 2f       	mov	r30, r24
    a722:	f0 e0       	ldi	r31, 0x00	; 0
    a724:	e0 5d       	subi	r30, 0xD0	; 208
    a726:	fb 4f       	sbci	r31, 0xFB	; 251
    a728:	90 81       	ld	r25, Z
    a72a:	98 60       	ori	r25, 0x08	; 8
    a72c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    a72e:	8f 5f       	subi	r24, 0xFF	; 255
    a730:	88 30       	cpi	r24, 0x08	; 8
    a732:	b0 f3       	brcs	.-20     	; 0xa720 <mcu_init+0x1c>
    a734:	80 e0       	ldi	r24, 0x00	; 0
    a736:	08 c0       	rjmp	.+16     	; 0xa748 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    a738:	e8 2f       	mov	r30, r24
    a73a:	f0 e0       	ldi	r31, 0x00	; 0
    a73c:	e0 5b       	subi	r30, 0xB0	; 176
    a73e:	fb 4f       	sbci	r31, 0xFB	; 251
    a740:	90 81       	ld	r25, Z
    a742:	98 60       	ori	r25, 0x08	; 8
    a744:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    a746:	8f 5f       	subi	r24, 0xFF	; 255
    a748:	88 30       	cpi	r24, 0x08	; 8
    a74a:	b0 f3       	brcs	.-20     	; 0xa738 <mcu_init+0x34>
    a74c:	80 e0       	ldi	r24, 0x00	; 0
    a74e:	08 c0       	rjmp	.+16     	; 0xa760 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    a750:	e8 2f       	mov	r30, r24
    a752:	f0 e0       	ldi	r31, 0x00	; 0
    a754:	e0 59       	subi	r30, 0x90	; 144
    a756:	fb 4f       	sbci	r31, 0xFB	; 251
    a758:	90 81       	ld	r25, Z
    a75a:	98 60       	ori	r25, 0x08	; 8
    a75c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    a75e:	8f 5f       	subi	r24, 0xFF	; 255
    a760:	88 30       	cpi	r24, 0x08	; 8
    a762:	b0 f3       	brcs	.-20     	; 0xa750 <mcu_init+0x4c>
    a764:	80 e0       	ldi	r24, 0x00	; 0
    a766:	08 c0       	rjmp	.+16     	; 0xa778 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    a768:	e8 2f       	mov	r30, r24
    a76a:	f0 e0       	ldi	r31, 0x00	; 0
    a76c:	e0 57       	subi	r30, 0x70	; 112
    a76e:	fb 4f       	sbci	r31, 0xFB	; 251
    a770:	90 81       	ld	r25, Z
    a772:	98 60       	ori	r25, 0x08	; 8
    a774:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    a776:	8f 5f       	subi	r24, 0xFF	; 255
    a778:	88 30       	cpi	r24, 0x08	; 8
    a77a:	b0 f3       	brcs	.-20     	; 0xa768 <mcu_init+0x64>
    a77c:	80 e0       	ldi	r24, 0x00	; 0
    a77e:	08 c0       	rjmp	.+16     	; 0xa790 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    a780:	e8 2f       	mov	r30, r24
    a782:	f0 e0       	ldi	r31, 0x00	; 0
    a784:	e0 55       	subi	r30, 0x50	; 80
    a786:	fb 4f       	sbci	r31, 0xFB	; 251
    a788:	90 81       	ld	r25, Z
    a78a:	98 60       	ori	r25, 0x08	; 8
    a78c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    a78e:	8f 5f       	subi	r24, 0xFF	; 255
    a790:	88 30       	cpi	r24, 0x08	; 8
    a792:	b0 f3       	brcs	.-20     	; 0xa780 <mcu_init+0x7c>
    a794:	80 e0       	ldi	r24, 0x00	; 0
    a796:	08 c0       	rjmp	.+16     	; 0xa7a8 <mcu_init+0xa4>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    a798:	e8 2f       	mov	r30, r24
    a79a:	f0 e0       	ldi	r31, 0x00	; 0
    a79c:	e0 53       	subi	r30, 0x30	; 48
    a79e:	fb 4f       	sbci	r31, 0xFB	; 251
    a7a0:	90 81       	ld	r25, Z
    a7a2:	98 60       	ori	r25, 0x08	; 8
    a7a4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    a7a6:	8f 5f       	subi	r24, 0xFF	; 255
    a7a8:	88 30       	cpi	r24, 0x08	; 8
    a7aa:	b0 f3       	brcs	.-20     	; 0xa798 <mcu_init+0x94>
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    a7ac:	08 95       	ret

0000a7ae <USART_1_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    a7ae:	84 b3       	in	r24, 0x14	; 20
    a7b0:	8d 7f       	andi	r24, 0xFD	; 253
    a7b2:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    a7b4:	e1 eb       	ldi	r30, 0xB1	; 177
    a7b6:	f4 e0       	ldi	r31, 0x04	; 4
    a7b8:	80 81       	ld	r24, Z
    a7ba:	87 7f       	andi	r24, 0xF7	; 247
    a7bc:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    a7be:	85 b3       	in	r24, 0x15	; 21
    a7c0:	8e 7f       	andi	r24, 0xFE	; 254
    a7c2:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    a7c4:	84 b3       	in	r24, 0x14	; 20
    a7c6:	81 60       	ori	r24, 0x01	; 1
    a7c8:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	USART_1_init();
    a7ca:	0e 94 d6 54 	call	0xa9ac	; 0xa9ac <USART_1_init>
    a7ce:	08 95       	ret

0000a7d0 <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
    a7d0:	80 b3       	in	r24, 0x10	; 16
    a7d2:	8d 7f       	andi	r24, 0xFD	; 253
    a7d4:	80 bb       	out	0x10, r24	; 16
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    a7d6:	e1 e9       	ldi	r30, 0x91	; 145
    a7d8:	f4 e0       	ldi	r31, 0x04	; 4
    a7da:	80 81       	ld	r24, Z
    a7dc:	87 7f       	andi	r24, 0xF7	; 247
    a7de:	80 83       	st	Z, r24
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    a7e0:	81 b3       	in	r24, 0x11	; 17
    a7e2:	8e 7f       	andi	r24, 0xFE	; 254
    a7e4:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    a7e6:	80 b3       	in	r24, 0x10	; 16
    a7e8:	81 60       	ori	r24, 0x01	; 1
    a7ea:	80 bb       	out	0x10, r24	; 16
	    // <true"> High
	    false);

	PE0_set_dir(PORT_DIR_OUT);

	USART_0_init();
    a7ec:	0e 94 ca 54 	call	0xa994	; 0xa994 <USART_0_init>
    a7f0:	08 95       	ret

0000a7f2 <DAC_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    a7f2:	e6 e7       	ldi	r30, 0x76	; 118
    a7f4:	f4 e0       	ldi	r31, 0x04	; 4
    a7f6:	80 81       	ld	r24, Z
    a7f8:	88 7f       	andi	r24, 0xF8	; 248
    a7fa:	84 60       	ori	r24, 0x04	; 4
    a7fc:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    a7fe:	80 81       	ld	r24, Z
    a800:	87 7f       	andi	r24, 0xF7	; 247
    a802:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	DAC_0_init();
    a804:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <DAC_0_init>
    a808:	08 95       	ret

0000a80a <ADC_0_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    a80a:	e6 e9       	ldi	r30, 0x96	; 150
    a80c:	f4 e0       	ldi	r31, 0x04	; 4
    a80e:	80 81       	ld	r24, Z
    a810:	88 7f       	andi	r24, 0xF8	; 248
    a812:	84 60       	ori	r24, 0x04	; 4
    a814:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    a816:	80 81       	ld	r24, Z
    a818:	87 7f       	andi	r24, 0xF7	; 247
    a81a:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    a81c:	e7 e9       	ldi	r30, 0x97	; 151
    a81e:	f4 e0       	ldi	r31, 0x04	; 4
    a820:	80 81       	ld	r24, Z
    a822:	88 7f       	andi	r24, 0xF8	; 248
    a824:	84 60       	ori	r24, 0x04	; 4
    a826:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    a828:	80 81       	ld	r24, Z
    a82a:	87 7f       	andi	r24, 0xF7	; 247
    a82c:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE7_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
    a82e:	0e 94 24 53 	call	0xa648	; 0xa648 <ADC_0_init>
    a832:	08 95       	ret

0000a834 <TIMER_1_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    a834:	89 b1       	in	r24, 0x09	; 9
    a836:	87 7f       	andi	r24, 0xF7	; 247
    a838:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    a83a:	88 b1       	in	r24, 0x08	; 8
    a83c:	88 60       	ori	r24, 0x08	; 8
    a83e:	88 b9       	out	0x08, r24	; 8

	PC3_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= PORTMUX_TCA01_bm;
    a840:	e0 ee       	ldi	r30, 0xE0	; 224
    a842:	f5 e0       	ldi	r31, 0x05	; 5
    a844:	86 81       	ldd	r24, Z+6	; 0x06
    a846:	82 60       	ori	r24, 0x02	; 2
    a848:	86 83       	std	Z+6, r24	; 0x06

	TIMER_1_init();
    a84a:	0e 94 9f 54 	call	0xa93e	; 0xa93e <TIMER_1_init>
    a84e:	08 95       	ret

0000a850 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
    a850:	0e 94 ae 54 	call	0xa95c	; 0xa95c <TIMER_0_init>
    a854:	08 95       	ret

0000a856 <TIMER_2_initialization>:
}

void TIMER_2_initialization(void)
{

	TIMER_2_init();
    a856:	0e 94 bc 54 	call	0xa978	; 0xa978 <TIMER_2_init>
    a85a:	08 95       	ret

0000a85c <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    a85c:	0e 94 82 53 	call	0xa704	; 0xa704 <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    a860:	81 b1       	in	r24, 0x01	; 1
    a862:	81 60       	ori	r24, 0x01	; 1
    a864:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    a866:	80 b1       	in	r24, 0x00	; 0
    a868:	81 60       	ori	r24, 0x01	; 1
    a86a:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    a86c:	81 b1       	in	r24, 0x01	; 1
    a86e:	8b 7f       	andi	r24, 0xFB	; 251
    a870:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    a872:	80 b1       	in	r24, 0x00	; 0
    a874:	84 60       	ori	r24, 0x04	; 4
    a876:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    a878:	81 b1       	in	r24, 0x01	; 1
    a87a:	87 7f       	andi	r24, 0xF7	; 247
    a87c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    a87e:	80 b1       	in	r24, 0x00	; 0
    a880:	88 60       	ori	r24, 0x08	; 8
    a882:	80 b9       	out	0x00, r24	; 0
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    a884:	89 b1       	in	r24, 0x09	; 9
    a886:	8f 7b       	andi	r24, 0xBF	; 191
    a888:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    a88a:	88 b1       	in	r24, 0x08	; 8
    a88c:	80 64       	ori	r24, 0x40	; 64
    a88e:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    a890:	89 b1       	in	r24, 0x09	; 9
    a892:	8f 77       	andi	r24, 0x7F	; 127
    a894:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    a896:	88 b1       	in	r24, 0x08	; 8
    a898:	80 68       	ori	r24, 0x80	; 128
    a89a:	88 b9       	out	0x08, r24	; 8
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    a89c:	81 b3       	in	r24, 0x11	; 17
    a89e:	8f 7d       	andi	r24, 0xDF	; 223
    a8a0:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    a8a2:	80 b3       	in	r24, 0x10	; 16
    a8a4:	80 62       	ori	r24, 0x20	; 32
    a8a6:	80 bb       	out	0x10, r24	; 16
	    // <true"> High
	    false);

	MOTOR_GATE_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
    a8a8:	0e 94 61 53 	call	0xa6c2	; 0xa6c2 <CLKCTRL_init>

	USART_1_initialization();
    a8ac:	0e 94 d7 53 	call	0xa7ae	; 0xa7ae <USART_1_initialization>

	USART_0_initialization();
    a8b0:	0e 94 e8 53 	call	0xa7d0	; 0xa7d0 <USART_0_initialization>

	SLPCTRL_init();
    a8b4:	0e 94 9d 54 	call	0xa93a	; 0xa93a <SLPCTRL_init>

	CPUINT_init();
    a8b8:	0e 94 69 53 	call	0xa6d2	; 0xa6d2 <CPUINT_init>

	DAC_0_initialization();
    a8bc:	0e 94 f9 53 	call	0xa7f2	; 0xa7f2 <DAC_0_initialization>

	ADC_0_initialization();
    a8c0:	0e 94 05 54 	call	0xa80a	; 0xa80a <ADC_0_initialization>
	
	TIMER_2_initialization();
    a8c4:	0e 94 2b 54 	call	0xa856	; 0xa856 <TIMER_2_initialization>

	TIMER_1_initialization();
    a8c8:	0e 94 1a 54 	call	0xa834	; 0xa834 <TIMER_1_initialization>

	Timer_init();
    a8cc:	0e 94 90 54 	call	0xa920	; 0xa920 <Timer_init>

	TIMER_0_initialization();
    a8d0:	0e 94 28 54 	call	0xa850	; 0xa850 <TIMER_0_initialization>

	VREF_0_init();
    a8d4:	0e 94 00 55 	call	0xaa00	; 0xaa00 <VREF_0_init>

	BOD_init();
    a8d8:	0e 94 5d 53 	call	0xa6ba	; 0xa6ba <BOD_init>
    a8dc:	08 95       	ret

0000a8de <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
    a8de:	1f 93       	push	r17
    a8e0:	cf 93       	push	r28
    a8e2:	df 93       	push	r29
    a8e4:	ec 01       	movw	r28, r24
    a8e6:	16 2f       	mov	r17, r22
	/* Wait for completion of previous operation */
	while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    a8e8:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f1002>
    a8ec:	83 70       	andi	r24, 0x03	; 3
    a8ee:	e1 f7       	brne	.-8      	; 0xa8e8 <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
    a8f0:	43 e1       	ldi	r20, 0x13	; 19
    a8f2:	6d e9       	ldi	r22, 0x9D	; 157
    a8f4:	80 e0       	ldi	r24, 0x00	; 0
    a8f6:	90 e1       	ldi	r25, 0x10	; 16
    a8f8:	0e 94 8b 54 	call	0xa916	; 0xa916 <protected_write_io>

	/* Program the EEPROM with desired value(s) */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);

	/* Write byte to EEPROM */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
    a8fc:	dc 5e       	subi	r29, 0xEC	; 236
    a8fe:	18 83       	st	Y, r17
    a900:	40 e0       	ldi	r20, 0x00	; 0
    a902:	6d e9       	ldi	r22, 0x9D	; 157
    a904:	80 e0       	ldi	r24, 0x00	; 0
    a906:	90 e1       	ldi	r25, 0x10	; 16
    a908:	0e 94 8b 54 	call	0xa916	; 0xa916 <protected_write_io>

	/* Clear the current command */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);

	return NVM_OK;
}
    a90c:	80 e0       	ldi	r24, 0x00	; 0
    a90e:	df 91       	pop	r29
    a910:	cf 91       	pop	r28
    a912:	1f 91       	pop	r17
    a914:	08 95       	ret

0000a916 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    a916:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    a918:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    a91a:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    a91c:	40 83       	st	Z, r20
	ret                             // Return to caller
    a91e:	08 95       	ret

0000a920 <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    a920:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    a924:	81 11       	cpse	r24, r1
    a926:	fc cf       	rjmp	.-8      	; 0xa920 <Timer_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    a928:	e0 e4       	ldi	r30, 0x40	; 64
    a92a:	f1 e0       	ldi	r31, 0x01	; 1
    a92c:	81 e8       	ldi	r24, 0x81	; 129
    a92e:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    a930:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
    a932:	82 e0       	ldi	r24, 0x02	; 2
    a934:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
    a936:	80 e0       	ldi	r24, 0x00	; 0
    a938:	08 95       	ret

0000a93a <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    a93a:	80 e0       	ldi	r24, 0x00	; 0
    a93c:	08 95       	ret

0000a93e <TIMER_1_init>:
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{

	TCA0.SPLIT.CTRLD = 1 << TCA_SPLIT_SPLITM_bp /* Split Mode : enabled */;
    a93e:	e0 e0       	ldi	r30, 0x00	; 0
    a940:	fa e0       	ldi	r31, 0x0A	; 10
    a942:	81 e0       	ldi	r24, 0x01	; 1
    a944:	83 83       	std	Z+3, r24	; 0x03

	TCA0.SPLIT.CTRLB = 1 << TCA_SPLIT_HCMP0EN_bp    /* High Compare 0 Enable: enabled */
    a946:	80 e1       	ldi	r24, 0x10	; 16
    a948:	81 83       	std	Z+1, r24	; 0x01
	                   | 0 << TCA_SPLIT_HCMP2EN_bp  /* High Compare 2 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP0EN_bp  /* Low Compare 0 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP1EN_bp  /* Low Compare 1 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP2EN_bp; /* Low Compare 2 Enable: disabled */

	TCA0.SPLIT.CTRLC = 1 << TCA_SPLIT_HCMP0OV_bp    /* High Compare 0 Output Value: enabled */
    a94a:	82 83       	std	Z+2, r24	; 0x02
	                   | 0 << TCA_SPLIT_HCMP2OV_bp  /* High Compare 2 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP0OV_bp  /* Low Compare 0 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP1OV_bp  /* Low Compare 1 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP2OV_bp; /* Low Compare 2 Output Value: disabled */

	TCA0.SPLIT.HCMP0 = 0x4f; /* Compare value of channel 0: 0x4f */
    a94c:	8f e4       	ldi	r24, 0x4F	; 79
    a94e:	81 a7       	std	Z+41, r24	; 0x29

	// TCA0.SPLIT.HCMP2 = 0x0; /* Compare value of channel 2: 0x0 */

	// TCA0.SPLIT.HCNT = 0x0; /*  High-byte Timer Counter Register: 0x0 */

	TCA0.SPLIT.HPER = 0x4a; /*  High-byte Period Register: 0x4a */
    a950:	8a e4       	ldi	r24, 0x4A	; 74
    a952:	87 a3       	std	Z+39, r24	; 0x27

	// TCA0.SPLIT.LPER = 0xff; /*  Low-byte Timer Period Register: 0xff */

	// TCA0.SPLIT.DBGCTRL = 0 << TCA_SPLIT_DBGRUN_bp; /* Debug Run: disabled */

	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV16_gc /* System Clock / 16 */
    a954:	89 e0       	ldi	r24, 0x09	; 9
    a956:	80 83       	st	Z, r24
	                   | 1 << TCA_SPLIT_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
    a958:	80 e0       	ldi	r24, 0x00	; 0
    a95a:	08 95       	ret

0000a95c <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB0.CCMP = 23999; /* Compare or Capture: 0x0 */
    a95c:	e0 e0       	ldi	r30, 0x00	; 0
    a95e:	fb e0       	ldi	r31, 0x0B	; 11
    a960:	8f eb       	ldi	r24, 0xBF	; 191
    a962:	9d e5       	ldi	r25, 0x5D	; 93
    a964:	84 87       	std	Z+12, r24	; 0x0c
    a966:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0; /* Count: 0x5dbf */
    a968:	12 86       	std	Z+10, r1	; 0x0a
    a96a:	13 86       	std	Z+11, r1	; 0x0b

	TCB0.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    a96c:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    a96e:	81 e0       	ldi	r24, 0x01	; 1
    a970:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    a972:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    a974:	80 e0       	ldi	r24, 0x00	; 0
    a976:	08 95       	ret

0000a978 <TIMER_2_init>:
 * \return Initialization status.
 */
int8_t TIMER_2_init()
{

	TCB1.CCMP = 12000; /* Compare or Capture: 0x0 */
    a978:	e0 e1       	ldi	r30, 0x10	; 16
    a97a:	fb e0       	ldi	r31, 0x0B	; 11
    a97c:	80 ee       	ldi	r24, 0xE0	; 224
    a97e:	9e e2       	ldi	r25, 0x2E	; 46
    a980:	84 87       	std	Z+12, r24	; 0x0c
    a982:	95 87       	std	Z+13, r25	; 0x0d

	TCB1.CNT = 0; /* Count: 0x5dbf */
    a984:	12 86       	std	Z+10, r1	; 0x0a
    a986:	13 86       	std	Z+11, r1	; 0x0b

	TCB1.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    a988:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    a98a:	81 e0       	ldi	r24, 0x01	; 1
    a98c:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    a98e:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    a990:	80 e0       	ldi	r24, 0x00	; 0
    a992:	08 95       	ret

0000a994 <USART_0_init>:
 *
 * \return Initialization status.
 */
int8_t USART_0_init()
{
	USART4.BAUD = (uint16_t)(((float)(F_CPU * 64 / (16 * (float)19200)) + 0.5));
    a994:	e0 e8       	ldi	r30, 0x80	; 128
    a996:	f8 e0       	ldi	r31, 0x08	; 8
    a998:	88 e8       	ldi	r24, 0x88	; 136
    a99a:	93 e1       	ldi	r25, 0x13	; 19
    a99c:	80 87       	std	Z+8, r24	; 0x08
    a99e:	91 87       	std	Z+9, r25	; 0x09

	USART4.CTRLA = 1 << USART_ABEIE_bp		/* Auto-baud Error Interrupt Enable: enabled */
    a9a0:	84 e8       	ldi	r24, 0x84	; 132
    a9a2:	85 83       	std	Z+5, r24	; 0x05
				   | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
				   | 1 << USART_RXCIE_bp	/* Receive Complete Interrupt Enable: enabled */
				   | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */ 
				   | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART4.CTRLB = 0 << USART_MPCM_bp		 /* Multi-processor Communication Mode: disabled */
    a9a4:	86 ec       	ldi	r24, 0xC6	; 198
    a9a6:	86 83       	std	Z+6, r24	; 0x06
	// USART4.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART4.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
    a9a8:	80 e0       	ldi	r24, 0x00	; 0
    a9aa:	08 95       	ret

0000a9ac <USART_1_init>:
uint8_t USART_1_read()
{
	while (!(USART2.STATUS & USART_RXCIF_bm))
		;
	return USART2.RXDATAL;
}
    a9ac:	e0 e4       	ldi	r30, 0x40	; 64
    a9ae:	f8 e0       	ldi	r31, 0x08	; 8
    a9b0:	81 e4       	ldi	r24, 0x41	; 65
    a9b2:	93 e0       	ldi	r25, 0x03	; 3
    a9b4:	80 87       	std	Z+8, r24	; 0x08
    a9b6:	91 87       	std	Z+9, r25	; 0x09
    a9b8:	80 ec       	ldi	r24, 0xC0	; 192
    a9ba:	86 83       	std	Z+6, r24	; 0x06
    a9bc:	8c ee       	ldi	r24, 0xEC	; 236
    a9be:	92 e6       	ldi	r25, 0x62	; 98
    a9c0:	80 93 05 69 	sts	0x6905, r24	; 0x806905 <__iob+0x2>
    a9c4:	90 93 06 69 	sts	0x6906, r25	; 0x806906 <__iob+0x3>
    a9c8:	80 e0       	ldi	r24, 0x00	; 0
    a9ca:	08 95       	ret

0000a9cc <USART_1_write>:
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
	while (!(USART2.STATUS & USART_DREIF_bm))
    a9cc:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f0844>
    a9d0:	95 ff       	sbrs	r25, 5
    a9d2:	fc cf       	rjmp	.-8      	; 0xa9cc <USART_1_write>
		;
	USART2.TXDATAL = data;
    a9d4:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f0842>
    a9d8:	08 95       	ret

0000a9da <USART_1_printCHAR>:

#if defined(__GNUC__)

int USART_1_printCHAR(char character, FILE *stream)
{
	USART_1_write(character);
    a9da:	0e 94 e6 54 	call	0xa9cc	; 0xa9cc <USART_1_write>
	return 0;
}
    a9de:	80 e0       	ldi	r24, 0x00	; 0
    a9e0:	90 e0       	ldi	r25, 0x00	; 0
    a9e2:	08 95       	ret

0000a9e4 <USART4_Read>:
	USART2.TXDATAL = data;
}

size_t USART4_Read(uint8_t * rDATA)
{
	*rDATA = USART4.RXDATAL;
    a9e4:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7f0880>
    a9e8:	fc 01       	movw	r30, r24
    a9ea:	20 83       	st	Z, r18
	return 0;
}
    a9ec:	80 e0       	ldi	r24, 0x00	; 0
    a9ee:	90 e0       	ldi	r25, 0x00	; 0
    a9f0:	08 95       	ret

0000a9f2 <USART4_Send>:

size_t USART4_Send(uint8_t * tDATA)
{
	USART4.TXDATAL = *tDATA;
    a9f2:	fc 01       	movw	r30, r24
    a9f4:	80 81       	ld	r24, Z
    a9f6:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <__TEXT_REGION_LENGTH__+0x7f0882>
	return 0;
    a9fa:	80 e0       	ldi	r24, 0x00	; 0
    a9fc:	90 e0       	ldi	r25, 0x00	; 0
    a9fe:	08 95       	ret

0000aa00 <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF.ADC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for ADC0: enabled */
    aa00:	e0 ea       	ldi	r30, 0xA0	; 160
    aa02:	f0 e0       	ldi	r31, 0x00	; 0
    aa04:	85 e8       	ldi	r24, 0x85	; 133
    aa06:	80 83       	st	Z, r24
	               | VREF_REFSEL_VDD_gc; /* VDD as reference */

	VREF.DAC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: enabled */
    aa08:	82 83       	std	Z+2, r24	; 0x02

	// VREF.ACREF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	return 0;
}
    aa0a:	80 e0       	ldi	r24, 0x00	; 0
    aa0c:	08 95       	ret

0000aa0e <check_for_aks_block>:
    aa0e:	cf 92       	push	r12
    aa10:	df 92       	push	r13
    aa12:	ff 92       	push	r15
    aa14:	0f 93       	push	r16
    aa16:	1f 93       	push	r17
    aa18:	cf 93       	push	r28
    aa1a:	df 93       	push	r29
    aa1c:	ec 01       	movw	r28, r24
    aa1e:	ae 81       	ldd	r26, Y+6	; 0x06
    aa20:	bf 81       	ldd	r27, Y+7	; 0x07
    aa22:	eb 01       	movw	r28, r22
    aa24:	cc 0f       	add	r28, r28
    aa26:	dd 1f       	adc	r29, r29
    aa28:	c6 0f       	add	r28, r22
    aa2a:	d7 1f       	adc	r29, r23
    aa2c:	ca 0f       	add	r28, r26
    aa2e:	db 1f       	adc	r29, r27
    aa30:	fa 80       	ldd	r15, Y+2	; 0x02
    aa32:	fc 01       	movw	r30, r24
    aa34:	44 81       	ldd	r20, Z+4	; 0x04
    aa36:	55 81       	ldd	r21, Z+5	; 0x05
    aa38:	e6 e0       	ldi	r30, 0x06	; 6
    aa3a:	e6 9f       	mul	r30, r22
    aa3c:	90 01       	movw	r18, r0
    aa3e:	e7 9f       	mul	r30, r23
    aa40:	30 0d       	add	r19, r0
    aa42:	11 24       	eor	r1, r1
    aa44:	8a 01       	movw	r16, r20
    aa46:	02 0f       	add	r16, r18
    aa48:	13 1f       	adc	r17, r19
    aa4a:	f8 01       	movw	r30, r16
    aa4c:	22 81       	ldd	r18, Z+2	; 0x02
    aa4e:	33 81       	ldd	r19, Z+3	; 0x03
    aa50:	f9 01       	movw	r30, r18
    aa52:	21 81       	ldd	r18, Z+1	; 0x01
    aa54:	32 81       	ldd	r19, Z+2	; 0x02
    aa56:	f8 01       	movw	r30, r16
    aa58:	04 81       	ldd	r16, Z+4	; 0x04
    aa5a:	15 81       	ldd	r17, Z+5	; 0x05
    aa5c:	20 1b       	sub	r18, r16
    aa5e:	31 0b       	sbc	r19, r17
    aa60:	e8 81       	ld	r30, Y
    aa62:	2e 1b       	sub	r18, r30
    aa64:	31 09       	sbc	r19, r1
    aa66:	ec 01       	movw	r28, r24
    aa68:	ea 81       	ldd	r30, Y+2	; 0x02
    aa6a:	fb 81       	ldd	r31, Y+3	; 0x03
    aa6c:	00 81       	ld	r16, Z
    aa6e:	11 81       	ldd	r17, Z+1	; 0x01
    aa70:	fa 01       	movw	r30, r20
    aa72:	40 e0       	ldi	r20, 0x00	; 0
    aa74:	50 e0       	ldi	r21, 0x00	; 0
    aa76:	40 17       	cp	r20, r16
    aa78:	51 07       	cpc	r21, r17
    aa7a:	39 f1       	breq	.+78     	; 0xaaca <check_for_aks_block+0xbc>
    aa7c:	46 17       	cp	r20, r22
    aa7e:	57 07       	cpc	r21, r23
    aa80:	f9 f0       	breq	.+62     	; 0xaac0 <check_for_aks_block+0xb2>
    aa82:	12 96       	adiw	r26, 0x02	; 2
    aa84:	8c 91       	ld	r24, X
    aa86:	12 97       	sbiw	r26, 0x02	; 2
    aa88:	f8 12       	cpse	r15, r24
    aa8a:	1a c0       	rjmp	.+52     	; 0xaac0 <check_for_aks_block+0xb2>
    aa8c:	80 81       	ld	r24, Z
    aa8e:	85 58       	subi	r24, 0x85	; 133
    aa90:	82 30       	cpi	r24, 0x02	; 2
    aa92:	e8 f0       	brcs	.+58     	; 0xaace <check_for_aks_block+0xc0>
    aa94:	c4 80       	ldd	r12, Z+4	; 0x04
    aa96:	d5 80       	ldd	r13, Z+5	; 0x05
    aa98:	82 81       	ldd	r24, Z+2	; 0x02
    aa9a:	93 81       	ldd	r25, Z+3	; 0x03
    aa9c:	ec 01       	movw	r28, r24
    aa9e:	89 81       	ldd	r24, Y+1	; 0x01
    aaa0:	9a 81       	ldd	r25, Y+2	; 0x02
    aaa2:	c8 16       	cp	r12, r24
    aaa4:	d9 06       	cpc	r13, r25
    aaa6:	60 f4       	brcc	.+24     	; 0xaac0 <check_for_aks_block+0xb2>
    aaa8:	8c 19       	sub	r24, r12
    aaaa:	9d 09       	sbc	r25, r13
    aaac:	cc 91       	ld	r28, X
    aaae:	d0 e0       	ldi	r29, 0x00	; 0
    aab0:	c8 17       	cp	r28, r24
    aab2:	d9 07       	cpc	r29, r25
    aab4:	28 f4       	brcc	.+10     	; 0xaac0 <check_for_aks_block+0xb2>
    aab6:	8c 1b       	sub	r24, r28
    aab8:	9d 0b       	sbc	r25, r29
    aaba:	28 17       	cp	r18, r24
    aabc:	39 07       	cpc	r19, r25
    aabe:	38 f0       	brcs	.+14     	; 0xaace <check_for_aks_block+0xc0>
    aac0:	4f 5f       	subi	r20, 0xFF	; 255
    aac2:	5f 4f       	sbci	r21, 0xFF	; 255
    aac4:	13 96       	adiw	r26, 0x03	; 3
    aac6:	36 96       	adiw	r30, 0x06	; 6
    aac8:	d6 cf       	rjmp	.-84     	; 0xaa76 <check_for_aks_block+0x68>
    aaca:	80 e0       	ldi	r24, 0x00	; 0
    aacc:	01 c0       	rjmp	.+2      	; 0xaad0 <check_for_aks_block+0xc2>
    aace:	81 e0       	ldi	r24, 0x01	; 1
    aad0:	df 91       	pop	r29
    aad2:	cf 91       	pop	r28
    aad4:	1f 91       	pop	r17
    aad6:	0f 91       	pop	r16
    aad8:	ff 90       	pop	r15
    aada:	df 90       	pop	r13
    aadc:	cf 90       	pop	r12
    aade:	08 95       	ret

0000aae0 <qtm_update_qtlib_timer>:
    aae0:	20 91 59 67 	lds	r18, 0x6759	; 0x806759 <qtm_local_ms_timecount>
    aae4:	30 91 5a 67 	lds	r19, 0x675A	; 0x80675a <qtm_local_ms_timecount+0x1>
    aae8:	82 0f       	add	r24, r18
    aaea:	93 1f       	adc	r25, r19
    aaec:	80 93 59 67 	sts	0x6759, r24	; 0x806759 <qtm_local_ms_timecount>
    aaf0:	90 93 5a 67 	sts	0x675A, r25	; 0x80675a <qtm_local_ms_timecount+0x1>
    aaf4:	08 95       	ret

0000aaf6 <qtm_init_sensor_key>:
    aaf6:	00 97       	sbiw	r24, 0x00	; 0
    aaf8:	d9 f0       	breq	.+54     	; 0xab30 <qtm_init_sensor_key+0x3a>
    aafa:	41 15       	cp	r20, r1
    aafc:	51 05       	cpc	r21, r1
    aafe:	c1 f0       	breq	.+48     	; 0xab30 <qtm_init_sensor_key+0x3a>
    ab00:	26 e0       	ldi	r18, 0x06	; 6
    ab02:	62 9f       	mul	r22, r18
    ab04:	b0 01       	movw	r22, r0
    ab06:	11 24       	eor	r1, r1
    ab08:	dc 01       	movw	r26, r24
    ab0a:	14 96       	adiw	r26, 0x04	; 4
    ab0c:	ed 91       	ld	r30, X+
    ab0e:	fc 91       	ld	r31, X
    ab10:	15 97       	sbiw	r26, 0x05	; 5
    ab12:	e6 0f       	add	r30, r22
    ab14:	f7 1f       	adc	r31, r23
    ab16:	21 e0       	ldi	r18, 0x01	; 1
    ab18:	20 83       	st	Z, r18
    ab1a:	14 96       	adiw	r26, 0x04	; 4
    ab1c:	8d 91       	ld	r24, X+
    ab1e:	9c 91       	ld	r25, X
    ab20:	15 97       	sbiw	r26, 0x05	; 5
    ab22:	fc 01       	movw	r30, r24
    ab24:	e6 0f       	add	r30, r22
    ab26:	f7 1f       	adc	r31, r23
    ab28:	42 83       	std	Z+2, r20	; 0x02
    ab2a:	53 83       	std	Z+3, r21	; 0x03
    ab2c:	80 e0       	ldi	r24, 0x00	; 0
    ab2e:	08 95       	ret
    ab30:	8b e0       	ldi	r24, 0x0B	; 11
    ab32:	08 95       	ret

0000ab34 <qtm_key_sensors_process>:
    ab34:	2f 92       	push	r2
    ab36:	3f 92       	push	r3
    ab38:	4f 92       	push	r4
    ab3a:	5f 92       	push	r5
    ab3c:	6f 92       	push	r6
    ab3e:	7f 92       	push	r7
    ab40:	8f 92       	push	r8
    ab42:	9f 92       	push	r9
    ab44:	af 92       	push	r10
    ab46:	bf 92       	push	r11
    ab48:	cf 92       	push	r12
    ab4a:	df 92       	push	r13
    ab4c:	ef 92       	push	r14
    ab4e:	ff 92       	push	r15
    ab50:	0f 93       	push	r16
    ab52:	1f 93       	push	r17
    ab54:	cf 93       	push	r28
    ab56:	df 93       	push	r29
    ab58:	00 97       	sbiw	r24, 0x00	; 0
    ab5a:	09 f4       	brne	.+2      	; 0xab5e <qtm_key_sensors_process+0x2a>
    ab5c:	7e c3       	rjmp	.+1788   	; 0xb25a <qtm_key_sensors_process+0x726>
    ab5e:	ec 01       	movw	r28, r24
    ab60:	a1 2c       	mov	r10, r1
    ab62:	b1 2c       	mov	r11, r1
    ab64:	81 2c       	mov	r8, r1
    ab66:	91 2c       	mov	r9, r1
    ab68:	21 2c       	mov	r2, r1
    ab6a:	d1 2c       	mov	r13, r1
    ab6c:	55 24       	eor	r5, r5
    ab6e:	53 94       	inc	r5
    ab70:	33 e0       	ldi	r19, 0x03	; 3
    ab72:	c3 2e       	mov	r12, r19
    ab74:	45 e8       	ldi	r20, 0x85	; 133
    ab76:	64 2e       	mov	r6, r20
    ab78:	56 e8       	ldi	r21, 0x86	; 134
    ab7a:	75 2e       	mov	r7, r21
    ab7c:	62 e0       	ldi	r22, 0x02	; 2
    ab7e:	36 2e       	mov	r3, r22
    ab80:	78 e0       	ldi	r23, 0x08	; 8
    ab82:	47 2e       	mov	r4, r23
    ab84:	ea 81       	ldd	r30, Y+2	; 0x02
    ab86:	fb 81       	ldd	r31, Y+3	; 0x03
    ab88:	80 81       	ld	r24, Z
    ab8a:	91 81       	ldd	r25, Z+1	; 0x01
    ab8c:	88 16       	cp	r8, r24
    ab8e:	99 06       	cpc	r9, r25
    ab90:	08 f0       	brcs	.+2      	; 0xab94 <qtm_key_sensors_process+0x60>
    ab92:	a6 c1       	rjmp	.+844    	; 0xaee0 <qtm_key_sensors_process+0x3ac>
    ab94:	75 01       	movw	r14, r10
    ab96:	ee 0c       	add	r14, r14
    ab98:	ff 1c       	adc	r15, r15
    ab9a:	ec 81       	ldd	r30, Y+4	; 0x04
    ab9c:	fd 81       	ldd	r31, Y+5	; 0x05
    ab9e:	ee 0d       	add	r30, r14
    aba0:	ff 1d       	adc	r31, r15
    aba2:	a2 81       	ldd	r26, Z+2	; 0x02
    aba4:	b3 81       	ldd	r27, Z+3	; 0x03
    aba6:	9c 91       	ld	r25, X
    aba8:	9e 71       	andi	r25, 0x1E	; 30
    abaa:	09 f0       	breq	.+2      	; 0xabae <qtm_key_sensors_process+0x7a>
    abac:	50 82       	st	Z, r5
    abae:	0c 81       	ldd	r16, Y+4	; 0x04
    abb0:	1d 81       	ldd	r17, Y+5	; 0x05
    abb2:	0e 0d       	add	r16, r14
    abb4:	1f 1d       	adc	r17, r15
    abb6:	d8 01       	movw	r26, r16
    abb8:	8c 91       	ld	r24, X
    abba:	84 30       	cpi	r24, 0x04	; 4
    abbc:	09 f4       	brne	.+2      	; 0xabc0 <qtm_key_sensors_process+0x8c>
    abbe:	9e c0       	rjmp	.+316    	; 0xacfc <qtm_key_sensors_process+0x1c8>
    abc0:	38 f4       	brcc	.+14     	; 0xabd0 <qtm_key_sensors_process+0x9c>
    abc2:	82 30       	cpi	r24, 0x02	; 2
    abc4:	d1 f0       	breq	.+52     	; 0xabfa <qtm_key_sensors_process+0xc6>
    abc6:	08 f0       	brcs	.+2      	; 0xabca <qtm_key_sensors_process+0x96>
    abc8:	45 c0       	rjmp	.+138    	; 0xac54 <qtm_key_sensors_process+0x120>
    abca:	81 30       	cpi	r24, 0x01	; 1
    abcc:	59 f0       	breq	.+22     	; 0xabe4 <qtm_key_sensors_process+0xb0>
    abce:	81 c1       	rjmp	.+770    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    abd0:	85 38       	cpi	r24, 0x85	; 133
    abd2:	09 f4       	brne	.+2      	; 0xabd6 <qtm_key_sensors_process+0xa2>
    abd4:	bf c0       	rjmp	.+382    	; 0xad54 <qtm_key_sensors_process+0x220>
    abd6:	86 38       	cpi	r24, 0x86	; 134
    abd8:	09 f4       	brne	.+2      	; 0xabdc <qtm_key_sensors_process+0xa8>
    abda:	f5 c0       	rjmp	.+490    	; 0xadc6 <qtm_key_sensors_process+0x292>
    abdc:	87 30       	cpi	r24, 0x07	; 7
    abde:	09 f0       	breq	.+2      	; 0xabe2 <qtm_key_sensors_process+0xae>
    abe0:	78 c1       	rjmp	.+752    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    abe2:	36 c1       	rjmp	.+620    	; 0xae50 <qtm_key_sensors_process+0x31c>
    abe4:	91 11       	cpse	r25, r1
    abe6:	67 c1       	rjmp	.+718    	; 0xaeb6 <qtm_key_sensors_process+0x382>
    abe8:	f8 01       	movw	r30, r16
    abea:	30 82       	st	Z, r3
    abec:	8c 81       	ldd	r24, Y+4	; 0x04
    abee:	9d 81       	ldd	r25, Y+5	; 0x05
    abf0:	fc 01       	movw	r30, r24
    abf2:	ee 0d       	add	r30, r14
    abf4:	ff 1d       	adc	r31, r15
    abf6:	41 82       	std	Z+1, r4	; 0x01
    abf8:	5e c1       	rjmp	.+700    	; 0xaeb6 <qtm_key_sensors_process+0x382>
    abfa:	d8 01       	movw	r26, r16
    abfc:	11 96       	adiw	r26, 0x01	; 1
    abfe:	2c 91       	ld	r18, X
    ac00:	11 97       	sbiw	r26, 0x01	; 1
    ac02:	22 23       	and	r18, r18
    ac04:	29 f1       	breq	.+74     	; 0xac50 <qtm_key_sensors_process+0x11c>
    ac06:	12 96       	adiw	r26, 0x02	; 2
    ac08:	ed 91       	ld	r30, X+
    ac0a:	fc 91       	ld	r31, X
    ac0c:	13 97       	sbiw	r26, 0x03	; 3
    ac0e:	25 30       	cpi	r18, 0x05	; 5
    ac10:	18 f0       	brcs	.+6      	; 0xac18 <qtm_key_sensors_process+0xe4>
    ac12:	81 81       	ldd	r24, Z+1	; 0x01
    ac14:	92 81       	ldd	r25, Z+2	; 0x02
    ac16:	0e c0       	rjmp	.+28     	; 0xac34 <qtm_key_sensors_process+0x100>
    ac18:	d8 01       	movw	r26, r16
    ac1a:	14 96       	adiw	r26, 0x04	; 4
    ac1c:	8d 91       	ld	r24, X+
    ac1e:	9c 91       	ld	r25, X
    ac20:	15 97       	sbiw	r26, 0x05	; 5
    ac22:	41 81       	ldd	r20, Z+1	; 0x01
    ac24:	52 81       	ldd	r21, Z+2	; 0x02
    ac26:	84 17       	cp	r24, r20
    ac28:	95 07       	cpc	r25, r21
    ac2a:	69 f0       	breq	.+26     	; 0xac46 <qtm_key_sensors_process+0x112>
    ac2c:	48 17       	cp	r20, r24
    ac2e:	59 07       	cpc	r21, r25
    ac30:	30 f4       	brcc	.+12     	; 0xac3e <qtm_key_sensors_process+0x10a>
    ac32:	01 97       	sbiw	r24, 0x01	; 1
    ac34:	14 96       	adiw	r26, 0x04	; 4
    ac36:	8d 93       	st	X+, r24
    ac38:	9c 93       	st	X, r25
    ac3a:	15 97       	sbiw	r26, 0x05	; 5
    ac3c:	04 c0       	rjmp	.+8      	; 0xac46 <qtm_key_sensors_process+0x112>
    ac3e:	01 96       	adiw	r24, 0x01	; 1
    ac40:	f8 01       	movw	r30, r16
    ac42:	84 83       	std	Z+4, r24	; 0x04
    ac44:	95 83       	std	Z+5, r25	; 0x05
    ac46:	21 50       	subi	r18, 0x01	; 1
    ac48:	d8 01       	movw	r26, r16
    ac4a:	11 96       	adiw	r26, 0x01	; 1
    ac4c:	2c 93       	st	X, r18
    ac4e:	33 c1       	rjmp	.+614    	; 0xaeb6 <qtm_key_sensors_process+0x382>
    ac50:	f8 01       	movw	r30, r16
    ac52:	2d c1       	rjmp	.+602    	; 0xaeae <qtm_key_sensors_process+0x37a>
    ac54:	d8 01       	movw	r26, r16
    ac56:	14 96       	adiw	r26, 0x04	; 4
    ac58:	2d 91       	ld	r18, X+
    ac5a:	3c 91       	ld	r19, X
    ac5c:	15 97       	sbiw	r26, 0x05	; 5
    ac5e:	12 96       	adiw	r26, 0x02	; 2
    ac60:	ed 91       	ld	r30, X+
    ac62:	fc 91       	ld	r31, X
    ac64:	13 97       	sbiw	r26, 0x03	; 3
    ac66:	41 81       	ldd	r20, Z+1	; 0x01
    ac68:	52 81       	ldd	r21, Z+2	; 0x02
    ac6a:	24 17       	cp	r18, r20
    ac6c:	35 07       	cpc	r19, r21
    ac6e:	09 f4       	brne	.+2      	; 0xac72 <qtm_key_sensors_process+0x13e>
    ac70:	30 c1       	rjmp	.+608    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    ac72:	8e 81       	ldd	r24, Y+6	; 0x06
    ac74:	9f 81       	ldd	r25, Y+7	; 0x07
    ac76:	42 17       	cp	r20, r18
    ac78:	53 07       	cpc	r21, r19
    ac7a:	f8 f4       	brcc	.+62     	; 0xacba <qtm_key_sensors_process+0x186>
    ac7c:	ea 81       	ldd	r30, Y+2	; 0x02
    ac7e:	fb 81       	ldd	r31, Y+3	; 0x03
    ac80:	24 1b       	sub	r18, r20
    ac82:	35 0b       	sbc	r19, r21
    ac84:	dc 01       	movw	r26, r24
    ac86:	aa 0d       	add	r26, r10
    ac88:	bb 1d       	adc	r27, r11
    ac8a:	8c 91       	ld	r24, X
    ac8c:	90 e0       	ldi	r25, 0x00	; 0
    ac8e:	05 80       	ldd	r0, Z+5	; 0x05
    ac90:	02 c0       	rjmp	.+4      	; 0xac96 <qtm_key_sensors_process+0x162>
    ac92:	95 95       	asr	r25
    ac94:	87 95       	ror	r24
    ac96:	0a 94       	dec	r0
    ac98:	e2 f7       	brpl	.-8      	; 0xac92 <qtm_key_sensors_process+0x15e>
    ac9a:	99 27       	eor	r25, r25
    ac9c:	28 17       	cp	r18, r24
    ac9e:	39 07       	cpc	r19, r25
    aca0:	08 f4       	brcc	.+2      	; 0xaca4 <qtm_key_sensors_process+0x170>
    aca2:	17 c1       	rjmp	.+558    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    aca4:	84 81       	ldd	r24, Z+4	; 0x04
    aca6:	88 23       	and	r24, r24
    aca8:	09 f4       	brne	.+2      	; 0xacac <qtm_key_sensors_process+0x178>
    acaa:	13 c1       	rjmp	.+550    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    acac:	87 e0       	ldi	r24, 0x07	; 7
    acae:	f8 01       	movw	r30, r16
    acb0:	80 83       	st	Z, r24
    acb2:	ea 81       	ldd	r30, Y+2	; 0x02
    acb4:	fb 81       	ldd	r31, Y+3	; 0x03
    acb6:	24 81       	ldd	r18, Z+4	; 0x04
    acb8:	1a c0       	rjmp	.+52     	; 0xacee <qtm_key_sensors_process+0x1ba>
    acba:	fc 01       	movw	r30, r24
    acbc:	ea 0d       	add	r30, r10
    acbe:	fb 1d       	adc	r31, r11
    acc0:	42 1b       	sub	r20, r18
    acc2:	53 0b       	sbc	r21, r19
    acc4:	80 81       	ld	r24, Z
    acc6:	90 e0       	ldi	r25, 0x00	; 0
    acc8:	48 17       	cp	r20, r24
    acca:	59 07       	cpc	r21, r25
    accc:	08 f4       	brcc	.+2      	; 0xacd0 <qtm_key_sensors_process+0x19c>
    acce:	01 c1       	rjmp	.+514    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    acd0:	82 81       	ldd	r24, Z+2	; 0x02
    acd2:	88 23       	and	r24, r24
    acd4:	31 f0       	breq	.+12     	; 0xace2 <qtm_key_sensors_process+0x1ae>
    acd6:	b4 01       	movw	r22, r8
    acd8:	ce 01       	movw	r24, r28
    acda:	0e 94 07 55 	call	0xaa0e	; 0xaa0e <check_for_aks_block>
    acde:	81 11       	cpse	r24, r1
    ace0:	f8 c0       	rjmp	.+496    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    ace2:	e4 e0       	ldi	r30, 0x04	; 4
    ace4:	d8 01       	movw	r26, r16
    ace6:	ec 93       	st	X, r30
    ace8:	ea 81       	ldd	r30, Y+2	; 0x02
    acea:	fb 81       	ldd	r31, Y+3	; 0x03
    acec:	22 81       	ldd	r18, Z+2	; 0x02
    acee:	8c 81       	ldd	r24, Y+4	; 0x04
    acf0:	9d 81       	ldd	r25, Y+5	; 0x05
    acf2:	fc 01       	movw	r30, r24
    acf4:	ee 0d       	add	r30, r14
    acf6:	ff 1d       	adc	r31, r15
    acf8:	21 83       	std	Z+1, r18	; 0x01
    acfa:	dd c0       	rjmp	.+442    	; 0xaeb6 <qtm_key_sensors_process+0x382>
    acfc:	d8 01       	movw	r26, r16
    acfe:	14 96       	adiw	r26, 0x04	; 4
    ad00:	2d 91       	ld	r18, X+
    ad02:	3c 91       	ld	r19, X
    ad04:	15 97       	sbiw	r26, 0x05	; 5
    ad06:	12 96       	adiw	r26, 0x02	; 2
    ad08:	ed 91       	ld	r30, X+
    ad0a:	fc 91       	ld	r31, X
    ad0c:	13 97       	sbiw	r26, 0x03	; 3
    ad0e:	81 81       	ldd	r24, Z+1	; 0x01
    ad10:	92 81       	ldd	r25, Z+2	; 0x02
    ad12:	82 17       	cp	r24, r18
    ad14:	93 07       	cpc	r25, r19
    ad16:	08 f4       	brcc	.+2      	; 0xad1a <qtm_key_sensors_process+0x1e6>
    ad18:	bb c0       	rjmp	.+374    	; 0xae90 <qtm_key_sensors_process+0x35c>
    ad1a:	ee 81       	ldd	r30, Y+6	; 0x06
    ad1c:	ff 81       	ldd	r31, Y+7	; 0x07
    ad1e:	ea 0d       	add	r30, r10
    ad20:	fb 1d       	adc	r31, r11
    ad22:	82 1b       	sub	r24, r18
    ad24:	93 0b       	sbc	r25, r19
    ad26:	20 81       	ld	r18, Z
    ad28:	30 e0       	ldi	r19, 0x00	; 0
    ad2a:	28 17       	cp	r18, r24
    ad2c:	39 07       	cpc	r19, r25
    ad2e:	08 f0       	brcs	.+2      	; 0xad32 <qtm_key_sensors_process+0x1fe>
    ad30:	c5 c0       	rjmp	.+394    	; 0xaebc <qtm_key_sensors_process+0x388>
    ad32:	82 81       	ldd	r24, Z+2	; 0x02
    ad34:	88 23       	and	r24, r24
    ad36:	31 f0       	breq	.+12     	; 0xad44 <qtm_key_sensors_process+0x210>
    ad38:	b4 01       	movw	r22, r8
    ad3a:	ce 01       	movw	r24, r28
    ad3c:	0e 94 07 55 	call	0xaa0e	; 0xaa0e <check_for_aks_block>
    ad40:	81 11       	cpse	r24, r1
    ad42:	c7 c0       	rjmp	.+398    	; 0xaed2 <qtm_key_sensors_process+0x39e>
    ad44:	f8 01       	movw	r30, r16
    ad46:	81 81       	ldd	r24, Z+1	; 0x01
    ad48:	88 23       	and	r24, r24
    ad4a:	09 f4       	brne	.+2      	; 0xad4e <qtm_key_sensors_process+0x21a>
    ad4c:	6a c0       	rjmp	.+212    	; 0xae22 <qtm_key_sensors_process+0x2ee>
    ad4e:	81 50       	subi	r24, 0x01	; 1
    ad50:	81 83       	std	Z+1, r24	; 0x01
    ad52:	b1 c0       	rjmp	.+354    	; 0xaeb6 <qtm_key_sensors_process+0x382>
    ad54:	e8 81       	ld	r30, Y
    ad56:	f9 81       	ldd	r31, Y+1	; 0x01
    ad58:	aa 81       	ldd	r26, Y+2	; 0x02
    ad5a:	bb 81       	ldd	r27, Y+3	; 0x03
    ad5c:	18 96       	adiw	r26, 0x08	; 8
    ad5e:	8c 91       	ld	r24, X
    ad60:	83 83       	std	Z+3, r24	; 0x03
    ad62:	ec 81       	ldd	r30, Y+4	; 0x04
    ad64:	fd 81       	ldd	r31, Y+5	; 0x05
    ad66:	ee 0d       	add	r30, r14
    ad68:	ff 1d       	adc	r31, r15
    ad6a:	44 81       	ldd	r20, Z+4	; 0x04
    ad6c:	55 81       	ldd	r21, Z+5	; 0x05
    ad6e:	a2 81       	ldd	r26, Z+2	; 0x02
    ad70:	b3 81       	ldd	r27, Z+3	; 0x03
    ad72:	11 96       	adiw	r26, 0x01	; 1
    ad74:	8d 91       	ld	r24, X+
    ad76:	9c 91       	ld	r25, X
    ad78:	12 97       	sbiw	r26, 0x02	; 2
    ad7a:	84 17       	cp	r24, r20
    ad7c:	95 07       	cpc	r25, r21
    ad7e:	c0 f0       	brcs	.+48     	; 0xadb0 <qtm_key_sensors_process+0x27c>
    ad80:	ae 81       	ldd	r26, Y+6	; 0x06
    ad82:	bf 81       	ldd	r27, Y+7	; 0x07
    ad84:	aa 0d       	add	r26, r10
    ad86:	bb 1d       	adc	r27, r11
    ad88:	6c 91       	ld	r22, X
    ad8a:	26 2f       	mov	r18, r22
    ad8c:	30 e0       	ldi	r19, 0x00	; 0
    ad8e:	11 96       	adiw	r26, 0x01	; 1
    ad90:	7c 91       	ld	r23, X
    ad92:	7f 5f       	subi	r23, 0xFF	; 255
    ad94:	02 c0       	rjmp	.+4      	; 0xad9a <qtm_key_sensors_process+0x266>
    ad96:	35 95       	asr	r19
    ad98:	27 95       	ror	r18
    ad9a:	7a 95       	dec	r23
    ad9c:	e2 f7       	brpl	.-8      	; 0xad96 <qtm_key_sensors_process+0x262>
    ad9e:	84 1b       	sub	r24, r20
    ada0:	95 0b       	sbc	r25, r21
    ada2:	62 1b       	sub	r22, r18
    ada4:	26 2f       	mov	r18, r22
    ada6:	30 e0       	ldi	r19, 0x00	; 0
    ada8:	28 17       	cp	r18, r24
    adaa:	39 07       	cpc	r19, r25
    adac:	08 f4       	brcc	.+2      	; 0xadb0 <qtm_key_sensors_process+0x27c>
    adae:	8f c0       	rjmp	.+286    	; 0xaece <qtm_key_sensors_process+0x39a>
    adb0:	70 82       	st	Z, r7
    adb2:	ea 81       	ldd	r30, Y+2	; 0x02
    adb4:	fb 81       	ldd	r31, Y+3	; 0x03
    adb6:	22 81       	ldd	r18, Z+2	; 0x02
    adb8:	8c 81       	ldd	r24, Y+4	; 0x04
    adba:	9d 81       	ldd	r25, Y+5	; 0x05
    adbc:	fc 01       	movw	r30, r24
    adbe:	ee 0d       	add	r30, r14
    adc0:	ff 1d       	adc	r31, r15
    adc2:	21 83       	std	Z+1, r18	; 0x01
    adc4:	42 c0       	rjmp	.+132    	; 0xae4a <qtm_key_sensors_process+0x316>
    adc6:	d8 01       	movw	r26, r16
    adc8:	14 96       	adiw	r26, 0x04	; 4
    adca:	6d 91       	ld	r22, X+
    adcc:	7c 91       	ld	r23, X
    adce:	15 97       	sbiw	r26, 0x05	; 5
    add0:	12 96       	adiw	r26, 0x02	; 2
    add2:	ed 91       	ld	r30, X+
    add4:	fc 91       	ld	r31, X
    add6:	13 97       	sbiw	r26, 0x03	; 3
    add8:	21 81       	ldd	r18, Z+1	; 0x01
    adda:	32 81       	ldd	r19, Z+2	; 0x02
    addc:	26 17       	cp	r18, r22
    adde:	37 07       	cpc	r19, r23
    ade0:	58 f4       	brcc	.+22     	; 0xadf8 <qtm_key_sensors_process+0x2c4>
    ade2:	11 96       	adiw	r26, 0x01	; 1
    ade4:	8c 91       	ld	r24, X
    ade6:	11 97       	sbiw	r26, 0x01	; 1
    ade8:	81 11       	cpse	r24, r1
    adea:	02 c0       	rjmp	.+4      	; 0xadf0 <qtm_key_sensors_process+0x2bc>
    adec:	cc 92       	st	X, r12
    adee:	6f c0       	rjmp	.+222    	; 0xaece <qtm_key_sensors_process+0x39a>
    adf0:	81 50       	subi	r24, 0x01	; 1
    adf2:	f8 01       	movw	r30, r16
    adf4:	81 83       	std	Z+1, r24	; 0x01
    adf6:	6b c0       	rjmp	.+214    	; 0xaece <qtm_key_sensors_process+0x39a>
    adf8:	ee 81       	ldd	r30, Y+6	; 0x06
    adfa:	ff 81       	ldd	r31, Y+7	; 0x07
    adfc:	ea 0d       	add	r30, r10
    adfe:	fb 1d       	adc	r31, r11
    ae00:	80 81       	ld	r24, Z
    ae02:	48 2f       	mov	r20, r24
    ae04:	50 e0       	ldi	r21, 0x00	; 0
    ae06:	91 81       	ldd	r25, Z+1	; 0x01
    ae08:	9f 5f       	subi	r25, 0xFF	; 255
    ae0a:	02 c0       	rjmp	.+4      	; 0xae10 <qtm_key_sensors_process+0x2dc>
    ae0c:	55 95       	asr	r21
    ae0e:	47 95       	ror	r20
    ae10:	9a 95       	dec	r25
    ae12:	e2 f7       	brpl	.-8      	; 0xae0c <qtm_key_sensors_process+0x2d8>
    ae14:	26 1b       	sub	r18, r22
    ae16:	37 0b       	sbc	r19, r23
    ae18:	84 1b       	sub	r24, r20
    ae1a:	90 e0       	ldi	r25, 0x00	; 0
    ae1c:	82 17       	cp	r24, r18
    ae1e:	93 07       	cpc	r25, r19
    ae20:	60 f4       	brcc	.+24     	; 0xae3a <qtm_key_sensors_process+0x306>
    ae22:	d8 01       	movw	r26, r16
    ae24:	6c 92       	st	X, r6
    ae26:	ea 81       	ldd	r30, Y+2	; 0x02
    ae28:	fb 81       	ldd	r31, Y+3	; 0x03
    ae2a:	23 81       	ldd	r18, Z+3	; 0x03
    ae2c:	8c 81       	ldd	r24, Y+4	; 0x04
    ae2e:	9d 81       	ldd	r25, Y+5	; 0x05
    ae30:	fc 01       	movw	r30, r24
    ae32:	ee 0d       	add	r30, r14
    ae34:	ff 1d       	adc	r31, r15
    ae36:	21 83       	std	Z+1, r18	; 0x01
    ae38:	4a c0       	rjmp	.+148    	; 0xaece <qtm_key_sensors_process+0x39a>
    ae3a:	f8 01       	movw	r30, r16
    ae3c:	81 81       	ldd	r24, Z+1	; 0x01
    ae3e:	81 11       	cpse	r24, r1
    ae40:	02 c0       	rjmp	.+4      	; 0xae46 <qtm_key_sensors_process+0x312>
    ae42:	c0 82       	st	Z, r12
    ae44:	44 c0       	rjmp	.+136    	; 0xaece <qtm_key_sensors_process+0x39a>
    ae46:	81 50       	subi	r24, 0x01	; 1
    ae48:	81 83       	std	Z+1, r24	; 0x01
    ae4a:	22 24       	eor	r2, r2
    ae4c:	23 94       	inc	r2
    ae4e:	33 c0       	rjmp	.+102    	; 0xaeb6 <qtm_key_sensors_process+0x382>
    ae50:	f8 01       	movw	r30, r16
    ae52:	24 81       	ldd	r18, Z+4	; 0x04
    ae54:	35 81       	ldd	r19, Z+5	; 0x05
    ae56:	02 80       	ldd	r0, Z+2	; 0x02
    ae58:	f3 81       	ldd	r31, Z+3	; 0x03
    ae5a:	e0 2d       	mov	r30, r0
    ae5c:	81 81       	ldd	r24, Z+1	; 0x01
    ae5e:	92 81       	ldd	r25, Z+2	; 0x02
    ae60:	82 17       	cp	r24, r18
    ae62:	93 07       	cpc	r25, r19
    ae64:	58 f5       	brcc	.+86     	; 0xaebc <qtm_key_sensors_process+0x388>
    ae66:	28 1b       	sub	r18, r24
    ae68:	39 0b       	sbc	r19, r25
    ae6a:	ee 81       	ldd	r30, Y+6	; 0x06
    ae6c:	ff 81       	ldd	r31, Y+7	; 0x07
    ae6e:	ea 0d       	add	r30, r10
    ae70:	fb 1d       	adc	r31, r11
    ae72:	80 81       	ld	r24, Z
    ae74:	90 e0       	ldi	r25, 0x00	; 0
    ae76:	ea 81       	ldd	r30, Y+2	; 0x02
    ae78:	fb 81       	ldd	r31, Y+3	; 0x03
    ae7a:	05 80       	ldd	r0, Z+5	; 0x05
    ae7c:	02 c0       	rjmp	.+4      	; 0xae82 <qtm_key_sensors_process+0x34e>
    ae7e:	95 95       	asr	r25
    ae80:	87 95       	ror	r24
    ae82:	0a 94       	dec	r0
    ae84:	e2 f7       	brpl	.-8      	; 0xae7e <qtm_key_sensors_process+0x34a>
    ae86:	99 27       	eor	r25, r25
    ae88:	28 17       	cp	r18, r24
    ae8a:	39 07       	cpc	r19, r25
    ae8c:	18 f4       	brcc	.+6      	; 0xae94 <qtm_key_sensors_process+0x360>
    ae8e:	d8 01       	movw	r26, r16
    ae90:	cc 92       	st	X, r12
    ae92:	16 c0       	rjmp	.+44     	; 0xaec0 <qtm_key_sensors_process+0x38c>
    ae94:	f8 01       	movw	r30, r16
    ae96:	81 81       	ldd	r24, Z+1	; 0x01
    ae98:	81 11       	cpse	r24, r1
    ae9a:	0b c0       	rjmp	.+22     	; 0xaeb2 <qtm_key_sensors_process+0x37e>
    ae9c:	50 82       	st	Z, r5
    ae9e:	8c 81       	ldd	r24, Y+4	; 0x04
    aea0:	9d 81       	ldd	r25, Y+5	; 0x05
    aea2:	fc 01       	movw	r30, r24
    aea4:	ee 0d       	add	r30, r14
    aea6:	ff 1d       	adc	r31, r15
    aea8:	02 80       	ldd	r0, Z+2	; 0x02
    aeaa:	f3 81       	ldd	r31, Z+3	; 0x03
    aeac:	e0 2d       	mov	r30, r0
    aeae:	c0 82       	st	Z, r12
    aeb0:	10 c0       	rjmp	.+32     	; 0xaed2 <qtm_key_sensors_process+0x39e>
    aeb2:	81 50       	subi	r24, 0x01	; 1
    aeb4:	81 83       	std	Z+1, r24	; 0x01
    aeb6:	dd 24       	eor	r13, r13
    aeb8:	d3 94       	inc	r13
    aeba:	0b c0       	rjmp	.+22     	; 0xaed2 <qtm_key_sensors_process+0x39e>
    aebc:	f8 01       	movw	r30, r16
    aebe:	c0 82       	st	Z, r12
    aec0:	8c 81       	ldd	r24, Y+4	; 0x04
    aec2:	9d 81       	ldd	r25, Y+5	; 0x05
    aec4:	fc 01       	movw	r30, r24
    aec6:	ee 0d       	add	r30, r14
    aec8:	ff 1d       	adc	r31, r15
    aeca:	11 82       	std	Z+1, r1	; 0x01
    aecc:	02 c0       	rjmp	.+4      	; 0xaed2 <qtm_key_sensors_process+0x39e>
    aece:	22 24       	eor	r2, r2
    aed0:	23 94       	inc	r2
    aed2:	ff ef       	ldi	r31, 0xFF	; 255
    aed4:	8f 1a       	sub	r8, r31
    aed6:	9f 0a       	sbc	r9, r31
    aed8:	83 e0       	ldi	r24, 0x03	; 3
    aeda:	a8 0e       	add	r10, r24
    aedc:	b1 1c       	adc	r11, r1
    aede:	52 ce       	rjmp	.-860    	; 0xab84 <qtm_key_sensors_process+0x50>
    aee0:	e8 81       	ld	r30, Y
    aee2:	f9 81       	ldd	r31, Y+1	; 0x01
    aee4:	80 81       	ld	r24, Z
    aee6:	87 ff       	sbrs	r24, 7
    aee8:	23 c0       	rjmp	.+70     	; 0xaf30 <qtm_key_sensors_process+0x3fc>
    aeea:	40 e0       	ldi	r20, 0x00	; 0
    aeec:	50 e0       	ldi	r21, 0x00	; 0
    aeee:	20 e0       	ldi	r18, 0x00	; 0
    aef0:	30 e0       	ldi	r19, 0x00	; 0
    aef2:	ea 81       	ldd	r30, Y+2	; 0x02
    aef4:	fb 81       	ldd	r31, Y+3	; 0x03
    aef6:	80 81       	ld	r24, Z
    aef8:	91 81       	ldd	r25, Z+1	; 0x01
    aefa:	28 17       	cp	r18, r24
    aefc:	39 07       	cpc	r19, r25
    aefe:	98 f4       	brcc	.+38     	; 0xaf26 <qtm_key_sensors_process+0x3f2>
    af00:	ec 81       	ldd	r30, Y+4	; 0x04
    af02:	fd 81       	ldd	r31, Y+5	; 0x05
    af04:	e4 0f       	add	r30, r20
    af06:	f5 1f       	adc	r31, r21
    af08:	a2 81       	ldd	r26, Z+2	; 0x02
    af0a:	b3 81       	ldd	r27, Z+3	; 0x03
    af0c:	8c 91       	ld	r24, X
    af0e:	80 fd       	sbrc	r24, 0
    af10:	05 c0       	rjmp	.+10     	; 0xaf1c <qtm_key_sensors_process+0x3e8>
    af12:	90 81       	ld	r25, Z
    af14:	97 7f       	andi	r25, 0xF7	; 247
    af16:	11 f0       	breq	.+4      	; 0xaf1c <qtm_key_sensors_process+0x3e8>
    af18:	81 60       	ori	r24, 0x01	; 1
    af1a:	8c 93       	st	X, r24
    af1c:	2f 5f       	subi	r18, 0xFF	; 255
    af1e:	3f 4f       	sbci	r19, 0xFF	; 255
    af20:	4a 5f       	subi	r20, 0xFA	; 250
    af22:	5f 4f       	sbci	r21, 0xFF	; 255
    af24:	e6 cf       	rjmp	.-52     	; 0xaef2 <qtm_key_sensors_process+0x3be>
    af26:	e8 81       	ld	r30, Y
    af28:	f9 81       	ldd	r31, Y+1	; 0x01
    af2a:	80 81       	ld	r24, Z
    af2c:	8f 77       	andi	r24, 0x7F	; 127
    af2e:	80 83       	st	Z, r24
    af30:	d1 10       	cpse	r13, r1
    af32:	07 c0       	rjmp	.+14     	; 0xaf42 <qtm_key_sensors_process+0x40e>
    af34:	e8 81       	ld	r30, Y
    af36:	f9 81       	ldd	r31, Y+1	; 0x01
    af38:	21 10       	cpse	r2, r1
    af3a:	6f c0       	rjmp	.+222    	; 0xb01a <qtm_key_sensors_process+0x4e6>
    af3c:	80 81       	ld	r24, Z
    af3e:	8e 7f       	andi	r24, 0xFE	; 254
    af40:	6e c0       	rjmp	.+220    	; 0xb01e <qtm_key_sensors_process+0x4ea>
    af42:	ea 81       	ldd	r30, Y+2	; 0x02
    af44:	fb 81       	ldd	r31, Y+3	; 0x03
    af46:	81 85       	ldd	r24, Z+9	; 0x09
    af48:	88 23       	and	r24, r24
    af4a:	a1 f3       	breq	.-24     	; 0xaf34 <qtm_key_sensors_process+0x400>
    af4c:	e8 81       	ld	r30, Y
    af4e:	f9 81       	ldd	r31, Y+1	; 0x01
    af50:	80 81       	ld	r24, Z
    af52:	80 68       	ori	r24, 0x80	; 128
    af54:	80 83       	st	Z, r24
    af56:	ea 81       	ldd	r30, Y+2	; 0x02
    af58:	fb 81       	ldd	r31, Y+3	; 0x03
    af5a:	81 85       	ldd	r24, Z+9	; 0x09
    af5c:	81 30       	cpi	r24, 0x01	; 1
    af5e:	51 f7       	brne	.-44     	; 0xaf34 <qtm_key_sensors_process+0x400>
    af60:	40 e0       	ldi	r20, 0x00	; 0
    af62:	50 e0       	ldi	r21, 0x00	; 0
    af64:	20 e0       	ldi	r18, 0x00	; 0
    af66:	30 e0       	ldi	r19, 0x00	; 0
    af68:	96 e0       	ldi	r25, 0x06	; 6
    af6a:	d9 2e       	mov	r13, r25
    af6c:	ea 81       	ldd	r30, Y+2	; 0x02
    af6e:	fb 81       	ldd	r31, Y+3	; 0x03
    af70:	60 81       	ld	r22, Z
    af72:	71 81       	ldd	r23, Z+1	; 0x01
    af74:	26 17       	cp	r18, r22
    af76:	37 07       	cpc	r19, r23
    af78:	e8 f6       	brcc	.-70     	; 0xaf34 <qtm_key_sensors_process+0x400>
    af7a:	0c 81       	ldd	r16, Y+4	; 0x04
    af7c:	1d 81       	ldd	r17, Y+5	; 0x05
    af7e:	fa 01       	movw	r30, r20
    af80:	ee 0f       	add	r30, r30
    af82:	ff 1f       	adc	r31, r31
    af84:	e0 0f       	add	r30, r16
    af86:	f1 1f       	adc	r31, r17
    af88:	80 81       	ld	r24, Z
    af8a:	98 2f       	mov	r25, r24
    af8c:	97 7f       	andi	r25, 0xF7	; 247
    af8e:	a1 f1       	breq	.+104    	; 0xaff8 <qtm_key_sensors_process+0x4c4>
    af90:	85 38       	cpi	r24, 0x85	; 133
    af92:	11 f0       	breq	.+4      	; 0xaf98 <qtm_key_sensors_process+0x464>
    af94:	83 30       	cpi	r24, 0x03	; 3
    af96:	b1 f5       	brne	.+108    	; 0xb004 <qtm_key_sensors_process+0x4d0>
    af98:	ee 80       	ldd	r14, Y+6	; 0x06
    af9a:	ff 80       	ldd	r15, Y+7	; 0x07
    af9c:	d7 01       	movw	r26, r14
    af9e:	a4 0f       	add	r26, r20
    afa0:	b5 1f       	adc	r27, r21
    afa2:	12 96       	adiw	r26, 0x02	; 2
    afa4:	bc 90       	ld	r11, X
    afa6:	bb 20       	and	r11, r11
    afa8:	39 f1       	breq	.+78     	; 0xaff8 <qtm_key_sensors_process+0x4c4>
    afaa:	80 e0       	ldi	r24, 0x00	; 0
    afac:	90 e0       	ldi	r25, 0x00	; 0
    afae:	c1 2c       	mov	r12, r1
    afb0:	86 17       	cp	r24, r22
    afb2:	97 07       	cpc	r25, r23
    afb4:	f8 f4       	brcc	.+62     	; 0xaff4 <qtm_key_sensors_process+0x4c0>
    afb6:	28 17       	cp	r18, r24
    afb8:	39 07       	cpc	r19, r25
    afba:	d1 f0       	breq	.+52     	; 0xaff0 <qtm_key_sensors_process+0x4bc>
    afbc:	d8 9e       	mul	r13, r24
    afbe:	d0 01       	movw	r26, r0
    afc0:	d9 9e       	mul	r13, r25
    afc2:	b0 0d       	add	r27, r0
    afc4:	11 24       	eor	r1, r1
    afc6:	a0 0f       	add	r26, r16
    afc8:	b1 1f       	adc	r27, r17
    afca:	ac 91       	ld	r26, X
    afcc:	a4 30       	cpi	r26, 0x04	; 4
    afce:	11 f0       	breq	.+4      	; 0xafd4 <qtm_key_sensors_process+0x4a0>
    afd0:	a6 38       	cpi	r26, 0x86	; 134
    afd2:	71 f4       	brne	.+28     	; 0xaff0 <qtm_key_sensors_process+0x4bc>
    afd4:	dc 01       	movw	r26, r24
    afd6:	aa 0f       	add	r26, r26
    afd8:	bb 1f       	adc	r27, r27
    afda:	a8 0f       	add	r26, r24
    afdc:	b9 1f       	adc	r27, r25
    afde:	ae 0d       	add	r26, r14
    afe0:	bf 1d       	adc	r27, r15
    afe2:	12 96       	adiw	r26, 0x02	; 2
    afe4:	ac 91       	ld	r26, X
    afe6:	ba 12       	cpse	r11, r26
    afe8:	03 c0       	rjmp	.+6      	; 0xaff0 <qtm_key_sensors_process+0x4bc>
    afea:	cb 01       	movw	r24, r22
    afec:	cc 24       	eor	r12, r12
    afee:	c3 94       	inc	r12
    aff0:	01 96       	adiw	r24, 0x01	; 1
    aff2:	de cf       	rjmp	.-68     	; 0xafb0 <qtm_key_sensors_process+0x47c>
    aff4:	c1 10       	cpse	r12, r1
    aff6:	06 c0       	rjmp	.+12     	; 0xb004 <qtm_key_sensors_process+0x4d0>
    aff8:	02 80       	ldd	r0, Z+2	; 0x02
    affa:	f3 81       	ldd	r31, Z+3	; 0x03
    affc:	e0 2d       	mov	r30, r0
    affe:	80 81       	ld	r24, Z
    b000:	8e 7f       	andi	r24, 0xFE	; 254
    b002:	05 c0       	rjmp	.+10     	; 0xb00e <qtm_key_sensors_process+0x4da>
    b004:	02 80       	ldd	r0, Z+2	; 0x02
    b006:	f3 81       	ldd	r31, Z+3	; 0x03
    b008:	e0 2d       	mov	r30, r0
    b00a:	80 81       	ld	r24, Z
    b00c:	81 60       	ori	r24, 0x01	; 1
    b00e:	80 83       	st	Z, r24
    b010:	2f 5f       	subi	r18, 0xFF	; 255
    b012:	3f 4f       	sbci	r19, 0xFF	; 255
    b014:	4d 5f       	subi	r20, 0xFD	; 253
    b016:	5f 4f       	sbci	r21, 0xFF	; 255
    b018:	a9 cf       	rjmp	.-174    	; 0xaf6c <qtm_key_sensors_process+0x438>
    b01a:	80 81       	ld	r24, Z
    b01c:	81 60       	ori	r24, 0x01	; 1
    b01e:	80 83       	st	Z, r24
    b020:	80 91 59 67 	lds	r24, 0x6759	; 0x806759 <qtm_local_ms_timecount>
    b024:	90 91 5a 67 	lds	r25, 0x675A	; 0x80675a <qtm_local_ms_timecount+0x1>
    b028:	e8 81       	ld	r30, Y
    b02a:	f9 81       	ldd	r31, Y+1	; 0x01
    b02c:	21 81       	ldd	r18, Z+1	; 0x01
    b02e:	32 81       	ldd	r19, Z+2	; 0x02
    b030:	a9 01       	movw	r20, r18
    b032:	48 53       	subi	r20, 0x38	; 56
    b034:	5f 4f       	sbci	r21, 0xFF	; 255
    b036:	48 17       	cp	r20, r24
    b038:	59 07       	cpc	r21, r25
    b03a:	38 f4       	brcc	.+14     	; 0xb04a <qtm_key_sensors_process+0x516>
    b03c:	82 1b       	sub	r24, r18
    b03e:	93 0b       	sbc	r25, r19
    b040:	aa 24       	eor	r10, r10
    b042:	a3 94       	inc	r10
    b044:	a3 e0       	ldi	r26, 0x03	; 3
    b046:	ba 2e       	mov	r11, r26
    b048:	44 c0       	rjmp	.+136    	; 0xb0d2 <qtm_key_sensors_process+0x59e>
    b04a:	82 17       	cp	r24, r18
    b04c:	93 07       	cpc	r25, r19
    b04e:	10 f0       	brcs	.+4      	; 0xb054 <qtm_key_sensors_process+0x520>
    b050:	80 e0       	ldi	r24, 0x00	; 0
    b052:	04 c1       	rjmp	.+520    	; 0xb25c <qtm_key_sensors_process+0x728>
    b054:	82 1b       	sub	r24, r18
    b056:	93 0b       	sbc	r25, r19
    b058:	01 97       	sbiw	r24, 0x01	; 1
    b05a:	89 3c       	cpi	r24, 0xC9	; 201
    b05c:	91 05       	cpc	r25, r1
    b05e:	c0 f3       	brcs	.-16     	; 0xb050 <qtm_key_sensors_process+0x51c>
    b060:	ef cf       	rjmp	.-34     	; 0xb040 <qtm_key_sensors_process+0x50c>
    b062:	88 5c       	subi	r24, 0xC8	; 200
    b064:	91 09       	sbc	r25, r1
    b066:	e8 81       	ld	r30, Y
    b068:	f9 81       	ldd	r31, Y+1	; 0x01
    b06a:	21 81       	ldd	r18, Z+1	; 0x01
    b06c:	32 81       	ldd	r19, Z+2	; 0x02
    b06e:	28 53       	subi	r18, 0x38	; 56
    b070:	3f 4f       	sbci	r19, 0xFF	; 255
    b072:	21 83       	std	Z+1, r18	; 0x01
    b074:	32 83       	std	Z+2, r19	; 0x02
    b076:	23 81       	ldd	r18, Z+3	; 0x03
    b078:	21 11       	cpse	r18, r1
    b07a:	96 c0       	rjmp	.+300    	; 0xb1a8 <qtm_key_sensors_process+0x674>
    b07c:	24 81       	ldd	r18, Z+4	; 0x04
    b07e:	22 23       	and	r18, r18
    b080:	11 f0       	breq	.+4      	; 0xb086 <qtm_key_sensors_process+0x552>
    b082:	21 50       	subi	r18, 0x01	; 1
    b084:	24 83       	std	Z+4, r18	; 0x04
    b086:	e8 81       	ld	r30, Y
    b088:	f9 81       	ldd	r31, Y+1	; 0x01
    b08a:	25 81       	ldd	r18, Z+5	; 0x05
    b08c:	22 23       	and	r18, r18
    b08e:	11 f0       	breq	.+4      	; 0xb094 <qtm_key_sensors_process+0x560>
    b090:	21 50       	subi	r18, 0x01	; 1
    b092:	25 83       	std	Z+5, r18	; 0x05
    b094:	8a 80       	ldd	r8, Y+2	; 0x02
    b096:	9b 80       	ldd	r9, Y+3	; 0x03
    b098:	d4 01       	movw	r26, r8
    b09a:	16 96       	adiw	r26, 0x06	; 6
    b09c:	2c 91       	ld	r18, X
    b09e:	16 97       	sbiw	r26, 0x06	; 6
    b0a0:	21 11       	cpse	r18, r1
    b0a2:	1b c0       	rjmp	.+54     	; 0xb0da <qtm_key_sensors_process+0x5a6>
    b0a4:	8a 80       	ldd	r8, Y+2	; 0x02
    b0a6:	9b 80       	ldd	r9, Y+3	; 0x03
    b0a8:	f4 01       	movw	r30, r8
    b0aa:	27 81       	ldd	r18, Z+7	; 0x07
    b0ac:	21 11       	cpse	r18, r1
    b0ae:	48 c0       	rjmp	.+144    	; 0xb140 <qtm_key_sensors_process+0x60c>
    b0b0:	ea 81       	ldd	r30, Y+2	; 0x02
    b0b2:	fb 81       	ldd	r31, Y+3	; 0x03
    b0b4:	23 81       	ldd	r18, Z+3	; 0x03
    b0b6:	22 23       	and	r18, r18
    b0b8:	61 f0       	breq	.+24     	; 0xb0d2 <qtm_key_sensors_process+0x59e>
    b0ba:	20 e0       	ldi	r18, 0x00	; 0
    b0bc:	30 e0       	ldi	r19, 0x00	; 0
    b0be:	a0 e0       	ldi	r26, 0x00	; 0
    b0c0:	b0 e0       	ldi	r27, 0x00	; 0
    b0c2:	ea 81       	ldd	r30, Y+2	; 0x02
    b0c4:	fb 81       	ldd	r31, Y+3	; 0x03
    b0c6:	40 81       	ld	r20, Z
    b0c8:	51 81       	ldd	r21, Z+1	; 0x01
    b0ca:	a4 17       	cp	r26, r20
    b0cc:	b5 07       	cpc	r27, r21
    b0ce:	08 f4       	brcc	.+2      	; 0xb0d2 <qtm_key_sensors_process+0x59e>
    b0d0:	6e c0       	rjmp	.+220    	; 0xb1ae <qtm_key_sensors_process+0x67a>
    b0d2:	89 3c       	cpi	r24, 0xC9	; 201
    b0d4:	91 05       	cpc	r25, r1
    b0d6:	28 f6       	brcc	.-118    	; 0xb062 <qtm_key_sensors_process+0x52e>
    b0d8:	bb cf       	rjmp	.-138    	; 0xb050 <qtm_key_sensors_process+0x51c>
    b0da:	08 81       	ld	r16, Y
    b0dc:	19 81       	ldd	r17, Y+1	; 0x01
    b0de:	f8 01       	movw	r30, r16
    b0e0:	24 81       	ldd	r18, Z+4	; 0x04
    b0e2:	21 11       	cpse	r18, r1
    b0e4:	df cf       	rjmp	.-66     	; 0xb0a4 <qtm_key_sensors_process+0x570>
    b0e6:	ed 90       	ld	r14, X+
    b0e8:	fc 90       	ld	r15, X
    b0ea:	60 e0       	ldi	r22, 0x00	; 0
    b0ec:	70 e0       	ldi	r23, 0x00	; 0
    b0ee:	40 e0       	ldi	r20, 0x00	; 0
    b0f0:	50 e0       	ldi	r21, 0x00	; 0
    b0f2:	4e 15       	cp	r20, r14
    b0f4:	5f 05       	cpc	r21, r15
    b0f6:	f1 f0       	breq	.+60     	; 0xb134 <qtm_key_sensors_process+0x600>
    b0f8:	ec 81       	ldd	r30, Y+4	; 0x04
    b0fa:	fd 81       	ldd	r31, Y+5	; 0x05
    b0fc:	e6 0f       	add	r30, r22
    b0fe:	f7 1f       	adc	r31, r23
    b100:	20 81       	ld	r18, Z
    b102:	23 30       	cpi	r18, 0x03	; 3
    b104:	11 f0       	breq	.+4      	; 0xb10a <qtm_key_sensors_process+0x5d6>
    b106:	28 30       	cpi	r18, 0x08	; 8
    b108:	81 f4       	brne	.+32     	; 0xb12a <qtm_key_sensors_process+0x5f6>
    b10a:	24 81       	ldd	r18, Z+4	; 0x04
    b10c:	35 81       	ldd	r19, Z+5	; 0x05
    b10e:	c2 80       	ldd	r12, Z+2	; 0x02
    b110:	d3 80       	ldd	r13, Z+3	; 0x03
    b112:	d6 01       	movw	r26, r12
    b114:	11 96       	adiw	r26, 0x01	; 1
    b116:	cd 90       	ld	r12, X+
    b118:	dc 90       	ld	r13, X
    b11a:	12 97       	sbiw	r26, 0x02	; 2
    b11c:	2c 15       	cp	r18, r12
    b11e:	3d 05       	cpc	r19, r13
    b120:	20 f4       	brcc	.+8      	; 0xb12a <qtm_key_sensors_process+0x5f6>
    b122:	2f 5f       	subi	r18, 0xFF	; 255
    b124:	3f 4f       	sbci	r19, 0xFF	; 255
    b126:	24 83       	std	Z+4, r18	; 0x04
    b128:	35 83       	std	Z+5, r19	; 0x05
    b12a:	4f 5f       	subi	r20, 0xFF	; 255
    b12c:	5f 4f       	sbci	r21, 0xFF	; 255
    b12e:	6a 5f       	subi	r22, 0xFA	; 250
    b130:	7f 4f       	sbci	r23, 0xFF	; 255
    b132:	df cf       	rjmp	.-66     	; 0xb0f2 <qtm_key_sensors_process+0x5be>
    b134:	f4 01       	movw	r30, r8
    b136:	26 81       	ldd	r18, Z+6	; 0x06
    b138:	d8 01       	movw	r26, r16
    b13a:	14 96       	adiw	r26, 0x04	; 4
    b13c:	2c 93       	st	X, r18
    b13e:	b2 cf       	rjmp	.-156    	; 0xb0a4 <qtm_key_sensors_process+0x570>
    b140:	08 81       	ld	r16, Y
    b142:	19 81       	ldd	r17, Y+1	; 0x01
    b144:	d8 01       	movw	r26, r16
    b146:	15 96       	adiw	r26, 0x05	; 5
    b148:	2c 91       	ld	r18, X
    b14a:	21 11       	cpse	r18, r1
    b14c:	b1 cf       	rjmp	.-158    	; 0xb0b0 <qtm_key_sensors_process+0x57c>
    b14e:	e0 80       	ld	r14, Z
    b150:	f1 80       	ldd	r15, Z+1	; 0x01
    b152:	60 e0       	ldi	r22, 0x00	; 0
    b154:	70 e0       	ldi	r23, 0x00	; 0
    b156:	40 e0       	ldi	r20, 0x00	; 0
    b158:	50 e0       	ldi	r21, 0x00	; 0
    b15a:	4e 15       	cp	r20, r14
    b15c:	5f 05       	cpc	r21, r15
    b15e:	f1 f0       	breq	.+60     	; 0xb19c <qtm_key_sensors_process+0x668>
    b160:	ec 81       	ldd	r30, Y+4	; 0x04
    b162:	fd 81       	ldd	r31, Y+5	; 0x05
    b164:	e6 0f       	add	r30, r22
    b166:	f7 1f       	adc	r31, r23
    b168:	20 81       	ld	r18, Z
    b16a:	23 30       	cpi	r18, 0x03	; 3
    b16c:	11 f0       	breq	.+4      	; 0xb172 <qtm_key_sensors_process+0x63e>
    b16e:	28 30       	cpi	r18, 0x08	; 8
    b170:	81 f4       	brne	.+32     	; 0xb192 <qtm_key_sensors_process+0x65e>
    b172:	24 81       	ldd	r18, Z+4	; 0x04
    b174:	35 81       	ldd	r19, Z+5	; 0x05
    b176:	c2 80       	ldd	r12, Z+2	; 0x02
    b178:	d3 80       	ldd	r13, Z+3	; 0x03
    b17a:	d6 01       	movw	r26, r12
    b17c:	11 96       	adiw	r26, 0x01	; 1
    b17e:	cd 90       	ld	r12, X+
    b180:	dc 90       	ld	r13, X
    b182:	12 97       	sbiw	r26, 0x02	; 2
    b184:	c2 16       	cp	r12, r18
    b186:	d3 06       	cpc	r13, r19
    b188:	20 f4       	brcc	.+8      	; 0xb192 <qtm_key_sensors_process+0x65e>
    b18a:	21 50       	subi	r18, 0x01	; 1
    b18c:	31 09       	sbc	r19, r1
    b18e:	24 83       	std	Z+4, r18	; 0x04
    b190:	35 83       	std	Z+5, r19	; 0x05
    b192:	4f 5f       	subi	r20, 0xFF	; 255
    b194:	5f 4f       	sbci	r21, 0xFF	; 255
    b196:	6a 5f       	subi	r22, 0xFA	; 250
    b198:	7f 4f       	sbci	r23, 0xFF	; 255
    b19a:	df cf       	rjmp	.-66     	; 0xb15a <qtm_key_sensors_process+0x626>
    b19c:	f4 01       	movw	r30, r8
    b19e:	27 81       	ldd	r18, Z+7	; 0x07
    b1a0:	d8 01       	movw	r26, r16
    b1a2:	15 96       	adiw	r26, 0x05	; 5
    b1a4:	2c 93       	st	X, r18
    b1a6:	84 cf       	rjmp	.-248    	; 0xb0b0 <qtm_key_sensors_process+0x57c>
    b1a8:	21 50       	subi	r18, 0x01	; 1
    b1aa:	23 83       	std	Z+3, r18	; 0x03
    b1ac:	81 cf       	rjmp	.-254    	; 0xb0b0 <qtm_key_sensors_process+0x57c>
    b1ae:	a9 01       	movw	r20, r18
    b1b0:	44 0f       	add	r20, r20
    b1b2:	55 1f       	adc	r21, r21
    b1b4:	ec 81       	ldd	r30, Y+4	; 0x04
    b1b6:	fd 81       	ldd	r31, Y+5	; 0x05
    b1b8:	e4 0f       	add	r30, r20
    b1ba:	f5 1f       	adc	r31, r21
    b1bc:	60 81       	ld	r22, Z
    b1be:	65 38       	cpi	r22, 0x85	; 133
    b1c0:	09 f0       	breq	.+2      	; 0xb1c4 <qtm_key_sensors_process+0x690>
    b1c2:	47 c0       	rjmp	.+142    	; 0xb252 <qtm_key_sensors_process+0x71e>
    b1c4:	61 81       	ldd	r22, Z+1	; 0x01
    b1c6:	66 23       	and	r22, r22
    b1c8:	19 f0       	breq	.+6      	; 0xb1d0 <qtm_key_sensors_process+0x69c>
    b1ca:	61 50       	subi	r22, 0x01	; 1
    b1cc:	61 83       	std	Z+1, r22	; 0x01
    b1ce:	41 c0       	rjmp	.+130    	; 0xb252 <qtm_key_sensors_process+0x71e>
    b1d0:	a0 82       	st	Z, r10
    b1d2:	6c 81       	ldd	r22, Y+4	; 0x04
    b1d4:	7d 81       	ldd	r23, Y+5	; 0x05
    b1d6:	fb 01       	movw	r30, r22
    b1d8:	e4 0f       	add	r30, r20
    b1da:	f5 1f       	adc	r31, r21
    b1dc:	02 80       	ldd	r0, Z+2	; 0x02
    b1de:	f3 81       	ldd	r31, Z+3	; 0x03
    b1e0:	e0 2d       	mov	r30, r0
    b1e2:	b0 82       	st	Z, r11
    b1e4:	ee 81       	ldd	r30, Y+6	; 0x06
    b1e6:	ff 81       	ldd	r31, Y+7	; 0x07
    b1e8:	e2 0f       	add	r30, r18
    b1ea:	f3 1f       	adc	r31, r19
    b1ec:	d2 80       	ldd	r13, Z+2	; 0x02
    b1ee:	dd 20       	and	r13, r13
    b1f0:	81 f1       	breq	.+96     	; 0xb252 <qtm_key_sensors_process+0x71e>
    b1f2:	40 e0       	ldi	r20, 0x00	; 0
    b1f4:	50 e0       	ldi	r21, 0x00	; 0
    b1f6:	00 e0       	ldi	r16, 0x00	; 0
    b1f8:	10 e0       	ldi	r17, 0x00	; 0
    b1fa:	ea 81       	ldd	r30, Y+2	; 0x02
    b1fc:	fb 81       	ldd	r31, Y+3	; 0x03
    b1fe:	60 81       	ld	r22, Z
    b200:	71 81       	ldd	r23, Z+1	; 0x01
    b202:	06 17       	cp	r16, r22
    b204:	17 07       	cpc	r17, r23
    b206:	28 f5       	brcc	.+74     	; 0xb252 <qtm_key_sensors_process+0x71e>
    b208:	ee 81       	ldd	r30, Y+6	; 0x06
    b20a:	ff 81       	ldd	r31, Y+7	; 0x07
    b20c:	e4 0f       	add	r30, r20
    b20e:	f5 1f       	adc	r31, r21
    b210:	62 81       	ldd	r22, Z+2	; 0x02
    b212:	d6 12       	cpse	r13, r22
    b214:	19 c0       	rjmp	.+50     	; 0xb248 <qtm_key_sensors_process+0x714>
    b216:	ba 01       	movw	r22, r20
    b218:	66 0f       	add	r22, r22
    b21a:	77 1f       	adc	r23, r23
    b21c:	ec 81       	ldd	r30, Y+4	; 0x04
    b21e:	fd 81       	ldd	r31, Y+5	; 0x05
    b220:	4f 01       	movw	r8, r30
    b222:	86 0e       	add	r8, r22
    b224:	97 1e       	adc	r9, r23
    b226:	f4 01       	movw	r30, r8
    b228:	e2 80       	ldd	r14, Z+2	; 0x02
    b22a:	f3 80       	ldd	r15, Z+3	; 0x03
    b22c:	f7 01       	movw	r30, r14
    b22e:	f0 80       	ld	r15, Z
    b230:	f0 fe       	sbrs	r15, 0
    b232:	0a c0       	rjmp	.+20     	; 0xb248 <qtm_key_sensors_process+0x714>
    b234:	f4 01       	movw	r30, r8
    b236:	a0 82       	st	Z, r10
    b238:	ec 81       	ldd	r30, Y+4	; 0x04
    b23a:	fd 81       	ldd	r31, Y+5	; 0x05
    b23c:	e6 0f       	add	r30, r22
    b23e:	f7 1f       	adc	r31, r23
    b240:	02 80       	ldd	r0, Z+2	; 0x02
    b242:	f3 81       	ldd	r31, Z+3	; 0x03
    b244:	e0 2d       	mov	r30, r0
    b246:	b0 82       	st	Z, r11
    b248:	0f 5f       	subi	r16, 0xFF	; 255
    b24a:	1f 4f       	sbci	r17, 0xFF	; 255
    b24c:	4d 5f       	subi	r20, 0xFD	; 253
    b24e:	5f 4f       	sbci	r21, 0xFF	; 255
    b250:	d4 cf       	rjmp	.-88     	; 0xb1fa <qtm_key_sensors_process+0x6c6>
    b252:	11 96       	adiw	r26, 0x01	; 1
    b254:	2d 5f       	subi	r18, 0xFD	; 253
    b256:	3f 4f       	sbci	r19, 0xFF	; 255
    b258:	34 cf       	rjmp	.-408    	; 0xb0c2 <qtm_key_sensors_process+0x58e>
    b25a:	8b e0       	ldi	r24, 0x0B	; 11
    b25c:	df 91       	pop	r29
    b25e:	cf 91       	pop	r28
    b260:	1f 91       	pop	r17
    b262:	0f 91       	pop	r16
    b264:	ff 90       	pop	r15
    b266:	ef 90       	pop	r14
    b268:	df 90       	pop	r13
    b26a:	cf 90       	pop	r12
    b26c:	bf 90       	pop	r11
    b26e:	af 90       	pop	r10
    b270:	9f 90       	pop	r9
    b272:	8f 90       	pop	r8
    b274:	7f 90       	pop	r7
    b276:	6f 90       	pop	r6
    b278:	5f 90       	pop	r5
    b27a:	4f 90       	pop	r4
    b27c:	3f 90       	pop	r3
    b27e:	2f 90       	pop	r2
    b280:	08 95       	ret

0000b282 <divide>:
    b282:	9c 01       	movw	r18, r24
    b284:	61 15       	cp	r22, r1
    b286:	71 05       	cpc	r23, r1
    b288:	09 f1       	breq	.+66     	; 0xb2cc <divide+0x4a>
    b28a:	4f 5f       	subi	r20, 0xFF	; 255
    b28c:	37 fd       	sbrc	r19, 7
    b28e:	06 c0       	rjmp	.+12     	; 0xb29c <divide+0x1a>
    b290:	44 23       	and	r20, r20
    b292:	21 f0       	breq	.+8      	; 0xb29c <divide+0x1a>
    b294:	41 50       	subi	r20, 0x01	; 1
    b296:	22 0f       	add	r18, r18
    b298:	33 1f       	adc	r19, r19
    b29a:	f8 cf       	rjmp	.-16     	; 0xb28c <divide+0xa>
    b29c:	77 fd       	sbrc	r23, 7
    b29e:	04 c0       	rjmp	.+8      	; 0xb2a8 <divide+0x26>
    b2a0:	4f 5f       	subi	r20, 0xFF	; 255
    b2a2:	66 0f       	add	r22, r22
    b2a4:	77 1f       	adc	r23, r23
    b2a6:	fa cf       	rjmp	.-12     	; 0xb29c <divide+0x1a>
    b2a8:	80 e0       	ldi	r24, 0x00	; 0
    b2aa:	90 e0       	ldi	r25, 0x00	; 0
    b2ac:	44 23       	and	r20, r20
    b2ae:	81 f0       	breq	.+32     	; 0xb2d0 <divide+0x4e>
    b2b0:	97 fd       	sbrc	r25, 7
    b2b2:	0c c0       	rjmp	.+24     	; 0xb2cc <divide+0x4a>
    b2b4:	88 0f       	add	r24, r24
    b2b6:	99 1f       	adc	r25, r25
    b2b8:	41 50       	subi	r20, 0x01	; 1
    b2ba:	26 17       	cp	r18, r22
    b2bc:	37 07       	cpc	r19, r23
    b2be:	18 f0       	brcs	.+6      	; 0xb2c6 <divide+0x44>
    b2c0:	26 1b       	sub	r18, r22
    b2c2:	37 0b       	sbc	r19, r23
    b2c4:	01 96       	adiw	r24, 0x01	; 1
    b2c6:	76 95       	lsr	r23
    b2c8:	67 95       	ror	r22
    b2ca:	f0 cf       	rjmp	.-32     	; 0xb2ac <divide+0x2a>
    b2cc:	8f ef       	ldi	r24, 0xFF	; 255
    b2ce:	9f ef       	ldi	r25, 0xFF	; 255
    b2d0:	08 95       	ret

0000b2d2 <qtm_init_scroller_module>:
    b2d2:	cf 93       	push	r28
    b2d4:	df 93       	push	r29
    b2d6:	fc 01       	movw	r30, r24
    b2d8:	89 2b       	or	r24, r25
    b2da:	b9 f1       	breq	.+110    	; 0xb34a <qtm_init_scroller_module+0x78>
    b2dc:	24 81       	ldd	r18, Z+4	; 0x04
    b2de:	35 81       	ldd	r19, Z+5	; 0x05
    b2e0:	21 15       	cp	r18, r1
    b2e2:	31 05       	cpc	r19, r1
    b2e4:	91 f1       	breq	.+100    	; 0xb34a <qtm_init_scroller_module+0x78>
    b2e6:	46 81       	ldd	r20, Z+6	; 0x06
    b2e8:	57 81       	ldd	r21, Z+7	; 0x07
    b2ea:	41 15       	cp	r20, r1
    b2ec:	51 05       	cpc	r21, r1
    b2ee:	69 f1       	breq	.+90     	; 0xb34a <qtm_init_scroller_module+0x78>
    b2f0:	a0 81       	ld	r26, Z
    b2f2:	b1 81       	ldd	r27, Z+1	; 0x01
    b2f4:	1c 92       	st	X, r1
    b2f6:	90 e0       	ldi	r25, 0x00	; 0
    b2f8:	a2 81       	ldd	r26, Z+2	; 0x02
    b2fa:	b3 81       	ldd	r27, Z+3	; 0x03
    b2fc:	12 96       	adiw	r26, 0x02	; 2
    b2fe:	8c 91       	ld	r24, X
    b300:	98 17       	cp	r25, r24
    b302:	08 f5       	brcc	.+66     	; 0xb346 <qtm_init_scroller_module+0x74>
    b304:	d9 01       	movw	r26, r18
    b306:	89 e0       	ldi	r24, 0x09	; 9
    b308:	98 9f       	mul	r25, r24
    b30a:	a0 0d       	add	r26, r0
    b30c:	b1 1d       	adc	r27, r1
    b30e:	11 24       	eor	r1, r1
    b310:	11 96       	adiw	r26, 0x01	; 1
    b312:	1c 92       	st	X, r1
    b314:	11 97       	sbiw	r26, 0x01	; 1
    b316:	ea 01       	movw	r28, r20
    b318:	88 e0       	ldi	r24, 0x08	; 8
    b31a:	98 9f       	mul	r25, r24
    b31c:	c0 0d       	add	r28, r0
    b31e:	d1 1d       	adc	r29, r1
    b320:	11 24       	eor	r1, r1
    b322:	8d 81       	ldd	r24, Y+5	; 0x05
    b324:	12 96       	adiw	r26, 0x02	; 2
    b326:	8c 93       	st	X, r24
    b328:	12 97       	sbiw	r26, 0x02	; 2
    b32a:	13 96       	adiw	r26, 0x03	; 3
    b32c:	1d 92       	st	X+, r1
    b32e:	1c 92       	st	X, r1
    b330:	14 97       	sbiw	r26, 0x04	; 4
    b332:	15 96       	adiw	r26, 0x05	; 5
    b334:	1d 92       	st	X+, r1
    b336:	1c 92       	st	X, r1
    b338:	16 97       	sbiw	r26, 0x06	; 6
    b33a:	17 96       	adiw	r26, 0x07	; 7
    b33c:	1d 92       	st	X+, r1
    b33e:	1c 92       	st	X, r1
    b340:	18 97       	sbiw	r26, 0x08	; 8
    b342:	9f 5f       	subi	r25, 0xFF	; 255
    b344:	d9 cf       	rjmp	.-78     	; 0xb2f8 <qtm_init_scroller_module+0x26>
    b346:	80 e0       	ldi	r24, 0x00	; 0
    b348:	01 c0       	rjmp	.+2      	; 0xb34c <qtm_init_scroller_module+0x7a>
    b34a:	8b e0       	ldi	r24, 0x0B	; 11
    b34c:	df 91       	pop	r29
    b34e:	cf 91       	pop	r28
    b350:	08 95       	ret

0000b352 <qtm_scroller_process>:
    b352:	2f 92       	push	r2
    b354:	3f 92       	push	r3
    b356:	4f 92       	push	r4
    b358:	5f 92       	push	r5
    b35a:	6f 92       	push	r6
    b35c:	7f 92       	push	r7
    b35e:	8f 92       	push	r8
    b360:	9f 92       	push	r9
    b362:	af 92       	push	r10
    b364:	bf 92       	push	r11
    b366:	cf 92       	push	r12
    b368:	df 92       	push	r13
    b36a:	ef 92       	push	r14
    b36c:	ff 92       	push	r15
    b36e:	0f 93       	push	r16
    b370:	1f 93       	push	r17
    b372:	cf 93       	push	r28
    b374:	df 93       	push	r29
    b376:	cd b7       	in	r28, 0x3d	; 61
    b378:	de b7       	in	r29, 0x3e	; 62
    b37a:	61 97       	sbiw	r28, 0x11	; 17
    b37c:	cd bf       	out	0x3d, r28	; 61
    b37e:	de bf       	out	0x3e, r29	; 62
    b380:	fc 01       	movw	r30, r24
    b382:	00 97       	sbiw	r24, 0x00	; 0
    b384:	09 f4       	brne	.+2      	; 0xb388 <qtm_scroller_process+0x36>
    b386:	dc c2       	rjmp	.+1464   	; 0xb940 <qtm_scroller_process+0x5ee>
    b388:	e4 80       	ldd	r14, Z+4	; 0x04
    b38a:	f5 80       	ldd	r15, Z+5	; 0x05
    b38c:	ea 86       	std	Y+10, r14	; 0x0a
    b38e:	fb 86       	std	Y+11, r15	; 0x0b
    b390:	ef 28       	or	r14, r15
    b392:	09 f4       	brne	.+2      	; 0xb396 <qtm_scroller_process+0x44>
    b394:	d5 c2       	rjmp	.+1450   	; 0xb940 <qtm_scroller_process+0x5ee>
    b396:	e6 80       	ldd	r14, Z+6	; 0x06
    b398:	f7 80       	ldd	r15, Z+7	; 0x07
    b39a:	e8 86       	std	Y+8, r14	; 0x08
    b39c:	f9 86       	std	Y+9, r15	; 0x09
    b39e:	ef 28       	or	r14, r15
    b3a0:	09 f4       	brne	.+2      	; 0xb3a4 <qtm_scroller_process+0x52>
    b3a2:	ce c2       	rjmp	.+1436   	; 0xb940 <qtm_scroller_process+0x5ee>
    b3a4:	a2 81       	ldd	r26, Z+2	; 0x02
    b3a6:	b3 81       	ldd	r27, Z+3	; 0x03
    b3a8:	4d 90       	ld	r4, X+
    b3aa:	5c 90       	ld	r5, X
    b3ac:	41 14       	cp	r4, r1
    b3ae:	51 04       	cpc	r5, r1
    b3b0:	09 f4       	brne	.+2      	; 0xb3b4 <qtm_scroller_process+0x62>
    b3b2:	c6 c2       	rjmp	.+1420   	; 0xb940 <qtm_scroller_process+0x5ee>
    b3b4:	8e 83       	std	Y+6, r24	; 0x06
    b3b6:	9f 83       	std	Y+7, r25	; 0x07
    b3b8:	00 e0       	ldi	r16, 0x00	; 0
    b3ba:	1a 82       	std	Y+2, r1	; 0x02
    b3bc:	91 2c       	mov	r9, r1
    b3be:	16 e0       	ldi	r17, 0x06	; 6
    b3c0:	81 2e       	mov	r8, r17
    b3c2:	ae 81       	ldd	r26, Y+6	; 0x06
    b3c4:	bf 81       	ldd	r27, Y+7	; 0x07
    b3c6:	12 96       	adiw	r26, 0x02	; 2
    b3c8:	ed 91       	ld	r30, X+
    b3ca:	fc 91       	ld	r31, X
    b3cc:	13 97       	sbiw	r26, 0x03	; 3
    b3ce:	82 81       	ldd	r24, Z+2	; 0x02
    b3d0:	98 16       	cp	r9, r24
    b3d2:	08 f0       	brcs	.+2      	; 0xb3d6 <qtm_scroller_process+0x84>
    b3d4:	b0 c2       	rjmp	.+1376   	; 0xb936 <qtm_scroller_process+0x5e4>
    b3d6:	68 84       	ldd	r6, Y+8	; 0x08
    b3d8:	79 84       	ldd	r7, Y+9	; 0x09
    b3da:	28 e0       	ldi	r18, 0x08	; 8
    b3dc:	92 9e       	mul	r9, r18
    b3de:	60 0c       	add	r6, r0
    b3e0:	71 1c       	adc	r7, r1
    b3e2:	11 24       	eor	r1, r1
    b3e4:	d3 01       	movw	r26, r6
    b3e6:	11 96       	adiw	r26, 0x01	; 1
    b3e8:	4d 91       	ld	r20, X+
    b3ea:	5c 91       	ld	r21, X
    b3ec:	12 97       	sbiw	r26, 0x02	; 2
    b3ee:	13 96       	adiw	r26, 0x03	; 3
    b3f0:	ac 90       	ld	r10, X
    b3f2:	7a 01       	movw	r14, r20
    b3f4:	ea 0c       	add	r14, r10
    b3f6:	f1 1c       	adc	r15, r1
    b3f8:	ca 01       	movw	r24, r20
    b3fa:	60 e0       	ldi	r22, 0x00	; 0
    b3fc:	8e 15       	cp	r24, r14
    b3fe:	9f 05       	cpc	r25, r15
    b400:	70 f4       	brcc	.+28     	; 0xb41e <qtm_scroller_process+0xcc>
    b402:	88 9e       	mul	r8, r24
    b404:	f0 01       	movw	r30, r0
    b406:	89 9e       	mul	r8, r25
    b408:	f0 0d       	add	r31, r0
    b40a:	11 24       	eor	r1, r1
    b40c:	e4 0d       	add	r30, r4
    b40e:	f5 1d       	adc	r31, r5
    b410:	20 81       	ld	r18, Z
    b412:	25 38       	cpi	r18, 0x85	; 133
    b414:	11 f4       	brne	.+4      	; 0xb41a <qtm_scroller_process+0xc8>
    b416:	c7 01       	movw	r24, r14
    b418:	61 e0       	ldi	r22, 0x01	; 1
    b41a:	01 96       	adiw	r24, 0x01	; 1
    b41c:	ef cf       	rjmp	.-34     	; 0xb3fc <qtm_scroller_process+0xaa>
    b41e:	84 9e       	mul	r8, r20
    b420:	f0 01       	movw	r30, r0
    b422:	85 9e       	mul	r8, r21
    b424:	f0 0d       	add	r31, r0
    b426:	11 24       	eor	r1, r1
    b428:	ec 83       	std	Y+4, r30	; 0x04
    b42a:	fd 83       	std	Y+5, r31	; 0x05
    b42c:	34 97       	sbiw	r30, 0x04	; 4
    b42e:	e4 0d       	add	r30, r4
    b430:	f5 1d       	adc	r31, r5
    b432:	26 e0       	ldi	r18, 0x06	; 6
    b434:	a2 9e       	mul	r10, r18
    b436:	50 01       	movw	r10, r0
    b438:	11 24       	eor	r1, r1
    b43a:	1a 01       	movw	r2, r20
    b43c:	70 e0       	ldi	r23, 0x00	; 0
    b43e:	18 8a       	std	Y+16, r1	; 0x10
    b440:	19 8a       	std	Y+17, r1	; 0x11
    b442:	2e 14       	cp	r2, r14
    b444:	3f 04       	cpc	r3, r15
    b446:	08 f0       	brcs	.+2      	; 0xb44a <qtm_scroller_process+0xf8>
    b448:	4f c0       	rjmp	.+158    	; 0xb4e8 <qtm_scroller_process+0x196>
    b44a:	86 81       	ldd	r24, Z+6	; 0x06
    b44c:	97 81       	ldd	r25, Z+7	; 0x07
    b44e:	dc 01       	movw	r26, r24
    b450:	11 96       	adiw	r26, 0x01	; 1
    b452:	2d 91       	ld	r18, X+
    b454:	3c 91       	ld	r19, X
    b456:	12 97       	sbiw	r26, 0x02	; 2
    b458:	80 85       	ldd	r24, Z+8	; 0x08
    b45a:	91 85       	ldd	r25, Z+9	; 0x09
    b45c:	28 1b       	sub	r18, r24
    b45e:	39 0b       	sbc	r19, r25
    b460:	12 16       	cp	r1, r18
    b462:	13 06       	cpc	r1, r19
    b464:	14 f0       	brlt	.+4      	; 0xb46a <qtm_scroller_process+0x118>
    b466:	20 e0       	ldi	r18, 0x00	; 0
    b468:	30 e0       	ldi	r19, 0x00	; 0
    b46a:	24 16       	cp	r2, r20
    b46c:	35 06       	cpc	r3, r21
    b46e:	a9 f4       	brne	.+42     	; 0xb49a <qtm_scroller_process+0x148>
    b470:	d3 01       	movw	r26, r6
    b472:	8c 91       	ld	r24, X
    b474:	81 30       	cpi	r24, 0x01	; 1
    b476:	f9 f4       	brne	.+62     	; 0xb4b6 <qtm_scroller_process+0x164>
    b478:	6f 01       	movw	r12, r30
    b47a:	ca 0c       	add	r12, r10
    b47c:	db 1c       	adc	r13, r11
    b47e:	d6 01       	movw	r26, r12
    b480:	8d 91       	ld	r24, X+
    b482:	9c 91       	ld	r25, X
    b484:	dc 01       	movw	r26, r24
    b486:	11 96       	adiw	r26, 0x01	; 1
    b488:	8d 91       	ld	r24, X+
    b48a:	9c 91       	ld	r25, X
    b48c:	12 97       	sbiw	r26, 0x02	; 2
    b48e:	d6 01       	movw	r26, r12
    b490:	12 96       	adiw	r26, 0x02	; 2
    b492:	cd 90       	ld	r12, X+
    b494:	dc 90       	ld	r13, X
    b496:	13 97       	sbiw	r26, 0x03	; 3
    b498:	09 c0       	rjmp	.+18     	; 0xb4ac <qtm_scroller_process+0x15a>
    b49a:	80 81       	ld	r24, Z
    b49c:	91 81       	ldd	r25, Z+1	; 0x01
    b49e:	dc 01       	movw	r26, r24
    b4a0:	11 96       	adiw	r26, 0x01	; 1
    b4a2:	8d 91       	ld	r24, X+
    b4a4:	9c 91       	ld	r25, X
    b4a6:	12 97       	sbiw	r26, 0x02	; 2
    b4a8:	c2 80       	ldd	r12, Z+2	; 0x02
    b4aa:	d3 80       	ldd	r13, Z+3	; 0x03
    b4ac:	8c 19       	sub	r24, r12
    b4ae:	9d 09       	sbc	r25, r13
    b4b0:	18 16       	cp	r1, r24
    b4b2:	19 06       	cpc	r1, r25
    b4b4:	14 f0       	brlt	.+4      	; 0xb4ba <qtm_scroller_process+0x168>
    b4b6:	80 e0       	ldi	r24, 0x00	; 0
    b4b8:	90 e0       	ldi	r25, 0x00	; 0
    b4ba:	28 0f       	add	r18, r24
    b4bc:	39 1f       	adc	r19, r25
    b4be:	d3 01       	movw	r26, r6
    b4c0:	16 96       	adiw	r26, 0x06	; 6
    b4c2:	8d 91       	ld	r24, X+
    b4c4:	9c 91       	ld	r25, X
    b4c6:	17 97       	sbiw	r26, 0x07	; 7
    b4c8:	28 17       	cp	r18, r24
    b4ca:	39 07       	cpc	r19, r25
    b4cc:	40 f0       	brcs	.+16     	; 0xb4de <qtm_scroller_process+0x18c>
    b4ce:	88 89       	ldd	r24, Y+16	; 0x10
    b4d0:	99 89       	ldd	r25, Y+17	; 0x11
    b4d2:	82 17       	cp	r24, r18
    b4d4:	93 07       	cpc	r25, r19
    b4d6:	10 f4       	brcc	.+4      	; 0xb4dc <qtm_scroller_process+0x18a>
    b4d8:	28 8b       	std	Y+16, r18	; 0x10
    b4da:	39 8b       	std	Y+17, r19	; 0x11
    b4dc:	71 e0       	ldi	r23, 0x01	; 1
    b4de:	9f ef       	ldi	r25, 0xFF	; 255
    b4e0:	29 1a       	sub	r2, r25
    b4e2:	39 0a       	sbc	r3, r25
    b4e4:	36 96       	adiw	r30, 0x06	; 6
    b4e6:	ad cf       	rjmp	.-166    	; 0xb442 <qtm_scroller_process+0xf0>
    b4e8:	71 11       	cpse	r23, r1
    b4ea:	01 c0       	rjmp	.+2      	; 0xb4ee <qtm_scroller_process+0x19c>
    b4ec:	60 e0       	ldi	r22, 0x00	; 0
    b4ee:	a9 e0       	ldi	r26, 0x09	; 9
    b4f0:	9a 9e       	mul	r9, r26
    b4f2:	90 01       	movw	r18, r0
    b4f4:	11 24       	eor	r1, r1
    b4f6:	ea 84       	ldd	r14, Y+10	; 0x0a
    b4f8:	fb 84       	ldd	r15, Y+11	; 0x0b
    b4fa:	e2 0e       	add	r14, r18
    b4fc:	f3 1e       	adc	r15, r19
    b4fe:	ee 86       	std	Y+14, r14	; 0x0e
    b500:	ff 86       	std	Y+15, r15	; 0x0f
    b502:	d7 01       	movw	r26, r14
    b504:	8c 91       	ld	r24, X
    b506:	ae 81       	ldd	r26, Y+6	; 0x06
    b508:	bf 81       	ldd	r27, Y+7	; 0x07
    b50a:	14 96       	adiw	r26, 0x04	; 4
    b50c:	ed 91       	ld	r30, X+
    b50e:	fc 91       	ld	r31, X
    b510:	15 97       	sbiw	r26, 0x05	; 5
    b512:	b8 2f       	mov	r27, r24
    b514:	b1 70       	andi	r27, 0x01	; 1
    b516:	bd 87       	std	Y+13, r27	; 0x0d
    b518:	80 ff       	sbrs	r24, 0
    b51a:	1e c0       	rjmp	.+60     	; 0xb558 <qtm_scroller_process+0x206>
    b51c:	7f 01       	movw	r14, r30
    b51e:	e2 0e       	add	r14, r18
    b520:	f3 1e       	adc	r15, r19
    b522:	d7 01       	movw	r26, r14
    b524:	17 96       	adiw	r26, 0x07	; 7
    b526:	cd 90       	ld	r12, X+
    b528:	dc 90       	ld	r13, X
    b52a:	18 97       	sbiw	r26, 0x08	; 8
    b52c:	c6 01       	movw	r24, r12
    b52e:	88 0f       	add	r24, r24
    b530:	99 1f       	adc	r25, r25
    b532:	8c 0d       	add	r24, r12
    b534:	9d 1d       	adc	r25, r13
    b536:	a8 89       	ldd	r26, Y+16	; 0x10
    b538:	b9 89       	ldd	r27, Y+17	; 0x11
    b53a:	8a 0f       	add	r24, r26
    b53c:	9b 1f       	adc	r25, r27
    b53e:	96 95       	lsr	r25
    b540:	87 95       	ror	r24
    b542:	96 95       	lsr	r25
    b544:	87 95       	ror	r24
    b546:	d7 01       	movw	r26, r14
    b548:	17 96       	adiw	r26, 0x07	; 7
    b54a:	8d 93       	st	X+, r24
    b54c:	9c 93       	st	X, r25
    b54e:	18 97       	sbiw	r26, 0x08	; 8
    b550:	77 23       	and	r23, r23
    b552:	61 f0       	breq	.+24     	; 0xb56c <qtm_scroller_process+0x21a>
    b554:	61 e0       	ldi	r22, 0x01	; 1
    b556:	0a c0       	rjmp	.+20     	; 0xb56c <qtm_scroller_process+0x21a>
    b558:	cf 01       	movw	r24, r30
    b55a:	82 0f       	add	r24, r18
    b55c:	93 1f       	adc	r25, r19
    b55e:	e8 88       	ldd	r14, Y+16	; 0x10
    b560:	f9 88       	ldd	r15, Y+17	; 0x11
    b562:	dc 01       	movw	r26, r24
    b564:	17 96       	adiw	r26, 0x07	; 7
    b566:	ed 92       	st	X+, r14
    b568:	fc 92       	st	X, r15
    b56a:	18 97       	sbiw	r26, 0x08	; 8
    b56c:	d3 01       	movw	r26, r6
    b56e:	bc 91       	ld	r27, X
    b570:	b9 83       	std	Y+1, r27	; 0x01
    b572:	b2 30       	cpi	r27, 0x02	; 2
    b574:	08 f0       	brcs	.+2      	; 0xb578 <qtm_scroller_process+0x226>
    b576:	d4 c1       	rjmp	.+936    	; 0xb920 <qtm_scroller_process+0x5ce>
    b578:	d3 01       	movw	r26, r6
    b57a:	14 96       	adiw	r26, 0x04	; 4
    b57c:	1c 91       	ld	r17, X
    b57e:	10 3d       	cpi	r17, 0xD0	; 208
    b580:	08 f0       	brcs	.+2      	; 0xb584 <qtm_scroller_process+0x232>
    b582:	ce c1       	rjmp	.+924    	; 0xb920 <qtm_scroller_process+0x5ce>
    b584:	61 11       	cpse	r22, r1
    b586:	05 c0       	rjmp	.+10     	; 0xb592 <qtm_scroller_process+0x240>
    b588:	e2 0f       	add	r30, r18
    b58a:	f3 1f       	adc	r31, r19
    b58c:	17 82       	std	Z+7, r1	; 0x07
    b58e:	10 86       	std	Z+8, r1	; 0x08
    b590:	c8 c1       	rjmp	.+912    	; 0xb922 <qtm_scroller_process+0x5d0>
    b592:	f3 01       	movw	r30, r6
    b594:	f3 81       	ldd	r31, Z+3	; 0x03
    b596:	fb 83       	std	Y+3, r31	; 0x03
    b598:	e1 2e       	mov	r14, r17
    b59a:	e2 94       	swap	r14
    b59c:	9f e0       	ldi	r25, 0x0F	; 15
    b59e:	e9 22       	and	r14, r25
    b5a0:	ec 86       	std	Y+12, r14	; 0x0c
    b5a2:	ac 80       	ldd	r10, Y+4	; 0x04
    b5a4:	bd 80       	ldd	r11, Y+5	; 0x05
    b5a6:	a4 0c       	add	r10, r4
    b5a8:	b5 1c       	adc	r11, r5
    b5aa:	f5 01       	movw	r30, r10
    b5ac:	ba 01       	movw	r22, r20
    b5ae:	21 2c       	mov	r2, r1
    b5b0:	31 2c       	mov	r3, r1
    b5b2:	20 e0       	ldi	r18, 0x00	; 0
    b5b4:	30 e0       	ldi	r19, 0x00	; 0
    b5b6:	8b 81       	ldd	r24, Y+3	; 0x03
    b5b8:	e8 2e       	mov	r14, r24
    b5ba:	f1 2c       	mov	r15, r1
    b5bc:	6a 01       	movw	r12, r20
    b5be:	ce 0c       	add	r12, r14
    b5c0:	df 1c       	adc	r13, r15
    b5c2:	6c 15       	cp	r22, r12
    b5c4:	7d 05       	cpc	r23, r13
    b5c6:	b0 f4       	brcc	.+44     	; 0xb5f4 <qtm_scroller_process+0x2a2>
    b5c8:	a2 81       	ldd	r26, Z+2	; 0x02
    b5ca:	b3 81       	ldd	r27, Z+3	; 0x03
    b5cc:	11 96       	adiw	r26, 0x01	; 1
    b5ce:	8d 91       	ld	r24, X+
    b5d0:	9c 91       	ld	r25, X
    b5d2:	12 97       	sbiw	r26, 0x02	; 2
    b5d4:	a4 81       	ldd	r26, Z+4	; 0x04
    b5d6:	b5 81       	ldd	r27, Z+5	; 0x05
    b5d8:	8a 1b       	sub	r24, r26
    b5da:	9b 0b       	sbc	r25, r27
    b5dc:	18 16       	cp	r1, r24
    b5de:	19 06       	cpc	r1, r25
    b5e0:	2c f4       	brge	.+10     	; 0xb5ec <qtm_scroller_process+0x29a>
    b5e2:	28 16       	cp	r2, r24
    b5e4:	39 06       	cpc	r3, r25
    b5e6:	14 f4       	brge	.+4      	; 0xb5ec <qtm_scroller_process+0x29a>
    b5e8:	1c 01       	movw	r2, r24
    b5ea:	9b 01       	movw	r18, r22
    b5ec:	6f 5f       	subi	r22, 0xFF	; 255
    b5ee:	7f 4f       	sbci	r23, 0xFF	; 255
    b5f0:	36 96       	adiw	r30, 0x06	; 6
    b5f2:	e7 cf       	rjmp	.-50     	; 0xb5c2 <qtm_scroller_process+0x270>
    b5f4:	42 17       	cp	r20, r18
    b5f6:	53 07       	cpc	r21, r19
    b5f8:	79 f5       	brne	.+94     	; 0xb658 <qtm_scroller_process+0x306>
    b5fa:	99 81       	ldd	r25, Y+1	; 0x01
    b5fc:	91 30       	cpi	r25, 0x01	; 1
    b5fe:	09 f0       	breq	.+2      	; 0xb602 <qtm_scroller_process+0x2b0>
    b600:	a1 c1       	rjmp	.+834    	; 0xb944 <qtm_scroller_process+0x5f2>
    b602:	8c 9c       	mul	r8, r12
    b604:	f0 01       	movw	r30, r0
    b606:	8d 9c       	mul	r8, r13
    b608:	f0 0d       	add	r31, r0
    b60a:	11 24       	eor	r1, r1
    b60c:	36 97       	sbiw	r30, 0x06	; 6
    b60e:	e4 0d       	add	r30, r4
    b610:	f5 1d       	adc	r31, r5
    b612:	a2 81       	ldd	r26, Z+2	; 0x02
    b614:	b3 81       	ldd	r27, Z+3	; 0x03
    b616:	11 96       	adiw	r26, 0x01	; 1
    b618:	6d 91       	ld	r22, X+
    b61a:	7c 91       	ld	r23, X
    b61c:	12 97       	sbiw	r26, 0x02	; 2
    b61e:	84 81       	ldd	r24, Z+4	; 0x04
    b620:	95 81       	ldd	r25, Z+5	; 0x05
    b622:	68 1b       	sub	r22, r24
    b624:	79 0b       	sbc	r23, r25
    b626:	ec 81       	ldd	r30, Y+4	; 0x04
    b628:	fd 81       	ldd	r31, Y+5	; 0x05
    b62a:	36 96       	adiw	r30, 0x06	; 6
    b62c:	e4 0d       	add	r30, r4
    b62e:	f5 1d       	adc	r31, r5
    b630:	a2 81       	ldd	r26, Z+2	; 0x02
    b632:	b3 81       	ldd	r27, Z+3	; 0x03
    b634:	11 96       	adiw	r26, 0x01	; 1
    b636:	8d 91       	ld	r24, X+
    b638:	9c 91       	ld	r25, X
    b63a:	12 97       	sbiw	r26, 0x02	; 2
    b63c:	04 80       	ldd	r0, Z+4	; 0x04
    b63e:	f5 81       	ldd	r31, Z+5	; 0x05
    b640:	e0 2d       	mov	r30, r0
    b642:	8e 1b       	sub	r24, r30
    b644:	9f 0b       	sbc	r25, r31
    b646:	97 ff       	sbrs	r25, 7
    b648:	02 c0       	rjmp	.+4      	; 0xb64e <qtm_scroller_process+0x2fc>
    b64a:	80 e0       	ldi	r24, 0x00	; 0
    b64c:	90 e0       	ldi	r25, 0x00	; 0
    b64e:	86 17       	cp	r24, r22
    b650:	97 07       	cpc	r25, r23
    b652:	0c f4       	brge	.+2      	; 0xb656 <qtm_scroller_process+0x304>
    b654:	7b c1       	rjmp	.+758    	; 0xb94c <qtm_scroller_process+0x5fa>
    b656:	12 c0       	rjmp	.+36     	; 0xb67c <qtm_scroller_process+0x32a>
    b658:	82 9e       	mul	r8, r18
    b65a:	f0 01       	movw	r30, r0
    b65c:	83 9e       	mul	r8, r19
    b65e:	f0 0d       	add	r31, r0
    b660:	11 24       	eor	r1, r1
    b662:	36 97       	sbiw	r30, 0x06	; 6
    b664:	e4 0d       	add	r30, r4
    b666:	f5 1d       	adc	r31, r5
    b668:	a2 81       	ldd	r26, Z+2	; 0x02
    b66a:	b3 81       	ldd	r27, Z+3	; 0x03
    b66c:	11 96       	adiw	r26, 0x01	; 1
    b66e:	6d 91       	ld	r22, X+
    b670:	7c 91       	ld	r23, X
    b672:	12 97       	sbiw	r26, 0x02	; 2
    b674:	84 81       	ldd	r24, Z+4	; 0x04
    b676:	95 81       	ldd	r25, Z+5	; 0x05
    b678:	68 1b       	sub	r22, r24
    b67a:	79 0b       	sbc	r23, r25
    b67c:	90 e0       	ldi	r25, 0x00	; 0
    b67e:	77 ff       	sbrs	r23, 7
    b680:	02 c0       	rjmp	.+4      	; 0xb686 <qtm_scroller_process+0x334>
    b682:	60 e0       	ldi	r22, 0x00	; 0
    b684:	70 e0       	ldi	r23, 0x00	; 0
    b686:	a1 e0       	ldi	r26, 0x01	; 1
    b688:	ca 1a       	sub	r12, r26
    b68a:	d1 08       	sbc	r13, r1
    b68c:	2c 15       	cp	r18, r12
    b68e:	3d 05       	cpc	r19, r13
    b690:	81 f4       	brne	.+32     	; 0xb6b2 <qtm_scroller_process+0x360>
    b692:	b9 81       	ldd	r27, Y+1	; 0x01
    b694:	b1 30       	cpi	r27, 0x01	; 1
    b696:	29 f5       	brne	.+74     	; 0xb6e2 <qtm_scroller_process+0x390>
    b698:	d5 01       	movw	r26, r10
    b69a:	12 96       	adiw	r26, 0x02	; 2
    b69c:	ed 91       	ld	r30, X+
    b69e:	fc 91       	ld	r31, X
    b6a0:	13 97       	sbiw	r26, 0x03	; 3
    b6a2:	c1 80       	ldd	r12, Z+1	; 0x01
    b6a4:	d2 80       	ldd	r13, Z+2	; 0x02
    b6a6:	14 96       	adiw	r26, 0x04	; 4
    b6a8:	0d 90       	ld	r0, X+
    b6aa:	bc 91       	ld	r27, X
    b6ac:	a0 2d       	mov	r26, r0
    b6ae:	f6 01       	movw	r30, r12
    b6b0:	14 c0       	rjmp	.+40     	; 0xb6da <qtm_scroller_process+0x388>
    b6b2:	f9 01       	movw	r30, r18
    b6b4:	31 96       	adiw	r30, 0x01	; 1
    b6b6:	8e 9e       	mul	r8, r30
    b6b8:	d0 01       	movw	r26, r0
    b6ba:	8f 9e       	mul	r8, r31
    b6bc:	b0 0d       	add	r27, r0
    b6be:	11 24       	eor	r1, r1
    b6c0:	a4 0d       	add	r26, r4
    b6c2:	b5 1d       	adc	r27, r5
    b6c4:	12 96       	adiw	r26, 0x02	; 2
    b6c6:	ed 91       	ld	r30, X+
    b6c8:	fc 91       	ld	r31, X
    b6ca:	13 97       	sbiw	r26, 0x03	; 3
    b6cc:	01 80       	ldd	r0, Z+1	; 0x01
    b6ce:	f2 81       	ldd	r31, Z+2	; 0x02
    b6d0:	e0 2d       	mov	r30, r0
    b6d2:	14 96       	adiw	r26, 0x04	; 4
    b6d4:	0d 90       	ld	r0, X+
    b6d6:	bc 91       	ld	r27, X
    b6d8:	a0 2d       	mov	r26, r0
    b6da:	ea 1b       	sub	r30, r26
    b6dc:	fb 0b       	sbc	r31, r27
    b6de:	f7 ff       	sbrs	r31, 7
    b6e0:	02 c0       	rjmp	.+4      	; 0xb6e6 <qtm_scroller_process+0x394>
    b6e2:	e0 e0       	ldi	r30, 0x00	; 0
    b6e4:	f0 e0       	ldi	r31, 0x00	; 0
    b6e6:	bb 81       	ldd	r27, Y+3	; 0x03
    b6e8:	b0 31       	cpi	r27, 0x10	; 16
    b6ea:	28 f0       	brcs	.+10     	; 0xb6f6 <qtm_scroller_process+0x3a4>
    b6ec:	b4 e0       	ldi	r27, 0x04	; 4
    b6ee:	ab 2e       	mov	r10, r27
    b6f0:	88 e0       	ldi	r24, 0x08	; 8
    b6f2:	b8 2e       	mov	r11, r24
    b6f4:	03 c0       	rjmp	.+6      	; 0xb6fc <qtm_scroller_process+0x3aa>
    b6f6:	a1 2c       	mov	r10, r1
    b6f8:	ac e0       	ldi	r26, 0x0C	; 12
    b6fa:	ba 2e       	mov	r11, r26
    b6fc:	91 30       	cpi	r25, 0x01	; 1
    b6fe:	11 f4       	brne	.+4      	; 0xb704 <qtm_scroller_process+0x3b2>
    b700:	67 01       	movw	r12, r14
    b702:	03 c0       	rjmp	.+6      	; 0xb70a <qtm_scroller_process+0x3b8>
    b704:	24 1b       	sub	r18, r20
    b706:	35 0b       	sbc	r19, r21
    b708:	69 01       	movw	r12, r18
    b70a:	0b 2c       	mov	r0, r11
    b70c:	02 c0       	rjmp	.+4      	; 0xb712 <qtm_scroller_process+0x3c0>
    b70e:	cc 0c       	add	r12, r12
    b710:	dd 1c       	adc	r13, r13
    b712:	0a 94       	dec	r0
    b714:	e2 f7       	brpl	.-8      	; 0xb70e <qtm_scroller_process+0x3bc>
    b716:	6e 17       	cp	r22, r30
    b718:	7f 07       	cpc	r23, r31
    b71a:	a8 f0       	brcs	.+42     	; 0xb746 <qtm_scroller_process+0x3f4>
    b71c:	c1 01       	movw	r24, r2
    b71e:	8e 1b       	sub	r24, r30
    b720:	9f 0b       	sbc	r25, r31
    b722:	9c 01       	movw	r18, r24
    b724:	2e 1b       	sub	r18, r30
    b726:	3f 0b       	sbc	r19, r31
    b728:	62 0f       	add	r22, r18
    b72a:	73 1f       	adc	r23, r19
    b72c:	4b 2d       	mov	r20, r11
    b72e:	0e 94 41 59 	call	0xb282	; 0xb282 <divide>
    b732:	21 e0       	ldi	r18, 0x01	; 1
    b734:	30 e0       	ldi	r19, 0x00	; 0
    b736:	02 c0       	rjmp	.+4      	; 0xb73c <qtm_scroller_process+0x3ea>
    b738:	22 0f       	add	r18, r18
    b73a:	33 1f       	adc	r19, r19
    b73c:	ba 94       	dec	r11
    b73e:	e2 f7       	brpl	.-8      	; 0xb738 <qtm_scroller_process+0x3e6>
    b740:	82 1b       	sub	r24, r18
    b742:	93 0b       	sbc	r25, r19
    b744:	0c c0       	rjmp	.+24     	; 0xb75e <qtm_scroller_process+0x40c>
    b746:	cf 01       	movw	r24, r30
    b748:	86 1b       	sub	r24, r22
    b74a:	97 0b       	sbc	r25, r23
    b74c:	f1 01       	movw	r30, r2
    b74e:	e6 1b       	sub	r30, r22
    b750:	f7 0b       	sbc	r31, r23
    b752:	bf 01       	movw	r22, r30
    b754:	68 0f       	add	r22, r24
    b756:	79 1f       	adc	r23, r25
    b758:	4b 2d       	mov	r20, r11
    b75a:	0e 94 41 59 	call	0xb282	; 0xb282 <divide>
    b75e:	8c 0d       	add	r24, r12
    b760:	9d 1d       	adc	r25, r13
    b762:	fb 81       	ldd	r31, Y+3	; 0x03
    b764:	f3 30       	cpi	r31, 0x03	; 3
    b766:	60 f0       	brcs	.+24     	; 0xb780 <qtm_scroller_process+0x42e>
    b768:	29 81       	ldd	r18, Y+1	; 0x01
    b76a:	21 30       	cpi	r18, 0x01	; 1
    b76c:	19 f4       	brne	.+6      	; 0xb774 <qtm_scroller_process+0x422>
    b76e:	4a 2d       	mov	r20, r10
    b770:	b7 01       	movw	r22, r14
    b772:	04 c0       	rjmp	.+8      	; 0xb77c <qtm_scroller_process+0x42a>
    b774:	b7 01       	movw	r22, r14
    b776:	61 50       	subi	r22, 0x01	; 1
    b778:	71 09       	sbc	r23, r1
    b77a:	4a 2d       	mov	r20, r10
    b77c:	0e 94 41 59 	call	0xb282	; 0xb282 <divide>
    b780:	81 30       	cpi	r24, 0x01	; 1
    b782:	30 e1       	ldi	r19, 0x10	; 16
    b784:	93 07       	cpc	r25, r19
    b786:	10 f0       	brcs	.+4      	; 0xb78c <qtm_scroller_process+0x43a>
    b788:	80 e0       	ldi	r24, 0x00	; 0
    b78a:	90 e1       	ldi	r25, 0x10	; 16
    b78c:	e9 80       	ldd	r14, Y+1	; 0x01
    b78e:	e1 10       	cpse	r14, r1
    b790:	17 c0       	rjmp	.+46     	; 0xb7c0 <qtm_scroller_process+0x46e>
    b792:	1f 70       	andi	r17, 0x0F	; 15
    b794:	a9 f0       	breq	.+42     	; 0xb7c0 <qtm_scroller_process+0x46e>
    b796:	28 e2       	ldi	r18, 0x28	; 40
    b798:	12 9f       	mul	r17, r18
    b79a:	a0 01       	movw	r20, r0
    b79c:	11 24       	eor	r1, r1
    b79e:	84 17       	cp	r24, r20
    b7a0:	95 07       	cpc	r25, r21
    b7a2:	18 f0       	brcs	.+6      	; 0xb7aa <qtm_scroller_process+0x458>
    b7a4:	84 1b       	sub	r24, r20
    b7a6:	95 0b       	sbc	r25, r21
    b7a8:	02 c0       	rjmp	.+4      	; 0xb7ae <qtm_scroller_process+0x45c>
    b7aa:	80 e0       	ldi	r24, 0x00	; 0
    b7ac:	90 e0       	ldi	r25, 0x00	; 0
    b7ae:	44 0f       	add	r20, r20
    b7b0:	55 1f       	adc	r21, r21
    b7b2:	60 e0       	ldi	r22, 0x00	; 0
    b7b4:	70 e1       	ldi	r23, 0x10	; 16
    b7b6:	64 1b       	sub	r22, r20
    b7b8:	75 0b       	sbc	r23, r21
    b7ba:	4c e0       	ldi	r20, 0x0C	; 12
    b7bc:	0e 94 41 59 	call	0xb282	; 0xb282 <divide>
    b7c0:	2c e0       	ldi	r18, 0x0C	; 12
    b7c2:	30 e0       	ldi	r19, 0x00	; 0
    b7c4:	ec 84       	ldd	r14, Y+12	; 0x0c
    b7c6:	2e 19       	sub	r18, r14
    b7c8:	31 09       	sbc	r19, r1
    b7ca:	61 e0       	ldi	r22, 0x01	; 1
    b7cc:	70 e0       	ldi	r23, 0x00	; 0
    b7ce:	02 c0       	rjmp	.+4      	; 0xb7d4 <qtm_scroller_process+0x482>
    b7d0:	66 0f       	add	r22, r22
    b7d2:	77 1f       	adc	r23, r23
    b7d4:	ea 94       	dec	r14
    b7d6:	e2 f7       	brpl	.-8      	; 0xb7d0 <qtm_scroller_process+0x47e>
    b7d8:	fb 01       	movw	r30, r22
    b7da:	31 97       	sbiw	r30, 0x01	; 1
    b7dc:	02 c0       	rjmp	.+4      	; 0xb7e2 <qtm_scroller_process+0x490>
    b7de:	96 95       	lsr	r25
    b7e0:	87 95       	ror	r24
    b7e2:	2a 95       	dec	r18
    b7e4:	e2 f7       	brpl	.-8      	; 0xb7de <qtm_scroller_process+0x48c>
    b7e6:	e8 17       	cp	r30, r24
    b7e8:	f9 07       	cpc	r31, r25
    b7ea:	08 f4       	brcc	.+2      	; 0xb7ee <qtm_scroller_process+0x49c>
    b7ec:	cf 01       	movw	r24, r30
    b7ee:	fd 84       	ldd	r15, Y+13	; 0x0d
    b7f0:	ff 20       	and	r15, r15
    b7f2:	d9 f1       	breq	.+118    	; 0xb86a <qtm_scroller_process+0x518>
    b7f4:	ae 85       	ldd	r26, Y+14	; 0x0e
    b7f6:	bf 85       	ldd	r27, Y+15	; 0x0f
    b7f8:	13 96       	adiw	r26, 0x03	; 3
    b7fa:	4d 91       	ld	r20, X+
    b7fc:	5c 91       	ld	r21, X
    b7fe:	14 97       	sbiw	r26, 0x04	; 4
    b800:	9c 01       	movw	r18, r24
    b802:	24 1b       	sub	r18, r20
    b804:	35 0b       	sbc	r19, r21
    b806:	b9 81       	ldd	r27, Y+1	; 0x01
    b808:	b1 30       	cpi	r27, 0x01	; 1
    b80a:	a9 f4       	brne	.+42     	; 0xb836 <qtm_scroller_process+0x4e4>
    b80c:	db 01       	movw	r26, r22
    b80e:	b6 95       	lsr	r27
    b810:	a7 95       	ror	r26
    b812:	37 ff       	sbrs	r19, 7
    b814:	0a c0       	rjmp	.+20     	; 0xb82a <qtm_scroller_process+0x4d8>
    b816:	b1 95       	neg	r27
    b818:	a1 95       	neg	r26
    b81a:	b1 09       	sbc	r27, r1
    b81c:	2a 17       	cp	r18, r26
    b81e:	3b 07       	cpc	r19, r27
    b820:	0c f0       	brlt	.+2      	; 0xb824 <qtm_scroller_process+0x4d2>
    b822:	96 c0       	rjmp	.+300    	; 0xb950 <qtm_scroller_process+0x5fe>
    b824:	26 0f       	add	r18, r22
    b826:	37 1f       	adc	r19, r23
    b828:	06 c0       	rjmp	.+12     	; 0xb836 <qtm_scroller_process+0x4e4>
    b82a:	a2 17       	cp	r26, r18
    b82c:	b3 07       	cpc	r27, r19
    b82e:	0c f0       	brlt	.+2      	; 0xb832 <qtm_scroller_process+0x4e0>
    b830:	95 c0       	rjmp	.+298    	; 0xb95c <qtm_scroller_process+0x60a>
    b832:	26 1b       	sub	r18, r22
    b834:	37 0b       	sbc	r19, r23
    b836:	21 30       	cpi	r18, 0x01	; 1
    b838:	31 05       	cpc	r19, r1
    b83a:	c1 f0       	breq	.+48     	; 0xb86c <qtm_scroller_process+0x51a>
    b83c:	2f 3f       	cpi	r18, 0xFF	; 255
    b83e:	6f ef       	ldi	r22, 0xFF	; 255
    b840:	36 07       	cpc	r19, r22
    b842:	a1 f0       	breq	.+40     	; 0xb86c <qtm_scroller_process+0x51a>
    b844:	37 ff       	sbrs	r19, 7
    b846:	09 c0       	rjmp	.+18     	; 0xb85a <qtm_scroller_process+0x508>
    b848:	31 95       	neg	r19
    b84a:	21 95       	neg	r18
    b84c:	31 09       	sbc	r19, r1
    b84e:	36 95       	lsr	r19
    b850:	27 95       	ror	r18
    b852:	31 95       	neg	r19
    b854:	21 95       	neg	r18
    b856:	31 09       	sbc	r19, r1
    b858:	02 c0       	rjmp	.+4      	; 0xb85e <qtm_scroller_process+0x50c>
    b85a:	36 95       	lsr	r19
    b85c:	27 95       	ror	r18
    b85e:	24 0f       	add	r18, r20
    b860:	35 1f       	adc	r19, r21
    b862:	af 01       	movw	r20, r30
    b864:	42 23       	and	r20, r18
    b866:	53 23       	and	r21, r19
    b868:	01 c0       	rjmp	.+2      	; 0xb86c <qtm_scroller_process+0x51a>
    b86a:	ac 01       	movw	r20, r24
    b86c:	ae 85       	ldd	r26, Y+14	; 0x0e
    b86e:	bf 85       	ldd	r27, Y+15	; 0x0f
    b870:	13 96       	adiw	r26, 0x03	; 3
    b872:	8d 93       	st	X+, r24
    b874:	9c 93       	st	X, r25
    b876:	14 97       	sbiw	r26, 0x04	; 4
    b878:	f3 01       	movw	r30, r6
    b87a:	a5 81       	ldd	r26, Z+5	; 0x05
    b87c:	ee 85       	ldd	r30, Y+14	; 0x0e
    b87e:	ff 85       	ldd	r31, Y+15	; 0x0f
    b880:	65 81       	ldd	r22, Z+5	; 0x05
    b882:	76 81       	ldd	r23, Z+6	; 0x06
    b884:	f3 01       	movw	r30, r6
    b886:	24 81       	ldd	r18, Z+4	; 0x04
    b888:	ca 01       	movw	r24, r20
    b88a:	86 1b       	sub	r24, r22
    b88c:	97 0b       	sbc	r25, r23
    b88e:	30 81       	ld	r19, Z
    b890:	31 30       	cpi	r19, 0x01	; 1
    b892:	e1 f4       	brne	.+56     	; 0xb8cc <qtm_scroller_process+0x57a>
    b894:	22 95       	swap	r18
    b896:	2f 70       	andi	r18, 0x0F	; 15
    b898:	e1 e0       	ldi	r30, 0x01	; 1
    b89a:	f0 e0       	ldi	r31, 0x00	; 0
    b89c:	02 c0       	rjmp	.+4      	; 0xb8a2 <qtm_scroller_process+0x550>
    b89e:	ee 0f       	add	r30, r30
    b8a0:	ff 1f       	adc	r31, r31
    b8a2:	2a 95       	dec	r18
    b8a4:	e2 f7       	brpl	.-8      	; 0xb89e <qtm_scroller_process+0x54c>
    b8a6:	9f 01       	movw	r18, r30
    b8a8:	36 95       	lsr	r19
    b8aa:	27 95       	ror	r18
    b8ac:	97 ff       	sbrs	r25, 7
    b8ae:	09 c0       	rjmp	.+18     	; 0xb8c2 <qtm_scroller_process+0x570>
    b8b0:	31 95       	neg	r19
    b8b2:	21 95       	neg	r18
    b8b4:	31 09       	sbc	r19, r1
    b8b6:	82 17       	cp	r24, r18
    b8b8:	93 07       	cpc	r25, r19
    b8ba:	54 f4       	brge	.+20     	; 0xb8d0 <qtm_scroller_process+0x57e>
    b8bc:	8e 0f       	add	r24, r30
    b8be:	9f 1f       	adc	r25, r31
    b8c0:	05 c0       	rjmp	.+10     	; 0xb8cc <qtm_scroller_process+0x57a>
    b8c2:	28 17       	cp	r18, r24
    b8c4:	39 07       	cpc	r19, r25
    b8c6:	ac f4       	brge	.+42     	; 0xb8f2 <qtm_scroller_process+0x5a0>
    b8c8:	8e 1b       	sub	r24, r30
    b8ca:	9f 0b       	sbc	r25, r31
    b8cc:	97 ff       	sbrs	r25, 7
    b8ce:	11 c0       	rjmp	.+34     	; 0xb8f2 <qtm_scroller_process+0x5a0>
    b8d0:	91 95       	neg	r25
    b8d2:	81 95       	neg	r24
    b8d4:	91 09       	sbc	r25, r1
    b8d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    b8d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    b8da:	22 81       	ldd	r18, Z+2	; 0x02
    b8dc:	30 e0       	ldi	r19, 0x00	; 0
    b8de:	28 17       	cp	r18, r24
    b8e0:	39 07       	cpc	r19, r25
    b8e2:	14 f0       	brlt	.+4      	; 0xb8e8 <qtm_scroller_process+0x596>
    b8e4:	80 e0       	ldi	r24, 0x00	; 0
    b8e6:	1a c0       	rjmp	.+52     	; 0xb91c <qtm_scroller_process+0x5ca>
    b8e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    b8ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    b8ec:	a1 83       	std	Z+1, r26	; 0x01
    b8ee:	12 82       	std	Z+2, r1	; 0x02
    b8f0:	0b c0       	rjmp	.+22     	; 0xb908 <qtm_scroller_process+0x5b6>
    b8f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    b8f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    b8f6:	21 81       	ldd	r18, Z+1	; 0x01
    b8f8:	30 e0       	ldi	r19, 0x00	; 0
    b8fa:	28 17       	cp	r18, r24
    b8fc:	39 07       	cpc	r19, r25
    b8fe:	94 f7       	brge	.-28     	; 0xb8e4 <qtm_scroller_process+0x592>
    b900:	ee 85       	ldd	r30, Y+14	; 0x0e
    b902:	ff 85       	ldd	r31, Y+15	; 0x0f
    b904:	11 82       	std	Z+1, r1	; 0x01
    b906:	a2 83       	std	Z+2, r26	; 0x02
    b908:	46 17       	cp	r20, r22
    b90a:	57 07       	cpc	r21, r23
    b90c:	59 f3       	breq	.-42     	; 0xb8e4 <qtm_scroller_process+0x592>
    b90e:	ae 85       	ldd	r26, Y+14	; 0x0e
    b910:	bf 85       	ldd	r27, Y+15	; 0x0f
    b912:	15 96       	adiw	r26, 0x05	; 5
    b914:	4d 93       	st	X+, r20
    b916:	5c 93       	st	X, r21
    b918:	16 97       	sbiw	r26, 0x06	; 6
    b91a:	82 e0       	ldi	r24, 0x02	; 2
    b91c:	81 68       	ori	r24, 0x81	; 129
    b91e:	02 c0       	rjmp	.+4      	; 0xb924 <qtm_scroller_process+0x5d2>
    b920:	02 e0       	ldi	r16, 0x02	; 2
    b922:	80 e0       	ldi	r24, 0x00	; 0
    b924:	ee 85       	ldd	r30, Y+14	; 0x0e
    b926:	ff 85       	ldd	r31, Y+15	; 0x0f
    b928:	80 83       	st	Z, r24
    b92a:	81 78       	andi	r24, 0x81	; 129
    b92c:	ea 80       	ldd	r14, Y+2	; 0x02
    b92e:	e8 2a       	or	r14, r24
    b930:	ea 82       	std	Y+2, r14	; 0x02
    b932:	93 94       	inc	r9
    b934:	46 cd       	rjmp	.-1396   	; 0xb3c2 <qtm_scroller_process+0x70>
    b936:	ed 91       	ld	r30, X+
    b938:	fc 91       	ld	r31, X
    b93a:	ea 80       	ldd	r14, Y+2	; 0x02
    b93c:	e0 82       	st	Z, r14
    b93e:	13 c0       	rjmp	.+38     	; 0xb966 <qtm_scroller_process+0x614>
    b940:	0b e0       	ldi	r16, 0x0B	; 11
    b942:	11 c0       	rjmp	.+34     	; 0xb966 <qtm_scroller_process+0x614>
    b944:	60 e0       	ldi	r22, 0x00	; 0
    b946:	70 e0       	ldi	r23, 0x00	; 0
    b948:	90 e0       	ldi	r25, 0x00	; 0
    b94a:	9d ce       	rjmp	.-710    	; 0xb686 <qtm_scroller_process+0x334>
    b94c:	91 e0       	ldi	r25, 0x01	; 1
    b94e:	9b ce       	rjmp	.-714    	; 0xb686 <qtm_scroller_process+0x334>
    b950:	2f 3f       	cpi	r18, 0xFF	; 255
    b952:	6f ef       	ldi	r22, 0xFF	; 255
    b954:	36 07       	cpc	r19, r22
    b956:	09 f0       	breq	.+2      	; 0xb95a <qtm_scroller_process+0x608>
    b958:	77 cf       	rjmp	.-274    	; 0xb848 <qtm_scroller_process+0x4f6>
    b95a:	88 cf       	rjmp	.-240    	; 0xb86c <qtm_scroller_process+0x51a>
    b95c:	21 30       	cpi	r18, 0x01	; 1
    b95e:	31 05       	cpc	r19, r1
    b960:	09 f0       	breq	.+2      	; 0xb964 <qtm_scroller_process+0x612>
    b962:	70 cf       	rjmp	.-288    	; 0xb844 <qtm_scroller_process+0x4f2>
    b964:	83 cf       	rjmp	.-250    	; 0xb86c <qtm_scroller_process+0x51a>
    b966:	80 2f       	mov	r24, r16
    b968:	61 96       	adiw	r28, 0x11	; 17
    b96a:	cd bf       	out	0x3d, r28	; 61
    b96c:	de bf       	out	0x3e, r29	; 62
    b96e:	df 91       	pop	r29
    b970:	cf 91       	pop	r28
    b972:	1f 91       	pop	r17
    b974:	0f 91       	pop	r16
    b976:	ff 90       	pop	r15
    b978:	ef 90       	pop	r14
    b97a:	df 90       	pop	r13
    b97c:	cf 90       	pop	r12
    b97e:	bf 90       	pop	r11
    b980:	af 90       	pop	r10
    b982:	9f 90       	pop	r9
    b984:	8f 90       	pop	r8
    b986:	7f 90       	pop	r7
    b988:	6f 90       	pop	r6
    b98a:	5f 90       	pop	r5
    b98c:	4f 90       	pop	r4
    b98e:	3f 90       	pop	r3
    b990:	2f 90       	pop	r2
    b992:	08 95       	ret

0000b994 <charge_share_test>:
    b994:	a0 91 fb 68 	lds	r26, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr>
    b998:	b0 91 fc 68 	lds	r27, 0x68FC	; 0x8068fc <qtm_acquisition_control_working_set_ptr+0x1>
    b99c:	25 e0       	ldi	r18, 0x05	; 5
    b99e:	ac 01       	movw	r20, r24
    b9a0:	24 9f       	mul	r18, r20
    b9a2:	c0 01       	movw	r24, r0
    b9a4:	25 9f       	mul	r18, r21
    b9a6:	90 0d       	add	r25, r0
    b9a8:	11 24       	eor	r1, r1
    b9aa:	14 96       	adiw	r26, 0x04	; 4
    b9ac:	ed 91       	ld	r30, X+
    b9ae:	fc 91       	ld	r31, X
    b9b0:	15 97       	sbiw	r26, 0x05	; 5
    b9b2:	e8 0f       	add	r30, r24
    b9b4:	f9 1f       	adc	r31, r25
    b9b6:	81 81       	ldd	r24, Z+1	; 0x01
    b9b8:	92 81       	ldd	r25, Z+2	; 0x02
    b9ba:	86 17       	cp	r24, r22
    b9bc:	97 07       	cpc	r25, r23
    b9be:	81 f1       	breq	.+96     	; 0xba20 <charge_share_test+0x8c>
    b9c0:	86 17       	cp	r24, r22
    b9c2:	97 07       	cpc	r25, r23
    b9c4:	18 f4       	brcc	.+6      	; 0xb9cc <charge_share_test+0x38>
    b9c6:	68 1b       	sub	r22, r24
    b9c8:	79 0b       	sbc	r23, r25
    b9ca:	04 c0       	rjmp	.+8      	; 0xb9d4 <charge_share_test+0x40>
    b9cc:	9c 01       	movw	r18, r24
    b9ce:	26 1b       	sub	r18, r22
    b9d0:	37 0b       	sbc	r19, r23
    b9d2:	b9 01       	movw	r22, r18
    b9d4:	ed 91       	ld	r30, X+
    b9d6:	fc 91       	ld	r31, X
    b9d8:	82 81       	ldd	r24, Z+2	; 0x02
    b9da:	80 34       	cpi	r24, 0x40	; 64
    b9dc:	11 f4       	brne	.+4      	; 0xb9e2 <charge_share_test+0x4e>
    b9de:	76 95       	lsr	r23
    b9e0:	67 95       	ror	r22
    b9e2:	65 38       	cpi	r22, 0x85	; 133
    b9e4:	71 05       	cpc	r23, r1
    b9e6:	d0 f4       	brcc	.+52     	; 0xba1c <charge_share_test+0x88>
    b9e8:	66 30       	cpi	r22, 0x06	; 6
    b9ea:	71 05       	cpc	r23, r1
    b9ec:	c8 f0       	brcs	.+50     	; 0xba20 <charge_share_test+0x8c>
    b9ee:	e3 81       	ldd	r30, Z+3	; 0x03
    b9f0:	e0 73       	andi	r30, 0x30	; 48
    b9f2:	f0 e0       	ldi	r31, 0x00	; 0
    b9f4:	83 e0       	ldi	r24, 0x03	; 3
    b9f6:	f6 95       	lsr	r31
    b9f8:	e7 95       	ror	r30
    b9fa:	8a 95       	dec	r24
    b9fc:	e1 f7       	brne	.-8      	; 0xb9f6 <charge_share_test+0x62>
    b9fe:	e0 53       	subi	r30, 0x30	; 48
    ba00:	fc 49       	sbci	r31, 0x9C	; 156
    ba02:	80 81       	ld	r24, Z
    ba04:	91 81       	ldd	r25, Z+1	; 0x01
    ba06:	68 9f       	mul	r22, r24
    ba08:	90 01       	movw	r18, r0
    ba0a:	69 9f       	mul	r22, r25
    ba0c:	30 0d       	add	r19, r0
    ba0e:	78 9f       	mul	r23, r24
    ba10:	30 0d       	add	r19, r0
    ba12:	11 24       	eor	r1, r1
    ba14:	81 e0       	ldi	r24, 0x01	; 1
    ba16:	23 2b       	or	r18, r19
    ba18:	21 f4       	brne	.+8      	; 0xba22 <charge_share_test+0x8e>
    ba1a:	02 c0       	rjmp	.+4      	; 0xba20 <charge_share_test+0x8c>
    ba1c:	81 e0       	ldi	r24, 0x01	; 1
    ba1e:	08 95       	ret
    ba20:	80 e0       	ldi	r24, 0x00	; 0
    ba22:	08 95       	ret

0000ba24 <select_next_channel_to_measure>:
    ba24:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    ba28:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    ba2c:	a0 91 fb 68 	lds	r26, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr>
    ba30:	b0 91 fc 68 	lds	r27, 0x68FC	; 0x8068fc <qtm_acquisition_control_working_set_ptr+0x1>
    ba34:	ed 91       	ld	r30, X+
    ba36:	fc 91       	ld	r31, X
    ba38:	11 97       	sbiw	r26, 0x01	; 1
    ba3a:	40 81       	ld	r20, Z
    ba3c:	51 81       	ldd	r21, Z+1	; 0x01
    ba3e:	25 e0       	ldi	r18, 0x05	; 5
    ba40:	28 9f       	mul	r18, r24
    ba42:	b0 01       	movw	r22, r0
    ba44:	29 9f       	mul	r18, r25
    ba46:	70 0d       	add	r23, r0
    ba48:	11 24       	eor	r1, r1
    ba4a:	20 e0       	ldi	r18, 0x00	; 0
    ba4c:	30 e0       	ldi	r19, 0x00	; 0
    ba4e:	84 17       	cp	r24, r20
    ba50:	95 07       	cpc	r25, r21
    ba52:	a8 f4       	brcc	.+42     	; 0xba7e <select_next_channel_to_measure+0x5a>
    ba54:	14 96       	adiw	r26, 0x04	; 4
    ba56:	ed 91       	ld	r30, X+
    ba58:	fc 91       	ld	r31, X
    ba5a:	15 97       	sbiw	r26, 0x05	; 5
    ba5c:	e2 0f       	add	r30, r18
    ba5e:	f3 1f       	adc	r31, r19
    ba60:	e6 0f       	add	r30, r22
    ba62:	f7 1f       	adc	r31, r23
    ba64:	e0 81       	ld	r30, Z
    ba66:	2b 5f       	subi	r18, 0xFB	; 251
    ba68:	3f 4f       	sbci	r19, 0xFF	; 255
    ba6a:	e0 fd       	sbrc	r30, 0
    ba6c:	02 c0       	rjmp	.+4      	; 0xba72 <select_next_channel_to_measure+0x4e>
    ba6e:	01 96       	adiw	r24, 0x01	; 1
    ba70:	ee cf       	rjmp	.-36     	; 0xba4e <select_next_channel_to_measure+0x2a>
    ba72:	80 93 60 67 	sts	0x6760, r24	; 0x806760 <current_measure_channel>
    ba76:	90 93 61 67 	sts	0x6761, r25	; 0x806761 <current_measure_channel+0x1>
    ba7a:	80 e0       	ldi	r24, 0x00	; 0
    ba7c:	08 95       	ret
    ba7e:	10 92 60 67 	sts	0x6760, r1	; 0x806760 <current_measure_channel>
    ba82:	10 92 61 67 	sts	0x6761, r1	; 0x806761 <current_measure_channel+0x1>
    ba86:	81 e0       	ldi	r24, 0x01	; 1
    ba88:	08 95       	ret

0000ba8a <qtm_measure_node>:
    ba8a:	af 92       	push	r10
    ba8c:	bf 92       	push	r11
    ba8e:	cf 92       	push	r12
    ba90:	df 92       	push	r13
    ba92:	ef 92       	push	r14
    ba94:	ff 92       	push	r15
    ba96:	0f 93       	push	r16
    ba98:	1f 93       	push	r17
    ba9a:	cf 93       	push	r28
    ba9c:	df 93       	push	r29
    ba9e:	7c 01       	movw	r14, r24
    baa0:	e0 91 fb 68 	lds	r30, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr>
    baa4:	f0 91 fc 68 	lds	r31, 0x68FC	; 0x8068fc <qtm_acquisition_control_working_set_ptr+0x1>
    baa8:	84 e1       	ldi	r24, 0x14	; 20
    baaa:	8e 9d       	mul	r24, r14
    baac:	e0 01       	movw	r28, r0
    baae:	8f 9d       	mul	r24, r15
    bab0:	d0 0d       	add	r29, r0
    bab2:	11 24       	eor	r1, r1
    bab4:	a2 81       	ldd	r26, Z+2	; 0x02
    bab6:	b3 81       	ldd	r27, Z+3	; 0x03
    bab8:	ac 0f       	add	r26, r28
    baba:	bd 1f       	adc	r27, r29
    babc:	18 96       	adiw	r26, 0x08	; 8
    babe:	2c 91       	ld	r18, X
    bac0:	18 97       	sbiw	r26, 0x08	; 8
    bac2:	19 96       	adiw	r26, 0x09	; 9
    bac4:	3c 91       	ld	r19, X
    bac6:	19 97       	sbiw	r26, 0x09	; 9
    bac8:	1a 96       	adiw	r26, 0x0a	; 10
    baca:	4c 91       	ld	r20, X
    bacc:	1a 97       	sbiw	r26, 0x0a	; 10
    bace:	1b 96       	adiw	r26, 0x0b	; 11
    bad0:	5c 91       	ld	r21, X
    bad2:	1b 97       	sbiw	r26, 0x0b	; 11
    bad4:	1c 96       	adiw	r26, 0x0c	; 12
    bad6:	6c 91       	ld	r22, X
    bad8:	1c 97       	sbiw	r26, 0x0c	; 12
    bada:	1d 96       	adiw	r26, 0x0d	; 13
    badc:	7c 91       	ld	r23, X
    bade:	1d 97       	sbiw	r26, 0x0d	; 13
    bae0:	1e 96       	adiw	r26, 0x0e	; 14
    bae2:	8c 91       	ld	r24, X
    bae4:	1e 97       	sbiw	r26, 0x0e	; 14
    bae6:	1f 96       	adiw	r26, 0x0f	; 15
    bae8:	9c 91       	ld	r25, X
    baea:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7f07f0>
    baee:	08 e0       	ldi	r16, 0x08	; 8
    baf0:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    baf4:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7f07f1>
    baf8:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bafc:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7f07f2>
    bb00:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb04:	20 93 f3 07 	sts	0x07F3, r18	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7f07f3>
    bb08:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb0c:	20 93 f4 07 	sts	0x07F4, r18	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7f07f4>
    bb10:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb14:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7f07f5>
    bb18:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    bb1c:	a0 81       	ld	r26, Z
    bb1e:	b1 81       	ldd	r27, Z+1	; 0x01
    bb20:	12 96       	adiw	r26, 0x02	; 2
    bb22:	8c 91       	ld	r24, X
    bb24:	80 38       	cpi	r24, 0x80	; 128
    bb26:	09 f4       	brne	.+2      	; 0xbb2a <qtm_measure_node+0xa0>
    bb28:	4f c0       	rjmp	.+158    	; 0xbbc8 <qtm_measure_node+0x13e>
    bb2a:	a2 81       	ldd	r26, Z+2	; 0x02
    bb2c:	b3 81       	ldd	r27, Z+3	; 0x03
    bb2e:	ac 0f       	add	r26, r28
    bb30:	bd 1f       	adc	r27, r29
    bb32:	cc 90       	ld	r12, X
    bb34:	11 96       	adiw	r26, 0x01	; 1
    bb36:	3c 91       	ld	r19, X
    bb38:	11 97       	sbiw	r26, 0x01	; 1
    bb3a:	12 96       	adiw	r26, 0x02	; 2
    bb3c:	4c 91       	ld	r20, X
    bb3e:	12 97       	sbiw	r26, 0x02	; 2
    bb40:	13 96       	adiw	r26, 0x03	; 3
    bb42:	5c 91       	ld	r21, X
    bb44:	13 97       	sbiw	r26, 0x03	; 3
    bb46:	14 96       	adiw	r26, 0x04	; 4
    bb48:	6c 91       	ld	r22, X
    bb4a:	14 97       	sbiw	r26, 0x04	; 4
    bb4c:	15 96       	adiw	r26, 0x05	; 5
    bb4e:	7c 91       	ld	r23, X
    bb50:	15 97       	sbiw	r26, 0x05	; 5
    bb52:	16 96       	adiw	r26, 0x06	; 6
    bb54:	8c 91       	ld	r24, X
    bb56:	16 97       	sbiw	r26, 0x06	; 6
    bb58:	17 96       	adiw	r26, 0x07	; 7
    bb5a:	9c 91       	ld	r25, X
    bb5c:	c0 92 e8 07 	sts	0x07E8, r12	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7f07e8>
    bb60:	2c 2d       	mov	r18, r12
    bb62:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb66:	d2 2e       	mov	r13, r18
    bb68:	20 93 e9 07 	sts	0x07E9, r18	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7f07e9>
    bb6c:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb70:	12 2f       	mov	r17, r18
    bb72:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7f07ea>
    bb76:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb7a:	a2 2e       	mov	r10, r18
    bb7c:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7f07eb>
    bb80:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb84:	b2 2e       	mov	r11, r18
    bb86:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7f07ec>
    bb8a:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    bb8e:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7f07ed>
    bb92:	80 81       	ld	r24, Z
    bb94:	91 81       	ldd	r25, Z+1	; 0x01
    bb96:	dc 01       	movw	r26, r24
    bb98:	12 96       	adiw	r26, 0x02	; 2
    bb9a:	8c 91       	ld	r24, X
    bb9c:	81 38       	cpi	r24, 0x81	; 129
    bb9e:	21 f4       	brne	.+8      	; 0xbba8 <qtm_measure_node+0x11e>
    bba0:	81 e0       	ldi	r24, 0x01	; 1
    bba2:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    bba6:	10 c0       	rjmp	.+32     	; 0xbbc8 <qtm_measure_node+0x13e>
    bba8:	82 38       	cpi	r24, 0x82	; 130
    bbaa:	71 f4       	brne	.+28     	; 0xbbc8 <qtm_measure_node+0x13e>
    bbac:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    bbb0:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7f07f8>
    bbb4:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7f07f9>
    bbb8:	10 93 fa 07 	sts	0x07FA, r17	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7f07fa>
    bbbc:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7f07fb>
    bbc0:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7f07fc>
    bbc4:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7f07fd>
    bbc8:	25 e0       	ldi	r18, 0x05	; 5
    bbca:	2e 9d       	mul	r18, r14
    bbcc:	c0 01       	movw	r24, r0
    bbce:	2f 9d       	mul	r18, r15
    bbd0:	90 0d       	add	r25, r0
    bbd2:	11 24       	eor	r1, r1
    bbd4:	a4 81       	ldd	r26, Z+4	; 0x04
    bbd6:	b5 81       	ldd	r27, Z+5	; 0x05
    bbd8:	a8 0f       	add	r26, r24
    bbda:	b9 1f       	adc	r27, r25
    bbdc:	13 96       	adiw	r26, 0x03	; 3
    bbde:	2d 91       	ld	r18, X+
    bbe0:	3c 91       	ld	r19, X
    bbe2:	14 97       	sbiw	r26, 0x04	; 4
    bbe4:	a9 01       	movw	r20, r18
    bbe6:	53 70       	andi	r21, 0x03	; 3
    bbe8:	40 93 e4 07 	sts	0x07E4, r20	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7f07e4>
    bbec:	50 93 e5 07 	sts	0x07E5, r21	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7f07e5>
    bbf0:	37 fd       	sbrc	r19, 7
    bbf2:	03 c0       	rjmp	.+6      	; 0xbbfa <qtm_measure_node+0x170>
    bbf4:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7f07ca>
    bbf8:	03 c0       	rjmp	.+6      	; 0xbc00 <qtm_measure_node+0x176>
    bbfa:	21 e0       	ldi	r18, 0x01	; 1
    bbfc:	20 93 ca 07 	sts	0x07CA, r18	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7f07ca>
    bc00:	a4 81       	ldd	r26, Z+4	; 0x04
    bc02:	b5 81       	ldd	r27, Z+5	; 0x05
    bc04:	a8 0f       	add	r26, r24
    bc06:	b9 1f       	adc	r27, r25
    bc08:	2c 91       	ld	r18, X
    bc0a:	21 ff       	sbrs	r18, 1
    bc0c:	02 c0       	rjmp	.+4      	; 0xbc12 <qtm_measure_node+0x188>
    bc0e:	25 e0       	ldi	r18, 0x05	; 5
    bc10:	2c 93       	st	X, r18
    bc12:	24 81       	ldd	r18, Z+4	; 0x04
    bc14:	35 81       	ldd	r19, Z+5	; 0x05
    bc16:	d9 01       	movw	r26, r18
    bc18:	a8 0f       	add	r26, r24
    bc1a:	b9 1f       	adc	r27, r25
    bc1c:	8c 91       	ld	r24, X
    bc1e:	8c 71       	andi	r24, 0x1C	; 28
    bc20:	69 f4       	brne	.+26     	; 0xbc3c <qtm_measure_node+0x1b2>
    bc22:	a2 81       	ldd	r26, Z+2	; 0x02
    bc24:	b3 81       	ldd	r27, Z+3	; 0x03
    bc26:	ac 0f       	add	r26, r28
    bc28:	bd 1f       	adc	r27, r29
    bc2a:	52 96       	adiw	r26, 0x12	; 18
    bc2c:	ac 91       	ld	r26, X
    bc2e:	a2 95       	swap	r26
    bc30:	af 70       	andi	r26, 0x0F	; 15
    bc32:	b0 e0       	ldi	r27, 0x00	; 0
    bc34:	a8 52       	subi	r26, 0x28	; 40
    bc36:	bc 49       	sbci	r27, 0x9C	; 156
    bc38:	8c 91       	ld	r24, X
    bc3a:	01 c0       	rjmp	.+2      	; 0xbc3e <qtm_measure_node+0x1b4>
    bc3c:	8f e1       	ldi	r24, 0x1F	; 31
    bc3e:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7f07e6>
    bc42:	a2 81       	ldd	r26, Z+2	; 0x02
    bc44:	b3 81       	ldd	r27, Z+3	; 0x03
    bc46:	ac 0f       	add	r26, r28
    bc48:	bd 1f       	adc	r27, r29
    bc4a:	50 96       	adiw	r26, 0x10	; 16
    bc4c:	8c 91       	ld	r24, X
    bc4e:	8b 37       	cpi	r24, 0x7B	; 123
    bc50:	10 f4       	brcc	.+4      	; 0xbc56 <qtm_measure_node+0x1cc>
    bc52:	8c 5f       	subi	r24, 0xFC	; 252
    bc54:	01 c0       	rjmp	.+2      	; 0xbc58 <qtm_measure_node+0x1ce>
    bc56:	8f e7       	ldi	r24, 0x7F	; 127
    bc58:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7f07c4>
    bc5c:	a2 81       	ldd	r26, Z+2	; 0x02
    bc5e:	b3 81       	ldd	r27, Z+3	; 0x03
    bc60:	ac 0f       	add	r26, r28
    bc62:	bd 1f       	adc	r27, r29
    bc64:	53 96       	adiw	r26, 0x13	; 19
    bc66:	8c 91       	ld	r24, X
    bc68:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7f07c7>
    bc6c:	a2 81       	ldd	r26, Z+2	; 0x02
    bc6e:	b3 81       	ldd	r27, Z+3	; 0x03
    bc70:	ac 0f       	add	r26, r28
    bc72:	bd 1f       	adc	r27, r29
    bc74:	51 96       	adiw	r26, 0x11	; 17
    bc76:	8c 91       	ld	r24, X
    bc78:	82 95       	swap	r24
    bc7a:	8f 70       	andi	r24, 0x0F	; 15
    bc7c:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7f07c9>
    bc80:	82 81       	ldd	r24, Z+2	; 0x02
    bc82:	93 81       	ldd	r25, Z+3	; 0x03
    bc84:	c8 0f       	add	r28, r24
    bc86:	d9 1f       	adc	r29, r25
    bc88:	89 89       	ldd	r24, Y+17	; 0x11
    bc8a:	8f 70       	andi	r24, 0x0F	; 15
    bc8c:	80 68       	ori	r24, 0x80	; 128
    bc8e:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__TEXT_REGION_LENGTH__+0x7f07c2>
    bc92:	81 e8       	ldi	r24, 0x81	; 129
    bc94:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    bc98:	81 e0       	ldi	r24, 0x01	; 1
    bc9a:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7f07d0>
    bc9e:	df 91       	pop	r29
    bca0:	cf 91       	pop	r28
    bca2:	1f 91       	pop	r17
    bca4:	0f 91       	pop	r16
    bca6:	ff 90       	pop	r15
    bca8:	ef 90       	pop	r14
    bcaa:	df 90       	pop	r13
    bcac:	cf 90       	pop	r12
    bcae:	bf 90       	pop	r11
    bcb0:	af 90       	pop	r10
    bcb2:	08 95       	ret

0000bcb4 <qtm_acquisition_process>:
    bcb4:	2f 92       	push	r2
    bcb6:	3f 92       	push	r3
    bcb8:	4f 92       	push	r4
    bcba:	5f 92       	push	r5
    bcbc:	6f 92       	push	r6
    bcbe:	7f 92       	push	r7
    bcc0:	8f 92       	push	r8
    bcc2:	9f 92       	push	r9
    bcc4:	af 92       	push	r10
    bcc6:	bf 92       	push	r11
    bcc8:	cf 92       	push	r12
    bcca:	df 92       	push	r13
    bccc:	ef 92       	push	r14
    bcce:	ff 92       	push	r15
    bcd0:	0f 93       	push	r16
    bcd2:	1f 93       	push	r17
    bcd4:	cf 93       	push	r28
    bcd6:	df 93       	push	r29
    bcd8:	cd b7       	in	r28, 0x3d	; 61
    bcda:	de b7       	in	r29, 0x3e	; 62
    bcdc:	27 97       	sbiw	r28, 0x07	; 7
    bcde:	cd bf       	out	0x3d, r28	; 61
    bce0:	de bf       	out	0x3e, r29	; 62
    bce2:	80 91 5f 67 	lds	r24, 0x675F	; 0x80675f <touch_seq_lib_state>
    bce6:	88 23       	and	r24, r24
    bce8:	09 f4       	brne	.+2      	; 0xbcec <qtm_acquisition_process+0x38>
    bcea:	46 c2       	rjmp	.+1164   	; 0xc178 <qtm_acquisition_process+0x4c4>
    bcec:	00 91 fb 68 	lds	r16, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr>
    bcf0:	10 91 fc 68 	lds	r17, 0x68FC	; 0x8068fc <qtm_acquisition_control_working_set_ptr+0x1>
    bcf4:	20 91 fd 68 	lds	r18, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr>
    bcf8:	30 91 fe 68 	lds	r19, 0x68FE	; 0x8068fe <qtm_raw_data_measurements_ptr+0x1>
    bcfc:	2a 83       	std	Y+2, r18	; 0x02
    bcfe:	3b 83       	std	Y+3, r19	; 0x03
    bd00:	c1 2c       	mov	r12, r1
    bd02:	d1 2c       	mov	r13, r1
    bd04:	a1 2c       	mov	r10, r1
    bd06:	b1 2c       	mov	r11, r1
    bd08:	21 2c       	mov	r2, r1
    bd0a:	31 2c       	mov	r3, r1
    bd0c:	19 82       	std	Y+1, r1	; 0x01
    bd0e:	44 24       	eor	r4, r4
    bd10:	4a 94       	dec	r4
    bd12:	55 24       	eor	r5, r5
    bd14:	53 94       	inc	r5
    bd16:	77 24       	eor	r7, r7
    bd18:	73 94       	inc	r7
    bd1a:	d8 01       	movw	r26, r16
    bd1c:	0d 90       	ld	r0, X+
    bd1e:	bc 91       	ld	r27, X
    bd20:	a0 2d       	mov	r26, r0
    bd22:	ae 83       	std	Y+6, r26	; 0x06
    bd24:	bf 83       	std	Y+7, r27	; 0x07
    bd26:	8d 91       	ld	r24, X+
    bd28:	9c 91       	ld	r25, X
    bd2a:	28 16       	cp	r2, r24
    bd2c:	39 06       	cpc	r3, r25
    bd2e:	08 f0       	brcs	.+2      	; 0xbd32 <qtm_acquisition_process+0x7e>
    bd30:	1f c2       	rjmp	.+1086   	; 0xc170 <qtm_acquisition_process+0x4bc>
    bd32:	aa 81       	ldd	r26, Y+2	; 0x02
    bd34:	bb 81       	ldd	r27, Y+3	; 0x03
    bd36:	4d 91       	ld	r20, X+
    bd38:	5d 91       	ld	r21, X+
    bd3a:	aa 83       	std	Y+2, r26	; 0x02
    bd3c:	bb 83       	std	Y+3, r27	; 0x03
    bd3e:	f8 01       	movw	r30, r16
    bd40:	e4 80       	ldd	r14, Z+4	; 0x04
    bd42:	f5 80       	ldd	r15, Z+5	; 0x05
    bd44:	ea 0c       	add	r14, r10
    bd46:	fb 1c       	adc	r15, r11
    bd48:	d7 01       	movw	r26, r14
    bd4a:	2c 91       	ld	r18, X
    bd4c:	82 2f       	mov	r24, r18
    bd4e:	8c 71       	andi	r24, 0x1C	; 28
    bd50:	90 e0       	ldi	r25, 0x00	; 0
    bd52:	96 95       	lsr	r25
    bd54:	87 95       	ror	r24
    bd56:	96 95       	lsr	r25
    bd58:	87 95       	ror	r24
    bd5a:	82 30       	cpi	r24, 0x02	; 2
    bd5c:	91 05       	cpc	r25, r1
    bd5e:	09 f4       	brne	.+2      	; 0xbd62 <qtm_acquisition_process+0xae>
    bd60:	a0 c1       	rjmp	.+832    	; 0xc0a2 <qtm_acquisition_process+0x3ee>
    bd62:	28 f4       	brcc	.+10     	; 0xbd6e <qtm_acquisition_process+0xba>
    bd64:	00 97       	sbiw	r24, 0x00	; 0
    bd66:	59 f0       	breq	.+22     	; 0xbd7e <qtm_acquisition_process+0xca>
    bd68:	01 97       	sbiw	r24, 0x01	; 1
    bd6a:	01 f1       	breq	.+64     	; 0xbdac <qtm_acquisition_process+0xf8>
    bd6c:	f7 c1       	rjmp	.+1006   	; 0xc15c <qtm_acquisition_process+0x4a8>
    bd6e:	83 30       	cpi	r24, 0x03	; 3
    bd70:	91 05       	cpc	r25, r1
    bd72:	09 f4       	brne	.+2      	; 0xbd76 <qtm_acquisition_process+0xc2>
    bd74:	59 c1       	rjmp	.+690    	; 0xc028 <qtm_acquisition_process+0x374>
    bd76:	04 97       	sbiw	r24, 0x04	; 4
    bd78:	09 f4       	brne	.+2      	; 0xbd7c <qtm_acquisition_process+0xc8>
    bd7a:	e1 c0       	rjmp	.+450    	; 0xbf3e <qtm_acquisition_process+0x28a>
    bd7c:	ef c1       	rjmp	.+990    	; 0xc15c <qtm_acquisition_process+0x4a8>
    bd7e:	02 80       	ldd	r0, Z+2	; 0x02
    bd80:	f3 81       	ldd	r31, Z+3	; 0x03
    bd82:	e0 2d       	mov	r30, r0
    bd84:	ec 0d       	add	r30, r12
    bd86:	fd 1d       	adc	r31, r13
    bd88:	92 89       	ldd	r25, Z+18	; 0x12
    bd8a:	9f 70       	andi	r25, 0x0F	; 15
    bd8c:	83 89       	ldd	r24, Z+19	; 0x13
    bd8e:	98 17       	cp	r25, r24
    bd90:	10 f4       	brcc	.+4      	; 0xbd96 <qtm_acquisition_process+0xe2>
    bd92:	89 1b       	sub	r24, r25
    bd94:	01 c0       	rjmp	.+2      	; 0xbd98 <qtm_acquisition_process+0xe4>
    bd96:	80 e0       	ldi	r24, 0x00	; 0
    bd98:	9a 01       	movw	r18, r20
    bd9a:	02 c0       	rjmp	.+4      	; 0xbda0 <qtm_acquisition_process+0xec>
    bd9c:	36 95       	lsr	r19
    bd9e:	27 95       	ror	r18
    bda0:	8a 95       	dec	r24
    bda2:	e2 f7       	brpl	.-8      	; 0xbd9c <qtm_acquisition_process+0xe8>
    bda4:	f7 01       	movw	r30, r14
    bda6:	21 83       	std	Z+1, r18	; 0x01
    bda8:	32 83       	std	Z+2, r19	; 0x02
    bdaa:	d8 c1       	rjmp	.+944    	; 0xc15c <qtm_acquisition_process+0x4a8>
    bdac:	82 81       	ldd	r24, Z+2	; 0x02
    bdae:	93 81       	ldd	r25, Z+3	; 0x03
    bdb0:	fc 01       	movw	r30, r24
    bdb2:	ec 0d       	add	r30, r12
    bdb4:	fd 1d       	adc	r31, r13
    bdb6:	4a 01       	movw	r8, r20
    bdb8:	03 88       	ldd	r0, Z+19	; 0x13
    bdba:	02 c0       	rjmp	.+4      	; 0xbdc0 <qtm_acquisition_process+0x10c>
    bdbc:	96 94       	lsr	r9
    bdbe:	87 94       	ror	r8
    bdc0:	0a 94       	dec	r0
    bdc2:	e2 f7       	brpl	.-8      	; 0xbdbc <qtm_acquisition_process+0x108>
    bdc4:	d7 01       	movw	r26, r14
    bdc6:	11 96       	adiw	r26, 0x01	; 1
    bdc8:	8d 92       	st	X+, r8
    bdca:	9c 92       	st	X, r9
    bdcc:	12 97       	sbiw	r26, 0x02	; 2
    bdce:	13 96       	adiw	r26, 0x03	; 3
    bdd0:	8d 91       	ld	r24, X+
    bdd2:	9c 91       	ld	r25, X
    bdd4:	14 97       	sbiw	r26, 0x04	; 4
    bdd6:	69 2f       	mov	r22, r25
    bdd8:	66 1f       	adc	r22, r22
    bdda:	66 27       	eor	r22, r22
    bddc:	66 1f       	adc	r22, r22
    bdde:	81 14       	cp	r8, r1
    bde0:	b2 e0       	ldi	r27, 0x02	; 2
    bde2:	9b 06       	cpc	r9, r27
    bde4:	30 f0       	brcs	.+12     	; 0xbdf2 <qtm_acquisition_process+0x13e>
    bde6:	3f ef       	ldi	r19, 0xFF	; 255
    bde8:	83 1a       	sub	r8, r19
    bdea:	31 e0       	ldi	r19, 0x01	; 1
    bdec:	93 0a       	sbc	r9, r19
    bdee:	41 e0       	ldi	r20, 0x01	; 1
    bdf0:	05 c0       	rjmp	.+10     	; 0xbdfc <qtm_acquisition_process+0x148>
    bdf2:	a2 01       	movw	r20, r4
    bdf4:	48 19       	sub	r20, r8
    bdf6:	59 09       	sbc	r21, r9
    bdf8:	4a 01       	movw	r8, r20
    bdfa:	40 e0       	ldi	r20, 0x00	; 0
    bdfc:	96 94       	lsr	r9
    bdfe:	87 94       	ror	r8
    be00:	ae 81       	ldd	r26, Y+6	; 0x06
    be02:	bf 81       	ldd	r27, Y+7	; 0x07
    be04:	12 96       	adiw	r26, 0x02	; 2
    be06:	3c 91       	ld	r19, X
    be08:	30 34       	cpi	r19, 0x40	; 64
    be0a:	29 f0       	breq	.+10     	; 0xbe16 <qtm_acquisition_process+0x162>
    be0c:	44 23       	and	r20, r20
    be0e:	09 f4       	brne	.+2      	; 0xbe12 <qtm_acquisition_process+0x15e>
    be10:	b6 c1       	rjmp	.+876    	; 0xc17e <qtm_acquisition_process+0x4ca>
    be12:	46 2f       	mov	r20, r22
    be14:	06 c0       	rjmp	.+12     	; 0xbe22 <qtm_acquisition_process+0x16e>
    be16:	97 ff       	sbrs	r25, 7
    be18:	04 c0       	rjmp	.+8      	; 0xbe22 <qtm_acquisition_process+0x16e>
    be1a:	31 e0       	ldi	r19, 0x01	; 1
    be1c:	41 11       	cpse	r20, r1
    be1e:	30 e0       	ldi	r19, 0x00	; 0
    be20:	43 2f       	mov	r20, r19
    be22:	ba e0       	ldi	r27, 0x0A	; 10
    be24:	8b 16       	cp	r8, r27
    be26:	91 04       	cpc	r9, r1
    be28:	08 f0       	brcs	.+2      	; 0xbe2c <qtm_acquisition_process+0x178>
    be2a:	3f c0       	rjmp	.+126    	; 0xbeaa <qtm_acquisition_process+0x1f6>
    be2c:	26 fd       	sbrc	r18, 6
    be2e:	3a c0       	rjmp	.+116    	; 0xbea4 <qtm_acquisition_process+0x1f0>
    be30:	27 fd       	sbrc	r18, 7
    be32:	94 c1       	rjmp	.+808    	; 0xc15c <qtm_acquisition_process+0x4a8>
    be34:	ae 81       	ldd	r26, Y+6	; 0x06
    be36:	bf 81       	ldd	r27, Y+7	; 0x07
    be38:	13 96       	adiw	r26, 0x03	; 3
    be3a:	8c 91       	ld	r24, X
    be3c:	83 70       	andi	r24, 0x03	; 3
    be3e:	83 30       	cpi	r24, 0x03	; 3
    be40:	59 f4       	brne	.+22     	; 0xbe58 <qtm_acquisition_process+0x1a4>
    be42:	bf e7       	ldi	r27, 0x7F	; 127
    be44:	b0 8b       	std	Z+16, r27	; 0x10
    be46:	d8 01       	movw	r26, r16
    be48:	14 96       	adiw	r26, 0x04	; 4
    be4a:	ed 91       	ld	r30, X+
    be4c:	fc 91       	ld	r31, X
    be4e:	15 97       	sbiw	r26, 0x05	; 5
    be50:	ea 0d       	add	r30, r10
    be52:	fb 1d       	adc	r31, r11
    be54:	b1 e1       	ldi	r27, 0x11	; 17
    be56:	0d c0       	rjmp	.+26     	; 0xbe72 <qtm_acquisition_process+0x1be>
    be58:	82 30       	cpi	r24, 0x02	; 2
    be5a:	69 f4       	brne	.+26     	; 0xbe76 <qtm_acquisition_process+0x1c2>
    be5c:	81 89       	ldd	r24, Z+17	; 0x11
    be5e:	80 7f       	andi	r24, 0xF0	; 240
    be60:	81 8b       	std	Z+17, r24	; 0x11
    be62:	d8 01       	movw	r26, r16
    be64:	14 96       	adiw	r26, 0x04	; 4
    be66:	ed 91       	ld	r30, X+
    be68:	fc 91       	ld	r31, X
    be6a:	15 97       	sbiw	r26, 0x05	; 5
    be6c:	ea 0d       	add	r30, r10
    be6e:	fb 1d       	adc	r31, r11
    be70:	b9 e0       	ldi	r27, 0x09	; 9
    be72:	b0 83       	st	Z, r27
    be74:	73 c1       	rjmp	.+742    	; 0xc15c <qtm_acquisition_process+0x4a8>
    be76:	81 30       	cpi	r24, 0x01	; 1
    be78:	a9 f4       	brne	.+42     	; 0xbea4 <qtm_acquisition_process+0x1f0>
    be7a:	81 89       	ldd	r24, Z+17	; 0x11
    be7c:	8f 70       	andi	r24, 0x0F	; 15
    be7e:	81 8b       	std	Z+17, r24	; 0x11
    be80:	d8 01       	movw	r26, r16
    be82:	12 96       	adiw	r26, 0x02	; 2
    be84:	ed 91       	ld	r30, X+
    be86:	fc 91       	ld	r31, X
    be88:	13 97       	sbiw	r26, 0x03	; 3
    be8a:	ec 0d       	add	r30, r12
    be8c:	fd 1d       	adc	r31, r13
    be8e:	81 89       	ldd	r24, Z+17	; 0x11
    be90:	80 67       	ori	r24, 0x70	; 112
    be92:	81 8b       	std	Z+17, r24	; 0x11
    be94:	14 96       	adiw	r26, 0x04	; 4
    be96:	ed 91       	ld	r30, X+
    be98:	fc 91       	ld	r31, X
    be9a:	15 97       	sbiw	r26, 0x05	; 5
    be9c:	ea 0d       	add	r30, r10
    be9e:	fb 1d       	adc	r31, r11
    bea0:	bd e0       	ldi	r27, 0x0D	; 13
    bea2:	e7 cf       	rjmp	.-50     	; 0xbe72 <qtm_acquisition_process+0x1be>
    bea4:	f7 01       	movw	r30, r14
    bea6:	70 82       	st	Z, r7
    bea8:	59 c1       	rjmp	.+690    	; 0xc15c <qtm_acquisition_process+0x4a8>
    beaa:	9c 01       	movw	r18, r24
    beac:	33 70       	andi	r19, 0x03	; 3
    beae:	2f 3f       	cpi	r18, 0xFF	; 255
    beb0:	f3 e0       	ldi	r31, 0x03	; 3
    beb2:	3f 07       	cpc	r19, r31
    beb4:	31 f4       	brne	.+12     	; 0xbec2 <qtm_acquisition_process+0x20e>
    beb6:	e1 e8       	ldi	r30, 0x81	; 129
    beb8:	d7 01       	movw	r26, r14
    beba:	ec 93       	st	X, r30
    bebc:	8f ef       	ldi	r24, 0xFF	; 255
    bebe:	93 e0       	ldi	r25, 0x03	; 3
    bec0:	0b c0       	rjmp	.+22     	; 0xbed8 <qtm_acquisition_process+0x224>
    bec2:	21 15       	cp	r18, r1
    bec4:	31 05       	cpc	r19, r1
    bec6:	59 f4       	brne	.+22     	; 0xbede <qtm_acquisition_process+0x22a>
    bec8:	97 ff       	sbrs	r25, 7
    beca:	25 c0       	rjmp	.+74     	; 0xbf16 <qtm_acquisition_process+0x262>
    becc:	e1 e8       	ldi	r30, 0x81	; 129
    bece:	d7 01       	movw	r26, r14
    bed0:	ec 93       	st	X, r30
    bed2:	80 e0       	ldi	r24, 0x00	; 0
    bed4:	90 e0       	ldi	r25, 0x00	; 0
    bed6:	61 e0       	ldi	r22, 0x01	; 1
    bed8:	fe e0       	ldi	r31, 0x0E	; 14
    beda:	f9 83       	std	Y+1, r31	; 0x01
    bedc:	1f c0       	rjmp	.+62     	; 0xbf1c <qtm_acquisition_process+0x268>
    bede:	c9 01       	movw	r24, r18
    bee0:	41 11       	cpse	r20, r1
    bee2:	0f c0       	rjmp	.+30     	; 0xbf02 <qtm_acquisition_process+0x24e>
    bee4:	01 96       	adiw	r24, 0x01	; 1
    bee6:	21 e0       	ldi	r18, 0x01	; 1
    bee8:	82 1a       	sub	r8, r18
    beea:	91 08       	sbc	r9, r1
    beec:	31 e0       	ldi	r19, 0x01	; 1
    beee:	83 16       	cp	r8, r19
    bef0:	91 04       	cpc	r9, r1
    bef2:	a1 f0       	breq	.+40     	; 0xbf1c <qtm_acquisition_process+0x268>
    bef4:	8f 3f       	cpi	r24, 0xFF	; 255
    bef6:	43 e0       	ldi	r20, 0x03	; 3
    bef8:	94 07       	cpc	r25, r20
    befa:	a1 f7       	brne	.-24     	; 0xbee4 <qtm_acquisition_process+0x230>
    befc:	0f c0       	rjmp	.+30     	; 0xbf1c <qtm_acquisition_process+0x268>
    befe:	00 97       	sbiw	r24, 0x00	; 0
    bf00:	69 f0       	breq	.+26     	; 0xbf1c <qtm_acquisition_process+0x268>
    bf02:	01 97       	sbiw	r24, 0x01	; 1
    bf04:	ac 01       	movw	r20, r24
    bf06:	42 1b       	sub	r20, r18
    bf08:	53 0b       	sbc	r21, r19
    bf0a:	48 0d       	add	r20, r8
    bf0c:	59 1d       	adc	r21, r9
    bf0e:	41 30       	cpi	r20, 0x01	; 1
    bf10:	51 05       	cpc	r21, r1
    bf12:	a9 f7       	brne	.-22     	; 0xbefe <qtm_acquisition_process+0x24a>
    bf14:	03 c0       	rjmp	.+6      	; 0xbf1c <qtm_acquisition_process+0x268>
    bf16:	80 ef       	ldi	r24, 0xF0	; 240
    bf18:	90 e0       	ldi	r25, 0x00	; 0
    bf1a:	61 e0       	ldi	r22, 0x01	; 1
    bf1c:	d8 01       	movw	r26, r16
    bf1e:	14 96       	adiw	r26, 0x04	; 4
    bf20:	ed 91       	ld	r30, X+
    bf22:	fc 91       	ld	r31, X
    bf24:	15 97       	sbiw	r26, 0x05	; 5
    bf26:	ea 0d       	add	r30, r10
    bf28:	fb 1d       	adc	r31, r11
    bf2a:	70 e0       	ldi	r23, 0x00	; 0
    bf2c:	77 27       	eor	r23, r23
    bf2e:	66 95       	lsr	r22
    bf30:	77 95       	ror	r23
    bf32:	66 27       	eor	r22, r22
    bf34:	86 2b       	or	r24, r22
    bf36:	97 2b       	or	r25, r23
    bf38:	83 83       	std	Z+3, r24	; 0x03
    bf3a:	94 83       	std	Z+4, r25	; 0x04
    bf3c:	0f c1       	rjmp	.+542    	; 0xc15c <qtm_acquisition_process+0x4a8>
    bf3e:	f8 01       	movw	r30, r16
    bf40:	82 80       	ldd	r8, Z+2	; 0x02
    bf42:	93 80       	ldd	r9, Z+3	; 0x03
    bf44:	8c 0c       	add	r8, r12
    bf46:	9d 1c       	adc	r9, r13
    bf48:	fa 01       	movw	r30, r20
    bf4a:	d4 01       	movw	r26, r8
    bf4c:	53 96       	adiw	r26, 0x13	; 19
    bf4e:	0c 90       	ld	r0, X
    bf50:	53 97       	sbiw	r26, 0x13	; 19
    bf52:	02 c0       	rjmp	.+4      	; 0xbf58 <qtm_acquisition_process+0x2a4>
    bf54:	f6 95       	lsr	r31
    bf56:	e7 95       	ror	r30
    bf58:	0a 94       	dec	r0
    bf5a:	e2 f7       	brpl	.-8      	; 0xbf54 <qtm_acquisition_process+0x2a0>
    bf5c:	ec 83       	std	Y+4, r30	; 0x04
    bf5e:	fd 83       	std	Y+5, r31	; 0x05
    bf60:	50 96       	adiw	r26, 0x10	; 16
    bf62:	6c 90       	ld	r6, X
    bf64:	ff e7       	ldi	r31, 0x7F	; 127
    bf66:	6f 12       	cpse	r6, r31
    bf68:	0f c0       	rjmp	.+30     	; 0xbf88 <qtm_acquisition_process+0x2d4>
    bf6a:	ec 81       	ldd	r30, Y+4	; 0x04
    bf6c:	fd 81       	ldd	r31, Y+5	; 0x05
    bf6e:	d7 01       	movw	r26, r14
    bf70:	11 96       	adiw	r26, 0x01	; 1
    bf72:	ed 93       	st	X+, r30
    bf74:	fc 93       	st	X, r31
    bf76:	12 97       	sbiw	r26, 0x02	; 2
    bf78:	d4 01       	movw	r26, r8
    bf7a:	50 96       	adiw	r26, 0x10	; 16
    bf7c:	8c 91       	ld	r24, X
    bf7e:	50 97       	sbiw	r26, 0x10	; 16
    bf80:	8f 7b       	andi	r24, 0xBF	; 191
    bf82:	50 96       	adiw	r26, 0x10	; 16
    bf84:	8c 93       	st	X, r24
    bf86:	42 c0       	rjmp	.+132    	; 0xc00c <qtm_acquisition_process+0x358>
    bf88:	f1 2c       	mov	r15, r1
    bf8a:	26 2d       	mov	r18, r6
    bf8c:	30 e0       	ldi	r19, 0x00	; 0
    bf8e:	c9 01       	movw	r24, r18
    bf90:	0f 2c       	mov	r0, r15
    bf92:	02 c0       	rjmp	.+4      	; 0xbf98 <qtm_acquisition_process+0x2e4>
    bf94:	96 95       	lsr	r25
    bf96:	87 95       	ror	r24
    bf98:	0a 94       	dec	r0
    bf9a:	e2 f7       	brpl	.-8      	; 0xbf94 <qtm_acquisition_process+0x2e0>
    bf9c:	80 ff       	sbrs	r24, 0
    bf9e:	03 c0       	rjmp	.+6      	; 0xbfa6 <qtm_acquisition_process+0x2f2>
    bfa0:	8f 2d       	mov	r24, r15
    bfa2:	f1 2c       	mov	r15, r1
    bfa4:	01 c0       	rjmp	.+2      	; 0xbfa8 <qtm_acquisition_process+0x2f4>
    bfa6:	87 e0       	ldi	r24, 0x07	; 7
    bfa8:	8f 5f       	subi	r24, 0xFF	; 255
    bfaa:	87 30       	cpi	r24, 0x07	; 7
    bfac:	10 f4       	brcc	.+4      	; 0xbfb2 <qtm_acquisition_process+0x2fe>
    bfae:	f8 2e       	mov	r15, r24
    bfb0:	ee cf       	rjmp	.-36     	; 0xbf8e <qtm_acquisition_process+0x2da>
    bfb2:	6c 81       	ldd	r22, Y+4	; 0x04
    bfb4:	7d 81       	ldd	r23, Y+5	; 0x05
    bfb6:	c1 01       	movw	r24, r2
    bfb8:	0e 94 ca 5c 	call	0xb994	; 0xb994 <charge_share_test>
    bfbc:	88 23       	and	r24, r24
    bfbe:	51 f0       	breq	.+20     	; 0xbfd4 <qtm_acquisition_process+0x320>
    bfc0:	81 e0       	ldi	r24, 0x01	; 1
    bfc2:	90 e0       	ldi	r25, 0x00	; 0
    bfc4:	0f 2c       	mov	r0, r15
    bfc6:	01 c0       	rjmp	.+2      	; 0xbfca <qtm_acquisition_process+0x316>
    bfc8:	88 0f       	add	r24, r24
    bfca:	0a 94       	dec	r0
    bfcc:	ea f7       	brpl	.-6      	; 0xbfc8 <qtm_acquisition_process+0x314>
    bfce:	86 29       	or	r24, r6
    bfd0:	f4 01       	movw	r30, r8
    bfd2:	80 8b       	std	Z+16, r24	; 0x10
    bfd4:	d8 01       	movw	r26, r16
    bfd6:	ff 20       	and	r15, r15
    bfd8:	91 f0       	breq	.+36     	; 0xbffe <qtm_acquisition_process+0x34a>
    bfda:	12 96       	adiw	r26, 0x02	; 2
    bfdc:	ed 91       	ld	r30, X+
    bfde:	fc 91       	ld	r31, X
    bfe0:	13 97       	sbiw	r26, 0x03	; 3
    bfe2:	ec 0d       	add	r30, r12
    bfe4:	fd 1d       	adc	r31, r13
    bfe6:	fa 94       	dec	r15
    bfe8:	81 e0       	ldi	r24, 0x01	; 1
    bfea:	90 e0       	ldi	r25, 0x00	; 0
    bfec:	01 c0       	rjmp	.+2      	; 0xbff0 <qtm_acquisition_process+0x33c>
    bfee:	88 0f       	add	r24, r24
    bff0:	fa 94       	dec	r15
    bff2:	ea f7       	brpl	.-6      	; 0xbfee <qtm_acquisition_process+0x33a>
    bff4:	80 95       	com	r24
    bff6:	90 89       	ldd	r25, Z+16	; 0x10
    bff8:	89 23       	and	r24, r25
    bffa:	80 8b       	std	Z+16, r24	; 0x10
    bffc:	07 c0       	rjmp	.+14     	; 0xc00c <qtm_acquisition_process+0x358>
    bffe:	14 96       	adiw	r26, 0x04	; 4
    c000:	ed 91       	ld	r30, X+
    c002:	fc 91       	ld	r31, X
    c004:	15 97       	sbiw	r26, 0x05	; 5
    c006:	ea 0d       	add	r30, r10
    c008:	fb 1d       	adc	r31, r11
    c00a:	70 82       	st	Z, r7
    c00c:	d8 01       	movw	r26, r16
    c00e:	14 96       	adiw	r26, 0x04	; 4
    c010:	ed 91       	ld	r30, X+
    c012:	fc 91       	ld	r31, X
    c014:	15 97       	sbiw	r26, 0x05	; 5
    c016:	ea 0d       	add	r30, r10
    c018:	fb 1d       	adc	r31, r11
    c01a:	80 81       	ld	r24, Z
    c01c:	81 30       	cpi	r24, 0x01	; 1
    c01e:	09 f0       	breq	.+2      	; 0xc022 <qtm_acquisition_process+0x36e>
    c020:	9d c0       	rjmp	.+314    	; 0xc15c <qtm_acquisition_process+0x4a8>
    c022:	2c 81       	ldd	r18, Y+4	; 0x04
    c024:	3d 81       	ldd	r19, Y+5	; 0x05
    c026:	83 c0       	rjmp	.+262    	; 0xc12e <qtm_acquisition_process+0x47a>
    c028:	02 80       	ldd	r0, Z+2	; 0x02
    c02a:	f3 81       	ldd	r31, Z+3	; 0x03
    c02c:	e0 2d       	mov	r30, r0
    c02e:	ec 0d       	add	r30, r12
    c030:	fd 1d       	adc	r31, r13
    c032:	9a 01       	movw	r18, r20
    c034:	03 88       	ldd	r0, Z+19	; 0x13
    c036:	02 c0       	rjmp	.+4      	; 0xc03c <qtm_acquisition_process+0x388>
    c038:	36 95       	lsr	r19
    c03a:	27 95       	ror	r18
    c03c:	0a 94       	dec	r0
    c03e:	e2 f7       	brpl	.-8      	; 0xc038 <qtm_acquisition_process+0x384>
    c040:	2c 83       	std	Y+4, r18	; 0x04
    c042:	3d 83       	std	Y+5, r19	; 0x05
    c044:	91 88       	ldd	r9, Z+17	; 0x11
    c046:	92 94       	swap	r9
    c048:	2f e0       	ldi	r18, 0x0F	; 15
    c04a:	92 22       	and	r9, r18
    c04c:	37 e0       	ldi	r19, 0x07	; 7
    c04e:	93 16       	cp	r9, r19
    c050:	91 f0       	breq	.+36     	; 0xc076 <qtm_acquisition_process+0x3c2>
    c052:	6c 81       	ldd	r22, Y+4	; 0x04
    c054:	7d 81       	ldd	r23, Y+5	; 0x05
    c056:	c1 01       	movw	r24, r2
    c058:	0e 94 ca 5c 	call	0xb994	; 0xb994 <charge_share_test>
    c05c:	81 11       	cpse	r24, r1
    c05e:	04 c0       	rjmp	.+8      	; 0xc068 <qtm_acquisition_process+0x3b4>
    c060:	93 94       	inc	r9
    c062:	d7 01       	movw	r26, r14
    c064:	7c 92       	st	X, r7
    c066:	09 c0       	rjmp	.+18     	; 0xc07a <qtm_acquisition_process+0x3c6>
    c068:	91 10       	cpse	r9, r1
    c06a:	03 c0       	rjmp	.+6      	; 0xc072 <qtm_acquisition_process+0x3be>
    c06c:	f7 01       	movw	r30, r14
    c06e:	70 82       	st	Z, r7
    c070:	04 c0       	rjmp	.+8      	; 0xc07a <qtm_acquisition_process+0x3c6>
    c072:	9a 94       	dec	r9
    c074:	02 c0       	rjmp	.+4      	; 0xc07a <qtm_acquisition_process+0x3c6>
    c076:	96 e0       	ldi	r25, 0x06	; 6
    c078:	99 2e       	mov	r9, r25
    c07a:	d8 01       	movw	r26, r16
    c07c:	12 96       	adiw	r26, 0x02	; 2
    c07e:	ed 91       	ld	r30, X+
    c080:	fc 91       	ld	r31, X
    c082:	13 97       	sbiw	r26, 0x03	; 3
    c084:	ec 0d       	add	r30, r12
    c086:	fd 1d       	adc	r31, r13
    c088:	81 89       	ldd	r24, Z+17	; 0x11
    c08a:	8f 70       	andi	r24, 0x0F	; 15
    c08c:	81 8b       	std	Z+17, r24	; 0x11
    c08e:	12 96       	adiw	r26, 0x02	; 2
    c090:	ed 91       	ld	r30, X+
    c092:	fc 91       	ld	r31, X
    c094:	13 97       	sbiw	r26, 0x03	; 3
    c096:	ec 0d       	add	r30, r12
    c098:	fd 1d       	adc	r31, r13
    c09a:	92 94       	swap	r9
    c09c:	80 ef       	ldi	r24, 0xF0	; 240
    c09e:	98 22       	and	r9, r24
    c0a0:	36 c0       	rjmp	.+108    	; 0xc10e <qtm_acquisition_process+0x45a>
    c0a2:	02 80       	ldd	r0, Z+2	; 0x02
    c0a4:	f3 81       	ldd	r31, Z+3	; 0x03
    c0a6:	e0 2d       	mov	r30, r0
    c0a8:	ec 0d       	add	r30, r12
    c0aa:	fd 1d       	adc	r31, r13
    c0ac:	9a 01       	movw	r18, r20
    c0ae:	03 88       	ldd	r0, Z+19	; 0x13
    c0b0:	02 c0       	rjmp	.+4      	; 0xc0b6 <qtm_acquisition_process+0x402>
    c0b2:	36 95       	lsr	r19
    c0b4:	27 95       	ror	r18
    c0b6:	0a 94       	dec	r0
    c0b8:	e2 f7       	brpl	.-8      	; 0xc0b2 <qtm_acquisition_process+0x3fe>
    c0ba:	2c 83       	std	Y+4, r18	; 0x04
    c0bc:	3d 83       	std	Y+5, r19	; 0x05
    c0be:	81 89       	ldd	r24, Z+17	; 0x11
    c0c0:	8f 70       	andi	r24, 0x0F	; 15
    c0c2:	98 2e       	mov	r9, r24
    c0c4:	91 f0       	breq	.+36     	; 0xc0ea <qtm_acquisition_process+0x436>
    c0c6:	b9 01       	movw	r22, r18
    c0c8:	c1 01       	movw	r24, r2
    c0ca:	0e 94 ca 5c 	call	0xb994	; 0xb994 <charge_share_test>
    c0ce:	81 11       	cpse	r24, r1
    c0d0:	04 c0       	rjmp	.+8      	; 0xc0da <qtm_acquisition_process+0x426>
    c0d2:	9a 94       	dec	r9
    c0d4:	d7 01       	movw	r26, r14
    c0d6:	7c 92       	st	X, r7
    c0d8:	0a c0       	rjmp	.+20     	; 0xc0ee <qtm_acquisition_process+0x43a>
    c0da:	b7 e0       	ldi	r27, 0x07	; 7
    c0dc:	9b 12       	cpse	r9, r27
    c0de:	03 c0       	rjmp	.+6      	; 0xc0e6 <qtm_acquisition_process+0x432>
    c0e0:	f7 01       	movw	r30, r14
    c0e2:	70 82       	st	Z, r7
    c0e4:	04 c0       	rjmp	.+8      	; 0xc0ee <qtm_acquisition_process+0x43a>
    c0e6:	93 94       	inc	r9
    c0e8:	02 c0       	rjmp	.+4      	; 0xc0ee <qtm_acquisition_process+0x43a>
    c0ea:	99 24       	eor	r9, r9
    c0ec:	93 94       	inc	r9
    c0ee:	d8 01       	movw	r26, r16
    c0f0:	12 96       	adiw	r26, 0x02	; 2
    c0f2:	ed 91       	ld	r30, X+
    c0f4:	fc 91       	ld	r31, X
    c0f6:	13 97       	sbiw	r26, 0x03	; 3
    c0f8:	ec 0d       	add	r30, r12
    c0fa:	fd 1d       	adc	r31, r13
    c0fc:	81 89       	ldd	r24, Z+17	; 0x11
    c0fe:	80 7f       	andi	r24, 0xF0	; 240
    c100:	81 8b       	std	Z+17, r24	; 0x11
    c102:	12 96       	adiw	r26, 0x02	; 2
    c104:	ed 91       	ld	r30, X+
    c106:	fc 91       	ld	r31, X
    c108:	13 97       	sbiw	r26, 0x03	; 3
    c10a:	ec 0d       	add	r30, r12
    c10c:	fd 1d       	adc	r31, r13
    c10e:	81 89       	ldd	r24, Z+17	; 0x11
    c110:	98 2a       	or	r9, r24
    c112:	91 8a       	std	Z+17, r9	; 0x11
    c114:	14 96       	adiw	r26, 0x04	; 4
    c116:	ed 91       	ld	r30, X+
    c118:	fc 91       	ld	r31, X
    c11a:	15 97       	sbiw	r26, 0x05	; 5
    c11c:	ea 0d       	add	r30, r10
    c11e:	fb 1d       	adc	r31, r11
    c120:	2c 81       	ldd	r18, Y+4	; 0x04
    c122:	3d 81       	ldd	r19, Y+5	; 0x05
    c124:	21 83       	std	Z+1, r18	; 0x01
    c126:	32 83       	std	Z+2, r19	; 0x02
    c128:	80 81       	ld	r24, Z
    c12a:	81 30       	cpi	r24, 0x01	; 1
    c12c:	b9 f4       	brne	.+46     	; 0xc15c <qtm_acquisition_process+0x4a8>
    c12e:	21 15       	cp	r18, r1
    c130:	42 e0       	ldi	r20, 0x02	; 2
    c132:	34 07       	cpc	r19, r20
    c134:	28 f0       	brcs	.+10     	; 0xc140 <qtm_acquisition_process+0x48c>
    c136:	2f 5f       	subi	r18, 0xFF	; 255
    c138:	31 40       	sbci	r19, 0x01	; 1
    c13a:	2c 83       	std	Y+4, r18	; 0x04
    c13c:	3d 83       	std	Y+5, r19	; 0x05
    c13e:	07 c0       	rjmp	.+14     	; 0xc14e <qtm_acquisition_process+0x49a>
    c140:	c2 01       	movw	r24, r4
    c142:	ac 81       	ldd	r26, Y+4	; 0x04
    c144:	bd 81       	ldd	r27, Y+5	; 0x05
    c146:	8a 1b       	sub	r24, r26
    c148:	9b 0b       	sbc	r25, r27
    c14a:	8c 83       	std	Y+4, r24	; 0x04
    c14c:	9d 83       	std	Y+5, r25	; 0x05
    c14e:	2c 81       	ldd	r18, Y+4	; 0x04
    c150:	3d 81       	ldd	r19, Y+5	; 0x05
    c152:	2b 30       	cpi	r18, 0x0B	; 11
    c154:	31 05       	cpc	r19, r1
    c156:	10 f0       	brcs	.+4      	; 0xc15c <qtm_acquisition_process+0x4a8>
    c158:	35 e4       	ldi	r19, 0x45	; 69
    c15a:	30 83       	st	Z, r19
    c15c:	4f ef       	ldi	r20, 0xFF	; 255
    c15e:	24 1a       	sub	r2, r20
    c160:	34 0a       	sbc	r3, r20
    c162:	55 e0       	ldi	r21, 0x05	; 5
    c164:	a5 0e       	add	r10, r21
    c166:	b1 1c       	adc	r11, r1
    c168:	84 e1       	ldi	r24, 0x14	; 20
    c16a:	c8 0e       	add	r12, r24
    c16c:	d1 1c       	adc	r13, r1
    c16e:	d5 cd       	rjmp	.-1110   	; 0xbd1a <qtm_acquisition_process+0x66>
    c170:	82 e0       	ldi	r24, 0x02	; 2
    c172:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    c176:	09 c0       	rjmp	.+18     	; 0xc18a <qtm_acquisition_process+0x4d6>
    c178:	b3 e0       	ldi	r27, 0x03	; 3
    c17a:	b9 83       	std	Y+1, r27	; 0x01
    c17c:	06 c0       	rjmp	.+12     	; 0xc18a <qtm_acquisition_process+0x4d6>
    c17e:	49 2f       	mov	r20, r25
    c180:	40 95       	com	r20
    c182:	44 1f       	adc	r20, r20
    c184:	44 27       	eor	r20, r20
    c186:	44 1f       	adc	r20, r20
    c188:	4c ce       	rjmp	.-872    	; 0xbe22 <qtm_acquisition_process+0x16e>
    c18a:	89 81       	ldd	r24, Y+1	; 0x01
    c18c:	27 96       	adiw	r28, 0x07	; 7
    c18e:	cd bf       	out	0x3d, r28	; 61
    c190:	de bf       	out	0x3e, r29	; 62
    c192:	df 91       	pop	r29
    c194:	cf 91       	pop	r28
    c196:	1f 91       	pop	r17
    c198:	0f 91       	pop	r16
    c19a:	ff 90       	pop	r15
    c19c:	ef 90       	pop	r14
    c19e:	df 90       	pop	r13
    c1a0:	cf 90       	pop	r12
    c1a2:	bf 90       	pop	r11
    c1a4:	af 90       	pop	r10
    c1a6:	9f 90       	pop	r9
    c1a8:	8f 90       	pop	r8
    c1aa:	7f 90       	pop	r7
    c1ac:	6f 90       	pop	r6
    c1ae:	5f 90       	pop	r5
    c1b0:	4f 90       	pop	r4
    c1b2:	3f 90       	pop	r3
    c1b4:	2f 90       	pop	r2
    c1b6:	08 95       	ret

0000c1b8 <qtm_ptc_init_acquisition_module>:
    c1b8:	5f 92       	push	r5
    c1ba:	6f 92       	push	r6
    c1bc:	7f 92       	push	r7
    c1be:	8f 92       	push	r8
    c1c0:	9f 92       	push	r9
    c1c2:	af 92       	push	r10
    c1c4:	bf 92       	push	r11
    c1c6:	cf 92       	push	r12
    c1c8:	df 92       	push	r13
    c1ca:	ef 92       	push	r14
    c1cc:	ff 92       	push	r15
    c1ce:	0f 93       	push	r16
    c1d0:	1f 93       	push	r17
    c1d2:	cf 93       	push	r28
    c1d4:	df 93       	push	r29
    c1d6:	00 97       	sbiw	r24, 0x00	; 0
    c1d8:	09 f4       	brne	.+2      	; 0xc1dc <qtm_ptc_init_acquisition_module+0x24>
    c1da:	92 c0       	rjmp	.+292    	; 0xc300 <qtm_ptc_init_acquisition_module+0x148>
    c1dc:	dc 01       	movw	r26, r24
    c1de:	ed 91       	ld	r30, X+
    c1e0:	fc 91       	ld	r31, X
    c1e2:	60 81       	ld	r22, Z
    c1e4:	71 81       	ldd	r23, Z+1	; 0x01
    c1e6:	40 e0       	ldi	r20, 0x00	; 0
    c1e8:	50 e0       	ldi	r21, 0x00	; 0
    c1ea:	20 e0       	ldi	r18, 0x00	; 0
    c1ec:	30 e0       	ldi	r19, 0x00	; 0
    c1ee:	b0 e0       	ldi	r27, 0x00	; 0
    c1f0:	10 e0       	ldi	r17, 0x00	; 0
    c1f2:	f1 2c       	mov	r15, r1
    c1f4:	e1 2c       	mov	r14, r1
    c1f6:	91 2c       	mov	r9, r1
    c1f8:	81 2c       	mov	r8, r1
    c1fa:	71 2c       	mov	r7, r1
    c1fc:	61 2c       	mov	r6, r1
    c1fe:	26 17       	cp	r18, r22
    c200:	37 07       	cpc	r19, r23
    c202:	51 f1       	breq	.+84     	; 0xc258 <qtm_ptc_init_acquisition_module+0xa0>
    c204:	ec 01       	movw	r28, r24
    c206:	ea 81       	ldd	r30, Y+2	; 0x02
    c208:	fb 81       	ldd	r31, Y+3	; 0x03
    c20a:	e4 0f       	add	r30, r20
    c20c:	f5 1f       	adc	r31, r21
    c20e:	a0 80       	ld	r10, Z
    c210:	a0 85       	ldd	r26, Z+8	; 0x08
    c212:	aa 2a       	or	r10, r26
    c214:	b1 80       	ldd	r11, Z+1	; 0x01
    c216:	a1 85       	ldd	r26, Z+9	; 0x09
    c218:	ba 2a       	or	r11, r26
    c21a:	c2 80       	ldd	r12, Z+2	; 0x02
    c21c:	a2 85       	ldd	r26, Z+10	; 0x0a
    c21e:	ca 2a       	or	r12, r26
    c220:	d3 80       	ldd	r13, Z+3	; 0x03
    c222:	a3 85       	ldd	r26, Z+11	; 0x0b
    c224:	da 2a       	or	r13, r26
    c226:	d4 81       	ldd	r29, Z+4	; 0x04
    c228:	a4 85       	ldd	r26, Z+12	; 0x0c
    c22a:	da 2b       	or	r29, r26
    c22c:	c5 81       	ldd	r28, Z+5	; 0x05
    c22e:	a5 85       	ldd	r26, Z+13	; 0x0d
    c230:	ca 2b       	or	r28, r26
    c232:	56 80       	ldd	r5, Z+6	; 0x06
    c234:	a6 85       	ldd	r26, Z+14	; 0x0e
    c236:	a5 29       	or	r26, r5
    c238:	57 80       	ldd	r5, Z+7	; 0x07
    c23a:	e7 85       	ldd	r30, Z+15	; 0x0f
    c23c:	e5 29       	or	r30, r5
    c23e:	ba 29       	or	r27, r10
    c240:	1b 29       	or	r17, r11
    c242:	fc 28       	or	r15, r12
    c244:	ed 28       	or	r14, r13
    c246:	9d 2a       	or	r9, r29
    c248:	8c 2a       	or	r8, r28
    c24a:	7a 2a       	or	r7, r26
    c24c:	6e 2a       	or	r6, r30
    c24e:	2f 5f       	subi	r18, 0xFF	; 255
    c250:	3f 4f       	sbci	r19, 0xFF	; 255
    c252:	4c 5e       	subi	r20, 0xEC	; 236
    c254:	5f 4f       	sbci	r21, 0xFF	; 255
    c256:	d3 cf       	rjmp	.-90     	; 0xc1fe <qtm_ptc_init_acquisition_module+0x46>
    c258:	2b 2f       	mov	r18, r27
    c25a:	31 2f       	mov	r19, r17
    c25c:	4f 2d       	mov	r20, r15
    c25e:	5e 2d       	mov	r21, r14
    c260:	69 2d       	mov	r22, r9
    c262:	78 2d       	mov	r23, r8
    c264:	87 2d       	mov	r24, r7
    c266:	96 2d       	mov	r25, r6
    c268:	a0 e0       	ldi	r26, 0x00	; 0
    c26a:	0e 94 7a 63 	call	0xc6f4	; 0xc6f4 <__cmpdi2_s8>
    c26e:	09 f4       	brne	.+2      	; 0xc272 <qtm_ptc_init_acquisition_module+0xba>
    c270:	49 c0       	rjmp	.+146    	; 0xc304 <qtm_ptc_init_acquisition_module+0x14c>
    c272:	81 e0       	ldi	r24, 0x01	; 1
    c274:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    c278:	2b ee       	ldi	r18, 0xEB	; 235
    c27a:	c2 2e       	mov	r12, r18
    c27c:	23 e6       	ldi	r18, 0x63	; 99
    c27e:	d2 2e       	mov	r13, r18
    c280:	c0 e0       	ldi	r28, 0x00	; 0
    c282:	d0 e0       	ldi	r29, 0x00	; 0
    c284:	aa 24       	eor	r10, r10
    c286:	a3 94       	inc	r10
    c288:	b1 2c       	mov	r11, r1
    c28a:	4c e0       	ldi	r20, 0x0C	; 12
    c28c:	54 2e       	mov	r5, r20
    c28e:	2b 2f       	mov	r18, r27
    c290:	31 2f       	mov	r19, r17
    c292:	4f 2d       	mov	r20, r15
    c294:	5e 2d       	mov	r21, r14
    c296:	69 2d       	mov	r22, r9
    c298:	78 2d       	mov	r23, r8
    c29a:	87 2d       	mov	r24, r7
    c29c:	96 2d       	mov	r25, r6
    c29e:	0c 2f       	mov	r16, r28
    c2a0:	0e 94 5e 63 	call	0xc6bc	; 0xc6bc <__lshrdi3>
    c2a4:	21 70       	andi	r18, 0x01	; 1
    c2a6:	30 e0       	ldi	r19, 0x00	; 0
    c2a8:	40 e0       	ldi	r20, 0x00	; 0
    c2aa:	50 e0       	ldi	r21, 0x00	; 0
    c2ac:	60 e0       	ldi	r22, 0x00	; 0
    c2ae:	70 e0       	ldi	r23, 0x00	; 0
    c2b0:	80 e0       	ldi	r24, 0x00	; 0
    c2b2:	90 e0       	ldi	r25, 0x00	; 0
    c2b4:	a0 e0       	ldi	r26, 0x00	; 0
    c2b6:	0e 94 7a 63 	call	0xc6f4	; 0xc6f4 <__cmpdi2_s8>
    c2ba:	c9 f0       	breq	.+50     	; 0xc2ee <qtm_ptc_init_acquisition_module+0x136>
    c2bc:	f6 01       	movw	r30, r12
    c2be:	80 81       	ld	r24, Z
    c2c0:	e8 2f       	mov	r30, r24
    c2c2:	e2 95       	swap	r30
    c2c4:	e6 95       	lsr	r30
    c2c6:	e7 70       	andi	r30, 0x07	; 7
    c2c8:	f0 e0       	ldi	r31, 0x00	; 0
    c2ca:	ee 0f       	add	r30, r30
    c2cc:	ff 1f       	adc	r31, r31
    c2ce:	e3 52       	subi	r30, 0x23	; 35
    c2d0:	fc 49       	sbci	r31, 0x9C	; 156
    c2d2:	01 90       	ld	r0, Z+
    c2d4:	f0 81       	ld	r31, Z
    c2d6:	e0 2d       	mov	r30, r0
    c2d8:	8f 71       	andi	r24, 0x1F	; 31
    c2da:	95 01       	movw	r18, r10
    c2dc:	02 c0       	rjmp	.+4      	; 0xc2e2 <qtm_ptc_init_acquisition_module+0x12a>
    c2de:	22 0f       	add	r18, r18
    c2e0:	33 1f       	adc	r19, r19
    c2e2:	8a 95       	dec	r24
    c2e4:	e2 f7       	brpl	.-8      	; 0xc2de <qtm_ptc_init_acquisition_module+0x126>
    c2e6:	22 83       	std	Z+2, r18	; 0x02
    c2e8:	26 83       	std	Z+6, r18	; 0x06
    c2ea:	53 86       	std	Z+11, r5	; 0x0b
    c2ec:	25 87       	std	Z+13, r18	; 0x0d
    c2ee:	21 96       	adiw	r28, 0x01	; 1
    c2f0:	3f ef       	ldi	r19, 0xFF	; 255
    c2f2:	c3 1a       	sub	r12, r19
    c2f4:	d3 0a       	sbc	r13, r19
    c2f6:	c0 33       	cpi	r28, 0x30	; 48
    c2f8:	d1 05       	cpc	r29, r1
    c2fa:	49 f6       	brne	.-110    	; 0xc28e <qtm_ptc_init_acquisition_module+0xd6>
    c2fc:	80 e0       	ldi	r24, 0x00	; 0
    c2fe:	03 c0       	rjmp	.+6      	; 0xc306 <qtm_ptc_init_acquisition_module+0x14e>
    c300:	8b e0       	ldi	r24, 0x0B	; 11
    c302:	01 c0       	rjmp	.+2      	; 0xc306 <qtm_ptc_init_acquisition_module+0x14e>
    c304:	82 e0       	ldi	r24, 0x02	; 2
    c306:	df 91       	pop	r29
    c308:	cf 91       	pop	r28
    c30a:	1f 91       	pop	r17
    c30c:	0f 91       	pop	r16
    c30e:	ff 90       	pop	r15
    c310:	ef 90       	pop	r14
    c312:	df 90       	pop	r13
    c314:	cf 90       	pop	r12
    c316:	bf 90       	pop	r11
    c318:	af 90       	pop	r10
    c31a:	9f 90       	pop	r9
    c31c:	8f 90       	pop	r8
    c31e:	7f 90       	pop	r7
    c320:	6f 90       	pop	r6
    c322:	5f 90       	pop	r5
    c324:	08 95       	ret

0000c326 <qtm_ptc_qtlib_assign_signal_memory>:
    c326:	00 97       	sbiw	r24, 0x00	; 0
    c328:	31 f0       	breq	.+12     	; 0xc336 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    c32a:	80 93 fd 68 	sts	0x68FD, r24	; 0x8068fd <qtm_raw_data_measurements_ptr>
    c32e:	90 93 fe 68 	sts	0x68FE, r25	; 0x8068fe <qtm_raw_data_measurements_ptr+0x1>
    c332:	80 e0       	ldi	r24, 0x00	; 0
    c334:	08 95       	ret
    c336:	8b e0       	ldi	r24, 0x0B	; 11
    c338:	08 95       	ret

0000c33a <qtm_ptc_start_measurement_seq>:
    c33a:	61 15       	cp	r22, r1
    c33c:	71 05       	cpc	r23, r1
    c33e:	61 f1       	breq	.+88     	; 0xc398 <qtm_ptc_start_measurement_seq+0x5e>
    c340:	00 97       	sbiw	r24, 0x00	; 0
    c342:	51 f1       	breq	.+84     	; 0xc398 <qtm_ptc_start_measurement_seq+0x5e>
    c344:	20 91 5f 67 	lds	r18, 0x675F	; 0x80675f <touch_seq_lib_state>
    c348:	22 23       	and	r18, r18
    c34a:	41 f1       	breq	.+80     	; 0xc39c <qtm_ptc_start_measurement_seq+0x62>
    c34c:	24 30       	cpi	r18, 0x04	; 4
    c34e:	41 f1       	breq	.+80     	; 0xc3a0 <qtm_ptc_start_measurement_seq+0x66>
    c350:	80 93 fb 68 	sts	0x68FB, r24	; 0x8068fb <qtm_acquisition_control_working_set_ptr>
    c354:	90 93 fc 68 	sts	0x68FC, r25	; 0x8068fc <qtm_acquisition_control_working_set_ptr+0x1>
    c358:	60 93 5d 67 	sts	0x675D, r22	; 0x80675d <ptc_seq_measure_complete_pointer>
    c35c:	70 93 5e 67 	sts	0x675E, r23	; 0x80675e <ptc_seq_measure_complete_pointer+0x1>
    c360:	dc 01       	movw	r26, r24
    c362:	ed 91       	ld	r30, X+
    c364:	fc 91       	ld	r31, X
    c366:	22 81       	ldd	r18, Z+2	; 0x02
    c368:	20 34       	cpi	r18, 0x40	; 64
    c36a:	19 f4       	brne	.+6      	; 0xc372 <qtm_ptc_start_measurement_seq+0x38>
    c36c:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    c370:	07 c0       	rjmp	.+14     	; 0xc380 <qtm_ptc_start_measurement_seq+0x46>
    c372:	20 38       	cpi	r18, 0x80	; 128
    c374:	11 f0       	breq	.+4      	; 0xc37a <qtm_ptc_start_measurement_seq+0x40>
    c376:	21 38       	cpi	r18, 0x81	; 129
    c378:	31 f4       	brne	.+12     	; 0xc386 <qtm_ptc_start_measurement_seq+0x4c>
    c37a:	21 e0       	ldi	r18, 0x01	; 1
    c37c:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    c380:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7f07cb>
    c384:	11 c0       	rjmp	.+34     	; 0xc3a8 <qtm_ptc_start_measurement_seq+0x6e>
    c386:	22 38       	cpi	r18, 0x82	; 130
    c388:	69 f4       	brne	.+26     	; 0xc3a4 <qtm_ptc_start_measurement_seq+0x6a>
    c38a:	21 e0       	ldi	r18, 0x01	; 1
    c38c:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    c390:	29 e0       	ldi	r18, 0x09	; 9
    c392:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7f07cb>
    c396:	08 c0       	rjmp	.+16     	; 0xc3a8 <qtm_ptc_start_measurement_seq+0x6e>
    c398:	8b e0       	ldi	r24, 0x0B	; 11
    c39a:	08 95       	ret
    c39c:	83 e0       	ldi	r24, 0x03	; 3
    c39e:	08 95       	ret
    c3a0:	81 e0       	ldi	r24, 0x01	; 1
    c3a2:	08 95       	ret
    c3a4:	82 e0       	ldi	r24, 0x02	; 2
    c3a6:	08 95       	ret
    c3a8:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    c3ac:	dc 01       	movw	r26, r24
    c3ae:	ed 91       	ld	r30, X+
    c3b0:	fc 91       	ld	r31, X
    c3b2:	84 81       	ldd	r24, Z+4	; 0x04
    c3b4:	92 81       	ldd	r25, Z+2	; 0x02
    c3b6:	90 34       	cpi	r25, 0x40	; 64
    c3b8:	51 f4       	brne	.+20     	; 0xc3ce <qtm_ptc_start_measurement_seq+0x94>
    c3ba:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7f07c5>
    c3be:	80 31       	cpi	r24, 0x10	; 16
    c3c0:	10 f4       	brcc	.+4      	; 0xc3c6 <qtm_ptc_start_measurement_seq+0x8c>
    c3c2:	80 62       	ori	r24, 0x20	; 32
    c3c4:	01 c0       	rjmp	.+2      	; 0xc3c8 <qtm_ptc_start_measurement_seq+0x8e>
    c3c6:	8f e2       	ldi	r24, 0x2F	; 47
    c3c8:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7f07c3>
    c3cc:	08 c0       	rjmp	.+16     	; 0xc3de <qtm_ptc_start_measurement_seq+0xa4>
    c3ce:	90 e2       	ldi	r25, 0x20	; 32
    c3d0:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7f07c3>
    c3d4:	8f 30       	cpi	r24, 0x0F	; 15
    c3d6:	08 f0       	brcs	.+2      	; 0xc3da <qtm_ptc_start_measurement_seq+0xa0>
    c3d8:	8f e0       	ldi	r24, 0x0F	; 15
    c3da:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7f07c5>
    c3de:	81 e0       	ldi	r24, 0x01	; 1
    c3e0:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <__TEXT_REGION_LENGTH__+0x7f07d3>
    c3e4:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <__TEXT_REGION_LENGTH__+0x7f07d2>
    c3e8:	80 93 fa 62 	sts	0x62FA, r24	; 0x8062fa <qtm_which_mode_current>
    c3ec:	10 92 60 67 	sts	0x6760, r1	; 0x806760 <current_measure_channel>
    c3f0:	10 92 61 67 	sts	0x6761, r1	; 0x806761 <current_measure_channel+0x1>
    c3f4:	0e 94 12 5d 	call	0xba24	; 0xba24 <select_next_channel_to_measure>
    c3f8:	81 11       	cpse	r24, r1
    c3fa:	0b c0       	rjmp	.+22     	; 0xc412 <qtm_ptc_start_measurement_seq+0xd8>
    c3fc:	84 e0       	ldi	r24, 0x04	; 4
    c3fe:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    c402:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    c406:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    c40a:	0e 94 45 5d 	call	0xba8a	; 0xba8a <qtm_measure_node>
    c40e:	80 e0       	ldi	r24, 0x00	; 0
    c410:	08 95       	ret
    c412:	82 e0       	ldi	r24, 0x02	; 2
    c414:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    c418:	08 95       	ret

0000c41a <qtm_enable_sensor_node>:
    c41a:	00 97       	sbiw	r24, 0x00	; 0
    c41c:	c9 f0       	breq	.+50     	; 0xc450 <qtm_enable_sensor_node+0x36>
    c41e:	dc 01       	movw	r26, r24
    c420:	ed 91       	ld	r30, X+
    c422:	fc 91       	ld	r31, X
    c424:	11 97       	sbiw	r26, 0x01	; 1
    c426:	20 81       	ld	r18, Z
    c428:	31 81       	ldd	r19, Z+1	; 0x01
    c42a:	26 17       	cp	r18, r22
    c42c:	37 07       	cpc	r19, r23
    c42e:	90 f0       	brcs	.+36     	; 0xc454 <qtm_enable_sensor_node+0x3a>
    c430:	45 e0       	ldi	r20, 0x05	; 5
    c432:	46 9f       	mul	r20, r22
    c434:	90 01       	movw	r18, r0
    c436:	47 9f       	mul	r20, r23
    c438:	30 0d       	add	r19, r0
    c43a:	11 24       	eor	r1, r1
    c43c:	14 96       	adiw	r26, 0x04	; 4
    c43e:	ed 91       	ld	r30, X+
    c440:	fc 91       	ld	r31, X
    c442:	15 97       	sbiw	r26, 0x05	; 5
    c444:	e2 0f       	add	r30, r18
    c446:	f3 1f       	adc	r31, r19
    c448:	81 e0       	ldi	r24, 0x01	; 1
    c44a:	80 83       	st	Z, r24
    c44c:	80 e0       	ldi	r24, 0x00	; 0
    c44e:	08 95       	ret
    c450:	8b e0       	ldi	r24, 0x0B	; 11
    c452:	08 95       	ret
    c454:	82 e0       	ldi	r24, 0x02	; 2
    c456:	08 95       	ret

0000c458 <qtm_calibrate_sensor_node>:
    c458:	fc 01       	movw	r30, r24
    c45a:	89 2b       	or	r24, r25
    c45c:	d1 f1       	breq	.+116    	; 0xc4d2 <qtm_calibrate_sensor_node+0x7a>
    c45e:	a0 81       	ld	r26, Z
    c460:	b1 81       	ldd	r27, Z+1	; 0x01
    c462:	8d 91       	ld	r24, X+
    c464:	9c 91       	ld	r25, X
    c466:	11 97       	sbiw	r26, 0x01	; 1
    c468:	86 17       	cp	r24, r22
    c46a:	97 07       	cpc	r25, r23
    c46c:	a0 f1       	brcs	.+104    	; 0xc4d6 <qtm_calibrate_sensor_node+0x7e>
    c46e:	12 96       	adiw	r26, 0x02	; 2
    c470:	9c 91       	ld	r25, X
    c472:	04 80       	ldd	r0, Z+4	; 0x04
    c474:	f5 81       	ldd	r31, Z+5	; 0x05
    c476:	e0 2d       	mov	r30, r0
    c478:	90 34       	cpi	r25, 0x40	; 64
    c47a:	59 f4       	brne	.+22     	; 0xc492 <qtm_calibrate_sensor_node+0x3a>
    c47c:	85 e0       	ldi	r24, 0x05	; 5
    c47e:	86 9f       	mul	r24, r22
    c480:	d0 01       	movw	r26, r0
    c482:	87 9f       	mul	r24, r23
    c484:	b0 0d       	add	r27, r0
    c486:	11 24       	eor	r1, r1
    c488:	ae 0f       	add	r26, r30
    c48a:	bf 1f       	adc	r27, r31
    c48c:	80 ea       	ldi	r24, 0xA0	; 160
    c48e:	90 e0       	ldi	r25, 0x00	; 0
    c490:	0d c0       	rjmp	.+26     	; 0xc4ac <qtm_calibrate_sensor_node+0x54>
    c492:	90 58       	subi	r25, 0x80	; 128
    c494:	93 30       	cpi	r25, 0x03	; 3
    c496:	80 f4       	brcc	.+32     	; 0xc4b8 <qtm_calibrate_sensor_node+0x60>
    c498:	85 e0       	ldi	r24, 0x05	; 5
    c49a:	86 9f       	mul	r24, r22
    c49c:	d0 01       	movw	r26, r0
    c49e:	87 9f       	mul	r24, r23
    c4a0:	b0 0d       	add	r27, r0
    c4a2:	11 24       	eor	r1, r1
    c4a4:	ae 0f       	add	r26, r30
    c4a6:	bf 1f       	adc	r27, r31
    c4a8:	80 ef       	ldi	r24, 0xF0	; 240
    c4aa:	90 e0       	ldi	r25, 0x00	; 0
    c4ac:	13 96       	adiw	r26, 0x03	; 3
    c4ae:	8d 93       	st	X+, r24
    c4b0:	9c 93       	st	X, r25
    c4b2:	14 97       	sbiw	r26, 0x04	; 4
    c4b4:	80 e0       	ldi	r24, 0x00	; 0
    c4b6:	01 c0       	rjmp	.+2      	; 0xc4ba <qtm_calibrate_sensor_node+0x62>
    c4b8:	82 e0       	ldi	r24, 0x02	; 2
    c4ba:	95 e0       	ldi	r25, 0x05	; 5
    c4bc:	96 9f       	mul	r25, r22
    c4be:	90 01       	movw	r18, r0
    c4c0:	97 9f       	mul	r25, r23
    c4c2:	30 0d       	add	r19, r0
    c4c4:	11 24       	eor	r1, r1
    c4c6:	e2 0f       	add	r30, r18
    c4c8:	f3 1f       	adc	r31, r19
    c4ca:	90 81       	ld	r25, Z
    c4cc:	92 60       	ori	r25, 0x02	; 2
    c4ce:	90 83       	st	Z, r25
    c4d0:	08 95       	ret
    c4d2:	8b e0       	ldi	r24, 0x0B	; 11
    c4d4:	08 95       	ret
    c4d6:	82 e0       	ldi	r24, 0x02	; 2
    c4d8:	08 95       	ret

0000c4da <qtm_avr_da_ptc_handler_wcomp>:
    c4da:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7f07da>
    c4de:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7f07db>
    c4e2:	60 91 60 67 	lds	r22, 0x6760	; 0x806760 <current_measure_channel>
    c4e6:	70 91 61 67 	lds	r23, 0x6761	; 0x806761 <current_measure_channel+0x1>
    c4ea:	cb 01       	movw	r24, r22
    c4ec:	88 0f       	add	r24, r24
    c4ee:	99 1f       	adc	r25, r25
    c4f0:	e0 91 fd 68 	lds	r30, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr>
    c4f4:	f0 91 fe 68 	lds	r31, 0x68FE	; 0x8068fe <qtm_raw_data_measurements_ptr+0x1>
    c4f8:	e8 0f       	add	r30, r24
    c4fa:	f9 1f       	adc	r31, r25
    c4fc:	20 83       	st	Z, r18
    c4fe:	31 83       	std	Z+1, r19	; 0x01
    c500:	a0 91 fb 68 	lds	r26, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr>
    c504:	b0 91 fc 68 	lds	r27, 0x68FC	; 0x8068fc <qtm_acquisition_control_working_set_ptr+0x1>
    c508:	44 e1       	ldi	r20, 0x14	; 20
    c50a:	46 9f       	mul	r20, r22
    c50c:	c0 01       	movw	r24, r0
    c50e:	47 9f       	mul	r20, r23
    c510:	90 0d       	add	r25, r0
    c512:	11 24       	eor	r1, r1
    c514:	12 96       	adiw	r26, 0x02	; 2
    c516:	ed 91       	ld	r30, X+
    c518:	fc 91       	ld	r31, X
    c51a:	13 97       	sbiw	r26, 0x03	; 3
    c51c:	e8 0f       	add	r30, r24
    c51e:	f9 1f       	adc	r31, r25
    c520:	92 89       	ldd	r25, Z+18	; 0x12
    c522:	9f 70       	andi	r25, 0x0F	; 15
    c524:	83 89       	ldd	r24, Z+19	; 0x13
    c526:	98 17       	cp	r25, r24
    c528:	10 f4       	brcc	.+4      	; 0xc52e <qtm_avr_da_ptc_handler_wcomp+0x54>
    c52a:	89 1b       	sub	r24, r25
    c52c:	01 c0       	rjmp	.+2      	; 0xc530 <qtm_avr_da_ptc_handler_wcomp+0x56>
    c52e:	80 e0       	ldi	r24, 0x00	; 0
    c530:	95 e0       	ldi	r25, 0x05	; 5
    c532:	96 9f       	mul	r25, r22
    c534:	a0 01       	movw	r20, r0
    c536:	97 9f       	mul	r25, r23
    c538:	50 0d       	add	r21, r0
    c53a:	11 24       	eor	r1, r1
    c53c:	14 96       	adiw	r26, 0x04	; 4
    c53e:	ed 91       	ld	r30, X+
    c540:	fc 91       	ld	r31, X
    c542:	15 97       	sbiw	r26, 0x05	; 5
    c544:	e4 0f       	add	r30, r20
    c546:	f5 1f       	adc	r31, r21
    c548:	02 c0       	rjmp	.+4      	; 0xc54e <qtm_avr_da_ptc_handler_wcomp+0x74>
    c54a:	36 95       	lsr	r19
    c54c:	27 95       	ror	r18
    c54e:	8a 95       	dec	r24
    c550:	e2 f7       	brpl	.-8      	; 0xc54a <qtm_avr_da_ptc_handler_wcomp+0x70>
    c552:	21 83       	std	Z+1, r18	; 0x01
    c554:	32 83       	std	Z+2, r19	; 0x02
    c556:	82 e0       	ldi	r24, 0x02	; 2
    c558:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    c55c:	e0 91 5b 67 	lds	r30, 0x675B	; 0x80675b <ptc_wcomp_happened_pointer>
    c560:	f0 91 5c 67 	lds	r31, 0x675C	; 0x80675c <ptc_wcomp_happened_pointer+0x1>
    c564:	09 94       	ijmp

0000c566 <qtm_avr_da_ptc_handler_eoc>:
    c566:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    c56a:	80 91 fa 62 	lds	r24, 0x62FA	; 0x8062fa <qtm_which_mode_current>
    c56e:	81 30       	cpi	r24, 0x01	; 1
    c570:	09 f0       	breq	.+2      	; 0xc574 <qtm_avr_da_ptc_handler_eoc+0xe>
    c572:	4e c0       	rjmp	.+156    	; 0xc610 <qtm_avr_da_ptc_handler_eoc+0xaa>
    c574:	40 91 da 07 	lds	r20, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7f07da>
    c578:	50 91 db 07 	lds	r21, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7f07db>
    c57c:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    c580:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    c584:	9c 01       	movw	r18, r24
    c586:	22 0f       	add	r18, r18
    c588:	33 1f       	adc	r19, r19
    c58a:	e0 91 fd 68 	lds	r30, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr>
    c58e:	f0 91 fe 68 	lds	r31, 0x68FE	; 0x8068fe <qtm_raw_data_measurements_ptr+0x1>
    c592:	e2 0f       	add	r30, r18
    c594:	f3 1f       	adc	r31, r19
    c596:	40 83       	st	Z, r20
    c598:	51 83       	std	Z+1, r21	; 0x01
    c59a:	01 96       	adiw	r24, 0x01	; 1
    c59c:	80 93 60 67 	sts	0x6760, r24	; 0x806760 <current_measure_channel>
    c5a0:	90 93 61 67 	sts	0x6761, r25	; 0x806761 <current_measure_channel+0x1>
    c5a4:	0e 94 12 5d 	call	0xba24	; 0xba24 <select_next_channel_to_measure>
    c5a8:	81 11       	cpse	r24, r1
    c5aa:	09 c0       	rjmp	.+18     	; 0xc5be <qtm_avr_da_ptc_handler_eoc+0x58>
    c5ac:	84 e0       	ldi	r24, 0x04	; 4
    c5ae:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    c5b2:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    c5b6:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    c5ba:	0c 94 45 5d 	jmp	0xba8a	; 0xba8a <qtm_measure_node>
    c5be:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7f07e8>
    c5c2:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7f07e9>
    c5c6:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7f07ea>
    c5ca:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7f07eb>
    c5ce:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7f07ec>
    c5d2:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7f07ed>
    c5d6:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7f07f0>
    c5da:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7f07f1>
    c5de:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7f07f2>
    c5e2:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7f07f3>
    c5e6:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7f07f4>
    c5ea:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7f07f5>
    c5ee:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7f07f8>
    c5f2:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7f07f9>
    c5f6:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7f07fa>
    c5fa:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7f07fb>
    c5fe:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7f07fc>
    c602:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7f07fd>
    c606:	e0 91 5d 67 	lds	r30, 0x675D	; 0x80675d <ptc_seq_measure_complete_pointer>
    c60a:	f0 91 5e 67 	lds	r31, 0x675E	; 0x80675e <ptc_seq_measure_complete_pointer+0x1>
    c60e:	09 94       	ijmp
    c610:	0c 94 6d 62 	jmp	0xc4da	; 0xc4da <qtm_avr_da_ptc_handler_wcomp>

0000c614 <__mulsi3>:
    c614:	db 01       	movw	r26, r22
    c616:	8f 93       	push	r24
    c618:	9f 93       	push	r25
    c61a:	0e 94 51 63 	call	0xc6a2	; 0xc6a2 <__muluhisi3>
    c61e:	bf 91       	pop	r27
    c620:	af 91       	pop	r26
    c622:	a2 9f       	mul	r26, r18
    c624:	80 0d       	add	r24, r0
    c626:	91 1d       	adc	r25, r1
    c628:	a3 9f       	mul	r26, r19
    c62a:	90 0d       	add	r25, r0
    c62c:	b2 9f       	mul	r27, r18
    c62e:	90 0d       	add	r25, r0
    c630:	11 24       	eor	r1, r1
    c632:	08 95       	ret

0000c634 <__udivmodsi4>:
    c634:	a1 e2       	ldi	r26, 0x21	; 33
    c636:	1a 2e       	mov	r1, r26
    c638:	aa 1b       	sub	r26, r26
    c63a:	bb 1b       	sub	r27, r27
    c63c:	fd 01       	movw	r30, r26
    c63e:	0d c0       	rjmp	.+26     	; 0xc65a <__udivmodsi4_ep>

0000c640 <__udivmodsi4_loop>:
    c640:	aa 1f       	adc	r26, r26
    c642:	bb 1f       	adc	r27, r27
    c644:	ee 1f       	adc	r30, r30
    c646:	ff 1f       	adc	r31, r31
    c648:	a2 17       	cp	r26, r18
    c64a:	b3 07       	cpc	r27, r19
    c64c:	e4 07       	cpc	r30, r20
    c64e:	f5 07       	cpc	r31, r21
    c650:	20 f0       	brcs	.+8      	; 0xc65a <__udivmodsi4_ep>
    c652:	a2 1b       	sub	r26, r18
    c654:	b3 0b       	sbc	r27, r19
    c656:	e4 0b       	sbc	r30, r20
    c658:	f5 0b       	sbc	r31, r21

0000c65a <__udivmodsi4_ep>:
    c65a:	66 1f       	adc	r22, r22
    c65c:	77 1f       	adc	r23, r23
    c65e:	88 1f       	adc	r24, r24
    c660:	99 1f       	adc	r25, r25
    c662:	1a 94       	dec	r1
    c664:	69 f7       	brne	.-38     	; 0xc640 <__udivmodsi4_loop>
    c666:	60 95       	com	r22
    c668:	70 95       	com	r23
    c66a:	80 95       	com	r24
    c66c:	90 95       	com	r25
    c66e:	9b 01       	movw	r18, r22
    c670:	ac 01       	movw	r20, r24
    c672:	bd 01       	movw	r22, r26
    c674:	cf 01       	movw	r24, r30
    c676:	08 95       	ret

0000c678 <__tablejump2__>:
    c678:	ee 0f       	add	r30, r30
    c67a:	ff 1f       	adc	r31, r31
    c67c:	05 90       	lpm	r0, Z+
    c67e:	f4 91       	lpm	r31, Z
    c680:	e0 2d       	mov	r30, r0
    c682:	09 94       	ijmp

0000c684 <__umulhisi3>:
    c684:	a2 9f       	mul	r26, r18
    c686:	b0 01       	movw	r22, r0
    c688:	b3 9f       	mul	r27, r19
    c68a:	c0 01       	movw	r24, r0
    c68c:	a3 9f       	mul	r26, r19
    c68e:	70 0d       	add	r23, r0
    c690:	81 1d       	adc	r24, r1
    c692:	11 24       	eor	r1, r1
    c694:	91 1d       	adc	r25, r1
    c696:	b2 9f       	mul	r27, r18
    c698:	70 0d       	add	r23, r0
    c69a:	81 1d       	adc	r24, r1
    c69c:	11 24       	eor	r1, r1
    c69e:	91 1d       	adc	r25, r1
    c6a0:	08 95       	ret

0000c6a2 <__muluhisi3>:
    c6a2:	0e 94 42 63 	call	0xc684	; 0xc684 <__umulhisi3>
    c6a6:	a5 9f       	mul	r26, r21
    c6a8:	90 0d       	add	r25, r0
    c6aa:	b4 9f       	mul	r27, r20
    c6ac:	90 0d       	add	r25, r0
    c6ae:	a4 9f       	mul	r26, r20
    c6b0:	80 0d       	add	r24, r0
    c6b2:	91 1d       	adc	r25, r1
    c6b4:	11 24       	eor	r1, r1
    c6b6:	08 95       	ret

0000c6b8 <__ashrdi3>:
    c6b8:	97 fb       	bst	r25, 7
    c6ba:	10 f8       	bld	r1, 0

0000c6bc <__lshrdi3>:
    c6bc:	16 94       	lsr	r1
    c6be:	00 08       	sbc	r0, r0
    c6c0:	0f 93       	push	r16
    c6c2:	08 30       	cpi	r16, 0x08	; 8
    c6c4:	98 f0       	brcs	.+38     	; 0xc6ec <__lshrdi3+0x30>
    c6c6:	08 50       	subi	r16, 0x08	; 8
    c6c8:	23 2f       	mov	r18, r19
    c6ca:	34 2f       	mov	r19, r20
    c6cc:	45 2f       	mov	r20, r21
    c6ce:	56 2f       	mov	r21, r22
    c6d0:	67 2f       	mov	r22, r23
    c6d2:	78 2f       	mov	r23, r24
    c6d4:	89 2f       	mov	r24, r25
    c6d6:	90 2d       	mov	r25, r0
    c6d8:	f4 cf       	rjmp	.-24     	; 0xc6c2 <__lshrdi3+0x6>
    c6da:	05 94       	asr	r0
    c6dc:	97 95       	ror	r25
    c6de:	87 95       	ror	r24
    c6e0:	77 95       	ror	r23
    c6e2:	67 95       	ror	r22
    c6e4:	57 95       	ror	r21
    c6e6:	47 95       	ror	r20
    c6e8:	37 95       	ror	r19
    c6ea:	27 95       	ror	r18
    c6ec:	0a 95       	dec	r16
    c6ee:	aa f7       	brpl	.-22     	; 0xc6da <__lshrdi3+0x1e>
    c6f0:	0f 91       	pop	r16
    c6f2:	08 95       	ret

0000c6f4 <__cmpdi2_s8>:
    c6f4:	00 24       	eor	r0, r0
    c6f6:	a7 fd       	sbrc	r26, 7
    c6f8:	00 94       	com	r0
    c6fa:	2a 17       	cp	r18, r26
    c6fc:	30 05       	cpc	r19, r0
    c6fe:	40 05       	cpc	r20, r0
    c700:	50 05       	cpc	r21, r0
    c702:	60 05       	cpc	r22, r0
    c704:	70 05       	cpc	r23, r0
    c706:	80 05       	cpc	r24, r0
    c708:	90 05       	cpc	r25, r0
    c70a:	08 95       	ret

0000c70c <malloc>:
    c70c:	0f 93       	push	r16
    c70e:	1f 93       	push	r17
    c710:	cf 93       	push	r28
    c712:	df 93       	push	r29
    c714:	82 30       	cpi	r24, 0x02	; 2
    c716:	91 05       	cpc	r25, r1
    c718:	10 f4       	brcc	.+4      	; 0xc71e <malloc+0x12>
    c71a:	82 e0       	ldi	r24, 0x02	; 2
    c71c:	90 e0       	ldi	r25, 0x00	; 0
    c71e:	e0 91 01 69 	lds	r30, 0x6901	; 0x806901 <__flp>
    c722:	f0 91 02 69 	lds	r31, 0x6902	; 0x806902 <__flp+0x1>
    c726:	20 e0       	ldi	r18, 0x00	; 0
    c728:	30 e0       	ldi	r19, 0x00	; 0
    c72a:	a0 e0       	ldi	r26, 0x00	; 0
    c72c:	b0 e0       	ldi	r27, 0x00	; 0
    c72e:	30 97       	sbiw	r30, 0x00	; 0
    c730:	19 f1       	breq	.+70     	; 0xc778 <malloc+0x6c>
    c732:	40 81       	ld	r20, Z
    c734:	51 81       	ldd	r21, Z+1	; 0x01
    c736:	02 81       	ldd	r16, Z+2	; 0x02
    c738:	13 81       	ldd	r17, Z+3	; 0x03
    c73a:	48 17       	cp	r20, r24
    c73c:	59 07       	cpc	r21, r25
    c73e:	c8 f0       	brcs	.+50     	; 0xc772 <malloc+0x66>
    c740:	84 17       	cp	r24, r20
    c742:	95 07       	cpc	r25, r21
    c744:	69 f4       	brne	.+26     	; 0xc760 <malloc+0x54>
    c746:	10 97       	sbiw	r26, 0x00	; 0
    c748:	31 f0       	breq	.+12     	; 0xc756 <malloc+0x4a>
    c74a:	12 96       	adiw	r26, 0x02	; 2
    c74c:	0c 93       	st	X, r16
    c74e:	12 97       	sbiw	r26, 0x02	; 2
    c750:	13 96       	adiw	r26, 0x03	; 3
    c752:	1c 93       	st	X, r17
    c754:	27 c0       	rjmp	.+78     	; 0xc7a4 <malloc+0x98>
    c756:	00 93 01 69 	sts	0x6901, r16	; 0x806901 <__flp>
    c75a:	10 93 02 69 	sts	0x6902, r17	; 0x806902 <__flp+0x1>
    c75e:	22 c0       	rjmp	.+68     	; 0xc7a4 <malloc+0x98>
    c760:	21 15       	cp	r18, r1
    c762:	31 05       	cpc	r19, r1
    c764:	19 f0       	breq	.+6      	; 0xc76c <malloc+0x60>
    c766:	42 17       	cp	r20, r18
    c768:	53 07       	cpc	r21, r19
    c76a:	18 f4       	brcc	.+6      	; 0xc772 <malloc+0x66>
    c76c:	9a 01       	movw	r18, r20
    c76e:	bd 01       	movw	r22, r26
    c770:	ef 01       	movw	r28, r30
    c772:	df 01       	movw	r26, r30
    c774:	f8 01       	movw	r30, r16
    c776:	db cf       	rjmp	.-74     	; 0xc72e <malloc+0x22>
    c778:	21 15       	cp	r18, r1
    c77a:	31 05       	cpc	r19, r1
    c77c:	f9 f0       	breq	.+62     	; 0xc7bc <malloc+0xb0>
    c77e:	28 1b       	sub	r18, r24
    c780:	39 0b       	sbc	r19, r25
    c782:	24 30       	cpi	r18, 0x04	; 4
    c784:	31 05       	cpc	r19, r1
    c786:	80 f4       	brcc	.+32     	; 0xc7a8 <malloc+0x9c>
    c788:	8a 81       	ldd	r24, Y+2	; 0x02
    c78a:	9b 81       	ldd	r25, Y+3	; 0x03
    c78c:	61 15       	cp	r22, r1
    c78e:	71 05       	cpc	r23, r1
    c790:	21 f0       	breq	.+8      	; 0xc79a <malloc+0x8e>
    c792:	fb 01       	movw	r30, r22
    c794:	82 83       	std	Z+2, r24	; 0x02
    c796:	93 83       	std	Z+3, r25	; 0x03
    c798:	04 c0       	rjmp	.+8      	; 0xc7a2 <malloc+0x96>
    c79a:	80 93 01 69 	sts	0x6901, r24	; 0x806901 <__flp>
    c79e:	90 93 02 69 	sts	0x6902, r25	; 0x806902 <__flp+0x1>
    c7a2:	fe 01       	movw	r30, r28
    c7a4:	32 96       	adiw	r30, 0x02	; 2
    c7a6:	44 c0       	rjmp	.+136    	; 0xc830 <malloc+0x124>
    c7a8:	fe 01       	movw	r30, r28
    c7aa:	e2 0f       	add	r30, r18
    c7ac:	f3 1f       	adc	r31, r19
    c7ae:	81 93       	st	Z+, r24
    c7b0:	91 93       	st	Z+, r25
    c7b2:	22 50       	subi	r18, 0x02	; 2
    c7b4:	31 09       	sbc	r19, r1
    c7b6:	28 83       	st	Y, r18
    c7b8:	39 83       	std	Y+1, r19	; 0x01
    c7ba:	3a c0       	rjmp	.+116    	; 0xc830 <malloc+0x124>
    c7bc:	20 91 ff 68 	lds	r18, 0x68FF	; 0x8068ff <__brkval>
    c7c0:	30 91 00 69 	lds	r19, 0x6900	; 0x806900 <__brkval+0x1>
    c7c4:	23 2b       	or	r18, r19
    c7c6:	41 f4       	brne	.+16     	; 0xc7d8 <malloc+0xcc>
    c7c8:	20 91 02 60 	lds	r18, 0x6002	; 0x806002 <__malloc_heap_start>
    c7cc:	30 91 03 60 	lds	r19, 0x6003	; 0x806003 <__malloc_heap_start+0x1>
    c7d0:	20 93 ff 68 	sts	0x68FF, r18	; 0x8068ff <__brkval>
    c7d4:	30 93 00 69 	sts	0x6900, r19	; 0x806900 <__brkval+0x1>
    c7d8:	20 91 00 60 	lds	r18, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    c7dc:	30 91 01 60 	lds	r19, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
    c7e0:	21 15       	cp	r18, r1
    c7e2:	31 05       	cpc	r19, r1
    c7e4:	41 f4       	brne	.+16     	; 0xc7f6 <malloc+0xea>
    c7e6:	2d b7       	in	r18, 0x3d	; 61
    c7e8:	3e b7       	in	r19, 0x3e	; 62
    c7ea:	40 91 04 60 	lds	r20, 0x6004	; 0x806004 <__malloc_margin>
    c7ee:	50 91 05 60 	lds	r21, 0x6005	; 0x806005 <__malloc_margin+0x1>
    c7f2:	24 1b       	sub	r18, r20
    c7f4:	35 0b       	sbc	r19, r21
    c7f6:	e0 91 ff 68 	lds	r30, 0x68FF	; 0x8068ff <__brkval>
    c7fa:	f0 91 00 69 	lds	r31, 0x6900	; 0x806900 <__brkval+0x1>
    c7fe:	e2 17       	cp	r30, r18
    c800:	f3 07       	cpc	r31, r19
    c802:	a0 f4       	brcc	.+40     	; 0xc82c <malloc+0x120>
    c804:	2e 1b       	sub	r18, r30
    c806:	3f 0b       	sbc	r19, r31
    c808:	28 17       	cp	r18, r24
    c80a:	39 07       	cpc	r19, r25
    c80c:	78 f0       	brcs	.+30     	; 0xc82c <malloc+0x120>
    c80e:	ac 01       	movw	r20, r24
    c810:	4e 5f       	subi	r20, 0xFE	; 254
    c812:	5f 4f       	sbci	r21, 0xFF	; 255
    c814:	24 17       	cp	r18, r20
    c816:	35 07       	cpc	r19, r21
    c818:	48 f0       	brcs	.+18     	; 0xc82c <malloc+0x120>
    c81a:	4e 0f       	add	r20, r30
    c81c:	5f 1f       	adc	r21, r31
    c81e:	40 93 ff 68 	sts	0x68FF, r20	; 0x8068ff <__brkval>
    c822:	50 93 00 69 	sts	0x6900, r21	; 0x806900 <__brkval+0x1>
    c826:	81 93       	st	Z+, r24
    c828:	91 93       	st	Z+, r25
    c82a:	02 c0       	rjmp	.+4      	; 0xc830 <malloc+0x124>
    c82c:	e0 e0       	ldi	r30, 0x00	; 0
    c82e:	f0 e0       	ldi	r31, 0x00	; 0
    c830:	cf 01       	movw	r24, r30
    c832:	df 91       	pop	r29
    c834:	cf 91       	pop	r28
    c836:	1f 91       	pop	r17
    c838:	0f 91       	pop	r16
    c83a:	08 95       	ret

0000c83c <free>:
    c83c:	cf 93       	push	r28
    c83e:	df 93       	push	r29
    c840:	00 97       	sbiw	r24, 0x00	; 0
    c842:	09 f4       	brne	.+2      	; 0xc846 <free+0xa>
    c844:	81 c0       	rjmp	.+258    	; 0xc948 <free+0x10c>
    c846:	fc 01       	movw	r30, r24
    c848:	32 97       	sbiw	r30, 0x02	; 2
    c84a:	12 82       	std	Z+2, r1	; 0x02
    c84c:	13 82       	std	Z+3, r1	; 0x03
    c84e:	a0 91 01 69 	lds	r26, 0x6901	; 0x806901 <__flp>
    c852:	b0 91 02 69 	lds	r27, 0x6902	; 0x806902 <__flp+0x1>
    c856:	10 97       	sbiw	r26, 0x00	; 0
    c858:	81 f4       	brne	.+32     	; 0xc87a <free+0x3e>
    c85a:	20 81       	ld	r18, Z
    c85c:	31 81       	ldd	r19, Z+1	; 0x01
    c85e:	82 0f       	add	r24, r18
    c860:	93 1f       	adc	r25, r19
    c862:	20 91 ff 68 	lds	r18, 0x68FF	; 0x8068ff <__brkval>
    c866:	30 91 00 69 	lds	r19, 0x6900	; 0x806900 <__brkval+0x1>
    c86a:	28 17       	cp	r18, r24
    c86c:	39 07       	cpc	r19, r25
    c86e:	51 f5       	brne	.+84     	; 0xc8c4 <free+0x88>
    c870:	e0 93 ff 68 	sts	0x68FF, r30	; 0x8068ff <__brkval>
    c874:	f0 93 00 69 	sts	0x6900, r31	; 0x806900 <__brkval+0x1>
    c878:	67 c0       	rjmp	.+206    	; 0xc948 <free+0x10c>
    c87a:	ed 01       	movw	r28, r26
    c87c:	20 e0       	ldi	r18, 0x00	; 0
    c87e:	30 e0       	ldi	r19, 0x00	; 0
    c880:	ce 17       	cp	r28, r30
    c882:	df 07       	cpc	r29, r31
    c884:	40 f4       	brcc	.+16     	; 0xc896 <free+0x5a>
    c886:	4a 81       	ldd	r20, Y+2	; 0x02
    c888:	5b 81       	ldd	r21, Y+3	; 0x03
    c88a:	9e 01       	movw	r18, r28
    c88c:	41 15       	cp	r20, r1
    c88e:	51 05       	cpc	r21, r1
    c890:	f1 f0       	breq	.+60     	; 0xc8ce <free+0x92>
    c892:	ea 01       	movw	r28, r20
    c894:	f5 cf       	rjmp	.-22     	; 0xc880 <free+0x44>
    c896:	c2 83       	std	Z+2, r28	; 0x02
    c898:	d3 83       	std	Z+3, r29	; 0x03
    c89a:	40 81       	ld	r20, Z
    c89c:	51 81       	ldd	r21, Z+1	; 0x01
    c89e:	84 0f       	add	r24, r20
    c8a0:	95 1f       	adc	r25, r21
    c8a2:	c8 17       	cp	r28, r24
    c8a4:	d9 07       	cpc	r29, r25
    c8a6:	59 f4       	brne	.+22     	; 0xc8be <free+0x82>
    c8a8:	88 81       	ld	r24, Y
    c8aa:	99 81       	ldd	r25, Y+1	; 0x01
    c8ac:	84 0f       	add	r24, r20
    c8ae:	95 1f       	adc	r25, r21
    c8b0:	02 96       	adiw	r24, 0x02	; 2
    c8b2:	80 83       	st	Z, r24
    c8b4:	91 83       	std	Z+1, r25	; 0x01
    c8b6:	8a 81       	ldd	r24, Y+2	; 0x02
    c8b8:	9b 81       	ldd	r25, Y+3	; 0x03
    c8ba:	82 83       	std	Z+2, r24	; 0x02
    c8bc:	93 83       	std	Z+3, r25	; 0x03
    c8be:	21 15       	cp	r18, r1
    c8c0:	31 05       	cpc	r19, r1
    c8c2:	29 f4       	brne	.+10     	; 0xc8ce <free+0x92>
    c8c4:	e0 93 01 69 	sts	0x6901, r30	; 0x806901 <__flp>
    c8c8:	f0 93 02 69 	sts	0x6902, r31	; 0x806902 <__flp+0x1>
    c8cc:	3d c0       	rjmp	.+122    	; 0xc948 <free+0x10c>
    c8ce:	e9 01       	movw	r28, r18
    c8d0:	ea 83       	std	Y+2, r30	; 0x02
    c8d2:	fb 83       	std	Y+3, r31	; 0x03
    c8d4:	49 91       	ld	r20, Y+
    c8d6:	59 91       	ld	r21, Y+
    c8d8:	c4 0f       	add	r28, r20
    c8da:	d5 1f       	adc	r29, r21
    c8dc:	ec 17       	cp	r30, r28
    c8de:	fd 07       	cpc	r31, r29
    c8e0:	61 f4       	brne	.+24     	; 0xc8fa <free+0xbe>
    c8e2:	80 81       	ld	r24, Z
    c8e4:	91 81       	ldd	r25, Z+1	; 0x01
    c8e6:	84 0f       	add	r24, r20
    c8e8:	95 1f       	adc	r25, r21
    c8ea:	02 96       	adiw	r24, 0x02	; 2
    c8ec:	e9 01       	movw	r28, r18
    c8ee:	88 83       	st	Y, r24
    c8f0:	99 83       	std	Y+1, r25	; 0x01
    c8f2:	82 81       	ldd	r24, Z+2	; 0x02
    c8f4:	93 81       	ldd	r25, Z+3	; 0x03
    c8f6:	8a 83       	std	Y+2, r24	; 0x02
    c8f8:	9b 83       	std	Y+3, r25	; 0x03
    c8fa:	e0 e0       	ldi	r30, 0x00	; 0
    c8fc:	f0 e0       	ldi	r31, 0x00	; 0
    c8fe:	12 96       	adiw	r26, 0x02	; 2
    c900:	8d 91       	ld	r24, X+
    c902:	9c 91       	ld	r25, X
    c904:	13 97       	sbiw	r26, 0x03	; 3
    c906:	00 97       	sbiw	r24, 0x00	; 0
    c908:	19 f0       	breq	.+6      	; 0xc910 <free+0xd4>
    c90a:	fd 01       	movw	r30, r26
    c90c:	dc 01       	movw	r26, r24
    c90e:	f7 cf       	rjmp	.-18     	; 0xc8fe <free+0xc2>
    c910:	8d 91       	ld	r24, X+
    c912:	9c 91       	ld	r25, X
    c914:	11 97       	sbiw	r26, 0x01	; 1
    c916:	9d 01       	movw	r18, r26
    c918:	2e 5f       	subi	r18, 0xFE	; 254
    c91a:	3f 4f       	sbci	r19, 0xFF	; 255
    c91c:	82 0f       	add	r24, r18
    c91e:	93 1f       	adc	r25, r19
    c920:	20 91 ff 68 	lds	r18, 0x68FF	; 0x8068ff <__brkval>
    c924:	30 91 00 69 	lds	r19, 0x6900	; 0x806900 <__brkval+0x1>
    c928:	28 17       	cp	r18, r24
    c92a:	39 07       	cpc	r19, r25
    c92c:	69 f4       	brne	.+26     	; 0xc948 <free+0x10c>
    c92e:	30 97       	sbiw	r30, 0x00	; 0
    c930:	29 f4       	brne	.+10     	; 0xc93c <free+0x100>
    c932:	10 92 01 69 	sts	0x6901, r1	; 0x806901 <__flp>
    c936:	10 92 02 69 	sts	0x6902, r1	; 0x806902 <__flp+0x1>
    c93a:	02 c0       	rjmp	.+4      	; 0xc940 <free+0x104>
    c93c:	12 82       	std	Z+2, r1	; 0x02
    c93e:	13 82       	std	Z+3, r1	; 0x03
    c940:	a0 93 ff 68 	sts	0x68FF, r26	; 0x8068ff <__brkval>
    c944:	b0 93 00 69 	sts	0x6900, r27	; 0x806900 <__brkval+0x1>
    c948:	df 91       	pop	r29
    c94a:	cf 91       	pop	r28
    c94c:	08 95       	ret

0000c94e <_exit>:
    c94e:	f8 94       	cli

0000c950 <__stop_program>:
    c950:	ff cf       	rjmp	.-2      	; 0xc950 <__stop_program>
