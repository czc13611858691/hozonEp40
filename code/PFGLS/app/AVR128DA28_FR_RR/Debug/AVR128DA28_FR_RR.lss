
AVR128DA28_FR_RR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000302  00804000  0000fd0c  0000b5a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b50c  00004800  00004800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000044f  00804302  00804302  0000b8a2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000b8a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb8  00000000  00000000  0000b948  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012fa3  00000000  00000000  0000c500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005153  00000000  00000000  0001f4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008dba  00000000  00000000  000245f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000266c  00000000  00000000  0002d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000071a1  00000000  00000000  0002fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004dc8  00000000  00000000  00036bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  0003b985  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004800 <__vectors>:
    4800:	0c 94 bf 24 	jmp	0x497e	; 0x497e <__ctors_end>
    4804:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4808:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    480c:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__vector_3>
    4810:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4814:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4818:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    481c:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4820:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4824:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4828:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    482c:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4830:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <__vector_12>
    4834:	0c 94 11 26 	jmp	0x4c22	; 0x4c22 <__vector_13>
    4838:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    483c:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4840:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4844:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4848:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    484c:	0c 94 ec 24 	jmp	0x49d8	; 0x49d8 <__vector_19>
    4850:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4854:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4858:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    485c:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4860:	0c 94 66 68 	jmp	0xd0cc	; 0xd0cc <__vector_24>
    4864:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4868:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    486c:	0c 94 93 67 	jmp	0xcf26	; 0xcf26 <__vector_27>
    4870:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4874:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4878:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    487c:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4880:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4884:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4888:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    488c:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4890:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4894:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    4898:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    489c:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    48a0:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__bad_interrupt>
    48a4:	f9 26       	eor	r15, r25
    48a6:	43 27       	eor	r20, r19
    48a8:	92 27       	eor	r25, r18
    48aa:	e1 27       	eor	r30, r17
    48ac:	30 28       	or	r3, r0
    48ae:	7f 28       	or	r7, r15
    48b0:	ce 28       	or	r12, r14
    48b2:	8c 3e       	cpi	r24, 0xEC	; 236
    48b4:	83 42       	sbci	r24, 0x23	; 35
    48b6:	83 42       	sbci	r24, 0x23	; 35
    48b8:	83 42       	sbci	r24, 0x23	; 35
    48ba:	83 42       	sbci	r24, 0x23	; 35
    48bc:	83 42       	sbci	r24, 0x23	; 35
    48be:	07 3f       	cpi	r16, 0xF7	; 247
    48c0:	15 40       	sbci	r17, 0x05	; 5
    48c2:	cf 3d       	cpi	r28, 0xDF	; 223
    48c4:	83 42       	sbci	r24, 0x23	; 35
    48c6:	2a 3f       	cpi	r18, 0xFA	; 250
    48c8:	64 3f       	cpi	r22, 0xF4	; 244
    48ca:	9f 3f       	cpi	r25, 0xFF	; 255
    48cc:	83 42       	sbci	r24, 0x23	; 35
    48ce:	83 42       	sbci	r24, 0x23	; 35
    48d0:	83 42       	sbci	r24, 0x23	; 35
    48d2:	6f 40       	sbci	r22, 0x0F	; 15
    48d4:	cb 3e       	cpi	r28, 0xEB	; 235
    48d6:	83 42       	sbci	r24, 0x23	; 35
    48d8:	83 42       	sbci	r24, 0x23	; 35
    48da:	83 42       	sbci	r24, 0x23	; 35
    48dc:	83 42       	sbci	r24, 0x23	; 35
    48de:	83 42       	sbci	r24, 0x23	; 35
    48e0:	83 42       	sbci	r24, 0x23	; 35
    48e2:	e4 40       	sbci	r30, 0x04	; 4
    48e4:	3b 41       	sbci	r19, 0x1B	; 27
    48e6:	83 42       	sbci	r24, 0x23	; 35
    48e8:	83 42       	sbci	r24, 0x23	; 35
    48ea:	83 42       	sbci	r24, 0x23	; 35
    48ec:	76 41       	sbci	r23, 0x16	; 22
    48ee:	83 42       	sbci	r24, 0x23	; 35
    48f0:	83 42       	sbci	r24, 0x23	; 35
    48f2:	83 42       	sbci	r24, 0x23	; 35
    48f4:	83 42       	sbci	r24, 0x23	; 35
    48f6:	4d 3e       	cpi	r20, 0xED	; 237
    48f8:	83 42       	sbci	r24, 0x23	; 35
    48fa:	83 42       	sbci	r24, 0x23	; 35
    48fc:	83 42       	sbci	r24, 0x23	; 35
    48fe:	83 42       	sbci	r24, 0x23	; 35
    4900:	83 42       	sbci	r24, 0x23	; 35
    4902:	83 42       	sbci	r24, 0x23	; 35
    4904:	83 42       	sbci	r24, 0x23	; 35
    4906:	83 42       	sbci	r24, 0x23	; 35
    4908:	83 42       	sbci	r24, 0x23	; 35
    490a:	83 42       	sbci	r24, 0x23	; 35
    490c:	83 42       	sbci	r24, 0x23	; 35
    490e:	83 42       	sbci	r24, 0x23	; 35
    4910:	83 42       	sbci	r24, 0x23	; 35
    4912:	0e 3e       	cpi	r16, 0xEE	; 238
    4914:	83 42       	sbci	r24, 0x23	; 35
    4916:	83 42       	sbci	r24, 0x23	; 35
    4918:	83 42       	sbci	r24, 0x23	; 35
    491a:	83 42       	sbci	r24, 0x23	; 35
    491c:	83 42       	sbci	r24, 0x23	; 35
    491e:	83 42       	sbci	r24, 0x23	; 35
    4920:	83 42       	sbci	r24, 0x23	; 35
    4922:	83 42       	sbci	r24, 0x23	; 35
    4924:	83 42       	sbci	r24, 0x23	; 35
    4926:	83 42       	sbci	r24, 0x23	; 35
    4928:	83 42       	sbci	r24, 0x23	; 35
    492a:	83 42       	sbci	r24, 0x23	; 35
    492c:	83 42       	sbci	r24, 0x23	; 35
    492e:	83 42       	sbci	r24, 0x23	; 35
    4930:	b0 41       	sbci	r27, 0x10	; 16
    4932:	eb 41       	sbci	r30, 0x1B	; 27
    4934:	83 42       	sbci	r24, 0x23	; 35
    4936:	83 42       	sbci	r24, 0x23	; 35
    4938:	83 42       	sbci	r24, 0x23	; 35
    493a:	83 42       	sbci	r24, 0x23	; 35
    493c:	83 42       	sbci	r24, 0x23	; 35
    493e:	83 42       	sbci	r24, 0x23	; 35
    4940:	83 42       	sbci	r24, 0x23	; 35
    4942:	83 42       	sbci	r24, 0x23	; 35
    4944:	83 42       	sbci	r24, 0x23	; 35
    4946:	83 42       	sbci	r24, 0x23	; 35
    4948:	83 42       	sbci	r24, 0x23	; 35
    494a:	83 42       	sbci	r24, 0x23	; 35
    494c:	83 42       	sbci	r24, 0x23	; 35
    494e:	83 42       	sbci	r24, 0x23	; 35
    4950:	83 42       	sbci	r24, 0x23	; 35
    4952:	2a 42       	sbci	r18, 0x2A	; 42
    4954:	c1 50       	subi	r28, 0x01	; 1
    4956:	e2 50       	subi	r30, 0x02	; 2
    4958:	b8 50       	subi	r27, 0x08	; 8
    495a:	4d 50       	subi	r20, 0x0D	; 13
    495c:	e2 50       	subi	r30, 0x02	; 2
    495e:	9d 50       	subi	r25, 0x0D	; 13
    4960:	47 50       	subi	r20, 0x07	; 7
    4962:	6d 50       	subi	r22, 0x0D	; 13
    4964:	95 50       	subi	r25, 0x05	; 5
    4966:	8d 50       	subi	r24, 0x0D	; 13
    4968:	85 50       	subi	r24, 0x05	; 5
    496a:	75 50       	subi	r23, 0x05	; 5
    496c:	7d 50       	subi	r23, 0x0D	; 13
    496e:	1b 53       	subi	r17, 0x3B	; 59
    4970:	1f 53       	subi	r17, 0x3F	; 63
    4972:	3c 53       	subi	r19, 0x3C	; 60
    4974:	40 53       	subi	r20, 0x30	; 48
    4976:	44 53       	subi	r20, 0x34	; 52
    4978:	49 53       	subi	r20, 0x39	; 57
    497a:	4d 53       	subi	r20, 0x3D	; 61
    497c:	06 53       	subi	r16, 0x36	; 54

0000497e <__ctors_end>:
    497e:	11 24       	eor	r1, r1
    4980:	1f be       	out	0x3f, r1	; 63
    4982:	cf ef       	ldi	r28, 0xFF	; 255
    4984:	cd bf       	out	0x3d, r28	; 61
    4986:	df e7       	ldi	r29, 0x7F	; 127
    4988:	de bf       	out	0x3e, r29	; 62

0000498a <__do_copy_data>:
    498a:	13 e4       	ldi	r17, 0x43	; 67
    498c:	a0 e0       	ldi	r26, 0x00	; 0
    498e:	b0 e4       	ldi	r27, 0x40	; 64
    4990:	ec e0       	ldi	r30, 0x0C	; 12
    4992:	fd ef       	ldi	r31, 0xFD	; 253
    4994:	00 e0       	ldi	r16, 0x00	; 0
    4996:	0b bf       	out	0x3b, r16	; 59
    4998:	02 c0       	rjmp	.+4      	; 0x499e <__do_copy_data+0x14>
    499a:	07 90       	elpm	r0, Z+
    499c:	0d 92       	st	X+, r0
    499e:	a2 30       	cpi	r26, 0x02	; 2
    49a0:	b1 07       	cpc	r27, r17
    49a2:	d9 f7       	brne	.-10     	; 0x499a <__do_copy_data+0x10>

000049a4 <__do_clear_bss>:
    49a4:	27 e4       	ldi	r18, 0x47	; 71
    49a6:	a2 e0       	ldi	r26, 0x02	; 2
    49a8:	b3 e4       	ldi	r27, 0x43	; 67
    49aa:	01 c0       	rjmp	.+2      	; 0x49ae <.do_clear_bss_start>

000049ac <.do_clear_bss_loop>:
    49ac:	1d 92       	st	X+, r1

000049ae <.do_clear_bss_start>:
    49ae:	a1 35       	cpi	r26, 0x51	; 81
    49b0:	b2 07       	cpc	r27, r18
    49b2:	e1 f7       	brne	.-8      	; 0x49ac <.do_clear_bss_loop>
    49b4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <main>
    49b8:	0c 94 84 7e 	jmp	0xfd08	; 0xfd08 <_exit>

000049bc <__bad_interrupt>:
    49bc:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__vectors>

000049c0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
	system_init();
    49c8:	0e 94 68 6d 	call	0xdad0	; 0xdad0 <system_init>

	touch_init();
    49cc:	0e 94 bf 66 	call	0xcd7e	; 0xcd7e <touch_init>
}
    49d0:	00 00       	nop
    49d2:	df 91       	pop	r29
    49d4:	cf 91       	pop	r28
    49d6:	08 95       	ret

000049d8 <__vector_19>:
#include "lin_driver.h"
#include "lin.h"

/* lin RX接收到一个完整数据产生的中断 */
ISR(USART0_RXC_vect)
{
    49d8:	1f 92       	push	r1
    49da:	0f 92       	push	r0
    49dc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    49e0:	0f 92       	push	r0
    49e2:	11 24       	eor	r1, r1
    49e4:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    49e8:	0f 92       	push	r0
    49ea:	2f 93       	push	r18
    49ec:	3f 93       	push	r19
    49ee:	4f 93       	push	r20
    49f0:	5f 93       	push	r21
    49f2:	6f 93       	push	r22
    49f4:	7f 93       	push	r23
    49f6:	8f 93       	push	r24
    49f8:	9f 93       	push	r25
    49fa:	af 93       	push	r26
    49fc:	bf 93       	push	r27
    49fe:	ef 93       	push	r30
    4a00:	ff 93       	push	r31
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	1f 92       	push	r1
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
   uint8_t index;
   index = (USART0.STATUS & USART_ISFIF_bm) >> USART_ISFIF_bp;
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	98 e0       	ldi	r25, 0x08	; 8
    4a10:	fc 01       	movw	r30, r24
    4a12:	84 81       	ldd	r24, Z+4	; 0x04
    4a14:	88 2f       	mov	r24, r24
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	88 70       	andi	r24, 0x08	; 8
    4a1a:	99 27       	eor	r25, r25
    4a1c:	95 95       	asr	r25
    4a1e:	87 95       	ror	r24
    4a20:	95 95       	asr	r25
    4a22:	87 95       	ror	r24
    4a24:	95 95       	asr	r25
    4a26:	87 95       	ror	r24
    4a28:	89 83       	std	Y+1, r24	; 0x01
   if (index == 1)
    4a2a:	89 81       	ldd	r24, Y+1	; 0x01
    4a2c:	81 30       	cpi	r24, 0x01	; 1
    4a2e:	81 f4       	brne	.+32     	; 0x4a50 <__vector_19+0x78>
   {
      LIN_DRV_IRQHandler(0, -1);
    4a30:	4f ef       	ldi	r20, 0xFF	; 255
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	70 e0       	ldi	r23, 0x00	; 0
    4a36:	cb 01       	movw	r24, r22
    4a38:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LIN_DRV_IRQHandler>
      USART0.STATUS |= USART_ISFIF_bm;
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	98 e0       	ldi	r25, 0x08	; 8
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	38 e0       	ldi	r19, 0x08	; 8
    4a44:	f9 01       	movw	r30, r18
    4a46:	24 81       	ldd	r18, Z+4	; 0x04
    4a48:	28 60       	ori	r18, 0x08	; 8
    4a4a:	fc 01       	movw	r30, r24
    4a4c:	24 83       	std	Z+4, r18	; 0x04
      return;
    4a4e:	28 c0       	rjmp	.+80     	; 0x4aa0 <__vector_19+0xc8>
   }

   index = (USART0.RXDATAH & USART_DATA8_bm) >> USART_DATA8_bp;
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	98 e0       	ldi	r25, 0x08	; 8
    4a54:	fc 01       	movw	r30, r24
    4a56:	81 81       	ldd	r24, Z+1	; 0x01
    4a58:	81 70       	andi	r24, 0x01	; 1
    4a5a:	89 83       	std	Y+1, r24	; 0x01
   if (index == 0) /* is pid */
    4a5c:	89 81       	ldd	r24, Y+1	; 0x01
    4a5e:	88 23       	and	r24, r24
    4a60:	81 f4       	brne	.+32     	; 0x4a82 <__vector_19+0xaa>
   {
      LIN_DRV_IRQHandler(0, 1);
    4a62:	41 e0       	ldi	r20, 0x01	; 1
    4a64:	60 e0       	ldi	r22, 0x00	; 0
    4a66:	70 e0       	ldi	r23, 0x00	; 0
    4a68:	cb 01       	movw	r24, r22
    4a6a:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LIN_DRV_IRQHandler>
      USART0.STATUS |= USART_ISFIF_bm;
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	98 e0       	ldi	r25, 0x08	; 8
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	38 e0       	ldi	r19, 0x08	; 8
    4a76:	f9 01       	movw	r30, r18
    4a78:	24 81       	ldd	r18, Z+4	; 0x04
    4a7a:	28 60       	ori	r18, 0x08	; 8
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	24 83       	std	Z+4, r18	; 0x04
      return;
    4a80:	0f c0       	rjmp	.+30     	; 0x4aa0 <__vector_19+0xc8>
   }

   LIN_DRV_IRQHandler(0, 0);
    4a82:	40 e0       	ldi	r20, 0x00	; 0
    4a84:	60 e0       	ldi	r22, 0x00	; 0
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	cb 01       	movw	r24, r22
    4a8a:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <LIN_DRV_IRQHandler>
   USART0.STATUS |= USART_ISFIF_bm;
    4a8e:	80 e0       	ldi	r24, 0x00	; 0
    4a90:	98 e0       	ldi	r25, 0x08	; 8
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	38 e0       	ldi	r19, 0x08	; 8
    4a96:	f9 01       	movw	r30, r18
    4a98:	24 81       	ldd	r18, Z+4	; 0x04
    4a9a:	28 60       	ori	r18, 0x08	; 8
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	24 83       	std	Z+4, r18	; 0x04
}
    4aa0:	0f 90       	pop	r0
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	ff 91       	pop	r31
    4aa8:	ef 91       	pop	r30
    4aaa:	bf 91       	pop	r27
    4aac:	af 91       	pop	r26
    4aae:	9f 91       	pop	r25
    4ab0:	8f 91       	pop	r24
    4ab2:	7f 91       	pop	r23
    4ab4:	6f 91       	pop	r22
    4ab6:	5f 91       	pop	r21
    4ab8:	4f 91       	pop	r20
    4aba:	3f 91       	pop	r19
    4abc:	2f 91       	pop	r18
    4abe:	0f 90       	pop	r0
    4ac0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4ac4:	0f 90       	pop	r0
    4ac6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4aca:	0f 90       	pop	r0
    4acc:	1f 90       	pop	r1
    4ace:	18 95       	reti

00004ad0 <__vector_3>:

ISR(RTC_CNT_vect)
{
    4ad0:	1f 92       	push	r1
    4ad2:	0f 92       	push	r0
    4ad4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4ad8:	0f 92       	push	r0
    4ada:	11 24       	eor	r1, r1
    4adc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4ae0:	0f 92       	push	r0
    4ae2:	2f 93       	push	r18
    4ae4:	3f 93       	push	r19
    4ae6:	4f 93       	push	r20
    4ae8:	5f 93       	push	r21
    4aea:	6f 93       	push	r22
    4aec:	7f 93       	push	r23
    4aee:	8f 93       	push	r24
    4af0:	9f 93       	push	r25
    4af2:	af 93       	push	r26
    4af4:	bf 93       	push	r27
    4af6:	ef 93       	push	r30
    4af8:	ff 93       	push	r31
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
    4b02:	0e 94 1d 67 	call	0xce3a	; 0xce3a <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
    4b06:	80 e4       	ldi	r24, 0x40	; 64
    4b08:	91 e0       	ldi	r25, 0x01	; 1
    4b0a:	22 e0       	ldi	r18, 0x02	; 2
    4b0c:	fc 01       	movw	r30, r24
    4b0e:	23 83       	std	Z+3, r18	; 0x03
}
    4b10:	00 00       	nop
    4b12:	df 91       	pop	r29
    4b14:	cf 91       	pop	r28
    4b16:	ff 91       	pop	r31
    4b18:	ef 91       	pop	r30
    4b1a:	bf 91       	pop	r27
    4b1c:	af 91       	pop	r26
    4b1e:	9f 91       	pop	r25
    4b20:	8f 91       	pop	r24
    4b22:	7f 91       	pop	r23
    4b24:	6f 91       	pop	r22
    4b26:	5f 91       	pop	r21
    4b28:	4f 91       	pop	r20
    4b2a:	3f 91       	pop	r19
    4b2c:	2f 91       	pop	r18
    4b2e:	0f 90       	pop	r0
    4b30:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4b34:	0f 90       	pop	r0
    4b36:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4b3a:	0f 90       	pop	r0
    4b3c:	1f 90       	pop	r1
    4b3e:	18 95       	reti

00004b40 <__vector_12>:

ISR(TCB0_INT_vect)
{
    4b40:	1f 92       	push	r1
    4b42:	0f 92       	push	r0
    4b44:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4b48:	0f 92       	push	r0
    4b4a:	11 24       	eor	r1, r1
    4b4c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4b50:	0f 92       	push	r0
    4b52:	2f 93       	push	r18
    4b54:	3f 93       	push	r19
    4b56:	4f 93       	push	r20
    4b58:	5f 93       	push	r21
    4b5a:	6f 93       	push	r22
    4b5c:	7f 93       	push	r23
    4b5e:	8f 93       	push	r24
    4b60:	9f 93       	push	r25
    4b62:	af 93       	push	r26
    4b64:	bf 93       	push	r27
    4b66:	ef 93       	push	r30
    4b68:	ff 93       	push	r31
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
	lin_lld_timeout_service(0);
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	0e 94 a8 4e 	call	0x9d50	; 0x9d50 <lin_lld_timeout_service>
   g_soft_timer_ticks++;
    4b78:	80 91 47 46 	lds	r24, 0x4647	; 0x804647 <g_soft_timer_ticks>
    4b7c:	90 91 48 46 	lds	r25, 0x4648	; 0x804648 <g_soft_timer_ticks+0x1>
    4b80:	01 96       	adiw	r24, 0x01	; 1
    4b82:	80 93 47 46 	sts	0x4647, r24	; 0x804647 <g_soft_timer_ticks>
    4b86:	90 93 48 46 	sts	0x4648, r25	; 0x804648 <g_soft_timer_ticks+0x1>
	TCB0.INTFLAGS = TCB_CAPT_bm;
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	9b e0       	ldi	r25, 0x0B	; 11
    4b8e:	21 e0       	ldi	r18, 0x01	; 1
    4b90:	fc 01       	movw	r30, r24
    4b92:	26 83       	std	Z+6, r18	; 0x06
}
    4b94:	00 00       	nop
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	ff 91       	pop	r31
    4b9c:	ef 91       	pop	r30
    4b9e:	bf 91       	pop	r27
    4ba0:	af 91       	pop	r26
    4ba2:	9f 91       	pop	r25
    4ba4:	8f 91       	pop	r24
    4ba6:	7f 91       	pop	r23
    4ba8:	6f 91       	pop	r22
    4baa:	5f 91       	pop	r21
    4bac:	4f 91       	pop	r20
    4bae:	3f 91       	pop	r19
    4bb0:	2f 91       	pop	r18
    4bb2:	0f 90       	pop	r0
    4bb4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4bb8:	0f 90       	pop	r0
    4bba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4bbe:	0f 90       	pop	r0
    4bc0:	1f 90       	pop	r1
    4bc2:	18 95       	reti

00004bc4 <soft_timer_sin_data_task>:
76,113,141,152,145,121,88,54,27,12,14,31,57,87,112,127,129,119,99,75,53,38,34,39,54,72,90,102,108,105,96,83,70,61,56,57,62,70,77,83,86,85,84,81,77,73,71,71,72,73,75,77,78,
};
uint8_t sin_data_out_flg=0;

void soft_timer_sin_data_task(void)
{
    4bc4:	cf 93       	push	r28
    4bc6:	df 93       	push	r29
    4bc8:	cd b7       	in	r28, 0x3d	; 61
    4bca:	de b7       	in	r29, 0x3e	; 62
	if(sin_data_out_flg==1)
    4bcc:	80 91 04 43 	lds	r24, 0x4304	; 0x804304 <sin_data_out_flg>
    4bd0:	81 30       	cpi	r24, 0x01	; 1
    4bd2:	19 f5       	brne	.+70     	; 0x4c1a <soft_timer_sin_data_task+0x56>
	{
		if(sin_data_index<(sizeof(sin_data)/sizeof(sin_data[0])))
    4bd4:	80 91 02 43 	lds	r24, 0x4302	; 0x804302 <__data_end>
    4bd8:	90 91 03 43 	lds	r25, 0x4303	; 0x804303 <__data_end+0x1>
    4bdc:	c5 97       	sbiw	r24, 0x35	; 53
    4bde:	b8 f4       	brcc	.+46     	; 0x4c0e <soft_timer_sin_data_task+0x4a>
		{
			DAC_0_set_output(sin_data[sin_data_index]);
    4be0:	80 91 02 43 	lds	r24, 0x4302	; 0x804302 <__data_end>
    4be4:	90 91 03 43 	lds	r25, 0x4303	; 0x804303 <__data_end+0x1>
    4be8:	88 0f       	add	r24, r24
    4bea:	99 1f       	adc	r25, r25
    4bec:	8a 5f       	subi	r24, 0xFA	; 250
    4bee:	9f 4b       	sbci	r25, 0xBF	; 191
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	80 81       	ld	r24, Z
    4bf4:	91 81       	ldd	r25, Z+1	; 0x01
    4bf6:	0e 94 f6 68 	call	0xd1ec	; 0xd1ec <DAC_0_set_output>
			sin_data_index++;
    4bfa:	80 91 02 43 	lds	r24, 0x4302	; 0x804302 <__data_end>
    4bfe:	90 91 03 43 	lds	r25, 0x4303	; 0x804303 <__data_end+0x1>
    4c02:	01 96       	adiw	r24, 0x01	; 1
    4c04:	80 93 02 43 	sts	0x4302, r24	; 0x804302 <__data_end>
    4c08:	90 93 03 43 	sts	0x4303, r25	; 0x804303 <__data_end+0x1>
		}else{
			sin_data_index=0;
			sin_data_out_flg=0;
		}
	}
}
    4c0c:	06 c0       	rjmp	.+12     	; 0x4c1a <soft_timer_sin_data_task+0x56>
		if(sin_data_index<(sizeof(sin_data)/sizeof(sin_data[0])))
		{
			DAC_0_set_output(sin_data[sin_data_index]);
			sin_data_index++;
		}else{
			sin_data_index=0;
    4c0e:	10 92 02 43 	sts	0x4302, r1	; 0x804302 <__data_end>
    4c12:	10 92 03 43 	sts	0x4303, r1	; 0x804303 <__data_end+0x1>
			sin_data_out_flg=0;
    4c16:	10 92 04 43 	sts	0x4304, r1	; 0x804304 <sin_data_out_flg>
		}
	}
}
    4c1a:	00 00       	nop
    4c1c:	df 91       	pop	r29
    4c1e:	cf 91       	pop	r28
    4c20:	08 95       	ret

00004c22 <__vector_13>:

ISR(TCB1_INT_vect)
{
    4c22:	1f 92       	push	r1
    4c24:	0f 92       	push	r0
    4c26:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4c2a:	0f 92       	push	r0
    4c2c:	11 24       	eor	r1, r1
    4c2e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4c32:	0f 92       	push	r0
    4c34:	2f 93       	push	r18
    4c36:	3f 93       	push	r19
    4c38:	4f 93       	push	r20
    4c3a:	5f 93       	push	r21
    4c3c:	6f 93       	push	r22
    4c3e:	7f 93       	push	r23
    4c40:	8f 93       	push	r24
    4c42:	9f 93       	push	r25
    4c44:	af 93       	push	r26
    4c46:	bf 93       	push	r27
    4c48:	ef 93       	push	r30
    4c4a:	ff 93       	push	r31
    4c4c:	cf 93       	push	r28
    4c4e:	df 93       	push	r29
    4c50:	cd b7       	in	r28, 0x3d	; 61
    4c52:	de b7       	in	r29, 0x3e	; 62
   soft_timer_sin_data_task();
    4c54:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <soft_timer_sin_data_task>
	TCB1.INTFLAGS = TCB_CAPT_bm;
    4c58:	80 e1       	ldi	r24, 0x10	; 16
    4c5a:	9b e0       	ldi	r25, 0x0B	; 11
    4c5c:	21 e0       	ldi	r18, 0x01	; 1
    4c5e:	fc 01       	movw	r30, r24
    4c60:	26 83       	std	Z+6, r18	; 0x06
}
    4c62:	00 00       	nop
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	ff 91       	pop	r31
    4c6a:	ef 91       	pop	r30
    4c6c:	bf 91       	pop	r27
    4c6e:	af 91       	pop	r26
    4c70:	9f 91       	pop	r25
    4c72:	8f 91       	pop	r24
    4c74:	7f 91       	pop	r23
    4c76:	6f 91       	pop	r22
    4c78:	5f 91       	pop	r21
    4c7a:	4f 91       	pop	r20
    4c7c:	3f 91       	pop	r19
    4c7e:	2f 91       	pop	r18
    4c80:	0f 90       	pop	r0
    4c82:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4c86:	0f 90       	pop	r0
    4c88:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4c8c:	0f 90       	pop	r0
    4c8e:	1f 90       	pop	r1
    4c90:	18 95       	reti

00004c92 <window_lock_led_cb>:
    handle->window.slide_2_to_1_flg = 0;
    handle->window.btn_a_status = 0;
    handle->window.btn_b_status = 0;
    handle->window.slide_status = 0;
    handle->window.signal = 0;
}
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
    4c96:	1f 92       	push	r1
    4c98:	cd b7       	in	r28, 0x3d	; 61
    4c9a:	de b7       	in	r29, 0x3e	; 62
    4c9c:	89 83       	std	Y+1, r24	; 0x01
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	81 30       	cpi	r24, 0x01	; 1
    4ca2:	49 f4       	brne	.+18     	; 0x4cb6 <window_lock_led_cb+0x24>
    4ca4:	61 e0       	ldi	r22, 0x01	; 1
    4ca6:	87 e0       	ldi	r24, 0x07	; 7
    4ca8:	0e 94 45 30 	call	0x608a	; 0x608a <led_set_level>
    4cac:	60 e0       	ldi	r22, 0x00	; 0
    4cae:	86 e0       	ldi	r24, 0x06	; 6
    4cb0:	0e 94 45 30 	call	0x608a	; 0x608a <led_set_level>
    4cb4:	08 c0       	rjmp	.+16     	; 0x4cc6 <window_lock_led_cb+0x34>
    4cb6:	60 e0       	ldi	r22, 0x00	; 0
    4cb8:	87 e0       	ldi	r24, 0x07	; 7
    4cba:	0e 94 45 30 	call	0x608a	; 0x608a <led_set_level>
    4cbe:	61 e0       	ldi	r22, 0x01	; 1
    4cc0:	86 e0       	ldi	r24, 0x06	; 6
    4cc2:	0e 94 45 30 	call	0x608a	; 0x608a <led_set_level>
    4cc6:	00 00       	nop
    4cc8:	0f 90       	pop	r0
    4cca:	df 91       	pop	r29
    4ccc:	cf 91       	pop	r28
    4cce:	08 95       	ret

00004cd0 <soft_timer_window_lock_task>:
    4cd0:	cf 93       	push	r28
    4cd2:	df 93       	push	r29
    4cd4:	cd b7       	in	r28, 0x3d	; 61
    4cd6:	de b7       	in	r29, 0x3e	; 62
    4cd8:	80 91 05 43 	lds	r24, 0x4305	; 0x804305 <btn_status.5549>
    4cdc:	80 93 06 43 	sts	0x4306, r24	; 0x804306 <btn_status_last.5548>
    4ce0:	82 e0       	ldi	r24, 0x02	; 2
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	0e 94 37 67 	call	0xce6e	; 0xce6e <get_sensor_state>
    4ce8:	80 78       	andi	r24, 0x80	; 128
    4cea:	80 93 05 43 	sts	0x4305, r24	; 0x804305 <btn_status.5549>
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	80 93 71 40 	sts	0x4071, r24	; 0x804071 <g_window_lock+0x1>
    4cf4:	80 91 05 43 	lds	r24, 0x4305	; 0x804305 <btn_status.5549>
    4cf8:	88 23       	and	r24, r24
    4cfa:	61 f0       	breq	.+24     	; 0x4d14 <soft_timer_window_lock_task+0x44>
    4cfc:	80 91 06 43 	lds	r24, 0x4306	; 0x804306 <btn_status_last.5548>
    4d00:	88 23       	and	r24, r24
    4d02:	41 f4       	brne	.+16     	; 0x4d14 <soft_timer_window_lock_task+0x44>
    4d04:	81 e0       	ldi	r24, 0x01	; 1
    4d06:	80 93 70 40 	sts	0x4070, r24	; 0x804070 <g_window_lock>
    4d0a:	41 e0       	ldi	r20, 0x01	; 1
    4d0c:	61 e0       	ldi	r22, 0x01	; 1
    4d0e:	85 e0       	ldi	r24, 0x05	; 5
    4d10:	0e 94 2a 29 	call	0x5254	; 0x5254 <lin_signal_send_x_times>
    4d14:	0e 94 67 2e 	call	0x5cce	; 0x5cce <window_lock_task>
    4d18:	00 00       	nop
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	08 95       	ret

00004d20 <window_lock_signal_cb>:
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
    4d28:	41 e0       	ldi	r20, 0x01	; 1
    4d2a:	63 e0       	ldi	r22, 0x03	; 3
    4d2c:	84 e0       	ldi	r24, 0x04	; 4
    4d2e:	0e 94 2a 29 	call	0x5254	; 0x5254 <lin_signal_send_x_times>
    4d32:	00 00       	nop
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	08 95       	ret

00004d3a <soft_timer_lin_signal_update_task>:
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    4d42:	80 91 c1 40 	lds	r24, 0x40C1	; 0x8040c1 <g_lin_frame_data_buffer+0x4>
    4d46:	82 95       	swap	r24
    4d48:	8f 70       	andi	r24, 0x0F	; 15
    4d4a:	88 23       	and	r24, r24
    4d4c:	61 f0       	breq	.+24     	; 0x4d66 <soft_timer_lin_signal_update_task+0x2c>
    4d4e:	80 91 c1 40 	lds	r24, 0x40C1	; 0x8040c1 <g_lin_frame_data_buffer+0x4>
    4d52:	82 95       	swap	r24
    4d54:	8f 70       	andi	r24, 0x0F	; 15
    4d56:	8f 70       	andi	r24, 0x0F	; 15
    4d58:	8f 70       	andi	r24, 0x0F	; 15
    4d5a:	90 91 76 40 	lds	r25, 0x4076	; 0x804076 <g_lin_rx_signal>
    4d5e:	90 7f       	andi	r25, 0xF0	; 240
    4d60:	89 2b       	or	r24, r25
    4d62:	80 93 76 40 	sts	0x4076, r24	; 0x804076 <g_lin_rx_signal>
    4d66:	80 91 bd 40 	lds	r24, 0x40BD	; 0x8040bd <g_lin_frame_data_buffer>
    4d6a:	81 70       	andi	r24, 0x01	; 1
    4d6c:	81 70       	andi	r24, 0x01	; 1
    4d6e:	82 95       	swap	r24
    4d70:	88 0f       	add	r24, r24
    4d72:	80 7e       	andi	r24, 0xE0	; 224
    4d74:	90 91 76 40 	lds	r25, 0x4076	; 0x804076 <g_lin_rx_signal>
    4d78:	9f 7d       	andi	r25, 0xDF	; 223
    4d7a:	89 2b       	or	r24, r25
    4d7c:	80 93 76 40 	sts	0x4076, r24	; 0x804076 <g_lin_rx_signal>
    4d80:	00 00       	nop
    4d82:	df 91       	pop	r29
    4d84:	cf 91       	pop	r28
    4d86:	08 95       	ret

00004d88 <backlight_cb>:
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	00 d0       	rcall	.+0      	; 0x4d8e <backlight_cb+0x6>
    4d8e:	00 d0       	rcall	.+0      	; 0x4d90 <backlight_cb+0x8>
    4d90:	cd b7       	in	r28, 0x3d	; 61
    4d92:	de b7       	in	r29, 0x3e	; 62
    4d94:	69 83       	std	Y+1, r22	; 0x01
    4d96:	7a 83       	std	Y+2, r23	; 0x02
    4d98:	8b 83       	std	Y+3, r24	; 0x03
    4d9a:	9c 83       	std	Y+4, r25	; 0x04
    4d9c:	80 e0       	ldi	r24, 0x00	; 0
    4d9e:	9a e0       	ldi	r25, 0x0A	; 10
    4da0:	29 81       	ldd	r18, Y+1	; 0x01
    4da2:	3a 81       	ldd	r19, Y+2	; 0x02
    4da4:	fc 01       	movw	r30, r24
    4da6:	24 a7       	std	Z+44, r18	; 0x2c
    4da8:	35 a7       	std	Z+45, r19	; 0x2d
    4daa:	00 00       	nop
    4dac:	24 96       	adiw	r28, 0x04	; 4
    4dae:	cd bf       	out	0x3d, r28	; 61
    4db0:	de bf       	out	0x3e, r29	; 62
    4db2:	df 91       	pop	r29
    4db4:	cf 91       	pop	r28
    4db6:	08 95       	ret

00004db8 <ep40_lin_signal_update_while_task>:
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	1f 92       	push	r1
    4dbe:	cd b7       	in	r28, 0x3d	; 61
    4dc0:	de b7       	in	r29, 0x3e	; 62
    4dc2:	19 82       	std	Y+1, r1	; 0x01
    4dc4:	3e c2       	rjmp	.+1148   	; 0x5242 <ep40_lin_signal_update_while_task+0x48a>
    4dc6:	89 81       	ldd	r24, Y+1	; 0x01
    4dc8:	88 2f       	mov	r24, r24
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	09 2e       	mov	r0, r25
    4dce:	00 0c       	add	r0, r0
    4dd0:	aa 0b       	sbc	r26, r26
    4dd2:	bb 0b       	sbc	r27, r27
    4dd4:	43 e0       	ldi	r20, 0x03	; 3
    4dd6:	50 e0       	ldi	r21, 0x00	; 0
    4dd8:	26 e0       	ldi	r18, 0x06	; 6
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	84 1b       	sub	r24, r20
    4dde:	95 0b       	sbc	r25, r21
    4de0:	28 17       	cp	r18, r24
    4de2:	39 07       	cpc	r19, r25
    4de4:	08 f4       	brcc	.+2      	; 0x4de8 <ep40_lin_signal_update_while_task+0x30>
    4de6:	29 c2       	rjmp	.+1106   	; 0x523a <ep40_lin_signal_update_while_task+0x482>
    4de8:	8e 5a       	subi	r24, 0xAE	; 174
    4dea:	9b 4d       	sbci	r25, 0xDB	; 219
    4dec:	fc 01       	movw	r30, r24
    4dee:	0c 94 0f 7d 	jmp	0xfa1e	; 0xfa1e <__tablejump2__>
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	28 2f       	mov	r18, r24
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	c9 01       	movw	r24, r18
    4dfa:	88 0f       	add	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	82 0f       	add	r24, r18
    4e00:	93 1f       	adc	r25, r19
    4e02:	86 5b       	subi	r24, 0xB6	; 182
    4e04:	99 4b       	sbci	r25, 0xB9	; 185
    4e06:	fc 01       	movw	r30, r24
    4e08:	80 81       	ld	r24, Z
    4e0a:	88 23       	and	r24, r24
    4e0c:	89 f1       	breq	.+98     	; 0x4e70 <ep40_lin_signal_update_while_task+0xb8>
    4e0e:	89 81       	ldd	r24, Y+1	; 0x01
    4e10:	28 2f       	mov	r18, r24
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	c9 01       	movw	r24, r18
    4e16:	88 0f       	add	r24, r24
    4e18:	99 1f       	adc	r25, r25
    4e1a:	82 0f       	add	r24, r18
    4e1c:	93 1f       	adc	r25, r19
    4e1e:	86 5b       	subi	r24, 0xB6	; 182
    4e20:	99 4b       	sbci	r25, 0xB9	; 185
    4e22:	fc 01       	movw	r30, r24
    4e24:	80 81       	ld	r24, Z
    4e26:	4f ef       	ldi	r20, 0xFF	; 255
    4e28:	48 0f       	add	r20, r24
    4e2a:	c9 01       	movw	r24, r18
    4e2c:	88 0f       	add	r24, r24
    4e2e:	99 1f       	adc	r25, r25
    4e30:	82 0f       	add	r24, r18
    4e32:	93 1f       	adc	r25, r19
    4e34:	86 5b       	subi	r24, 0xB6	; 182
    4e36:	99 4b       	sbci	r25, 0xB9	; 185
    4e38:	fc 01       	movw	r30, r24
    4e3a:	40 83       	st	Z, r20
    4e3c:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e40:	48 2f       	mov	r20, r24
    4e42:	48 7f       	andi	r20, 0xF8	; 248
    4e44:	89 81       	ldd	r24, Y+1	; 0x01
    4e46:	28 2f       	mov	r18, r24
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	c9 01       	movw	r24, r18
    4e4c:	88 0f       	add	r24, r24
    4e4e:	99 1f       	adc	r25, r25
    4e50:	82 0f       	add	r24, r18
    4e52:	93 1f       	adc	r25, r19
    4e54:	85 5b       	subi	r24, 0xB5	; 181
    4e56:	99 4b       	sbci	r25, 0xB9	; 185
    4e58:	fc 01       	movw	r30, r24
    4e5a:	80 81       	ld	r24, Z
    4e5c:	87 70       	andi	r24, 0x07	; 7
    4e5e:	84 2b       	or	r24, r20
    4e60:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e64:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e68:	8e 7f       	andi	r24, 0xFE	; 254
    4e6a:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e6e:	e6 c1       	rjmp	.+972    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    4e70:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e74:	88 7f       	andi	r24, 0xF8	; 248
    4e76:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e7a:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e7e:	8e 7f       	andi	r24, 0xFE	; 254
    4e80:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e84:	db c1       	rjmp	.+950    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    4e86:	89 81       	ldd	r24, Y+1	; 0x01
    4e88:	28 2f       	mov	r18, r24
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    4e8c:	c9 01       	movw	r24, r18
    4e8e:	88 0f       	add	r24, r24
    4e90:	99 1f       	adc	r25, r25
    4e92:	82 0f       	add	r24, r18
    4e94:	93 1f       	adc	r25, r19
    4e96:	86 5b       	subi	r24, 0xB6	; 182
    4e98:	99 4b       	sbci	r25, 0xB9	; 185
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	80 81       	ld	r24, Z
    4e9e:	88 23       	and	r24, r24
    4ea0:	b1 f1       	breq	.+108    	; 0x4f0e <ep40_lin_signal_update_while_task+0x156>
    4ea2:	89 81       	ldd	r24, Y+1	; 0x01
    4ea4:	28 2f       	mov	r18, r24
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	c9 01       	movw	r24, r18
    4eaa:	88 0f       	add	r24, r24
    4eac:	99 1f       	adc	r25, r25
    4eae:	82 0f       	add	r24, r18
    4eb0:	93 1f       	adc	r25, r19
    4eb2:	86 5b       	subi	r24, 0xB6	; 182
    4eb4:	99 4b       	sbci	r25, 0xB9	; 185
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	80 81       	ld	r24, Z
    4eba:	4f ef       	ldi	r20, 0xFF	; 255
    4ebc:	48 0f       	add	r20, r24
    4ebe:	c9 01       	movw	r24, r18
    4ec0:	88 0f       	add	r24, r24
    4ec2:	99 1f       	adc	r25, r25
    4ec4:	82 0f       	add	r24, r18
    4ec6:	93 1f       	adc	r25, r19
    4ec8:	86 5b       	subi	r24, 0xB6	; 182
    4eca:	99 4b       	sbci	r25, 0xB9	; 185
    4ecc:	fc 01       	movw	r30, r24
    4ece:	40 83       	st	Z, r20
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	28 2f       	mov	r18, r24
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	c9 01       	movw	r24, r18
    4ed8:	88 0f       	add	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	82 0f       	add	r24, r18
    4ede:	93 1f       	adc	r25, r19
    4ee0:	85 5b       	subi	r24, 0xB5	; 181
    4ee2:	99 4b       	sbci	r25, 0xB9	; 185
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	80 81       	ld	r24, Z
    4ee8:	88 23       	and	r24, r24
    4eea:	31 f0       	breq	.+12     	; 0x4ef8 <ep40_lin_signal_update_while_task+0x140>
    4eec:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4ef0:	88 60       	ori	r24, 0x08	; 8
    4ef2:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4ef6:	05 c0       	rjmp	.+10     	; 0x4f02 <ep40_lin_signal_update_while_task+0x14a>
    4ef8:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4efc:	87 7f       	andi	r24, 0xF7	; 247
    4efe:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f02:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f06:	8d 7f       	andi	r24, 0xFD	; 253
    4f08:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f0c:	97 c1       	rjmp	.+814    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    4f0e:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f12:	87 7f       	andi	r24, 0xF7	; 247
    4f14:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f18:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f1c:	8d 7f       	andi	r24, 0xFD	; 253
    4f1e:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f22:	8c c1       	rjmp	.+792    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	28 2f       	mov	r18, r24
    4f28:	30 e0       	ldi	r19, 0x00	; 0
    4f2a:	c9 01       	movw	r24, r18
    4f2c:	88 0f       	add	r24, r24
    4f2e:	99 1f       	adc	r25, r25
    4f30:	82 0f       	add	r24, r18
    4f32:	93 1f       	adc	r25, r19
    4f34:	86 5b       	subi	r24, 0xB6	; 182
    4f36:	99 4b       	sbci	r25, 0xB9	; 185
    4f38:	fc 01       	movw	r30, r24
    4f3a:	80 81       	ld	r24, Z
    4f3c:	88 23       	and	r24, r24
    4f3e:	b1 f1       	breq	.+108    	; 0x4fac <ep40_lin_signal_update_while_task+0x1f4>
    4f40:	89 81       	ldd	r24, Y+1	; 0x01
    4f42:	28 2f       	mov	r18, r24
    4f44:	30 e0       	ldi	r19, 0x00	; 0
    4f46:	c9 01       	movw	r24, r18
    4f48:	88 0f       	add	r24, r24
    4f4a:	99 1f       	adc	r25, r25
    4f4c:	82 0f       	add	r24, r18
    4f4e:	93 1f       	adc	r25, r19
    4f50:	85 5b       	subi	r24, 0xB5	; 181
    4f52:	99 4b       	sbci	r25, 0xB9	; 185
    4f54:	fc 01       	movw	r30, r24
    4f56:	80 81       	ld	r24, Z
    4f58:	88 23       	and	r24, r24
    4f5a:	31 f0       	breq	.+12     	; 0x4f68 <ep40_lin_signal_update_while_task+0x1b0>
    4f5c:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f60:	80 61       	ori	r24, 0x10	; 16
    4f62:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f66:	05 c0       	rjmp	.+10     	; 0x4f72 <ep40_lin_signal_update_while_task+0x1ba>
    4f68:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f6c:	8f 7e       	andi	r24, 0xEF	; 239
    4f6e:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f72:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f76:	8b 7f       	andi	r24, 0xFB	; 251
    4f78:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f7c:	89 81       	ldd	r24, Y+1	; 0x01
    4f7e:	28 2f       	mov	r18, r24
    4f80:	30 e0       	ldi	r19, 0x00	; 0
    4f82:	c9 01       	movw	r24, r18
    4f84:	88 0f       	add	r24, r24
    4f86:	99 1f       	adc	r25, r25
    4f88:	82 0f       	add	r24, r18
    4f8a:	93 1f       	adc	r25, r19
    4f8c:	86 5b       	subi	r24, 0xB6	; 182
    4f8e:	99 4b       	sbci	r25, 0xB9	; 185
    4f90:	fc 01       	movw	r30, r24
    4f92:	80 81       	ld	r24, Z
    4f94:	4f ef       	ldi	r20, 0xFF	; 255
    4f96:	48 0f       	add	r20, r24
    4f98:	c9 01       	movw	r24, r18
    4f9a:	88 0f       	add	r24, r24
    4f9c:	99 1f       	adc	r25, r25
    4f9e:	82 0f       	add	r24, r18
    4fa0:	93 1f       	adc	r25, r19
    4fa2:	86 5b       	subi	r24, 0xB6	; 182
    4fa4:	99 4b       	sbci	r25, 0xB9	; 185
    4fa6:	fc 01       	movw	r30, r24
    4fa8:	40 83       	st	Z, r20
    4faa:	48 c1       	rjmp	.+656    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    4fac:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4fb0:	8f 7e       	andi	r24, 0xEF	; 239
    4fb2:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4fb6:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4fba:	8b 7f       	andi	r24, 0xFB	; 251
    4fbc:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4fc0:	3d c1       	rjmp	.+634    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    4fc2:	89 81       	ldd	r24, Y+1	; 0x01
    4fc4:	28 2f       	mov	r18, r24
    4fc6:	30 e0       	ldi	r19, 0x00	; 0
    4fc8:	c9 01       	movw	r24, r18
    4fca:	88 0f       	add	r24, r24
    4fcc:	99 1f       	adc	r25, r25
    4fce:	82 0f       	add	r24, r18
    4fd0:	93 1f       	adc	r25, r19
    4fd2:	86 5b       	subi	r24, 0xB6	; 182
    4fd4:	99 4b       	sbci	r25, 0xB9	; 185
    4fd6:	fc 01       	movw	r30, r24
    4fd8:	80 81       	ld	r24, Z
    4fda:	88 23       	and	r24, r24
    4fdc:	b1 f1       	breq	.+108    	; 0x504a <ep40_lin_signal_update_while_task+0x292>
    4fde:	89 81       	ldd	r24, Y+1	; 0x01
    4fe0:	28 2f       	mov	r18, r24
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	c9 01       	movw	r24, r18
    4fe6:	88 0f       	add	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	82 0f       	add	r24, r18
    4fec:	93 1f       	adc	r25, r19
    4fee:	86 5b       	subi	r24, 0xB6	; 182
    4ff0:	99 4b       	sbci	r25, 0xB9	; 185
    4ff2:	fc 01       	movw	r30, r24
    4ff4:	80 81       	ld	r24, Z
    4ff6:	4f ef       	ldi	r20, 0xFF	; 255
    4ff8:	48 0f       	add	r20, r24
    4ffa:	c9 01       	movw	r24, r18
    4ffc:	88 0f       	add	r24, r24
    4ffe:	99 1f       	adc	r25, r25
    5000:	82 0f       	add	r24, r18
    5002:	93 1f       	adc	r25, r19
    5004:	86 5b       	subi	r24, 0xB6	; 182
    5006:	99 4b       	sbci	r25, 0xB9	; 185
    5008:	fc 01       	movw	r30, r24
    500a:	40 83       	st	Z, r20
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	28 2f       	mov	r18, r24
    5010:	30 e0       	ldi	r19, 0x00	; 0
    5012:	c9 01       	movw	r24, r18
    5014:	88 0f       	add	r24, r24
    5016:	99 1f       	adc	r25, r25
    5018:	82 0f       	add	r24, r18
    501a:	93 1f       	adc	r25, r19
    501c:	85 5b       	subi	r24, 0xB5	; 181
    501e:	99 4b       	sbci	r25, 0xB9	; 185
    5020:	fc 01       	movw	r30, r24
    5022:	80 81       	ld	r24, Z
    5024:	88 23       	and	r24, r24
    5026:	31 f0       	breq	.+12     	; 0x5034 <ep40_lin_signal_update_while_task+0x27c>
    5028:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    502c:	80 62       	ori	r24, 0x20	; 32
    502e:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    5032:	05 c0       	rjmp	.+10     	; 0x503e <ep40_lin_signal_update_while_task+0x286>
    5034:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    5038:	8f 7d       	andi	r24, 0xDF	; 223
    503a:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    503e:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5042:	87 7f       	andi	r24, 0xF7	; 247
    5044:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5048:	f9 c0       	rjmp	.+498    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    504a:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    504e:	8f 7d       	andi	r24, 0xDF	; 223
    5050:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    5054:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5058:	87 7f       	andi	r24, 0xF7	; 247
    505a:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    505e:	ee c0       	rjmp	.+476    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    5060:	89 81       	ldd	r24, Y+1	; 0x01
    5062:	28 2f       	mov	r18, r24
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	c9 01       	movw	r24, r18
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	82 0f       	add	r24, r18
    506e:	93 1f       	adc	r25, r19
    5070:	86 5b       	subi	r24, 0xB6	; 182
    5072:	99 4b       	sbci	r25, 0xB9	; 185
    5074:	fc 01       	movw	r30, r24
    5076:	80 81       	ld	r24, Z
    5078:	88 23       	and	r24, r24
    507a:	b1 f1       	breq	.+108    	; 0x50e8 <ep40_lin_signal_update_while_task+0x330>
    507c:	89 81       	ldd	r24, Y+1	; 0x01
    507e:	28 2f       	mov	r18, r24
    5080:	30 e0       	ldi	r19, 0x00	; 0
    5082:	c9 01       	movw	r24, r18
    5084:	88 0f       	add	r24, r24
    5086:	99 1f       	adc	r25, r25
    5088:	82 0f       	add	r24, r18
    508a:	93 1f       	adc	r25, r19
    508c:	86 5b       	subi	r24, 0xB6	; 182
    508e:	99 4b       	sbci	r25, 0xB9	; 185
    5090:	fc 01       	movw	r30, r24
    5092:	80 81       	ld	r24, Z
    5094:	4f ef       	ldi	r20, 0xFF	; 255
    5096:	48 0f       	add	r20, r24
    5098:	c9 01       	movw	r24, r18
    509a:	88 0f       	add	r24, r24
    509c:	99 1f       	adc	r25, r25
    509e:	82 0f       	add	r24, r18
    50a0:	93 1f       	adc	r25, r19
    50a2:	86 5b       	subi	r24, 0xB6	; 182
    50a4:	99 4b       	sbci	r25, 0xB9	; 185
    50a6:	fc 01       	movw	r30, r24
    50a8:	40 83       	st	Z, r20
    50aa:	89 81       	ldd	r24, Y+1	; 0x01
    50ac:	28 2f       	mov	r18, r24
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	c9 01       	movw	r24, r18
    50b2:	88 0f       	add	r24, r24
    50b4:	99 1f       	adc	r25, r25
    50b6:	82 0f       	add	r24, r18
    50b8:	93 1f       	adc	r25, r19
    50ba:	85 5b       	subi	r24, 0xB5	; 181
    50bc:	99 4b       	sbci	r25, 0xB9	; 185
    50be:	fc 01       	movw	r30, r24
    50c0:	80 81       	ld	r24, Z
    50c2:	88 23       	and	r24, r24
    50c4:	31 f0       	breq	.+12     	; 0x50d2 <ep40_lin_signal_update_while_task+0x31a>
    50c6:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50ca:	81 60       	ori	r24, 0x01	; 1
    50cc:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50d0:	05 c0       	rjmp	.+10     	; 0x50dc <ep40_lin_signal_update_while_task+0x324>
    50d2:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50d6:	8e 7f       	andi	r24, 0xFE	; 254
    50d8:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50dc:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50e0:	8f 7e       	andi	r24, 0xEF	; 239
    50e2:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50e6:	aa c0       	rjmp	.+340    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    50e8:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50ec:	8e 7f       	andi	r24, 0xFE	; 254
    50ee:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50f2:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50f6:	8f 7e       	andi	r24, 0xEF	; 239
    50f8:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50fc:	9f c0       	rjmp	.+318    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    50fe:	89 81       	ldd	r24, Y+1	; 0x01
    5100:	28 2f       	mov	r18, r24
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	c9 01       	movw	r24, r18
    5106:	88 0f       	add	r24, r24
    5108:	99 1f       	adc	r25, r25
    510a:	82 0f       	add	r24, r18
    510c:	93 1f       	adc	r25, r19
    510e:	86 5b       	subi	r24, 0xB6	; 182
    5110:	99 4b       	sbci	r25, 0xB9	; 185
    5112:	fc 01       	movw	r30, r24
    5114:	80 81       	ld	r24, Z
    5116:	88 23       	and	r24, r24
    5118:	b1 f1       	breq	.+108    	; 0x5186 <ep40_lin_signal_update_while_task+0x3ce>
    511a:	89 81       	ldd	r24, Y+1	; 0x01
    511c:	28 2f       	mov	r18, r24
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	c9 01       	movw	r24, r18
    5122:	88 0f       	add	r24, r24
    5124:	99 1f       	adc	r25, r25
    5126:	82 0f       	add	r24, r18
    5128:	93 1f       	adc	r25, r19
    512a:	86 5b       	subi	r24, 0xB6	; 182
    512c:	99 4b       	sbci	r25, 0xB9	; 185
    512e:	fc 01       	movw	r30, r24
    5130:	80 81       	ld	r24, Z
    5132:	4f ef       	ldi	r20, 0xFF	; 255
    5134:	48 0f       	add	r20, r24
    5136:	c9 01       	movw	r24, r18
    5138:	88 0f       	add	r24, r24
    513a:	99 1f       	adc	r25, r25
    513c:	82 0f       	add	r24, r18
    513e:	93 1f       	adc	r25, r19
    5140:	86 5b       	subi	r24, 0xB6	; 182
    5142:	99 4b       	sbci	r25, 0xB9	; 185
    5144:	fc 01       	movw	r30, r24
    5146:	40 83       	st	Z, r20
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	28 2f       	mov	r18, r24
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	c9 01       	movw	r24, r18
    5150:	88 0f       	add	r24, r24
    5152:	99 1f       	adc	r25, r25
    5154:	82 0f       	add	r24, r18
    5156:	93 1f       	adc	r25, r19
    5158:	85 5b       	subi	r24, 0xB5	; 181
    515a:	99 4b       	sbci	r25, 0xB9	; 185
    515c:	fc 01       	movw	r30, r24
    515e:	80 81       	ld	r24, Z
    5160:	88 23       	and	r24, r24
    5162:	31 f0       	breq	.+12     	; 0x5170 <ep40_lin_signal_update_while_task+0x3b8>
    5164:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5168:	82 60       	ori	r24, 0x02	; 2
    516a:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    516e:	05 c0       	rjmp	.+10     	; 0x517a <ep40_lin_signal_update_while_task+0x3c2>
    5170:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5174:	8d 7f       	andi	r24, 0xFD	; 253
    5176:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    517a:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    517e:	8f 7d       	andi	r24, 0xDF	; 223
    5180:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5184:	5b c0       	rjmp	.+182    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    5186:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    518a:	8d 7f       	andi	r24, 0xFD	; 253
    518c:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5190:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5194:	8f 7d       	andi	r24, 0xDF	; 223
    5196:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    519a:	50 c0       	rjmp	.+160    	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    519c:	89 81       	ldd	r24, Y+1	; 0x01
    519e:	28 2f       	mov	r18, r24
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	c9 01       	movw	r24, r18
    51a4:	88 0f       	add	r24, r24
    51a6:	99 1f       	adc	r25, r25
    51a8:	82 0f       	add	r24, r18
    51aa:	93 1f       	adc	r25, r19
    51ac:	86 5b       	subi	r24, 0xB6	; 182
    51ae:	99 4b       	sbci	r25, 0xB9	; 185
    51b0:	fc 01       	movw	r30, r24
    51b2:	80 81       	ld	r24, Z
    51b4:	88 23       	and	r24, r24
    51b6:	b1 f1       	breq	.+108    	; 0x5224 <ep40_lin_signal_update_while_task+0x46c>
    51b8:	89 81       	ldd	r24, Y+1	; 0x01
    51ba:	28 2f       	mov	r18, r24
    51bc:	30 e0       	ldi	r19, 0x00	; 0
    51be:	c9 01       	movw	r24, r18
    51c0:	88 0f       	add	r24, r24
    51c2:	99 1f       	adc	r25, r25
    51c4:	82 0f       	add	r24, r18
    51c6:	93 1f       	adc	r25, r19
    51c8:	86 5b       	subi	r24, 0xB6	; 182
    51ca:	99 4b       	sbci	r25, 0xB9	; 185
    51cc:	fc 01       	movw	r30, r24
    51ce:	80 81       	ld	r24, Z
    51d0:	4f ef       	ldi	r20, 0xFF	; 255
    51d2:	48 0f       	add	r20, r24
    51d4:	c9 01       	movw	r24, r18
    51d6:	88 0f       	add	r24, r24
    51d8:	99 1f       	adc	r25, r25
    51da:	82 0f       	add	r24, r18
    51dc:	93 1f       	adc	r25, r19
    51de:	86 5b       	subi	r24, 0xB6	; 182
    51e0:	99 4b       	sbci	r25, 0xB9	; 185
    51e2:	fc 01       	movw	r30, r24
    51e4:	40 83       	st	Z, r20
    51e6:	89 81       	ldd	r24, Y+1	; 0x01
    51e8:	28 2f       	mov	r18, r24
    51ea:	30 e0       	ldi	r19, 0x00	; 0
    51ec:	c9 01       	movw	r24, r18
    51ee:	88 0f       	add	r24, r24
    51f0:	99 1f       	adc	r25, r25
    51f2:	82 0f       	add	r24, r18
    51f4:	93 1f       	adc	r25, r19
    51f6:	85 5b       	subi	r24, 0xB5	; 181
    51f8:	99 4b       	sbci	r25, 0xB9	; 185
    51fa:	fc 01       	movw	r30, r24
    51fc:	80 81       	ld	r24, Z
    51fe:	88 23       	and	r24, r24
    5200:	31 f0       	breq	.+12     	; 0x520e <ep40_lin_signal_update_while_task+0x456>
    5202:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5206:	84 60       	ori	r24, 0x04	; 4
    5208:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    520c:	05 c0       	rjmp	.+10     	; 0x5218 <ep40_lin_signal_update_while_task+0x460>
    520e:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5212:	8b 7f       	andi	r24, 0xFB	; 251
    5214:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5218:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    521c:	8f 7b       	andi	r24, 0xBF	; 191
    521e:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5222:	0c c0       	rjmp	.+24     	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    5224:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5228:	8b 7f       	andi	r24, 0xFB	; 251
    522a:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    522e:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5232:	8f 7b       	andi	r24, 0xBF	; 191
    5234:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5238:	01 c0       	rjmp	.+2      	; 0x523c <ep40_lin_signal_update_while_task+0x484>
    523a:	00 00       	nop
    523c:	89 81       	ldd	r24, Y+1	; 0x01
    523e:	8f 5f       	subi	r24, 0xFF	; 255
    5240:	89 83       	std	Y+1, r24	; 0x01
    5242:	89 81       	ldd	r24, Y+1	; 0x01
    5244:	8a 30       	cpi	r24, 0x0A	; 10
    5246:	08 f4       	brcc	.+2      	; 0x524a <ep40_lin_signal_update_while_task+0x492>
    5248:	be cd       	rjmp	.-1156   	; 0x4dc6 <ep40_lin_signal_update_while_task+0xe>
    524a:	00 00       	nop
    524c:	0f 90       	pop	r0
    524e:	df 91       	pop	r29
    5250:	cf 91       	pop	r28
    5252:	08 95       	ret

00005254 <lin_signal_send_x_times>:
    5254:	cf 93       	push	r28
    5256:	df 93       	push	r29
    5258:	00 d0       	rcall	.+0      	; 0x525a <lin_signal_send_x_times+0x6>
    525a:	1f 92       	push	r1
    525c:	cd b7       	in	r28, 0x3d	; 61
    525e:	de b7       	in	r29, 0x3e	; 62
    5260:	89 83       	std	Y+1, r24	; 0x01
    5262:	6a 83       	std	Y+2, r22	; 0x02
    5264:	4b 83       	std	Y+3, r20	; 0x03
    5266:	89 81       	ldd	r24, Y+1	; 0x01
    5268:	28 2f       	mov	r18, r24
    526a:	30 e0       	ldi	r19, 0x00	; 0
    526c:	c9 01       	movw	r24, r18
    526e:	88 0f       	add	r24, r24
    5270:	99 1f       	adc	r25, r25
    5272:	82 0f       	add	r24, r18
    5274:	93 1f       	adc	r25, r19
    5276:	86 5b       	subi	r24, 0xB6	; 182
    5278:	99 4b       	sbci	r25, 0xB9	; 185
    527a:	2a 81       	ldd	r18, Y+2	; 0x02
    527c:	fc 01       	movw	r30, r24
    527e:	20 83       	st	Z, r18
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	28 2f       	mov	r18, r24
    5284:	30 e0       	ldi	r19, 0x00	; 0
    5286:	c9 01       	movw	r24, r18
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	82 0f       	add	r24, r18
    528e:	93 1f       	adc	r25, r19
    5290:	85 5b       	subi	r24, 0xB5	; 181
    5292:	99 4b       	sbci	r25, 0xB9	; 185
    5294:	2b 81       	ldd	r18, Y+3	; 0x03
    5296:	fc 01       	movw	r30, r24
    5298:	20 83       	st	Z, r18
    529a:	00 00       	nop
    529c:	23 96       	adiw	r28, 0x03	; 3
    529e:	cd bf       	out	0x3d, r28	; 61
    52a0:	de bf       	out	0x3e, r29	; 62
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	08 95       	ret

000052a8 <left_window_signal_out_cb>:

/* 左边窗提升信号输出回调函数 */
void left_window_signal_out_cb(uint8_t signal)
{
    52a8:	cf 93       	push	r28
    52aa:	df 93       	push	r29
    52ac:	1f 92       	push	r1
    52ae:	cd b7       	in	r28, 0x3d	; 61
    52b0:	de b7       	in	r29, 0x3e	; 62
    52b2:	89 83       	std	Y+1, r24	; 0x01
    // }
    // else
    // {
    //     lin_signal_x_shot_wr(PFGLS_0X21_RL_WINDOW_CONTROL, signal, 3);
    // }
}
    52b4:	00 00       	nop
    52b6:	0f 90       	pop	r0
    52b8:	df 91       	pop	r29
    52ba:	cf 91       	pop	r28
    52bc:	08 95       	ret

000052be <right_window_signal_out_cb>:

/* 右边窗提升信号输出回调函数 */
void right_window_signal_out_cb(uint8_t signal)
{
    52be:	cf 93       	push	r28
    52c0:	df 93       	push	r29
    52c2:	1f 92       	push	r1
    52c4:	cd b7       	in	r28, 0x3d	; 61
    52c6:	de b7       	in	r29, 0x3e	; 62
    52c8:	89 83       	std	Y+1, r24	; 0x01
    lin_signal_send_x_times(LI0_PFGLS_RLWindowControl, 3, signal);
    52ca:	49 81       	ldd	r20, Y+1	; 0x01
    52cc:	63 e0       	ldi	r22, 0x03	; 3
    52ce:	83 e0       	ldi	r24, 0x03	; 3
    52d0:	0e 94 2a 29 	call	0x5254	; 0x5254 <lin_signal_send_x_times>
}
    52d4:	00 00       	nop
    52d6:	0f 90       	pop	r0
    52d8:	df 91       	pop	r29
    52da:	cf 91       	pop	r28
    52dc:	08 95       	ret

000052de <soft_timer_window_task>:

/* 窗提升滑条呵呵按键软件定时器任务 */
void soft_timer_window_task(void)
{
    52de:	cf 93       	push	r28
    52e0:	df 93       	push	r29
    52e2:	00 d0       	rcall	.+0      	; 0x52e4 <soft_timer_window_task+0x6>
    52e4:	00 d0       	rcall	.+0      	; 0x52e6 <soft_timer_window_task+0x8>
    52e6:	cd b7       	in	r28, 0x3d	; 61
    52e8:	de b7       	in	r29, 0x3e	; 62
    window_obj_t *window_obj_ptr = &g_left_window_obj;
    52ea:	89 e7       	ldi	r24, 0x79	; 121
    52ec:	90 e4       	ldi	r25, 0x40	; 64
    52ee:	89 83       	std	Y+1, r24	; 0x01
    52f0:	9a 83       	std	Y+2, r25	; 0x02
    window_t *window_ptr = &g_left_window_obj.window;
    52f2:	84 e8       	ldi	r24, 0x84	; 132
    52f4:	90 e4       	ldi	r25, 0x40	; 64
    52f6:	8b 83       	std	Y+3, r24	; 0x03
    52f8:	9c 83       	std	Y+4, r25	; 0x04
    //rear_status = g_btn_rear.status;

    /*************************************LEFT************************************************/

    /*************************************RIGHT************************************************/
    window_obj_ptr = &g_right_window_obj;
    52fa:	80 e9       	ldi	r24, 0x90	; 144
    52fc:	90 e4       	ldi	r25, 0x40	; 64
    52fe:	89 83       	std	Y+1, r24	; 0x01
    5300:	9a 83       	std	Y+2, r25	; 0x02
    window_ptr = &g_right_window_obj.window;
    5302:	8b e9       	ldi	r24, 0x9B	; 155
    5304:	90 e4       	ldi	r25, 0x40	; 64
    5306:	8b 83       	std	Y+3, r24	; 0x03
    5308:	9c 83       	std	Y+4, r25	; 0x04

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
    530a:	89 81       	ldd	r24, Y+1	; 0x01
    530c:	9a 81       	ldd	r25, Y+2	; 0x02
    530e:	fc 01       	movw	r30, r24
    5310:	24 81       	ldd	r18, Z+4	; 0x04
    5312:	89 81       	ldd	r24, Y+1	; 0x01
    5314:	9a 81       	ldd	r25, Y+2	; 0x02
    5316:	fc 01       	movw	r30, r24
    5318:	23 83       	std	Z+3, r18	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(0) & 0x80;
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	0e 94 37 67 	call	0xce6e	; 0xce6e <get_sensor_state>
    5322:	28 2f       	mov	r18, r24
    5324:	20 78       	andi	r18, 0x80	; 128
    5326:	89 81       	ldd	r24, Y+1	; 0x01
    5328:	9a 81       	ldd	r25, Y+2	; 0x02
    532a:	fc 01       	movw	r30, r24
    532c:	24 83       	std	Z+4, r18	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
    532e:	89 81       	ldd	r24, Y+1	; 0x01
    5330:	9a 81       	ldd	r25, Y+2	; 0x02
    5332:	fc 01       	movw	r30, r24
    5334:	26 81       	ldd	r18, Z+6	; 0x06
    5336:	89 81       	ldd	r24, Y+1	; 0x01
    5338:	9a 81       	ldd	r25, Y+2	; 0x02
    533a:	fc 01       	movw	r30, r24
    533c:	25 83       	std	Z+5, r18	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(1) & 0x80;
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	0e 94 37 67 	call	0xce6e	; 0xce6e <get_sensor_state>
    5346:	28 2f       	mov	r18, r24
    5348:	20 78       	andi	r18, 0x80	; 128
    534a:	89 81       	ldd	r24, Y+1	; 0x01
    534c:	9a 81       	ldd	r25, Y+2	; 0x02
    534e:	fc 01       	movw	r30, r24
    5350:	26 83       	std	Z+6, r18	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
    5352:	89 81       	ldd	r24, Y+1	; 0x01
    5354:	9a 81       	ldd	r25, Y+2	; 0x02
    5356:	fc 01       	movw	r30, r24
    5358:	24 81       	ldd	r18, Z+4	; 0x04
    535a:	8b 81       	ldd	r24, Y+3	; 0x03
    535c:	9c 81       	ldd	r25, Y+4	; 0x04
    535e:	fc 01       	movw	r30, r24
    5360:	26 83       	std	Z+6, r18	; 0x06
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
    5362:	89 81       	ldd	r24, Y+1	; 0x01
    5364:	9a 81       	ldd	r25, Y+2	; 0x02
    5366:	fc 01       	movw	r30, r24
    5368:	26 81       	ldd	r18, Z+6	; 0x06
    536a:	8b 81       	ldd	r24, Y+3	; 0x03
    536c:	9c 81       	ldd	r25, Y+4	; 0x04
    536e:	fc 01       	movw	r30, r24
    5370:	27 83       	std	Z+7, r18	; 0x07

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
    5372:	89 81       	ldd	r24, Y+1	; 0x01
    5374:	9a 81       	ldd	r25, Y+2	; 0x02
    5376:	fc 01       	movw	r30, r24
    5378:	84 81       	ldd	r24, Z+4	; 0x04
    537a:	88 23       	and	r24, r24
    537c:	a9 f0       	breq	.+42     	; 0x53a8 <soft_timer_window_task+0xca>
    537e:	89 81       	ldd	r24, Y+1	; 0x01
    5380:	9a 81       	ldd	r25, Y+2	; 0x02
    5382:	fc 01       	movw	r30, r24
    5384:	83 81       	ldd	r24, Z+3	; 0x03
    5386:	88 23       	and	r24, r24
    5388:	79 f4       	brne	.+30     	; 0x53a8 <soft_timer_window_task+0xca>
    {
        window_obj_ptr->ticks = 0;
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	9a 81       	ldd	r25, Y+2	; 0x02
    538e:	fc 01       	movw	r30, r24
    5390:	11 82       	std	Z+1, r1	; 0x01
    5392:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 2;
    5394:	89 81       	ldd	r24, Y+1	; 0x01
    5396:	9a 81       	ldd	r25, Y+2	; 0x02
    5398:	22 e0       	ldi	r18, 0x02	; 2
    539a:	fc 01       	movw	r30, r24
    539c:	20 83       	st	Z, r18
        lin_signal_send_x_times(LI0_PFGLS_ButtonSoundRequest, 1, 1);
    539e:	41 e0       	ldi	r20, 0x01	; 1
    53a0:	61 e0       	ldi	r22, 0x01	; 1
    53a2:	85 e0       	ldi	r24, 0x05	; 5
    53a4:	0e 94 2a 29 	call	0x5254	; 0x5254 <lin_signal_send_x_times>
    }

    if (window_obj_ptr->status == 2)
    53a8:	89 81       	ldd	r24, Y+1	; 0x01
    53aa:	9a 81       	ldd	r25, Y+2	; 0x02
    53ac:	fc 01       	movw	r30, r24
    53ae:	80 81       	ld	r24, Z
    53b0:	82 30       	cpi	r24, 0x02	; 2
    53b2:	09 f0       	breq	.+2      	; 0x53b6 <soft_timer_window_task+0xd8>
    53b4:	3f c0       	rjmp	.+126    	; 0x5434 <soft_timer_window_task+0x156>
    {
        window_obj_ptr->ticks++;
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ba:	fc 01       	movw	r30, r24
    53bc:	81 81       	ldd	r24, Z+1	; 0x01
    53be:	92 81       	ldd	r25, Z+2	; 0x02
    53c0:	9c 01       	movw	r18, r24
    53c2:	2f 5f       	subi	r18, 0xFF	; 255
    53c4:	3f 4f       	sbci	r19, 0xFF	; 255
    53c6:	89 81       	ldd	r24, Y+1	; 0x01
    53c8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ca:	fc 01       	movw	r30, r24
    53cc:	21 83       	std	Z+1, r18	; 0x01
    53ce:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    53d0:	8b 81       	ldd	r24, Y+3	; 0x03
    53d2:	9c 81       	ldd	r25, Y+4	; 0x04
    53d4:	21 e0       	ldi	r18, 0x01	; 1
    53d6:	fc 01       	movw	r30, r24
    53d8:	21 83       	std	Z+1, r18	; 0x01
        window_ptr->btn_a_cap_trig_flg = 1;
    53da:	8b 81       	ldd	r24, Y+3	; 0x03
    53dc:	9c 81       	ldd	r25, Y+4	; 0x04
    53de:	21 e0       	ldi	r18, 0x01	; 1
    53e0:	fc 01       	movw	r30, r24
    53e2:	23 83       	std	Z+3, r18	; 0x03
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    53e4:	89 81       	ldd	r24, Y+1	; 0x01
    53e6:	9a 81       	ldd	r25, Y+2	; 0x02
    53e8:	fc 01       	movw	r30, r24
    53ea:	81 81       	ldd	r24, Z+1	; 0x01
    53ec:	92 81       	ldd	r25, Z+2	; 0x02
    53ee:	0f 97       	sbiw	r24, 0x0f	; 15
    53f0:	70 f0       	brcs	.+28     	; 0x540e <soft_timer_window_task+0x130>
        {
            window_obj_ptr->status = 0;
    53f2:	89 81       	ldd	r24, Y+1	; 0x01
    53f4:	9a 81       	ldd	r25, Y+2	; 0x02
    53f6:	fc 01       	movw	r30, r24
    53f8:	10 82       	st	Z, r1
            window_ptr->long_flg = 1;
    53fa:	8b 81       	ldd	r24, Y+3	; 0x03
    53fc:	9c 81       	ldd	r25, Y+4	; 0x04
    53fe:	21 e0       	ldi	r18, 0x01	; 1
    5400:	fc 01       	movw	r30, r24
    5402:	21 83       	std	Z+1, r18	; 0x01
            window_ptr->btn_a_cap_trig_flg = 1;
    5404:	8b 81       	ldd	r24, Y+3	; 0x03
    5406:	9c 81       	ldd	r25, Y+4	; 0x04
    5408:	21 e0       	ldi	r18, 0x01	; 1
    540a:	fc 01       	movw	r30, r24
    540c:	23 83       	std	Z+3, r18	; 0x03
        }
        if (window_obj_ptr->btn_a_status == 0)
    540e:	89 81       	ldd	r24, Y+1	; 0x01
    5410:	9a 81       	ldd	r25, Y+2	; 0x02
    5412:	fc 01       	movw	r30, r24
    5414:	84 81       	ldd	r24, Z+4	; 0x04
    5416:	88 23       	and	r24, r24
    5418:	69 f4       	brne	.+26     	; 0x5434 <soft_timer_window_task+0x156>
        {
            window_obj_ptr->status = 0;
    541a:	89 81       	ldd	r24, Y+1	; 0x01
    541c:	9a 81       	ldd	r25, Y+2	; 0x02
    541e:	fc 01       	movw	r30, r24
    5420:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    5422:	8b 81       	ldd	r24, Y+3	; 0x03
    5424:	9c 81       	ldd	r25, Y+4	; 0x04
    5426:	fc 01       	movw	r30, r24
    5428:	11 82       	std	Z+1, r1	; 0x01
            window_ptr->btn_a_cap_trig_flg = 1;
    542a:	8b 81       	ldd	r24, Y+3	; 0x03
    542c:	9c 81       	ldd	r25, Y+4	; 0x04
    542e:	21 e0       	ldi	r18, 0x01	; 1
    5430:	fc 01       	movw	r30, r24
    5432:	23 83       	std	Z+3, r18	; 0x03
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
    5434:	89 81       	ldd	r24, Y+1	; 0x01
    5436:	9a 81       	ldd	r25, Y+2	; 0x02
    5438:	fc 01       	movw	r30, r24
    543a:	86 81       	ldd	r24, Z+6	; 0x06
    543c:	88 23       	and	r24, r24
    543e:	a9 f0       	breq	.+42     	; 0x546a <soft_timer_window_task+0x18c>
    5440:	89 81       	ldd	r24, Y+1	; 0x01
    5442:	9a 81       	ldd	r25, Y+2	; 0x02
    5444:	fc 01       	movw	r30, r24
    5446:	85 81       	ldd	r24, Z+5	; 0x05
    5448:	88 23       	and	r24, r24
    544a:	79 f4       	brne	.+30     	; 0x546a <soft_timer_window_task+0x18c>
    {
        window_obj_ptr->ticks = 0;
    544c:	89 81       	ldd	r24, Y+1	; 0x01
    544e:	9a 81       	ldd	r25, Y+2	; 0x02
    5450:	fc 01       	movw	r30, r24
    5452:	11 82       	std	Z+1, r1	; 0x01
    5454:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
    5456:	89 81       	ldd	r24, Y+1	; 0x01
    5458:	9a 81       	ldd	r25, Y+2	; 0x02
    545a:	23 e0       	ldi	r18, 0x03	; 3
    545c:	fc 01       	movw	r30, r24
    545e:	20 83       	st	Z, r18
        lin_signal_send_x_times(LI0_PFGLS_ButtonSoundRequest, 1, 1);
    5460:	41 e0       	ldi	r20, 0x01	; 1
    5462:	61 e0       	ldi	r22, 0x01	; 1
    5464:	85 e0       	ldi	r24, 0x05	; 5
    5466:	0e 94 2a 29 	call	0x5254	; 0x5254 <lin_signal_send_x_times>
    }

    if (window_obj_ptr->status == 3)
    546a:	89 81       	ldd	r24, Y+1	; 0x01
    546c:	9a 81       	ldd	r25, Y+2	; 0x02
    546e:	fc 01       	movw	r30, r24
    5470:	80 81       	ld	r24, Z
    5472:	83 30       	cpi	r24, 0x03	; 3
    5474:	09 f0       	breq	.+2      	; 0x5478 <soft_timer_window_task+0x19a>
    5476:	3f c0       	rjmp	.+126    	; 0x54f6 <soft_timer_window_task+0x218>
    {
        window_obj_ptr->ticks++;
    5478:	89 81       	ldd	r24, Y+1	; 0x01
    547a:	9a 81       	ldd	r25, Y+2	; 0x02
    547c:	fc 01       	movw	r30, r24
    547e:	81 81       	ldd	r24, Z+1	; 0x01
    5480:	92 81       	ldd	r25, Z+2	; 0x02
    5482:	9c 01       	movw	r18, r24
    5484:	2f 5f       	subi	r18, 0xFF	; 255
    5486:	3f 4f       	sbci	r19, 0xFF	; 255
    5488:	89 81       	ldd	r24, Y+1	; 0x01
    548a:	9a 81       	ldd	r25, Y+2	; 0x02
    548c:	fc 01       	movw	r30, r24
    548e:	21 83       	std	Z+1, r18	; 0x01
    5490:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    5492:	8b 81       	ldd	r24, Y+3	; 0x03
    5494:	9c 81       	ldd	r25, Y+4	; 0x04
    5496:	21 e0       	ldi	r18, 0x01	; 1
    5498:	fc 01       	movw	r30, r24
    549a:	21 83       	std	Z+1, r18	; 0x01
        window_ptr->btn_b_cap_trig_flg = 1;
    549c:	8b 81       	ldd	r24, Y+3	; 0x03
    549e:	9c 81       	ldd	r25, Y+4	; 0x04
    54a0:	21 e0       	ldi	r18, 0x01	; 1
    54a2:	fc 01       	movw	r30, r24
    54a4:	22 83       	std	Z+2, r18	; 0x02
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    54a6:	89 81       	ldd	r24, Y+1	; 0x01
    54a8:	9a 81       	ldd	r25, Y+2	; 0x02
    54aa:	fc 01       	movw	r30, r24
    54ac:	81 81       	ldd	r24, Z+1	; 0x01
    54ae:	92 81       	ldd	r25, Z+2	; 0x02
    54b0:	0f 97       	sbiw	r24, 0x0f	; 15
    54b2:	70 f0       	brcs	.+28     	; 0x54d0 <soft_timer_window_task+0x1f2>
        {
            window_obj_ptr->status = 0;
    54b4:	89 81       	ldd	r24, Y+1	; 0x01
    54b6:	9a 81       	ldd	r25, Y+2	; 0x02
    54b8:	fc 01       	movw	r30, r24
    54ba:	10 82       	st	Z, r1
            window_ptr->long_flg = 1;
    54bc:	8b 81       	ldd	r24, Y+3	; 0x03
    54be:	9c 81       	ldd	r25, Y+4	; 0x04
    54c0:	21 e0       	ldi	r18, 0x01	; 1
    54c2:	fc 01       	movw	r30, r24
    54c4:	21 83       	std	Z+1, r18	; 0x01
            window_ptr->btn_b_cap_trig_flg = 1;
    54c6:	8b 81       	ldd	r24, Y+3	; 0x03
    54c8:	9c 81       	ldd	r25, Y+4	; 0x04
    54ca:	21 e0       	ldi	r18, 0x01	; 1
    54cc:	fc 01       	movw	r30, r24
    54ce:	22 83       	std	Z+2, r18	; 0x02
        }
        if (window_obj_ptr->btn_b_status == 0)
    54d0:	89 81       	ldd	r24, Y+1	; 0x01
    54d2:	9a 81       	ldd	r25, Y+2	; 0x02
    54d4:	fc 01       	movw	r30, r24
    54d6:	86 81       	ldd	r24, Z+6	; 0x06
    54d8:	88 23       	and	r24, r24
    54da:	69 f4       	brne	.+26     	; 0x54f6 <soft_timer_window_task+0x218>
        {
            window_obj_ptr->status = 0;
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
    54de:	9a 81       	ldd	r25, Y+2	; 0x02
    54e0:	fc 01       	movw	r30, r24
    54e2:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    54e4:	8b 81       	ldd	r24, Y+3	; 0x03
    54e6:	9c 81       	ldd	r25, Y+4	; 0x04
    54e8:	fc 01       	movw	r30, r24
    54ea:	11 82       	std	Z+1, r1	; 0x01
            window_ptr->btn_b_cap_trig_flg = 1;
    54ec:	8b 81       	ldd	r24, Y+3	; 0x03
    54ee:	9c 81       	ldd	r25, Y+4	; 0x04
    54f0:	21 e0       	ldi	r18, 0x01	; 1
    54f2:	fc 01       	movw	r30, r24
    54f4:	22 83       	std	Z+2, r18	; 0x02
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	9a 81       	ldd	r25, Y+2	; 0x02
    54fa:	fc 01       	movw	r30, r24
    54fc:	20 85       	ldd	r18, Z+8	; 0x08
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	9a 81       	ldd	r25, Y+2	; 0x02
    5502:	fc 01       	movw	r30, r24
    5504:	27 83       	std	Z+7, r18	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(0);
    5506:	80 e0       	ldi	r24, 0x00	; 0
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	0e 94 54 67 	call	0xcea8	; 0xcea8 <get_scroller_state>
    550e:	28 2f       	mov	r18, r24
    5510:	89 81       	ldd	r24, Y+1	; 0x01
    5512:	9a 81       	ldd	r25, Y+2	; 0x02
    5514:	fc 01       	movw	r30, r24
    5516:	20 87       	std	Z+8, r18	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
    5518:	89 81       	ldd	r24, Y+1	; 0x01
    551a:	9a 81       	ldd	r25, Y+2	; 0x02
    551c:	fc 01       	movw	r30, r24
    551e:	20 85       	ldd	r18, Z+8	; 0x08
    5520:	8b 81       	ldd	r24, Y+3	; 0x03
    5522:	9c 81       	ldd	r25, Y+4	; 0x04
    5524:	fc 01       	movw	r30, r24
    5526:	20 87       	std	Z+8, r18	; 0x08

    window_obj_ptr->slide_pos = get_scroller_position(0);
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	0e 94 73 67 	call	0xcee6	; 0xcee6 <get_scroller_position>
    5530:	28 2f       	mov	r18, r24
    5532:	89 81       	ldd	r24, Y+1	; 0x01
    5534:	9a 81       	ldd	r25, Y+2	; 0x02
    5536:	fc 01       	movw	r30, r24
    5538:	22 87       	std	Z+10, r18	; 0x0a

    if (window_obj_ptr->status == 0)
    553a:	89 81       	ldd	r24, Y+1	; 0x01
    553c:	9a 81       	ldd	r25, Y+2	; 0x02
    553e:	fc 01       	movw	r30, r24
    5540:	80 81       	ld	r24, Z
    5542:	88 23       	and	r24, r24
    5544:	09 f5       	brne	.+66     	; 0x5588 <soft_timer_window_task+0x2aa>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	9a 81       	ldd	r25, Y+2	; 0x02
    554a:	fc 01       	movw	r30, r24
    554c:	80 85       	ldd	r24, Z+8	; 0x08
    554e:	88 23       	and	r24, r24
    5550:	09 f4       	brne	.+2      	; 0x5554 <soft_timer_window_task+0x276>
    5552:	db c0       	rjmp	.+438    	; 0x570a <soft_timer_window_task+0x42c>
    5554:	89 81       	ldd	r24, Y+1	; 0x01
    5556:	9a 81       	ldd	r25, Y+2	; 0x02
    5558:	fc 01       	movw	r30, r24
    555a:	87 81       	ldd	r24, Z+7	; 0x07
    555c:	88 23       	and	r24, r24
    555e:	09 f0       	breq	.+2      	; 0x5562 <soft_timer_window_task+0x284>
    5560:	d4 c0       	rjmp	.+424    	; 0x570a <soft_timer_window_task+0x42c>
        {
            window_obj_ptr->ticks = 0;
    5562:	89 81       	ldd	r24, Y+1	; 0x01
    5564:	9a 81       	ldd	r25, Y+2	; 0x02
    5566:	fc 01       	movw	r30, r24
    5568:	11 82       	std	Z+1, r1	; 0x01
    556a:	12 82       	std	Z+2, r1	; 0x02
            window_obj_ptr->status = 4;
    556c:	89 81       	ldd	r24, Y+1	; 0x01
    556e:	9a 81       	ldd	r25, Y+2	; 0x02
    5570:	24 e0       	ldi	r18, 0x04	; 4
    5572:	fc 01       	movw	r30, r24
    5574:	20 83       	st	Z, r18
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
    5576:	89 81       	ldd	r24, Y+1	; 0x01
    5578:	9a 81       	ldd	r25, Y+2	; 0x02
    557a:	fc 01       	movw	r30, r24
    557c:	22 85       	ldd	r18, Z+10	; 0x0a
    557e:	89 81       	ldd	r24, Y+1	; 0x01
    5580:	9a 81       	ldd	r25, Y+2	; 0x02
    5582:	fc 01       	movw	r30, r24
    5584:	21 87       	std	Z+9, r18	; 0x09
    5586:	c1 c0       	rjmp	.+386    	; 0x570a <soft_timer_window_task+0x42c>
        }
    }
    else if (window_obj_ptr->status == 4)
    5588:	89 81       	ldd	r24, Y+1	; 0x01
    558a:	9a 81       	ldd	r25, Y+2	; 0x02
    558c:	fc 01       	movw	r30, r24
    558e:	80 81       	ld	r24, Z
    5590:	84 30       	cpi	r24, 0x04	; 4
    5592:	09 f0       	breq	.+2      	; 0x5596 <soft_timer_window_task+0x2b8>
    5594:	aa c0       	rjmp	.+340    	; 0x56ea <soft_timer_window_task+0x40c>
    {
        if (window_obj_ptr->slide_status == 0)
    5596:	89 81       	ldd	r24, Y+1	; 0x01
    5598:	9a 81       	ldd	r25, Y+2	; 0x02
    559a:	fc 01       	movw	r30, r24
    559c:	80 85       	ldd	r24, Z+8	; 0x08
    559e:	88 23       	and	r24, r24
    55a0:	99 f5       	brne	.+102    	; 0x5608 <soft_timer_window_task+0x32a>
        {
            window_obj_ptr->status = 0;
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
    55a4:	9a 81       	ldd	r25, Y+2	; 0x02
    55a6:	fc 01       	movw	r30, r24
    55a8:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
    55aa:	89 81       	ldd	r24, Y+1	; 0x01
    55ac:	9a 81       	ldd	r25, Y+2	; 0x02
    55ae:	fc 01       	movw	r30, r24
    55b0:	81 85       	ldd	r24, Z+9	; 0x09
    55b2:	84 36       	cpi	r24, 0x64	; 100
    55b4:	88 f4       	brcc	.+34     	; 0x55d8 <soft_timer_window_task+0x2fa>
            {
                if (window_obj_ptr->slide_pos > 150)
    55b6:	89 81       	ldd	r24, Y+1	; 0x01
    55b8:	9a 81       	ldd	r25, Y+2	; 0x02
    55ba:	fc 01       	movw	r30, r24
    55bc:	82 85       	ldd	r24, Z+10	; 0x0a
    55be:	87 39       	cpi	r24, 0x97	; 151
    55c0:	08 f4       	brcc	.+2      	; 0x55c4 <soft_timer_window_task+0x2e6>
    55c2:	a3 c0       	rjmp	.+326    	; 0x570a <soft_timer_window_task+0x42c>
                {
                    window_ptr->long_flg = 0;
    55c4:	8b 81       	ldd	r24, Y+3	; 0x03
    55c6:	9c 81       	ldd	r25, Y+4	; 0x04
    55c8:	fc 01       	movw	r30, r24
    55ca:	11 82       	std	Z+1, r1	; 0x01
                    window_ptr->slide_1_to_2_flg = 1;
    55cc:	8b 81       	ldd	r24, Y+3	; 0x03
    55ce:	9c 81       	ldd	r25, Y+4	; 0x04
    55d0:	21 e0       	ldi	r18, 0x01	; 1
    55d2:	fc 01       	movw	r30, r24
    55d4:	24 83       	std	Z+4, r18	; 0x04
    55d6:	99 c0       	rjmp	.+306    	; 0x570a <soft_timer_window_task+0x42c>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
    55d8:	89 81       	ldd	r24, Y+1	; 0x01
    55da:	9a 81       	ldd	r25, Y+2	; 0x02
    55dc:	fc 01       	movw	r30, r24
    55de:	81 85       	ldd	r24, Z+9	; 0x09
    55e0:	87 39       	cpi	r24, 0x97	; 151
    55e2:	08 f4       	brcc	.+2      	; 0x55e6 <soft_timer_window_task+0x308>
    55e4:	92 c0       	rjmp	.+292    	; 0x570a <soft_timer_window_task+0x42c>
            {
                if (window_obj_ptr->slide_pos < 100)
    55e6:	89 81       	ldd	r24, Y+1	; 0x01
    55e8:	9a 81       	ldd	r25, Y+2	; 0x02
    55ea:	fc 01       	movw	r30, r24
    55ec:	82 85       	ldd	r24, Z+10	; 0x0a
    55ee:	84 36       	cpi	r24, 0x64	; 100
    55f0:	08 f0       	brcs	.+2      	; 0x55f4 <soft_timer_window_task+0x316>
    55f2:	8b c0       	rjmp	.+278    	; 0x570a <soft_timer_window_task+0x42c>
                {
                    window_ptr->long_flg = 0;
    55f4:	8b 81       	ldd	r24, Y+3	; 0x03
    55f6:	9c 81       	ldd	r25, Y+4	; 0x04
    55f8:	fc 01       	movw	r30, r24
    55fa:	11 82       	std	Z+1, r1	; 0x01
                    window_ptr->slide_2_to_1_flg = 1;
    55fc:	8b 81       	ldd	r24, Y+3	; 0x03
    55fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5600:	21 e0       	ldi	r18, 0x01	; 1
    5602:	fc 01       	movw	r30, r24
    5604:	25 83       	std	Z+5, r18	; 0x05
    5606:	81 c0       	rjmp	.+258    	; 0x570a <soft_timer_window_task+0x42c>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	9a 81       	ldd	r25, Y+2	; 0x02
    560c:	fc 01       	movw	r30, r24
    560e:	81 81       	ldd	r24, Z+1	; 0x01
    5610:	92 81       	ldd	r25, Z+2	; 0x02
    5612:	9c 01       	movw	r18, r24
    5614:	2f 5f       	subi	r18, 0xFF	; 255
    5616:	3f 4f       	sbci	r19, 0xFF	; 255
    5618:	89 81       	ldd	r24, Y+1	; 0x01
    561a:	9a 81       	ldd	r25, Y+2	; 0x02
    561c:	fc 01       	movw	r30, r24
    561e:	21 83       	std	Z+1, r18	; 0x01
    5620:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
    5622:	89 81       	ldd	r24, Y+1	; 0x01
    5624:	9a 81       	ldd	r25, Y+2	; 0x02
    5626:	fc 01       	movw	r30, r24
    5628:	80 85       	ldd	r24, Z+8	; 0x08
    562a:	88 23       	and	r24, r24
    562c:	09 f4       	brne	.+2      	; 0x5630 <soft_timer_window_task+0x352>
    562e:	6d c0       	rjmp	.+218    	; 0x570a <soft_timer_window_task+0x42c>
            {
                if (window_obj_ptr->slide_pos_first < 100)
    5630:	89 81       	ldd	r24, Y+1	; 0x01
    5632:	9a 81       	ldd	r25, Y+2	; 0x02
    5634:	fc 01       	movw	r30, r24
    5636:	81 85       	ldd	r24, Z+9	; 0x09
    5638:	84 36       	cpi	r24, 0x64	; 100
    563a:	48 f5       	brcc	.+82     	; 0x568e <soft_timer_window_task+0x3b0>
                {
                    if (window_obj_ptr->slide_pos > 150)
    563c:	89 81       	ldd	r24, Y+1	; 0x01
    563e:	9a 81       	ldd	r25, Y+2	; 0x02
    5640:	fc 01       	movw	r30, r24
    5642:	82 85       	ldd	r24, Z+10	; 0x0a
    5644:	87 39       	cpi	r24, 0x97	; 151
    5646:	08 f4       	brcc	.+2      	; 0x564a <soft_timer_window_task+0x36c>
    5648:	60 c0       	rjmp	.+192    	; 0x570a <soft_timer_window_task+0x42c>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    564a:	89 81       	ldd	r24, Y+1	; 0x01
    564c:	9a 81       	ldd	r25, Y+2	; 0x02
    564e:	fc 01       	movw	r30, r24
    5650:	81 81       	ldd	r24, Z+1	; 0x01
    5652:	92 81       	ldd	r25, Z+2	; 0x02
    5654:	0f 97       	sbiw	r24, 0x0f	; 15
    5656:	80 f0       	brcs	.+32     	; 0x5678 <soft_timer_window_task+0x39a>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    5658:	8b 81       	ldd	r24, Y+3	; 0x03
    565a:	9c 81       	ldd	r25, Y+4	; 0x04
    565c:	21 e0       	ldi	r18, 0x01	; 1
    565e:	fc 01       	movw	r30, r24
    5660:	24 83       	std	Z+4, r18	; 0x04
                            window_obj_ptr->status = 5;
    5662:	89 81       	ldd	r24, Y+1	; 0x01
    5664:	9a 81       	ldd	r25, Y+2	; 0x02
    5666:	25 e0       	ldi	r18, 0x05	; 5
    5668:	fc 01       	movw	r30, r24
    566a:	20 83       	st	Z, r18
                            window_ptr->long_flg = 1;
    566c:	8b 81       	ldd	r24, Y+3	; 0x03
    566e:	9c 81       	ldd	r25, Y+4	; 0x04
    5670:	21 e0       	ldi	r18, 0x01	; 1
    5672:	fc 01       	movw	r30, r24
    5674:	21 83       	std	Z+1, r18	; 0x01
    5676:	49 c0       	rjmp	.+146    	; 0x570a <soft_timer_window_task+0x42c>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    5678:	8b 81       	ldd	r24, Y+3	; 0x03
    567a:	9c 81       	ldd	r25, Y+4	; 0x04
    567c:	21 e0       	ldi	r18, 0x01	; 1
    567e:	fc 01       	movw	r30, r24
    5680:	24 83       	std	Z+4, r18	; 0x04
                            window_ptr->long_flg = 1;
    5682:	8b 81       	ldd	r24, Y+3	; 0x03
    5684:	9c 81       	ldd	r25, Y+4	; 0x04
    5686:	21 e0       	ldi	r18, 0x01	; 1
    5688:	fc 01       	movw	r30, r24
    568a:	21 83       	std	Z+1, r18	; 0x01
    568c:	3e c0       	rjmp	.+124    	; 0x570a <soft_timer_window_task+0x42c>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
    568e:	89 81       	ldd	r24, Y+1	; 0x01
    5690:	9a 81       	ldd	r25, Y+2	; 0x02
    5692:	fc 01       	movw	r30, r24
    5694:	81 85       	ldd	r24, Z+9	; 0x09
    5696:	87 39       	cpi	r24, 0x97	; 151
    5698:	c0 f1       	brcs	.+112    	; 0x570a <soft_timer_window_task+0x42c>
                {
                    if (window_obj_ptr->slide_pos < 100)
    569a:	89 81       	ldd	r24, Y+1	; 0x01
    569c:	9a 81       	ldd	r25, Y+2	; 0x02
    569e:	fc 01       	movw	r30, r24
    56a0:	82 85       	ldd	r24, Z+10	; 0x0a
    56a2:	84 36       	cpi	r24, 0x64	; 100
    56a4:	90 f5       	brcc	.+100    	; 0x570a <soft_timer_window_task+0x42c>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    56a6:	89 81       	ldd	r24, Y+1	; 0x01
    56a8:	9a 81       	ldd	r25, Y+2	; 0x02
    56aa:	fc 01       	movw	r30, r24
    56ac:	81 81       	ldd	r24, Z+1	; 0x01
    56ae:	92 81       	ldd	r25, Z+2	; 0x02
    56b0:	0f 97       	sbiw	r24, 0x0f	; 15
    56b2:	80 f0       	brcs	.+32     	; 0x56d4 <soft_timer_window_task+0x3f6>
                        {
                            window_obj_ptr->status = 5;
    56b4:	89 81       	ldd	r24, Y+1	; 0x01
    56b6:	9a 81       	ldd	r25, Y+2	; 0x02
    56b8:	25 e0       	ldi	r18, 0x05	; 5
    56ba:	fc 01       	movw	r30, r24
    56bc:	20 83       	st	Z, r18
                            window_ptr->long_flg = 1;
    56be:	8b 81       	ldd	r24, Y+3	; 0x03
    56c0:	9c 81       	ldd	r25, Y+4	; 0x04
    56c2:	21 e0       	ldi	r18, 0x01	; 1
    56c4:	fc 01       	movw	r30, r24
    56c6:	21 83       	std	Z+1, r18	; 0x01
                            window_ptr->slide_2_to_1_flg = 1;
    56c8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ca:	9c 81       	ldd	r25, Y+4	; 0x04
    56cc:	21 e0       	ldi	r18, 0x01	; 1
    56ce:	fc 01       	movw	r30, r24
    56d0:	25 83       	std	Z+5, r18	; 0x05
    56d2:	1b c0       	rjmp	.+54     	; 0x570a <soft_timer_window_task+0x42c>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
    56d4:	8b 81       	ldd	r24, Y+3	; 0x03
    56d6:	9c 81       	ldd	r25, Y+4	; 0x04
    56d8:	21 e0       	ldi	r18, 0x01	; 1
    56da:	fc 01       	movw	r30, r24
    56dc:	21 83       	std	Z+1, r18	; 0x01
                            window_ptr->slide_2_to_1_flg = 1;
    56de:	8b 81       	ldd	r24, Y+3	; 0x03
    56e0:	9c 81       	ldd	r25, Y+4	; 0x04
    56e2:	21 e0       	ldi	r18, 0x01	; 1
    56e4:	fc 01       	movw	r30, r24
    56e6:	25 83       	std	Z+5, r18	; 0x05
    56e8:	10 c0       	rjmp	.+32     	; 0x570a <soft_timer_window_task+0x42c>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
    56ea:	89 81       	ldd	r24, Y+1	; 0x01
    56ec:	9a 81       	ldd	r25, Y+2	; 0x02
    56ee:	fc 01       	movw	r30, r24
    56f0:	80 81       	ld	r24, Z
    56f2:	85 30       	cpi	r24, 0x05	; 5
    56f4:	51 f4       	brne	.+20     	; 0x570a <soft_timer_window_task+0x42c>
    {
        if (window_obj_ptr->slide_status == 0)
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
    56f8:	9a 81       	ldd	r25, Y+2	; 0x02
    56fa:	fc 01       	movw	r30, r24
    56fc:	80 85       	ldd	r24, Z+8	; 0x08
    56fe:	88 23       	and	r24, r24
    5700:	21 f4       	brne	.+8      	; 0x570a <soft_timer_window_task+0x42c>
        {
            window_obj_ptr->status = 0;
    5702:	89 81       	ldd	r24, Y+1	; 0x01
    5704:	9a 81       	ldd	r25, Y+2	; 0x02
    5706:	fc 01       	movw	r30, r24
    5708:	10 82       	st	Z, r1
        }
    }
    window_task(window_ptr);
    570a:	8b 81       	ldd	r24, Y+3	; 0x03
    570c:	9c 81       	ldd	r25, Y+4	; 0x04
    570e:	0e 94 85 2c 	call	0x590a	; 0x590a <window_task>
}
    5712:	00 00       	nop
    5714:	24 96       	adiw	r28, 0x04	; 4
    5716:	cd bf       	out	0x3d, r28	; 61
    5718:	de bf       	out	0x3e, r29	; 62
    571a:	df 91       	pop	r29
    571c:	cf 91       	pop	r28
    571e:	08 95       	ret

00005720 <PORTA_set_pin_dir>:
        break;

    default:
        break;
    }
}
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	00 d0       	rcall	.+0      	; 0x5726 <PORTA_set_pin_dir+0x6>
    5726:	cd b7       	in	r28, 0x3d	; 61
    5728:	de b7       	in	r29, 0x3e	; 62
    572a:	89 83       	std	Y+1, r24	; 0x01
    572c:	6a 83       	std	Y+2, r22	; 0x02
    572e:	8a 81       	ldd	r24, Y+2	; 0x02
    5730:	88 2f       	mov	r24, r24
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	81 30       	cpi	r24, 0x01	; 1
    5736:	91 05       	cpc	r25, r1
    5738:	e1 f0       	breq	.+56     	; 0x5772 <PORTA_set_pin_dir+0x52>
    573a:	82 30       	cpi	r24, 0x02	; 2
    573c:	91 05       	cpc	r25, r1
    573e:	71 f1       	breq	.+92     	; 0x579c <PORTA_set_pin_dir+0x7c>
    5740:	89 2b       	or	r24, r25
    5742:	09 f0       	breq	.+2      	; 0x5746 <PORTA_set_pin_dir+0x26>
    5744:	3b c0       	rjmp	.+118    	; 0x57bc <PORTA_set_pin_dir+0x9c>
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	80 e0       	ldi	r24, 0x00	; 0
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	fc 01       	movw	r30, r24
    5750:	80 81       	ld	r24, Z
    5752:	68 2f       	mov	r22, r24
    5754:	89 81       	ldd	r24, Y+1	; 0x01
    5756:	48 2f       	mov	r20, r24
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	02 c0       	rjmp	.+4      	; 0x5764 <PORTA_set_pin_dir+0x44>
    5760:	88 0f       	add	r24, r24
    5762:	99 1f       	adc	r25, r25
    5764:	4a 95       	dec	r20
    5766:	e2 f7       	brpl	.-8      	; 0x5760 <PORTA_set_pin_dir+0x40>
    5768:	80 95       	com	r24
    576a:	86 23       	and	r24, r22
    576c:	f9 01       	movw	r30, r18
    576e:	80 83       	st	Z, r24
    5770:	25 c0       	rjmp	.+74     	; 0x57bc <PORTA_set_pin_dir+0x9c>
    5772:	20 e0       	ldi	r18, 0x00	; 0
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	fc 01       	movw	r30, r24
    577c:	80 81       	ld	r24, Z
    577e:	68 2f       	mov	r22, r24
    5780:	89 81       	ldd	r24, Y+1	; 0x01
    5782:	48 2f       	mov	r20, r24
    5784:	50 e0       	ldi	r21, 0x00	; 0
    5786:	81 e0       	ldi	r24, 0x01	; 1
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	02 c0       	rjmp	.+4      	; 0x5790 <PORTA_set_pin_dir+0x70>
    578c:	88 0f       	add	r24, r24
    578e:	99 1f       	adc	r25, r25
    5790:	4a 95       	dec	r20
    5792:	e2 f7       	brpl	.-8      	; 0x578c <PORTA_set_pin_dir+0x6c>
    5794:	86 2b       	or	r24, r22
    5796:	f9 01       	movw	r30, r18
    5798:	80 83       	st	Z, r24
    579a:	10 c0       	rjmp	.+32     	; 0x57bc <PORTA_set_pin_dir+0x9c>
    579c:	89 81       	ldd	r24, Y+1	; 0x01
    579e:	88 2f       	mov	r24, r24
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	80 5f       	subi	r24, 0xF0	; 240
    57a4:	9b 4f       	sbci	r25, 0xFB	; 251
    57a6:	29 81       	ldd	r18, Y+1	; 0x01
    57a8:	22 2f       	mov	r18, r18
    57aa:	30 e0       	ldi	r19, 0x00	; 0
    57ac:	20 5f       	subi	r18, 0xF0	; 240
    57ae:	3b 4f       	sbci	r19, 0xFB	; 251
    57b0:	f9 01       	movw	r30, r18
    57b2:	20 81       	ld	r18, Z
    57b4:	28 60       	ori	r18, 0x08	; 8
    57b6:	fc 01       	movw	r30, r24
    57b8:	20 83       	st	Z, r18
    57ba:	00 00       	nop
    57bc:	00 00       	nop
    57be:	0f 90       	pop	r0
    57c0:	0f 90       	pop	r0
    57c2:	df 91       	pop	r29
    57c4:	cf 91       	pop	r28
    57c6:	08 95       	ret

000057c8 <PORTA_set_pin_level>:
    57c8:	cf 93       	push	r28
    57ca:	df 93       	push	r29
    57cc:	00 d0       	rcall	.+0      	; 0x57ce <PORTA_set_pin_level+0x6>
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
    57d2:	89 83       	std	Y+1, r24	; 0x01
    57d4:	6a 83       	std	Y+2, r22	; 0x02
    57d6:	8a 81       	ldd	r24, Y+2	; 0x02
    57d8:	88 23       	and	r24, r24
    57da:	a9 f0       	breq	.+42     	; 0x5806 <PORTA_set_pin_level+0x3e>
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	80 e0       	ldi	r24, 0x00	; 0
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	fc 01       	movw	r30, r24
    57e6:	81 81       	ldd	r24, Z+1	; 0x01
    57e8:	68 2f       	mov	r22, r24
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	48 2f       	mov	r20, r24
    57ee:	50 e0       	ldi	r21, 0x00	; 0
    57f0:	81 e0       	ldi	r24, 0x01	; 1
    57f2:	90 e0       	ldi	r25, 0x00	; 0
    57f4:	02 c0       	rjmp	.+4      	; 0x57fa <PORTA_set_pin_level+0x32>
    57f6:	88 0f       	add	r24, r24
    57f8:	99 1f       	adc	r25, r25
    57fa:	4a 95       	dec	r20
    57fc:	e2 f7       	brpl	.-8      	; 0x57f6 <PORTA_set_pin_level+0x2e>
    57fe:	86 2b       	or	r24, r22
    5800:	f9 01       	movw	r30, r18
    5802:	81 83       	std	Z+1, r24	; 0x01
    5804:	15 c0       	rjmp	.+42     	; 0x5830 <PORTA_set_pin_level+0x68>
    5806:	20 e0       	ldi	r18, 0x00	; 0
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	fc 01       	movw	r30, r24
    5810:	81 81       	ldd	r24, Z+1	; 0x01
    5812:	68 2f       	mov	r22, r24
    5814:	89 81       	ldd	r24, Y+1	; 0x01
    5816:	48 2f       	mov	r20, r24
    5818:	50 e0       	ldi	r21, 0x00	; 0
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	02 c0       	rjmp	.+4      	; 0x5824 <PORTA_set_pin_level+0x5c>
    5820:	88 0f       	add	r24, r24
    5822:	99 1f       	adc	r25, r25
    5824:	4a 95       	dec	r20
    5826:	e2 f7       	brpl	.-8      	; 0x5820 <PORTA_set_pin_level+0x58>
    5828:	80 95       	com	r24
    582a:	86 23       	and	r24, r22
    582c:	f9 01       	movw	r30, r18
    582e:	81 83       	std	Z+1, r24	; 0x01
    5830:	00 00       	nop
    5832:	0f 90       	pop	r0
    5834:	0f 90       	pop	r0
    5836:	df 91       	pop	r29
    5838:	cf 91       	pop	r28
    583a:	08 95       	ret

0000583c <PORTF_set_pin_level>:
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29
    5840:	00 d0       	rcall	.+0      	; 0x5842 <PORTF_set_pin_level+0x6>
    5842:	cd b7       	in	r28, 0x3d	; 61
    5844:	de b7       	in	r29, 0x3e	; 62
    5846:	89 83       	std	Y+1, r24	; 0x01
    5848:	6a 83       	std	Y+2, r22	; 0x02
    584a:	8a 81       	ldd	r24, Y+2	; 0x02
    584c:	88 23       	and	r24, r24
    584e:	a9 f0       	breq	.+42     	; 0x587a <PORTF_set_pin_level+0x3e>
    5850:	84 e1       	ldi	r24, 0x14	; 20
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	24 e1       	ldi	r18, 0x14	; 20
    5856:	30 e0       	ldi	r19, 0x00	; 0
    5858:	f9 01       	movw	r30, r18
    585a:	21 81       	ldd	r18, Z+1	; 0x01
    585c:	62 2f       	mov	r22, r18
    585e:	29 81       	ldd	r18, Y+1	; 0x01
    5860:	42 2f       	mov	r20, r18
    5862:	50 e0       	ldi	r21, 0x00	; 0
    5864:	21 e0       	ldi	r18, 0x01	; 1
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	02 c0       	rjmp	.+4      	; 0x586e <PORTF_set_pin_level+0x32>
    586a:	22 0f       	add	r18, r18
    586c:	33 1f       	adc	r19, r19
    586e:	4a 95       	dec	r20
    5870:	e2 f7       	brpl	.-8      	; 0x586a <PORTF_set_pin_level+0x2e>
    5872:	26 2b       	or	r18, r22
    5874:	fc 01       	movw	r30, r24
    5876:	21 83       	std	Z+1, r18	; 0x01
    5878:	15 c0       	rjmp	.+42     	; 0x58a4 <PORTF_set_pin_level+0x68>
    587a:	84 e1       	ldi	r24, 0x14	; 20
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	24 e1       	ldi	r18, 0x14	; 20
    5880:	30 e0       	ldi	r19, 0x00	; 0
    5882:	f9 01       	movw	r30, r18
    5884:	21 81       	ldd	r18, Z+1	; 0x01
    5886:	62 2f       	mov	r22, r18
    5888:	29 81       	ldd	r18, Y+1	; 0x01
    588a:	42 2f       	mov	r20, r18
    588c:	50 e0       	ldi	r21, 0x00	; 0
    588e:	21 e0       	ldi	r18, 0x01	; 1
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	02 c0       	rjmp	.+4      	; 0x5898 <PORTF_set_pin_level+0x5c>
    5894:	22 0f       	add	r18, r18
    5896:	33 1f       	adc	r19, r19
    5898:	4a 95       	dec	r20
    589a:	e2 f7       	brpl	.-8      	; 0x5894 <PORTF_set_pin_level+0x58>
    589c:	20 95       	com	r18
    589e:	26 23       	and	r18, r22
    58a0:	fc 01       	movw	r30, r24
    58a2:	21 83       	std	Z+1, r18	; 0x01
    58a4:	00 00       	nop
    58a6:	0f 90       	pop	r0
    58a8:	0f 90       	pop	r0
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	08 95       	ret

000058b0 <PA0_set_dir>:
    58b0:	cf 93       	push	r28
    58b2:	df 93       	push	r29
    58b4:	1f 92       	push	r1
    58b6:	cd b7       	in	r28, 0x3d	; 61
    58b8:	de b7       	in	r29, 0x3e	; 62
    58ba:	89 83       	std	Y+1, r24	; 0x01
    58bc:	69 81       	ldd	r22, Y+1	; 0x01
    58be:	80 e0       	ldi	r24, 0x00	; 0
    58c0:	0e 94 90 2b 	call	0x5720	; 0x5720 <PORTA_set_pin_dir>
    58c4:	00 00       	nop
    58c6:	0f 90       	pop	r0
    58c8:	df 91       	pop	r29
    58ca:	cf 91       	pop	r28
    58cc:	08 95       	ret

000058ce <PA0_set_level>:
    58ce:	cf 93       	push	r28
    58d0:	df 93       	push	r29
    58d2:	1f 92       	push	r1
    58d4:	cd b7       	in	r28, 0x3d	; 61
    58d6:	de b7       	in	r29, 0x3e	; 62
    58d8:	89 83       	std	Y+1, r24	; 0x01
    58da:	69 81       	ldd	r22, Y+1	; 0x01
    58dc:	80 e0       	ldi	r24, 0x00	; 0
    58de:	0e 94 e4 2b 	call	0x57c8	; 0x57c8 <PORTA_set_pin_level>
    58e2:	00 00       	nop
    58e4:	0f 90       	pop	r0
    58e6:	df 91       	pop	r29
    58e8:	cf 91       	pop	r28
    58ea:	08 95       	ret

000058ec <LIN_EN_set_level>:
    58ec:	cf 93       	push	r28
    58ee:	df 93       	push	r29
    58f0:	1f 92       	push	r1
    58f2:	cd b7       	in	r28, 0x3d	; 61
    58f4:	de b7       	in	r29, 0x3e	; 62
    58f6:	89 83       	std	Y+1, r24	; 0x01
    58f8:	69 81       	ldd	r22, Y+1	; 0x01
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	0e 94 1e 2c 	call	0x583c	; 0x583c <PORTF_set_pin_level>
    5900:	00 00       	nop
    5902:	0f 90       	pop	r0
    5904:	df 91       	pop	r29
    5906:	cf 91       	pop	r28
    5908:	08 95       	ret

0000590a <window_task>:

void window_task(window_t *window_ptr)
{
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
    590e:	00 d0       	rcall	.+0      	; 0x5910 <window_task+0x6>
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	89 83       	std	Y+1, r24	; 0x01
    5916:	9a 83       	std	Y+2, r25	; 0x02
    switch (window_ptr->status)
    5918:	89 81       	ldd	r24, Y+1	; 0x01
    591a:	9a 81       	ldd	r25, Y+2	; 0x02
    591c:	fc 01       	movw	r30, r24
    591e:	80 81       	ld	r24, Z
    5920:	88 2f       	mov	r24, r24
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	81 30       	cpi	r24, 0x01	; 1
    5926:	91 05       	cpc	r25, r1
    5928:	09 f4       	brne	.+2      	; 0x592c <window_task+0x22>
    592a:	27 c1       	rjmp	.+590    	; 0x5b7a <window_task+0x270>
    592c:	82 30       	cpi	r24, 0x02	; 2
    592e:	91 05       	cpc	r25, r1
    5930:	09 f4       	brne	.+2      	; 0x5934 <window_task+0x2a>
    5932:	92 c1       	rjmp	.+804    	; 0x5c58 <window_task+0x34e>
    5934:	89 2b       	or	r24, r25
    5936:	09 f0       	breq	.+2      	; 0x593a <window_task+0x30>
            window_ptr->status = 0;
        }
    }
    break;
    default:
        break;
    5938:	c4 c1       	rjmp	.+904    	; 0x5cc2 <window_task+0x3b8>
{
    switch (window_ptr->status)
    {
    case 0:
    {
        window_ptr->signal = SIGNAL_VAL_NO_REQUEST;
    593a:	89 81       	ldd	r24, Y+1	; 0x01
    593c:	9a 81       	ldd	r25, Y+2	; 0x02
    593e:	fc 01       	movw	r30, r24
    5940:	11 86       	std	Z+9, r1	; 0x09
        if (window_ptr->btn_a_cap_trig_flg == 1)
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	9a 81       	ldd	r25, Y+2	; 0x02
    5946:	fc 01       	movw	r30, r24
    5948:	83 81       	ldd	r24, Z+3	; 0x03
    594a:	81 30       	cpi	r24, 0x01	; 1
    594c:	09 f0       	breq	.+2      	; 0x5950 <window_task+0x46>
    594e:	40 c0       	rjmp	.+128    	; 0x59d0 <window_task+0xc6>
        {
            window_ptr->btn_a_cap_trig_flg = 0;
    5950:	89 81       	ldd	r24, Y+1	; 0x01
    5952:	9a 81       	ldd	r25, Y+2	; 0x02
    5954:	fc 01       	movw	r30, r24
    5956:	13 82       	std	Z+3, r1	; 0x03

            if (window_ptr->long_flg == 1)
    5958:	89 81       	ldd	r24, Y+1	; 0x01
    595a:	9a 81       	ldd	r25, Y+2	; 0x02
    595c:	fc 01       	movw	r30, r24
    595e:	81 81       	ldd	r24, Z+1	; 0x01
    5960:	81 30       	cpi	r24, 0x01	; 1
    5962:	e9 f4       	brne	.+58     	; 0x599e <window_task+0x94>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    5964:	89 81       	ldd	r24, Y+1	; 0x01
    5966:	9a 81       	ldd	r25, Y+2	; 0x02
    5968:	21 e0       	ldi	r18, 0x01	; 1
    596a:	fc 01       	movw	r30, r24
    596c:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    596e:	89 81       	ldd	r24, Y+1	; 0x01
    5970:	9a 81       	ldd	r25, Y+2	; 0x02
    5972:	fc 01       	movw	r30, r24
    5974:	82 85       	ldd	r24, Z+10	; 0x0a
    5976:	93 85       	ldd	r25, Z+11	; 0x0b
    5978:	89 2b       	or	r24, r25
    597a:	59 f0       	breq	.+22     	; 0x5992 <window_task+0x88>
                {
                    window_ptr->cb(window_ptr->signal);
    597c:	89 81       	ldd	r24, Y+1	; 0x01
    597e:	9a 81       	ldd	r25, Y+2	; 0x02
    5980:	fc 01       	movw	r30, r24
    5982:	22 85       	ldd	r18, Z+10	; 0x0a
    5984:	33 85       	ldd	r19, Z+11	; 0x0b
    5986:	89 81       	ldd	r24, Y+1	; 0x01
    5988:	9a 81       	ldd	r25, Y+2	; 0x02
    598a:	fc 01       	movw	r30, r24
    598c:	81 85       	ldd	r24, Z+9	; 0x09
    598e:	f9 01       	movw	r30, r18
    5990:	09 95       	icall
                }
                window_ptr->status = 1;
    5992:	89 81       	ldd	r24, Y+1	; 0x01
    5994:	9a 81       	ldd	r25, Y+2	; 0x02
    5996:	21 e0       	ldi	r18, 0x01	; 1
    5998:	fc 01       	movw	r30, r24
    599a:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    599c:	8d c1       	rjmp	.+794    	; 0x5cb8 <window_task+0x3ae>
                }
                window_ptr->status = 1;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    599e:	89 81       	ldd	r24, Y+1	; 0x01
    59a0:	9a 81       	ldd	r25, Y+2	; 0x02
    59a2:	23 e0       	ldi	r18, 0x03	; 3
    59a4:	fc 01       	movw	r30, r24
    59a6:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    59a8:	89 81       	ldd	r24, Y+1	; 0x01
    59aa:	9a 81       	ldd	r25, Y+2	; 0x02
    59ac:	fc 01       	movw	r30, r24
    59ae:	82 85       	ldd	r24, Z+10	; 0x0a
    59b0:	93 85       	ldd	r25, Z+11	; 0x0b
    59b2:	89 2b       	or	r24, r25
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <window_task+0xae>
    59b6:	80 c1       	rjmp	.+768    	; 0x5cb8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    59b8:	89 81       	ldd	r24, Y+1	; 0x01
    59ba:	9a 81       	ldd	r25, Y+2	; 0x02
    59bc:	fc 01       	movw	r30, r24
    59be:	22 85       	ldd	r18, Z+10	; 0x0a
    59c0:	33 85       	ldd	r19, Z+11	; 0x0b
    59c2:	89 81       	ldd	r24, Y+1	; 0x01
    59c4:	9a 81       	ldd	r25, Y+2	; 0x02
    59c6:	fc 01       	movw	r30, r24
    59c8:	81 85       	ldd	r24, Z+9	; 0x09
    59ca:	f9 01       	movw	r30, r18
    59cc:	09 95       	icall
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    59ce:	74 c1       	rjmp	.+744    	; 0x5cb8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
        else if (window_ptr->btn_b_cap_trig_flg == 1)
    59d0:	89 81       	ldd	r24, Y+1	; 0x01
    59d2:	9a 81       	ldd	r25, Y+2	; 0x02
    59d4:	fc 01       	movw	r30, r24
    59d6:	82 81       	ldd	r24, Z+2	; 0x02
    59d8:	81 30       	cpi	r24, 0x01	; 1
    59da:	09 f0       	breq	.+2      	; 0x59de <window_task+0xd4>
    59dc:	40 c0       	rjmp	.+128    	; 0x5a5e <window_task+0x154>
        {
            window_ptr->btn_b_cap_trig_flg = 0;
    59de:	89 81       	ldd	r24, Y+1	; 0x01
    59e0:	9a 81       	ldd	r25, Y+2	; 0x02
    59e2:	fc 01       	movw	r30, r24
    59e4:	12 82       	std	Z+2, r1	; 0x02

            if (window_ptr->long_flg == 1)
    59e6:	89 81       	ldd	r24, Y+1	; 0x01
    59e8:	9a 81       	ldd	r25, Y+2	; 0x02
    59ea:	fc 01       	movw	r30, r24
    59ec:	81 81       	ldd	r24, Z+1	; 0x01
    59ee:	81 30       	cpi	r24, 0x01	; 1
    59f0:	e9 f4       	brne	.+58     	; 0x5a2c <window_task+0x122>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    59f2:	89 81       	ldd	r24, Y+1	; 0x01
    59f4:	9a 81       	ldd	r25, Y+2	; 0x02
    59f6:	22 e0       	ldi	r18, 0x02	; 2
    59f8:	fc 01       	movw	r30, r24
    59fa:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    59fc:	89 81       	ldd	r24, Y+1	; 0x01
    59fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5a00:	fc 01       	movw	r30, r24
    5a02:	82 85       	ldd	r24, Z+10	; 0x0a
    5a04:	93 85       	ldd	r25, Z+11	; 0x0b
    5a06:	89 2b       	or	r24, r25
    5a08:	59 f0       	breq	.+22     	; 0x5a20 <window_task+0x116>
                {
                    window_ptr->cb(window_ptr->signal);
    5a0a:	89 81       	ldd	r24, Y+1	; 0x01
    5a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a0e:	fc 01       	movw	r30, r24
    5a10:	22 85       	ldd	r18, Z+10	; 0x0a
    5a12:	33 85       	ldd	r19, Z+11	; 0x0b
    5a14:	89 81       	ldd	r24, Y+1	; 0x01
    5a16:	9a 81       	ldd	r25, Y+2	; 0x02
    5a18:	fc 01       	movw	r30, r24
    5a1a:	81 85       	ldd	r24, Z+9	; 0x09
    5a1c:	f9 01       	movw	r30, r18
    5a1e:	09 95       	icall
                }
                window_ptr->status = 1;
    5a20:	89 81       	ldd	r24, Y+1	; 0x01
    5a22:	9a 81       	ldd	r25, Y+2	; 0x02
    5a24:	21 e0       	ldi	r18, 0x01	; 1
    5a26:	fc 01       	movw	r30, r24
    5a28:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5a2a:	46 c1       	rjmp	.+652    	; 0x5cb8 <window_task+0x3ae>
                }
                window_ptr->status = 1;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    5a2c:	89 81       	ldd	r24, Y+1	; 0x01
    5a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a30:	24 e0       	ldi	r18, 0x04	; 4
    5a32:	fc 01       	movw	r30, r24
    5a34:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5a36:	89 81       	ldd	r24, Y+1	; 0x01
    5a38:	9a 81       	ldd	r25, Y+2	; 0x02
    5a3a:	fc 01       	movw	r30, r24
    5a3c:	82 85       	ldd	r24, Z+10	; 0x0a
    5a3e:	93 85       	ldd	r25, Z+11	; 0x0b
    5a40:	89 2b       	or	r24, r25
    5a42:	09 f4       	brne	.+2      	; 0x5a46 <window_task+0x13c>
    5a44:	39 c1       	rjmp	.+626    	; 0x5cb8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    5a46:	89 81       	ldd	r24, Y+1	; 0x01
    5a48:	9a 81       	ldd	r25, Y+2	; 0x02
    5a4a:	fc 01       	movw	r30, r24
    5a4c:	22 85       	ldd	r18, Z+10	; 0x0a
    5a4e:	33 85       	ldd	r19, Z+11	; 0x0b
    5a50:	89 81       	ldd	r24, Y+1	; 0x01
    5a52:	9a 81       	ldd	r25, Y+2	; 0x02
    5a54:	fc 01       	movw	r30, r24
    5a56:	81 85       	ldd	r24, Z+9	; 0x09
    5a58:	f9 01       	movw	r30, r18
    5a5a:	09 95       	icall
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5a5c:	2d c1       	rjmp	.+602    	; 0x5cb8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
        else if (window_ptr->slide_1_to_2_flg == 1)
    5a5e:	89 81       	ldd	r24, Y+1	; 0x01
    5a60:	9a 81       	ldd	r25, Y+2	; 0x02
    5a62:	fc 01       	movw	r30, r24
    5a64:	84 81       	ldd	r24, Z+4	; 0x04
    5a66:	81 30       	cpi	r24, 0x01	; 1
    5a68:	09 f0       	breq	.+2      	; 0x5a6c <window_task+0x162>
    5a6a:	40 c0       	rjmp	.+128    	; 0x5aec <window_task+0x1e2>
        {
            window_ptr->slide_1_to_2_flg = 0;
    5a6c:	89 81       	ldd	r24, Y+1	; 0x01
    5a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a70:	fc 01       	movw	r30, r24
    5a72:	14 82       	std	Z+4, r1	; 0x04
            if (window_ptr->long_flg == 1)
    5a74:	89 81       	ldd	r24, Y+1	; 0x01
    5a76:	9a 81       	ldd	r25, Y+2	; 0x02
    5a78:	fc 01       	movw	r30, r24
    5a7a:	81 81       	ldd	r24, Z+1	; 0x01
    5a7c:	81 30       	cpi	r24, 0x01	; 1
    5a7e:	e9 f4       	brne	.+58     	; 0x5aba <window_task+0x1b0>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    5a80:	89 81       	ldd	r24, Y+1	; 0x01
    5a82:	9a 81       	ldd	r25, Y+2	; 0x02
    5a84:	21 e0       	ldi	r18, 0x01	; 1
    5a86:	fc 01       	movw	r30, r24
    5a88:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5a8a:	89 81       	ldd	r24, Y+1	; 0x01
    5a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a8e:	fc 01       	movw	r30, r24
    5a90:	82 85       	ldd	r24, Z+10	; 0x0a
    5a92:	93 85       	ldd	r25, Z+11	; 0x0b
    5a94:	89 2b       	or	r24, r25
    5a96:	59 f0       	breq	.+22     	; 0x5aae <window_task+0x1a4>
                {
                    window_ptr->cb(window_ptr->signal);
    5a98:	89 81       	ldd	r24, Y+1	; 0x01
    5a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	22 85       	ldd	r18, Z+10	; 0x0a
    5aa0:	33 85       	ldd	r19, Z+11	; 0x0b
    5aa2:	89 81       	ldd	r24, Y+1	; 0x01
    5aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    5aa6:	fc 01       	movw	r30, r24
    5aa8:	81 85       	ldd	r24, Z+9	; 0x09
    5aaa:	f9 01       	movw	r30, r18
    5aac:	09 95       	icall
                }
                window_ptr->status = 2;
    5aae:	89 81       	ldd	r24, Y+1	; 0x01
    5ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ab2:	22 e0       	ldi	r18, 0x02	; 2
    5ab4:	fc 01       	movw	r30, r24
    5ab6:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5ab8:	ff c0       	rjmp	.+510    	; 0x5cb8 <window_task+0x3ae>
                }
                window_ptr->status = 2;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	9a 81       	ldd	r25, Y+2	; 0x02
    5abe:	23 e0       	ldi	r18, 0x03	; 3
    5ac0:	fc 01       	movw	r30, r24
    5ac2:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5ac4:	89 81       	ldd	r24, Y+1	; 0x01
    5ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac8:	fc 01       	movw	r30, r24
    5aca:	82 85       	ldd	r24, Z+10	; 0x0a
    5acc:	93 85       	ldd	r25, Z+11	; 0x0b
    5ace:	89 2b       	or	r24, r25
    5ad0:	09 f4       	brne	.+2      	; 0x5ad4 <window_task+0x1ca>
    5ad2:	f2 c0       	rjmp	.+484    	; 0x5cb8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    5ad4:	89 81       	ldd	r24, Y+1	; 0x01
    5ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ad8:	fc 01       	movw	r30, r24
    5ada:	22 85       	ldd	r18, Z+10	; 0x0a
    5adc:	33 85       	ldd	r19, Z+11	; 0x0b
    5ade:	89 81       	ldd	r24, Y+1	; 0x01
    5ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	81 85       	ldd	r24, Z+9	; 0x09
    5ae6:	f9 01       	movw	r30, r18
    5ae8:	09 95       	icall
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5aea:	e6 c0       	rjmp	.+460    	; 0x5cb8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
        else if (window_ptr->slide_2_to_1_flg == 1)
    5aec:	89 81       	ldd	r24, Y+1	; 0x01
    5aee:	9a 81       	ldd	r25, Y+2	; 0x02
    5af0:	fc 01       	movw	r30, r24
    5af2:	85 81       	ldd	r24, Z+5	; 0x05
    5af4:	81 30       	cpi	r24, 0x01	; 1
    5af6:	09 f0       	breq	.+2      	; 0x5afa <window_task+0x1f0>
    5af8:	df c0       	rjmp	.+446    	; 0x5cb8 <window_task+0x3ae>
        {
            window_ptr->slide_2_to_1_flg = 0;
    5afa:	89 81       	ldd	r24, Y+1	; 0x01
    5afc:	9a 81       	ldd	r25, Y+2	; 0x02
    5afe:	fc 01       	movw	r30, r24
    5b00:	15 82       	std	Z+5, r1	; 0x05
            if (window_ptr->long_flg == 1)
    5b02:	89 81       	ldd	r24, Y+1	; 0x01
    5b04:	9a 81       	ldd	r25, Y+2	; 0x02
    5b06:	fc 01       	movw	r30, r24
    5b08:	81 81       	ldd	r24, Z+1	; 0x01
    5b0a:	81 30       	cpi	r24, 0x01	; 1
    5b0c:	e9 f4       	brne	.+58     	; 0x5b48 <window_task+0x23e>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    5b0e:	89 81       	ldd	r24, Y+1	; 0x01
    5b10:	9a 81       	ldd	r25, Y+2	; 0x02
    5b12:	22 e0       	ldi	r18, 0x02	; 2
    5b14:	fc 01       	movw	r30, r24
    5b16:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5b18:	89 81       	ldd	r24, Y+1	; 0x01
    5b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	82 85       	ldd	r24, Z+10	; 0x0a
    5b20:	93 85       	ldd	r25, Z+11	; 0x0b
    5b22:	89 2b       	or	r24, r25
    5b24:	59 f0       	breq	.+22     	; 0x5b3c <window_task+0x232>
                {
                    window_ptr->cb(window_ptr->signal);
    5b26:	89 81       	ldd	r24, Y+1	; 0x01
    5b28:	9a 81       	ldd	r25, Y+2	; 0x02
    5b2a:	fc 01       	movw	r30, r24
    5b2c:	22 85       	ldd	r18, Z+10	; 0x0a
    5b2e:	33 85       	ldd	r19, Z+11	; 0x0b
    5b30:	89 81       	ldd	r24, Y+1	; 0x01
    5b32:	9a 81       	ldd	r25, Y+2	; 0x02
    5b34:	fc 01       	movw	r30, r24
    5b36:	81 85       	ldd	r24, Z+9	; 0x09
    5b38:	f9 01       	movw	r30, r18
    5b3a:	09 95       	icall
                }
                window_ptr->status = 2;
    5b3c:	89 81       	ldd	r24, Y+1	; 0x01
    5b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b40:	22 e0       	ldi	r18, 0x02	; 2
    5b42:	fc 01       	movw	r30, r24
    5b44:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5b46:	b8 c0       	rjmp	.+368    	; 0x5cb8 <window_task+0x3ae>
                }
                window_ptr->status = 2;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    5b48:	89 81       	ldd	r24, Y+1	; 0x01
    5b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b4c:	24 e0       	ldi	r18, 0x04	; 4
    5b4e:	fc 01       	movw	r30, r24
    5b50:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5b52:	89 81       	ldd	r24, Y+1	; 0x01
    5b54:	9a 81       	ldd	r25, Y+2	; 0x02
    5b56:	fc 01       	movw	r30, r24
    5b58:	82 85       	ldd	r24, Z+10	; 0x0a
    5b5a:	93 85       	ldd	r25, Z+11	; 0x0b
    5b5c:	89 2b       	or	r24, r25
    5b5e:	09 f4       	brne	.+2      	; 0x5b62 <window_task+0x258>
    5b60:	ab c0       	rjmp	.+342    	; 0x5cb8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    5b62:	89 81       	ldd	r24, Y+1	; 0x01
    5b64:	9a 81       	ldd	r25, Y+2	; 0x02
    5b66:	fc 01       	movw	r30, r24
    5b68:	22 85       	ldd	r18, Z+10	; 0x0a
    5b6a:	33 85       	ldd	r19, Z+11	; 0x0b
    5b6c:	89 81       	ldd	r24, Y+1	; 0x01
    5b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b70:	fc 01       	movw	r30, r24
    5b72:	81 85       	ldd	r24, Z+9	; 0x09
    5b74:	f9 01       	movw	r30, r18
    5b76:	09 95       	icall
                }
            }
        }
    }
    break;
    5b78:	9f c0       	rjmp	.+318    	; 0x5cb8 <window_task+0x3ae>
    case 1:
    {
        if (window_ptr->signal == SIGNAL_VAL_MANUAL_DOWN)
    5b7a:	89 81       	ldd	r24, Y+1	; 0x01
    5b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b7e:	fc 01       	movw	r30, r24
    5b80:	81 85       	ldd	r24, Z+9	; 0x09
    5b82:	82 30       	cpi	r24, 0x02	; 2
    5b84:	89 f5       	brne	.+98     	; 0x5be8 <window_task+0x2de>
        {
            if (window_ptr->btn_b_status != 0)
    5b86:	89 81       	ldd	r24, Y+1	; 0x01
    5b88:	9a 81       	ldd	r25, Y+2	; 0x02
    5b8a:	fc 01       	movw	r30, r24
    5b8c:	87 81       	ldd	r24, Z+7	; 0x07
    5b8e:	88 23       	and	r24, r24
    5b90:	a1 f0       	breq	.+40     	; 0x5bba <window_task+0x2b0>
            {
                if (window_ptr->cb != NULL)
    5b92:	89 81       	ldd	r24, Y+1	; 0x01
    5b94:	9a 81       	ldd	r25, Y+2	; 0x02
    5b96:	fc 01       	movw	r30, r24
    5b98:	82 85       	ldd	r24, Z+10	; 0x0a
    5b9a:	93 85       	ldd	r25, Z+11	; 0x0b
    5b9c:	89 2b       	or	r24, r25
    5b9e:	09 f4       	brne	.+2      	; 0x5ba2 <window_task+0x298>
    5ba0:	8d c0       	rjmp	.+282    	; 0x5cbc <window_task+0x3b2>
                {
                    window_ptr->cb(window_ptr->signal);
    5ba2:	89 81       	ldd	r24, Y+1	; 0x01
    5ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	22 85       	ldd	r18, Z+10	; 0x0a
    5baa:	33 85       	ldd	r19, Z+11	; 0x0b
    5bac:	89 81       	ldd	r24, Y+1	; 0x01
    5bae:	9a 81       	ldd	r25, Y+2	; 0x02
    5bb0:	fc 01       	movw	r30, r24
    5bb2:	81 85       	ldd	r24, Z+9	; 0x09
    5bb4:	f9 01       	movw	r30, r18
    5bb6:	09 95       	icall
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5bb8:	81 c0       	rjmp	.+258    	; 0x5cbc <window_task+0x3b2>
                    window_ptr->cb(window_ptr->signal);
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    5bba:	89 81       	ldd	r24, Y+1	; 0x01
    5bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	82 85       	ldd	r24, Z+10	; 0x0a
    5bc2:	93 85       	ldd	r25, Z+11	; 0x0b
    5bc4:	89 2b       	or	r24, r25
    5bc6:	59 f0       	breq	.+22     	; 0x5bde <window_task+0x2d4>
                {
                    window_ptr->cb(window_ptr->signal);
    5bc8:	89 81       	ldd	r24, Y+1	; 0x01
    5bca:	9a 81       	ldd	r25, Y+2	; 0x02
    5bcc:	fc 01       	movw	r30, r24
    5bce:	22 85       	ldd	r18, Z+10	; 0x0a
    5bd0:	33 85       	ldd	r19, Z+11	; 0x0b
    5bd2:	89 81       	ldd	r24, Y+1	; 0x01
    5bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    5bd6:	fc 01       	movw	r30, r24
    5bd8:	81 85       	ldd	r24, Z+9	; 0x09
    5bda:	f9 01       	movw	r30, r18
    5bdc:	09 95       	icall
                }
                window_ptr->status = 0;
    5bde:	89 81       	ldd	r24, Y+1	; 0x01
    5be0:	9a 81       	ldd	r25, Y+2	; 0x02
    5be2:	fc 01       	movw	r30, r24
    5be4:	10 82       	st	Z, r1
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5be6:	6a c0       	rjmp	.+212    	; 0x5cbc <window_task+0x3b2>
                    window_ptr->cb(window_ptr->signal);
                }
                window_ptr->status = 0;
            }
        }
        else if (window_ptr->signal == SIGNAL_VAL_MANUAL_UP)
    5be8:	89 81       	ldd	r24, Y+1	; 0x01
    5bea:	9a 81       	ldd	r25, Y+2	; 0x02
    5bec:	fc 01       	movw	r30, r24
    5bee:	81 85       	ldd	r24, Z+9	; 0x09
    5bf0:	81 30       	cpi	r24, 0x01	; 1
    5bf2:	09 f0       	breq	.+2      	; 0x5bf6 <window_task+0x2ec>
    5bf4:	63 c0       	rjmp	.+198    	; 0x5cbc <window_task+0x3b2>
        {
            if (window_ptr->btn_a_status != 0)
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    5bfa:	fc 01       	movw	r30, r24
    5bfc:	86 81       	ldd	r24, Z+6	; 0x06
    5bfe:	88 23       	and	r24, r24
    5c00:	a1 f0       	breq	.+40     	; 0x5c2a <window_task+0x320>
            {
                if (window_ptr->cb != NULL)
    5c02:	89 81       	ldd	r24, Y+1	; 0x01
    5c04:	9a 81       	ldd	r25, Y+2	; 0x02
    5c06:	fc 01       	movw	r30, r24
    5c08:	82 85       	ldd	r24, Z+10	; 0x0a
    5c0a:	93 85       	ldd	r25, Z+11	; 0x0b
    5c0c:	89 2b       	or	r24, r25
    5c0e:	09 f4       	brne	.+2      	; 0x5c12 <window_task+0x308>
    5c10:	55 c0       	rjmp	.+170    	; 0x5cbc <window_task+0x3b2>
                {
                    window_ptr->cb(window_ptr->signal);
    5c12:	89 81       	ldd	r24, Y+1	; 0x01
    5c14:	9a 81       	ldd	r25, Y+2	; 0x02
    5c16:	fc 01       	movw	r30, r24
    5c18:	22 85       	ldd	r18, Z+10	; 0x0a
    5c1a:	33 85       	ldd	r19, Z+11	; 0x0b
    5c1c:	89 81       	ldd	r24, Y+1	; 0x01
    5c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c20:	fc 01       	movw	r30, r24
    5c22:	81 85       	ldd	r24, Z+9	; 0x09
    5c24:	f9 01       	movw	r30, r18
    5c26:	09 95       	icall
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5c28:	49 c0       	rjmp	.+146    	; 0x5cbc <window_task+0x3b2>
                    window_ptr->cb(window_ptr->signal);
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    5c2a:	89 81       	ldd	r24, Y+1	; 0x01
    5c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c2e:	fc 01       	movw	r30, r24
    5c30:	82 85       	ldd	r24, Z+10	; 0x0a
    5c32:	93 85       	ldd	r25, Z+11	; 0x0b
    5c34:	89 2b       	or	r24, r25
    5c36:	59 f0       	breq	.+22     	; 0x5c4e <window_task+0x344>
                {
                    window_ptr->cb(window_ptr->signal);
    5c38:	89 81       	ldd	r24, Y+1	; 0x01
    5c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	22 85       	ldd	r18, Z+10	; 0x0a
    5c40:	33 85       	ldd	r19, Z+11	; 0x0b
    5c42:	89 81       	ldd	r24, Y+1	; 0x01
    5c44:	9a 81       	ldd	r25, Y+2	; 0x02
    5c46:	fc 01       	movw	r30, r24
    5c48:	81 85       	ldd	r24, Z+9	; 0x09
    5c4a:	f9 01       	movw	r30, r18
    5c4c:	09 95       	icall
                }
                window_ptr->status = 0;
    5c4e:	89 81       	ldd	r24, Y+1	; 0x01
    5c50:	9a 81       	ldd	r25, Y+2	; 0x02
    5c52:	fc 01       	movw	r30, r24
    5c54:	10 82       	st	Z, r1
            }
        }
    }
    break;
    5c56:	32 c0       	rjmp	.+100    	; 0x5cbc <window_task+0x3b2>
    case 2:
    {
        if (window_ptr->slide_status != 0)
    5c58:	89 81       	ldd	r24, Y+1	; 0x01
    5c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	80 85       	ldd	r24, Z+8	; 0x08
    5c60:	88 23       	and	r24, r24
    5c62:	99 f0       	breq	.+38     	; 0x5c8a <window_task+0x380>
        {
            if (window_ptr->cb != NULL)
    5c64:	89 81       	ldd	r24, Y+1	; 0x01
    5c66:	9a 81       	ldd	r25, Y+2	; 0x02
    5c68:	fc 01       	movw	r30, r24
    5c6a:	82 85       	ldd	r24, Z+10	; 0x0a
    5c6c:	93 85       	ldd	r25, Z+11	; 0x0b
    5c6e:	89 2b       	or	r24, r25
    5c70:	39 f1       	breq	.+78     	; 0x5cc0 <window_task+0x3b6>
            {
                window_ptr->cb(window_ptr->signal);
    5c72:	89 81       	ldd	r24, Y+1	; 0x01
    5c74:	9a 81       	ldd	r25, Y+2	; 0x02
    5c76:	fc 01       	movw	r30, r24
    5c78:	22 85       	ldd	r18, Z+10	; 0x0a
    5c7a:	33 85       	ldd	r19, Z+11	; 0x0b
    5c7c:	89 81       	ldd	r24, Y+1	; 0x01
    5c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c80:	fc 01       	movw	r30, r24
    5c82:	81 85       	ldd	r24, Z+9	; 0x09
    5c84:	f9 01       	movw	r30, r18
    5c86:	09 95       	icall
                window_ptr->cb(window_ptr->signal);
            }
            window_ptr->status = 0;
        }
    }
    break;
    5c88:	1b c0       	rjmp	.+54     	; 0x5cc0 <window_task+0x3b6>
                window_ptr->cb(window_ptr->signal);
            }
        }
        else
        {
            if (window_ptr->cb != NULL)
    5c8a:	89 81       	ldd	r24, Y+1	; 0x01
    5c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c8e:	fc 01       	movw	r30, r24
    5c90:	82 85       	ldd	r24, Z+10	; 0x0a
    5c92:	93 85       	ldd	r25, Z+11	; 0x0b
    5c94:	89 2b       	or	r24, r25
    5c96:	59 f0       	breq	.+22     	; 0x5cae <window_task+0x3a4>
            {
                window_ptr->cb(window_ptr->signal);
    5c98:	89 81       	ldd	r24, Y+1	; 0x01
    5c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9c:	fc 01       	movw	r30, r24
    5c9e:	22 85       	ldd	r18, Z+10	; 0x0a
    5ca0:	33 85       	ldd	r19, Z+11	; 0x0b
    5ca2:	89 81       	ldd	r24, Y+1	; 0x01
    5ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca6:	fc 01       	movw	r30, r24
    5ca8:	81 85       	ldd	r24, Z+9	; 0x09
    5caa:	f9 01       	movw	r30, r18
    5cac:	09 95       	icall
            }
            window_ptr->status = 0;
    5cae:	89 81       	ldd	r24, Y+1	; 0x01
    5cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	10 82       	st	Z, r1
        }
    }
    break;
    5cb6:	04 c0       	rjmp	.+8      	; 0x5cc0 <window_task+0x3b6>
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5cb8:	00 00       	nop
    5cba:	03 c0       	rjmp	.+6      	; 0x5cc2 <window_task+0x3b8>
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5cbc:	00 00       	nop
    5cbe:	01 c0       	rjmp	.+2      	; 0x5cc2 <window_task+0x3b8>
                window_ptr->cb(window_ptr->signal);
            }
            window_ptr->status = 0;
        }
    }
    break;
    5cc0:	00 00       	nop
    default:
        break;
    }
}
    5cc2:	00 00       	nop
    5cc4:	0f 90       	pop	r0
    5cc6:	0f 90       	pop	r0
    5cc8:	df 91       	pop	r29
    5cca:	cf 91       	pop	r28
    5ccc:	08 95       	ret

00005cce <window_lock_task>:

/* V01-3.1.5.6 */
void window_lock_task(void)
{
    5cce:	cf 93       	push	r28
    5cd0:	df 93       	push	r29
    5cd2:	00 d0       	rcall	.+0      	; 0x5cd4 <window_lock_task+0x6>
    5cd4:	00 d0       	rcall	.+0      	; 0x5cd6 <window_lock_task+0x8>
    5cd6:	cd b7       	in	r28, 0x3d	; 61
    5cd8:	de b7       	in	r29, 0x3e	; 62
    window_lock_t *window_lock_ptr = &g_window_lock;
    5cda:	80 e7       	ldi	r24, 0x70	; 112
    5cdc:	90 e4       	ldi	r25, 0x40	; 64
    5cde:	89 83       	std	Y+1, r24	; 0x01
    5ce0:	9a 83       	std	Y+2, r25	; 0x02
    LIN_RX_signal_t *signal_ptr = &g_lin_rx_signal;
    5ce2:	86 e7       	ldi	r24, 0x76	; 118
    5ce4:	90 e4       	ldi	r25, 0x40	; 64
    5ce6:	8b 83       	std	Y+3, r24	; 0x03
    5ce8:	9c 83       	std	Y+4, r25	; 0x04

    if (window_lock_ptr->capsense_flg == 1)
    5cea:	89 81       	ldd	r24, Y+1	; 0x01
    5cec:	9a 81       	ldd	r25, Y+2	; 0x02
    5cee:	fc 01       	movw	r30, r24
    5cf0:	80 81       	ld	r24, Z
    5cf2:	81 30       	cpi	r24, 0x01	; 1
    5cf4:	e1 f4       	brne	.+56     	; 0x5d2e <window_lock_task+0x60>
    {
        window_lock_ptr->capsense_flg = 0;
    5cf6:	89 81       	ldd	r24, Y+1	; 0x01
    5cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cfa:	fc 01       	movw	r30, r24
    5cfc:	10 82       	st	Z, r1

        if (window_lock_ptr->press_flg == 1)
    5cfe:	89 81       	ldd	r24, Y+1	; 0x01
    5d00:	9a 81       	ldd	r25, Y+2	; 0x02
    5d02:	fc 01       	movw	r30, r24
    5d04:	81 81       	ldd	r24, Z+1	; 0x01
    5d06:	81 30       	cpi	r24, 0x01	; 1
    5d08:	91 f4       	brne	.+36     	; 0x5d2e <window_lock_task+0x60>
        {
            window_lock_ptr->press_flg = 0;
    5d0a:	89 81       	ldd	r24, Y+1	; 0x01
    5d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d0e:	fc 01       	movw	r30, r24
    5d10:	11 82       	std	Z+1, r1	; 0x01

            if (window_lock_ptr->signal_cb != NULL)
    5d12:	89 81       	ldd	r24, Y+1	; 0x01
    5d14:	9a 81       	ldd	r25, Y+2	; 0x02
    5d16:	fc 01       	movw	r30, r24
    5d18:	84 81       	ldd	r24, Z+4	; 0x04
    5d1a:	95 81       	ldd	r25, Z+5	; 0x05
    5d1c:	89 2b       	or	r24, r25
    5d1e:	39 f0       	breq	.+14     	; 0x5d2e <window_lock_task+0x60>
            {
                window_lock_ptr->signal_cb();
    5d20:	89 81       	ldd	r24, Y+1	; 0x01
    5d22:	9a 81       	ldd	r25, Y+2	; 0x02
    5d24:	fc 01       	movw	r30, r24
    5d26:	84 81       	ldd	r24, Z+4	; 0x04
    5d28:	95 81       	ldd	r25, Z+5	; 0x05
    5d2a:	fc 01       	movw	r30, r24
    5d2c:	09 95       	icall
            }
        }
    }

    if (window_lock_ptr->led_cb != NULL)
    5d2e:	89 81       	ldd	r24, Y+1	; 0x01
    5d30:	9a 81       	ldd	r25, Y+2	; 0x02
    5d32:	fc 01       	movw	r30, r24
    5d34:	82 81       	ldd	r24, Z+2	; 0x02
    5d36:	93 81       	ldd	r25, Z+3	; 0x03
    5d38:	89 2b       	or	r24, r25
    5d3a:	69 f0       	breq	.+26     	; 0x5d56 <window_lock_task+0x88>
    {
        window_lock_ptr->led_cb(signal_ptr->ctrl_window_lock);
    5d3c:	89 81       	ldd	r24, Y+1	; 0x01
    5d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d40:	fc 01       	movw	r30, r24
    5d42:	22 81       	ldd	r18, Z+2	; 0x02
    5d44:	33 81       	ldd	r19, Z+3	; 0x03
    5d46:	8b 81       	ldd	r24, Y+3	; 0x03
    5d48:	9c 81       	ldd	r25, Y+4	; 0x04
    5d4a:	fc 01       	movw	r30, r24
    5d4c:	80 81       	ld	r24, Z
    5d4e:	82 95       	swap	r24
    5d50:	81 70       	andi	r24, 0x01	; 1
    5d52:	f9 01       	movw	r30, r18
    5d54:	09 95       	icall
    }
}
    5d56:	00 00       	nop
    5d58:	24 96       	adiw	r28, 0x04	; 4
    5d5a:	cd bf       	out	0x3d, r28	; 61
    5d5c:	de bf       	out	0x3e, r29	; 62
    5d5e:	df 91       	pop	r29
    5d60:	cf 91       	pop	r28
    5d62:	08 95       	ret

00005d64 <backlight_task>:
 * 输入:LIN信号更新到变量
 * 输出:背光亮度控制回调函数
 * 
 */
void backlight_task(void)
{
    5d64:	cf 93       	push	r28
    5d66:	df 93       	push	r29
    5d68:	cd b7       	in	r28, 0x3d	; 61
    5d6a:	de b7       	in	r29, 0x3e	; 62
    5d6c:	2e 97       	sbiw	r28, 0x0e	; 14
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	de bf       	out	0x3e, r29	; 62
    LIN_RX_signal_t *signal_ptr = &g_lin_rx_signal;
    5d72:	86 e7       	ldi	r24, 0x76	; 118
    5d74:	90 e4       	ldi	r25, 0x40	; 64
    5d76:	89 87       	std	Y+9, r24	; 0x09
    5d78:	9a 87       	std	Y+10, r25	; 0x0a

    uint32_t tmp = 0;
    5d7a:	1b 86       	std	Y+11, r1	; 0x0b
    5d7c:	1c 86       	std	Y+12, r1	; 0x0c
    5d7e:	1d 86       	std	Y+13, r1	; 0x0d
    5d80:	1e 86       	std	Y+14, r1	; 0x0e
    uint32_t night_gain = 0;
    5d82:	19 82       	std	Y+1, r1	; 0x01
    5d84:	1a 82       	std	Y+2, r1	; 0x02
    5d86:	1b 82       	std	Y+3, r1	; 0x03
    5d88:	1c 82       	std	Y+4, r1	; 0x04
    uint32_t pwm_index = 0;
    5d8a:	1d 82       	std	Y+5, r1	; 0x05
    5d8c:	1e 82       	std	Y+6, r1	; 0x06
    5d8e:	1f 82       	std	Y+7, r1	; 0x07
    5d90:	18 86       	std	Y+8, r1	; 0x08

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
    5d92:	89 85       	ldd	r24, Y+9	; 0x09
    5d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d96:	fc 01       	movw	r30, r24
    5d98:	80 81       	ld	r24, Z
    5d9a:	80 72       	andi	r24, 0x20	; 32
    5d9c:	88 23       	and	r24, r24
    5d9e:	b1 f0       	breq	.+44     	; 0x5dcc <backlight_task+0x68>
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
    5da0:	82 e3       	ldi	r24, 0x32	; 50
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	a0 e0       	ldi	r26, 0x00	; 0
    5da6:	b0 e0       	ldi	r27, 0x00	; 0
    5da8:	89 83       	std	Y+1, r24	; 0x01
    5daa:	9a 83       	std	Y+2, r25	; 0x02
    5dac:	ab 83       	std	Y+3, r26	; 0x03
    5dae:	bc 83       	std	Y+4, r27	; 0x04
        pwm_index = signal_ptr->backlight_brightness;
    5db0:	89 85       	ldd	r24, Y+9	; 0x09
    5db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5db4:	fc 01       	movw	r30, r24
    5db6:	80 81       	ld	r24, Z
    5db8:	8f 70       	andi	r24, 0x0F	; 15
    5dba:	88 2f       	mov	r24, r24
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	a0 e0       	ldi	r26, 0x00	; 0
    5dc0:	b0 e0       	ldi	r27, 0x00	; 0
    5dc2:	8d 83       	std	Y+5, r24	; 0x05
    5dc4:	9e 83       	std	Y+6, r25	; 0x06
    5dc6:	af 83       	std	Y+7, r26	; 0x07
    5dc8:	b8 87       	std	Y+8, r27	; 0x08
    5dca:	10 c0       	rjmp	.+32     	; 0x5dec <backlight_task+0x88>
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
    5dcc:	84 e6       	ldi	r24, 0x64	; 100
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	a0 e0       	ldi	r26, 0x00	; 0
    5dd2:	b0 e0       	ldi	r27, 0x00	; 0
    5dd4:	89 83       	std	Y+1, r24	; 0x01
    5dd6:	9a 83       	std	Y+2, r25	; 0x02
    5dd8:	ab 83       	std	Y+3, r26	; 0x03
    5dda:	bc 83       	std	Y+4, r27	; 0x04
        pwm_index = 9;
    5ddc:	89 e0       	ldi	r24, 0x09	; 9
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	a0 e0       	ldi	r26, 0x00	; 0
    5de2:	b0 e0       	ldi	r27, 0x00	; 0
    5de4:	8d 83       	std	Y+5, r24	; 0x05
    5de6:	9e 83       	std	Y+6, r25	; 0x06
    5de8:	af 83       	std	Y+7, r26	; 0x07
    5dea:	b8 87       	std	Y+8, r27	; 0x08
    }

    tmp = g_level[pwm_index] * night_gain * DUTY_MAX / 10000;
    5dec:	8d 81       	ldd	r24, Y+5	; 0x05
    5dee:	9e 81       	ldd	r25, Y+6	; 0x06
    5df0:	88 0f       	add	r24, r24
    5df2:	99 1f       	adc	r25, r25
    5df4:	88 0f       	add	r24, r24
    5df6:	99 1f       	adc	r25, r25
    5df8:	8a 50       	subi	r24, 0x0A	; 10
    5dfa:	9e 4b       	sbci	r25, 0xBE	; 190
    5dfc:	fc 01       	movw	r30, r24
    5dfe:	20 81       	ld	r18, Z
    5e00:	31 81       	ldd	r19, Z+1	; 0x01
    5e02:	42 81       	ldd	r20, Z+2	; 0x02
    5e04:	53 81       	ldd	r21, Z+3	; 0x03
    5e06:	89 81       	ldd	r24, Y+1	; 0x01
    5e08:	9a 81       	ldd	r25, Y+2	; 0x02
    5e0a:	ab 81       	ldd	r26, Y+3	; 0x03
    5e0c:	bc 81       	ldd	r27, Y+4	; 0x04
    5e0e:	bc 01       	movw	r22, r24
    5e10:	cd 01       	movw	r24, r26
    5e12:	0e 94 dd 7c 	call	0xf9ba	; 0xf9ba <__mulsi3>
    5e16:	9b 01       	movw	r18, r22
    5e18:	ac 01       	movw	r20, r24
    5e1a:	8f ea       	ldi	r24, 0xAF	; 175
    5e1c:	94 e0       	ldi	r25, 0x04	; 4
    5e1e:	dc 01       	movw	r26, r24
    5e20:	0e 94 27 7d 	call	0xfa4e	; 0xfa4e <__muluhisi3>
    5e24:	dc 01       	movw	r26, r24
    5e26:	cb 01       	movw	r24, r22
    5e28:	20 e1       	ldi	r18, 0x10	; 16
    5e2a:	37 e2       	ldi	r19, 0x27	; 39
    5e2c:	40 e0       	ldi	r20, 0x00	; 0
    5e2e:	50 e0       	ldi	r21, 0x00	; 0
    5e30:	bc 01       	movw	r22, r24
    5e32:	cd 01       	movw	r24, r26
    5e34:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <__udivmodsi4>
    5e38:	da 01       	movw	r26, r20
    5e3a:	c9 01       	movw	r24, r18
    5e3c:	8b 87       	std	Y+11, r24	; 0x0b
    5e3e:	9c 87       	std	Y+12, r25	; 0x0c
    5e40:	ad 87       	std	Y+13, r26	; 0x0d
    5e42:	be 87       	std	Y+14, r27	; 0x0e

    if (g_backlight_cb != NULL)
    5e44:	80 91 77 40 	lds	r24, 0x4077	; 0x804077 <g_backlight_cb>
    5e48:	90 91 78 40 	lds	r25, 0x4078	; 0x804078 <g_backlight_cb+0x1>
    5e4c:	89 2b       	or	r24, r25
    5e4e:	61 f0       	breq	.+24     	; 0x5e68 <backlight_task+0x104>
    {
        g_backlight_cb(tmp);
    5e50:	20 91 77 40 	lds	r18, 0x4077	; 0x804077 <g_backlight_cb>
    5e54:	30 91 78 40 	lds	r19, 0x4078	; 0x804078 <g_backlight_cb+0x1>
    5e58:	8b 85       	ldd	r24, Y+11	; 0x0b
    5e5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5e5c:	ad 85       	ldd	r26, Y+13	; 0x0d
    5e5e:	be 85       	ldd	r27, Y+14	; 0x0e
    5e60:	bc 01       	movw	r22, r24
    5e62:	cd 01       	movw	r24, r26
    5e64:	f9 01       	movw	r30, r18
    5e66:	09 95       	icall
    }
}
    5e68:	00 00       	nop
    5e6a:	2e 96       	adiw	r28, 0x0e	; 14
    5e6c:	cd bf       	out	0x3d, r28	; 61
    5e6e:	de bf       	out	0x3e, r29	; 62
    5e70:	df 91       	pop	r29
    5e72:	cf 91       	pop	r28
    5e74:	08 95       	ret

00005e76 <lin_go_to_sleep>:

void lin_go_to_sleep(void)
{
    5e76:	cf 93       	push	r28
    5e78:	df 93       	push	r29
    5e7a:	cd b7       	in	r28, 0x3d	; 61
    5e7c:	de b7       	in	r29, 0x3e	; 62
    /* 使能脚设置低电平 */
    LIN_EN_set_level(0);
    5e7e:	80 e0       	ldi	r24, 0x00	; 0
    5e80:	0e 94 76 2c 	call	0x58ec	; 0x58ec <LIN_EN_set_level>

    /* 关闭usart模块 */
    Disable_global_interrupt();
    5e84:	f8 94       	cli
    USART0.CTRLA &= ~(1 << USART_ABEIE_bp | 1 << USART_RXCIE_bp);
    5e86:	80 e0       	ldi	r24, 0x00	; 0
    5e88:	98 e0       	ldi	r25, 0x08	; 8
    5e8a:	20 e0       	ldi	r18, 0x00	; 0
    5e8c:	38 e0       	ldi	r19, 0x08	; 8
    5e8e:	f9 01       	movw	r30, r18
    5e90:	25 81       	ldd	r18, Z+5	; 0x05
    5e92:	2b 77       	andi	r18, 0x7B	; 123
    5e94:	fc 01       	movw	r30, r24
    5e96:	25 83       	std	Z+5, r18	; 0x05
    USART0.CTRLB &= ~(1 << USART_TXEN_bp | USART_RXMODE_LINAUTO_gc | 1 << USART_RXEN_bp);
    5e98:	80 e0       	ldi	r24, 0x00	; 0
    5e9a:	98 e0       	ldi	r25, 0x08	; 8
    5e9c:	20 e0       	ldi	r18, 0x00	; 0
    5e9e:	38 e0       	ldi	r19, 0x08	; 8
    5ea0:	f9 01       	movw	r30, r18
    5ea2:	26 81       	ldd	r18, Z+6	; 0x06
    5ea4:	29 73       	andi	r18, 0x39	; 57
    5ea6:	fc 01       	movw	r30, r24
    5ea8:	26 83       	std	Z+6, r18	; 0x06

    /* LIN TX设置低电平 */
    PA0_set_dir(PORT_DIR_OUT);
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <PA0_set_dir>
    PA0_set_level(
    5eb0:	80 e0       	ldi	r24, 0x00	; 0
    5eb2:	0e 94 67 2c 	call	0x58ce	; 0x58ce <PA0_set_level>
        // <y> Initial level
        // <id> pad_initial_level
        // <false"> Low
        // <true"> High
        false);
    5eb6:	00 00       	nop
    5eb8:	df 91       	pop	r29
    5eba:	cf 91       	pop	r28
    5ebc:	08 95       	ret

00005ebe <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    5ebe:	cf 93       	push	r28
    5ec0:	df 93       	push	r29
    5ec2:	00 d0       	rcall	.+0      	; 0x5ec4 <PORTC_set_pin_level+0x6>
    5ec4:	cd b7       	in	r28, 0x3d	; 61
    5ec6:	de b7       	in	r29, 0x3e	; 62
    5ec8:	89 83       	std	Y+1, r24	; 0x01
    5eca:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    5ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ece:	88 23       	and	r24, r24
    5ed0:	a9 f0       	breq	.+42     	; 0x5efc <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    5ed2:	88 e0       	ldi	r24, 0x08	; 8
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	28 e0       	ldi	r18, 0x08	; 8
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	f9 01       	movw	r30, r18
    5edc:	21 81       	ldd	r18, Z+1	; 0x01
    5ede:	62 2f       	mov	r22, r18
    5ee0:	29 81       	ldd	r18, Y+1	; 0x01
    5ee2:	42 2f       	mov	r20, r18
    5ee4:	50 e0       	ldi	r21, 0x00	; 0
    5ee6:	21 e0       	ldi	r18, 0x01	; 1
    5ee8:	30 e0       	ldi	r19, 0x00	; 0
    5eea:	02 c0       	rjmp	.+4      	; 0x5ef0 <PORTC_set_pin_level+0x32>
    5eec:	22 0f       	add	r18, r18
    5eee:	33 1f       	adc	r19, r19
    5ef0:	4a 95       	dec	r20
    5ef2:	e2 f7       	brpl	.-8      	; 0x5eec <PORTC_set_pin_level+0x2e>
    5ef4:	26 2b       	or	r18, r22
    5ef6:	fc 01       	movw	r30, r24
    5ef8:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    5efa:	15 c0       	rjmp	.+42     	; 0x5f26 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5efc:	88 e0       	ldi	r24, 0x08	; 8
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	28 e0       	ldi	r18, 0x08	; 8
    5f02:	30 e0       	ldi	r19, 0x00	; 0
    5f04:	f9 01       	movw	r30, r18
    5f06:	21 81       	ldd	r18, Z+1	; 0x01
    5f08:	62 2f       	mov	r22, r18
    5f0a:	29 81       	ldd	r18, Y+1	; 0x01
    5f0c:	42 2f       	mov	r20, r18
    5f0e:	50 e0       	ldi	r21, 0x00	; 0
    5f10:	21 e0       	ldi	r18, 0x01	; 1
    5f12:	30 e0       	ldi	r19, 0x00	; 0
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <PORTC_set_pin_level+0x5c>
    5f16:	22 0f       	add	r18, r18
    5f18:	33 1f       	adc	r19, r19
    5f1a:	4a 95       	dec	r20
    5f1c:	e2 f7       	brpl	.-8      	; 0x5f16 <PORTC_set_pin_level+0x58>
    5f1e:	20 95       	com	r18
    5f20:	26 23       	and	r18, r22
    5f22:	fc 01       	movw	r30, r24
    5f24:	21 83       	std	Z+1, r18	; 0x01
	}
}
    5f26:	00 00       	nop
    5f28:	0f 90       	pop	r0
    5f2a:	0f 90       	pop	r0
    5f2c:	df 91       	pop	r29
    5f2e:	cf 91       	pop	r28
    5f30:	08 95       	ret

00005f32 <LED_MCLK_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_MCLK_set_level(const bool level)
{
    5f32:	cf 93       	push	r28
    5f34:	df 93       	push	r29
    5f36:	1f 92       	push	r1
    5f38:	cd b7       	in	r28, 0x3d	; 61
    5f3a:	de b7       	in	r29, 0x3e	; 62
    5f3c:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(1, level);
    5f3e:	69 81       	ldd	r22, Y+1	; 0x01
    5f40:	81 e0       	ldi	r24, 0x01	; 1
    5f42:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <PORTC_set_pin_level>
}
    5f46:	00 00       	nop
    5f48:	0f 90       	pop	r0
    5f4a:	df 91       	pop	r29
    5f4c:	cf 91       	pop	r28
    5f4e:	08 95       	ret

00005f50 <LED_CS_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_CS_set_level(const bool level)
{
    5f50:	cf 93       	push	r28
    5f52:	df 93       	push	r29
    5f54:	1f 92       	push	r1
    5f56:	cd b7       	in	r28, 0x3d	; 61
    5f58:	de b7       	in	r29, 0x3e	; 62
    5f5a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(2, level);
    5f5c:	69 81       	ldd	r22, Y+1	; 0x01
    5f5e:	82 e0       	ldi	r24, 0x02	; 2
    5f60:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <PORTC_set_pin_level>
}
    5f64:	00 00       	nop
    5f66:	0f 90       	pop	r0
    5f68:	df 91       	pop	r29
    5f6a:	cf 91       	pop	r28
    5f6c:	08 95       	ret

00005f6e <LED_OUT_DAT_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_OUT_DAT_set_level(const bool level)
{
    5f6e:	cf 93       	push	r28
    5f70:	df 93       	push	r29
    5f72:	1f 92       	push	r1
    5f74:	cd b7       	in	r28, 0x3d	; 61
    5f76:	de b7       	in	r29, 0x3e	; 62
    5f78:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(3, level);
    5f7a:	69 81       	ldd	r22, Y+1	; 0x01
    5f7c:	83 e0       	ldi	r24, 0x03	; 3
    5f7e:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <PORTC_set_pin_level>
}
    5f82:	00 00       	nop
    5f84:	0f 90       	pop	r0
    5f86:	df 91       	pop	r29
    5f88:	cf 91       	pop	r28
    5f8a:	08 95       	ret

00005f8c <HC595_Write>:
#define HC595_STCP_RST LED_CS_set_level(false)
#define HC595_SHCP_SET LED_MCLK_set_level(true)
#define HC595_SHCP_RST LED_MCLK_set_level(false)

void HC595_Write(uint8_t *dataPtr, uint8_t icNum, uint8_t bitLen)
{
    5f8c:	cf 93       	push	r28
    5f8e:	df 93       	push	r29
    5f90:	cd b7       	in	r28, 0x3d	; 61
    5f92:	de b7       	in	r29, 0x3e	; 62
    5f94:	2a 97       	sbiw	r28, 0x0a	; 10
    5f96:	cd bf       	out	0x3d, r28	; 61
    5f98:	de bf       	out	0x3e, r29	; 62
    5f9a:	8f 83       	std	Y+7, r24	; 0x07
    5f9c:	98 87       	std	Y+8, r25	; 0x08
    5f9e:	69 87       	std	Y+9, r22	; 0x09
    5fa0:	4a 87       	std	Y+10, r20	; 0x0a
    uint8_t _dataArr[HC595_NUM] = {0};
    5fa2:	1e 82       	std	Y+6, r1	; 0x06
    uint8_t arrIdx = 0;
    5fa4:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t bitIdx = 0;
    5fa6:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t bitVal = 0;
    5fa8:	1d 82       	std	Y+5, r1	; 0x05
    for (uint8_t i = 0; i < icNum; i++)
    5faa:	19 82       	std	Y+1, r1	; 0x01
    5fac:	21 c0       	rjmp	.+66     	; 0x5ff0 <HC595_Write+0x64>
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    5fae:	89 81       	ldd	r24, Y+1	; 0x01
    5fb0:	88 2f       	mov	r24, r24
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	29 85       	ldd	r18, Y+9	; 0x09
    5fb6:	22 2f       	mov	r18, r18
    5fb8:	30 e0       	ldi	r19, 0x00	; 0
    5fba:	a9 01       	movw	r20, r18
    5fbc:	41 50       	subi	r20, 0x01	; 1
    5fbe:	51 09       	sbc	r21, r1
    5fc0:	29 81       	ldd	r18, Y+1	; 0x01
    5fc2:	22 2f       	mov	r18, r18
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	ba 01       	movw	r22, r20
    5fc8:	62 1b       	sub	r22, r18
    5fca:	73 0b       	sbc	r23, r19
    5fcc:	9b 01       	movw	r18, r22
    5fce:	a9 01       	movw	r20, r18
    5fd0:	2f 81       	ldd	r18, Y+7	; 0x07
    5fd2:	38 85       	ldd	r19, Y+8	; 0x08
    5fd4:	24 0f       	add	r18, r20
    5fd6:	35 1f       	adc	r19, r21
    5fd8:	f9 01       	movw	r30, r18
    5fda:	40 81       	ld	r20, Z
    5fdc:	9e 01       	movw	r18, r28
    5fde:	2a 5f       	subi	r18, 0xFA	; 250
    5fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe2:	82 0f       	add	r24, r18
    5fe4:	93 1f       	adc	r25, r19
    5fe6:	fc 01       	movw	r30, r24
    5fe8:	40 83       	st	Z, r20
{
    uint8_t _dataArr[HC595_NUM] = {0};
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    5fea:	89 81       	ldd	r24, Y+1	; 0x01
    5fec:	8f 5f       	subi	r24, 0xFF	; 255
    5fee:	89 83       	std	Y+1, r24	; 0x01
    5ff0:	99 81       	ldd	r25, Y+1	; 0x01
    5ff2:	89 85       	ldd	r24, Y+9	; 0x09
    5ff4:	98 17       	cp	r25, r24
    5ff6:	d8 f2       	brcs	.-74     	; 0x5fae <HC595_Write+0x22>
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    }

    for (uint8_t i = 0; i < bitLen; i++)
    5ff8:	1a 82       	std	Y+2, r1	; 0x02
    5ffa:	36 c0       	rjmp	.+108    	; 0x6068 <HC595_Write+0xdc>
    {
        arrIdx = i / 8;
    5ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ffe:	86 95       	lsr	r24
    6000:	86 95       	lsr	r24
    6002:	86 95       	lsr	r24
    6004:	8b 83       	std	Y+3, r24	; 0x03
        bitIdx = i % 8;
    6006:	8a 81       	ldd	r24, Y+2	; 0x02
    6008:	87 70       	andi	r24, 0x07	; 7
    600a:	8c 83       	std	Y+4, r24	; 0x04
        bitVal = _dataArr[arrIdx] & (0x01 << (7 - bitIdx));
    600c:	8b 81       	ldd	r24, Y+3	; 0x03
    600e:	88 2f       	mov	r24, r24
    6010:	90 e0       	ldi	r25, 0x00	; 0
    6012:	9e 01       	movw	r18, r28
    6014:	2a 5f       	subi	r18, 0xFA	; 250
    6016:	3f 4f       	sbci	r19, 0xFF	; 255
    6018:	82 0f       	add	r24, r18
    601a:	93 1f       	adc	r25, r19
    601c:	fc 01       	movw	r30, r24
    601e:	80 81       	ld	r24, Z
    6020:	48 2f       	mov	r20, r24
    6022:	8c 81       	ldd	r24, Y+4	; 0x04
    6024:	88 2f       	mov	r24, r24
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	27 e0       	ldi	r18, 0x07	; 7
    602a:	30 e0       	ldi	r19, 0x00	; 0
    602c:	28 1b       	sub	r18, r24
    602e:	39 0b       	sbc	r19, r25
    6030:	81 e0       	ldi	r24, 0x01	; 1
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	02 c0       	rjmp	.+4      	; 0x603a <HC595_Write+0xae>
    6036:	88 0f       	add	r24, r24
    6038:	99 1f       	adc	r25, r25
    603a:	2a 95       	dec	r18
    603c:	e2 f7       	brpl	.-8      	; 0x6036 <HC595_Write+0xaa>
    603e:	84 23       	and	r24, r20
    6040:	8d 83       	std	Y+5, r24	; 0x05

        if (bitVal != 0)
    6042:	8d 81       	ldd	r24, Y+5	; 0x05
    6044:	88 23       	and	r24, r24
    6046:	21 f0       	breq	.+8      	; 0x6050 <HC595_Write+0xc4>
        {
            HC595_DS_SET;
    6048:	81 e0       	ldi	r24, 0x01	; 1
    604a:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <LED_OUT_DAT_set_level>
    604e:	03 c0       	rjmp	.+6      	; 0x6056 <HC595_Write+0xca>
        }
        else
        {
            HC595_DS_RST;
    6050:	80 e0       	ldi	r24, 0x00	; 0
    6052:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <LED_OUT_DAT_set_level>
        }
        HC595_SHCP_RST;
    6056:	80 e0       	ldi	r24, 0x00	; 0
    6058:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <LED_MCLK_set_level>
        HC595_SHCP_SET;
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <LED_MCLK_set_level>
    for (uint8_t i = 0; i < icNum; i++)
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    }

    for (uint8_t i = 0; i < bitLen; i++)
    6062:	8a 81       	ldd	r24, Y+2	; 0x02
    6064:	8f 5f       	subi	r24, 0xFF	; 255
    6066:	8a 83       	std	Y+2, r24	; 0x02
    6068:	9a 81       	ldd	r25, Y+2	; 0x02
    606a:	8a 85       	ldd	r24, Y+10	; 0x0a
    606c:	98 17       	cp	r25, r24
    606e:	30 f2       	brcs	.-116    	; 0x5ffc <HC595_Write+0x70>
            HC595_DS_RST;
        }
        HC595_SHCP_RST;
        HC595_SHCP_SET;
    }
    HC595_STCP_RST;
    6070:	80 e0       	ldi	r24, 0x00	; 0
    6072:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <LED_CS_set_level>
    HC595_STCP_SET;
    6076:	81 e0       	ldi	r24, 0x01	; 1
    6078:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <LED_CS_set_level>
}
    607c:	00 00       	nop
    607e:	2a 96       	adiw	r28, 0x0a	; 10
    6080:	cd bf       	out	0x3d, r28	; 61
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	df 91       	pop	r29
    6086:	cf 91       	pop	r28
    6088:	08 95       	ret

0000608a <led_set_level>:
	{0, 6}, /* LED3 D8 */
	{0, 7}, /* LED6 D7  */
};

void led_set_level(led_Dx_e Dx, uint8_t level)
{
    608a:	cf 93       	push	r28
    608c:	df 93       	push	r29
    608e:	00 d0       	rcall	.+0      	; 0x6090 <led_set_level+0x6>
    6090:	00 d0       	rcall	.+0      	; 0x6092 <led_set_level+0x8>
    6092:	cd b7       	in	r28, 0x3d	; 61
    6094:	de b7       	in	r29, 0x3e	; 62
    6096:	8b 83       	std	Y+3, r24	; 0x03
    6098:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t byte = 0;
    609a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t bit = 0;
    609c:	1a 82       	std	Y+2, r1	; 0x02
	byte = g_led_Dx[Dx].byte;
    609e:	8b 81       	ldd	r24, Y+3	; 0x03
    60a0:	88 2f       	mov	r24, r24
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	88 0f       	add	r24, r24
    60a6:	99 1f       	adc	r25, r25
    60a8:	82 5e       	subi	r24, 0xE2	; 226
    60aa:	9d 4b       	sbci	r25, 0xBD	; 189
    60ac:	fc 01       	movw	r30, r24
    60ae:	80 81       	ld	r24, Z
    60b0:	89 83       	std	Y+1, r24	; 0x01
	bit = g_led_Dx[Dx].bit;
    60b2:	8b 81       	ldd	r24, Y+3	; 0x03
    60b4:	88 2f       	mov	r24, r24
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	88 0f       	add	r24, r24
    60ba:	99 1f       	adc	r25, r25
    60bc:	81 5e       	subi	r24, 0xE1	; 225
    60be:	9d 4b       	sbci	r25, 0xBD	; 189
    60c0:	fc 01       	movw	r30, r24
    60c2:	80 81       	ld	r24, Z
    60c4:	8a 83       	std	Y+2, r24	; 0x02
	if (level == 1)
    60c6:	8c 81       	ldd	r24, Y+4	; 0x04
    60c8:	81 30       	cpi	r24, 0x01	; 1
    60ca:	01 f5       	brne	.+64     	; 0x610c <led_set_level+0x82>
	{
		bitSet(g_hc595_buffer[byte], bit);
    60cc:	89 81       	ldd	r24, Y+1	; 0x01
    60ce:	28 2f       	mov	r18, r24
    60d0:	30 e0       	ldi	r19, 0x00	; 0
    60d2:	89 81       	ldd	r24, Y+1	; 0x01
    60d4:	88 2f       	mov	r24, r24
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	89 55       	subi	r24, 0x59	; 89
    60da:	9f 4b       	sbci	r25, 0xBF	; 191
    60dc:	fc 01       	movw	r30, r24
    60de:	60 81       	ld	r22, Z
    60e0:	8a 81       	ldd	r24, Y+2	; 0x02
    60e2:	48 2f       	mov	r20, r24
    60e4:	50 e0       	ldi	r21, 0x00	; 0
    60e6:	81 e0       	ldi	r24, 0x01	; 1
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	a0 e0       	ldi	r26, 0x00	; 0
    60ec:	b0 e0       	ldi	r27, 0x00	; 0
    60ee:	04 c0       	rjmp	.+8      	; 0x60f8 <led_set_level+0x6e>
    60f0:	88 0f       	add	r24, r24
    60f2:	99 1f       	adc	r25, r25
    60f4:	aa 1f       	adc	r26, r26
    60f6:	bb 1f       	adc	r27, r27
    60f8:	4a 95       	dec	r20
    60fa:	d2 f7       	brpl	.-12     	; 0x60f0 <led_set_level+0x66>
    60fc:	46 2f       	mov	r20, r22
    60fe:	48 2b       	or	r20, r24
    6100:	c9 01       	movw	r24, r18
    6102:	89 55       	subi	r24, 0x59	; 89
    6104:	9f 4b       	sbci	r25, 0xBF	; 191
    6106:	fc 01       	movw	r30, r24
    6108:	40 83       	st	Z, r20
	}
	else
	{
		bitClear(g_hc595_buffer[byte], bit);
	}
}
    610a:	20 c0       	rjmp	.+64     	; 0x614c <led_set_level+0xc2>
	{
		bitSet(g_hc595_buffer[byte], bit);
	}
	else
	{
		bitClear(g_hc595_buffer[byte], bit);
    610c:	89 81       	ldd	r24, Y+1	; 0x01
    610e:	28 2f       	mov	r18, r24
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	89 81       	ldd	r24, Y+1	; 0x01
    6114:	88 2f       	mov	r24, r24
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	89 55       	subi	r24, 0x59	; 89
    611a:	9f 4b       	sbci	r25, 0xBF	; 191
    611c:	fc 01       	movw	r30, r24
    611e:	60 81       	ld	r22, Z
    6120:	8a 81       	ldd	r24, Y+2	; 0x02
    6122:	48 2f       	mov	r20, r24
    6124:	50 e0       	ldi	r21, 0x00	; 0
    6126:	81 e0       	ldi	r24, 0x01	; 1
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	a0 e0       	ldi	r26, 0x00	; 0
    612c:	b0 e0       	ldi	r27, 0x00	; 0
    612e:	04 c0       	rjmp	.+8      	; 0x6138 <led_set_level+0xae>
    6130:	88 0f       	add	r24, r24
    6132:	99 1f       	adc	r25, r25
    6134:	aa 1f       	adc	r26, r26
    6136:	bb 1f       	adc	r27, r27
    6138:	4a 95       	dec	r20
    613a:	d2 f7       	brpl	.-12     	; 0x6130 <led_set_level+0xa6>
    613c:	80 95       	com	r24
    613e:	46 2f       	mov	r20, r22
    6140:	48 23       	and	r20, r24
    6142:	c9 01       	movw	r24, r18
    6144:	89 55       	subi	r24, 0x59	; 89
    6146:	9f 4b       	sbci	r25, 0xBF	; 191
    6148:	fc 01       	movw	r30, r24
    614a:	40 83       	st	Z, r20
	}
}
    614c:	00 00       	nop
    614e:	24 96       	adiw	r28, 0x04	; 4
    6150:	cd bf       	out	0x3d, r28	; 61
    6152:	de bf       	out	0x3e, r29	; 62
    6154:	df 91       	pop	r29
    6156:	cf 91       	pop	r28
    6158:	08 95       	ret

0000615a <led_update_buf_task>:

void led_update_buf_task(void)
{
    615a:	cf 93       	push	r28
    615c:	df 93       	push	r29
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    6162:	48 e0       	ldi	r20, 0x08	; 8
    6164:	61 e0       	ldi	r22, 0x01	; 1
    6166:	87 ea       	ldi	r24, 0xA7	; 167
    6168:	90 e4       	ldi	r25, 0x40	; 64
    616a:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <HC595_Write>
}
    616e:	00 00       	nop
    6170:	df 91       	pop	r29
    6172:	cf 91       	pop	r28
    6174:	08 95       	ret

00006176 <led_init>:

void led_init(void)
{
    6176:	cf 93       	push	r28
    6178:	df 93       	push	r29
    617a:	cd b7       	in	r28, 0x3d	; 61
    617c:	de b7       	in	r29, 0x3e	; 62
	/* 亮度控制，目前20KHz，最大1199,默认%45亮度 */
	TCA0.SINGLE.CMP2 = 540;
    617e:	80 e0       	ldi	r24, 0x00	; 0
    6180:	9a e0       	ldi	r25, 0x0A	; 10
    6182:	2c e1       	ldi	r18, 0x1C	; 28
    6184:	32 e0       	ldi	r19, 0x02	; 2
    6186:	fc 01       	movw	r30, r24
    6188:	24 a7       	std	Z+44, r18	; 0x2c
    618a:	35 a7       	std	Z+45, r19	; 0x2d

	// LED_ON_N_set_level(0);
	led_set_level(led_d11, 0);
    618c:	60 e0       	ldi	r22, 0x00	; 0
    618e:	80 e0       	ldi	r24, 0x00	; 0
    6190:	0e 94 45 30 	call	0x608a	; 0x608a <led_set_level>
	// led_set_level(led_d8, 0);
	// led_set_level(led_d7, 0);
	// led_set_level(led_d5, 0);
	// led_set_level(led_d6, 0);
	// led_set_level(led_d4, 0);
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    6194:	48 e0       	ldi	r20, 0x08	; 8
    6196:	61 e0       	ldi	r22, 0x01	; 1
    6198:	87 ea       	ldi	r24, 0xA7	; 167
    619a:	90 e4       	ldi	r25, 0x40	; 64
    619c:	0e 94 c6 2f 	call	0x5f8c	; 0x5f8c <HC595_Write>
}
    61a0:	00 00       	nop
    61a2:	df 91       	pop	r29
    61a4:	cf 91       	pop	r28
    61a6:	08 95       	ret

000061a8 <ccp_write_io>:
		led_set_level(led_d8, false);
		led_set_level(led_d7, false);
		led_set_level(led_d6, false);
		led_set_level(led_d5, false);
	}
}
    61a8:	cf 93       	push	r28
    61aa:	df 93       	push	r29
    61ac:	00 d0       	rcall	.+0      	; 0x61ae <ccp_write_io+0x6>
    61ae:	1f 92       	push	r1
    61b0:	cd b7       	in	r28, 0x3d	; 61
    61b2:	de b7       	in	r29, 0x3e	; 62
    61b4:	89 83       	std	Y+1, r24	; 0x01
    61b6:	9a 83       	std	Y+2, r25	; 0x02
    61b8:	6b 83       	std	Y+3, r22	; 0x03
    61ba:	89 81       	ldd	r24, Y+1	; 0x01
    61bc:	9a 81       	ldd	r25, Y+2	; 0x02
    61be:	4b 81       	ldd	r20, Y+3	; 0x03
    61c0:	68 ed       	ldi	r22, 0xD8	; 216
    61c2:	0e 94 f3 6d 	call	0xdbe6	; 0xdbe6 <protected_write_io>
    61c6:	00 00       	nop
    61c8:	23 96       	adiw	r28, 0x03	; 3
    61ca:	cd bf       	out	0x3d, r28	; 61
    61cc:	de bf       	out	0x3e, r29	; 62
    61ce:	df 91       	pop	r29
    61d0:	cf 91       	pop	r28
    61d2:	08 95       	ret

000061d4 <RSTCTRL_reset>:
    61d4:	cf 93       	push	r28
    61d6:	df 93       	push	r29
    61d8:	cd b7       	in	r28, 0x3d	; 61
    61da:	de b7       	in	r29, 0x3e	; 62
    61dc:	61 e0       	ldi	r22, 0x01	; 1
    61de:	81 e4       	ldi	r24, 0x41	; 65
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <ccp_write_io>
    61e6:	00 00       	nop
    61e8:	df 91       	pop	r29
    61ea:	cf 91       	pop	r28
    61ec:	08 95       	ret

000061ee <main>:

int main(void)
{
    61ee:	cf 93       	push	r28
    61f0:	df 93       	push	r29
    61f2:	cd b7       	in	r28, 0x3d	; 61
    61f4:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    61f6:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <atmel_start_init>
	Enable_global_interrupt();
    61fa:	78 94       	sei

	// adc_init();
	led_init();
    61fc:	0e 94 bb 30 	call	0x6176	; 0x6176 <led_init>
	/* 初始化电机:设置dac初始化电平，使能tpa驱动芯片 */
	// DAC_0_set_output(sin_data[0]);
	// MOTOR_GATE_set_level(true);

	/* led灯光更新任务 */
	soft_timer_create(100, led_update_buf_task);
    6200:	6d ea       	ldi	r22, 0xAD	; 173
    6202:	70 e3       	ldi	r23, 0x30	; 48
    6204:	84 e6       	ldi	r24, 0x64	; 100
    6206:	90 e0       	ldi	r25, 0x00	; 0
    6208:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <soft_timer_create>
	// soft_timer_create(50, soft_timer_touch_led_task);

	// soft_timer_create(20, soft_timer_touch_press_motor_task);

	/* WINDOW LOCK按键软件定时器任务 */
	soft_timer_create(20, soft_timer_window_lock_task);
    620c:	68 e6       	ldi	r22, 0x68	; 104
    620e:	76 e2       	ldi	r23, 0x26	; 38
    6210:	84 e1       	ldi	r24, 0x14	; 20
    6212:	90 e0       	ldi	r25, 0x00	; 0
    6214:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <soft_timer_create>

	/* WINDOW 提升软件定时器任务 */
	soft_timer_create(20, soft_timer_window_task);
    6218:	6f e6       	ldi	r22, 0x6F	; 111
    621a:	79 e2       	ldi	r23, 0x29	; 41
    621c:	84 e1       	ldi	r24, 0x14	; 20
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <soft_timer_create>

	/* lin 接收信号变量更新任务 */
	soft_timer_create(10, soft_timer_lin_signal_update_task);
    6224:	6d e9       	ldi	r22, 0x9D	; 157
    6226:	76 e2       	ldi	r23, 0x26	; 38
    6228:	8a e0       	ldi	r24, 0x0A	; 10
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <soft_timer_create>

	/* 背光亮度控制更新任务 */
	soft_timer_create(100, backlight_task);
    6230:	62 eb       	ldi	r22, 0xB2	; 178
    6232:	7e e2       	ldi	r23, 0x2E	; 46
    6234:	84 e6       	ldi	r24, 0x64	; 100
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <soft_timer_create>

	l_sys_init();
    623c:	0e 94 43 31 	call	0x6286	; 0x6286 <l_sys_init>
	l_ifc_init(LI0);
    6240:	80 e0       	ldi	r24, 0x00	; 0
    6242:	0e 94 4b 31 	call	0x6296	; 0x6296 <l_ifc_init>
	ld_init(LI0);
    6246:	80 e0       	ldi	r24, 0x00	; 0
    6248:	0e 94 f6 50 	call	0xa1ec	; 0xa1ec <ld_init>
	// FLASH_0_write_eeprom_byte(0x01, 0x60);

	/* Replace with your application code */
	while (1)
	{
		soft_timer_run();
    624c:	0e 94 0a 68 	call	0xd014	; 0xd014 <soft_timer_run>
		touch_process();
    6250:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <touch_process>
		if (eeprom_set_boot_flg == 1)
    6254:	80 91 07 43 	lds	r24, 0x4307	; 0x804307 <eeprom_set_boot_flg>
    6258:	81 30       	cpi	r24, 0x01	; 1
    625a:	c1 f7       	brne	.-16     	; 0x624c <main+0x5e>
		{
			eeprom_set_boot_flg = 0;
    625c:	10 92 07 43 	sts	0x4307, r1	; 0x804307 <eeprom_set_boot_flg>
			FLASH_0_write_eeprom_byte(0x00, 0xaa);
    6260:	6a ea       	ldi	r22, 0xAA	; 170
    6262:	80 e0       	ldi	r24, 0x00	; 0
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	0e 94 c8 6d 	call	0xdb90	; 0xdb90 <FLASH_0_write_eeprom_byte>
			while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    626a:	00 00       	nop
    626c:	80 e0       	ldi	r24, 0x00	; 0
    626e:	90 e1       	ldi	r25, 0x10	; 16
    6270:	fc 01       	movw	r30, r24
    6272:	82 81       	ldd	r24, Z+2	; 0x02
    6274:	88 2f       	mov	r24, r24
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	83 70       	andi	r24, 0x03	; 3
    627a:	99 27       	eor	r25, r25
    627c:	89 2b       	or	r24, r25
    627e:	b1 f7       	brne	.-20     	; 0x626c <main+0x7e>
				;
			RSTCTRL_reset();
    6280:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <RSTCTRL_reset>
		}
	}
    6284:	e3 cf       	rjmp	.-58     	; 0x624c <main+0x5e>

00006286 <l_sys_init>:
 * The implementation of this function can be replaced by user if needed.
 *
 * Implements    : l_sys_init_Activity
 *END**************************************************************************/
l_bool l_sys_init(void)
{
    6286:	cf 93       	push	r28
    6288:	df 93       	push	r29
    628a:	cd b7       	in	r28, 0x3d	; 61
    628c:	de b7       	in	r29, 0x3e	; 62
    return (l_bool)0;
    628e:	80 e0       	ldi	r24, 0x00	; 0
}
    6290:	df 91       	pop	r29
    6292:	cf 91       	pop	r28
    6294:	08 95       	ret

00006296 <l_ifc_init>:
 * functions such as the baud rate
 *
 * Implements    : l_ifc_init_Activity
 *END**************************************************************************/
l_bool l_ifc_init(l_ifc_handle iii)
{
    6296:	cf 93       	push	r28
    6298:	df 93       	push	r29
    629a:	00 d0       	rcall	.+0      	; 0x629c <l_ifc_init+0x6>
    629c:	00 d0       	rcall	.+0      	; 0x629e <l_ifc_init+0x8>
    629e:	cd b7       	in	r28, 0x3d	; 61
    62a0:	de b7       	in	r29, 0x3e	; 62
    62a2:	8c 83       	std	Y+4, r24	; 0x04
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    62a4:	8c 81       	ldd	r24, Y+4	; 0x04
    62a6:	28 2f       	mov	r18, r24
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	46 e1       	ldi	r20, 0x16	; 22
    62ac:	42 9f       	mul	r20, r18
    62ae:	c0 01       	movw	r24, r0
    62b0:	43 9f       	mul	r20, r19
    62b2:	90 0d       	add	r25, r0
    62b4:	11 24       	eor	r1, r1
    62b6:	8f 55       	subi	r24, 0x5F	; 95
    62b8:	99 4b       	sbci	r25, 0xB9	; 185
    62ba:	89 83       	std	Y+1, r24	; 0x01
    62bc:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    static l_u8 lin_schedule_start_entry[LIN_NUM_OF_SCHD_TBL];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    l_bool ret_val;
    prot_state_ptr->diagnostic_mode = DIAG_NONE;
    62be:	89 81       	ldd	r24, Y+1	; 0x01
    62c0:	9a 81       	ldd	r25, Y+2	; 0x02
    62c2:	fc 01       	movw	r30, r24
    62c4:	10 8a       	std	Z+16, r1	; 0x10

    /* Call Low level initialization function */
    ret_val = lin_lld_init(iii);
    62c6:	8c 81       	ldd	r24, Y+4	; 0x04
    62c8:	0e 94 12 4c 	call	0x9824	; 0x9824 <lin_lld_init>
    62cc:	8b 83       	std	Y+3, r24	; 0x03
            master_data_ptr->schedule_start_entry_ptr[prot_user_config_ptr->schedule_start] = 0;
        }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }

    return ret_val;
    62ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    62d0:	24 96       	adiw	r28, 0x04	; 4
    62d2:	cd bf       	out	0x3d, r28	; 61
    62d4:	de bf       	out	0x3e, r29	; 62
    62d6:	df 91       	pop	r29
    62d8:	cf 91       	pop	r28
    62da:	08 95       	ret

000062dc <lin_pid_resp_callback_handler>:
 * Implements    : lin_pid_resp_callback_handler_Activity
 *END**************************************************************************/
void lin_pid_resp_callback_handler(l_ifc_handle iii,
                                   const lin_lld_event_id_t event_id,
                                   l_u8 id)
{
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	00 d0       	rcall	.+0      	; 0x62e2 <lin_pid_resp_callback_handler+0x6>
    62e2:	1f 92       	push	r1
    62e4:	cd b7       	in	r28, 0x3d	; 61
    62e6:	de b7       	in	r29, 0x3e	; 62
    62e8:	89 83       	std	Y+1, r24	; 0x01
    62ea:	6a 83       	std	Y+2, r22	; 0x02
    62ec:	4b 83       	std	Y+3, r20	; 0x03
    switch (event_id)
    62ee:	8a 81       	ldd	r24, Y+2	; 0x02
    62f0:	88 2f       	mov	r24, r24
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	82 30       	cpi	r24, 0x02	; 2
    62f6:	91 05       	cpc	r25, r1
    62f8:	c1 f0       	breq	.+48     	; 0x632a <lin_pid_resp_callback_handler+0x4e>
    62fa:	83 30       	cpi	r24, 0x03	; 3
    62fc:	91 05       	cpc	r25, r1
    62fe:	2c f4       	brge	.+10     	; 0x630a <lin_pid_resp_callback_handler+0x2e>
    6300:	00 97       	sbiw	r24, 0x00	; 0
    6302:	49 f0       	breq	.+18     	; 0x6316 <lin_pid_resp_callback_handler+0x3a>
    6304:	01 97       	sbiw	r24, 0x01	; 1
    6306:	61 f0       	breq	.+24     	; 0x6320 <lin_pid_resp_callback_handler+0x44>
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
            break;
        default:
            /* do nothing */
            break;
    6308:	1f c0       	rjmp	.+62     	; 0x6348 <lin_pid_resp_callback_handler+0x6c>
 *END**************************************************************************/
void lin_pid_resp_callback_handler(l_ifc_handle iii,
                                   const lin_lld_event_id_t event_id,
                                   l_u8 id)
{
    switch (event_id)
    630a:	88 30       	cpi	r24, 0x08	; 8
    630c:	91 05       	cpc	r25, r1
    630e:	b4 f0       	brlt	.+44     	; 0x633c <lin_pid_resp_callback_handler+0x60>
    6310:	08 97       	sbiw	r24, 0x08	; 8
    6312:	81 f0       	breq	.+32     	; 0x6334 <lin_pid_resp_callback_handler+0x58>
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
            break;
        default:
            /* do nothing */
            break;
    6314:	19 c0       	rjmp	.+50     	; 0x6348 <lin_pid_resp_callback_handler+0x6c>
                                   l_u8 id)
{
    switch (event_id)
    {
        case LIN_LLD_PID_OK:
            lin_process_id(iii, id);
    6316:	6b 81       	ldd	r22, Y+3	; 0x03
    6318:	89 81       	ldd	r24, Y+1	; 0x01
    631a:	0e 94 ab 31 	call	0x6356	; 0x6356 <lin_process_id>
            break;
    631e:	14 c0       	rjmp	.+40     	; 0x6348 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_TX_COMPLETED:
            lin_update_tx(iii, id);
    6320:	6b 81       	ldd	r22, Y+3	; 0x03
    6322:	89 81       	ldd	r24, Y+1	; 0x01
    6324:	0e 94 0e 34 	call	0x681c	; 0x681c <lin_update_tx>
            break;
    6328:	0f c0       	rjmp	.+30     	; 0x6348 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_RX_COMPLETED:
            lin_update_rx(iii, id);
    632a:	6b 81       	ldd	r22, Y+3	; 0x03
    632c:	89 81       	ldd	r24, Y+1	; 0x01
    632e:	0e 94 e8 32 	call	0x65d0	; 0x65d0 <lin_update_rx>
            break;
    6332:	0a c0       	rjmp	.+20     	; 0x6348 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_BUS_ACTIVITY_TIMEOUT:
            lin_bus_activity_timeout(iii);
    6334:	89 81       	ldd	r24, Y+1	; 0x01
    6336:	0e 94 67 35 	call	0x6ace	; 0x6ace <lin_bus_activity_timeout>
            break;
    633a:	06 c0       	rjmp	.+12     	; 0x6348 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_PID_ERR:
        case LIN_LLD_FRAME_ERR:
        case LIN_LLD_CHECKSUM_ERR:
        case LIN_LLD_READBACK_ERR:
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
    633c:	4b 81       	ldd	r20, Y+3	; 0x03
    633e:	6a 81       	ldd	r22, Y+2	; 0x02
    6340:	89 81       	ldd	r24, Y+1	; 0x01
    6342:	0e 94 bb 34 	call	0x6976	; 0x6976 <lin_handle_error>
            break;
    6346:	00 00       	nop
        default:
            /* do nothing */
            break;
    }
}
    6348:	00 00       	nop
    634a:	23 96       	adiw	r28, 0x03	; 3
    634c:	cd bf       	out	0x3d, r28	; 61
    634e:	de bf       	out	0x3e, r29	; 62
    6350:	df 91       	pop	r29
    6352:	cf 91       	pop	r28
    6354:	08 95       	ret

00006356 <lin_process_id>:
 *
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    6356:	cf 93       	push	r28
    6358:	df 93       	push	r29
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
    635e:	2f 97       	sbiw	r28, 0x0f	; 15
    6360:	cd bf       	out	0x3d, r28	; 61
    6362:	de bf       	out	0x3e, r29	; 62
    6364:	8e 87       	std	Y+14, r24	; 0x0e
    6366:	6f 87       	std	Y+15, r22	; 0x0f
    l_u8 action = 0U;
    6368:	19 82       	std	Y+1, r1	; 0x01
    l_u16 flag_offset;
    l_u8 flag_size;
    l_u8 i;
#endif /* ((1U == SUPPORT_SLAVE_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))) */

    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];                              //获取用户协议配置信息
    636a:	8e 85       	ldd	r24, Y+14	; 0x0e
    636c:	28 2f       	mov	r18, r24
    636e:	30 e0       	ldi	r19, 0x00	; 0
    6370:	4c e1       	ldi	r20, 0x1C	; 28
    6372:	42 9f       	mul	r20, r18
    6374:	c0 01       	movw	r24, r0
    6376:	43 9f       	mul	r20, r19
    6378:	90 0d       	add	r25, r0
    637a:	11 24       	eor	r1, r1
    637c:	86 56       	subi	r24, 0x66	; 102
    637e:	9d 4b       	sbci	r25, 0xBD	; 189
    6380:	8d 83       	std	Y+5, r24	; 0x05
    6382:	9e 83       	std	Y+6, r25	; 0x06
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];                                                   //获取协议
    6384:	8e 85       	ldd	r24, Y+14	; 0x0e
    6386:	28 2f       	mov	r18, r24
    6388:	30 e0       	ldi	r19, 0x00	; 0
    638a:	46 e1       	ldi	r20, 0x16	; 22
    638c:	42 9f       	mul	r20, r18
    638e:	c0 01       	movw	r24, r0
    6390:	43 9f       	mul	r20, r19
    6392:	90 0d       	add	r25, r0
    6394:	11 24       	eor	r1, r1
    6396:	8f 55       	subi	r24, 0x5F	; 95
    6398:	99 4b       	sbci	r25, 0xB9	; 185
    639a:	8f 83       	std	Y+7, r24	; 0x07
    639c:	98 87       	std	Y+8, r25	; 0x08

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    639e:	6f 85       	ldd	r22, Y+15	; 0x0f
    63a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    63a2:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <lin_get_frame_index>
    63a6:	89 87       	std	Y+9, r24	; 0x09
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    63a8:	8d 81       	ldd	r24, Y+5	; 0x05
    63aa:	9e 81       	ldd	r25, Y+6	; 0x06
    63ac:	fc 01       	movw	r30, r24
    63ae:	26 81       	ldd	r18, Z+6	; 0x06
    63b0:	37 81       	ldd	r19, Z+7	; 0x07
    63b2:	89 85       	ldd	r24, Y+9	; 0x09
    63b4:	88 2f       	mov	r24, r24
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	88 0f       	add	r24, r24
    63ba:	99 1f       	adc	r25, r25
    63bc:	ac 01       	movw	r20, r24
    63be:	44 0f       	add	r20, r20
    63c0:	55 1f       	adc	r21, r21
    63c2:	44 0f       	add	r20, r20
    63c4:	55 1f       	adc	r21, r21
    63c6:	84 0f       	add	r24, r20
    63c8:	95 1f       	adc	r25, r21
    63ca:	82 0f       	add	r24, r18
    63cc:	93 1f       	adc	r25, r19
    63ce:	8a 87       	std	Y+10, r24	; 0x0a
    63d0:	9b 87       	std	Y+11, r25	; 0x0b
    if (0xFFU != frame_index)
    63d2:	89 85       	ldd	r24, Y+9	; 0x09
    63d4:	8f 3f       	cpi	r24, 0xFF	; 255
    63d6:	09 f4       	brne	.+2      	; 0x63da <lin_process_id+0x84>
    63d8:	d5 c0       	rjmp	.+426    	; 0x6584 <lin_process_id+0x22e>
    {
        action = 1U;
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	89 83       	std	Y+1, r24	; 0x01
        prot_state_ptr->last_pid = lin_process_parity(id,MAKE_PARITY);                      //判断pid校验是否正确
    63de:	60 e0       	ldi	r22, 0x00	; 0
    63e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    63e2:	0e 94 02 4c 	call	0x9804	; 0x9804 <lin_process_parity>
    63e6:	28 2f       	mov	r18, r24
    63e8:	8f 81       	ldd	r24, Y+7	; 0x07
    63ea:	98 85       	ldd	r25, Y+8	; 0x08
    63ec:	fc 01       	movw	r30, r24
    63ee:	21 87       	std	Z+9, r18	; 0x09
        /* PID belongs to this node, then check type of frame */
        switch (lin_frame_ptr->frm_type)                                                
    63f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    63f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    63f4:	fc 01       	movw	r30, r24
    63f6:	80 81       	ld	r24, Z
    63f8:	88 2f       	mov	r24, r24
    63fa:	90 e0       	ldi	r25, 0x00	; 0
    63fc:	81 30       	cpi	r24, 0x01	; 1
    63fe:	91 05       	cpc	r25, r1
    6400:	b1 f0       	breq	.+44     	; 0x642e <lin_process_id+0xd8>
    6402:	81 31       	cpi	r24, 0x11	; 17
    6404:	91 05       	cpc	r25, r1
    6406:	09 f4       	brne	.+2      	; 0x640a <lin_process_id+0xb4>
    6408:	8a c0       	rjmp	.+276    	; 0x651e <lin_process_id+0x1c8>
    640a:	89 2b       	or	r24, r25
    640c:	09 f0       	breq	.+2      	; 0x6410 <lin_process_id+0xba>
                }

                break;
            default:
                /* do nothing */
                break;
    640e:	ba c0       	rjmp	.+372    	; 0x6584 <lin_process_id+0x22e>
        /* PID belongs to this node, then check type of frame */
        switch (lin_frame_ptr->frm_type)                                                
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    6410:	8a 85       	ldd	r24, Y+10	; 0x0a
    6412:	9b 85       	ldd	r25, Y+11	; 0x0b
    6414:	fc 01       	movw	r30, r24
    6416:	82 81       	ldd	r24, Z+2	; 0x02
    6418:	88 23       	and	r24, r24
    641a:	09 f0       	breq	.+2      	; 0x641e <lin_process_id+0xc8>
    641c:	b0 c0       	rjmp	.+352    	; 0x657e <lin_process_id+0x228>
                {
                    lin_process_uncd_frame(iii, id, MAKE_UNCONDITIONAL_FRAME);
    641e:	40 e0       	ldi	r20, 0x00	; 0
    6420:	6f 85       	ldd	r22, Y+15	; 0x0f
    6422:	8e 85       	ldd	r24, Y+14	; 0x0e
    6424:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <lin_process_uncd_frame>
                    /* Set response */
                    action = 2U;
    6428:	82 e0       	ldi	r24, 0x02	; 2
    642a:	89 83       	std	Y+1, r24	; 0x01
                }
                break;
    642c:	a8 c0       	rjmp	.+336    	; 0x657e <lin_process_id+0x228>
            #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    642e:	8d 81       	ldd	r24, Y+5	; 0x05
    6430:	9e 81       	ldd	r25, Y+6	; 0x06
    6432:	fc 01       	movw	r30, r24
    6434:	83 81       	ldd	r24, Z+3	; 0x03
    6436:	88 23       	and	r24, r24
    6438:	19 f0       	breq	.+6      	; 0x6440 <lin_process_id+0xea>
                {
                    /* Rx response */
                    action = 1U;
    643a:	81 e0       	ldi	r24, 0x01	; 1
    643c:	89 83       	std	Y+1, r24	; 0x01
                            break;
                        }
                    }
                }
            #endif /* (1U == SUPPORT_SLAVE_MODE) */
                break;
    643e:	a2 c0       	rjmp	.+324    	; 0x6584 <lin_process_id+0x22e>
                }
            #if (1U == SUPPORT_SLAVE_MODE)
                else
                {
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    6440:	8a 85       	ldd	r24, Y+10	; 0x0a
    6442:	9b 85       	ldd	r25, Y+11	; 0x0b
    6444:	fc 01       	movw	r30, r24
    6446:	80 85       	ldd	r24, Z+8	; 0x08
    6448:	91 85       	ldd	r25, Z+9	; 0x09
    644a:	fc 01       	movw	r30, r24
    644c:	81 81       	ldd	r24, Z+1	; 0x01
    644e:	92 81       	ldd	r25, Z+2	; 0x02
    6450:	fc 01       	movw	r30, r24
    6452:	80 81       	ld	r24, Z
    6454:	8d 87       	std	Y+13, r24	; 0x0d
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
    6456:	8d 81       	ldd	r24, Y+5	; 0x05
    6458:	9e 81       	ldd	r25, Y+6	; 0x06
    645a:	fc 01       	movw	r30, r24
    645c:	26 81       	ldd	r18, Z+6	; 0x06
    645e:	37 81       	ldd	r19, Z+7	; 0x07
    6460:	8d 85       	ldd	r24, Y+13	; 0x0d
    6462:	88 2f       	mov	r24, r24
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	88 0f       	add	r24, r24
    6468:	99 1f       	adc	r25, r25
    646a:	ac 01       	movw	r20, r24
    646c:	44 0f       	add	r20, r20
    646e:	55 1f       	adc	r21, r21
    6470:	44 0f       	add	r20, r20
    6472:	55 1f       	adc	r21, r21
    6474:	84 0f       	add	r24, r20
    6476:	95 1f       	adc	r25, r21
    6478:	82 0f       	add	r24, r18
    647a:	93 1f       	adc	r25, r19
    647c:	fc 01       	movw	r30, r24
    647e:	85 81       	ldd	r24, Z+5	; 0x05
    6480:	96 81       	ldd	r25, Z+6	; 0x06
    6482:	8a 83       	std	Y+2, r24	; 0x02
    6484:	9b 83       	std	Y+3, r25	; 0x03
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
    6486:	8d 81       	ldd	r24, Y+5	; 0x05
    6488:	9e 81       	ldd	r25, Y+6	; 0x06
    648a:	fc 01       	movw	r30, r24
    648c:	26 81       	ldd	r18, Z+6	; 0x06
    648e:	37 81       	ldd	r19, Z+7	; 0x07
    6490:	8d 85       	ldd	r24, Y+13	; 0x0d
    6492:	88 2f       	mov	r24, r24
    6494:	90 e0       	ldi	r25, 0x00	; 0
    6496:	88 0f       	add	r24, r24
    6498:	99 1f       	adc	r25, r25
    649a:	ac 01       	movw	r20, r24
    649c:	44 0f       	add	r20, r20
    649e:	55 1f       	adc	r21, r21
    64a0:	44 0f       	add	r20, r20
    64a2:	55 1f       	adc	r21, r21
    64a4:	84 0f       	add	r24, r20
    64a6:	95 1f       	adc	r25, r21
    64a8:	82 0f       	add	r24, r18
    64aa:	93 1f       	adc	r25, r19
    64ac:	fc 01       	movw	r30, r24
    64ae:	87 81       	ldd	r24, Z+7	; 0x07
    64b0:	8c 87       	std	Y+12, r24	; 0x0c
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    64b2:	1c 82       	std	Y+4, r1	; 0x04
    64b4:	2f c0       	rjmp	.+94     	; 0x6514 <lin_process_id+0x1be>
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    64b6:	8a 81       	ldd	r24, Y+2	; 0x02
    64b8:	9b 81       	ldd	r25, Y+3	; 0x03
    64ba:	9c 01       	movw	r18, r24
    64bc:	2f 5f       	subi	r18, 0xFF	; 255
    64be:	3f 4f       	sbci	r19, 0xFF	; 255
    64c0:	2a 83       	std	Y+2, r18	; 0x02
    64c2:	3b 83       	std	Y+3, r19	; 0x03
    64c4:	8c 5d       	subi	r24, 0xDC	; 220
    64c6:	99 4b       	sbci	r25, 0xB9	; 185
    64c8:	fc 01       	movw	r30, r24
    64ca:	80 81       	ld	r24, Z
    64cc:	8f 3f       	cpi	r24, 0xFF	; 255
    64ce:	f9 f0       	breq	.+62     	; 0x650e <lin_process_id+0x1b8>
                        {
                            /* Frame is updated */
                            lin_make_res_evnt_frame(iii, prot_user_config_ptr->list_identifiers_RAM_ptr[1U + associate_frame - prot_user_config_ptr->frame_start]);
    64d0:	8d 81       	ldd	r24, Y+5	; 0x05
    64d2:	9e 81       	ldd	r25, Y+6	; 0x06
    64d4:	fc 01       	movw	r30, r24
    64d6:	22 85       	ldd	r18, Z+10	; 0x0a
    64d8:	33 85       	ldd	r19, Z+11	; 0x0b
    64da:	8d 85       	ldd	r24, Y+13	; 0x0d
    64dc:	48 2f       	mov	r20, r24
    64de:	50 e0       	ldi	r21, 0x00	; 0
    64e0:	8d 81       	ldd	r24, Y+5	; 0x05
    64e2:	9e 81       	ldd	r25, Y+6	; 0x06
    64e4:	fc 01       	movw	r30, r24
    64e6:	85 81       	ldd	r24, Z+5	; 0x05
    64e8:	88 2f       	mov	r24, r24
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	ba 01       	movw	r22, r20
    64ee:	68 1b       	sub	r22, r24
    64f0:	79 0b       	sbc	r23, r25
    64f2:	cb 01       	movw	r24, r22
    64f4:	01 96       	adiw	r24, 0x01	; 1
    64f6:	82 0f       	add	r24, r18
    64f8:	93 1f       	adc	r25, r19
    64fa:	fc 01       	movw	r30, r24
    64fc:	80 81       	ld	r24, Z
    64fe:	68 2f       	mov	r22, r24
    6500:	8e 85       	ldd	r24, Y+14	; 0x0e
    6502:	0e 94 23 3a 	call	0x7446	; 0x7446 <lin_make_res_evnt_frame>
                            /* Set response */
                            action = 2U;
    6506:	82 e0       	ldi	r24, 0x02	; 2
    6508:	89 83       	std	Y+1, r24	; 0x01
                            break;
    650a:	00 00       	nop
                        }
                    }
                }
            #endif /* (1U == SUPPORT_SLAVE_MODE) */
                break;
    650c:	3b c0       	rjmp	.+118    	; 0x6584 <lin_process_id+0x22e>
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    650e:	8c 81       	ldd	r24, Y+4	; 0x04
    6510:	8f 5f       	subi	r24, 0xFF	; 255
    6512:	8c 83       	std	Y+4, r24	; 0x04
    6514:	9c 81       	ldd	r25, Y+4	; 0x04
    6516:	8c 85       	ldd	r24, Y+12	; 0x0c
    6518:	98 17       	cp	r25, r24
    651a:	68 f2       	brcs	.-102    	; 0x64b6 <lin_process_id+0x160>
                            break;
                        }
                    }
                }
            #endif /* (1U == SUPPORT_SLAVE_MODE) */
                break;
    651c:	33 c0       	rjmp	.+102    	; 0x6584 <lin_process_id+0x22e>
            #endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13)) */

            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
    651e:	8d 81       	ldd	r24, Y+5	; 0x05
    6520:	9e 81       	ldd	r25, Y+6	; 0x06
    6522:	fc 01       	movw	r30, r24
    6524:	80 81       	ld	r24, Z
    6526:	82 30       	cpi	r24, 0x02	; 2
    6528:	41 f1       	breq	.+80     	; 0x657a <lin_process_id+0x224>
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    652a:	8a 85       	ldd	r24, Y+10	; 0x0a
    652c:	9b 85       	ldd	r25, Y+11	; 0x0b
    652e:	fc 01       	movw	r30, r24
    6530:	82 81       	ldd	r24, Z+2	; 0x02
    6532:	88 23       	and	r24, r24
    6534:	d1 f4       	brne	.+52     	; 0x656a <lin_process_id+0x214>
                    {
                        action = 2U;
    6536:	82 e0       	ldi	r24, 0x02	; 2
    6538:	89 83       	std	Y+1, r24	; 0x01
                        if (0x3CU == id)
    653a:	8f 85       	ldd	r24, Y+15	; 0x0f
    653c:	8c 33       	cpi	r24, 0x3C	; 60
    653e:	61 f4       	brne	.+24     	; 0x6558 <lin_process_id+0x202>
                        {
                            if (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)
    6540:	8f 81       	ldd	r24, Y+7	; 0x07
    6542:	98 85       	ldd	r25, Y+8	; 0x08
    6544:	fc 01       	movw	r30, r24
    6546:	80 89       	ldd	r24, Z+16	; 0x10
    6548:	81 30       	cpi	r24, 0x01	; 1
    654a:	d9 f4       	brne	.+54     	; 0x6582 <lin_process_id+0x22c>
                            {
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
    654c:	4f 85       	ldd	r20, Y+15	; 0x0f
    654e:	60 e0       	ldi	r22, 0x00	; 0
    6550:	8e 85       	ldd	r24, Y+14	; 0x0e
    6552:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <lin_tl_callback_handler>
                else
                {
                    action = 0U;
                }

                break;
    6556:	15 c0       	rjmp	.+42     	; 0x6582 <lin_process_id+0x22c>
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
                            }
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
    6558:	4f 85       	ldd	r20, Y+15	; 0x0f
    655a:	61 e0       	ldi	r22, 0x01	; 1
    655c:	8e 85       	ldd	r24, Y+14	; 0x0e
    655e:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <lin_tl_callback_handler>
    6562:	81 30       	cpi	r24, 0x01	; 1
    6564:	71 f4       	brne	.+28     	; 0x6582 <lin_process_id+0x22c>
                            {
                                action = 0U;
    6566:	19 82       	std	Y+1, r1	; 0x01
                else
                {
                    action = 0U;
                }

                break;
    6568:	0c c0       	rjmp	.+24     	; 0x6582 <lin_process_id+0x22c>
                            }
                        }
                    }
                    else
                    {
                        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RECEIVE_MESSAGE, id);
    656a:	4f 85       	ldd	r20, Y+15	; 0x0f
    656c:	67 e0       	ldi	r22, 0x07	; 7
    656e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6570:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <lin_tl_callback_handler>
                        /* Rx response */
                        action = 1U;
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	89 83       	std	Y+1, r24	; 0x01
                else
                {
                    action = 0U;
                }

                break;
    6578:	04 c0       	rjmp	.+8      	; 0x6582 <lin_process_id+0x22c>
                        action = 1U;
                    }
                }
                else
                {
                    action = 0U;
    657a:	19 82       	std	Y+1, r1	; 0x01
                }

                break;
    657c:	02 c0       	rjmp	.+4      	; 0x6582 <lin_process_id+0x22c>
                {
                    lin_process_uncd_frame(iii, id, MAKE_UNCONDITIONAL_FRAME);
                    /* Set response */
                    action = 2U;
                }
                break;
    657e:	00 00       	nop
    6580:	01 c0       	rjmp	.+2      	; 0x6584 <lin_process_id+0x22e>
                else
                {
                    action = 0U;
                }

                break;
    6582:	00 00       	nop
                /* do nothing */
                break;
        }
    }

    switch (action)
    6584:	89 81       	ldd	r24, Y+1	; 0x01
    6586:	88 2f       	mov	r24, r24
    6588:	90 e0       	ldi	r25, 0x00	; 0
    658a:	81 30       	cpi	r24, 0x01	; 1
    658c:	91 05       	cpc	r25, r1
    658e:	19 f0       	breq	.+6      	; 0x6596 <lin_process_id+0x240>
    6590:	02 97       	sbiw	r24, 0x02	; 2
    6592:	51 f0       	breq	.+20     	; 0x65a8 <lin_process_id+0x252>
    6594:	12 c0       	rjmp	.+36     	; 0x65ba <lin_process_id+0x264>
    {
        case 1U:
            /* Receive response */
            (void)lin_lld_rx_response(iii, lin_frame_ptr->frm_len);
    6596:	8a 85       	ldd	r24, Y+10	; 0x0a
    6598:	9b 85       	ldd	r25, Y+11	; 0x0b
    659a:	fc 01       	movw	r30, r24
    659c:	81 81       	ldd	r24, Z+1	; 0x01
    659e:	68 2f       	mov	r22, r24
    65a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    65a2:	0e 94 3c 4e 	call	0x9c78	; 0x9c78 <lin_lld_rx_response>
            break;
    65a6:	0d c0       	rjmp	.+26     	; 0x65c2 <lin_process_id+0x26c>
        case 2U:
            /* Set response */
            (void)lin_lld_set_response(iii, lin_frame_ptr->frm_len);
    65a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    65aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    65ac:	fc 01       	movw	r30, r24
    65ae:	81 81       	ldd	r24, Z+1	; 0x01
    65b0:	68 2f       	mov	r22, r24
    65b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    65b4:	0e 94 bc 4d 	call	0x9b78	; 0x9b78 <lin_lld_set_response>
            break;
    65b8:	04 c0       	rjmp	.+8      	; 0x65c2 <lin_process_id+0x26c>
        default:
            /* ignore response */
            (void)lin_lld_ignore_response(iii);
    65ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    65bc:	0e 94 52 4d 	call	0x9aa4	; 0x9aa4 <lin_lld_ignore_response>
            break;
    65c0:	00 00       	nop
    }
}
    65c2:	00 00       	nop
    65c4:	2f 96       	adiw	r28, 0x0f	; 15
    65c6:	cd bf       	out	0x3d, r28	; 61
    65c8:	de bf       	out	0x3e, r29	; 62
    65ca:	df 91       	pop	r29
    65cc:	cf 91       	pop	r28
    65ce:	08 95       	ret

000065d0 <lin_update_rx>:
 *
 * Implements    : lin_update_rx_Activity
 *END**************************************************************************/
static void lin_update_rx(l_ifc_handle iii,
                          l_u8 id)
{
    65d0:	cf 93       	push	r28
    65d2:	df 93       	push	r29
    65d4:	cd b7       	in	r28, 0x3d	; 61
    65d6:	de b7       	in	r29, 0x3e	; 62
    65d8:	2c 97       	sbiw	r28, 0x0c	; 12
    65da:	cd bf       	out	0x3d, r28	; 61
    65dc:	de bf       	out	0x3e, r29	; 62
    65de:	8b 87       	std	Y+11, r24	; 0x0b
    65e0:	6c 87       	std	Y+12, r22	; 0x0c
    l_u8 frame_index, flag_size, i, associate_id;
    l_u16 flag_offset;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    65e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    65e4:	28 2f       	mov	r18, r24
    65e6:	30 e0       	ldi	r19, 0x00	; 0
    65e8:	4c e1       	ldi	r20, 0x1C	; 28
    65ea:	42 9f       	mul	r20, r18
    65ec:	c0 01       	movw	r24, r0
    65ee:	43 9f       	mul	r20, r19
    65f0:	90 0d       	add	r25, r0
    65f2:	11 24       	eor	r1, r1
    65f4:	86 56       	subi	r24, 0x66	; 102
    65f6:	9d 4b       	sbci	r25, 0xBD	; 189
    65f8:	8d 83       	std	Y+5, r24	; 0x05
    65fa:	9e 83       	std	Y+6, r25	; 0x06
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    65fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    65fe:	28 2f       	mov	r18, r24
    6600:	30 e0       	ldi	r19, 0x00	; 0
    6602:	46 e1       	ldi	r20, 0x16	; 22
    6604:	42 9f       	mul	r20, r18
    6606:	c0 01       	movw	r24, r0
    6608:	43 9f       	mul	r20, r19
    660a:	90 0d       	add	r25, r0
    660c:	11 24       	eor	r1, r1
    660e:	8f 55       	subi	r24, 0x5F	; 95
    6610:	99 4b       	sbci	r25, 0xB9	; 185
    6612:	8f 83       	std	Y+7, r24	; 0x07
    6614:	98 87       	std	Y+8, r25	; 0x08
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    6616:	8f 81       	ldd	r24, Y+7	; 0x07
    6618:	98 85       	ldd	r25, Y+8	; 0x08
    661a:	21 e0       	ldi	r18, 0x01	; 1
    661c:	fc 01       	movw	r30, r24
    661e:	25 83       	std	Z+5, r18	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    6620:	8f 81       	ldd	r24, Y+7	; 0x07
    6622:	98 85       	ldd	r25, Y+8	; 0x08
    6624:	fc 01       	movw	r30, r24
    6626:	82 85       	ldd	r24, Z+10	; 0x0a
    6628:	8f 3f       	cpi	r24, 0xFF	; 255
    662a:	51 f0       	breq	.+20     	; 0x6640 <lin_update_rx+0x70>
    {
        prot_state_ptr->num_of_processed_frame++; 
    662c:	8f 81       	ldd	r24, Y+7	; 0x07
    662e:	98 85       	ldd	r25, Y+8	; 0x08
    6630:	fc 01       	movw	r30, r24
    6632:	82 85       	ldd	r24, Z+10	; 0x0a
    6634:	21 e0       	ldi	r18, 0x01	; 1
    6636:	28 0f       	add	r18, r24
    6638:	8f 81       	ldd	r24, Y+7	; 0x07
    663a:	98 85       	ldd	r25, Y+8	; 0x08
    663c:	fc 01       	movw	r30, r24
    663e:	22 87       	std	Z+10, r18	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    6640:	8f 81       	ldd	r24, Y+7	; 0x07
    6642:	98 85       	ldd	r25, Y+8	; 0x08
    6644:	fc 01       	movw	r30, r24
    6646:	82 85       	ldd	r24, Z+10	; 0x0a
    6648:	82 30       	cpi	r24, 0x02	; 2
    664a:	58 f0       	brcs	.+22     	; 0x6662 <lin_update_rx+0x92>
    664c:	8f 81       	ldd	r24, Y+7	; 0x07
    664e:	98 85       	ldd	r25, Y+8	; 0x08
    6650:	fc 01       	movw	r30, r24
    6652:	83 85       	ldd	r24, Z+11	; 0x0b
    6654:	88 23       	and	r24, r24
    6656:	29 f4       	brne	.+10     	; 0x6662 <lin_update_rx+0x92>
    {
        prot_state_ptr->overrun_flg = 1U;
    6658:	8f 81       	ldd	r24, Y+7	; 0x07
    665a:	98 85       	ldd	r25, Y+8	; 0x08
    665c:	21 e0       	ldi	r18, 0x01	; 1
    665e:	fc 01       	movw	r30, r24
    6660:	23 87       	std	Z+11, r18	; 0x0b
    }

    frame_index = lin_get_frame_index(iii, id);
    6662:	6c 85       	ldd	r22, Y+12	; 0x0c
    6664:	8b 85       	ldd	r24, Y+11	; 0x0b
    6666:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <lin_get_frame_index>
    666a:	89 83       	std	Y+1, r24	; 0x01
    if (frame_index < LIN_NUM_OF_FRMS)
    666c:	89 81       	ldd	r24, Y+1	; 0x01
    666e:	84 30       	cpi	r24, 0x04	; 4
    6670:	08 f0       	brcs	.+2      	; 0x6674 <lin_update_rx+0xa4>
    6672:	cd c0       	rjmp	.+410    	; 0x680e <lin_update_rx+0x23e>
    {
        /* This PID doesn't belong to this node */
        /* PID belongs to this node, then check type of frame */
        switch (prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    6674:	8d 81       	ldd	r24, Y+5	; 0x05
    6676:	9e 81       	ldd	r25, Y+6	; 0x06
    6678:	fc 01       	movw	r30, r24
    667a:	26 81       	ldd	r18, Z+6	; 0x06
    667c:	37 81       	ldd	r19, Z+7	; 0x07
    667e:	89 81       	ldd	r24, Y+1	; 0x01
    6680:	88 2f       	mov	r24, r24
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	88 0f       	add	r24, r24
    6686:	99 1f       	adc	r25, r25
    6688:	ac 01       	movw	r20, r24
    668a:	44 0f       	add	r20, r20
    668c:	55 1f       	adc	r21, r21
    668e:	44 0f       	add	r20, r20
    6690:	55 1f       	adc	r21, r21
    6692:	84 0f       	add	r24, r20
    6694:	95 1f       	adc	r25, r21
    6696:	82 0f       	add	r24, r18
    6698:	93 1f       	adc	r25, r19
    669a:	fc 01       	movw	r30, r24
    669c:	80 81       	ld	r24, Z
    669e:	88 2f       	mov	r24, r24
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	81 30       	cpi	r24, 0x01	; 1
    66a4:	91 05       	cpc	r25, r1
    66a6:	61 f0       	breq	.+24     	; 0x66c0 <lin_update_rx+0xf0>
    66a8:	81 31       	cpi	r24, 0x11	; 17
    66aa:	91 05       	cpc	r25, r1
    66ac:	f1 f0       	breq	.+60     	; 0x66ea <lin_update_rx+0x11a>
    66ae:	89 2b       	or	r24, r25
    66b0:	09 f0       	breq	.+2      	; 0x66b4 <lin_update_rx+0xe4>
                }

                break;
            default:
                /* do nothing */
                break;
    66b2:	33 c0       	rjmp	.+102    	; 0x671a <lin_update_rx+0x14a>
        /* PID belongs to this node, then check type of frame */
        switch (prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                lin_process_uncd_frame(iii, id, UPDATE_UNCONDITIONAL_FRAME);
    66b4:	41 e0       	ldi	r20, 0x01	; 1
    66b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    66b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    66ba:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <lin_process_uncd_frame>
                break;
    66be:	2d c0       	rjmp	.+90     	; 0x671a <lin_update_rx+0x14a>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                lin_update_rx_evnt_frame(iii, id);
    66c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    66c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    66c4:	0e 94 99 39 	call	0x7332	; 0x7332 <lin_update_rx_evnt_frame>
                /* Recalculate frame_index by updating associate PID */
                associate_id = lin_process_parity(prot_state_ptr->response_buffer_ptr[0], CHECK_PARITY);
    66c8:	8f 81       	ldd	r24, Y+7	; 0x07
    66ca:	98 85       	ldd	r25, Y+8	; 0x08
    66cc:	fc 01       	movw	r30, r24
    66ce:	82 81       	ldd	r24, Z+2	; 0x02
    66d0:	93 81       	ldd	r25, Z+3	; 0x03
    66d2:	fc 01       	movw	r30, r24
    66d4:	80 81       	ld	r24, Z
    66d6:	61 e0       	ldi	r22, 0x01	; 1
    66d8:	0e 94 02 4c 	call	0x9804	; 0x9804 <lin_process_parity>
    66dc:	89 87       	std	Y+9, r24	; 0x09
                frame_index = lin_get_frame_index(iii, associate_id);
    66de:	69 85       	ldd	r22, Y+9	; 0x09
    66e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    66e2:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <lin_get_frame_index>
    66e6:	89 83       	std	Y+1, r24	; 0x01
                break;
    66e8:	18 c0       	rjmp	.+48     	; 0x671a <lin_update_rx+0x14a>
            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                /* If goto sleep signal */
                if (0U == prot_state_ptr->response_buffer_ptr[0])
    66ea:	8f 81       	ldd	r24, Y+7	; 0x07
    66ec:	98 85       	ldd	r25, Y+8	; 0x08
    66ee:	fc 01       	movw	r30, r24
    66f0:	82 81       	ldd	r24, Z+2	; 0x02
    66f2:	93 81       	ldd	r25, Z+3	; 0x03
    66f4:	fc 01       	movw	r30, r24
    66f6:	80 81       	ld	r24, Z
    66f8:	88 23       	and	r24, r24
    66fa:	49 f4       	brne	.+18     	; 0x670e <lin_update_rx+0x13e>
                {
                    /* In a slave node, set go to sleep flag in state structure */
                    prot_state_ptr->go_to_sleep_flg = true;
    66fc:	8f 81       	ldd	r24, Y+7	; 0x07
    66fe:	98 85       	ldd	r25, Y+8	; 0x08
    6700:	21 e0       	ldi	r18, 0x01	; 1
    6702:	fc 01       	movw	r30, r24
    6704:	27 83       	std	Z+7, r18	; 0x07
                    (void)lin_lld_set_low_power_mode(iii);
    6706:	8b 85       	ldd	r24, Y+11	; 0x0b
    6708:	0e 94 87 4d 	call	0x9b0e	; 0x9b0e <lin_lld_set_low_power_mode>
                {
                    /* Call transport layer callback to process TL_RX_COMPLETED event*/
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RX_COMPLETED, id);
                }

                break;
    670c:	05 c0       	rjmp	.+10     	; 0x6718 <lin_update_rx+0x148>
                    (void)lin_lld_set_low_power_mode(iii);
                }
                else
                {
                    /* Call transport layer callback to process TL_RX_COMPLETED event*/
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RX_COMPLETED, id);
    670e:	4c 85       	ldd	r20, Y+12	; 0x0c
    6710:	63 e0       	ldi	r22, 0x03	; 3
    6712:	8b 85       	ldd	r24, Y+11	; 0x0b
    6714:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <lin_tl_callback_handler>
                }

                break;
    6718:	00 00       	nop
            default:
                /* do nothing */
                break;
        }

        if (frame_index < LIN_NUM_OF_FRMS)
    671a:	89 81       	ldd	r24, Y+1	; 0x01
    671c:	84 30       	cpi	r24, 0x04	; 4
    671e:	08 f0       	brcs	.+2      	; 0x6722 <lin_update_rx+0x152>
    6720:	54 c0       	rjmp	.+168    	; 0x67ca <lin_update_rx+0x1fa>
        {
            /* Update rx frame flag */
            g_lin_frame_flag_handle_tbl[frame_index] = true;
    6722:	89 81       	ldd	r24, Y+1	; 0x01
    6724:	88 2f       	mov	r24, r24
    6726:	90 e0       	ldi	r25, 0x00	; 0
    6728:	89 5d       	subi	r24, 0xD9	; 217
    672a:	99 4b       	sbci	r25, 0xB9	; 185
    672c:	21 e0       	ldi	r18, 0x01	; 1
    672e:	fc 01       	movw	r30, r24
    6730:	20 83       	st	Z, r18

            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6732:	8d 81       	ldd	r24, Y+5	; 0x05
    6734:	9e 81       	ldd	r25, Y+6	; 0x06
    6736:	fc 01       	movw	r30, r24
    6738:	93 81       	ldd	r25, Z+3	; 0x03
    673a:	81 e0       	ldi	r24, 0x01	; 1
    673c:	89 27       	eor	r24, r25
    673e:	88 23       	and	r24, r24
    6740:	09 f4       	brne	.+2      	; 0x6744 <lin_update_rx+0x174>
    6742:	43 c0       	rjmp	.+134    	; 0x67ca <lin_update_rx+0x1fa>
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
    6744:	8d 81       	ldd	r24, Y+5	; 0x05
    6746:	9e 81       	ldd	r25, Y+6	; 0x06
    6748:	fc 01       	movw	r30, r24
    674a:	26 81       	ldd	r18, Z+6	; 0x06
    674c:	37 81       	ldd	r19, Z+7	; 0x07
    674e:	89 81       	ldd	r24, Y+1	; 0x01
    6750:	88 2f       	mov	r24, r24
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	88 0f       	add	r24, r24
    6756:	99 1f       	adc	r25, r25
    6758:	ac 01       	movw	r20, r24
    675a:	44 0f       	add	r20, r20
    675c:	55 1f       	adc	r21, r21
    675e:	44 0f       	add	r20, r20
    6760:	55 1f       	adc	r21, r21
    6762:	84 0f       	add	r24, r20
    6764:	95 1f       	adc	r25, r21
    6766:	82 0f       	add	r24, r18
    6768:	93 1f       	adc	r25, r19
    676a:	fc 01       	movw	r30, r24
    676c:	85 81       	ldd	r24, Z+5	; 0x05
    676e:	96 81       	ldd	r25, Z+6	; 0x06
    6770:	8b 83       	std	Y+3, r24	; 0x03
    6772:	9c 83       	std	Y+4, r25	; 0x04
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
    6774:	8d 81       	ldd	r24, Y+5	; 0x05
    6776:	9e 81       	ldd	r25, Y+6	; 0x06
    6778:	fc 01       	movw	r30, r24
    677a:	26 81       	ldd	r18, Z+6	; 0x06
    677c:	37 81       	ldd	r19, Z+7	; 0x07
    677e:	89 81       	ldd	r24, Y+1	; 0x01
    6780:	88 2f       	mov	r24, r24
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	88 0f       	add	r24, r24
    6786:	99 1f       	adc	r25, r25
    6788:	ac 01       	movw	r20, r24
    678a:	44 0f       	add	r20, r20
    678c:	55 1f       	adc	r21, r21
    678e:	44 0f       	add	r20, r20
    6790:	55 1f       	adc	r21, r21
    6792:	84 0f       	add	r24, r20
    6794:	95 1f       	adc	r25, r21
    6796:	82 0f       	add	r24, r18
    6798:	93 1f       	adc	r25, r19
    679a:	fc 01       	movw	r30, r24
    679c:	87 81       	ldd	r24, Z+7	; 0x07
    679e:	8a 87       	std	Y+10, r24	; 0x0a
                for (i = 0U; i < flag_size; i++)
    67a0:	1a 82       	std	Y+2, r1	; 0x02
    67a2:	0f c0       	rjmp	.+30     	; 0x67c2 <lin_update_rx+0x1f2>
                {
                    g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    67a4:	8b 81       	ldd	r24, Y+3	; 0x03
    67a6:	9c 81       	ldd	r25, Y+4	; 0x04
    67a8:	8c 5d       	subi	r24, 0xDC	; 220
    67aa:	99 4b       	sbci	r25, 0xB9	; 185
    67ac:	2f ef       	ldi	r18, 0xFF	; 255
    67ae:	fc 01       	movw	r30, r24
    67b0:	20 83       	st	Z, r18
                    flag_offset++;
    67b2:	8b 81       	ldd	r24, Y+3	; 0x03
    67b4:	9c 81       	ldd	r25, Y+4	; 0x04
    67b6:	01 96       	adiw	r24, 0x01	; 1
    67b8:	8b 83       	std	Y+3, r24	; 0x03
    67ba:	9c 83       	std	Y+4, r25	; 0x04
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
                for (i = 0U; i < flag_size; i++)
    67bc:	8a 81       	ldd	r24, Y+2	; 0x02
    67be:	8f 5f       	subi	r24, 0xFF	; 255
    67c0:	8a 83       	std	Y+2, r24	; 0x02
    67c2:	9a 81       	ldd	r25, Y+2	; 0x02
    67c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    67c6:	98 17       	cp	r25, r24
    67c8:	68 f3       	brcs	.-38     	; 0x67a4 <lin_update_rx+0x1d4>
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }

    #if (1U == SUPPORT_SLAVE_MODE)
        /* update word status */
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    67ca:	8d 81       	ldd	r24, Y+5	; 0x05
    67cc:	9e 81       	ldd	r25, Y+6	; 0x06
    67ce:	fc 01       	movw	r30, r24
    67d0:	93 81       	ldd	r25, Z+3	; 0x03
    67d2:	81 e0       	ldi	r24, 0x01	; 1
    67d4:	89 27       	eor	r24, r25
    67d6:	88 23       	and	r24, r24
    67d8:	d1 f0       	breq	.+52     	; 0x680e <lin_update_rx+0x23e>
        {
            if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    67da:	8d 81       	ldd	r24, Y+5	; 0x05
    67dc:	9e 81       	ldd	r25, Y+6	; 0x06
    67de:	fc 01       	movw	r30, r24
    67e0:	80 81       	ld	r24, Z
    67e2:	88 23       	and	r24, r24
    67e4:	31 f0       	breq	.+12     	; 0x67f2 <lin_update_rx+0x222>
    67e6:	8d 81       	ldd	r24, Y+5	; 0x05
    67e8:	9e 81       	ldd	r25, Y+6	; 0x06
    67ea:	fc 01       	movw	r30, r24
    67ec:	80 81       	ld	r24, Z
    67ee:	83 30       	cpi	r24, 0x03	; 3
    67f0:	29 f4       	brne	.+10     	; 0x67fc <lin_update_rx+0x22c>
            {
                lin_update_word_status_lin21(iii, LIN_LLD_RX_COMPLETED);
    67f2:	62 e0       	ldi	r22, 0x02	; 2
    67f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    67f6:	0e 94 39 38 	call	0x7072	; 0x7072 <lin_update_word_status_lin21>
                }
            }
        }
    #endif /* (1U == SUPPORT_SLAVE_MODE) */
    }
}
    67fa:	09 c0       	rjmp	.+18     	; 0x680e <lin_update_rx+0x23e>
            {
                lin_update_word_status_lin21(iii, LIN_LLD_RX_COMPLETED);
            }
            else
            {
                if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_J2602)
    67fc:	8d 81       	ldd	r24, Y+5	; 0x05
    67fe:	9e 81       	ldd	r25, Y+6	; 0x06
    6800:	fc 01       	movw	r30, r24
    6802:	80 81       	ld	r24, Z
    6804:	81 30       	cpi	r24, 0x01	; 1
    6806:	19 f4       	brne	.+6      	; 0x680e <lin_update_rx+0x23e>
                {
                    lin_update_word_status_j2602(iii);
    6808:	8b 85       	ldd	r24, Y+11	; 0x0b
    680a:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <lin_update_word_status_j2602>
                }
            }
        }
    #endif /* (1U == SUPPORT_SLAVE_MODE) */
    }
}
    680e:	00 00       	nop
    6810:	2c 96       	adiw	r28, 0x0c	; 12
    6812:	cd bf       	out	0x3d, r28	; 61
    6814:	de bf       	out	0x3e, r29	; 62
    6816:	df 91       	pop	r29
    6818:	cf 91       	pop	r28
    681a:	08 95       	ret

0000681c <lin_update_tx>:
 *
 * Implements    : lin_update_tx_Activity
 *END**************************************************************************/
static void lin_update_tx(l_ifc_handle iii,
                          l_u8 id)
{
    681c:	cf 93       	push	r28
    681e:	df 93       	push	r29
    6820:	cd b7       	in	r28, 0x3d	; 61
    6822:	de b7       	in	r29, 0x3e	; 62
    6824:	27 97       	sbiw	r28, 0x07	; 7
    6826:	cd bf       	out	0x3d, r28	; 61
    6828:	de bf       	out	0x3e, r29	; 62
    682a:	8e 83       	std	Y+6, r24	; 0x06
    682c:	6f 83       	std	Y+7, r22	; 0x07
    l_u8 frame_index; //index用来获取当前数据的号
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    682e:	8e 81       	ldd	r24, Y+6	; 0x06
    6830:	28 2f       	mov	r18, r24
    6832:	30 e0       	ldi	r19, 0x00	; 0
    6834:	4c e1       	ldi	r20, 0x1C	; 28
    6836:	42 9f       	mul	r20, r18
    6838:	c0 01       	movw	r24, r0
    683a:	43 9f       	mul	r20, r19
    683c:	90 0d       	add	r25, r0
    683e:	11 24       	eor	r1, r1
    6840:	86 56       	subi	r24, 0x66	; 102
    6842:	9d 4b       	sbci	r25, 0xBD	; 189
    6844:	89 83       	std	Y+1, r24	; 0x01
    6846:	9a 83       	std	Y+2, r25	; 0x02
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6848:	8e 81       	ldd	r24, Y+6	; 0x06
    684a:	28 2f       	mov	r18, r24
    684c:	30 e0       	ldi	r19, 0x00	; 0
    684e:	46 e1       	ldi	r20, 0x16	; 22
    6850:	42 9f       	mul	r20, r18
    6852:	c0 01       	movw	r24, r0
    6854:	43 9f       	mul	r20, r19
    6856:	90 0d       	add	r25, r0
    6858:	11 24       	eor	r1, r1
    685a:	8f 55       	subi	r24, 0x5F	; 95
    685c:	99 4b       	sbci	r25, 0xB9	; 185
    685e:	8b 83       	std	Y+3, r24	; 0x03
    6860:	9c 83       	std	Y+4, r25	; 0x04
    l_u16* byte_offset_temp_ptr;
    const lin_node_attribute_t * node_attr_ptr;
#endif /*((1U == SUPPORT_PROTOCOL_J2602) && (1U == SUPPORT_SLAVE_MODE)) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    6862:	8b 81       	ldd	r24, Y+3	; 0x03
    6864:	9c 81       	ldd	r25, Y+4	; 0x04
    6866:	21 e0       	ldi	r18, 0x01	; 1
    6868:	fc 01       	movw	r30, r24
    686a:	25 83       	std	Z+5, r18	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    686c:	8b 81       	ldd	r24, Y+3	; 0x03
    686e:	9c 81       	ldd	r25, Y+4	; 0x04
    6870:	fc 01       	movw	r30, r24
    6872:	82 85       	ldd	r24, Z+10	; 0x0a
    6874:	8f 3f       	cpi	r24, 0xFF	; 255
    6876:	51 f0       	breq	.+20     	; 0x688c <lin_update_tx+0x70>
    {
        prot_state_ptr->num_of_processed_frame++;
    6878:	8b 81       	ldd	r24, Y+3	; 0x03
    687a:	9c 81       	ldd	r25, Y+4	; 0x04
    687c:	fc 01       	movw	r30, r24
    687e:	82 85       	ldd	r24, Z+10	; 0x0a
    6880:	21 e0       	ldi	r18, 0x01	; 1
    6882:	28 0f       	add	r18, r24
    6884:	8b 81       	ldd	r24, Y+3	; 0x03
    6886:	9c 81       	ldd	r25, Y+4	; 0x04
    6888:	fc 01       	movw	r30, r24
    688a:	22 87       	std	Z+10, r18	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    688c:	8b 81       	ldd	r24, Y+3	; 0x03
    688e:	9c 81       	ldd	r25, Y+4	; 0x04
    6890:	fc 01       	movw	r30, r24
    6892:	82 85       	ldd	r24, Z+10	; 0x0a
    6894:	82 30       	cpi	r24, 0x02	; 2
    6896:	58 f0       	brcs	.+22     	; 0x68ae <lin_update_tx+0x92>
    6898:	8b 81       	ldd	r24, Y+3	; 0x03
    689a:	9c 81       	ldd	r25, Y+4	; 0x04
    689c:	fc 01       	movw	r30, r24
    689e:	83 85       	ldd	r24, Z+11	; 0x0b
    68a0:	88 23       	and	r24, r24
    68a2:	29 f4       	brne	.+10     	; 0x68ae <lin_update_tx+0x92>
    {
        prot_state_ptr->overrun_flg = 1U;
    68a4:	8b 81       	ldd	r24, Y+3	; 0x03
    68a6:	9c 81       	ldd	r25, Y+4	; 0x04
    68a8:	21 e0       	ldi	r18, 0x01	; 1
    68aa:	fc 01       	movw	r30, r24
    68ac:	23 87       	std	Z+11, r18	; 0x0b
    }

    if ((bool)1U == prot_state_ptr->transmit_error_resp_sig_flg)
    68ae:	8b 81       	ldd	r24, Y+3	; 0x03
    68b0:	9c 81       	ldd	r25, Y+4	; 0x04
    68b2:	fc 01       	movw	r30, r24
    68b4:	85 89       	ldd	r24, Z+21	; 0x15
    68b6:	88 23       	and	r24, r24
    68b8:	41 f0       	breq	.+16     	; 0x68ca <lin_update_tx+0xae>
    {
        /* Set no error in response */
        prot_state_ptr->error_in_response = 0U;
    68ba:	8b 81       	ldd	r24, Y+3	; 0x03
    68bc:	9c 81       	ldd	r25, Y+4	; 0x04
    68be:	fc 01       	movw	r30, r24
    68c0:	16 82       	std	Z+6, r1	; 0x06
        prot_state_ptr->transmit_error_resp_sig_flg = (bool)0U;
    68c2:	8b 81       	ldd	r24, Y+3	; 0x03
    68c4:	9c 81       	ldd	r25, Y+4	; 0x04
    68c6:	fc 01       	movw	r30, r24
    68c8:	15 8a       	std	Z+21, r1	; 0x15
            (void)lin_lld_set_low_power_mode(iii);
        }
    }
#endif /* (1U == SUPPORT_MASTER_MODE) */
    /* Find frame index by pid */
    frame_index = lin_get_frame_index(iii, id);
    68ca:	6f 81       	ldd	r22, Y+7	; 0x07
    68cc:	8e 81       	ldd	r24, Y+6	; 0x06
    68ce:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <lin_get_frame_index>
    68d2:	8d 83       	std	Y+5, r24	; 0x05
    if ((((bool)LIN_MASTER == prot_user_config_ptr->function) && (0x3CU == id) && (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)) ||
    68d4:	89 81       	ldd	r24, Y+1	; 0x01
    68d6:	9a 81       	ldd	r25, Y+2	; 0x02
    68d8:	fc 01       	movw	r30, r24
    68da:	83 81       	ldd	r24, Z+3	; 0x03
    68dc:	88 23       	and	r24, r24
    68de:	49 f0       	breq	.+18     	; 0x68f2 <lin_update_tx+0xd6>
    68e0:	8f 81       	ldd	r24, Y+7	; 0x07
    68e2:	8c 33       	cpi	r24, 0x3C	; 60
    68e4:	31 f4       	brne	.+12     	; 0x68f2 <lin_update_tx+0xd6>
    68e6:	8b 81       	ldd	r24, Y+3	; 0x03
    68e8:	9c 81       	ldd	r25, Y+4	; 0x04
    68ea:	fc 01       	movw	r30, r24
    68ec:	80 89       	ldd	r24, Z+16	; 0x10
    68ee:	81 30       	cpi	r24, 0x01	; 1
    68f0:	59 f0       	breq	.+22     	; 0x6908 <lin_update_tx+0xec>
        (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (0x3DU == id)))
    68f2:	89 81       	ldd	r24, Y+1	; 0x01
    68f4:	9a 81       	ldd	r25, Y+2	; 0x02
    68f6:	fc 01       	movw	r30, r24
    68f8:	93 81       	ldd	r25, Z+3	; 0x03
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	89 27       	eor	r24, r25
        }
    }
#endif /* (1U == SUPPORT_MASTER_MODE) */
    /* Find frame index by pid */
    frame_index = lin_get_frame_index(iii, id);
    if ((((bool)LIN_MASTER == prot_user_config_ptr->function) && (0x3CU == id) && (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)) ||
    68fe:	88 23       	and	r24, r24
    6900:	41 f0       	breq	.+16     	; 0x6912 <lin_update_tx+0xf6>
        (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (0x3DU == id)))
    6902:	8f 81       	ldd	r24, Y+7	; 0x07
    6904:	8d 33       	cpi	r24, 0x3D	; 61
    6906:	29 f4       	brne	.+10     	; 0x6912 <lin_update_tx+0xf6>
    {
        /* Call transport layer callback to process TL_TX_COMPLETED event*/
        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TX_COMPLETED, id);
    6908:	4f 81       	ldd	r20, Y+7	; 0x07
    690a:	62 e0       	ldi	r22, 0x02	; 2
    690c:	8e 81       	ldd	r24, Y+6	; 0x06
    690e:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <lin_tl_callback_handler>
    }
    if (frame_index < LIN_NUM_OF_FRMS)
    6912:	8d 81       	ldd	r24, Y+5	; 0x05
    6914:	84 30       	cpi	r24, 0x04	; 4
    6916:	60 f4       	brcc	.+24     	; 0x6930 <lin_update_tx+0x114>
    {
        /* Update signal flag */
        lin_update_tx_flags(iii, frame_index);
    6918:	6d 81       	ldd	r22, Y+5	; 0x05
    691a:	8e 81       	ldd	r24, Y+6	; 0x06
    691c:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <lin_update_tx_flags>
        /* Update tx frame flag */
        g_lin_frame_flag_handle_tbl[frame_index] = true;
    6920:	8d 81       	ldd	r24, Y+5	; 0x05
    6922:	88 2f       	mov	r24, r24
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	89 5d       	subi	r24, 0xD9	; 217
    6928:	99 4b       	sbci	r25, 0xB9	; 185
    692a:	21 e0       	ldi	r18, 0x01	; 1
    692c:	fc 01       	movw	r30, r24
    692e:	20 83       	st	Z, r18
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6930:	89 81       	ldd	r24, Y+1	; 0x01
    6932:	9a 81       	ldd	r25, Y+2	; 0x02
    6934:	fc 01       	movw	r30, r24
    6936:	93 81       	ldd	r25, Z+3	; 0x03
    6938:	81 e0       	ldi	r24, 0x01	; 1
    693a:	89 27       	eor	r24, r25
    693c:	88 23       	and	r24, r24
    693e:	a1 f0       	breq	.+40     	; 0x6968 <lin_update_tx+0x14c>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    6940:	89 81       	ldd	r24, Y+1	; 0x01
    6942:	9a 81       	ldd	r25, Y+2	; 0x02
    6944:	fc 01       	movw	r30, r24
    6946:	80 81       	ld	r24, Z
    6948:	88 23       	and	r24, r24
    694a:	31 f0       	breq	.+12     	; 0x6958 <lin_update_tx+0x13c>
    694c:	89 81       	ldd	r24, Y+1	; 0x01
    694e:	9a 81       	ldd	r25, Y+2	; 0x02
    6950:	fc 01       	movw	r30, r24
    6952:	80 81       	ld	r24, Z
    6954:	83 30       	cpi	r24, 0x03	; 3
    6956:	41 f4       	brne	.+16     	; 0x6968 <lin_update_tx+0x14c>
        {
            lin_update_err_signal(iii, frame_index);
    6958:	6d 81       	ldd	r22, Y+5	; 0x05
    695a:	8e 81       	ldd	r24, Y+6	; 0x06
    695c:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <lin_update_err_signal>
            lin_update_word_status_lin21(iii, LIN_LLD_TX_COMPLETED);
    6960:	61 e0       	ldi	r22, 0x01	; 1
    6962:	8e 81       	ldd	r24, Y+6	; 0x06
    6964:	0e 94 39 38 	call	0x7072	; 0x7072 <lin_update_word_status_lin21>

    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    6968:	00 00       	nop
    696a:	27 96       	adiw	r28, 0x07	; 7
    696c:	cd bf       	out	0x3d, r28	; 61
    696e:	de bf       	out	0x3e, r29	; 62
    6970:	df 91       	pop	r29
    6972:	cf 91       	pop	r28
    6974:	08 95       	ret

00006976 <lin_handle_error>:
 * Implements    : lin_handle_error_Activity
 *END**************************************************************************/
static void lin_handle_error(l_ifc_handle iii,
                             lin_lld_event_id_t event_id,
                             l_u8 id)
{
    6976:	cf 93       	push	r28
    6978:	df 93       	push	r29
    697a:	cd b7       	in	r28, 0x3d	; 61
    697c:	de b7       	in	r29, 0x3e	; 62
    697e:	28 97       	sbiw	r28, 0x08	; 8
    6980:	cd bf       	out	0x3d, r28	; 61
    6982:	de bf       	out	0x3e, r29	; 62
    6984:	8e 83       	std	Y+6, r24	; 0x06
    6986:	6f 83       	std	Y+7, r22	; 0x07
    6988:	48 87       	std	Y+8, r20	; 0x08
#if ((1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_SLAVE_MODE))
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    698a:	8e 81       	ldd	r24, Y+6	; 0x06
    698c:	28 2f       	mov	r18, r24
    698e:	30 e0       	ldi	r19, 0x00	; 0
    6990:	4c e1       	ldi	r20, 0x1C	; 28
    6992:	42 9f       	mul	r20, r18
    6994:	c0 01       	movw	r24, r0
    6996:	43 9f       	mul	r20, r19
    6998:	90 0d       	add	r25, r0
    699a:	11 24       	eor	r1, r1
    699c:	86 56       	subi	r24, 0x66	; 102
    699e:	9d 4b       	sbci	r25, 0xBD	; 189
    69a0:	8a 83       	std	Y+2, r24	; 0x02
    69a2:	9b 83       	std	Y+3, r25	; 0x03
#endif /* ((1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_SLAVE_MODE)) */
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    69a4:	8e 81       	ldd	r24, Y+6	; 0x06
    69a6:	28 2f       	mov	r18, r24
    69a8:	30 e0       	ldi	r19, 0x00	; 0
    69aa:	46 e1       	ldi	r20, 0x16	; 22
    69ac:	42 9f       	mul	r20, r18
    69ae:	c0 01       	movw	r24, r0
    69b0:	43 9f       	mul	r20, r19
    69b2:	90 0d       	add	r25, r0
    69b4:	11 24       	eor	r1, r1
    69b6:	8f 55       	subi	r24, 0x5F	; 95
    69b8:	99 4b       	sbci	r25, 0xB9	; 185
    69ba:	8c 83       	std	Y+4, r24	; 0x04
    69bc:	9d 83       	std	Y+5, r25	; 0x05
    lin_master_data_t * master_data_ptr;
#endif /* ((1U == SUPPORT_MASTER_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))) */

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
    l_u8 frame_index;
    frame_index = lin_get_frame_index(iii, id);
    69be:	68 85       	ldd	r22, Y+8	; 0x08
    69c0:	8e 81       	ldd	r24, Y+6	; 0x06
    69c2:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <lin_get_frame_index>
    69c6:	89 83       	std	Y+1, r24	; 0x01
#endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */

    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    69c8:	8c 81       	ldd	r24, Y+4	; 0x04
    69ca:	9d 81       	ldd	r25, Y+5	; 0x05
    69cc:	fc 01       	movw	r30, r24
    69ce:	82 85       	ldd	r24, Z+10	; 0x0a
    69d0:	8f 3f       	cpi	r24, 0xFF	; 255
    69d2:	51 f0       	breq	.+20     	; 0x69e8 <lin_handle_error+0x72>
    {
        prot_state_ptr->num_of_processed_frame++;
    69d4:	8c 81       	ldd	r24, Y+4	; 0x04
    69d6:	9d 81       	ldd	r25, Y+5	; 0x05
    69d8:	fc 01       	movw	r30, r24
    69da:	82 85       	ldd	r24, Z+10	; 0x0a
    69dc:	21 e0       	ldi	r18, 0x01	; 1
    69de:	28 0f       	add	r18, r24
    69e0:	8c 81       	ldd	r24, Y+4	; 0x04
    69e2:	9d 81       	ldd	r25, Y+5	; 0x05
    69e4:	fc 01       	movw	r30, r24
    69e6:	22 87       	std	Z+10, r18	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    69e8:	8c 81       	ldd	r24, Y+4	; 0x04
    69ea:	9d 81       	ldd	r25, Y+5	; 0x05
    69ec:	fc 01       	movw	r30, r24
    69ee:	82 85       	ldd	r24, Z+10	; 0x0a
    69f0:	82 30       	cpi	r24, 0x02	; 2
    69f2:	58 f0       	brcs	.+22     	; 0x6a0a <lin_handle_error+0x94>
    69f4:	8c 81       	ldd	r24, Y+4	; 0x04
    69f6:	9d 81       	ldd	r25, Y+5	; 0x05
    69f8:	fc 01       	movw	r30, r24
    69fa:	83 85       	ldd	r24, Z+11	; 0x0b
    69fc:	88 23       	and	r24, r24
    69fe:	29 f4       	brne	.+10     	; 0x6a0a <lin_handle_error+0x94>
    {
        prot_state_ptr->overrun_flg = 1U;
    6a00:	8c 81       	ldd	r24, Y+4	; 0x04
    6a02:	9d 81       	ldd	r25, Y+5	; 0x05
    6a04:	21 e0       	ldi	r18, 0x01	; 1
    6a06:	fc 01       	movw	r30, r24
    6a08:	23 87       	std	Z+11, r18	; 0x0b
    }

    switch (event_id)
    6a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    6a0c:	88 2f       	mov	r24, r24
    6a0e:	90 e0       	ldi	r25, 0x00	; 0
    6a10:	83 30       	cpi	r24, 0x03	; 3
    6a12:	91 05       	cpc	r25, r1
    6a14:	31 f0       	breq	.+12     	; 0x6a22 <lin_handle_error+0xac>
    6a16:	83 30       	cpi	r24, 0x03	; 3
    6a18:	91 05       	cpc	r25, r1
    6a1a:	6c f1       	brlt	.+90     	; 0x6a76 <lin_handle_error+0x100>
    6a1c:	08 97       	sbiw	r24, 0x08	; 8
    6a1e:	5c f5       	brge	.+86     	; 0x6a76 <lin_handle_error+0x100>
    6a20:	02 c0       	rjmp	.+4      	; 0x6a26 <lin_handle_error+0xb0>
    {
        /* PID error */
        case LIN_LLD_PID_ERR:
            /* do nothing here */
			frame_index=1;
    6a22:	81 e0       	ldi	r24, 0x01	; 1
    6a24:	89 83       	std	Y+1, r24	; 0x01
        case LIN_LLD_NODATA_TIMEOUT:
        #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
            /* Check if frame type is event trigger */
            /* Find the corresponding frame */

            if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    6a26:	8a 81       	ldd	r24, Y+2	; 0x02
    6a28:	9b 81       	ldd	r25, Y+3	; 0x03
    6a2a:	fc 01       	movw	r30, r24
    6a2c:	26 81       	ldd	r18, Z+6	; 0x06
    6a2e:	37 81       	ldd	r19, Z+7	; 0x07
    6a30:	89 81       	ldd	r24, Y+1	; 0x01
    6a32:	88 2f       	mov	r24, r24
    6a34:	90 e0       	ldi	r25, 0x00	; 0
    6a36:	88 0f       	add	r24, r24
    6a38:	99 1f       	adc	r25, r25
    6a3a:	ac 01       	movw	r20, r24
    6a3c:	44 0f       	add	r20, r20
    6a3e:	55 1f       	adc	r21, r21
    6a40:	44 0f       	add	r20, r20
    6a42:	55 1f       	adc	r21, r21
    6a44:	84 0f       	add	r24, r20
    6a46:	95 1f       	adc	r25, r21
    6a48:	82 0f       	add	r24, r18
    6a4a:	93 1f       	adc	r25, r19
    6a4c:	fc 01       	movw	r30, r24
    6a4e:	80 81       	ld	r24, Z
    6a50:	81 30       	cpi	r24, 0x01	; 1
    6a52:	99 f0       	breq	.+38     	; 0x6a7a <lin_handle_error+0x104>
            }
            else
        #endif  /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */
            {
                /* Set response error */
                prot_state_ptr->error_in_response = 1U;
    6a54:	8c 81       	ldd	r24, Y+4	; 0x04
    6a56:	9d 81       	ldd	r25, Y+5	; 0x05
    6a58:	21 e0       	ldi	r18, 0x01	; 1
    6a5a:	fc 01       	movw	r30, r24
    6a5c:	26 83       	std	Z+6, r18	; 0x06
                /* TL support */
                if ((0x3CU == id) || (0x3DU == id))
    6a5e:	88 85       	ldd	r24, Y+8	; 0x08
    6a60:	8c 33       	cpi	r24, 0x3C	; 60
    6a62:	19 f0       	breq	.+6      	; 0x6a6a <lin_handle_error+0xf4>
    6a64:	88 85       	ldd	r24, Y+8	; 0x08
    6a66:	8d 33       	cpi	r24, 0x3D	; 61
    6a68:	41 f4       	brne	.+16     	; 0x6a7a <lin_handle_error+0x104>
                {
                    /* Call transport layer callback to handle TL_ERROR */
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_ERROR, id);
    6a6a:	48 85       	ldd	r20, Y+8	; 0x08
    6a6c:	64 e0       	ldi	r22, 0x04	; 4
    6a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    6a70:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <lin_tl_callback_handler>
                }
            }
            break;
    6a74:	02 c0       	rjmp	.+4      	; 0x6a7a <lin_handle_error+0x104>
        default:
            /* do nothing */
            break;
    6a76:	00 00       	nop
    6a78:	01 c0       	rjmp	.+2      	; 0x6a7c <lin_handle_error+0x106>
                {
                    /* Call transport layer callback to handle TL_ERROR */
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_ERROR, id);
                }
            }
            break;
    6a7a:	00 00       	nop
            break;
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a80:	fc 01       	movw	r30, r24
    6a82:	93 81       	ldd	r25, Z+3	; 0x03
    6a84:	81 e0       	ldi	r24, 0x01	; 1
    6a86:	89 27       	eor	r24, r25
    6a88:	88 23       	and	r24, r24
    6a8a:	d1 f0       	breq	.+52     	; 0x6ac0 <lin_handle_error+0x14a>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    6a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a90:	fc 01       	movw	r30, r24
    6a92:	80 81       	ld	r24, Z
    6a94:	88 23       	and	r24, r24
    6a96:	31 f0       	breq	.+12     	; 0x6aa4 <lin_handle_error+0x12e>
    6a98:	8a 81       	ldd	r24, Y+2	; 0x02
    6a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a9c:	fc 01       	movw	r30, r24
    6a9e:	80 81       	ld	r24, Z
    6aa0:	83 30       	cpi	r24, 0x03	; 3
    6aa2:	71 f4       	brne	.+28     	; 0x6ac0 <lin_handle_error+0x14a>
        {
            if (prot_state_ptr->error_in_response == 1U)
    6aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    6aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    6aa8:	fc 01       	movw	r30, r24
    6aaa:	86 81       	ldd	r24, Z+6	; 0x06
    6aac:	81 30       	cpi	r24, 0x01	; 1
    6aae:	21 f4       	brne	.+8      	; 0x6ab8 <lin_handle_error+0x142>
            {
                lin_update_err_signal(iii, frame_index);
    6ab0:	69 81       	ldd	r22, Y+1	; 0x01
    6ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    6ab4:	0e 94 eb 38 	call	0x71d6	; 0x71d6 <lin_update_err_signal>
            }
            lin_update_word_status_lin21(iii, event_id);
    6ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    6aba:	8e 81       	ldd	r24, Y+6	; 0x06
    6abc:	0e 94 39 38 	call	0x7072	; 0x7072 <lin_update_word_status_lin21>
            lin_update_word_status_j2602(iii);
        }
    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }
#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    6ac0:	00 00       	nop
    6ac2:	28 96       	adiw	r28, 0x08	; 8
    6ac4:	cd bf       	out	0x3d, r28	; 61
    6ac6:	de bf       	out	0x3e, r29	; 62
    6ac8:	df 91       	pop	r29
    6aca:	cf 91       	pop	r28
    6acc:	08 95       	ret

00006ace <lin_bus_activity_timeout>:
 * Description   : This function set bus activity timeout
 *
 * Implements    : lin_bus_activity_timeout_Activity
 *END**************************************************************************/
static void lin_bus_activity_timeout(l_ifc_handle iii)
{
    6ace:	cf 93       	push	r28
    6ad0:	df 93       	push	r29
    6ad2:	00 d0       	rcall	.+0      	; 0x6ad4 <lin_bus_activity_timeout+0x6>
    6ad4:	1f 92       	push	r1
    6ad6:	cd b7       	in	r28, 0x3d	; 61
    6ad8:	de b7       	in	r29, 0x3e	; 62
    6ada:	8b 83       	std	Y+3, r24	; 0x03
    /* Set goto sleep mode */
#if (1U == SUPPORT_SLAVE_MODE)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6adc:	8b 81       	ldd	r24, Y+3	; 0x03
    6ade:	28 2f       	mov	r18, r24
    6ae0:	30 e0       	ldi	r19, 0x00	; 0
    6ae2:	4c e1       	ldi	r20, 0x1C	; 28
    6ae4:	42 9f       	mul	r20, r18
    6ae6:	c0 01       	movw	r24, r0
    6ae8:	43 9f       	mul	r20, r19
    6aea:	90 0d       	add	r25, r0
    6aec:	11 24       	eor	r1, r1
    6aee:	86 56       	subi	r24, 0x66	; 102
    6af0:	9d 4b       	sbci	r25, 0xBD	; 189
    6af2:	89 83       	std	Y+1, r24	; 0x01
    6af4:	9a 83       	std	Y+2, r25	; 0x02

    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6af6:	89 81       	ldd	r24, Y+1	; 0x01
    6af8:	9a 81       	ldd	r25, Y+2	; 0x02
    6afa:	fc 01       	movw	r30, r24
    6afc:	93 81       	ldd	r25, Z+3	; 0x03
    6afe:	81 e0       	ldi	r24, 0x01	; 1
    6b00:	89 27       	eor	r24, r25
    6b02:	88 23       	and	r24, r24
    6b04:	81 f0       	breq	.+32     	; 0x6b26 <lin_bus_activity_timeout+0x58>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    6b06:	89 81       	ldd	r24, Y+1	; 0x01
    6b08:	9a 81       	ldd	r25, Y+2	; 0x02
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	80 81       	ld	r24, Z
    6b0e:	88 23       	and	r24, r24
    6b10:	31 f0       	breq	.+12     	; 0x6b1e <lin_bus_activity_timeout+0x50>
    6b12:	89 81       	ldd	r24, Y+1	; 0x01
    6b14:	9a 81       	ldd	r25, Y+2	; 0x02
    6b16:	fc 01       	movw	r30, r24
    6b18:	80 81       	ld	r24, Z
    6b1a:	83 30       	cpi	r24, 0x03	; 3
    6b1c:	21 f4       	brne	.+8      	; 0x6b26 <lin_bus_activity_timeout+0x58>
        {
            lin_update_word_status_lin21(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT);
    6b1e:	68 e0       	ldi	r22, 0x08	; 8
    6b20:	8b 81       	ldd	r24, Y+3	; 0x03
    6b22:	0e 94 39 38 	call	0x7072	; 0x7072 <lin_update_word_status_lin21>
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */

    /* Change to low power mode */
    (void)lin_lld_set_low_power_mode(iii);
    6b26:	8b 81       	ldd	r24, Y+3	; 0x03
    6b28:	0e 94 87 4d 	call	0x9b0e	; 0x9b0e <lin_lld_set_low_power_mode>
}
    6b2c:	00 00       	nop
    6b2e:	23 96       	adiw	r28, 0x03	; 3
    6b30:	cd bf       	out	0x3d, r28	; 61
    6b32:	de bf       	out	0x3e, r29	; 62
    6b34:	df 91       	pop	r29
    6b36:	cf 91       	pop	r28
    6b38:	08 95       	ret

00006b3a <lin_update_tx_flags>:
 *
 * Implements    : lin_update_tx_flags_Activity
 *END**************************************************************************/
static void lin_update_tx_flags(l_ifc_handle iii,
                                l_u8 frm_id)
{
    6b3a:	cf 93       	push	r28
    6b3c:	df 93       	push	r29
    6b3e:	cd b7       	in	r28, 0x3d	; 61
    6b40:	de b7       	in	r29, 0x3e	; 62
    6b42:	2b 97       	sbiw	r28, 0x0b	; 11
    6b44:	cd bf       	out	0x3d, r28	; 61
    6b46:	de bf       	out	0x3e, r29	; 62
    6b48:	8a 87       	std	Y+10, r24	; 0x0a
    6b4a:	6b 87       	std	Y+11, r22	; 0x0b
    l_u16 flag_offset;
    l_u8 flag_size;
    l_u8 i;
    l_u8 associate_frame_offset;
    const lin_frame_t * lin_frame_ptr;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6b4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    6b4e:	28 2f       	mov	r18, r24
    6b50:	30 e0       	ldi	r19, 0x00	; 0
    6b52:	4c e1       	ldi	r20, 0x1C	; 28
    6b54:	42 9f       	mul	r20, r18
    6b56:	c0 01       	movw	r24, r0
    6b58:	43 9f       	mul	r20, r19
    6b5a:	90 0d       	add	r25, r0
    6b5c:	11 24       	eor	r1, r1
    6b5e:	86 56       	subi	r24, 0x66	; 102
    6b60:	9d 4b       	sbci	r25, 0xBD	; 189
    6b62:	8c 83       	std	Y+4, r24	; 0x04
    6b64:	9d 83       	std	Y+5, r25	; 0x05
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frm_id]);
    6b66:	8c 81       	ldd	r24, Y+4	; 0x04
    6b68:	9d 81       	ldd	r25, Y+5	; 0x05
    6b6a:	fc 01       	movw	r30, r24
    6b6c:	26 81       	ldd	r18, Z+6	; 0x06
    6b6e:	37 81       	ldd	r19, Z+7	; 0x07
    6b70:	8b 85       	ldd	r24, Y+11	; 0x0b
    6b72:	88 2f       	mov	r24, r24
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	88 0f       	add	r24, r24
    6b78:	99 1f       	adc	r25, r25
    6b7a:	ac 01       	movw	r20, r24
    6b7c:	44 0f       	add	r20, r20
    6b7e:	55 1f       	adc	r21, r21
    6b80:	44 0f       	add	r20, r20
    6b82:	55 1f       	adc	r21, r21
    6b84:	84 0f       	add	r24, r20
    6b86:	95 1f       	adc	r25, r21
    6b88:	82 0f       	add	r24, r18
    6b8a:	93 1f       	adc	r25, r19
    6b8c:	8e 83       	std	Y+6, r24	; 0x06
    6b8e:	9f 83       	std	Y+7, r25	; 0x07

    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    6b90:	8e 81       	ldd	r24, Y+6	; 0x06
    6b92:	9f 81       	ldd	r25, Y+7	; 0x07
    6b94:	fc 01       	movw	r30, r24
    6b96:	80 81       	ld	r24, Z
    6b98:	88 23       	and	r24, r24
    6b9a:	09 f5       	brne	.+66     	; 0x6bde <lin_update_tx_flags+0xa4>
    {
        flag_offset = lin_frame_ptr->flag_offset;
    6b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    6b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    6ba0:	fc 01       	movw	r30, r24
    6ba2:	85 81       	ldd	r24, Z+5	; 0x05
    6ba4:	96 81       	ldd	r25, Z+6	; 0x06
    6ba6:	89 83       	std	Y+1, r24	; 0x01
    6ba8:	9a 83       	std	Y+2, r25	; 0x02
        flag_size = lin_frame_ptr->flag_size;
    6baa:	8e 81       	ldd	r24, Y+6	; 0x06
    6bac:	9f 81       	ldd	r25, Y+7	; 0x07
    6bae:	fc 01       	movw	r30, r24
    6bb0:	87 81       	ldd	r24, Z+7	; 0x07
    6bb2:	88 87       	std	Y+8, r24	; 0x08
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6bb4:	1b 82       	std	Y+3, r1	; 0x03
    6bb6:	0f c0       	rjmp	.+30     	; 0x6bd6 <lin_update_tx_flags+0x9c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU; //在这里更新flag位，整字节更新
    6bb8:	89 81       	ldd	r24, Y+1	; 0x01
    6bba:	9a 81       	ldd	r25, Y+2	; 0x02
    6bbc:	8c 5d       	subi	r24, 0xDC	; 220
    6bbe:	99 4b       	sbci	r25, 0xB9	; 185
    6bc0:	2f ef       	ldi	r18, 0xFF	; 255
    6bc2:	fc 01       	movw	r30, r24
    6bc4:	20 83       	st	Z, r18
            flag_offset++;
    6bc6:	89 81       	ldd	r24, Y+1	; 0x01
    6bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bca:	01 96       	adiw	r24, 0x01	; 1
    6bcc:	89 83       	std	Y+1, r24	; 0x01
    6bce:	9a 83       	std	Y+2, r25	; 0x02
    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    {
        flag_offset = lin_frame_ptr->flag_offset;
        flag_size = lin_frame_ptr->flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    6bd2:	8f 5f       	subi	r24, 0xFF	; 255
    6bd4:	8b 83       	std	Y+3, r24	; 0x03
    6bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    6bd8:	88 85       	ldd	r24, Y+8	; 0x08
    6bda:	98 17       	cp	r25, r24
    6bdc:	68 f3       	brcs	.-38     	; 0x6bb8 <lin_update_tx_flags+0x7e>
            flag_offset++;
        }
    }

    /* check event trigger frame and clear flag */
    if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    6bde:	8c 81       	ldd	r24, Y+4	; 0x04
    6be0:	9d 81       	ldd	r25, Y+5	; 0x05
    6be2:	fc 01       	movw	r30, r24
    6be4:	26 81       	ldd	r18, Z+6	; 0x06
    6be6:	37 81       	ldd	r19, Z+7	; 0x07
    6be8:	8b 85       	ldd	r24, Y+11	; 0x0b
    6bea:	88 2f       	mov	r24, r24
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	88 0f       	add	r24, r24
    6bf0:	99 1f       	adc	r25, r25
    6bf2:	ac 01       	movw	r20, r24
    6bf4:	44 0f       	add	r20, r20
    6bf6:	55 1f       	adc	r21, r21
    6bf8:	44 0f       	add	r20, r20
    6bfa:	55 1f       	adc	r21, r21
    6bfc:	84 0f       	add	r24, r20
    6bfe:	95 1f       	adc	r25, r21
    6c00:	82 0f       	add	r24, r18
    6c02:	93 1f       	adc	r25, r19
    6c04:	fc 01       	movw	r30, r24
    6c06:	80 81       	ld	r24, Z
    6c08:	81 30       	cpi	r24, 0x01	; 1
    6c0a:	09 f0       	breq	.+2      	; 0x6c0e <lin_update_tx_flags+0xd4>
    6c0c:	4e c0       	rjmp	.+156    	; 0x6caa <lin_update_tx_flags+0x170>
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    6c0e:	8e 81       	ldd	r24, Y+6	; 0x06
    6c10:	9f 81       	ldd	r25, Y+7	; 0x07
    6c12:	fc 01       	movw	r30, r24
    6c14:	80 85       	ldd	r24, Z+8	; 0x08
    6c16:	91 85       	ldd	r25, Z+9	; 0x09
    6c18:	fc 01       	movw	r30, r24
    6c1a:	81 81       	ldd	r24, Z+1	; 0x01
    6c1c:	92 81       	ldd	r25, Z+2	; 0x02
    6c1e:	fc 01       	movw	r30, r24
    6c20:	80 81       	ld	r24, Z
    6c22:	89 87       	std	Y+9, r24	; 0x09
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
    6c24:	8c 81       	ldd	r24, Y+4	; 0x04
    6c26:	9d 81       	ldd	r25, Y+5	; 0x05
    6c28:	fc 01       	movw	r30, r24
    6c2a:	26 81       	ldd	r18, Z+6	; 0x06
    6c2c:	37 81       	ldd	r19, Z+7	; 0x07
    6c2e:	89 85       	ldd	r24, Y+9	; 0x09
    6c30:	88 2f       	mov	r24, r24
    6c32:	90 e0       	ldi	r25, 0x00	; 0
    6c34:	88 0f       	add	r24, r24
    6c36:	99 1f       	adc	r25, r25
    6c38:	ac 01       	movw	r20, r24
    6c3a:	44 0f       	add	r20, r20
    6c3c:	55 1f       	adc	r21, r21
    6c3e:	44 0f       	add	r20, r20
    6c40:	55 1f       	adc	r21, r21
    6c42:	84 0f       	add	r24, r20
    6c44:	95 1f       	adc	r25, r21
    6c46:	82 0f       	add	r24, r18
    6c48:	93 1f       	adc	r25, r19
    6c4a:	fc 01       	movw	r30, r24
    6c4c:	85 81       	ldd	r24, Z+5	; 0x05
    6c4e:	96 81       	ldd	r25, Z+6	; 0x06
    6c50:	89 83       	std	Y+1, r24	; 0x01
    6c52:	9a 83       	std	Y+2, r25	; 0x02
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
    6c54:	8c 81       	ldd	r24, Y+4	; 0x04
    6c56:	9d 81       	ldd	r25, Y+5	; 0x05
    6c58:	fc 01       	movw	r30, r24
    6c5a:	26 81       	ldd	r18, Z+6	; 0x06
    6c5c:	37 81       	ldd	r19, Z+7	; 0x07
    6c5e:	89 85       	ldd	r24, Y+9	; 0x09
    6c60:	88 2f       	mov	r24, r24
    6c62:	90 e0       	ldi	r25, 0x00	; 0
    6c64:	88 0f       	add	r24, r24
    6c66:	99 1f       	adc	r25, r25
    6c68:	ac 01       	movw	r20, r24
    6c6a:	44 0f       	add	r20, r20
    6c6c:	55 1f       	adc	r21, r21
    6c6e:	44 0f       	add	r20, r20
    6c70:	55 1f       	adc	r21, r21
    6c72:	84 0f       	add	r24, r20
    6c74:	95 1f       	adc	r25, r21
    6c76:	82 0f       	add	r24, r18
    6c78:	93 1f       	adc	r25, r19
    6c7a:	fc 01       	movw	r30, r24
    6c7c:	87 81       	ldd	r24, Z+7	; 0x07
    6c7e:	88 87       	std	Y+8, r24	; 0x08
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6c80:	1b 82       	std	Y+3, r1	; 0x03
    6c82:	0f c0       	rjmp	.+30     	; 0x6ca2 <lin_update_tx_flags+0x168>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    6c84:	89 81       	ldd	r24, Y+1	; 0x01
    6c86:	9a 81       	ldd	r25, Y+2	; 0x02
    6c88:	8c 5d       	subi	r24, 0xDC	; 220
    6c8a:	99 4b       	sbci	r25, 0xB9	; 185
    6c8c:	2f ef       	ldi	r18, 0xFF	; 255
    6c8e:	fc 01       	movw	r30, r24
    6c90:	20 83       	st	Z, r18
            flag_offset++;
    6c92:	89 81       	ldd	r24, Y+1	; 0x01
    6c94:	9a 81       	ldd	r25, Y+2	; 0x02
    6c96:	01 96       	adiw	r24, 0x01	; 1
    6c98:	89 83       	std	Y+1, r24	; 0x01
    6c9a:	9a 83       	std	Y+2, r25	; 0x02
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c9e:	8f 5f       	subi	r24, 0xFF	; 255
    6ca0:	8b 83       	std	Y+3, r24	; 0x03
    6ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ca4:	88 85       	ldd	r24, Y+8	; 0x08
    6ca6:	98 17       	cp	r25, r24
    6ca8:	68 f3       	brcs	.-38     	; 0x6c84 <lin_update_tx_flags+0x14a>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
            flag_offset++;
        }
    }
}
    6caa:	00 00       	nop
    6cac:	2b 96       	adiw	r28, 0x0b	; 11
    6cae:	cd bf       	out	0x3d, r28	; 61
    6cb0:	de bf       	out	0x3e, r29	; 62
    6cb2:	df 91       	pop	r29
    6cb4:	cf 91       	pop	r28
    6cb6:	08 95       	ret

00006cb8 <lin_get_frame_index>:
 *
 * Implements    : lin_get_frame_index_Activity
 *END**************************************************************************/
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    6cb8:	cf 93       	push	r28
    6cba:	df 93       	push	r29
    6cbc:	cd b7       	in	r28, 0x3d	; 61
    6cbe:	de b7       	in	r29, 0x3e	; 62
    6cc0:	26 97       	sbiw	r28, 0x06	; 6
    6cc2:	cd bf       	out	0x3d, r28	; 61
    6cc4:	de bf       	out	0x3e, r29	; 62
    6cc6:	8d 83       	std	Y+5, r24	; 0x05
    6cc8:	6e 83       	std	Y+6, r22	; 0x06
    l_u8 i;
    l_u8 retVal = 0xFFU;
    6cca:	8f ef       	ldi	r24, 0xFF	; 255
    6ccc:	8a 83       	std	Y+2, r24	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6cce:	8d 81       	ldd	r24, Y+5	; 0x05
    6cd0:	28 2f       	mov	r18, r24
    6cd2:	30 e0       	ldi	r19, 0x00	; 0
    6cd4:	4c e1       	ldi	r20, 0x1C	; 28
    6cd6:	42 9f       	mul	r20, r18
    6cd8:	c0 01       	movw	r24, r0
    6cda:	43 9f       	mul	r20, r19
    6cdc:	90 0d       	add	r25, r0
    6cde:	11 24       	eor	r1, r1
    6ce0:	86 56       	subi	r24, 0x66	; 102
    6ce2:	9d 4b       	sbci	r25, 0xBD	; 189
    6ce4:	8b 83       	std	Y+3, r24	; 0x03
    6ce6:	9c 83       	std	Y+4, r25	; 0x04

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    6ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    6cea:	9c 81       	ldd	r25, Y+4	; 0x04
    6cec:	fc 01       	movw	r30, r24
    6cee:	84 81       	ldd	r24, Z+4	; 0x04
    6cf0:	89 83       	std	Y+1, r24	; 0x01
    6cf2:	1b c0       	rjmp	.+54     	; 0x6d2a <lin_get_frame_index+0x72>
    {
        if (prot_user_config_ptr->list_identifiers_RAM_ptr[i] == id)
    6cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    6cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    6cf8:	fc 01       	movw	r30, r24
    6cfa:	22 85       	ldd	r18, Z+10	; 0x0a
    6cfc:	33 85       	ldd	r19, Z+11	; 0x0b
    6cfe:	89 81       	ldd	r24, Y+1	; 0x01
    6d00:	88 2f       	mov	r24, r24
    6d02:	90 e0       	ldi	r25, 0x00	; 0
    6d04:	82 0f       	add	r24, r18
    6d06:	93 1f       	adc	r25, r19
    6d08:	fc 01       	movw	r30, r24
    6d0a:	90 81       	ld	r25, Z
    6d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    6d0e:	98 17       	cp	r25, r24
    6d10:	49 f4       	brne	.+18     	; 0x6d24 <lin_get_frame_index+0x6c>
        {
            retVal = (l_u8)(i + prot_user_config_ptr->frame_start - 1U);
    6d12:	8b 81       	ldd	r24, Y+3	; 0x03
    6d14:	9c 81       	ldd	r25, Y+4	; 0x04
    6d16:	fc 01       	movw	r30, r24
    6d18:	95 81       	ldd	r25, Z+5	; 0x05
    6d1a:	89 81       	ldd	r24, Y+1	; 0x01
    6d1c:	89 0f       	add	r24, r25
    6d1e:	81 50       	subi	r24, 0x01	; 1
    6d20:	8a 83       	std	Y+2, r24	; 0x02
            //找到一个就退出
            break;
    6d22:	06 c0       	rjmp	.+12     	; 0x6d30 <lin_get_frame_index+0x78>
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    6d24:	89 81       	ldd	r24, Y+1	; 0x01
    6d26:	81 50       	subi	r24, 0x01	; 1
    6d28:	89 83       	std	Y+1, r24	; 0x01
    6d2a:	89 81       	ldd	r24, Y+1	; 0x01
    6d2c:	88 23       	and	r24, r24
    6d2e:	11 f7       	brne	.-60     	; 0x6cf4 <lin_get_frame_index+0x3c>
            //找到一个就退出
            break;
        }
    }

    return retVal;
    6d30:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6d32:	26 96       	adiw	r28, 0x06	; 6
    6d34:	cd bf       	out	0x3d, r28	; 61
    6d36:	de bf       	out	0x3e, r29	; 62
    6d38:	df 91       	pop	r29
    6d3a:	cf 91       	pop	r28
    6d3c:	08 95       	ret

00006d3e <lin_process_uncd_frame>:
 * Implements    : lin_process_uncd_frame_Activity
 *END**************************************************************************/
void lin_process_uncd_frame(l_ifc_handle iii,
                            l_u8 id,
                            l_u8 type)
{
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	cd b7       	in	r28, 0x3d	; 61
    6d44:	de b7       	in	r29, 0x3e	; 62
    6d46:	60 97       	sbiw	r28, 0x10	; 16
    6d48:	cd bf       	out	0x3d, r28	; 61
    6d4a:	de bf       	out	0x3e, r29	; 62
    6d4c:	8e 87       	std	Y+14, r24	; 0x0e
    6d4e:	6f 87       	std	Y+15, r22	; 0x0f
    6d50:	48 8b       	std	Y+16, r20	; 0x10
    l_u8 frame_index;
    l_u8 * response_buffer_ptr;
    l_u16 frame_byte_offset;
    l_u8 i;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6d52:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d54:	28 2f       	mov	r18, r24
    6d56:	30 e0       	ldi	r19, 0x00	; 0
    6d58:	4c e1       	ldi	r20, 0x1C	; 28
    6d5a:	42 9f       	mul	r20, r18
    6d5c:	c0 01       	movw	r24, r0
    6d5e:	43 9f       	mul	r20, r19
    6d60:	90 0d       	add	r25, r0
    6d62:	11 24       	eor	r1, r1
    6d64:	86 56       	subi	r24, 0x66	; 102
    6d66:	9d 4b       	sbci	r25, 0xBD	; 189
    6d68:	8a 83       	std	Y+2, r24	; 0x02
    6d6a:	9b 83       	std	Y+3, r25	; 0x03
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6d6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d6e:	28 2f       	mov	r18, r24
    6d70:	30 e0       	ldi	r19, 0x00	; 0
    6d72:	46 e1       	ldi	r20, 0x16	; 22
    6d74:	42 9f       	mul	r20, r18
    6d76:	c0 01       	movw	r24, r0
    6d78:	43 9f       	mul	r20, r19
    6d7a:	90 0d       	add	r25, r0
    6d7c:	11 24       	eor	r1, r1
    6d7e:	8f 55       	subi	r24, 0x5F	; 95
    6d80:	99 4b       	sbci	r25, 0xB9	; 185
    6d82:	8c 83       	std	Y+4, r24	; 0x04
    6d84:	9d 83       	std	Y+5, r25	; 0x05
    l_u8 flag;
#endif /* (1U == SUPPORT_SLAVE_MODE) */
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */
    frame_index = lin_get_frame_index(iii, id);
    6d86:	6f 85       	ldd	r22, Y+15	; 0x0f
    6d88:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d8a:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <lin_get_frame_index>
    6d8e:	8e 83       	std	Y+6, r24	; 0x06

    if (0xFFU != frame_index)
    6d90:	8e 81       	ldd	r24, Y+6	; 0x06
    6d92:	8f 3f       	cpi	r24, 0xFF	; 255
    6d94:	09 f4       	brne	.+2      	; 0x6d98 <lin_process_uncd_frame+0x5a>
    6d96:	e7 c0       	rjmp	.+462    	; 0x6f66 <lin_process_uncd_frame+0x228>
    {
        response_buffer_ptr = prot_state_ptr->response_buffer_ptr;
    6d98:	8c 81       	ldd	r24, Y+4	; 0x04
    6d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	82 81       	ldd	r24, Z+2	; 0x02
    6da0:	93 81       	ldd	r25, Z+3	; 0x03
    6da2:	8f 83       	std	Y+7, r24	; 0x07
    6da4:	98 87       	std	Y+8, r25	; 0x08

        /* Set frame length */
        prot_state_ptr->response_length = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_len;  // 长度参数也需要考虑在内
    6da6:	8a 81       	ldd	r24, Y+2	; 0x02
    6da8:	9b 81       	ldd	r25, Y+3	; 0x03
    6daa:	fc 01       	movw	r30, r24
    6dac:	26 81       	ldd	r18, Z+6	; 0x06
    6dae:	37 81       	ldd	r19, Z+7	; 0x07
    6db0:	8e 81       	ldd	r24, Y+6	; 0x06
    6db2:	88 2f       	mov	r24, r24
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	88 0f       	add	r24, r24
    6db8:	99 1f       	adc	r25, r25
    6dba:	ac 01       	movw	r20, r24
    6dbc:	44 0f       	add	r20, r20
    6dbe:	55 1f       	adc	r21, r21
    6dc0:	44 0f       	add	r20, r20
    6dc2:	55 1f       	adc	r21, r21
    6dc4:	84 0f       	add	r24, r20
    6dc6:	95 1f       	adc	r25, r21
    6dc8:	82 0f       	add	r24, r18
    6dca:	93 1f       	adc	r25, r19
    6dcc:	fc 01       	movw	r30, r24
    6dce:	21 81       	ldd	r18, Z+1	; 0x01
    6dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    6dd2:	9d 81       	ldd	r25, Y+5	; 0x05
    6dd4:	fc 01       	movw	r30, r24
    6dd6:	24 83       	std	Z+4, r18	; 0x04
        frame_byte_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_offset;             // frm_offset是啥意思
    6dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    6dda:	9b 81       	ldd	r25, Y+3	; 0x03
    6ddc:	fc 01       	movw	r30, r24
    6dde:	26 81       	ldd	r18, Z+6	; 0x06
    6de0:	37 81       	ldd	r19, Z+7	; 0x07
    6de2:	8e 81       	ldd	r24, Y+6	; 0x06
    6de4:	88 2f       	mov	r24, r24
    6de6:	90 e0       	ldi	r25, 0x00	; 0
    6de8:	88 0f       	add	r24, r24
    6dea:	99 1f       	adc	r25, r25
    6dec:	ac 01       	movw	r20, r24
    6dee:	44 0f       	add	r20, r20
    6df0:	55 1f       	adc	r21, r21
    6df2:	44 0f       	add	r20, r20
    6df4:	55 1f       	adc	r21, r21
    6df6:	84 0f       	add	r24, r20
    6df8:	95 1f       	adc	r25, r21
    6dfa:	82 0f       	add	r24, r18
    6dfc:	93 1f       	adc	r25, r19
    6dfe:	fc 01       	movw	r30, r24
    6e00:	83 81       	ldd	r24, Z+3	; 0x03
    6e02:	94 81       	ldd	r25, Z+4	; 0x04
    6e04:	89 87       	std	Y+9, r24	; 0x09
    6e06:	9a 87       	std	Y+10, r25	; 0x0a

        /* Make unconditional frame */                                                               //
        if (MAKE_UNCONDITIONAL_FRAME == type)                                                        
    6e08:	88 89       	ldd	r24, Y+16	; 0x10
    6e0a:	88 23       	and	r24, r24
    6e0c:	09 f0       	breq	.+2      	; 0x6e10 <lin_process_uncd_frame+0xd2>
    6e0e:	83 c0       	rjmp	.+262    	; 0x6f16 <lin_process_uncd_frame+0x1d8>
        {
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6e10:	8a 81       	ldd	r24, Y+2	; 0x02
    6e12:	9b 81       	ldd	r25, Y+3	; 0x03
    6e14:	fc 01       	movw	r30, r24
    6e16:	93 81       	ldd	r25, Z+3	; 0x03
    6e18:	81 e0       	ldi	r24, 0x01	; 1
    6e1a:	89 27       	eor	r24, r25
    6e1c:	88 23       	and	r24, r24
    6e1e:	09 f4       	brne	.+2      	; 0x6e22 <lin_process_uncd_frame+0xe4>
    6e20:	a2 c0       	rjmp	.+324    	; 0x6f66 <lin_process_uncd_frame+0x228>
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    6e22:	8a 81       	ldd	r24, Y+2	; 0x02
    6e24:	9b 81       	ldd	r25, Y+3	; 0x03
    6e26:	fc 01       	movw	r30, r24
    6e28:	82 89       	ldd	r24, Z+18	; 0x12
    6e2a:	28 2f       	mov	r18, r24
    6e2c:	30 e0       	ldi	r19, 0x00	; 0
    6e2e:	44 e2       	ldi	r20, 0x24	; 36
    6e30:	42 9f       	mul	r20, r18
    6e32:	c0 01       	movw	r24, r0
    6e34:	43 9f       	mul	r20, r19
    6e36:	90 0d       	add	r25, r0
    6e38:	11 24       	eor	r1, r1
    6e3a:	8a 58       	subi	r24, 0x8A	; 138
    6e3c:	9d 4b       	sbci	r25, 0xBD	; 189
    6e3e:	8b 87       	std	Y+11, r24	; 0x0b
    6e40:	9c 87       	std	Y+12, r25	; 0x0c

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    6e42:	19 82       	std	Y+1, r1	; 0x01
    6e44:	18 c0       	rjmp	.+48     	; 0x6e76 <lin_process_uncd_frame+0x138>
                {
                    /* Check if frame contain error signal */
                    if (id == node_attr_ptr->resp_err_frm_id_ptr[i])
    6e46:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e48:	9c 85       	ldd	r25, Y+12	; 0x0c
    6e4a:	fc 01       	movw	r30, r24
    6e4c:	24 85       	ldd	r18, Z+12	; 0x0c
    6e4e:	35 85       	ldd	r19, Z+13	; 0x0d
    6e50:	89 81       	ldd	r24, Y+1	; 0x01
    6e52:	88 2f       	mov	r24, r24
    6e54:	90 e0       	ldi	r25, 0x00	; 0
    6e56:	82 0f       	add	r24, r18
    6e58:	93 1f       	adc	r25, r19
    6e5a:	fc 01       	movw	r30, r24
    6e5c:	90 81       	ld	r25, Z
    6e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6e60:	98 17       	cp	r25, r24
    6e62:	31 f4       	brne	.+12     	; 0x6e70 <lin_process_uncd_frame+0x132>
                    {
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
    6e64:	8c 81       	ldd	r24, Y+4	; 0x04
    6e66:	9d 81       	ldd	r25, Y+5	; 0x05
    6e68:	21 e0       	ldi	r18, 0x01	; 1
    6e6a:	fc 01       	movw	r30, r24
    6e6c:	25 8b       	std	Z+21, r18	; 0x15
                        break;
    6e6e:	0a c0       	rjmp	.+20     	; 0x6e84 <lin_process_uncd_frame+0x146>
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    6e70:	89 81       	ldd	r24, Y+1	; 0x01
    6e72:	8f 5f       	subi	r24, 0xFF	; 255
    6e74:	89 83       	std	Y+1, r24	; 0x01
    6e76:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e78:	9c 85       	ldd	r25, Y+12	; 0x0c
    6e7a:	fc 01       	movw	r30, r24
    6e7c:	96 85       	ldd	r25, Z+14	; 0x0e
    6e7e:	89 81       	ldd	r24, Y+1	; 0x01
    6e80:	89 17       	cp	r24, r25
    6e82:	08 f3       	brcs	.-62     	; 0x6e46 <lin_process_uncd_frame+0x108>
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
                        break;
                    }
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];
    6e84:	8e 81       	ldd	r24, Y+6	; 0x06
    6e86:	88 2f       	mov	r24, r24
    6e88:	90 e0       	ldi	r25, 0x00	; 0
    6e8a:	85 5d       	subi	r24, 0xD5	; 213
    6e8c:	99 4b       	sbci	r25, 0xB9	; 185
    6e8e:	fc 01       	movw	r30, r24
    6e90:	80 81       	ld	r24, Z
    6e92:	8d 87       	std	Y+13, r24	; 0x0d

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6e94:	19 82       	std	Y+1, r1	; 0x01
    6e96:	37 c0       	rjmp	.+110    	; 0x6f06 <lin_process_uncd_frame+0x1c8>
                {
                    if((flag & (1U << i)) != 0U)
    6e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e9a:	88 2f       	mov	r24, r24
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	29 81       	ldd	r18, Y+1	; 0x01
    6ea0:	22 2f       	mov	r18, r18
    6ea2:	30 e0       	ldi	r19, 0x00	; 0
    6ea4:	02 c0       	rjmp	.+4      	; 0x6eaa <lin_process_uncd_frame+0x16c>
    6ea6:	96 95       	lsr	r25
    6ea8:	87 95       	ror	r24
    6eaa:	2a 95       	dec	r18
    6eac:	e2 f7       	brpl	.-8      	; 0x6ea6 <lin_process_uncd_frame+0x168>
    6eae:	81 70       	andi	r24, 0x01	; 1
    6eb0:	99 27       	eor	r25, r25
    6eb2:	89 2b       	or	r24, r25
    6eb4:	89 f0       	breq	.+34     	; 0x6ed8 <lin_process_uncd_frame+0x19a>
                    {
                        response_buffer_ptr[i] = g_buffer_backup_data[i];
    6eb6:	89 81       	ldd	r24, Y+1	; 0x01
    6eb8:	88 2f       	mov	r24, r24
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	2f 81       	ldd	r18, Y+7	; 0x07
    6ebe:	38 85       	ldd	r19, Y+8	; 0x08
    6ec0:	82 0f       	add	r24, r18
    6ec2:	93 1f       	adc	r25, r19
    6ec4:	29 81       	ldd	r18, Y+1	; 0x01
    6ec6:	22 2f       	mov	r18, r18
    6ec8:	30 e0       	ldi	r19, 0x00	; 0
    6eca:	24 5e       	subi	r18, 0xE4	; 228
    6ecc:	39 4b       	sbci	r19, 0xB9	; 185
    6ece:	f9 01       	movw	r30, r18
    6ed0:	20 81       	ld	r18, Z
    6ed2:	fc 01       	movw	r30, r24
    6ed4:	20 83       	st	Z, r18
    6ed6:	14 c0       	rjmp	.+40     	; 0x6f00 <lin_process_uncd_frame+0x1c2>
                    }
                    else
                    {
                        response_buffer_ptr[i] = g_lin_frame_data_buffer[frame_byte_offset + i];
    6ed8:	89 81       	ldd	r24, Y+1	; 0x01
    6eda:	88 2f       	mov	r24, r24
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	2f 81       	ldd	r18, Y+7	; 0x07
    6ee0:	38 85       	ldd	r19, Y+8	; 0x08
    6ee2:	82 0f       	add	r24, r18
    6ee4:	93 1f       	adc	r25, r19
    6ee6:	29 81       	ldd	r18, Y+1	; 0x01
    6ee8:	42 2f       	mov	r20, r18
    6eea:	50 e0       	ldi	r21, 0x00	; 0
    6eec:	29 85       	ldd	r18, Y+9	; 0x09
    6eee:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ef0:	24 0f       	add	r18, r20
    6ef2:	35 1f       	adc	r19, r21
    6ef4:	23 54       	subi	r18, 0x43	; 67
    6ef6:	3f 4b       	sbci	r19, 0xBF	; 191
    6ef8:	f9 01       	movw	r30, r18
    6efa:	20 81       	ld	r18, Z
    6efc:	fc 01       	movw	r30, r24
    6efe:	20 83       	st	Z, r18
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6f00:	89 81       	ldd	r24, Y+1	; 0x01
    6f02:	8f 5f       	subi	r24, 0xFF	; 255
    6f04:	89 83       	std	Y+1, r24	; 0x01
    6f06:	8c 81       	ldd	r24, Y+4	; 0x04
    6f08:	9d 81       	ldd	r25, Y+5	; 0x05
    6f0a:	fc 01       	movw	r30, r24
    6f0c:	94 81       	ldd	r25, Z+4	; 0x04
    6f0e:	89 81       	ldd	r24, Y+1	; 0x01
    6f10:	89 17       	cp	r24, r25
    6f12:	10 f2       	brcs	.-124    	; 0x6e98 <lin_process_uncd_frame+0x15a>
                }
            }
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }
    }
}
    6f14:	28 c0       	rjmp	.+80     	; 0x6f66 <lin_process_uncd_frame+0x228>
            }
        }
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6f16:	8a 81       	ldd	r24, Y+2	; 0x02
    6f18:	9b 81       	ldd	r25, Y+3	; 0x03
    6f1a:	fc 01       	movw	r30, r24
    6f1c:	93 81       	ldd	r25, Z+3	; 0x03
    6f1e:	81 e0       	ldi	r24, 0x01	; 1
    6f20:	89 27       	eor	r24, r25
    6f22:	88 23       	and	r24, r24
    6f24:	01 f1       	breq	.+64     	; 0x6f66 <lin_process_uncd_frame+0x228>
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6f26:	19 82       	std	Y+1, r1	; 0x01
    6f28:	17 c0       	rjmp	.+46     	; 0x6f58 <lin_process_uncd_frame+0x21a>
                {
                    g_lin_frame_data_buffer[frame_byte_offset + i] = response_buffer_ptr[i];
    6f2a:	89 81       	ldd	r24, Y+1	; 0x01
    6f2c:	28 2f       	mov	r18, r24
    6f2e:	30 e0       	ldi	r19, 0x00	; 0
    6f30:	89 85       	ldd	r24, Y+9	; 0x09
    6f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f34:	82 0f       	add	r24, r18
    6f36:	93 1f       	adc	r25, r19
    6f38:	29 81       	ldd	r18, Y+1	; 0x01
    6f3a:	22 2f       	mov	r18, r18
    6f3c:	30 e0       	ldi	r19, 0x00	; 0
    6f3e:	4f 81       	ldd	r20, Y+7	; 0x07
    6f40:	58 85       	ldd	r21, Y+8	; 0x08
    6f42:	24 0f       	add	r18, r20
    6f44:	35 1f       	adc	r19, r21
    6f46:	f9 01       	movw	r30, r18
    6f48:	20 81       	ld	r18, Z
    6f4a:	83 54       	subi	r24, 0x43	; 67
    6f4c:	9f 4b       	sbci	r25, 0xBF	; 191
    6f4e:	fc 01       	movw	r30, r24
    6f50:	20 83       	st	Z, r18
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6f52:	89 81       	ldd	r24, Y+1	; 0x01
    6f54:	8f 5f       	subi	r24, 0xFF	; 255
    6f56:	89 83       	std	Y+1, r24	; 0x01
    6f58:	8c 81       	ldd	r24, Y+4	; 0x04
    6f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    6f5c:	fc 01       	movw	r30, r24
    6f5e:	94 81       	ldd	r25, Z+4	; 0x04
    6f60:	89 81       	ldd	r24, Y+1	; 0x01
    6f62:	89 17       	cp	r24, r25
    6f64:	10 f3       	brcs	.-60     	; 0x6f2a <lin_process_uncd_frame+0x1ec>
                }
            }
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }
    }
}
    6f66:	00 00       	nop
    6f68:	60 96       	adiw	r28, 0x10	; 16
    6f6a:	cd bf       	out	0x3d, r28	; 61
    6f6c:	de bf       	out	0x3e, r29	; 62
    6f6e:	df 91       	pop	r29
    6f70:	cf 91       	pop	r28
    6f72:	08 95       	ret

00006f74 <lin_update_word_status_j2602>:
 * Description   : Update date word status.
 *
 * Implements    : lin_update_word_status_j2602_Activity
 *END**************************************************************************/
void lin_update_word_status_j2602(l_ifc_handle iii)
{
    6f74:	cf 93       	push	r28
    6f76:	df 93       	push	r29
    6f78:	cd b7       	in	r28, 0x3d	; 61
    6f7a:	de b7       	in	r29, 0x3e	; 62
    6f7c:	28 97       	sbiw	r28, 0x08	; 8
    6f7e:	cd bf       	out	0x3d, r28	; 61
    6f80:	de bf       	out	0x3e, r29	; 62
    6f82:	88 87       	std	Y+8, r24	; 0x08
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 overrun_flg;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6f84:	88 85       	ldd	r24, Y+8	; 0x08
    6f86:	28 2f       	mov	r18, r24
    6f88:	30 e0       	ldi	r19, 0x00	; 0
    6f8a:	46 e1       	ldi	r20, 0x16	; 22
    6f8c:	42 9f       	mul	r20, r18
    6f8e:	c0 01       	movw	r24, r0
    6f90:	43 9f       	mul	r20, r19
    6f92:	90 0d       	add	r25, r0
    6f94:	11 24       	eor	r1, r1
    6f96:	8f 55       	subi	r24, 0x5F	; 95
    6f98:	99 4b       	sbci	r25, 0xB9	; 185
    6f9a:	89 83       	std	Y+1, r24	; 0x01
    6f9c:	9a 83       	std	Y+2, r25	; 0x02

    err_in_res = prot_state_ptr->error_in_response;
    6f9e:	89 81       	ldd	r24, Y+1	; 0x01
    6fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fa2:	fc 01       	movw	r30, r24
    6fa4:	86 81       	ldd	r24, Z+6	; 0x06
    6fa6:	8b 83       	std	Y+3, r24	; 0x03
    prot_state_ptr->error_in_response = 0;
    6fa8:	89 81       	ldd	r24, Y+1	; 0x01
    6faa:	9a 81       	ldd	r25, Y+2	; 0x02
    6fac:	fc 01       	movw	r30, r24
    6fae:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    6fb0:	89 81       	ldd	r24, Y+1	; 0x01
    6fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    6fb4:	fc 01       	movw	r30, r24
    6fb6:	85 81       	ldd	r24, Z+5	; 0x05
    6fb8:	8c 83       	std	Y+4, r24	; 0x04
    overrun_flg = prot_state_ptr->overrun_flg;
    6fba:	89 81       	ldd	r24, Y+1	; 0x01
    6fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	83 85       	ldd	r24, Z+11	; 0x0b
    6fc2:	8d 83       	std	Y+5, r24	; 0x05

    word_status_ptr = &prot_state_ptr->word_status;
    6fc4:	89 81       	ldd	r24, Y+1	; 0x01
    6fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    6fc8:	0c 96       	adiw	r24, 0x0c	; 12
    6fca:	8e 83       	std	Y+6, r24	; 0x06
    6fcc:	9f 83       	std	Y+7, r25	; 0x07

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    6fce:	8e 81       	ldd	r24, Y+6	; 0x06
    6fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    6fd2:	fc 01       	movw	r30, r24
    6fd4:	80 81       	ld	r24, Z
    6fd6:	81 70       	andi	r24, 0x01	; 1
    6fd8:	98 2f       	mov	r25, r24
    6fda:	8b 81       	ldd	r24, Y+3	; 0x03
    6fdc:	89 2b       	or	r24, r25
    6fde:	28 2f       	mov	r18, r24
    6fe0:	21 70       	andi	r18, 0x01	; 1
    6fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    6fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    6fe6:	21 70       	andi	r18, 0x01	; 1
    6fe8:	fc 01       	movw	r30, r24
    6fea:	30 81       	ld	r19, Z
    6fec:	3e 7f       	andi	r19, 0xFE	; 254
    6fee:	23 2b       	or	r18, r19
    6ff0:	fc 01       	movw	r30, r24
    6ff2:	20 83       	st	Z, r18
    word_status_ptr->successful_transfer |= suc_in_tras;
    6ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    6ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    6ff8:	fc 01       	movw	r30, r24
    6ffa:	80 81       	ld	r24, Z
    6ffc:	86 95       	lsr	r24
    6ffe:	81 70       	andi	r24, 0x01	; 1
    7000:	98 2f       	mov	r25, r24
    7002:	8c 81       	ldd	r24, Y+4	; 0x04
    7004:	89 2b       	or	r24, r25
    7006:	28 2f       	mov	r18, r24
    7008:	21 70       	andi	r18, 0x01	; 1
    700a:	8e 81       	ldd	r24, Y+6	; 0x06
    700c:	9f 81       	ldd	r25, Y+7	; 0x07
    700e:	21 70       	andi	r18, 0x01	; 1
    7010:	22 0f       	add	r18, r18
    7012:	fc 01       	movw	r30, r24
    7014:	30 81       	ld	r19, Z
    7016:	3d 7f       	andi	r19, 0xFD	; 253
    7018:	23 2b       	or	r18, r19
    701a:	fc 01       	movw	r30, r24
    701c:	20 83       	st	Z, r18


    word_status_ptr->overrun = overrun_flg;
    701e:	8d 81       	ldd	r24, Y+5	; 0x05
    7020:	28 2f       	mov	r18, r24
    7022:	21 70       	andi	r18, 0x01	; 1
    7024:	8e 81       	ldd	r24, Y+6	; 0x06
    7026:	9f 81       	ldd	r25, Y+7	; 0x07
    7028:	21 70       	andi	r18, 0x01	; 1
    702a:	22 0f       	add	r18, r18
    702c:	22 0f       	add	r18, r18
    702e:	fc 01       	movw	r30, r24
    7030:	30 81       	ld	r19, Z
    7032:	3b 7f       	andi	r19, 0xFB	; 251
    7034:	23 2b       	or	r18, r19
    7036:	fc 01       	movw	r30, r24
    7038:	20 83       	st	Z, r18
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    703a:	89 81       	ldd	r24, Y+1	; 0x01
    703c:	9a 81       	ldd	r25, Y+2	; 0x02
    703e:	fc 01       	movw	r30, r24
    7040:	21 85       	ldd	r18, Z+9	; 0x09
    7042:	8e 81       	ldd	r24, Y+6	; 0x06
    7044:	9f 81       	ldd	r25, Y+7	; 0x07
    7046:	fc 01       	movw	r30, r24
    7048:	21 83       	std	Z+1, r18	; 0x01

    if(prot_state_ptr->go_to_sleep_flg == true)
    704a:	89 81       	ldd	r24, Y+1	; 0x01
    704c:	9a 81       	ldd	r25, Y+2	; 0x02
    704e:	fc 01       	movw	r30, r24
    7050:	87 81       	ldd	r24, Z+7	; 0x07
    7052:	88 23       	and	r24, r24
    7054:	39 f0       	breq	.+14     	; 0x7064 <lin_update_word_status_j2602+0xf0>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    7056:	8e 81       	ldd	r24, Y+6	; 0x06
    7058:	9f 81       	ldd	r25, Y+7	; 0x07
    705a:	fc 01       	movw	r30, r24
    705c:	20 81       	ld	r18, Z
    705e:	28 60       	ori	r18, 0x08	; 8
    7060:	fc 01       	movw	r30, r24
    7062:	20 83       	st	Z, r18
    }
}
    7064:	00 00       	nop
    7066:	28 96       	adiw	r28, 0x08	; 8
    7068:	cd bf       	out	0x3d, r28	; 61
    706a:	de bf       	out	0x3e, r29	; 62
    706c:	df 91       	pop	r29
    706e:	cf 91       	pop	r28
    7070:	08 95       	ret

00007072 <lin_update_word_status_lin21>:
 *
 * Implements    : lin_update_word_status_lin21_Activity
 *END**************************************************************************/
void lin_update_word_status_lin21(l_ifc_handle iii,
                                  lin_lld_event_id_t event_id)
{
    7072:	cf 93       	push	r28
    7074:	df 93       	push	r29
    7076:	cd b7       	in	r28, 0x3d	; 61
    7078:	de b7       	in	r29, 0x3e	; 62
    707a:	2a 97       	sbiw	r28, 0x0a	; 10
    707c:	cd bf       	out	0x3d, r28	; 61
    707e:	de bf       	out	0x3e, r29	; 62
    7080:	89 87       	std	Y+9, r24	; 0x09
    7082:	6a 87       	std	Y+10, r22	; 0x0a
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 save_config;
    l_u8 overrun_flag;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    7084:	89 85       	ldd	r24, Y+9	; 0x09
    7086:	28 2f       	mov	r18, r24
    7088:	30 e0       	ldi	r19, 0x00	; 0
    708a:	46 e1       	ldi	r20, 0x16	; 22
    708c:	42 9f       	mul	r20, r18
    708e:	c0 01       	movw	r24, r0
    7090:	43 9f       	mul	r20, r19
    7092:	90 0d       	add	r25, r0
    7094:	11 24       	eor	r1, r1
    7096:	8f 55       	subi	r24, 0x5F	; 95
    7098:	99 4b       	sbci	r25, 0xB9	; 185
    709a:	89 83       	std	Y+1, r24	; 0x01
    709c:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_master_data_t * master_data_ptr;
    l_u8 active_schedule_id;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    err_in_res = prot_state_ptr->error_in_response;
    709e:	89 81       	ldd	r24, Y+1	; 0x01
    70a0:	9a 81       	ldd	r25, Y+2	; 0x02
    70a2:	fc 01       	movw	r30, r24
    70a4:	86 81       	ldd	r24, Z+6	; 0x06
    70a6:	8b 83       	std	Y+3, r24	; 0x03
    prot_state_ptr->error_in_response = 0;
    70a8:	89 81       	ldd	r24, Y+1	; 0x01
    70aa:	9a 81       	ldd	r25, Y+2	; 0x02
    70ac:	fc 01       	movw	r30, r24
    70ae:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    70b0:	89 81       	ldd	r24, Y+1	; 0x01
    70b2:	9a 81       	ldd	r25, Y+2	; 0x02
    70b4:	fc 01       	movw	r30, r24
    70b6:	85 81       	ldd	r24, Z+5	; 0x05
    70b8:	8c 83       	std	Y+4, r24	; 0x04
    /* use of ternary operator below is for being MISRA compliant */
    save_config = (l_u8)(prot_state_ptr->save_config_flg ? 1U : 0U);
    70ba:	89 81       	ldd	r24, Y+1	; 0x01
    70bc:	9a 81       	ldd	r25, Y+2	; 0x02
    70be:	fc 01       	movw	r30, r24
    70c0:	87 85       	ldd	r24, Z+15	; 0x0f
    70c2:	88 23       	and	r24, r24
    70c4:	11 f0       	breq	.+4      	; 0x70ca <lin_update_word_status_lin21+0x58>
    70c6:	81 e0       	ldi	r24, 0x01	; 1
    70c8:	01 c0       	rjmp	.+2      	; 0x70cc <lin_update_word_status_lin21+0x5a>
    70ca:	80 e0       	ldi	r24, 0x00	; 0
    70cc:	8d 83       	std	Y+5, r24	; 0x05
    overrun_flag = prot_state_ptr->overrun_flg;
    70ce:	89 81       	ldd	r24, Y+1	; 0x01
    70d0:	9a 81       	ldd	r25, Y+2	; 0x02
    70d2:	fc 01       	movw	r30, r24
    70d4:	83 85       	ldd	r24, Z+11	; 0x0b
    70d6:	8e 83       	std	Y+6, r24	; 0x06

    word_status_ptr = &prot_state_ptr->word_status;
    70d8:	89 81       	ldd	r24, Y+1	; 0x01
    70da:	9a 81       	ldd	r25, Y+2	; 0x02
    70dc:	0c 96       	adiw	r24, 0x0c	; 12
    70de:	8f 83       	std	Y+7, r24	; 0x07
    70e0:	98 87       	std	Y+8, r25	; 0x08
    word_status_ptr->overrun = overrun_flag;
    70e2:	8e 81       	ldd	r24, Y+6	; 0x06
    70e4:	28 2f       	mov	r18, r24
    70e6:	21 70       	andi	r18, 0x01	; 1
    70e8:	8f 81       	ldd	r24, Y+7	; 0x07
    70ea:	98 85       	ldd	r25, Y+8	; 0x08
    70ec:	21 70       	andi	r18, 0x01	; 1
    70ee:	22 0f       	add	r18, r18
    70f0:	22 0f       	add	r18, r18
    70f2:	fc 01       	movw	r30, r24
    70f4:	30 81       	ld	r19, Z
    70f6:	3b 7f       	andi	r19, 0xFB	; 251
    70f8:	23 2b       	or	r18, r19
    70fa:	fc 01       	movw	r30, r24
    70fc:	20 83       	st	Z, r18

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    70fe:	8f 81       	ldd	r24, Y+7	; 0x07
    7100:	98 85       	ldd	r25, Y+8	; 0x08
    7102:	fc 01       	movw	r30, r24
    7104:	80 81       	ld	r24, Z
    7106:	81 70       	andi	r24, 0x01	; 1
    7108:	98 2f       	mov	r25, r24
    710a:	8b 81       	ldd	r24, Y+3	; 0x03
    710c:	89 2b       	or	r24, r25
    710e:	28 2f       	mov	r18, r24
    7110:	21 70       	andi	r18, 0x01	; 1
    7112:	8f 81       	ldd	r24, Y+7	; 0x07
    7114:	98 85       	ldd	r25, Y+8	; 0x08
    7116:	21 70       	andi	r18, 0x01	; 1
    7118:	fc 01       	movw	r30, r24
    711a:	30 81       	ld	r19, Z
    711c:	3e 7f       	andi	r19, 0xFE	; 254
    711e:	23 2b       	or	r18, r19
    7120:	fc 01       	movw	r30, r24
    7122:	20 83       	st	Z, r18
    word_status_ptr->successful_transfer |= suc_in_tras;
    7124:	8f 81       	ldd	r24, Y+7	; 0x07
    7126:	98 85       	ldd	r25, Y+8	; 0x08
    7128:	fc 01       	movw	r30, r24
    712a:	80 81       	ld	r24, Z
    712c:	86 95       	lsr	r24
    712e:	81 70       	andi	r24, 0x01	; 1
    7130:	98 2f       	mov	r25, r24
    7132:	8c 81       	ldd	r24, Y+4	; 0x04
    7134:	89 2b       	or	r24, r25
    7136:	28 2f       	mov	r18, r24
    7138:	21 70       	andi	r18, 0x01	; 1
    713a:	8f 81       	ldd	r24, Y+7	; 0x07
    713c:	98 85       	ldd	r25, Y+8	; 0x08
    713e:	21 70       	andi	r18, 0x01	; 1
    7140:	22 0f       	add	r18, r18
    7142:	fc 01       	movw	r30, r24
    7144:	30 81       	ld	r19, Z
    7146:	3d 7f       	andi	r19, 0xFD	; 253
    7148:	23 2b       	or	r18, r19
    714a:	fc 01       	movw	r30, r24
    714c:	20 83       	st	Z, r18
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    714e:	89 81       	ldd	r24, Y+1	; 0x01
    7150:	9a 81       	ldd	r25, Y+2	; 0x02
    7152:	fc 01       	movw	r30, r24
    7154:	21 85       	ldd	r18, Z+9	; 0x09
    7156:	8f 81       	ldd	r24, Y+7	; 0x07
    7158:	98 85       	ldd	r25, Y+8	; 0x08
    715a:	fc 01       	movw	r30, r24
    715c:	21 83       	std	Z+1, r18	; 0x01

    if(prot_state_ptr->go_to_sleep_flg == true)
    715e:	89 81       	ldd	r24, Y+1	; 0x01
    7160:	9a 81       	ldd	r25, Y+2	; 0x02
    7162:	fc 01       	movw	r30, r24
    7164:	87 81       	ldd	r24, Z+7	; 0x07
    7166:	88 23       	and	r24, r24
    7168:	39 f0       	breq	.+14     	; 0x7178 <lin_update_word_status_lin21+0x106>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    716a:	8f 81       	ldd	r24, Y+7	; 0x07
    716c:	98 85       	ldd	r25, Y+8	; 0x08
    716e:	fc 01       	movw	r30, r24
    7170:	20 81       	ld	r18, Z
    7172:	28 60       	ori	r18, 0x08	; 8
    7174:	fc 01       	movw	r30, r24
    7176:	20 83       	st	Z, r18
    }

    if(LIN_LLD_BUS_ACTIVITY_TIMEOUT != event_id)
    7178:	8a 85       	ldd	r24, Y+10	; 0x0a
    717a:	88 30       	cpi	r24, 0x08	; 8
    717c:	39 f0       	breq	.+14     	; 0x718c <lin_update_word_status_lin21+0x11a>
    {
        /* Set bus activity timeout */
        word_status_ptr->bus_activity = 1U;
    717e:	8f 81       	ldd	r24, Y+7	; 0x07
    7180:	98 85       	ldd	r25, Y+8	; 0x08
    7182:	fc 01       	movw	r30, r24
    7184:	20 81       	ld	r18, Z
    7186:	20 61       	ori	r18, 0x10	; 16
    7188:	fc 01       	movw	r30, r24
    718a:	20 83       	st	Z, r18
    }
    else
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* For Slave node - using ternary operator is a workaround for MISRA */
        word_status_ptr->event_trigger_collision_flg = 0U;
    718c:	8f 81       	ldd	r24, Y+7	; 0x07
    718e:	98 85       	ldd	r25, Y+8	; 0x08
    7190:	fc 01       	movw	r30, r24
    7192:	20 81       	ld	r18, Z
    7194:	2f 7d       	andi	r18, 0xDF	; 223
    7196:	fc 01       	movw	r30, r24
    7198:	20 83       	st	Z, r18
        /* Updated save configuration value to word status */
        word_status_ptr->save_config_flg = save_config;
    719a:	8d 81       	ldd	r24, Y+5	; 0x05
    719c:	28 2f       	mov	r18, r24
    719e:	21 70       	andi	r18, 0x01	; 1
    71a0:	8f 81       	ldd	r24, Y+7	; 0x07
    71a2:	98 85       	ldd	r25, Y+8	; 0x08
    71a4:	21 70       	andi	r18, 0x01	; 1
    71a6:	22 95       	swap	r18
    71a8:	22 0f       	add	r18, r18
    71aa:	22 0f       	add	r18, r18
    71ac:	20 7c       	andi	r18, 0xC0	; 192
    71ae:	fc 01       	movw	r30, r24
    71b0:	30 81       	ld	r19, Z
    71b2:	3f 7b       	andi	r19, 0xBF	; 191
    71b4:	23 2b       	or	r18, r19
    71b6:	fc 01       	movw	r30, r24
    71b8:	20 83       	st	Z, r18
        word_status_ptr->reserved = 0U;
    71ba:	8f 81       	ldd	r24, Y+7	; 0x07
    71bc:	98 85       	ldd	r25, Y+8	; 0x08
    71be:	fc 01       	movw	r30, r24
    71c0:	20 81       	ld	r18, Z
    71c2:	2f 77       	andi	r18, 0x7F	; 127
    71c4:	fc 01       	movw	r30, r24
    71c6:	20 83       	st	Z, r18
    }
}
    71c8:	00 00       	nop
    71ca:	2a 96       	adiw	r28, 0x0a	; 10
    71cc:	cd bf       	out	0x3d, r28	; 61
    71ce:	de bf       	out	0x3e, r29	; 62
    71d0:	df 91       	pop	r29
    71d2:	cf 91       	pop	r28
    71d4:	08 95       	ret

000071d6 <lin_update_err_signal>:
 *
 * Implements    : lin_update_err_signal_Activity
 *END**************************************************************************/
void lin_update_err_signal(l_ifc_handle iii,
                           l_u8 frm_id)
{
    71d6:	cf 93       	push	r28
    71d8:	df 93       	push	r29
    71da:	cd b7       	in	r28, 0x3d	; 61
    71dc:	de b7       	in	r29, 0x3e	; 62
    71de:	2c 97       	sbiw	r28, 0x0c	; 12
    71e0:	cd bf       	out	0x3d, r28	; 61
    71e2:	de bf       	out	0x3e, r29	; 62
    71e4:	8b 87       	std	Y+11, r24	; 0x0b
    71e6:	6c 87       	std	Y+12, r22	; 0x0c
    l_u8 i;
    const l_u16* byte_offset_temp_ptr;
    const l_u8* bit_offset_temp_ptr;
    l_u8 err_in_res = g_lin_protocol_state_array[iii].error_in_response;
    71e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    71ea:	28 2f       	mov	r18, r24
    71ec:	30 e0       	ldi	r19, 0x00	; 0
    71ee:	46 e1       	ldi	r20, 0x16	; 22
    71f0:	42 9f       	mul	r20, r18
    71f2:	c0 01       	movw	r24, r0
    71f4:	43 9f       	mul	r20, r19
    71f6:	90 0d       	add	r25, r0
    71f8:	11 24       	eor	r1, r1
    71fa:	89 55       	subi	r24, 0x59	; 89
    71fc:	99 4b       	sbci	r25, 0xB9	; 185
    71fe:	fc 01       	movw	r30, r24
    7200:	80 81       	ld	r24, Z
    7202:	8a 83       	std	Y+2, r24	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    7204:	8b 85       	ldd	r24, Y+11	; 0x0b
    7206:	28 2f       	mov	r18, r24
    7208:	30 e0       	ldi	r19, 0x00	; 0
    720a:	4c e1       	ldi	r20, 0x1C	; 28
    720c:	42 9f       	mul	r20, r18
    720e:	c0 01       	movw	r24, r0
    7210:	43 9f       	mul	r20, r19
    7212:	90 0d       	add	r25, r0
    7214:	11 24       	eor	r1, r1
    7216:	86 56       	subi	r24, 0x66	; 102
    7218:	9d 4b       	sbci	r25, 0xBD	; 189
    721a:	8b 83       	std	Y+3, r24	; 0x03
    721c:	9c 83       	std	Y+4, r25	; 0x04
    const lin_node_attribute_t * node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    721e:	8b 81       	ldd	r24, Y+3	; 0x03
    7220:	9c 81       	ldd	r25, Y+4	; 0x04
    7222:	fc 01       	movw	r30, r24
    7224:	82 89       	ldd	r24, Z+18	; 0x12
    7226:	28 2f       	mov	r18, r24
    7228:	30 e0       	ldi	r19, 0x00	; 0
    722a:	44 e2       	ldi	r20, 0x24	; 36
    722c:	42 9f       	mul	r20, r18
    722e:	c0 01       	movw	r24, r0
    7230:	43 9f       	mul	r20, r19
    7232:	90 0d       	add	r25, r0
    7234:	11 24       	eor	r1, r1
    7236:	8a 58       	subi	r24, 0x8A	; 138
    7238:	9d 4b       	sbci	r25, 0xBD	; 189
    723a:	8d 83       	std	Y+5, r24	; 0x05
    723c:	9e 83       	std	Y+6, r25	; 0x06

    if (frm_id < LIN_NUM_OF_FRMS)
    723e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7240:	84 30       	cpi	r24, 0x04	; 4
    7242:	08 f0       	brcs	.+2      	; 0x7246 <lin_update_err_signal+0x70>
    7244:	6f c0       	rjmp	.+222    	; 0x7324 <lin_update_err_signal+0x14e>
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    7246:	8b 81       	ldd	r24, Y+3	; 0x03
    7248:	9c 81       	ldd	r25, Y+4	; 0x04
    724a:	fc 01       	movw	r30, r24
    724c:	26 81       	ldd	r18, Z+6	; 0x06
    724e:	37 81       	ldd	r19, Z+7	; 0x07
    7250:	8c 85       	ldd	r24, Y+12	; 0x0c
    7252:	88 2f       	mov	r24, r24
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	88 0f       	add	r24, r24
    7258:	99 1f       	adc	r25, r25
    725a:	ac 01       	movw	r20, r24
    725c:	44 0f       	add	r20, r20
    725e:	55 1f       	adc	r21, r21
    7260:	44 0f       	add	r20, r20
    7262:	55 1f       	adc	r21, r21
    7264:	84 0f       	add	r24, r20
    7266:	95 1f       	adc	r25, r21
    7268:	82 0f       	add	r24, r18
    726a:	93 1f       	adc	r25, r19
    726c:	fc 01       	movw	r30, r24
    726e:	80 81       	ld	r24, Z
    7270:	81 30       	cpi	r24, 0x01	; 1
    7272:	09 f4       	brne	.+2      	; 0x7276 <lin_update_err_signal+0xa0>
    7274:	57 c0       	rjmp	.+174    	; 0x7324 <lin_update_err_signal+0x14e>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
    7276:	19 82       	std	Y+1, r1	; 0x01
    7278:	4d c0       	rjmp	.+154    	; 0x7314 <lin_update_err_signal+0x13e>
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
    727a:	8d 81       	ldd	r24, Y+5	; 0x05
    727c:	9e 81       	ldd	r25, Y+6	; 0x06
    727e:	fc 01       	movw	r30, r24
    7280:	20 89       	ldd	r18, Z+16	; 0x10
    7282:	31 89       	ldd	r19, Z+17	; 0x11
    7284:	89 81       	ldd	r24, Y+1	; 0x01
    7286:	88 2f       	mov	r24, r24
    7288:	90 e0       	ldi	r25, 0x00	; 0
    728a:	88 0f       	add	r24, r24
    728c:	99 1f       	adc	r25, r25
    728e:	82 0f       	add	r24, r18
    7290:	93 1f       	adc	r25, r19
    7292:	8f 83       	std	Y+7, r24	; 0x07
    7294:	98 87       	std	Y+8, r25	; 0x08
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
    7296:	8d 81       	ldd	r24, Y+5	; 0x05
    7298:	9e 81       	ldd	r25, Y+6	; 0x06
    729a:	fc 01       	movw	r30, r24
    729c:	22 89       	ldd	r18, Z+18	; 0x12
    729e:	33 89       	ldd	r19, Z+19	; 0x13
    72a0:	89 81       	ldd	r24, Y+1	; 0x01
    72a2:	88 2f       	mov	r24, r24
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	82 0f       	add	r24, r18
    72a8:	93 1f       	adc	r25, r19
    72aa:	89 87       	std	Y+9, r24	; 0x09
    72ac:	9a 87       	std	Y+10, r25	; 0x0a
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    72ae:	8f 81       	ldd	r24, Y+7	; 0x07
    72b0:	98 85       	ldd	r25, Y+8	; 0x08
    72b2:	fc 01       	movw	r30, r24
    72b4:	80 81       	ld	r24, Z
    72b6:	91 81       	ldd	r25, Z+1	; 0x01
    72b8:	2f 81       	ldd	r18, Y+7	; 0x07
    72ba:	38 85       	ldd	r19, Y+8	; 0x08
    72bc:	f9 01       	movw	r30, r18
    72be:	20 81       	ld	r18, Z
    72c0:	31 81       	ldd	r19, Z+1	; 0x01
    72c2:	23 54       	subi	r18, 0x43	; 67
    72c4:	3f 4b       	sbci	r19, 0xBF	; 191
    72c6:	f9 01       	movw	r30, r18
    72c8:	60 81       	ld	r22, Z
    72ca:	29 85       	ldd	r18, Y+9	; 0x09
    72cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    72ce:	f9 01       	movw	r30, r18
    72d0:	20 81       	ld	r18, Z
    72d2:	42 2f       	mov	r20, r18
    72d4:	50 e0       	ldi	r21, 0x00	; 0
    72d6:	21 e0       	ldi	r18, 0x01	; 1
    72d8:	30 e0       	ldi	r19, 0x00	; 0
    72da:	02 c0       	rjmp	.+4      	; 0x72e0 <lin_update_err_signal+0x10a>
    72dc:	22 0f       	add	r18, r18
    72de:	33 1f       	adc	r19, r19
    72e0:	4a 95       	dec	r20
    72e2:	e2 f7       	brpl	.-8      	; 0x72dc <lin_update_err_signal+0x106>
    72e4:	20 95       	com	r18
    72e6:	62 23       	and	r22, r18
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
    72e8:	2a 81       	ldd	r18, Y+2	; 0x02
    72ea:	22 2f       	mov	r18, r18
    72ec:	30 e0       	ldi	r19, 0x00	; 0
    72ee:	49 85       	ldd	r20, Y+9	; 0x09
    72f0:	5a 85       	ldd	r21, Y+10	; 0x0a
    72f2:	fa 01       	movw	r30, r20
    72f4:	40 81       	ld	r20, Z
    72f6:	44 2f       	mov	r20, r20
    72f8:	50 e0       	ldi	r21, 0x00	; 0
    72fa:	02 c0       	rjmp	.+4      	; 0x7300 <lin_update_err_signal+0x12a>
    72fc:	22 0f       	add	r18, r18
    72fe:	33 1f       	adc	r19, r19
    7300:	4a 95       	dec	r20
    7302:	e2 f7       	brpl	.-8      	; 0x72fc <lin_update_err_signal+0x126>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    7304:	26 2b       	or	r18, r22
    7306:	83 54       	subi	r24, 0x43	; 67
    7308:	9f 4b       	sbci	r25, 0xBF	; 191
    730a:	fc 01       	movw	r30, r24
    730c:	20 83       	st	Z, r18
    if (frm_id < LIN_NUM_OF_FRMS)
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
    730e:	89 81       	ldd	r24, Y+1	; 0x01
    7310:	8f 5f       	subi	r24, 0xFF	; 255
    7312:	89 83       	std	Y+1, r24	; 0x01
    7314:	8d 81       	ldd	r24, Y+5	; 0x05
    7316:	9e 81       	ldd	r25, Y+6	; 0x06
    7318:	fc 01       	movw	r30, r24
    731a:	96 85       	ldd	r25, Z+14	; 0x0e
    731c:	89 81       	ldd	r24, Y+1	; 0x01
    731e:	89 17       	cp	r24, r25
    7320:	08 f4       	brcc	.+2      	; 0x7324 <lin_update_err_signal+0x14e>
    7322:	ab cf       	rjmp	.-170    	; 0x727a <lin_update_err_signal+0xa4>
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
            }
        }
    }
}
    7324:	00 00       	nop
    7326:	2c 96       	adiw	r28, 0x0c	; 12
    7328:	cd bf       	out	0x3d, r28	; 61
    732a:	de bf       	out	0x3e, r29	; 62
    732c:	df 91       	pop	r29
    732e:	cf 91       	pop	r28
    7330:	08 95       	ret

00007332 <lin_update_rx_evnt_frame>:
 *
 * Implements    : lin_update_rx_evnt_frame_Activity
 *END**************************************************************************/
void lin_update_rx_evnt_frame(l_ifc_handle iii,
                              l_u8 pid)
{
    7332:	cf 93       	push	r28
    7334:	df 93       	push	r29
    7336:	cd b7       	in	r28, 0x3d	; 61
    7338:	de b7       	in	r29, 0x3e	; 62
    733a:	29 97       	sbiw	r28, 0x09	; 9
    733c:	cd bf       	out	0x3d, r28	; 61
    733e:	de bf       	out	0x3e, r29	; 62
    7340:	88 87       	std	Y+8, r24	; 0x08
    7342:	69 87       	std	Y+9, r22	; 0x09
    const lin_associate_frame_t * ptr;
    l_u8 frame_index, i, associate_id;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    7344:	88 85       	ldd	r24, Y+8	; 0x08
    7346:	28 2f       	mov	r18, r24
    7348:	30 e0       	ldi	r19, 0x00	; 0
    734a:	4c e1       	ldi	r20, 0x1C	; 28
    734c:	42 9f       	mul	r20, r18
    734e:	c0 01       	movw	r24, r0
    7350:	43 9f       	mul	r20, r19
    7352:	90 0d       	add	r25, r0
    7354:	11 24       	eor	r1, r1
    7356:	86 56       	subi	r24, 0x66	; 102
    7358:	9d 4b       	sbci	r25, 0xBD	; 189
    735a:	8a 83       	std	Y+2, r24	; 0x02
    735c:	9b 83       	std	Y+3, r25	; 0x03

    /* Get frame index of the event trigger frame */
    frame_index = lin_get_frame_index(iii, pid);
    735e:	69 85       	ldd	r22, Y+9	; 0x09
    7360:	88 85       	ldd	r24, Y+8	; 0x08
    7362:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <lin_get_frame_index>
    7366:	8c 83       	std	Y+4, r24	; 0x04

    if (0xFFU != frame_index) /* This PID doesn't belong to this node */
    7368:	8c 81       	ldd	r24, Y+4	; 0x04
    736a:	8f 3f       	cpi	r24, 0xFF	; 255
    736c:	09 f4       	brne	.+2      	; 0x7370 <lin_update_rx_evnt_frame+0x3e>
    736e:	64 c0       	rjmp	.+200    	; 0x7438 <lin_update_rx_evnt_frame+0x106>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
    7370:	88 85       	ldd	r24, Y+8	; 0x08
    7372:	28 2f       	mov	r18, r24
    7374:	30 e0       	ldi	r19, 0x00	; 0
    7376:	46 e1       	ldi	r20, 0x16	; 22
    7378:	42 9f       	mul	r20, r18
    737a:	c0 01       	movw	r24, r0
    737c:	43 9f       	mul	r20, r19
    737e:	90 0d       	add	r25, r0
    7380:	11 24       	eor	r1, r1
    7382:	8d 55       	subi	r24, 0x5D	; 93
    7384:	99 4b       	sbci	r25, 0xB9	; 185
    7386:	fc 01       	movw	r30, r24
    7388:	80 81       	ld	r24, Z
    738a:	91 81       	ldd	r25, Z+1	; 0x01
    738c:	fc 01       	movw	r30, r24
    738e:	80 81       	ld	r24, Z
    7390:	61 e0       	ldi	r22, 0x01	; 1
    7392:	0e 94 02 4c 	call	0x9804	; 0x9804 <lin_process_parity>
    7396:	8d 83       	std	Y+5, r24	; 0x05
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;
    7398:	8a 81       	ldd	r24, Y+2	; 0x02
    739a:	9b 81       	ldd	r25, Y+3	; 0x03
    739c:	fc 01       	movw	r30, r24
    739e:	26 81       	ldd	r18, Z+6	; 0x06
    73a0:	37 81       	ldd	r19, Z+7	; 0x07
    73a2:	8c 81       	ldd	r24, Y+4	; 0x04
    73a4:	88 2f       	mov	r24, r24
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	88 0f       	add	r24, r24
    73aa:	99 1f       	adc	r25, r25
    73ac:	ac 01       	movw	r20, r24
    73ae:	44 0f       	add	r20, r20
    73b0:	55 1f       	adc	r21, r21
    73b2:	44 0f       	add	r20, r20
    73b4:	55 1f       	adc	r21, r21
    73b6:	84 0f       	add	r24, r20
    73b8:	95 1f       	adc	r25, r21
    73ba:	82 0f       	add	r24, r18
    73bc:	93 1f       	adc	r25, r19
    73be:	fc 01       	movw	r30, r24
    73c0:	80 85       	ldd	r24, Z+8	; 0x08
    73c2:	91 85       	ldd	r25, Z+9	; 0x09
    73c4:	8e 83       	std	Y+6, r24	; 0x06
    73c6:	9f 83       	std	Y+7, r25	; 0x07

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    73c8:	19 82       	std	Y+1, r1	; 0x01
    73ca:	2f c0       	rjmp	.+94     	; 0x742a <lin_update_rx_evnt_frame+0xf8>
        {
            /* First byte of response for event trigger is the PID of the associate frame */
            if (prot_user_config_ptr->list_identifiers_RAM_ptr[((l_u8)ptr->associated_uncond_frame_ptr[i] - prot_user_config_ptr->frame_start) + 1U] == associate_id)
    73cc:	8a 81       	ldd	r24, Y+2	; 0x02
    73ce:	9b 81       	ldd	r25, Y+3	; 0x03
    73d0:	fc 01       	movw	r30, r24
    73d2:	22 85       	ldd	r18, Z+10	; 0x0a
    73d4:	33 85       	ldd	r19, Z+11	; 0x0b
    73d6:	8e 81       	ldd	r24, Y+6	; 0x06
    73d8:	9f 81       	ldd	r25, Y+7	; 0x07
    73da:	fc 01       	movw	r30, r24
    73dc:	41 81       	ldd	r20, Z+1	; 0x01
    73de:	52 81       	ldd	r21, Z+2	; 0x02
    73e0:	89 81       	ldd	r24, Y+1	; 0x01
    73e2:	88 2f       	mov	r24, r24
    73e4:	90 e0       	ldi	r25, 0x00	; 0
    73e6:	84 0f       	add	r24, r20
    73e8:	95 1f       	adc	r25, r21
    73ea:	fc 01       	movw	r30, r24
    73ec:	80 81       	ld	r24, Z
    73ee:	48 2f       	mov	r20, r24
    73f0:	50 e0       	ldi	r21, 0x00	; 0
    73f2:	8a 81       	ldd	r24, Y+2	; 0x02
    73f4:	9b 81       	ldd	r25, Y+3	; 0x03
    73f6:	fc 01       	movw	r30, r24
    73f8:	85 81       	ldd	r24, Z+5	; 0x05
    73fa:	88 2f       	mov	r24, r24
    73fc:	90 e0       	ldi	r25, 0x00	; 0
    73fe:	ba 01       	movw	r22, r20
    7400:	68 1b       	sub	r22, r24
    7402:	79 0b       	sbc	r23, r25
    7404:	cb 01       	movw	r24, r22
    7406:	01 96       	adiw	r24, 0x01	; 1
    7408:	82 0f       	add	r24, r18
    740a:	93 1f       	adc	r25, r19
    740c:	fc 01       	movw	r30, r24
    740e:	90 81       	ld	r25, Z
    7410:	8d 81       	ldd	r24, Y+5	; 0x05
    7412:	98 17       	cp	r25, r24
    7414:	39 f4       	brne	.+14     	; 0x7424 <lin_update_rx_evnt_frame+0xf2>
            {
                /* Update unconditional frame */
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
    7416:	41 e0       	ldi	r20, 0x01	; 1
    7418:	6d 81       	ldd	r22, Y+5	; 0x05
    741a:	88 85       	ldd	r24, Y+8	; 0x08
    741c:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <lin_process_uncd_frame>
                break;
    7420:	00 00       	nop
            }
        }
    }
}
    7422:	0a c0       	rjmp	.+20     	; 0x7438 <lin_update_rx_evnt_frame+0x106>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    7424:	89 81       	ldd	r24, Y+1	; 0x01
    7426:	8f 5f       	subi	r24, 0xFF	; 255
    7428:	89 83       	std	Y+1, r24	; 0x01
    742a:	8e 81       	ldd	r24, Y+6	; 0x06
    742c:	9f 81       	ldd	r25, Y+7	; 0x07
    742e:	fc 01       	movw	r30, r24
    7430:	90 81       	ld	r25, Z
    7432:	89 81       	ldd	r24, Y+1	; 0x01
    7434:	89 17       	cp	r24, r25
    7436:	50 f2       	brcs	.-108    	; 0x73cc <lin_update_rx_evnt_frame+0x9a>
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
                break;
            }
        }
    }
}
    7438:	00 00       	nop
    743a:	29 96       	adiw	r28, 0x09	; 9
    743c:	cd bf       	out	0x3d, r28	; 61
    743e:	de bf       	out	0x3e, r29	; 62
    7440:	df 91       	pop	r29
    7442:	cf 91       	pop	r28
    7444:	08 95       	ret

00007446 <lin_make_res_evnt_frame>:
 *
 * Implements    : lin_make_res_evnt_frame_Activity
 *END**************************************************************************/
void lin_make_res_evnt_frame(l_ifc_handle iii,
                             l_u8 pid)
{
    7446:	0f 93       	push	r16
    7448:	1f 93       	push	r17
    744a:	cf 93       	push	r28
    744c:	df 93       	push	r29
    744e:	00 d0       	rcall	.+0      	; 0x7450 <lin_make_res_evnt_frame+0xa>
    7450:	cd b7       	in	r28, 0x3d	; 61
    7452:	de b7       	in	r29, 0x3e	; 62
    7454:	89 83       	std	Y+1, r24	; 0x01
    7456:	6a 83       	std	Y+2, r22	; 0x02
    /* Create response */
    lin_process_uncd_frame(iii, pid, MAKE_UNCONDITIONAL_FRAME);
    7458:	40 e0       	ldi	r20, 0x00	; 0
    745a:	6a 81       	ldd	r22, Y+2	; 0x02
    745c:	89 81       	ldd	r24, Y+1	; 0x01
    745e:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <lin_process_uncd_frame>
    /* Set associate PID */
    g_lin_protocol_state_array[iii].response_buffer_ptr[0] = lin_process_parity(pid, MAKE_PARITY);
    7462:	89 81       	ldd	r24, Y+1	; 0x01
    7464:	28 2f       	mov	r18, r24
    7466:	30 e0       	ldi	r19, 0x00	; 0
    7468:	46 e1       	ldi	r20, 0x16	; 22
    746a:	42 9f       	mul	r20, r18
    746c:	c0 01       	movw	r24, r0
    746e:	43 9f       	mul	r20, r19
    7470:	90 0d       	add	r25, r0
    7472:	11 24       	eor	r1, r1
    7474:	8d 55       	subi	r24, 0x5D	; 93
    7476:	99 4b       	sbci	r25, 0xB9	; 185
    7478:	fc 01       	movw	r30, r24
    747a:	00 81       	ld	r16, Z
    747c:	11 81       	ldd	r17, Z+1	; 0x01
    747e:	60 e0       	ldi	r22, 0x00	; 0
    7480:	8a 81       	ldd	r24, Y+2	; 0x02
    7482:	0e 94 02 4c 	call	0x9804	; 0x9804 <lin_process_parity>
    7486:	f8 01       	movw	r30, r16
    7488:	80 83       	st	Z, r24
}
    748a:	00 00       	nop
    748c:	0f 90       	pop	r0
    748e:	0f 90       	pop	r0
    7490:	df 91       	pop	r29
    7492:	cf 91       	pop	r28
    7494:	1f 91       	pop	r17
    7496:	0f 91       	pop	r16
    7498:	08 95       	ret

0000749a <lin_condittional_change_nad>:
        if (flag_order < node_attr_ptr->number_support_sid)
        {
            service_flag[flag_order] = 0U;
        }
    }
}
    749a:	cf 93       	push	r28
    749c:	df 93       	push	r29
    749e:	cd b7       	in	r28, 0x3d	; 61
    74a0:	de b7       	in	r29, 0x3e	; 62
    74a2:	63 97       	sbiw	r28, 0x13	; 19
    74a4:	cd bf       	out	0x3d, r28	; 61
    74a6:	de bf       	out	0x3e, r29	; 62
    74a8:	8b 8b       	std	Y+19, r24	; 0x13
    74aa:	1a 82       	std	Y+2, r1	; 0x02
    74ac:	8b 89       	ldd	r24, Y+19	; 0x13
    74ae:	28 2f       	mov	r18, r24
    74b0:	30 e0       	ldi	r19, 0x00	; 0
    74b2:	4c e1       	ldi	r20, 0x1C	; 28
    74b4:	42 9f       	mul	r20, r18
    74b6:	c0 01       	movw	r24, r0
    74b8:	43 9f       	mul	r20, r19
    74ba:	90 0d       	add	r25, r0
    74bc:	11 24       	eor	r1, r1
    74be:	84 55       	subi	r24, 0x54	; 84
    74c0:	9d 4b       	sbci	r25, 0xBD	; 189
    74c2:	fc 01       	movw	r30, r24
    74c4:	80 81       	ld	r24, Z
    74c6:	28 2f       	mov	r18, r24
    74c8:	30 e0       	ldi	r19, 0x00	; 0
    74ca:	44 e2       	ldi	r20, 0x24	; 36
    74cc:	42 9f       	mul	r20, r18
    74ce:	c0 01       	movw	r24, r0
    74d0:	43 9f       	mul	r20, r19
    74d2:	90 0d       	add	r25, r0
    74d4:	11 24       	eor	r1, r1
    74d6:	8a 58       	subi	r24, 0x8A	; 138
    74d8:	9d 4b       	sbci	r25, 0xBD	; 189
    74da:	8b 83       	std	Y+3, r24	; 0x03
    74dc:	9c 83       	std	Y+4, r25	; 0x04
    74de:	8b 81       	ldd	r24, Y+3	; 0x03
    74e0:	9c 81       	ldd	r25, Y+4	; 0x04
    74e2:	25 e0       	ldi	r18, 0x05	; 5
    74e4:	fc 01       	movw	r30, r24
    74e6:	33 96       	adiw	r30, 0x03	; 3
    74e8:	de 01       	movw	r26, r28
    74ea:	1a 96       	adiw	r26, 0x0a	; 10
    74ec:	01 90       	ld	r0, Z+
    74ee:	0d 92       	st	X+, r0
    74f0:	2a 95       	dec	r18
    74f2:	e1 f7       	brne	.-8      	; 0x74ec <lin_condittional_change_nad+0x52>
    74f4:	8b 81       	ldd	r24, Y+3	; 0x03
    74f6:	9c 81       	ldd	r25, Y+4	; 0x04
    74f8:	fc 01       	movw	r30, r24
    74fa:	80 85       	ldd	r24, Z+8	; 0x08
    74fc:	91 85       	ldd	r25, Z+9	; 0x09
    74fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    7500:	b3 85       	ldd	r27, Z+11	; 0x0b
    7502:	8f 87       	std	Y+15, r24	; 0x0f
    7504:	98 8b       	std	Y+16, r25	; 0x10
    7506:	a9 8b       	std	Y+17, r26	; 0x11
    7508:	ba 8b       	std	Y+18, r27	; 0x12
    750a:	8b 89       	ldd	r24, Y+19	; 0x13
    750c:	28 2f       	mov	r18, r24
    750e:	30 e0       	ldi	r19, 0x00	; 0
    7510:	44 e3       	ldi	r20, 0x34	; 52
    7512:	42 9f       	mul	r20, r18
    7514:	c0 01       	movw	r24, r0
    7516:	43 9f       	mul	r20, r19
    7518:	90 0d       	add	r25, r0
    751a:	11 24       	eor	r1, r1
    751c:	0b 96       	adiw	r24, 0x0b	; 11
    751e:	83 59       	subi	r24, 0x93	; 147
    7520:	99 4b       	sbci	r25, 0xB9	; 185
    7522:	8d 83       	std	Y+5, r24	; 0x05
    7524:	9e 83       	std	Y+6, r25	; 0x06
    7526:	8d 81       	ldd	r24, Y+5	; 0x05
    7528:	9e 81       	ldd	r25, Y+6	; 0x06
    752a:	fc 01       	movw	r30, r24
    752c:	21 85       	ldd	r18, Z+9	; 0x09
    752e:	32 85       	ldd	r19, Z+10	; 0x0a
    7530:	8d 81       	ldd	r24, Y+5	; 0x05
    7532:	9e 81       	ldd	r25, Y+6	; 0x06
    7534:	fc 01       	movw	r30, r24
    7536:	80 81       	ld	r24, Z
    7538:	91 81       	ldd	r25, Z+1	; 0x01
    753a:	88 0f       	add	r24, r24
    753c:	99 1f       	adc	r25, r25
    753e:	88 0f       	add	r24, r24
    7540:	99 1f       	adc	r25, r25
    7542:	88 0f       	add	r24, r24
    7544:	99 1f       	adc	r25, r25
    7546:	82 0f       	add	r24, r18
    7548:	93 1f       	adc	r25, r19
    754a:	fc 01       	movw	r30, r24
    754c:	83 81       	ldd	r24, Z+3	; 0x03
    754e:	8f 83       	std	Y+7, r24	; 0x07
    7550:	8d 81       	ldd	r24, Y+5	; 0x05
    7552:	9e 81       	ldd	r25, Y+6	; 0x06
    7554:	fc 01       	movw	r30, r24
    7556:	21 85       	ldd	r18, Z+9	; 0x09
    7558:	32 85       	ldd	r19, Z+10	; 0x0a
    755a:	8d 81       	ldd	r24, Y+5	; 0x05
    755c:	9e 81       	ldd	r25, Y+6	; 0x06
    755e:	fc 01       	movw	r30, r24
    7560:	80 81       	ld	r24, Z
    7562:	91 81       	ldd	r25, Z+1	; 0x01
    7564:	88 0f       	add	r24, r24
    7566:	99 1f       	adc	r25, r25
    7568:	88 0f       	add	r24, r24
    756a:	99 1f       	adc	r25, r25
    756c:	88 0f       	add	r24, r24
    756e:	99 1f       	adc	r25, r25
    7570:	82 0f       	add	r24, r18
    7572:	93 1f       	adc	r25, r19
    7574:	fc 01       	movw	r30, r24
    7576:	84 81       	ldd	r24, Z+4	; 0x04
    7578:	89 83       	std	Y+1, r24	; 0x01
    757a:	8d 81       	ldd	r24, Y+5	; 0x05
    757c:	9e 81       	ldd	r25, Y+6	; 0x06
    757e:	fc 01       	movw	r30, r24
    7580:	21 85       	ldd	r18, Z+9	; 0x09
    7582:	32 85       	ldd	r19, Z+10	; 0x0a
    7584:	8d 81       	ldd	r24, Y+5	; 0x05
    7586:	9e 81       	ldd	r25, Y+6	; 0x06
    7588:	fc 01       	movw	r30, r24
    758a:	80 81       	ld	r24, Z
    758c:	91 81       	ldd	r25, Z+1	; 0x01
    758e:	88 0f       	add	r24, r24
    7590:	99 1f       	adc	r25, r25
    7592:	88 0f       	add	r24, r24
    7594:	99 1f       	adc	r25, r25
    7596:	88 0f       	add	r24, r24
    7598:	99 1f       	adc	r25, r25
    759a:	82 0f       	add	r24, r18
    759c:	93 1f       	adc	r25, r19
    759e:	fc 01       	movw	r30, r24
    75a0:	85 81       	ldd	r24, Z+5	; 0x05
    75a2:	88 87       	std	Y+8, r24	; 0x08
    75a4:	8d 81       	ldd	r24, Y+5	; 0x05
    75a6:	9e 81       	ldd	r25, Y+6	; 0x06
    75a8:	fc 01       	movw	r30, r24
    75aa:	21 85       	ldd	r18, Z+9	; 0x09
    75ac:	32 85       	ldd	r19, Z+10	; 0x0a
    75ae:	8d 81       	ldd	r24, Y+5	; 0x05
    75b0:	9e 81       	ldd	r25, Y+6	; 0x06
    75b2:	fc 01       	movw	r30, r24
    75b4:	80 81       	ld	r24, Z
    75b6:	91 81       	ldd	r25, Z+1	; 0x01
    75b8:	88 0f       	add	r24, r24
    75ba:	99 1f       	adc	r25, r25
    75bc:	88 0f       	add	r24, r24
    75be:	99 1f       	adc	r25, r25
    75c0:	88 0f       	add	r24, r24
    75c2:	99 1f       	adc	r25, r25
    75c4:	82 0f       	add	r24, r18
    75c6:	93 1f       	adc	r25, r19
    75c8:	fc 01       	movw	r30, r24
    75ca:	86 81       	ldd	r24, Z+6	; 0x06
    75cc:	89 87       	std	Y+9, r24	; 0x09
    75ce:	8f 81       	ldd	r24, Y+7	; 0x07
    75d0:	88 2f       	mov	r24, r24
    75d2:	90 e0       	ldi	r25, 0x00	; 0
    75d4:	00 97       	sbiw	r24, 0x00	; 0
    75d6:	21 f0       	breq	.+8      	; 0x75e0 <lin_condittional_change_nad+0x146>
    75d8:	01 97       	sbiw	r24, 0x01	; 1
    75da:	09 f4       	brne	.+2      	; 0x75de <lin_condittional_change_nad+0x144>
    75dc:	4b c0       	rjmp	.+150    	; 0x7674 <lin_condittional_change_nad+0x1da>
    75de:	7d c0       	rjmp	.+250    	; 0x76da <lin_condittional_change_nad+0x240>
    75e0:	89 81       	ldd	r24, Y+1	; 0x01
    75e2:	88 23       	and	r24, r24
    75e4:	09 f4       	brne	.+2      	; 0x75e8 <lin_condittional_change_nad+0x14e>
    75e6:	76 c0       	rjmp	.+236    	; 0x76d4 <lin_condittional_change_nad+0x23a>
    75e8:	89 81       	ldd	r24, Y+1	; 0x01
    75ea:	86 30       	cpi	r24, 0x06	; 6
    75ec:	08 f0       	brcs	.+2      	; 0x75f0 <lin_condittional_change_nad+0x156>
    75ee:	72 c0       	rjmp	.+228    	; 0x76d4 <lin_condittional_change_nad+0x23a>
    75f0:	89 81       	ldd	r24, Y+1	; 0x01
    75f2:	88 23       	and	r24, r24
    75f4:	b9 f0       	breq	.+46     	; 0x7624 <lin_condittional_change_nad+0x18a>
    75f6:	89 81       	ldd	r24, Y+1	; 0x01
    75f8:	83 30       	cpi	r24, 0x03	; 3
    75fa:	a0 f4       	brcc	.+40     	; 0x7624 <lin_condittional_change_nad+0x18a>
    75fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    75fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    7600:	29 81       	ldd	r18, Y+1	; 0x01
    7602:	22 2f       	mov	r18, r18
    7604:	30 e0       	ldi	r19, 0x00	; 0
    7606:	21 50       	subi	r18, 0x01	; 1
    7608:	30 4e       	sbci	r19, 0xE0	; 224
    760a:	22 0f       	add	r18, r18
    760c:	33 1f       	adc	r19, r19
    760e:	22 0f       	add	r18, r18
    7610:	33 1f       	adc	r19, r19
    7612:	22 0f       	add	r18, r18
    7614:	33 1f       	adc	r19, r19
    7616:	02 c0       	rjmp	.+4      	; 0x761c <lin_condittional_change_nad+0x182>
    7618:	96 95       	lsr	r25
    761a:	87 95       	ror	r24
    761c:	2a 95       	dec	r18
    761e:	e2 f7       	brpl	.-8      	; 0x7618 <lin_condittional_change_nad+0x17e>
    7620:	89 83       	std	Y+1, r24	; 0x01
    7622:	1c c0       	rjmp	.+56     	; 0x765c <lin_condittional_change_nad+0x1c2>
    7624:	89 81       	ldd	r24, Y+1	; 0x01
    7626:	83 30       	cpi	r24, 0x03	; 3
    7628:	b8 f0       	brcs	.+46     	; 0x7658 <lin_condittional_change_nad+0x1be>
    762a:	89 81       	ldd	r24, Y+1	; 0x01
    762c:	85 30       	cpi	r24, 0x05	; 5
    762e:	a0 f4       	brcc	.+40     	; 0x7658 <lin_condittional_change_nad+0x1be>
    7630:	8c 85       	ldd	r24, Y+12	; 0x0c
    7632:	9d 85       	ldd	r25, Y+13	; 0x0d
    7634:	29 81       	ldd	r18, Y+1	; 0x01
    7636:	22 2f       	mov	r18, r18
    7638:	30 e0       	ldi	r19, 0x00	; 0
    763a:	23 50       	subi	r18, 0x03	; 3
    763c:	30 4e       	sbci	r19, 0xE0	; 224
    763e:	22 0f       	add	r18, r18
    7640:	33 1f       	adc	r19, r19
    7642:	22 0f       	add	r18, r18
    7644:	33 1f       	adc	r19, r19
    7646:	22 0f       	add	r18, r18
    7648:	33 1f       	adc	r19, r19
    764a:	02 c0       	rjmp	.+4      	; 0x7650 <lin_condittional_change_nad+0x1b6>
    764c:	96 95       	lsr	r25
    764e:	87 95       	ror	r24
    7650:	2a 95       	dec	r18
    7652:	e2 f7       	brpl	.-8      	; 0x764c <lin_condittional_change_nad+0x1b2>
    7654:	89 83       	std	Y+1, r24	; 0x01
    7656:	02 c0       	rjmp	.+4      	; 0x765c <lin_condittional_change_nad+0x1c2>
    7658:	8e 85       	ldd	r24, Y+14	; 0x0e
    765a:	89 83       	std	Y+1, r24	; 0x01
    765c:	99 81       	ldd	r25, Y+1	; 0x01
    765e:	89 85       	ldd	r24, Y+9	; 0x09
    7660:	98 27       	eor	r25, r24
    7662:	88 85       	ldd	r24, Y+8	; 0x08
    7664:	89 23       	and	r24, r25
    7666:	89 83       	std	Y+1, r24	; 0x01
    7668:	89 81       	ldd	r24, Y+1	; 0x01
    766a:	88 23       	and	r24, r24
    766c:	99 f5       	brne	.+102    	; 0x76d4 <lin_condittional_change_nad+0x23a>
    766e:	81 e0       	ldi	r24, 0x01	; 1
    7670:	8a 83       	std	Y+2, r24	; 0x02
    7672:	30 c0       	rjmp	.+96     	; 0x76d4 <lin_condittional_change_nad+0x23a>
    7674:	89 81       	ldd	r24, Y+1	; 0x01
    7676:	88 23       	and	r24, r24
    7678:	79 f1       	breq	.+94     	; 0x76d8 <lin_condittional_change_nad+0x23e>
    767a:	89 81       	ldd	r24, Y+1	; 0x01
    767c:	85 30       	cpi	r24, 0x05	; 5
    767e:	60 f5       	brcc	.+88     	; 0x76d8 <lin_condittional_change_nad+0x23e>
    7680:	89 81       	ldd	r24, Y+1	; 0x01
    7682:	88 2f       	mov	r24, r24
    7684:	90 e0       	ldi	r25, 0x00	; 0
    7686:	82 30       	cpi	r24, 0x02	; 2
    7688:	91 05       	cpc	r25, r1
    768a:	79 f0       	breq	.+30     	; 0x76aa <lin_condittional_change_nad+0x210>
    768c:	83 30       	cpi	r24, 0x03	; 3
    768e:	91 05       	cpc	r25, r1
    7690:	1c f4       	brge	.+6      	; 0x7698 <lin_condittional_change_nad+0x1fe>
    7692:	01 97       	sbiw	r24, 0x01	; 1
    7694:	39 f0       	breq	.+14     	; 0x76a4 <lin_condittional_change_nad+0x20a>
    7696:	12 c0       	rjmp	.+36     	; 0x76bc <lin_condittional_change_nad+0x222>
    7698:	83 30       	cpi	r24, 0x03	; 3
    769a:	91 05       	cpc	r25, r1
    769c:	49 f0       	breq	.+18     	; 0x76b0 <lin_condittional_change_nad+0x216>
    769e:	04 97       	sbiw	r24, 0x04	; 4
    76a0:	51 f0       	breq	.+20     	; 0x76b6 <lin_condittional_change_nad+0x21c>
    76a2:	0c c0       	rjmp	.+24     	; 0x76bc <lin_condittional_change_nad+0x222>
    76a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    76a6:	89 83       	std	Y+1, r24	; 0x01
    76a8:	09 c0       	rjmp	.+18     	; 0x76bc <lin_condittional_change_nad+0x222>
    76aa:	88 89       	ldd	r24, Y+16	; 0x10
    76ac:	89 83       	std	Y+1, r24	; 0x01
    76ae:	06 c0       	rjmp	.+12     	; 0x76bc <lin_condittional_change_nad+0x222>
    76b0:	89 89       	ldd	r24, Y+17	; 0x11
    76b2:	89 83       	std	Y+1, r24	; 0x01
    76b4:	03 c0       	rjmp	.+6      	; 0x76bc <lin_condittional_change_nad+0x222>
    76b6:	8a 89       	ldd	r24, Y+18	; 0x12
    76b8:	89 83       	std	Y+1, r24	; 0x01
    76ba:	00 00       	nop
    76bc:	99 81       	ldd	r25, Y+1	; 0x01
    76be:	89 85       	ldd	r24, Y+9	; 0x09
    76c0:	98 27       	eor	r25, r24
    76c2:	88 85       	ldd	r24, Y+8	; 0x08
    76c4:	89 23       	and	r24, r25
    76c6:	89 83       	std	Y+1, r24	; 0x01
    76c8:	89 81       	ldd	r24, Y+1	; 0x01
    76ca:	88 23       	and	r24, r24
    76cc:	29 f4       	brne	.+10     	; 0x76d8 <lin_condittional_change_nad+0x23e>
    76ce:	81 e0       	ldi	r24, 0x01	; 1
    76d0:	8a 83       	std	Y+2, r24	; 0x02
    76d2:	02 c0       	rjmp	.+4      	; 0x76d8 <lin_condittional_change_nad+0x23e>
    76d4:	00 00       	nop
    76d6:	01 c0       	rjmp	.+2      	; 0x76da <lin_condittional_change_nad+0x240>
    76d8:	00 00       	nop
    76da:	8a 81       	ldd	r24, Y+2	; 0x02
    76dc:	88 23       	and	r24, r24
    76de:	09 f1       	breq	.+66     	; 0x7722 <lin_condittional_change_nad+0x288>
    76e0:	20 e0       	ldi	r18, 0x00	; 0
    76e2:	41 e0       	ldi	r20, 0x01	; 1
    76e4:	63 eb       	ldi	r22, 0xB3	; 179
    76e6:	8b 89       	ldd	r24, Y+19	; 0x13
    76e8:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
    76ec:	8b 81       	ldd	r24, Y+3	; 0x03
    76ee:	9c 81       	ldd	r25, Y+4	; 0x04
    76f0:	fc 01       	movw	r30, r24
    76f2:	80 81       	ld	r24, Z
    76f4:	91 81       	ldd	r25, Z+1	; 0x01
    76f6:	2d 81       	ldd	r18, Y+5	; 0x05
    76f8:	3e 81       	ldd	r19, Y+6	; 0x06
    76fa:	f9 01       	movw	r30, r18
    76fc:	41 85       	ldd	r20, Z+9	; 0x09
    76fe:	52 85       	ldd	r21, Z+10	; 0x0a
    7700:	2d 81       	ldd	r18, Y+5	; 0x05
    7702:	3e 81       	ldd	r19, Y+6	; 0x06
    7704:	f9 01       	movw	r30, r18
    7706:	20 81       	ld	r18, Z
    7708:	31 81       	ldd	r19, Z+1	; 0x01
    770a:	22 0f       	add	r18, r18
    770c:	33 1f       	adc	r19, r19
    770e:	22 0f       	add	r18, r18
    7710:	33 1f       	adc	r19, r19
    7712:	22 0f       	add	r18, r18
    7714:	33 1f       	adc	r19, r19
    7716:	24 0f       	add	r18, r20
    7718:	35 1f       	adc	r19, r21
    771a:	f9 01       	movw	r30, r18
    771c:	27 81       	ldd	r18, Z+7	; 0x07
    771e:	fc 01       	movw	r30, r24
    7720:	20 83       	st	Z, r18
    7722:	00 00       	nop
    7724:	63 96       	adiw	r28, 0x13	; 19
    7726:	cd bf       	out	0x3d, r28	; 61
    7728:	de bf       	out	0x3e, r29	; 62
    772a:	df 91       	pop	r29
    772c:	cf 91       	pop	r28
    772e:	08 95       	ret

00007730 <lin_assign_nad>:
    7730:	cf 93       	push	r28
    7732:	df 93       	push	r29
    7734:	cd b7       	in	r28, 0x3d	; 61
    7736:	de b7       	in	r29, 0x3e	; 62
    7738:	69 97       	sbiw	r28, 0x19	; 25
    773a:	cd bf       	out	0x3d, r28	; 61
    773c:	de bf       	out	0x3e, r29	; 62
    773e:	89 8f       	std	Y+25, r24	; 0x19
    7740:	89 8d       	ldd	r24, Y+25	; 0x19
    7742:	28 2f       	mov	r18, r24
    7744:	30 e0       	ldi	r19, 0x00	; 0
    7746:	44 e3       	ldi	r20, 0x34	; 52
    7748:	42 9f       	mul	r20, r18
    774a:	c0 01       	movw	r24, r0
    774c:	43 9f       	mul	r20, r19
    774e:	90 0d       	add	r25, r0
    7750:	11 24       	eor	r1, r1
    7752:	83 59       	subi	r24, 0x93	; 147
    7754:	99 4b       	sbci	r25, 0xB9	; 185
    7756:	8a 83       	std	Y+2, r24	; 0x02
    7758:	9b 83       	std	Y+3, r25	; 0x03
    775a:	89 8d       	ldd	r24, Y+25	; 0x19
    775c:	28 2f       	mov	r18, r24
    775e:	30 e0       	ldi	r19, 0x00	; 0
    7760:	4c e1       	ldi	r20, 0x1C	; 28
    7762:	42 9f       	mul	r20, r18
    7764:	c0 01       	movw	r24, r0
    7766:	43 9f       	mul	r20, r19
    7768:	90 0d       	add	r25, r0
    776a:	11 24       	eor	r1, r1
    776c:	86 56       	subi	r24, 0x66	; 102
    776e:	9d 4b       	sbci	r25, 0xBD	; 189
    7770:	8c 83       	std	Y+4, r24	; 0x04
    7772:	9d 83       	std	Y+5, r25	; 0x05
    7774:	8c 81       	ldd	r24, Y+4	; 0x04
    7776:	9d 81       	ldd	r25, Y+5	; 0x05
    7778:	fc 01       	movw	r30, r24
    777a:	82 89       	ldd	r24, Z+18	; 0x12
    777c:	28 2f       	mov	r18, r24
    777e:	30 e0       	ldi	r19, 0x00	; 0
    7780:	44 e2       	ldi	r20, 0x24	; 36
    7782:	42 9f       	mul	r20, r18
    7784:	c0 01       	movw	r24, r0
    7786:	43 9f       	mul	r20, r19
    7788:	90 0d       	add	r25, r0
    778a:	11 24       	eor	r1, r1
    778c:	87 58       	subi	r24, 0x87	; 135
    778e:	9d 4b       	sbci	r25, 0xBD	; 189
    7790:	25 e0       	ldi	r18, 0x05	; 5
    7792:	fc 01       	movw	r30, r24
    7794:	de 01       	movw	r26, r28
    7796:	54 96       	adiw	r26, 0x14	; 20
    7798:	01 90       	ld	r0, Z+
    779a:	0d 92       	st	X+, r0
    779c:	2a 95       	dec	r18
    779e:	e1 f7       	brne	.-8      	; 0x7798 <lin_assign_nad+0x68>
    77a0:	8a 81       	ldd	r24, Y+2	; 0x02
    77a2:	9b 81       	ldd	r25, Y+3	; 0x03
    77a4:	0b 96       	adiw	r24, 0x0b	; 11
    77a6:	8e 83       	std	Y+6, r24	; 0x06
    77a8:	9f 83       	std	Y+7, r25	; 0x07
    77aa:	19 82       	std	Y+1, r1	; 0x01
    77ac:	26 c0       	rjmp	.+76     	; 0x77fa <lin_assign_nad+0xca>
    77ae:	89 81       	ldd	r24, Y+1	; 0x01
    77b0:	88 2f       	mov	r24, r24
    77b2:	90 e0       	ldi	r25, 0x00	; 0
    77b4:	2e 81       	ldd	r18, Y+6	; 0x06
    77b6:	3f 81       	ldd	r19, Y+7	; 0x07
    77b8:	f9 01       	movw	r30, r18
    77ba:	41 85       	ldd	r20, Z+9	; 0x09
    77bc:	52 85       	ldd	r21, Z+10	; 0x0a
    77be:	2e 81       	ldd	r18, Y+6	; 0x06
    77c0:	3f 81       	ldd	r19, Y+7	; 0x07
    77c2:	f9 01       	movw	r30, r18
    77c4:	20 81       	ld	r18, Z
    77c6:	31 81       	ldd	r19, Z+1	; 0x01
    77c8:	22 0f       	add	r18, r18
    77ca:	33 1f       	adc	r19, r19
    77cc:	22 0f       	add	r18, r18
    77ce:	33 1f       	adc	r19, r19
    77d0:	22 0f       	add	r18, r18
    77d2:	33 1f       	adc	r19, r19
    77d4:	42 0f       	add	r20, r18
    77d6:	53 1f       	adc	r21, r19
    77d8:	29 81       	ldd	r18, Y+1	; 0x01
    77da:	22 2f       	mov	r18, r18
    77dc:	30 e0       	ldi	r19, 0x00	; 0
    77de:	24 0f       	add	r18, r20
    77e0:	35 1f       	adc	r19, r21
    77e2:	f9 01       	movw	r30, r18
    77e4:	40 81       	ld	r20, Z
    77e6:	9e 01       	movw	r18, r28
    77e8:	24 5f       	subi	r18, 0xF4	; 244
    77ea:	3f 4f       	sbci	r19, 0xFF	; 255
    77ec:	82 0f       	add	r24, r18
    77ee:	93 1f       	adc	r25, r19
    77f0:	fc 01       	movw	r30, r24
    77f2:	40 83       	st	Z, r20
    77f4:	89 81       	ldd	r24, Y+1	; 0x01
    77f6:	8f 5f       	subi	r24, 0xFF	; 255
    77f8:	89 83       	std	Y+1, r24	; 0x01
    77fa:	89 81       	ldd	r24, Y+1	; 0x01
    77fc:	88 30       	cpi	r24, 0x08	; 8
    77fe:	b8 f2       	brcs	.-82     	; 0x77ae <lin_assign_nad+0x7e>
    7800:	88 89       	ldd	r24, Y+16	; 0x10
    7802:	88 2f       	mov	r24, r24
    7804:	90 e0       	ldi	r25, 0x00	; 0
    7806:	98 2f       	mov	r25, r24
    7808:	88 27       	eor	r24, r24
    780a:	88 87       	std	Y+8, r24	; 0x08
    780c:	99 87       	std	Y+9, r25	; 0x09
    780e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7810:	88 2f       	mov	r24, r24
    7812:	90 e0       	ldi	r25, 0x00	; 0
    7814:	28 85       	ldd	r18, Y+8	; 0x08
    7816:	39 85       	ldd	r19, Y+9	; 0x09
    7818:	82 2b       	or	r24, r18
    781a:	93 2b       	or	r25, r19
    781c:	88 87       	std	Y+8, r24	; 0x08
    781e:	99 87       	std	Y+9, r25	; 0x09
    7820:	8a 89       	ldd	r24, Y+18	; 0x12
    7822:	88 2f       	mov	r24, r24
    7824:	90 e0       	ldi	r25, 0x00	; 0
    7826:	98 2f       	mov	r25, r24
    7828:	88 27       	eor	r24, r24
    782a:	8a 87       	std	Y+10, r24	; 0x0a
    782c:	9b 87       	std	Y+11, r25	; 0x0b
    782e:	89 89       	ldd	r24, Y+17	; 0x11
    7830:	88 2f       	mov	r24, r24
    7832:	90 e0       	ldi	r25, 0x00	; 0
    7834:	2a 85       	ldd	r18, Y+10	; 0x0a
    7836:	3b 85       	ldd	r19, Y+11	; 0x0b
    7838:	82 2b       	or	r24, r18
    783a:	93 2b       	or	r25, r19
    783c:	8a 87       	std	Y+10, r24	; 0x0a
    783e:	9b 87       	std	Y+11, r25	; 0x0b
    7840:	2c 89       	ldd	r18, Y+20	; 0x14
    7842:	3d 89       	ldd	r19, Y+21	; 0x15
    7844:	88 85       	ldd	r24, Y+8	; 0x08
    7846:	99 85       	ldd	r25, Y+9	; 0x09
    7848:	28 17       	cp	r18, r24
    784a:	39 07       	cpc	r19, r25
    784c:	29 f0       	breq	.+10     	; 0x7858 <lin_assign_nad+0x128>
    784e:	88 85       	ldd	r24, Y+8	; 0x08
    7850:	99 85       	ldd	r25, Y+9	; 0x09
    7852:	8f 3f       	cpi	r24, 0xFF	; 255
    7854:	9f 47       	sbci	r25, 0x7F	; 127
    7856:	59 f4       	brne	.+22     	; 0x786e <lin_assign_nad+0x13e>
    7858:	2e 89       	ldd	r18, Y+22	; 0x16
    785a:	3f 89       	ldd	r19, Y+23	; 0x17
    785c:	8a 85       	ldd	r24, Y+10	; 0x0a
    785e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7860:	28 17       	cp	r18, r24
    7862:	39 07       	cpc	r19, r25
    7864:	49 f0       	breq	.+18     	; 0x7878 <lin_assign_nad+0x148>
    7866:	8a 85       	ldd	r24, Y+10	; 0x0a
    7868:	9b 85       	ldd	r25, Y+11	; 0x0b
    786a:	01 96       	adiw	r24, 0x01	; 1
    786c:	29 f0       	breq	.+10     	; 0x7878 <lin_assign_nad+0x148>
    786e:	8a 81       	ldd	r24, Y+2	; 0x02
    7870:	9b 81       	ldd	r25, Y+3	; 0x03
    7872:	fc 01       	movw	r30, r24
    7874:	12 a6       	std	Z+42, r1	; 0x2a
    7876:	06 c0       	rjmp	.+12     	; 0x7884 <lin_assign_nad+0x154>
    7878:	20 e0       	ldi	r18, 0x00	; 0
    787a:	41 e0       	ldi	r20, 0x01	; 1
    787c:	60 eb       	ldi	r22, 0xB0	; 176
    787e:	89 8d       	ldd	r24, Y+25	; 0x19
    7880:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
    7884:	00 00       	nop
    7886:	69 96       	adiw	r28, 0x19	; 25
    7888:	cd bf       	out	0x3d, r28	; 61
    788a:	de bf       	out	0x3e, r29	; 62
    788c:	df 91       	pop	r29
    788e:	cf 91       	pop	r28
    7890:	08 95       	ret

00007892 <lin_diagservice_assign_frame_id_range>:
    7892:	0f 93       	push	r16
    7894:	1f 93       	push	r17
    7896:	cf 93       	push	r28
    7898:	df 93       	push	r29
    789a:	cd b7       	in	r28, 0x3d	; 61
    789c:	de b7       	in	r29, 0x3e	; 62
    789e:	62 97       	sbiw	r28, 0x12	; 18
    78a0:	cd bf       	out	0x3d, r28	; 61
    78a2:	de bf       	out	0x3e, r29	; 62
    78a4:	8a 8b       	std	Y+18, r24	; 0x12
    78a6:	1c 82       	std	Y+4, r1	; 0x04
    78a8:	8a 89       	ldd	r24, Y+18	; 0x12
    78aa:	28 2f       	mov	r18, r24
    78ac:	30 e0       	ldi	r19, 0x00	; 0
    78ae:	4c e1       	ldi	r20, 0x1C	; 28
    78b0:	42 9f       	mul	r20, r18
    78b2:	c0 01       	movw	r24, r0
    78b4:	43 9f       	mul	r20, r19
    78b6:	90 0d       	add	r25, r0
    78b8:	11 24       	eor	r1, r1
    78ba:	86 56       	subi	r24, 0x66	; 102
    78bc:	9d 4b       	sbci	r25, 0xBD	; 189
    78be:	8e 83       	std	Y+6, r24	; 0x06
    78c0:	9f 83       	std	Y+7, r25	; 0x07
    78c2:	8a 89       	ldd	r24, Y+18	; 0x12
    78c4:	28 2f       	mov	r18, r24
    78c6:	30 e0       	ldi	r19, 0x00	; 0
    78c8:	44 e3       	ldi	r20, 0x34	; 52
    78ca:	42 9f       	mul	r20, r18
    78cc:	c0 01       	movw	r24, r0
    78ce:	43 9f       	mul	r20, r19
    78d0:	90 0d       	add	r25, r0
    78d2:	11 24       	eor	r1, r1
    78d4:	0b 96       	adiw	r24, 0x0b	; 11
    78d6:	83 59       	subi	r24, 0x93	; 147
    78d8:	99 4b       	sbci	r25, 0xB9	; 185
    78da:	88 87       	std	Y+8, r24	; 0x08
    78dc:	99 87       	std	Y+9, r25	; 0x09
    78de:	81 e0       	ldi	r24, 0x01	; 1
    78e0:	8d 83       	std	Y+5, r24	; 0x05
    78e2:	1a 82       	std	Y+2, r1	; 0x02
    78e4:	26 c0       	rjmp	.+76     	; 0x7932 <lin_diagservice_assign_frame_id_range+0xa0>
    78e6:	8a 81       	ldd	r24, Y+2	; 0x02
    78e8:	88 2f       	mov	r24, r24
    78ea:	90 e0       	ldi	r25, 0x00	; 0
    78ec:	28 85       	ldd	r18, Y+8	; 0x08
    78ee:	39 85       	ldd	r19, Y+9	; 0x09
    78f0:	f9 01       	movw	r30, r18
    78f2:	41 85       	ldd	r20, Z+9	; 0x09
    78f4:	52 85       	ldd	r21, Z+10	; 0x0a
    78f6:	28 85       	ldd	r18, Y+8	; 0x08
    78f8:	39 85       	ldd	r19, Y+9	; 0x09
    78fa:	f9 01       	movw	r30, r18
    78fc:	20 81       	ld	r18, Z
    78fe:	31 81       	ldd	r19, Z+1	; 0x01
    7900:	22 0f       	add	r18, r18
    7902:	33 1f       	adc	r19, r19
    7904:	22 0f       	add	r18, r18
    7906:	33 1f       	adc	r19, r19
    7908:	22 0f       	add	r18, r18
    790a:	33 1f       	adc	r19, r19
    790c:	42 0f       	add	r20, r18
    790e:	53 1f       	adc	r21, r19
    7910:	2a 81       	ldd	r18, Y+2	; 0x02
    7912:	22 2f       	mov	r18, r18
    7914:	30 e0       	ldi	r19, 0x00	; 0
    7916:	24 0f       	add	r18, r20
    7918:	35 1f       	adc	r19, r21
    791a:	f9 01       	movw	r30, r18
    791c:	40 81       	ld	r20, Z
    791e:	9e 01       	movw	r18, r28
    7920:	26 5f       	subi	r18, 0xF6	; 246
    7922:	3f 4f       	sbci	r19, 0xFF	; 255
    7924:	82 0f       	add	r24, r18
    7926:	93 1f       	adc	r25, r19
    7928:	fc 01       	movw	r30, r24
    792a:	40 83       	st	Z, r20
    792c:	8a 81       	ldd	r24, Y+2	; 0x02
    792e:	8f 5f       	subi	r24, 0xFF	; 255
    7930:	8a 83       	std	Y+2, r24	; 0x02
    7932:	8a 81       	ldd	r24, Y+2	; 0x02
    7934:	88 30       	cpi	r24, 0x08	; 8
    7936:	b8 f2       	brcs	.-82     	; 0x78e6 <lin_diagservice_assign_frame_id_range+0x54>
    7938:	8d 85       	ldd	r24, Y+13	; 0x0d
    793a:	8b 83       	std	Y+3, r24	; 0x03
    793c:	81 e0       	ldi	r24, 0x01	; 1
    793e:	8a 83       	std	Y+2, r24	; 0x02
    7940:	03 c0       	rjmp	.+6      	; 0x7948 <lin_diagservice_assign_frame_id_range+0xb6>
    7942:	8c 81       	ldd	r24, Y+4	; 0x04
    7944:	8f 5f       	subi	r24, 0xFF	; 255
    7946:	8c 83       	std	Y+4, r24	; 0x04
    7948:	8e 81       	ldd	r24, Y+6	; 0x06
    794a:	9f 81       	ldd	r25, Y+7	; 0x07
    794c:	fc 01       	movw	r30, r24
    794e:	20 85       	ldd	r18, Z+8	; 0x08
    7950:	31 85       	ldd	r19, Z+9	; 0x09
    7952:	8a 81       	ldd	r24, Y+2	; 0x02
    7954:	91 e0       	ldi	r25, 0x01	; 1
    7956:	98 0f       	add	r25, r24
    7958:	9a 83       	std	Y+2, r25	; 0x02
    795a:	88 2f       	mov	r24, r24
    795c:	90 e0       	ldi	r25, 0x00	; 0
    795e:	88 0f       	add	r24, r24
    7960:	99 1f       	adc	r25, r25
    7962:	82 0f       	add	r24, r18
    7964:	93 1f       	adc	r25, r19
    7966:	fc 01       	movw	r30, r24
    7968:	80 81       	ld	r24, Z
    796a:	91 81       	ldd	r25, Z+1	; 0x01
    796c:	01 96       	adiw	r24, 0x01	; 1
    796e:	49 f7       	brne	.-46     	; 0x7942 <lin_diagservice_assign_frame_id_range+0xb0>
    7970:	8c 81       	ldd	r24, Y+4	; 0x04
    7972:	83 50       	subi	r24, 0x03	; 3
    7974:	8c 83       	std	Y+4, r24	; 0x04
    7976:	84 e0       	ldi	r24, 0x04	; 4
    7978:	8a 83       	std	Y+2, r24	; 0x02
    797a:	8b 81       	ldd	r24, Y+3	; 0x03
    797c:	89 83       	std	Y+1, r24	; 0x01
    797e:	1e c0       	rjmp	.+60     	; 0x79bc <lin_diagservice_assign_frame_id_range+0x12a>
    7980:	8a 81       	ldd	r24, Y+2	; 0x02
    7982:	91 e0       	ldi	r25, 0x01	; 1
    7984:	98 0f       	add	r25, r24
    7986:	9a 83       	std	Y+2, r25	; 0x02
    7988:	88 2f       	mov	r24, r24
    798a:	90 e0       	ldi	r25, 0x00	; 0
    798c:	9e 01       	movw	r18, r28
    798e:	26 5f       	subi	r18, 0xF6	; 246
    7990:	3f 4f       	sbci	r19, 0xFF	; 255
    7992:	82 0f       	add	r24, r18
    7994:	93 1f       	adc	r25, r19
    7996:	fc 01       	movw	r30, r24
    7998:	80 81       	ld	r24, Z
    799a:	8f 3f       	cpi	r24, 0xFF	; 255
    799c:	61 f0       	breq	.+24     	; 0x79b6 <lin_diagservice_assign_frame_id_range+0x124>
    799e:	99 81       	ldd	r25, Y+1	; 0x01
    79a0:	8c 81       	ldd	r24, Y+4	; 0x04
    79a2:	89 17       	cp	r24, r25
    79a4:	40 f4       	brcc	.+16     	; 0x79b6 <lin_diagservice_assign_frame_id_range+0x124>
    79a6:	20 e1       	ldi	r18, 0x10	; 16
    79a8:	40 e0       	ldi	r20, 0x00	; 0
    79aa:	67 eb       	ldi	r22, 0xB7	; 183
    79ac:	8a 89       	ldd	r24, Y+18	; 0x12
    79ae:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
    79b2:	1d 82       	std	Y+5, r1	; 0x05
    79b4:	0d c0       	rjmp	.+26     	; 0x79d0 <lin_diagservice_assign_frame_id_range+0x13e>
    79b6:	89 81       	ldd	r24, Y+1	; 0x01
    79b8:	8f 5f       	subi	r24, 0xFF	; 255
    79ba:	89 83       	std	Y+1, r24	; 0x01
    79bc:	89 81       	ldd	r24, Y+1	; 0x01
    79be:	28 2f       	mov	r18, r24
    79c0:	30 e0       	ldi	r19, 0x00	; 0
    79c2:	8b 81       	ldd	r24, Y+3	; 0x03
    79c4:	88 2f       	mov	r24, r24
    79c6:	90 e0       	ldi	r25, 0x00	; 0
    79c8:	04 96       	adiw	r24, 0x04	; 4
    79ca:	28 17       	cp	r18, r24
    79cc:	39 07       	cpc	r19, r25
    79ce:	c0 f2       	brcs	.-80     	; 0x7980 <lin_diagservice_assign_frame_id_range+0xee>
    79d0:	8d 81       	ldd	r24, Y+5	; 0x05
    79d2:	81 30       	cpi	r24, 0x01	; 1
    79d4:	09 f0       	breq	.+2      	; 0x79d8 <lin_diagservice_assign_frame_id_range+0x146>
    79d6:	52 c0       	rjmp	.+164    	; 0x7a7c <lin_diagservice_assign_frame_id_range+0x1ea>
    79d8:	84 e0       	ldi	r24, 0x04	; 4
    79da:	8a 83       	std	Y+2, r24	; 0x02
    79dc:	45 c0       	rjmp	.+138    	; 0x7a68 <lin_diagservice_assign_frame_id_range+0x1d6>
    79de:	8a 81       	ldd	r24, Y+2	; 0x02
    79e0:	88 2f       	mov	r24, r24
    79e2:	90 e0       	ldi	r25, 0x00	; 0
    79e4:	9e 01       	movw	r18, r28
    79e6:	26 5f       	subi	r18, 0xF6	; 246
    79e8:	3f 4f       	sbci	r19, 0xFF	; 255
    79ea:	82 0f       	add	r24, r18
    79ec:	93 1f       	adc	r25, r19
    79ee:	fc 01       	movw	r30, r24
    79f0:	80 81       	ld	r24, Z
    79f2:	88 2f       	mov	r24, r24
    79f4:	90 e0       	ldi	r25, 0x00	; 0
    79f6:	00 97       	sbiw	r24, 0x00	; 0
    79f8:	21 f0       	breq	.+8      	; 0x7a02 <lin_diagservice_assign_frame_id_range+0x170>
    79fa:	8f 3f       	cpi	r24, 0xFF	; 255
    79fc:	91 05       	cpc	r25, r1
    79fe:	81 f1       	breq	.+96     	; 0x7a60 <lin_diagservice_assign_frame_id_range+0x1ce>
    7a00:	11 c0       	rjmp	.+34     	; 0x7a24 <lin_diagservice_assign_frame_id_range+0x192>
    7a02:	8b 81       	ldd	r24, Y+3	; 0x03
    7a04:	8f 5f       	subi	r24, 0xFF	; 255
    7a06:	8b 83       	std	Y+3, r24	; 0x03
    7a08:	8e 81       	ldd	r24, Y+6	; 0x06
    7a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    7a0c:	fc 01       	movw	r30, r24
    7a0e:	22 85       	ldd	r18, Z+10	; 0x0a
    7a10:	33 85       	ldd	r19, Z+11	; 0x0b
    7a12:	8b 81       	ldd	r24, Y+3	; 0x03
    7a14:	88 2f       	mov	r24, r24
    7a16:	90 e0       	ldi	r25, 0x00	; 0
    7a18:	82 0f       	add	r24, r18
    7a1a:	93 1f       	adc	r25, r19
    7a1c:	2f ef       	ldi	r18, 0xFF	; 255
    7a1e:	fc 01       	movw	r30, r24
    7a20:	20 83       	st	Z, r18
    7a22:	1f c0       	rjmp	.+62     	; 0x7a62 <lin_diagservice_assign_frame_id_range+0x1d0>
    7a24:	8b 81       	ldd	r24, Y+3	; 0x03
    7a26:	8f 5f       	subi	r24, 0xFF	; 255
    7a28:	8b 83       	std	Y+3, r24	; 0x03
    7a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    7a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    7a2e:	fc 01       	movw	r30, r24
    7a30:	22 85       	ldd	r18, Z+10	; 0x0a
    7a32:	33 85       	ldd	r19, Z+11	; 0x0b
    7a34:	8b 81       	ldd	r24, Y+3	; 0x03
    7a36:	88 2f       	mov	r24, r24
    7a38:	90 e0       	ldi	r25, 0x00	; 0
    7a3a:	89 01       	movw	r16, r18
    7a3c:	08 0f       	add	r16, r24
    7a3e:	19 1f       	adc	r17, r25
    7a40:	8a 81       	ldd	r24, Y+2	; 0x02
    7a42:	88 2f       	mov	r24, r24
    7a44:	90 e0       	ldi	r25, 0x00	; 0
    7a46:	9e 01       	movw	r18, r28
    7a48:	26 5f       	subi	r18, 0xF6	; 246
    7a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a4c:	82 0f       	add	r24, r18
    7a4e:	93 1f       	adc	r25, r19
    7a50:	fc 01       	movw	r30, r24
    7a52:	80 81       	ld	r24, Z
    7a54:	61 e0       	ldi	r22, 0x01	; 1
    7a56:	0e 94 02 4c 	call	0x9804	; 0x9804 <lin_process_parity>
    7a5a:	f8 01       	movw	r30, r16
    7a5c:	80 83       	st	Z, r24
    7a5e:	01 c0       	rjmp	.+2      	; 0x7a62 <lin_diagservice_assign_frame_id_range+0x1d0>
    7a60:	00 00       	nop
    7a62:	8a 81       	ldd	r24, Y+2	; 0x02
    7a64:	8f 5f       	subi	r24, 0xFF	; 255
    7a66:	8a 83       	std	Y+2, r24	; 0x02
    7a68:	8a 81       	ldd	r24, Y+2	; 0x02
    7a6a:	88 30       	cpi	r24, 0x08	; 8
    7a6c:	08 f4       	brcc	.+2      	; 0x7a70 <lin_diagservice_assign_frame_id_range+0x1de>
    7a6e:	b7 cf       	rjmp	.-146    	; 0x79de <lin_diagservice_assign_frame_id_range+0x14c>
    7a70:	20 e0       	ldi	r18, 0x00	; 0
    7a72:	41 e0       	ldi	r20, 0x01	; 1
    7a74:	67 eb       	ldi	r22, 0xB7	; 183
    7a76:	8a 89       	ldd	r24, Y+18	; 0x12
    7a78:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
    7a7c:	00 00       	nop
    7a7e:	62 96       	adiw	r28, 0x12	; 18
    7a80:	cd bf       	out	0x3d, r28	; 61
    7a82:	de bf       	out	0x3e, r29	; 62
    7a84:	df 91       	pop	r29
    7a86:	cf 91       	pop	r28
    7a88:	1f 91       	pop	r17
    7a8a:	0f 91       	pop	r16
    7a8c:	08 95       	ret

00007a8e <lin_read_data_by_identify>:
    7a8e:	cf 93       	push	r28
    7a90:	df 93       	push	r29
    7a92:	cd b7       	in	r28, 0x3d	; 61
    7a94:	de b7       	in	r29, 0x3e	; 62
    7a96:	65 97       	sbiw	r28, 0x15	; 21
    7a98:	cd bf       	out	0x3d, r28	; 61
    7a9a:	de bf       	out	0x3e, r29	; 62
    7a9c:	8d 8b       	std	Y+21, r24	; 0x15
    7a9e:	8d 89       	ldd	r24, Y+21	; 0x15
    7aa0:	28 2f       	mov	r18, r24
    7aa2:	30 e0       	ldi	r19, 0x00	; 0
    7aa4:	44 e3       	ldi	r20, 0x34	; 52
    7aa6:	42 9f       	mul	r20, r18
    7aa8:	c0 01       	movw	r24, r0
    7aaa:	43 9f       	mul	r20, r19
    7aac:	90 0d       	add	r25, r0
    7aae:	11 24       	eor	r1, r1
    7ab0:	83 59       	subi	r24, 0x93	; 147
    7ab2:	99 4b       	sbci	r25, 0xB9	; 185
    7ab4:	8a 83       	std	Y+2, r24	; 0x02
    7ab6:	9b 83       	std	Y+3, r25	; 0x03
    7ab8:	8d 89       	ldd	r24, Y+21	; 0x15
    7aba:	28 2f       	mov	r18, r24
    7abc:	30 e0       	ldi	r19, 0x00	; 0
    7abe:	4c e1       	ldi	r20, 0x1C	; 28
    7ac0:	42 9f       	mul	r20, r18
    7ac2:	c0 01       	movw	r24, r0
    7ac4:	43 9f       	mul	r20, r19
    7ac6:	90 0d       	add	r25, r0
    7ac8:	11 24       	eor	r1, r1
    7aca:	86 56       	subi	r24, 0x66	; 102
    7acc:	9d 4b       	sbci	r25, 0xBD	; 189
    7ace:	8c 83       	std	Y+4, r24	; 0x04
    7ad0:	9d 83       	std	Y+5, r25	; 0x05
    7ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    7ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    7ad6:	fc 01       	movw	r30, r24
    7ad8:	82 89       	ldd	r24, Z+18	; 0x12
    7ada:	28 2f       	mov	r18, r24
    7adc:	30 e0       	ldi	r19, 0x00	; 0
    7ade:	44 e2       	ldi	r20, 0x24	; 36
    7ae0:	42 9f       	mul	r20, r18
    7ae2:	c0 01       	movw	r24, r0
    7ae4:	43 9f       	mul	r20, r19
    7ae6:	90 0d       	add	r25, r0
    7ae8:	11 24       	eor	r1, r1
    7aea:	8a 58       	subi	r24, 0x8A	; 138
    7aec:	9d 4b       	sbci	r25, 0xBD	; 189
    7aee:	8e 83       	std	Y+6, r24	; 0x06
    7af0:	9f 83       	std	Y+7, r25	; 0x07
    7af2:	8a 81       	ldd	r24, Y+2	; 0x02
    7af4:	9b 81       	ldd	r25, Y+3	; 0x03
    7af6:	0b 96       	adiw	r24, 0x0b	; 11
    7af8:	88 87       	std	Y+8, r24	; 0x08
    7afa:	99 87       	std	Y+9, r25	; 0x09
    7afc:	19 82       	std	Y+1, r1	; 0x01
    7afe:	26 c0       	rjmp	.+76     	; 0x7b4c <lin_read_data_by_identify+0xbe>
    7b00:	89 81       	ldd	r24, Y+1	; 0x01
    7b02:	88 2f       	mov	r24, r24
    7b04:	90 e0       	ldi	r25, 0x00	; 0
    7b06:	28 85       	ldd	r18, Y+8	; 0x08
    7b08:	39 85       	ldd	r19, Y+9	; 0x09
    7b0a:	f9 01       	movw	r30, r18
    7b0c:	41 85       	ldd	r20, Z+9	; 0x09
    7b0e:	52 85       	ldd	r21, Z+10	; 0x0a
    7b10:	28 85       	ldd	r18, Y+8	; 0x08
    7b12:	39 85       	ldd	r19, Y+9	; 0x09
    7b14:	f9 01       	movw	r30, r18
    7b16:	20 81       	ld	r18, Z
    7b18:	31 81       	ldd	r19, Z+1	; 0x01
    7b1a:	22 0f       	add	r18, r18
    7b1c:	33 1f       	adc	r19, r19
    7b1e:	22 0f       	add	r18, r18
    7b20:	33 1f       	adc	r19, r19
    7b22:	22 0f       	add	r18, r18
    7b24:	33 1f       	adc	r19, r19
    7b26:	42 0f       	add	r20, r18
    7b28:	53 1f       	adc	r21, r19
    7b2a:	29 81       	ldd	r18, Y+1	; 0x01
    7b2c:	22 2f       	mov	r18, r18
    7b2e:	30 e0       	ldi	r19, 0x00	; 0
    7b30:	24 0f       	add	r18, r20
    7b32:	35 1f       	adc	r19, r21
    7b34:	f9 01       	movw	r30, r18
    7b36:	40 81       	ld	r20, Z
    7b38:	9e 01       	movw	r18, r28
    7b3a:	23 5f       	subi	r18, 0xF3	; 243
    7b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b3e:	82 0f       	add	r24, r18
    7b40:	93 1f       	adc	r25, r19
    7b42:	fc 01       	movw	r30, r24
    7b44:	40 83       	st	Z, r20
    7b46:	89 81       	ldd	r24, Y+1	; 0x01
    7b48:	8f 5f       	subi	r24, 0xFF	; 255
    7b4a:	89 83       	std	Y+1, r24	; 0x01
    7b4c:	89 81       	ldd	r24, Y+1	; 0x01
    7b4e:	88 30       	cpi	r24, 0x08	; 8
    7b50:	b8 f2       	brcs	.-82     	; 0x7b00 <lin_read_data_by_identify+0x72>
    7b52:	88 89       	ldd	r24, Y+16	; 0x10
    7b54:	88 2f       	mov	r24, r24
    7b56:	90 e0       	ldi	r25, 0x00	; 0
    7b58:	98 2f       	mov	r25, r24
    7b5a:	88 27       	eor	r24, r24
    7b5c:	8a 87       	std	Y+10, r24	; 0x0a
    7b5e:	9b 87       	std	Y+11, r25	; 0x0b
    7b60:	89 89       	ldd	r24, Y+17	; 0x11
    7b62:	88 2f       	mov	r24, r24
    7b64:	90 e0       	ldi	r25, 0x00	; 0
    7b66:	2a 85       	ldd	r18, Y+10	; 0x0a
    7b68:	3b 85       	ldd	r19, Y+11	; 0x0b
    7b6a:	82 2b       	or	r24, r18
    7b6c:	93 2b       	or	r25, r19
    7b6e:	8a 87       	std	Y+10, r24	; 0x0a
    7b70:	9b 87       	std	Y+11, r25	; 0x0b
    7b72:	8f 85       	ldd	r24, Y+15	; 0x0f
    7b74:	8c 87       	std	Y+12, r24	; 0x0c
    7b76:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b78:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b7a:	cc 01       	movw	r24, r24
    7b7c:	a0 e0       	ldi	r26, 0x00	; 0
    7b7e:	b0 e0       	ldi	r27, 0x00	; 0
    7b80:	40 e8       	ldi	r20, 0x80	; 128
    7b82:	51 ef       	ldi	r21, 0xF1	; 241
    7b84:	20 e5       	ldi	r18, 0x50	; 80
    7b86:	30 e0       	ldi	r19, 0x00	; 0
    7b88:	84 1b       	sub	r24, r20
    7b8a:	95 0b       	sbc	r25, r21
    7b8c:	28 17       	cp	r18, r24
    7b8e:	39 07       	cpc	r19, r25
    7b90:	08 f4       	brcc	.+2      	; 0x7b94 <lin_read_data_by_identify+0x106>
    7b92:	b9 c4       	rjmp	.+2418   	; 0x8506 <__RODATA_PM_OFFSET__+0x506>
    7b94:	87 5a       	subi	r24, 0xA7	; 167
    7b96:	9b 4d       	sbci	r25, 0xDB	; 219
    7b98:	fc 01       	movw	r30, r24
    7b9a:	0c 94 0f 7d 	jmp	0xfa1e	; 0xfa1e <__tablejump2__>
    7b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    7ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    7ba2:	fc 01       	movw	r30, r24
    7ba4:	80 81       	ld	r24, Z
    7ba6:	91 81       	ldd	r25, Z+1	; 0x01
    7ba8:	fc 01       	movw	r30, r24
    7baa:	80 81       	ld	r24, Z
    7bac:	8d 87       	std	Y+13, r24	; 0x0d
    7bae:	80 e1       	ldi	r24, 0x10	; 16
    7bb0:	8e 87       	std	Y+14, r24	; 0x0e
    7bb2:	8a e0       	ldi	r24, 0x0A	; 10
    7bb4:	8f 87       	std	Y+15, r24	; 0x0f
    7bb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    7bb8:	80 5c       	subi	r24, 0xC0	; 192
    7bba:	88 8b       	std	Y+16, r24	; 0x10
    7bbc:	81 ef       	ldi	r24, 0xF1	; 241
    7bbe:	89 8b       	std	Y+17, r24	; 0x11
    7bc0:	88 e8       	ldi	r24, 0x88	; 136
    7bc2:	8a 8b       	std	Y+18, r24	; 0x12
    7bc4:	80 e3       	ldi	r24, 0x30	; 48
    7bc6:	8b 8b       	std	Y+19, r24	; 0x13
    7bc8:	83 e3       	ldi	r24, 0x33	; 51
    7bca:	8c 8b       	std	Y+20, r24	; 0x14
    7bcc:	ce 01       	movw	r24, r28
    7bce:	0d 96       	adiw	r24, 0x0d	; 13
    7bd0:	bc 01       	movw	r22, r24
    7bd2:	8d 89       	ldd	r24, Y+21	; 0x15
    7bd4:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    7bda:	9f 81       	ldd	r25, Y+7	; 0x07
    7bdc:	fc 01       	movw	r30, r24
    7bde:	80 81       	ld	r24, Z
    7be0:	91 81       	ldd	r25, Z+1	; 0x01
    7be2:	fc 01       	movw	r30, r24
    7be4:	80 81       	ld	r24, Z
    7be6:	8d 87       	std	Y+13, r24	; 0x0d
    7be8:	81 e2       	ldi	r24, 0x21	; 33
    7bea:	8e 87       	std	Y+14, r24	; 0x0e
    7bec:	8e e2       	ldi	r24, 0x2E	; 46
    7bee:	8f 87       	std	Y+15, r24	; 0x0f
    7bf0:	80 e3       	ldi	r24, 0x30	; 48
    7bf2:	88 8b       	std	Y+16, r24	; 0x10
    7bf4:	80 e3       	ldi	r24, 0x30	; 48
    7bf6:	89 8b       	std	Y+17, r24	; 0x11
    7bf8:	8e e2       	ldi	r24, 0x2E	; 46
    7bfa:	8a 8b       	std	Y+18, r24	; 0x12
    7bfc:	80 e3       	ldi	r24, 0x30	; 48
    7bfe:	8b 8b       	std	Y+19, r24	; 0x13
    7c00:	80 e3       	ldi	r24, 0x30	; 48
    7c02:	8c 8b       	std	Y+20, r24	; 0x14
    7c04:	ce 01       	movw	r24, r28
    7c06:	0d 96       	adiw	r24, 0x0d	; 13
    7c08:	bc 01       	movw	r22, r24
    7c0a:	8d 89       	ldd	r24, Y+21	; 0x15
    7c0c:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7c10:	8a 81       	ldd	r24, Y+2	; 0x02
    7c12:	9b 81       	ldd	r25, Y+3	; 0x03
    7c14:	22 e0       	ldi	r18, 0x02	; 2
    7c16:	fc 01       	movw	r30, r24
    7c18:	26 a3       	std	Z+38, r18	; 0x26
    7c1a:	7c c4       	rjmp	.+2296   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    7c1e:	9f 81       	ldd	r25, Y+7	; 0x07
    7c20:	fc 01       	movw	r30, r24
    7c22:	80 81       	ld	r24, Z
    7c24:	91 81       	ldd	r25, Z+1	; 0x01
    7c26:	fc 01       	movw	r30, r24
    7c28:	80 81       	ld	r24, Z
    7c2a:	8d 87       	std	Y+13, r24	; 0x0d
    7c2c:	80 e1       	ldi	r24, 0x10	; 16
    7c2e:	8e 87       	std	Y+14, r24	; 0x0e
    7c30:	8a e0       	ldi	r24, 0x0A	; 10
    7c32:	8f 87       	std	Y+15, r24	; 0x0f
    7c34:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c36:	80 5c       	subi	r24, 0xC0	; 192
    7c38:	88 8b       	std	Y+16, r24	; 0x10
    7c3a:	81 ef       	ldi	r24, 0xF1	; 241
    7c3c:	89 8b       	std	Y+17, r24	; 0x11
    7c3e:	88 e8       	ldi	r24, 0x88	; 136
    7c40:	8a 8b       	std	Y+18, r24	; 0x12
    7c42:	80 e3       	ldi	r24, 0x30	; 48
    7c44:	8b 8b       	std	Y+19, r24	; 0x13
    7c46:	83 e3       	ldi	r24, 0x33	; 51
    7c48:	8c 8b       	std	Y+20, r24	; 0x14
    7c4a:	ce 01       	movw	r24, r28
    7c4c:	0d 96       	adiw	r24, 0x0d	; 13
    7c4e:	bc 01       	movw	r22, r24
    7c50:	8d 89       	ldd	r24, Y+21	; 0x15
    7c52:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7c56:	8e 81       	ldd	r24, Y+6	; 0x06
    7c58:	9f 81       	ldd	r25, Y+7	; 0x07
    7c5a:	fc 01       	movw	r30, r24
    7c5c:	80 81       	ld	r24, Z
    7c5e:	91 81       	ldd	r25, Z+1	; 0x01
    7c60:	fc 01       	movw	r30, r24
    7c62:	80 81       	ld	r24, Z
    7c64:	8d 87       	std	Y+13, r24	; 0x0d
    7c66:	81 e2       	ldi	r24, 0x21	; 33
    7c68:	8e 87       	std	Y+14, r24	; 0x0e
    7c6a:	8e e2       	ldi	r24, 0x2E	; 46
    7c6c:	8f 87       	std	Y+15, r24	; 0x0f
    7c6e:	80 e3       	ldi	r24, 0x30	; 48
    7c70:	88 8b       	std	Y+16, r24	; 0x10
    7c72:	80 e3       	ldi	r24, 0x30	; 48
    7c74:	89 8b       	std	Y+17, r24	; 0x11
    7c76:	8e e2       	ldi	r24, 0x2E	; 46
    7c78:	8a 8b       	std	Y+18, r24	; 0x12
    7c7a:	80 e3       	ldi	r24, 0x30	; 48
    7c7c:	8b 8b       	std	Y+19, r24	; 0x13
    7c7e:	80 e3       	ldi	r24, 0x30	; 48
    7c80:	8c 8b       	std	Y+20, r24	; 0x14
    7c82:	ce 01       	movw	r24, r28
    7c84:	0d 96       	adiw	r24, 0x0d	; 13
    7c86:	bc 01       	movw	r22, r24
    7c88:	8d 89       	ldd	r24, Y+21	; 0x15
    7c8a:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    7c90:	9b 81       	ldd	r25, Y+3	; 0x03
    7c92:	22 e0       	ldi	r18, 0x02	; 2
    7c94:	fc 01       	movw	r30, r24
    7c96:	26 a3       	std	Z+38, r18	; 0x26
    7c98:	3d c4       	rjmp	.+2170   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    7c9c:	9f 81       	ldd	r25, Y+7	; 0x07
    7c9e:	fc 01       	movw	r30, r24
    7ca0:	80 81       	ld	r24, Z
    7ca2:	91 81       	ldd	r25, Z+1	; 0x01
    7ca4:	fc 01       	movw	r30, r24
    7ca6:	80 81       	ld	r24, Z
    7ca8:	8d 87       	std	Y+13, r24	; 0x0d
    7caa:	80 e1       	ldi	r24, 0x10	; 16
    7cac:	8e 87       	std	Y+14, r24	; 0x0e
    7cae:	8a e0       	ldi	r24, 0x0A	; 10
    7cb0:	8f 87       	std	Y+15, r24	; 0x0f
    7cb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    7cb4:	80 5c       	subi	r24, 0xC0	; 192
    7cb6:	88 8b       	std	Y+16, r24	; 0x10
    7cb8:	81 ef       	ldi	r24, 0xF1	; 241
    7cba:	89 8b       	std	Y+17, r24	; 0x11
    7cbc:	88 e8       	ldi	r24, 0x88	; 136
    7cbe:	8a 8b       	std	Y+18, r24	; 0x12
    7cc0:	80 e3       	ldi	r24, 0x30	; 48
    7cc2:	8b 8b       	std	Y+19, r24	; 0x13
    7cc4:	83 e3       	ldi	r24, 0x33	; 51
    7cc6:	8c 8b       	std	Y+20, r24	; 0x14
    7cc8:	ce 01       	movw	r24, r28
    7cca:	0d 96       	adiw	r24, 0x0d	; 13
    7ccc:	bc 01       	movw	r22, r24
    7cce:	8d 89       	ldd	r24, Y+21	; 0x15
    7cd0:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    7cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    7cd8:	fc 01       	movw	r30, r24
    7cda:	80 81       	ld	r24, Z
    7cdc:	91 81       	ldd	r25, Z+1	; 0x01
    7cde:	fc 01       	movw	r30, r24
    7ce0:	80 81       	ld	r24, Z
    7ce2:	8d 87       	std	Y+13, r24	; 0x0d
    7ce4:	81 e2       	ldi	r24, 0x21	; 33
    7ce6:	8e 87       	std	Y+14, r24	; 0x0e
    7ce8:	8e e2       	ldi	r24, 0x2E	; 46
    7cea:	8f 87       	std	Y+15, r24	; 0x0f
    7cec:	80 e3       	ldi	r24, 0x30	; 48
    7cee:	88 8b       	std	Y+16, r24	; 0x10
    7cf0:	80 e3       	ldi	r24, 0x30	; 48
    7cf2:	89 8b       	std	Y+17, r24	; 0x11
    7cf4:	8e e2       	ldi	r24, 0x2E	; 46
    7cf6:	8a 8b       	std	Y+18, r24	; 0x12
    7cf8:	80 e3       	ldi	r24, 0x30	; 48
    7cfa:	8b 8b       	std	Y+19, r24	; 0x13
    7cfc:	80 e3       	ldi	r24, 0x30	; 48
    7cfe:	8c 8b       	std	Y+20, r24	; 0x14
    7d00:	ce 01       	movw	r24, r28
    7d02:	0d 96       	adiw	r24, 0x0d	; 13
    7d04:	bc 01       	movw	r22, r24
    7d06:	8d 89       	ldd	r24, Y+21	; 0x15
    7d08:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    7d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    7d10:	22 e0       	ldi	r18, 0x02	; 2
    7d12:	fc 01       	movw	r30, r24
    7d14:	26 a3       	std	Z+38, r18	; 0x26
    7d16:	fe c3       	rjmp	.+2044   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7d18:	8e 81       	ldd	r24, Y+6	; 0x06
    7d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    7d1c:	fc 01       	movw	r30, r24
    7d1e:	80 81       	ld	r24, Z
    7d20:	91 81       	ldd	r25, Z+1	; 0x01
    7d22:	fc 01       	movw	r30, r24
    7d24:	80 81       	ld	r24, Z
    7d26:	8d 87       	std	Y+13, r24	; 0x0d
    7d28:	80 e1       	ldi	r24, 0x10	; 16
    7d2a:	8e 87       	std	Y+14, r24	; 0x0e
    7d2c:	8a e0       	ldi	r24, 0x0A	; 10
    7d2e:	8f 87       	std	Y+15, r24	; 0x0f
    7d30:	8c 85       	ldd	r24, Y+12	; 0x0c
    7d32:	80 5c       	subi	r24, 0xC0	; 192
    7d34:	88 8b       	std	Y+16, r24	; 0x10
    7d36:	81 ef       	ldi	r24, 0xF1	; 241
    7d38:	89 8b       	std	Y+17, r24	; 0x11
    7d3a:	80 e8       	ldi	r24, 0x80	; 128
    7d3c:	8a 8b       	std	Y+18, r24	; 0x12
    7d3e:	80 e3       	ldi	r24, 0x30	; 48
    7d40:	8b 8b       	std	Y+19, r24	; 0x13
    7d42:	83 e3       	ldi	r24, 0x33	; 51
    7d44:	8c 8b       	std	Y+20, r24	; 0x14
    7d46:	ce 01       	movw	r24, r28
    7d48:	0d 96       	adiw	r24, 0x0d	; 13
    7d4a:	bc 01       	movw	r22, r24
    7d4c:	8d 89       	ldd	r24, Y+21	; 0x15
    7d4e:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7d52:	8e 81       	ldd	r24, Y+6	; 0x06
    7d54:	9f 81       	ldd	r25, Y+7	; 0x07
    7d56:	fc 01       	movw	r30, r24
    7d58:	80 81       	ld	r24, Z
    7d5a:	91 81       	ldd	r25, Z+1	; 0x01
    7d5c:	fc 01       	movw	r30, r24
    7d5e:	80 81       	ld	r24, Z
    7d60:	8d 87       	std	Y+13, r24	; 0x0d
    7d62:	81 e2       	ldi	r24, 0x21	; 33
    7d64:	8e 87       	std	Y+14, r24	; 0x0e
    7d66:	8e e2       	ldi	r24, 0x2E	; 46
    7d68:	8f 87       	std	Y+15, r24	; 0x0f
    7d6a:	80 e3       	ldi	r24, 0x30	; 48
    7d6c:	88 8b       	std	Y+16, r24	; 0x10
    7d6e:	80 e3       	ldi	r24, 0x30	; 48
    7d70:	89 8b       	std	Y+17, r24	; 0x11
    7d72:	8e e2       	ldi	r24, 0x2E	; 46
    7d74:	8a 8b       	std	Y+18, r24	; 0x12
    7d76:	80 e3       	ldi	r24, 0x30	; 48
    7d78:	8b 8b       	std	Y+19, r24	; 0x13
    7d7a:	80 e3       	ldi	r24, 0x30	; 48
    7d7c:	8c 8b       	std	Y+20, r24	; 0x14
    7d7e:	ce 01       	movw	r24, r28
    7d80:	0d 96       	adiw	r24, 0x0d	; 13
    7d82:	bc 01       	movw	r22, r24
    7d84:	8d 89       	ldd	r24, Y+21	; 0x15
    7d86:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    7d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    7d8e:	22 e0       	ldi	r18, 0x02	; 2
    7d90:	fc 01       	movw	r30, r24
    7d92:	26 a3       	std	Z+38, r18	; 0x26
    7d94:	bf c3       	rjmp	.+1918   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7d96:	8e 81       	ldd	r24, Y+6	; 0x06
    7d98:	9f 81       	ldd	r25, Y+7	; 0x07
    7d9a:	fc 01       	movw	r30, r24
    7d9c:	80 81       	ld	r24, Z
    7d9e:	91 81       	ldd	r25, Z+1	; 0x01
    7da0:	fc 01       	movw	r30, r24
    7da2:	80 81       	ld	r24, Z
    7da4:	8d 87       	std	Y+13, r24	; 0x0d
    7da6:	80 e1       	ldi	r24, 0x10	; 16
    7da8:	8e 87       	std	Y+14, r24	; 0x0e
    7daa:	87 e0       	ldi	r24, 0x07	; 7
    7dac:	8f 87       	std	Y+15, r24	; 0x0f
    7dae:	8c 85       	ldd	r24, Y+12	; 0x0c
    7db0:	80 5c       	subi	r24, 0xC0	; 192
    7db2:	88 8b       	std	Y+16, r24	; 0x10
    7db4:	81 ef       	ldi	r24, 0xF1	; 241
    7db6:	89 8b       	std	Y+17, r24	; 0x11
    7db8:	81 e9       	ldi	r24, 0x91	; 145
    7dba:	8a 8b       	std	Y+18, r24	; 0x12
    7dbc:	88 e4       	ldi	r24, 0x48	; 72
    7dbe:	8b 8b       	std	Y+19, r24	; 0x13
    7dc0:	82 e3       	ldi	r24, 0x32	; 50
    7dc2:	8c 8b       	std	Y+20, r24	; 0x14
    7dc4:	ce 01       	movw	r24, r28
    7dc6:	0d 96       	adiw	r24, 0x0d	; 13
    7dc8:	bc 01       	movw	r22, r24
    7dca:	8d 89       	ldd	r24, Y+21	; 0x15
    7dcc:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    7dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    7dd4:	fc 01       	movw	r30, r24
    7dd6:	80 81       	ld	r24, Z
    7dd8:	91 81       	ldd	r25, Z+1	; 0x01
    7dda:	fc 01       	movw	r30, r24
    7ddc:	80 81       	ld	r24, Z
    7dde:	8d 87       	std	Y+13, r24	; 0x0d
    7de0:	81 e2       	ldi	r24, 0x21	; 33
    7de2:	8e 87       	std	Y+14, r24	; 0x0e
    7de4:	8e e2       	ldi	r24, 0x2E	; 46
    7de6:	8f 87       	std	Y+15, r24	; 0x0f
    7de8:	80 e3       	ldi	r24, 0x30	; 48
    7dea:	88 8b       	std	Y+16, r24	; 0x10
    7dec:	81 e3       	ldi	r24, 0x31	; 49
    7dee:	89 8b       	std	Y+17, r24	; 0x11
    7df0:	1a 8a       	std	Y+18, r1	; 0x12
    7df2:	1b 8a       	std	Y+19, r1	; 0x13
    7df4:	1c 8a       	std	Y+20, r1	; 0x14
    7df6:	ce 01       	movw	r24, r28
    7df8:	0d 96       	adiw	r24, 0x0d	; 13
    7dfa:	bc 01       	movw	r22, r24
    7dfc:	8d 89       	ldd	r24, Y+21	; 0x15
    7dfe:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7e02:	8a 81       	ldd	r24, Y+2	; 0x02
    7e04:	9b 81       	ldd	r25, Y+3	; 0x03
    7e06:	22 e0       	ldi	r18, 0x02	; 2
    7e08:	fc 01       	movw	r30, r24
    7e0a:	26 a3       	std	Z+38, r18	; 0x26
    7e0c:	83 c3       	rjmp	.+1798   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    7e10:	9f 81       	ldd	r25, Y+7	; 0x07
    7e12:	fc 01       	movw	r30, r24
    7e14:	80 81       	ld	r24, Z
    7e16:	91 81       	ldd	r25, Z+1	; 0x01
    7e18:	fc 01       	movw	r30, r24
    7e1a:	80 81       	ld	r24, Z
    7e1c:	8d 87       	std	Y+13, r24	; 0x0d
    7e1e:	80 e1       	ldi	r24, 0x10	; 16
    7e20:	8e 87       	std	Y+14, r24	; 0x0e
    7e22:	83 e0       	ldi	r24, 0x03	; 3
    7e24:	8f 87       	std	Y+15, r24	; 0x0f
    7e26:	8c 85       	ldd	r24, Y+12	; 0x0c
    7e28:	80 5c       	subi	r24, 0xC0	; 192
    7e2a:	88 8b       	std	Y+16, r24	; 0x10
    7e2c:	81 ef       	ldi	r24, 0xF1	; 241
    7e2e:	89 8b       	std	Y+17, r24	; 0x11
    7e30:	86 e8       	ldi	r24, 0x86	; 134
    7e32:	8a 8b       	std	Y+18, r24	; 0x12
    7e34:	80 91 6c 46 	lds	r24, 0x466C	; 0x80466c <sub_func_id>
    7e38:	8b 8b       	std	Y+19, r24	; 0x13
    7e3a:	1c 8a       	std	Y+20, r1	; 0x14
    7e3c:	ce 01       	movw	r24, r28
    7e3e:	0d 96       	adiw	r24, 0x0d	; 13
    7e40:	bc 01       	movw	r22, r24
    7e42:	8d 89       	ldd	r24, Y+21	; 0x15
    7e44:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7e48:	8a 81       	ldd	r24, Y+2	; 0x02
    7e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    7e4c:	22 e0       	ldi	r18, 0x02	; 2
    7e4e:	fc 01       	movw	r30, r24
    7e50:	26 a3       	std	Z+38, r18	; 0x26
    7e52:	60 c3       	rjmp	.+1728   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7e54:	8e 81       	ldd	r24, Y+6	; 0x06
    7e56:	9f 81       	ldd	r25, Y+7	; 0x07
    7e58:	fc 01       	movw	r30, r24
    7e5a:	80 81       	ld	r24, Z
    7e5c:	91 81       	ldd	r25, Z+1	; 0x01
    7e5e:	fc 01       	movw	r30, r24
    7e60:	80 81       	ld	r24, Z
    7e62:	8d 87       	std	Y+13, r24	; 0x0d
    7e64:	80 e1       	ldi	r24, 0x10	; 16
    7e66:	8e 87       	std	Y+14, r24	; 0x0e
    7e68:	85 e0       	ldi	r24, 0x05	; 5
    7e6a:	8f 87       	std	Y+15, r24	; 0x0f
    7e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    7e6e:	80 5c       	subi	r24, 0xC0	; 192
    7e70:	88 8b       	std	Y+16, r24	; 0x10
    7e72:	81 ef       	ldi	r24, 0xF1	; 241
    7e74:	89 8b       	std	Y+17, r24	; 0x11
    7e76:	8a e8       	ldi	r24, 0x8A	; 138
    7e78:	8a 8b       	std	Y+18, r24	; 0x12
    7e7a:	80 e3       	ldi	r24, 0x30	; 48
    7e7c:	8b 8b       	std	Y+19, r24	; 0x13
    7e7e:	80 e3       	ldi	r24, 0x30	; 48
    7e80:	8c 8b       	std	Y+20, r24	; 0x14
    7e82:	ce 01       	movw	r24, r28
    7e84:	0d 96       	adiw	r24, 0x0d	; 13
    7e86:	bc 01       	movw	r22, r24
    7e88:	8d 89       	ldd	r24, Y+21	; 0x15
    7e8a:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    7e90:	9f 81       	ldd	r25, Y+7	; 0x07
    7e92:	fc 01       	movw	r30, r24
    7e94:	80 81       	ld	r24, Z
    7e96:	91 81       	ldd	r25, Z+1	; 0x01
    7e98:	fc 01       	movw	r30, r24
    7e9a:	80 81       	ld	r24, Z
    7e9c:	8d 87       	std	Y+13, r24	; 0x0d
    7e9e:	81 e2       	ldi	r24, 0x21	; 33
    7ea0:	8e 87       	std	Y+14, r24	; 0x0e
    7ea2:	80 e3       	ldi	r24, 0x30	; 48
    7ea4:	8f 87       	std	Y+15, r24	; 0x0f
    7ea6:	18 8a       	std	Y+16, r1	; 0x10
    7ea8:	19 8a       	std	Y+17, r1	; 0x11
    7eaa:	1a 8a       	std	Y+18, r1	; 0x12
    7eac:	1b 8a       	std	Y+19, r1	; 0x13
    7eae:	1c 8a       	std	Y+20, r1	; 0x14
    7eb0:	ce 01       	movw	r24, r28
    7eb2:	0d 96       	adiw	r24, 0x0d	; 13
    7eb4:	bc 01       	movw	r22, r24
    7eb6:	8d 89       	ldd	r24, Y+21	; 0x15
    7eb8:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    7ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    7ec0:	22 e0       	ldi	r18, 0x02	; 2
    7ec2:	fc 01       	movw	r30, r24
    7ec4:	26 a3       	std	Z+38, r18	; 0x26
    7ec6:	26 c3       	rjmp	.+1612   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    7eca:	9f 81       	ldd	r25, Y+7	; 0x07
    7ecc:	fc 01       	movw	r30, r24
    7ece:	80 81       	ld	r24, Z
    7ed0:	91 81       	ldd	r25, Z+1	; 0x01
    7ed2:	fc 01       	movw	r30, r24
    7ed4:	80 81       	ld	r24, Z
    7ed6:	8d 87       	std	Y+13, r24	; 0x0d
    7ed8:	80 e1       	ldi	r24, 0x10	; 16
    7eda:	8e 87       	std	Y+14, r24	; 0x0e
    7edc:	86 e0       	ldi	r24, 0x06	; 6
    7ede:	8f 87       	std	Y+15, r24	; 0x0f
    7ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
    7ee2:	80 5c       	subi	r24, 0xC0	; 192
    7ee4:	88 8b       	std	Y+16, r24	; 0x10
    7ee6:	81 ef       	ldi	r24, 0xF1	; 241
    7ee8:	89 8b       	std	Y+17, r24	; 0x11
    7eea:	8b e8       	ldi	r24, 0x8B	; 139
    7eec:	8a 8b       	std	Y+18, r24	; 0x12
    7eee:	80 e2       	ldi	r24, 0x20	; 32
    7ef0:	8b 8b       	std	Y+19, r24	; 0x13
    7ef2:	81 e2       	ldi	r24, 0x21	; 33
    7ef4:	8c 8b       	std	Y+20, r24	; 0x14
    7ef6:	ce 01       	movw	r24, r28
    7ef8:	0d 96       	adiw	r24, 0x0d	; 13
    7efa:	bc 01       	movw	r22, r24
    7efc:	8d 89       	ldd	r24, Y+21	; 0x15
    7efe:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7f02:	8e 81       	ldd	r24, Y+6	; 0x06
    7f04:	9f 81       	ldd	r25, Y+7	; 0x07
    7f06:	fc 01       	movw	r30, r24
    7f08:	80 81       	ld	r24, Z
    7f0a:	91 81       	ldd	r25, Z+1	; 0x01
    7f0c:	fc 01       	movw	r30, r24
    7f0e:	80 81       	ld	r24, Z
    7f10:	8d 87       	std	Y+13, r24	; 0x0d
    7f12:	81 e2       	ldi	r24, 0x21	; 33
    7f14:	8e 87       	std	Y+14, r24	; 0x0e
    7f16:	82 e1       	ldi	r24, 0x12	; 18
    7f18:	8f 87       	std	Y+15, r24	; 0x0f
    7f1a:	86 e2       	ldi	r24, 0x26	; 38
    7f1c:	88 8b       	std	Y+16, r24	; 0x10
    7f1e:	19 8a       	std	Y+17, r1	; 0x11
    7f20:	1a 8a       	std	Y+18, r1	; 0x12
    7f22:	1b 8a       	std	Y+19, r1	; 0x13
    7f24:	1c 8a       	std	Y+20, r1	; 0x14
    7f26:	ce 01       	movw	r24, r28
    7f28:	0d 96       	adiw	r24, 0x0d	; 13
    7f2a:	bc 01       	movw	r22, r24
    7f2c:	8d 89       	ldd	r24, Y+21	; 0x15
    7f2e:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7f32:	8a 81       	ldd	r24, Y+2	; 0x02
    7f34:	9b 81       	ldd	r25, Y+3	; 0x03
    7f36:	22 e0       	ldi	r18, 0x02	; 2
    7f38:	fc 01       	movw	r30, r24
    7f3a:	26 a3       	std	Z+38, r18	; 0x26
    7f3c:	eb c2       	rjmp	.+1494   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    7f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    7f40:	9f 81       	ldd	r25, Y+7	; 0x07
    7f42:	fc 01       	movw	r30, r24
    7f44:	80 81       	ld	r24, Z
    7f46:	91 81       	ldd	r25, Z+1	; 0x01
    7f48:	fc 01       	movw	r30, r24
    7f4a:	80 81       	ld	r24, Z
    7f4c:	8d 87       	std	Y+13, r24	; 0x0d
    7f4e:	80 e1       	ldi	r24, 0x10	; 16
    7f50:	8e 87       	std	Y+14, r24	; 0x0e
    7f52:	80 e1       	ldi	r24, 0x10	; 16
    7f54:	8f 87       	std	Y+15, r24	; 0x0f
    7f56:	84 e1       	ldi	r24, 0x14	; 20
    7f58:	88 8b       	std	Y+16, r24	; 0x10
    7f5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f5c:	80 5c       	subi	r24, 0xC0	; 192
    7f5e:	89 8b       	std	Y+17, r24	; 0x11
    7f60:	81 ef       	ldi	r24, 0xF1	; 241
    7f62:	8a 8b       	std	Y+18, r24	; 0x12
    7f64:	8c e8       	ldi	r24, 0x8C	; 140
    7f66:	8b 8b       	std	Y+19, r24	; 0x13
    7f68:	80 e3       	ldi	r24, 0x30	; 48
    7f6a:	8c 8b       	std	Y+20, r24	; 0x14
    7f6c:	ce 01       	movw	r24, r28
    7f6e:	0d 96       	adiw	r24, 0x0d	; 13
    7f70:	bc 01       	movw	r22, r24
    7f72:	8d 89       	ldd	r24, Y+21	; 0x15
    7f74:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7f78:	8e 81       	ldd	r24, Y+6	; 0x06
    7f7a:	9f 81       	ldd	r25, Y+7	; 0x07
    7f7c:	fc 01       	movw	r30, r24
    7f7e:	80 81       	ld	r24, Z
    7f80:	91 81       	ldd	r25, Z+1	; 0x01
    7f82:	fc 01       	movw	r30, r24
    7f84:	80 81       	ld	r24, Z
    7f86:	8d 87       	std	Y+13, r24	; 0x0d
    7f88:	81 e2       	ldi	r24, 0x21	; 33
    7f8a:	8e 87       	std	Y+14, r24	; 0x0e
    7f8c:	80 e3       	ldi	r24, 0x30	; 48
    7f8e:	8f 87       	std	Y+15, r24	; 0x0f
    7f90:	80 e3       	ldi	r24, 0x30	; 48
    7f92:	88 8b       	std	Y+16, r24	; 0x10
    7f94:	80 e3       	ldi	r24, 0x30	; 48
    7f96:	89 8b       	std	Y+17, r24	; 0x11
    7f98:	80 e3       	ldi	r24, 0x30	; 48
    7f9a:	8a 8b       	std	Y+18, r24	; 0x12
    7f9c:	80 e3       	ldi	r24, 0x30	; 48
    7f9e:	8b 8b       	std	Y+19, r24	; 0x13
    7fa0:	80 e3       	ldi	r24, 0x30	; 48
    7fa2:	8c 8b       	std	Y+20, r24	; 0x14
    7fa4:	ce 01       	movw	r24, r28
    7fa6:	0d 96       	adiw	r24, 0x0d	; 13
    7fa8:	bc 01       	movw	r22, r24
    7faa:	8d 89       	ldd	r24, Y+21	; 0x15
    7fac:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    7fb2:	9f 81       	ldd	r25, Y+7	; 0x07
    7fb4:	fc 01       	movw	r30, r24
    7fb6:	80 81       	ld	r24, Z
    7fb8:	91 81       	ldd	r25, Z+1	; 0x01
    7fba:	fc 01       	movw	r30, r24
    7fbc:	80 81       	ld	r24, Z
    7fbe:	8d 87       	std	Y+13, r24	; 0x0d
    7fc0:	82 e2       	ldi	r24, 0x22	; 34
    7fc2:	8e 87       	std	Y+14, r24	; 0x0e
    7fc4:	80 e3       	ldi	r24, 0x30	; 48
    7fc6:	8f 87       	std	Y+15, r24	; 0x0f
    7fc8:	80 e3       	ldi	r24, 0x30	; 48
    7fca:	88 8b       	std	Y+16, r24	; 0x10
    7fcc:	80 e3       	ldi	r24, 0x30	; 48
    7fce:	89 8b       	std	Y+17, r24	; 0x11
    7fd0:	80 e3       	ldi	r24, 0x30	; 48
    7fd2:	8a 8b       	std	Y+18, r24	; 0x12
    7fd4:	80 e3       	ldi	r24, 0x30	; 48
    7fd6:	8b 8b       	std	Y+19, r24	; 0x13
    7fd8:	80 e3       	ldi	r24, 0x30	; 48
    7fda:	8c 8b       	std	Y+20, r24	; 0x14
    7fdc:	ce 01       	movw	r24, r28
    7fde:	0d 96       	adiw	r24, 0x0d	; 13
    7fe0:	bc 01       	movw	r22, r24
    7fe2:	8d 89       	ldd	r24, Y+21	; 0x15
    7fe4:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    7fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    7fea:	9f 81       	ldd	r25, Y+7	; 0x07
    7fec:	fc 01       	movw	r30, r24
    7fee:	80 81       	ld	r24, Z
    7ff0:	91 81       	ldd	r25, Z+1	; 0x01
    7ff2:	fc 01       	movw	r30, r24
    7ff4:	80 81       	ld	r24, Z
    7ff6:	8d 87       	std	Y+13, r24	; 0x0d
    7ff8:	83 e2       	ldi	r24, 0x23	; 35
    7ffa:	8e 87       	std	Y+14, r24	; 0x0e
    7ffc:	80 e3       	ldi	r24, 0x30	; 48
    7ffe:	8f 87       	std	Y+15, r24	; 0x0f
    8000:	80 e3       	ldi	r24, 0x30	; 48
    8002:	88 8b       	std	Y+16, r24	; 0x10
    8004:	80 e3       	ldi	r24, 0x30	; 48
    8006:	89 8b       	std	Y+17, r24	; 0x11
    8008:	80 e3       	ldi	r24, 0x30	; 48
    800a:	8a 8b       	std	Y+18, r24	; 0x12
    800c:	80 e3       	ldi	r24, 0x30	; 48
    800e:	8b 8b       	std	Y+19, r24	; 0x13
    8010:	1c 8a       	std	Y+20, r1	; 0x14
    8012:	ce 01       	movw	r24, r28
    8014:	0d 96       	adiw	r24, 0x0d	; 13
    8016:	bc 01       	movw	r22, r24
    8018:	8d 89       	ldd	r24, Y+21	; 0x15
    801a:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    801e:	8a 81       	ldd	r24, Y+2	; 0x02
    8020:	9b 81       	ldd	r25, Y+3	; 0x03
    8022:	22 e0       	ldi	r18, 0x02	; 2
    8024:	fc 01       	movw	r30, r24
    8026:	26 a3       	std	Z+38, r18	; 0x26
    8028:	75 c2       	rjmp	.+1258   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    802a:	8e 81       	ldd	r24, Y+6	; 0x06
    802c:	9f 81       	ldd	r25, Y+7	; 0x07
    802e:	fc 01       	movw	r30, r24
    8030:	80 81       	ld	r24, Z
    8032:	91 81       	ldd	r25, Z+1	; 0x01
    8034:	fc 01       	movw	r30, r24
    8036:	80 81       	ld	r24, Z
    8038:	8d 87       	std	Y+13, r24	; 0x0d
    803a:	80 e1       	ldi	r24, 0x10	; 16
    803c:	8e 87       	std	Y+14, r24	; 0x0e
    803e:	8f e0       	ldi	r24, 0x0F	; 15
    8040:	8f 87       	std	Y+15, r24	; 0x0f
    8042:	8c 85       	ldd	r24, Y+12	; 0x0c
    8044:	80 5c       	subi	r24, 0xC0	; 192
    8046:	88 8b       	std	Y+16, r24	; 0x10
    8048:	81 ef       	ldi	r24, 0xF1	; 241
    804a:	89 8b       	std	Y+17, r24	; 0x11
    804c:	87 e8       	ldi	r24, 0x87	; 135
    804e:	8a 8b       	std	Y+18, r24	; 0x12
    8050:	80 e3       	ldi	r24, 0x30	; 48
    8052:	8b 8b       	std	Y+19, r24	; 0x13
    8054:	80 e3       	ldi	r24, 0x30	; 48
    8056:	8c 8b       	std	Y+20, r24	; 0x14
    8058:	ce 01       	movw	r24, r28
    805a:	0d 96       	adiw	r24, 0x0d	; 13
    805c:	bc 01       	movw	r22, r24
    805e:	8d 89       	ldd	r24, Y+21	; 0x15
    8060:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8064:	8e 81       	ldd	r24, Y+6	; 0x06
    8066:	9f 81       	ldd	r25, Y+7	; 0x07
    8068:	fc 01       	movw	r30, r24
    806a:	80 81       	ld	r24, Z
    806c:	91 81       	ldd	r25, Z+1	; 0x01
    806e:	fc 01       	movw	r30, r24
    8070:	80 81       	ld	r24, Z
    8072:	8d 87       	std	Y+13, r24	; 0x0d
    8074:	81 e2       	ldi	r24, 0x21	; 33
    8076:	8e 87       	std	Y+14, r24	; 0x0e
    8078:	80 e3       	ldi	r24, 0x30	; 48
    807a:	8f 87       	std	Y+15, r24	; 0x0f
    807c:	80 e3       	ldi	r24, 0x30	; 48
    807e:	88 8b       	std	Y+16, r24	; 0x10
    8080:	80 e3       	ldi	r24, 0x30	; 48
    8082:	89 8b       	std	Y+17, r24	; 0x11
    8084:	80 e3       	ldi	r24, 0x30	; 48
    8086:	8a 8b       	std	Y+18, r24	; 0x12
    8088:	80 e3       	ldi	r24, 0x30	; 48
    808a:	8b 8b       	std	Y+19, r24	; 0x13
    808c:	80 e3       	ldi	r24, 0x30	; 48
    808e:	8c 8b       	std	Y+20, r24	; 0x14
    8090:	ce 01       	movw	r24, r28
    8092:	0d 96       	adiw	r24, 0x0d	; 13
    8094:	bc 01       	movw	r22, r24
    8096:	8d 89       	ldd	r24, Y+21	; 0x15
    8098:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    809c:	8e 81       	ldd	r24, Y+6	; 0x06
    809e:	9f 81       	ldd	r25, Y+7	; 0x07
    80a0:	fc 01       	movw	r30, r24
    80a2:	80 81       	ld	r24, Z
    80a4:	91 81       	ldd	r25, Z+1	; 0x01
    80a6:	fc 01       	movw	r30, r24
    80a8:	80 81       	ld	r24, Z
    80aa:	8d 87       	std	Y+13, r24	; 0x0d
    80ac:	82 e2       	ldi	r24, 0x22	; 34
    80ae:	8e 87       	std	Y+14, r24	; 0x0e
    80b0:	80 e3       	ldi	r24, 0x30	; 48
    80b2:	8f 87       	std	Y+15, r24	; 0x0f
    80b4:	80 e3       	ldi	r24, 0x30	; 48
    80b6:	88 8b       	std	Y+16, r24	; 0x10
    80b8:	80 e3       	ldi	r24, 0x30	; 48
    80ba:	89 8b       	std	Y+17, r24	; 0x11
    80bc:	80 e3       	ldi	r24, 0x30	; 48
    80be:	8a 8b       	std	Y+18, r24	; 0x12
    80c0:	80 e3       	ldi	r24, 0x30	; 48
    80c2:	8b 8b       	std	Y+19, r24	; 0x13
    80c4:	1c 8a       	std	Y+20, r1	; 0x14
    80c6:	ce 01       	movw	r24, r28
    80c8:	0d 96       	adiw	r24, 0x0d	; 13
    80ca:	bc 01       	movw	r22, r24
    80cc:	8d 89       	ldd	r24, Y+21	; 0x15
    80ce:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    80d2:	8a 81       	ldd	r24, Y+2	; 0x02
    80d4:	9b 81       	ldd	r25, Y+3	; 0x03
    80d6:	22 e0       	ldi	r18, 0x02	; 2
    80d8:	fc 01       	movw	r30, r24
    80da:	26 a3       	std	Z+38, r18	; 0x26
    80dc:	1b c2       	rjmp	.+1078   	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    80de:	8e 81       	ldd	r24, Y+6	; 0x06
    80e0:	9f 81       	ldd	r25, Y+7	; 0x07
    80e2:	fc 01       	movw	r30, r24
    80e4:	80 81       	ld	r24, Z
    80e6:	91 81       	ldd	r25, Z+1	; 0x01
    80e8:	fc 01       	movw	r30, r24
    80ea:	80 81       	ld	r24, Z
    80ec:	8d 87       	std	Y+13, r24	; 0x0d
    80ee:	80 e1       	ldi	r24, 0x10	; 16
    80f0:	8e 87       	std	Y+14, r24	; 0x0e
    80f2:	80 e1       	ldi	r24, 0x10	; 16
    80f4:	8f 87       	std	Y+15, r24	; 0x0f
    80f6:	83 e1       	ldi	r24, 0x13	; 19
    80f8:	88 8b       	std	Y+16, r24	; 0x10
    80fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    80fc:	80 5c       	subi	r24, 0xC0	; 192
    80fe:	89 8b       	std	Y+17, r24	; 0x11
    8100:	81 ef       	ldi	r24, 0xF1	; 241
    8102:	8a 8b       	std	Y+18, r24	; 0x12
    8104:	80 e9       	ldi	r24, 0x90	; 144
    8106:	8b 8b       	std	Y+19, r24	; 0x13
    8108:	80 e3       	ldi	r24, 0x30	; 48
    810a:	8c 8b       	std	Y+20, r24	; 0x14
    810c:	ce 01       	movw	r24, r28
    810e:	0d 96       	adiw	r24, 0x0d	; 13
    8110:	bc 01       	movw	r22, r24
    8112:	8d 89       	ldd	r24, Y+21	; 0x15
    8114:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8118:	8e 81       	ldd	r24, Y+6	; 0x06
    811a:	9f 81       	ldd	r25, Y+7	; 0x07
    811c:	fc 01       	movw	r30, r24
    811e:	80 81       	ld	r24, Z
    8120:	91 81       	ldd	r25, Z+1	; 0x01
    8122:	fc 01       	movw	r30, r24
    8124:	80 81       	ld	r24, Z
    8126:	8d 87       	std	Y+13, r24	; 0x0d
    8128:	81 e2       	ldi	r24, 0x21	; 33
    812a:	8e 87       	std	Y+14, r24	; 0x0e
    812c:	80 e3       	ldi	r24, 0x30	; 48
    812e:	8f 87       	std	Y+15, r24	; 0x0f
    8130:	80 e3       	ldi	r24, 0x30	; 48
    8132:	88 8b       	std	Y+16, r24	; 0x10
    8134:	80 e3       	ldi	r24, 0x30	; 48
    8136:	89 8b       	std	Y+17, r24	; 0x11
    8138:	80 e3       	ldi	r24, 0x30	; 48
    813a:	8a 8b       	std	Y+18, r24	; 0x12
    813c:	80 e3       	ldi	r24, 0x30	; 48
    813e:	8b 8b       	std	Y+19, r24	; 0x13
    8140:	80 e3       	ldi	r24, 0x30	; 48
    8142:	8c 8b       	std	Y+20, r24	; 0x14
    8144:	ce 01       	movw	r24, r28
    8146:	0d 96       	adiw	r24, 0x0d	; 13
    8148:	bc 01       	movw	r22, r24
    814a:	8d 89       	ldd	r24, Y+21	; 0x15
    814c:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8150:	8e 81       	ldd	r24, Y+6	; 0x06
    8152:	9f 81       	ldd	r25, Y+7	; 0x07
    8154:	fc 01       	movw	r30, r24
    8156:	80 81       	ld	r24, Z
    8158:	91 81       	ldd	r25, Z+1	; 0x01
    815a:	fc 01       	movw	r30, r24
    815c:	80 81       	ld	r24, Z
    815e:	8d 87       	std	Y+13, r24	; 0x0d
    8160:	82 e2       	ldi	r24, 0x22	; 34
    8162:	8e 87       	std	Y+14, r24	; 0x0e
    8164:	80 e3       	ldi	r24, 0x30	; 48
    8166:	8f 87       	std	Y+15, r24	; 0x0f
    8168:	80 e3       	ldi	r24, 0x30	; 48
    816a:	88 8b       	std	Y+16, r24	; 0x10
    816c:	80 e3       	ldi	r24, 0x30	; 48
    816e:	89 8b       	std	Y+17, r24	; 0x11
    8170:	80 e3       	ldi	r24, 0x30	; 48
    8172:	8a 8b       	std	Y+18, r24	; 0x12
    8174:	80 e3       	ldi	r24, 0x30	; 48
    8176:	8b 8b       	std	Y+19, r24	; 0x13
    8178:	80 e3       	ldi	r24, 0x30	; 48
    817a:	8c 8b       	std	Y+20, r24	; 0x14
    817c:	ce 01       	movw	r24, r28
    817e:	0d 96       	adiw	r24, 0x0d	; 13
    8180:	bc 01       	movw	r22, r24
    8182:	8d 89       	ldd	r24, Y+21	; 0x15
    8184:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8188:	8e 81       	ldd	r24, Y+6	; 0x06
    818a:	9f 81       	ldd	r25, Y+7	; 0x07
    818c:	fc 01       	movw	r30, r24
    818e:	80 81       	ld	r24, Z
    8190:	91 81       	ldd	r25, Z+1	; 0x01
    8192:	fc 01       	movw	r30, r24
    8194:	80 81       	ld	r24, Z
    8196:	8d 87       	std	Y+13, r24	; 0x0d
    8198:	83 e2       	ldi	r24, 0x23	; 35
    819a:	8e 87       	std	Y+14, r24	; 0x0e
    819c:	80 e3       	ldi	r24, 0x30	; 48
    819e:	8f 87       	std	Y+15, r24	; 0x0f
    81a0:	80 e3       	ldi	r24, 0x30	; 48
    81a2:	88 8b       	std	Y+16, r24	; 0x10
    81a4:	80 e3       	ldi	r24, 0x30	; 48
    81a6:	89 8b       	std	Y+17, r24	; 0x11
    81a8:	80 e3       	ldi	r24, 0x30	; 48
    81aa:	8a 8b       	std	Y+18, r24	; 0x12
    81ac:	1b 8a       	std	Y+19, r1	; 0x13
    81ae:	1c 8a       	std	Y+20, r1	; 0x14
    81b0:	ce 01       	movw	r24, r28
    81b2:	0d 96       	adiw	r24, 0x0d	; 13
    81b4:	bc 01       	movw	r22, r24
    81b6:	8d 89       	ldd	r24, Y+21	; 0x15
    81b8:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    81bc:	8a 81       	ldd	r24, Y+2	; 0x02
    81be:	9b 81       	ldd	r25, Y+3	; 0x03
    81c0:	22 e0       	ldi	r18, 0x02	; 2
    81c2:	fc 01       	movw	r30, r24
    81c4:	26 a3       	std	Z+38, r18	; 0x26
    81c6:	a6 c1       	rjmp	.+844    	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    81c8:	8e 81       	ldd	r24, Y+6	; 0x06
    81ca:	9f 81       	ldd	r25, Y+7	; 0x07
    81cc:	fc 01       	movw	r30, r24
    81ce:	80 81       	ld	r24, Z
    81d0:	91 81       	ldd	r25, Z+1	; 0x01
    81d2:	fc 01       	movw	r30, r24
    81d4:	80 81       	ld	r24, Z
    81d6:	8d 87       	std	Y+13, r24	; 0x0d
    81d8:	80 e1       	ldi	r24, 0x10	; 16
    81da:	8e 87       	std	Y+14, r24	; 0x0e
    81dc:	8c e0       	ldi	r24, 0x0C	; 12
    81de:	8f 87       	std	Y+15, r24	; 0x0f
    81e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    81e2:	80 5c       	subi	r24, 0xC0	; 192
    81e4:	88 8b       	std	Y+16, r24	; 0x10
    81e6:	81 ef       	ldi	r24, 0xF1	; 241
    81e8:	89 8b       	std	Y+17, r24	; 0x11
    81ea:	88 e9       	ldi	r24, 0x98	; 152
    81ec:	8a 8b       	std	Y+18, r24	; 0x12
    81ee:	80 e3       	ldi	r24, 0x30	; 48
    81f0:	8b 8b       	std	Y+19, r24	; 0x13
    81f2:	80 e3       	ldi	r24, 0x30	; 48
    81f4:	8c 8b       	std	Y+20, r24	; 0x14
    81f6:	ce 01       	movw	r24, r28
    81f8:	0d 96       	adiw	r24, 0x0d	; 13
    81fa:	bc 01       	movw	r22, r24
    81fc:	8d 89       	ldd	r24, Y+21	; 0x15
    81fe:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8202:	8e 81       	ldd	r24, Y+6	; 0x06
    8204:	9f 81       	ldd	r25, Y+7	; 0x07
    8206:	fc 01       	movw	r30, r24
    8208:	80 81       	ld	r24, Z
    820a:	91 81       	ldd	r25, Z+1	; 0x01
    820c:	fc 01       	movw	r30, r24
    820e:	80 81       	ld	r24, Z
    8210:	8d 87       	std	Y+13, r24	; 0x0d
    8212:	81 e2       	ldi	r24, 0x21	; 33
    8214:	8e 87       	std	Y+14, r24	; 0x0e
    8216:	80 e3       	ldi	r24, 0x30	; 48
    8218:	8f 87       	std	Y+15, r24	; 0x0f
    821a:	80 e3       	ldi	r24, 0x30	; 48
    821c:	88 8b       	std	Y+16, r24	; 0x10
    821e:	80 e3       	ldi	r24, 0x30	; 48
    8220:	89 8b       	std	Y+17, r24	; 0x11
    8222:	80 e3       	ldi	r24, 0x30	; 48
    8224:	8a 8b       	std	Y+18, r24	; 0x12
    8226:	80 e3       	ldi	r24, 0x30	; 48
    8228:	8b 8b       	std	Y+19, r24	; 0x13
    822a:	80 e3       	ldi	r24, 0x30	; 48
    822c:	8c 8b       	std	Y+20, r24	; 0x14
    822e:	ce 01       	movw	r24, r28
    8230:	0d 96       	adiw	r24, 0x0d	; 13
    8232:	bc 01       	movw	r22, r24
    8234:	8d 89       	ldd	r24, Y+21	; 0x15
    8236:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    823a:	8e 81       	ldd	r24, Y+6	; 0x06
    823c:	9f 81       	ldd	r25, Y+7	; 0x07
    823e:	fc 01       	movw	r30, r24
    8240:	80 81       	ld	r24, Z
    8242:	91 81       	ldd	r25, Z+1	; 0x01
    8244:	fc 01       	movw	r30, r24
    8246:	80 81       	ld	r24, Z
    8248:	8d 87       	std	Y+13, r24	; 0x0d
    824a:	82 e2       	ldi	r24, 0x22	; 34
    824c:	8e 87       	std	Y+14, r24	; 0x0e
    824e:	80 e3       	ldi	r24, 0x30	; 48
    8250:	8f 87       	std	Y+15, r24	; 0x0f
    8252:	80 e3       	ldi	r24, 0x30	; 48
    8254:	88 8b       	std	Y+16, r24	; 0x10
    8256:	19 8a       	std	Y+17, r1	; 0x11
    8258:	1a 8a       	std	Y+18, r1	; 0x12
    825a:	1b 8a       	std	Y+19, r1	; 0x13
    825c:	1c 8a       	std	Y+20, r1	; 0x14
    825e:	ce 01       	movw	r24, r28
    8260:	0d 96       	adiw	r24, 0x0d	; 13
    8262:	bc 01       	movw	r22, r24
    8264:	8d 89       	ldd	r24, Y+21	; 0x15
    8266:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    826a:	8a 81       	ldd	r24, Y+2	; 0x02
    826c:	9b 81       	ldd	r25, Y+3	; 0x03
    826e:	22 e0       	ldi	r18, 0x02	; 2
    8270:	fc 01       	movw	r30, r24
    8272:	26 a3       	std	Z+38, r18	; 0x26
    8274:	4f c1       	rjmp	.+670    	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    8276:	8e 81       	ldd	r24, Y+6	; 0x06
    8278:	9f 81       	ldd	r25, Y+7	; 0x07
    827a:	fc 01       	movw	r30, r24
    827c:	80 81       	ld	r24, Z
    827e:	91 81       	ldd	r25, Z+1	; 0x01
    8280:	fc 01       	movw	r30, r24
    8282:	80 81       	ld	r24, Z
    8284:	8d 87       	std	Y+13, r24	; 0x0d
    8286:	80 e1       	ldi	r24, 0x10	; 16
    8288:	8e 87       	std	Y+14, r24	; 0x0e
    828a:	86 e0       	ldi	r24, 0x06	; 6
    828c:	8f 87       	std	Y+15, r24	; 0x0f
    828e:	8c 85       	ldd	r24, Y+12	; 0x0c
    8290:	80 5c       	subi	r24, 0xC0	; 192
    8292:	88 8b       	std	Y+16, r24	; 0x10
    8294:	81 ef       	ldi	r24, 0xF1	; 241
    8296:	89 8b       	std	Y+17, r24	; 0x11
    8298:	89 e9       	ldi	r24, 0x99	; 153
    829a:	8a 8b       	std	Y+18, r24	; 0x12
    829c:	80 e2       	ldi	r24, 0x20	; 32
    829e:	8b 8b       	std	Y+19, r24	; 0x13
    82a0:	81 e2       	ldi	r24, 0x21	; 33
    82a2:	8c 8b       	std	Y+20, r24	; 0x14
    82a4:	ce 01       	movw	r24, r28
    82a6:	0d 96       	adiw	r24, 0x0d	; 13
    82a8:	bc 01       	movw	r22, r24
    82aa:	8d 89       	ldd	r24, Y+21	; 0x15
    82ac:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    82b0:	8e 81       	ldd	r24, Y+6	; 0x06
    82b2:	9f 81       	ldd	r25, Y+7	; 0x07
    82b4:	fc 01       	movw	r30, r24
    82b6:	80 81       	ld	r24, Z
    82b8:	91 81       	ldd	r25, Z+1	; 0x01
    82ba:	fc 01       	movw	r30, r24
    82bc:	80 81       	ld	r24, Z
    82be:	8d 87       	std	Y+13, r24	; 0x0d
    82c0:	81 e2       	ldi	r24, 0x21	; 33
    82c2:	8e 87       	std	Y+14, r24	; 0x0e
    82c4:	82 e1       	ldi	r24, 0x12	; 18
    82c6:	8f 87       	std	Y+15, r24	; 0x0f
    82c8:	86 e2       	ldi	r24, 0x26	; 38
    82ca:	88 8b       	std	Y+16, r24	; 0x10
    82cc:	19 8a       	std	Y+17, r1	; 0x11
    82ce:	1a 8a       	std	Y+18, r1	; 0x12
    82d0:	1b 8a       	std	Y+19, r1	; 0x13
    82d2:	1c 8a       	std	Y+20, r1	; 0x14
    82d4:	ce 01       	movw	r24, r28
    82d6:	0d 96       	adiw	r24, 0x0d	; 13
    82d8:	bc 01       	movw	r22, r24
    82da:	8d 89       	ldd	r24, Y+21	; 0x15
    82dc:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    82e0:	8a 81       	ldd	r24, Y+2	; 0x02
    82e2:	9b 81       	ldd	r25, Y+3	; 0x03
    82e4:	22 e0       	ldi	r18, 0x02	; 2
    82e6:	fc 01       	movw	r30, r24
    82e8:	26 a3       	std	Z+38, r18	; 0x26
    82ea:	14 c1       	rjmp	.+552    	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    82ec:	8e 81       	ldd	r24, Y+6	; 0x06
    82ee:	9f 81       	ldd	r25, Y+7	; 0x07
    82f0:	fc 01       	movw	r30, r24
    82f2:	80 81       	ld	r24, Z
    82f4:	91 81       	ldd	r25, Z+1	; 0x01
    82f6:	fc 01       	movw	r30, r24
    82f8:	80 81       	ld	r24, Z
    82fa:	8d 87       	std	Y+13, r24	; 0x0d
    82fc:	80 e1       	ldi	r24, 0x10	; 16
    82fe:	8e 87       	std	Y+14, r24	; 0x0e
    8300:	86 e0       	ldi	r24, 0x06	; 6
    8302:	8f 87       	std	Y+15, r24	; 0x0f
    8304:	8c 85       	ldd	r24, Y+12	; 0x0c
    8306:	80 5c       	subi	r24, 0xC0	; 192
    8308:	88 8b       	std	Y+16, r24	; 0x10
    830a:	81 ef       	ldi	r24, 0xF1	; 241
    830c:	89 8b       	std	Y+17, r24	; 0x11
    830e:	8d e9       	ldi	r24, 0x9D	; 157
    8310:	8a 8b       	std	Y+18, r24	; 0x12
    8312:	80 e2       	ldi	r24, 0x20	; 32
    8314:	8b 8b       	std	Y+19, r24	; 0x13
    8316:	81 e2       	ldi	r24, 0x21	; 33
    8318:	8c 8b       	std	Y+20, r24	; 0x14
    831a:	ce 01       	movw	r24, r28
    831c:	0d 96       	adiw	r24, 0x0d	; 13
    831e:	bc 01       	movw	r22, r24
    8320:	8d 89       	ldd	r24, Y+21	; 0x15
    8322:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8326:	8e 81       	ldd	r24, Y+6	; 0x06
    8328:	9f 81       	ldd	r25, Y+7	; 0x07
    832a:	fc 01       	movw	r30, r24
    832c:	80 81       	ld	r24, Z
    832e:	91 81       	ldd	r25, Z+1	; 0x01
    8330:	fc 01       	movw	r30, r24
    8332:	80 81       	ld	r24, Z
    8334:	8d 87       	std	Y+13, r24	; 0x0d
    8336:	81 e2       	ldi	r24, 0x21	; 33
    8338:	8e 87       	std	Y+14, r24	; 0x0e
    833a:	82 e1       	ldi	r24, 0x12	; 18
    833c:	8f 87       	std	Y+15, r24	; 0x0f
    833e:	86 e2       	ldi	r24, 0x26	; 38
    8340:	88 8b       	std	Y+16, r24	; 0x10
    8342:	19 8a       	std	Y+17, r1	; 0x11
    8344:	1a 8a       	std	Y+18, r1	; 0x12
    8346:	1b 8a       	std	Y+19, r1	; 0x13
    8348:	1c 8a       	std	Y+20, r1	; 0x14
    834a:	ce 01       	movw	r24, r28
    834c:	0d 96       	adiw	r24, 0x0d	; 13
    834e:	bc 01       	movw	r22, r24
    8350:	8d 89       	ldd	r24, Y+21	; 0x15
    8352:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8356:	8a 81       	ldd	r24, Y+2	; 0x02
    8358:	9b 81       	ldd	r25, Y+3	; 0x03
    835a:	22 e0       	ldi	r18, 0x02	; 2
    835c:	fc 01       	movw	r30, r24
    835e:	26 a3       	std	Z+38, r18	; 0x26
    8360:	8e 81       	ldd	r24, Y+6	; 0x06
    8362:	9f 81       	ldd	r25, Y+7	; 0x07
    8364:	fc 01       	movw	r30, r24
    8366:	80 81       	ld	r24, Z
    8368:	91 81       	ldd	r25, Z+1	; 0x01
    836a:	fc 01       	movw	r30, r24
    836c:	80 81       	ld	r24, Z
    836e:	8d 87       	std	Y+13, r24	; 0x0d
    8370:	80 e1       	ldi	r24, 0x10	; 16
    8372:	8e 87       	std	Y+14, r24	; 0x0e
    8374:	87 e0       	ldi	r24, 0x07	; 7
    8376:	8f 87       	std	Y+15, r24	; 0x0f
    8378:	8c 85       	ldd	r24, Y+12	; 0x0c
    837a:	80 5c       	subi	r24, 0xC0	; 192
    837c:	88 8b       	std	Y+16, r24	; 0x10
    837e:	81 ef       	ldi	r24, 0xF1	; 241
    8380:	89 8b       	std	Y+17, r24	; 0x11
    8382:	8f eb       	ldi	r24, 0xBF	; 191
    8384:	8a 8b       	std	Y+18, r24	; 0x12
    8386:	88 e4       	ldi	r24, 0x48	; 72
    8388:	8b 8b       	std	Y+19, r24	; 0x13
    838a:	82 e3       	ldi	r24, 0x32	; 50
    838c:	8c 8b       	std	Y+20, r24	; 0x14
    838e:	ce 01       	movw	r24, r28
    8390:	0d 96       	adiw	r24, 0x0d	; 13
    8392:	bc 01       	movw	r22, r24
    8394:	8d 89       	ldd	r24, Y+21	; 0x15
    8396:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    839a:	8e 81       	ldd	r24, Y+6	; 0x06
    839c:	9f 81       	ldd	r25, Y+7	; 0x07
    839e:	fc 01       	movw	r30, r24
    83a0:	80 81       	ld	r24, Z
    83a2:	91 81       	ldd	r25, Z+1	; 0x01
    83a4:	fc 01       	movw	r30, r24
    83a6:	80 81       	ld	r24, Z
    83a8:	8d 87       	std	Y+13, r24	; 0x0d
    83aa:	81 e2       	ldi	r24, 0x21	; 33
    83ac:	8e 87       	std	Y+14, r24	; 0x0e
    83ae:	8e e2       	ldi	r24, 0x2E	; 46
    83b0:	8f 87       	std	Y+15, r24	; 0x0f
    83b2:	80 e3       	ldi	r24, 0x30	; 48
    83b4:	88 8b       	std	Y+16, r24	; 0x10
    83b6:	81 e3       	ldi	r24, 0x31	; 49
    83b8:	89 8b       	std	Y+17, r24	; 0x11
    83ba:	1a 8a       	std	Y+18, r1	; 0x12
    83bc:	1b 8a       	std	Y+19, r1	; 0x13
    83be:	1c 8a       	std	Y+20, r1	; 0x14
    83c0:	ce 01       	movw	r24, r28
    83c2:	0d 96       	adiw	r24, 0x0d	; 13
    83c4:	bc 01       	movw	r22, r24
    83c6:	8d 89       	ldd	r24, Y+21	; 0x15
    83c8:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    83cc:	8a 81       	ldd	r24, Y+2	; 0x02
    83ce:	9b 81       	ldd	r25, Y+3	; 0x03
    83d0:	22 e0       	ldi	r18, 0x02	; 2
    83d2:	fc 01       	movw	r30, r24
    83d4:	26 a3       	std	Z+38, r18	; 0x26
    83d6:	8e 81       	ldd	r24, Y+6	; 0x06
    83d8:	9f 81       	ldd	r25, Y+7	; 0x07
    83da:	fc 01       	movw	r30, r24
    83dc:	80 81       	ld	r24, Z
    83de:	91 81       	ldd	r25, Z+1	; 0x01
    83e0:	fc 01       	movw	r30, r24
    83e2:	80 81       	ld	r24, Z
    83e4:	8d 87       	std	Y+13, r24	; 0x0d
    83e6:	80 e1       	ldi	r24, 0x10	; 16
    83e8:	8e 87       	std	Y+14, r24	; 0x0e
    83ea:	8a e0       	ldi	r24, 0x0A	; 10
    83ec:	8f 87       	std	Y+15, r24	; 0x0f
    83ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    83f0:	80 5c       	subi	r24, 0xC0	; 192
    83f2:	88 8b       	std	Y+16, r24	; 0x10
    83f4:	81 ef       	ldi	r24, 0xF1	; 241
    83f6:	89 8b       	std	Y+17, r24	; 0x11
    83f8:	80 ec       	ldi	r24, 0xC0	; 192
    83fa:	8a 8b       	std	Y+18, r24	; 0x12
    83fc:	80 e3       	ldi	r24, 0x30	; 48
    83fe:	8b 8b       	std	Y+19, r24	; 0x13
    8400:	83 e3       	ldi	r24, 0x33	; 51
    8402:	8c 8b       	std	Y+20, r24	; 0x14
    8404:	ce 01       	movw	r24, r28
    8406:	0d 96       	adiw	r24, 0x0d	; 13
    8408:	bc 01       	movw	r22, r24
    840a:	8d 89       	ldd	r24, Y+21	; 0x15
    840c:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8410:	8e 81       	ldd	r24, Y+6	; 0x06
    8412:	9f 81       	ldd	r25, Y+7	; 0x07
    8414:	fc 01       	movw	r30, r24
    8416:	80 81       	ld	r24, Z
    8418:	91 81       	ldd	r25, Z+1	; 0x01
    841a:	fc 01       	movw	r30, r24
    841c:	80 81       	ld	r24, Z
    841e:	8d 87       	std	Y+13, r24	; 0x0d
    8420:	81 e2       	ldi	r24, 0x21	; 33
    8422:	8e 87       	std	Y+14, r24	; 0x0e
    8424:	8e e2       	ldi	r24, 0x2E	; 46
    8426:	8f 87       	std	Y+15, r24	; 0x0f
    8428:	80 e3       	ldi	r24, 0x30	; 48
    842a:	88 8b       	std	Y+16, r24	; 0x10
    842c:	80 e3       	ldi	r24, 0x30	; 48
    842e:	89 8b       	std	Y+17, r24	; 0x11
    8430:	8e e2       	ldi	r24, 0x2E	; 46
    8432:	8a 8b       	std	Y+18, r24	; 0x12
    8434:	80 e3       	ldi	r24, 0x30	; 48
    8436:	8b 8b       	std	Y+19, r24	; 0x13
    8438:	80 e3       	ldi	r24, 0x30	; 48
    843a:	8c 8b       	std	Y+20, r24	; 0x14
    843c:	ce 01       	movw	r24, r28
    843e:	0d 96       	adiw	r24, 0x0d	; 13
    8440:	bc 01       	movw	r22, r24
    8442:	8d 89       	ldd	r24, Y+21	; 0x15
    8444:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8448:	8a 81       	ldd	r24, Y+2	; 0x02
    844a:	9b 81       	ldd	r25, Y+3	; 0x03
    844c:	22 e0       	ldi	r18, 0x02	; 2
    844e:	fc 01       	movw	r30, r24
    8450:	26 a3       	std	Z+38, r18	; 0x26
    8452:	60 c0       	rjmp	.+192    	; 0x8514 <__RODATA_PM_OFFSET__+0x514>
    8454:	8e 81       	ldd	r24, Y+6	; 0x06
    8456:	9f 81       	ldd	r25, Y+7	; 0x07
    8458:	fc 01       	movw	r30, r24
    845a:	80 81       	ld	r24, Z
    845c:	91 81       	ldd	r25, Z+1	; 0x01
    845e:	fc 01       	movw	r30, r24
    8460:	80 81       	ld	r24, Z
    8462:	8d 87       	std	Y+13, r24	; 0x0d
    8464:	80 e1       	ldi	r24, 0x10	; 16
    8466:	8e 87       	std	Y+14, r24	; 0x0e
    8468:	8f e0       	ldi	r24, 0x0F	; 15
    846a:	8f 87       	std	Y+15, r24	; 0x0f
    846c:	8c 85       	ldd	r24, Y+12	; 0x0c
    846e:	80 5c       	subi	r24, 0xC0	; 192
    8470:	88 8b       	std	Y+16, r24	; 0x10
    8472:	81 ef       	ldi	r24, 0xF1	; 241
    8474:	89 8b       	std	Y+17, r24	; 0x11
    8476:	80 ed       	ldi	r24, 0xD0	; 208
    8478:	8a 8b       	std	Y+18, r24	; 0x12
    847a:	80 e3       	ldi	r24, 0x30	; 48
    847c:	8b 8b       	std	Y+19, r24	; 0x13
    847e:	80 e3       	ldi	r24, 0x30	; 48
    8480:	8c 8b       	std	Y+20, r24	; 0x14
    8482:	ce 01       	movw	r24, r28
    8484:	0d 96       	adiw	r24, 0x0d	; 13
    8486:	bc 01       	movw	r22, r24
    8488:	8d 89       	ldd	r24, Y+21	; 0x15
    848a:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    848e:	8e 81       	ldd	r24, Y+6	; 0x06
    8490:	9f 81       	ldd	r25, Y+7	; 0x07
    8492:	fc 01       	movw	r30, r24
    8494:	80 81       	ld	r24, Z
    8496:	91 81       	ldd	r25, Z+1	; 0x01
    8498:	fc 01       	movw	r30, r24
    849a:	80 81       	ld	r24, Z
    849c:	8d 87       	std	Y+13, r24	; 0x0d
    849e:	81 e2       	ldi	r24, 0x21	; 33
    84a0:	8e 87       	std	Y+14, r24	; 0x0e
    84a2:	80 e3       	ldi	r24, 0x30	; 48
    84a4:	8f 87       	std	Y+15, r24	; 0x0f
    84a6:	80 e3       	ldi	r24, 0x30	; 48
    84a8:	88 8b       	std	Y+16, r24	; 0x10
    84aa:	80 e3       	ldi	r24, 0x30	; 48
    84ac:	89 8b       	std	Y+17, r24	; 0x11
    84ae:	80 e3       	ldi	r24, 0x30	; 48
    84b0:	8a 8b       	std	Y+18, r24	; 0x12
    84b2:	80 e3       	ldi	r24, 0x30	; 48
    84b4:	8b 8b       	std	Y+19, r24	; 0x13
    84b6:	80 e3       	ldi	r24, 0x30	; 48
    84b8:	8c 8b       	std	Y+20, r24	; 0x14
    84ba:	ce 01       	movw	r24, r28
    84bc:	0d 96       	adiw	r24, 0x0d	; 13
    84be:	bc 01       	movw	r22, r24
    84c0:	8d 89       	ldd	r24, Y+21	; 0x15
    84c2:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    84c6:	8e 81       	ldd	r24, Y+6	; 0x06
    84c8:	9f 81       	ldd	r25, Y+7	; 0x07
    84ca:	fc 01       	movw	r30, r24
    84cc:	80 81       	ld	r24, Z
    84ce:	91 81       	ldd	r25, Z+1	; 0x01
    84d0:	fc 01       	movw	r30, r24
    84d2:	80 81       	ld	r24, Z
    84d4:	8d 87       	std	Y+13, r24	; 0x0d
    84d6:	82 e2       	ldi	r24, 0x22	; 34
    84d8:	8e 87       	std	Y+14, r24	; 0x0e
    84da:	80 e3       	ldi	r24, 0x30	; 48
    84dc:	8f 87       	std	Y+15, r24	; 0x0f
    84de:	80 e3       	ldi	r24, 0x30	; 48
    84e0:	88 8b       	std	Y+16, r24	; 0x10
    84e2:	80 e3       	ldi	r24, 0x30	; 48
    84e4:	89 8b       	std	Y+17, r24	; 0x11
    84e6:	80 e3       	ldi	r24, 0x30	; 48
    84e8:	8a 8b       	std	Y+18, r24	; 0x12
    84ea:	80 e3       	ldi	r24, 0x30	; 48
    84ec:	8b 8b       	std	Y+19, r24	; 0x13
    84ee:	1c 8a       	std	Y+20, r1	; 0x14
    84f0:	ce 01       	movw	r24, r28
    84f2:	0d 96       	adiw	r24, 0x0d	; 13
    84f4:	bc 01       	movw	r22, r24
    84f6:	8d 89       	ldd	r24, Y+21	; 0x15
    84f8:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    84fc:	8a 81       	ldd	r24, Y+2	; 0x02
    84fe:	9b 81       	ldd	r25, Y+3	; 0x03
    8500:	22 e0       	ldi	r18, 0x02	; 2
    8502:	fc 01       	movw	r30, r24
    8504:	26 a3       	std	Z+38, r18	; 0x26
    8506:	20 e0       	ldi	r18, 0x00	; 0
    8508:	40 e0       	ldi	r20, 0x00	; 0
    850a:	62 e2       	ldi	r22, 0x22	; 34
    850c:	8d 89       	ldd	r24, Y+21	; 0x15
    850e:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
    8512:	00 00       	nop
    8514:	00 00       	nop
    8516:	65 96       	adiw	r28, 0x15	; 21
    8518:	cd bf       	out	0x3d, r28	; 61
    851a:	de bf       	out	0x3e, r29	; 62
    851c:	df 91       	pop	r29
    851e:	cf 91       	pop	r28
    8520:	08 95       	ret

00008522 <lin_slave_session_ctr>:
    8522:	cf 93       	push	r28
    8524:	df 93       	push	r29
    8526:	cd b7       	in	r28, 0x3d	; 61
    8528:	de b7       	in	r29, 0x3e	; 62
    852a:	62 97       	sbiw	r28, 0x12	; 18
    852c:	cd bf       	out	0x3d, r28	; 61
    852e:	de bf       	out	0x3e, r29	; 62
    8530:	8a 8b       	std	Y+18, r24	; 0x12
    8532:	8a 89       	ldd	r24, Y+18	; 0x12
    8534:	28 2f       	mov	r18, r24
    8536:	30 e0       	ldi	r19, 0x00	; 0
    8538:	44 e3       	ldi	r20, 0x34	; 52
    853a:	42 9f       	mul	r20, r18
    853c:	c0 01       	movw	r24, r0
    853e:	43 9f       	mul	r20, r19
    8540:	90 0d       	add	r25, r0
    8542:	11 24       	eor	r1, r1
    8544:	83 59       	subi	r24, 0x93	; 147
    8546:	99 4b       	sbci	r25, 0xB9	; 185
    8548:	89 83       	std	Y+1, r24	; 0x01
    854a:	9a 83       	std	Y+2, r25	; 0x02
    854c:	8a 89       	ldd	r24, Y+18	; 0x12
    854e:	28 2f       	mov	r18, r24
    8550:	30 e0       	ldi	r19, 0x00	; 0
    8552:	4c e1       	ldi	r20, 0x1C	; 28
    8554:	42 9f       	mul	r20, r18
    8556:	c0 01       	movw	r24, r0
    8558:	43 9f       	mul	r20, r19
    855a:	90 0d       	add	r25, r0
    855c:	11 24       	eor	r1, r1
    855e:	86 56       	subi	r24, 0x66	; 102
    8560:	9d 4b       	sbci	r25, 0xBD	; 189
    8562:	8b 83       	std	Y+3, r24	; 0x03
    8564:	9c 83       	std	Y+4, r25	; 0x04
    8566:	8b 81       	ldd	r24, Y+3	; 0x03
    8568:	9c 81       	ldd	r25, Y+4	; 0x04
    856a:	fc 01       	movw	r30, r24
    856c:	82 89       	ldd	r24, Z+18	; 0x12
    856e:	28 2f       	mov	r18, r24
    8570:	30 e0       	ldi	r19, 0x00	; 0
    8572:	44 e2       	ldi	r20, 0x24	; 36
    8574:	42 9f       	mul	r20, r18
    8576:	c0 01       	movw	r24, r0
    8578:	43 9f       	mul	r20, r19
    857a:	90 0d       	add	r25, r0
    857c:	11 24       	eor	r1, r1
    857e:	8a 58       	subi	r24, 0x8A	; 138
    8580:	9d 4b       	sbci	r25, 0xBD	; 189
    8582:	8d 83       	std	Y+5, r24	; 0x05
    8584:	9e 83       	std	Y+6, r25	; 0x06
    8586:	89 81       	ldd	r24, Y+1	; 0x01
    8588:	9a 81       	ldd	r25, Y+2	; 0x02
    858a:	0b 96       	adiw	r24, 0x0b	; 11
    858c:	8f 83       	std	Y+7, r24	; 0x07
    858e:	98 87       	std	Y+8, r25	; 0x08
    8590:	8f 81       	ldd	r24, Y+7	; 0x07
    8592:	98 85       	ldd	r25, Y+8	; 0x08
    8594:	fc 01       	movw	r30, r24
    8596:	21 85       	ldd	r18, Z+9	; 0x09
    8598:	32 85       	ldd	r19, Z+10	; 0x0a
    859a:	8f 81       	ldd	r24, Y+7	; 0x07
    859c:	98 85       	ldd	r25, Y+8	; 0x08
    859e:	fc 01       	movw	r30, r24
    85a0:	80 81       	ld	r24, Z
    85a2:	91 81       	ldd	r25, Z+1	; 0x01
    85a4:	88 0f       	add	r24, r24
    85a6:	99 1f       	adc	r25, r25
    85a8:	88 0f       	add	r24, r24
    85aa:	99 1f       	adc	r25, r25
    85ac:	88 0f       	add	r24, r24
    85ae:	99 1f       	adc	r25, r25
    85b0:	82 0f       	add	r24, r18
    85b2:	93 1f       	adc	r25, r19
    85b4:	fc 01       	movw	r30, r24
    85b6:	83 81       	ldd	r24, Z+3	; 0x03
    85b8:	80 93 6c 46 	sts	0x466C, r24	; 0x80466c <sub_func_id>
    85bc:	8f 81       	ldd	r24, Y+7	; 0x07
    85be:	98 85       	ldd	r25, Y+8	; 0x08
    85c0:	fc 01       	movw	r30, r24
    85c2:	21 85       	ldd	r18, Z+9	; 0x09
    85c4:	32 85       	ldd	r19, Z+10	; 0x0a
    85c6:	8f 81       	ldd	r24, Y+7	; 0x07
    85c8:	98 85       	ldd	r25, Y+8	; 0x08
    85ca:	fc 01       	movw	r30, r24
    85cc:	80 81       	ld	r24, Z
    85ce:	91 81       	ldd	r25, Z+1	; 0x01
    85d0:	88 0f       	add	r24, r24
    85d2:	99 1f       	adc	r25, r25
    85d4:	88 0f       	add	r24, r24
    85d6:	99 1f       	adc	r25, r25
    85d8:	88 0f       	add	r24, r24
    85da:	99 1f       	adc	r25, r25
    85dc:	82 0f       	add	r24, r18
    85de:	93 1f       	adc	r25, r19
    85e0:	fc 01       	movw	r30, r24
    85e2:	81 81       	ldd	r24, Z+1	; 0x01
    85e4:	8f 70       	andi	r24, 0x0F	; 15
    85e6:	89 87       	std	Y+9, r24	; 0x09
    85e8:	89 85       	ldd	r24, Y+9	; 0x09
    85ea:	82 30       	cpi	r24, 0x02	; 2
    85ec:	09 f0       	breq	.+2      	; 0x85f0 <lin_slave_session_ctr+0xce>
    85ee:	7f c0       	rjmp	.+254    	; 0x86ee <lin_slave_session_ctr+0x1cc>
    85f0:	80 91 6c 46 	lds	r24, 0x466C	; 0x80466c <sub_func_id>
    85f4:	88 2f       	mov	r24, r24
    85f6:	90 e0       	ldi	r25, 0x00	; 0
    85f8:	81 30       	cpi	r24, 0x01	; 1
    85fa:	91 05       	cpc	r25, r1
    85fc:	51 f1       	breq	.+84     	; 0x8652 <lin_slave_session_ctr+0x130>
    85fe:	82 30       	cpi	r24, 0x02	; 2
    8600:	91 05       	cpc	r25, r1
    8602:	09 f4       	brne	.+2      	; 0x8606 <lin_slave_session_ctr+0xe4>
    8604:	49 c0       	rjmp	.+146    	; 0x8698 <lin_slave_session_ctr+0x176>
    8606:	89 2b       	or	r24, r25
    8608:	09 f0       	breq	.+2      	; 0x860c <lin_slave_session_ctr+0xea>
    860a:	69 c0       	rjmp	.+210    	; 0x86de <lin_slave_session_ctr+0x1bc>
    860c:	8d 81       	ldd	r24, Y+5	; 0x05
    860e:	9e 81       	ldd	r25, Y+6	; 0x06
    8610:	fc 01       	movw	r30, r24
    8612:	80 81       	ld	r24, Z
    8614:	91 81       	ldd	r25, Z+1	; 0x01
    8616:	fc 01       	movw	r30, r24
    8618:	80 81       	ld	r24, Z
    861a:	8a 87       	std	Y+10, r24	; 0x0a
    861c:	82 e0       	ldi	r24, 0x02	; 2
    861e:	8b 87       	std	Y+11, r24	; 0x0b
    8620:	80 e5       	ldi	r24, 0x50	; 80
    8622:	8c 87       	std	Y+12, r24	; 0x0c
    8624:	80 91 6c 46 	lds	r24, 0x466C	; 0x80466c <sub_func_id>
    8628:	8d 87       	std	Y+13, r24	; 0x0d
    862a:	8f ef       	ldi	r24, 0xFF	; 255
    862c:	8e 87       	std	Y+14, r24	; 0x0e
    862e:	8f ef       	ldi	r24, 0xFF	; 255
    8630:	8f 87       	std	Y+15, r24	; 0x0f
    8632:	8f ef       	ldi	r24, 0xFF	; 255
    8634:	88 8b       	std	Y+16, r24	; 0x10
    8636:	8f ef       	ldi	r24, 0xFF	; 255
    8638:	89 8b       	std	Y+17, r24	; 0x11
    863a:	ce 01       	movw	r24, r28
    863c:	0a 96       	adiw	r24, 0x0a	; 10
    863e:	bc 01       	movw	r22, r24
    8640:	8a 89       	ldd	r24, Y+18	; 0x12
    8642:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8646:	89 81       	ldd	r24, Y+1	; 0x01
    8648:	9a 81       	ldd	r25, Y+2	; 0x02
    864a:	22 e0       	ldi	r18, 0x02	; 2
    864c:	fc 01       	movw	r30, r24
    864e:	26 a3       	std	Z+38, r18	; 0x26
    8650:	54 c0       	rjmp	.+168    	; 0x86fa <lin_slave_session_ctr+0x1d8>
    8652:	8d 81       	ldd	r24, Y+5	; 0x05
    8654:	9e 81       	ldd	r25, Y+6	; 0x06
    8656:	fc 01       	movw	r30, r24
    8658:	80 81       	ld	r24, Z
    865a:	91 81       	ldd	r25, Z+1	; 0x01
    865c:	fc 01       	movw	r30, r24
    865e:	80 81       	ld	r24, Z
    8660:	8a 87       	std	Y+10, r24	; 0x0a
    8662:	82 e0       	ldi	r24, 0x02	; 2
    8664:	8b 87       	std	Y+11, r24	; 0x0b
    8666:	80 e5       	ldi	r24, 0x50	; 80
    8668:	8c 87       	std	Y+12, r24	; 0x0c
    866a:	80 91 6c 46 	lds	r24, 0x466C	; 0x80466c <sub_func_id>
    866e:	8d 87       	std	Y+13, r24	; 0x0d
    8670:	8f ef       	ldi	r24, 0xFF	; 255
    8672:	8e 87       	std	Y+14, r24	; 0x0e
    8674:	8f ef       	ldi	r24, 0xFF	; 255
    8676:	8f 87       	std	Y+15, r24	; 0x0f
    8678:	8f ef       	ldi	r24, 0xFF	; 255
    867a:	88 8b       	std	Y+16, r24	; 0x10
    867c:	8f ef       	ldi	r24, 0xFF	; 255
    867e:	89 8b       	std	Y+17, r24	; 0x11
    8680:	ce 01       	movw	r24, r28
    8682:	0a 96       	adiw	r24, 0x0a	; 10
    8684:	bc 01       	movw	r22, r24
    8686:	8a 89       	ldd	r24, Y+18	; 0x12
    8688:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    868c:	89 81       	ldd	r24, Y+1	; 0x01
    868e:	9a 81       	ldd	r25, Y+2	; 0x02
    8690:	22 e0       	ldi	r18, 0x02	; 2
    8692:	fc 01       	movw	r30, r24
    8694:	26 a3       	std	Z+38, r18	; 0x26
    8696:	31 c0       	rjmp	.+98     	; 0x86fa <lin_slave_session_ctr+0x1d8>
    8698:	8d 81       	ldd	r24, Y+5	; 0x05
    869a:	9e 81       	ldd	r25, Y+6	; 0x06
    869c:	fc 01       	movw	r30, r24
    869e:	80 81       	ld	r24, Z
    86a0:	91 81       	ldd	r25, Z+1	; 0x01
    86a2:	fc 01       	movw	r30, r24
    86a4:	80 81       	ld	r24, Z
    86a6:	8a 87       	std	Y+10, r24	; 0x0a
    86a8:	82 e0       	ldi	r24, 0x02	; 2
    86aa:	8b 87       	std	Y+11, r24	; 0x0b
    86ac:	80 e5       	ldi	r24, 0x50	; 80
    86ae:	8c 87       	std	Y+12, r24	; 0x0c
    86b0:	80 91 6c 46 	lds	r24, 0x466C	; 0x80466c <sub_func_id>
    86b4:	8d 87       	std	Y+13, r24	; 0x0d
    86b6:	8f ef       	ldi	r24, 0xFF	; 255
    86b8:	8e 87       	std	Y+14, r24	; 0x0e
    86ba:	8f ef       	ldi	r24, 0xFF	; 255
    86bc:	8f 87       	std	Y+15, r24	; 0x0f
    86be:	8f ef       	ldi	r24, 0xFF	; 255
    86c0:	88 8b       	std	Y+16, r24	; 0x10
    86c2:	8f ef       	ldi	r24, 0xFF	; 255
    86c4:	89 8b       	std	Y+17, r24	; 0x11
    86c6:	ce 01       	movw	r24, r28
    86c8:	0a 96       	adiw	r24, 0x0a	; 10
    86ca:	bc 01       	movw	r22, r24
    86cc:	8a 89       	ldd	r24, Y+18	; 0x12
    86ce:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    86d2:	89 81       	ldd	r24, Y+1	; 0x01
    86d4:	9a 81       	ldd	r25, Y+2	; 0x02
    86d6:	22 e0       	ldi	r18, 0x02	; 2
    86d8:	fc 01       	movw	r30, r24
    86da:	26 a3       	std	Z+38, r18	; 0x26
    86dc:	0e c0       	rjmp	.+28     	; 0x86fa <lin_slave_session_ctr+0x1d8>
    86de:	22 e1       	ldi	r18, 0x12	; 18
    86e0:	40 e0       	ldi	r20, 0x00	; 0
    86e2:	60 e1       	ldi	r22, 0x10	; 16
    86e4:	8a 89       	ldd	r24, Y+18	; 0x12
    86e6:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
    86ea:	00 00       	nop
    86ec:	06 c0       	rjmp	.+12     	; 0x86fa <lin_slave_session_ctr+0x1d8>
    86ee:	23 e1       	ldi	r18, 0x13	; 19
    86f0:	40 e0       	ldi	r20, 0x00	; 0
    86f2:	60 e1       	ldi	r22, 0x10	; 16
    86f4:	8a 89       	ldd	r24, Y+18	; 0x12
    86f6:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
    86fa:	00 00       	nop
    86fc:	62 96       	adiw	r28, 0x12	; 18
    86fe:	cd bf       	out	0x3d, r28	; 61
    8700:	de bf       	out	0x3e, r29	; 62
    8702:	df 91       	pop	r29
    8704:	cf 91       	pop	r28
    8706:	08 95       	ret

00008708 <lin_routine_control>:
    8708:	cf 93       	push	r28
    870a:	df 93       	push	r29
    870c:	cd b7       	in	r28, 0x3d	; 61
    870e:	de b7       	in	r29, 0x3e	; 62
    8710:	65 97       	sbiw	r28, 0x15	; 21
    8712:	cd bf       	out	0x3d, r28	; 61
    8714:	de bf       	out	0x3e, r29	; 62
    8716:	8d 8b       	std	Y+21, r24	; 0x15
    8718:	8d 89       	ldd	r24, Y+21	; 0x15
    871a:	28 2f       	mov	r18, r24
    871c:	30 e0       	ldi	r19, 0x00	; 0
    871e:	44 e3       	ldi	r20, 0x34	; 52
    8720:	42 9f       	mul	r20, r18
    8722:	c0 01       	movw	r24, r0
    8724:	43 9f       	mul	r20, r19
    8726:	90 0d       	add	r25, r0
    8728:	11 24       	eor	r1, r1
    872a:	83 59       	subi	r24, 0x93	; 147
    872c:	99 4b       	sbci	r25, 0xB9	; 185
    872e:	89 83       	std	Y+1, r24	; 0x01
    8730:	9a 83       	std	Y+2, r25	; 0x02
    8732:	8d 89       	ldd	r24, Y+21	; 0x15
    8734:	28 2f       	mov	r18, r24
    8736:	30 e0       	ldi	r19, 0x00	; 0
    8738:	4c e1       	ldi	r20, 0x1C	; 28
    873a:	42 9f       	mul	r20, r18
    873c:	c0 01       	movw	r24, r0
    873e:	43 9f       	mul	r20, r19
    8740:	90 0d       	add	r25, r0
    8742:	11 24       	eor	r1, r1
    8744:	86 56       	subi	r24, 0x66	; 102
    8746:	9d 4b       	sbci	r25, 0xBD	; 189
    8748:	8b 83       	std	Y+3, r24	; 0x03
    874a:	9c 83       	std	Y+4, r25	; 0x04
    874c:	8b 81       	ldd	r24, Y+3	; 0x03
    874e:	9c 81       	ldd	r25, Y+4	; 0x04
    8750:	fc 01       	movw	r30, r24
    8752:	82 89       	ldd	r24, Z+18	; 0x12
    8754:	28 2f       	mov	r18, r24
    8756:	30 e0       	ldi	r19, 0x00	; 0
    8758:	44 e2       	ldi	r20, 0x24	; 36
    875a:	42 9f       	mul	r20, r18
    875c:	c0 01       	movw	r24, r0
    875e:	43 9f       	mul	r20, r19
    8760:	90 0d       	add	r25, r0
    8762:	11 24       	eor	r1, r1
    8764:	8a 58       	subi	r24, 0x8A	; 138
    8766:	9d 4b       	sbci	r25, 0xBD	; 189
    8768:	8d 83       	std	Y+5, r24	; 0x05
    876a:	9e 83       	std	Y+6, r25	; 0x06
    876c:	89 81       	ldd	r24, Y+1	; 0x01
    876e:	9a 81       	ldd	r25, Y+2	; 0x02
    8770:	0b 96       	adiw	r24, 0x0b	; 11
    8772:	8f 83       	std	Y+7, r24	; 0x07
    8774:	98 87       	std	Y+8, r25	; 0x08
    8776:	8f 81       	ldd	r24, Y+7	; 0x07
    8778:	98 85       	ldd	r25, Y+8	; 0x08
    877a:	fc 01       	movw	r30, r24
    877c:	21 85       	ldd	r18, Z+9	; 0x09
    877e:	32 85       	ldd	r19, Z+10	; 0x0a
    8780:	8f 81       	ldd	r24, Y+7	; 0x07
    8782:	98 85       	ldd	r25, Y+8	; 0x08
    8784:	fc 01       	movw	r30, r24
    8786:	80 81       	ld	r24, Z
    8788:	91 81       	ldd	r25, Z+1	; 0x01
    878a:	88 0f       	add	r24, r24
    878c:	99 1f       	adc	r25, r25
    878e:	88 0f       	add	r24, r24
    8790:	99 1f       	adc	r25, r25
    8792:	88 0f       	add	r24, r24
    8794:	99 1f       	adc	r25, r25
    8796:	82 0f       	add	r24, r18
    8798:	93 1f       	adc	r25, r19
    879a:	fc 01       	movw	r30, r24
    879c:	81 81       	ldd	r24, Z+1	; 0x01
    879e:	82 95       	swap	r24
    87a0:	8f 70       	andi	r24, 0x0F	; 15
    87a2:	89 87       	std	Y+9, r24	; 0x09
    87a4:	89 85       	ldd	r24, Y+9	; 0x09
    87a6:	88 23       	and	r24, r24
    87a8:	09 f0       	breq	.+2      	; 0x87ac <lin_routine_control+0xa4>
    87aa:	8e c0       	rjmp	.+284    	; 0x88c8 <lin_routine_control+0x1c0>
    87ac:	8f 81       	ldd	r24, Y+7	; 0x07
    87ae:	98 85       	ldd	r25, Y+8	; 0x08
    87b0:	fc 01       	movw	r30, r24
    87b2:	21 85       	ldd	r18, Z+9	; 0x09
    87b4:	32 85       	ldd	r19, Z+10	; 0x0a
    87b6:	8f 81       	ldd	r24, Y+7	; 0x07
    87b8:	98 85       	ldd	r25, Y+8	; 0x08
    87ba:	fc 01       	movw	r30, r24
    87bc:	80 81       	ld	r24, Z
    87be:	91 81       	ldd	r25, Z+1	; 0x01
    87c0:	88 0f       	add	r24, r24
    87c2:	99 1f       	adc	r25, r25
    87c4:	88 0f       	add	r24, r24
    87c6:	99 1f       	adc	r25, r25
    87c8:	88 0f       	add	r24, r24
    87ca:	99 1f       	adc	r25, r25
    87cc:	82 0f       	add	r24, r18
    87ce:	93 1f       	adc	r25, r19
    87d0:	fc 01       	movw	r30, r24
    87d2:	84 81       	ldd	r24, Z+4	; 0x04
    87d4:	88 2f       	mov	r24, r24
    87d6:	90 e0       	ldi	r25, 0x00	; 0
    87d8:	98 2f       	mov	r25, r24
    87da:	88 27       	eor	r24, r24
    87dc:	8a 87       	std	Y+10, r24	; 0x0a
    87de:	9b 87       	std	Y+11, r25	; 0x0b
    87e0:	8f 81       	ldd	r24, Y+7	; 0x07
    87e2:	98 85       	ldd	r25, Y+8	; 0x08
    87e4:	fc 01       	movw	r30, r24
    87e6:	21 85       	ldd	r18, Z+9	; 0x09
    87e8:	32 85       	ldd	r19, Z+10	; 0x0a
    87ea:	8f 81       	ldd	r24, Y+7	; 0x07
    87ec:	98 85       	ldd	r25, Y+8	; 0x08
    87ee:	fc 01       	movw	r30, r24
    87f0:	80 81       	ld	r24, Z
    87f2:	91 81       	ldd	r25, Z+1	; 0x01
    87f4:	88 0f       	add	r24, r24
    87f6:	99 1f       	adc	r25, r25
    87f8:	88 0f       	add	r24, r24
    87fa:	99 1f       	adc	r25, r25
    87fc:	88 0f       	add	r24, r24
    87fe:	99 1f       	adc	r25, r25
    8800:	82 0f       	add	r24, r18
    8802:	93 1f       	adc	r25, r19
    8804:	fc 01       	movw	r30, r24
    8806:	85 81       	ldd	r24, Z+5	; 0x05
    8808:	88 2f       	mov	r24, r24
    880a:	90 e0       	ldi	r25, 0x00	; 0
    880c:	2a 85       	ldd	r18, Y+10	; 0x0a
    880e:	3b 85       	ldd	r19, Y+11	; 0x0b
    8810:	82 2b       	or	r24, r18
    8812:	93 2b       	or	r25, r19
    8814:	8a 87       	std	Y+10, r24	; 0x0a
    8816:	9b 87       	std	Y+11, r25	; 0x0b
    8818:	8f 81       	ldd	r24, Y+7	; 0x07
    881a:	98 85       	ldd	r25, Y+8	; 0x08
    881c:	fc 01       	movw	r30, r24
    881e:	21 85       	ldd	r18, Z+9	; 0x09
    8820:	32 85       	ldd	r19, Z+10	; 0x0a
    8822:	8f 81       	ldd	r24, Y+7	; 0x07
    8824:	98 85       	ldd	r25, Y+8	; 0x08
    8826:	fc 01       	movw	r30, r24
    8828:	80 81       	ld	r24, Z
    882a:	91 81       	ldd	r25, Z+1	; 0x01
    882c:	88 0f       	add	r24, r24
    882e:	99 1f       	adc	r25, r25
    8830:	88 0f       	add	r24, r24
    8832:	99 1f       	adc	r25, r25
    8834:	88 0f       	add	r24, r24
    8836:	99 1f       	adc	r25, r25
    8838:	82 0f       	add	r24, r18
    883a:	93 1f       	adc	r25, r19
    883c:	fc 01       	movw	r30, r24
    883e:	83 81       	ldd	r24, Z+3	; 0x03
    8840:	8c 87       	std	Y+12, r24	; 0x0c
    8842:	8c 85       	ldd	r24, Y+12	; 0x0c
    8844:	81 30       	cpi	r24, 0x01	; 1
    8846:	e1 f4       	brne	.+56     	; 0x8880 <lin_routine_control+0x178>
    8848:	8a 85       	ldd	r24, Y+10	; 0x0a
    884a:	9b 85       	ldd	r25, Y+11	; 0x0b
    884c:	83 30       	cpi	r24, 0x03	; 3
    884e:	92 40       	sbci	r25, 0x02	; 2
    8850:	b9 f4       	brne	.+46     	; 0x8880 <lin_routine_control+0x178>
    8852:	8d 81       	ldd	r24, Y+5	; 0x05
    8854:	9e 81       	ldd	r25, Y+6	; 0x06
    8856:	fc 01       	movw	r30, r24
    8858:	80 81       	ld	r24, Z
    885a:	91 81       	ldd	r25, Z+1	; 0x01
    885c:	fc 01       	movw	r30, r24
    885e:	80 81       	ld	r24, Z
    8860:	8d 87       	std	Y+13, r24	; 0x0d
    8862:	85 e0       	ldi	r24, 0x05	; 5
    8864:	8e 87       	std	Y+14, r24	; 0x0e
    8866:	81 e7       	ldi	r24, 0x71	; 113
    8868:	8f 87       	std	Y+15, r24	; 0x0f
    886a:	81 e0       	ldi	r24, 0x01	; 1
    886c:	88 8b       	std	Y+16, r24	; 0x10
    886e:	82 e0       	ldi	r24, 0x02	; 2
    8870:	89 8b       	std	Y+17, r24	; 0x11
    8872:	83 e0       	ldi	r24, 0x03	; 3
    8874:	8a 8b       	std	Y+18, r24	; 0x12
    8876:	82 e0       	ldi	r24, 0x02	; 2
    8878:	8b 8b       	std	Y+19, r24	; 0x13
    887a:	8f ef       	ldi	r24, 0xFF	; 255
    887c:	8c 8b       	std	Y+20, r24	; 0x14
    887e:	92 c0       	rjmp	.+292    	; 0x89a4 <lin_routine_control+0x29c>
    8880:	8c 85       	ldd	r24, Y+12	; 0x0c
    8882:	83 30       	cpi	r24, 0x03	; 3
    8884:	09 f0       	breq	.+2      	; 0x8888 <lin_routine_control+0x180>
    8886:	8e c0       	rjmp	.+284    	; 0x89a4 <lin_routine_control+0x29c>
    8888:	8a 85       	ldd	r24, Y+10	; 0x0a
    888a:	9b 85       	ldd	r25, Y+11	; 0x0b
    888c:	83 30       	cpi	r24, 0x03	; 3
    888e:	92 40       	sbci	r25, 0x02	; 2
    8890:	09 f0       	breq	.+2      	; 0x8894 <lin_routine_control+0x18c>
    8892:	88 c0       	rjmp	.+272    	; 0x89a4 <lin_routine_control+0x29c>
    8894:	8d 81       	ldd	r24, Y+5	; 0x05
    8896:	9e 81       	ldd	r25, Y+6	; 0x06
    8898:	fc 01       	movw	r30, r24
    889a:	80 81       	ld	r24, Z
    889c:	91 81       	ldd	r25, Z+1	; 0x01
    889e:	fc 01       	movw	r30, r24
    88a0:	80 81       	ld	r24, Z
    88a2:	8d 87       	std	Y+13, r24	; 0x0d
    88a4:	85 e0       	ldi	r24, 0x05	; 5
    88a6:	8e 87       	std	Y+14, r24	; 0x0e
    88a8:	81 e7       	ldi	r24, 0x71	; 113
    88aa:	8f 87       	std	Y+15, r24	; 0x0f
    88ac:	83 e0       	ldi	r24, 0x03	; 3
    88ae:	88 8b       	std	Y+16, r24	; 0x10
    88b0:	82 e0       	ldi	r24, 0x02	; 2
    88b2:	89 8b       	std	Y+17, r24	; 0x11
    88b4:	83 e0       	ldi	r24, 0x03	; 3
    88b6:	8a 8b       	std	Y+18, r24	; 0x12
    88b8:	82 e0       	ldi	r24, 0x02	; 2
    88ba:	8b 8b       	std	Y+19, r24	; 0x13
    88bc:	8f ef       	ldi	r24, 0xFF	; 255
    88be:	8c 8b       	std	Y+20, r24	; 0x14
    88c0:	81 e0       	ldi	r24, 0x01	; 1
    88c2:	80 93 07 43 	sts	0x4307, r24	; 0x804307 <eeprom_set_boot_flg>
    88c6:	6e c0       	rjmp	.+220    	; 0x89a4 <lin_routine_control+0x29c>
    88c8:	8f 81       	ldd	r24, Y+7	; 0x07
    88ca:	98 85       	ldd	r25, Y+8	; 0x08
    88cc:	fc 01       	movw	r30, r24
    88ce:	21 85       	ldd	r18, Z+9	; 0x09
    88d0:	32 85       	ldd	r19, Z+10	; 0x0a
    88d2:	8f 81       	ldd	r24, Y+7	; 0x07
    88d4:	98 85       	ldd	r25, Y+8	; 0x08
    88d6:	fc 01       	movw	r30, r24
    88d8:	80 81       	ld	r24, Z
    88da:	91 81       	ldd	r25, Z+1	; 0x01
    88dc:	88 0f       	add	r24, r24
    88de:	99 1f       	adc	r25, r25
    88e0:	88 0f       	add	r24, r24
    88e2:	99 1f       	adc	r25, r25
    88e4:	88 0f       	add	r24, r24
    88e6:	99 1f       	adc	r25, r25
    88e8:	82 0f       	add	r24, r18
    88ea:	93 1f       	adc	r25, r19
    88ec:	fc 01       	movw	r30, r24
    88ee:	85 81       	ldd	r24, Z+5	; 0x05
    88f0:	88 2f       	mov	r24, r24
    88f2:	90 e0       	ldi	r25, 0x00	; 0
    88f4:	98 2f       	mov	r25, r24
    88f6:	88 27       	eor	r24, r24
    88f8:	8a 87       	std	Y+10, r24	; 0x0a
    88fa:	9b 87       	std	Y+11, r25	; 0x0b
    88fc:	8f 81       	ldd	r24, Y+7	; 0x07
    88fe:	98 85       	ldd	r25, Y+8	; 0x08
    8900:	fc 01       	movw	r30, r24
    8902:	21 85       	ldd	r18, Z+9	; 0x09
    8904:	32 85       	ldd	r19, Z+10	; 0x0a
    8906:	8f 81       	ldd	r24, Y+7	; 0x07
    8908:	98 85       	ldd	r25, Y+8	; 0x08
    890a:	fc 01       	movw	r30, r24
    890c:	80 81       	ld	r24, Z
    890e:	91 81       	ldd	r25, Z+1	; 0x01
    8910:	88 0f       	add	r24, r24
    8912:	99 1f       	adc	r25, r25
    8914:	88 0f       	add	r24, r24
    8916:	99 1f       	adc	r25, r25
    8918:	88 0f       	add	r24, r24
    891a:	99 1f       	adc	r25, r25
    891c:	82 0f       	add	r24, r18
    891e:	93 1f       	adc	r25, r19
    8920:	fc 01       	movw	r30, r24
    8922:	86 81       	ldd	r24, Z+6	; 0x06
    8924:	88 2f       	mov	r24, r24
    8926:	90 e0       	ldi	r25, 0x00	; 0
    8928:	2a 85       	ldd	r18, Y+10	; 0x0a
    892a:	3b 85       	ldd	r19, Y+11	; 0x0b
    892c:	82 2b       	or	r24, r18
    892e:	93 2b       	or	r25, r19
    8930:	8a 87       	std	Y+10, r24	; 0x0a
    8932:	9b 87       	std	Y+11, r25	; 0x0b
    8934:	8f 81       	ldd	r24, Y+7	; 0x07
    8936:	98 85       	ldd	r25, Y+8	; 0x08
    8938:	fc 01       	movw	r30, r24
    893a:	21 85       	ldd	r18, Z+9	; 0x09
    893c:	32 85       	ldd	r19, Z+10	; 0x0a
    893e:	8f 81       	ldd	r24, Y+7	; 0x07
    8940:	98 85       	ldd	r25, Y+8	; 0x08
    8942:	fc 01       	movw	r30, r24
    8944:	80 81       	ld	r24, Z
    8946:	91 81       	ldd	r25, Z+1	; 0x01
    8948:	88 0f       	add	r24, r24
    894a:	99 1f       	adc	r25, r25
    894c:	88 0f       	add	r24, r24
    894e:	99 1f       	adc	r25, r25
    8950:	88 0f       	add	r24, r24
    8952:	99 1f       	adc	r25, r25
    8954:	82 0f       	add	r24, r18
    8956:	93 1f       	adc	r25, r19
    8958:	fc 01       	movw	r30, r24
    895a:	84 81       	ldd	r24, Z+4	; 0x04
    895c:	8c 87       	std	Y+12, r24	; 0x0c
    895e:	8c 85       	ldd	r24, Y+12	; 0x0c
    8960:	81 30       	cpi	r24, 0x01	; 1
    8962:	01 f5       	brne	.+64     	; 0x89a4 <lin_routine_control+0x29c>
    8964:	8a 85       	ldd	r24, Y+10	; 0x0a
    8966:	9b 85       	ldd	r25, Y+11	; 0x0b
    8968:	81 15       	cp	r24, r1
    896a:	9f 4f       	sbci	r25, 0xFF	; 255
    896c:	d9 f4       	brne	.+54     	; 0x89a4 <lin_routine_control+0x29c>
    896e:	81 e0       	ldi	r24, 0x01	; 1
    8970:	90 e0       	ldi	r25, 0x00	; 0
    8972:	80 93 08 43 	sts	0x4308, r24	; 0x804308 <erase_flag>
    8976:	90 93 09 43 	sts	0x4309, r25	; 0x804309 <erase_flag+0x1>
    897a:	8d 81       	ldd	r24, Y+5	; 0x05
    897c:	9e 81       	ldd	r25, Y+6	; 0x06
    897e:	fc 01       	movw	r30, r24
    8980:	80 81       	ld	r24, Z
    8982:	91 81       	ldd	r25, Z+1	; 0x01
    8984:	fc 01       	movw	r30, r24
    8986:	80 81       	ld	r24, Z
    8988:	8d 87       	std	Y+13, r24	; 0x0d
    898a:	85 e0       	ldi	r24, 0x05	; 5
    898c:	8e 87       	std	Y+14, r24	; 0x0e
    898e:	81 e7       	ldi	r24, 0x71	; 113
    8990:	8f 87       	std	Y+15, r24	; 0x0f
    8992:	81 e0       	ldi	r24, 0x01	; 1
    8994:	88 8b       	std	Y+16, r24	; 0x10
    8996:	8f ef       	ldi	r24, 0xFF	; 255
    8998:	89 8b       	std	Y+17, r24	; 0x11
    899a:	1a 8a       	std	Y+18, r1	; 0x12
    899c:	82 e0       	ldi	r24, 0x02	; 2
    899e:	8b 8b       	std	Y+19, r24	; 0x13
    89a0:	8f ef       	ldi	r24, 0xFF	; 255
    89a2:	8c 8b       	std	Y+20, r24	; 0x14
    89a4:	ce 01       	movw	r24, r28
    89a6:	0d 96       	adiw	r24, 0x0d	; 13
    89a8:	bc 01       	movw	r22, r24
    89aa:	8d 89       	ldd	r24, Y+21	; 0x15
    89ac:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    89b0:	89 81       	ldd	r24, Y+1	; 0x01
    89b2:	9a 81       	ldd	r25, Y+2	; 0x02
    89b4:	22 e0       	ldi	r18, 0x02	; 2
    89b6:	fc 01       	movw	r30, r24
    89b8:	26 a3       	std	Z+38, r18	; 0x26
    89ba:	00 00       	nop
    89bc:	65 96       	adiw	r28, 0x15	; 21
    89be:	cd bf       	out	0x3d, r28	; 61
    89c0:	de bf       	out	0x3e, r29	; 62
    89c2:	df 91       	pop	r29
    89c4:	cf 91       	pop	r28
    89c6:	08 95       	ret

000089c8 <control_dtc_setting>:
    89c8:	cf 93       	push	r28
    89ca:	df 93       	push	r29
    89cc:	cd b7       	in	r28, 0x3d	; 61
    89ce:	de b7       	in	r29, 0x3e	; 62
    89d0:	62 97       	sbiw	r28, 0x12	; 18
    89d2:	cd bf       	out	0x3d, r28	; 61
    89d4:	de bf       	out	0x3e, r29	; 62
    89d6:	8a 8b       	std	Y+18, r24	; 0x12
    89d8:	8a 89       	ldd	r24, Y+18	; 0x12
    89da:	28 2f       	mov	r18, r24
    89dc:	30 e0       	ldi	r19, 0x00	; 0
    89de:	44 e3       	ldi	r20, 0x34	; 52
    89e0:	42 9f       	mul	r20, r18
    89e2:	c0 01       	movw	r24, r0
    89e4:	43 9f       	mul	r20, r19
    89e6:	90 0d       	add	r25, r0
    89e8:	11 24       	eor	r1, r1
    89ea:	83 59       	subi	r24, 0x93	; 147
    89ec:	99 4b       	sbci	r25, 0xB9	; 185
    89ee:	89 83       	std	Y+1, r24	; 0x01
    89f0:	9a 83       	std	Y+2, r25	; 0x02
    89f2:	8a 89       	ldd	r24, Y+18	; 0x12
    89f4:	28 2f       	mov	r18, r24
    89f6:	30 e0       	ldi	r19, 0x00	; 0
    89f8:	4c e1       	ldi	r20, 0x1C	; 28
    89fa:	42 9f       	mul	r20, r18
    89fc:	c0 01       	movw	r24, r0
    89fe:	43 9f       	mul	r20, r19
    8a00:	90 0d       	add	r25, r0
    8a02:	11 24       	eor	r1, r1
    8a04:	86 56       	subi	r24, 0x66	; 102
    8a06:	9d 4b       	sbci	r25, 0xBD	; 189
    8a08:	8b 83       	std	Y+3, r24	; 0x03
    8a0a:	9c 83       	std	Y+4, r25	; 0x04
    8a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    8a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    8a10:	fc 01       	movw	r30, r24
    8a12:	82 89       	ldd	r24, Z+18	; 0x12
    8a14:	28 2f       	mov	r18, r24
    8a16:	30 e0       	ldi	r19, 0x00	; 0
    8a18:	44 e2       	ldi	r20, 0x24	; 36
    8a1a:	42 9f       	mul	r20, r18
    8a1c:	c0 01       	movw	r24, r0
    8a1e:	43 9f       	mul	r20, r19
    8a20:	90 0d       	add	r25, r0
    8a22:	11 24       	eor	r1, r1
    8a24:	8a 58       	subi	r24, 0x8A	; 138
    8a26:	9d 4b       	sbci	r25, 0xBD	; 189
    8a28:	8d 83       	std	Y+5, r24	; 0x05
    8a2a:	9e 83       	std	Y+6, r25	; 0x06
    8a2c:	89 81       	ldd	r24, Y+1	; 0x01
    8a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    8a30:	0b 96       	adiw	r24, 0x0b	; 11
    8a32:	8f 83       	std	Y+7, r24	; 0x07
    8a34:	98 87       	std	Y+8, r25	; 0x08
    8a36:	8f 81       	ldd	r24, Y+7	; 0x07
    8a38:	98 85       	ldd	r25, Y+8	; 0x08
    8a3a:	fc 01       	movw	r30, r24
    8a3c:	21 85       	ldd	r18, Z+9	; 0x09
    8a3e:	32 85       	ldd	r19, Z+10	; 0x0a
    8a40:	8f 81       	ldd	r24, Y+7	; 0x07
    8a42:	98 85       	ldd	r25, Y+8	; 0x08
    8a44:	fc 01       	movw	r30, r24
    8a46:	80 81       	ld	r24, Z
    8a48:	91 81       	ldd	r25, Z+1	; 0x01
    8a4a:	88 0f       	add	r24, r24
    8a4c:	99 1f       	adc	r25, r25
    8a4e:	88 0f       	add	r24, r24
    8a50:	99 1f       	adc	r25, r25
    8a52:	88 0f       	add	r24, r24
    8a54:	99 1f       	adc	r25, r25
    8a56:	82 0f       	add	r24, r18
    8a58:	93 1f       	adc	r25, r19
    8a5a:	fc 01       	movw	r30, r24
    8a5c:	83 81       	ldd	r24, Z+3	; 0x03
    8a5e:	89 87       	std	Y+9, r24	; 0x09
    8a60:	89 85       	ldd	r24, Y+9	; 0x09
    8a62:	81 30       	cpi	r24, 0x01	; 1
    8a64:	11 f5       	brne	.+68     	; 0x8aaa <control_dtc_setting+0xe2>
    8a66:	8d 81       	ldd	r24, Y+5	; 0x05
    8a68:	9e 81       	ldd	r25, Y+6	; 0x06
    8a6a:	fc 01       	movw	r30, r24
    8a6c:	80 81       	ld	r24, Z
    8a6e:	91 81       	ldd	r25, Z+1	; 0x01
    8a70:	fc 01       	movw	r30, r24
    8a72:	80 81       	ld	r24, Z
    8a74:	8a 87       	std	Y+10, r24	; 0x0a
    8a76:	82 e0       	ldi	r24, 0x02	; 2
    8a78:	8b 87       	std	Y+11, r24	; 0x0b
    8a7a:	85 ec       	ldi	r24, 0xC5	; 197
    8a7c:	8c 87       	std	Y+12, r24	; 0x0c
    8a7e:	81 e0       	ldi	r24, 0x01	; 1
    8a80:	8d 87       	std	Y+13, r24	; 0x0d
    8a82:	8f ef       	ldi	r24, 0xFF	; 255
    8a84:	8e 87       	std	Y+14, r24	; 0x0e
    8a86:	8f ef       	ldi	r24, 0xFF	; 255
    8a88:	8f 87       	std	Y+15, r24	; 0x0f
    8a8a:	8f ef       	ldi	r24, 0xFF	; 255
    8a8c:	88 8b       	std	Y+16, r24	; 0x10
    8a8e:	8f ef       	ldi	r24, 0xFF	; 255
    8a90:	89 8b       	std	Y+17, r24	; 0x11
    8a92:	ce 01       	movw	r24, r28
    8a94:	0a 96       	adiw	r24, 0x0a	; 10
    8a96:	bc 01       	movw	r22, r24
    8a98:	8a 89       	ldd	r24, Y+18	; 0x12
    8a9a:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8a9e:	89 81       	ldd	r24, Y+1	; 0x01
    8aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    8aa2:	22 e0       	ldi	r18, 0x02	; 2
    8aa4:	fc 01       	movw	r30, r24
    8aa6:	26 a3       	std	Z+38, r18	; 0x26
    8aa8:	24 c0       	rjmp	.+72     	; 0x8af2 <control_dtc_setting+0x12a>
    8aaa:	89 85       	ldd	r24, Y+9	; 0x09
    8aac:	82 30       	cpi	r24, 0x02	; 2
    8aae:	09 f5       	brne	.+66     	; 0x8af2 <control_dtc_setting+0x12a>
    8ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    8ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    8ab4:	fc 01       	movw	r30, r24
    8ab6:	80 81       	ld	r24, Z
    8ab8:	91 81       	ldd	r25, Z+1	; 0x01
    8aba:	fc 01       	movw	r30, r24
    8abc:	80 81       	ld	r24, Z
    8abe:	8a 87       	std	Y+10, r24	; 0x0a
    8ac0:	82 e0       	ldi	r24, 0x02	; 2
    8ac2:	8b 87       	std	Y+11, r24	; 0x0b
    8ac4:	85 ec       	ldi	r24, 0xC5	; 197
    8ac6:	8c 87       	std	Y+12, r24	; 0x0c
    8ac8:	82 e0       	ldi	r24, 0x02	; 2
    8aca:	8d 87       	std	Y+13, r24	; 0x0d
    8acc:	8f ef       	ldi	r24, 0xFF	; 255
    8ace:	8e 87       	std	Y+14, r24	; 0x0e
    8ad0:	8f ef       	ldi	r24, 0xFF	; 255
    8ad2:	8f 87       	std	Y+15, r24	; 0x0f
    8ad4:	8f ef       	ldi	r24, 0xFF	; 255
    8ad6:	88 8b       	std	Y+16, r24	; 0x10
    8ad8:	8f ef       	ldi	r24, 0xFF	; 255
    8ada:	89 8b       	std	Y+17, r24	; 0x11
    8adc:	ce 01       	movw	r24, r28
    8ade:	0a 96       	adiw	r24, 0x0a	; 10
    8ae0:	bc 01       	movw	r22, r24
    8ae2:	8a 89       	ldd	r24, Y+18	; 0x12
    8ae4:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8ae8:	89 81       	ldd	r24, Y+1	; 0x01
    8aea:	9a 81       	ldd	r25, Y+2	; 0x02
    8aec:	22 e0       	ldi	r18, 0x02	; 2
    8aee:	fc 01       	movw	r30, r24
    8af0:	26 a3       	std	Z+38, r18	; 0x26
    8af2:	00 00       	nop
    8af4:	62 96       	adiw	r28, 0x12	; 18
    8af6:	cd bf       	out	0x3d, r28	; 61
    8af8:	de bf       	out	0x3e, r29	; 62
    8afa:	df 91       	pop	r29
    8afc:	cf 91       	pop	r28
    8afe:	08 95       	ret

00008b00 <lin_transfer_data>:
    8b00:	cf 93       	push	r28
    8b02:	df 93       	push	r29
    8b04:	cd b7       	in	r28, 0x3d	; 61
    8b06:	de b7       	in	r29, 0x3e	; 62
    8b08:	69 97       	sbiw	r28, 0x19	; 25
    8b0a:	cd bf       	out	0x3d, r28	; 61
    8b0c:	de bf       	out	0x3e, r29	; 62
    8b0e:	89 8f       	std	Y+25, r24	; 0x19
    8b10:	19 82       	std	Y+1, r1	; 0x01
    8b12:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <update_cnt>
    8b16:	90 91 0f 45 	lds	r25, 0x450F	; 0x80450f <update_cnt+0x1>
    8b1a:	8a 83       	std	Y+2, r24	; 0x02
    8b1c:	9b 83       	std	Y+3, r25	; 0x03
    8b1e:	1c 82       	std	Y+4, r1	; 0x04
    8b20:	1d 82       	std	Y+5, r1	; 0x05
    8b22:	89 8d       	ldd	r24, Y+25	; 0x19
    8b24:	28 2f       	mov	r18, r24
    8b26:	30 e0       	ldi	r19, 0x00	; 0
    8b28:	44 e3       	ldi	r20, 0x34	; 52
    8b2a:	42 9f       	mul	r20, r18
    8b2c:	c0 01       	movw	r24, r0
    8b2e:	43 9f       	mul	r20, r19
    8b30:	90 0d       	add	r25, r0
    8b32:	11 24       	eor	r1, r1
    8b34:	83 59       	subi	r24, 0x93	; 147
    8b36:	99 4b       	sbci	r25, 0xB9	; 185
    8b38:	8e 83       	std	Y+6, r24	; 0x06
    8b3a:	9f 83       	std	Y+7, r25	; 0x07
    8b3c:	89 8d       	ldd	r24, Y+25	; 0x19
    8b3e:	28 2f       	mov	r18, r24
    8b40:	30 e0       	ldi	r19, 0x00	; 0
    8b42:	4c e1       	ldi	r20, 0x1C	; 28
    8b44:	42 9f       	mul	r20, r18
    8b46:	c0 01       	movw	r24, r0
    8b48:	43 9f       	mul	r20, r19
    8b4a:	90 0d       	add	r25, r0
    8b4c:	11 24       	eor	r1, r1
    8b4e:	86 56       	subi	r24, 0x66	; 102
    8b50:	9d 4b       	sbci	r25, 0xBD	; 189
    8b52:	88 87       	std	Y+8, r24	; 0x08
    8b54:	99 87       	std	Y+9, r25	; 0x09
    8b56:	88 85       	ldd	r24, Y+8	; 0x08
    8b58:	99 85       	ldd	r25, Y+9	; 0x09
    8b5a:	fc 01       	movw	r30, r24
    8b5c:	82 89       	ldd	r24, Z+18	; 0x12
    8b5e:	28 2f       	mov	r18, r24
    8b60:	30 e0       	ldi	r19, 0x00	; 0
    8b62:	44 e2       	ldi	r20, 0x24	; 36
    8b64:	42 9f       	mul	r20, r18
    8b66:	c0 01       	movw	r24, r0
    8b68:	43 9f       	mul	r20, r19
    8b6a:	90 0d       	add	r25, r0
    8b6c:	11 24       	eor	r1, r1
    8b6e:	8a 58       	subi	r24, 0x8A	; 138
    8b70:	9d 4b       	sbci	r25, 0xBD	; 189
    8b72:	8a 87       	std	Y+10, r24	; 0x0a
    8b74:	9b 87       	std	Y+11, r25	; 0x0b
    8b76:	8e 81       	ldd	r24, Y+6	; 0x06
    8b78:	9f 81       	ldd	r25, Y+7	; 0x07
    8b7a:	0b 96       	adiw	r24, 0x0b	; 11
    8b7c:	8c 87       	std	Y+12, r24	; 0x0c
    8b7e:	9d 87       	std	Y+13, r25	; 0x0d
    8b80:	8c 85       	ldd	r24, Y+12	; 0x0c
    8b82:	9d 85       	ldd	r25, Y+13	; 0x0d
    8b84:	fc 01       	movw	r30, r24
    8b86:	21 85       	ldd	r18, Z+9	; 0x09
    8b88:	32 85       	ldd	r19, Z+10	; 0x0a
    8b8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    8b8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    8b8e:	fc 01       	movw	r30, r24
    8b90:	80 81       	ld	r24, Z
    8b92:	91 81       	ldd	r25, Z+1	; 0x01
    8b94:	88 0f       	add	r24, r24
    8b96:	99 1f       	adc	r25, r25
    8b98:	88 0f       	add	r24, r24
    8b9a:	99 1f       	adc	r25, r25
    8b9c:	88 0f       	add	r24, r24
    8b9e:	99 1f       	adc	r25, r25
    8ba0:	82 0f       	add	r24, r18
    8ba2:	93 1f       	adc	r25, r19
    8ba4:	fc 01       	movw	r30, r24
    8ba6:	81 81       	ldd	r24, Z+1	; 0x01
    8ba8:	82 95       	swap	r24
    8baa:	8f 70       	andi	r24, 0x0F	; 15
    8bac:	8e 87       	std	Y+14, r24	; 0x0e
    8bae:	8e 85       	ldd	r24, Y+14	; 0x0e
    8bb0:	88 23       	and	r24, r24
    8bb2:	09 f4       	brne	.+2      	; 0x8bb6 <lin_transfer_data+0xb6>
    8bb4:	da c1       	rjmp	.+948    	; 0x8f6a <lin_transfer_data+0x46a>
    8bb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    8bb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    8bba:	fc 01       	movw	r30, r24
    8bbc:	21 85       	ldd	r18, Z+9	; 0x09
    8bbe:	32 85       	ldd	r19, Z+10	; 0x0a
    8bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    8bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    8bc4:	fc 01       	movw	r30, r24
    8bc6:	80 81       	ld	r24, Z
    8bc8:	91 81       	ldd	r25, Z+1	; 0x01
    8bca:	88 0f       	add	r24, r24
    8bcc:	99 1f       	adc	r25, r25
    8bce:	88 0f       	add	r24, r24
    8bd0:	99 1f       	adc	r25, r25
    8bd2:	88 0f       	add	r24, r24
    8bd4:	99 1f       	adc	r25, r25
    8bd6:	82 0f       	add	r24, r18
    8bd8:	93 1f       	adc	r25, r19
    8bda:	fc 01       	movw	r30, r24
    8bdc:	84 81       	ldd	r24, Z+4	; 0x04
    8bde:	8f 87       	std	Y+15, r24	; 0x0f
    8be0:	8c 85       	ldd	r24, Y+12	; 0x0c
    8be2:	9d 85       	ldd	r25, Y+13	; 0x0d
    8be4:	fc 01       	movw	r30, r24
    8be6:	21 85       	ldd	r18, Z+9	; 0x09
    8be8:	32 85       	ldd	r19, Z+10	; 0x0a
    8bea:	8c 85       	ldd	r24, Y+12	; 0x0c
    8bec:	9d 85       	ldd	r25, Y+13	; 0x0d
    8bee:	fc 01       	movw	r30, r24
    8bf0:	80 81       	ld	r24, Z
    8bf2:	91 81       	ldd	r25, Z+1	; 0x01
    8bf4:	88 0f       	add	r24, r24
    8bf6:	99 1f       	adc	r25, r25
    8bf8:	88 0f       	add	r24, r24
    8bfa:	99 1f       	adc	r25, r25
    8bfc:	88 0f       	add	r24, r24
    8bfe:	99 1f       	adc	r25, r25
    8c00:	82 0f       	add	r24, r18
    8c02:	93 1f       	adc	r25, r19
    8c04:	fc 01       	movw	r30, r24
    8c06:	82 81       	ldd	r24, Z+2	; 0x02
    8c08:	82 50       	subi	r24, 0x02	; 2
    8c0a:	88 8b       	std	Y+16, r24	; 0x10
    8c0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    8c0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8c10:	fc 01       	movw	r30, r24
    8c12:	80 81       	ld	r24, Z
    8c14:	91 81       	ldd	r25, Z+1	; 0x01
    8c16:	8c 83       	std	Y+4, r24	; 0x04
    8c18:	9d 83       	std	Y+5, r25	; 0x05
    8c1a:	90 91 6b 46 	lds	r25, 0x466B	; 0x80466b <history_blcok_count>
    8c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    8c20:	98 17       	cp	r25, r24
    8c22:	09 f0       	breq	.+2      	; 0x8c26 <lin_transfer_data+0x126>
    8c24:	8c c1       	rjmp	.+792    	; 0x8f3e <lin_transfer_data+0x43e>
    8c26:	8a 81       	ldd	r24, Y+2	; 0x02
    8c28:	9b 81       	ldd	r25, Y+3	; 0x03
    8c2a:	9c 01       	movw	r18, r24
    8c2c:	2f 5f       	subi	r18, 0xFF	; 255
    8c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    8c30:	2a 83       	std	Y+2, r18	; 0x02
    8c32:	3b 83       	std	Y+3, r19	; 0x03
    8c34:	2c 85       	ldd	r18, Y+12	; 0x0c
    8c36:	3d 85       	ldd	r19, Y+13	; 0x0d
    8c38:	f9 01       	movw	r30, r18
    8c3a:	41 85       	ldd	r20, Z+9	; 0x09
    8c3c:	52 85       	ldd	r21, Z+10	; 0x0a
    8c3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    8c40:	3d 85       	ldd	r19, Y+13	; 0x0d
    8c42:	f9 01       	movw	r30, r18
    8c44:	20 81       	ld	r18, Z
    8c46:	31 81       	ldd	r19, Z+1	; 0x01
    8c48:	22 0f       	add	r18, r18
    8c4a:	33 1f       	adc	r19, r19
    8c4c:	22 0f       	add	r18, r18
    8c4e:	33 1f       	adc	r19, r19
    8c50:	22 0f       	add	r18, r18
    8c52:	33 1f       	adc	r19, r19
    8c54:	24 0f       	add	r18, r20
    8c56:	35 1f       	adc	r19, r21
    8c58:	f9 01       	movw	r30, r18
    8c5a:	25 81       	ldd	r18, Z+5	; 0x05
    8c5c:	82 5f       	subi	r24, 0xF2	; 242
    8c5e:	9c 4b       	sbci	r25, 0xBC	; 188
    8c60:	fc 01       	movw	r30, r24
    8c62:	20 83       	st	Z, r18
    8c64:	8a 81       	ldd	r24, Y+2	; 0x02
    8c66:	9b 81       	ldd	r25, Y+3	; 0x03
    8c68:	9c 01       	movw	r18, r24
    8c6a:	2f 5f       	subi	r18, 0xFF	; 255
    8c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    8c6e:	2a 83       	std	Y+2, r18	; 0x02
    8c70:	3b 83       	std	Y+3, r19	; 0x03
    8c72:	2c 85       	ldd	r18, Y+12	; 0x0c
    8c74:	3d 85       	ldd	r19, Y+13	; 0x0d
    8c76:	f9 01       	movw	r30, r18
    8c78:	41 85       	ldd	r20, Z+9	; 0x09
    8c7a:	52 85       	ldd	r21, Z+10	; 0x0a
    8c7c:	2c 85       	ldd	r18, Y+12	; 0x0c
    8c7e:	3d 85       	ldd	r19, Y+13	; 0x0d
    8c80:	f9 01       	movw	r30, r18
    8c82:	20 81       	ld	r18, Z
    8c84:	31 81       	ldd	r19, Z+1	; 0x01
    8c86:	22 0f       	add	r18, r18
    8c88:	33 1f       	adc	r19, r19
    8c8a:	22 0f       	add	r18, r18
    8c8c:	33 1f       	adc	r19, r19
    8c8e:	22 0f       	add	r18, r18
    8c90:	33 1f       	adc	r19, r19
    8c92:	24 0f       	add	r18, r20
    8c94:	35 1f       	adc	r19, r21
    8c96:	f9 01       	movw	r30, r18
    8c98:	26 81       	ldd	r18, Z+6	; 0x06
    8c9a:	82 5f       	subi	r24, 0xF2	; 242
    8c9c:	9c 4b       	sbci	r25, 0xBC	; 188
    8c9e:	fc 01       	movw	r30, r24
    8ca0:	20 83       	st	Z, r18
    8ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    8ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    8ca6:	9c 01       	movw	r18, r24
    8ca8:	2f 5f       	subi	r18, 0xFF	; 255
    8caa:	3f 4f       	sbci	r19, 0xFF	; 255
    8cac:	2a 83       	std	Y+2, r18	; 0x02
    8cae:	3b 83       	std	Y+3, r19	; 0x03
    8cb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    8cb2:	3d 85       	ldd	r19, Y+13	; 0x0d
    8cb4:	f9 01       	movw	r30, r18
    8cb6:	41 85       	ldd	r20, Z+9	; 0x09
    8cb8:	52 85       	ldd	r21, Z+10	; 0x0a
    8cba:	2c 85       	ldd	r18, Y+12	; 0x0c
    8cbc:	3d 85       	ldd	r19, Y+13	; 0x0d
    8cbe:	f9 01       	movw	r30, r18
    8cc0:	20 81       	ld	r18, Z
    8cc2:	31 81       	ldd	r19, Z+1	; 0x01
    8cc4:	22 0f       	add	r18, r18
    8cc6:	33 1f       	adc	r19, r19
    8cc8:	22 0f       	add	r18, r18
    8cca:	33 1f       	adc	r19, r19
    8ccc:	22 0f       	add	r18, r18
    8cce:	33 1f       	adc	r19, r19
    8cd0:	24 0f       	add	r18, r20
    8cd2:	35 1f       	adc	r19, r21
    8cd4:	f9 01       	movw	r30, r18
    8cd6:	27 81       	ldd	r18, Z+7	; 0x07
    8cd8:	82 5f       	subi	r24, 0xF2	; 242
    8cda:	9c 4b       	sbci	r25, 0xBC	; 188
    8cdc:	fc 01       	movw	r30, r24
    8cde:	20 83       	st	Z, r18
    8ce0:	81 e0       	ldi	r24, 0x01	; 1
    8ce2:	90 e0       	ldi	r25, 0x00	; 0
    8ce4:	8c 83       	std	Y+4, r24	; 0x04
    8ce6:	9d 83       	std	Y+5, r25	; 0x05
    8ce8:	d7 c0       	rjmp	.+430    	; 0x8e98 <lin_transfer_data+0x398>
    8cea:	99 81       	ldd	r25, Y+1	; 0x01
    8cec:	88 89       	ldd	r24, Y+16	; 0x10
    8cee:	98 17       	cp	r25, r24
    8cf0:	f8 f4       	brcc	.+62     	; 0x8d30 <lin_transfer_data+0x230>
    8cf2:	89 81       	ldd	r24, Y+1	; 0x01
    8cf4:	8f 5f       	subi	r24, 0xFF	; 255
    8cf6:	89 83       	std	Y+1, r24	; 0x01
    8cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    8cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    8cfc:	9c 01       	movw	r18, r24
    8cfe:	2f 5f       	subi	r18, 0xFF	; 255
    8d00:	3f 4f       	sbci	r19, 0xFF	; 255
    8d02:	2a 83       	std	Y+2, r18	; 0x02
    8d04:	3b 83       	std	Y+3, r19	; 0x03
    8d06:	2c 85       	ldd	r18, Y+12	; 0x0c
    8d08:	3d 85       	ldd	r19, Y+13	; 0x0d
    8d0a:	f9 01       	movw	r30, r18
    8d0c:	41 85       	ldd	r20, Z+9	; 0x09
    8d0e:	52 85       	ldd	r21, Z+10	; 0x0a
    8d10:	2c 81       	ldd	r18, Y+4	; 0x04
    8d12:	3d 81       	ldd	r19, Y+5	; 0x05
    8d14:	22 0f       	add	r18, r18
    8d16:	33 1f       	adc	r19, r19
    8d18:	22 0f       	add	r18, r18
    8d1a:	33 1f       	adc	r19, r19
    8d1c:	22 0f       	add	r18, r18
    8d1e:	33 1f       	adc	r19, r19
    8d20:	24 0f       	add	r18, r20
    8d22:	35 1f       	adc	r19, r21
    8d24:	f9 01       	movw	r30, r18
    8d26:	22 81       	ldd	r18, Z+2	; 0x02
    8d28:	82 5f       	subi	r24, 0xF2	; 242
    8d2a:	9c 4b       	sbci	r25, 0xBC	; 188
    8d2c:	fc 01       	movw	r30, r24
    8d2e:	20 83       	st	Z, r18
    8d30:	99 81       	ldd	r25, Y+1	; 0x01
    8d32:	88 89       	ldd	r24, Y+16	; 0x10
    8d34:	98 17       	cp	r25, r24
    8d36:	f8 f4       	brcc	.+62     	; 0x8d76 <lin_transfer_data+0x276>
    8d38:	89 81       	ldd	r24, Y+1	; 0x01
    8d3a:	8f 5f       	subi	r24, 0xFF	; 255
    8d3c:	89 83       	std	Y+1, r24	; 0x01
    8d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    8d40:	9b 81       	ldd	r25, Y+3	; 0x03
    8d42:	9c 01       	movw	r18, r24
    8d44:	2f 5f       	subi	r18, 0xFF	; 255
    8d46:	3f 4f       	sbci	r19, 0xFF	; 255
    8d48:	2a 83       	std	Y+2, r18	; 0x02
    8d4a:	3b 83       	std	Y+3, r19	; 0x03
    8d4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    8d4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    8d50:	f9 01       	movw	r30, r18
    8d52:	41 85       	ldd	r20, Z+9	; 0x09
    8d54:	52 85       	ldd	r21, Z+10	; 0x0a
    8d56:	2c 81       	ldd	r18, Y+4	; 0x04
    8d58:	3d 81       	ldd	r19, Y+5	; 0x05
    8d5a:	22 0f       	add	r18, r18
    8d5c:	33 1f       	adc	r19, r19
    8d5e:	22 0f       	add	r18, r18
    8d60:	33 1f       	adc	r19, r19
    8d62:	22 0f       	add	r18, r18
    8d64:	33 1f       	adc	r19, r19
    8d66:	24 0f       	add	r18, r20
    8d68:	35 1f       	adc	r19, r21
    8d6a:	f9 01       	movw	r30, r18
    8d6c:	23 81       	ldd	r18, Z+3	; 0x03
    8d6e:	82 5f       	subi	r24, 0xF2	; 242
    8d70:	9c 4b       	sbci	r25, 0xBC	; 188
    8d72:	fc 01       	movw	r30, r24
    8d74:	20 83       	st	Z, r18
    8d76:	99 81       	ldd	r25, Y+1	; 0x01
    8d78:	88 89       	ldd	r24, Y+16	; 0x10
    8d7a:	98 17       	cp	r25, r24
    8d7c:	f8 f4       	brcc	.+62     	; 0x8dbc <lin_transfer_data+0x2bc>
    8d7e:	89 81       	ldd	r24, Y+1	; 0x01
    8d80:	8f 5f       	subi	r24, 0xFF	; 255
    8d82:	89 83       	std	Y+1, r24	; 0x01
    8d84:	8a 81       	ldd	r24, Y+2	; 0x02
    8d86:	9b 81       	ldd	r25, Y+3	; 0x03
    8d88:	9c 01       	movw	r18, r24
    8d8a:	2f 5f       	subi	r18, 0xFF	; 255
    8d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    8d8e:	2a 83       	std	Y+2, r18	; 0x02
    8d90:	3b 83       	std	Y+3, r19	; 0x03
    8d92:	2c 85       	ldd	r18, Y+12	; 0x0c
    8d94:	3d 85       	ldd	r19, Y+13	; 0x0d
    8d96:	f9 01       	movw	r30, r18
    8d98:	41 85       	ldd	r20, Z+9	; 0x09
    8d9a:	52 85       	ldd	r21, Z+10	; 0x0a
    8d9c:	2c 81       	ldd	r18, Y+4	; 0x04
    8d9e:	3d 81       	ldd	r19, Y+5	; 0x05
    8da0:	22 0f       	add	r18, r18
    8da2:	33 1f       	adc	r19, r19
    8da4:	22 0f       	add	r18, r18
    8da6:	33 1f       	adc	r19, r19
    8da8:	22 0f       	add	r18, r18
    8daa:	33 1f       	adc	r19, r19
    8dac:	24 0f       	add	r18, r20
    8dae:	35 1f       	adc	r19, r21
    8db0:	f9 01       	movw	r30, r18
    8db2:	24 81       	ldd	r18, Z+4	; 0x04
    8db4:	82 5f       	subi	r24, 0xF2	; 242
    8db6:	9c 4b       	sbci	r25, 0xBC	; 188
    8db8:	fc 01       	movw	r30, r24
    8dba:	20 83       	st	Z, r18
    8dbc:	99 81       	ldd	r25, Y+1	; 0x01
    8dbe:	88 89       	ldd	r24, Y+16	; 0x10
    8dc0:	98 17       	cp	r25, r24
    8dc2:	f8 f4       	brcc	.+62     	; 0x8e02 <lin_transfer_data+0x302>
    8dc4:	89 81       	ldd	r24, Y+1	; 0x01
    8dc6:	8f 5f       	subi	r24, 0xFF	; 255
    8dc8:	89 83       	std	Y+1, r24	; 0x01
    8dca:	8a 81       	ldd	r24, Y+2	; 0x02
    8dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    8dce:	9c 01       	movw	r18, r24
    8dd0:	2f 5f       	subi	r18, 0xFF	; 255
    8dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    8dd4:	2a 83       	std	Y+2, r18	; 0x02
    8dd6:	3b 83       	std	Y+3, r19	; 0x03
    8dd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    8dda:	3d 85       	ldd	r19, Y+13	; 0x0d
    8ddc:	f9 01       	movw	r30, r18
    8dde:	41 85       	ldd	r20, Z+9	; 0x09
    8de0:	52 85       	ldd	r21, Z+10	; 0x0a
    8de2:	2c 81       	ldd	r18, Y+4	; 0x04
    8de4:	3d 81       	ldd	r19, Y+5	; 0x05
    8de6:	22 0f       	add	r18, r18
    8de8:	33 1f       	adc	r19, r19
    8dea:	22 0f       	add	r18, r18
    8dec:	33 1f       	adc	r19, r19
    8dee:	22 0f       	add	r18, r18
    8df0:	33 1f       	adc	r19, r19
    8df2:	24 0f       	add	r18, r20
    8df4:	35 1f       	adc	r19, r21
    8df6:	f9 01       	movw	r30, r18
    8df8:	25 81       	ldd	r18, Z+5	; 0x05
    8dfa:	82 5f       	subi	r24, 0xF2	; 242
    8dfc:	9c 4b       	sbci	r25, 0xBC	; 188
    8dfe:	fc 01       	movw	r30, r24
    8e00:	20 83       	st	Z, r18
    8e02:	99 81       	ldd	r25, Y+1	; 0x01
    8e04:	88 89       	ldd	r24, Y+16	; 0x10
    8e06:	98 17       	cp	r25, r24
    8e08:	f8 f4       	brcc	.+62     	; 0x8e48 <lin_transfer_data+0x348>
    8e0a:	89 81       	ldd	r24, Y+1	; 0x01
    8e0c:	8f 5f       	subi	r24, 0xFF	; 255
    8e0e:	89 83       	std	Y+1, r24	; 0x01
    8e10:	8a 81       	ldd	r24, Y+2	; 0x02
    8e12:	9b 81       	ldd	r25, Y+3	; 0x03
    8e14:	9c 01       	movw	r18, r24
    8e16:	2f 5f       	subi	r18, 0xFF	; 255
    8e18:	3f 4f       	sbci	r19, 0xFF	; 255
    8e1a:	2a 83       	std	Y+2, r18	; 0x02
    8e1c:	3b 83       	std	Y+3, r19	; 0x03
    8e1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    8e20:	3d 85       	ldd	r19, Y+13	; 0x0d
    8e22:	f9 01       	movw	r30, r18
    8e24:	41 85       	ldd	r20, Z+9	; 0x09
    8e26:	52 85       	ldd	r21, Z+10	; 0x0a
    8e28:	2c 81       	ldd	r18, Y+4	; 0x04
    8e2a:	3d 81       	ldd	r19, Y+5	; 0x05
    8e2c:	22 0f       	add	r18, r18
    8e2e:	33 1f       	adc	r19, r19
    8e30:	22 0f       	add	r18, r18
    8e32:	33 1f       	adc	r19, r19
    8e34:	22 0f       	add	r18, r18
    8e36:	33 1f       	adc	r19, r19
    8e38:	24 0f       	add	r18, r20
    8e3a:	35 1f       	adc	r19, r21
    8e3c:	f9 01       	movw	r30, r18
    8e3e:	26 81       	ldd	r18, Z+6	; 0x06
    8e40:	82 5f       	subi	r24, 0xF2	; 242
    8e42:	9c 4b       	sbci	r25, 0xBC	; 188
    8e44:	fc 01       	movw	r30, r24
    8e46:	20 83       	st	Z, r18
    8e48:	99 81       	ldd	r25, Y+1	; 0x01
    8e4a:	88 89       	ldd	r24, Y+16	; 0x10
    8e4c:	98 17       	cp	r25, r24
    8e4e:	f8 f4       	brcc	.+62     	; 0x8e8e <lin_transfer_data+0x38e>
    8e50:	89 81       	ldd	r24, Y+1	; 0x01
    8e52:	8f 5f       	subi	r24, 0xFF	; 255
    8e54:	89 83       	std	Y+1, r24	; 0x01
    8e56:	8a 81       	ldd	r24, Y+2	; 0x02
    8e58:	9b 81       	ldd	r25, Y+3	; 0x03
    8e5a:	9c 01       	movw	r18, r24
    8e5c:	2f 5f       	subi	r18, 0xFF	; 255
    8e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    8e60:	2a 83       	std	Y+2, r18	; 0x02
    8e62:	3b 83       	std	Y+3, r19	; 0x03
    8e64:	2c 85       	ldd	r18, Y+12	; 0x0c
    8e66:	3d 85       	ldd	r19, Y+13	; 0x0d
    8e68:	f9 01       	movw	r30, r18
    8e6a:	41 85       	ldd	r20, Z+9	; 0x09
    8e6c:	52 85       	ldd	r21, Z+10	; 0x0a
    8e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    8e70:	3d 81       	ldd	r19, Y+5	; 0x05
    8e72:	22 0f       	add	r18, r18
    8e74:	33 1f       	adc	r19, r19
    8e76:	22 0f       	add	r18, r18
    8e78:	33 1f       	adc	r19, r19
    8e7a:	22 0f       	add	r18, r18
    8e7c:	33 1f       	adc	r19, r19
    8e7e:	24 0f       	add	r18, r20
    8e80:	35 1f       	adc	r19, r21
    8e82:	f9 01       	movw	r30, r18
    8e84:	27 81       	ldd	r18, Z+7	; 0x07
    8e86:	82 5f       	subi	r24, 0xF2	; 242
    8e88:	9c 4b       	sbci	r25, 0xBC	; 188
    8e8a:	fc 01       	movw	r30, r24
    8e8c:	20 83       	st	Z, r18
    8e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    8e90:	9d 81       	ldd	r25, Y+5	; 0x05
    8e92:	01 96       	adiw	r24, 0x01	; 1
    8e94:	8c 83       	std	Y+4, r24	; 0x04
    8e96:	9d 83       	std	Y+5, r25	; 0x05
    8e98:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    8e9c:	fc 01       	movw	r30, r24
    8e9e:	22 81       	ldd	r18, Z+2	; 0x02
    8ea0:	33 81       	ldd	r19, Z+3	; 0x03
    8ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    8ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    8ea6:	28 17       	cp	r18, r24
    8ea8:	39 07       	cpc	r19, r25
    8eaa:	08 f0       	brcs	.+2      	; 0x8eae <lin_transfer_data+0x3ae>
    8eac:	1e cf       	rjmp	.-452    	; 0x8cea <lin_transfer_data+0x1ea>
    8eae:	80 91 6b 46 	lds	r24, 0x466B	; 0x80466b <history_blcok_count>
    8eb2:	8f 5f       	subi	r24, 0xFF	; 255
    8eb4:	80 93 6b 46 	sts	0x466B, r24	; 0x80466b <history_blcok_count>
    8eb8:	88 89       	ldd	r24, Y+16	; 0x10
    8eba:	28 2f       	mov	r18, r24
    8ebc:	30 e0       	ldi	r19, 0x00	; 0
    8ebe:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <update_cnt>
    8ec2:	90 91 0f 45 	lds	r25, 0x450F	; 0x80450f <update_cnt+0x1>
    8ec6:	82 0f       	add	r24, r18
    8ec8:	93 1f       	adc	r25, r19
    8eca:	80 93 0e 45 	sts	0x450E, r24	; 0x80450e <update_cnt>
    8ece:	90 93 0f 45 	sts	0x450F, r25	; 0x80450f <update_cnt+0x1>
    8ed2:	88 89       	ldd	r24, Y+16	; 0x10
    8ed4:	28 2f       	mov	r18, r24
    8ed6:	30 e0       	ldi	r19, 0x00	; 0
    8ed8:	80 91 10 45 	lds	r24, 0x4510	; 0x804510 <bin_size_cnt>
    8edc:	90 91 11 45 	lds	r25, 0x4511	; 0x804511 <bin_size_cnt+0x1>
    8ee0:	82 0f       	add	r24, r18
    8ee2:	93 1f       	adc	r25, r19
    8ee4:	80 93 10 45 	sts	0x4510, r24	; 0x804510 <bin_size_cnt>
    8ee8:	90 93 11 45 	sts	0x4511, r25	; 0x804511 <bin_size_cnt+0x1>
    8eec:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <update_cnt>
    8ef0:	90 91 0f 45 	lds	r25, 0x450F	; 0x80450f <update_cnt+0x1>
    8ef4:	81 15       	cp	r24, r1
    8ef6:	92 40       	sbci	r25, 0x02	; 2
    8ef8:	58 f0       	brcs	.+22     	; 0x8f10 <lin_transfer_data+0x410>
    8efa:	10 92 0e 45 	sts	0x450E, r1	; 0x80450e <update_cnt>
    8efe:	10 92 0f 45 	sts	0x450F, r1	; 0x80450f <update_cnt+0x1>
    8f02:	81 e0       	ldi	r24, 0x01	; 1
    8f04:	90 e0       	ldi	r25, 0x00	; 0
    8f06:	80 93 0a 43 	sts	0x430A, r24	; 0x80430a <flash_flag>
    8f0a:	90 93 0b 43 	sts	0x430B, r25	; 0x80430b <flash_flag+0x1>
    8f0e:	17 c0       	rjmp	.+46     	; 0x8f3e <lin_transfer_data+0x43e>
    8f10:	80 91 10 45 	lds	r24, 0x4510	; 0x804510 <bin_size_cnt>
    8f14:	90 91 11 45 	lds	r25, 0x4511	; 0x804511 <bin_size_cnt+0x1>
    8f18:	80 3d       	cpi	r24, 0xD0	; 208
    8f1a:	94 45       	sbci	r25, 0x54	; 84
    8f1c:	80 f0       	brcs	.+32     	; 0x8f3e <lin_transfer_data+0x43e>
    8f1e:	10 92 0e 45 	sts	0x450E, r1	; 0x80450e <update_cnt>
    8f22:	10 92 0f 45 	sts	0x450F, r1	; 0x80450f <update_cnt+0x1>
    8f26:	81 e0       	ldi	r24, 0x01	; 1
    8f28:	90 e0       	ldi	r25, 0x00	; 0
    8f2a:	80 93 0a 43 	sts	0x430A, r24	; 0x80430a <flash_flag>
    8f2e:	90 93 0b 43 	sts	0x430B, r25	; 0x80430b <flash_flag+0x1>
    8f32:	81 e0       	ldi	r24, 0x01	; 1
    8f34:	90 e0       	ldi	r25, 0x00	; 0
    8f36:	80 93 0c 43 	sts	0x430C, r24	; 0x80430c <jump_flag>
    8f3a:	90 93 0d 43 	sts	0x430D, r25	; 0x80430d <jump_flag+0x1>
    8f3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    8f40:	9b 85       	ldd	r25, Y+11	; 0x0b
    8f42:	fc 01       	movw	r30, r24
    8f44:	80 81       	ld	r24, Z
    8f46:	91 81       	ldd	r25, Z+1	; 0x01
    8f48:	fc 01       	movw	r30, r24
    8f4a:	80 81       	ld	r24, Z
    8f4c:	89 8b       	std	Y+17, r24	; 0x11
    8f4e:	82 e0       	ldi	r24, 0x02	; 2
    8f50:	8a 8b       	std	Y+18, r24	; 0x12
    8f52:	86 e7       	ldi	r24, 0x76	; 118
    8f54:	8b 8b       	std	Y+19, r24	; 0x13
    8f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    8f58:	8c 8b       	std	Y+20, r24	; 0x14
    8f5a:	8f ef       	ldi	r24, 0xFF	; 255
    8f5c:	8d 8b       	std	Y+21, r24	; 0x15
    8f5e:	8f ef       	ldi	r24, 0xFF	; 255
    8f60:	8e 8b       	std	Y+22, r24	; 0x16
    8f62:	8f ef       	ldi	r24, 0xFF	; 255
    8f64:	8f 8b       	std	Y+23, r24	; 0x17
    8f66:	8f ef       	ldi	r24, 0xFF	; 255
    8f68:	88 8f       	std	Y+24, r24	; 0x18
    8f6a:	ce 01       	movw	r24, r28
    8f6c:	41 96       	adiw	r24, 0x11	; 17
    8f6e:	bc 01       	movw	r22, r24
    8f70:	89 8d       	ldd	r24, Y+25	; 0x19
    8f72:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
    8f76:	8e 81       	ldd	r24, Y+6	; 0x06
    8f78:	9f 81       	ldd	r25, Y+7	; 0x07
    8f7a:	22 e0       	ldi	r18, 0x02	; 2
    8f7c:	fc 01       	movw	r30, r24
    8f7e:	26 a3       	std	Z+38, r18	; 0x26
    8f80:	00 00       	nop
    8f82:	69 96       	adiw	r28, 0x19	; 25
    8f84:	cd bf       	out	0x3d, r28	; 61
    8f86:	de bf       	out	0x3e, r29	; 62
    8f88:	df 91       	pop	r29
    8f8a:	cf 91       	pop	r28
    8f8c:	08 95       	ret

00008f8e <lin_diag_service_callback>:
 *
 * Implements    : lin_diag_service_callback_Activity
 *END**************************************************************************/
void lin_diag_service_callback(l_ifc_handle iii,
                               l_u8 sid)
{
    8f8e:	cf 93       	push	r28
    8f90:	df 93       	push	r29
    8f92:	cd b7       	in	r28, 0x3d	; 61
    8f94:	de b7       	in	r29, 0x3e	; 62
    8f96:	2e 97       	sbiw	r28, 0x0e	; 14
    8f98:	cd bf       	out	0x3d, r28	; 61
    8f9a:	de bf       	out	0x3e, r29	; 62
    8f9c:	8d 87       	std	Y+13, r24	; 0x0d
    8f9e:	6e 87       	std	Y+14, r22	; 0x0e
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    8fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    8fa2:	28 2f       	mov	r18, r24
    8fa4:	30 e0       	ldi	r19, 0x00	; 0
    8fa6:	4c e1       	ldi	r20, 0x1C	; 28
    8fa8:	42 9f       	mul	r20, r18
    8faa:	c0 01       	movw	r24, r0
    8fac:	43 9f       	mul	r20, r19
    8fae:	90 0d       	add	r25, r0
    8fb0:	11 24       	eor	r1, r1
    8fb2:	86 56       	subi	r24, 0x66	; 102
    8fb4:	9d 4b       	sbci	r25, 0xBD	; 189
    8fb6:	8b 83       	std	Y+3, r24	; 0x03
    8fb8:	9c 83       	std	Y+4, r25	; 0x04
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    8fbc:	28 2f       	mov	r18, r24
    8fbe:	30 e0       	ldi	r19, 0x00	; 0
    8fc0:	44 e3       	ldi	r20, 0x34	; 52
    8fc2:	42 9f       	mul	r20, r18
    8fc4:	c0 01       	movw	r24, r0
    8fc6:	43 9f       	mul	r20, r19
    8fc8:	90 0d       	add	r25, r0
    8fca:	11 24       	eor	r1, r1
    8fcc:	83 59       	subi	r24, 0x93	; 147
    8fce:	99 4b       	sbci	r25, 0xB9	; 185
    8fd0:	8d 83       	std	Y+5, r24	; 0x05
    8fd2:	9e 83       	std	Y+6, r25	; 0x06
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    8fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    8fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    8fd8:	fc 01       	movw	r30, r24
    8fda:	82 89       	ldd	r24, Z+18	; 0x12
    8fdc:	28 2f       	mov	r18, r24
    8fde:	30 e0       	ldi	r19, 0x00	; 0
    8fe0:	44 e2       	ldi	r20, 0x24	; 36
    8fe2:	42 9f       	mul	r20, r18
    8fe4:	c0 01       	movw	r24, r0
    8fe6:	43 9f       	mul	r20, r19
    8fe8:	90 0d       	add	r25, r0
    8fea:	11 24       	eor	r1, r1
    8fec:	8a 58       	subi	r24, 0x8A	; 138
    8fee:	9d 4b       	sbci	r25, 0xBD	; 189
    8ff0:	8f 83       	std	Y+7, r24	; 0x07
    8ff2:	98 87       	std	Y+8, r25	; 0x08
    l_bool sid_supported_flg = (bool)0U;
    8ff4:	19 82       	std	Y+1, r1	; 0x01
    l_u8 i;
    const l_u8 *service_supported_ptr;
    l_u8 *service_flag_ptr;
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    8ff6:	8f 81       	ldd	r24, Y+7	; 0x07
    8ff8:	98 85       	ldd	r25, Y+8	; 0x08
    8ffa:	fc 01       	movw	r30, r24
    8ffc:	80 a1       	ldd	r24, Z+32	; 0x20
    8ffe:	91 a1       	ldd	r25, Z+33	; 0x21
    9000:	89 87       	std	Y+9, r24	; 0x09
    9002:	9a 87       	std	Y+10, r25	; 0x0a
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;
    9004:	8f 81       	ldd	r24, Y+7	; 0x07
    9006:	98 85       	ldd	r25, Y+8	; 0x08
    9008:	fc 01       	movw	r30, r24
    900a:	82 a1       	ldd	r24, Z+34	; 0x22
    900c:	93 a1       	ldd	r25, Z+35	; 0x23
    900e:	8b 87       	std	Y+11, r24	; 0x0b
    9010:	9c 87       	std	Y+12, r25	; 0x0c

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    9012:	1a 82       	std	Y+2, r1	; 0x02
    9014:	1c c0       	rjmp	.+56     	; 0x904e <lin_diag_service_callback+0xc0>
    {
        if (service_supported_ptr[i] == sid)
    9016:	8a 81       	ldd	r24, Y+2	; 0x02
    9018:	88 2f       	mov	r24, r24
    901a:	90 e0       	ldi	r25, 0x00	; 0
    901c:	29 85       	ldd	r18, Y+9	; 0x09
    901e:	3a 85       	ldd	r19, Y+10	; 0x0a
    9020:	82 0f       	add	r24, r18
    9022:	93 1f       	adc	r25, r19
    9024:	fc 01       	movw	r30, r24
    9026:	90 81       	ld	r25, Z
    9028:	8e 85       	ldd	r24, Y+14	; 0x0e
    902a:	98 17       	cp	r25, r24
    902c:	69 f4       	brne	.+26     	; 0x9048 <lin_diag_service_callback+0xba>
        {
            service_flag_ptr[i] = 1U;
    902e:	8a 81       	ldd	r24, Y+2	; 0x02
    9030:	88 2f       	mov	r24, r24
    9032:	90 e0       	ldi	r25, 0x00	; 0
    9034:	2b 85       	ldd	r18, Y+11	; 0x0b
    9036:	3c 85       	ldd	r19, Y+12	; 0x0c
    9038:	82 0f       	add	r24, r18
    903a:	93 1f       	adc	r25, r19
    903c:	21 e0       	ldi	r18, 0x01	; 1
    903e:	fc 01       	movw	r30, r24
    9040:	20 83       	st	Z, r18
            sid_supported_flg = (bool)1U;
    9042:	81 e0       	ldi	r24, 0x01	; 1
    9044:	89 83       	std	Y+1, r24	; 0x01
            break;
    9046:	0a c0       	rjmp	.+20     	; 0x905c <lin_diag_service_callback+0xce>
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    9048:	8a 81       	ldd	r24, Y+2	; 0x02
    904a:	8f 5f       	subi	r24, 0xFF	; 255
    904c:	8a 83       	std	Y+2, r24	; 0x02
    904e:	8f 81       	ldd	r24, Y+7	; 0x07
    9050:	98 85       	ldd	r25, Y+8	; 0x08
    9052:	fc 01       	movw	r30, r24
    9054:	97 8d       	ldd	r25, Z+31	; 0x1f
    9056:	8a 81       	ldd	r24, Y+2	; 0x02
    9058:	89 17       	cp	r24, r25
    905a:	e8 f2       	brcs	.-70     	; 0x9016 <lin_diag_service_callback+0x88>
            sid_supported_flg = (bool)1U;
            break;
        }
    }

    if (sid_supported_flg == (bool)1U)
    905c:	89 81       	ldd	r24, Y+1	; 0x01
    905e:	88 23       	and	r24, r24
    9060:	09 f4       	brne	.+2      	; 0x9064 <lin_diag_service_callback+0xd6>
    9062:	8b c0       	rjmp	.+278    	; 0x917a <lin_diag_service_callback+0x1ec>
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    9064:	8e 85       	ldd	r24, Y+14	; 0x0e
    9066:	88 2f       	mov	r24, r24
    9068:	90 e0       	ldi	r25, 0x00	; 0
    906a:	85 38       	cpi	r24, 0x85	; 133
    906c:	91 05       	cpc	r25, r1
    906e:	09 f4       	brne	.+2      	; 0x9072 <lin_diag_service_callback+0xe4>
    9070:	7c c0       	rjmp	.+248    	; 0x916a <lin_diag_service_callback+0x1dc>
    9072:	86 38       	cpi	r24, 0x86	; 134
    9074:	91 05       	cpc	r25, r1
    9076:	9c f4       	brge	.+38     	; 0x909e <lin_diag_service_callback+0x110>
    9078:	82 32       	cpi	r24, 0x22	; 34
    907a:	91 05       	cpc	r25, r1
    907c:	09 f4       	brne	.+2      	; 0x9080 <lin_diag_service_callback+0xf2>
    907e:	6d c0       	rjmp	.+218    	; 0x915a <lin_diag_service_callback+0x1cc>
    9080:	83 32       	cpi	r24, 0x23	; 35
    9082:	91 05       	cpc	r25, r1
    9084:	24 f4       	brge	.+8      	; 0x908e <lin_diag_service_callback+0x100>
    9086:	40 97       	sbiw	r24, 0x10	; 16
    9088:	09 f4       	brne	.+2      	; 0x908c <lin_diag_service_callback+0xfe>
    908a:	63 c0       	rjmp	.+198    	; 0x9152 <lin_diag_service_callback+0x1c4>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    908c:	95 c0       	rjmp	.+298    	; 0x91b8 <lin_diag_service_callback+0x22a>
    }

    if (sid_supported_flg == (bool)1U)
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    908e:	81 33       	cpi	r24, 0x31	; 49
    9090:	91 05       	cpc	r25, r1
    9092:	09 f4       	brne	.+2      	; 0x9096 <lin_diag_service_callback+0x108>
    9094:	66 c0       	rjmp	.+204    	; 0x9162 <lin_diag_service_callback+0x1d4>
    9096:	c6 97       	sbiw	r24, 0x36	; 54
    9098:	09 f4       	brne	.+2      	; 0x909c <lin_diag_service_callback+0x10e>
    909a:	6b c0       	rjmp	.+214    	; 0x9172 <lin_diag_service_callback+0x1e4>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    909c:	8d c0       	rjmp	.+282    	; 0x91b8 <lin_diag_service_callback+0x22a>
    }

    if (sid_supported_flg == (bool)1U)
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    909e:	83 3b       	cpi	r24, 0xB3	; 179
    90a0:	91 05       	cpc	r25, r1
    90a2:	a9 f0       	breq	.+42     	; 0x90ce <lin_diag_service_callback+0x140>
    90a4:	84 3b       	cpi	r24, 0xB4	; 180
    90a6:	91 05       	cpc	r25, r1
    90a8:	3c f4       	brge	.+14     	; 0x90b8 <lin_diag_service_callback+0x12a>
    90aa:	80 3b       	cpi	r24, 0xB0	; 176
    90ac:	91 05       	cpc	r25, r1
    90ae:	01 f1       	breq	.+64     	; 0x90f0 <lin_diag_service_callback+0x162>
    90b0:	82 3b       	cpi	r24, 0xB2	; 178
    90b2:	91 05       	cpc	r25, r1
    90b4:	41 f0       	breq	.+16     	; 0x90c6 <lin_diag_service_callback+0x138>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    90b6:	80 c0       	rjmp	.+256    	; 0x91b8 <lin_diag_service_callback+0x22a>
    }

    if (sid_supported_flg == (bool)1U)
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    90b8:	86 3b       	cpi	r24, 0xB6	; 182
    90ba:	91 05       	cpc	r25, r1
    90bc:	a9 f1       	breq	.+106    	; 0x9128 <lin_diag_service_callback+0x19a>
    90be:	87 3b       	cpi	r24, 0xB7	; 183
    90c0:	91 05       	cpc	r25, r1
    90c2:	39 f1       	breq	.+78     	; 0x9112 <lin_diag_service_callback+0x184>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    90c4:	79 c0       	rjmp	.+242    	; 0x91b8 <lin_diag_service_callback+0x22a>
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
        {
        case SERVICE_READ_BY_IDENTIFY: /* Mandatory for TL LIN 2.1 & 2.0, Optional for J2602 */
            lin_diagservice_read_by_identifier(iii);
    90c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    90c8:	0e 94 e3 48 	call	0x91c6	; 0x91c6 <lin_diagservice_read_by_identifier>
            break;
    90cc:	75 c0       	rjmp	.+234    	; 0x91b8 <lin_diag_service_callback+0x22a>

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    90ce:	8b 81       	ldd	r24, Y+3	; 0x03
    90d0:	9c 81       	ldd	r25, Y+4	; 0x04
    90d2:	fc 01       	movw	r30, r24
    90d4:	80 81       	ld	r24, Z
    90d6:	88 23       	and	r24, r24
    90d8:	39 f0       	breq	.+14     	; 0x90e8 <lin_diag_service_callback+0x15a>
    90da:	8b 81       	ldd	r24, Y+3	; 0x03
    90dc:	9c 81       	ldd	r25, Y+4	; 0x04
    90de:	fc 01       	movw	r30, r24
    90e0:	80 81       	ld	r24, Z
    90e2:	83 30       	cpi	r24, 0x03	; 3
    90e4:	09 f0       	breq	.+2      	; 0x90e8 <lin_diag_service_callback+0x15a>
    90e6:	63 c0       	rjmp	.+198    	; 0x91ae <lin_diag_service_callback+0x220>
            {
                lin_condittional_change_nad(iii);
    90e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    90ea:	0e 94 4d 3a 	call	0x749a	; 0x749a <lin_condittional_change_nad>
            }
            break;
    90ee:	5f c0       	rjmp	.+190    	; 0x91ae <lin_diag_service_callback+0x220>
        case SERVICE_ASSIGN_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    90f0:	8b 81       	ldd	r24, Y+3	; 0x03
    90f2:	9c 81       	ldd	r25, Y+4	; 0x04
    90f4:	fc 01       	movw	r30, r24
    90f6:	80 81       	ld	r24, Z
    90f8:	88 23       	and	r24, r24
    90fa:	39 f0       	breq	.+14     	; 0x910a <lin_diag_service_callback+0x17c>
    90fc:	8b 81       	ldd	r24, Y+3	; 0x03
    90fe:	9c 81       	ldd	r25, Y+4	; 0x04
    9100:	fc 01       	movw	r30, r24
    9102:	80 81       	ld	r24, Z
    9104:	83 30       	cpi	r24, 0x03	; 3
    9106:	09 f0       	breq	.+2      	; 0x910a <lin_diag_service_callback+0x17c>
    9108:	54 c0       	rjmp	.+168    	; 0x91b2 <lin_diag_service_callback+0x224>
            {
                lin_assign_nad(iii);
    910a:	8d 85       	ldd	r24, Y+13	; 0x0d
    910c:	0e 94 98 3b 	call	0x7730	; 0x7730 <lin_assign_nad>
            }
            break;
    9110:	50 c0       	rjmp	.+160    	; 0x91b2 <lin_diag_service_callback+0x224>

#if (1U == SUPPORT_PROTOCOL_21)
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version)
    9112:	8b 81       	ldd	r24, Y+3	; 0x03
    9114:	9c 81       	ldd	r25, Y+4	; 0x04
    9116:	fc 01       	movw	r30, r24
    9118:	80 81       	ld	r24, Z
    911a:	88 23       	and	r24, r24
    911c:	09 f0       	breq	.+2      	; 0x9120 <lin_diag_service_callback+0x192>
    911e:	4b c0       	rjmp	.+150    	; 0x91b6 <lin_diag_service_callback+0x228>
            {
                lin_diagservice_assign_frame_id_range(iii);
    9120:	8d 85       	ldd	r24, Y+13	; 0x0d
    9122:	0e 94 49 3c 	call	0x7892	; 0x7892 <lin_diagservice_assign_frame_id_range>
            }
            break;
    9126:	47 c0       	rjmp	.+142    	; 0x91b6 <lin_diag_service_callback+0x228>
        case SERVICE_SAVE_CONFIGURATION:
            /* Set save configuration flag */
            g_lin_protocol_state_array[iii].save_config_flg = (l_bool)1U;
    9128:	8d 85       	ldd	r24, Y+13	; 0x0d
    912a:	28 2f       	mov	r18, r24
    912c:	30 e0       	ldi	r19, 0x00	; 0
    912e:	46 e1       	ldi	r20, 0x16	; 22
    9130:	42 9f       	mul	r20, r18
    9132:	c0 01       	movw	r24, r0
    9134:	43 9f       	mul	r20, r19
    9136:	90 0d       	add	r25, r0
    9138:	11 24       	eor	r1, r1
    913a:	80 55       	subi	r24, 0x50	; 80
    913c:	99 4b       	sbci	r25, 0xB9	; 185
    913e:	21 e0       	ldi	r18, 0x01	; 1
    9140:	fc 01       	movw	r30, r24
    9142:	20 83       	st	Z, r18
            /* Response to master - RSID */
            ld_make_slave_response_pdu(iii, SERVICE_SAVE_CONFIGURATION, POSITIVE, 0U);
    9144:	20 e0       	ldi	r18, 0x00	; 0
    9146:	41 e0       	ldi	r20, 0x01	; 1
    9148:	66 eb       	ldi	r22, 0xB6	; 182
    914a:	8d 85       	ldd	r24, Y+13	; 0x0d
    914c:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
            break;
    9150:	33 c0       	rjmp	.+102    	; 0x91b8 <lin_diag_service_callback+0x22a>
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

#endif                                /* ((1U == SUPPORT_PROTOCOL_J2602) || (1U == SUPPORT_PROTOCOL_20)) */
        case SERVICE_SESSION_CONTROL: //诊断会话控制
            //诊断会话控制切换会话
            lin_slave_session_ctr(iii);
    9152:	8d 85       	ldd	r24, Y+13	; 0x0d
    9154:	0e 94 91 42 	call	0x8522	; 0x8522 <lin_slave_session_ctr>
            break;
    9158:	2f c0       	rjmp	.+94     	; 0x91b8 <lin_diag_service_callback+0x22a>
        case SERVICE_READ_DATA_BY_IDENTIFY:
            //根据id读取数据信息
            lin_read_data_by_identify(iii);
    915a:	8d 85       	ldd	r24, Y+13	; 0x0d
    915c:	0e 94 47 3d 	call	0x7a8e	; 0x7a8e <lin_read_data_by_identify>
            break;
    9160:	2b c0       	rjmp	.+86     	; 0x91b8 <lin_diag_service_callback+0x22a>
        case SERIVCE_ROUTINE_CONTROL:
            //路由控制,支持在扩展模式下
            lin_routine_control(iii);
    9162:	8d 85       	ldd	r24, Y+13	; 0x0d
    9164:	0e 94 84 43 	call	0x8708	; 0x8708 <lin_routine_control>
            break;
    9168:	27 c0       	rjmp	.+78     	; 0x91b8 <lin_diag_service_callback+0x22a>
        case 0x85:
            control_dtc_setting(iii);
    916a:	8d 85       	ldd	r24, Y+13	; 0x0d
    916c:	0e 94 e4 44 	call	0x89c8	; 0x89c8 <control_dtc_setting>
            break;
    9170:	23 c0       	rjmp	.+70     	; 0x91b8 <lin_diag_service_callback+0x22a>
        case 0x36:
            lin_transfer_data(iii);
    9172:	8d 85       	ldd	r24, Y+13	; 0x0d
    9174:	0e 94 80 45 	call	0x8b00	; 0x8b00 <lin_transfer_data>
            break;
    9178:	1f c0       	rjmp	.+62     	; 0x91b8 <lin_diag_service_callback+0x22a>
            break;
        } /* end of switch */
    }
    else
    {
        ld_make_slave_response_pdu(iii, sid, NEGATIVE, SERVICE_NOT_SUPPORTED);
    917a:	21 e1       	ldi	r18, 0x11	; 17
    917c:	40 e0       	ldi	r20, 0x00	; 0
    917e:	6e 85       	ldd	r22, Y+14	; 0x0e
    9180:	8d 85       	ldd	r24, Y+13	; 0x0d
    9182:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
        /* clear queue */
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    9186:	8d 81       	ldd	r24, Y+5	; 0x05
    9188:	9e 81       	ldd	r25, Y+6	; 0x06
    918a:	fc 01       	movw	r30, r24
    918c:	17 86       	std	Z+15, r1	; 0x0f
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0U;
    918e:	8d 81       	ldd	r24, Y+5	; 0x05
    9190:	9e 81       	ldd	r25, Y+6	; 0x06
    9192:	fc 01       	movw	r30, r24
    9194:	10 8a       	std	Z+16, r1	; 0x10
    9196:	11 8a       	std	Z+17, r1	; 0x11
        tl_desc_ptr->tl_rx_queue.queue_header = tl_desc_ptr->tl_rx_queue.queue_tail;
    9198:	8d 81       	ldd	r24, Y+5	; 0x05
    919a:	9e 81       	ldd	r25, Y+6	; 0x06
    919c:	fc 01       	movw	r30, r24
    919e:	25 85       	ldd	r18, Z+13	; 0x0d
    91a0:	36 85       	ldd	r19, Z+14	; 0x0e
    91a2:	8d 81       	ldd	r24, Y+5	; 0x05
    91a4:	9e 81       	ldd	r25, Y+6	; 0x06
    91a6:	fc 01       	movw	r30, r24
    91a8:	23 87       	std	Z+11, r18	; 0x0b
    91aa:	34 87       	std	Z+12, r19	; 0x0c
    }
}
    91ac:	05 c0       	rjmp	.+10     	; 0x91b8 <lin_diag_service_callback+0x22a>
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
            {
                lin_condittional_change_nad(iii);
            }
            break;
    91ae:	00 00       	nop
    91b0:	03 c0       	rjmp	.+6      	; 0x91b8 <lin_diag_service_callback+0x22a>
        case SERVICE_ASSIGN_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
            {
                lin_assign_nad(iii);
            }
            break;
    91b2:	00 00       	nop
    91b4:	01 c0       	rjmp	.+2      	; 0x91b8 <lin_diag_service_callback+0x22a>
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version)
            {
                lin_diagservice_assign_frame_id_range(iii);
            }
            break;
    91b6:	00 00       	nop
        /* clear queue */
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0U;
        tl_desc_ptr->tl_rx_queue.queue_header = tl_desc_ptr->tl_rx_queue.queue_tail;
    }
}
    91b8:	00 00       	nop
    91ba:	2e 96       	adiw	r28, 0x0e	; 14
    91bc:	cd bf       	out	0x3d, r28	; 61
    91be:	de bf       	out	0x3e, r29	; 62
    91c0:	df 91       	pop	r29
    91c2:	cf 91       	pop	r28
    91c4:	08 95       	ret

000091c6 <lin_diagservice_read_by_identifier>:
 *                 Only for Slave Nodes.
 *
 * Implements    : lin_diagservice_read_by_identifier_Activity
 *END**************************************************************************/
static void lin_diagservice_read_by_identifier(l_ifc_handle iii)
{
    91c6:	cf 93       	push	r28
    91c8:	df 93       	push	r29
    91ca:	cd b7       	in	r28, 0x3d	; 61
    91cc:	de b7       	in	r29, 0x3e	; 62
    91ce:	a2 97       	sbiw	r28, 0x22	; 34
    91d0:	cd bf       	out	0x3d, r28	; 61
    91d2:	de bf       	out	0x3e, r29	; 62
    91d4:	8a a3       	std	Y+34, r24	; 0x22
    lin_tl_pdu_data_t lin_tl_pdu;
    l_u8 id;
    l_u16 supid;
    l_u16 fid;
    const lin_node_attribute_t *node_attr_ptr;
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    91d6:	8a a1       	ldd	r24, Y+34	; 0x22
    91d8:	28 2f       	mov	r18, r24
    91da:	30 e0       	ldi	r19, 0x00	; 0
    91dc:	44 e3       	ldi	r20, 0x34	; 52
    91de:	42 9f       	mul	r20, r18
    91e0:	c0 01       	movw	r24, r0
    91e2:	43 9f       	mul	r20, r19
    91e4:	90 0d       	add	r25, r0
    91e6:	11 24       	eor	r1, r1
    91e8:	83 59       	subi	r24, 0x93	; 147
    91ea:	99 4b       	sbci	r25, 0xB9	; 185
    91ec:	8a 83       	std	Y+2, r24	; 0x02
    91ee:	9b 83       	std	Y+3, r25	; 0x03
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    91f0:	8a a1       	ldd	r24, Y+34	; 0x22
    91f2:	28 2f       	mov	r18, r24
    91f4:	30 e0       	ldi	r19, 0x00	; 0
    91f6:	4c e1       	ldi	r20, 0x1C	; 28
    91f8:	42 9f       	mul	r20, r18
    91fa:	c0 01       	movw	r24, r0
    91fc:	43 9f       	mul	r20, r19
    91fe:	90 0d       	add	r25, r0
    9200:	11 24       	eor	r1, r1
    9202:	86 56       	subi	r24, 0x66	; 102
    9204:	9d 4b       	sbci	r25, 0xBD	; 189
    9206:	8c 83       	std	Y+4, r24	; 0x04
    9208:	9d 83       	std	Y+5, r25	; 0x05
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    920a:	8c 81       	ldd	r24, Y+4	; 0x04
    920c:	9d 81       	ldd	r25, Y+5	; 0x05
    920e:	fc 01       	movw	r30, r24
    9210:	82 89       	ldd	r24, Z+18	; 0x12
    9212:	28 2f       	mov	r18, r24
    9214:	30 e0       	ldi	r19, 0x00	; 0
    9216:	44 e2       	ldi	r20, 0x24	; 36
    9218:	42 9f       	mul	r20, r18
    921a:	c0 01       	movw	r24, r0
    921c:	43 9f       	mul	r20, r19
    921e:	90 0d       	add	r25, r0
    9220:	11 24       	eor	r1, r1
    9222:	8a 58       	subi	r24, 0x8A	; 138
    9224:	9d 4b       	sbci	r25, 0xBD	; 189
    9226:	8e 83       	std	Y+6, r24	; 0x06
    9228:	9f 83       	std	Y+7, r25	; 0x07
    const lin_transport_layer_queue_t *rx_queue = &(tl_desc_ptr->tl_rx_queue);
    922a:	8a 81       	ldd	r24, Y+2	; 0x02
    922c:	9b 81       	ldd	r25, Y+3	; 0x03
    922e:	0b 96       	adiw	r24, 0x0b	; 11
    9230:	88 87       	std	Y+8, r24	; 0x08
    9232:	99 87       	std	Y+9, r25	; 0x09
    l_u8 i;
    for (i = 0; i < 8U; i++)
    9234:	19 82       	std	Y+1, r1	; 0x01
    9236:	26 c0       	rjmp	.+76     	; 0x9284 <lin_diagservice_read_by_identifier+0xbe>
    {
        lin_tl_pdu[i] = rx_queue->tl_pdu_ptr[rx_queue->queue_header][i];
    9238:	89 81       	ldd	r24, Y+1	; 0x01
    923a:	88 2f       	mov	r24, r24
    923c:	90 e0       	ldi	r25, 0x00	; 0
    923e:	28 85       	ldd	r18, Y+8	; 0x08
    9240:	39 85       	ldd	r19, Y+9	; 0x09
    9242:	f9 01       	movw	r30, r18
    9244:	41 85       	ldd	r20, Z+9	; 0x09
    9246:	52 85       	ldd	r21, Z+10	; 0x0a
    9248:	28 85       	ldd	r18, Y+8	; 0x08
    924a:	39 85       	ldd	r19, Y+9	; 0x09
    924c:	f9 01       	movw	r30, r18
    924e:	20 81       	ld	r18, Z
    9250:	31 81       	ldd	r19, Z+1	; 0x01
    9252:	22 0f       	add	r18, r18
    9254:	33 1f       	adc	r19, r19
    9256:	22 0f       	add	r18, r18
    9258:	33 1f       	adc	r19, r19
    925a:	22 0f       	add	r18, r18
    925c:	33 1f       	adc	r19, r19
    925e:	42 0f       	add	r20, r18
    9260:	53 1f       	adc	r21, r19
    9262:	29 81       	ldd	r18, Y+1	; 0x01
    9264:	22 2f       	mov	r18, r18
    9266:	30 e0       	ldi	r19, 0x00	; 0
    9268:	24 0f       	add	r18, r20
    926a:	35 1f       	adc	r19, r21
    926c:	f9 01       	movw	r30, r18
    926e:	40 81       	ld	r20, Z
    9270:	9e 01       	movw	r18, r28
    9272:	2b 5e       	subi	r18, 0xEB	; 235
    9274:	3f 4f       	sbci	r19, 0xFF	; 255
    9276:	82 0f       	add	r24, r18
    9278:	93 1f       	adc	r25, r19
    927a:	fc 01       	movw	r30, r24
    927c:	40 83       	st	Z, r20
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    const lin_transport_layer_queue_t *rx_queue = &(tl_desc_ptr->tl_rx_queue);
    l_u8 i;
    for (i = 0; i < 8U; i++)
    927e:	89 81       	ldd	r24, Y+1	; 0x01
    9280:	8f 5f       	subi	r24, 0xFF	; 255
    9282:	89 83       	std	Y+1, r24	; 0x01
    9284:	89 81       	ldd	r24, Y+1	; 0x01
    9286:	88 30       	cpi	r24, 0x08	; 8
    9288:	b8 f2       	brcs	.-82     	; 0x9238 <lin_diagservice_read_by_identifier+0x72>
    {
        lin_tl_pdu[i] = rx_queue->tl_pdu_ptr[rx_queue->queue_header][i];
    }

    /* Get the product identification */
    product_id = node_attr_ptr->product_id;
    928a:	8e 81       	ldd	r24, Y+6	; 0x06
    928c:	9f 81       	ldd	r25, Y+7	; 0x07
    928e:	25 e0       	ldi	r18, 0x05	; 5
    9290:	fc 01       	movw	r30, r24
    9292:	33 96       	adiw	r30, 0x03	; 3
    9294:	de 01       	movw	r26, r28
    9296:	50 96       	adiw	r26, 0x10	; 16
    9298:	01 90       	ld	r0, Z+
    929a:	0d 92       	st	X+, r0
    929c:	2a 95       	dec	r18
    929e:	e1 f7       	brne	.-8      	; 0x9298 <lin_diagservice_read_by_identifier+0xd2>

    /* Get supplier and function identification in request */
    supid = (l_u16)(((l_u16)(lin_tl_pdu[5])) << 8U);
    92a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    92a2:	88 2f       	mov	r24, r24
    92a4:	90 e0       	ldi	r25, 0x00	; 0
    92a6:	98 2f       	mov	r25, r24
    92a8:	88 27       	eor	r24, r24
    92aa:	8a 87       	std	Y+10, r24	; 0x0a
    92ac:	9b 87       	std	Y+11, r25	; 0x0b
    supid = (l_u16)(supid | (l_u16)(lin_tl_pdu[4]));
    92ae:	89 8d       	ldd	r24, Y+25	; 0x19
    92b0:	88 2f       	mov	r24, r24
    92b2:	90 e0       	ldi	r25, 0x00	; 0
    92b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    92b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    92b8:	82 2b       	or	r24, r18
    92ba:	93 2b       	or	r25, r19
    92bc:	8a 87       	std	Y+10, r24	; 0x0a
    92be:	9b 87       	std	Y+11, r25	; 0x0b

    fid = (l_u16)(((l_u16)(lin_tl_pdu[7])) << 8U);
    92c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    92c2:	88 2f       	mov	r24, r24
    92c4:	90 e0       	ldi	r25, 0x00	; 0
    92c6:	98 2f       	mov	r25, r24
    92c8:	88 27       	eor	r24, r24
    92ca:	8c 87       	std	Y+12, r24	; 0x0c
    92cc:	9d 87       	std	Y+13, r25	; 0x0d
    fid = (l_u16)(fid | (l_u16)(lin_tl_pdu[6]));
    92ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    92d0:	88 2f       	mov	r24, r24
    92d2:	90 e0       	ldi	r25, 0x00	; 0
    92d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    92d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    92d8:	82 2b       	or	r24, r18
    92da:	93 2b       	or	r25, r19
    92dc:	8c 87       	std	Y+12, r24	; 0x0c
    92de:	9d 87       	std	Y+13, r25	; 0x0d

    /* Check Supplier ID and Function ID */
    if (((supid != product_id.supplier_id) && (supid != LD_ANY_SUPPLIER)) ||
    92e0:	28 89       	ldd	r18, Y+16	; 0x10
    92e2:	39 89       	ldd	r19, Y+17	; 0x11
    92e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    92e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    92e8:	28 17       	cp	r18, r24
    92ea:	39 07       	cpc	r19, r25
    92ec:	29 f0       	breq	.+10     	; 0x92f8 <lin_diagservice_read_by_identifier+0x132>
    92ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    92f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    92f2:	8f 3f       	cpi	r24, 0xFF	; 255
    92f4:	9f 47       	sbci	r25, 0x7F	; 127
    92f6:	59 f4       	brne	.+22     	; 0x930e <lin_diagservice_read_by_identifier+0x148>
        ((fid != product_id.function_id) && (fid != LD_ANY_FUNCTION)))
    92f8:	2a 89       	ldd	r18, Y+18	; 0x12
    92fa:	3b 89       	ldd	r19, Y+19	; 0x13

    fid = (l_u16)(((l_u16)(lin_tl_pdu[7])) << 8U);
    fid = (l_u16)(fid | (l_u16)(lin_tl_pdu[6]));

    /* Check Supplier ID and Function ID */
    if (((supid != product_id.supplier_id) && (supid != LD_ANY_SUPPLIER)) ||
    92fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    92fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    9300:	28 17       	cp	r18, r24
    9302:	39 07       	cpc	r19, r25
    9304:	49 f0       	breq	.+18     	; 0x9318 <lin_diagservice_read_by_identifier+0x152>
        ((fid != product_id.function_id) && (fid != LD_ANY_FUNCTION)))
    9306:	8c 85       	ldd	r24, Y+12	; 0x0c
    9308:	9d 85       	ldd	r25, Y+13	; 0x0d
    930a:	01 96       	adiw	r24, 0x01	; 1
    930c:	29 f0       	breq	.+10     	; 0x9318 <lin_diagservice_read_by_identifier+0x152>
    {
        tl_desc_ptr->slave_resp_cnt = 0U;
    930e:	8a 81       	ldd	r24, Y+2	; 0x02
    9310:	9b 81       	ldd	r25, Y+3	; 0x03
    9312:	fc 01       	movw	r30, r24
    9314:	12 a6       	std	Z+42, r1	; 0x2a
    9316:	75 c0       	rjmp	.+234    	; 0x9402 <lin_diagservice_read_by_identifier+0x23c>
    }
    else
    {
        /* Get the identifier of request */
        id = lin_tl_pdu[3];
    9318:	88 8d       	ldd	r24, Y+24	; 0x18
    931a:	8e 87       	std	Y+14, r24	; 0x0e

        switch (id)
    931c:	8e 85       	ldd	r24, Y+14	; 0x0e
    931e:	88 2f       	mov	r24, r24
    9320:	90 e0       	ldi	r25, 0x00	; 0
    9322:	00 97       	sbiw	r24, 0x00	; 0
    9324:	19 f0       	breq	.+6      	; 0x932c <lin_diagservice_read_by_identifier+0x166>
    9326:	01 97       	sbiw	r24, 0x01	; 1
    9328:	41 f0       	breq	.+16     	; 0x933a <lin_diagservice_read_by_identifier+0x174>
    932a:	0e c0       	rjmp	.+28     	; 0x9348 <lin_diagservice_read_by_identifier+0x182>
        {
        case LIN_PRODUCT_ID:
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
    932c:	2e 85       	ldd	r18, Y+14	; 0x0e
    932e:	41 e0       	ldi	r20, 0x01	; 1
    9330:	62 eb       	ldi	r22, 0xB2	; 178
    9332:	8a a1       	ldd	r24, Y+34	; 0x22
    9334:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
            break;
    9338:	64 c0       	rjmp	.+200    	; 0x9402 <lin_diagservice_read_by_identifier+0x23c>
        case LIN_SERIAL_NUMBER:
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
    933a:	2e 85       	ldd	r18, Y+14	; 0x0e
    933c:	41 e0       	ldi	r20, 0x01	; 1
    933e:	62 eb       	ldi	r22, 0xB2	; 178
    9340:	8a a1       	ldd	r24, Y+34	; 0x22
    9342:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
            break;
    9346:	5d c0       	rjmp	.+186    	; 0x9402 <lin_diagservice_read_by_identifier+0x23c>
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
    9348:	8e 85       	ldd	r24, Y+14	; 0x0e
    934a:	80 32       	cpi	r24, 0x20	; 32
    934c:	08 f4       	brcc	.+2      	; 0x9350 <lin_diagservice_read_by_identifier+0x18a>
    934e:	51 c0       	rjmp	.+162    	; 0x93f2 <lin_diagservice_read_by_identifier+0x22c>
    9350:	8e 85       	ldd	r24, Y+14	; 0x0e
    9352:	80 34       	cpi	r24, 0x40	; 64
    9354:	08 f0       	brcs	.+2      	; 0x9358 <lin_diagservice_read_by_identifier+0x192>
    9356:	4d c0       	rjmp	.+154    	; 0x93f2 <lin_diagservice_read_by_identifier+0x22c>
            {
                l_u8 data_callout[5] = {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
    9358:	85 e0       	ldi	r24, 0x05	; 5
    935a:	e1 ef       	ldi	r30, 0xF1	; 241
    935c:	f1 e4       	ldi	r31, 0x41	; 65
    935e:	de 01       	movw	r26, r28
    9360:	5d 96       	adiw	r26, 0x1d	; 29
    9362:	01 90       	ld	r0, Z+
    9364:	0d 92       	st	X+, r0
    9366:	8a 95       	dec	r24
    9368:	e1 f7       	brne	.-8      	; 0x9362 <lin_diagservice_read_by_identifier+0x19c>
                l_u8 retval = ld_read_by_id_callout(iii, id, data_callout);
    936a:	ce 01       	movw	r24, r28
    936c:	4d 96       	adiw	r24, 0x1d	; 29
    936e:	ac 01       	movw	r20, r24
    9370:	6e 85       	ldd	r22, Y+14	; 0x0e
    9372:	8a a1       	ldd	r24, Y+34	; 0x22
    9374:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <ld_read_by_id_callout>
    9378:	8f 87       	std	Y+15, r24	; 0x0f
                /*If the User ID is supported, make positive response*/
                if (retval == LD_POSITIVE_RESPONSE)
    937a:	8f 85       	ldd	r24, Y+15	; 0x0f
    937c:	84 35       	cpi	r24, 0x54	; 84
    937e:	29 f5       	brne	.+74     	; 0x93ca <lin_diagservice_read_by_identifier+0x204>
                {
                    i = 0U;
    9380:	19 82       	std	Y+1, r1	; 0x01
                    while ((i < 5U) && (data_callout[i] == 0xFFU))
    9382:	03 c0       	rjmp	.+6      	; 0x938a <lin_diagservice_read_by_identifier+0x1c4>
                    {
                        i++;
    9384:	89 81       	ldd	r24, Y+1	; 0x01
    9386:	8f 5f       	subi	r24, 0xFF	; 255
    9388:	89 83       	std	Y+1, r24	; 0x01
                l_u8 retval = ld_read_by_id_callout(iii, id, data_callout);
                /*If the User ID is supported, make positive response*/
                if (retval == LD_POSITIVE_RESPONSE)
                {
                    i = 0U;
                    while ((i < 5U) && (data_callout[i] == 0xFFU))
    938a:	89 81       	ldd	r24, Y+1	; 0x01
    938c:	85 30       	cpi	r24, 0x05	; 5
    938e:	60 f4       	brcc	.+24     	; 0x93a8 <lin_diagservice_read_by_identifier+0x1e2>
    9390:	89 81       	ldd	r24, Y+1	; 0x01
    9392:	88 2f       	mov	r24, r24
    9394:	90 e0       	ldi	r25, 0x00	; 0
    9396:	9e 01       	movw	r18, r28
    9398:	23 5e       	subi	r18, 0xE3	; 227
    939a:	3f 4f       	sbci	r19, 0xFF	; 255
    939c:	82 0f       	add	r24, r18
    939e:	93 1f       	adc	r25, r19
    93a0:	fc 01       	movw	r30, r24
    93a2:	80 81       	ld	r24, Z
    93a4:	8f 3f       	cpi	r24, 0xFF	; 255
    93a6:	71 f3       	breq	.-36     	; 0x9384 <lin_diagservice_read_by_identifier+0x1be>
                    {
                        i++;
                    }
                    if (i < 5U)
    93a8:	89 81       	ldd	r24, Y+1	; 0x01
    93aa:	85 30       	cpi	r24, 0x05	; 5
    93ac:	38 f4       	brcc	.+14     	; 0x93bc <lin_diagservice_read_by_identifier+0x1f6>
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
    93ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    93b0:	41 e0       	ldi	r20, 0x01	; 1
    93b2:	62 eb       	ldi	r22, 0xB2	; 178
    93b4:	8a a1       	ldd	r24, Y+34	; 0x22
    93b6:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    93ba:	22 c0       	rjmp	.+68     	; 0x9400 <lin_diagservice_read_by_identifier+0x23a>
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
                    }
                    else
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
    93bc:	22 e1       	ldi	r18, 0x12	; 18
    93be:	40 e0       	ldi	r20, 0x00	; 0
    93c0:	62 eb       	ldi	r22, 0xB2	; 178
    93c2:	8a a1       	ldd	r24, Y+34	; 0x22
    93c4:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    93c8:	1b c0       	rjmp	.+54     	; 0x9400 <lin_diagservice_read_by_identifier+0x23a>
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
                    }
                }
                /*If the User ID is not supported, make negative response*/
                else if (retval == LD_NEGATIVE_RESPONSE)
    93ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    93cc:	83 35       	cpi	r24, 0x53	; 83
    93ce:	39 f4       	brne	.+14     	; 0x93de <lin_diagservice_read_by_identifier+0x218>
                {
                    /* Make a negative slave response PDU */
                    ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
    93d0:	22 e1       	ldi	r18, 0x12	; 18
    93d2:	40 e0       	ldi	r20, 0x00	; 0
    93d4:	62 eb       	ldi	r22, 0xB2	; 178
    93d6:	8a a1       	ldd	r24, Y+34	; 0x22
    93d8:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    93dc:	11 c0       	rjmp	.+34     	; 0x9400 <lin_diagservice_read_by_identifier+0x23a>
                    ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
                }
                else
                {
                    /*Do not answer*/
                    tl_desc_ptr->slave_resp_cnt = 0;
    93de:	8a 81       	ldd	r24, Y+2	; 0x02
    93e0:	9b 81       	ldd	r25, Y+3	; 0x03
    93e2:	fc 01       	movw	r30, r24
    93e4:	12 a6       	std	Z+42, r1	; 0x2a
                    tl_desc_ptr->service_status = LD_SERVICE_IDLE;
    93e6:	8a 81       	ldd	r24, Y+2	; 0x02
    93e8:	9b 81       	ldd	r25, Y+3	; 0x03
    93ea:	22 e0       	ldi	r18, 0x02	; 2
    93ec:	fc 01       	movw	r30, r24
    93ee:	23 a7       	std	Z+43, r18	; 0x2b
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    93f0:	07 c0       	rjmp	.+14     	; 0x9400 <lin_diagservice_read_by_identifier+0x23a>
            }
            /* For ID from 2 to 31 or 64-255, give negative response */
            else
            {
                /* Make a negative slave response PDU */
                ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
    93f2:	22 e1       	ldi	r18, 0x12	; 18
    93f4:	40 e0       	ldi	r20, 0x00	; 0
    93f6:	62 eb       	ldi	r22, 0xB2	; 178
    93f8:	8a a1       	ldd	r24, Y+34	; 0x22
    93fa:	0e 94 08 4a 	call	0x9410	; 0x9410 <ld_make_slave_response_pdu>
            }

            break;
    93fe:	00 c0       	rjmp	.+0      	; 0x9400 <lin_diagservice_read_by_identifier+0x23a>
    9400:	00 00       	nop
        } /* end of switch */
    }
}
    9402:	00 00       	nop
    9404:	a2 96       	adiw	r28, 0x22	; 34
    9406:	cd bf       	out	0x3d, r28	; 61
    9408:	de bf       	out	0x3e, r29	; 62
    940a:	df 91       	pop	r29
    940c:	cf 91       	pop	r28
    940e:	08 95       	ret

00009410 <ld_make_slave_response_pdu>:
 *END**************************************************************************/
static void ld_make_slave_response_pdu(l_ifc_handle iii,
                                       l_u8 sid,
                                       l_u8 res_type,
                                       l_u8 error_code)
{
    9410:	cf 93       	push	r28
    9412:	df 93       	push	r29
    9414:	cd b7       	in	r28, 0x3d	; 61
    9416:	de b7       	in	r29, 0x3e	; 62
    9418:	6f 97       	sbiw	r28, 0x1f	; 31
    941a:	cd bf       	out	0x3d, r28	; 61
    941c:	de bf       	out	0x3e, r29	; 62
    941e:	8c 8f       	std	Y+28, r24	; 0x1c
    9420:	6d 8f       	std	Y+29, r22	; 0x1d
    9422:	4e 8f       	std	Y+30, r20	; 0x1e
    9424:	2f 8f       	std	Y+31, r18	; 0x1f
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9426:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9428:	28 2f       	mov	r18, r24
    942a:	30 e0       	ldi	r19, 0x00	; 0
    942c:	44 e3       	ldi	r20, 0x34	; 52
    942e:	42 9f       	mul	r20, r18
    9430:	c0 01       	movw	r24, r0
    9432:	43 9f       	mul	r20, r19
    9434:	90 0d       	add	r25, r0
    9436:	11 24       	eor	r1, r1
    9438:	83 59       	subi	r24, 0x93	; 147
    943a:	99 4b       	sbci	r25, 0xB9	; 185
    943c:	8a 83       	std	Y+2, r24	; 0x02
    943e:	9b 83       	std	Y+3, r25	; 0x03
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    9440:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9442:	28 2f       	mov	r18, r24
    9444:	30 e0       	ldi	r19, 0x00	; 0
    9446:	4c e1       	ldi	r20, 0x1C	; 28
    9448:	42 9f       	mul	r20, r18
    944a:	c0 01       	movw	r24, r0
    944c:	43 9f       	mul	r20, r19
    944e:	90 0d       	add	r25, r0
    9450:	11 24       	eor	r1, r1
    9452:	86 56       	subi	r24, 0x66	; 102
    9454:	9d 4b       	sbci	r25, 0xBD	; 189
    9456:	8c 83       	std	Y+4, r24	; 0x04
    9458:	9d 83       	std	Y+5, r25	; 0x05
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    945a:	8c 81       	ldd	r24, Y+4	; 0x04
    945c:	9d 81       	ldd	r25, Y+5	; 0x05
    945e:	fc 01       	movw	r30, r24
    9460:	82 89       	ldd	r24, Z+18	; 0x12
    9462:	28 2f       	mov	r18, r24
    9464:	30 e0       	ldi	r19, 0x00	; 0
    9466:	44 e2       	ldi	r20, 0x24	; 36
    9468:	42 9f       	mul	r20, r18
    946a:	c0 01       	movw	r24, r0
    946c:	43 9f       	mul	r20, r19
    946e:	90 0d       	add	r25, r0
    9470:	11 24       	eor	r1, r1
    9472:	8a 58       	subi	r24, 0x8A	; 138
    9474:	9d 4b       	sbci	r25, 0xBD	; 189
    9476:	8e 83       	std	Y+6, r24	; 0x06
    9478:	9f 83       	std	Y+7, r25	; 0x07
    const lin_product_id_t *ident;
    const lin_serial_number_t *serial_number;
    l_u8 i = 0U;
    947a:	19 82       	std	Y+1, r1	; 0x01
    l_u8 NAD;
    lin_tl_pdu_data_t lin_tl_pdu;
    const lin_transport_layer_queue_t *rx_queue;

    /* Get receive queue */
    rx_queue = &(tl_desc_ptr->tl_rx_queue);
    947c:	8a 81       	ldd	r24, Y+2	; 0x02
    947e:	9b 81       	ldd	r25, Y+3	; 0x03
    9480:	0b 96       	adiw	r24, 0x0b	; 11
    9482:	88 87       	std	Y+8, r24	; 0x08
    9484:	99 87       	std	Y+9, r25	; 0x09
    NAD = rx_queue->tl_pdu_ptr[rx_queue->queue_header][0];
    9486:	88 85       	ldd	r24, Y+8	; 0x08
    9488:	99 85       	ldd	r25, Y+9	; 0x09
    948a:	fc 01       	movw	r30, r24
    948c:	21 85       	ldd	r18, Z+9	; 0x09
    948e:	32 85       	ldd	r19, Z+10	; 0x0a
    9490:	88 85       	ldd	r24, Y+8	; 0x08
    9492:	99 85       	ldd	r25, Y+9	; 0x09
    9494:	fc 01       	movw	r30, r24
    9496:	80 81       	ld	r24, Z
    9498:	91 81       	ldd	r25, Z+1	; 0x01
    949a:	88 0f       	add	r24, r24
    949c:	99 1f       	adc	r25, r25
    949e:	88 0f       	add	r24, r24
    94a0:	99 1f       	adc	r25, r25
    94a2:	88 0f       	add	r24, r24
    94a4:	99 1f       	adc	r25, r25
    94a6:	82 0f       	add	r24, r18
    94a8:	93 1f       	adc	r25, r19
    94aa:	fc 01       	movw	r30, r24
    94ac:	80 81       	ld	r24, Z
    94ae:	8a 87       	std	Y+10, r24	; 0x0a
    if (NAD != LD_FUNCTIONAL_NAD)
    94b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    94b2:	8e 37       	cpi	r24, 0x7E	; 126
    94b4:	09 f4       	brne	.+2      	; 0x94b8 <ld_make_slave_response_pdu+0xa8>
    94b6:	26 c1       	rjmp	.+588    	; 0x9704 <ld_make_slave_response_pdu+0x2f4>
    {
        /* Pack data to response PDU */
        lin_tl_pdu[0] = *node_attr_ptr->configured_NAD_ptr;
    94b8:	8e 81       	ldd	r24, Y+6	; 0x06
    94ba:	9f 81       	ldd	r25, Y+7	; 0x07
    94bc:	fc 01       	movw	r30, r24
    94be:	80 81       	ld	r24, Z
    94c0:	91 81       	ldd	r25, Z+1	; 0x01
    94c2:	fc 01       	movw	r30, r24
    94c4:	80 81       	ld	r24, Z
    94c6:	8f 87       	std	Y+15, r24	; 0x0f
        lin_tl_pdu[1] = 0x03U;        /* PCI */
    94c8:	83 e0       	ldi	r24, 0x03	; 3
    94ca:	88 8b       	std	Y+16, r24	; 0x10
        lin_tl_pdu[2] = RES_NEGATIVE; /* SID */
    94cc:	8f e7       	ldi	r24, 0x7F	; 127
    94ce:	89 8b       	std	Y+17, r24	; 0x11
        lin_tl_pdu[3] = sid;          /* D0 */
    94d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    94d2:	8a 8b       	std	Y+18, r24	; 0x12
        lin_tl_pdu[4] = error_code;   /* D1 */
    94d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    94d6:	8b 8b       	std	Y+19, r24	; 0x13
        lin_tl_pdu[5] = 0xFFU;        /* D2 */
    94d8:	8f ef       	ldi	r24, 0xFF	; 255
    94da:	8c 8b       	std	Y+20, r24	; 0x14
        lin_tl_pdu[6] = 0xFFU;        /* D3 */
    94dc:	8f ef       	ldi	r24, 0xFF	; 255
    94de:	8d 8b       	std	Y+21, r24	; 0x15
        lin_tl_pdu[7] = 0xFFU;        /* D4 */
    94e0:	8f ef       	ldi	r24, 0xFF	; 255
    94e2:	8e 8b       	std	Y+22, r24	; 0x16

        switch (sid)
    94e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    94e6:	88 2f       	mov	r24, r24
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	82 3b       	cpi	r24, 0xB2	; 178
    94ec:	91 05       	cpc	r25, r1
    94ee:	c9 f0       	breq	.+50     	; 0x9522 <ld_make_slave_response_pdu+0x112>
    94f0:	83 3b       	cpi	r24, 0xB3	; 179
    94f2:	91 05       	cpc	r25, r1
    94f4:	4c f4       	brge	.+18     	; 0x9508 <ld_make_slave_response_pdu+0xf8>
    94f6:	80 3b       	cpi	r24, 0xB0	; 176
    94f8:	91 05       	cpc	r25, r1
    94fa:	09 f4       	brne	.+2      	; 0x94fe <ld_make_slave_response_pdu+0xee>
    94fc:	ab c0       	rjmp	.+342    	; 0x9654 <ld_make_slave_response_pdu+0x244>
    94fe:	81 3b       	cpi	r24, 0xB1	; 177
    9500:	91 05       	cpc	r25, r1
    9502:	09 f4       	brne	.+2      	; 0x9506 <ld_make_slave_response_pdu+0xf6>
    9504:	96 c0       	rjmp	.+300    	; 0x9632 <ld_make_slave_response_pdu+0x222>
            break;
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

        default:
            /* do nothing */
            break;
    9506:	f2 c0       	rjmp	.+484    	; 0x96ec <ld_make_slave_response_pdu+0x2dc>
        lin_tl_pdu[4] = error_code;   /* D1 */
        lin_tl_pdu[5] = 0xFFU;        /* D2 */
        lin_tl_pdu[6] = 0xFFU;        /* D3 */
        lin_tl_pdu[7] = 0xFFU;        /* D4 */

        switch (sid)
    9508:	86 3b       	cpi	r24, 0xB6	; 182
    950a:	91 05       	cpc	r25, r1
    950c:	09 f4       	brne	.+2      	; 0x9510 <ld_make_slave_response_pdu+0x100>
    950e:	d4 c0       	rjmp	.+424    	; 0x96b8 <ld_make_slave_response_pdu+0x2a8>
    9510:	87 3b       	cpi	r24, 0xB7	; 183
    9512:	91 05       	cpc	r25, r1
    9514:	09 f4       	brne	.+2      	; 0x9518 <ld_make_slave_response_pdu+0x108>
    9516:	da c0       	rjmp	.+436    	; 0x96cc <ld_make_slave_response_pdu+0x2bc>
    9518:	83 3b       	cpi	r24, 0xB3	; 179
    951a:	91 05       	cpc	r25, r1
    951c:	09 f4       	brne	.+2      	; 0x9520 <ld_make_slave_response_pdu+0x110>
    951e:	c3 c0       	rjmp	.+390    	; 0x96a6 <ld_make_slave_response_pdu+0x296>
            break;
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

        default:
            /* do nothing */
            break;
    9520:	e5 c0       	rjmp	.+458    	; 0x96ec <ld_make_slave_response_pdu+0x2dc>
        lin_tl_pdu[7] = 0xFFU;        /* D4 */

        switch (sid)
        {
        case SERVICE_READ_BY_IDENTIFY:
            if (POSITIVE == res_type)
    9522:	8e 8d       	ldd	r24, Y+30	; 0x1e
    9524:	81 30       	cpi	r24, 0x01	; 1
    9526:	09 f0       	breq	.+2      	; 0x952a <ld_make_slave_response_pdu+0x11a>
    9528:	de c0       	rjmp	.+444    	; 0x96e6 <ld_make_slave_response_pdu+0x2d6>
            {
                /* PCI type */
                lin_tl_pdu[1] = PCI_RES_READ_BY_IDENTIFY;
    952a:	86 e0       	ldi	r24, 0x06	; 6
    952c:	88 8b       	std	Y+16, r24	; 0x10
                /* SID */
                lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
    952e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9530:	80 5c       	subi	r24, 0xC0	; 192
    9532:	89 8b       	std	Y+17, r24	; 0x11

                if (error_code == LIN_PRODUCT_ID)
    9534:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9536:	88 23       	and	r24, r24
    9538:	39 f5       	brne	.+78     	; 0x9588 <ld_make_slave_response_pdu+0x178>
                {
                    /* Get Identifier info */
                    ident = (const lin_product_id_t *)(&node_attr_ptr->product_id);
    953a:	8e 81       	ldd	r24, Y+6	; 0x06
    953c:	9f 81       	ldd	r25, Y+7	; 0x07
    953e:	03 96       	adiw	r24, 0x03	; 3
    9540:	8b 87       	std	Y+11, r24	; 0x0b
    9542:	9c 87       	std	Y+12, r25	; 0x0c
                    lin_tl_pdu[3] = (l_u8)(ident->supplier_id & 0xFFU);
    9544:	8b 85       	ldd	r24, Y+11	; 0x0b
    9546:	9c 85       	ldd	r25, Y+12	; 0x0c
    9548:	fc 01       	movw	r30, r24
    954a:	80 81       	ld	r24, Z
    954c:	91 81       	ldd	r25, Z+1	; 0x01
    954e:	8a 8b       	std	Y+18, r24	; 0x12
                    lin_tl_pdu[4] = (l_u8)(ident->supplier_id >> 8);
    9550:	8b 85       	ldd	r24, Y+11	; 0x0b
    9552:	9c 85       	ldd	r25, Y+12	; 0x0c
    9554:	fc 01       	movw	r30, r24
    9556:	80 81       	ld	r24, Z
    9558:	91 81       	ldd	r25, Z+1	; 0x01
    955a:	89 2f       	mov	r24, r25
    955c:	99 27       	eor	r25, r25
    955e:	8b 8b       	std	Y+19, r24	; 0x13
                    lin_tl_pdu[5] = (l_u8)(ident->function_id & 0xFFU);
    9560:	8b 85       	ldd	r24, Y+11	; 0x0b
    9562:	9c 85       	ldd	r25, Y+12	; 0x0c
    9564:	fc 01       	movw	r30, r24
    9566:	82 81       	ldd	r24, Z+2	; 0x02
    9568:	93 81       	ldd	r25, Z+3	; 0x03
    956a:	8c 8b       	std	Y+20, r24	; 0x14
                    lin_tl_pdu[6] = (l_u8)(ident->function_id >> 8);
    956c:	8b 85       	ldd	r24, Y+11	; 0x0b
    956e:	9c 85       	ldd	r25, Y+12	; 0x0c
    9570:	fc 01       	movw	r30, r24
    9572:	82 81       	ldd	r24, Z+2	; 0x02
    9574:	93 81       	ldd	r25, Z+3	; 0x03
    9576:	89 2f       	mov	r24, r25
    9578:	99 27       	eor	r25, r25
    957a:	8d 8b       	std	Y+21, r24	; 0x15
                    lin_tl_pdu[7] = ident->variant;
    957c:	8b 85       	ldd	r24, Y+11	; 0x0b
    957e:	9c 85       	ldd	r25, Y+12	; 0x0c
    9580:	fc 01       	movw	r30, r24
    9582:	84 81       	ldd	r24, Z+4	; 0x04
    9584:	8e 8b       	std	Y+22, r24	; 0x16
                            break;
                        }
                    }
                }
            }
            break;
    9586:	af c0       	rjmp	.+350    	; 0x96e6 <ld_make_slave_response_pdu+0x2d6>
                    lin_tl_pdu[4] = (l_u8)(ident->supplier_id >> 8);
                    lin_tl_pdu[5] = (l_u8)(ident->function_id & 0xFFU);
                    lin_tl_pdu[6] = (l_u8)(ident->function_id >> 8);
                    lin_tl_pdu[7] = ident->variant;
                }
                else if (error_code == LIN_SERIAL_NUMBER)
    9588:	8f 8d       	ldd	r24, Y+31	; 0x1f
    958a:	81 30       	cpi	r24, 0x01	; 1
    958c:	e1 f4       	brne	.+56     	; 0x95c6 <ld_make_slave_response_pdu+0x1b6>
                {
                    serial_number = (const lin_serial_number_t *)(&node_attr_ptr->serial_number);
    958e:	8e 81       	ldd	r24, Y+6	; 0x06
    9590:	9f 81       	ldd	r25, Y+7	; 0x07
    9592:	08 96       	adiw	r24, 0x08	; 8
    9594:	8d 87       	std	Y+13, r24	; 0x0d
    9596:	9e 87       	std	Y+14, r25	; 0x0e
                    lin_tl_pdu[3] = serial_number->serial_0;
    9598:	8d 85       	ldd	r24, Y+13	; 0x0d
    959a:	9e 85       	ldd	r25, Y+14	; 0x0e
    959c:	fc 01       	movw	r30, r24
    959e:	80 81       	ld	r24, Z
    95a0:	8a 8b       	std	Y+18, r24	; 0x12
                    lin_tl_pdu[4] = serial_number->serial_1;
    95a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    95a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    95a6:	fc 01       	movw	r30, r24
    95a8:	81 81       	ldd	r24, Z+1	; 0x01
    95aa:	8b 8b       	std	Y+19, r24	; 0x13
                    lin_tl_pdu[5] = serial_number->serial_2;
    95ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    95ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    95b0:	fc 01       	movw	r30, r24
    95b2:	82 81       	ldd	r24, Z+2	; 0x02
    95b4:	8c 8b       	std	Y+20, r24	; 0x14
                    lin_tl_pdu[6] = serial_number->serial_3;
    95b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    95b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    95ba:	fc 01       	movw	r30, r24
    95bc:	83 81       	ldd	r24, Z+3	; 0x03
    95be:	8d 8b       	std	Y+21, r24	; 0x15
                    /* PCI for Serial Number is 0x05 */
                    lin_tl_pdu[1] = 0x05U;
    95c0:	85 e0       	ldi	r24, 0x05	; 5
    95c2:	88 8b       	std	Y+16, r24	; 0x10
                            break;
                        }
                    }
                }
            }
            break;
    95c4:	90 c0       	rjmp	.+288    	; 0x96e6 <ld_make_slave_response_pdu+0x2d6>
                    /* PCI for Serial Number is 0x05 */
                    lin_tl_pdu[1] = 0x05U;
                }
                else
                {
                    l_u8 data_callout[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    95c6:	85 e0       	ldi	r24, 0x05	; 5
    95c8:	e1 ef       	ldi	r30, 0xF1	; 241
    95ca:	f1 e4       	ldi	r31, 0x41	; 65
    95cc:	de 01       	movw	r26, r28
    95ce:	57 96       	adiw	r26, 0x17	; 23
    95d0:	01 90       	ld	r0, Z+
    95d2:	0d 92       	st	X+, r0
    95d4:	8a 95       	dec	r24
    95d6:	e1 f7       	brne	.-8      	; 0x95d0 <ld_make_slave_response_pdu+0x1c0>
                    (void)ld_read_by_id_callout(iii, error_code, data_callout);
    95d8:	ce 01       	movw	r24, r28
    95da:	47 96       	adiw	r24, 0x17	; 23
    95dc:	ac 01       	movw	r20, r24
    95de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    95e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    95e2:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <ld_read_by_id_callout>
                    /* packing user defined pdu */
                    lin_tl_pdu[3] = data_callout[0];
    95e6:	8f 89       	ldd	r24, Y+23	; 0x17
    95e8:	8a 8b       	std	Y+18, r24	; 0x12
                    lin_tl_pdu[4] = data_callout[1];
    95ea:	88 8d       	ldd	r24, Y+24	; 0x18
    95ec:	8b 8b       	std	Y+19, r24	; 0x13
                    lin_tl_pdu[5] = data_callout[2];
    95ee:	89 8d       	ldd	r24, Y+25	; 0x19
    95f0:	8c 8b       	std	Y+20, r24	; 0x14
                    lin_tl_pdu[6] = data_callout[3];
    95f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    95f4:	8d 8b       	std	Y+21, r24	; 0x15
                    lin_tl_pdu[7] = data_callout[4];
    95f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    95f8:	8e 8b       	std	Y+22, r24	; 0x16
                    /* Check for data values*/
                    for (i = 5U; i > 0U; i--)
    95fa:	85 e0       	ldi	r24, 0x05	; 5
    95fc:	89 83       	std	Y+1, r24	; 0x01
    95fe:	15 c0       	rjmp	.+42     	; 0x962a <ld_make_slave_response_pdu+0x21a>
                    {
                        if (data_callout[i - 1U] != 0xFFU)
    9600:	89 81       	ldd	r24, Y+1	; 0x01
    9602:	88 2f       	mov	r24, r24
    9604:	90 e0       	ldi	r25, 0x00	; 0
    9606:	01 97       	sbiw	r24, 0x01	; 1
    9608:	9e 01       	movw	r18, r28
    960a:	29 5e       	subi	r18, 0xE9	; 233
    960c:	3f 4f       	sbci	r19, 0xFF	; 255
    960e:	82 0f       	add	r24, r18
    9610:	93 1f       	adc	r25, r19
    9612:	fc 01       	movw	r30, r24
    9614:	80 81       	ld	r24, Z
    9616:	8f 3f       	cpi	r24, 0xFF	; 255
    9618:	29 f0       	breq	.+10     	; 0x9624 <ld_make_slave_response_pdu+0x214>
                        {
                            /* PCI: Data length is 1 (RSID) + all data exclude 0xFF */
                            lin_tl_pdu[1] = (l_u8)(i + 1U);
    961a:	89 81       	ldd	r24, Y+1	; 0x01
    961c:	8f 5f       	subi	r24, 0xFF	; 255
    961e:	88 8b       	std	Y+16, r24	; 0x10
                            break;
    9620:	00 00       	nop
                        }
                    }
                }
            }
            break;
    9622:	61 c0       	rjmp	.+194    	; 0x96e6 <ld_make_slave_response_pdu+0x2d6>
                    lin_tl_pdu[4] = data_callout[1];
                    lin_tl_pdu[5] = data_callout[2];
                    lin_tl_pdu[6] = data_callout[3];
                    lin_tl_pdu[7] = data_callout[4];
                    /* Check for data values*/
                    for (i = 5U; i > 0U; i--)
    9624:	89 81       	ldd	r24, Y+1	; 0x01
    9626:	81 50       	subi	r24, 0x01	; 1
    9628:	89 83       	std	Y+1, r24	; 0x01
    962a:	89 81       	ldd	r24, Y+1	; 0x01
    962c:	88 23       	and	r24, r24
    962e:	41 f7       	brne	.-48     	; 0x9600 <ld_make_slave_response_pdu+0x1f0>
                            break;
                        }
                    }
                }
            }
            break;
    9630:	5a c0       	rjmp	.+180    	; 0x96e6 <ld_make_slave_response_pdu+0x2d6>
        case SERVICE_ASSIGN_FRAME_ID:
            lin_tl_pdu[0] = *node_attr_ptr->configured_NAD_ptr;
    9632:	8e 81       	ldd	r24, Y+6	; 0x06
    9634:	9f 81       	ldd	r25, Y+7	; 0x07
    9636:	fc 01       	movw	r30, r24
    9638:	80 81       	ld	r24, Z
    963a:	91 81       	ldd	r25, Z+1	; 0x01
    963c:	fc 01       	movw	r30, r24
    963e:	80 81       	ld	r24, Z
    9640:	8f 87       	std	Y+15, r24	; 0x0f
            lin_tl_pdu[1] = 0x01U; /* PCI */
    9642:	81 e0       	ldi	r24, 0x01	; 1
    9644:	88 8b       	std	Y+16, r24	; 0x10
            lin_tl_pdu[2] = 0xF1U; /* SID */
    9646:	81 ef       	ldi	r24, 0xF1	; 241
    9648:	89 8b       	std	Y+17, r24	; 0x11
            lin_tl_pdu[3] = 0xFFU; /* D0 */
    964a:	8f ef       	ldi	r24, 0xFF	; 255
    964c:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU; /* D1 */
    964e:	8f ef       	ldi	r24, 0xFF	; 255
    9650:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    9652:	4c c0       	rjmp	.+152    	; 0x96ec <ld_make_slave_response_pdu+0x2dc>
        case SERVICE_ASSIGN_NAD:
            lin_tl_pdu[0] = node_attr_ptr->initial_NAD;
    9654:	8e 81       	ldd	r24, Y+6	; 0x06
    9656:	9f 81       	ldd	r25, Y+7	; 0x07
    9658:	fc 01       	movw	r30, r24
    965a:	82 81       	ldd	r24, Z+2	; 0x02
    965c:	8f 87       	std	Y+15, r24	; 0x0f
            *node_attr_ptr->configured_NAD_ptr = rx_queue->tl_pdu_ptr[rx_queue->queue_header][7];
    965e:	8e 81       	ldd	r24, Y+6	; 0x06
    9660:	9f 81       	ldd	r25, Y+7	; 0x07
    9662:	fc 01       	movw	r30, r24
    9664:	80 81       	ld	r24, Z
    9666:	91 81       	ldd	r25, Z+1	; 0x01
    9668:	28 85       	ldd	r18, Y+8	; 0x08
    966a:	39 85       	ldd	r19, Y+9	; 0x09
    966c:	f9 01       	movw	r30, r18
    966e:	41 85       	ldd	r20, Z+9	; 0x09
    9670:	52 85       	ldd	r21, Z+10	; 0x0a
    9672:	28 85       	ldd	r18, Y+8	; 0x08
    9674:	39 85       	ldd	r19, Y+9	; 0x09
    9676:	f9 01       	movw	r30, r18
    9678:	20 81       	ld	r18, Z
    967a:	31 81       	ldd	r19, Z+1	; 0x01
    967c:	22 0f       	add	r18, r18
    967e:	33 1f       	adc	r19, r19
    9680:	22 0f       	add	r18, r18
    9682:	33 1f       	adc	r19, r19
    9684:	22 0f       	add	r18, r18
    9686:	33 1f       	adc	r19, r19
    9688:	24 0f       	add	r18, r20
    968a:	35 1f       	adc	r19, r21
    968c:	f9 01       	movw	r30, r18
    968e:	27 81       	ldd	r18, Z+7	; 0x07
    9690:	fc 01       	movw	r30, r24
    9692:	20 83       	st	Z, r18
            /* PCI */
            lin_tl_pdu[1] = 0x01U;
    9694:	81 e0       	ldi	r24, 0x01	; 1
    9696:	88 8b       	std	Y+16, r24	; 0x10
            /* RSID */
            lin_tl_pdu[2] = 0xF0U;
    9698:	80 ef       	ldi	r24, 0xF0	; 240
    969a:	89 8b       	std	Y+17, r24	; 0x11
            lin_tl_pdu[3] = 0xFFU;
    969c:	8f ef       	ldi	r24, 0xFF	; 255
    969e:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU;
    96a0:	8f ef       	ldi	r24, 0xFF	; 255
    96a2:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    96a4:	23 c0       	rjmp	.+70     	; 0x96ec <ld_make_slave_response_pdu+0x2dc>
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            /* PCI */
            lin_tl_pdu[1] = 0x01U;
    96a6:	81 e0       	ldi	r24, 0x01	; 1
    96a8:	88 8b       	std	Y+16, r24	; 0x10
            /* RSID */
            lin_tl_pdu[2] = 0xF3U;
    96aa:	83 ef       	ldi	r24, 0xF3	; 243
    96ac:	89 8b       	std	Y+17, r24	; 0x11
            lin_tl_pdu[3] = 0xFFU;
    96ae:	8f ef       	ldi	r24, 0xFF	; 255
    96b0:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU;
    96b2:	8f ef       	ldi	r24, 0xFF	; 255
    96b4:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    96b6:	1a c0       	rjmp	.+52     	; 0x96ec <ld_make_slave_response_pdu+0x2dc>

#if (1U == SUPPORT_PROTOCOL_21)
        case SERVICE_SAVE_CONFIGURATION:
            /* PCI type */
            lin_tl_pdu[1] = PCI_RES_SAVE_CONFIGURATION;
    96b8:	81 e0       	ldi	r24, 0x01	; 1
    96ba:	88 8b       	std	Y+16, r24	; 0x10
            /* SID */
            lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
    96bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    96be:	80 5c       	subi	r24, 0xC0	; 192
    96c0:	89 8b       	std	Y+17, r24	; 0x11
            /* Data unused */
            lin_tl_pdu[3] = 0xFFU;
    96c2:	8f ef       	ldi	r24, 0xFF	; 255
    96c4:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU;
    96c6:	8f ef       	ldi	r24, 0xFF	; 255
    96c8:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    96ca:	10 c0       	rjmp	.+32     	; 0x96ec <ld_make_slave_response_pdu+0x2dc>
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (POSITIVE == res_type)
    96cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    96ce:	81 30       	cpi	r24, 0x01	; 1
    96d0:	61 f4       	brne	.+24     	; 0x96ea <ld_make_slave_response_pdu+0x2da>
            {
                lin_tl_pdu[1] = PCI_RES_ASSIGN_FRAME_ID_RANGE;
    96d2:	81 e0       	ldi	r24, 0x01	; 1
    96d4:	88 8b       	std	Y+16, r24	; 0x10
                lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
    96d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    96d8:	80 5c       	subi	r24, 0xC0	; 192
    96da:	89 8b       	std	Y+17, r24	; 0x11
                lin_tl_pdu[3] = 0xFFU;
    96dc:	8f ef       	ldi	r24, 0xFF	; 255
    96de:	8a 8b       	std	Y+18, r24	; 0x12
                lin_tl_pdu[4] = 0xFFU;
    96e0:	8f ef       	ldi	r24, 0xFF	; 255
    96e2:	8b 8b       	std	Y+19, r24	; 0x13
            }
            break;
    96e4:	02 c0       	rjmp	.+4      	; 0x96ea <ld_make_slave_response_pdu+0x2da>
                            break;
                        }
                    }
                }
            }
            break;
    96e6:	00 00       	nop
    96e8:	01 c0       	rjmp	.+2      	; 0x96ec <ld_make_slave_response_pdu+0x2dc>
                lin_tl_pdu[1] = PCI_RES_ASSIGN_FRAME_ID_RANGE;
                lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
                lin_tl_pdu[3] = 0xFFU;
                lin_tl_pdu[4] = 0xFFU;
            }
            break;
    96ea:	00 00       	nop
            /* do nothing */
            break;
        } /* end of switch statement */

        /* Put lin_tl_pdu data into transmit queue*/
        ld_put_raw(iii, lin_tl_pdu);
    96ec:	ce 01       	movw	r24, r28
    96ee:	0f 96       	adiw	r24, 0x0f	; 15
    96f0:	bc 01       	movw	r22, r24
    96f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    96f4:	0e 94 21 52 	call	0xa442	; 0xa442 <ld_put_raw>
        tl_desc_ptr->diag_state = LD_DIAG_TX_PHY;
    96f8:	8a 81       	ldd	r24, Y+2	; 0x02
    96fa:	9b 81       	ldd	r25, Y+3	; 0x03
    96fc:	22 e0       	ldi	r18, 0x02	; 2
    96fe:	fc 01       	movw	r30, r24
    9700:	26 a3       	std	Z+38, r18	; 0x26
    }
    else
    {
        tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    }
}
    9702:	05 c0       	rjmp	.+10     	; 0x970e <ld_make_slave_response_pdu+0x2fe>
        ld_put_raw(iii, lin_tl_pdu);
        tl_desc_ptr->diag_state = LD_DIAG_TX_PHY;
    }
    else
    {
        tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    9704:	8a 81       	ldd	r24, Y+2	; 0x02
    9706:	9b 81       	ldd	r25, Y+3	; 0x03
    9708:	21 e0       	ldi	r18, 0x01	; 1
    970a:	fc 01       	movw	r30, r24
    970c:	26 a3       	std	Z+38, r18	; 0x26
    }
}
    970e:	00 00       	nop
    9710:	6f 96       	adiw	r28, 0x1f	; 31
    9712:	cd bf       	out	0x3d, r28	; 61
    9714:	de bf       	out	0x3e, r29	; 62
    9716:	df 91       	pop	r29
    9718:	cf 91       	pop	r28
    971a:	08 95       	ret

0000971c <lin_calc_max_header_timeout_cnt>:

    /* Call function LIN_DRV_DisableIRQ to disable interrupts */
    retVal = LIN_DRV_DisableIRQ(lin_hardware_instance);

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
}
    971c:	cf 93       	push	r28
    971e:	df 93       	push	r29
    9720:	00 d0       	rcall	.+0      	; 0x9722 <lin_calc_max_header_timeout_cnt+0x6>
    9722:	00 d0       	rcall	.+0      	; 0x9724 <lin_calc_max_header_timeout_cnt+0x8>
    9724:	cd b7       	in	r28, 0x3d	; 61
    9726:	de b7       	in	r29, 0x3e	; 62
    9728:	69 83       	std	Y+1, r22	; 0x01
    972a:	7a 83       	std	Y+2, r23	; 0x02
    972c:	8b 83       	std	Y+3, r24	; 0x03
    972e:	9c 83       	std	Y+4, r25	; 0x04
    9730:	29 81       	ldd	r18, Y+1	; 0x01
    9732:	3a 81       	ldd	r19, Y+2	; 0x02
    9734:	4b 81       	ldd	r20, Y+3	; 0x03
    9736:	5c 81       	ldd	r21, Y+4	; 0x04
    9738:	88 ee       	ldi	r24, 0xE8	; 232
    973a:	93 e0       	ldi	r25, 0x03	; 3
    973c:	dc 01       	movw	r26, r24
    973e:	0e 94 27 7d 	call	0xfa4e	; 0xfa4e <__muluhisi3>
    9742:	9b 01       	movw	r18, r22
    9744:	ac 01       	movw	r20, r24
    9746:	80 e8       	ldi	r24, 0x80	; 128
    9748:	91 e5       	ldi	r25, 0x51	; 81
    974a:	a6 ed       	ldi	r26, 0xD6	; 214
    974c:	b2 e0       	ldi	r27, 0x02	; 2
    974e:	bc 01       	movw	r22, r24
    9750:	cd 01       	movw	r24, r26
    9752:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <__udivmodsi4>
    9756:	da 01       	movw	r26, r20
    9758:	c9 01       	movw	r24, r18
    975a:	01 96       	adiw	r24, 0x01	; 1
    975c:	24 96       	adiw	r28, 0x04	; 4
    975e:	cd bf       	out	0x3d, r28	; 61
    9760:	de bf       	out	0x3e, r29	; 62
    9762:	df 91       	pop	r29
    9764:	cf 91       	pop	r28
    9766:	08 95       	ret

00009768 <lin_calc_max_res_timeout_cnt>:
    9768:	ef 92       	push	r14
    976a:	ff 92       	push	r15
    976c:	0f 93       	push	r16
    976e:	1f 93       	push	r17
    9770:	cf 93       	push	r28
    9772:	df 93       	push	r29
    9774:	cd b7       	in	r28, 0x3d	; 61
    9776:	de b7       	in	r29, 0x3e	; 62
    9778:	27 97       	sbiw	r28, 0x07	; 7
    977a:	cd bf       	out	0x3d, r28	; 61
    977c:	de bf       	out	0x3e, r29	; 62
    977e:	6b 83       	std	Y+3, r22	; 0x03
    9780:	7c 83       	std	Y+4, r23	; 0x04
    9782:	8d 83       	std	Y+5, r24	; 0x05
    9784:	9e 83       	std	Y+6, r25	; 0x06
    9786:	4f 83       	std	Y+7, r20	; 0x07
    9788:	8f 81       	ldd	r24, Y+7	; 0x07
    978a:	88 2f       	mov	r24, r24
    978c:	90 e0       	ldi	r25, 0x00	; 0
    978e:	01 96       	adiw	r24, 0x01	; 1
    9790:	88 0f       	add	r24, r24
    9792:	99 1f       	adc	r25, r25
    9794:	9c 01       	movw	r18, r24
    9796:	22 0f       	add	r18, r18
    9798:	33 1f       	adc	r19, r19
    979a:	22 0f       	add	r18, r18
    979c:	33 1f       	adc	r19, r19
    979e:	22 0f       	add	r18, r18
    97a0:	33 1f       	adc	r19, r19
    97a2:	a9 01       	movw	r20, r18
    97a4:	48 1b       	sub	r20, r24
    97a6:	59 0b       	sbc	r21, r25
    97a8:	ca 01       	movw	r24, r20
    97aa:	89 83       	std	Y+1, r24	; 0x01
    97ac:	9a 83       	std	Y+2, r25	; 0x02
    97ae:	89 81       	ldd	r24, Y+1	; 0x01
    97b0:	9a 81       	ldd	r25, Y+2	; 0x02
    97b2:	cc 01       	movw	r24, r24
    97b4:	a0 e0       	ldi	r26, 0x00	; 0
    97b6:	b0 e0       	ldi	r27, 0x00	; 0
    97b8:	9c 01       	movw	r18, r24
    97ba:	ad 01       	movw	r20, r26
    97bc:	60 e4       	ldi	r22, 0x40	; 64
    97be:	72 e4       	ldi	r23, 0x42	; 66
    97c0:	8f e0       	ldi	r24, 0x0F	; 15
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	0e 94 dd 7c 	call	0xf9ba	; 0xf9ba <__mulsi3>
    97c8:	7b 01       	movw	r14, r22
    97ca:	8c 01       	movw	r16, r24
    97cc:	2b 81       	ldd	r18, Y+3	; 0x03
    97ce:	3c 81       	ldd	r19, Y+4	; 0x04
    97d0:	4d 81       	ldd	r20, Y+5	; 0x05
    97d2:	5e 81       	ldd	r21, Y+6	; 0x06
    97d4:	88 ee       	ldi	r24, 0xE8	; 232
    97d6:	93 e0       	ldi	r25, 0x03	; 3
    97d8:	dc 01       	movw	r26, r24
    97da:	0e 94 27 7d 	call	0xfa4e	; 0xfa4e <__muluhisi3>
    97de:	9b 01       	movw	r18, r22
    97e0:	ac 01       	movw	r20, r24
    97e2:	c8 01       	movw	r24, r16
    97e4:	b7 01       	movw	r22, r14
    97e6:	0e 94 ed 7c 	call	0xf9da	; 0xf9da <__udivmodsi4>
    97ea:	da 01       	movw	r26, r20
    97ec:	c9 01       	movw	r24, r18
    97ee:	01 96       	adiw	r24, 0x01	; 1
    97f0:	27 96       	adiw	r28, 0x07	; 7
    97f2:	cd bf       	out	0x3d, r28	; 61
    97f4:	de bf       	out	0x3e, r29	; 62
    97f6:	df 91       	pop	r29
    97f8:	cf 91       	pop	r28
    97fa:	1f 91       	pop	r17
    97fc:	0f 91       	pop	r16
    97fe:	ff 90       	pop	r15
    9800:	ef 90       	pop	r14
    9802:	08 95       	ret

00009804 <lin_process_parity>:
    9804:	cf 93       	push	r28
    9806:	df 93       	push	r29
    9808:	00 d0       	rcall	.+0      	; 0x980a <lin_process_parity+0x6>
    980a:	cd b7       	in	r28, 0x3d	; 61
    980c:	de b7       	in	r29, 0x3e	; 62
    980e:	89 83       	std	Y+1, r24	; 0x01
    9810:	6a 83       	std	Y+2, r22	; 0x02
    9812:	6a 81       	ldd	r22, Y+2	; 0x02
    9814:	89 81       	ldd	r24, Y+1	; 0x01
    9816:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <LIN_DRV_ProcessParity>
    981a:	0f 90       	pop	r0
    981c:	0f 90       	pop	r0
    981e:	df 91       	pop	r29
    9820:	cf 91       	pop	r28
    9822:	08 95       	ret

00009824 <lin_lld_init>:
    9824:	ef 92       	push	r14
    9826:	ff 92       	push	r15
    9828:	0f 93       	push	r16
    982a:	1f 93       	push	r17
    982c:	cf 93       	push	r28
    982e:	df 93       	push	r29
    9830:	cd b7       	in	r28, 0x3d	; 61
    9832:	de b7       	in	r29, 0x3e	; 62
    9834:	2c 97       	sbiw	r28, 0x0c	; 12
    9836:	cd bf       	out	0x3d, r28	; 61
    9838:	de bf       	out	0x3e, r29	; 62
    983a:	8c 87       	std	Y+12, r24	; 0x0c
    983c:	81 e0       	ldi	r24, 0x01	; 1
    983e:	90 e0       	ldi	r25, 0x00	; 0
    9840:	8a 83       	std	Y+2, r24	; 0x02
    9842:	9b 83       	std	Y+3, r25	; 0x03
    9844:	8c 85       	ldd	r24, Y+12	; 0x0c
    9846:	28 2f       	mov	r18, r24
    9848:	30 e0       	ldi	r19, 0x00	; 0
    984a:	4c e1       	ldi	r20, 0x1C	; 28
    984c:	42 9f       	mul	r20, r18
    984e:	c0 01       	movw	r24, r0
    9850:	43 9f       	mul	r20, r19
    9852:	90 0d       	add	r25, r0
    9854:	11 24       	eor	r1, r1
    9856:	86 56       	subi	r24, 0x66	; 102
    9858:	9d 4b       	sbci	r25, 0xBD	; 189
    985a:	8c 83       	std	Y+4, r24	; 0x04
    985c:	9d 83       	std	Y+5, r25	; 0x05
    985e:	8c 85       	ldd	r24, Y+12	; 0x0c
    9860:	28 2f       	mov	r18, r24
    9862:	30 e0       	ldi	r19, 0x00	; 0
    9864:	46 e1       	ldi	r20, 0x16	; 22
    9866:	42 9f       	mul	r20, r18
    9868:	c0 01       	movw	r24, r0
    986a:	43 9f       	mul	r20, r19
    986c:	90 0d       	add	r25, r0
    986e:	11 24       	eor	r1, r1
    9870:	8f 55       	subi	r24, 0x5F	; 95
    9872:	99 4b       	sbci	r25, 0xB9	; 185
    9874:	8e 83       	std	Y+6, r24	; 0x06
    9876:	9f 83       	std	Y+7, r25	; 0x07
    9878:	8c 85       	ldd	r24, Y+12	; 0x0c
    987a:	88 2f       	mov	r24, r24
    987c:	90 e0       	ldi	r25, 0x00	; 0
    987e:	88 0f       	add	r24, r24
    9880:	99 1f       	adc	r25, r25
    9882:	9c 01       	movw	r18, r24
    9884:	22 0f       	add	r18, r18
    9886:	33 1f       	adc	r19, r19
    9888:	22 0f       	add	r18, r18
    988a:	33 1f       	adc	r19, r19
    988c:	82 0f       	add	r24, r18
    988e:	93 1f       	adc	r25, r19
    9890:	9c 01       	movw	r18, r24
    9892:	2d 5b       	subi	r18, 0xBD	; 189
    9894:	3a 4b       	sbci	r19, 0xBA	; 186
    9896:	8e 81       	ldd	r24, Y+6	; 0x06
    9898:	9f 81       	ldd	r25, Y+7	; 0x07
    989a:	fc 01       	movw	r30, r24
    989c:	22 83       	std	Z+2, r18	; 0x02
    989e:	33 83       	std	Z+3, r19	; 0x03
    98a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    98a2:	88 2f       	mov	r24, r24
    98a4:	90 e0       	ldi	r25, 0x00	; 0
    98a6:	88 0f       	add	r24, r24
    98a8:	99 1f       	adc	r25, r25
    98aa:	88 0f       	add	r24, r24
    98ac:	99 1f       	adc	r25, r25
    98ae:	86 5c       	subi	r24, 0xC6	; 198
    98b0:	9d 4b       	sbci	r25, 0xBD	; 189
    98b2:	fc 01       	movw	r30, r24
    98b4:	80 81       	ld	r24, Z
    98b6:	91 81       	ldd	r25, Z+1	; 0x01
    98b8:	a2 81       	ldd	r26, Z+2	; 0x02
    98ba:	b3 81       	ldd	r27, Z+3	; 0x03
    98bc:	88 87       	std	Y+8, r24	; 0x08
    98be:	99 87       	std	Y+9, r25	; 0x09
    98c0:	aa 87       	std	Y+10, r26	; 0x0a
    98c2:	bb 87       	std	Y+11, r27	; 0x0b
    98c4:	8c 81       	ldd	r24, Y+4	; 0x04
    98c6:	9d 81       	ldd	r25, Y+5	; 0x05
    98c8:	fc 01       	movw	r30, r24
    98ca:	84 89       	ldd	r24, Z+20	; 0x14
    98cc:	95 89       	ldd	r25, Z+21	; 0x15
    98ce:	fc 01       	movw	r30, r24
    98d0:	85 81       	ldd	r24, Z+5	; 0x05
    98d2:	88 23       	and	r24, r24
    98d4:	e9 f1       	breq	.+122    	; 0x9950 <lin_lld_init+0x12c>
    98d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    98d8:	08 2f       	mov	r16, r24
    98da:	10 e0       	ldi	r17, 0x00	; 0
    98dc:	60 e6       	ldi	r22, 0x60	; 96
    98de:	79 e0       	ldi	r23, 0x09	; 9
    98e0:	80 e0       	ldi	r24, 0x00	; 0
    98e2:	90 e0       	ldi	r25, 0x00	; 0
    98e4:	0e 94 8e 4b 	call	0x971c	; 0x971c <lin_calc_max_header_timeout_cnt>
    98e8:	9c 01       	movw	r18, r24
    98ea:	c8 01       	movw	r24, r16
    98ec:	88 0f       	add	r24, r24
    98ee:	99 1f       	adc	r25, r25
    98f0:	80 5d       	subi	r24, 0xD0	; 208
    98f2:	9a 4b       	sbci	r25, 0xBA	; 186
    98f4:	fc 01       	movw	r30, r24
    98f6:	20 83       	st	Z, r18
    98f8:	31 83       	std	Z+1, r19	; 0x01
    98fa:	81 e0       	ldi	r24, 0x01	; 1
    98fc:	89 83       	std	Y+1, r24	; 0x01
    98fe:	24 c0       	rjmp	.+72     	; 0x9948 <lin_lld_init+0x124>
    9900:	8c 85       	ldd	r24, Y+12	; 0x0c
    9902:	e8 2e       	mov	r14, r24
    9904:	f1 2c       	mov	r15, r1
    9906:	89 81       	ldd	r24, Y+1	; 0x01
    9908:	88 2f       	mov	r24, r24
    990a:	90 e0       	ldi	r25, 0x00	; 0
    990c:	8c 01       	movw	r16, r24
    990e:	01 50       	subi	r16, 0x01	; 1
    9910:	11 09       	sbc	r17, r1
    9912:	49 81       	ldd	r20, Y+1	; 0x01
    9914:	60 e6       	ldi	r22, 0x60	; 96
    9916:	79 e0       	ldi	r23, 0x09	; 9
    9918:	80 e0       	ldi	r24, 0x00	; 0
    991a:	90 e0       	ldi	r25, 0x00	; 0
    991c:	0e 94 b4 4b 	call	0x9768	; 0x9768 <lin_calc_max_res_timeout_cnt>
    9920:	9c 01       	movw	r18, r24
    9922:	c7 01       	movw	r24, r14
    9924:	88 0f       	add	r24, r24
    9926:	99 1f       	adc	r25, r25
    9928:	88 0f       	add	r24, r24
    992a:	99 1f       	adc	r25, r25
    992c:	88 0f       	add	r24, r24
    992e:	99 1f       	adc	r25, r25
    9930:	80 0f       	add	r24, r16
    9932:	91 1f       	adc	r25, r17
    9934:	88 0f       	add	r24, r24
    9936:	99 1f       	adc	r25, r25
    9938:	8e 5c       	subi	r24, 0xCE	; 206
    993a:	9a 4b       	sbci	r25, 0xBA	; 186
    993c:	fc 01       	movw	r30, r24
    993e:	20 83       	st	Z, r18
    9940:	31 83       	std	Z+1, r19	; 0x01
    9942:	89 81       	ldd	r24, Y+1	; 0x01
    9944:	8f 5f       	subi	r24, 0xFF	; 255
    9946:	89 83       	std	Y+1, r24	; 0x01
    9948:	89 81       	ldd	r24, Y+1	; 0x01
    994a:	89 30       	cpi	r24, 0x09	; 9
    994c:	c8 f2       	brcs	.-78     	; 0x9900 <lin_lld_init+0xdc>
    994e:	4c c0       	rjmp	.+152    	; 0x99e8 <lin_lld_init+0x1c4>
    9950:	8c 85       	ldd	r24, Y+12	; 0x0c
    9952:	08 2f       	mov	r16, r24
    9954:	10 e0       	ldi	r17, 0x00	; 0
    9956:	8c 81       	ldd	r24, Y+4	; 0x04
    9958:	9d 81       	ldd	r25, Y+5	; 0x05
    995a:	fc 01       	movw	r30, r24
    995c:	84 89       	ldd	r24, Z+20	; 0x14
    995e:	95 89       	ldd	r25, Z+21	; 0x15
    9960:	fc 01       	movw	r30, r24
    9962:	80 81       	ld	r24, Z
    9964:	91 81       	ldd	r25, Z+1	; 0x01
    9966:	a2 81       	ldd	r26, Z+2	; 0x02
    9968:	b3 81       	ldd	r27, Z+3	; 0x03
    996a:	bc 01       	movw	r22, r24
    996c:	cd 01       	movw	r24, r26
    996e:	0e 94 8e 4b 	call	0x971c	; 0x971c <lin_calc_max_header_timeout_cnt>
    9972:	9c 01       	movw	r18, r24
    9974:	c8 01       	movw	r24, r16
    9976:	88 0f       	add	r24, r24
    9978:	99 1f       	adc	r25, r25
    997a:	80 5d       	subi	r24, 0xD0	; 208
    997c:	9a 4b       	sbci	r25, 0xBA	; 186
    997e:	fc 01       	movw	r30, r24
    9980:	20 83       	st	Z, r18
    9982:	31 83       	std	Z+1, r19	; 0x01
    9984:	81 e0       	ldi	r24, 0x01	; 1
    9986:	89 83       	std	Y+1, r24	; 0x01
    9988:	2c c0       	rjmp	.+88     	; 0x99e2 <lin_lld_init+0x1be>
    998a:	8c 85       	ldd	r24, Y+12	; 0x0c
    998c:	e8 2e       	mov	r14, r24
    998e:	f1 2c       	mov	r15, r1
    9990:	89 81       	ldd	r24, Y+1	; 0x01
    9992:	88 2f       	mov	r24, r24
    9994:	90 e0       	ldi	r25, 0x00	; 0
    9996:	8c 01       	movw	r16, r24
    9998:	01 50       	subi	r16, 0x01	; 1
    999a:	11 09       	sbc	r17, r1
    999c:	8c 81       	ldd	r24, Y+4	; 0x04
    999e:	9d 81       	ldd	r25, Y+5	; 0x05
    99a0:	fc 01       	movw	r30, r24
    99a2:	84 89       	ldd	r24, Z+20	; 0x14
    99a4:	95 89       	ldd	r25, Z+21	; 0x15
    99a6:	fc 01       	movw	r30, r24
    99a8:	80 81       	ld	r24, Z
    99aa:	91 81       	ldd	r25, Z+1	; 0x01
    99ac:	a2 81       	ldd	r26, Z+2	; 0x02
    99ae:	b3 81       	ldd	r27, Z+3	; 0x03
    99b0:	49 81       	ldd	r20, Y+1	; 0x01
    99b2:	bc 01       	movw	r22, r24
    99b4:	cd 01       	movw	r24, r26
    99b6:	0e 94 b4 4b 	call	0x9768	; 0x9768 <lin_calc_max_res_timeout_cnt>
    99ba:	9c 01       	movw	r18, r24
    99bc:	c7 01       	movw	r24, r14
    99be:	88 0f       	add	r24, r24
    99c0:	99 1f       	adc	r25, r25
    99c2:	88 0f       	add	r24, r24
    99c4:	99 1f       	adc	r25, r25
    99c6:	88 0f       	add	r24, r24
    99c8:	99 1f       	adc	r25, r25
    99ca:	80 0f       	add	r24, r16
    99cc:	91 1f       	adc	r25, r17
    99ce:	88 0f       	add	r24, r24
    99d0:	99 1f       	adc	r25, r25
    99d2:	8e 5c       	subi	r24, 0xCE	; 206
    99d4:	9a 4b       	sbci	r25, 0xBA	; 186
    99d6:	fc 01       	movw	r30, r24
    99d8:	20 83       	st	Z, r18
    99da:	31 83       	std	Z+1, r19	; 0x01
    99dc:	89 81       	ldd	r24, Y+1	; 0x01
    99de:	8f 5f       	subi	r24, 0xFF	; 255
    99e0:	89 83       	std	Y+1, r24	; 0x01
    99e2:	89 81       	ldd	r24, Y+1	; 0x01
    99e4:	89 30       	cpi	r24, 0x09	; 9
    99e6:	88 f2       	brcs	.-94     	; 0x998a <lin_lld_init+0x166>
    99e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    99ea:	88 2f       	mov	r24, r24
    99ec:	90 e0       	ldi	r25, 0x00	; 0
    99ee:	82 95       	swap	r24
    99f0:	92 95       	swap	r25
    99f2:	90 7f       	andi	r25, 0xF0	; 240
    99f4:	98 27       	eor	r25, r24
    99f6:	80 7f       	andi	r24, 0xF0	; 240
    99f8:	98 27       	eor	r25, r24
    99fa:	80 5c       	subi	r24, 0xC0	; 192
    99fc:	9a 4b       	sbci	r25, 0xBA	; 186
    99fe:	fc 01       	movw	r30, r24
    9a00:	20 81       	ld	r18, Z
    9a02:	31 81       	ldd	r19, Z+1	; 0x01
    9a04:	8e 81       	ldd	r24, Y+6	; 0x06
    9a06:	9f 81       	ldd	r25, Y+7	; 0x07
    9a08:	fc 01       	movw	r30, r24
    9a0a:	21 8b       	std	Z+17, r18	; 0x11
    9a0c:	32 8b       	std	Z+18, r19	; 0x12
    9a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    9a10:	9d 81       	ldd	r25, Y+5	; 0x05
    9a12:	fc 01       	movw	r30, r24
    9a14:	24 85       	ldd	r18, Z+12	; 0x0c
    9a16:	35 85       	ldd	r19, Z+13	; 0x0d
    9a18:	8e 81       	ldd	r24, Y+6	; 0x06
    9a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    9a1c:	fc 01       	movw	r30, r24
    9a1e:	23 8b       	std	Z+19, r18	; 0x13
    9a20:	34 8b       	std	Z+20, r19	; 0x14
    9a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    9a24:	28 2f       	mov	r18, r24
    9a26:	30 e0       	ldi	r19, 0x00	; 0
    9a28:	4e e1       	ldi	r20, 0x1E	; 30
    9a2a:	42 9f       	mul	r20, r18
    9a2c:	c0 01       	movw	r24, r0
    9a2e:	43 9f       	mul	r20, r19
    9a30:	90 0d       	add	r25, r0
    9a32:	11 24       	eor	r1, r1
    9a34:	9c 01       	movw	r18, r24
    9a36:	2e 5e       	subi	r18, 0xEE	; 238
    9a38:	3a 4b       	sbci	r19, 0xBA	; 186
    9a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    9a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    9a3e:	fc 01       	movw	r30, r24
    9a40:	44 89       	ldd	r20, Z+20	; 0x14
    9a42:	55 89       	ldd	r21, Z+21	; 0x15
    9a44:	88 85       	ldd	r24, Y+8	; 0x08
    9a46:	99 85       	ldd	r25, Y+9	; 0x09
    9a48:	aa 85       	ldd	r26, Y+10	; 0x0a
    9a4a:	bb 85       	ldd	r27, Y+11	; 0x0b
    9a4c:	bc 01       	movw	r22, r24
    9a4e:	cd 01       	movw	r24, r26
    9a50:	0e 94 7d 5d 	call	0xbafa	; 0xbafa <LIN_DRV_Init>
    9a54:	8a 83       	std	Y+2, r24	; 0x02
    9a56:	9b 83       	std	Y+3, r25	; 0x03
    9a58:	8a 81       	ldd	r24, Y+2	; 0x02
    9a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    9a5c:	89 2b       	or	r24, r25
    9a5e:	89 f4       	brne	.+34     	; 0x9a82 <lin_lld_init+0x25e>
    9a60:	88 85       	ldd	r24, Y+8	; 0x08
    9a62:	99 85       	ldd	r25, Y+9	; 0x09
    9a64:	aa 85       	ldd	r26, Y+10	; 0x0a
    9a66:	bb 85       	ldd	r27, Y+11	; 0x0b
    9a68:	46 ef       	ldi	r20, 0xF6	; 246
    9a6a:	5f e4       	ldi	r21, 0x4F	; 79
    9a6c:	bc 01       	movw	r22, r24
    9a6e:	cd 01       	movw	r24, r26
    9a70:	0e 94 59 5e 	call	0xbcb2	; 0xbcb2 <LIN_DRV_InstallCallback>
    9a74:	8c 85       	ldd	r24, Y+12	; 0x0c
    9a76:	88 2f       	mov	r24, r24
    9a78:	90 e0       	ldi	r25, 0x00	; 0
    9a7a:	8e 5b       	subi	r24, 0xBE	; 190
    9a7c:	9a 4b       	sbci	r25, 0xBA	; 186
    9a7e:	fc 01       	movw	r30, r24
    9a80:	10 82       	st	Z, r1
    9a82:	21 e0       	ldi	r18, 0x01	; 1
    9a84:	8a 81       	ldd	r24, Y+2	; 0x02
    9a86:	9b 81       	ldd	r25, Y+3	; 0x03
    9a88:	89 2b       	or	r24, r25
    9a8a:	09 f4       	brne	.+2      	; 0x9a8e <lin_lld_init+0x26a>
    9a8c:	20 e0       	ldi	r18, 0x00	; 0
    9a8e:	82 2f       	mov	r24, r18
    9a90:	2c 96       	adiw	r28, 0x0c	; 12
    9a92:	cd bf       	out	0x3d, r28	; 61
    9a94:	de bf       	out	0x3e, r29	; 62
    9a96:	df 91       	pop	r29
    9a98:	cf 91       	pop	r28
    9a9a:	1f 91       	pop	r17
    9a9c:	0f 91       	pop	r16
    9a9e:	ff 90       	pop	r15
    9aa0:	ef 90       	pop	r14
    9aa2:	08 95       	ret

00009aa4 <lin_lld_ignore_response>:
 * Description   : This function terminates an on-going data transmission/reception.
 *
 * Implements    : lin_lld_ignore_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_ignore_response(l_ifc_handle iii)
{
    9aa4:	cf 93       	push	r28
    9aa6:	df 93       	push	r29
    9aa8:	cd b7       	in	r28, 0x3d	; 61
    9aaa:	de b7       	in	r29, 0x3e	; 62
    9aac:	27 97       	sbiw	r28, 0x07	; 7
    9aae:	cd bf       	out	0x3d, r28	; 61
    9ab0:	de bf       	out	0x3e, r29	; 62
    9ab2:	8f 83       	std	Y+7, r24	; 0x07
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    9ab4:	81 e0       	ldi	r24, 0x01	; 1
    9ab6:	90 e0       	ldi	r25, 0x00	; 0
    9ab8:	89 83       	std	Y+1, r24	; 0x01
    9aba:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    9abc:	8f 81       	ldd	r24, Y+7	; 0x07
    9abe:	88 2f       	mov	r24, r24
    9ac0:	90 e0       	ldi	r25, 0x00	; 0
    9ac2:	88 0f       	add	r24, r24
    9ac4:	99 1f       	adc	r25, r25
    9ac6:	88 0f       	add	r24, r24
    9ac8:	99 1f       	adc	r25, r25
    9aca:	86 5c       	subi	r24, 0xC6	; 198
    9acc:	9d 4b       	sbci	r25, 0xBD	; 189
    9ace:	fc 01       	movw	r30, r24
    9ad0:	80 81       	ld	r24, Z
    9ad2:	91 81       	ldd	r25, Z+1	; 0x01
    9ad4:	a2 81       	ldd	r26, Z+2	; 0x02
    9ad6:	b3 81       	ldd	r27, Z+3	; 0x03
    9ad8:	8b 83       	std	Y+3, r24	; 0x03
    9ada:	9c 83       	std	Y+4, r25	; 0x04
    9adc:	ad 83       	std	Y+5, r26	; 0x05
    9ade:	be 83       	std	Y+6, r27	; 0x06

    /* Abort frame data transferring */
    retVal = LIN_DRV_AbortTransferData(lin_hardware_instance);
    9ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    9ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    9ae4:	ad 81       	ldd	r26, Y+5	; 0x05
    9ae6:	be 81       	ldd	r27, Y+6	; 0x06
    9ae8:	bc 01       	movw	r22, r24
    9aea:	cd 01       	movw	r24, r26
    9aec:	0e 94 29 5e 	call	0xbc52	; 0xbc52 <LIN_DRV_AbortTransferData>
    9af0:	89 83       	std	Y+1, r24	; 0x01
    9af2:	9a 83       	std	Y+2, r25	; 0x02

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    9af4:	89 81       	ldd	r24, Y+1	; 0x01
    9af6:	9a 81       	ldd	r25, Y+2	; 0x02
    9af8:	89 2b       	or	r24, r25
    9afa:	11 f4       	brne	.+4      	; 0x9b00 <lin_lld_ignore_response+0x5c>
    9afc:	80 e0       	ldi	r24, 0x00	; 0
    9afe:	01 c0       	rjmp	.+2      	; 0x9b02 <lin_lld_ignore_response+0x5e>
    9b00:	8f ef       	ldi	r24, 0xFF	; 255
}
    9b02:	27 96       	adiw	r28, 0x07	; 7
    9b04:	cd bf       	out	0x3d, r28	; 61
    9b06:	de bf       	out	0x3e, r29	; 62
    9b08:	df 91       	pop	r29
    9b0a:	cf 91       	pop	r28
    9b0c:	08 95       	ret

00009b0e <lin_lld_set_low_power_mode>:
 * Description   : This function puts current node to sleep mode.
 *
 * Implements    : lin_lld_set_low_power_mode_Activity
 *END**************************************************************************/
l_u8 lin_lld_set_low_power_mode(l_ifc_handle iii)
{
    9b0e:	cf 93       	push	r28
    9b10:	df 93       	push	r29
    9b12:	cd b7       	in	r28, 0x3d	; 61
    9b14:	de b7       	in	r29, 0x3e	; 62
    9b16:	27 97       	sbiw	r28, 0x07	; 7
    9b18:	cd bf       	out	0x3d, r28	; 61
    9b1a:	de bf       	out	0x3e, r29	; 62
    9b1c:	8f 83       	std	Y+7, r24	; 0x07
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    9b1e:	81 e0       	ldi	r24, 0x01	; 1
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	89 83       	std	Y+1, r24	; 0x01
    9b24:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    9b26:	8f 81       	ldd	r24, Y+7	; 0x07
    9b28:	88 2f       	mov	r24, r24
    9b2a:	90 e0       	ldi	r25, 0x00	; 0
    9b2c:	88 0f       	add	r24, r24
    9b2e:	99 1f       	adc	r25, r25
    9b30:	88 0f       	add	r24, r24
    9b32:	99 1f       	adc	r25, r25
    9b34:	86 5c       	subi	r24, 0xC6	; 198
    9b36:	9d 4b       	sbci	r25, 0xBD	; 189
    9b38:	fc 01       	movw	r30, r24
    9b3a:	80 81       	ld	r24, Z
    9b3c:	91 81       	ldd	r25, Z+1	; 0x01
    9b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    9b40:	b3 81       	ldd	r27, Z+3	; 0x03
    9b42:	8b 83       	std	Y+3, r24	; 0x03
    9b44:	9c 83       	std	Y+4, r25	; 0x04
    9b46:	ad 83       	std	Y+5, r26	; 0x05
    9b48:	be 83       	std	Y+6, r27	; 0x06

    /* Put current node to sleep mode */
    retVal = LIN_DRV_GoToSleepMode(lin_hardware_instance);
    9b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    9b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    9b4e:	ad 81       	ldd	r26, Y+5	; 0x05
    9b50:	be 81       	ldd	r27, Y+6	; 0x06
    9b52:	bc 01       	movw	r22, r24
    9b54:	cd 01       	movw	r24, r26
    9b56:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <LIN_DRV_GoToSleepMode>
    9b5a:	89 83       	std	Y+1, r24	; 0x01
    9b5c:	9a 83       	std	Y+2, r25	; 0x02

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    9b5e:	89 81       	ldd	r24, Y+1	; 0x01
    9b60:	9a 81       	ldd	r25, Y+2	; 0x02
    9b62:	89 2b       	or	r24, r25
    9b64:	11 f4       	brne	.+4      	; 0x9b6a <lin_lld_set_low_power_mode+0x5c>
    9b66:	80 e0       	ldi	r24, 0x00	; 0
    9b68:	01 c0       	rjmp	.+2      	; 0x9b6c <lin_lld_set_low_power_mode+0x5e>
    9b6a:	8f ef       	ldi	r24, 0xFF	; 255
}
    9b6c:	27 96       	adiw	r28, 0x07	; 7
    9b6e:	cd bf       	out	0x3d, r28	; 61
    9b70:	de bf       	out	0x3e, r29	; 62
    9b72:	df 91       	pop	r29
    9b74:	cf 91       	pop	r28
    9b76:	08 95       	ret

00009b78 <lin_lld_set_response>:
 *
 * Implements    : lin_lld_set_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_set_response(l_ifc_handle iii,
                          l_u8 response_length)
{
    9b78:	cf 93       	push	r28
    9b7a:	df 93       	push	r29
    9b7c:	cd b7       	in	r28, 0x3d	; 61
    9b7e:	de b7       	in	r29, 0x3e	; 62
    9b80:	2a 97       	sbiw	r28, 0x0a	; 10
    9b82:	cd bf       	out	0x3d, r28	; 61
    9b84:	de bf       	out	0x3e, r29	; 62
    9b86:	89 87       	std	Y+9, r24	; 0x09
    9b88:	6a 87       	std	Y+10, r22	; 0x0a
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    9b8a:	81 e0       	ldi	r24, 0x01	; 1
    9b8c:	90 e0       	ldi	r25, 0x00	; 0
    9b8e:	89 83       	std	Y+1, r24	; 0x01
    9b90:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * buffer;

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    9b92:	8a 85       	ldd	r24, Y+10	; 0x0a
    9b94:	89 30       	cpi	r24, 0x09	; 9
    9b96:	08 f0       	brcs	.+2      	; 0x9b9a <lin_lld_set_response+0x22>
    9b98:	62 c0       	rjmp	.+196    	; 0x9c5e <lin_lld_set_response+0xe6>
    9b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    9b9c:	88 23       	and	r24, r24
    9b9e:	09 f4       	brne	.+2      	; 0x9ba2 <lin_lld_set_response+0x2a>
    9ba0:	5e c0       	rjmp	.+188    	; 0x9c5e <lin_lld_set_response+0xe6>
    {
        buffer = g_lin_protocol_state_array[iii].response_buffer_ptr;
    9ba2:	89 85       	ldd	r24, Y+9	; 0x09
    9ba4:	28 2f       	mov	r18, r24
    9ba6:	30 e0       	ldi	r19, 0x00	; 0
    9ba8:	46 e1       	ldi	r20, 0x16	; 22
    9baa:	42 9f       	mul	r20, r18
    9bac:	c0 01       	movw	r24, r0
    9bae:	43 9f       	mul	r20, r19
    9bb0:	90 0d       	add	r25, r0
    9bb2:	11 24       	eor	r1, r1
    9bb4:	8d 55       	subi	r24, 0x5D	; 93
    9bb6:	99 4b       	sbci	r25, 0xB9	; 185
    9bb8:	fc 01       	movw	r30, r24
    9bba:	80 81       	ld	r24, Z
    9bbc:	91 81       	ldd	r25, Z+1	; 0x01
    9bbe:	8b 83       	std	Y+3, r24	; 0x03
    9bc0:	9c 83       	std	Y+4, r25	; 0x04
        /* Get the LIN hardware instance number */
        lin_hardware_instance = g_lin_virtual_ifc[iii];
    9bc2:	89 85       	ldd	r24, Y+9	; 0x09
    9bc4:	88 2f       	mov	r24, r24
    9bc6:	90 e0       	ldi	r25, 0x00	; 0
    9bc8:	88 0f       	add	r24, r24
    9bca:	99 1f       	adc	r25, r25
    9bcc:	88 0f       	add	r24, r24
    9bce:	99 1f       	adc	r25, r25
    9bd0:	86 5c       	subi	r24, 0xC6	; 198
    9bd2:	9d 4b       	sbci	r25, 0xBD	; 189
    9bd4:	fc 01       	movw	r30, r24
    9bd6:	80 81       	ld	r24, Z
    9bd8:	91 81       	ldd	r25, Z+1	; 0x01
    9bda:	a2 81       	ldd	r26, Z+2	; 0x02
    9bdc:	b3 81       	ldd	r27, Z+3	; 0x03
    9bde:	8d 83       	std	Y+5, r24	; 0x05
    9be0:	9e 83       	std	Y+6, r25	; 0x06
    9be2:	af 83       	std	Y+7, r26	; 0x07
    9be4:	b8 87       	std	Y+8, r27	; 0x08

        /* Put response length into buffer */
        g_lin_protocol_state_array[iii].response_length = response_length;
    9be6:	89 85       	ldd	r24, Y+9	; 0x09
    9be8:	28 2f       	mov	r18, r24
    9bea:	30 e0       	ldi	r19, 0x00	; 0
    9bec:	46 e1       	ldi	r20, 0x16	; 22
    9bee:	42 9f       	mul	r20, r18
    9bf0:	c0 01       	movw	r24, r0
    9bf2:	43 9f       	mul	r20, r19
    9bf4:	90 0d       	add	r25, r0
    9bf6:	11 24       	eor	r1, r1
    9bf8:	8b 55       	subi	r24, 0x5B	; 91
    9bfa:	99 4b       	sbci	r25, 0xB9	; 185
    9bfc:	2a 85       	ldd	r18, Y+10	; 0x0a
    9bfe:	fc 01       	movw	r30, r24
    9c00:	20 83       	st	Z, r18

        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    9c02:	89 85       	ldd	r24, Y+9	; 0x09
    9c04:	28 2f       	mov	r18, r24
    9c06:	30 e0       	ldi	r19, 0x00	; 0
    9c08:	8a 85       	ldd	r24, Y+10	; 0x0a
    9c0a:	88 2f       	mov	r24, r24
    9c0c:	90 e0       	ldi	r25, 0x00	; 0
    9c0e:	01 97       	sbiw	r24, 0x01	; 1
    9c10:	22 0f       	add	r18, r18
    9c12:	33 1f       	adc	r19, r19
    9c14:	22 0f       	add	r18, r18
    9c16:	33 1f       	adc	r19, r19
    9c18:	22 0f       	add	r18, r18
    9c1a:	33 1f       	adc	r19, r19
    9c1c:	82 0f       	add	r24, r18
    9c1e:	93 1f       	adc	r25, r19
    9c20:	88 0f       	add	r24, r24
    9c22:	99 1f       	adc	r25, r25
    9c24:	8e 5c       	subi	r24, 0xCE	; 206
    9c26:	9a 4b       	sbci	r25, 0xBA	; 186
    9c28:	fc 01       	movw	r30, r24
    9c2a:	80 81       	ld	r24, Z
    9c2c:	91 81       	ldd	r25, Z+1	; 0x01
    9c2e:	9c 01       	movw	r18, r24
    9c30:	40 e0       	ldi	r20, 0x00	; 0
    9c32:	50 e0       	ldi	r21, 0x00	; 0
    9c34:	8d 81       	ldd	r24, Y+5	; 0x05
    9c36:	9e 81       	ldd	r25, Y+6	; 0x06
    9c38:	af 81       	ldd	r26, Y+7	; 0x07
    9c3a:	b8 85       	ldd	r27, Y+8	; 0x08
    9c3c:	bc 01       	movw	r22, r24
    9c3e:	cd 01       	movw	r24, r26
    9c40:	0e 94 59 64 	call	0xc8b2	; 0xc8b2 <LIN_DRV_SetTimeoutCounter>

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    9c44:	4b 81       	ldd	r20, Y+3	; 0x03
    9c46:	5c 81       	ldd	r21, Y+4	; 0x04
    9c48:	8d 81       	ldd	r24, Y+5	; 0x05
    9c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    9c4c:	af 81       	ldd	r26, Y+7	; 0x07
    9c4e:	b8 85       	ldd	r27, Y+8	; 0x08
    9c50:	2a 85       	ldd	r18, Y+10	; 0x0a
    9c52:	bc 01       	movw	r22, r24
    9c54:	cd 01       	movw	r24, r26
    9c56:	0e 94 59 60 	call	0xc0b2	; 0xc0b2 <LIN_DRV_SendFrameData>
    9c5a:	89 83       	std	Y+1, r24	; 0x01
    9c5c:	9a 83       	std	Y+2, r25	; 0x02
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    9c5e:	89 81       	ldd	r24, Y+1	; 0x01
    9c60:	9a 81       	ldd	r25, Y+2	; 0x02
    9c62:	89 2b       	or	r24, r25
    9c64:	11 f4       	brne	.+4      	; 0x9c6a <lin_lld_set_response+0xf2>
    9c66:	80 e0       	ldi	r24, 0x00	; 0
    9c68:	01 c0       	rjmp	.+2      	; 0x9c6c <lin_lld_set_response+0xf4>
    9c6a:	8f ef       	ldi	r24, 0xFF	; 255
}
    9c6c:	2a 96       	adiw	r28, 0x0a	; 10
    9c6e:	cd bf       	out	0x3d, r28	; 61
    9c70:	de bf       	out	0x3e, r29	; 62
    9c72:	df 91       	pop	r29
    9c74:	cf 91       	pop	r28
    9c76:	08 95       	ret

00009c78 <lin_lld_rx_response>:
 *
 * Implements    : lin_lld_rx_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_rx_response(l_ifc_handle iii,
                         l_u8 response_length)
{
    9c78:	cf 93       	push	r28
    9c7a:	df 93       	push	r29
    9c7c:	cd b7       	in	r28, 0x3d	; 61
    9c7e:	de b7       	in	r29, 0x3e	; 62
    9c80:	28 97       	sbiw	r28, 0x08	; 8
    9c82:	cd bf       	out	0x3d, r28	; 61
    9c84:	de bf       	out	0x3e, r29	; 62
    9c86:	8f 83       	std	Y+7, r24	; 0x07
    9c88:	68 87       	std	Y+8, r22	; 0x08
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    9c8a:	81 e0       	ldi	r24, 0x01	; 1
    9c8c:	90 e0       	ldi	r25, 0x00	; 0
    9c8e:	89 83       	std	Y+1, r24	; 0x01
    9c90:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    9c92:	8f 81       	ldd	r24, Y+7	; 0x07
    9c94:	88 2f       	mov	r24, r24
    9c96:	90 e0       	ldi	r25, 0x00	; 0
    9c98:	88 0f       	add	r24, r24
    9c9a:	99 1f       	adc	r25, r25
    9c9c:	88 0f       	add	r24, r24
    9c9e:	99 1f       	adc	r25, r25
    9ca0:	86 5c       	subi	r24, 0xC6	; 198
    9ca2:	9d 4b       	sbci	r25, 0xBD	; 189
    9ca4:	fc 01       	movw	r30, r24
    9ca6:	80 81       	ld	r24, Z
    9ca8:	91 81       	ldd	r25, Z+1	; 0x01
    9caa:	a2 81       	ldd	r26, Z+2	; 0x02
    9cac:	b3 81       	ldd	r27, Z+3	; 0x03
    9cae:	8b 83       	std	Y+3, r24	; 0x03
    9cb0:	9c 83       	std	Y+4, r25	; 0x04
    9cb2:	ad 83       	std	Y+5, r26	; 0x05
    9cb4:	be 83       	std	Y+6, r27	; 0x06

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    9cb6:	88 85       	ldd	r24, Y+8	; 0x08
    9cb8:	89 30       	cpi	r24, 0x09	; 9
    9cba:	e8 f5       	brcc	.+122    	; 0x9d36 <lin_lld_rx_response+0xbe>
    9cbc:	88 85       	ldd	r24, Y+8	; 0x08
    9cbe:	88 23       	and	r24, r24
    9cc0:	d1 f1       	breq	.+116    	; 0x9d36 <lin_lld_rx_response+0xbe>
    {
        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    9cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    9cc4:	28 2f       	mov	r18, r24
    9cc6:	30 e0       	ldi	r19, 0x00	; 0
    9cc8:	88 85       	ldd	r24, Y+8	; 0x08
    9cca:	88 2f       	mov	r24, r24
    9ccc:	90 e0       	ldi	r25, 0x00	; 0
    9cce:	01 97       	sbiw	r24, 0x01	; 1
    9cd0:	22 0f       	add	r18, r18
    9cd2:	33 1f       	adc	r19, r19
    9cd4:	22 0f       	add	r18, r18
    9cd6:	33 1f       	adc	r19, r19
    9cd8:	22 0f       	add	r18, r18
    9cda:	33 1f       	adc	r19, r19
    9cdc:	82 0f       	add	r24, r18
    9cde:	93 1f       	adc	r25, r19
    9ce0:	88 0f       	add	r24, r24
    9ce2:	99 1f       	adc	r25, r25
    9ce4:	8e 5c       	subi	r24, 0xCE	; 206
    9ce6:	9a 4b       	sbci	r25, 0xBA	; 186
    9ce8:	fc 01       	movw	r30, r24
    9cea:	80 81       	ld	r24, Z
    9cec:	91 81       	ldd	r25, Z+1	; 0x01
    9cee:	9c 01       	movw	r18, r24
    9cf0:	40 e0       	ldi	r20, 0x00	; 0
    9cf2:	50 e0       	ldi	r21, 0x00	; 0
    9cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    9cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    9cf8:	ad 81       	ldd	r26, Y+5	; 0x05
    9cfa:	be 81       	ldd	r27, Y+6	; 0x06
    9cfc:	bc 01       	movw	r22, r24
    9cfe:	cd 01       	movw	r24, r26
    9d00:	0e 94 59 64 	call	0xc8b2	; 0xc8b2 <LIN_DRV_SetTimeoutCounter>

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    9d04:	8f 81       	ldd	r24, Y+7	; 0x07
    9d06:	28 2f       	mov	r18, r24
    9d08:	30 e0       	ldi	r19, 0x00	; 0
    9d0a:	46 e1       	ldi	r20, 0x16	; 22
    9d0c:	42 9f       	mul	r20, r18
    9d0e:	c0 01       	movw	r24, r0
    9d10:	43 9f       	mul	r20, r19
    9d12:	90 0d       	add	r25, r0
    9d14:	11 24       	eor	r1, r1
    9d16:	8d 55       	subi	r24, 0x5D	; 93
    9d18:	99 4b       	sbci	r25, 0xB9	; 185
    9d1a:	fc 01       	movw	r30, r24
    9d1c:	40 81       	ld	r20, Z
    9d1e:	51 81       	ldd	r21, Z+1	; 0x01
    9d20:	8b 81       	ldd	r24, Y+3	; 0x03
    9d22:	9c 81       	ldd	r25, Y+4	; 0x04
    9d24:	ad 81       	ldd	r26, Y+5	; 0x05
    9d26:	be 81       	ldd	r27, Y+6	; 0x06
    9d28:	28 85       	ldd	r18, Y+8	; 0x08
    9d2a:	bc 01       	movw	r22, r24
    9d2c:	cd 01       	movw	r24, r26
    9d2e:	0e 94 12 62 	call	0xc424	; 0xc424 <LIN_DRV_ReceiveFrameData>
    9d32:	89 83       	std	Y+1, r24	; 0x01
    9d34:	9a 83       	std	Y+2, r25	; 0x02
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    9d36:	89 81       	ldd	r24, Y+1	; 0x01
    9d38:	9a 81       	ldd	r25, Y+2	; 0x02
    9d3a:	89 2b       	or	r24, r25
    9d3c:	11 f4       	brne	.+4      	; 0x9d42 <lin_lld_rx_response+0xca>
    9d3e:	80 e0       	ldi	r24, 0x00	; 0
    9d40:	01 c0       	rjmp	.+2      	; 0x9d44 <lin_lld_rx_response+0xcc>
    9d42:	8f ef       	ldi	r24, 0xFF	; 255
}
    9d44:	28 96       	adiw	r28, 0x08	; 8
    9d46:	cd bf       	out	0x3d, r28	; 61
    9d48:	de bf       	out	0x3e, r29	; 62
    9d4a:	df 91       	pop	r29
    9d4c:	cf 91       	pop	r28
    9d4e:	08 95       	ret

00009d50 <lin_lld_timeout_service>:
 * Description   : This is a part of Timer Interrupt Handler.
 *
 * Implements    : lin_lld_timeout_service_Activity
 *END**************************************************************************/
void lin_lld_timeout_service(l_ifc_handle iii)
{
    9d50:	ef 92       	push	r14
    9d52:	ff 92       	push	r15
    9d54:	0f 93       	push	r16
    9d56:	1f 93       	push	r17
    9d58:	cf 93       	push	r28
    9d5a:	df 93       	push	r29
    9d5c:	cd b7       	in	r28, 0x3d	; 61
    9d5e:	de b7       	in	r29, 0x3e	; 62
    9d60:	a6 97       	sbiw	r28, 0x26	; 38
    9d62:	cd bf       	out	0x3d, r28	; 61
    9d64:	de bf       	out	0x3e, r29	; 62
    9d66:	8e a3       	std	Y+38, r24	; 0x26
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);
    l_u32 lin_hardware_instance = g_lin_virtual_ifc[iii];
    9d68:	8e a1       	ldd	r24, Y+38	; 0x26
    9d6a:	88 2f       	mov	r24, r24
    9d6c:	90 e0       	ldi	r25, 0x00	; 0
    9d6e:	88 0f       	add	r24, r24
    9d70:	99 1f       	adc	r25, r25
    9d72:	88 0f       	add	r24, r24
    9d74:	99 1f       	adc	r25, r25
    9d76:	86 5c       	subi	r24, 0xC6	; 198
    9d78:	9d 4b       	sbci	r25, 0xBD	; 189
    9d7a:	fc 01       	movw	r30, r24
    9d7c:	80 81       	ld	r24, Z
    9d7e:	91 81       	ldd	r25, Z+1	; 0x01
    9d80:	a2 81       	ldd	r26, Z+2	; 0x02
    9d82:	b3 81       	ldd	r27, Z+3	; 0x03
    9d84:	8a 83       	std	Y+2, r24	; 0x02
    9d86:	9b 83       	std	Y+3, r25	; 0x03
    9d88:	ac 83       	std	Y+4, r26	; 0x04
    9d8a:	bd 83       	std	Y+5, r27	; 0x05
    lin_state_t linState = s_lin_state_array[iii];
    9d8c:	8e a1       	ldd	r24, Y+38	; 0x26
    9d8e:	28 2f       	mov	r18, r24
    9d90:	30 e0       	ldi	r19, 0x00	; 0
    9d92:	4e e1       	ldi	r20, 0x1E	; 30
    9d94:	42 9f       	mul	r20, r18
    9d96:	c0 01       	movw	r24, r0
    9d98:	43 9f       	mul	r20, r19
    9d9a:	90 0d       	add	r25, r0
    9d9c:	11 24       	eor	r1, r1
    9d9e:	8e 5e       	subi	r24, 0xEE	; 238
    9da0:	9a 4b       	sbci	r25, 0xBA	; 186
    9da2:	2e e1       	ldi	r18, 0x1E	; 30
    9da4:	fc 01       	movw	r30, r24
    9da6:	de 01       	movw	r26, r28
    9da8:	18 96       	adiw	r26, 0x08	; 8
    9daa:	01 90       	ld	r0, Z+
    9dac:	0d 92       	st	X+, r0
    9dae:	2a 95       	dec	r18
    9db0:	e1 f7       	brne	.-8      	; 0x9daa <lin_lld_timeout_service+0x5a>
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9db2:	8e a1       	ldd	r24, Y+38	; 0x26
    9db4:	28 2f       	mov	r18, r24
    9db6:	30 e0       	ldi	r19, 0x00	; 0
    9db8:	46 e1       	ldi	r20, 0x16	; 22
    9dba:	42 9f       	mul	r20, r18
    9dbc:	c0 01       	movw	r24, r0
    9dbe:	43 9f       	mul	r20, r19
    9dc0:	90 0d       	add	r25, r0
    9dc2:	11 24       	eor	r1, r1
    9dc4:	8f 55       	subi	r24, 0x5F	; 95
    9dc6:	99 4b       	sbci	r25, 0xB9	; 185
    9dc8:	8e 83       	std	Y+6, r24	; 0x06
    9dca:	9f 83       	std	Y+7, r25	; 0x07
    l_u8 index;

    LIN_DRV_TimeoutService(lin_hardware_instance);
    9dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    9dce:	9b 81       	ldd	r25, Y+3	; 0x03
    9dd0:	ac 81       	ldd	r26, Y+4	; 0x04
    9dd2:	bd 81       	ldd	r27, Y+5	; 0x05
    9dd4:	bc 01       	movw	r22, r24
    9dd6:	cd 01       	movw	r24, r26
    9dd8:	0e 94 8f 63 	call	0xc71e	; 0xc71e <LIN_DRV_TimeoutService>
#if (SUPPORT_PROTOCOL_21 == 1U)
    /* Callback to transport layer to handle N_As and N_Cr timeout for LIN 2.1 and above*/
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
    9ddc:	40 e0       	ldi	r20, 0x00	; 0
    9dde:	65 e0       	ldi	r22, 0x05	; 5
    9de0:	8e a1       	ldd	r24, Y+38	; 0x26
    9de2:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <lin_tl_callback_handler>
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    9de6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9de8:	88 2f       	mov	r24, r24
    9dea:	90 e0       	ldi	r25, 0x00	; 0
    9dec:	87 30       	cpi	r24, 0x07	; 7
    9dee:	91 05       	cpc	r25, r1
    9df0:	3c f4       	brge	.+14     	; 0x9e00 <lin_lld_timeout_service+0xb0>
    9df2:	83 30       	cpi	r24, 0x03	; 3
    9df4:	91 05       	cpc	r25, r1
    9df6:	0c f0       	brlt	.+2      	; 0x9dfa <lin_lld_timeout_service+0xaa>
    9df8:	92 c0       	rjmp	.+292    	; 0x9f1e <lin_lld_timeout_service+0x1ce>
    9dfa:	02 97       	sbiw	r24, 0x02	; 2
    9dfc:	29 f0       	breq	.+10     	; 0x9e08 <lin_lld_timeout_service+0xb8>
        case LIN_NODE_STATE_RECV_DATA:
        case LIN_NODE_STATE_RECV_DATA_COMPLETED:
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    9dfe:	eb c0       	rjmp	.+470    	; 0x9fd6 <lin_lld_timeout_service+0x286>
    LIN_DRV_TimeoutService(lin_hardware_instance);
#if (SUPPORT_PROTOCOL_21 == 1U)
    /* Callback to transport layer to handle N_As and N_Cr timeout for LIN 2.1 and above*/
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    9e00:	09 97       	sbiw	r24, 0x09	; 9
    9e02:	09 f4       	brne	.+2      	; 0x9e06 <lin_lld_timeout_service+0xb6>
    9e04:	b8 c0       	rjmp	.+368    	; 0x9f76 <lin_lld_timeout_service+0x226>
        case LIN_NODE_STATE_RECV_DATA:
        case LIN_NODE_STATE_RECV_DATA_COMPLETED:
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    9e06:	e7 c0       	rjmp	.+462    	; 0x9fd6 <lin_lld_timeout_service+0x286>
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    {
        case LIN_NODE_STATE_IDLE:
            if (!(prot_state_ptr->idle_timeout_cnt-- > 0U))
    9e08:	8e 81       	ldd	r24, Y+6	; 0x06
    9e0a:	9f 81       	ldd	r25, Y+7	; 0x07
    9e0c:	fc 01       	movw	r30, r24
    9e0e:	83 89       	ldd	r24, Z+19	; 0x13
    9e10:	94 89       	ldd	r25, Z+20	; 0x14
    9e12:	ac 01       	movw	r20, r24
    9e14:	41 50       	subi	r20, 0x01	; 1
    9e16:	51 09       	sbc	r21, r1
    9e18:	2e 81       	ldd	r18, Y+6	; 0x06
    9e1a:	3f 81       	ldd	r19, Y+7	; 0x07
    9e1c:	f9 01       	movw	r30, r18
    9e1e:	43 8b       	std	Z+19, r20	; 0x13
    9e20:	54 8b       	std	Z+20, r21	; 0x14
    9e22:	89 2b       	or	r24, r25
    9e24:	01 f5       	brne	.+64     	; 0x9e66 <lin_lld_timeout_service+0x116>
            {
                /* Callback to handle timeout */
                CALLBACK_HANDLER(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT, 0xFFU);
    9e26:	4f ef       	ldi	r20, 0xFF	; 255
    9e28:	68 e0       	ldi	r22, 0x08	; 8
    9e2a:	8e a1       	ldd	r24, Y+38	; 0x26
    9e2c:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>

                /* Put current node to Idle state, reset idle timeout count */
                prot_state_ptr->idle_timeout_cnt = g_lin_protocol_user_cfg_array[iii].max_idle_timeout_cnt;
    9e30:	8e a1       	ldd	r24, Y+38	; 0x26
    9e32:	28 2f       	mov	r18, r24
    9e34:	30 e0       	ldi	r19, 0x00	; 0
    9e36:	4c e1       	ldi	r20, 0x1C	; 28
    9e38:	42 9f       	mul	r20, r18
    9e3a:	c0 01       	movw	r24, r0
    9e3c:	43 9f       	mul	r20, r19
    9e3e:	90 0d       	add	r25, r0
    9e40:	11 24       	eor	r1, r1
    9e42:	8a 55       	subi	r24, 0x5A	; 90
    9e44:	9d 4b       	sbci	r25, 0xBD	; 189
    9e46:	fc 01       	movw	r30, r24
    9e48:	20 81       	ld	r18, Z
    9e4a:	31 81       	ldd	r19, Z+1	; 0x01
    9e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    9e4e:	9f 81       	ldd	r25, Y+7	; 0x07
    9e50:	fc 01       	movw	r30, r24
    9e52:	23 8b       	std	Z+19, r18	; 0x13
    9e54:	34 8b       	std	Z+20, r19	; 0x14

                /* Put current node to sleep mode */
                (void)LIN_DRV_GoToSleepMode(lin_hardware_instance);
    9e56:	8a 81       	ldd	r24, Y+2	; 0x02
    9e58:	9b 81       	ldd	r25, Y+3	; 0x03
    9e5a:	ac 81       	ldd	r26, Y+4	; 0x04
    9e5c:	bd 81       	ldd	r27, Y+5	; 0x05
    9e5e:	bc 01       	movw	r22, r24
    9e60:	cd 01       	movw	r24, r26
    9e62:	0e 94 04 5e 	call	0xbc08	; 0xbc08 <LIN_DRV_GoToSleepMode>
            }
            /* Re-calculate s_lin_max_header_timeout and s_lin_max_frame_res_timeout_val */
            if (s_baudrate_adjusted_flg[iii])
    9e66:	8e a1       	ldd	r24, Y+38	; 0x26
    9e68:	88 2f       	mov	r24, r24
    9e6a:	90 e0       	ldi	r25, 0x00	; 0
    9e6c:	8e 5b       	subi	r24, 0xBE	; 190
    9e6e:	9a 4b       	sbci	r25, 0xBA	; 186
    9e70:	fc 01       	movw	r30, r24
    9e72:	80 81       	ld	r24, Z
    9e74:	88 23       	and	r24, r24
    9e76:	09 f4       	brne	.+2      	; 0x9e7a <lin_lld_timeout_service+0x12a>
    9e78:	a9 c0       	rjmp	.+338    	; 0x9fcc <lin_lld_timeout_service+0x27c>
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
    9e7a:	8e a1       	ldd	r24, Y+38	; 0x26
    9e7c:	88 2f       	mov	r24, r24
    9e7e:	90 e0       	ldi	r25, 0x00	; 0
    9e80:	8e 5b       	subi	r24, 0xBE	; 190
    9e82:	9a 4b       	sbci	r25, 0xBA	; 186
    9e84:	fc 01       	movw	r30, r24
    9e86:	10 82       	st	Z, r1
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
    9e88:	8e a1       	ldd	r24, Y+38	; 0x26
    9e8a:	08 2f       	mov	r16, r24
    9e8c:	10 e0       	ldi	r17, 0x00	; 0
    9e8e:	80 91 ae 42 	lds	r24, 0x42AE	; 0x8042ae <g_lin_protocol_user_cfg_array+0x14>
    9e92:	90 91 af 42 	lds	r25, 0x42AF	; 0x8042af <g_lin_protocol_user_cfg_array+0x15>
    9e96:	fc 01       	movw	r30, r24
    9e98:	80 81       	ld	r24, Z
    9e9a:	91 81       	ldd	r25, Z+1	; 0x01
    9e9c:	a2 81       	ldd	r26, Z+2	; 0x02
    9e9e:	b3 81       	ldd	r27, Z+3	; 0x03
    9ea0:	bc 01       	movw	r22, r24
    9ea2:	cd 01       	movw	r24, r26
    9ea4:	0e 94 8e 4b 	call	0x971c	; 0x971c <lin_calc_max_header_timeout_cnt>
    9ea8:	9c 01       	movw	r18, r24
    9eaa:	c8 01       	movw	r24, r16
    9eac:	88 0f       	add	r24, r24
    9eae:	99 1f       	adc	r25, r25
    9eb0:	80 5d       	subi	r24, 0xD0	; 208
    9eb2:	9a 4b       	sbci	r25, 0xBA	; 186
    9eb4:	fc 01       	movw	r30, r24
    9eb6:	20 83       	st	Z, r18
    9eb8:	31 83       	std	Z+1, r19	; 0x01
                for (index = 1U; index < 9U; index++)
    9eba:	81 e0       	ldi	r24, 0x01	; 1
    9ebc:	89 83       	std	Y+1, r24	; 0x01
    9ebe:	2b c0       	rjmp	.+86     	; 0x9f16 <lin_lld_timeout_service+0x1c6>
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
    9ec0:	8e a1       	ldd	r24, Y+38	; 0x26
    9ec2:	e8 2e       	mov	r14, r24
    9ec4:	f1 2c       	mov	r15, r1
    9ec6:	89 81       	ldd	r24, Y+1	; 0x01
    9ec8:	88 2f       	mov	r24, r24
    9eca:	90 e0       	ldi	r25, 0x00	; 0
    9ecc:	8c 01       	movw	r16, r24
    9ece:	01 50       	subi	r16, 0x01	; 1
    9ed0:	11 09       	sbc	r17, r1
    9ed2:	80 91 ae 42 	lds	r24, 0x42AE	; 0x8042ae <g_lin_protocol_user_cfg_array+0x14>
    9ed6:	90 91 af 42 	lds	r25, 0x42AF	; 0x8042af <g_lin_protocol_user_cfg_array+0x15>
    9eda:	fc 01       	movw	r30, r24
    9edc:	80 81       	ld	r24, Z
    9ede:	91 81       	ldd	r25, Z+1	; 0x01
    9ee0:	a2 81       	ldd	r26, Z+2	; 0x02
    9ee2:	b3 81       	ldd	r27, Z+3	; 0x03
    9ee4:	49 81       	ldd	r20, Y+1	; 0x01
    9ee6:	bc 01       	movw	r22, r24
    9ee8:	cd 01       	movw	r24, r26
    9eea:	0e 94 b4 4b 	call	0x9768	; 0x9768 <lin_calc_max_res_timeout_cnt>
    9eee:	9c 01       	movw	r18, r24
    9ef0:	c7 01       	movw	r24, r14
    9ef2:	88 0f       	add	r24, r24
    9ef4:	99 1f       	adc	r25, r25
    9ef6:	88 0f       	add	r24, r24
    9ef8:	99 1f       	adc	r25, r25
    9efa:	88 0f       	add	r24, r24
    9efc:	99 1f       	adc	r25, r25
    9efe:	80 0f       	add	r24, r16
    9f00:	91 1f       	adc	r25, r17
    9f02:	88 0f       	add	r24, r24
    9f04:	99 1f       	adc	r25, r25
    9f06:	8e 5c       	subi	r24, 0xCE	; 206
    9f08:	9a 4b       	sbci	r25, 0xBA	; 186
    9f0a:	fc 01       	movw	r30, r24
    9f0c:	20 83       	st	Z, r18
    9f0e:	31 83       	std	Z+1, r19	; 0x01
            if (s_baudrate_adjusted_flg[iii])
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
                for (index = 1U; index < 9U; index++)
    9f10:	89 81       	ldd	r24, Y+1	; 0x01
    9f12:	8f 5f       	subi	r24, 0xFF	; 255
    9f14:	89 83       	std	Y+1, r24	; 0x01
    9f16:	89 81       	ldd	r24, Y+1	; 0x01
    9f18:	89 30       	cpi	r24, 0x09	; 9
    9f1a:	90 f2       	brcs	.-92     	; 0x9ec0 <lin_lld_timeout_service+0x170>
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
                }
            }
            break;
    9f1c:	57 c0       	rjmp	.+174    	; 0x9fcc <lin_lld_timeout_service+0x27c>
        case LIN_NODE_STATE_SEND_BREAK_FIELD:
        case LIN_NODE_STATE_RECV_SYNC:
        case LIN_NODE_STATE_RECV_PID:
        case LIN_NODE_STATE_SEND_PID:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    9f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    9f20:	9f 81       	ldd	r25, Y+7	; 0x07
    9f22:	fc 01       	movw	r30, r24
    9f24:	81 89       	ldd	r24, Z+17	; 0x11
    9f26:	92 89       	ldd	r25, Z+18	; 0x12
    9f28:	ac 01       	movw	r20, r24
    9f2a:	41 50       	subi	r20, 0x01	; 1
    9f2c:	51 09       	sbc	r21, r1
    9f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    9f30:	3f 81       	ldd	r19, Y+7	; 0x07
    9f32:	f9 01       	movw	r30, r18
    9f34:	41 8b       	std	Z+17, r20	; 0x11
    9f36:	52 8b       	std	Z+18, r21	; 0x12
    9f38:	89 2b       	or	r24, r25
    9f3a:	09 f0       	breq	.+2      	; 0x9f3e <lin_lld_timeout_service+0x1ee>
    9f3c:	49 c0       	rjmp	.+146    	; 0x9fd0 <lin_lld_timeout_service+0x280>
            {
                /* Go to idle state */
                (void)LIN_DRV_GotoIdleState(lin_hardware_instance);
    9f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    9f40:	9b 81       	ldd	r25, Y+3	; 0x03
    9f42:	ac 81       	ldd	r26, Y+4	; 0x04
    9f44:	bd 81       	ldd	r27, Y+5	; 0x05
    9f46:	bc 01       	movw	r22, r24
    9f48:	cd 01       	movw	r24, r26
    9f4a:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    9f4e:	8e a1       	ldd	r24, Y+38	; 0x26
    9f50:	88 2f       	mov	r24, r24
    9f52:	90 e0       	ldi	r25, 0x00	; 0
    9f54:	82 95       	swap	r24
    9f56:	92 95       	swap	r25
    9f58:	90 7f       	andi	r25, 0xF0	; 240
    9f5a:	98 27       	eor	r25, r24
    9f5c:	80 7f       	andi	r24, 0xF0	; 240
    9f5e:	98 27       	eor	r25, r24
    9f60:	80 5c       	subi	r24, 0xC0	; 192
    9f62:	9a 4b       	sbci	r25, 0xBA	; 186
    9f64:	fc 01       	movw	r30, r24
    9f66:	20 81       	ld	r18, Z
    9f68:	31 81       	ldd	r19, Z+1	; 0x01
    9f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    9f6c:	9f 81       	ldd	r25, Y+7	; 0x07
    9f6e:	fc 01       	movw	r30, r24
    9f70:	21 8b       	std	Z+17, r18	; 0x11
    9f72:	32 8b       	std	Z+18, r19	; 0x12
            }
            break;
    9f74:	2d c0       	rjmp	.+90     	; 0x9fd0 <lin_lld_timeout_service+0x280>
        case LIN_NODE_STATE_SEND_DATA:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    9f76:	8e 81       	ldd	r24, Y+6	; 0x06
    9f78:	9f 81       	ldd	r25, Y+7	; 0x07
    9f7a:	fc 01       	movw	r30, r24
    9f7c:	81 89       	ldd	r24, Z+17	; 0x11
    9f7e:	92 89       	ldd	r25, Z+18	; 0x12
    9f80:	ac 01       	movw	r20, r24
    9f82:	41 50       	subi	r20, 0x01	; 1
    9f84:	51 09       	sbc	r21, r1
    9f86:	2e 81       	ldd	r18, Y+6	; 0x06
    9f88:	3f 81       	ldd	r19, Y+7	; 0x07
    9f8a:	f9 01       	movw	r30, r18
    9f8c:	41 8b       	std	Z+17, r20	; 0x11
    9f8e:	52 8b       	std	Z+18, r21	; 0x12
    9f90:	89 2b       	or	r24, r25
    9f92:	01 f5       	brne	.+64     	; 0x9fd4 <lin_lld_timeout_service+0x284>
            {
                /* Abort frame data transferring */
                (void)LIN_DRV_AbortTransferData(lin_hardware_instance);
    9f94:	8a 81       	ldd	r24, Y+2	; 0x02
    9f96:	9b 81       	ldd	r25, Y+3	; 0x03
    9f98:	ac 81       	ldd	r26, Y+4	; 0x04
    9f9a:	bd 81       	ldd	r27, Y+5	; 0x05
    9f9c:	bc 01       	movw	r22, r24
    9f9e:	cd 01       	movw	r24, r26
    9fa0:	0e 94 29 5e 	call	0xbc52	; 0xbc52 <LIN_DRV_AbortTransferData>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    9fa4:	8e a1       	ldd	r24, Y+38	; 0x26
    9fa6:	88 2f       	mov	r24, r24
    9fa8:	90 e0       	ldi	r25, 0x00	; 0
    9faa:	82 95       	swap	r24
    9fac:	92 95       	swap	r25
    9fae:	90 7f       	andi	r25, 0xF0	; 240
    9fb0:	98 27       	eor	r25, r24
    9fb2:	80 7f       	andi	r24, 0xF0	; 240
    9fb4:	98 27       	eor	r25, r24
    9fb6:	80 5c       	subi	r24, 0xC0	; 192
    9fb8:	9a 4b       	sbci	r25, 0xBA	; 186
    9fba:	fc 01       	movw	r30, r24
    9fbc:	20 81       	ld	r18, Z
    9fbe:	31 81       	ldd	r19, Z+1	; 0x01
    9fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    9fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    9fc4:	fc 01       	movw	r30, r24
    9fc6:	21 8b       	std	Z+17, r18	; 0x11
    9fc8:	32 8b       	std	Z+18, r19	; 0x12
            }
            break;
    9fca:	04 c0       	rjmp	.+8      	; 0x9fd4 <lin_lld_timeout_service+0x284>
                for (index = 1U; index < 9U; index++)
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
                }
            }
            break;
    9fcc:	00 00       	nop
    9fce:	03 c0       	rjmp	.+6      	; 0x9fd6 <lin_lld_timeout_service+0x286>
                (void)LIN_DRV_GotoIdleState(lin_hardware_instance);

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
            }
            break;
    9fd0:	00 00       	nop
    9fd2:	01 c0       	rjmp	.+2      	; 0x9fd6 <lin_lld_timeout_service+0x286>
                (void)LIN_DRV_AbortTransferData(lin_hardware_instance);

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
            }
            break;
    9fd4:	00 00       	nop
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    }
}
    9fd6:	00 00       	nop
    9fd8:	a6 96       	adiw	r28, 0x26	; 38
    9fda:	cd bf       	out	0x3d, r28	; 61
    9fdc:	de bf       	out	0x3e, r29	; 62
    9fde:	df 91       	pop	r29
    9fe0:	cf 91       	pop	r28
    9fe2:	1f 91       	pop	r17
    9fe4:	0f 91       	pop	r16
    9fe6:	ff 90       	pop	r15
    9fe8:	ef 90       	pop	r14
    9fea:	08 95       	ret

00009fec <CallbackHandler>:
 *
 * Implements    : CallbackHandler_Activity
 *END**************************************************************************/
static void CallbackHandler(uint32_t instance,
                            void * linState)
{
    9fec:	cf 93       	push	r28
    9fee:	df 93       	push	r29
    9ff0:	cd b7       	in	r28, 0x3d	; 61
    9ff2:	de b7       	in	r29, 0x3e	; 62
    9ff4:	60 97       	sbiw	r28, 0x10	; 16
    9ff6:	cd bf       	out	0x3d, r28	; 61
    9ff8:	de bf       	out	0x3e, r29	; 62
    9ffa:	6b 87       	std	Y+11, r22	; 0x0b
    9ffc:	7c 87       	std	Y+12, r23	; 0x0c
    9ffe:	8d 87       	std	Y+13, r24	; 0x0d
    a000:	9e 87       	std	Y+14, r25	; 0x0e
    a002:	4f 87       	std	Y+15, r20	; 0x0f
    a004:	58 8b       	std	Y+16, r21	; 0x10
    const lin_state_t * linCurrentState = linState;
    a006:	8f 85       	ldd	r24, Y+15	; 0x0f
    a008:	98 89       	ldd	r25, Y+16	; 0x10
    a00a:	89 83       	std	Y+1, r24	; 0x01
    a00c:	9a 83       	std	Y+2, r25	; 0x02
    lin_lld_event_id_t event_id;
    l_u8 id = linCurrentState->currentId;
    a00e:	89 81       	ldd	r24, Y+1	; 0x01
    a010:	9a 81       	ldd	r25, Y+2	; 0x02
    a012:	fc 01       	movw	r30, r24
    a014:	87 85       	ldd	r24, Z+15	; 0x0f
    a016:	8b 83       	std	Y+3, r24	; 0x03
    l_u8 bytesRemaining = 0U;
    a018:	1a 86       	std	Y+10, r1	; 0x0a
    l_ifc_handle iii = g_lin_hardware_ifc[instance];
    a01a:	8b 85       	ldd	r24, Y+11	; 0x0b
    a01c:	9c 85       	ldd	r25, Y+12	; 0x0c
    a01e:	88 5c       	subi	r24, 0xC8	; 200
    a020:	9d 4b       	sbci	r25, 0xBD	; 189
    a022:	fc 01       	movw	r30, r24
    a024:	80 81       	ld	r24, Z
    a026:	8c 83       	std	Y+4, r24	; 0x04

#if (SUPPORT_PROTOCOL_J2602 == 1U)
    // const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
#endif
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    a028:	8c 81       	ldd	r24, Y+4	; 0x04
    a02a:	28 2f       	mov	r18, r24
    a02c:	30 e0       	ldi	r19, 0x00	; 0
    a02e:	4c e1       	ldi	r20, 0x1C	; 28
    a030:	42 9f       	mul	r20, r18
    a032:	c0 01       	movw	r24, r0
    a034:	43 9f       	mul	r20, r19
    a036:	90 0d       	add	r25, r0
    a038:	11 24       	eor	r1, r1
    a03a:	86 56       	subi	r24, 0x66	; 102
    a03c:	9d 4b       	sbci	r25, 0xBD	; 189
    a03e:	8d 83       	std	Y+5, r24	; 0x05
    a040:	9e 83       	std	Y+6, r25	; 0x06

    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    a042:	8c 81       	ldd	r24, Y+4	; 0x04
    a044:	28 2f       	mov	r18, r24
    a046:	30 e0       	ldi	r19, 0x00	; 0
    a048:	46 e1       	ldi	r20, 0x16	; 22
    a04a:	42 9f       	mul	r20, r18
    a04c:	c0 01       	movw	r24, r0
    a04e:	43 9f       	mul	r20, r19
    a050:	90 0d       	add	r25, r0
    a052:	11 24       	eor	r1, r1
    a054:	8f 55       	subi	r24, 0x5F	; 95
    a056:	99 4b       	sbci	r25, 0xB9	; 185
    a058:	8f 83       	std	Y+7, r24	; 0x07
    a05a:	98 87       	std	Y+8, r25	; 0x08
#if (SUPPORT_MASTER_MODE == 1U)
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    switch (linCurrentState->currentEventId)
    a05c:	89 81       	ldd	r24, Y+1	; 0x01
    a05e:	9a 81       	ldd	r25, Y+2	; 0x02
    a060:	fc 01       	movw	r30, r24
    a062:	81 89       	ldd	r24, Z+17	; 0x11
    a064:	88 2f       	mov	r24, r24
    a066:	90 e0       	ldi	r25, 0x00	; 0
    a068:	09 2e       	mov	r0, r25
    a06a:	00 0c       	add	r0, r0
    a06c:	aa 0b       	sbc	r26, r26
    a06e:	bb 0b       	sbc	r27, r27
    a070:	40 e0       	ldi	r20, 0x00	; 0
    a072:	50 e0       	ldi	r21, 0x00	; 0
    a074:	2c e0       	ldi	r18, 0x0C	; 12
    a076:	30 e0       	ldi	r19, 0x00	; 0
    a078:	84 1b       	sub	r24, r20
    a07a:	95 0b       	sbc	r25, r21
    a07c:	28 17       	cp	r18, r24
    a07e:	39 07       	cpc	r19, r25
    a080:	08 f4       	brcc	.+2      	; 0xa084 <CallbackHandler+0x98>
    a082:	a0 c0       	rjmp	.+320    	; 0xa1c4 <CallbackHandler+0x1d8>
    a084:	86 55       	subi	r24, 0x56	; 86
    a086:	9b 4d       	sbci	r25, 0xDB	; 219
    a088:	fc 01       	movw	r30, r24
    a08a:	0c 94 0f 7d 	jmp	0xfa1e	; 0xfa1e <__tablejump2__>
    {
        case LIN_PID_OK:
            event_id = LIN_LLD_PID_OK;
    a08e:	19 86       	std	Y+9, r1	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a090:	4b 81       	ldd	r20, Y+3	; 0x03
    a092:	69 85       	ldd	r22, Y+9	; 0x09
    a094:	8c 81       	ldd	r24, Y+4	; 0x04
    a096:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            // break;
        case LIN_RECV_BREAK_FIELD_OK:
            prot_state_ptr->frame_timeout_cnt = (l_u16)(s_lin_max_frame_res_timeout_val[iii][7U] + s_lin_max_header_timeout[iii]);
    a09a:	8c 81       	ldd	r24, Y+4	; 0x04
    a09c:	88 2f       	mov	r24, r24
    a09e:	90 e0       	ldi	r25, 0x00	; 0
    a0a0:	82 95       	swap	r24
    a0a2:	92 95       	swap	r25
    a0a4:	90 7f       	andi	r25, 0xF0	; 240
    a0a6:	98 27       	eor	r25, r24
    a0a8:	80 7f       	andi	r24, 0xF0	; 240
    a0aa:	98 27       	eor	r25, r24
    a0ac:	80 5c       	subi	r24, 0xC0	; 192
    a0ae:	9a 4b       	sbci	r25, 0xBA	; 186
    a0b0:	fc 01       	movw	r30, r24
    a0b2:	20 81       	ld	r18, Z
    a0b4:	31 81       	ldd	r19, Z+1	; 0x01
    a0b6:	8c 81       	ldd	r24, Y+4	; 0x04
    a0b8:	88 2f       	mov	r24, r24
    a0ba:	90 e0       	ldi	r25, 0x00	; 0
    a0bc:	88 0f       	add	r24, r24
    a0be:	99 1f       	adc	r25, r25
    a0c0:	80 5d       	subi	r24, 0xD0	; 208
    a0c2:	9a 4b       	sbci	r25, 0xBA	; 186
    a0c4:	fc 01       	movw	r30, r24
    a0c6:	80 81       	ld	r24, Z
    a0c8:	91 81       	ldd	r25, Z+1	; 0x01
    a0ca:	28 0f       	add	r18, r24
    a0cc:	39 1f       	adc	r19, r25
    a0ce:	8f 81       	ldd	r24, Y+7	; 0x07
    a0d0:	98 85       	ldd	r25, Y+8	; 0x08
    a0d2:	fc 01       	movw	r30, r24
    a0d4:	21 8b       	std	Z+17, r18	; 0x11
    a0d6:	32 8b       	std	Z+18, r19	; 0x12
            break;
    a0d8:	78 c0       	rjmp	.+240    	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_PID_ERROR:
            event_id = LIN_LLD_PID_ERR;
    a0da:	83 e0       	ldi	r24, 0x03	; 3
    a0dc:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a0de:	4b 81       	ldd	r20, Y+3	; 0x03
    a0e0:	69 85       	ldd	r22, Y+9	; 0x09
    a0e2:	8c 81       	ldd	r24, Y+4	; 0x04
    a0e4:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            break;
    a0e8:	70 c0       	rjmp	.+224    	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_TX_COMPLETED:
            event_id = LIN_LLD_TX_COMPLETED;
    a0ea:	81 e0       	ldi	r24, 0x01	; 1
    a0ec:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a0ee:	4b 81       	ldd	r20, Y+3	; 0x03
    a0f0:	69 85       	ldd	r22, Y+9	; 0x09
    a0f2:	8c 81       	ldd	r24, Y+4	; 0x04
    a0f4:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            break;
    a0f8:	68 c0       	rjmp	.+208    	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_RX_COMPLETED:
            event_id = LIN_LLD_RX_COMPLETED;
    a0fa:	82 e0       	ldi	r24, 0x02	; 2
    a0fc:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a0fe:	4b 81       	ldd	r20, Y+3	; 0x03
    a100:	69 85       	ldd	r22, Y+9	; 0x09
    a102:	8c 81       	ldd	r24, Y+4	; 0x04
    a104:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            break;
    a108:	60 c0       	rjmp	.+192    	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_CHECKSUM_ERROR:
            event_id = LIN_LLD_CHECKSUM_ERR;
    a10a:	85 e0       	ldi	r24, 0x05	; 5
    a10c:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a10e:	4b 81       	ldd	r20, Y+3	; 0x03
    a110:	69 85       	ldd	r22, Y+9	; 0x09
    a112:	8c 81       	ldd	r24, Y+4	; 0x04
    a114:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            break;
    a118:	58 c0       	rjmp	.+176    	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_READBACK_ERROR:
            event_id = LIN_LLD_READBACK_ERR;
    a11a:	86 e0       	ldi	r24, 0x06	; 6
    a11c:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a11e:	4b 81       	ldd	r20, Y+3	; 0x03
    a120:	69 85       	ldd	r22, Y+9	; 0x09
    a122:	8c 81       	ldd	r24, Y+4	; 0x04
    a124:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            break;
    a128:	50 c0       	rjmp	.+160    	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_FRAME_ERROR:
            event_id = LIN_LLD_FRAME_ERR;
    a12a:	84 e0       	ldi	r24, 0x04	; 4
    a12c:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a12e:	4b 81       	ldd	r20, Y+3	; 0x03
    a130:	69 85       	ldd	r22, Y+9	; 0x09
    a132:	8c 81       	ldd	r24, Y+4	; 0x04
    a134:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            break;
    a138:	48 c0       	rjmp	.+144    	; 0xa1ca <CallbackHandler+0x1de>
            {
                event_id = LIN_LLD_READBACK_ERR;
                CALLBACK_HANDLER(iii, (event_id), (id));
            }
        #endif /* End of (SUPPORT_PROTOCOL_J2602 == 1U) */
            event_id = LIN_LLD_READBACK_ERR;
    a13a:	86 e0       	ldi	r24, 0x06	; 6
    a13c:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    a13e:	4b 81       	ldd	r20, Y+3	; 0x03
    a140:	69 85       	ldd	r22, Y+9	; 0x09
    a142:	8c 81       	ldd	r24, Y+4	; 0x04
    a144:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
            prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    a148:	8c 81       	ldd	r24, Y+4	; 0x04
    a14a:	88 2f       	mov	r24, r24
    a14c:	90 e0       	ldi	r25, 0x00	; 0
    a14e:	82 95       	swap	r24
    a150:	92 95       	swap	r25
    a152:	90 7f       	andi	r25, 0xF0	; 240
    a154:	98 27       	eor	r25, r24
    a156:	80 7f       	andi	r24, 0xF0	; 240
    a158:	98 27       	eor	r25, r24
    a15a:	80 5c       	subi	r24, 0xC0	; 192
    a15c:	9a 4b       	sbci	r25, 0xBA	; 186
    a15e:	fc 01       	movw	r30, r24
    a160:	20 81       	ld	r18, Z
    a162:	31 81       	ldd	r19, Z+1	; 0x01
    a164:	8f 81       	ldd	r24, Y+7	; 0x07
    a166:	98 85       	ldd	r25, Y+8	; 0x08
    a168:	fc 01       	movw	r30, r24
    a16a:	21 8b       	std	Z+17, r18	; 0x11
    a16c:	32 8b       	std	Z+18, r19	; 0x12
            break;
    a16e:	2d c0       	rjmp	.+90     	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_BAUDRATE_ADJUSTED:
            /* Set s_baudrate_adjusted_flg[iii] */
            s_baudrate_adjusted_flg[iii] = true;
    a170:	8c 81       	ldd	r24, Y+4	; 0x04
    a172:	88 2f       	mov	r24, r24
    a174:	90 e0       	ldi	r25, 0x00	; 0
    a176:	8e 5b       	subi	r24, 0xBE	; 190
    a178:	9a 4b       	sbci	r25, 0xBA	; 186
    a17a:	21 e0       	ldi	r18, 0x01	; 1
    a17c:	fc 01       	movw	r30, r24
    a17e:	20 83       	st	Z, r18
            break;
    a180:	24 c0       	rjmp	.+72     	; 0xa1ca <CallbackHandler+0x1de>
        case LIN_NO_EVENT:
            if (linCurrentState->timeoutCounterFlag == (bool)1U)
    a182:	89 81       	ldd	r24, Y+1	; 0x01
    a184:	9a 81       	ldd	r25, Y+2	; 0x02
    a186:	fc 01       	movw	r30, r24
    a188:	87 89       	ldd	r24, Z+23	; 0x17
    a18a:	88 23       	and	r24, r24
    a18c:	e9 f0       	breq	.+58     	; 0xa1c8 <CallbackHandler+0x1dc>
                    master_data_ptr->schedule_start_entry_ptr[master_data_ptr->active_schedule_id] = 0U;
                }
                else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
                {
                   (void)LIN_DRV_GetReceiveStatus(instance, &bytesRemaining);
    a18e:	9e 01       	movw	r18, r28
    a190:	26 5f       	subi	r18, 0xF6	; 246
    a192:	3f 4f       	sbci	r19, 0xFF	; 255
    a194:	8b 85       	ldd	r24, Y+11	; 0x0b
    a196:	9c 85       	ldd	r25, Y+12	; 0x0c
    a198:	ad 85       	ldd	r26, Y+13	; 0x0d
    a19a:	be 85       	ldd	r27, Y+14	; 0x0e
    a19c:	a9 01       	movw	r20, r18
    a19e:	bc 01       	movw	r22, r24
    a1a0:	cd 01       	movw	r24, r26
    a1a2:	0e 94 89 64 	call	0xc912	; 0xc912 <LIN_DRV_GetReceiveStatus>
                    /* Received part of data but not completed */
                    if (linCurrentState->rxSize > bytesRemaining)
    a1a6:	89 81       	ldd	r24, Y+1	; 0x01
    a1a8:	9a 81       	ldd	r25, Y+2	; 0x02
    a1aa:	fc 01       	movw	r30, r24
    a1ac:	96 81       	ldd	r25, Z+6	; 0x06
    a1ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    a1b0:	89 17       	cp	r24, r25
    a1b2:	50 f4       	brcc	.+20     	; 0xa1c8 <CallbackHandler+0x1dc>
                    {
                        event_id = LIN_LLD_NODATA_TIMEOUT;
    a1b4:	87 e0       	ldi	r24, 0x07	; 7
    a1b6:	89 87       	std	Y+9, r24	; 0x09
                        CALLBACK_HANDLER(iii, (event_id), (id));
    a1b8:	4b 81       	ldd	r20, Y+3	; 0x03
    a1ba:	69 85       	ldd	r22, Y+9	; 0x09
    a1bc:	8c 81       	ldd	r24, Y+4	; 0x04
    a1be:	0e 94 6e 31 	call	0x62dc	; 0x62dc <lin_pid_resp_callback_handler>
                    }
                }
            }
            break;
    a1c2:	02 c0       	rjmp	.+4      	; 0xa1c8 <CallbackHandler+0x1dc>
        default:
            /* do nothing */
            break;
    a1c4:	00 00       	nop
    a1c6:	01 c0       	rjmp	.+2      	; 0xa1ca <CallbackHandler+0x1de>
                        event_id = LIN_LLD_NODATA_TIMEOUT;
                        CALLBACK_HANDLER(iii, (event_id), (id));
                    }
                }
            }
            break;
    a1c8:	00 00       	nop
        default:
            /* do nothing */
            break;
    }

    prot_state_ptr->idle_timeout_cnt = prot_user_config_ptr->max_idle_timeout_cnt;
    a1ca:	8d 81       	ldd	r24, Y+5	; 0x05
    a1cc:	9e 81       	ldd	r25, Y+6	; 0x06
    a1ce:	fc 01       	movw	r30, r24
    a1d0:	24 85       	ldd	r18, Z+12	; 0x0c
    a1d2:	35 85       	ldd	r19, Z+13	; 0x0d
    a1d4:	8f 81       	ldd	r24, Y+7	; 0x07
    a1d6:	98 85       	ldd	r25, Y+8	; 0x08
    a1d8:	fc 01       	movw	r30, r24
    a1da:	23 8b       	std	Z+19, r18	; 0x13
    a1dc:	34 8b       	std	Z+20, r19	; 0x14
    /*
    * @violates MISRA 2012 Advisory Rule 8.13 Advisory
    */
}
    a1de:	00 00       	nop
    a1e0:	60 96       	adiw	r28, 0x10	; 16
    a1e2:	cd bf       	out	0x3d, r28	; 61
    a1e4:	de bf       	out	0x3e, r29	; 62
    a1e6:	df 91       	pop	r29
    a1e8:	cf 91       	pop	r28
    a1ea:	08 95       	ret

0000a1ec <ld_init>:
{

    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_tx_queue.queue_status);
}
    a1ec:	cf 93       	push	r28
    a1ee:	df 93       	push	r29
    a1f0:	cd b7       	in	r28, 0x3d	; 61
    a1f2:	de b7       	in	r29, 0x3e	; 62
    a1f4:	29 97       	sbiw	r28, 0x09	; 9
    a1f6:	cd bf       	out	0x3d, r28	; 61
    a1f8:	de bf       	out	0x3e, r29	; 62
    a1fa:	89 87       	std	Y+9, r24	; 0x09
    a1fc:	89 85       	ldd	r24, Y+9	; 0x09
    a1fe:	28 2f       	mov	r18, r24
    a200:	30 e0       	ldi	r19, 0x00	; 0
    a202:	44 e3       	ldi	r20, 0x34	; 52
    a204:	42 9f       	mul	r20, r18
    a206:	c0 01       	movw	r24, r0
    a208:	43 9f       	mul	r20, r19
    a20a:	90 0d       	add	r25, r0
    a20c:	11 24       	eor	r1, r1
    a20e:	83 59       	subi	r24, 0x93	; 147
    a210:	99 4b       	sbci	r25, 0xB9	; 185
    a212:	8b 83       	std	Y+3, r24	; 0x03
    a214:	9c 83       	std	Y+4, r25	; 0x04
    a216:	89 85       	ldd	r24, Y+9	; 0x09
    a218:	28 2f       	mov	r18, r24
    a21a:	30 e0       	ldi	r19, 0x00	; 0
    a21c:	4c e1       	ldi	r20, 0x1C	; 28
    a21e:	42 9f       	mul	r20, r18
    a220:	c0 01       	movw	r24, r0
    a222:	43 9f       	mul	r20, r19
    a224:	90 0d       	add	r25, r0
    a226:	11 24       	eor	r1, r1
    a228:	8c 54       	subi	r24, 0x4C	; 76
    a22a:	9d 4b       	sbci	r25, 0xBD	; 189
    a22c:	fc 01       	movw	r30, r24
    a22e:	80 81       	ld	r24, Z
    a230:	91 81       	ldd	r25, Z+1	; 0x01
    a232:	8d 83       	std	Y+5, r24	; 0x05
    a234:	9e 83       	std	Y+6, r25	; 0x06
    a236:	8d 81       	ldd	r24, Y+5	; 0x05
    a238:	9e 81       	ldd	r25, Y+6	; 0x06
    a23a:	07 97       	sbiw	r24, 0x07	; 7
    a23c:	28 f4       	brcc	.+10     	; 0xa248 <ld_init+0x5c>
    a23e:	81 e0       	ldi	r24, 0x01	; 1
    a240:	90 e0       	ldi	r25, 0x00	; 0
    a242:	89 83       	std	Y+1, r24	; 0x01
    a244:	9a 83       	std	Y+2, r25	; 0x02
    a246:	3a c0       	rjmp	.+116    	; 0xa2bc <ld_init+0xd0>
    a248:	8d 81       	ldd	r24, Y+5	; 0x05
    a24a:	9e 81       	ldd	r25, Y+6	; 0x06
    a24c:	ac 01       	movw	r20, r24
    a24e:	45 50       	subi	r20, 0x05	; 5
    a250:	51 09       	sbc	r21, r1
    a252:	9a 01       	movw	r18, r20
    a254:	ab ea       	ldi	r26, 0xAB	; 171
    a256:	ba ea       	ldi	r27, 0xAA	; 170
    a258:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <__umulhisi3>
    a25c:	9c 01       	movw	r18, r24
    a25e:	36 95       	lsr	r19
    a260:	27 95       	ror	r18
    a262:	36 95       	lsr	r19
    a264:	27 95       	ror	r18
    a266:	c9 01       	movw	r24, r18
    a268:	88 0f       	add	r24, r24
    a26a:	99 1f       	adc	r25, r25
    a26c:	82 0f       	add	r24, r18
    a26e:	93 1f       	adc	r25, r19
    a270:	88 0f       	add	r24, r24
    a272:	99 1f       	adc	r25, r25
    a274:	9a 01       	movw	r18, r20
    a276:	28 1b       	sub	r18, r24
    a278:	39 0b       	sbc	r19, r25
    a27a:	23 2b       	or	r18, r19
    a27c:	81 f4       	brne	.+32     	; 0xa29e <ld_init+0xb2>
    a27e:	8d 81       	ldd	r24, Y+5	; 0x05
    a280:	9e 81       	ldd	r25, Y+6	; 0x06
    a282:	05 97       	sbiw	r24, 0x05	; 5
    a284:	9c 01       	movw	r18, r24
    a286:	ab ea       	ldi	r26, 0xAB	; 171
    a288:	ba ea       	ldi	r27, 0xAA	; 170
    a28a:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <__umulhisi3>
    a28e:	96 95       	lsr	r25
    a290:	87 95       	ror	r24
    a292:	96 95       	lsr	r25
    a294:	87 95       	ror	r24
    a296:	01 96       	adiw	r24, 0x01	; 1
    a298:	89 83       	std	Y+1, r24	; 0x01
    a29a:	9a 83       	std	Y+2, r25	; 0x02
    a29c:	0f c0       	rjmp	.+30     	; 0xa2bc <ld_init+0xd0>
    a29e:	8d 81       	ldd	r24, Y+5	; 0x05
    a2a0:	9e 81       	ldd	r25, Y+6	; 0x06
    a2a2:	05 97       	sbiw	r24, 0x05	; 5
    a2a4:	9c 01       	movw	r18, r24
    a2a6:	ab ea       	ldi	r26, 0xAB	; 171
    a2a8:	ba ea       	ldi	r27, 0xAA	; 170
    a2aa:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <__umulhisi3>
    a2ae:	96 95       	lsr	r25
    a2b0:	87 95       	ror	r24
    a2b2:	96 95       	lsr	r25
    a2b4:	87 95       	ror	r24
    a2b6:	02 96       	adiw	r24, 0x02	; 2
    a2b8:	89 83       	std	Y+1, r24	; 0x01
    a2ba:	9a 83       	std	Y+2, r25	; 0x02
    a2bc:	89 85       	ldd	r24, Y+9	; 0x09
    a2be:	28 2f       	mov	r18, r24
    a2c0:	30 e0       	ldi	r19, 0x00	; 0
    a2c2:	4c e1       	ldi	r20, 0x1C	; 28
    a2c4:	42 9f       	mul	r20, r18
    a2c6:	c0 01       	movw	r24, r0
    a2c8:	43 9f       	mul	r20, r19
    a2ca:	90 0d       	add	r25, r0
    a2cc:	11 24       	eor	r1, r1
    a2ce:	80 55       	subi	r24, 0x50	; 80
    a2d0:	9d 4b       	sbci	r25, 0xBD	; 189
    a2d2:	fc 01       	movw	r30, r24
    a2d4:	20 81       	ld	r18, Z
    a2d6:	31 81       	ldd	r19, Z+1	; 0x01
    a2d8:	8b 81       	ldd	r24, Y+3	; 0x03
    a2da:	9c 81       	ldd	r25, Y+4	; 0x04
    a2dc:	fc 01       	movw	r30, r24
    a2de:	21 87       	std	Z+9, r18	; 0x09
    a2e0:	32 87       	std	Z+10, r19	; 0x0a
    a2e2:	89 85       	ldd	r24, Y+9	; 0x09
    a2e4:	28 2f       	mov	r18, r24
    a2e6:	30 e0       	ldi	r19, 0x00	; 0
    a2e8:	4c e1       	ldi	r20, 0x1C	; 28
    a2ea:	42 9f       	mul	r20, r18
    a2ec:	c0 01       	movw	r24, r0
    a2ee:	43 9f       	mul	r20, r19
    a2f0:	90 0d       	add	r25, r0
    a2f2:	11 24       	eor	r1, r1
    a2f4:	8e 54       	subi	r24, 0x4E	; 78
    a2f6:	9d 4b       	sbci	r25, 0xBD	; 189
    a2f8:	fc 01       	movw	r30, r24
    a2fa:	20 81       	ld	r18, Z
    a2fc:	31 81       	ldd	r19, Z+1	; 0x01
    a2fe:	8b 81       	ldd	r24, Y+3	; 0x03
    a300:	9c 81       	ldd	r25, Y+4	; 0x04
    a302:	fc 01       	movw	r30, r24
    a304:	24 8b       	std	Z+20, r18	; 0x14
    a306:	35 8b       	std	Z+21, r19	; 0x15
    a308:	89 85       	ldd	r24, Y+9	; 0x09
    a30a:	28 2f       	mov	r18, r24
    a30c:	30 e0       	ldi	r19, 0x00	; 0
    a30e:	c9 01       	movw	r24, r18
    a310:	88 0f       	add	r24, r24
    a312:	99 1f       	adc	r25, r25
    a314:	88 0f       	add	r24, r24
    a316:	99 1f       	adc	r25, r25
    a318:	82 0f       	add	r24, r18
    a31a:	93 1f       	adc	r25, r19
    a31c:	9c 01       	movw	r18, r24
    a31e:	23 5b       	subi	r18, 0xB3	; 179
    a320:	3a 4b       	sbci	r19, 0xBA	; 186
    a322:	8b 81       	ldd	r24, Y+3	; 0x03
    a324:	9c 81       	ldd	r25, Y+4	; 0x04
    a326:	fc 01       	movw	r30, r24
    a328:	22 a3       	std	Z+34, r18	; 0x22
    a32a:	33 a3       	std	Z+35, r19	; 0x23
    a32c:	8b 81       	ldd	r24, Y+3	; 0x03
    a32e:	9c 81       	ldd	r25, Y+4	; 0x04
    a330:	29 81       	ldd	r18, Y+1	; 0x01
    a332:	3a 81       	ldd	r19, Y+2	; 0x02
    a334:	fc 01       	movw	r30, r24
    a336:	27 83       	std	Z+7, r18	; 0x07
    a338:	30 87       	std	Z+8, r19	; 0x08
    a33a:	8b 81       	ldd	r24, Y+3	; 0x03
    a33c:	9c 81       	ldd	r25, Y+4	; 0x04
    a33e:	29 81       	ldd	r18, Y+1	; 0x01
    a340:	3a 81       	ldd	r19, Y+2	; 0x02
    a342:	fc 01       	movw	r30, r24
    a344:	22 8b       	std	Z+18, r18	; 0x12
    a346:	33 8b       	std	Z+19, r19	; 0x13
    a348:	8b 81       	ldd	r24, Y+3	; 0x03
    a34a:	9c 81       	ldd	r25, Y+4	; 0x04
    a34c:	8f 83       	std	Y+7, r24	; 0x07
    a34e:	98 87       	std	Y+8, r25	; 0x08
    a350:	8f 81       	ldd	r24, Y+7	; 0x07
    a352:	98 85       	ldd	r25, Y+8	; 0x08
    a354:	fc 01       	movw	r30, r24
    a356:	10 82       	st	Z, r1
    a358:	11 82       	std	Z+1, r1	; 0x01
    a35a:	8f 81       	ldd	r24, Y+7	; 0x07
    a35c:	98 85       	ldd	r25, Y+8	; 0x08
    a35e:	fc 01       	movw	r30, r24
    a360:	12 82       	std	Z+2, r1	; 0x02
    a362:	13 82       	std	Z+3, r1	; 0x03
    a364:	8f 81       	ldd	r24, Y+7	; 0x07
    a366:	98 85       	ldd	r25, Y+8	; 0x08
    a368:	25 e0       	ldi	r18, 0x05	; 5
    a36a:	fc 01       	movw	r30, r24
    a36c:	24 83       	std	Z+4, r18	; 0x04
    a36e:	8f 81       	ldd	r24, Y+7	; 0x07
    a370:	98 85       	ldd	r25, Y+8	; 0x08
    a372:	fc 01       	movw	r30, r24
    a374:	15 82       	std	Z+5, r1	; 0x05
    a376:	16 82       	std	Z+6, r1	; 0x06
    a378:	8b 81       	ldd	r24, Y+3	; 0x03
    a37a:	9c 81       	ldd	r25, Y+4	; 0x04
    a37c:	0b 96       	adiw	r24, 0x0b	; 11
    a37e:	8f 83       	std	Y+7, r24	; 0x07
    a380:	98 87       	std	Y+8, r25	; 0x08
    a382:	8f 81       	ldd	r24, Y+7	; 0x07
    a384:	98 85       	ldd	r25, Y+8	; 0x08
    a386:	fc 01       	movw	r30, r24
    a388:	10 82       	st	Z, r1
    a38a:	11 82       	std	Z+1, r1	; 0x01
    a38c:	8f 81       	ldd	r24, Y+7	; 0x07
    a38e:	98 85       	ldd	r25, Y+8	; 0x08
    a390:	fc 01       	movw	r30, r24
    a392:	12 82       	std	Z+2, r1	; 0x02
    a394:	13 82       	std	Z+3, r1	; 0x03
    a396:	8f 81       	ldd	r24, Y+7	; 0x07
    a398:	98 85       	ldd	r25, Y+8	; 0x08
    a39a:	fc 01       	movw	r30, r24
    a39c:	14 82       	std	Z+4, r1	; 0x04
    a39e:	8f 81       	ldd	r24, Y+7	; 0x07
    a3a0:	98 85       	ldd	r25, Y+8	; 0x08
    a3a2:	fc 01       	movw	r30, r24
    a3a4:	15 82       	std	Z+5, r1	; 0x05
    a3a6:	16 82       	std	Z+6, r1	; 0x06
    a3a8:	8b 81       	ldd	r24, Y+3	; 0x03
    a3aa:	9c 81       	ldd	r25, Y+4	; 0x04
    a3ac:	22 e0       	ldi	r18, 0x02	; 2
    a3ae:	fc 01       	movw	r30, r24
    a3b0:	26 8b       	std	Z+22, r18	; 0x16
    a3b2:	8b 81       	ldd	r24, Y+3	; 0x03
    a3b4:	9c 81       	ldd	r25, Y+4	; 0x04
    a3b6:	22 e0       	ldi	r18, 0x02	; 2
    a3b8:	fc 01       	movw	r30, r24
    a3ba:	21 8f       	std	Z+25, r18	; 0x19
    a3bc:	8b 81       	ldd	r24, Y+3	; 0x03
    a3be:	9c 81       	ldd	r25, Y+4	; 0x04
    a3c0:	fc 01       	movw	r30, r24
    a3c2:	14 8e       	std	Z+28, r1	; 0x1c
    a3c4:	8b 81       	ldd	r24, Y+3	; 0x03
    a3c6:	9c 81       	ldd	r25, Y+4	; 0x04
    a3c8:	fc 01       	movw	r30, r24
    a3ca:	15 8e       	std	Z+29, r1	; 0x1d
    a3cc:	8b 81       	ldd	r24, Y+3	; 0x03
    a3ce:	9c 81       	ldd	r25, Y+4	; 0x04
    a3d0:	fc 01       	movw	r30, r24
    a3d2:	16 8e       	std	Z+30, r1	; 0x1e
    a3d4:	8b 81       	ldd	r24, Y+3	; 0x03
    a3d6:	9c 81       	ldd	r25, Y+4	; 0x04
    a3d8:	fc 01       	movw	r30, r24
    a3da:	15 a2       	std	Z+37, r1	; 0x25
    a3dc:	8b 81       	ldd	r24, Y+3	; 0x03
    a3de:	9c 81       	ldd	r25, Y+4	; 0x04
    a3e0:	fc 01       	movw	r30, r24
    a3e2:	14 a2       	std	Z+36, r1	; 0x24
    a3e4:	8b 81       	ldd	r24, Y+3	; 0x03
    a3e6:	9c 81       	ldd	r25, Y+4	; 0x04
    a3e8:	fc 01       	movw	r30, r24
    a3ea:	12 a6       	std	Z+42, r1	; 0x2a
    a3ec:	8b 81       	ldd	r24, Y+3	; 0x03
    a3ee:	9c 81       	ldd	r25, Y+4	; 0x04
    a3f0:	fc 01       	movw	r30, r24
    a3f2:	17 8e       	std	Z+31, r1	; 0x1f
    a3f4:	8b 81       	ldd	r24, Y+3	; 0x03
    a3f6:	9c 81       	ldd	r25, Y+4	; 0x04
    a3f8:	fc 01       	movw	r30, r24
    a3fa:	10 a2       	std	Z+32, r1	; 0x20
    a3fc:	11 a2       	std	Z+33, r1	; 0x21
    a3fe:	8b 81       	ldd	r24, Y+3	; 0x03
    a400:	9c 81       	ldd	r25, Y+4	; 0x04
    a402:	21 e0       	ldi	r18, 0x01	; 1
    a404:	fc 01       	movw	r30, r24
    a406:	26 a3       	std	Z+38, r18	; 0x26
    a408:	8b 81       	ldd	r24, Y+3	; 0x03
    a40a:	9c 81       	ldd	r25, Y+4	; 0x04
    a40c:	22 e0       	ldi	r18, 0x02	; 2
    a40e:	fc 01       	movw	r30, r24
    a410:	23 a7       	std	Z+43, r18	; 0x2b
    a412:	8b 81       	ldd	r24, Y+3	; 0x03
    a414:	9c 81       	ldd	r25, Y+4	; 0x04
    a416:	fc 01       	movw	r30, r24
    a418:	17 a2       	std	Z+39, r1	; 0x27
    a41a:	8b 81       	ldd	r24, Y+3	; 0x03
    a41c:	9c 81       	ldd	r25, Y+4	; 0x04
    a41e:	fc 01       	movw	r30, r24
    a420:	10 a6       	std	Z+40, r1	; 0x28
    a422:	11 a6       	std	Z+41, r1	; 0x29
    a424:	8b 81       	ldd	r24, Y+3	; 0x03
    a426:	9c 81       	ldd	r25, Y+4	; 0x04
    a428:	fc 01       	movw	r30, r24
    a42a:	15 a6       	std	Z+45, r1	; 0x2d
    a42c:	8b 81       	ldd	r24, Y+3	; 0x03
    a42e:	9c 81       	ldd	r25, Y+4	; 0x04
    a430:	fc 01       	movw	r30, r24
    a432:	14 a6       	std	Z+44, r1	; 0x2c
    a434:	00 00       	nop
    a436:	29 96       	adiw	r28, 0x09	; 9
    a438:	cd bf       	out	0x3d, r28	; 61
    a43a:	de bf       	out	0x3e, r29	; 62
    a43c:	df 91       	pop	r29
    a43e:	cf 91       	pop	r28
    a440:	08 95       	ret

0000a442 <ld_put_raw>:
    a442:	cf 93       	push	r28
    a444:	df 93       	push	r29
    a446:	cd b7       	in	r28, 0x3d	; 61
    a448:	de b7       	in	r29, 0x3e	; 62
    a44a:	2b 97       	sbiw	r28, 0x0b	; 11
    a44c:	cd bf       	out	0x3d, r28	; 61
    a44e:	de bf       	out	0x3e, r29	; 62
    a450:	89 87       	std	Y+9, r24	; 0x09
    a452:	6a 87       	std	Y+10, r22	; 0x0a
    a454:	7b 87       	std	Y+11, r23	; 0x0b
    a456:	89 85       	ldd	r24, Y+9	; 0x09
    a458:	28 2f       	mov	r18, r24
    a45a:	30 e0       	ldi	r19, 0x00	; 0
    a45c:	44 e3       	ldi	r20, 0x34	; 52
    a45e:	42 9f       	mul	r20, r18
    a460:	c0 01       	movw	r24, r0
    a462:	43 9f       	mul	r20, r19
    a464:	90 0d       	add	r25, r0
    a466:	11 24       	eor	r1, r1
    a468:	83 59       	subi	r24, 0x93	; 147
    a46a:	99 4b       	sbci	r25, 0xB9	; 185
    a46c:	89 83       	std	Y+1, r24	; 0x01
    a46e:	9a 83       	std	Y+2, r25	; 0x02
    a470:	89 85       	ldd	r24, Y+9	; 0x09
    a472:	28 2f       	mov	r18, r24
    a474:	30 e0       	ldi	r19, 0x00	; 0
    a476:	4c e1       	ldi	r20, 0x1C	; 28
    a478:	42 9f       	mul	r20, r18
    a47a:	c0 01       	movw	r24, r0
    a47c:	43 9f       	mul	r20, r19
    a47e:	90 0d       	add	r25, r0
    a480:	11 24       	eor	r1, r1
    a482:	86 56       	subi	r24, 0x66	; 102
    a484:	9d 4b       	sbci	r25, 0xBD	; 189
    a486:	8b 83       	std	Y+3, r24	; 0x03
    a488:	9c 83       	std	Y+4, r25	; 0x04
    a48a:	8b 81       	ldd	r24, Y+3	; 0x03
    a48c:	9c 81       	ldd	r25, Y+4	; 0x04
    a48e:	fc 01       	movw	r30, r24
    a490:	93 81       	ldd	r25, Z+3	; 0x03
    a492:	81 e0       	ldi	r24, 0x01	; 1
    a494:	89 27       	eor	r24, r25
    a496:	88 23       	and	r24, r24
    a498:	71 f1       	breq	.+92     	; 0xa4f6 <ld_put_raw+0xb4>
    a49a:	8b 81       	ldd	r24, Y+3	; 0x03
    a49c:	9c 81       	ldd	r25, Y+4	; 0x04
    a49e:	fc 01       	movw	r30, r24
    a4a0:	80 81       	ld	r24, Z
    a4a2:	88 23       	and	r24, r24
    a4a4:	41 f5       	brne	.+80     	; 0xa4f6 <ld_put_raw+0xb4>
    a4a6:	89 85       	ldd	r24, Y+9	; 0x09
    a4a8:	28 2f       	mov	r18, r24
    a4aa:	30 e0       	ldi	r19, 0x00	; 0
    a4ac:	4c e1       	ldi	r20, 0x1C	; 28
    a4ae:	42 9f       	mul	r20, r18
    a4b0:	c0 01       	movw	r24, r0
    a4b2:	43 9f       	mul	r20, r19
    a4b4:	90 0d       	add	r25, r0
    a4b6:	11 24       	eor	r1, r1
    a4b8:	84 55       	subi	r24, 0x54	; 84
    a4ba:	9d 4b       	sbci	r25, 0xBD	; 189
    a4bc:	fc 01       	movw	r30, r24
    a4be:	80 81       	ld	r24, Z
    a4c0:	28 2f       	mov	r18, r24
    a4c2:	30 e0       	ldi	r19, 0x00	; 0
    a4c4:	44 e2       	ldi	r20, 0x24	; 36
    a4c6:	42 9f       	mul	r20, r18
    a4c8:	c0 01       	movw	r24, r0
    a4ca:	43 9f       	mul	r20, r19
    a4cc:	90 0d       	add	r25, r0
    a4ce:	11 24       	eor	r1, r1
    a4d0:	8a 58       	subi	r24, 0x8A	; 138
    a4d2:	9d 4b       	sbci	r25, 0xBD	; 189
    a4d4:	8d 83       	std	Y+5, r24	; 0x05
    a4d6:	9e 83       	std	Y+6, r25	; 0x06
    a4d8:	8d 81       	ldd	r24, Y+5	; 0x05
    a4da:	9e 81       	ldd	r25, Y+6	; 0x06
    a4dc:	fc 01       	movw	r30, r24
    a4de:	23 8d       	ldd	r18, Z+27	; 0x1b
    a4e0:	34 8d       	ldd	r19, Z+28	; 0x1c
    a4e2:	89 81       	ldd	r24, Y+1	; 0x01
    a4e4:	9a 81       	ldd	r25, Y+2	; 0x02
    a4e6:	fc 01       	movw	r30, r24
    a4e8:	20 a3       	std	Z+32, r18	; 0x20
    a4ea:	31 a3       	std	Z+33, r19	; 0x21
    a4ec:	89 81       	ldd	r24, Y+1	; 0x01
    a4ee:	9a 81       	ldd	r25, Y+2	; 0x02
    a4f0:	21 e0       	ldi	r18, 0x01	; 1
    a4f2:	fc 01       	movw	r30, r24
    a4f4:	27 8f       	std	Z+31, r18	; 0x1f
    a4f6:	89 81       	ldd	r24, Y+1	; 0x01
    a4f8:	9a 81       	ldd	r25, Y+2	; 0x02
    a4fa:	8f 83       	std	Y+7, r24	; 0x07
    a4fc:	98 87       	std	Y+8, r25	; 0x08
    a4fe:	89 81       	ldd	r24, Y+1	; 0x01
    a500:	9a 81       	ldd	r25, Y+2	; 0x02
    a502:	fc 01       	movw	r30, r24
    a504:	82 a5       	ldd	r24, Z+42	; 0x2a
    a506:	21 e0       	ldi	r18, 0x01	; 1
    a508:	28 0f       	add	r18, r24
    a50a:	89 81       	ldd	r24, Y+1	; 0x01
    a50c:	9a 81       	ldd	r25, Y+2	; 0x02
    a50e:	fc 01       	movw	r30, r24
    a510:	22 a7       	std	Z+42, r18	; 0x2a
    a512:	4f 81       	ldd	r20, Y+7	; 0x07
    a514:	58 85       	ldd	r21, Y+8	; 0x08
    a516:	8a 85       	ldd	r24, Y+10	; 0x0a
    a518:	9b 85       	ldd	r25, Y+11	; 0x0b
    a51a:	20 e0       	ldi	r18, 0x00	; 0
    a51c:	bc 01       	movw	r22, r24
    a51e:	89 85       	ldd	r24, Y+9	; 0x09
    a520:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <tl_put_raw>
    a524:	00 00       	nop
    a526:	2b 96       	adiw	r28, 0x0b	; 11
    a528:	cd bf       	out	0x3d, r28	; 61
    a52a:	de bf       	out	0x3e, r29	; 62
    a52c:	df 91       	pop	r29
    a52e:	cf 91       	pop	r28
    a530:	08 95       	ret

0000a532 <ld_get_raw>:
    a532:	cf 93       	push	r28
    a534:	df 93       	push	r29
    a536:	cd b7       	in	r28, 0x3d	; 61
    a538:	de b7       	in	r29, 0x3e	; 62
    a53a:	25 97       	sbiw	r28, 0x05	; 5
    a53c:	cd bf       	out	0x3d, r28	; 61
    a53e:	de bf       	out	0x3e, r29	; 62
    a540:	8b 83       	std	Y+3, r24	; 0x03
    a542:	6c 83       	std	Y+4, r22	; 0x04
    a544:	7d 83       	std	Y+5, r23	; 0x05
    a546:	8b 81       	ldd	r24, Y+3	; 0x03
    a548:	28 2f       	mov	r18, r24
    a54a:	30 e0       	ldi	r19, 0x00	; 0
    a54c:	44 e3       	ldi	r20, 0x34	; 52
    a54e:	42 9f       	mul	r20, r18
    a550:	c0 01       	movw	r24, r0
    a552:	43 9f       	mul	r20, r19
    a554:	90 0d       	add	r25, r0
    a556:	11 24       	eor	r1, r1
    a558:	0b 96       	adiw	r24, 0x0b	; 11
    a55a:	83 59       	subi	r24, 0x93	; 147
    a55c:	99 4b       	sbci	r25, 0xB9	; 185
    a55e:	89 83       	std	Y+1, r24	; 0x01
    a560:	9a 83       	std	Y+2, r25	; 0x02
    a562:	49 81       	ldd	r20, Y+1	; 0x01
    a564:	5a 81       	ldd	r21, Y+2	; 0x02
    a566:	8c 81       	ldd	r24, Y+4	; 0x04
    a568:	9d 81       	ldd	r25, Y+5	; 0x05
    a56a:	21 e0       	ldi	r18, 0x01	; 1
    a56c:	bc 01       	movw	r22, r24
    a56e:	8b 81       	ldd	r24, Y+3	; 0x03
    a570:	0e 94 4d 5a 	call	0xb49a	; 0xb49a <tl_get_raw>
    a574:	00 00       	nop
    a576:	25 96       	adiw	r28, 0x05	; 5
    a578:	cd bf       	out	0x3d, r28	; 61
    a57a:	de bf       	out	0x3e, r29	; 62
    a57c:	df 91       	pop	r29
    a57e:	cf 91       	pop	r28
    a580:	08 95       	ret

0000a582 <ld_raw_rx_status>:
 * Description   : Get the status of the raw frame receive function.
 *
 * Implements    : ld_raw_rx_status_Activity
 *END**************************************************************************/
l_u8 ld_raw_rx_status(l_ifc_handle iii)
{
    a582:	cf 93       	push	r28
    a584:	df 93       	push	r29
    a586:	1f 92       	push	r1
    a588:	cd b7       	in	r28, 0x3d	; 61
    a58a:	de b7       	in	r29, 0x3e	; 62
    a58c:	89 83       	std	Y+1, r24	; 0x01
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_rx_queue.queue_status);
    a58e:	89 81       	ldd	r24, Y+1	; 0x01
    a590:	28 2f       	mov	r18, r24
    a592:	30 e0       	ldi	r19, 0x00	; 0
    a594:	44 e3       	ldi	r20, 0x34	; 52
    a596:	42 9f       	mul	r20, r18
    a598:	c0 01       	movw	r24, r0
    a59a:	43 9f       	mul	r20, r19
    a59c:	90 0d       	add	r25, r0
    a59e:	11 24       	eor	r1, r1
    a5a0:	84 58       	subi	r24, 0x84	; 132
    a5a2:	99 4b       	sbci	r25, 0xB9	; 185
    a5a4:	fc 01       	movw	r30, r24
    a5a6:	80 81       	ld	r24, Z
}
    a5a8:	0f 90       	pop	r0
    a5aa:	df 91       	pop	r29
    a5ac:	cf 91       	pop	r28
    a5ae:	08 95       	ret

0000a5b0 <lin_tl_callback_handler>:
 * Implements    : lin_tl_callback_handler_Activity
 *END**************************************************************************/
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    a5b0:	cf 93       	push	r28
    a5b2:	df 93       	push	r29
    a5b4:	cd b7       	in	r28, 0x3d	; 61
    a5b6:	de b7       	in	r29, 0x3e	; 62
    a5b8:	26 97       	sbiw	r28, 0x06	; 6
    a5ba:	cd bf       	out	0x3d, r28	; 61
    a5bc:	de bf       	out	0x3e, r29	; 62
    a5be:	8c 83       	std	Y+4, r24	; 0x04
    a5c0:	6d 83       	std	Y+5, r22	; 0x05
    a5c2:	4e 83       	std	Y+6, r20	; 0x06
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a5c4:	8c 81       	ldd	r24, Y+4	; 0x04
    a5c6:	28 2f       	mov	r18, r24
    a5c8:	30 e0       	ldi	r19, 0x00	; 0
    a5ca:	44 e3       	ldi	r20, 0x34	; 52
    a5cc:	42 9f       	mul	r20, r18
    a5ce:	c0 01       	movw	r24, r0
    a5d0:	43 9f       	mul	r20, r19
    a5d2:	90 0d       	add	r25, r0
    a5d4:	11 24       	eor	r1, r1
    a5d6:	83 59       	subi	r24, 0x93	; 147
    a5d8:	99 4b       	sbci	r25, 0xB9	; 185
    a5da:	8a 83       	std	Y+2, r24	; 0x02
    a5dc:	9b 83       	std	Y+3, r25	; 0x03
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    a5de:	19 82       	std	Y+1, r1	; 0x01

    switch (tl_event_id)
    a5e0:	8d 81       	ldd	r24, Y+5	; 0x05
    a5e2:	88 2f       	mov	r24, r24
    a5e4:	90 e0       	ldi	r25, 0x00	; 0
    a5e6:	09 2e       	mov	r0, r25
    a5e8:	00 0c       	add	r0, r0
    a5ea:	aa 0b       	sbc	r26, r26
    a5ec:	bb 0b       	sbc	r27, r27
    a5ee:	40 e0       	ldi	r20, 0x00	; 0
    a5f0:	50 e0       	ldi	r21, 0x00	; 0
    a5f2:	27 e0       	ldi	r18, 0x07	; 7
    a5f4:	30 e0       	ldi	r19, 0x00	; 0
    a5f6:	84 1b       	sub	r24, r20
    a5f8:	95 0b       	sbc	r25, r21
    a5fa:	28 17       	cp	r18, r24
    a5fc:	39 07       	cpc	r19, r25
    a5fe:	08 f4       	brcc	.+2      	; 0xa602 <lin_tl_callback_handler+0x52>
    a600:	4c c0       	rjmp	.+152    	; 0xa69a <lin_tl_callback_handler+0xea>
    a602:	89 54       	subi	r24, 0x49	; 73
    a604:	9b 4d       	sbci	r25, 0xDB	; 219
    a606:	fc 01       	movw	r30, r24
    a608:	0c 94 0f 7d 	jmp	0xfa1e	; 0xfa1e <__tablejump2__>
    {
        case TL_RECEIVE_MESSAGE:
            /* If ld_receive_message is called and first frame in multi PDU is not transmitted */
            if ((tl_desc_ptr->rx_msg_status == LD_IN_PROGRESS) && (tl_desc_ptr->FF_pdu_received == false))
    a60c:	8a 81       	ldd	r24, Y+2	; 0x02
    a60e:	9b 81       	ldd	r25, Y+3	; 0x03
    a610:	fc 01       	movw	r30, r24
    a612:	86 89       	ldd	r24, Z+22	; 0x16
    a614:	81 30       	cpi	r24, 0x01	; 1
    a616:	09 f0       	breq	.+2      	; 0xa61a <lin_tl_callback_handler+0x6a>
    a618:	42 c0       	rjmp	.+132    	; 0xa69e <lin_tl_callback_handler+0xee>
    a61a:	8a 81       	ldd	r24, Y+2	; 0x02
    a61c:	9b 81       	ldd	r25, Y+3	; 0x03
    a61e:	fc 01       	movw	r30, r24
    a620:	95 a5       	ldd	r25, Z+45	; 0x2d
    a622:	81 e0       	ldi	r24, 0x01	; 1
    a624:	89 27       	eor	r24, r25
    a626:	88 23       	and	r24, r24
    a628:	d1 f1       	breq	.+116    	; 0xa69e <lin_tl_callback_handler+0xee>
            {
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
    a62a:	8a 81       	ldd	r24, Y+2	; 0x02
    a62c:	9b 81       	ldd	r25, Y+3	; 0x03
    a62e:	21 e0       	ldi	r18, 0x01	; 1
    a630:	fc 01       	movw	r30, r24
    a632:	24 a7       	std	Z+44, r18	; 0x2c
            }
            break;
    a634:	34 c0       	rjmp	.+104    	; 0xa69e <lin_tl_callback_handler+0xee>
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
    a636:	8c 81       	ldd	r24, Y+4	; 0x04
    a638:	0e 94 23 57 	call	0xae46	; 0xae46 <lin_tl_make_master_request_pdu>
            break;
    a63c:	31 c0       	rjmp	.+98     	; 0xa6a0 <lin_tl_callback_handler+0xf0>
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
    a63e:	8a 81       	ldd	r24, Y+2	; 0x02
    a640:	9b 81       	ldd	r25, Y+3	; 0x03
    a642:	fc 01       	movw	r30, r24
    a644:	82 a5       	ldd	r24, Z+42	; 0x2a
    a646:	88 23       	and	r24, r24
    a648:	a1 f0       	breq	.+40     	; 0xa672 <lin_tl_callback_handler+0xc2>
    a64a:	8a 81       	ldd	r24, Y+2	; 0x02
    a64c:	9b 81       	ldd	r25, Y+3	; 0x03
    a64e:	fc 01       	movw	r30, r24
    a650:	83 a5       	ldd	r24, Z+43	; 0x2b
    a652:	83 30       	cpi	r24, 0x03	; 3
    a654:	71 f0       	breq	.+28     	; 0xa672 <lin_tl_callback_handler+0xc2>
            {
                tl_desc_ptr->slave_resp_cnt--;
    a656:	8a 81       	ldd	r24, Y+2	; 0x02
    a658:	9b 81       	ldd	r25, Y+3	; 0x03
    a65a:	fc 01       	movw	r30, r24
    a65c:	82 a5       	ldd	r24, Z+42	; 0x2a
    a65e:	2f ef       	ldi	r18, 0xFF	; 255
    a660:	28 0f       	add	r18, r24
    a662:	8a 81       	ldd	r24, Y+2	; 0x02
    a664:	9b 81       	ldd	r25, Y+3	; 0x03
    a666:	fc 01       	movw	r30, r24
    a668:	22 a7       	std	Z+42, r18	; 0x2a
                lin_tl_get_pdu(iii);
    a66a:	8c 81       	ldd	r24, Y+4	; 0x04
    a66c:	0e 94 59 57 	call	0xaeb2	; 0xaeb2 <lin_tl_get_pdu>
            }
            else
            {
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
    a670:	17 c0       	rjmp	.+46     	; 0xa6a0 <lin_tl_callback_handler+0xf0>
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
            }
            else
            {
                ret_val = TL_ACTION_ID_IGNORE;
    a672:	81 e0       	ldi	r24, 0x01	; 1
    a674:	89 83       	std	Y+1, r24	; 0x01
            }
            break;
    a676:	14 c0       	rjmp	.+40     	; 0xa6a0 <lin_tl_callback_handler+0xf0>
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
    a678:	8c 81       	ldd	r24, Y+4	; 0x04
    a67a:	0e 94 4d 58 	call	0xb09a	; 0xb09a <lin_tl_handler_tx_completed>
            break;
    a67e:	10 c0       	rjmp	.+32     	; 0xa6a0 <lin_tl_callback_handler+0xf0>
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
    a680:	8c 81       	ldd	r24, Y+4	; 0x04
    a682:	0e 94 83 57 	call	0xaf06	; 0xaf06 <lin_tl_handler_rx_completed>
            break;
    a686:	0c c0       	rjmp	.+24     	; 0xa6a0 <lin_tl_callback_handler+0xf0>
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
    a688:	6e 81       	ldd	r22, Y+6	; 0x06
    a68a:	8c 81       	ldd	r24, Y+4	; 0x04
    a68c:	0e 94 bc 56 	call	0xad78	; 0xad78 <lin_tl_handler_error>
            break;
    a690:	07 c0       	rjmp	.+14     	; 0xa6a0 <lin_tl_callback_handler+0xf0>
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
    a692:	8c 81       	ldd	r24, Y+4	; 0x04
    a694:	0e 94 57 53 	call	0xa6ae	; 0xa6ae <lin_tl_handle_timeout>
            break;
    a698:	03 c0       	rjmp	.+6      	; 0xa6a0 <lin_tl_callback_handler+0xf0>
            lin_tl_handle_interleave_mode(iii);
            break;
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        default:
            /* Do nothing */
            break;
    a69a:	00 00       	nop
    a69c:	01 c0       	rjmp	.+2      	; 0xa6a0 <lin_tl_callback_handler+0xf0>
            if ((tl_desc_ptr->rx_msg_status == LD_IN_PROGRESS) && (tl_desc_ptr->FF_pdu_received == false))
            {
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
            }
            break;
    a69e:	00 00       	nop
        default:
            /* Do nothing */
            break;
    }

    return ret_val;
    a6a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    a6a2:	26 96       	adiw	r28, 0x06	; 6
    a6a4:	cd bf       	out	0x3d, r28	; 61
    a6a6:	de bf       	out	0x3e, r29	; 62
    a6a8:	df 91       	pop	r29
    a6aa:	cf 91       	pop	r28
    a6ac:	08 95       	ret

0000a6ae <lin_tl_handle_timeout>:
 * Description   : This function handle when N_CR, N_AS or DIAGNOSTIC INTERLEAVE time out occur
 *
 * Implements    : lin_tl_handle_timeout_Activity
 *END**************************************************************************/
static void lin_tl_handle_timeout(l_ifc_handle iii)
{
    a6ae:	cf 93       	push	r28
    a6b0:	df 93       	push	r29
    a6b2:	cd b7       	in	r28, 0x3d	; 61
    a6b4:	de b7       	in	r29, 0x3e	; 62
    a6b6:	25 97       	sbiw	r28, 0x05	; 5
    a6b8:	cd bf       	out	0x3d, r28	; 61
    a6ba:	de bf       	out	0x3e, r29	; 62
    a6bc:	8d 83       	std	Y+5, r24	; 0x05
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a6be:	8d 81       	ldd	r24, Y+5	; 0x05
    a6c0:	28 2f       	mov	r18, r24
    a6c2:	30 e0       	ldi	r19, 0x00	; 0
    a6c4:	44 e3       	ldi	r20, 0x34	; 52
    a6c6:	42 9f       	mul	r20, r18
    a6c8:	c0 01       	movw	r24, r0
    a6ca:	43 9f       	mul	r20, r19
    a6cc:	90 0d       	add	r25, r0
    a6ce:	11 24       	eor	r1, r1
    a6d0:	83 59       	subi	r24, 0x93	; 147
    a6d2:	99 4b       	sbci	r25, 0xB9	; 185
    a6d4:	89 83       	std	Y+1, r24	; 0x01
    a6d6:	9a 83       	std	Y+2, r25	; 0x02
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    a6d8:	8d 81       	ldd	r24, Y+5	; 0x05
    a6da:	28 2f       	mov	r18, r24
    a6dc:	30 e0       	ldi	r19, 0x00	; 0
    a6de:	46 e1       	ldi	r20, 0x16	; 22
    a6e0:	42 9f       	mul	r20, r18
    a6e2:	c0 01       	movw	r24, r0
    a6e4:	43 9f       	mul	r20, r19
    a6e6:	90 0d       	add	r25, r0
    a6e8:	11 24       	eor	r1, r1
    a6ea:	8f 55       	subi	r24, 0x5F	; 95
    a6ec:	99 4b       	sbci	r25, 0xB9	; 185
    a6ee:	8b 83       	std	Y+3, r24	; 0x03
    a6f0:	9c 83       	std	Y+4, r25	; 0x04
    #if (SUPPORT_MASTER_MODE == 1U)
    const lin_master_data_t * master_data_ptr;
    const lin_schedule_t * active_schedule_struct_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    if (LD_CHECK_N_CR_TIMEOUT == tl_desc_ptr->check_timeout_type)
    a6f2:	89 81       	ldd	r24, Y+1	; 0x01
    a6f4:	9a 81       	ldd	r25, Y+2	; 0x02
    a6f6:	fc 01       	movw	r30, r24
    a6f8:	87 8d       	ldd	r24, Z+31	; 0x1f
    a6fa:	82 30       	cpi	r24, 0x02	; 2
    a6fc:	71 f5       	brne	.+92     	; 0xa75a <lin_tl_handle_timeout+0xac>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    a6fe:	89 81       	ldd	r24, Y+1	; 0x01
    a700:	9a 81       	ldd	r25, Y+2	; 0x02
    a702:	fc 01       	movw	r30, r24
    a704:	80 a1       	ldd	r24, Z+32	; 0x20
    a706:	91 a1       	ldd	r25, Z+33	; 0x21
    a708:	ac 01       	movw	r20, r24
    a70a:	41 50       	subi	r20, 0x01	; 1
    a70c:	51 09       	sbc	r21, r1
    a70e:	29 81       	ldd	r18, Y+1	; 0x01
    a710:	3a 81       	ldd	r19, Y+2	; 0x02
    a712:	f9 01       	movw	r30, r18
    a714:	40 a3       	std	Z+32, r20	; 0x20
    a716:	51 a3       	std	Z+33, r21	; 0x21
    a718:	89 2b       	or	r24, r25
    a71a:	f9 f4       	brne	.+62     	; 0xa75a <lin_tl_handle_timeout+0xac>
        {
            /* Update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    a71c:	8b 81       	ldd	r24, Y+3	; 0x03
    a71e:	9c 81       	ldd	r25, Y+4	; 0x04
    a720:	fc 01       	movw	r30, r24
    a722:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    a724:	89 81       	ldd	r24, Y+1	; 0x01
    a726:	9a 81       	ldd	r25, Y+2	; 0x02
    a728:	23 e0       	ldi	r18, 0x03	; 3
    a72a:	fc 01       	movw	r30, r24
    a72c:	23 a7       	std	Z+43, r18	; 0x2b
            tl_desc_ptr->rx_msg_status = LD_N_CR_TIMEOUT;
    a72e:	89 81       	ldd	r24, Y+1	; 0x01
    a730:	9a 81       	ldd	r25, Y+2	; 0x02
    a732:	25 e0       	ldi	r18, 0x05	; 5
    a734:	fc 01       	movw	r30, r24
    a736:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->ld_return_data = false;
    a738:	89 81       	ldd	r24, Y+1	; 0x01
    a73a:	9a 81       	ldd	r25, Y+2	; 0x02
    a73c:	fc 01       	movw	r30, r24
    a73e:	14 a6       	std	Z+44, r1	; 0x2c
            tl_desc_ptr->FF_pdu_received = false;
    a740:	89 81       	ldd	r24, Y+1	; 0x01
    a742:	9a 81       	ldd	r25, Y+2	; 0x02
    a744:	fc 01       	movw	r30, r24
    a746:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    a748:	89 81       	ldd	r24, Y+1	; 0x01
    a74a:	9a 81       	ldd	r25, Y+2	; 0x02
    a74c:	fc 01       	movw	r30, r24
    a74e:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    a750:	89 81       	ldd	r24, Y+1	; 0x01
    a752:	9a 81       	ldd	r25, Y+2	; 0x02
    a754:	21 e0       	ldi	r18, 0x01	; 1
    a756:	fc 01       	movw	r30, r24
    a758:	26 a3       	std	Z+38, r18	; 0x26
        }
    }

    if (LD_CHECK_N_AS_TIMEOUT == tl_desc_ptr->check_timeout_type)
    a75a:	89 81       	ldd	r24, Y+1	; 0x01
    a75c:	9a 81       	ldd	r25, Y+2	; 0x02
    a75e:	fc 01       	movw	r30, r24
    a760:	87 8d       	ldd	r24, Z+31	; 0x1f
    a762:	81 30       	cpi	r24, 0x01	; 1
    a764:	31 f5       	brne	.+76     	; 0xa7b2 <lin_tl_handle_timeout+0x104>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    a766:	89 81       	ldd	r24, Y+1	; 0x01
    a768:	9a 81       	ldd	r25, Y+2	; 0x02
    a76a:	fc 01       	movw	r30, r24
    a76c:	80 a1       	ldd	r24, Z+32	; 0x20
    a76e:	91 a1       	ldd	r25, Z+33	; 0x21
    a770:	ac 01       	movw	r20, r24
    a772:	41 50       	subi	r20, 0x01	; 1
    a774:	51 09       	sbc	r21, r1
    a776:	29 81       	ldd	r18, Y+1	; 0x01
    a778:	3a 81       	ldd	r19, Y+2	; 0x02
    a77a:	f9 01       	movw	r30, r18
    a77c:	40 a3       	std	Z+32, r20	; 0x20
    a77e:	51 a3       	std	Z+33, r21	; 0x21
    a780:	89 2b       	or	r24, r25
    a782:	b9 f4       	brne	.+46     	; 0xa7b2 <lin_tl_handle_timeout+0x104>
        {
            /* update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    a784:	8b 81       	ldd	r24, Y+3	; 0x03
    a786:	9c 81       	ldd	r25, Y+4	; 0x04
    a788:	fc 01       	movw	r30, r24
    a78a:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    a78c:	89 81       	ldd	r24, Y+1	; 0x01
    a78e:	9a 81       	ldd	r25, Y+2	; 0x02
    a790:	23 e0       	ldi	r18, 0x03	; 3
    a792:	fc 01       	movw	r30, r24
    a794:	23 a7       	std	Z+43, r18	; 0x2b
            tl_desc_ptr->tx_msg_status = LD_N_AS_TIMEOUT;
    a796:	89 81       	ldd	r24, Y+1	; 0x01
    a798:	9a 81       	ldd	r25, Y+2	; 0x02
    a79a:	24 e0       	ldi	r18, 0x04	; 4
    a79c:	fc 01       	movw	r30, r24
    a79e:	21 8f       	std	Z+25, r18	; 0x19
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    a7a0:	89 81       	ldd	r24, Y+1	; 0x01
    a7a2:	9a 81       	ldd	r25, Y+2	; 0x02
    a7a4:	fc 01       	movw	r30, r24
    a7a6:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    a7a8:	89 81       	ldd	r24, Y+1	; 0x01
    a7aa:	9a 81       	ldd	r25, Y+2	; 0x02
    a7ac:	21 e0       	ldi	r18, 0x01	; 1
    a7ae:	fc 01       	movw	r30, r24
    a7b0:	26 a3       	std	Z+38, r18	; 0x26
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
            tl_desc_ptr->interleave_timeout_counter = 0U;
        }
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
}
    a7b2:	00 00       	nop
    a7b4:	25 96       	adiw	r28, 0x05	; 5
    a7b6:	cd bf       	out	0x3d, r28	; 61
    a7b8:	de bf       	out	0x3e, r29	; 62
    a7ba:	df 91       	pop	r29
    a7bc:	cf 91       	pop	r28
    a7be:	08 95       	ret

0000a7c0 <lin_process_single_frame>:
 * Description   : Process single frame.
 *
 * Implements    : lin_process_single_frame_Activity
 *END**************************************************************************/
static void lin_process_single_frame(l_ifc_handle iii)
{
    a7c0:	cf 93       	push	r28
    a7c2:	df 93       	push	r29
    a7c4:	cd b7       	in	r28, 0x3d	; 61
    a7c6:	de b7       	in	r29, 0x3e	; 62
    a7c8:	28 97       	sbiw	r28, 0x08	; 8
    a7ca:	cd bf       	out	0x3d, r28	; 61
    a7cc:	de bf       	out	0x3e, r29	; 62
    a7ce:	88 87       	std	Y+8, r24	; 0x08
    l_u8 length;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    a7d0:	88 85       	ldd	r24, Y+8	; 0x08
    a7d2:	28 2f       	mov	r18, r24
    a7d4:	30 e0       	ldi	r19, 0x00	; 0
    a7d6:	46 e1       	ldi	r20, 0x16	; 22
    a7d8:	42 9f       	mul	r20, r18
    a7da:	c0 01       	movw	r24, r0
    a7dc:	43 9f       	mul	r20, r19
    a7de:	90 0d       	add	r25, r0
    a7e0:	11 24       	eor	r1, r1
    a7e2:	8f 55       	subi	r24, 0x5F	; 95
    a7e4:	99 4b       	sbci	r25, 0xB9	; 185
    a7e6:	89 83       	std	Y+1, r24	; 0x01
    a7e8:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * data = prot_state_ptr->response_buffer_ptr;
    a7ea:	89 81       	ldd	r24, Y+1	; 0x01
    a7ec:	9a 81       	ldd	r25, Y+2	; 0x02
    a7ee:	fc 01       	movw	r30, r24
    a7f0:	82 81       	ldd	r24, Z+2	; 0x02
    a7f2:	93 81       	ldd	r25, Z+3	; 0x03
    a7f4:	8b 83       	std	Y+3, r24	; 0x03
    a7f6:	9c 83       	std	Y+4, r25	; 0x04
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a7f8:	88 85       	ldd	r24, Y+8	; 0x08
    a7fa:	28 2f       	mov	r18, r24
    a7fc:	30 e0       	ldi	r19, 0x00	; 0
    a7fe:	44 e3       	ldi	r20, 0x34	; 52
    a800:	42 9f       	mul	r20, r18
    a802:	c0 01       	movw	r24, r0
    a804:	43 9f       	mul	r20, r19
    a806:	90 0d       	add	r25, r0
    a808:	11 24       	eor	r1, r1
    a80a:	83 59       	subi	r24, 0x93	; 147
    a80c:	99 4b       	sbci	r25, 0xB9	; 185
    a80e:	8d 83       	std	Y+5, r24	; 0x05
    a810:	9e 83       	std	Y+6, r25	; 0x06
    {
        master_data_ptr = &g_lin_master_data_array[g_lin_protocol_user_cfg_array[iii].master_ifc_handle];
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    length = (l_u8)(data[1] & 0x0FU);
    a812:	8b 81       	ldd	r24, Y+3	; 0x03
    a814:	9c 81       	ldd	r25, Y+4	; 0x04
    a816:	01 96       	adiw	r24, 0x01	; 1
    a818:	fc 01       	movw	r30, r24
    a81a:	80 81       	ld	r24, Z
    a81c:	8f 70       	andi	r24, 0x0F	; 15
    a81e:	8f 83       	std	Y+7, r24	; 0x07
    /* check length of SF. If not valid, ignore this PDU */
    if (length <= 6U)
    a820:	8f 81       	ldd	r24, Y+7	; 0x07
    a822:	87 30       	cpi	r24, 0x07	; 7
    a824:	08 f0       	brcs	.+2      	; 0xa828 <lin_process_single_frame+0x68>
    a826:	53 c0       	rjmp	.+166    	; 0xa8ce <lin_process_single_frame+0x10e>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
        #if (SUPPORT_SLAVE_MODE == 1U)
            /* Slave interface */
            /* put PDU to rx queue */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    a828:	8d 81       	ldd	r24, Y+5	; 0x05
    a82a:	9e 81       	ldd	r25, Y+6	; 0x06
    a82c:	fc 01       	movw	r30, r24
    a82e:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    a830:	8d 81       	ldd	r24, Y+5	; 0x05
    a832:	9e 81       	ldd	r25, Y+6	; 0x06
    a834:	21 e0       	ldi	r18, 0x01	; 1
    a836:	fc 01       	movw	r30, r24
    a838:	23 a7       	std	Z+43, r18	; 0x2b
            /* reset queue header and queue tail */
            tl_desc_ptr->tl_rx_queue.queue_header = 0;
    a83a:	8d 81       	ldd	r24, Y+5	; 0x05
    a83c:	9e 81       	ldd	r25, Y+6	; 0x06
    a83e:	fc 01       	movw	r30, r24
    a840:	13 86       	std	Z+11, r1	; 0x0b
    a842:	14 86       	std	Z+12, r1	; 0x0c
            tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    a844:	8d 81       	ldd	r24, Y+5	; 0x05
    a846:	9e 81       	ldd	r25, Y+6	; 0x06
    a848:	fc 01       	movw	r30, r24
    a84a:	15 86       	std	Z+13, r1	; 0x0d
    a84c:	16 86       	std	Z+14, r1	; 0x0e
            tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    a84e:	8d 81       	ldd	r24, Y+5	; 0x05
    a850:	9e 81       	ldd	r25, Y+6	; 0x06
    a852:	fc 01       	movw	r30, r24
    a854:	10 8a       	std	Z+16, r1	; 0x10
    a856:	11 8a       	std	Z+17, r1	; 0x11
            tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    a858:	8d 81       	ldd	r24, Y+5	; 0x05
    a85a:	9e 81       	ldd	r25, Y+6	; 0x06
    a85c:	fc 01       	movw	r30, r24
    a85e:	17 86       	std	Z+15, r1	; 0x0f

            if (data[0] == LD_FUNCTIONAL_NAD)
    a860:	8b 81       	ldd	r24, Y+3	; 0x03
    a862:	9c 81       	ldd	r25, Y+4	; 0x04
    a864:	fc 01       	movw	r30, r24
    a866:	80 81       	ld	r24, Z
    a868:	8e 37       	cpi	r24, 0x7E	; 126
    a86a:	31 f4       	brne	.+12     	; 0xa878 <lin_process_single_frame+0xb8>
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_FUNCTIONAL;
    a86c:	8d 81       	ldd	r24, Y+5	; 0x05
    a86e:	9e 81       	ldd	r25, Y+6	; 0x06
    a870:	26 e0       	ldi	r18, 0x06	; 6
    a872:	fc 01       	movw	r30, r24
    a874:	26 a3       	std	Z+38, r18	; 0x26
    a876:	05 c0       	rjmp	.+10     	; 0xa882 <lin_process_single_frame+0xc2>
            }
            else
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    a878:	8d 81       	ldd	r24, Y+5	; 0x05
    a87a:	9e 81       	ldd	r25, Y+6	; 0x06
    a87c:	25 e0       	ldi	r18, 0x05	; 5
    a87e:	fc 01       	movw	r30, r24
    a880:	26 a3       	std	Z+38, r18	; 0x26
            }

            /* put to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    a882:	8d 81       	ldd	r24, Y+5	; 0x05
    a884:	9e 81       	ldd	r25, Y+6	; 0x06
    a886:	ac 01       	movw	r20, r24
    a888:	45 5f       	subi	r20, 0xF5	; 245
    a88a:	5f 4f       	sbci	r21, 0xFF	; 255
    a88c:	8b 81       	ldd	r24, Y+3	; 0x03
    a88e:	9c 81       	ldd	r25, Y+4	; 0x04
    a890:	21 e0       	ldi	r18, 0x01	; 1
    a892:	bc 01       	movw	r22, r24
    a894:	88 85       	ldd	r24, Y+8	; 0x08
    a896:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <tl_put_raw>
            tl_desc_ptr->frame_counter = 1;
    a89a:	8d 81       	ldd	r24, Y+5	; 0x05
    a89c:	9e 81       	ldd	r25, Y+6	; 0x06
    a89e:	21 e0       	ldi	r18, 0x01	; 1
    a8a0:	fc 01       	movw	r30, r24
    a8a2:	25 a3       	std	Z+37, r18	; 0x25
            tl_desc_ptr->num_of_pdu = 1;
    a8a4:	8d 81       	ldd	r24, Y+5	; 0x05
    a8a6:	9e 81       	ldd	r25, Y+6	; 0x06
    a8a8:	21 e0       	ldi	r18, 0x01	; 1
    a8aa:	fc 01       	movw	r30, r24
    a8ac:	24 a3       	std	Z+36, r18	; 0x24
            lin_tl_attach_service(iii);
    a8ae:	88 85       	ldd	r24, Y+8	; 0x08
    a8b0:	0e 94 d0 58 	call	0xb1a0	; 0xb1a0 <lin_tl_attach_service>
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        }

        /* If ld_receive_message() function is called before SF pdu to be sent */
        if(tl_desc_ptr->ld_return_data)
    a8b4:	8d 81       	ldd	r24, Y+5	; 0x05
    a8b6:	9e 81       	ldd	r25, Y+6	; 0x06
    a8b8:	fc 01       	movw	r30, r24
    a8ba:	84 a5       	ldd	r24, Z+44	; 0x2c
    a8bc:	88 23       	and	r24, r24
    a8be:	19 f0       	breq	.+6      	; 0xa8c6 <lin_process_single_frame+0x106>
        {
            tl_receive_message(iii);
    a8c0:	88 85       	ldd	r24, Y+8	; 0x08
    a8c2:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <tl_receive_message>
        }
        tl_desc_ptr->FF_pdu_received = false;
    a8c6:	8d 81       	ldd	r24, Y+5	; 0x05
    a8c8:	9e 81       	ldd	r25, Y+6	; 0x06
    a8ca:	fc 01       	movw	r30, r24
    a8cc:	15 a6       	std	Z+45, r1	; 0x2d
    }
}
    a8ce:	00 00       	nop
    a8d0:	28 96       	adiw	r28, 0x08	; 8
    a8d2:	cd bf       	out	0x3d, r28	; 61
    a8d4:	de bf       	out	0x3e, r29	; 62
    a8d6:	df 91       	pop	r29
    a8d8:	cf 91       	pop	r28
    a8da:	08 95       	ret

0000a8dc <lin_process_first_frame>:
 * Description   : Process first frame.
 *
 * Implements    : lin_process_first_frame_Activity
 *END**************************************************************************/
static void lin_process_first_frame(l_ifc_handle iii)
{
    a8dc:	cf 93       	push	r28
    a8de:	df 93       	push	r29
    a8e0:	cd b7       	in	r28, 0x3d	; 61
    a8e2:	de b7       	in	r29, 0x3e	; 62
    a8e4:	29 97       	sbiw	r28, 0x09	; 9
    a8e6:	cd bf       	out	0x3d, r28	; 61
    a8e8:	de bf       	out	0x3e, r29	; 62
    a8ea:	89 87       	std	Y+9, r24	; 0x09
    l_u16 length;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a8ec:	89 85       	ldd	r24, Y+9	; 0x09
    a8ee:	28 2f       	mov	r18, r24
    a8f0:	30 e0       	ldi	r19, 0x00	; 0
    a8f2:	44 e3       	ldi	r20, 0x34	; 52
    a8f4:	42 9f       	mul	r20, r18
    a8f6:	c0 01       	movw	r24, r0
    a8f8:	43 9f       	mul	r20, r19
    a8fa:	90 0d       	add	r25, r0
    a8fc:	11 24       	eor	r1, r1
    a8fe:	83 59       	subi	r24, 0x93	; 147
    a900:	99 4b       	sbci	r25, 0xB9	; 185
    a902:	89 83       	std	Y+1, r24	; 0x01
    a904:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    a906:	89 85       	ldd	r24, Y+9	; 0x09
    a908:	28 2f       	mov	r18, r24
    a90a:	30 e0       	ldi	r19, 0x00	; 0
    a90c:	46 e1       	ldi	r20, 0x16	; 22
    a90e:	42 9f       	mul	r20, r18
    a910:	c0 01       	movw	r24, r0
    a912:	43 9f       	mul	r20, r19
    a914:	90 0d       	add	r25, r0
    a916:	11 24       	eor	r1, r1
    a918:	8d 55       	subi	r24, 0x5D	; 93
    a91a:	99 4b       	sbci	r25, 0xB9	; 185
    a91c:	fc 01       	movw	r30, r24
    a91e:	80 81       	ld	r24, Z
    a920:	91 81       	ldd	r25, Z+1	; 0x01
    a922:	8b 83       	std	Y+3, r24	; 0x03
    a924:	9c 83       	std	Y+4, r25	; 0x04
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    a926:	89 85       	ldd	r24, Y+9	; 0x09
    a928:	28 2f       	mov	r18, r24
    a92a:	30 e0       	ldi	r19, 0x00	; 0
    a92c:	4c e1       	ldi	r20, 0x1C	; 28
    a92e:	42 9f       	mul	r20, r18
    a930:	c0 01       	movw	r24, r0
    a932:	43 9f       	mul	r20, r19
    a934:	90 0d       	add	r25, r0
    a936:	11 24       	eor	r1, r1
    a938:	86 56       	subi	r24, 0x66	; 102
    a93a:	9d 4b       	sbci	r25, 0xBD	; 189
    a93c:	8d 83       	std	Y+5, r24	; 0x05
    a93e:	9e 83       	std	Y+6, r25	; 0x06

    /* for both MASTER and SLAVE */
    length = (l_u16)((((l_u16)data[1] & 0x0FU) << 8U) + (l_u16)data[2]);
    a940:	8b 81       	ldd	r24, Y+3	; 0x03
    a942:	9c 81       	ldd	r25, Y+4	; 0x04
    a944:	01 96       	adiw	r24, 0x01	; 1
    a946:	fc 01       	movw	r30, r24
    a948:	80 81       	ld	r24, Z
    a94a:	88 2f       	mov	r24, r24
    a94c:	90 e0       	ldi	r25, 0x00	; 0
    a94e:	8f 70       	andi	r24, 0x0F	; 15
    a950:	99 27       	eor	r25, r25
    a952:	38 2f       	mov	r19, r24
    a954:	22 27       	eor	r18, r18
    a956:	8b 81       	ldd	r24, Y+3	; 0x03
    a958:	9c 81       	ldd	r25, Y+4	; 0x04
    a95a:	02 96       	adiw	r24, 0x02	; 2
    a95c:	fc 01       	movw	r30, r24
    a95e:	80 81       	ld	r24, Z
    a960:	88 2f       	mov	r24, r24
    a962:	90 e0       	ldi	r25, 0x00	; 0
    a964:	82 0f       	add	r24, r18
    a966:	93 1f       	adc	r25, r19
    a968:	8f 83       	std	Y+7, r24	; 0x07
    a96a:	98 87       	std	Y+8, r25	; 0x08
    /* check length of FF. If not valid, ignore this PDU */
    if ((length >= 7U) && (length <= prot_user_config_ptr->max_message_length))
    a96c:	8f 81       	ldd	r24, Y+7	; 0x07
    a96e:	98 85       	ldd	r25, Y+8	; 0x08
    a970:	07 97       	sbiw	r24, 0x07	; 7
    a972:	08 f4       	brcc	.+2      	; 0xa976 <lin_process_first_frame+0x9a>
    a974:	b3 c0       	rjmp	.+358    	; 0xaadc <lin_process_first_frame+0x200>
    a976:	8d 81       	ldd	r24, Y+5	; 0x05
    a978:	9e 81       	ldd	r25, Y+6	; 0x06
    a97a:	fc 01       	movw	r30, r24
    a97c:	22 8d       	ldd	r18, Z+26	; 0x1a
    a97e:	33 8d       	ldd	r19, Z+27	; 0x1b
    a980:	8f 81       	ldd	r24, Y+7	; 0x07
    a982:	98 85       	ldd	r25, Y+8	; 0x08
    a984:	28 17       	cp	r18, r24
    a986:	39 07       	cpc	r19, r25
    a988:	08 f4       	brcc	.+2      	; 0xa98c <lin_process_first_frame+0xb0>
    a98a:	a8 c0       	rjmp	.+336    	; 0xaadc <lin_process_first_frame+0x200>
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    a98c:	8d 81       	ldd	r24, Y+5	; 0x05
    a98e:	9e 81       	ldd	r25, Y+6	; 0x06
    a990:	fc 01       	movw	r30, r24
    a992:	93 81       	ldd	r25, Z+3	; 0x03
    a994:	81 e0       	ldi	r24, 0x01	; 1
    a996:	89 27       	eor	r24, r25
    a998:	88 23       	and	r24, r24
    a99a:	79 f1       	breq	.+94     	; 0xa9fa <lin_process_first_frame+0x11e>
        {
            /* For misra compliant rule 9.1 */
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    a99c:	89 81       	ldd	r24, Y+1	; 0x01
    a99e:	9a 81       	ldd	r25, Y+2	; 0x02
    a9a0:	25 e0       	ldi	r18, 0x05	; 5
    a9a2:	fc 01       	movw	r30, r24
    a9a4:	26 a3       	std	Z+38, r18	; 0x26
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    a9a6:	8d 81       	ldd	r24, Y+5	; 0x05
    a9a8:	9e 81       	ldd	r25, Y+6	; 0x06
    a9aa:	fc 01       	movw	r30, r24
    a9ac:	80 81       	ld	r24, Z
    a9ae:	88 23       	and	r24, r24
    a9b0:	21 f5       	brne	.+72     	; 0xa9fa <lin_process_first_frame+0x11e>
            {
                /* Set check N_Cr timeout */
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    a9b2:	89 85       	ldd	r24, Y+9	; 0x09
    a9b4:	28 2f       	mov	r18, r24
    a9b6:	30 e0       	ldi	r19, 0x00	; 0
    a9b8:	4c e1       	ldi	r20, 0x1C	; 28
    a9ba:	42 9f       	mul	r20, r18
    a9bc:	c0 01       	movw	r24, r0
    a9be:	43 9f       	mul	r20, r19
    a9c0:	90 0d       	add	r25, r0
    a9c2:	11 24       	eor	r1, r1
    a9c4:	84 55       	subi	r24, 0x54	; 84
    a9c6:	9d 4b       	sbci	r25, 0xBD	; 189
    a9c8:	fc 01       	movw	r30, r24
    a9ca:	80 81       	ld	r24, Z
    a9cc:	28 2f       	mov	r18, r24
    a9ce:	30 e0       	ldi	r19, 0x00	; 0
    a9d0:	44 e2       	ldi	r20, 0x24	; 36
    a9d2:	42 9f       	mul	r20, r18
    a9d4:	c0 01       	movw	r24, r0
    a9d6:	43 9f       	mul	r20, r19
    a9d8:	90 0d       	add	r25, r0
    a9da:	11 24       	eor	r1, r1
    a9dc:	8d 56       	subi	r24, 0x6D	; 109
    a9de:	9d 4b       	sbci	r25, 0xBD	; 189
    a9e0:	fc 01       	movw	r30, r24
    a9e2:	20 81       	ld	r18, Z
    a9e4:	31 81       	ldd	r19, Z+1	; 0x01
    a9e6:	89 81       	ldd	r24, Y+1	; 0x01
    a9e8:	9a 81       	ldd	r25, Y+2	; 0x02
    a9ea:	fc 01       	movw	r30, r24
    a9ec:	20 a3       	std	Z+32, r18	; 0x20
    a9ee:	31 a3       	std	Z+33, r19	; 0x21
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    a9f0:	89 81       	ldd	r24, Y+1	; 0x01
    a9f2:	9a 81       	ldd	r25, Y+2	; 0x02
    a9f4:	22 e0       	ldi	r18, 0x02	; 2
    a9f6:	fc 01       	movw	r30, r24
    a9f8:	27 8f       	std	Z+31, r18	; 0x1f
            }
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        /* put PDU to rx queue */
        /* reset queue header and queue tail */
        tl_desc_ptr->tl_rx_queue.queue_header = 0;
    a9fa:	89 81       	ldd	r24, Y+1	; 0x01
    a9fc:	9a 81       	ldd	r25, Y+2	; 0x02
    a9fe:	fc 01       	movw	r30, r24
    aa00:	13 86       	std	Z+11, r1	; 0x0b
    aa02:	14 86       	std	Z+12, r1	; 0x0c
        tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    aa04:	89 81       	ldd	r24, Y+1	; 0x01
    aa06:	9a 81       	ldd	r25, Y+2	; 0x02
    aa08:	fc 01       	movw	r30, r24
    aa0a:	15 86       	std	Z+13, r1	; 0x0d
    aa0c:	16 86       	std	Z+14, r1	; 0x0e
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    aa0e:	89 81       	ldd	r24, Y+1	; 0x01
    aa10:	9a 81       	ldd	r25, Y+2	; 0x02
    aa12:	fc 01       	movw	r30, r24
    aa14:	10 8a       	std	Z+16, r1	; 0x10
    aa16:	11 8a       	std	Z+17, r1	; 0x11
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    aa18:	89 81       	ldd	r24, Y+1	; 0x01
    aa1a:	9a 81       	ldd	r25, Y+2	; 0x02
    aa1c:	fc 01       	movw	r30, r24
    aa1e:	17 86       	std	Z+15, r1	; 0x0f
        tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    aa20:	89 81       	ldd	r24, Y+1	; 0x01
    aa22:	9a 81       	ldd	r25, Y+2	; 0x02
    aa24:	ac 01       	movw	r20, r24
    aa26:	45 5f       	subi	r20, 0xF5	; 245
    aa28:	5f 4f       	sbci	r21, 0xFF	; 255
    aa2a:	8b 81       	ldd	r24, Y+3	; 0x03
    aa2c:	9c 81       	ldd	r25, Y+4	; 0x04
    aa2e:	21 e0       	ldi	r18, 0x01	; 1
    aa30:	bc 01       	movw	r22, r24
    aa32:	89 85       	ldd	r24, Y+9	; 0x09
    aa34:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <tl_put_raw>

        /* calculate number of PDU for this message */
        if (((length - 5U) % 6U) == 0U)
    aa38:	8f 81       	ldd	r24, Y+7	; 0x07
    aa3a:	98 85       	ldd	r25, Y+8	; 0x08
    aa3c:	ac 01       	movw	r20, r24
    aa3e:	45 50       	subi	r20, 0x05	; 5
    aa40:	51 09       	sbc	r21, r1
    aa42:	9a 01       	movw	r18, r20
    aa44:	ab ea       	ldi	r26, 0xAB	; 171
    aa46:	ba ea       	ldi	r27, 0xAA	; 170
    aa48:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <__umulhisi3>
    aa4c:	9c 01       	movw	r18, r24
    aa4e:	36 95       	lsr	r19
    aa50:	27 95       	ror	r18
    aa52:	36 95       	lsr	r19
    aa54:	27 95       	ror	r18
    aa56:	c9 01       	movw	r24, r18
    aa58:	88 0f       	add	r24, r24
    aa5a:	99 1f       	adc	r25, r25
    aa5c:	82 0f       	add	r24, r18
    aa5e:	93 1f       	adc	r25, r19
    aa60:	88 0f       	add	r24, r24
    aa62:	99 1f       	adc	r25, r25
    aa64:	9a 01       	movw	r18, r20
    aa66:	28 1b       	sub	r18, r24
    aa68:	39 0b       	sbc	r19, r25
    aa6a:	23 2b       	or	r18, r19
    aa6c:	91 f4       	brne	.+36     	; 0xaa92 <lin_process_first_frame+0x1b6>
        {
            tl_desc_ptr->num_of_pdu = (l_u8)((length - 5U) / 6U);
    aa6e:	8f 81       	ldd	r24, Y+7	; 0x07
    aa70:	98 85       	ldd	r25, Y+8	; 0x08
    aa72:	05 97       	sbiw	r24, 0x05	; 5
    aa74:	9c 01       	movw	r18, r24
    aa76:	ab ea       	ldi	r26, 0xAB	; 171
    aa78:	ba ea       	ldi	r27, 0xAA	; 170
    aa7a:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <__umulhisi3>
    aa7e:	96 95       	lsr	r25
    aa80:	87 95       	ror	r24
    aa82:	96 95       	lsr	r25
    aa84:	87 95       	ror	r24
    aa86:	28 2f       	mov	r18, r24
    aa88:	89 81       	ldd	r24, Y+1	; 0x01
    aa8a:	9a 81       	ldd	r25, Y+2	; 0x02
    aa8c:	fc 01       	movw	r30, r24
    aa8e:	24 a3       	std	Z+36, r18	; 0x24
    aa90:	12 c0       	rjmp	.+36     	; 0xaab6 <lin_process_first_frame+0x1da>
        }
        else
        {
            tl_desc_ptr->num_of_pdu = (l_u8)(((length - 5U) / 6U) + 1U);
    aa92:	8f 81       	ldd	r24, Y+7	; 0x07
    aa94:	98 85       	ldd	r25, Y+8	; 0x08
    aa96:	05 97       	sbiw	r24, 0x05	; 5
    aa98:	9c 01       	movw	r18, r24
    aa9a:	ab ea       	ldi	r26, 0xAB	; 171
    aa9c:	ba ea       	ldi	r27, 0xAA	; 170
    aa9e:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <__umulhisi3>
    aaa2:	96 95       	lsr	r25
    aaa4:	87 95       	ror	r24
    aaa6:	96 95       	lsr	r25
    aaa8:	87 95       	ror	r24
    aaaa:	21 e0       	ldi	r18, 0x01	; 1
    aaac:	28 0f       	add	r18, r24
    aaae:	89 81       	ldd	r24, Y+1	; 0x01
    aab0:	9a 81       	ldd	r25, Y+2	; 0x02
    aab2:	fc 01       	movw	r30, r24
    aab4:	24 a3       	std	Z+36, r18	; 0x24
        }

        /* set frame counter = 1 */
        tl_desc_ptr->frame_counter = 1U;
    aab6:	89 81       	ldd	r24, Y+1	; 0x01
    aab8:	9a 81       	ldd	r25, Y+2	; 0x02
    aaba:	21 e0       	ldi	r18, 0x01	; 1
    aabc:	fc 01       	movw	r30, r24
    aabe:	25 a3       	std	Z+37, r18	; 0x25
        tl_desc_ptr->service_status = LD_SERVICE_BUSY;
    aac0:	89 81       	ldd	r24, Y+1	; 0x01
    aac2:	9a 81       	ldd	r25, Y+2	; 0x02
    aac4:	fc 01       	movw	r30, r24
    aac6:	13 a6       	std	Z+43, r1	; 0x2b

        /* Mark FF pdu is sent */
        tl_desc_ptr->FF_pdu_received = true;
    aac8:	89 81       	ldd	r24, Y+1	; 0x01
    aaca:	9a 81       	ldd	r25, Y+2	; 0x02
    aacc:	21 e0       	ldi	r18, 0x01	; 1
    aace:	fc 01       	movw	r30, r24
    aad0:	25 a7       	std	Z+45, r18	; 0x2d
        tl_desc_ptr->interleave_timeout_counter = 0;
    aad2:	89 81       	ldd	r24, Y+1	; 0x01
    aad4:	9a 81       	ldd	r25, Y+2	; 0x02
    aad6:	fc 01       	movw	r30, r24
    aad8:	10 a6       	std	Z+40, r1	; 0x28
    aada:	11 a6       	std	Z+41, r1	; 0x29
    }
}
    aadc:	00 00       	nop
    aade:	29 96       	adiw	r28, 0x09	; 9
    aae0:	cd bf       	out	0x3d, r28	; 61
    aae2:	de bf       	out	0x3e, r29	; 62
    aae4:	df 91       	pop	r29
    aae6:	cf 91       	pop	r28
    aae8:	08 95       	ret

0000aaea <lin_process_consecutive_frame>:
 * Description   : Process consecutive frame.
 *
 * Implements    : lin_process_consecutive_frame_Activity
 *END**************************************************************************/
static void lin_process_consecutive_frame(l_ifc_handle iii)
{
    aaea:	cf 93       	push	r28
    aaec:	df 93       	push	r29
    aaee:	cd b7       	in	r28, 0x3d	; 61
    aaf0:	de b7       	in	r29, 0x3e	; 62
    aaf2:	26 97       	sbiw	r28, 0x06	; 6
    aaf4:	cd bf       	out	0x3d, r28	; 61
    aaf6:	de bf       	out	0x3e, r29	; 62
    aaf8:	8e 83       	std	Y+6, r24	; 0x06
    l_u8 tmp_frame_counter;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    aafa:	8e 81       	ldd	r24, Y+6	; 0x06
    aafc:	28 2f       	mov	r18, r24
    aafe:	30 e0       	ldi	r19, 0x00	; 0
    ab00:	44 e3       	ldi	r20, 0x34	; 52
    ab02:	42 9f       	mul	r20, r18
    ab04:	c0 01       	movw	r24, r0
    ab06:	43 9f       	mul	r20, r19
    ab08:	90 0d       	add	r25, r0
    ab0a:	11 24       	eor	r1, r1
    ab0c:	83 59       	subi	r24, 0x93	; 147
    ab0e:	99 4b       	sbci	r25, 0xB9	; 185
    ab10:	89 83       	std	Y+1, r24	; 0x01
    ab12:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    ab14:	8e 81       	ldd	r24, Y+6	; 0x06
    ab16:	28 2f       	mov	r18, r24
    ab18:	30 e0       	ldi	r19, 0x00	; 0
    ab1a:	46 e1       	ldi	r20, 0x16	; 22
    ab1c:	42 9f       	mul	r20, r18
    ab1e:	c0 01       	movw	r24, r0
    ab20:	43 9f       	mul	r20, r19
    ab22:	90 0d       	add	r25, r0
    ab24:	11 24       	eor	r1, r1
    ab26:	8d 55       	subi	r24, 0x5D	; 93
    ab28:	99 4b       	sbci	r25, 0xB9	; 185
    ab2a:	fc 01       	movw	r30, r24
    ab2c:	80 81       	ld	r24, Z
    ab2e:	91 81       	ldd	r25, Z+1	; 0x01
    ab30:	8b 83       	std	Y+3, r24	; 0x03
    ab32:	9c 83       	std	Y+4, r25	; 0x04
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        /* for SLAVE */
        /* For misra compliant rule 9.1 */

        if (g_lin_protocol_user_cfg_array[iii].protocol_version == LIN_PROTOCOL_21)
    ab34:	8e 81       	ldd	r24, Y+6	; 0x06
    ab36:	28 2f       	mov	r18, r24
    ab38:	30 e0       	ldi	r19, 0x00	; 0
    ab3a:	4c e1       	ldi	r20, 0x1C	; 28
    ab3c:	42 9f       	mul	r20, r18
    ab3e:	c0 01       	movw	r24, r0
    ab40:	43 9f       	mul	r20, r19
    ab42:	90 0d       	add	r25, r0
    ab44:	11 24       	eor	r1, r1
    ab46:	86 56       	subi	r24, 0x66	; 102
    ab48:	9d 4b       	sbci	r25, 0xBD	; 189
    ab4a:	fc 01       	movw	r30, r24
    ab4c:	80 81       	ld	r24, Z
    ab4e:	88 23       	and	r24, r24
    ab50:	21 f5       	brne	.+72     	; 0xab9a <lin_process_consecutive_frame+0xb0>
        {
            /* Set check N_Cr timeout */
            tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    ab52:	8e 81       	ldd	r24, Y+6	; 0x06
    ab54:	28 2f       	mov	r18, r24
    ab56:	30 e0       	ldi	r19, 0x00	; 0
    ab58:	4c e1       	ldi	r20, 0x1C	; 28
    ab5a:	42 9f       	mul	r20, r18
    ab5c:	c0 01       	movw	r24, r0
    ab5e:	43 9f       	mul	r20, r19
    ab60:	90 0d       	add	r25, r0
    ab62:	11 24       	eor	r1, r1
    ab64:	84 55       	subi	r24, 0x54	; 84
    ab66:	9d 4b       	sbci	r25, 0xBD	; 189
    ab68:	fc 01       	movw	r30, r24
    ab6a:	80 81       	ld	r24, Z
    ab6c:	28 2f       	mov	r18, r24
    ab6e:	30 e0       	ldi	r19, 0x00	; 0
    ab70:	44 e2       	ldi	r20, 0x24	; 36
    ab72:	42 9f       	mul	r20, r18
    ab74:	c0 01       	movw	r24, r0
    ab76:	43 9f       	mul	r20, r19
    ab78:	90 0d       	add	r25, r0
    ab7a:	11 24       	eor	r1, r1
    ab7c:	8d 56       	subi	r24, 0x6D	; 109
    ab7e:	9d 4b       	sbci	r25, 0xBD	; 189
    ab80:	fc 01       	movw	r30, r24
    ab82:	20 81       	ld	r18, Z
    ab84:	31 81       	ldd	r19, Z+1	; 0x01
    ab86:	89 81       	ldd	r24, Y+1	; 0x01
    ab88:	9a 81       	ldd	r25, Y+2	; 0x02
    ab8a:	fc 01       	movw	r30, r24
    ab8c:	20 a3       	std	Z+32, r18	; 0x20
    ab8e:	31 a3       	std	Z+33, r19	; 0x21
            tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    ab90:	89 81       	ldd	r24, Y+1	; 0x01
    ab92:	9a 81       	ldd	r25, Y+2	; 0x02
    ab94:	22 e0       	ldi	r18, 0x02	; 2
    ab96:	fc 01       	movw	r30, r24
    ab98:	27 8f       	std	Z+31, r18	; 0x1f
        }
        /* get frame counter of this PDU */
        tmp_frame_counter = (l_u8)(data[1] & 0x0FU);
    ab9a:	8b 81       	ldd	r24, Y+3	; 0x03
    ab9c:	9c 81       	ldd	r25, Y+4	; 0x04
    ab9e:	01 96       	adiw	r24, 0x01	; 1
    aba0:	fc 01       	movw	r30, r24
    aba2:	80 81       	ld	r24, Z
    aba4:	8f 70       	andi	r24, 0x0F	; 15
    aba6:	8d 83       	std	Y+5, r24	; 0x05
        /* Check valid frame counter */
        if (tmp_frame_counter == tl_desc_ptr->frame_counter)
    aba8:	89 81       	ldd	r24, Y+1	; 0x01
    abaa:	9a 81       	ldd	r25, Y+2	; 0x02
    abac:	fc 01       	movw	r30, r24
    abae:	95 a1       	ldd	r25, Z+37	; 0x25
    abb0:	8d 81       	ldd	r24, Y+5	; 0x05
    abb2:	98 17       	cp	r25, r24
    abb4:	81 f5       	brne	.+96     	; 0xac16 <lin_process_consecutive_frame+0x12c>
        {
            /* increase frame counter */
            tl_desc_ptr->frame_counter++;
    abb6:	89 81       	ldd	r24, Y+1	; 0x01
    abb8:	9a 81       	ldd	r25, Y+2	; 0x02
    abba:	fc 01       	movw	r30, r24
    abbc:	85 a1       	ldd	r24, Z+37	; 0x25
    abbe:	21 e0       	ldi	r18, 0x01	; 1
    abc0:	28 0f       	add	r18, r24
    abc2:	89 81       	ldd	r24, Y+1	; 0x01
    abc4:	9a 81       	ldd	r25, Y+2	; 0x02
    abc6:	fc 01       	movw	r30, r24
    abc8:	25 a3       	std	Z+37, r18	; 0x25
            if (tl_desc_ptr->frame_counter > 15U)
    abca:	89 81       	ldd	r24, Y+1	; 0x01
    abcc:	9a 81       	ldd	r25, Y+2	; 0x02
    abce:	fc 01       	movw	r30, r24
    abd0:	85 a1       	ldd	r24, Z+37	; 0x25
    abd2:	80 31       	cpi	r24, 0x10	; 16
    abd4:	20 f0       	brcs	.+8      	; 0xabde <lin_process_consecutive_frame+0xf4>
            {
                tl_desc_ptr->frame_counter = 0U;
    abd6:	89 81       	ldd	r24, Y+1	; 0x01
    abd8:	9a 81       	ldd	r25, Y+2	; 0x02
    abda:	fc 01       	movw	r30, r24
    abdc:	15 a2       	std	Z+37, r1	; 0x25
            }

            /* decrease number of PDU to check message is complete */
            tl_desc_ptr->num_of_pdu--;
    abde:	89 81       	ldd	r24, Y+1	; 0x01
    abe0:	9a 81       	ldd	r25, Y+2	; 0x02
    abe2:	fc 01       	movw	r30, r24
    abe4:	84 a1       	ldd	r24, Z+36	; 0x24
    abe6:	2f ef       	ldi	r18, 0xFF	; 255
    abe8:	28 0f       	add	r18, r24
    abea:	89 81       	ldd	r24, Y+1	; 0x01
    abec:	9a 81       	ldd	r25, Y+2	; 0x02
    abee:	fc 01       	movw	r30, r24
    abf0:	24 a3       	std	Z+36, r18	; 0x24
            /* put PDU to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    abf2:	89 81       	ldd	r24, Y+1	; 0x01
    abf4:	9a 81       	ldd	r25, Y+2	; 0x02
    abf6:	ac 01       	movw	r20, r24
    abf8:	45 5f       	subi	r20, 0xF5	; 245
    abfa:	5f 4f       	sbci	r21, 0xFF	; 255
    abfc:	8b 81       	ldd	r24, Y+3	; 0x03
    abfe:	9c 81       	ldd	r25, Y+4	; 0x04
    ac00:	21 e0       	ldi	r18, 0x01	; 1
    ac02:	bc 01       	movw	r22, r24
    ac04:	8e 81       	ldd	r24, Y+6	; 0x06
    ac06:	0e 94 62 59 	call	0xb2c4	; 0xb2c4 <tl_put_raw>
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    ac0a:	89 81       	ldd	r24, Y+1	; 0x01
    ac0c:	9a 81       	ldd	r25, Y+2	; 0x02
    ac0e:	25 e0       	ldi	r18, 0x05	; 5
    ac10:	fc 01       	movw	r30, r24
    ac12:	26 a3       	std	Z+38, r18	; 0x26
    ac14:	1c c0       	rjmp	.+56     	; 0xac4e <lin_process_consecutive_frame+0x164>
        }
        else
        {
            /* abort this message */
            if(tl_desc_ptr->ld_return_data)
    ac16:	89 81       	ldd	r24, Y+1	; 0x01
    ac18:	9a 81       	ldd	r25, Y+2	; 0x02
    ac1a:	fc 01       	movw	r30, r24
    ac1c:	84 a5       	ldd	r24, Z+44	; 0x2c
    ac1e:	88 23       	and	r24, r24
    ac20:	21 f0       	breq	.+8      	; 0xac2a <lin_process_consecutive_frame+0x140>
            {
               tl_desc_ptr->ld_return_data = false;
    ac22:	89 81       	ldd	r24, Y+1	; 0x01
    ac24:	9a 81       	ldd	r25, Y+2	; 0x02
    ac26:	fc 01       	movw	r30, r24
    ac28:	14 a6       	std	Z+44, r1	; 0x2c
            }
            tl_desc_ptr->FF_pdu_received = false;
    ac2a:	89 81       	ldd	r24, Y+1	; 0x01
    ac2c:	9a 81       	ldd	r25, Y+2	; 0x02
    ac2e:	fc 01       	movw	r30, r24
    ac30:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->rx_msg_status = LD_WRONG_SN;
    ac32:	89 81       	ldd	r24, Y+1	; 0x01
    ac34:	9a 81       	ldd	r25, Y+2	; 0x02
    ac36:	26 e0       	ldi	r18, 0x06	; 6
    ac38:	fc 01       	movw	r30, r24
    ac3a:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    ac3c:	89 81       	ldd	r24, Y+1	; 0x01
    ac3e:	9a 81       	ldd	r25, Y+2	; 0x02
    ac40:	fc 01       	movw	r30, r24
    ac42:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state  = LD_DIAG_IDLE;
    ac44:	89 81       	ldd	r24, Y+1	; 0x01
    ac46:	9a 81       	ldd	r25, Y+2	; 0x02
    ac48:	21 e0       	ldi	r18, 0x01	; 1
    ac4a:	fc 01       	movw	r30, r24
    ac4c:	26 a3       	std	Z+38, r18	; 0x26
        }

        if (0U == tl_desc_ptr->num_of_pdu)
    ac4e:	89 81       	ldd	r24, Y+1	; 0x01
    ac50:	9a 81       	ldd	r25, Y+2	; 0x02
    ac52:	fc 01       	movw	r30, r24
    ac54:	84 a1       	ldd	r24, Z+36	; 0x24
    ac56:	88 23       	and	r24, r24
    ac58:	c9 f4       	brne	.+50     	; 0xac8c <lin_process_consecutive_frame+0x1a2>
        {
            /* message is received completely */
            /* set status is IDLE to receive new message */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    ac5a:	89 81       	ldd	r24, Y+1	; 0x01
    ac5c:	9a 81       	ldd	r25, Y+2	; 0x02
    ac5e:	fc 01       	movw	r30, r24
    ac60:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    ac62:	89 81       	ldd	r24, Y+1	; 0x01
    ac64:	9a 81       	ldd	r25, Y+2	; 0x02
    ac66:	21 e0       	ldi	r18, 0x01	; 1
    ac68:	fc 01       	movw	r30, r24
    ac6a:	23 a7       	std	Z+43, r18	; 0x2b

            lin_tl_attach_service(iii);
    ac6c:	8e 81       	ldd	r24, Y+6	; 0x06
    ac6e:	0e 94 d0 58 	call	0xb1a0	; 0xb1a0 <lin_tl_attach_service>
            /* If ld_receive_message() function is called before FF pdu to be sent */
            if(tl_desc_ptr->ld_return_data)
    ac72:	89 81       	ldd	r24, Y+1	; 0x01
    ac74:	9a 81       	ldd	r25, Y+2	; 0x02
    ac76:	fc 01       	movw	r30, r24
    ac78:	84 a5       	ldd	r24, Z+44	; 0x2c
    ac7a:	88 23       	and	r24, r24
    ac7c:	19 f0       	breq	.+6      	; 0xac84 <lin_process_consecutive_frame+0x19a>
            {
                tl_receive_message(iii);
    ac7e:	8e 81       	ldd	r24, Y+6	; 0x06
    ac80:	0e 94 ee 5a 	call	0xb5dc	; 0xb5dc <tl_receive_message>
            }
            tl_desc_ptr->FF_pdu_received = false;
    ac84:	89 81       	ldd	r24, Y+1	; 0x01
    ac86:	9a 81       	ldd	r25, Y+2	; 0x02
    ac88:	fc 01       	movw	r30, r24
    ac8a:	15 a6       	std	Z+45, r1	; 0x2d
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    }
}
    ac8c:	00 00       	nop
    ac8e:	26 96       	adiw	r28, 0x06	; 6
    ac90:	cd bf       	out	0x3d, r28	; 61
    ac92:	de bf       	out	0x3e, r29	; 62
    ac94:	df 91       	pop	r29
    ac96:	cf 91       	pop	r28
    ac98:	08 95       	ret

0000ac9a <lin_process_pdu>:
 *
 * Implements    : lin_process_pdu_Activity
 *END**************************************************************************/
static void lin_process_pdu(l_ifc_handle iii,
                            const lin_tl_pdu_data_t * pdu)
{
    ac9a:	cf 93       	push	r28
    ac9c:	df 93       	push	r29
    ac9e:	cd b7       	in	r28, 0x3d	; 61
    aca0:	de b7       	in	r29, 0x3e	; 62
    aca2:	26 97       	sbiw	r28, 0x06	; 6
    aca4:	cd bf       	out	0x3d, r28	; 61
    aca6:	de bf       	out	0x3e, r29	; 62
    aca8:	8c 83       	std	Y+4, r24	; 0x04
    acaa:	6d 83       	std	Y+5, r22	; 0x05
    acac:	7e 83       	std	Y+6, r23	; 0x06
    l_u8 pci_type;
#if (SUPPORT_SLAVE_MODE == 1U)
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    acae:	8c 81       	ldd	r24, Y+4	; 0x04
    acb0:	28 2f       	mov	r18, r24
    acb2:	30 e0       	ldi	r19, 0x00	; 0
    acb4:	44 e3       	ldi	r20, 0x34	; 52
    acb6:	42 9f       	mul	r20, r18
    acb8:	c0 01       	movw	r24, r0
    acba:	43 9f       	mul	r20, r19
    acbc:	90 0d       	add	r25, r0
    acbe:	11 24       	eor	r1, r1
    acc0:	83 59       	subi	r24, 0x93	; 147
    acc2:	99 4b       	sbci	r25, 0xB9	; 185
    acc4:	89 83       	std	Y+1, r24	; 0x01
    acc6:	9a 83       	std	Y+2, r25	; 0x02
    if ((bool)LIN_SLAVE == g_lin_protocol_user_cfg_array[iii].function)
    acc8:	8c 81       	ldd	r24, Y+4	; 0x04
    acca:	28 2f       	mov	r18, r24
    accc:	30 e0       	ldi	r19, 0x00	; 0
    acce:	4c e1       	ldi	r20, 0x1C	; 28
    acd0:	42 9f       	mul	r20, r18
    acd2:	c0 01       	movw	r24, r0
    acd4:	43 9f       	mul	r20, r19
    acd6:	90 0d       	add	r25, r0
    acd8:	11 24       	eor	r1, r1
    acda:	83 56       	subi	r24, 0x63	; 99
    acdc:	9d 4b       	sbci	r25, 0xBD	; 189
    acde:	fc 01       	movw	r30, r24
    ace0:	90 81       	ld	r25, Z
    ace2:	81 e0       	ldi	r24, 0x01	; 1
    ace4:	89 27       	eor	r24, r25
    ace6:	88 23       	and	r24, r24
    ace8:	09 f1       	breq	.+66     	; 0xad2c <lin_process_pdu+0x92>
    {
        g_lin_tl_descriptor_array[iii].slave_resp_cnt = 0U;
    acea:	8c 81       	ldd	r24, Y+4	; 0x04
    acec:	28 2f       	mov	r18, r24
    acee:	30 e0       	ldi	r19, 0x00	; 0
    acf0:	44 e3       	ldi	r20, 0x34	; 52
    acf2:	42 9f       	mul	r20, r18
    acf4:	c0 01       	movw	r24, r0
    acf6:	43 9f       	mul	r20, r19
    acf8:	90 0d       	add	r25, r0
    acfa:	11 24       	eor	r1, r1
    acfc:	89 56       	subi	r24, 0x69	; 105
    acfe:	99 4b       	sbci	r25, 0xB9	; 185
    ad00:	fc 01       	movw	r30, r24
    ad02:	10 82       	st	Z, r1
        /* clear queue */
        tl_desc_ptr->tl_tx_queue.queue_status = LD_QUEUE_EMPTY;
    ad04:	89 81       	ldd	r24, Y+1	; 0x01
    ad06:	9a 81       	ldd	r25, Y+2	; 0x02
    ad08:	25 e0       	ldi	r18, 0x05	; 5
    ad0a:	fc 01       	movw	r30, r24
    ad0c:	24 83       	std	Z+4, r18	; 0x04
        tl_desc_ptr->tl_tx_queue.queue_current_size = 0U;
    ad0e:	89 81       	ldd	r24, Y+1	; 0x01
    ad10:	9a 81       	ldd	r25, Y+2	; 0x02
    ad12:	fc 01       	movw	r30, r24
    ad14:	15 82       	std	Z+5, r1	; 0x05
    ad16:	16 82       	std	Z+6, r1	; 0x06
        tl_desc_ptr->tl_tx_queue.queue_header = tl_desc_ptr->tl_tx_queue.queue_tail;
    ad18:	89 81       	ldd	r24, Y+1	; 0x01
    ad1a:	9a 81       	ldd	r25, Y+2	; 0x02
    ad1c:	fc 01       	movw	r30, r24
    ad1e:	22 81       	ldd	r18, Z+2	; 0x02
    ad20:	33 81       	ldd	r19, Z+3	; 0x03
    ad22:	89 81       	ldd	r24, Y+1	; 0x01
    ad24:	9a 81       	ldd	r25, Y+2	; 0x02
    ad26:	fc 01       	movw	r30, r24
    ad28:	20 83       	st	Z, r18
    ad2a:	31 83       	std	Z+1, r19	; 0x01
    }
#endif /* End (SUPPORT_SLAVE_MODE == 1U) */

    /* get PCI type */
    pci_type = (l_u8)(((*pdu)[1] & 0xF0U) >> 4U);
    ad2c:	8d 81       	ldd	r24, Y+5	; 0x05
    ad2e:	9e 81       	ldd	r25, Y+6	; 0x06
    ad30:	fc 01       	movw	r30, r24
    ad32:	81 81       	ldd	r24, Z+1	; 0x01
    ad34:	82 95       	swap	r24
    ad36:	8f 70       	andi	r24, 0x0F	; 15
    ad38:	8b 83       	std	Y+3, r24	; 0x03
    switch (pci_type)
    ad3a:	8b 81       	ldd	r24, Y+3	; 0x03
    ad3c:	88 2f       	mov	r24, r24
    ad3e:	90 e0       	ldi	r25, 0x00	; 0
    ad40:	81 30       	cpi	r24, 0x01	; 1
    ad42:	91 05       	cpc	r25, r1
    ad44:	51 f0       	breq	.+20     	; 0xad5a <lin_process_pdu+0xc0>
    ad46:	82 30       	cpi	r24, 0x02	; 2
    ad48:	91 05       	cpc	r25, r1
    ad4a:	59 f0       	breq	.+22     	; 0xad62 <lin_process_pdu+0xc8>
    ad4c:	89 2b       	or	r24, r25
    ad4e:	09 f0       	breq	.+2      	; 0xad52 <lin_process_pdu+0xb8>
        case PCI_CF:
            lin_process_consecutive_frame(iii);
            break;
        default:
            /* ignore this PDU */
            break;
    ad50:	0c c0       	rjmp	.+24     	; 0xad6a <lin_process_pdu+0xd0>
    /* get PCI type */
    pci_type = (l_u8)(((*pdu)[1] & 0xF0U) >> 4U);
    switch (pci_type)
    {
        case PCI_SF:
            lin_process_single_frame(iii);
    ad52:	8c 81       	ldd	r24, Y+4	; 0x04
    ad54:	0e 94 e0 53 	call	0xa7c0	; 0xa7c0 <lin_process_single_frame>
            break;
    ad58:	08 c0       	rjmp	.+16     	; 0xad6a <lin_process_pdu+0xd0>
        case PCI_FF:
            lin_process_first_frame(iii);
    ad5a:	8c 81       	ldd	r24, Y+4	; 0x04
    ad5c:	0e 94 6e 54 	call	0xa8dc	; 0xa8dc <lin_process_first_frame>
            break;
    ad60:	04 c0       	rjmp	.+8      	; 0xad6a <lin_process_pdu+0xd0>
        case PCI_CF:
            lin_process_consecutive_frame(iii);
    ad62:	8c 81       	ldd	r24, Y+4	; 0x04
    ad64:	0e 94 75 55 	call	0xaaea	; 0xaaea <lin_process_consecutive_frame>
            break;
    ad68:	00 00       	nop
        default:
            /* ignore this PDU */
            break;
    }
}
    ad6a:	00 00       	nop
    ad6c:	26 96       	adiw	r28, 0x06	; 6
    ad6e:	cd bf       	out	0x3d, r28	; 61
    ad70:	de bf       	out	0x3e, r29	; 62
    ad72:	df 91       	pop	r29
    ad74:	cf 91       	pop	r28
    ad76:	08 95       	ret

0000ad78 <lin_tl_handler_error>:
 *
 * Implements    : lin_tl_handler_error_Activity
 *END**************************************************************************/
static void lin_tl_handler_error(l_ifc_handle iii,
                                 l_u8 pid)
{
    ad78:	cf 93       	push	r28
    ad7a:	df 93       	push	r29
    ad7c:	cd b7       	in	r28, 0x3d	; 61
    ad7e:	de b7       	in	r29, 0x3e	; 62
    ad80:	26 97       	sbiw	r28, 0x06	; 6
    ad82:	cd bf       	out	0x3d, r28	; 61
    ad84:	de bf       	out	0x3e, r29	; 62
    ad86:	8d 83       	std	Y+5, r24	; 0x05
    ad88:	6e 83       	std	Y+6, r22	; 0x06
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    ad8a:	8d 81       	ldd	r24, Y+5	; 0x05
    ad8c:	28 2f       	mov	r18, r24
    ad8e:	30 e0       	ldi	r19, 0x00	; 0
    ad90:	44 e3       	ldi	r20, 0x34	; 52
    ad92:	42 9f       	mul	r20, r18
    ad94:	c0 01       	movw	r24, r0
    ad96:	43 9f       	mul	r20, r19
    ad98:	90 0d       	add	r25, r0
    ad9a:	11 24       	eor	r1, r1
    ad9c:	83 59       	subi	r24, 0x93	; 147
    ad9e:	99 4b       	sbci	r25, 0xB9	; 185
    ada0:	89 83       	std	Y+1, r24	; 0x01
    ada2:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    ada4:	8d 81       	ldd	r24, Y+5	; 0x05
    ada6:	28 2f       	mov	r18, r24
    ada8:	30 e0       	ldi	r19, 0x00	; 0
    adaa:	4c e1       	ldi	r20, 0x1C	; 28
    adac:	42 9f       	mul	r20, r18
    adae:	c0 01       	movw	r24, r0
    adb0:	43 9f       	mul	r20, r19
    adb2:	90 0d       	add	r25, r0
    adb4:	11 24       	eor	r1, r1
    adb6:	86 56       	subi	r24, 0x66	; 102
    adb8:	9d 4b       	sbci	r25, 0xBD	; 189
    adba:	8b 83       	std	Y+3, r24	; 0x03
    adbc:	9c 83       	std	Y+4, r25	; 0x04
    else
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* for slave */
        /* Master request */
        if (0x3CU == pid)
    adbe:	8e 81       	ldd	r24, Y+6	; 0x06
    adc0:	8c 33       	cpi	r24, 0x3C	; 60
    adc2:	d9 f4       	brne	.+54     	; 0xadfa <lin_tl_handler_error+0x82>
        {
            /* update status of message and queue */
            tl_desc_ptr->rx_msg_status = LD_FAILED;
    adc4:	89 81       	ldd	r24, Y+1	; 0x01
    adc6:	9a 81       	ldd	r25, Y+2	; 0x02
    adc8:	23 e0       	ldi	r18, 0x03	; 3
    adca:	fc 01       	movw	r30, r24
    adcc:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->slave_resp_cnt = 0U;
    adce:	89 81       	ldd	r24, Y+1	; 0x01
    add0:	9a 81       	ldd	r25, Y+2	; 0x02
    add2:	fc 01       	movw	r30, r24
    add4:	12 a6       	std	Z+42, r1	; 0x2a

            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    add6:	8b 81       	ldd	r24, Y+3	; 0x03
    add8:	9c 81       	ldd	r25, Y+4	; 0x04
    adda:	fc 01       	movw	r30, r24
    addc:	80 81       	ld	r24, Z
    adde:	88 23       	and	r24, r24
    ade0:	31 f4       	brne	.+12     	; 0xadee <lin_tl_handler_error+0x76>
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_RECEIVE_ERROR;
    ade2:	89 81       	ldd	r24, Y+1	; 0x01
    ade4:	9a 81       	ldd	r25, Y+2	; 0x02
    ade6:	22 e0       	ldi	r18, 0x02	; 2
    ade8:	fc 01       	movw	r30, r24
    adea:	27 87       	std	Z+15, r18	; 0x0f
    adec:	1c c0       	rjmp	.+56     	; 0xae26 <lin_tl_handler_error+0xae>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_TRANSFER_ERROR;
    adee:	89 81       	ldd	r24, Y+1	; 0x01
    adf0:	9a 81       	ldd	r25, Y+2	; 0x02
    adf2:	27 e0       	ldi	r18, 0x07	; 7
    adf4:	fc 01       	movw	r30, r24
    adf6:	27 87       	std	Z+15, r18	; 0x0f
    adf8:	16 c0       	rjmp	.+44     	; 0xae26 <lin_tl_handler_error+0xae>
        }
        else
        {
            /* Slave Response */
            /* update status of message and queue */
            tl_desc_ptr->tx_msg_status = LD_FAILED;
    adfa:	89 81       	ldd	r24, Y+1	; 0x01
    adfc:	9a 81       	ldd	r25, Y+2	; 0x02
    adfe:	23 e0       	ldi	r18, 0x03	; 3
    ae00:	fc 01       	movw	r30, r24
    ae02:	21 8f       	std	Z+25, r18	; 0x19
            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    ae04:	8b 81       	ldd	r24, Y+3	; 0x03
    ae06:	9c 81       	ldd	r25, Y+4	; 0x04
    ae08:	fc 01       	movw	r30, r24
    ae0a:	80 81       	ld	r24, Z
    ae0c:	88 23       	and	r24, r24
    ae0e:	31 f4       	brne	.+12     	; 0xae1c <lin_tl_handler_error+0xa4>
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSMIT_ERROR;
    ae10:	89 81       	ldd	r24, Y+1	; 0x01
    ae12:	9a 81       	ldd	r25, Y+2	; 0x02
    ae14:	26 e0       	ldi	r18, 0x06	; 6
    ae16:	fc 01       	movw	r30, r24
    ae18:	24 83       	std	Z+4, r18	; 0x04
    ae1a:	05 c0       	rjmp	.+10     	; 0xae26 <lin_tl_handler_error+0xae>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSFER_ERROR;
    ae1c:	89 81       	ldd	r24, Y+1	; 0x01
    ae1e:	9a 81       	ldd	r25, Y+2	; 0x02
    ae20:	27 e0       	ldi	r18, 0x07	; 7
    ae22:	fc 01       	movw	r30, r24
    ae24:	24 83       	std	Z+4, r18	; 0x04
            }
        } /* end of (0x3C == pid) */

        tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    ae26:	89 81       	ldd	r24, Y+1	; 0x01
    ae28:	9a 81       	ldd	r25, Y+2	; 0x02
    ae2a:	23 e0       	ldi	r18, 0x03	; 3
    ae2c:	fc 01       	movw	r30, r24
    ae2e:	23 a7       	std	Z+43, r18	; 0x2b
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    ae30:	89 81       	ldd	r24, Y+1	; 0x01
    ae32:	9a 81       	ldd	r25, Y+2	; 0x02
    ae34:	fc 01       	movw	r30, r24
    ae36:	17 8e       	std	Z+31, r1	; 0x1f
    }
}
    ae38:	00 00       	nop
    ae3a:	26 96       	adiw	r28, 0x06	; 6
    ae3c:	cd bf       	out	0x3d, r28	; 61
    ae3e:	de bf       	out	0x3e, r29	; 62
    ae40:	df 91       	pop	r29
    ae42:	cf 91       	pop	r28
    ae44:	08 95       	ret

0000ae46 <lin_tl_make_master_request_pdu>:
 * This function is implemented for Master
 *
 * Implements    : lin_tl_make_master_request_pdu_Activity
 *END**************************************************************************/
static void lin_tl_make_master_request_pdu(l_ifc_handle iii)
{
    ae46:	cf 93       	push	r28
    ae48:	df 93       	push	r29
    ae4a:	00 d0       	rcall	.+0      	; 0xae4c <lin_tl_make_master_request_pdu+0x6>
    ae4c:	1f 92       	push	r1
    ae4e:	cd b7       	in	r28, 0x3d	; 61
    ae50:	de b7       	in	r29, 0x3e	; 62
    ae52:	8b 83       	std	Y+3, r24	; 0x03
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    ae54:	8b 81       	ldd	r24, Y+3	; 0x03
    ae56:	28 2f       	mov	r18, r24
    ae58:	30 e0       	ldi	r19, 0x00	; 0
    ae5a:	46 e1       	ldi	r20, 0x16	; 22
    ae5c:	42 9f       	mul	r20, r18
    ae5e:	c0 01       	movw	r24, r0
    ae60:	43 9f       	mul	r20, r19
    ae62:	90 0d       	add	r25, r0
    ae64:	11 24       	eor	r1, r1
    ae66:	8f 55       	subi	r24, 0x5F	; 95
    ae68:	99 4b       	sbci	r25, 0xB9	; 185
    ae6a:	89 83       	std	Y+1, r24	; 0x01
    ae6c:	9a 83       	std	Y+2, r25	; 0x02

    tl_get_raw(iii, prot_state_ptr->response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    ae6e:	8b 81       	ldd	r24, Y+3	; 0x03
    ae70:	28 2f       	mov	r18, r24
    ae72:	30 e0       	ldi	r19, 0x00	; 0
    ae74:	44 e3       	ldi	r20, 0x34	; 52
    ae76:	42 9f       	mul	r20, r18
    ae78:	c0 01       	movw	r24, r0
    ae7a:	43 9f       	mul	r20, r19
    ae7c:	90 0d       	add	r25, r0
    ae7e:	11 24       	eor	r1, r1
    ae80:	ac 01       	movw	r20, r24
    ae82:	43 59       	subi	r20, 0x93	; 147
    ae84:	59 4b       	sbci	r21, 0xB9	; 185
    ae86:	89 81       	ldd	r24, Y+1	; 0x01
    ae88:	9a 81       	ldd	r25, Y+2	; 0x02
    ae8a:	fc 01       	movw	r30, r24
    ae8c:	82 81       	ldd	r24, Z+2	; 0x02
    ae8e:	93 81       	ldd	r25, Z+3	; 0x03
    ae90:	20 e0       	ldi	r18, 0x00	; 0
    ae92:	bc 01       	movw	r22, r24
    ae94:	8b 81       	ldd	r24, Y+3	; 0x03
    ae96:	0e 94 4d 5a 	call	0xb49a	; 0xb49a <tl_get_raw>
    prot_state_ptr->response_length = 8U;
    ae9a:	89 81       	ldd	r24, Y+1	; 0x01
    ae9c:	9a 81       	ldd	r25, Y+2	; 0x02
    ae9e:	28 e0       	ldi	r18, 0x08	; 8
    aea0:	fc 01       	movw	r30, r24
    aea2:	24 83       	std	Z+4, r18	; 0x04
}
    aea4:	00 00       	nop
    aea6:	23 96       	adiw	r28, 0x03	; 3
    aea8:	cd bf       	out	0x3d, r28	; 61
    aeaa:	de bf       	out	0x3e, r29	; 62
    aeac:	df 91       	pop	r29
    aeae:	cf 91       	pop	r28
    aeb0:	08 95       	ret

0000aeb2 <lin_tl_get_pdu>:
 * This function is implemented for Slave and Master.
 *
 * Implements    : lin_tl_get_pdu_Activity
 *END**************************************************************************/
static void lin_tl_get_pdu(l_ifc_handle iii)
{
    aeb2:	cf 93       	push	r28
    aeb4:	df 93       	push	r29
    aeb6:	1f 92       	push	r1
    aeb8:	cd b7       	in	r28, 0x3d	; 61
    aeba:	de b7       	in	r29, 0x3e	; 62
    aebc:	89 83       	std	Y+1, r24	; 0x01
    /* Get data from tx queue */
    tl_get_raw(iii, g_lin_protocol_state_array[iii].response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    aebe:	89 81       	ldd	r24, Y+1	; 0x01
    aec0:	28 2f       	mov	r18, r24
    aec2:	30 e0       	ldi	r19, 0x00	; 0
    aec4:	44 e3       	ldi	r20, 0x34	; 52
    aec6:	42 9f       	mul	r20, r18
    aec8:	c0 01       	movw	r24, r0
    aeca:	43 9f       	mul	r20, r19
    aecc:	90 0d       	add	r25, r0
    aece:	11 24       	eor	r1, r1
    aed0:	ac 01       	movw	r20, r24
    aed2:	43 59       	subi	r20, 0x93	; 147
    aed4:	59 4b       	sbci	r21, 0xB9	; 185
    aed6:	89 81       	ldd	r24, Y+1	; 0x01
    aed8:	28 2f       	mov	r18, r24
    aeda:	30 e0       	ldi	r19, 0x00	; 0
    aedc:	66 e1       	ldi	r22, 0x16	; 22
    aede:	62 9f       	mul	r22, r18
    aee0:	c0 01       	movw	r24, r0
    aee2:	63 9f       	mul	r22, r19
    aee4:	90 0d       	add	r25, r0
    aee6:	11 24       	eor	r1, r1
    aee8:	8d 55       	subi	r24, 0x5D	; 93
    aeea:	99 4b       	sbci	r25, 0xB9	; 185
    aeec:	fc 01       	movw	r30, r24
    aeee:	80 81       	ld	r24, Z
    aef0:	91 81       	ldd	r25, Z+1	; 0x01
    aef2:	20 e0       	ldi	r18, 0x00	; 0
    aef4:	bc 01       	movw	r22, r24
    aef6:	89 81       	ldd	r24, Y+1	; 0x01
    aef8:	0e 94 4d 5a 	call	0xb49a	; 0xb49a <tl_get_raw>
}
    aefc:	00 00       	nop
    aefe:	0f 90       	pop	r0
    af00:	df 91       	pop	r29
    af02:	cf 91       	pop	r28
    af04:	08 95       	ret

0000af06 <lin_tl_handler_rx_completed>:
 * This function is implemented for Slave and Master.
 *
 * Implements    : lin_tl_handler_rx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_rx_completed(l_ifc_handle iii)
{
    af06:	cf 93       	push	r28
    af08:	df 93       	push	r29
    af0a:	cd b7       	in	r28, 0x3d	; 61
    af0c:	de b7       	in	r29, 0x3e	; 62
    af0e:	2d 97       	sbiw	r28, 0x0d	; 13
    af10:	cd bf       	out	0x3d, r28	; 61
    af12:	de bf       	out	0x3e, r29	; 62
    af14:	8d 87       	std	Y+13, r24	; 0x0d
    l_u8 pci_type;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    af16:	8d 85       	ldd	r24, Y+13	; 0x0d
    af18:	28 2f       	mov	r18, r24
    af1a:	30 e0       	ldi	r19, 0x00	; 0
    af1c:	44 e3       	ldi	r20, 0x34	; 52
    af1e:	42 9f       	mul	r20, r18
    af20:	c0 01       	movw	r24, r0
    af22:	43 9f       	mul	r20, r19
    af24:	90 0d       	add	r25, r0
    af26:	11 24       	eor	r1, r1
    af28:	83 59       	subi	r24, 0x93	; 147
    af2a:	99 4b       	sbci	r25, 0xB9	; 185
    af2c:	8a 83       	std	Y+2, r24	; 0x02
    af2e:	9b 83       	std	Y+3, r25	; 0x03
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    af30:	8d 85       	ldd	r24, Y+13	; 0x0d
    af32:	28 2f       	mov	r18, r24
    af34:	30 e0       	ldi	r19, 0x00	; 0
    af36:	46 e1       	ldi	r20, 0x16	; 22
    af38:	42 9f       	mul	r20, r18
    af3a:	c0 01       	movw	r24, r0
    af3c:	43 9f       	mul	r20, r19
    af3e:	90 0d       	add	r25, r0
    af40:	11 24       	eor	r1, r1
    af42:	8f 55       	subi	r24, 0x5F	; 95
    af44:	99 4b       	sbci	r25, 0xB9	; 185
    af46:	8c 83       	std	Y+4, r24	; 0x04
    af48:	9d 83       	std	Y+5, r25	; 0x05
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    af4a:	8c 81       	ldd	r24, Y+4	; 0x04
    af4c:	9d 81       	ldd	r25, Y+5	; 0x05
    af4e:	fc 01       	movw	r30, r24
    af50:	82 81       	ldd	r24, Z+2	; 0x02
    af52:	93 81       	ldd	r25, Z+3	; 0x03
    af54:	8e 83       	std	Y+6, r24	; 0x06
    af56:	9f 83       	std	Y+7, r25	; 0x07
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    af58:	8d 85       	ldd	r24, Y+13	; 0x0d
    af5a:	28 2f       	mov	r18, r24
    af5c:	30 e0       	ldi	r19, 0x00	; 0
    af5e:	4c e1       	ldi	r20, 0x1C	; 28
    af60:	42 9f       	mul	r20, r18
    af62:	c0 01       	movw	r24, r0
    af64:	43 9f       	mul	r20, r19
    af66:	90 0d       	add	r25, r0
    af68:	11 24       	eor	r1, r1
    af6a:	86 56       	subi	r24, 0x66	; 102
    af6c:	9d 4b       	sbci	r25, 0xBD	; 189
    af6e:	88 87       	std	Y+8, r24	; 0x08
    af70:	99 87       	std	Y+9, r25	; 0x09
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    af72:	19 82       	std	Y+1, r1	; 0x01
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    af74:	88 85       	ldd	r24, Y+8	; 0x08
    af76:	99 85       	ldd	r25, Y+9	; 0x09
    af78:	fc 01       	movw	r30, r24
    af7a:	93 81       	ldd	r25, Z+3	; 0x03
    af7c:	81 e0       	ldi	r24, 0x01	; 1
    af7e:	89 27       	eor	r24, r25
    af80:	88 23       	and	r24, r24
    af82:	09 f4       	brne	.+2      	; 0xaf86 <lin_tl_handler_rx_completed+0x80>
    af84:	48 c0       	rjmp	.+144    	; 0xb016 <lin_tl_handler_rx_completed+0x110>
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    af86:	88 85       	ldd	r24, Y+8	; 0x08
    af88:	99 85       	ldd	r25, Y+9	; 0x09
    af8a:	fc 01       	movw	r30, r24
    af8c:	82 89       	ldd	r24, Z+18	; 0x12
    af8e:	28 2f       	mov	r18, r24
    af90:	30 e0       	ldi	r19, 0x00	; 0
    af92:	44 e2       	ldi	r20, 0x24	; 36
    af94:	42 9f       	mul	r20, r18
    af96:	c0 01       	movw	r24, r0
    af98:	43 9f       	mul	r20, r19
    af9a:	90 0d       	add	r25, r0
    af9c:	11 24       	eor	r1, r1
    af9e:	8a 58       	subi	r24, 0x8A	; 138
    afa0:	9d 4b       	sbci	r25, 0xBD	; 189
    afa2:	8a 87       	std	Y+10, r24	; 0x0a
    afa4:	9b 87       	std	Y+11, r25	; 0x0b
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    afa6:	8e 81       	ldd	r24, Y+6	; 0x06
    afa8:	9f 81       	ldd	r25, Y+7	; 0x07
    afaa:	fc 01       	movw	r30, r24
    afac:	80 81       	ld	r24, Z
    afae:	8f 37       	cpi	r24, 0x7F	; 127
    afb0:	61 f1       	breq	.+88     	; 0xb00a <lin_tl_handler_rx_completed+0x104>
    afb2:	8e 81       	ldd	r24, Y+6	; 0x06
    afb4:	9f 81       	ldd	r25, Y+7	; 0x07
    afb6:	fc 01       	movw	r30, r24
    afb8:	80 81       	ld	r24, Z
    afba:	8e 37       	cpi	r24, 0x7E	; 126
    afbc:	31 f1       	breq	.+76     	; 0xb00a <lin_tl_handler_rx_completed+0x104>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    afbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    afc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    afc2:	fc 01       	movw	r30, r24
    afc4:	80 81       	ld	r24, Z
    afc6:	91 81       	ldd	r25, Z+1	; 0x01
    afc8:	fc 01       	movw	r30, r24
    afca:	20 81       	ld	r18, Z
    afcc:	8e 81       	ldd	r24, Y+6	; 0x06
    afce:	9f 81       	ldd	r25, Y+7	; 0x07
    afd0:	fc 01       	movw	r30, r24
    afd2:	80 81       	ld	r24, Z
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    afd4:	28 17       	cp	r18, r24
    afd6:	31 f0       	breq	.+12     	; 0xafe4 <lin_tl_handler_rx_completed+0xde>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    afd8:	8e 81       	ldd	r24, Y+6	; 0x06
    afda:	9f 81       	ldd	r25, Y+7	; 0x07
    afdc:	fc 01       	movw	r30, r24
    afde:	82 81       	ldd	r24, Z+2	; 0x02
    afe0:	80 3b       	cpi	r24, 0xB0	; 176
    afe2:	81 f4       	brne	.+32     	; 0xb004 <lin_tl_handler_rx_completed+0xfe>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    afe4:	8a 85       	ldd	r24, Y+10	; 0x0a
    afe6:	9b 85       	ldd	r25, Y+11	; 0x0b
    afe8:	fc 01       	movw	r30, r24
    afea:	22 81       	ldd	r18, Z+2	; 0x02
    afec:	8e 81       	ldd	r24, Y+6	; 0x06
    afee:	9f 81       	ldd	r25, Y+7	; 0x07
    aff0:	fc 01       	movw	r30, r24
    aff2:	80 81       	ld	r24, Z
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    aff4:	28 17       	cp	r18, r24
    aff6:	49 f0       	breq	.+18     	; 0xb00a <lin_tl_handler_rx_completed+0x104>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    aff8:	8e 81       	ldd	r24, Y+6	; 0x06
    affa:	9f 81       	ldd	r25, Y+7	; 0x07
    affc:	fc 01       	movw	r30, r24
    affe:	82 81       	ldd	r24, Z+2	; 0x02
    b000:	80 3b       	cpi	r24, 0xB0	; 176
    b002:	19 f4       	brne	.+6      	; 0xb00a <lin_tl_handler_rx_completed+0x104>
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    b004:	81 e0       	ldi	r24, 0x01	; 1
    b006:	90 e0       	ldi	r25, 0x00	; 0
    b008:	02 c0       	rjmp	.+4      	; 0xb00e <lin_tl_handler_rx_completed+0x108>
    b00a:	80 e0       	ldi	r24, 0x00	; 0
    b00c:	90 e0       	ldi	r25, 0x00	; 0
    b00e:	89 83       	std	Y+1, r24	; 0x01
    b010:	89 81       	ldd	r24, Y+1	; 0x01
    b012:	81 70       	andi	r24, 0x01	; 1
    b014:	89 83       	std	Y+1, r24	; 0x01
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    }
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    pci_type = (l_u8)(((*lin_tl_pdu)[1] & 0xF0U) >> 4U);
    b016:	8e 81       	ldd	r24, Y+6	; 0x06
    b018:	9f 81       	ldd	r25, Y+7	; 0x07
    b01a:	fc 01       	movw	r30, r24
    b01c:	81 81       	ldd	r24, Z+1	; 0x01
    b01e:	82 95       	swap	r24
    b020:	8f 70       	andi	r24, 0x0F	; 15
    b022:	8c 87       	std	Y+12, r24	; 0x0c
    /* check NAD whether or not belongs to this slave node */
    #if (SUPPORT_SLAVE_MODE == 1U)
    if (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (invalid_NAD || (pci_type > PCI_CF)))
    b024:	88 85       	ldd	r24, Y+8	; 0x08
    b026:	99 85       	ldd	r25, Y+9	; 0x09
    b028:	fc 01       	movw	r30, r24
    b02a:	93 81       	ldd	r25, Z+3	; 0x03
    b02c:	81 e0       	ldi	r24, 0x01	; 1
    b02e:	89 27       	eor	r24, r25
    b030:	88 23       	and	r24, r24
    b032:	59 f0       	breq	.+22     	; 0xb04a <lin_tl_handler_rx_completed+0x144>
    b034:	89 81       	ldd	r24, Y+1	; 0x01
    b036:	88 23       	and	r24, r24
    b038:	19 f4       	brne	.+6      	; 0xb040 <lin_tl_handler_rx_completed+0x13a>
    b03a:	8c 85       	ldd	r24, Y+12	; 0x0c
    b03c:	83 30       	cpi	r24, 0x03	; 3
    b03e:	28 f0       	brcs	.+10     	; 0xb04a <lin_tl_handler_rx_completed+0x144>
    {
        tl_desc_ptr->slave_resp_cnt = 0;
    b040:	8a 81       	ldd	r24, Y+2	; 0x02
    b042:	9b 81       	ldd	r25, Y+3	; 0x03
    b044:	fc 01       	movw	r30, r24
    b046:	12 a6       	std	Z+42, r1	; 0x2a
                /* process received PDU */
                lin_process_pdu(iii, lin_tl_pdu);
            }
        }
    }
}
    b048:	21 c0       	rjmp	.+66     	; 0xb08c <lin_tl_handler_rx_completed+0x186>
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    b04a:	8a 81       	ldd	r24, Y+2	; 0x02
    b04c:	9b 81       	ldd	r25, Y+3	; 0x03
    b04e:	fc 01       	movw	r30, r24
    b050:	86 a1       	ldd	r24, Z+38	; 0x26
    b052:	85 30       	cpi	r24, 0x05	; 5
    b054:	31 f0       	breq	.+12     	; 0xb062 <lin_tl_handler_rx_completed+0x15c>
    b056:	8a 81       	ldd	r24, Y+2	; 0x02
    b058:	9b 81       	ldd	r25, Y+3	; 0x03
    b05a:	fc 01       	movw	r30, r24
    b05c:	86 a1       	ldd	r24, Z+38	; 0x26
    b05e:	82 30       	cpi	r24, 0x02	; 2
    b060:	31 f4       	brne	.+12     	; 0xb06e <lin_tl_handler_rx_completed+0x168>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
    b062:	8e 81       	ldd	r24, Y+6	; 0x06
    b064:	9f 81       	ldd	r25, Y+7	; 0x07
    b066:	fc 01       	movw	r30, r24
    b068:	80 81       	ld	r24, Z
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    b06a:	8e 37       	cpi	r24, 0x7E	; 126
    b06c:	79 f0       	breq	.+30     	; 0xb08c <lin_tl_handler_rx_completed+0x186>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
        {
            /* check error */
            if (!((tl_desc_ptr->service_status == LD_SERVICE_ERROR) && (pci_type == PCI_CF)))
    b06e:	8a 81       	ldd	r24, Y+2	; 0x02
    b070:	9b 81       	ldd	r25, Y+3	; 0x03
    b072:	fc 01       	movw	r30, r24
    b074:	83 a5       	ldd	r24, Z+43	; 0x2b
    b076:	83 30       	cpi	r24, 0x03	; 3
    b078:	19 f4       	brne	.+6      	; 0xb080 <lin_tl_handler_rx_completed+0x17a>
    b07a:	8c 85       	ldd	r24, Y+12	; 0x0c
    b07c:	82 30       	cpi	r24, 0x02	; 2
    b07e:	31 f0       	breq	.+12     	; 0xb08c <lin_tl_handler_rx_completed+0x186>
            {
                /* process received PDU */
                lin_process_pdu(iii, lin_tl_pdu);
    b080:	8e 81       	ldd	r24, Y+6	; 0x06
    b082:	9f 81       	ldd	r25, Y+7	; 0x07
    b084:	bc 01       	movw	r22, r24
    b086:	8d 85       	ldd	r24, Y+13	; 0x0d
    b088:	0e 94 4d 56 	call	0xac9a	; 0xac9a <lin_process_pdu>
            }
        }
    }
}
    b08c:	00 00       	nop
    b08e:	2d 96       	adiw	r28, 0x0d	; 13
    b090:	cd bf       	out	0x3d, r28	; 61
    b092:	de bf       	out	0x3e, r29	; 62
    b094:	df 91       	pop	r29
    b096:	cf 91       	pop	r28
    b098:	08 95       	ret

0000b09a <lin_tl_handler_tx_completed>:
 * Description   : This function process when interface send diagnostic frame successfully
 *
 * Implements    : lin_tl_handler_tx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_tx_completed(l_ifc_handle iii)
{
    b09a:	cf 93       	push	r28
    b09c:	df 93       	push	r29
    b09e:	cd b7       	in	r28, 0x3d	; 61
    b0a0:	de b7       	in	r29, 0x3e	; 62
    b0a2:	25 97       	sbiw	r28, 0x05	; 5
    b0a4:	cd bf       	out	0x3d, r28	; 61
    b0a6:	de bf       	out	0x3e, r29	; 62
    b0a8:	8d 83       	std	Y+5, r24	; 0x05
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    b0aa:	8d 81       	ldd	r24, Y+5	; 0x05
    b0ac:	28 2f       	mov	r18, r24
    b0ae:	30 e0       	ldi	r19, 0x00	; 0
    b0b0:	44 e3       	ldi	r20, 0x34	; 52
    b0b2:	42 9f       	mul	r20, r18
    b0b4:	c0 01       	movw	r24, r0
    b0b6:	43 9f       	mul	r20, r19
    b0b8:	90 0d       	add	r25, r0
    b0ba:	11 24       	eor	r1, r1
    b0bc:	83 59       	subi	r24, 0x93	; 147
    b0be:	99 4b       	sbci	r25, 0xB9	; 185
    b0c0:	89 83       	std	Y+1, r24	; 0x01
    b0c2:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    b0c4:	8d 81       	ldd	r24, Y+5	; 0x05
    b0c6:	28 2f       	mov	r18, r24
    b0c8:	30 e0       	ldi	r19, 0x00	; 0
    b0ca:	4c e1       	ldi	r20, 0x1C	; 28
    b0cc:	42 9f       	mul	r20, r18
    b0ce:	c0 01       	movw	r24, r0
    b0d0:	43 9f       	mul	r20, r19
    b0d2:	90 0d       	add	r25, r0
    b0d4:	11 24       	eor	r1, r1
    b0d6:	86 56       	subi	r24, 0x66	; 102
    b0d8:	9d 4b       	sbci	r25, 0xBD	; 189
    b0da:	8b 83       	std	Y+3, r24	; 0x03
    b0dc:	9c 83       	std	Y+4, r25	; 0x04
    #if (SUPPORT_MASTER_MODE == 1U)
    lin_master_data_t * master_data_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Reset interleave timeout */
    tl_desc_ptr->interleave_timeout_counter = 0;
    b0de:	89 81       	ldd	r24, Y+1	; 0x01
    b0e0:	9a 81       	ldd	r25, Y+2	; 0x02
    b0e2:	fc 01       	movw	r30, r24
    b0e4:	10 a6       	std	Z+40, r1	; 0x28
    b0e6:	11 a6       	std	Z+41, r1	; 0x29
    /* Check message is sent completely */
    if (0U == tl_desc_ptr->tl_tx_queue.queue_current_size)
    b0e8:	89 81       	ldd	r24, Y+1	; 0x01
    b0ea:	9a 81       	ldd	r25, Y+2	; 0x02
    b0ec:	fc 01       	movw	r30, r24
    b0ee:	85 81       	ldd	r24, Z+5	; 0x05
    b0f0:	96 81       	ldd	r25, Z+6	; 0x06
    b0f2:	89 2b       	or	r24, r25
    b0f4:	e1 f4       	brne	.+56     	; 0xb12e <lin_tl_handler_tx_completed+0x94>
    {
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    b0f6:	89 81       	ldd	r24, Y+1	; 0x01
    b0f8:	9a 81       	ldd	r25, Y+2	; 0x02
    b0fa:	fc 01       	movw	r30, r24
    b0fc:	17 8e       	std	Z+31, r1	; 0x1f
        tl_desc_ptr->tx_msg_status = LD_COMPLETED;
    b0fe:	89 81       	ldd	r24, Y+1	; 0x01
    b100:	9a 81       	ldd	r25, Y+2	; 0x02
    b102:	22 e0       	ldi	r18, 0x02	; 2
    b104:	fc 01       	movw	r30, r24
    b106:	21 8f       	std	Z+25, r18	; 0x19
        tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    b108:	89 81       	ldd	r24, Y+1	; 0x01
    b10a:	9a 81       	ldd	r25, Y+2	; 0x02
    b10c:	21 e0       	ldi	r18, 0x01	; 1
    b10e:	fc 01       	movw	r30, r24
    b110:	23 a7       	std	Z+43, r18	; 0x2b
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    b112:	8b 81       	ldd	r24, Y+3	; 0x03
    b114:	9c 81       	ldd	r25, Y+4	; 0x04
    b116:	fc 01       	movw	r30, r24
    b118:	93 81       	ldd	r25, Z+3	; 0x03
    b11a:	81 e0       	ldi	r24, 0x01	; 1
    b11c:	89 27       	eor	r24, r25
    b11e:	88 23       	and	r24, r24
    b120:	c1 f1       	breq	.+112    	; 0xb192 <lin_tl_handler_tx_completed+0xf8>
        {
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    b122:	89 81       	ldd	r24, Y+1	; 0x01
    b124:	9a 81       	ldd	r25, Y+2	; 0x02
    b126:	21 e0       	ldi	r18, 0x01	; 1
    b128:	fc 01       	movw	r30, r24
    b12a:	26 a3       	std	Z+38, r18	; 0x26
    {
        /* Switch to previous normal schedule table*/
        lin_tl_sch_switch(iii);
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
}
    b12c:	32 c0       	rjmp	.+100    	; 0xb192 <lin_tl_handler_tx_completed+0xf8>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }
    else
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    b12e:	8b 81       	ldd	r24, Y+3	; 0x03
    b130:	9c 81       	ldd	r25, Y+4	; 0x04
    b132:	fc 01       	movw	r30, r24
    b134:	93 81       	ldd	r25, Z+3	; 0x03
    b136:	81 e0       	ldi	r24, 0x01	; 1
    b138:	89 27       	eor	r24, r25
    b13a:	88 23       	and	r24, r24
    b13c:	51 f1       	breq	.+84     	; 0xb192 <lin_tl_handler_tx_completed+0xf8>
        {
            if(prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    b13e:	8b 81       	ldd	r24, Y+3	; 0x03
    b140:	9c 81       	ldd	r25, Y+4	; 0x04
    b142:	fc 01       	movw	r30, r24
    b144:	80 81       	ld	r24, Z
    b146:	88 23       	and	r24, r24
    b148:	21 f5       	brne	.+72     	; 0xb192 <lin_tl_handler_tx_completed+0xf8>
            {
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_As_timeout;
    b14a:	8d 81       	ldd	r24, Y+5	; 0x05
    b14c:	28 2f       	mov	r18, r24
    b14e:	30 e0       	ldi	r19, 0x00	; 0
    b150:	4c e1       	ldi	r20, 0x1C	; 28
    b152:	42 9f       	mul	r20, r18
    b154:	c0 01       	movw	r24, r0
    b156:	43 9f       	mul	r20, r19
    b158:	90 0d       	add	r25, r0
    b15a:	11 24       	eor	r1, r1
    b15c:	84 55       	subi	r24, 0x54	; 84
    b15e:	9d 4b       	sbci	r25, 0xBD	; 189
    b160:	fc 01       	movw	r30, r24
    b162:	80 81       	ld	r24, Z
    b164:	28 2f       	mov	r18, r24
    b166:	30 e0       	ldi	r19, 0x00	; 0
    b168:	44 e2       	ldi	r20, 0x24	; 36
    b16a:	42 9f       	mul	r20, r18
    b16c:	c0 01       	movw	r24, r0
    b16e:	43 9f       	mul	r20, r19
    b170:	90 0d       	add	r25, r0
    b172:	11 24       	eor	r1, r1
    b174:	8f 56       	subi	r24, 0x6F	; 111
    b176:	9d 4b       	sbci	r25, 0xBD	; 189
    b178:	fc 01       	movw	r30, r24
    b17a:	20 81       	ld	r18, Z
    b17c:	31 81       	ldd	r19, Z+1	; 0x01
    b17e:	89 81       	ldd	r24, Y+1	; 0x01
    b180:	9a 81       	ldd	r25, Y+2	; 0x02
    b182:	fc 01       	movw	r30, r24
    b184:	20 a3       	std	Z+32, r18	; 0x20
    b186:	31 a3       	std	Z+33, r19	; 0x21
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_AS_TIMEOUT;
    b188:	89 81       	ldd	r24, Y+1	; 0x01
    b18a:	9a 81       	ldd	r25, Y+2	; 0x02
    b18c:	21 e0       	ldi	r18, 0x01	; 1
    b18e:	fc 01       	movw	r30, r24
    b190:	27 8f       	std	Z+31, r18	; 0x1f
    {
        /* Switch to previous normal schedule table*/
        lin_tl_sch_switch(iii);
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
}
    b192:	00 00       	nop
    b194:	25 96       	adiw	r28, 0x05	; 5
    b196:	cd bf       	out	0x3d, r28	; 61
    b198:	de bf       	out	0x3e, r29	; 62
    b19a:	df 91       	pop	r29
    b19c:	cf 91       	pop	r28
    b19e:	08 95       	ret

0000b1a0 <lin_tl_attach_service>:
 * This function is implemented for Slave only.
 *
 * Implements    : lin_tl_attach_service_Activity
 *END**************************************************************************/
static void lin_tl_attach_service(l_ifc_handle iii)
{
    b1a0:	cf 93       	push	r28
    b1a2:	df 93       	push	r29
    b1a4:	cd b7       	in	r28, 0x3d	; 61
    b1a6:	de b7       	in	r29, 0x3e	; 62
    b1a8:	28 97       	sbiw	r28, 0x08	; 8
    b1aa:	cd bf       	out	0x3d, r28	; 61
    b1ac:	de bf       	out	0x3e, r29	; 62
    b1ae:	88 87       	std	Y+8, r24	; 0x08
    l_u8 sid;
    l_u8 frame_type;
    l_u8 rx_queue_current_status;
    const lin_transport_layer_queue_t * rx_queue;
    lin_transport_layer_queue_t * tx_queue;
    rx_queue = &(g_lin_tl_descriptor_array[iii].tl_rx_queue);
    b1b0:	88 85       	ldd	r24, Y+8	; 0x08
    b1b2:	28 2f       	mov	r18, r24
    b1b4:	30 e0       	ldi	r19, 0x00	; 0
    b1b6:	44 e3       	ldi	r20, 0x34	; 52
    b1b8:	42 9f       	mul	r20, r18
    b1ba:	c0 01       	movw	r24, r0
    b1bc:	43 9f       	mul	r20, r19
    b1be:	90 0d       	add	r25, r0
    b1c0:	11 24       	eor	r1, r1
    b1c2:	0b 96       	adiw	r24, 0x0b	; 11
    b1c4:	83 59       	subi	r24, 0x93	; 147
    b1c6:	99 4b       	sbci	r25, 0xB9	; 185
    b1c8:	8a 83       	std	Y+2, r24	; 0x02
    b1ca:	9b 83       	std	Y+3, r25	; 0x03
    tx_queue = &(g_lin_tl_descriptor_array[iii].tl_tx_queue);
    b1cc:	88 85       	ldd	r24, Y+8	; 0x08
    b1ce:	28 2f       	mov	r18, r24
    b1d0:	30 e0       	ldi	r19, 0x00	; 0
    b1d2:	44 e3       	ldi	r20, 0x34	; 52
    b1d4:	42 9f       	mul	r20, r18
    b1d6:	c0 01       	movw	r24, r0
    b1d8:	43 9f       	mul	r20, r19
    b1da:	90 0d       	add	r25, r0
    b1dc:	11 24       	eor	r1, r1
    b1de:	83 59       	subi	r24, 0x93	; 147
    b1e0:	99 4b       	sbci	r25, 0xB9	; 185
    b1e2:	8c 83       	std	Y+4, r24	; 0x04
    b1e4:	9d 83       	std	Y+5, r25	; 0x05


    /* prepare tx queue */
    tx_queue->queue_current_size = 0;
    b1e6:	8c 81       	ldd	r24, Y+4	; 0x04
    b1e8:	9d 81       	ldd	r25, Y+5	; 0x05
    b1ea:	fc 01       	movw	r30, r24
    b1ec:	15 82       	std	Z+5, r1	; 0x05
    b1ee:	16 82       	std	Z+6, r1	; 0x06
    tx_queue->queue_header = 0;
    b1f0:	8c 81       	ldd	r24, Y+4	; 0x04
    b1f2:	9d 81       	ldd	r25, Y+5	; 0x05
    b1f4:	fc 01       	movw	r30, r24
    b1f6:	10 82       	st	Z, r1
    b1f8:	11 82       	std	Z+1, r1	; 0x01
    tx_queue->queue_tail = 0;
    b1fa:	8c 81       	ldd	r24, Y+4	; 0x04
    b1fc:	9d 81       	ldd	r25, Y+5	; 0x05
    b1fe:	fc 01       	movw	r30, r24
    b200:	12 82       	std	Z+2, r1	; 0x02
    b202:	13 82       	std	Z+3, r1	; 0x03
    tx_queue->queue_status = LD_QUEUE_EMPTY;
    b204:	8c 81       	ldd	r24, Y+4	; 0x04
    b206:	9d 81       	ldd	r25, Y+5	; 0x05
    b208:	25 e0       	ldi	r18, 0x05	; 5
    b20a:	fc 01       	movw	r30, r24
    b20c:	24 83       	std	Z+4, r18	; 0x04

    /* Get rx queue current status */
    rx_queue_current_status = ld_raw_rx_status(iii);
    b20e:	88 85       	ldd	r24, Y+8	; 0x08
    b210:	0e 94 c1 52 	call	0xa582	; 0xa582 <ld_raw_rx_status>
    b214:	8e 83       	std	Y+6, r24	; 0x06
    /* Check whether RX Queue contains data */
    if (((l_u8)LD_DATA_AVAILABLE == rx_queue_current_status) || ((l_u8)LD_QUEUE_FULL == rx_queue_current_status))
    b216:	8e 81       	ldd	r24, Y+6	; 0x06
    b218:	81 30       	cpi	r24, 0x01	; 1
    b21a:	21 f0       	breq	.+8      	; 0xb224 <lin_tl_attach_service+0x84>
    b21c:	8e 81       	ldd	r24, Y+6	; 0x06
    b21e:	83 30       	cpi	r24, 0x03	; 3
    b220:	09 f0       	breq	.+2      	; 0xb224 <lin_tl_attach_service+0x84>
    b222:	49 c0       	rjmp	.+146    	; 0xb2b6 <lin_tl_attach_service+0x116>
    {
        /* get frame type */
        frame_type = (l_u8)((rx_queue->tl_pdu_ptr[rx_queue->queue_header][1] & 0xF0U) >> 4U);
    b224:	8a 81       	ldd	r24, Y+2	; 0x02
    b226:	9b 81       	ldd	r25, Y+3	; 0x03
    b228:	fc 01       	movw	r30, r24
    b22a:	21 85       	ldd	r18, Z+9	; 0x09
    b22c:	32 85       	ldd	r19, Z+10	; 0x0a
    b22e:	8a 81       	ldd	r24, Y+2	; 0x02
    b230:	9b 81       	ldd	r25, Y+3	; 0x03
    b232:	fc 01       	movw	r30, r24
    b234:	80 81       	ld	r24, Z
    b236:	91 81       	ldd	r25, Z+1	; 0x01
    b238:	88 0f       	add	r24, r24
    b23a:	99 1f       	adc	r25, r25
    b23c:	88 0f       	add	r24, r24
    b23e:	99 1f       	adc	r25, r25
    b240:	88 0f       	add	r24, r24
    b242:	99 1f       	adc	r25, r25
    b244:	82 0f       	add	r24, r18
    b246:	93 1f       	adc	r25, r19
    b248:	fc 01       	movw	r30, r24
    b24a:	81 81       	ldd	r24, Z+1	; 0x01
    b24c:	82 95       	swap	r24
    b24e:	8f 70       	andi	r24, 0x0F	; 15
    b250:	8f 83       	std	Y+7, r24	; 0x07
        /* Get SID information */
        if (frame_type == PCI_FF)
    b252:	8f 81       	ldd	r24, Y+7	; 0x07
    b254:	81 30       	cpi	r24, 0x01	; 1
    b256:	b1 f4       	brne	.+44     	; 0xb284 <lin_tl_attach_service+0xe4>
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][3];
    b258:	8a 81       	ldd	r24, Y+2	; 0x02
    b25a:	9b 81       	ldd	r25, Y+3	; 0x03
    b25c:	fc 01       	movw	r30, r24
    b25e:	21 85       	ldd	r18, Z+9	; 0x09
    b260:	32 85       	ldd	r19, Z+10	; 0x0a
    b262:	8a 81       	ldd	r24, Y+2	; 0x02
    b264:	9b 81       	ldd	r25, Y+3	; 0x03
    b266:	fc 01       	movw	r30, r24
    b268:	80 81       	ld	r24, Z
    b26a:	91 81       	ldd	r25, Z+1	; 0x01
    b26c:	88 0f       	add	r24, r24
    b26e:	99 1f       	adc	r25, r25
    b270:	88 0f       	add	r24, r24
    b272:	99 1f       	adc	r25, r25
    b274:	88 0f       	add	r24, r24
    b276:	99 1f       	adc	r25, r25
    b278:	82 0f       	add	r24, r18
    b27a:	93 1f       	adc	r25, r19
    b27c:	fc 01       	movw	r30, r24
    b27e:	83 81       	ldd	r24, Z+3	; 0x03
    b280:	89 83       	std	Y+1, r24	; 0x01
    b282:	15 c0       	rjmp	.+42     	; 0xb2ae <lin_tl_attach_service+0x10e>
        }
        else
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][2];
    b284:	8a 81       	ldd	r24, Y+2	; 0x02
    b286:	9b 81       	ldd	r25, Y+3	; 0x03
    b288:	fc 01       	movw	r30, r24
    b28a:	21 85       	ldd	r18, Z+9	; 0x09
    b28c:	32 85       	ldd	r19, Z+10	; 0x0a
    b28e:	8a 81       	ldd	r24, Y+2	; 0x02
    b290:	9b 81       	ldd	r25, Y+3	; 0x03
    b292:	fc 01       	movw	r30, r24
    b294:	80 81       	ld	r24, Z
    b296:	91 81       	ldd	r25, Z+1	; 0x01
    b298:	88 0f       	add	r24, r24
    b29a:	99 1f       	adc	r25, r25
    b29c:	88 0f       	add	r24, r24
    b29e:	99 1f       	adc	r25, r25
    b2a0:	88 0f       	add	r24, r24
    b2a2:	99 1f       	adc	r25, r25
    b2a4:	82 0f       	add	r24, r18
    b2a6:	93 1f       	adc	r25, r19
    b2a8:	fc 01       	movw	r30, r24
    b2aa:	82 81       	ldd	r24, Z+2	; 0x02
    b2ac:	89 83       	std	Y+1, r24	; 0x01
        }

        /* Callback to diagnostic layer to process SID */
        DIAG_SERVICE_CALLBACK_HANDLER(iii, sid);
    b2ae:	69 81       	ldd	r22, Y+1	; 0x01
    b2b0:	88 85       	ldd	r24, Y+8	; 0x08
    b2b2:	0e 94 c7 47 	call	0x8f8e	; 0x8f8e <lin_diag_service_callback>
    }
}
    b2b6:	00 00       	nop
    b2b8:	28 96       	adiw	r28, 0x08	; 8
    b2ba:	cd bf       	out	0x3d, r28	; 61
    b2bc:	de bf       	out	0x3e, r29	; 62
    b2be:	df 91       	pop	r29
    b2c0:	cf 91       	pop	r28
    b2c2:	08 95       	ret

0000b2c4 <tl_put_raw>:
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    b2c4:	cf 93       	push	r28
    b2c6:	df 93       	push	r29
    b2c8:	cd b7       	in	r28, 0x3d	; 61
    b2ca:	de b7       	in	r29, 0x3e	; 62
    b2cc:	29 97       	sbiw	r28, 0x09	; 9
    b2ce:	cd bf       	out	0x3d, r28	; 61
    b2d0:	de bf       	out	0x3e, r29	; 62
    b2d2:	8c 83       	std	Y+4, r24	; 0x04
    b2d4:	6d 83       	std	Y+5, r22	; 0x05
    b2d6:	7e 83       	std	Y+6, r23	; 0x06
    b2d8:	4f 83       	std	Y+7, r20	; 0x07
    b2da:	58 87       	std	Y+8, r21	; 0x08
    b2dc:	29 87       	std	Y+9, r18	; 0x09
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Get transmit queue */
    queue_data = queue->tl_pdu_ptr;
    b2de:	8f 81       	ldd	r24, Y+7	; 0x07
    b2e0:	98 85       	ldd	r25, Y+8	; 0x08
    b2e2:	fc 01       	movw	r30, r24
    b2e4:	81 85       	ldd	r24, Z+9	; 0x09
    b2e6:	92 85       	ldd	r25, Z+10	; 0x0a
    b2e8:	8a 83       	std	Y+2, r24	; 0x02
    b2ea:	9b 83       	std	Y+3, r25	; 0x03

    /* check status of queue */
    if ((queue->queue_current_size < queue->queue_max_size) && ((data[0] != LD_FUNCTIONAL_NAD) || (queue_data[queue->queue_header][0] != LD_FUNCTIONAL_NAD)))
    b2ec:	8f 81       	ldd	r24, Y+7	; 0x07
    b2ee:	98 85       	ldd	r25, Y+8	; 0x08
    b2f0:	fc 01       	movw	r30, r24
    b2f2:	25 81       	ldd	r18, Z+5	; 0x05
    b2f4:	36 81       	ldd	r19, Z+6	; 0x06
    b2f6:	8f 81       	ldd	r24, Y+7	; 0x07
    b2f8:	98 85       	ldd	r25, Y+8	; 0x08
    b2fa:	fc 01       	movw	r30, r24
    b2fc:	87 81       	ldd	r24, Z+7	; 0x07
    b2fe:	90 85       	ldd	r25, Z+8	; 0x08
    b300:	28 17       	cp	r18, r24
    b302:	39 07       	cpc	r19, r25
    b304:	08 f0       	brcs	.+2      	; 0xb308 <tl_put_raw+0x44>
    b306:	c2 c0       	rjmp	.+388    	; 0xb48c <tl_put_raw+0x1c8>
    b308:	8d 81       	ldd	r24, Y+5	; 0x05
    b30a:	9e 81       	ldd	r25, Y+6	; 0x06
    b30c:	fc 01       	movw	r30, r24
    b30e:	80 81       	ld	r24, Z
    b310:	8e 37       	cpi	r24, 0x7E	; 126
    b312:	a1 f4       	brne	.+40     	; 0xb33c <tl_put_raw+0x78>
    b314:	8f 81       	ldd	r24, Y+7	; 0x07
    b316:	98 85       	ldd	r25, Y+8	; 0x08
    b318:	fc 01       	movw	r30, r24
    b31a:	80 81       	ld	r24, Z
    b31c:	91 81       	ldd	r25, Z+1	; 0x01
    b31e:	88 0f       	add	r24, r24
    b320:	99 1f       	adc	r25, r25
    b322:	88 0f       	add	r24, r24
    b324:	99 1f       	adc	r25, r25
    b326:	88 0f       	add	r24, r24
    b328:	99 1f       	adc	r25, r25
    b32a:	2a 81       	ldd	r18, Y+2	; 0x02
    b32c:	3b 81       	ldd	r19, Y+3	; 0x03
    b32e:	82 0f       	add	r24, r18
    b330:	93 1f       	adc	r25, r19
    b332:	fc 01       	movw	r30, r24
    b334:	80 81       	ld	r24, Z
    b336:	8e 37       	cpi	r24, 0x7E	; 126
    b338:	09 f4       	brne	.+2      	; 0xb33c <tl_put_raw+0x78>
    b33a:	a8 c0       	rjmp	.+336    	; 0xb48c <tl_put_raw+0x1c8>
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
    b33c:	8f 81       	ldd	r24, Y+7	; 0x07
    b33e:	98 85       	ldd	r25, Y+8	; 0x08
    b340:	fc 01       	movw	r30, r24
    b342:	84 81       	ldd	r24, Z+4	; 0x04
    b344:	85 30       	cpi	r24, 0x05	; 5
    b346:	31 f0       	breq	.+12     	; 0xb354 <tl_put_raw+0x90>
    b348:	8f 81       	ldd	r24, Y+7	; 0x07
    b34a:	98 85       	ldd	r25, Y+8	; 0x08
    b34c:	fc 01       	movw	r30, r24
    b34e:	84 81       	ldd	r24, Z+4	; 0x04
    b350:	88 23       	and	r24, r24
    b352:	79 f4       	brne	.+30     	; 0xb372 <tl_put_raw+0xae>
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    b354:	89 85       	ldd	r24, Y+9	; 0x09
    b356:	88 23       	and	r24, r24
    b358:	31 f4       	brne	.+12     	; 0xb366 <tl_put_raw+0xa2>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    b35a:	8f 81       	ldd	r24, Y+7	; 0x07
    b35c:	98 85       	ldd	r25, Y+8	; 0x08
    b35e:	24 e0       	ldi	r18, 0x04	; 4
    b360:	fc 01       	movw	r30, r24
    b362:	24 83       	std	Z+4, r18	; 0x04
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    b364:	4d c0       	rjmp	.+154    	; 0xb400 <tl_put_raw+0x13c>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    b366:	8f 81       	ldd	r24, Y+7	; 0x07
    b368:	98 85       	ldd	r25, Y+8	; 0x08
    b36a:	21 e0       	ldi	r18, 0x01	; 1
    b36c:	fc 01       	movw	r30, r24
    b36e:	24 83       	std	Z+4, r18	; 0x04
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    b370:	47 c0       	rjmp	.+142    	; 0xb400 <tl_put_raw+0x13c>
                queue->queue_status = LD_DATA_AVAILABLE;
            }
        }
        else
        {
            if ((data[0] == LD_FUNCTIONAL_NAD) && (TRANSMITTING == direction))
    b372:	8d 81       	ldd	r24, Y+5	; 0x05
    b374:	9e 81       	ldd	r25, Y+6	; 0x06
    b376:	fc 01       	movw	r30, r24
    b378:	80 81       	ld	r24, Z
    b37a:	8e 37       	cpi	r24, 0x7E	; 126
    b37c:	11 f5       	brne	.+68     	; 0xb3c2 <tl_put_raw+0xfe>
    b37e:	89 85       	ldd	r24, Y+9	; 0x09
    b380:	88 23       	and	r24, r24
    b382:	f9 f4       	brne	.+62     	; 0xb3c2 <tl_put_raw+0xfe>
            {
                if (0U == queue->queue_header)
    b384:	8f 81       	ldd	r24, Y+7	; 0x07
    b386:	98 85       	ldd	r25, Y+8	; 0x08
    b388:	fc 01       	movw	r30, r24
    b38a:	80 81       	ld	r24, Z
    b38c:	91 81       	ldd	r25, Z+1	; 0x01
    b38e:	89 2b       	or	r24, r25
    b390:	51 f4       	brne	.+20     	; 0xb3a6 <tl_put_raw+0xe2>
                {
                    queue->queue_header = queue->queue_max_size;
    b392:	8f 81       	ldd	r24, Y+7	; 0x07
    b394:	98 85       	ldd	r25, Y+8	; 0x08
    b396:	fc 01       	movw	r30, r24
    b398:	27 81       	ldd	r18, Z+7	; 0x07
    b39a:	30 85       	ldd	r19, Z+8	; 0x08
    b39c:	8f 81       	ldd	r24, Y+7	; 0x07
    b39e:	98 85       	ldd	r25, Y+8	; 0x08
    b3a0:	fc 01       	movw	r30, r24
    b3a2:	20 83       	st	Z, r18
    b3a4:	31 83       	std	Z+1, r19	; 0x01
                }
                queue->queue_header--;
    b3a6:	8f 81       	ldd	r24, Y+7	; 0x07
    b3a8:	98 85       	ldd	r25, Y+8	; 0x08
    b3aa:	fc 01       	movw	r30, r24
    b3ac:	80 81       	ld	r24, Z
    b3ae:	91 81       	ldd	r25, Z+1	; 0x01
    b3b0:	9c 01       	movw	r18, r24
    b3b2:	21 50       	subi	r18, 0x01	; 1
    b3b4:	31 09       	sbc	r19, r1
    b3b6:	8f 81       	ldd	r24, Y+7	; 0x07
    b3b8:	98 85       	ldd	r25, Y+8	; 0x08
    b3ba:	fc 01       	movw	r30, r24
    b3bc:	20 83       	st	Z, r18
    b3be:	31 83       	std	Z+1, r19	; 0x01
    b3c0:	1f c0       	rjmp	.+62     	; 0xb400 <tl_put_raw+0x13c>
            }
            else
            {
                queue->queue_tail++;
    b3c2:	8f 81       	ldd	r24, Y+7	; 0x07
    b3c4:	98 85       	ldd	r25, Y+8	; 0x08
    b3c6:	fc 01       	movw	r30, r24
    b3c8:	82 81       	ldd	r24, Z+2	; 0x02
    b3ca:	93 81       	ldd	r25, Z+3	; 0x03
    b3cc:	9c 01       	movw	r18, r24
    b3ce:	2f 5f       	subi	r18, 0xFF	; 255
    b3d0:	3f 4f       	sbci	r19, 0xFF	; 255
    b3d2:	8f 81       	ldd	r24, Y+7	; 0x07
    b3d4:	98 85       	ldd	r25, Y+8	; 0x08
    b3d6:	fc 01       	movw	r30, r24
    b3d8:	22 83       	std	Z+2, r18	; 0x02
    b3da:	33 83       	std	Z+3, r19	; 0x03
                /* Check if queue size equal to queue tail */
                if (queue->queue_max_size == queue->queue_tail)
    b3dc:	8f 81       	ldd	r24, Y+7	; 0x07
    b3de:	98 85       	ldd	r25, Y+8	; 0x08
    b3e0:	fc 01       	movw	r30, r24
    b3e2:	27 81       	ldd	r18, Z+7	; 0x07
    b3e4:	30 85       	ldd	r19, Z+8	; 0x08
    b3e6:	8f 81       	ldd	r24, Y+7	; 0x07
    b3e8:	98 85       	ldd	r25, Y+8	; 0x08
    b3ea:	fc 01       	movw	r30, r24
    b3ec:	82 81       	ldd	r24, Z+2	; 0x02
    b3ee:	93 81       	ldd	r25, Z+3	; 0x03
    b3f0:	28 17       	cp	r18, r24
    b3f2:	39 07       	cpc	r19, r25
    b3f4:	29 f4       	brne	.+10     	; 0xb400 <tl_put_raw+0x13c>
                {
                    queue->queue_tail = 0U;
    b3f6:	8f 81       	ldd	r24, Y+7	; 0x07
    b3f8:	98 85       	ldd	r25, Y+8	; 0x08
    b3fa:	fc 01       	movw	r30, r24
    b3fc:	12 82       	std	Z+2, r1	; 0x02
    b3fe:	13 82       	std	Z+3, r1	; 0x03
        }
        else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
    b400:	19 82       	std	Y+1, r1	; 0x01
    b402:	22 c0       	rjmp	.+68     	; 0xb448 <tl_put_raw+0x184>
            {
                queue_data[queue->queue_tail][i] = data[i];
    b404:	8f 81       	ldd	r24, Y+7	; 0x07
    b406:	98 85       	ldd	r25, Y+8	; 0x08
    b408:	fc 01       	movw	r30, r24
    b40a:	82 81       	ldd	r24, Z+2	; 0x02
    b40c:	93 81       	ldd	r25, Z+3	; 0x03
    b40e:	88 0f       	add	r24, r24
    b410:	99 1f       	adc	r25, r25
    b412:	88 0f       	add	r24, r24
    b414:	99 1f       	adc	r25, r25
    b416:	88 0f       	add	r24, r24
    b418:	99 1f       	adc	r25, r25
    b41a:	2a 81       	ldd	r18, Y+2	; 0x02
    b41c:	3b 81       	ldd	r19, Y+3	; 0x03
    b41e:	28 0f       	add	r18, r24
    b420:	39 1f       	adc	r19, r25
    b422:	89 81       	ldd	r24, Y+1	; 0x01
    b424:	88 2f       	mov	r24, r24
    b426:	90 e0       	ldi	r25, 0x00	; 0
    b428:	49 81       	ldd	r20, Y+1	; 0x01
    b42a:	44 2f       	mov	r20, r20
    b42c:	50 e0       	ldi	r21, 0x00	; 0
    b42e:	6d 81       	ldd	r22, Y+5	; 0x05
    b430:	7e 81       	ldd	r23, Y+6	; 0x06
    b432:	46 0f       	add	r20, r22
    b434:	57 1f       	adc	r21, r23
    b436:	fa 01       	movw	r30, r20
    b438:	40 81       	ld	r20, Z
    b43a:	82 0f       	add	r24, r18
    b43c:	93 1f       	adc	r25, r19
    b43e:	fc 01       	movw	r30, r24
    b440:	40 83       	st	Z, r20
        }
        else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
    b442:	89 81       	ldd	r24, Y+1	; 0x01
    b444:	8f 5f       	subi	r24, 0xFF	; 255
    b446:	89 83       	std	Y+1, r24	; 0x01
    b448:	89 81       	ldd	r24, Y+1	; 0x01
    b44a:	88 30       	cpi	r24, 0x08	; 8
    b44c:	d8 f2       	brcs	.-74     	; 0xb404 <tl_put_raw+0x140>
                queue_data[queue->queue_tail][i] = data[i];
            }
        }

        /* update queue status */
        queue->queue_current_size++;
    b44e:	8f 81       	ldd	r24, Y+7	; 0x07
    b450:	98 85       	ldd	r25, Y+8	; 0x08
    b452:	fc 01       	movw	r30, r24
    b454:	85 81       	ldd	r24, Z+5	; 0x05
    b456:	96 81       	ldd	r25, Z+6	; 0x06
    b458:	9c 01       	movw	r18, r24
    b45a:	2f 5f       	subi	r18, 0xFF	; 255
    b45c:	3f 4f       	sbci	r19, 0xFF	; 255
    b45e:	8f 81       	ldd	r24, Y+7	; 0x07
    b460:	98 85       	ldd	r25, Y+8	; 0x08
    b462:	fc 01       	movw	r30, r24
    b464:	25 83       	std	Z+5, r18	; 0x05
    b466:	36 83       	std	Z+6, r19	; 0x06
        if (queue->queue_current_size >= queue->queue_max_size)
    b468:	8f 81       	ldd	r24, Y+7	; 0x07
    b46a:	98 85       	ldd	r25, Y+8	; 0x08
    b46c:	fc 01       	movw	r30, r24
    b46e:	25 81       	ldd	r18, Z+5	; 0x05
    b470:	36 81       	ldd	r19, Z+6	; 0x06
    b472:	8f 81       	ldd	r24, Y+7	; 0x07
    b474:	98 85       	ldd	r25, Y+8	; 0x08
    b476:	fc 01       	movw	r30, r24
    b478:	87 81       	ldd	r24, Z+7	; 0x07
    b47a:	90 85       	ldd	r25, Z+8	; 0x08
    b47c:	28 17       	cp	r18, r24
    b47e:	39 07       	cpc	r19, r25
    b480:	28 f0       	brcs	.+10     	; 0xb48c <tl_put_raw+0x1c8>
        {
            queue->queue_status = LD_QUEUE_FULL;
    b482:	8f 81       	ldd	r24, Y+7	; 0x07
    b484:	98 85       	ldd	r25, Y+8	; 0x08
    b486:	23 e0       	ldi	r18, 0x03	; 3
    b488:	fc 01       	movw	r30, r24
    b48a:	24 83       	std	Z+4, r18	; 0x04
        }
    }
}
    b48c:	00 00       	nop
    b48e:	29 96       	adiw	r28, 0x09	; 9
    b490:	cd bf       	out	0x3d, r28	; 61
    b492:	de bf       	out	0x3e, r29	; 62
    b494:	df 91       	pop	r29
    b496:	cf 91       	pop	r28
    b498:	08 95       	ret

0000b49a <tl_get_raw>:
 *END**************************************************************************/
void tl_get_raw(l_ifc_handle iii,
                l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    b49a:	cf 93       	push	r28
    b49c:	df 93       	push	r29
    b49e:	cd b7       	in	r28, 0x3d	; 61
    b4a0:	de b7       	in	r29, 0x3e	; 62
    b4a2:	2d 97       	sbiw	r28, 0x0d	; 13
    b4a4:	cd bf       	out	0x3d, r28	; 61
    b4a6:	de bf       	out	0x3e, r29	; 62
    b4a8:	88 87       	std	Y+8, r24	; 0x08
    b4aa:	69 87       	std	Y+9, r22	; 0x09
    b4ac:	7a 87       	std	Y+10, r23	; 0x0a
    b4ae:	4b 87       	std	Y+11, r20	; 0x0b
    b4b0:	5c 87       	std	Y+12, r21	; 0x0c
    b4b2:	2d 87       	std	Y+13, r18	; 0x0d
    const lin_transport_layer_queue_t * tl_queue;
    const lin_tl_pdu_data_t * queue_data;
    l_u8 i;
    l_u16 queue_header;
    tl_queue = queue;
    b4b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    b4b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    b4b8:	8a 83       	std	Y+2, r24	; 0x02
    b4ba:	9b 83       	std	Y+3, r25	; 0x03
    /* Get queue */
    queue_data = (const lin_tl_pdu_data_t *)tl_queue->tl_pdu_ptr;
    b4bc:	8a 81       	ldd	r24, Y+2	; 0x02
    b4be:	9b 81       	ldd	r25, Y+3	; 0x03
    b4c0:	fc 01       	movw	r30, r24
    b4c2:	81 85       	ldd	r24, Z+9	; 0x09
    b4c4:	92 85       	ldd	r25, Z+10	; 0x0a
    b4c6:	8c 83       	std	Y+4, r24	; 0x04
    b4c8:	9d 83       	std	Y+5, r25	; 0x05

    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    b4ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    b4cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    b4ce:	fc 01       	movw	r30, r24
    b4d0:	85 81       	ldd	r24, Z+5	; 0x05
    b4d2:	96 81       	ldd	r25, Z+6	; 0x06
    b4d4:	89 2b       	or	r24, r25
    b4d6:	09 f4       	brne	.+2      	; 0xb4da <tl_get_raw+0x40>
    b4d8:	7a c0       	rjmp	.+244    	; 0xb5ce <tl_get_raw+0x134>
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
    b4da:	8a 81       	ldd	r24, Y+2	; 0x02
    b4dc:	9b 81       	ldd	r25, Y+3	; 0x03
    b4de:	fc 01       	movw	r30, r24
    b4e0:	80 81       	ld	r24, Z
    b4e2:	91 81       	ldd	r25, Z+1	; 0x01
    b4e4:	8e 83       	std	Y+6, r24	; 0x06
    b4e6:	9f 83       	std	Y+7, r25	; 0x07
        for (i = 0U; i < 8U; i++)
    b4e8:	19 82       	std	Y+1, r1	; 0x01
    b4ea:	1f c0       	rjmp	.+62     	; 0xb52a <tl_get_raw+0x90>
        {
            data[i] = queue_data[queue_header][i];
    b4ec:	89 81       	ldd	r24, Y+1	; 0x01
    b4ee:	88 2f       	mov	r24, r24
    b4f0:	90 e0       	ldi	r25, 0x00	; 0
    b4f2:	29 85       	ldd	r18, Y+9	; 0x09
    b4f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    b4f6:	82 0f       	add	r24, r18
    b4f8:	93 1f       	adc	r25, r19
    b4fa:	2e 81       	ldd	r18, Y+6	; 0x06
    b4fc:	3f 81       	ldd	r19, Y+7	; 0x07
    b4fe:	22 0f       	add	r18, r18
    b500:	33 1f       	adc	r19, r19
    b502:	22 0f       	add	r18, r18
    b504:	33 1f       	adc	r19, r19
    b506:	22 0f       	add	r18, r18
    b508:	33 1f       	adc	r19, r19
    b50a:	4c 81       	ldd	r20, Y+4	; 0x04
    b50c:	5d 81       	ldd	r21, Y+5	; 0x05
    b50e:	42 0f       	add	r20, r18
    b510:	53 1f       	adc	r21, r19
    b512:	29 81       	ldd	r18, Y+1	; 0x01
    b514:	22 2f       	mov	r18, r18
    b516:	30 e0       	ldi	r19, 0x00	; 0
    b518:	24 0f       	add	r18, r20
    b51a:	35 1f       	adc	r19, r21
    b51c:	f9 01       	movw	r30, r18
    b51e:	20 81       	ld	r18, Z
    b520:	fc 01       	movw	r30, r24
    b522:	20 83       	st	Z, r18
    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
        for (i = 0U; i < 8U; i++)
    b524:	89 81       	ldd	r24, Y+1	; 0x01
    b526:	8f 5f       	subi	r24, 0xFF	; 255
    b528:	89 83       	std	Y+1, r24	; 0x01
    b52a:	89 81       	ldd	r24, Y+1	; 0x01
    b52c:	88 30       	cpi	r24, 0x08	; 8
    b52e:	f0 f2       	brcs	.-68     	; 0xb4ec <tl_get_raw+0x52>
        {
            data[i] = queue_data[queue_header][i];
        }

        /* update queue status */
        if (0U == (--queue->queue_current_size))
    b530:	8b 85       	ldd	r24, Y+11	; 0x0b
    b532:	9c 85       	ldd	r25, Y+12	; 0x0c
    b534:	fc 01       	movw	r30, r24
    b536:	85 81       	ldd	r24, Z+5	; 0x05
    b538:	96 81       	ldd	r25, Z+6	; 0x06
    b53a:	9c 01       	movw	r18, r24
    b53c:	21 50       	subi	r18, 0x01	; 1
    b53e:	31 09       	sbc	r19, r1
    b540:	8b 85       	ldd	r24, Y+11	; 0x0b
    b542:	9c 85       	ldd	r25, Y+12	; 0x0c
    b544:	fc 01       	movw	r30, r24
    b546:	25 83       	std	Z+5, r18	; 0x05
    b548:	36 83       	std	Z+6, r19	; 0x06
    b54a:	8b 85       	ldd	r24, Y+11	; 0x0b
    b54c:	9c 85       	ldd	r25, Y+12	; 0x0c
    b54e:	fc 01       	movw	r30, r24
    b550:	85 81       	ldd	r24, Z+5	; 0x05
    b552:	96 81       	ldd	r25, Z+6	; 0x06
    b554:	89 2b       	or	r24, r25
    b556:	71 f4       	brne	.+28     	; 0xb574 <tl_get_raw+0xda>
        {
            if (TRANSMITTING == direction)
    b558:	8d 85       	ldd	r24, Y+13	; 0x0d
    b55a:	88 23       	and	r24, r24
    b55c:	31 f4       	brne	.+12     	; 0xb56a <tl_get_raw+0xd0>
            {
                queue->queue_status = LD_QUEUE_EMPTY;
    b55e:	8b 85       	ldd	r24, Y+11	; 0x0b
    b560:	9c 85       	ldd	r25, Y+12	; 0x0c
    b562:	25 e0       	ldi	r18, 0x05	; 5
    b564:	fc 01       	movw	r30, r24
    b566:	24 83       	std	Z+4, r18	; 0x04
                queue->queue_header = 0U;
            }
        }
    }
    (void)iii;
}
    b568:	32 c0       	rjmp	.+100    	; 0xb5ce <tl_get_raw+0x134>
            {
                queue->queue_status = LD_QUEUE_EMPTY;
            }
            else
            {
                queue->queue_status = LD_NO_DATA;
    b56a:	8b 85       	ldd	r24, Y+11	; 0x0b
    b56c:	9c 85       	ldd	r25, Y+12	; 0x0c
    b56e:	fc 01       	movw	r30, r24
    b570:	14 82       	std	Z+4, r1	; 0x04
                queue->queue_header = 0U;
            }
        }
    }
    (void)iii;
}
    b572:	2d c0       	rjmp	.+90     	; 0xb5ce <tl_get_raw+0x134>
                queue->queue_status = LD_NO_DATA;
            }
        }
        else
        {
            if (TRANSMITTING == direction)
    b574:	8d 85       	ldd	r24, Y+13	; 0x0d
    b576:	88 23       	and	r24, r24
    b578:	31 f4       	brne	.+12     	; 0xb586 <tl_get_raw+0xec>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    b57a:	8b 85       	ldd	r24, Y+11	; 0x0b
    b57c:	9c 85       	ldd	r25, Y+12	; 0x0c
    b57e:	24 e0       	ldi	r18, 0x04	; 4
    b580:	fc 01       	movw	r30, r24
    b582:	24 83       	std	Z+4, r18	; 0x04
    b584:	05 c0       	rjmp	.+10     	; 0xb590 <tl_get_raw+0xf6>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    b586:	8b 85       	ldd	r24, Y+11	; 0x0b
    b588:	9c 85       	ldd	r25, Y+12	; 0x0c
    b58a:	21 e0       	ldi	r18, 0x01	; 1
    b58c:	fc 01       	movw	r30, r24
    b58e:	24 83       	std	Z+4, r18	; 0x04
            }
            /* change queue header */
            queue->queue_header++;
    b590:	8b 85       	ldd	r24, Y+11	; 0x0b
    b592:	9c 85       	ldd	r25, Y+12	; 0x0c
    b594:	fc 01       	movw	r30, r24
    b596:	80 81       	ld	r24, Z
    b598:	91 81       	ldd	r25, Z+1	; 0x01
    b59a:	9c 01       	movw	r18, r24
    b59c:	2f 5f       	subi	r18, 0xFF	; 255
    b59e:	3f 4f       	sbci	r19, 0xFF	; 255
    b5a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    b5a4:	fc 01       	movw	r30, r24
    b5a6:	20 83       	st	Z, r18
    b5a8:	31 83       	std	Z+1, r19	; 0x01
            if (queue->queue_header == queue->queue_max_size)
    b5aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    b5ae:	fc 01       	movw	r30, r24
    b5b0:	20 81       	ld	r18, Z
    b5b2:	31 81       	ldd	r19, Z+1	; 0x01
    b5b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    b5b8:	fc 01       	movw	r30, r24
    b5ba:	87 81       	ldd	r24, Z+7	; 0x07
    b5bc:	90 85       	ldd	r25, Z+8	; 0x08
    b5be:	28 17       	cp	r18, r24
    b5c0:	39 07       	cpc	r19, r25
    b5c2:	29 f4       	brne	.+10     	; 0xb5ce <tl_get_raw+0x134>
            {
                queue->queue_header = 0U;
    b5c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    b5c8:	fc 01       	movw	r30, r24
    b5ca:	10 82       	st	Z, r1
    b5cc:	11 82       	std	Z+1, r1	; 0x01
            }
        }
    }
    (void)iii;
}
    b5ce:	00 00       	nop
    b5d0:	2d 96       	adiw	r28, 0x0d	; 13
    b5d2:	cd bf       	out	0x3d, r28	; 61
    b5d4:	de bf       	out	0x3e, r29	; 62
    b5d6:	df 91       	pop	r29
    b5d8:	cf 91       	pop	r28
    b5da:	08 95       	ret

0000b5dc <tl_receive_message>:
 *                 ld_receive_message() function
 *
 * Implements    : tl_receive_message_Activity
 *END**************************************************************************/
static void tl_receive_message(l_ifc_handle iii)
{
    b5dc:	cf 93       	push	r28
    b5de:	df 93       	push	r29
    b5e0:	cd b7       	in	r28, 0x3d	; 61
    b5e2:	de b7       	in	r29, 0x3e	; 62
    b5e4:	6a 97       	sbiw	r28, 0x1a	; 26
    b5e6:	cd bf       	out	0x3d, r28	; 61
    b5e8:	de bf       	out	0x3e, r29	; 62
    b5ea:	8a 8f       	std	Y+26, r24	; 0x1a
  lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    b5ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b5ee:	28 2f       	mov	r18, r24
    b5f0:	30 e0       	ldi	r19, 0x00	; 0
    b5f2:	44 e3       	ldi	r20, 0x34	; 52
    b5f4:	42 9f       	mul	r20, r18
    b5f6:	c0 01       	movw	r24, r0
    b5f8:	43 9f       	mul	r20, r19
    b5fa:	90 0d       	add	r25, r0
    b5fc:	11 24       	eor	r1, r1
    b5fe:	83 59       	subi	r24, 0x93	; 147
    b600:	99 4b       	sbci	r25, 0xB9	; 185
    b602:	8f 83       	std	Y+7, r24	; 0x07
    b604:	98 87       	std	Y+8, r25	; 0x08
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    b606:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b608:	28 2f       	mov	r18, r24
    b60a:	30 e0       	ldi	r19, 0x00	; 0
    b60c:	4c e1       	ldi	r20, 0x1C	; 28
    b60e:	42 9f       	mul	r20, r18
    b610:	c0 01       	movw	r24, r0
    b612:	43 9f       	mul	r20, r19
    b614:	90 0d       	add	r25, r0
    b616:	11 24       	eor	r1, r1
    b618:	86 56       	subi	r24, 0x66	; 102
    b61a:	9d 4b       	sbci	r25, 0xBD	; 189
    b61c:	89 87       	std	Y+9, r24	; 0x09
    b61e:	9a 87       	std	Y+10, r25	; 0x0a
    lin_tl_pdu_data_t pdu;
    l_u16 i;
    l_u16 data_index = 0U;
    b620:	1b 82       	std	Y+3, r1	; 0x03
    b622:	1c 82       	std	Y+4, r1	; 0x04
    l_u16 tmp_length = 0U;
    b624:	1d 82       	std	Y+5, r1	; 0x05
    b626:	1e 82       	std	Y+6, r1	; 0x06
    l_u8 PCI_type;
    l_u8* data = tl_desc_ptr->receive_message_ptr;
    b628:	8f 81       	ldd	r24, Y+7	; 0x07
    b62a:	98 85       	ldd	r25, Y+8	; 0x08
    b62c:	fc 01       	movw	r30, r24
    b62e:	86 a5       	ldd	r24, Z+46	; 0x2e
    b630:	97 a5       	ldd	r25, Z+47	; 0x2f
    b632:	8b 87       	std	Y+11, r24	; 0x0b
    b634:	9c 87       	std	Y+12, r25	; 0x0c
    l_u8* NAD = tl_desc_ptr->receive_NAD_ptr;
    b636:	8f 81       	ldd	r24, Y+7	; 0x07
    b638:	98 85       	ldd	r25, Y+8	; 0x08
    b63a:	fc 01       	movw	r30, r24
    b63c:	80 a9       	ldd	r24, Z+48	; 0x30
    b63e:	91 a9       	ldd	r25, Z+49	; 0x31
    b640:	8d 87       	std	Y+13, r24	; 0x0d
    b642:	9e 87       	std	Y+14, r25	; 0x0e
    l_u16* length = tl_desc_ptr->receive_message_length_ptr;
    b644:	8f 81       	ldd	r24, Y+7	; 0x07
    b646:	98 85       	ldd	r25, Y+8	; 0x08
    b648:	fc 01       	movw	r30, r24
    b64a:	82 a9       	ldd	r24, Z+50	; 0x32
    b64c:	93 a9       	ldd	r25, Z+51	; 0x33
    b64e:	8f 87       	std	Y+15, r24	; 0x0f
    b650:	98 8b       	std	Y+16, r25	; 0x10

    if (LD_NO_DATA != tl_desc_ptr->tl_rx_queue.queue_status)
    b652:	8f 81       	ldd	r24, Y+7	; 0x07
    b654:	98 85       	ldd	r25, Y+8	; 0x08
    b656:	fc 01       	movw	r30, r24
    b658:	87 85       	ldd	r24, Z+15	; 0x0f
    b65a:	88 23       	and	r24, r24
    b65c:	09 f4       	brne	.+2      	; 0xb660 <tl_receive_message+0x84>
    b65e:	2e c1       	rjmp	.+604    	; 0xb8bc <tl_receive_message+0x2e0>
        /* Message is received completely */
        /* get data from receive queue */
        /*
        * @violates MISRA 2012 Required Rule 1.3 Required
        */
        ld_get_raw(iii, pdu);
    b660:	ce 01       	movw	r24, r28
    b662:	42 96       	adiw	r24, 0x12	; 18
    b664:	bc 01       	movw	r22, r24
    b666:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b668:	0e 94 99 52 	call	0xa532	; 0xa532 <ld_get_raw>
        /* Analyze data */
        if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    b66c:	89 85       	ldd	r24, Y+9	; 0x09
    b66e:	9a 85       	ldd	r25, Y+10	; 0x0a
    b670:	fc 01       	movw	r30, r24
    b672:	83 81       	ldd	r24, Z+3	; 0x03
    b674:	88 23       	and	r24, r24
    b676:	29 f0       	breq	.+10     	; 0xb682 <tl_receive_message+0xa6>
        {
            *NAD = pdu[0];
    b678:	2a 89       	ldd	r18, Y+18	; 0x12
    b67a:	8d 85       	ldd	r24, Y+13	; 0x0d
    b67c:	9e 85       	ldd	r25, Y+14	; 0x0e
    b67e:	fc 01       	movw	r30, r24
    b680:	20 83       	st	Z, r18
        }

        /* Check type of pdu */
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
    b682:	8b 89       	ldd	r24, Y+19	; 0x13
    b684:	82 95       	swap	r24
    b686:	8f 70       	andi	r24, 0x0F	; 15
    b688:	89 8b       	std	Y+17, r24	; 0x11
        switch (PCI_type)
    b68a:	89 89       	ldd	r24, Y+17	; 0x11
    b68c:	88 2f       	mov	r24, r24
    b68e:	90 e0       	ldi	r25, 0x00	; 0
    b690:	00 97       	sbiw	r24, 0x00	; 0
    b692:	21 f0       	breq	.+8      	; 0xb69c <tl_receive_message+0xc0>
    b694:	01 97       	sbiw	r24, 0x01	; 1
    b696:	09 f4       	brne	.+2      	; 0xb69a <tl_receive_message+0xbe>
    b698:	4b c0       	rjmp	.+150    	; 0xb730 <tl_receive_message+0x154>
                    }
                }
                break;
            default:
                /* do nothing */
                break;
    b69a:	07 c1       	rjmp	.+526    	; 0xb8aa <tl_receive_message+0x2ce>
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
        switch (PCI_type)
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    b69c:	8b 89       	ldd	r24, Y+19	; 0x13
    b69e:	88 2f       	mov	r24, r24
    b6a0:	90 e0       	ldi	r25, 0x00	; 0
    b6a2:	8f 70       	andi	r24, 0x0F	; 15
    b6a4:	99 27       	eor	r25, r25
    b6a6:	8d 83       	std	Y+5, r24	; 0x05
    b6a8:	9e 83       	std	Y+6, r25	; 0x06
                i = *length;
    b6aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    b6ac:	98 89       	ldd	r25, Y+16	; 0x10
    b6ae:	fc 01       	movw	r30, r24
    b6b0:	80 81       	ld	r24, Z
    b6b2:	91 81       	ldd	r25, Z+1	; 0x01
    b6b4:	89 83       	std	Y+1, r24	; 0x01
    b6b6:	9a 83       	std	Y+2, r25	; 0x02
                *length = tmp_length;
    b6b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    b6ba:	98 89       	ldd	r25, Y+16	; 0x10
    b6bc:	2d 81       	ldd	r18, Y+5	; 0x05
    b6be:	3e 81       	ldd	r19, Y+6	; 0x06
    b6c0:	fc 01       	movw	r30, r24
    b6c2:	20 83       	st	Z, r18
    b6c4:	31 83       	std	Z+1, r19	; 0x01
                if (i < tmp_length)
    b6c6:	29 81       	ldd	r18, Y+1	; 0x01
    b6c8:	3a 81       	ldd	r19, Y+2	; 0x02
    b6ca:	8d 81       	ldd	r24, Y+5	; 0x05
    b6cc:	9e 81       	ldd	r25, Y+6	; 0x06
    b6ce:	28 17       	cp	r18, r24
    b6d0:	39 07       	cpc	r19, r25
    b6d2:	20 f4       	brcc	.+8      	; 0xb6dc <tl_receive_message+0x100>
                {
                    tmp_length = i;
    b6d4:	89 81       	ldd	r24, Y+1	; 0x01
    b6d6:	9a 81       	ldd	r25, Y+2	; 0x02
    b6d8:	8d 83       	std	Y+5, r24	; 0x05
    b6da:	9e 83       	std	Y+6, r25	; 0x06
                }

                data[0] = pdu[2];
    b6dc:	2c 89       	ldd	r18, Y+20	; 0x14
    b6de:	8b 85       	ldd	r24, Y+11	; 0x0b
    b6e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    b6e2:	fc 01       	movw	r30, r24
    b6e4:	20 83       	st	Z, r18
                for (i = 1U; i < tmp_length; i++)
    b6e6:	81 e0       	ldi	r24, 0x01	; 1
    b6e8:	90 e0       	ldi	r25, 0x00	; 0
    b6ea:	89 83       	std	Y+1, r24	; 0x01
    b6ec:	9a 83       	std	Y+2, r25	; 0x02
    b6ee:	18 c0       	rjmp	.+48     	; 0xb720 <tl_receive_message+0x144>
                {
                    data[i] = pdu[i + 2U];
    b6f0:	2b 85       	ldd	r18, Y+11	; 0x0b
    b6f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    b6f4:	89 81       	ldd	r24, Y+1	; 0x01
    b6f6:	9a 81       	ldd	r25, Y+2	; 0x02
    b6f8:	82 0f       	add	r24, r18
    b6fa:	93 1f       	adc	r25, r19
    b6fc:	29 81       	ldd	r18, Y+1	; 0x01
    b6fe:	3a 81       	ldd	r19, Y+2	; 0x02
    b700:	2e 5f       	subi	r18, 0xFE	; 254
    b702:	3f 4f       	sbci	r19, 0xFF	; 255
    b704:	ae 01       	movw	r20, r28
    b706:	4e 5e       	subi	r20, 0xEE	; 238
    b708:	5f 4f       	sbci	r21, 0xFF	; 255
    b70a:	24 0f       	add	r18, r20
    b70c:	35 1f       	adc	r19, r21
    b70e:	f9 01       	movw	r30, r18
    b710:	20 81       	ld	r18, Z
    b712:	fc 01       	movw	r30, r24
    b714:	20 83       	st	Z, r18
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
                for (i = 1U; i < tmp_length; i++)
    b716:	89 81       	ldd	r24, Y+1	; 0x01
    b718:	9a 81       	ldd	r25, Y+2	; 0x02
    b71a:	01 96       	adiw	r24, 0x01	; 1
    b71c:	89 83       	std	Y+1, r24	; 0x01
    b71e:	9a 83       	std	Y+2, r25	; 0x02
    b720:	29 81       	ldd	r18, Y+1	; 0x01
    b722:	3a 81       	ldd	r19, Y+2	; 0x02
    b724:	8d 81       	ldd	r24, Y+5	; 0x05
    b726:	9e 81       	ldd	r25, Y+6	; 0x06
    b728:	28 17       	cp	r18, r24
    b72a:	39 07       	cpc	r19, r25
    b72c:	08 f3       	brcs	.-62     	; 0xb6f0 <tl_receive_message+0x114>
                {
                    data[i] = pdu[i + 2U];
                }
                break;
    b72e:	bd c0       	rjmp	.+378    	; 0xb8aa <tl_receive_message+0x2ce>
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    b730:	8b 89       	ldd	r24, Y+19	; 0x13
    b732:	88 2f       	mov	r24, r24
    b734:	90 e0       	ldi	r25, 0x00	; 0
    b736:	8f 70       	andi	r24, 0x0F	; 15
    b738:	99 27       	eor	r25, r25
    b73a:	38 2f       	mov	r19, r24
    b73c:	22 27       	eor	r18, r18
    b73e:	8c 89       	ldd	r24, Y+20	; 0x14
    b740:	88 2f       	mov	r24, r24
    b742:	90 e0       	ldi	r25, 0x00	; 0
    b744:	82 0f       	add	r24, r18
    b746:	93 1f       	adc	r25, r19
    b748:	8d 83       	std	Y+5, r24	; 0x05
    b74a:	9e 83       	std	Y+6, r25	; 0x06
                i = *length;
    b74c:	8f 85       	ldd	r24, Y+15	; 0x0f
    b74e:	98 89       	ldd	r25, Y+16	; 0x10
    b750:	fc 01       	movw	r30, r24
    b752:	80 81       	ld	r24, Z
    b754:	91 81       	ldd	r25, Z+1	; 0x01
    b756:	89 83       	std	Y+1, r24	; 0x01
    b758:	9a 83       	std	Y+2, r25	; 0x02
                *length = tmp_length;
    b75a:	8f 85       	ldd	r24, Y+15	; 0x0f
    b75c:	98 89       	ldd	r25, Y+16	; 0x10
    b75e:	2d 81       	ldd	r18, Y+5	; 0x05
    b760:	3e 81       	ldd	r19, Y+6	; 0x06
    b762:	fc 01       	movw	r30, r24
    b764:	20 83       	st	Z, r18
    b766:	31 83       	std	Z+1, r19	; 0x01
                if (i < tmp_length)
    b768:	29 81       	ldd	r18, Y+1	; 0x01
    b76a:	3a 81       	ldd	r19, Y+2	; 0x02
    b76c:	8d 81       	ldd	r24, Y+5	; 0x05
    b76e:	9e 81       	ldd	r25, Y+6	; 0x06
    b770:	28 17       	cp	r18, r24
    b772:	39 07       	cpc	r19, r25
    b774:	20 f4       	brcc	.+8      	; 0xb77e <tl_receive_message+0x1a2>
                {
                    tmp_length = i;
    b776:	89 81       	ldd	r24, Y+1	; 0x01
    b778:	9a 81       	ldd	r25, Y+2	; 0x02
    b77a:	8d 83       	std	Y+5, r24	; 0x05
    b77c:	9e 83       	std	Y+6, r25	; 0x06
                }
                data[0] = pdu[3];
    b77e:	2d 89       	ldd	r18, Y+21	; 0x15
    b780:	8b 85       	ldd	r24, Y+11	; 0x0b
    b782:	9c 85       	ldd	r25, Y+12	; 0x0c
    b784:	fc 01       	movw	r30, r24
    b786:	20 83       	st	Z, r18
                for (i = 1U; i < 5U; i++)
    b788:	81 e0       	ldi	r24, 0x01	; 1
    b78a:	90 e0       	ldi	r25, 0x00	; 0
    b78c:	89 83       	std	Y+1, r24	; 0x01
    b78e:	9a 83       	std	Y+2, r25	; 0x02
    b790:	18 c0       	rjmp	.+48     	; 0xb7c2 <tl_receive_message+0x1e6>
                {
                    data[i] = pdu[i + 3U];
    b792:	2b 85       	ldd	r18, Y+11	; 0x0b
    b794:	3c 85       	ldd	r19, Y+12	; 0x0c
    b796:	89 81       	ldd	r24, Y+1	; 0x01
    b798:	9a 81       	ldd	r25, Y+2	; 0x02
    b79a:	82 0f       	add	r24, r18
    b79c:	93 1f       	adc	r25, r19
    b79e:	29 81       	ldd	r18, Y+1	; 0x01
    b7a0:	3a 81       	ldd	r19, Y+2	; 0x02
    b7a2:	2d 5f       	subi	r18, 0xFD	; 253
    b7a4:	3f 4f       	sbci	r19, 0xFF	; 255
    b7a6:	ae 01       	movw	r20, r28
    b7a8:	4e 5e       	subi	r20, 0xEE	; 238
    b7aa:	5f 4f       	sbci	r21, 0xFF	; 255
    b7ac:	24 0f       	add	r18, r20
    b7ae:	35 1f       	adc	r19, r21
    b7b0:	f9 01       	movw	r30, r18
    b7b2:	20 81       	ld	r18, Z
    b7b4:	fc 01       	movw	r30, r24
    b7b6:	20 83       	st	Z, r18
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
                for (i = 1U; i < 5U; i++)
    b7b8:	89 81       	ldd	r24, Y+1	; 0x01
    b7ba:	9a 81       	ldd	r25, Y+2	; 0x02
    b7bc:	01 96       	adiw	r24, 0x01	; 1
    b7be:	89 83       	std	Y+1, r24	; 0x01
    b7c0:	9a 83       	std	Y+2, r25	; 0x02
    b7c2:	89 81       	ldd	r24, Y+1	; 0x01
    b7c4:	9a 81       	ldd	r25, Y+2	; 0x02
    b7c6:	05 97       	sbiw	r24, 0x05	; 5
    b7c8:	20 f3       	brcs	.-56     	; 0xb792 <tl_receive_message+0x1b6>
                {
                    data[i] = pdu[i + 3U];
                }

                tmp_length -= 5U;
    b7ca:	8d 81       	ldd	r24, Y+5	; 0x05
    b7cc:	9e 81       	ldd	r25, Y+6	; 0x06
    b7ce:	05 97       	sbiw	r24, 0x05	; 5
    b7d0:	8d 83       	std	Y+5, r24	; 0x05
    b7d2:	9e 83       	std	Y+6, r25	; 0x06
                data_index += 5U;
    b7d4:	8b 81       	ldd	r24, Y+3	; 0x03
    b7d6:	9c 81       	ldd	r25, Y+4	; 0x04
    b7d8:	05 96       	adiw	r24, 0x05	; 5
    b7da:	8b 83       	std	Y+3, r24	; 0x03
    b7dc:	9c 83       	std	Y+4, r25	; 0x04

                /* Consecutive frame */
                while (tmp_length > 6U)
    b7de:	2f c0       	rjmp	.+94     	; 0xb83e <tl_receive_message+0x262>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    b7e0:	ce 01       	movw	r24, r28
    b7e2:	42 96       	adiw	r24, 0x12	; 18
    b7e4:	bc 01       	movw	r22, r24
    b7e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b7e8:	0e 94 99 52 	call	0xa532	; 0xa532 <ld_get_raw>
                    for (i = 2U; i < 8U; i++)
    b7ec:	82 e0       	ldi	r24, 0x02	; 2
    b7ee:	90 e0       	ldi	r25, 0x00	; 0
    b7f0:	89 83       	std	Y+1, r24	; 0x01
    b7f2:	9a 83       	std	Y+2, r25	; 0x02
    b7f4:	1b c0       	rjmp	.+54     	; 0xb82c <tl_receive_message+0x250>
                    {
                        data[data_index] = pdu[i];
    b7f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    b7f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    b7fa:	8b 81       	ldd	r24, Y+3	; 0x03
    b7fc:	9c 81       	ldd	r25, Y+4	; 0x04
    b7fe:	82 0f       	add	r24, r18
    b800:	93 1f       	adc	r25, r19
    b802:	ae 01       	movw	r20, r28
    b804:	4e 5e       	subi	r20, 0xEE	; 238
    b806:	5f 4f       	sbci	r21, 0xFF	; 255
    b808:	29 81       	ldd	r18, Y+1	; 0x01
    b80a:	3a 81       	ldd	r19, Y+2	; 0x02
    b80c:	24 0f       	add	r18, r20
    b80e:	35 1f       	adc	r19, r21
    b810:	f9 01       	movw	r30, r18
    b812:	20 81       	ld	r18, Z
    b814:	fc 01       	movw	r30, r24
    b816:	20 83       	st	Z, r18
                        data_index++;
    b818:	8b 81       	ldd	r24, Y+3	; 0x03
    b81a:	9c 81       	ldd	r25, Y+4	; 0x04
    b81c:	01 96       	adiw	r24, 0x01	; 1
    b81e:	8b 83       	std	Y+3, r24	; 0x03
    b820:	9c 83       	std	Y+4, r25	; 0x04
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 2U; i < 8U; i++)
    b822:	89 81       	ldd	r24, Y+1	; 0x01
    b824:	9a 81       	ldd	r25, Y+2	; 0x02
    b826:	01 96       	adiw	r24, 0x01	; 1
    b828:	89 83       	std	Y+1, r24	; 0x01
    b82a:	9a 83       	std	Y+2, r25	; 0x02
    b82c:	89 81       	ldd	r24, Y+1	; 0x01
    b82e:	9a 81       	ldd	r25, Y+2	; 0x02
    b830:	08 97       	sbiw	r24, 0x08	; 8
    b832:	08 f3       	brcs	.-62     	; 0xb7f6 <tl_receive_message+0x21a>
                    {
                        data[data_index] = pdu[i];
                        data_index++;
                    }

                    tmp_length -= 6U;
    b834:	8d 81       	ldd	r24, Y+5	; 0x05
    b836:	9e 81       	ldd	r25, Y+6	; 0x06
    b838:	06 97       	sbiw	r24, 0x06	; 6
    b83a:	8d 83       	std	Y+5, r24	; 0x05
    b83c:	9e 83       	std	Y+6, r25	; 0x06

                tmp_length -= 5U;
                data_index += 5U;

                /* Consecutive frame */
                while (tmp_length > 6U)
    b83e:	8d 81       	ldd	r24, Y+5	; 0x05
    b840:	9e 81       	ldd	r25, Y+6	; 0x06
    b842:	07 97       	sbiw	r24, 0x07	; 7
    b844:	68 f6       	brcc	.-102    	; 0xb7e0 <tl_receive_message+0x204>

                    tmp_length -= 6U;
                }

                /* Last frame */
                if (tmp_length > 0U)
    b846:	8d 81       	ldd	r24, Y+5	; 0x05
    b848:	9e 81       	ldd	r25, Y+6	; 0x06
    b84a:	89 2b       	or	r24, r25
    b84c:	69 f1       	breq	.+90     	; 0xb8a8 <tl_receive_message+0x2cc>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    b84e:	ce 01       	movw	r24, r28
    b850:	42 96       	adiw	r24, 0x12	; 18
    b852:	bc 01       	movw	r22, r24
    b854:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b856:	0e 94 99 52 	call	0xa532	; 0xa532 <ld_get_raw>
                    for (i = 0U; i < tmp_length; i++)
    b85a:	19 82       	std	Y+1, r1	; 0x01
    b85c:	1a 82       	std	Y+2, r1	; 0x02
    b85e:	1d c0       	rjmp	.+58     	; 0xb89a <tl_receive_message+0x2be>
                    {
                        data[data_index] = pdu[i + 2U];
    b860:	2b 85       	ldd	r18, Y+11	; 0x0b
    b862:	3c 85       	ldd	r19, Y+12	; 0x0c
    b864:	8b 81       	ldd	r24, Y+3	; 0x03
    b866:	9c 81       	ldd	r25, Y+4	; 0x04
    b868:	82 0f       	add	r24, r18
    b86a:	93 1f       	adc	r25, r19
    b86c:	29 81       	ldd	r18, Y+1	; 0x01
    b86e:	3a 81       	ldd	r19, Y+2	; 0x02
    b870:	2e 5f       	subi	r18, 0xFE	; 254
    b872:	3f 4f       	sbci	r19, 0xFF	; 255
    b874:	ae 01       	movw	r20, r28
    b876:	4e 5e       	subi	r20, 0xEE	; 238
    b878:	5f 4f       	sbci	r21, 0xFF	; 255
    b87a:	24 0f       	add	r18, r20
    b87c:	35 1f       	adc	r19, r21
    b87e:	f9 01       	movw	r30, r18
    b880:	20 81       	ld	r18, Z
    b882:	fc 01       	movw	r30, r24
    b884:	20 83       	st	Z, r18
                        data_index++;
    b886:	8b 81       	ldd	r24, Y+3	; 0x03
    b888:	9c 81       	ldd	r25, Y+4	; 0x04
    b88a:	01 96       	adiw	r24, 0x01	; 1
    b88c:	8b 83       	std	Y+3, r24	; 0x03
    b88e:	9c 83       	std	Y+4, r25	; 0x04
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 0U; i < tmp_length; i++)
    b890:	89 81       	ldd	r24, Y+1	; 0x01
    b892:	9a 81       	ldd	r25, Y+2	; 0x02
    b894:	01 96       	adiw	r24, 0x01	; 1
    b896:	89 83       	std	Y+1, r24	; 0x01
    b898:	9a 83       	std	Y+2, r25	; 0x02
    b89a:	29 81       	ldd	r18, Y+1	; 0x01
    b89c:	3a 81       	ldd	r19, Y+2	; 0x02
    b89e:	8d 81       	ldd	r24, Y+5	; 0x05
    b8a0:	9e 81       	ldd	r25, Y+6	; 0x06
    b8a2:	28 17       	cp	r18, r24
    b8a4:	39 07       	cpc	r19, r25
    b8a6:	e0 f2       	brcs	.-72     	; 0xb860 <tl_receive_message+0x284>
                    {
                        data[data_index] = pdu[i + 2U];
                        data_index++;
                    }
                }
                break;
    b8a8:	00 00       	nop
            default:
                /* do nothing */
                break;
        } /* end of switch */
        tl_desc_ptr->ld_return_data = false;
    b8aa:	8f 81       	ldd	r24, Y+7	; 0x07
    b8ac:	98 85       	ldd	r25, Y+8	; 0x08
    b8ae:	fc 01       	movw	r30, r24
    b8b0:	14 a6       	std	Z+44, r1	; 0x2c
        tl_desc_ptr->rx_msg_status = LD_COMPLETED;
    b8b2:	8f 81       	ldd	r24, Y+7	; 0x07
    b8b4:	98 85       	ldd	r25, Y+8	; 0x08
    b8b6:	22 e0       	ldi	r18, 0x02	; 2
    b8b8:	fc 01       	movw	r30, r24
    b8ba:	26 8b       	std	Z+22, r18	; 0x16
    }
}
    b8bc:	00 00       	nop
    b8be:	6a 96       	adiw	r28, 0x1a	; 26
    b8c0:	cd bf       	out	0x3d, r28	; 61
    b8c2:	de bf       	out	0x3e, r29	; 62
    b8c4:	df 91       	pop	r29
    b8c6:	cf 91       	pop	r28
    b8c8:	08 95       	ret

0000b8ca <ld_read_by_id_callout>:
 *                 this service to the correct value
 * Implements    : ld_read_by_id_callout_Activity
 *END**************************************************************************/

l_u8 ld_read_by_id_callout(l_ifc_handle iii, l_u8 id, l_u8 *data)
{
    b8ca:	cf 93       	push	r28
    b8cc:	df 93       	push	r29
    b8ce:	cd b7       	in	r28, 0x3d	; 61
    b8d0:	de b7       	in	r29, 0x3e	; 62
    b8d2:	27 97       	sbiw	r28, 0x07	; 7
    b8d4:	cd bf       	out	0x3d, r28	; 61
    b8d6:	de bf       	out	0x3e, r29	; 62
    b8d8:	8c 83       	std	Y+4, r24	; 0x04
    b8da:	6d 83       	std	Y+5, r22	; 0x05
    b8dc:	4e 83       	std	Y+6, r20	; 0x06
    b8de:	5f 83       	std	Y+7, r21	; 0x07
    l_u8 retval = LD_NEGATIVE_RESPONSE;
    b8e0:	83 e5       	ldi	r24, 0x53	; 83
    b8e2:	89 83       	std	Y+1, r24	; 0x01

    /* Get the current configuration */
    const lin_protocol_user_config_t  *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    b8e4:	8c 81       	ldd	r24, Y+4	; 0x04
    b8e6:	28 2f       	mov	r18, r24
    b8e8:	30 e0       	ldi	r19, 0x00	; 0
    b8ea:	4c e1       	ldi	r20, 0x1C	; 28
    b8ec:	42 9f       	mul	r20, r18
    b8ee:	c0 01       	movw	r24, r0
    b8f0:	43 9f       	mul	r20, r19
    b8f2:	90 0d       	add	r25, r0
    b8f4:	11 24       	eor	r1, r1
    b8f6:	86 56       	subi	r24, 0x66	; 102
    b8f8:	9d 4b       	sbci	r25, 0xBD	; 189
    b8fa:	8a 83       	std	Y+2, r24	; 0x02
    b8fc:	9b 83       	std	Y+3, r25	; 0x03

    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    b8fe:	8a 81       	ldd	r24, Y+2	; 0x02
    b900:	9b 81       	ldd	r25, Y+3	; 0x03
    b902:	fc 01       	movw	r30, r24
    b904:	93 81       	ldd	r25, Z+3	; 0x03
    b906:	81 e0       	ldi	r24, 0x01	; 1
    b908:	89 27       	eor	r24, r25
    b90a:	88 23       	and	r24, r24
    b90c:	41 f1       	breq	.+80     	; 0xb95e <ld_read_by_id_callout+0x94>
    {
        /* Following code is an example - Real implementation is application-dependent */
        /* the handling does essentially depend on the id of the requested item */
        /* This example implement with ID = 32 - LIN_READ_USR_DEF_MIN */
        if (id == LIN_READ_USR_DEF_MIN)
    b90e:	8d 81       	ldd	r24, Y+5	; 0x05
    b910:	80 32       	cpi	r24, 0x20	; 32
    b912:	29 f5       	brne	.+74     	; 0xb95e <ld_read_by_id_callout+0x94>
        {
            /*
            * id received is user defined 32
            */
            /* A positive response is ready to be sent to the user defined request */
            data[0] = (l_u8) (id + 1U);    /* Data user define */
    b914:	8d 81       	ldd	r24, Y+5	; 0x05
    b916:	21 e0       	ldi	r18, 0x01	; 1
    b918:	28 0f       	add	r18, r24
    b91a:	8e 81       	ldd	r24, Y+6	; 0x06
    b91c:	9f 81       	ldd	r25, Y+7	; 0x07
    b91e:	fc 01       	movw	r30, r24
    b920:	20 83       	st	Z, r18
            data[1] = (l_u8) (id + 2U);    /* Data user define */
    b922:	8e 81       	ldd	r24, Y+6	; 0x06
    b924:	9f 81       	ldd	r25, Y+7	; 0x07
    b926:	01 96       	adiw	r24, 0x01	; 1
    b928:	2d 81       	ldd	r18, Y+5	; 0x05
    b92a:	2e 5f       	subi	r18, 0xFE	; 254
    b92c:	fc 01       	movw	r30, r24
    b92e:	20 83       	st	Z, r18
            data[2] = (l_u8) (id + 3U);    /* Data user define */
    b930:	8e 81       	ldd	r24, Y+6	; 0x06
    b932:	9f 81       	ldd	r25, Y+7	; 0x07
    b934:	02 96       	adiw	r24, 0x02	; 2
    b936:	2d 81       	ldd	r18, Y+5	; 0x05
    b938:	2d 5f       	subi	r18, 0xFD	; 253
    b93a:	fc 01       	movw	r30, r24
    b93c:	20 83       	st	Z, r18
            data[3] = (l_u8) (id + 4U);    /* Data user define */
    b93e:	8e 81       	ldd	r24, Y+6	; 0x06
    b940:	9f 81       	ldd	r25, Y+7	; 0x07
    b942:	03 96       	adiw	r24, 0x03	; 3
    b944:	2d 81       	ldd	r18, Y+5	; 0x05
    b946:	2c 5f       	subi	r18, 0xFC	; 252
    b948:	fc 01       	movw	r30, r24
    b94a:	20 83       	st	Z, r18
            data[4] = (l_u8) (id + 5U);    /* Data user define */
    b94c:	8e 81       	ldd	r24, Y+6	; 0x06
    b94e:	9f 81       	ldd	r25, Y+7	; 0x07
    b950:	04 96       	adiw	r24, 0x04	; 4
    b952:	2d 81       	ldd	r18, Y+5	; 0x05
    b954:	2b 5f       	subi	r18, 0xFB	; 251
    b956:	fc 01       	movw	r30, r24
    b958:	20 83       	st	Z, r18
            retval = LD_POSITIVE_RESPONSE;
    b95a:	84 e5       	ldi	r24, 0x54	; 84
    b95c:	89 83       	std	Y+1, r24	; 0x01
            /*
            * id received is user defined 63 - no response
            */
        }
    } /* End (conf->function == _SLAVE_) */
   return retval;
    b95e:	89 81       	ldd	r24, Y+1	; 0x01
}
    b960:	27 96       	adiw	r28, 0x07	; 7
    b962:	cd bf       	out	0x3d, r28	; 61
    b964:	de bf       	out	0x3e, r29	; 62
    b966:	df 91       	pop	r29
    b968:	cf 91       	pop	r28
    b96a:	08 95       	ret

0000b96c <BIT>:
 * 返回字节A中的第B个bit
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    b96c:	cf 93       	push	r28
    b96e:	df 93       	push	r29
    b970:	00 d0       	rcall	.+0      	; 0xb972 <BIT+0x6>
    b972:	cd b7       	in	r28, 0x3d	; 61
    b974:	de b7       	in	r29, 0x3e	; 62
    b976:	89 83       	std	Y+1, r24	; 0x01
    b978:	6a 83       	std	Y+2, r22	; 0x02
    return (uint8_t)((A >> B) & 0x01U);
    b97a:	89 81       	ldd	r24, Y+1	; 0x01
    b97c:	88 2f       	mov	r24, r24
    b97e:	90 e0       	ldi	r25, 0x00	; 0
    b980:	2a 81       	ldd	r18, Y+2	; 0x02
    b982:	22 2f       	mov	r18, r18
    b984:	30 e0       	ldi	r19, 0x00	; 0
    b986:	02 c0       	rjmp	.+4      	; 0xb98c <BIT+0x20>
    b988:	95 95       	asr	r25
    b98a:	87 95       	ror	r24
    b98c:	2a 95       	dec	r18
    b98e:	e2 f7       	brpl	.-8      	; 0xb988 <BIT+0x1c>
    b990:	81 70       	andi	r24, 0x01	; 1
}
    b992:	0f 90       	pop	r0
    b994:	0f 90       	pop	r0
    b996:	df 91       	pop	r29
    b998:	cf 91       	pop	r28
    b99a:	08 95       	ret

0000b99c <LIN_DRV_ProcessParity>:
 *
 * Implements    : LIN_DRV_ProcessParity_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_ProcessParity(uint8_t PID,
                              uint8_t typeAction)
{
    b99c:	0f 93       	push	r16
    b99e:	1f 93       	push	r17
    b9a0:	cf 93       	push	r28
    b9a2:	df 93       	push	r29
    b9a4:	00 d0       	rcall	.+0      	; 0xb9a6 <LIN_DRV_ProcessParity+0xa>
    b9a6:	00 d0       	rcall	.+0      	; 0xb9a8 <LIN_DRV_ProcessParity+0xc>
    b9a8:	cd b7       	in	r28, 0x3d	; 61
    b9aa:	de b7       	in	r29, 0x3e	; 62
    b9ac:	8b 83       	std	Y+3, r24	; 0x03
    b9ae:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    b9b0:	60 e0       	ldi	r22, 0x00	; 0
    b9b2:	8b 81       	ldd	r24, Y+3	; 0x03
    b9b4:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
    b9b8:	18 2f       	mov	r17, r24
    b9ba:	61 e0       	ldi	r22, 0x01	; 1
    b9bc:	8b 81       	ldd	r24, Y+3	; 0x03
    b9be:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
    b9c2:	18 27       	eor	r17, r24
    b9c4:	62 e0       	ldi	r22, 0x02	; 2
    b9c6:	8b 81       	ldd	r24, Y+3	; 0x03
    b9c8:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
    b9cc:	18 27       	eor	r17, r24
    b9ce:	64 e0       	ldi	r22, 0x04	; 4
    b9d0:	8b 81       	ldd	r24, Y+3	; 0x03
    b9d2:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
    b9d6:	81 27       	eor	r24, r17
    b9d8:	18 2f       	mov	r17, r24
    b9da:	12 95       	swap	r17
    b9dc:	11 0f       	add	r17, r17
    b9de:	11 0f       	add	r17, r17
    b9e0:	10 7c       	andi	r17, 0xC0	; 192
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));
    b9e2:	61 e0       	ldi	r22, 0x01	; 1
    b9e4:	8b 81       	ldd	r24, Y+3	; 0x03
    b9e6:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
    b9ea:	08 2f       	mov	r16, r24
    b9ec:	63 e0       	ldi	r22, 0x03	; 3
    b9ee:	8b 81       	ldd	r24, Y+3	; 0x03
    b9f0:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    b9f4:	08 27       	eor	r16, r24
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));
    b9f6:	64 e0       	ldi	r22, 0x04	; 4
    b9f8:	8b 81       	ldd	r24, Y+3	; 0x03
    b9fa:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    b9fe:	08 27       	eor	r16, r24
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));
    ba00:	65 e0       	ldi	r22, 0x05	; 5
    ba02:	8b 81       	ldd	r24, Y+3	; 0x03
    ba04:	0e 94 b6 5c 	call	0xb96c	; 0xb96c <BIT>
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    ba08:	80 27       	eor	r24, r16
    ba0a:	80 95       	com	r24
    ba0c:	87 95       	ror	r24
    ba0e:	88 27       	eor	r24, r24
    ba10:	87 95       	ror	r24
    ba12:	81 2b       	or	r24, r17
    ba14:	8a 83       	std	Y+2, r24	; 0x02
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));

    /* Check if action is checking parity bits */
    if (CHECK_PARITY == typeAction)
    ba16:	8c 81       	ldd	r24, Y+4	; 0x04
    ba18:	81 30       	cpi	r24, 0x01	; 1
    ba1a:	99 f4       	brne	.+38     	; 0xba42 <LIN_DRV_ProcessParity+0xa6>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
    ba1c:	8b 81       	ldd	r24, Y+3	; 0x03
    ba1e:	88 2f       	mov	r24, r24
    ba20:	90 e0       	ldi	r25, 0x00	; 0
    ba22:	9c 01       	movw	r18, r24
    ba24:	20 7c       	andi	r18, 0xC0	; 192
    ba26:	33 27       	eor	r19, r19
    ba28:	8a 81       	ldd	r24, Y+2	; 0x02
    ba2a:	88 2f       	mov	r24, r24
    ba2c:	90 e0       	ldi	r25, 0x00	; 0
    ba2e:	28 17       	cp	r18, r24
    ba30:	39 07       	cpc	r19, r25
    ba32:	19 f0       	breq	.+6      	; 0xba3a <LIN_DRV_ProcessParity+0x9e>
        {
            /* Return 0xFF if parity bits are incorrect */
            retVal = 0xFFU;
    ba34:	8f ef       	ldi	r24, 0xFF	; 255
    ba36:	89 83       	std	Y+1, r24	; 0x01
    ba38:	08 c0       	rjmp	.+16     	; 0xba4a <LIN_DRV_ProcessParity+0xae>
        }
        /* If parity bits are correct */
        else
        {
            /* Return ID if parity bits are correct */
            retVal = (uint8_t)(PID & 0x3FU);
    ba3a:	8b 81       	ldd	r24, Y+3	; 0x03
    ba3c:	8f 73       	andi	r24, 0x3F	; 63
    ba3e:	89 83       	std	Y+1, r24	; 0x01
    ba40:	04 c0       	rjmp	.+8      	; 0xba4a <LIN_DRV_ProcessParity+0xae>
    }
    /* If action is making parity bits */
    else
    {
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    ba42:	9b 81       	ldd	r25, Y+3	; 0x03
    ba44:	8a 81       	ldd	r24, Y+2	; 0x02
    ba46:	89 2b       	or	r24, r25
    ba48:	89 83       	std	Y+1, r24	; 0x01
    }

    return retVal;
    ba4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    ba4c:	24 96       	adiw	r28, 0x04	; 4
    ba4e:	cd bf       	out	0x3d, r28	; 61
    ba50:	de bf       	out	0x3e, r29	; 62
    ba52:	df 91       	pop	r29
    ba54:	cf 91       	pop	r28
    ba56:	1f 91       	pop	r17
    ba58:	0f 91       	pop	r16
    ba5a:	08 95       	ret

0000ba5c <LIN_DRV_MakeChecksumByte>:
 * 计算经典型校验方式，传入参数PID应该为0
 *
 * Implements    : LIN_DRV_MakeChecksumByte_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_MakeChecksumByte(const uint8_t * buffer, uint8_t sizeBuffer, uint8_t PID)
{
    ba5c:	cf 93       	push	r28
    ba5e:	df 93       	push	r29
    ba60:	cd b7       	in	r28, 0x3d	; 61
    ba62:	de b7       	in	r29, 0x3e	; 62
    ba64:	27 97       	sbiw	r28, 0x07	; 7
    ba66:	cd bf       	out	0x3d, r28	; 61
    ba68:	de bf       	out	0x3e, r29	; 62
    ba6a:	8c 83       	std	Y+4, r24	; 0x04
    ba6c:	9d 83       	std	Y+5, r25	; 0x05
    ba6e:	6e 83       	std	Y+6, r22	; 0x06
    ba70:	4f 83       	std	Y+7, r20	; 0x07
    uint8_t length;
    uint16_t checksum = 0U;
    ba72:	1a 82       	std	Y+2, r1	; 0x02
    ba74:	1b 82       	std	Y+3, r1	; 0x03

    /* For PID is 0x3C (ID 0x3C) or 0x7D (ID 0x3D) or 0xFE (ID 0x3E) or 0xBF (ID 0x3F)
     * apply classic checksum and apply enhanced checksum for other PID */
    if ((0x3CU != PID) && (0x7DU != PID) && (0xFEU != PID) && (0xBFU != PID))
    ba76:	8f 81       	ldd	r24, Y+7	; 0x07
    ba78:	8c 33       	cpi	r24, 0x3C	; 60
    ba7a:	79 f0       	breq	.+30     	; 0xba9a <LIN_DRV_MakeChecksumByte+0x3e>
    ba7c:	8f 81       	ldd	r24, Y+7	; 0x07
    ba7e:	8d 37       	cpi	r24, 0x7D	; 125
    ba80:	61 f0       	breq	.+24     	; 0xba9a <LIN_DRV_MakeChecksumByte+0x3e>
    ba82:	8f 81       	ldd	r24, Y+7	; 0x07
    ba84:	8e 3f       	cpi	r24, 0xFE	; 254
    ba86:	49 f0       	breq	.+18     	; 0xba9a <LIN_DRV_MakeChecksumByte+0x3e>
    ba88:	8f 81       	ldd	r24, Y+7	; 0x07
    ba8a:	8f 3b       	cpi	r24, 0xBF	; 191
    ba8c:	31 f0       	breq	.+12     	; 0xba9a <LIN_DRV_MakeChecksumByte+0x3e>
    {
        /* For PID other than 0x3C, 0x7D, 0xFE and 0xBF: Add PID in checksum calculation */
        checksum = PID;
    ba8e:	8f 81       	ldd	r24, Y+7	; 0x07
    ba90:	88 2f       	mov	r24, r24
    ba92:	90 e0       	ldi	r25, 0x00	; 0
    ba94:	8a 83       	std	Y+2, r24	; 0x02
    ba96:	9b 83       	std	Y+3, r25	; 0x03
    ba98:	02 c0       	rjmp	.+4      	; 0xba9e <LIN_DRV_MakeChecksumByte+0x42>
    }
    else
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    ba9a:	1a 82       	std	Y+2, r1	; 0x02
    ba9c:	1b 82       	std	Y+3, r1	; 0x03
    }

    for (length = sizeBuffer; 0U < length; length--)
    ba9e:	8e 81       	ldd	r24, Y+6	; 0x06
    baa0:	89 83       	std	Y+1, r24	; 0x01
    baa2:	20 c0       	rjmp	.+64     	; 0xbae4 <LIN_DRV_MakeChecksumByte+0x88>
    {
        checksum += *buffer;
    baa4:	8c 81       	ldd	r24, Y+4	; 0x04
    baa6:	9d 81       	ldd	r25, Y+5	; 0x05
    baa8:	fc 01       	movw	r30, r24
    baaa:	80 81       	ld	r24, Z
    baac:	88 2f       	mov	r24, r24
    baae:	90 e0       	ldi	r25, 0x00	; 0
    bab0:	2a 81       	ldd	r18, Y+2	; 0x02
    bab2:	3b 81       	ldd	r19, Y+3	; 0x03
    bab4:	82 0f       	add	r24, r18
    bab6:	93 1f       	adc	r25, r19
    bab8:	8a 83       	std	Y+2, r24	; 0x02
    baba:	9b 83       	std	Y+3, r25	; 0x03
        buffer++;
    babc:	8c 81       	ldd	r24, Y+4	; 0x04
    babe:	9d 81       	ldd	r25, Y+5	; 0x05
    bac0:	01 96       	adiw	r24, 0x01	; 1
    bac2:	8c 83       	std	Y+4, r24	; 0x04
    bac4:	9d 83       	std	Y+5, r25	; 0x05
        /* Deal with the carry */
        if (checksum > 0xFFU)
    bac6:	8a 81       	ldd	r24, Y+2	; 0x02
    bac8:	9b 81       	ldd	r25, Y+3	; 0x03
    baca:	8f 3f       	cpi	r24, 0xFF	; 255
    bacc:	91 05       	cpc	r25, r1
    bace:	39 f0       	breq	.+14     	; 0xbade <LIN_DRV_MakeChecksumByte+0x82>
    bad0:	30 f0       	brcs	.+12     	; 0xbade <LIN_DRV_MakeChecksumByte+0x82>
        {
            checksum -= 0xFFU;
    bad2:	8a 81       	ldd	r24, Y+2	; 0x02
    bad4:	9b 81       	ldd	r25, Y+3	; 0x03
    bad6:	8f 5f       	subi	r24, 0xFF	; 255
    bad8:	91 09       	sbc	r25, r1
    bada:	8a 83       	std	Y+2, r24	; 0x02
    badc:	9b 83       	std	Y+3, r25	; 0x03
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    }

    for (length = sizeBuffer; 0U < length; length--)
    bade:	89 81       	ldd	r24, Y+1	; 0x01
    bae0:	81 50       	subi	r24, 0x01	; 1
    bae2:	89 83       	std	Y+1, r24	; 0x01
    bae4:	89 81       	ldd	r24, Y+1	; 0x01
    bae6:	88 23       	and	r24, r24
    bae8:	e9 f6       	brne	.-70     	; 0xbaa4 <LIN_DRV_MakeChecksumByte+0x48>
            checksum -= 0xFFU;
        }
    }

    /* Return reversed checksum */
    return (uint8_t)(~checksum);
    baea:	8a 81       	ldd	r24, Y+2	; 0x02
    baec:	80 95       	com	r24
}
    baee:	27 96       	adiw	r28, 0x07	; 7
    baf0:	cd bf       	out	0x3d, r28	; 61
    baf2:	de bf       	out	0x3e, r29	; 62
    baf4:	df 91       	pop	r29
    baf6:	cf 91       	pop	r28
    baf8:	08 95       	ret

0000bafa <LIN_DRV_Init>:

    /* Disable LPUART interrupts. */
    //TODO:
    
    return retVal;
}
    bafa:	cf 93       	push	r28
    bafc:	df 93       	push	r29
    bafe:	cd b7       	in	r28, 0x3d	; 61
    bb00:	de b7       	in	r29, 0x3e	; 62
    bb02:	28 97       	sbiw	r28, 0x08	; 8
    bb04:	cd bf       	out	0x3d, r28	; 61
    bb06:	de bf       	out	0x3e, r29	; 62
    bb08:	69 83       	std	Y+1, r22	; 0x01
    bb0a:	7a 83       	std	Y+2, r23	; 0x02
    bb0c:	8b 83       	std	Y+3, r24	; 0x03
    bb0e:	9c 83       	std	Y+4, r25	; 0x04
    bb10:	4d 83       	std	Y+5, r20	; 0x05
    bb12:	5e 83       	std	Y+6, r21	; 0x06
    bb14:	2f 83       	std	Y+7, r18	; 0x07
    bb16:	38 87       	std	Y+8, r19	; 0x08
    bb18:	89 81       	ldd	r24, Y+1	; 0x01
    bb1a:	9a 81       	ldd	r25, Y+2	; 0x02
    bb1c:	88 0f       	add	r24, r24
    bb1e:	99 1f       	adc	r25, r25
    bb20:	81 5d       	subi	r24, 0xD1	; 209
    bb22:	99 4b       	sbci	r25, 0xB9	; 185
    bb24:	2f 81       	ldd	r18, Y+7	; 0x07
    bb26:	38 85       	ldd	r19, Y+8	; 0x08
    bb28:	fc 01       	movw	r30, r24
    bb2a:	20 83       	st	Z, r18
    bb2c:	31 83       	std	Z+1, r19	; 0x01
    bb2e:	89 81       	ldd	r24, Y+1	; 0x01
    bb30:	9a 81       	ldd	r25, Y+2	; 0x02
    bb32:	88 0f       	add	r24, r24
    bb34:	99 1f       	adc	r25, r25
    bb36:	8f 5c       	subi	r24, 0xCF	; 207
    bb38:	99 4b       	sbci	r25, 0xB9	; 185
    bb3a:	2d 81       	ldd	r18, Y+5	; 0x05
    bb3c:	3e 81       	ldd	r19, Y+6	; 0x06
    bb3e:	fc 01       	movw	r30, r24
    bb40:	20 83       	st	Z, r18
    bb42:	31 83       	std	Z+1, r19	; 0x01
    bb44:	89 81       	ldd	r24, Y+1	; 0x01
    bb46:	9a 81       	ldd	r25, Y+2	; 0x02
    bb48:	88 0f       	add	r24, r24
    bb4a:	99 1f       	adc	r25, r25
    bb4c:	8d 5c       	subi	r24, 0xCD	; 205
    bb4e:	99 4b       	sbci	r25, 0xB9	; 185
    bb50:	23 eb       	ldi	r18, 0xB3	; 179
    bb52:	30 e4       	ldi	r19, 0x40	; 64
    bb54:	fc 01       	movw	r30, r24
    bb56:	20 83       	st	Z, r18
    bb58:	31 83       	std	Z+1, r19	; 0x01
    bb5a:	8f 81       	ldd	r24, Y+7	; 0x07
    bb5c:	98 85       	ldd	r25, Y+8	; 0x08
    bb5e:	22 e0       	ldi	r18, 0x02	; 2
    bb60:	fc 01       	movw	r30, r24
    bb62:	22 8b       	std	Z+18, r18	; 0x12
    bb64:	8f 81       	ldd	r24, Y+7	; 0x07
    bb66:	98 85       	ldd	r25, Y+8	; 0x08
    bb68:	fc 01       	movw	r30, r24
    bb6a:	10 86       	std	Z+8, r1	; 0x08
    bb6c:	8f 81       	ldd	r24, Y+7	; 0x07
    bb6e:	98 85       	ldd	r25, Y+8	; 0x08
    bb70:	fc 01       	movw	r30, r24
    bb72:	11 86       	std	Z+9, r1	; 0x09
    bb74:	8f 81       	ldd	r24, Y+7	; 0x07
    bb76:	98 85       	ldd	r25, Y+8	; 0x08
    bb78:	fc 01       	movw	r30, r24
    bb7a:	12 86       	std	Z+10, r1	; 0x0a
    bb7c:	8f 81       	ldd	r24, Y+7	; 0x07
    bb7e:	98 85       	ldd	r25, Y+8	; 0x08
    bb80:	fc 01       	movw	r30, r24
    bb82:	14 86       	std	Z+12, r1	; 0x0c
    bb84:	8f 81       	ldd	r24, Y+7	; 0x07
    bb86:	98 85       	ldd	r25, Y+8	; 0x08
    bb88:	fc 01       	movw	r30, r24
    bb8a:	13 86       	std	Z+11, r1	; 0x0b
    bb8c:	8f 81       	ldd	r24, Y+7	; 0x07
    bb8e:	98 85       	ldd	r25, Y+8	; 0x08
    bb90:	fc 01       	movw	r30, r24
    bb92:	17 8a       	std	Z+23, r1	; 0x17
    bb94:	8f 81       	ldd	r24, Y+7	; 0x07
    bb96:	98 85       	ldd	r25, Y+8	; 0x08
    bb98:	fc 01       	movw	r30, r24
    bb9a:	13 8a       	std	Z+19, r1	; 0x13
    bb9c:	14 8a       	std	Z+20, r1	; 0x14
    bb9e:	15 8a       	std	Z+21, r1	; 0x15
    bba0:	16 8a       	std	Z+22, r1	; 0x16
    bba2:	80 e0       	ldi	r24, 0x00	; 0
    bba4:	90 e0       	ldi	r25, 0x00	; 0
    bba6:	28 96       	adiw	r28, 0x08	; 8
    bba8:	cd bf       	out	0x3d, r28	; 61
    bbaa:	de bf       	out	0x3e, r29	; 62
    bbac:	df 91       	pop	r29
    bbae:	cf 91       	pop	r28
    bbb0:	08 95       	ret

0000bbb2 <LIN_DRV_GotoIdleState>:
    bbb2:	cf 93       	push	r28
    bbb4:	df 93       	push	r29
    bbb6:	cd b7       	in	r28, 0x3d	; 61
    bbb8:	de b7       	in	r29, 0x3e	; 62
    bbba:	26 97       	sbiw	r28, 0x06	; 6
    bbbc:	cd bf       	out	0x3d, r28	; 61
    bbbe:	de bf       	out	0x3e, r29	; 62
    bbc0:	6b 83       	std	Y+3, r22	; 0x03
    bbc2:	7c 83       	std	Y+4, r23	; 0x04
    bbc4:	8d 83       	std	Y+5, r24	; 0x05
    bbc6:	9e 83       	std	Y+6, r25	; 0x06
    bbc8:	8b 81       	ldd	r24, Y+3	; 0x03
    bbca:	9c 81       	ldd	r25, Y+4	; 0x04
    bbcc:	88 0f       	add	r24, r24
    bbce:	99 1f       	adc	r25, r25
    bbd0:	81 5d       	subi	r24, 0xD1	; 209
    bbd2:	99 4b       	sbci	r25, 0xB9	; 185
    bbd4:	fc 01       	movw	r30, r24
    bbd6:	80 81       	ld	r24, Z
    bbd8:	91 81       	ldd	r25, Z+1	; 0x01
    bbda:	89 83       	std	Y+1, r24	; 0x01
    bbdc:	9a 83       	std	Y+2, r25	; 0x02
    bbde:	89 81       	ldd	r24, Y+1	; 0x01
    bbe0:	9a 81       	ldd	r25, Y+2	; 0x02
    bbe2:	fc 01       	movw	r30, r24
    bbe4:	11 8a       	std	Z+17, r1	; 0x11
    bbe6:	89 81       	ldd	r24, Y+1	; 0x01
    bbe8:	9a 81       	ldd	r25, Y+2	; 0x02
    bbea:	22 e0       	ldi	r18, 0x02	; 2
    bbec:	fc 01       	movw	r30, r24
    bbee:	22 8b       	std	Z+18, r18	; 0x12
    bbf0:	89 81       	ldd	r24, Y+1	; 0x01
    bbf2:	9a 81       	ldd	r25, Y+2	; 0x02
    bbf4:	fc 01       	movw	r30, r24
    bbf6:	12 86       	std	Z+10, r1	; 0x0a
    bbf8:	80 e0       	ldi	r24, 0x00	; 0
    bbfa:	90 e0       	ldi	r25, 0x00	; 0
    bbfc:	26 96       	adiw	r28, 0x06	; 6
    bbfe:	cd bf       	out	0x3d, r28	; 61
    bc00:	de bf       	out	0x3e, r29	; 62
    bc02:	df 91       	pop	r29
    bc04:	cf 91       	pop	r28
    bc06:	08 95       	ret

0000bc08 <LIN_DRV_GoToSleepMode>:
 * This function changes current node state to LIN_NODE_STATE_SLEEP_MODE.
 *
 * Implements    : LIN_LPUART_DRV_GoToSleepMode_Activity
 *END**************************************************************************/
status_t LIN_DRV_GoToSleepMode(uint32_t instance)
{
    bc08:	cf 93       	push	r28
    bc0a:	df 93       	push	r29
    bc0c:	cd b7       	in	r28, 0x3d	; 61
    bc0e:	de b7       	in	r29, 0x3e	; 62
    bc10:	26 97       	sbiw	r28, 0x06	; 6
    bc12:	cd bf       	out	0x3d, r28	; 61
    bc14:	de bf       	out	0x3e, r29	; 62
    bc16:	6b 83       	std	Y+3, r22	; 0x03
    bc18:	7c 83       	std	Y+4, r23	; 0x04
    bc1a:	8d 83       	std	Y+5, r24	; 0x05
    bc1c:	9e 83       	std	Y+6, r25	; 0x06
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bc1e:	8b 81       	ldd	r24, Y+3	; 0x03
    bc20:	9c 81       	ldd	r25, Y+4	; 0x04
    bc22:	88 0f       	add	r24, r24
    bc24:	99 1f       	adc	r25, r25
    bc26:	81 5d       	subi	r24, 0xD1	; 209
    bc28:	99 4b       	sbci	r25, 0xB9	; 185
    bc2a:	fc 01       	movw	r30, r24
    bc2c:	80 81       	ld	r24, Z
    bc2e:	91 81       	ldd	r25, Z+1	; 0x01
    bc30:	89 83       	std	Y+1, r24	; 0x01
    bc32:	9a 83       	std	Y+2, r25	; 0x02

    /* Update node's current state to SLEEP_MODE. */
    linCurrentState->currentNodeState = LIN_NODE_STATE_SLEEP_MODE;
    bc34:	89 81       	ldd	r24, Y+1	; 0x01
    bc36:	9a 81       	ldd	r25, Y+2	; 0x02
    bc38:	21 e0       	ldi	r18, 0x01	; 1
    bc3a:	fc 01       	movw	r30, r24
    bc3c:	22 8b       	std	Z+18, r18	; 0x12

    lin_go_to_sleep();
    bc3e:	0e 94 3b 2f 	call	0x5e76	; 0x5e76 <lin_go_to_sleep>

    return STATUS_SUCCESS;
    bc42:	80 e0       	ldi	r24, 0x00	; 0
    bc44:	90 e0       	ldi	r25, 0x00	; 0
}
    bc46:	26 96       	adiw	r28, 0x06	; 6
    bc48:	cd bf       	out	0x3d, r28	; 61
    bc4a:	de bf       	out	0x3e, r29	; 62
    bc4c:	df 91       	pop	r29
    bc4e:	cf 91       	pop	r28
    bc50:	08 95       	ret

0000bc52 <LIN_DRV_AbortTransferData>:
 * function to terminate immediately the transferring.
 *
 * Implements    : LIN_DRV_AbortTransferData_Activity
 *END**************************************************************************/
status_t LIN_DRV_AbortTransferData(uint32_t instance)
{
    bc52:	cf 93       	push	r28
    bc54:	df 93       	push	r29
    bc56:	cd b7       	in	r28, 0x3d	; 61
    bc58:	de b7       	in	r29, 0x3e	; 62
    bc5a:	28 97       	sbiw	r28, 0x08	; 8
    bc5c:	cd bf       	out	0x3d, r28	; 61
    bc5e:	de bf       	out	0x3e, r29	; 62
    bc60:	6d 83       	std	Y+5, r22	; 0x05
    bc62:	7e 83       	std	Y+6, r23	; 0x06
    bc64:	8f 83       	std	Y+7, r24	; 0x07
    bc66:	98 87       	std	Y+8, r25	; 0x08
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    bc68:	19 82       	std	Y+1, r1	; 0x01
    bc6a:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bc6c:	8d 81       	ldd	r24, Y+5	; 0x05
    bc6e:	9e 81       	ldd	r25, Y+6	; 0x06
    bc70:	88 0f       	add	r24, r24
    bc72:	99 1f       	adc	r25, r25
    bc74:	81 5d       	subi	r24, 0xD1	; 209
    bc76:	99 4b       	sbci	r25, 0xB9	; 185
    bc78:	fc 01       	movw	r30, r24
    bc7a:	80 81       	ld	r24, Z
    bc7c:	91 81       	ldd	r25, Z+1	; 0x01
    bc7e:	8b 83       	std	Y+3, r24	; 0x03
    bc80:	9c 83       	std	Y+4, r25	; 0x04

    /* Change node's current state to IDLE */
    (void)LIN_DRV_GotoIdleState(instance);
    bc82:	8d 81       	ldd	r24, Y+5	; 0x05
    bc84:	9e 81       	ldd	r25, Y+6	; 0x06
    bc86:	af 81       	ldd	r26, Y+7	; 0x07
    bc88:	b8 85       	ldd	r27, Y+8	; 0x08
    bc8a:	bc 01       	movw	r22, r24
    bc8c:	cd 01       	movw	r24, r26
    bc8e:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>

    /* Clear LIN Tx and Rx Busy flag */
    linCurrentState->isTxBusy = false;
    bc92:	8b 81       	ldd	r24, Y+3	; 0x03
    bc94:	9c 81       	ldd	r25, Y+4	; 0x04
    bc96:	fc 01       	movw	r30, r24
    bc98:	10 86       	std	Z+8, r1	; 0x08
    linCurrentState->isRxBusy = false;
    bc9a:	8b 81       	ldd	r24, Y+3	; 0x03
    bc9c:	9c 81       	ldd	r25, Y+4	; 0x04
    bc9e:	fc 01       	movw	r30, r24
    bca0:	11 86       	std	Z+9, r1	; 0x09

    return retVal;
    bca2:	89 81       	ldd	r24, Y+1	; 0x01
    bca4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bca6:	28 96       	adiw	r28, 0x08	; 8
    bca8:	cd bf       	out	0x3d, r28	; 61
    bcaa:	de bf       	out	0x3e, r29	; 62
    bcac:	df 91       	pop	r29
    bcae:	cf 91       	pop	r28
    bcb0:	08 95       	ret

0000bcb2 <LIN_DRV_InstallCallback>:


lin_callback_t LIN_DRV_InstallCallback(uint32_t instance,
                                              lin_callback_t function)
{
    bcb2:	cf 93       	push	r28
    bcb4:	df 93       	push	r29
    bcb6:	cd b7       	in	r28, 0x3d	; 61
    bcb8:	de b7       	in	r29, 0x3e	; 62
    bcba:	2a 97       	sbiw	r28, 0x0a	; 10
    bcbc:	cd bf       	out	0x3d, r28	; 61
    bcbe:	de bf       	out	0x3e, r29	; 62
    bcc0:	6d 83       	std	Y+5, r22	; 0x05
    bcc2:	7e 83       	std	Y+6, r23	; 0x06
    bcc4:	8f 83       	std	Y+7, r24	; 0x07
    bcc6:	98 87       	std	Y+8, r25	; 0x08
    bcc8:	49 87       	std	Y+9, r20	; 0x09
    bcca:	5a 87       	std	Y+10, r21	; 0x0a
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bccc:	8d 81       	ldd	r24, Y+5	; 0x05
    bcce:	9e 81       	ldd	r25, Y+6	; 0x06
    bcd0:	88 0f       	add	r24, r24
    bcd2:	99 1f       	adc	r25, r25
    bcd4:	81 5d       	subi	r24, 0xD1	; 209
    bcd6:	99 4b       	sbci	r25, 0xB9	; 185
    bcd8:	fc 01       	movw	r30, r24
    bcda:	80 81       	ld	r24, Z
    bcdc:	91 81       	ldd	r25, Z+1	; 0x01
    bcde:	89 83       	std	Y+1, r24	; 0x01
    bce0:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the current callback function. */
    lin_callback_t currentCallback = linCurrentState->Callback;
    bce2:	89 81       	ldd	r24, Y+1	; 0x01
    bce4:	9a 81       	ldd	r25, Y+2	; 0x02
    bce6:	fc 01       	movw	r30, r24
    bce8:	85 85       	ldd	r24, Z+13	; 0x0d
    bcea:	96 85       	ldd	r25, Z+14	; 0x0e
    bcec:	8b 83       	std	Y+3, r24	; 0x03
    bcee:	9c 83       	std	Y+4, r25	; 0x04

    /* Install new callback function. */
    linCurrentState->Callback = function;
    bcf0:	89 81       	ldd	r24, Y+1	; 0x01
    bcf2:	9a 81       	ldd	r25, Y+2	; 0x02
    bcf4:	29 85       	ldd	r18, Y+9	; 0x09
    bcf6:	3a 85       	ldd	r19, Y+10	; 0x0a
    bcf8:	fc 01       	movw	r30, r24
    bcfa:	25 87       	std	Z+13, r18	; 0x0d
    bcfc:	36 87       	std	Z+14, r19	; 0x0e

    return currentCallback;
    bcfe:	8b 81       	ldd	r24, Y+3	; 0x03
    bd00:	9c 81       	ldd	r25, Y+4	; 0x04
}
    bd02:	2a 96       	adiw	r28, 0x0a	; 10
    bd04:	cd bf       	out	0x3d, r28	; 61
    bd06:	de bf       	out	0x3e, r29	; 62
    bd08:	df 91       	pop	r29
    bd0a:	cf 91       	pop	r28
    bd0c:	08 95       	ret

0000bd0e <LIN_DRV_IRQHandler>:

/*  参数instance为串口标号，取决于配置的顺序
*/

void LIN_DRV_IRQHandler(uint32_t instance, int8_t event)
{
    bd0e:	cf 93       	push	r28
    bd10:	df 93       	push	r29
    bd12:	cd b7       	in	r28, 0x3d	; 61
    bd14:	de b7       	in	r29, 0x3e	; 62
    bd16:	2c 97       	sbiw	r28, 0x0c	; 12
    bd18:	cd bf       	out	0x3d, r28	; 61
    bd1a:	de bf       	out	0x3e, r29	; 62
    bd1c:	68 87       	std	Y+8, r22	; 0x08
    bd1e:	79 87       	std	Y+9, r23	; 0x09
    bd20:	8a 87       	std	Y+10, r24	; 0x0a
    bd22:	9b 87       	std	Y+11, r25	; 0x0b
    bd24:	4c 87       	std	Y+12, r20	; 0x0c
    /* 一下功能实现只针对AVRxxDA系列8位单片机 */
    uint8_t temp_buf; 
    /************/
    const lin_user_config_t * linUserConfig = g_linUserconfigPtr[instance];
    bd26:	88 85       	ldd	r24, Y+8	; 0x08
    bd28:	99 85       	ldd	r25, Y+9	; 0x09
    bd2a:	88 0f       	add	r24, r24
    bd2c:	99 1f       	adc	r25, r25
    bd2e:	8f 5c       	subi	r24, 0xCF	; 207
    bd30:	99 4b       	sbci	r25, 0xB9	; 185
    bd32:	fc 01       	movw	r30, r24
    bd34:	80 81       	ld	r24, Z
    bd36:	91 81       	ldd	r25, Z+1	; 0x01
    bd38:	89 83       	std	Y+1, r24	; 0x01
    bd3a:	9a 83       	std	Y+2, r25	; 0x02
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bd3c:	88 85       	ldd	r24, Y+8	; 0x08
    bd3e:	99 85       	ldd	r25, Y+9	; 0x09
    bd40:	88 0f       	add	r24, r24
    bd42:	99 1f       	adc	r25, r25
    bd44:	81 5d       	subi	r24, 0xD1	; 209
    bd46:	99 4b       	sbci	r25, 0xB9	; 185
    bd48:	fc 01       	movw	r30, r24
    bd4a:	80 81       	ld	r24, Z
    bd4c:	91 81       	ldd	r25, Z+1	; 0x01
    bd4e:	8b 83       	std	Y+3, r24	; 0x03
    bd50:	9c 83       	std	Y+4, r25	; 0x04
    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    bd52:	88 85       	ldd	r24, Y+8	; 0x08
    bd54:	99 85       	ldd	r25, Y+9	; 0x09
    bd56:	88 0f       	add	r24, r24
    bd58:	99 1f       	adc	r25, r25
    bd5a:	8d 5c       	subi	r24, 0xCD	; 205
    bd5c:	99 4b       	sbci	r25, 0xB9	; 185
    bd5e:	fc 01       	movw	r30, r24
    bd60:	80 81       	ld	r24, Z
    bd62:	91 81       	ldd	r25, Z+1	; 0x01
    bd64:	8d 83       	std	Y+5, r24	; 0x05
    bd66:	9e 83       	std	Y+6, r25	; 0x06

    if(event == 1) // 检测到PID
    bd68:	8c 85       	ldd	r24, Y+12	; 0x0c
    bd6a:	81 30       	cpi	r24, 0x01	; 1
    bd6c:	51 f5       	brne	.+84     	; 0xbdc2 <LIN_DRV_IRQHandler+0xb4>
    {
        //AVR系列单片机特殊的地方 BREAK SYNC PID 一起识别触发
        if(linUserConfig->nodeFunction == (bool)MASTER)
    bd6e:	89 81       	ldd	r24, Y+1	; 0x01
    bd70:	9a 81       	ldd	r25, Y+2	; 0x02
    bd72:	fc 01       	movw	r30, r24
    bd74:	84 81       	ldd	r24, Z+4	; 0x04
    bd76:	88 23       	and	r24, r24
    bd78:	09 f0       	breq	.+2      	; 0xbd7c <LIN_DRV_IRQHandler+0x6e>
    bd7a:	93 c0       	rjmp	.+294    	; 0xbea2 <LIN_DRV_IRQHandler+0x194>
        {
            //TODO:主机模式后续更新，AVR 8位机无法实现主机模式
        }else
        {
            /* Set flag LIN bus busy */
            linCurrentState->isBusBusy = true;
    bd7c:	8b 81       	ldd	r24, Y+3	; 0x03
    bd7e:	9c 81       	ldd	r25, Y+4	; 0x04
    bd80:	21 e0       	ldi	r18, 0x01	; 1
    bd82:	fc 01       	movw	r30, r24
    bd84:	22 87       	std	Z+10, r18	; 0x0a
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentEventId = LIN_SYNC_OK;
    bd86:	8b 81       	ldd	r24, Y+3	; 0x03
    bd88:	9c 81       	ldd	r25, Y+4	; 0x04
    bd8a:	24 e0       	ldi	r18, 0x04	; 4
    bd8c:	fc 01       	movw	r30, r24
    bd8e:	21 8b       	std	Z+17, r18	; 0x11
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_PID;
    bd90:	8b 81       	ldd	r24, Y+3	; 0x03
    bd92:	9c 81       	ldd	r25, Y+4	; 0x04
    bd94:	26 e0       	ldi	r18, 0x06	; 6
    bd96:	fc 01       	movw	r30, r24
    bd98:	22 8b       	std	Z+18, r18	; 0x12
            /* 直接读取data缓冲区数据，存放得当前PID */
            linFuncCallback->ReadByte(&temp_buf);
    bd9a:	8d 81       	ldd	r24, Y+5	; 0x05
    bd9c:	9e 81       	ldd	r25, Y+6	; 0x06
    bd9e:	fc 01       	movw	r30, r24
    bda0:	20 81       	ld	r18, Z
    bda2:	31 81       	ldd	r19, Z+1	; 0x01
    bda4:	ce 01       	movw	r24, r28
    bda6:	07 96       	adiw	r24, 0x07	; 7
    bda8:	f9 01       	movw	r30, r18
    bdaa:	09 95       	icall
            /* 判断PID是否合理，有错误 */
            LIN_DRV_ProcessFrameHeader(instance, temp_buf);
    bdac:	2f 81       	ldd	r18, Y+7	; 0x07
    bdae:	88 85       	ldd	r24, Y+8	; 0x08
    bdb0:	99 85       	ldd	r25, Y+9	; 0x09
    bdb2:	aa 85       	ldd	r26, Y+10	; 0x0a
    bdb4:	bb 85       	ldd	r27, Y+11	; 0x0b
    bdb6:	42 2f       	mov	r20, r18
    bdb8:	bc 01       	movw	r22, r24
    bdba:	cd 01       	movw	r24, r26
    bdbc:	0e 94 58 5f 	call	0xbeb0	; 0xbeb0 <LIN_DRV_ProcessFrameHeader>
        {
            linCurrentState->Callback(instance, linCurrentState);
        }
        (void)LIN_DRV_GotoIdleState(instance);
    }
}
    bdc0:	70 c0       	rjmp	.+224    	; 0xbea2 <LIN_DRV_IRQHandler+0x194>
            // {
            //     linCurrentState->Callback(instance, linCurrentState);
            // }
        }
    }
    else if(event == 0) //处理帧数据
    bdc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    bdc4:	88 23       	and	r24, r24
    bdc6:	09 f0       	breq	.+2      	; 0xbdca <LIN_DRV_IRQHandler+0xbc>
    bdc8:	45 c0       	rjmp	.+138    	; 0xbe54 <LIN_DRV_IRQHandler+0x146>
    {
        /* Check node's current state */
        switch (linCurrentState->currentNodeState)
    bdca:	8b 81       	ldd	r24, Y+3	; 0x03
    bdcc:	9c 81       	ldd	r25, Y+4	; 0x04
    bdce:	fc 01       	movw	r30, r24
    bdd0:	82 89       	ldd	r24, Z+18	; 0x12
    bdd2:	88 2f       	mov	r24, r24
    bdd4:	90 e0       	ldi	r25, 0x00	; 0
    bdd6:	87 30       	cpi	r24, 0x07	; 7
    bdd8:	91 05       	cpc	r25, r1
    bdda:	49 f0       	breq	.+18     	; 0xbdee <LIN_DRV_IRQHandler+0xe0>
    bddc:	88 30       	cpi	r24, 0x08	; 8
    bdde:	91 05       	cpc	r25, r1
    bde0:	1c f4       	brge	.+6      	; 0xbde8 <LIN_DRV_IRQHandler+0xda>
    bde2:	04 97       	sbiw	r24, 0x04	; 4
    bde4:	64 f1       	brlt	.+88     	; 0xbe3e <LIN_DRV_IRQHandler+0x130>
            /* if current state is MASTER SENDING PID */
            case LIN_NODE_STATE_SEND_PID:

            /* if current state is RECEIVE PID */
            case LIN_NODE_STATE_RECV_PID:
                break;
    bde6:	5d c0       	rjmp	.+186    	; 0xbea2 <LIN_DRV_IRQHandler+0x194>
        }
    }
    else if(event == 0) //处理帧数据
    {
        /* Check node's current state */
        switch (linCurrentState->currentNodeState)
    bde8:	09 97       	sbiw	r24, 0x09	; 9
    bdea:	a9 f0       	breq	.+42     	; 0xbe16 <LIN_DRV_IRQHandler+0x108>
    bdec:	28 c0       	rjmp	.+80     	; 0xbe3e <LIN_DRV_IRQHandler+0x130>
            /* if current state is RECEIVE PID */
            case LIN_NODE_STATE_RECV_PID:
                break;
            /* if current state is RECEIVE DATA */
            case LIN_NODE_STATE_RECV_DATA:
                linFuncCallback->ReadByte(&temp_buf);
    bdee:	8d 81       	ldd	r24, Y+5	; 0x05
    bdf0:	9e 81       	ldd	r25, Y+6	; 0x06
    bdf2:	fc 01       	movw	r30, r24
    bdf4:	20 81       	ld	r18, Z
    bdf6:	31 81       	ldd	r19, Z+1	; 0x01
    bdf8:	ce 01       	movw	r24, r28
    bdfa:	07 96       	adiw	r24, 0x07	; 7
    bdfc:	f9 01       	movw	r30, r18
    bdfe:	09 95       	icall
                LIN_DRV_ProcessReceiveFrameData(instance, temp_buf);
    be00:	2f 81       	ldd	r18, Y+7	; 0x07
    be02:	88 85       	ldd	r24, Y+8	; 0x08
    be04:	99 85       	ldd	r25, Y+9	; 0x09
    be06:	aa 85       	ldd	r26, Y+10	; 0x0a
    be08:	bb 85       	ldd	r27, Y+11	; 0x0b
    be0a:	42 2f       	mov	r20, r18
    be0c:	bc 01       	movw	r22, r24
    be0e:	cd 01       	movw	r24, r26
    be10:	0e 94 80 62 	call	0xc500	; 0xc500 <LIN_DRV_ProcessReceiveFrameData>
                break;
    be14:	46 c0       	rjmp	.+140    	; 0xbea2 <LIN_DRV_IRQHandler+0x194>
            /* if current state is SENDING DATA */
            case LIN_NODE_STATE_SEND_DATA:
                /* 发送时会回显数据 读上次发送的回显数据 */
                linFuncCallback->ReadByte(&temp_buf);
    be16:	8d 81       	ldd	r24, Y+5	; 0x05
    be18:	9e 81       	ldd	r25, Y+6	; 0x06
    be1a:	fc 01       	movw	r30, r24
    be1c:	20 81       	ld	r18, Z
    be1e:	31 81       	ldd	r19, Z+1	; 0x01
    be20:	ce 01       	movw	r24, r28
    be22:	07 96       	adiw	r24, 0x07	; 7
    be24:	f9 01       	movw	r30, r18
    be26:	09 95       	icall
                LIN_DRV_ProcessSendFrameData(instance, temp_buf);
    be28:	2f 81       	ldd	r18, Y+7	; 0x07
    be2a:	88 85       	ldd	r24, Y+8	; 0x08
    be2c:	99 85       	ldd	r25, Y+9	; 0x09
    be2e:	aa 85       	ldd	r26, Y+10	; 0x0a
    be30:	bb 85       	ldd	r27, Y+11	; 0x0b
    be32:	42 2f       	mov	r20, r18
    be34:	bc 01       	movw	r22, r24
    be36:	cd 01       	movw	r24, r26
    be38:	0e 94 f1 60 	call	0xc1e2	; 0xc1e2 <LIN_DRV_ProcessSendFrameData>
                break;
    be3c:	32 c0       	rjmp	.+100    	; 0xbea2 <LIN_DRV_IRQHandler+0x194>

            default:
                /* Other node state */
				linFuncCallback->ReadByte(&temp_buf);
    be3e:	8d 81       	ldd	r24, Y+5	; 0x05
    be40:	9e 81       	ldd	r25, Y+6	; 0x06
    be42:	fc 01       	movw	r30, r24
    be44:	20 81       	ld	r18, Z
    be46:	31 81       	ldd	r19, Z+1	; 0x01
    be48:	ce 01       	movw	r24, r28
    be4a:	07 96       	adiw	r24, 0x07	; 7
    be4c:	f9 01       	movw	r30, r18
    be4e:	09 95       	icall
                break;
    be50:	00 00       	nop
    be52:	27 c0       	rjmp	.+78     	; 0xbea2 <LIN_DRV_IRQHandler+0x194>
        }
    }
    else if(event == -1) //报错
    be54:	8c 85       	ldd	r24, Y+12	; 0x0c
    be56:	8f 3f       	cpi	r24, 0xFF	; 255
    be58:	21 f5       	brne	.+72     	; 0xbea2 <LIN_DRV_IRQHandler+0x194>
        // else if(err == USART_ERROR_FRAMING)
        // {

        // }
        // AVRXXDA系列的型号
        linCurrentState->currentEventId = LIN_SYNC_ERROR;
    be5a:	8b 81       	ldd	r24, Y+3	; 0x03
    be5c:	9c 81       	ldd	r25, Y+4	; 0x04
    be5e:	25 e0       	ldi	r18, 0x05	; 5
    be60:	fc 01       	movw	r30, r24
    be62:	21 8b       	std	Z+17, r18	; 0x11
        if(linCurrentState->Callback != NULL)
    be64:	8b 81       	ldd	r24, Y+3	; 0x03
    be66:	9c 81       	ldd	r25, Y+4	; 0x04
    be68:	fc 01       	movw	r30, r24
    be6a:	85 85       	ldd	r24, Z+13	; 0x0d
    be6c:	96 85       	ldd	r25, Z+14	; 0x0e
    be6e:	89 2b       	or	r24, r25
    be70:	79 f0       	breq	.+30     	; 0xbe90 <LIN_DRV_IRQHandler+0x182>
        {
            linCurrentState->Callback(instance, linCurrentState);
    be72:	8b 81       	ldd	r24, Y+3	; 0x03
    be74:	9c 81       	ldd	r25, Y+4	; 0x04
    be76:	fc 01       	movw	r30, r24
    be78:	25 85       	ldd	r18, Z+13	; 0x0d
    be7a:	36 85       	ldd	r19, Z+14	; 0x0e
    be7c:	4b 81       	ldd	r20, Y+3	; 0x03
    be7e:	5c 81       	ldd	r21, Y+4	; 0x04
    be80:	88 85       	ldd	r24, Y+8	; 0x08
    be82:	99 85       	ldd	r25, Y+9	; 0x09
    be84:	aa 85       	ldd	r26, Y+10	; 0x0a
    be86:	bb 85       	ldd	r27, Y+11	; 0x0b
    be88:	bc 01       	movw	r22, r24
    be8a:	cd 01       	movw	r24, r26
    be8c:	f9 01       	movw	r30, r18
    be8e:	09 95       	icall
        }
        (void)LIN_DRV_GotoIdleState(instance);
    be90:	88 85       	ldd	r24, Y+8	; 0x08
    be92:	99 85       	ldd	r25, Y+9	; 0x09
    be94:	aa 85       	ldd	r26, Y+10	; 0x0a
    be96:	bb 85       	ldd	r27, Y+11	; 0x0b
    be98:	bc 01       	movw	r22, r24
    be9a:	cd 01       	movw	r24, r26
    be9c:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>
    }
}
    bea0:	00 c0       	rjmp	.+0      	; 0xbea2 <LIN_DRV_IRQHandler+0x194>
    bea2:	00 00       	nop
    bea4:	2c 96       	adiw	r28, 0x0c	; 12
    bea6:	cd bf       	out	0x3d, r28	; 61
    bea8:	de bf       	out	0x3e, r29	; 62
    beaa:	df 91       	pop	r29
    beac:	cf 91       	pop	r28
    beae:	08 95       	ret

0000beb0 <LIN_DRV_ProcessFrameHeader>:

static void LIN_DRV_ProcessFrameHeader(uint32_t instance, uint8_t tmpbyte)
{
    beb0:	cf 93       	push	r28
    beb2:	df 93       	push	r29
    beb4:	cd b7       	in	r28, 0x3d	; 61
    beb6:	de b7       	in	r29, 0x3e	; 62
    beb8:	29 97       	sbiw	r28, 0x09	; 9
    beba:	cd bf       	out	0x3d, r28	; 61
    bebc:	de bf       	out	0x3e, r29	; 62
    bebe:	6d 83       	std	Y+5, r22	; 0x05
    bec0:	7e 83       	std	Y+6, r23	; 0x06
    bec2:	8f 83       	std	Y+7, r24	; 0x07
    bec4:	98 87       	std	Y+8, r25	; 0x08
    bec6:	49 87       	std	Y+9, r20	; 0x09
    /* Get the current LIN user config structure of this LPUART instance. */
    const lin_user_config_t * linUserConfig = g_linUserconfigPtr[instance];
    bec8:	8d 81       	ldd	r24, Y+5	; 0x05
    beca:	9e 81       	ldd	r25, Y+6	; 0x06
    becc:	88 0f       	add	r24, r24
    bece:	99 1f       	adc	r25, r25
    bed0:	8f 5c       	subi	r24, 0xCF	; 207
    bed2:	99 4b       	sbci	r25, 0xB9	; 185
    bed4:	fc 01       	movw	r30, r24
    bed6:	80 81       	ld	r24, Z
    bed8:	91 81       	ldd	r25, Z+1	; 0x01
    beda:	89 83       	std	Y+1, r24	; 0x01
    bedc:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bede:	8d 81       	ldd	r24, Y+5	; 0x05
    bee0:	9e 81       	ldd	r25, Y+6	; 0x06
    bee2:	88 0f       	add	r24, r24
    bee4:	99 1f       	adc	r25, r25
    bee6:	81 5d       	subi	r24, 0xD1	; 209
    bee8:	99 4b       	sbci	r25, 0xB9	; 185
    beea:	fc 01       	movw	r30, r24
    beec:	80 81       	ld	r24, Z
    beee:	91 81       	ldd	r25, Z+1	; 0x01
    bef0:	8b 83       	std	Y+3, r24	; 0x03
    bef2:	9c 83       	std	Y+4, r25	; 0x04

    switch (linCurrentState->currentNodeState)
    bef4:	8b 81       	ldd	r24, Y+3	; 0x03
    bef6:	9c 81       	ldd	r25, Y+4	; 0x04
    bef8:	fc 01       	movw	r30, r24
    befa:	82 89       	ldd	r24, Z+18	; 0x12
    befc:	88 2f       	mov	r24, r24
    befe:	90 e0       	ldi	r25, 0x00	; 0
    bf00:	85 30       	cpi	r24, 0x05	; 5
    bf02:	91 05       	cpc	r25, r1
    bf04:	09 f4       	brne	.+2      	; 0xbf08 <LIN_DRV_ProcessFrameHeader+0x58>
    bf06:	6d c0       	rjmp	.+218    	; 0xbfe2 <LIN_DRV_ProcessFrameHeader+0x132>
    bf08:	86 30       	cpi	r24, 0x06	; 6
    bf0a:	91 05       	cpc	r25, r1
    bf0c:	21 f0       	breq	.+8      	; 0xbf16 <LIN_DRV_ProcessFrameHeader+0x66>
    bf0e:	04 97       	sbiw	r24, 0x04	; 4
    bf10:	09 f4       	brne	.+2      	; 0xbf14 <LIN_DRV_ProcessFrameHeader+0x64>
    bf12:	69 c0       	rjmp	.+210    	; 0xbfe6 <LIN_DRV_ProcessFrameHeader+0x136>
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    default:
        break;
    bf14:	6b c0       	rjmp	.+214    	; 0xbfec <LIN_DRV_ProcessFrameHeader+0x13c>
        break;
    case LIN_NODE_STATE_SEND_PID:
        break;   
    case LIN_NODE_STATE_RECV_PID:
        /* If the node is MASTER */
        if (linUserConfig->nodeFunction == (bool)MASTER)
    bf16:	89 81       	ldd	r24, Y+1	; 0x01
    bf18:	9a 81       	ldd	r25, Y+2	; 0x02
    bf1a:	fc 01       	movw	r30, r24
    bf1c:	84 81       	ldd	r24, Z+4	; 0x04
    bf1e:	88 23       	and	r24, r24
    bf20:	09 f0       	breq	.+2      	; 0xbf24 <LIN_DRV_ProcessFrameHeader+0x74>
    bf22:	63 c0       	rjmp	.+198    	; 0xbfea <LIN_DRV_ProcessFrameHeader+0x13a>
            //TODO: 实现主机的方法
        }
        /* If the node is SLAVE */
        else
        {
            linCurrentState->currentId = LIN_DRV_ProcessParity(tmpbyte, CHECK_PARITY);
    bf24:	61 e0       	ldi	r22, 0x01	; 1
    bf26:	89 85       	ldd	r24, Y+9	; 0x09
    bf28:	0e 94 ce 5c 	call	0xb99c	; 0xb99c <LIN_DRV_ProcessParity>
    bf2c:	28 2f       	mov	r18, r24
    bf2e:	8b 81       	ldd	r24, Y+3	; 0x03
    bf30:	9c 81       	ldd	r25, Y+4	; 0x04
    bf32:	fc 01       	movw	r30, r24
    bf34:	27 87       	std	Z+15, r18	; 0x0f
            linCurrentState->currentPid = tmpbyte;
    bf36:	8b 81       	ldd	r24, Y+3	; 0x03
    bf38:	9c 81       	ldd	r25, Y+4	; 0x04
    bf3a:	29 85       	ldd	r18, Y+9	; 0x09
    bf3c:	fc 01       	movw	r30, r24
    bf3e:	20 8b       	std	Z+16, r18	; 0x10
            if(linCurrentState->currentId != 0xFFU)
    bf40:	8b 81       	ldd	r24, Y+3	; 0x03
    bf42:	9c 81       	ldd	r25, Y+4	; 0x04
    bf44:	fc 01       	movw	r30, r24
    bf46:	87 85       	ldd	r24, Z+15	; 0x0f
    bf48:	8f 3f       	cpi	r24, 0xFF	; 255
    bf4a:	b1 f1       	breq	.+108    	; 0xbfb8 <LIN_DRV_ProcessFrameHeader+0x108>
            {
                /* Set current event ID to PID correct */
                linCurrentState->currentEventId = LIN_PID_OK;
    bf4c:	8b 81       	ldd	r24, Y+3	; 0x03
    bf4e:	9c 81       	ldd	r25, Y+4	; 0x04
    bf50:	26 e0       	ldi	r18, 0x06	; 6
    bf52:	fc 01       	movw	r30, r24
    bf54:	21 8b       	std	Z+17, r18	; 0x11
                if(linCurrentState->isRxBlocking == true)
    bf56:	8b 81       	ldd	r24, Y+3	; 0x03
    bf58:	9c 81       	ldd	r25, Y+4	; 0x04
    bf5a:	fc 01       	movw	r30, r24
    bf5c:	84 85       	ldd	r24, Z+12	; 0x0c
    bf5e:	88 23       	and	r24, r24
    bf60:	81 f0       	breq	.+32     	; 0xbf82 <LIN_DRV_ProcessFrameHeader+0xd2>
                {
                    /* Starting receive data blocking */
                    linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA;             
    bf62:	8b 81       	ldd	r24, Y+3	; 0x03
    bf64:	9c 81       	ldd	r25, Y+4	; 0x04
    bf66:	27 e0       	ldi	r18, 0x07	; 7
    bf68:	fc 01       	movw	r30, r24
    bf6a:	22 8b       	std	Z+18, r18	; 0x12
                    linCurrentState->isBusBusy = true;
    bf6c:	8b 81       	ldd	r24, Y+3	; 0x03
    bf6e:	9c 81       	ldd	r25, Y+4	; 0x04
    bf70:	21 e0       	ldi	r18, 0x01	; 1
    bf72:	fc 01       	movw	r30, r24
    bf74:	22 87       	std	Z+10, r18	; 0x0a
                    linCurrentState->isRxBusy = true;
    bf76:	8b 81       	ldd	r24, Y+3	; 0x03
    bf78:	9c 81       	ldd	r25, Y+4	; 0x04
    bf7a:	21 e0       	ldi	r18, 0x01	; 1
    bf7c:	fc 01       	movw	r30, r24
    bf7e:	21 87       	std	Z+9, r18	; 0x09
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    bf80:	34 c0       	rjmp	.+104    	; 0xbfea <LIN_DRV_ProcessFrameHeader+0x13a>
                    linCurrentState->isBusBusy = true;
                    linCurrentState->isRxBusy = true;
                }
                else
                {
                    linCurrentState->isBusBusy = false;
    bf82:	8b 81       	ldd	r24, Y+3	; 0x03
    bf84:	9c 81       	ldd	r25, Y+4	; 0x04
    bf86:	fc 01       	movw	r30, r24
    bf88:	12 86       	std	Z+10, r1	; 0x0a

                    if(linCurrentState->Callback != NULL)
    bf8a:	8b 81       	ldd	r24, Y+3	; 0x03
    bf8c:	9c 81       	ldd	r25, Y+4	; 0x04
    bf8e:	fc 01       	movw	r30, r24
    bf90:	85 85       	ldd	r24, Z+13	; 0x0d
    bf92:	96 85       	ldd	r25, Z+14	; 0x0e
    bf94:	89 2b       	or	r24, r25
    bf96:	49 f1       	breq	.+82     	; 0xbfea <LIN_DRV_ProcessFrameHeader+0x13a>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    bf98:	8b 81       	ldd	r24, Y+3	; 0x03
    bf9a:	9c 81       	ldd	r25, Y+4	; 0x04
    bf9c:	fc 01       	movw	r30, r24
    bf9e:	25 85       	ldd	r18, Z+13	; 0x0d
    bfa0:	36 85       	ldd	r19, Z+14	; 0x0e
    bfa2:	4b 81       	ldd	r20, Y+3	; 0x03
    bfa4:	5c 81       	ldd	r21, Y+4	; 0x04
    bfa6:	8d 81       	ldd	r24, Y+5	; 0x05
    bfa8:	9e 81       	ldd	r25, Y+6	; 0x06
    bfaa:	af 81       	ldd	r26, Y+7	; 0x07
    bfac:	b8 85       	ldd	r27, Y+8	; 0x08
    bfae:	bc 01       	movw	r22, r24
    bfb0:	cd 01       	movw	r24, r26
    bfb2:	f9 01       	movw	r30, r18
    bfb4:	09 95       	icall
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    bfb6:	19 c0       	rjmp	.+50     	; 0xbfea <LIN_DRV_ProcessFrameHeader+0x13a>
                    }
                }
            }
            else
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
    bfb8:	8b 81       	ldd	r24, Y+3	; 0x03
    bfba:	9c 81       	ldd	r25, Y+4	; 0x04
    bfbc:	27 e0       	ldi	r18, 0x07	; 7
    bfbe:	fc 01       	movw	r30, r24
    bfc0:	21 8b       	std	Z+17, r18	; 0x11
                linCurrentState->Callback(instance, linCurrentState);
    bfc2:	8b 81       	ldd	r24, Y+3	; 0x03
    bfc4:	9c 81       	ldd	r25, Y+4	; 0x04
    bfc6:	fc 01       	movw	r30, r24
    bfc8:	25 85       	ldd	r18, Z+13	; 0x0d
    bfca:	36 85       	ldd	r19, Z+14	; 0x0e
    bfcc:	4b 81       	ldd	r20, Y+3	; 0x03
    bfce:	5c 81       	ldd	r21, Y+4	; 0x04
    bfd0:	8d 81       	ldd	r24, Y+5	; 0x05
    bfd2:	9e 81       	ldd	r25, Y+6	; 0x06
    bfd4:	af 81       	ldd	r26, Y+7	; 0x07
    bfd6:	b8 85       	ldd	r27, Y+8	; 0x08
    bfd8:	bc 01       	movw	r22, r24
    bfda:	cd 01       	movw	r24, r26
    bfdc:	f9 01       	movw	r30, r18
    bfde:	09 95       	icall
            }
        }
        break;
    bfe0:	04 c0       	rjmp	.+8      	; 0xbfea <LIN_DRV_ProcessFrameHeader+0x13a>
    switch (linCurrentState->currentNodeState)
    {
    case LIN_NODE_STATE_RECV_SYNC:
        break;
    case LIN_NODE_STATE_SEND_PID:
        break;   
    bfe2:	00 00       	nop
    bfe4:	03 c0       	rjmp	.+6      	; 0xbfec <LIN_DRV_ProcessFrameHeader+0x13c>
    lin_state_t * linCurrentState = g_linStatePtr[instance];

    switch (linCurrentState->currentNodeState)
    {
    case LIN_NODE_STATE_RECV_SYNC:
        break;
    bfe6:	00 00       	nop
    bfe8:	01 c0       	rjmp	.+2      	; 0xbfec <LIN_DRV_ProcessFrameHeader+0x13c>
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    bfea:	00 00       	nop
    default:
        break;
    }
}
    bfec:	00 00       	nop
    bfee:	29 96       	adiw	r28, 0x09	; 9
    bff0:	cd bf       	out	0x3d, r28	; 61
    bff2:	de bf       	out	0x3e, r29	; 62
    bff4:	df 91       	pop	r29
    bff6:	cf 91       	pop	r28
    bff8:	08 95       	ret

0000bffa <LIN_COM_DRV_MakeChecksumByte>:

static uint8_t LIN_COM_DRV_MakeChecksumByte(uint32_t instance,
                                               const uint8_t * buffer,
                                               uint8_t sizeBuffer,
                                               uint8_t PID)
{
    bffa:	0f 93       	push	r16
    bffc:	cf 93       	push	r28
    bffe:	df 93       	push	r29
    c000:	cd b7       	in	r28, 0x3d	; 61
    c002:	de b7       	in	r29, 0x3e	; 62
    c004:	2d 97       	sbiw	r28, 0x0d	; 13
    c006:	cd bf       	out	0x3d, r28	; 61
    c008:	de bf       	out	0x3e, r29	; 62
    c00a:	6e 83       	std	Y+6, r22	; 0x06
    c00c:	7f 83       	std	Y+7, r23	; 0x07
    c00e:	88 87       	std	Y+8, r24	; 0x08
    c010:	99 87       	std	Y+9, r25	; 0x09
    c012:	4a 87       	std	Y+10, r20	; 0x0a
    c014:	5b 87       	std	Y+11, r21	; 0x0b
    c016:	2c 87       	std	Y+12, r18	; 0x0c
    c018:	0d 87       	std	Y+13, r16	; 0x0d
    /* Get list of PIDs use classic checksum. */
    const uint8_t *classicPID = g_linUserconfigPtr[instance]->classicPID;
    c01a:	8e 81       	ldd	r24, Y+6	; 0x06
    c01c:	9f 81       	ldd	r25, Y+7	; 0x07
    c01e:	88 0f       	add	r24, r24
    c020:	99 1f       	adc	r25, r25
    c022:	8f 5c       	subi	r24, 0xCF	; 207
    c024:	99 4b       	sbci	r25, 0xB9	; 185
    c026:	fc 01       	movw	r30, r24
    c028:	80 81       	ld	r24, Z
    c02a:	91 81       	ldd	r25, Z+1	; 0x01
    c02c:	fc 01       	movw	r30, r24
    c02e:	80 85       	ldd	r24, Z+8	; 0x08
    c030:	91 85       	ldd	r25, Z+9	; 0x09
    c032:	8b 83       	std	Y+3, r24	; 0x03
    c034:	9c 83       	std	Y+4, r25	; 0x04
    const uint8_t numOfClassicPID = g_linUserconfigPtr[instance]->numOfClassicPID;
    c036:	8e 81       	ldd	r24, Y+6	; 0x06
    c038:	9f 81       	ldd	r25, Y+7	; 0x07
    c03a:	88 0f       	add	r24, r24
    c03c:	99 1f       	adc	r25, r25
    c03e:	8f 5c       	subi	r24, 0xCF	; 207
    c040:	99 4b       	sbci	r25, 0xB9	; 185
    c042:	fc 01       	movw	r30, r24
    c044:	80 81       	ld	r24, Z
    c046:	91 81       	ldd	r25, Z+1	; 0x01
    c048:	fc 01       	movw	r30, r24
    c04a:	82 85       	ldd	r24, Z+10	; 0x0a
    c04c:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t checkSum = PID;
    c04e:	8d 85       	ldd	r24, Y+13	; 0x0d
    c050:	89 83       	std	Y+1, r24	; 0x01
    uint8_t retVal = 0U;
    c052:	1a 82       	std	Y+2, r1	; 0x02

    if(numOfClassicPID == 255U)
    c054:	8d 81       	ldd	r24, Y+5	; 0x05
    c056:	8f 3f       	cpi	r24, 0xFF	; 255
    c058:	11 f4       	brne	.+4      	; 0xc05e <LIN_COM_DRV_MakeChecksumByte+0x64>
    {
        /*all frame use enhanced checksum */
        checkSum = 0U;
    c05a:	19 82       	std	Y+1, r1	; 0x01
    c05c:	1b c0       	rjmp	.+54     	; 0xc094 <LIN_COM_DRV_MakeChecksumByte+0x9a>
    }
    else
    {
        if(classicPID != NULL)
    c05e:	8b 81       	ldd	r24, Y+3	; 0x03
    c060:	9c 81       	ldd	r25, Y+4	; 0x04
    c062:	89 2b       	or	r24, r25
    c064:	b9 f0       	breq	.+46     	; 0xc094 <LIN_COM_DRV_MakeChecksumByte+0x9a>
        {
            for (retVal = 0U; retVal < numOfClassicPID; retVal++)
    c066:	1a 82       	std	Y+2, r1	; 0x02
    c068:	11 c0       	rjmp	.+34     	; 0xc08c <LIN_COM_DRV_MakeChecksumByte+0x92>
            {
                if(checkSum == classicPID[retVal])
    c06a:	8a 81       	ldd	r24, Y+2	; 0x02
    c06c:	88 2f       	mov	r24, r24
    c06e:	90 e0       	ldi	r25, 0x00	; 0
    c070:	2b 81       	ldd	r18, Y+3	; 0x03
    c072:	3c 81       	ldd	r19, Y+4	; 0x04
    c074:	82 0f       	add	r24, r18
    c076:	93 1f       	adc	r25, r19
    c078:	fc 01       	movw	r30, r24
    c07a:	90 81       	ld	r25, Z
    c07c:	89 81       	ldd	r24, Y+1	; 0x01
    c07e:	98 17       	cp	r25, r24
    c080:	11 f4       	brne	.+4      	; 0xc086 <LIN_COM_DRV_MakeChecksumByte+0x8c>
                {
                    checkSum = 0U;
    c082:	19 82       	std	Y+1, r1	; 0x01
                    break;
    c084:	07 c0       	rjmp	.+14     	; 0xc094 <LIN_COM_DRV_MakeChecksumByte+0x9a>
    }
    else
    {
        if(classicPID != NULL)
        {
            for (retVal = 0U; retVal < numOfClassicPID; retVal++)
    c086:	8a 81       	ldd	r24, Y+2	; 0x02
    c088:	8f 5f       	subi	r24, 0xFF	; 255
    c08a:	8a 83       	std	Y+2, r24	; 0x02
    c08c:	9a 81       	ldd	r25, Y+2	; 0x02
    c08e:	8d 81       	ldd	r24, Y+5	; 0x05
    c090:	98 17       	cp	r25, r24
    c092:	58 f3       	brcs	.-42     	; 0xc06a <LIN_COM_DRV_MakeChecksumByte+0x70>
                    break;
                }
            }
        }
    }
    retVal = LIN_DRV_MakeChecksumByte(buffer, sizeBuffer, checkSum);
    c094:	8a 85       	ldd	r24, Y+10	; 0x0a
    c096:	9b 85       	ldd	r25, Y+11	; 0x0b
    c098:	49 81       	ldd	r20, Y+1	; 0x01
    c09a:	6c 85       	ldd	r22, Y+12	; 0x0c
    c09c:	0e 94 2e 5d 	call	0xba5c	; 0xba5c <LIN_DRV_MakeChecksumByte>
    c0a0:	8a 83       	std	Y+2, r24	; 0x02
    return retVal;
    c0a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    c0a4:	2d 96       	adiw	r28, 0x0d	; 13
    c0a6:	cd bf       	out	0x3d, r28	; 61
    c0a8:	de bf       	out	0x3e, r29	; 62
    c0aa:	df 91       	pop	r29
    c0ac:	cf 91       	pop	r28
    c0ae:	0f 91       	pop	r16
    c0b0:	08 95       	ret

0000c0b2 <LIN_DRV_SendFrameData>:
 * isBusBusy is currently true then the function will return STATUS_BUSY.
 * 非阻塞模式下发送数据,该函数会计算校验字节，并发送帧数据，立即返回
 * Implements    : LIN_LPUART_DRV_SendFrameData_Activity
 * */
status_t LIN_DRV_SendFrameData(uint32_t instance, const uint8_t * txBuff, uint8_t txSize)
{
    c0b2:	0f 93       	push	r16
    c0b4:	cf 93       	push	r28
    c0b6:	df 93       	push	r29
    c0b8:	cd b7       	in	r28, 0x3d	; 61
    c0ba:	de b7       	in	r29, 0x3e	; 62
    c0bc:	2e 97       	sbiw	r28, 0x0e	; 14
    c0be:	cd bf       	out	0x3d, r28	; 61
    c0c0:	de bf       	out	0x3e, r29	; 62
    c0c2:	68 87       	std	Y+8, r22	; 0x08
    c0c4:	79 87       	std	Y+9, r23	; 0x09
    c0c6:	8a 87       	std	Y+10, r24	; 0x0a
    c0c8:	9b 87       	std	Y+11, r25	; 0x0b
    c0ca:	4c 87       	std	Y+12, r20	; 0x0c
    c0cc:	5d 87       	std	Y+13, r21	; 0x0d
    c0ce:	2e 87       	std	Y+14, r18	; 0x0e
    /* Assert parameters. */
    DEV_ASSERT(txBuff != NULL);
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;
    c0d0:	19 82       	std	Y+1, r1	; 0x01
    c0d2:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    c0d4:	88 85       	ldd	r24, Y+8	; 0x08
    c0d6:	99 85       	ldd	r25, Y+9	; 0x09
    c0d8:	88 0f       	add	r24, r24
    c0da:	99 1f       	adc	r25, r25
    c0dc:	81 5d       	subi	r24, 0xD1	; 209
    c0de:	99 4b       	sbci	r25, 0xB9	; 185
    c0e0:	fc 01       	movw	r30, r24
    c0e2:	80 81       	ld	r24, Z
    c0e4:	91 81       	ldd	r25, Z+1	; 0x01
    c0e6:	8b 83       	std	Y+3, r24	; 0x03
    c0e8:	9c 83       	std	Y+4, r25	; 0x04

    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    c0ea:	88 85       	ldd	r24, Y+8	; 0x08
    c0ec:	99 85       	ldd	r25, Y+9	; 0x09
    c0ee:	88 0f       	add	r24, r24
    c0f0:	99 1f       	adc	r25, r25
    c0f2:	8d 5c       	subi	r24, 0xCD	; 205
    c0f4:	99 4b       	sbci	r25, 0xB9	; 185
    c0f6:	fc 01       	movw	r30, r24
    c0f8:	80 81       	ld	r24, Z
    c0fa:	91 81       	ldd	r25, Z+1	; 0x01
    c0fc:	8d 83       	std	Y+5, r24	; 0x05
    c0fe:	9e 83       	std	Y+6, r25	; 0x06

    /* 判断节点是否处于睡眠状态 */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    c100:	8b 81       	ldd	r24, Y+3	; 0x03
    c102:	9c 81       	ldd	r25, Y+4	; 0x04
    c104:	fc 01       	movw	r30, r24
    c106:	92 89       	ldd	r25, Z+18	; 0x12
    c108:	81 e0       	ldi	r24, 0x01	; 1
    c10a:	91 30       	cpi	r25, 0x01	; 1
    c10c:	09 f0       	breq	.+2      	; 0xc110 <LIN_DRV_SendFrameData+0x5e>
    c10e:	80 e0       	ldi	r24, 0x00	; 0
    c110:	8f 83       	std	Y+7, r24	; 0x07

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    c112:	8e 85       	ldd	r24, Y+14	; 0x0e
    c114:	89 30       	cpi	r24, 0x09	; 9
    c116:	30 f4       	brcc	.+12     	; 0xc124 <LIN_DRV_SendFrameData+0x72>
    c118:	8e 85       	ldd	r24, Y+14	; 0x0e
    c11a:	88 23       	and	r24, r24
    c11c:	19 f0       	breq	.+6      	; 0xc124 <LIN_DRV_SendFrameData+0x72>
    c11e:	8f 81       	ldd	r24, Y+7	; 0x07
    c120:	88 23       	and	r24, r24
    c122:	29 f0       	breq	.+10     	; 0xc12e <LIN_DRV_SendFrameData+0x7c>
    {
        retVal = STATUS_ERROR;
    c124:	81 e0       	ldi	r24, 0x01	; 1
    c126:	90 e0       	ldi	r25, 0x00	; 0
    c128:	89 83       	std	Y+1, r24	; 0x01
    c12a:	9a 83       	std	Y+2, r25	; 0x02
    c12c:	51 c0       	rjmp	.+162    	; 0xc1d0 <LIN_DRV_SendFrameData+0x11e>
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    c12e:	8b 81       	ldd	r24, Y+3	; 0x03
    c130:	9c 81       	ldd	r25, Y+4	; 0x04
    c132:	fc 01       	movw	r30, r24
    c134:	82 85       	ldd	r24, Z+10	; 0x0a
    c136:	88 23       	and	r24, r24
    c138:	29 f0       	breq	.+10     	; 0xc144 <LIN_DRV_SendFrameData+0x92>
        {
            retVal = STATUS_BUSY;
    c13a:	82 e0       	ldi	r24, 0x02	; 2
    c13c:	90 e0       	ldi	r25, 0x00	; 0
    c13e:	89 83       	std	Y+1, r24	; 0x01
    c140:	9a 83       	std	Y+2, r25	; 0x02
    c142:	46 c0       	rjmp	.+140    	; 0xc1d0 <LIN_DRV_SendFrameData+0x11e>
        }
        else
        {
            /* Make the checksum byte. */           
            linCurrentState->checkSum = LIN_COM_DRV_MakeChecksumByte(instance, txBuff, txSize, linCurrentState->currentPid);
    c144:	8b 81       	ldd	r24, Y+3	; 0x03
    c146:	9c 81       	ldd	r25, Y+4	; 0x04
    c148:	fc 01       	movw	r30, r24
    c14a:	20 89       	ldd	r18, Z+16	; 0x10
    c14c:	4c 85       	ldd	r20, Y+12	; 0x0c
    c14e:	5d 85       	ldd	r21, Y+13	; 0x0d
    c150:	88 85       	ldd	r24, Y+8	; 0x08
    c152:	99 85       	ldd	r25, Y+9	; 0x09
    c154:	aa 85       	ldd	r26, Y+10	; 0x0a
    c156:	bb 85       	ldd	r27, Y+11	; 0x0b
    c158:	02 2f       	mov	r16, r18
    c15a:	2e 85       	ldd	r18, Y+14	; 0x0e
    c15c:	bc 01       	movw	r22, r24
    c15e:	cd 01       	movw	r24, r26
    c160:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <LIN_COM_DRV_MakeChecksumByte>
    c164:	28 2f       	mov	r18, r24
    c166:	8b 81       	ldd	r24, Y+3	; 0x03
    c168:	9c 81       	ldd	r25, Y+4	; 0x04
    c16a:	fc 01       	movw	r30, r24
    c16c:	27 83       	std	Z+7, r18	; 0x07

            /* Update the LIN state structure. */
            linCurrentState->txBuff = txBuff;
    c16e:	8b 81       	ldd	r24, Y+3	; 0x03
    c170:	9c 81       	ldd	r25, Y+4	; 0x04
    c172:	2c 85       	ldd	r18, Y+12	; 0x0c
    c174:	3d 85       	ldd	r19, Y+13	; 0x0d
    c176:	fc 01       	movw	r30, r24
    c178:	20 83       	st	Z, r18
    c17a:	31 83       	std	Z+1, r19	; 0x01
            /* Add a place for checksum byte */
            linCurrentState->txSize = (uint8_t)(txSize + 1U);
    c17c:	8e 85       	ldd	r24, Y+14	; 0x0e
    c17e:	21 e0       	ldi	r18, 0x01	; 1
    c180:	28 0f       	add	r18, r24
    c182:	8b 81       	ldd	r24, Y+3	; 0x03
    c184:	9c 81       	ldd	r25, Y+4	; 0x04
    c186:	fc 01       	movw	r30, r24
    c188:	25 83       	std	Z+5, r18	; 0x05
            linCurrentState->cntByte = 0U;
    c18a:	8b 81       	ldd	r24, Y+3	; 0x03
    c18c:	9c 81       	ldd	r25, Y+4	; 0x04
    c18e:	fc 01       	movw	r30, r24
    c190:	14 82       	std	Z+4, r1	; 0x04
            linCurrentState->currentNodeState = LIN_NODE_STATE_SEND_DATA;
    c192:	8b 81       	ldd	r24, Y+3	; 0x03
    c194:	9c 81       	ldd	r25, Y+4	; 0x04
    c196:	29 e0       	ldi	r18, 0x09	; 9
    c198:	fc 01       	movw	r30, r24
    c19a:	22 8b       	std	Z+18, r18	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    c19c:	8b 81       	ldd	r24, Y+3	; 0x03
    c19e:	9c 81       	ldd	r25, Y+4	; 0x04
    c1a0:	fc 01       	movw	r30, r24
    c1a2:	11 8a       	std	Z+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    c1a4:	8b 81       	ldd	r24, Y+3	; 0x03
    c1a6:	9c 81       	ldd	r25, Y+4	; 0x04
    c1a8:	21 e0       	ldi	r18, 0x01	; 1
    c1aa:	fc 01       	movw	r30, r24
    c1ac:	22 87       	std	Z+10, r18	; 0x0a
            linCurrentState->isTxBusy = true;
    c1ae:	8b 81       	ldd	r24, Y+3	; 0x03
    c1b0:	9c 81       	ldd	r25, Y+4	; 0x04
    c1b2:	21 e0       	ldi	r18, 0x01	; 1
    c1b4:	fc 01       	movw	r30, r24
    c1b6:	20 87       	std	Z+8, r18	; 0x08

            /* Set Break char detect length as 10 bits minimum */
            //LPUART_SetBreakCharDetectLength(base, LPUART_BREAK_CHAR_10_BIT_MINIMUM);  

            /* Start sending data */
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
    c1b8:	8d 81       	ldd	r24, Y+5	; 0x05
    c1ba:	9e 81       	ldd	r25, Y+6	; 0x06
    c1bc:	fc 01       	movw	r30, r24
    c1be:	22 81       	ldd	r18, Z+2	; 0x02
    c1c0:	33 81       	ldd	r19, Z+3	; 0x03
    c1c2:	8b 81       	ldd	r24, Y+3	; 0x03
    c1c4:	9c 81       	ldd	r25, Y+4	; 0x04
    c1c6:	fc 01       	movw	r30, r24
    c1c8:	80 81       	ld	r24, Z
    c1ca:	91 81       	ldd	r25, Z+1	; 0x01
    c1cc:	f9 01       	movw	r30, r18
    c1ce:	09 95       	icall
        }
    }

    return retVal;
    c1d0:	89 81       	ldd	r24, Y+1	; 0x01
    c1d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    c1d4:	2e 96       	adiw	r28, 0x0e	; 14
    c1d6:	cd bf       	out	0x3d, r28	; 61
    c1d8:	de bf       	out	0x3e, r29	; 62
    c1da:	df 91       	pop	r29
    c1dc:	cf 91       	pop	r28
    c1de:	0f 91       	pop	r16
    c1e0:	08 95       	ret

0000c1e2 <LIN_DRV_ProcessSendFrameData>:
 *
 * Implements    : LIN_LPUART_DRV_ProcessSendFrameData_Activity
 *END**************************************************************************/
static void LIN_DRV_ProcessSendFrameData(uint32_t instance,
                                                uint8_t tmpByte)
{
    c1e2:	cf 93       	push	r28
    c1e4:	df 93       	push	r29
    c1e6:	cd b7       	in	r28, 0x3d	; 61
    c1e8:	de b7       	in	r29, 0x3e	; 62
    c1ea:	2d 97       	sbiw	r28, 0x0d	; 13
    c1ec:	cd bf       	out	0x3d, r28	; 61
    c1ee:	de bf       	out	0x3e, r29	; 62
    c1f0:	69 87       	std	Y+9, r22	; 0x09
    c1f2:	7a 87       	std	Y+10, r23	; 0x0a
    c1f4:	8b 87       	std	Y+11, r24	; 0x0b
    c1f6:	9c 87       	std	Y+12, r25	; 0x0c
    c1f8:	4d 87       	std	Y+13, r20	; 0x0d
    bool sendFlag = true;
    c1fa:	81 e0       	ldi	r24, 0x01	; 1
    c1fc:	89 83       	std	Y+1, r24	; 0x01
    uint8_t tmpSize;
    bool tmpCheckSumAndSize;
    bool tmpBuffAndSize;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    c1fe:	89 85       	ldd	r24, Y+9	; 0x09
    c200:	9a 85       	ldd	r25, Y+10	; 0x0a
    c202:	88 0f       	add	r24, r24
    c204:	99 1f       	adc	r25, r25
    c206:	81 5d       	subi	r24, 0xD1	; 209
    c208:	99 4b       	sbci	r25, 0xB9	; 185
    c20a:	fc 01       	movw	r30, r24
    c20c:	80 81       	ld	r24, Z
    c20e:	91 81       	ldd	r25, Z+1	; 0x01
    c210:	8a 83       	std	Y+2, r24	; 0x02
    c212:	9b 83       	std	Y+3, r25	; 0x03

    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    c214:	89 85       	ldd	r24, Y+9	; 0x09
    c216:	9a 85       	ldd	r25, Y+10	; 0x0a
    c218:	88 0f       	add	r24, r24
    c21a:	99 1f       	adc	r25, r25
    c21c:	8d 5c       	subi	r24, 0xCD	; 205
    c21e:	99 4b       	sbci	r25, 0xB9	; 185
    c220:	fc 01       	movw	r30, r24
    c222:	80 81       	ld	r24, Z
    c224:	91 81       	ldd	r25, Z+1	; 0x01
    c226:	8c 83       	std	Y+4, r24	; 0x04
    c228:	9d 83       	std	Y+5, r25	; 0x05

    //     sendFlag = false;
    // }
    // else
    // {
        tmpSize = (uint8_t)(linCurrentState->txSize - linCurrentState->cntByte);
    c22a:	8a 81       	ldd	r24, Y+2	; 0x02
    c22c:	9b 81       	ldd	r25, Y+3	; 0x03
    c22e:	fc 01       	movw	r30, r24
    c230:	25 81       	ldd	r18, Z+5	; 0x05
    c232:	8a 81       	ldd	r24, Y+2	; 0x02
    c234:	9b 81       	ldd	r25, Y+3	; 0x03
    c236:	fc 01       	movw	r30, r24
    c238:	84 81       	ldd	r24, Z+4	; 0x04
    c23a:	f2 2f       	mov	r31, r18
    c23c:	f8 1b       	sub	r31, r24
    c23e:	8f 2f       	mov	r24, r31
    c240:	8e 83       	std	Y+6, r24	; 0x06
        tmpCheckSumAndSize = (tmpSize == 1U) && (linCurrentState->checkSum != tmpByte);
    c242:	8e 81       	ldd	r24, Y+6	; 0x06
    c244:	81 30       	cpi	r24, 0x01	; 1
    c246:	51 f4       	brne	.+20     	; 0xc25c <LIN_DRV_ProcessSendFrameData+0x7a>
    c248:	8a 81       	ldd	r24, Y+2	; 0x02
    c24a:	9b 81       	ldd	r25, Y+3	; 0x03
    c24c:	fc 01       	movw	r30, r24
    c24e:	97 81       	ldd	r25, Z+7	; 0x07
    c250:	8d 85       	ldd	r24, Y+13	; 0x0d
    c252:	98 17       	cp	r25, r24
    c254:	19 f0       	breq	.+6      	; 0xc25c <LIN_DRV_ProcessSendFrameData+0x7a>
    c256:	81 e0       	ldi	r24, 0x01	; 1
    c258:	90 e0       	ldi	r25, 0x00	; 0
    c25a:	02 c0       	rjmp	.+4      	; 0xc260 <LIN_DRV_ProcessSendFrameData+0x7e>
    c25c:	80 e0       	ldi	r24, 0x00	; 0
    c25e:	90 e0       	ldi	r25, 0x00	; 0
    c260:	8f 83       	std	Y+7, r24	; 0x07
    c262:	8f 81       	ldd	r24, Y+7	; 0x07
    c264:	81 70       	andi	r24, 0x01	; 1
    c266:	8f 83       	std	Y+7, r24	; 0x07
        tmpBuffAndSize = (*linCurrentState->txBuff != tmpByte) && (tmpSize != 1U);
    c268:	8a 81       	ldd	r24, Y+2	; 0x02
    c26a:	9b 81       	ldd	r25, Y+3	; 0x03
    c26c:	fc 01       	movw	r30, r24
    c26e:	80 81       	ld	r24, Z
    c270:	91 81       	ldd	r25, Z+1	; 0x01
    c272:	fc 01       	movw	r30, r24
    c274:	90 81       	ld	r25, Z
    c276:	8d 85       	ldd	r24, Y+13	; 0x0d
    c278:	98 17       	cp	r25, r24
    c27a:	31 f0       	breq	.+12     	; 0xc288 <LIN_DRV_ProcessSendFrameData+0xa6>
    c27c:	8e 81       	ldd	r24, Y+6	; 0x06
    c27e:	81 30       	cpi	r24, 0x01	; 1
    c280:	19 f0       	breq	.+6      	; 0xc288 <LIN_DRV_ProcessSendFrameData+0xa6>
    c282:	81 e0       	ldi	r24, 0x01	; 1
    c284:	90 e0       	ldi	r25, 0x00	; 0
    c286:	02 c0       	rjmp	.+4      	; 0xc28c <LIN_DRV_ProcessSendFrameData+0xaa>
    c288:	80 e0       	ldi	r24, 0x00	; 0
    c28a:	90 e0       	ldi	r25, 0x00	; 0
    c28c:	88 87       	std	Y+8, r24	; 0x08
    c28e:	88 85       	ldd	r24, Y+8	; 0x08
    c290:	81 70       	andi	r24, 0x01	; 1
    c292:	88 87       	std	Y+8, r24	; 0x08
        if (tmpBuffAndSize || tmpCheckSumAndSize)
    c294:	88 85       	ldd	r24, Y+8	; 0x08
    c296:	88 23       	and	r24, r24
    c298:	19 f4       	brne	.+6      	; 0xc2a0 <LIN_DRV_ProcessSendFrameData+0xbe>
    c29a:	8f 81       	ldd	r24, Y+7	; 0x07
    c29c:	88 23       	and	r24, r24
    c29e:	89 f1       	breq	.+98     	; 0xc302 <LIN_DRV_ProcessSendFrameData+0x120>
        {
            linCurrentState->currentEventId = LIN_READBACK_ERROR;
    c2a0:	8a 81       	ldd	r24, Y+2	; 0x02
    c2a2:	9b 81       	ldd	r25, Y+3	; 0x03
    c2a4:	29 e0       	ldi	r18, 0x09	; 9
    c2a6:	fc 01       	movw	r30, r24
    c2a8:	21 8b       	std	Z+17, r18	; 0x11

            /* callback function to handle Readback error */
            if (linCurrentState->Callback != NULL)
    c2aa:	8a 81       	ldd	r24, Y+2	; 0x02
    c2ac:	9b 81       	ldd	r25, Y+3	; 0x03
    c2ae:	fc 01       	movw	r30, r24
    c2b0:	85 85       	ldd	r24, Z+13	; 0x0d
    c2b2:	96 85       	ldd	r25, Z+14	; 0x0e
    c2b4:	89 2b       	or	r24, r25
    c2b6:	79 f0       	breq	.+30     	; 0xc2d6 <LIN_DRV_ProcessSendFrameData+0xf4>
            {
                linCurrentState->Callback(instance, linCurrentState);
    c2b8:	8a 81       	ldd	r24, Y+2	; 0x02
    c2ba:	9b 81       	ldd	r25, Y+3	; 0x03
    c2bc:	fc 01       	movw	r30, r24
    c2be:	25 85       	ldd	r18, Z+13	; 0x0d
    c2c0:	36 85       	ldd	r19, Z+14	; 0x0e
    c2c2:	4a 81       	ldd	r20, Y+2	; 0x02
    c2c4:	5b 81       	ldd	r21, Y+3	; 0x03
    c2c6:	89 85       	ldd	r24, Y+9	; 0x09
    c2c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    c2ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    c2cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    c2ce:	bc 01       	movw	r22, r24
    c2d0:	cd 01       	movw	r24, r26
    c2d2:	f9 01       	movw	r30, r18
    c2d4:	09 95       	icall
            }

            /* Check if the transmission is non-blocking */
            if (linCurrentState->isTxBlocking == false)
    c2d6:	8a 81       	ldd	r24, Y+2	; 0x02
    c2d8:	9b 81       	ldd	r25, Y+3	; 0x03
    c2da:	fc 01       	movw	r30, r24
    c2dc:	93 85       	ldd	r25, Z+11	; 0x0b
    c2de:	81 e0       	ldi	r24, 0x01	; 1
    c2e0:	89 27       	eor	r24, r25
    c2e2:	88 23       	and	r24, r24
    c2e4:	61 f0       	breq	.+24     	; 0xc2fe <LIN_DRV_ProcessSendFrameData+0x11c>
            {
                /* Clear Tx busy flag */
                linCurrentState->isTxBusy = false;
    c2e6:	8a 81       	ldd	r24, Y+2	; 0x02
    c2e8:	9b 81       	ldd	r25, Y+3	; 0x03
    c2ea:	fc 01       	movw	r30, r24
    c2ec:	10 86       	std	Z+8, r1	; 0x08

                /* Change node's current state to IDLE */
                (void)LIN_DRV_GotoIdleState(instance);
    c2ee:	89 85       	ldd	r24, Y+9	; 0x09
    c2f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    c2f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    c2f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    c2f6:	bc 01       	movw	r22, r24
    c2f8:	cd 01       	movw	r24, r26
    c2fa:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>
            }

            sendFlag = false;
    c2fe:	19 82       	std	Y+1, r1	; 0x01
    c300:	17 c0       	rjmp	.+46     	; 0xc330 <LIN_DRV_ProcessSendFrameData+0x14e>
        }
        else
        {
            linCurrentState->txBuff++;
    c302:	8a 81       	ldd	r24, Y+2	; 0x02
    c304:	9b 81       	ldd	r25, Y+3	; 0x03
    c306:	fc 01       	movw	r30, r24
    c308:	80 81       	ld	r24, Z
    c30a:	91 81       	ldd	r25, Z+1	; 0x01
    c30c:	9c 01       	movw	r18, r24
    c30e:	2f 5f       	subi	r18, 0xFF	; 255
    c310:	3f 4f       	sbci	r19, 0xFF	; 255
    c312:	8a 81       	ldd	r24, Y+2	; 0x02
    c314:	9b 81       	ldd	r25, Y+3	; 0x03
    c316:	fc 01       	movw	r30, r24
    c318:	20 83       	st	Z, r18
    c31a:	31 83       	std	Z+1, r19	; 0x01
            linCurrentState->cntByte++;
    c31c:	8a 81       	ldd	r24, Y+2	; 0x02
    c31e:	9b 81       	ldd	r25, Y+3	; 0x03
    c320:	fc 01       	movw	r30, r24
    c322:	84 81       	ldd	r24, Z+4	; 0x04
    c324:	21 e0       	ldi	r18, 0x01	; 1
    c326:	28 0f       	add	r18, r24
    c328:	8a 81       	ldd	r24, Y+2	; 0x02
    c32a:	9b 81       	ldd	r25, Y+3	; 0x03
    c32c:	fc 01       	movw	r30, r24
    c32e:	24 83       	std	Z+4, r18	; 0x04
        }
    // }

    if (sendFlag)
    c330:	89 81       	ldd	r24, Y+1	; 0x01
    c332:	88 23       	and	r24, r24
    c334:	09 f4       	brne	.+2      	; 0xc338 <LIN_DRV_ProcessSendFrameData+0x156>
    c336:	6f c0       	rjmp	.+222    	; 0xc416 <LIN_DRV_ProcessSendFrameData+0x234>
    {
        if (linCurrentState->cntByte < linCurrentState->txSize)
    c338:	8a 81       	ldd	r24, Y+2	; 0x02
    c33a:	9b 81       	ldd	r25, Y+3	; 0x03
    c33c:	fc 01       	movw	r30, r24
    c33e:	24 81       	ldd	r18, Z+4	; 0x04
    c340:	8a 81       	ldd	r24, Y+2	; 0x02
    c342:	9b 81       	ldd	r25, Y+3	; 0x03
    c344:	fc 01       	movw	r30, r24
    c346:	85 81       	ldd	r24, Z+5	; 0x05
    c348:	28 17       	cp	r18, r24
    c34a:	50 f5       	brcc	.+84     	; 0xc3a0 <LIN_DRV_ProcessSendFrameData+0x1be>
        {
            /* Send checksum byte */
            if ((linCurrentState->txSize - linCurrentState->cntByte) == 1U)
    c34c:	8a 81       	ldd	r24, Y+2	; 0x02
    c34e:	9b 81       	ldd	r25, Y+3	; 0x03
    c350:	fc 01       	movw	r30, r24
    c352:	85 81       	ldd	r24, Z+5	; 0x05
    c354:	28 2f       	mov	r18, r24
    c356:	30 e0       	ldi	r19, 0x00	; 0
    c358:	8a 81       	ldd	r24, Y+2	; 0x02
    c35a:	9b 81       	ldd	r25, Y+3	; 0x03
    c35c:	fc 01       	movw	r30, r24
    c35e:	84 81       	ldd	r24, Z+4	; 0x04
    c360:	88 2f       	mov	r24, r24
    c362:	90 e0       	ldi	r25, 0x00	; 0
    c364:	a9 01       	movw	r20, r18
    c366:	48 1b       	sub	r20, r24
    c368:	59 0b       	sbc	r21, r25
    c36a:	ca 01       	movw	r24, r20
    c36c:	01 97       	sbiw	r24, 0x01	; 1
    c36e:	59 f4       	brne	.+22     	; 0xc386 <LIN_DRV_ProcessSendFrameData+0x1a4>
            {
                linFuncCallback->SendByte(&linCurrentState->checkSum);
    c370:	8c 81       	ldd	r24, Y+4	; 0x04
    c372:	9d 81       	ldd	r25, Y+5	; 0x05
    c374:	fc 01       	movw	r30, r24
    c376:	22 81       	ldd	r18, Z+2	; 0x02
    c378:	33 81       	ldd	r19, Z+3	; 0x03
    c37a:	8a 81       	ldd	r24, Y+2	; 0x02
    c37c:	9b 81       	ldd	r25, Y+3	; 0x03
    c37e:	07 96       	adiw	r24, 0x07	; 7
    c380:	f9 01       	movw	r30, r18
    c382:	09 95       	icall
                //(void)OSIF_SemaPost(&linCurrentState->txCompleted);
            }
            ep40_lin_signal_update_while_task();
        }
    }
}
    c384:	48 c0       	rjmp	.+144    	; 0xc416 <LIN_DRV_ProcessSendFrameData+0x234>
                //LPUART_Putchar(base, linCurrentState->checkSum);
            }
            /* Send data bytes */
            else
            {
                linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
    c386:	8c 81       	ldd	r24, Y+4	; 0x04
    c388:	9d 81       	ldd	r25, Y+5	; 0x05
    c38a:	fc 01       	movw	r30, r24
    c38c:	22 81       	ldd	r18, Z+2	; 0x02
    c38e:	33 81       	ldd	r19, Z+3	; 0x03
    c390:	8a 81       	ldd	r24, Y+2	; 0x02
    c392:	9b 81       	ldd	r25, Y+3	; 0x03
    c394:	fc 01       	movw	r30, r24
    c396:	80 81       	ld	r24, Z
    c398:	91 81       	ldd	r25, Z+1	; 0x01
    c39a:	f9 01       	movw	r30, r18
    c39c:	09 95       	icall
                //(void)OSIF_SemaPost(&linCurrentState->txCompleted);
            }
            ep40_lin_signal_update_while_task();
        }
    }
}
    c39e:	3b c0       	rjmp	.+118    	; 0xc416 <LIN_DRV_ProcessSendFrameData+0x234>
                //LPUART_Putchar(base, *linCurrentState->txBuff);
            }
        }
        else //发送完成
        {
            linCurrentState->currentEventId = LIN_TX_COMPLETED;
    c3a0:	8a 81       	ldd	r24, Y+2	; 0x02
    c3a2:	9b 81       	ldd	r25, Y+3	; 0x03
    c3a4:	2b e0       	ldi	r18, 0x0B	; 11
    c3a6:	fc 01       	movw	r30, r24
    c3a8:	21 8b       	std	Z+17, r18	; 0x11
            linCurrentState->currentNodeState = LIN_NODE_STATE_SEND_DATA_COMPLETED;
    c3aa:	8a 81       	ldd	r24, Y+2	; 0x02
    c3ac:	9b 81       	ldd	r25, Y+3	; 0x03
    c3ae:	2a e0       	ldi	r18, 0x0A	; 10
    c3b0:	fc 01       	movw	r30, r24
    c3b2:	22 8b       	std	Z+18, r18	; 0x12

            //LPUART_SetIntMode(base, LPUART_INT_RX_DATA_REG_FULL, false);
            /* callback function to handle event TX COMPLETED */
            if (linCurrentState->Callback != NULL)
    c3b4:	8a 81       	ldd	r24, Y+2	; 0x02
    c3b6:	9b 81       	ldd	r25, Y+3	; 0x03
    c3b8:	fc 01       	movw	r30, r24
    c3ba:	85 85       	ldd	r24, Z+13	; 0x0d
    c3bc:	96 85       	ldd	r25, Z+14	; 0x0e
    c3be:	89 2b       	or	r24, r25
    c3c0:	79 f0       	breq	.+30     	; 0xc3e0 <LIN_DRV_ProcessSendFrameData+0x1fe>
            {
                linCurrentState->Callback(instance, linCurrentState);
    c3c2:	8a 81       	ldd	r24, Y+2	; 0x02
    c3c4:	9b 81       	ldd	r25, Y+3	; 0x03
    c3c6:	fc 01       	movw	r30, r24
    c3c8:	25 85       	ldd	r18, Z+13	; 0x0d
    c3ca:	36 85       	ldd	r19, Z+14	; 0x0e
    c3cc:	4a 81       	ldd	r20, Y+2	; 0x02
    c3ce:	5b 81       	ldd	r21, Y+3	; 0x03
    c3d0:	89 85       	ldd	r24, Y+9	; 0x09
    c3d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    c3d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    c3d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    c3d8:	bc 01       	movw	r22, r24
    c3da:	cd 01       	movw	r24, r26
    c3dc:	f9 01       	movw	r30, r18
    c3de:	09 95       	icall
            }

            /* Check if the transmission is non-blocking */
            if (linCurrentState->isTxBlocking == false)
    c3e0:	8a 81       	ldd	r24, Y+2	; 0x02
    c3e2:	9b 81       	ldd	r25, Y+3	; 0x03
    c3e4:	fc 01       	movw	r30, r24
    c3e6:	93 85       	ldd	r25, Z+11	; 0x0b
    c3e8:	81 e0       	ldi	r24, 0x01	; 1
    c3ea:	89 27       	eor	r24, r25
    c3ec:	88 23       	and	r24, r24
    c3ee:	89 f0       	breq	.+34     	; 0xc412 <LIN_DRV_ProcessSendFrameData+0x230>
            {
                /* Clear Tx busy flag */
                linCurrentState->isTxBusy = false;
    c3f0:	8a 81       	ldd	r24, Y+2	; 0x02
    c3f2:	9b 81       	ldd	r25, Y+3	; 0x03
    c3f4:	fc 01       	movw	r30, r24
    c3f6:	10 86       	std	Z+8, r1	; 0x08

                /* Change node's current state to IDLE 更改节点状态为空闲状态*/
                linCurrentState->currentEventId = LIN_NO_EVENT;
    c3f8:	8a 81       	ldd	r24, Y+2	; 0x02
    c3fa:	9b 81       	ldd	r25, Y+3	; 0x03
    c3fc:	fc 01       	movw	r30, r24
    c3fe:	11 8a       	std	Z+17, r1	; 0x11
                linCurrentState->currentNodeState = LIN_NODE_STATE_IDLE;
    c400:	8a 81       	ldd	r24, Y+2	; 0x02
    c402:	9b 81       	ldd	r25, Y+3	; 0x03
    c404:	22 e0       	ldi	r18, 0x02	; 2
    c406:	fc 01       	movw	r30, r24
    c408:	22 8b       	std	Z+18, r18	; 0x12
                linCurrentState->isBusBusy = false;
    c40a:	8a 81       	ldd	r24, Y+2	; 0x02
    c40c:	9b 81       	ldd	r25, Y+3	; 0x03
    c40e:	fc 01       	movw	r30, r24
    c410:	12 86       	std	Z+10, r1	; 0x0a
            {
                //阻塞模式下处理
                /* Post Semaphore to signal Tx Completed*/
                //(void)OSIF_SemaPost(&linCurrentState->txCompleted);
            }
            ep40_lin_signal_update_while_task();
    c412:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <ep40_lin_signal_update_while_task>
        }
    }
}
    c416:	00 00       	nop
    c418:	2d 96       	adiw	r28, 0x0d	; 13
    c41a:	cd bf       	out	0x3d, r28	; 61
    c41c:	de bf       	out	0x3e, r29	; 62
    c41e:	df 91       	pop	r29
    c420:	cf 91       	pop	r28
    c422:	08 95       	ret

0000c424 <LIN_DRV_ReceiveFrameData>:
 * isBusBusy is false, if not it will return STATUS_BUSY.
 *
 * Implements    : LIN_LPUART_DRV_RecvFrmData_Activity
 *END**************************************************************************/
status_t LIN_DRV_ReceiveFrameData(uint32_t instance, uint8_t * rxBuff, uint8_t rxSize)
{
    c424:	cf 93       	push	r28
    c426:	df 93       	push	r29
    c428:	cd b7       	in	r28, 0x3d	; 61
    c42a:	de b7       	in	r29, 0x3e	; 62
    c42c:	2c 97       	sbiw	r28, 0x0c	; 12
    c42e:	cd bf       	out	0x3d, r28	; 61
    c430:	de bf       	out	0x3e, r29	; 62
    c432:	6e 83       	std	Y+6, r22	; 0x06
    c434:	7f 83       	std	Y+7, r23	; 0x07
    c436:	88 87       	std	Y+8, r24	; 0x08
    c438:	99 87       	std	Y+9, r25	; 0x09
    c43a:	4a 87       	std	Y+10, r20	; 0x0a
    c43c:	5b 87       	std	Y+11, r21	; 0x0b
    c43e:	2c 87       	std	Y+12, r18	; 0x0c
    /* Assert parameters. */
    DEV_ASSERT(rxBuff != NULL);
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    c440:	19 82       	std	Y+1, r1	; 0x01
    c442:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    c444:	8e 81       	ldd	r24, Y+6	; 0x06
    c446:	9f 81       	ldd	r25, Y+7	; 0x07
    c448:	88 0f       	add	r24, r24
    c44a:	99 1f       	adc	r25, r25
    c44c:	81 5d       	subi	r24, 0xD1	; 209
    c44e:	99 4b       	sbci	r25, 0xB9	; 185
    c450:	fc 01       	movw	r30, r24
    c452:	80 81       	ld	r24, Z
    c454:	91 81       	ldd	r25, Z+1	; 0x01
    c456:	8b 83       	std	Y+3, r24	; 0x03
    c458:	9c 83       	std	Y+4, r25	; 0x04

    /* Check whether current mode is sleep mode */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    c45a:	8b 81       	ldd	r24, Y+3	; 0x03
    c45c:	9c 81       	ldd	r25, Y+4	; 0x04
    c45e:	fc 01       	movw	r30, r24
    c460:	92 89       	ldd	r25, Z+18	; 0x12
    c462:	81 e0       	ldi	r24, 0x01	; 1
    c464:	91 30       	cpi	r25, 0x01	; 1
    c466:	09 f0       	breq	.+2      	; 0xc46a <LIN_DRV_ReceiveFrameData+0x46>
    c468:	80 e0       	ldi	r24, 0x00	; 0
    c46a:	8d 83       	std	Y+5, r24	; 0x05

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    c46c:	8c 85       	ldd	r24, Y+12	; 0x0c
    c46e:	89 30       	cpi	r24, 0x09	; 9
    c470:	30 f4       	brcc	.+12     	; 0xc47e <LIN_DRV_ReceiveFrameData+0x5a>
    c472:	8c 85       	ldd	r24, Y+12	; 0x0c
    c474:	88 23       	and	r24, r24
    c476:	19 f0       	breq	.+6      	; 0xc47e <LIN_DRV_ReceiveFrameData+0x5a>
    c478:	8d 81       	ldd	r24, Y+5	; 0x05
    c47a:	88 23       	and	r24, r24
    c47c:	29 f0       	breq	.+10     	; 0xc488 <LIN_DRV_ReceiveFrameData+0x64>
    {
        retVal = STATUS_ERROR;
    c47e:	81 e0       	ldi	r24, 0x01	; 1
    c480:	90 e0       	ldi	r25, 0x00	; 0
    c482:	89 83       	std	Y+1, r24	; 0x01
    c484:	9a 83       	std	Y+2, r25	; 0x02
    c486:	34 c0       	rjmp	.+104    	; 0xc4f0 <LIN_DRV_ReceiveFrameData+0xcc>
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    c488:	8b 81       	ldd	r24, Y+3	; 0x03
    c48a:	9c 81       	ldd	r25, Y+4	; 0x04
    c48c:	fc 01       	movw	r30, r24
    c48e:	82 85       	ldd	r24, Z+10	; 0x0a
    c490:	88 23       	and	r24, r24
    c492:	29 f0       	breq	.+10     	; 0xc49e <LIN_DRV_ReceiveFrameData+0x7a>
        {
            retVal = STATUS_BUSY;
    c494:	82 e0       	ldi	r24, 0x02	; 2
    c496:	90 e0       	ldi	r25, 0x00	; 0
    c498:	89 83       	std	Y+1, r24	; 0x01
    c49a:	9a 83       	std	Y+2, r25	; 0x02
    c49c:	29 c0       	rjmp	.+82     	; 0xc4f0 <LIN_DRV_ReceiveFrameData+0xcc>
        }
        else
        {
            /* Update the LIN state structure. */
            linCurrentState->rxBuff = rxBuff;
    c49e:	8b 81       	ldd	r24, Y+3	; 0x03
    c4a0:	9c 81       	ldd	r25, Y+4	; 0x04
    c4a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    c4a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    c4a6:	fc 01       	movw	r30, r24
    c4a8:	22 83       	std	Z+2, r18	; 0x02
    c4aa:	33 83       	std	Z+3, r19	; 0x03
            /* Add a place for checksum byte */
            linCurrentState->rxSize = (uint8_t)(rxSize + 1U);
    c4ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    c4ae:	21 e0       	ldi	r18, 0x01	; 1
    c4b0:	28 0f       	add	r18, r24
    c4b2:	8b 81       	ldd	r24, Y+3	; 0x03
    c4b4:	9c 81       	ldd	r25, Y+4	; 0x04
    c4b6:	fc 01       	movw	r30, r24
    c4b8:	26 83       	std	Z+6, r18	; 0x06
            linCurrentState->cntByte = 0U;
    c4ba:	8b 81       	ldd	r24, Y+3	; 0x03
    c4bc:	9c 81       	ldd	r25, Y+4	; 0x04
    c4be:	fc 01       	movw	r30, r24
    c4c0:	14 82       	std	Z+4, r1	; 0x04

            /* Start receiving data */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA;
    c4c2:	8b 81       	ldd	r24, Y+3	; 0x03
    c4c4:	9c 81       	ldd	r25, Y+4	; 0x04
    c4c6:	27 e0       	ldi	r18, 0x07	; 7
    c4c8:	fc 01       	movw	r30, r24
    c4ca:	22 8b       	std	Z+18, r18	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    c4cc:	8b 81       	ldd	r24, Y+3	; 0x03
    c4ce:	9c 81       	ldd	r25, Y+4	; 0x04
    c4d0:	fc 01       	movw	r30, r24
    c4d2:	11 8a       	std	Z+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    c4d4:	8b 81       	ldd	r24, Y+3	; 0x03
    c4d6:	9c 81       	ldd	r25, Y+4	; 0x04
    c4d8:	21 e0       	ldi	r18, 0x01	; 1
    c4da:	fc 01       	movw	r30, r24
    c4dc:	22 87       	std	Z+10, r18	; 0x0a
            linCurrentState->isRxBusy = true;
    c4de:	8b 81       	ldd	r24, Y+3	; 0x03
    c4e0:	9c 81       	ldd	r25, Y+4	; 0x04
    c4e2:	21 e0       	ldi	r18, 0x01	; 1
    c4e4:	fc 01       	movw	r30, r24
    c4e6:	21 87       	std	Z+9, r18	; 0x09
            linCurrentState->isRxBlocking = false;
    c4e8:	8b 81       	ldd	r24, Y+3	; 0x03
    c4ea:	9c 81       	ldd	r25, Y+4	; 0x04
    c4ec:	fc 01       	movw	r30, r24
    c4ee:	14 86       	std	Z+12, r1	; 0x0c
        }
    }

    return retVal;
    c4f0:	89 81       	ldd	r24, Y+1	; 0x01
    c4f2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    c4f4:	2c 96       	adiw	r28, 0x0c	; 12
    c4f6:	cd bf       	out	0x3d, r28	; 61
    c4f8:	de bf       	out	0x3e, r29	; 62
    c4fa:	df 91       	pop	r29
    c4fc:	cf 91       	pop	r28
    c4fe:	08 95       	ret

0000c500 <LIN_DRV_ProcessReceiveFrameData>:
 * Description   : Part of Interrupt handler for receiving.
 *
 * Implements    : LIN_DRV_ProcessReceiveFrameData_Activity
 *END**************************************************************************/
static void LIN_DRV_ProcessReceiveFrameData(uint32_t instance, uint8_t tmpByte)
{
    c500:	0f 93       	push	r16
    c502:	cf 93       	push	r28
    c504:	df 93       	push	r29
    c506:	cd b7       	in	r28, 0x3d	; 61
    c508:	de b7       	in	r29, 0x3e	; 62
    c50a:	27 97       	sbiw	r28, 0x07	; 7
    c50c:	cd bf       	out	0x3d, r28	; 61
    c50e:	de bf       	out	0x3e, r29	; 62
    c510:	6b 83       	std	Y+3, r22	; 0x03
    c512:	7c 83       	std	Y+4, r23	; 0x04
    c514:	8d 83       	std	Y+5, r24	; 0x05
    c516:	9e 83       	std	Y+6, r25	; 0x06
    c518:	4f 83       	std	Y+7, r20	; 0x07
    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    c51a:	8b 81       	ldd	r24, Y+3	; 0x03
    c51c:	9c 81       	ldd	r25, Y+4	; 0x04
    c51e:	88 0f       	add	r24, r24
    c520:	99 1f       	adc	r25, r25
    c522:	81 5d       	subi	r24, 0xD1	; 209
    c524:	99 4b       	sbci	r25, 0xB9	; 185
    c526:	fc 01       	movw	r30, r24
    c528:	80 81       	ld	r24, Z
    c52a:	91 81       	ldd	r25, Z+1	; 0x01
    c52c:	89 83       	std	Y+1, r24	; 0x01
    c52e:	9a 83       	std	Y+2, r25	; 0x02

    if (linCurrentState->rxSize > (linCurrentState->cntByte + 1U))
    c530:	89 81       	ldd	r24, Y+1	; 0x01
    c532:	9a 81       	ldd	r25, Y+2	; 0x02
    c534:	fc 01       	movw	r30, r24
    c536:	86 81       	ldd	r24, Z+6	; 0x06
    c538:	28 2f       	mov	r18, r24
    c53a:	30 e0       	ldi	r19, 0x00	; 0
    c53c:	89 81       	ldd	r24, Y+1	; 0x01
    c53e:	9a 81       	ldd	r25, Y+2	; 0x02
    c540:	fc 01       	movw	r30, r24
    c542:	84 81       	ldd	r24, Z+4	; 0x04
    c544:	88 2f       	mov	r24, r24
    c546:	90 e0       	ldi	r25, 0x00	; 0
    c548:	01 96       	adiw	r24, 0x01	; 1
    c54a:	82 17       	cp	r24, r18
    c54c:	93 07       	cpc	r25, r19
    c54e:	b0 f4       	brcc	.+44     	; 0xc57c <LIN_DRV_ProcessReceiveFrameData+0x7c>
    {
        *(linCurrentState->rxBuff) = tmpByte;
    c550:	89 81       	ldd	r24, Y+1	; 0x01
    c552:	9a 81       	ldd	r25, Y+2	; 0x02
    c554:	fc 01       	movw	r30, r24
    c556:	82 81       	ldd	r24, Z+2	; 0x02
    c558:	93 81       	ldd	r25, Z+3	; 0x03
    c55a:	2f 81       	ldd	r18, Y+7	; 0x07
    c55c:	fc 01       	movw	r30, r24
    c55e:	20 83       	st	Z, r18
        linCurrentState->rxBuff++;
    c560:	89 81       	ldd	r24, Y+1	; 0x01
    c562:	9a 81       	ldd	r25, Y+2	; 0x02
    c564:	fc 01       	movw	r30, r24
    c566:	82 81       	ldd	r24, Z+2	; 0x02
    c568:	93 81       	ldd	r25, Z+3	; 0x03
    c56a:	9c 01       	movw	r18, r24
    c56c:	2f 5f       	subi	r18, 0xFF	; 255
    c56e:	3f 4f       	sbci	r19, 0xFF	; 255
    c570:	89 81       	ldd	r24, Y+1	; 0x01
    c572:	9a 81       	ldd	r25, Y+2	; 0x02
    c574:	fc 01       	movw	r30, r24
    c576:	22 83       	std	Z+2, r18	; 0x02
    c578:	33 83       	std	Z+3, r19	; 0x03
    c57a:	17 c0       	rjmp	.+46     	; 0xc5aa <LIN_DRV_ProcessReceiveFrameData+0xaa>
    }
    else
    {
        if ((linCurrentState->rxSize - linCurrentState->cntByte) == 1U)
    c57c:	89 81       	ldd	r24, Y+1	; 0x01
    c57e:	9a 81       	ldd	r25, Y+2	; 0x02
    c580:	fc 01       	movw	r30, r24
    c582:	86 81       	ldd	r24, Z+6	; 0x06
    c584:	28 2f       	mov	r18, r24
    c586:	30 e0       	ldi	r19, 0x00	; 0
    c588:	89 81       	ldd	r24, Y+1	; 0x01
    c58a:	9a 81       	ldd	r25, Y+2	; 0x02
    c58c:	fc 01       	movw	r30, r24
    c58e:	84 81       	ldd	r24, Z+4	; 0x04
    c590:	88 2f       	mov	r24, r24
    c592:	90 e0       	ldi	r25, 0x00	; 0
    c594:	a9 01       	movw	r20, r18
    c596:	48 1b       	sub	r20, r24
    c598:	59 0b       	sbc	r21, r25
    c59a:	ca 01       	movw	r24, r20
    c59c:	01 97       	sbiw	r24, 0x01	; 1
    c59e:	29 f4       	brne	.+10     	; 0xc5aa <LIN_DRV_ProcessReceiveFrameData+0xaa>
        {
            linCurrentState->checkSum = tmpByte;
    c5a0:	89 81       	ldd	r24, Y+1	; 0x01
    c5a2:	9a 81       	ldd	r25, Y+2	; 0x02
    c5a4:	2f 81       	ldd	r18, Y+7	; 0x07
    c5a6:	fc 01       	movw	r30, r24
    c5a8:	27 83       	std	Z+7, r18	; 0x07
        }
    }

    linCurrentState->cntByte++;
    c5aa:	89 81       	ldd	r24, Y+1	; 0x01
    c5ac:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ae:	fc 01       	movw	r30, r24
    c5b0:	84 81       	ldd	r24, Z+4	; 0x04
    c5b2:	21 e0       	ldi	r18, 0x01	; 1
    c5b4:	28 0f       	add	r18, r24
    c5b6:	89 81       	ldd	r24, Y+1	; 0x01
    c5b8:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ba:	fc 01       	movw	r30, r24
    c5bc:	24 83       	std	Z+4, r18	; 0x04
    if (linCurrentState->cntByte == linCurrentState->rxSize)
    c5be:	89 81       	ldd	r24, Y+1	; 0x01
    c5c0:	9a 81       	ldd	r25, Y+2	; 0x02
    c5c2:	fc 01       	movw	r30, r24
    c5c4:	24 81       	ldd	r18, Z+4	; 0x04
    c5c6:	89 81       	ldd	r24, Y+1	; 0x01
    c5c8:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ca:	fc 01       	movw	r30, r24
    c5cc:	86 81       	ldd	r24, Z+6	; 0x06
    c5ce:	28 17       	cp	r18, r24
    c5d0:	09 f0       	breq	.+2      	; 0xc5d4 <LIN_DRV_ProcessReceiveFrameData+0xd4>
    c5d2:	9d c0       	rjmp	.+314    	; 0xc70e <LIN_DRV_ProcessReceiveFrameData+0x20e>
    {
        /* Restore rxBuffer pointer */
        linCurrentState->rxBuff -= linCurrentState->rxSize - 1U;
    c5d4:	89 81       	ldd	r24, Y+1	; 0x01
    c5d6:	9a 81       	ldd	r25, Y+2	; 0x02
    c5d8:	fc 01       	movw	r30, r24
    c5da:	86 81       	ldd	r24, Z+6	; 0x06
    c5dc:	88 2f       	mov	r24, r24
    c5de:	90 e0       	ldi	r25, 0x00	; 0
    c5e0:	01 97       	sbiw	r24, 0x01	; 1
    c5e2:	29 81       	ldd	r18, Y+1	; 0x01
    c5e4:	3a 81       	ldd	r19, Y+2	; 0x02
    c5e6:	f9 01       	movw	r30, r18
    c5e8:	22 81       	ldd	r18, Z+2	; 0x02
    c5ea:	33 81       	ldd	r19, Z+3	; 0x03
    c5ec:	91 95       	neg	r25
    c5ee:	81 95       	neg	r24
    c5f0:	91 09       	sbc	r25, r1
    c5f2:	28 0f       	add	r18, r24
    c5f4:	39 1f       	adc	r19, r25
    c5f6:	89 81       	ldd	r24, Y+1	; 0x01
    c5f8:	9a 81       	ldd	r25, Y+2	; 0x02
    c5fa:	fc 01       	movw	r30, r24
    c5fc:	22 83       	std	Z+2, r18	; 0x02
    c5fe:	33 83       	std	Z+3, r19	; 0x03
        if (LIN_COM_DRV_MakeChecksumByte(instance, linCurrentState->rxBuff, linCurrentState->rxSize - 1U, linCurrentState->currentPid) == linCurrentState->checkSum)
    c600:	89 81       	ldd	r24, Y+1	; 0x01
    c602:	9a 81       	ldd	r25, Y+2	; 0x02
    c604:	fc 01       	movw	r30, r24
    c606:	30 89       	ldd	r19, Z+16	; 0x10
    c608:	89 81       	ldd	r24, Y+1	; 0x01
    c60a:	9a 81       	ldd	r25, Y+2	; 0x02
    c60c:	fc 01       	movw	r30, r24
    c60e:	86 81       	ldd	r24, Z+6	; 0x06
    c610:	2f ef       	ldi	r18, 0xFF	; 255
    c612:	28 0f       	add	r18, r24
    c614:	89 81       	ldd	r24, Y+1	; 0x01
    c616:	9a 81       	ldd	r25, Y+2	; 0x02
    c618:	fc 01       	movw	r30, r24
    c61a:	42 81       	ldd	r20, Z+2	; 0x02
    c61c:	53 81       	ldd	r21, Z+3	; 0x03
    c61e:	8b 81       	ldd	r24, Y+3	; 0x03
    c620:	9c 81       	ldd	r25, Y+4	; 0x04
    c622:	ad 81       	ldd	r26, Y+5	; 0x05
    c624:	be 81       	ldd	r27, Y+6	; 0x06
    c626:	03 2f       	mov	r16, r19
    c628:	bc 01       	movw	r22, r24
    c62a:	cd 01       	movw	r24, r26
    c62c:	0e 94 fd 5f 	call	0xbffa	; 0xbffa <LIN_COM_DRV_MakeChecksumByte>
    c630:	28 2f       	mov	r18, r24
    c632:	89 81       	ldd	r24, Y+1	; 0x01
    c634:	9a 81       	ldd	r25, Y+2	; 0x02
    c636:	fc 01       	movw	r30, r24
    c638:	87 81       	ldd	r24, Z+7	; 0x07
    c63a:	28 17       	cp	r18, r24
    c63c:	09 f0       	breq	.+2      	; 0xc640 <LIN_DRV_ProcessReceiveFrameData+0x140>
    c63e:	40 c0       	rjmp	.+128    	; 0xc6c0 <LIN_DRV_ProcessReceiveFrameData+0x1c0>
        {
            linCurrentState->currentEventId = LIN_RX_COMPLETED;
    c640:	89 81       	ldd	r24, Y+1	; 0x01
    c642:	9a 81       	ldd	r25, Y+2	; 0x02
    c644:	2c e0       	ldi	r18, 0x0C	; 12
    c646:	fc 01       	movw	r30, r24
    c648:	21 8b       	std	Z+17, r18	; 0x11
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA_COMPLETED;
    c64a:	89 81       	ldd	r24, Y+1	; 0x01
    c64c:	9a 81       	ldd	r25, Y+2	; 0x02
    c64e:	28 e0       	ldi	r18, 0x08	; 8
    c650:	fc 01       	movw	r30, r24
    c652:	22 8b       	std	Z+18, r18	; 0x12

            /* callback function to handle RX COMPLETED */
            if (linCurrentState->Callback != NULL)
    c654:	89 81       	ldd	r24, Y+1	; 0x01
    c656:	9a 81       	ldd	r25, Y+2	; 0x02
    c658:	fc 01       	movw	r30, r24
    c65a:	85 85       	ldd	r24, Z+13	; 0x0d
    c65c:	96 85       	ldd	r25, Z+14	; 0x0e
    c65e:	89 2b       	or	r24, r25
    c660:	79 f0       	breq	.+30     	; 0xc680 <LIN_DRV_ProcessReceiveFrameData+0x180>
            {
                linCurrentState->Callback(instance, linCurrentState);
    c662:	89 81       	ldd	r24, Y+1	; 0x01
    c664:	9a 81       	ldd	r25, Y+2	; 0x02
    c666:	fc 01       	movw	r30, r24
    c668:	25 85       	ldd	r18, Z+13	; 0x0d
    c66a:	36 85       	ldd	r19, Z+14	; 0x0e
    c66c:	49 81       	ldd	r20, Y+1	; 0x01
    c66e:	5a 81       	ldd	r21, Y+2	; 0x02
    c670:	8b 81       	ldd	r24, Y+3	; 0x03
    c672:	9c 81       	ldd	r25, Y+4	; 0x04
    c674:	ad 81       	ldd	r26, Y+5	; 0x05
    c676:	be 81       	ldd	r27, Y+6	; 0x06
    c678:	bc 01       	movw	r22, r24
    c67a:	cd 01       	movw	r24, r26
    c67c:	f9 01       	movw	r30, r18
    c67e:	09 95       	icall
            }

            /* Check if the reception is non-blocking */
            if (linCurrentState->isRxBlocking == false)
    c680:	89 81       	ldd	r24, Y+1	; 0x01
    c682:	9a 81       	ldd	r25, Y+2	; 0x02
    c684:	fc 01       	movw	r30, r24
    c686:	94 85       	ldd	r25, Z+12	; 0x0c
    c688:	81 e0       	ldi	r24, 0x01	; 1
    c68a:	89 27       	eor	r24, r25
    c68c:	88 23       	and	r24, r24
    c68e:	09 f4       	brne	.+2      	; 0xc692 <LIN_DRV_ProcessReceiveFrameData+0x192>
    c690:	3e c0       	rjmp	.+124    	; 0xc70e <LIN_DRV_ProcessReceiveFrameData+0x20e>
            {
                /* Clear Bus busy flag */
                linCurrentState->isBusBusy = false;
    c692:	89 81       	ldd	r24, Y+1	; 0x01
    c694:	9a 81       	ldd	r25, Y+2	; 0x02
    c696:	fc 01       	movw	r30, r24
    c698:	12 86       	std	Z+10, r1	; 0x0a

                /* Clear Rx busy flag */
                linCurrentState->isRxBusy = false;
    c69a:	89 81       	ldd	r24, Y+1	; 0x01
    c69c:	9a 81       	ldd	r25, Y+2	; 0x02
    c69e:	fc 01       	movw	r30, r24
    c6a0:	11 86       	std	Z+9, r1	; 0x09

                /* In case of receiving a go to sleep request, after callback, node is in SLEEP MODE */
                /* In this case, node is in SLEEP MODE state */
                if (linCurrentState->currentNodeState != LIN_NODE_STATE_SLEEP_MODE)
    c6a2:	89 81       	ldd	r24, Y+1	; 0x01
    c6a4:	9a 81       	ldd	r25, Y+2	; 0x02
    c6a6:	fc 01       	movw	r30, r24
    c6a8:	82 89       	ldd	r24, Z+18	; 0x12
    c6aa:	81 30       	cpi	r24, 0x01	; 1
    c6ac:	81 f1       	breq	.+96     	; 0xc70e <LIN_DRV_ProcessReceiveFrameData+0x20e>
                {
                    (void)LIN_DRV_GotoIdleState(instance);
    c6ae:	8b 81       	ldd	r24, Y+3	; 0x03
    c6b0:	9c 81       	ldd	r25, Y+4	; 0x04
    c6b2:	ad 81       	ldd	r26, Y+5	; 0x05
    c6b4:	be 81       	ldd	r27, Y+6	; 0x06
    c6b6:	bc 01       	movw	r22, r24
    c6b8:	cd 01       	movw	r24, r26
    c6ba:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>

            /* Change node's current state to IDLE */
            (void)LIN_DRV_GotoIdleState(instance);
        }
    }
}
    c6be:	27 c0       	rjmp	.+78     	; 0xc70e <LIN_DRV_ProcessReceiveFrameData+0x20e>
                //(void)OSIF_SemaPost(&linCurrentState->rxCompleted);
            }
        }
        else
        {
            linCurrentState->currentEventId = LIN_CHECKSUM_ERROR;
    c6c0:	89 81       	ldd	r24, Y+1	; 0x01
    c6c2:	9a 81       	ldd	r25, Y+2	; 0x02
    c6c4:	2a e0       	ldi	r18, 0x0A	; 10
    c6c6:	fc 01       	movw	r30, r24
    c6c8:	21 8b       	std	Z+17, r18	; 0x11
            /* callback function to handle checksum error */
            if (linCurrentState->Callback != NULL)
    c6ca:	89 81       	ldd	r24, Y+1	; 0x01
    c6cc:	9a 81       	ldd	r25, Y+2	; 0x02
    c6ce:	fc 01       	movw	r30, r24
    c6d0:	85 85       	ldd	r24, Z+13	; 0x0d
    c6d2:	96 85       	ldd	r25, Z+14	; 0x0e
    c6d4:	89 2b       	or	r24, r25
    c6d6:	79 f0       	breq	.+30     	; 0xc6f6 <LIN_DRV_ProcessReceiveFrameData+0x1f6>
            {
                linCurrentState->Callback(instance, linCurrentState);
    c6d8:	89 81       	ldd	r24, Y+1	; 0x01
    c6da:	9a 81       	ldd	r25, Y+2	; 0x02
    c6dc:	fc 01       	movw	r30, r24
    c6de:	25 85       	ldd	r18, Z+13	; 0x0d
    c6e0:	36 85       	ldd	r19, Z+14	; 0x0e
    c6e2:	49 81       	ldd	r20, Y+1	; 0x01
    c6e4:	5a 81       	ldd	r21, Y+2	; 0x02
    c6e6:	8b 81       	ldd	r24, Y+3	; 0x03
    c6e8:	9c 81       	ldd	r25, Y+4	; 0x04
    c6ea:	ad 81       	ldd	r26, Y+5	; 0x05
    c6ec:	be 81       	ldd	r27, Y+6	; 0x06
    c6ee:	bc 01       	movw	r22, r24
    c6f0:	cd 01       	movw	r24, r26
    c6f2:	f9 01       	movw	r30, r18
    c6f4:	09 95       	icall
            }

            /* Clear Rx busy flag */
            linCurrentState->isRxBusy = false;
    c6f6:	89 81       	ldd	r24, Y+1	; 0x01
    c6f8:	9a 81       	ldd	r25, Y+2	; 0x02
    c6fa:	fc 01       	movw	r30, r24
    c6fc:	11 86       	std	Z+9, r1	; 0x09

            /* Change node's current state to IDLE */
            (void)LIN_DRV_GotoIdleState(instance);
    c6fe:	8b 81       	ldd	r24, Y+3	; 0x03
    c700:	9c 81       	ldd	r25, Y+4	; 0x04
    c702:	ad 81       	ldd	r26, Y+5	; 0x05
    c704:	be 81       	ldd	r27, Y+6	; 0x06
    c706:	bc 01       	movw	r22, r24
    c708:	cd 01       	movw	r24, r26
    c70a:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>
        }
    }
}
    c70e:	00 00       	nop
    c710:	27 96       	adiw	r28, 0x07	; 7
    c712:	cd bf       	out	0x3d, r28	; 61
    c714:	de bf       	out	0x3e, r29	; 62
    c716:	df 91       	pop	r29
    c718:	cf 91       	pop	r28
    c71a:	0f 91       	pop	r16
    c71c:	08 95       	ret

0000c71e <LIN_DRV_TimeoutService>:
 * Implements    : LIN_DRV_TimeoutService_Activity
 * 
 * 需要初始化一个定时器,每0.5ms需要回调一次该函数,计数没有实现,AVR单片机容易导致卡死
 *END**************************************************************************/
void LIN_DRV_TimeoutService(uint32_t instance)
{
    c71e:	cf 93       	push	r28
    c720:	df 93       	push	r29
    c722:	cd b7       	in	r28, 0x3d	; 61
    c724:	de b7       	in	r29, 0x3e	; 62
    c726:	27 97       	sbiw	r28, 0x07	; 7
    c728:	cd bf       	out	0x3d, r28	; 61
    c72a:	de bf       	out	0x3e, r29	; 62
    c72c:	6c 83       	std	Y+4, r22	; 0x04
    c72e:	7d 83       	std	Y+5, r23	; 0x05
    c730:	8e 83       	std	Y+6, r24	; 0x06
    c732:	9f 83       	std	Y+7, r25	; 0x07
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    c734:	8c 81       	ldd	r24, Y+4	; 0x04
    c736:	9d 81       	ldd	r25, Y+5	; 0x05
    c738:	88 0f       	add	r24, r24
    c73a:	99 1f       	adc	r25, r25
    c73c:	81 5d       	subi	r24, 0xD1	; 209
    c73e:	99 4b       	sbci	r25, 0xB9	; 185
    c740:	fc 01       	movw	r30, r24
    c742:	80 81       	ld	r24, Z
    c744:	91 81       	ldd	r25, Z+1	; 0x01
    c746:	89 83       	std	Y+1, r24	; 0x01
    c748:	9a 83       	std	Y+2, r25	; 0x02

    /* Get LIN node's current state */
    lin_node_state_t state = linCurrentState->currentNodeState;
    c74a:	89 81       	ldd	r24, Y+1	; 0x01
    c74c:	9a 81       	ldd	r25, Y+2	; 0x02
    c74e:	fc 01       	movw	r30, r24
    c750:	82 89       	ldd	r24, Z+18	; 0x12
    c752:	8b 83       	std	Y+3, r24	; 0x03

    switch (state)
    c754:	8b 81       	ldd	r24, Y+3	; 0x03
    c756:	88 2f       	mov	r24, r24
    c758:	90 e0       	ldi	r25, 0x00	; 0
    c75a:	87 30       	cpi	r24, 0x07	; 7
    c75c:	91 05       	cpc	r25, r1
    c75e:	09 f4       	brne	.+2      	; 0xc762 <LIN_DRV_TimeoutService+0x44>
    c760:	51 c0       	rjmp	.+162    	; 0xc804 <LIN_DRV_TimeoutService+0xe6>
    c762:	09 97       	sbiw	r24, 0x09	; 9
    c764:	09 f0       	breq	.+2      	; 0xc768 <LIN_DRV_TimeoutService+0x4a>
                linCurrentState->timeoutCounter--;
            }
            break;
        default:
            /* The node state is not SENDING nor RECEIVING data */
            break;
    c766:	9e c0       	rjmp	.+316    	; 0xc8a4 <LIN_DRV_TimeoutService+0x186>
    switch (state)
    {
        /* If the node is SENDING DATA */
        case LIN_NODE_STATE_SEND_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    c768:	89 81       	ldd	r24, Y+1	; 0x01
    c76a:	9a 81       	ldd	r25, Y+2	; 0x02
    c76c:	fc 01       	movw	r30, r24
    c76e:	83 89       	ldd	r24, Z+19	; 0x13
    c770:	94 89       	ldd	r25, Z+20	; 0x14
    c772:	a5 89       	ldd	r26, Z+21	; 0x15
    c774:	b6 89       	ldd	r27, Z+22	; 0x16
    c776:	89 2b       	or	r24, r25
    c778:	8a 2b       	or	r24, r26
    c77a:	8b 2b       	or	r24, r27
    c77c:	89 f5       	brne	.+98     	; 0xc7e0 <LIN_DRV_TimeoutService+0xc2>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    c77e:	89 81       	ldd	r24, Y+1	; 0x01
    c780:	9a 81       	ldd	r25, Y+2	; 0x02
    c782:	21 e0       	ldi	r18, 0x01	; 1
    c784:	fc 01       	movw	r30, r24
    c786:	27 8b       	std	Z+23, r18	; 0x17

                if (linCurrentState->isTxBlocking == false)
    c788:	89 81       	ldd	r24, Y+1	; 0x01
    c78a:	9a 81       	ldd	r25, Y+2	; 0x02
    c78c:	fc 01       	movw	r30, r24
    c78e:	93 85       	ldd	r25, Z+11	; 0x0b
    c790:	81 e0       	ldi	r24, 0x01	; 1
    c792:	89 27       	eor	r24, r25
    c794:	88 23       	and	r24, r24
    c796:	09 f4       	brne	.+2      	; 0xc79a <LIN_DRV_TimeoutService+0x7c>
    c798:	82 c0       	rjmp	.+260    	; 0xc89e <LIN_DRV_TimeoutService+0x180>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    c79a:	89 81       	ldd	r24, Y+1	; 0x01
    c79c:	9a 81       	ldd	r25, Y+2	; 0x02
    c79e:	fc 01       	movw	r30, r24
    c7a0:	85 85       	ldd	r24, Z+13	; 0x0d
    c7a2:	96 85       	ldd	r25, Z+14	; 0x0e
    c7a4:	89 2b       	or	r24, r25
    c7a6:	79 f0       	breq	.+30     	; 0xc7c6 <LIN_DRV_TimeoutService+0xa8>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    c7a8:	89 81       	ldd	r24, Y+1	; 0x01
    c7aa:	9a 81       	ldd	r25, Y+2	; 0x02
    c7ac:	fc 01       	movw	r30, r24
    c7ae:	25 85       	ldd	r18, Z+13	; 0x0d
    c7b0:	36 85       	ldd	r19, Z+14	; 0x0e
    c7b2:	49 81       	ldd	r20, Y+1	; 0x01
    c7b4:	5a 81       	ldd	r21, Y+2	; 0x02
    c7b6:	8c 81       	ldd	r24, Y+4	; 0x04
    c7b8:	9d 81       	ldd	r25, Y+5	; 0x05
    c7ba:	ae 81       	ldd	r26, Y+6	; 0x06
    c7bc:	bf 81       	ldd	r27, Y+7	; 0x07
    c7be:	bc 01       	movw	r22, r24
    c7c0:	cd 01       	movw	r24, r26
    c7c2:	f9 01       	movw	r30, r18
    c7c4:	09 95       	icall
                    }

                    /* Clear Tx busy flag */
                    linCurrentState->isTxBusy = false;
    c7c6:	89 81       	ldd	r24, Y+1	; 0x01
    c7c8:	9a 81       	ldd	r25, Y+2	; 0x02
    c7ca:	fc 01       	movw	r30, r24
    c7cc:	10 86       	std	Z+8, r1	; 0x08

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    c7ce:	8c 81       	ldd	r24, Y+4	; 0x04
    c7d0:	9d 81       	ldd	r25, Y+5	; 0x05
    c7d2:	ae 81       	ldd	r26, Y+6	; 0x06
    c7d4:	bf 81       	ldd	r27, Y+7	; 0x07
    c7d6:	bc 01       	movw	r22, r24
    c7d8:	cd 01       	movw	r24, r26
    c7da:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
            }

            break;
    c7de:	5f c0       	rjmp	.+190    	; 0xc89e <LIN_DRV_TimeoutService+0x180>
                    (void)LIN_DRV_GotoIdleState(instance);
                }
            }
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
    c7e0:	89 81       	ldd	r24, Y+1	; 0x01
    c7e2:	9a 81       	ldd	r25, Y+2	; 0x02
    c7e4:	fc 01       	movw	r30, r24
    c7e6:	83 89       	ldd	r24, Z+19	; 0x13
    c7e8:	94 89       	ldd	r25, Z+20	; 0x14
    c7ea:	a5 89       	ldd	r26, Z+21	; 0x15
    c7ec:	b6 89       	ldd	r27, Z+22	; 0x16
    c7ee:	01 97       	sbiw	r24, 0x01	; 1
    c7f0:	a1 09       	sbc	r26, r1
    c7f2:	b1 09       	sbc	r27, r1
    c7f4:	29 81       	ldd	r18, Y+1	; 0x01
    c7f6:	3a 81       	ldd	r19, Y+2	; 0x02
    c7f8:	f9 01       	movw	r30, r18
    c7fa:	83 8b       	std	Z+19, r24	; 0x13
    c7fc:	94 8b       	std	Z+20, r25	; 0x14
    c7fe:	a5 8b       	std	Z+21, r26	; 0x15
    c800:	b6 8b       	std	Z+22, r27	; 0x16
            }

            break;
    c802:	4d c0       	rjmp	.+154    	; 0xc89e <LIN_DRV_TimeoutService+0x180>
        /* If the node is RECEIVING DATA */
        case LIN_NODE_STATE_RECV_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    c804:	89 81       	ldd	r24, Y+1	; 0x01
    c806:	9a 81       	ldd	r25, Y+2	; 0x02
    c808:	fc 01       	movw	r30, r24
    c80a:	83 89       	ldd	r24, Z+19	; 0x13
    c80c:	94 89       	ldd	r25, Z+20	; 0x14
    c80e:	a5 89       	ldd	r26, Z+21	; 0x15
    c810:	b6 89       	ldd	r27, Z+22	; 0x16
    c812:	89 2b       	or	r24, r25
    c814:	8a 2b       	or	r24, r26
    c816:	8b 2b       	or	r24, r27
    c818:	81 f5       	brne	.+96     	; 0xc87a <LIN_DRV_TimeoutService+0x15c>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    c81a:	89 81       	ldd	r24, Y+1	; 0x01
    c81c:	9a 81       	ldd	r25, Y+2	; 0x02
    c81e:	21 e0       	ldi	r18, 0x01	; 1
    c820:	fc 01       	movw	r30, r24
    c822:	27 8b       	std	Z+23, r18	; 0x17

                /* Check if the reception is non-blocking */
                if (linCurrentState->isRxBlocking == false)
    c824:	89 81       	ldd	r24, Y+1	; 0x01
    c826:	9a 81       	ldd	r25, Y+2	; 0x02
    c828:	fc 01       	movw	r30, r24
    c82a:	94 85       	ldd	r25, Z+12	; 0x0c
    c82c:	81 e0       	ldi	r24, 0x01	; 1
    c82e:	89 27       	eor	r24, r25
    c830:	88 23       	and	r24, r24
    c832:	b9 f1       	breq	.+110    	; 0xc8a2 <LIN_DRV_TimeoutService+0x184>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    c834:	89 81       	ldd	r24, Y+1	; 0x01
    c836:	9a 81       	ldd	r25, Y+2	; 0x02
    c838:	fc 01       	movw	r30, r24
    c83a:	85 85       	ldd	r24, Z+13	; 0x0d
    c83c:	96 85       	ldd	r25, Z+14	; 0x0e
    c83e:	89 2b       	or	r24, r25
    c840:	79 f0       	breq	.+30     	; 0xc860 <LIN_DRV_TimeoutService+0x142>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    c842:	89 81       	ldd	r24, Y+1	; 0x01
    c844:	9a 81       	ldd	r25, Y+2	; 0x02
    c846:	fc 01       	movw	r30, r24
    c848:	25 85       	ldd	r18, Z+13	; 0x0d
    c84a:	36 85       	ldd	r19, Z+14	; 0x0e
    c84c:	49 81       	ldd	r20, Y+1	; 0x01
    c84e:	5a 81       	ldd	r21, Y+2	; 0x02
    c850:	8c 81       	ldd	r24, Y+4	; 0x04
    c852:	9d 81       	ldd	r25, Y+5	; 0x05
    c854:	ae 81       	ldd	r26, Y+6	; 0x06
    c856:	bf 81       	ldd	r27, Y+7	; 0x07
    c858:	bc 01       	movw	r22, r24
    c85a:	cd 01       	movw	r24, r26
    c85c:	f9 01       	movw	r30, r18
    c85e:	09 95       	icall
                    }

                    /* Clear Rx busy flag */
                    linCurrentState->isRxBusy = false;
    c860:	89 81       	ldd	r24, Y+1	; 0x01
    c862:	9a 81       	ldd	r25, Y+2	; 0x02
    c864:	fc 01       	movw	r30, r24
    c866:	11 86       	std	Z+9, r1	; 0x09

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    c868:	8c 81       	ldd	r24, Y+4	; 0x04
    c86a:	9d 81       	ldd	r25, Y+5	; 0x05
    c86c:	ae 81       	ldd	r26, Y+6	; 0x06
    c86e:	bf 81       	ldd	r27, Y+7	; 0x07
    c870:	bc 01       	movw	r22, r24
    c872:	cd 01       	movw	r24, r26
    c874:	0e 94 d9 5d 	call	0xbbb2	; 0xbbb2 <LIN_DRV_GotoIdleState>
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
            }
            break;
    c878:	14 c0       	rjmp	.+40     	; 0xc8a2 <LIN_DRV_TimeoutService+0x184>
                }
            }
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
    c87a:	89 81       	ldd	r24, Y+1	; 0x01
    c87c:	9a 81       	ldd	r25, Y+2	; 0x02
    c87e:	fc 01       	movw	r30, r24
    c880:	83 89       	ldd	r24, Z+19	; 0x13
    c882:	94 89       	ldd	r25, Z+20	; 0x14
    c884:	a5 89       	ldd	r26, Z+21	; 0x15
    c886:	b6 89       	ldd	r27, Z+22	; 0x16
    c888:	01 97       	sbiw	r24, 0x01	; 1
    c88a:	a1 09       	sbc	r26, r1
    c88c:	b1 09       	sbc	r27, r1
    c88e:	29 81       	ldd	r18, Y+1	; 0x01
    c890:	3a 81       	ldd	r19, Y+2	; 0x02
    c892:	f9 01       	movw	r30, r18
    c894:	83 8b       	std	Z+19, r24	; 0x13
    c896:	94 8b       	std	Z+20, r25	; 0x14
    c898:	a5 8b       	std	Z+21, r26	; 0x15
    c89a:	b6 8b       	std	Z+22, r27	; 0x16
            }
            break;
    c89c:	02 c0       	rjmp	.+4      	; 0xc8a2 <LIN_DRV_TimeoutService+0x184>
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
            }

            break;
    c89e:	00 00       	nop
    c8a0:	01 c0       	rjmp	.+2      	; 0xc8a4 <LIN_DRV_TimeoutService+0x186>
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
            }
            break;
    c8a2:	00 00       	nop
        default:
            /* The node state is not SENDING nor RECEIVING data */
            break;
    }
}
    c8a4:	00 00       	nop
    c8a6:	27 96       	adiw	r28, 0x07	; 7
    c8a8:	cd bf       	out	0x3d, r28	; 61
    c8aa:	de bf       	out	0x3e, r29	; 62
    c8ac:	df 91       	pop	r29
    c8ae:	cf 91       	pop	r28
    c8b0:	08 95       	ret

0000c8b2 <LIN_DRV_SetTimeoutCounter>:
 * LIN_DRV_TimeoutService
 *
 * Implements    : LIN_DRV_SetTimeoutCounter_Activity
 *END**************************************************************************/
void LIN_DRV_SetTimeoutCounter(uint32_t instance, uint32_t timeoutValue)
{
    c8b2:	cf 93       	push	r28
    c8b4:	df 93       	push	r29
    c8b6:	cd b7       	in	r28, 0x3d	; 61
    c8b8:	de b7       	in	r29, 0x3e	; 62
    c8ba:	2a 97       	sbiw	r28, 0x0a	; 10
    c8bc:	cd bf       	out	0x3d, r28	; 61
    c8be:	de bf       	out	0x3e, r29	; 62
    c8c0:	6b 83       	std	Y+3, r22	; 0x03
    c8c2:	7c 83       	std	Y+4, r23	; 0x04
    c8c4:	8d 83       	std	Y+5, r24	; 0x05
    c8c6:	9e 83       	std	Y+6, r25	; 0x06
    c8c8:	2f 83       	std	Y+7, r18	; 0x07
    c8ca:	38 87       	std	Y+8, r19	; 0x08
    c8cc:	49 87       	std	Y+9, r20	; 0x09
    c8ce:	5a 87       	std	Y+10, r21	; 0x0a
    /* Assert parameters. */
    //DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    c8d0:	8b 81       	ldd	r24, Y+3	; 0x03
    c8d2:	9c 81       	ldd	r25, Y+4	; 0x04
    c8d4:	88 0f       	add	r24, r24
    c8d6:	99 1f       	adc	r25, r25
    c8d8:	81 5d       	subi	r24, 0xD1	; 209
    c8da:	99 4b       	sbci	r25, 0xB9	; 185
    c8dc:	fc 01       	movw	r30, r24
    c8de:	80 81       	ld	r24, Z
    c8e0:	91 81       	ldd	r25, Z+1	; 0x01
    c8e2:	89 83       	std	Y+1, r24	; 0x01
    c8e4:	9a 83       	std	Y+2, r25	; 0x02

    /* Clear Timeout Counter Flag */
    linCurrentState->timeoutCounterFlag = false;
    c8e6:	89 81       	ldd	r24, Y+1	; 0x01
    c8e8:	9a 81       	ldd	r25, Y+2	; 0x02
    c8ea:	fc 01       	movw	r30, r24
    c8ec:	17 8a       	std	Z+23, r1	; 0x17

    /* Set new value for Timeout Counter */
    linCurrentState->timeoutCounter = timeoutValue;
    c8ee:	29 81       	ldd	r18, Y+1	; 0x01
    c8f0:	3a 81       	ldd	r19, Y+2	; 0x02
    c8f2:	8f 81       	ldd	r24, Y+7	; 0x07
    c8f4:	98 85       	ldd	r25, Y+8	; 0x08
    c8f6:	a9 85       	ldd	r26, Y+9	; 0x09
    c8f8:	ba 85       	ldd	r27, Y+10	; 0x0a
    c8fa:	f9 01       	movw	r30, r18
    c8fc:	83 8b       	std	Z+19, r24	; 0x13
    c8fe:	94 8b       	std	Z+20, r25	; 0x14
    c900:	a5 8b       	std	Z+21, r26	; 0x15
    c902:	b6 8b       	std	Z+22, r27	; 0x16
}
    c904:	00 00       	nop
    c906:	2a 96       	adiw	r28, 0x0a	; 10
    c908:	cd bf       	out	0x3d, r28	; 61
    c90a:	de bf       	out	0x3e, r29	; 62
    c90c:	df 91       	pop	r29
    c90e:	cf 91       	pop	r28
    c910:	08 95       	ret

0000c912 <LIN_DRV_GetReceiveStatus>:
 * obtain the number of words that is still needed to receive.
 *
 * Implements    : LIN_DRV_GetReceiveStatus_Activity
 *END**************************************************************************/
status_t LIN_DRV_GetReceiveStatus(uint32_t instance, uint8_t * bytesRemaining)
{
    c912:	cf 93       	push	r28
    c914:	df 93       	push	r29
    c916:	cd b7       	in	r28, 0x3d	; 61
    c918:	de b7       	in	r29, 0x3e	; 62
    c91a:	2a 97       	sbiw	r28, 0x0a	; 10
    c91c:	cd bf       	out	0x3d, r28	; 61
    c91e:	de bf       	out	0x3e, r29	; 62
    c920:	6d 83       	std	Y+5, r22	; 0x05
    c922:	7e 83       	std	Y+6, r23	; 0x06
    c924:	8f 83       	std	Y+7, r24	; 0x07
    c926:	98 87       	std	Y+8, r25	; 0x08
    c928:	49 87       	std	Y+9, r20	; 0x09
    c92a:	5a 87       	std	Y+10, r21	; 0x0a
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    c92c:	19 82       	std	Y+1, r1	; 0x01
    c92e:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    const lin_state_t * linCurrentState = g_linStatePtr[instance];
    c930:	8d 81       	ldd	r24, Y+5	; 0x05
    c932:	9e 81       	ldd	r25, Y+6	; 0x06
    c934:	88 0f       	add	r24, r24
    c936:	99 1f       	adc	r25, r25
    c938:	81 5d       	subi	r24, 0xD1	; 209
    c93a:	99 4b       	sbci	r25, 0xB9	; 185
    c93c:	fc 01       	movw	r30, r24
    c93e:	80 81       	ld	r24, Z
    c940:	91 81       	ldd	r25, Z+1	; 0x01
    c942:	8b 83       	std	Y+3, r24	; 0x03
    c944:	9c 83       	std	Y+4, r25	; 0x04

    /* Get the number of bytes that is still needed to receive */
    *bytesRemaining = (uint8_t)(linCurrentState->rxSize - linCurrentState->cntByte);
    c946:	8b 81       	ldd	r24, Y+3	; 0x03
    c948:	9c 81       	ldd	r25, Y+4	; 0x04
    c94a:	fc 01       	movw	r30, r24
    c94c:	26 81       	ldd	r18, Z+6	; 0x06
    c94e:	8b 81       	ldd	r24, Y+3	; 0x03
    c950:	9c 81       	ldd	r25, Y+4	; 0x04
    c952:	fc 01       	movw	r30, r24
    c954:	84 81       	ldd	r24, Z+4	; 0x04
    c956:	28 1b       	sub	r18, r24
    c958:	89 85       	ldd	r24, Y+9	; 0x09
    c95a:	9a 85       	ldd	r25, Y+10	; 0x0a
    c95c:	fc 01       	movw	r30, r24
    c95e:	20 83       	st	Z, r18

    /* Return status of the on-going reception */
    if ((linCurrentState->currentEventId == LIN_NO_EVENT) && (*bytesRemaining != 0U))
    c960:	8b 81       	ldd	r24, Y+3	; 0x03
    c962:	9c 81       	ldd	r25, Y+4	; 0x04
    c964:	fc 01       	movw	r30, r24
    c966:	81 89       	ldd	r24, Z+17	; 0x11
    c968:	88 23       	and	r24, r24
    c96a:	b9 f4       	brne	.+46     	; 0xc99a <LIN_DRV_GetReceiveStatus+0x88>
    c96c:	89 85       	ldd	r24, Y+9	; 0x09
    c96e:	9a 85       	ldd	r25, Y+10	; 0x0a
    c970:	fc 01       	movw	r30, r24
    c972:	80 81       	ld	r24, Z
    c974:	88 23       	and	r24, r24
    c976:	89 f0       	breq	.+34     	; 0xc99a <LIN_DRV_GetReceiveStatus+0x88>
    {
        if (linCurrentState->timeoutCounterFlag == false)
    c978:	8b 81       	ldd	r24, Y+3	; 0x03
    c97a:	9c 81       	ldd	r25, Y+4	; 0x04
    c97c:	fc 01       	movw	r30, r24
    c97e:	97 89       	ldd	r25, Z+23	; 0x17
    c980:	81 e0       	ldi	r24, 0x01	; 1
    c982:	89 27       	eor	r24, r25
    c984:	88 23       	and	r24, r24
    c986:	29 f0       	breq	.+10     	; 0xc992 <LIN_DRV_GetReceiveStatus+0x80>
        {
            retVal = STATUS_BUSY;
    c988:	82 e0       	ldi	r24, 0x02	; 2
    c98a:	90 e0       	ldi	r25, 0x00	; 0
    c98c:	89 83       	std	Y+1, r24	; 0x01
    c98e:	9a 83       	std	Y+2, r25	; 0x02
    c990:	04 c0       	rjmp	.+8      	; 0xc99a <LIN_DRV_GetReceiveStatus+0x88>
        }
        else
        {
            retVal = STATUS_TIMEOUT;
    c992:	83 e0       	ldi	r24, 0x03	; 3
    c994:	90 e0       	ldi	r25, 0x00	; 0
    c996:	89 83       	std	Y+1, r24	; 0x01
    c998:	9a 83       	std	Y+2, r25	; 0x02
        }
    }

    return retVal;
    c99a:	89 81       	ldd	r24, Y+1	; 0x01
    c99c:	9a 81       	ldd	r25, Y+2	; 0x02
    c99e:	2a 96       	adiw	r28, 0x0a	; 10
    c9a0:	cd bf       	out	0x3d, r28	; 61
    c9a2:	de bf       	out	0x3e, r29	; 62
    c9a4:	df 91       	pop	r29
    c9a6:	cf 91       	pop	r28
    c9a8:	08 95       	ret

0000c9aa <PORTA_set_pin_pull_mode>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
    c9aa:	cf 93       	push	r28
    c9ac:	df 93       	push	r29
    c9ae:	00 d0       	rcall	.+0      	; 0xc9b0 <PORTA_set_pin_pull_mode+0x6>
    c9b0:	00 d0       	rcall	.+0      	; 0xc9b2 <PORTA_set_pin_pull_mode+0x8>
    c9b2:	cd b7       	in	r28, 0x3d	; 61
    c9b4:	de b7       	in	r29, 0x3e	; 62
    c9b6:	8b 83       	std	Y+3, r24	; 0x03
    c9b8:	6c 83       	std	Y+4, r22	; 0x04
    c9ba:	8b 81       	ldd	r24, Y+3	; 0x03
    c9bc:	88 2f       	mov	r24, r24
    c9be:	90 e0       	ldi	r25, 0x00	; 0
    c9c0:	80 5f       	subi	r24, 0xF0	; 240
    c9c2:	9b 4f       	sbci	r25, 0xFB	; 251
    c9c4:	89 83       	std	Y+1, r24	; 0x01
    c9c6:	9a 83       	std	Y+2, r25	; 0x02
    c9c8:	8c 81       	ldd	r24, Y+4	; 0x04
    c9ca:	81 30       	cpi	r24, 0x01	; 1
    c9cc:	59 f4       	brne	.+22     	; 0xc9e4 <PORTA_set_pin_pull_mode+0x3a>
    c9ce:	89 81       	ldd	r24, Y+1	; 0x01
    c9d0:	9a 81       	ldd	r25, Y+2	; 0x02
    c9d2:	fc 01       	movw	r30, r24
    c9d4:	80 81       	ld	r24, Z
    c9d6:	28 2f       	mov	r18, r24
    c9d8:	28 60       	ori	r18, 0x08	; 8
    c9da:	89 81       	ldd	r24, Y+1	; 0x01
    c9dc:	9a 81       	ldd	r25, Y+2	; 0x02
    c9de:	fc 01       	movw	r30, r24
    c9e0:	20 83       	st	Z, r18
    c9e2:	0d c0       	rjmp	.+26     	; 0xc9fe <PORTA_set_pin_pull_mode+0x54>
    c9e4:	8c 81       	ldd	r24, Y+4	; 0x04
    c9e6:	88 23       	and	r24, r24
    c9e8:	51 f4       	brne	.+20     	; 0xc9fe <PORTA_set_pin_pull_mode+0x54>
    c9ea:	89 81       	ldd	r24, Y+1	; 0x01
    c9ec:	9a 81       	ldd	r25, Y+2	; 0x02
    c9ee:	fc 01       	movw	r30, r24
    c9f0:	80 81       	ld	r24, Z
    c9f2:	28 2f       	mov	r18, r24
    c9f4:	27 7f       	andi	r18, 0xF7	; 247
    c9f6:	89 81       	ldd	r24, Y+1	; 0x01
    c9f8:	9a 81       	ldd	r25, Y+2	; 0x02
    c9fa:	fc 01       	movw	r30, r24
    c9fc:	20 83       	st	Z, r18
    c9fe:	00 00       	nop
    ca00:	24 96       	adiw	r28, 0x04	; 4
    ca02:	cd bf       	out	0x3d, r28	; 61
    ca04:	de bf       	out	0x3e, r29	; 62
    ca06:	df 91       	pop	r29
    ca08:	cf 91       	pop	r28
    ca0a:	08 95       	ret

0000ca0c <PORTA_pin_set_isc>:
    ca0c:	cf 93       	push	r28
    ca0e:	df 93       	push	r29
    ca10:	00 d0       	rcall	.+0      	; 0xca12 <PORTA_pin_set_isc+0x6>
    ca12:	00 d0       	rcall	.+0      	; 0xca14 <PORTA_pin_set_isc+0x8>
    ca14:	cd b7       	in	r28, 0x3d	; 61
    ca16:	de b7       	in	r29, 0x3e	; 62
    ca18:	8b 83       	std	Y+3, r24	; 0x03
    ca1a:	6c 83       	std	Y+4, r22	; 0x04
    ca1c:	8b 81       	ldd	r24, Y+3	; 0x03
    ca1e:	88 2f       	mov	r24, r24
    ca20:	90 e0       	ldi	r25, 0x00	; 0
    ca22:	80 5f       	subi	r24, 0xF0	; 240
    ca24:	9b 4f       	sbci	r25, 0xFB	; 251
    ca26:	89 83       	std	Y+1, r24	; 0x01
    ca28:	9a 83       	std	Y+2, r25	; 0x02
    ca2a:	89 81       	ldd	r24, Y+1	; 0x01
    ca2c:	9a 81       	ldd	r25, Y+2	; 0x02
    ca2e:	fc 01       	movw	r30, r24
    ca30:	80 81       	ld	r24, Z
    ca32:	98 2f       	mov	r25, r24
    ca34:	98 7f       	andi	r25, 0xF8	; 248
    ca36:	8c 81       	ldd	r24, Y+4	; 0x04
    ca38:	89 2b       	or	r24, r25
    ca3a:	28 2f       	mov	r18, r24
    ca3c:	89 81       	ldd	r24, Y+1	; 0x01
    ca3e:	9a 81       	ldd	r25, Y+2	; 0x02
    ca40:	fc 01       	movw	r30, r24
    ca42:	20 83       	st	Z, r18
    ca44:	00 00       	nop
    ca46:	24 96       	adiw	r28, 0x04	; 4
    ca48:	cd bf       	out	0x3d, r28	; 61
    ca4a:	de bf       	out	0x3e, r29	; 62
    ca4c:	df 91       	pop	r29
    ca4e:	cf 91       	pop	r28
    ca50:	08 95       	ret

0000ca52 <PORTD_set_pin_pull_mode>:
    ca52:	cf 93       	push	r28
    ca54:	df 93       	push	r29
    ca56:	00 d0       	rcall	.+0      	; 0xca58 <PORTD_set_pin_pull_mode+0x6>
    ca58:	00 d0       	rcall	.+0      	; 0xca5a <PORTD_set_pin_pull_mode+0x8>
    ca5a:	cd b7       	in	r28, 0x3d	; 61
    ca5c:	de b7       	in	r29, 0x3e	; 62
    ca5e:	8b 83       	std	Y+3, r24	; 0x03
    ca60:	6c 83       	std	Y+4, r22	; 0x04
    ca62:	8b 81       	ldd	r24, Y+3	; 0x03
    ca64:	88 2f       	mov	r24, r24
    ca66:	90 e0       	ldi	r25, 0x00	; 0
    ca68:	80 59       	subi	r24, 0x90	; 144
    ca6a:	9b 4f       	sbci	r25, 0xFB	; 251
    ca6c:	89 83       	std	Y+1, r24	; 0x01
    ca6e:	9a 83       	std	Y+2, r25	; 0x02
    ca70:	8c 81       	ldd	r24, Y+4	; 0x04
    ca72:	81 30       	cpi	r24, 0x01	; 1
    ca74:	59 f4       	brne	.+22     	; 0xca8c <PORTD_set_pin_pull_mode+0x3a>
    ca76:	89 81       	ldd	r24, Y+1	; 0x01
    ca78:	9a 81       	ldd	r25, Y+2	; 0x02
    ca7a:	fc 01       	movw	r30, r24
    ca7c:	80 81       	ld	r24, Z
    ca7e:	28 2f       	mov	r18, r24
    ca80:	28 60       	ori	r18, 0x08	; 8
    ca82:	89 81       	ldd	r24, Y+1	; 0x01
    ca84:	9a 81       	ldd	r25, Y+2	; 0x02
    ca86:	fc 01       	movw	r30, r24
    ca88:	20 83       	st	Z, r18
    ca8a:	0d c0       	rjmp	.+26     	; 0xcaa6 <PORTD_set_pin_pull_mode+0x54>
    ca8c:	8c 81       	ldd	r24, Y+4	; 0x04
    ca8e:	88 23       	and	r24, r24
    ca90:	51 f4       	brne	.+20     	; 0xcaa6 <PORTD_set_pin_pull_mode+0x54>
    ca92:	89 81       	ldd	r24, Y+1	; 0x01
    ca94:	9a 81       	ldd	r25, Y+2	; 0x02
    ca96:	fc 01       	movw	r30, r24
    ca98:	80 81       	ld	r24, Z
    ca9a:	28 2f       	mov	r18, r24
    ca9c:	27 7f       	andi	r18, 0xF7	; 247
    ca9e:	89 81       	ldd	r24, Y+1	; 0x01
    caa0:	9a 81       	ldd	r25, Y+2	; 0x02
    caa2:	fc 01       	movw	r30, r24
    caa4:	20 83       	st	Z, r18
    caa6:	00 00       	nop
    caa8:	24 96       	adiw	r28, 0x04	; 4
    caaa:	cd bf       	out	0x3d, r28	; 61
    caac:	de bf       	out	0x3e, r29	; 62
    caae:	df 91       	pop	r29
    cab0:	cf 91       	pop	r28
    cab2:	08 95       	ret

0000cab4 <PORTD_pin_set_isc>:
    cab4:	cf 93       	push	r28
    cab6:	df 93       	push	r29
    cab8:	00 d0       	rcall	.+0      	; 0xcaba <PORTD_pin_set_isc+0x6>
    caba:	00 d0       	rcall	.+0      	; 0xcabc <PORTD_pin_set_isc+0x8>
    cabc:	cd b7       	in	r28, 0x3d	; 61
    cabe:	de b7       	in	r29, 0x3e	; 62
    cac0:	8b 83       	std	Y+3, r24	; 0x03
    cac2:	6c 83       	std	Y+4, r22	; 0x04
    cac4:	8b 81       	ldd	r24, Y+3	; 0x03
    cac6:	88 2f       	mov	r24, r24
    cac8:	90 e0       	ldi	r25, 0x00	; 0
    caca:	80 59       	subi	r24, 0x90	; 144
    cacc:	9b 4f       	sbci	r25, 0xFB	; 251
    cace:	89 83       	std	Y+1, r24	; 0x01
    cad0:	9a 83       	std	Y+2, r25	; 0x02
    cad2:	89 81       	ldd	r24, Y+1	; 0x01
    cad4:	9a 81       	ldd	r25, Y+2	; 0x02
    cad6:	fc 01       	movw	r30, r24
    cad8:	80 81       	ld	r24, Z
    cada:	98 2f       	mov	r25, r24
    cadc:	98 7f       	andi	r25, 0xF8	; 248
    cade:	8c 81       	ldd	r24, Y+4	; 0x04
    cae0:	89 2b       	or	r24, r25
    cae2:	28 2f       	mov	r18, r24
    cae4:	89 81       	ldd	r24, Y+1	; 0x01
    cae6:	9a 81       	ldd	r25, Y+2	; 0x02
    cae8:	fc 01       	movw	r30, r24
    caea:	20 83       	st	Z, r18
    caec:	00 00       	nop
    caee:	24 96       	adiw	r28, 0x04	; 4
    caf0:	cd bf       	out	0x3d, r28	; 61
    caf2:	de bf       	out	0x3e, r29	; 62
    caf4:	df 91       	pop	r29
    caf6:	cf 91       	pop	r28
    caf8:	08 95       	ret

0000cafa <PORTF_set_pin_pull_mode>:
    cafa:	cf 93       	push	r28
    cafc:	df 93       	push	r29
    cafe:	00 d0       	rcall	.+0      	; 0xcb00 <PORTF_set_pin_pull_mode+0x6>
    cb00:	00 d0       	rcall	.+0      	; 0xcb02 <PORTF_set_pin_pull_mode+0x8>
    cb02:	cd b7       	in	r28, 0x3d	; 61
    cb04:	de b7       	in	r29, 0x3e	; 62
    cb06:	8b 83       	std	Y+3, r24	; 0x03
    cb08:	6c 83       	std	Y+4, r22	; 0x04
    cb0a:	8b 81       	ldd	r24, Y+3	; 0x03
    cb0c:	88 2f       	mov	r24, r24
    cb0e:	90 e0       	ldi	r25, 0x00	; 0
    cb10:	80 55       	subi	r24, 0x50	; 80
    cb12:	9b 4f       	sbci	r25, 0xFB	; 251
    cb14:	89 83       	std	Y+1, r24	; 0x01
    cb16:	9a 83       	std	Y+2, r25	; 0x02
    cb18:	8c 81       	ldd	r24, Y+4	; 0x04
    cb1a:	81 30       	cpi	r24, 0x01	; 1
    cb1c:	59 f4       	brne	.+22     	; 0xcb34 <PORTF_set_pin_pull_mode+0x3a>
    cb1e:	89 81       	ldd	r24, Y+1	; 0x01
    cb20:	9a 81       	ldd	r25, Y+2	; 0x02
    cb22:	fc 01       	movw	r30, r24
    cb24:	80 81       	ld	r24, Z
    cb26:	28 2f       	mov	r18, r24
    cb28:	28 60       	ori	r18, 0x08	; 8
    cb2a:	89 81       	ldd	r24, Y+1	; 0x01
    cb2c:	9a 81       	ldd	r25, Y+2	; 0x02
    cb2e:	fc 01       	movw	r30, r24
    cb30:	20 83       	st	Z, r18
    cb32:	0d c0       	rjmp	.+26     	; 0xcb4e <PORTF_set_pin_pull_mode+0x54>
    cb34:	8c 81       	ldd	r24, Y+4	; 0x04
    cb36:	88 23       	and	r24, r24
    cb38:	51 f4       	brne	.+20     	; 0xcb4e <PORTF_set_pin_pull_mode+0x54>
    cb3a:	89 81       	ldd	r24, Y+1	; 0x01
    cb3c:	9a 81       	ldd	r25, Y+2	; 0x02
    cb3e:	fc 01       	movw	r30, r24
    cb40:	80 81       	ld	r24, Z
    cb42:	28 2f       	mov	r18, r24
    cb44:	27 7f       	andi	r18, 0xF7	; 247
    cb46:	89 81       	ldd	r24, Y+1	; 0x01
    cb48:	9a 81       	ldd	r25, Y+2	; 0x02
    cb4a:	fc 01       	movw	r30, r24
    cb4c:	20 83       	st	Z, r18
    cb4e:	00 00       	nop
    cb50:	24 96       	adiw	r28, 0x04	; 4
    cb52:	cd bf       	out	0x3d, r28	; 61
    cb54:	de bf       	out	0x3e, r29	; 62
    cb56:	df 91       	pop	r29
    cb58:	cf 91       	pop	r28
    cb5a:	08 95       	ret

0000cb5c <PORTF_pin_set_isc>:
    cb5c:	cf 93       	push	r28
    cb5e:	df 93       	push	r29
    cb60:	00 d0       	rcall	.+0      	; 0xcb62 <PORTF_pin_set_isc+0x6>
    cb62:	00 d0       	rcall	.+0      	; 0xcb64 <PORTF_pin_set_isc+0x8>
    cb64:	cd b7       	in	r28, 0x3d	; 61
    cb66:	de b7       	in	r29, 0x3e	; 62
    cb68:	8b 83       	std	Y+3, r24	; 0x03
    cb6a:	6c 83       	std	Y+4, r22	; 0x04
    cb6c:	8b 81       	ldd	r24, Y+3	; 0x03
    cb6e:	88 2f       	mov	r24, r24
    cb70:	90 e0       	ldi	r25, 0x00	; 0
    cb72:	80 55       	subi	r24, 0x50	; 80
    cb74:	9b 4f       	sbci	r25, 0xFB	; 251
    cb76:	89 83       	std	Y+1, r24	; 0x01
    cb78:	9a 83       	std	Y+2, r25	; 0x02
    cb7a:	89 81       	ldd	r24, Y+1	; 0x01
    cb7c:	9a 81       	ldd	r25, Y+2	; 0x02
    cb7e:	fc 01       	movw	r30, r24
    cb80:	80 81       	ld	r24, Z
    cb82:	98 2f       	mov	r25, r24
    cb84:	98 7f       	andi	r25, 0xF8	; 248
    cb86:	8c 81       	ldd	r24, Y+4	; 0x04
    cb88:	89 2b       	or	r24, r25
    cb8a:	28 2f       	mov	r18, r24
    cb8c:	89 81       	ldd	r24, Y+1	; 0x01
    cb8e:	9a 81       	ldd	r25, Y+2	; 0x02
    cb90:	fc 01       	movw	r30, r24
    cb92:	20 83       	st	Z, r18
    cb94:	00 00       	nop
    cb96:	24 96       	adiw	r28, 0x04	; 4
    cb98:	cd bf       	out	0x3d, r28	; 61
    cb9a:	de bf       	out	0x3e, r29	; 62
    cb9c:	df 91       	pop	r29
    cb9e:	cf 91       	pop	r28
    cba0:	08 95       	ret

0000cba2 <touch_ptc_pin_config>:
    cba2:	cf 93       	push	r28
    cba4:	df 93       	push	r29
    cba6:	cd b7       	in	r28, 0x3d	; 61
    cba8:	de b7       	in	r29, 0x3e	; 62
    cbaa:	60 e0       	ldi	r22, 0x00	; 0
    cbac:	80 e0       	ldi	r24, 0x00	; 0
    cbae:	0e 94 7d 65 	call	0xcafa	; 0xcafa <PORTF_set_pin_pull_mode>
    cbb2:	64 e0       	ldi	r22, 0x04	; 4
    cbb4:	80 e0       	ldi	r24, 0x00	; 0
    cbb6:	0e 94 ae 65 	call	0xcb5c	; 0xcb5c <PORTF_pin_set_isc>
    cbba:	60 e0       	ldi	r22, 0x00	; 0
    cbbc:	83 e0       	ldi	r24, 0x03	; 3
    cbbe:	0e 94 29 65 	call	0xca52	; 0xca52 <PORTD_set_pin_pull_mode>
    cbc2:	64 e0       	ldi	r22, 0x04	; 4
    cbc4:	83 e0       	ldi	r24, 0x03	; 3
    cbc6:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <PORTD_pin_set_isc>
    cbca:	60 e0       	ldi	r22, 0x00	; 0
    cbcc:	82 e0       	ldi	r24, 0x02	; 2
    cbce:	0e 94 29 65 	call	0xca52	; 0xca52 <PORTD_set_pin_pull_mode>
    cbd2:	64 e0       	ldi	r22, 0x04	; 4
    cbd4:	82 e0       	ldi	r24, 0x02	; 2
    cbd6:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <PORTD_pin_set_isc>
    cbda:	60 e0       	ldi	r22, 0x00	; 0
    cbdc:	86 e0       	ldi	r24, 0x06	; 6
    cbde:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <PORTA_set_pin_pull_mode>
    cbe2:	64 e0       	ldi	r22, 0x04	; 4
    cbe4:	86 e0       	ldi	r24, 0x06	; 6
    cbe6:	0e 94 06 65 	call	0xca0c	; 0xca0c <PORTA_pin_set_isc>
    cbea:	60 e0       	ldi	r22, 0x00	; 0
    cbec:	85 e0       	ldi	r24, 0x05	; 5
    cbee:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <PORTA_set_pin_pull_mode>
    cbf2:	64 e0       	ldi	r22, 0x04	; 4
    cbf4:	85 e0       	ldi	r24, 0x05	; 5
    cbf6:	0e 94 06 65 	call	0xca0c	; 0xca0c <PORTA_pin_set_isc>
    cbfa:	60 e0       	ldi	r22, 0x00	; 0
    cbfc:	84 e0       	ldi	r24, 0x04	; 4
    cbfe:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <PORTA_set_pin_pull_mode>
    cc02:	64 e0       	ldi	r22, 0x04	; 4
    cc04:	84 e0       	ldi	r24, 0x04	; 4
    cc06:	0e 94 06 65 	call	0xca0c	; 0xca0c <PORTA_pin_set_isc>
    cc0a:	60 e0       	ldi	r22, 0x00	; 0
    cc0c:	83 e0       	ldi	r24, 0x03	; 3
    cc0e:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <PORTA_set_pin_pull_mode>
    cc12:	64 e0       	ldi	r22, 0x04	; 4
    cc14:	83 e0       	ldi	r24, 0x03	; 3
    cc16:	0e 94 06 65 	call	0xca0c	; 0xca0c <PORTA_pin_set_isc>
    cc1a:	60 e0       	ldi	r22, 0x00	; 0
    cc1c:	87 e0       	ldi	r24, 0x07	; 7
    cc1e:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <PORTA_set_pin_pull_mode>
    cc22:	64 e0       	ldi	r22, 0x04	; 4
    cc24:	87 e0       	ldi	r24, 0x07	; 7
    cc26:	0e 94 06 65 	call	0xca0c	; 0xca0c <PORTA_pin_set_isc>
    cc2a:	60 e0       	ldi	r22, 0x00	; 0
    cc2c:	80 e0       	ldi	r24, 0x00	; 0
    cc2e:	0e 94 29 65 	call	0xca52	; 0xca52 <PORTD_set_pin_pull_mode>
    cc32:	64 e0       	ldi	r22, 0x04	; 4
    cc34:	80 e0       	ldi	r24, 0x00	; 0
    cc36:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <PORTD_pin_set_isc>
    cc3a:	60 e0       	ldi	r22, 0x00	; 0
    cc3c:	81 e0       	ldi	r24, 0x01	; 1
    cc3e:	0e 94 29 65 	call	0xca52	; 0xca52 <PORTD_set_pin_pull_mode>
    cc42:	64 e0       	ldi	r22, 0x04	; 4
    cc44:	81 e0       	ldi	r24, 0x01	; 1
    cc46:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <PORTD_pin_set_isc>
    cc4a:	60 e0       	ldi	r22, 0x00	; 0
    cc4c:	84 e0       	ldi	r24, 0x04	; 4
    cc4e:	0e 94 29 65 	call	0xca52	; 0xca52 <PORTD_set_pin_pull_mode>
    cc52:	64 e0       	ldi	r22, 0x04	; 4
    cc54:	84 e0       	ldi	r24, 0x04	; 4
    cc56:	0e 94 5a 65 	call	0xcab4	; 0xcab4 <PORTD_pin_set_isc>
    cc5a:	00 00       	nop
    cc5c:	df 91       	pop	r29
    cc5e:	cf 91       	pop	r28
    cc60:	08 95       	ret

0000cc62 <touch_sensors_config>:
    cc62:	cf 93       	push	r28
    cc64:	df 93       	push	r29
    cc66:	00 d0       	rcall	.+0      	; 0xcc68 <touch_sensors_config+0x6>
    cc68:	1f 92       	push	r1
    cc6a:	cd b7       	in	r28, 0x3d	; 61
    cc6c:	de b7       	in	r29, 0x3e	; 62
    cc6e:	1b 82       	std	Y+3, r1	; 0x03
    cc70:	87 ea       	ldi	r24, 0xA7	; 167
    cc72:	91 e4       	ldi	r25, 0x41	; 65
    cc74:	0e 94 af 7a 	call	0xf55e	; 0xf55e <qtm_ptc_init_acquisition_module>
    cc78:	89 ef       	ldi	r24, 0xF9	; 249
    cc7a:	96 e4       	ldi	r25, 0x46	; 70
    cc7c:	0e 94 66 7b 	call	0xf6cc	; 0xf6cc <qtm_ptc_qtlib_assign_signal_memory>
    cc80:	19 82       	std	Y+1, r1	; 0x01
    cc82:	1a 82       	std	Y+2, r1	; 0x02
    cc84:	13 c0       	rjmp	.+38     	; 0xccac <touch_sensors_config+0x4a>
    cc86:	89 81       	ldd	r24, Y+1	; 0x01
    cc88:	9a 81       	ldd	r25, Y+2	; 0x02
    cc8a:	bc 01       	movw	r22, r24
    cc8c:	87 ea       	ldi	r24, 0xA7	; 167
    cc8e:	91 e4       	ldi	r25, 0x41	; 65
    cc90:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <qtm_enable_sensor_node>
    cc94:	89 81       	ldd	r24, Y+1	; 0x01
    cc96:	9a 81       	ldd	r25, Y+2	; 0x02
    cc98:	bc 01       	movw	r22, r24
    cc9a:	87 ea       	ldi	r24, 0xA7	; 167
    cc9c:	91 e4       	ldi	r25, 0x41	; 65
    cc9e:	0e 94 ff 7b 	call	0xf7fe	; 0xf7fe <qtm_calibrate_sensor_node>
    cca2:	89 81       	ldd	r24, Y+1	; 0x01
    cca4:	9a 81       	ldd	r25, Y+2	; 0x02
    cca6:	01 96       	adiw	r24, 0x01	; 1
    cca8:	89 83       	std	Y+1, r24	; 0x01
    ccaa:	9a 83       	std	Y+2, r25	; 0x02
    ccac:	89 81       	ldd	r24, Y+1	; 0x01
    ccae:	9a 81       	ldd	r25, Y+2	; 0x02
    ccb0:	0a 97       	sbiw	r24, 0x0a	; 10
    ccb2:	48 f3       	brcs	.-46     	; 0xcc86 <touch_sensors_config+0x24>
    ccb4:	19 82       	std	Y+1, r1	; 0x01
    ccb6:	1a 82       	std	Y+2, r1	; 0x02
    ccb8:	17 c0       	rjmp	.+46     	; 0xcce8 <touch_sensors_config+0x86>
    ccba:	29 81       	ldd	r18, Y+1	; 0x01
    ccbc:	3a 81       	ldd	r19, Y+2	; 0x02
    ccbe:	c9 01       	movw	r24, r18
    ccc0:	88 0f       	add	r24, r24
    ccc2:	99 1f       	adc	r25, r25
    ccc4:	88 0f       	add	r24, r24
    ccc6:	99 1f       	adc	r25, r25
    ccc8:	82 0f       	add	r24, r18
    ccca:	93 1f       	adc	r25, r19
    cccc:	82 54       	subi	r24, 0x42	; 66
    ccce:	99 4b       	sbci	r25, 0xB9	; 185
    ccd0:	29 81       	ldd	r18, Y+1	; 0x01
    ccd2:	ac 01       	movw	r20, r24
    ccd4:	62 2f       	mov	r22, r18
    ccd6:	85 ed       	ldi	r24, 0xD5	; 213
    ccd8:	91 e4       	ldi	r25, 0x41	; 65
    ccda:	0e 94 4e 6f 	call	0xde9c	; 0xde9c <qtm_init_sensor_key>
    ccde:	89 81       	ldd	r24, Y+1	; 0x01
    cce0:	9a 81       	ldd	r25, Y+2	; 0x02
    cce2:	01 96       	adiw	r24, 0x01	; 1
    cce4:	89 83       	std	Y+1, r24	; 0x01
    cce6:	9a 83       	std	Y+2, r25	; 0x02
    cce8:	89 81       	ldd	r24, Y+1	; 0x01
    ccea:	9a 81       	ldd	r25, Y+2	; 0x02
    ccec:	0a 97       	sbiw	r24, 0x0a	; 10
    ccee:	28 f3       	brcs	.-54     	; 0xccba <touch_sensors_config+0x58>
    ccf0:	88 ee       	ldi	r24, 0xE8	; 232
    ccf2:	91 e4       	ldi	r25, 0x41	; 65
    ccf4:	0e 94 3c 73 	call	0xe678	; 0xe678 <qtm_init_scroller_module>
    ccf8:	98 2f       	mov	r25, r24
    ccfa:	8b 81       	ldd	r24, Y+3	; 0x03
    ccfc:	89 2b       	or	r24, r25
    ccfe:	8b 83       	std	Y+3, r24	; 0x03
    cd00:	8b 81       	ldd	r24, Y+3	; 0x03
    cd02:	23 96       	adiw	r28, 0x03	; 3
    cd04:	cd bf       	out	0x3d, r28	; 61
    cd06:	de bf       	out	0x3e, r29	; 62
    cd08:	df 91       	pop	r29
    cd0a:	cf 91       	pop	r28
    cd0c:	08 95       	ret

0000cd0e <qtm_measure_complete_callback>:
    cd0e:	cf 93       	push	r28
    cd10:	df 93       	push	r29
    cd12:	cd b7       	in	r28, 0x3d	; 61
    cd14:	de b7       	in	r29, 0x3e	; 62
    cd16:	81 e0       	ldi	r24, 0x01	; 1
    cd18:	80 93 36 46 	sts	0x4636, r24	; 0x804636 <touch_postprocess_request>
    cd1c:	00 00       	nop
    cd1e:	df 91       	pop	r29
    cd20:	cf 91       	pop	r28
    cd22:	08 95       	ret

0000cd24 <qtm_error_callback>:
    cd24:	cf 93       	push	r28
    cd26:	df 93       	push	r29
    cd28:	1f 92       	push	r1
    cd2a:	cd b7       	in	r28, 0x3d	; 61
    cd2c:	de b7       	in	r29, 0x3e	; 62
    cd2e:	89 83       	std	Y+1, r24	; 0x01
    cd30:	89 81       	ldd	r24, Y+1	; 0x01
    cd32:	8f 5f       	subi	r24, 0xFF	; 255
    cd34:	80 93 38 46 	sts	0x4638, r24	; 0x804638 <module_error_code>
    cd38:	00 00       	nop
    cd3a:	0f 90       	pop	r0
    cd3c:	df 91       	pop	r29
    cd3e:	cf 91       	pop	r28
    cd40:	08 95       	ret

0000cd42 <Timer_set_period>:
    cd42:	cf 93       	push	r28
    cd44:	df 93       	push	r29
    cd46:	1f 92       	push	r1
    cd48:	cd b7       	in	r28, 0x3d	; 61
    cd4a:	de b7       	in	r29, 0x3e	; 62
    cd4c:	89 83       	std	Y+1, r24	; 0x01
    cd4e:	00 00       	nop
    cd50:	80 e4       	ldi	r24, 0x40	; 64
    cd52:	91 e0       	ldi	r25, 0x01	; 1
    cd54:	fc 01       	movw	r30, r24
    cd56:	81 81       	ldd	r24, Z+1	; 0x01
    cd58:	88 2f       	mov	r24, r24
    cd5a:	90 e0       	ldi	r25, 0x00	; 0
    cd5c:	84 70       	andi	r24, 0x04	; 4
    cd5e:	99 27       	eor	r25, r25
    cd60:	89 2b       	or	r24, r25
    cd62:	b1 f7       	brne	.-20     	; 0xcd50 <Timer_set_period+0xe>
    cd64:	80 e4       	ldi	r24, 0x40	; 64
    cd66:	91 e0       	ldi	r25, 0x01	; 1
    cd68:	29 81       	ldd	r18, Y+1	; 0x01
    cd6a:	22 2f       	mov	r18, r18
    cd6c:	30 e0       	ldi	r19, 0x00	; 0
    cd6e:	fc 01       	movw	r30, r24
    cd70:	22 87       	std	Z+10, r18	; 0x0a
    cd72:	33 87       	std	Z+11, r19	; 0x0b
    cd74:	00 00       	nop
    cd76:	0f 90       	pop	r0
    cd78:	df 91       	pop	r29
    cd7a:	cf 91       	pop	r28
    cd7c:	08 95       	ret

0000cd7e <touch_init>:
    cd7e:	cf 93       	push	r28
    cd80:	df 93       	push	r29
    cd82:	cd b7       	in	r28, 0x3d	; 61
    cd84:	de b7       	in	r29, 0x3e	; 62
    cd86:	80 e2       	ldi	r24, 0x20	; 32
    cd88:	0e 94 a1 66 	call	0xcd42	; 0xcd42 <Timer_set_period>
    cd8c:	0e 94 d1 65 	call	0xcba2	; 0xcba2 <touch_ptc_pin_config>
    cd90:	0e 94 31 66 	call	0xcc62	; 0xcc62 <touch_sensors_config>
    cd94:	00 00       	nop
    cd96:	df 91       	pop	r29
    cd98:	cf 91       	pop	r28
    cd9a:	08 95       	ret

0000cd9c <touch_process>:
    cd9c:	cf 93       	push	r28
    cd9e:	df 93       	push	r29
    cda0:	1f 92       	push	r1
    cda2:	cd b7       	in	r28, 0x3d	; 61
    cda4:	de b7       	in	r29, 0x3e	; 62
    cda6:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <time_to_measure_touch_flag>
    cdaa:	81 30       	cpi	r24, 0x01	; 1
    cdac:	61 f4       	brne	.+24     	; 0xcdc6 <touch_process+0x2a>
    cdae:	67 e8       	ldi	r22, 0x87	; 135
    cdb0:	76 e6       	ldi	r23, 0x66	; 102
    cdb2:	87 ea       	ldi	r24, 0xA7	; 167
    cdb4:	91 e4       	ldi	r25, 0x41	; 65
    cdb6:	0e 94 70 7b 	call	0xf6e0	; 0xf6e0 <qtm_ptc_start_measurement_seq>
    cdba:	89 83       	std	Y+1, r24	; 0x01
    cdbc:	89 81       	ldd	r24, Y+1	; 0x01
    cdbe:	88 23       	and	r24, r24
    cdc0:	11 f4       	brne	.+4      	; 0xcdc6 <touch_process+0x2a>
    cdc2:	10 92 35 46 	sts	0x4635, r1	; 0x804635 <time_to_measure_touch_flag>
    cdc6:	80 91 36 46 	lds	r24, 0x4636	; 0x804636 <touch_postprocess_request>
    cdca:	81 30       	cpi	r24, 0x01	; 1
    cdcc:	89 f5       	brne	.+98     	; 0xce30 <touch_process+0x94>
    cdce:	10 92 36 46 	sts	0x4636, r1	; 0x804636 <touch_postprocess_request>
    cdd2:	0e 94 2d 78 	call	0xf05a	; 0xf05a <qtm_acquisition_process>
    cdd6:	89 83       	std	Y+1, r24	; 0x01
    cdd8:	89 81       	ldd	r24, Y+1	; 0x01
    cdda:	88 23       	and	r24, r24
    cddc:	b9 f4       	brne	.+46     	; 0xce0c <touch_process+0x70>
    cdde:	85 ed       	ldi	r24, 0xD5	; 213
    cde0:	91 e4       	ldi	r25, 0x41	; 65
    cde2:	0e 94 6d 6f 	call	0xdeda	; 0xdeda <qtm_key_sensors_process>
    cde6:	89 83       	std	Y+1, r24	; 0x01
    cde8:	89 81       	ldd	r24, Y+1	; 0x01
    cdea:	88 23       	and	r24, r24
    cdec:	19 f0       	breq	.+6      	; 0xcdf4 <touch_process+0x58>
    cdee:	81 e0       	ldi	r24, 0x01	; 1
    cdf0:	0e 94 92 66 	call	0xcd24	; 0xcd24 <qtm_error_callback>
    cdf4:	88 ee       	ldi	r24, 0xE8	; 232
    cdf6:	91 e4       	ldi	r25, 0x41	; 65
    cdf8:	0e 94 7c 73 	call	0xe6f8	; 0xe6f8 <qtm_scroller_process>
    cdfc:	89 83       	std	Y+1, r24	; 0x01
    cdfe:	89 81       	ldd	r24, Y+1	; 0x01
    ce00:	88 23       	and	r24, r24
    ce02:	39 f0       	breq	.+14     	; 0xce12 <touch_process+0x76>
    ce04:	82 e0       	ldi	r24, 0x02	; 2
    ce06:	0e 94 92 66 	call	0xcd24	; 0xcd24 <qtm_error_callback>
    ce0a:	03 c0       	rjmp	.+6      	; 0xce12 <touch_process+0x76>
    ce0c:	80 e0       	ldi	r24, 0x00	; 0
    ce0e:	0e 94 92 66 	call	0xcd24	; 0xcd24 <qtm_error_callback>
    ce12:	80 91 d5 41 	lds	r24, 0x41D5	; 0x8041d5 <qtlib_key_set1>
    ce16:	90 91 d6 41 	lds	r25, 0x41D6	; 0x8041d6 <qtlib_key_set1+0x1>
    ce1a:	fc 01       	movw	r30, r24
    ce1c:	80 81       	ld	r24, Z
    ce1e:	88 23       	and	r24, r24
    ce20:	24 f4       	brge	.+8      	; 0xce2a <touch_process+0x8e>
    ce22:	81 e0       	ldi	r24, 0x01	; 1
    ce24:	80 93 35 46 	sts	0x4635, r24	; 0x804635 <time_to_measure_touch_flag>
    ce28:	03 c0       	rjmp	.+6      	; 0xce30 <touch_process+0x94>
    ce2a:	81 e0       	ldi	r24, 0x01	; 1
    ce2c:	80 93 37 46 	sts	0x4637, r24	; 0x804637 <measurement_done_touch>
    ce30:	00 00       	nop
    ce32:	0f 90       	pop	r0
    ce34:	df 91       	pop	r29
    ce36:	cf 91       	pop	r28
    ce38:	08 95       	ret

0000ce3a <touch_timer_handler>:
    ce3a:	cf 93       	push	r28
    ce3c:	df 93       	push	r29
    ce3e:	cd b7       	in	r28, 0x3d	; 61
    ce40:	de b7       	in	r29, 0x3e	; 62
    ce42:	80 91 bd 46 	lds	r24, 0x46BD	; 0x8046bd <interrupt_cnt>
    ce46:	8f 5f       	subi	r24, 0xFF	; 255
    ce48:	80 93 bd 46 	sts	0x46BD, r24	; 0x8046bd <interrupt_cnt>
    ce4c:	80 91 bd 46 	lds	r24, 0x46BD	; 0x8046bd <interrupt_cnt>
    ce50:	84 31       	cpi	r24, 0x14	; 20
    ce52:	48 f0       	brcs	.+18     	; 0xce66 <touch_timer_handler+0x2c>
    ce54:	10 92 bd 46 	sts	0x46BD, r1	; 0x8046bd <interrupt_cnt>
    ce58:	81 e0       	ldi	r24, 0x01	; 1
    ce5a:	80 93 35 46 	sts	0x4635, r24	; 0x804635 <time_to_measure_touch_flag>
    ce5e:	84 e1       	ldi	r24, 0x14	; 20
    ce60:	90 e0       	ldi	r25, 0x00	; 0
    ce62:	0e 94 43 6f 	call	0xde86	; 0xde86 <qtm_update_qtlib_timer>
    ce66:	00 00       	nop
    ce68:	df 91       	pop	r29
    ce6a:	cf 91       	pop	r28
    ce6c:	08 95       	ret

0000ce6e <get_sensor_state>:
    ce6e:	cf 93       	push	r28
    ce70:	df 93       	push	r29
    ce72:	00 d0       	rcall	.+0      	; 0xce74 <get_sensor_state+0x6>
    ce74:	cd b7       	in	r28, 0x3d	; 61
    ce76:	de b7       	in	r29, 0x3e	; 62
    ce78:	89 83       	std	Y+1, r24	; 0x01
    ce7a:	9a 83       	std	Y+2, r25	; 0x02
    ce7c:	40 91 d9 41 	lds	r20, 0x41D9	; 0x8041d9 <qtlib_key_set1+0x4>
    ce80:	50 91 da 41 	lds	r21, 0x41DA	; 0x8041da <qtlib_key_set1+0x5>
    ce84:	29 81       	ldd	r18, Y+1	; 0x01
    ce86:	3a 81       	ldd	r19, Y+2	; 0x02
    ce88:	c9 01       	movw	r24, r18
    ce8a:	88 0f       	add	r24, r24
    ce8c:	99 1f       	adc	r25, r25
    ce8e:	82 0f       	add	r24, r18
    ce90:	93 1f       	adc	r25, r19
    ce92:	88 0f       	add	r24, r24
    ce94:	99 1f       	adc	r25, r25
    ce96:	84 0f       	add	r24, r20
    ce98:	95 1f       	adc	r25, r21
    ce9a:	fc 01       	movw	r30, r24
    ce9c:	80 81       	ld	r24, Z
    ce9e:	0f 90       	pop	r0
    cea0:	0f 90       	pop	r0
    cea2:	df 91       	pop	r29
    cea4:	cf 91       	pop	r28
    cea6:	08 95       	ret

0000cea8 <get_scroller_state>:

uint8_t get_scroller_state(uint16_t sensor_node)
{
    cea8:	cf 93       	push	r28
    ceaa:	df 93       	push	r29
    ceac:	00 d0       	rcall	.+0      	; 0xceae <get_scroller_state+0x6>
    ceae:	cd b7       	in	r28, 0x3d	; 61
    ceb0:	de b7       	in	r29, 0x3e	; 62
    ceb2:	89 83       	std	Y+1, r24	; 0x01
    ceb4:	9a 83       	std	Y+2, r25	; 0x02
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].scroller_status);
    ceb6:	40 91 ec 41 	lds	r20, 0x41EC	; 0x8041ec <qtm_scroller_control1+0x4>
    ceba:	50 91 ed 41 	lds	r21, 0x41ED	; 0x8041ed <qtm_scroller_control1+0x5>
    cebe:	29 81       	ldd	r18, Y+1	; 0x01
    cec0:	3a 81       	ldd	r19, Y+2	; 0x02
    cec2:	c9 01       	movw	r24, r18
    cec4:	88 0f       	add	r24, r24
    cec6:	99 1f       	adc	r25, r25
    cec8:	88 0f       	add	r24, r24
    ceca:	99 1f       	adc	r25, r25
    cecc:	88 0f       	add	r24, r24
    cece:	99 1f       	adc	r25, r25
    ced0:	82 0f       	add	r24, r18
    ced2:	93 1f       	adc	r25, r19
    ced4:	84 0f       	add	r24, r20
    ced6:	95 1f       	adc	r25, r21
    ced8:	fc 01       	movw	r30, r24
    ceda:	80 81       	ld	r24, Z
}
    cedc:	0f 90       	pop	r0
    cede:	0f 90       	pop	r0
    cee0:	df 91       	pop	r29
    cee2:	cf 91       	pop	r28
    cee4:	08 95       	ret

0000cee6 <get_scroller_position>:

uint16_t get_scroller_position(uint16_t sensor_node)
{
    cee6:	cf 93       	push	r28
    cee8:	df 93       	push	r29
    ceea:	00 d0       	rcall	.+0      	; 0xceec <get_scroller_position+0x6>
    ceec:	cd b7       	in	r28, 0x3d	; 61
    ceee:	de b7       	in	r29, 0x3e	; 62
    cef0:	89 83       	std	Y+1, r24	; 0x01
    cef2:	9a 83       	std	Y+2, r25	; 0x02
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].position);
    cef4:	40 91 ec 41 	lds	r20, 0x41EC	; 0x8041ec <qtm_scroller_control1+0x4>
    cef8:	50 91 ed 41 	lds	r21, 0x41ED	; 0x8041ed <qtm_scroller_control1+0x5>
    cefc:	29 81       	ldd	r18, Y+1	; 0x01
    cefe:	3a 81       	ldd	r19, Y+2	; 0x02
    cf00:	c9 01       	movw	r24, r18
    cf02:	88 0f       	add	r24, r24
    cf04:	99 1f       	adc	r25, r25
    cf06:	88 0f       	add	r24, r24
    cf08:	99 1f       	adc	r25, r25
    cf0a:	88 0f       	add	r24, r24
    cf0c:	99 1f       	adc	r25, r25
    cf0e:	82 0f       	add	r24, r18
    cf10:	93 1f       	adc	r25, r19
    cf12:	84 0f       	add	r24, r20
    cf14:	95 1f       	adc	r25, r21
    cf16:	fc 01       	movw	r30, r24
    cf18:	85 81       	ldd	r24, Z+5	; 0x05
    cf1a:	96 81       	ldd	r25, Z+6	; 0x06
}
    cf1c:	0f 90       	pop	r0
    cf1e:	0f 90       	pop	r0
    cf20:	df 91       	pop	r29
    cf22:	cf 91       	pop	r28
    cf24:	08 95       	ret

0000cf26 <__vector_27>:
#if defined(__ICCAVR__)
ISR(QTML_PTC_vect_iar)
#else
ISR(QTML_PTC_vect)
#endif
{
    cf26:	1f 92       	push	r1
    cf28:	0f 92       	push	r0
    cf2a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    cf2e:	0f 92       	push	r0
    cf30:	11 24       	eor	r1, r1
    cf32:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    cf36:	0f 92       	push	r0
    cf38:	2f 93       	push	r18
    cf3a:	3f 93       	push	r19
    cf3c:	4f 93       	push	r20
    cf3e:	5f 93       	push	r21
    cf40:	6f 93       	push	r22
    cf42:	7f 93       	push	r23
    cf44:	8f 93       	push	r24
    cf46:	9f 93       	push	r25
    cf48:	af 93       	push	r26
    cf4a:	bf 93       	push	r27
    cf4c:	ef 93       	push	r30
    cf4e:	ff 93       	push	r31
    cf50:	cf 93       	push	r28
    cf52:	df 93       	push	r29
    cf54:	cd b7       	in	r28, 0x3d	; 61
    cf56:	de b7       	in	r29, 0x3e	; 62
	qtm_avr_da_ptc_handler_eoc();
    cf58:	0e 94 86 7c 	call	0xf90c	; 0xf90c <qtm_avr_da_ptc_handler_eoc>
}
    cf5c:	00 00       	nop
    cf5e:	df 91       	pop	r29
    cf60:	cf 91       	pop	r28
    cf62:	ff 91       	pop	r31
    cf64:	ef 91       	pop	r30
    cf66:	bf 91       	pop	r27
    cf68:	af 91       	pop	r26
    cf6a:	9f 91       	pop	r25
    cf6c:	8f 91       	pop	r24
    cf6e:	7f 91       	pop	r23
    cf70:	6f 91       	pop	r22
    cf72:	5f 91       	pop	r21
    cf74:	4f 91       	pop	r20
    cf76:	3f 91       	pop	r19
    cf78:	2f 91       	pop	r18
    cf7a:	0f 90       	pop	r0
    cf7c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    cf80:	0f 90       	pop	r0
    cf82:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    cf86:	0f 90       	pop	r0
    cf88:	1f 90       	pop	r1
    cf8a:	18 95       	reti

0000cf8c <soft_timer_create>:
} soft_timer_obj_t;

soft_timer_obj_t *g_soft_timer_head = NULL;

void soft_timer_create(soft_timer_base_t period, soft_timer_cb cb)
{
    cf8c:	cf 93       	push	r28
    cf8e:	df 93       	push	r29
    cf90:	cd b7       	in	r28, 0x3d	; 61
    cf92:	de b7       	in	r29, 0x3e	; 62
    cf94:	26 97       	sbiw	r28, 0x06	; 6
    cf96:	cd bf       	out	0x3d, r28	; 61
    cf98:	de bf       	out	0x3e, r29	; 62
    cf9a:	8b 83       	std	Y+3, r24	; 0x03
    cf9c:	9c 83       	std	Y+4, r25	; 0x04
    cf9e:	6d 83       	std	Y+5, r22	; 0x05
    cfa0:	7e 83       	std	Y+6, r23	; 0x06
    soft_timer_obj_t *obj = NULL;
    cfa2:	19 82       	std	Y+1, r1	; 0x01
    cfa4:	1a 82       	std	Y+2, r1	; 0x02
    obj = (soft_timer_obj_t *)malloc(sizeof(soft_timer_obj_t));
    cfa6:	88 e0       	ldi	r24, 0x08	; 8
    cfa8:	90 e0       	ldi	r25, 0x00	; 0
    cfaa:	0e 94 5c 7d 	call	0xfab8	; 0xfab8 <malloc>
    cfae:	89 83       	std	Y+1, r24	; 0x01
    cfb0:	9a 83       	std	Y+2, r25	; 0x02
    if (obj == NULL)
    cfb2:	89 81       	ldd	r24, Y+1	; 0x01
    cfb4:	9a 81       	ldd	r25, Y+2	; 0x02
    cfb6:	89 2b       	or	r24, r25
    cfb8:	31 f1       	breq	.+76     	; 0xd006 <soft_timer_create+0x7a>
    {
        return;
    }
    memset(obj, 0, sizeof(soft_timer_obj_t));
    cfba:	89 81       	ldd	r24, Y+1	; 0x01
    cfbc:	9a 81       	ldd	r25, Y+2	; 0x02
    cfbe:	48 e0       	ldi	r20, 0x08	; 8
    cfc0:	50 e0       	ldi	r21, 0x00	; 0
    cfc2:	60 e0       	ldi	r22, 0x00	; 0
    cfc4:	70 e0       	ldi	r23, 0x00	; 0
    cfc6:	0e 94 7d 7e 	call	0xfcfa	; 0xfcfa <memset>

    obj->period = period;
    cfca:	89 81       	ldd	r24, Y+1	; 0x01
    cfcc:	9a 81       	ldd	r25, Y+2	; 0x02
    cfce:	2b 81       	ldd	r18, Y+3	; 0x03
    cfd0:	3c 81       	ldd	r19, Y+4	; 0x04
    cfd2:	fc 01       	movw	r30, r24
    cfd4:	22 83       	std	Z+2, r18	; 0x02
    cfd6:	33 83       	std	Z+3, r19	; 0x03
    obj->cb = cb;
    cfd8:	89 81       	ldd	r24, Y+1	; 0x01
    cfda:	9a 81       	ldd	r25, Y+2	; 0x02
    cfdc:	2d 81       	ldd	r18, Y+5	; 0x05
    cfde:	3e 81       	ldd	r19, Y+6	; 0x06
    cfe0:	fc 01       	movw	r30, r24
    cfe2:	24 83       	std	Z+4, r18	; 0x04
    cfe4:	35 83       	std	Z+5, r19	; 0x05
    obj->next = g_soft_timer_head;
    cfe6:	20 91 3a 46 	lds	r18, 0x463A	; 0x80463a <g_soft_timer_head>
    cfea:	30 91 3b 46 	lds	r19, 0x463B	; 0x80463b <g_soft_timer_head+0x1>
    cfee:	89 81       	ldd	r24, Y+1	; 0x01
    cff0:	9a 81       	ldd	r25, Y+2	; 0x02
    cff2:	fc 01       	movw	r30, r24
    cff4:	26 83       	std	Z+6, r18	; 0x06
    cff6:	37 83       	std	Z+7, r19	; 0x07
    g_soft_timer_head = obj;
    cff8:	89 81       	ldd	r24, Y+1	; 0x01
    cffa:	9a 81       	ldd	r25, Y+2	; 0x02
    cffc:	80 93 3a 46 	sts	0x463A, r24	; 0x80463a <g_soft_timer_head>
    d000:	90 93 3b 46 	sts	0x463B, r25	; 0x80463b <g_soft_timer_head+0x1>
    d004:	01 c0       	rjmp	.+2      	; 0xd008 <soft_timer_create+0x7c>
{
    soft_timer_obj_t *obj = NULL;
    obj = (soft_timer_obj_t *)malloc(sizeof(soft_timer_obj_t));
    if (obj == NULL)
    {
        return;
    d006:	00 00       	nop

    obj->period = period;
    obj->cb = cb;
    obj->next = g_soft_timer_head;
    g_soft_timer_head = obj;
}
    d008:	26 96       	adiw	r28, 0x06	; 6
    d00a:	cd bf       	out	0x3d, r28	; 61
    d00c:	de bf       	out	0x3e, r29	; 62
    d00e:	df 91       	pop	r29
    d010:	cf 91       	pop	r28
    d012:	08 95       	ret

0000d014 <soft_timer_run>:

void soft_timer_run(void)
{
    d014:	cf 93       	push	r28
    d016:	df 93       	push	r29
    d018:	00 d0       	rcall	.+0      	; 0xd01a <soft_timer_run+0x6>
    d01a:	cd b7       	in	r28, 0x3d	; 61
    d01c:	de b7       	in	r29, 0x3e	; 62
    soft_timer_obj_t *obj = g_soft_timer_head;
    d01e:	80 91 3a 46 	lds	r24, 0x463A	; 0x80463a <g_soft_timer_head>
    d022:	90 91 3b 46 	lds	r25, 0x463B	; 0x80463b <g_soft_timer_head+0x1>
    d026:	89 83       	std	Y+1, r24	; 0x01
    d028:	9a 83       	std	Y+2, r25	; 0x02
    for (; obj != NULL; obj = obj->next)
    d02a:	2a c0       	rjmp	.+84     	; 0xd080 <soft_timer_run+0x6c>
    {
        if ((soft_timer_base_t)(g_soft_timer_ticks - obj->cnt) >= obj->period)
    d02c:	20 91 47 46 	lds	r18, 0x4647	; 0x804647 <g_soft_timer_ticks>
    d030:	30 91 48 46 	lds	r19, 0x4648	; 0x804648 <g_soft_timer_ticks+0x1>
    d034:	89 81       	ldd	r24, Y+1	; 0x01
    d036:	9a 81       	ldd	r25, Y+2	; 0x02
    d038:	fc 01       	movw	r30, r24
    d03a:	80 81       	ld	r24, Z
    d03c:	91 81       	ldd	r25, Z+1	; 0x01
    d03e:	28 1b       	sub	r18, r24
    d040:	39 0b       	sbc	r19, r25
    d042:	89 81       	ldd	r24, Y+1	; 0x01
    d044:	9a 81       	ldd	r25, Y+2	; 0x02
    d046:	fc 01       	movw	r30, r24
    d048:	82 81       	ldd	r24, Z+2	; 0x02
    d04a:	93 81       	ldd	r25, Z+3	; 0x03
    d04c:	28 17       	cp	r18, r24
    d04e:	39 07       	cpc	r19, r25
    d050:	80 f0       	brcs	.+32     	; 0xd072 <soft_timer_run+0x5e>
        {
            obj->cnt = g_soft_timer_ticks;
    d052:	20 91 47 46 	lds	r18, 0x4647	; 0x804647 <g_soft_timer_ticks>
    d056:	30 91 48 46 	lds	r19, 0x4648	; 0x804648 <g_soft_timer_ticks+0x1>
    d05a:	89 81       	ldd	r24, Y+1	; 0x01
    d05c:	9a 81       	ldd	r25, Y+2	; 0x02
    d05e:	fc 01       	movw	r30, r24
    d060:	20 83       	st	Z, r18
    d062:	31 83       	std	Z+1, r19	; 0x01
            obj->cb();
    d064:	89 81       	ldd	r24, Y+1	; 0x01
    d066:	9a 81       	ldd	r25, Y+2	; 0x02
    d068:	fc 01       	movw	r30, r24
    d06a:	84 81       	ldd	r24, Z+4	; 0x04
    d06c:	95 81       	ldd	r25, Z+5	; 0x05
    d06e:	fc 01       	movw	r30, r24
    d070:	09 95       	icall
}

void soft_timer_run(void)
{
    soft_timer_obj_t *obj = g_soft_timer_head;
    for (; obj != NULL; obj = obj->next)
    d072:	89 81       	ldd	r24, Y+1	; 0x01
    d074:	9a 81       	ldd	r25, Y+2	; 0x02
    d076:	fc 01       	movw	r30, r24
    d078:	86 81       	ldd	r24, Z+6	; 0x06
    d07a:	97 81       	ldd	r25, Z+7	; 0x07
    d07c:	89 83       	std	Y+1, r24	; 0x01
    d07e:	9a 83       	std	Y+2, r25	; 0x02
    d080:	89 81       	ldd	r24, Y+1	; 0x01
    d082:	9a 81       	ldd	r25, Y+2	; 0x02
    d084:	89 2b       	or	r24, r25
    d086:	91 f6       	brne	.-92     	; 0xd02c <soft_timer_run+0x18>
        {
            obj->cnt = g_soft_timer_ticks;
            obj->cb();
        }
    }
    d088:	00 00       	nop
    d08a:	0f 90       	pop	r0
    d08c:	0f 90       	pop	r0
    d08e:	df 91       	pop	r29
    d090:	cf 91       	pop	r28
    d092:	08 95       	ret

0000d094 <ADC_0_init>:
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
}
    d094:	cf 93       	push	r28
    d096:	df 93       	push	r29
    d098:	cd b7       	in	r28, 0x3d	; 61
    d09a:	de b7       	in	r29, 0x3e	; 62
    d09c:	80 e0       	ldi	r24, 0x00	; 0
    d09e:	96 e0       	ldi	r25, 0x06	; 6
    d0a0:	27 e0       	ldi	r18, 0x07	; 7
    d0a2:	fc 01       	movw	r30, r24
    d0a4:	21 83       	std	Z+1, r18	; 0x01
    d0a6:	80 e0       	ldi	r24, 0x00	; 0
    d0a8:	96 e0       	ldi	r25, 0x06	; 6
    d0aa:	21 e0       	ldi	r18, 0x01	; 1
    d0ac:	fc 01       	movw	r30, r24
    d0ae:	24 87       	std	Z+12, r18	; 0x0c
    d0b0:	80 e0       	ldi	r24, 0x00	; 0
    d0b2:	96 e0       	ldi	r25, 0x06	; 6
    d0b4:	2f e7       	ldi	r18, 0x7F	; 127
    d0b6:	fc 01       	movw	r30, r24
    d0b8:	25 83       	std	Z+5, r18	; 0x05
    d0ba:	80 e0       	ldi	r24, 0x00	; 0
    d0bc:	96 e0       	ldi	r25, 0x06	; 6
    d0be:	21 e0       	ldi	r18, 0x01	; 1
    d0c0:	fc 01       	movw	r30, r24
    d0c2:	20 83       	st	Z, r18
    d0c4:	80 e0       	ldi	r24, 0x00	; 0
    d0c6:	df 91       	pop	r29
    d0c8:	cf 91       	pop	r28
    d0ca:	08 95       	ret

0000d0cc <__vector_24>:

ISR(ADC0_RESRDY_vect)
{
    d0cc:	1f 92       	push	r1
    d0ce:	0f 92       	push	r0
    d0d0:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    d0d4:	0f 92       	push	r0
    d0d6:	11 24       	eor	r1, r1
    d0d8:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    d0dc:	0f 92       	push	r0
    d0de:	2f 93       	push	r18
    d0e0:	3f 93       	push	r19
    d0e2:	4f 93       	push	r20
    d0e4:	5f 93       	push	r21
    d0e6:	6f 93       	push	r22
    d0e8:	7f 93       	push	r23
    d0ea:	8f 93       	push	r24
    d0ec:	9f 93       	push	r25
    d0ee:	af 93       	push	r26
    d0f0:	bf 93       	push	r27
    d0f2:	ef 93       	push	r30
    d0f4:	ff 93       	push	r31
    d0f6:	cf 93       	push	r28
    d0f8:	df 93       	push	r29
    d0fa:	cd b7       	in	r28, 0x3d	; 61
    d0fc:	de b7       	in	r29, 0x3e	; 62
	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
    d0fe:	80 e0       	ldi	r24, 0x00	; 0
    d100:	96 e0       	ldi	r25, 0x06	; 6
    d102:	20 e0       	ldi	r18, 0x00	; 0
    d104:	36 e0       	ldi	r19, 0x06	; 6
    d106:	f9 01       	movw	r30, r18
    d108:	25 85       	ldd	r18, Z+13	; 0x0d
    d10a:	21 60       	ori	r18, 0x01	; 1
    d10c:	fc 01       	movw	r30, r24
    d10e:	25 87       	std	Z+13, r18	; 0x0d

	if (ADC_0_cb != NULL) {
    d110:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <ADC_0_cb>
    d114:	90 91 3d 46 	lds	r25, 0x463D	; 0x80463d <ADC_0_cb+0x1>
    d118:	89 2b       	or	r24, r25
    d11a:	31 f0       	breq	.+12     	; 0xd128 <__vector_24+0x5c>
		ADC_0_cb();
    d11c:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <ADC_0_cb>
    d120:	90 91 3d 46 	lds	r25, 0x463D	; 0x80463d <ADC_0_cb+0x1>
    d124:	fc 01       	movw	r30, r24
    d126:	09 95       	icall
	}
}
    d128:	00 00       	nop
    d12a:	df 91       	pop	r29
    d12c:	cf 91       	pop	r28
    d12e:	ff 91       	pop	r31
    d130:	ef 91       	pop	r30
    d132:	bf 91       	pop	r27
    d134:	af 91       	pop	r26
    d136:	9f 91       	pop	r25
    d138:	8f 91       	pop	r24
    d13a:	7f 91       	pop	r23
    d13c:	6f 91       	pop	r22
    d13e:	5f 91       	pop	r21
    d140:	4f 91       	pop	r20
    d142:	3f 91       	pop	r19
    d144:	2f 91       	pop	r18
    d146:	0f 90       	pop	r0
    d148:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    d14c:	0f 90       	pop	r0
    d14e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    d152:	0f 90       	pop	r0
    d154:	1f 90       	pop	r1
    d156:	18 95       	reti

0000d158 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
    d158:	cf 93       	push	r28
    d15a:	df 93       	push	r29
    d15c:	cd b7       	in	r28, 0x3d	; 61
    d15e:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    d160:	80 e8       	ldi	r24, 0x80	; 128
    d162:	90 e0       	ldi	r25, 0x00	; 0
    d164:	fc 01       	movw	r30, r24
    d166:	11 86       	std	Z+9, r1	; 0x09
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
    d168:	80 e0       	ldi	r24, 0x00	; 0
}
    d16a:	df 91       	pop	r29
    d16c:	cf 91       	pop	r28
    d16e:	08 95       	ret

0000d170 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    d170:	cf 93       	push	r28
    d172:	df 93       	push	r29
    d174:	00 d0       	rcall	.+0      	; 0xd176 <ccp_write_io+0x6>
    d176:	1f 92       	push	r1
    d178:	cd b7       	in	r28, 0x3d	; 61
    d17a:	de b7       	in	r29, 0x3e	; 62
    d17c:	89 83       	std	Y+1, r24	; 0x01
    d17e:	9a 83       	std	Y+2, r25	; 0x02
    d180:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    d182:	89 81       	ldd	r24, Y+1	; 0x01
    d184:	9a 81       	ldd	r25, Y+2	; 0x02
    d186:	4b 81       	ldd	r20, Y+3	; 0x03
    d188:	68 ed       	ldi	r22, 0xD8	; 216
    d18a:	0e 94 f3 6d 	call	0xdbe6	; 0xdbe6 <protected_write_io>
}
    d18e:	00 00       	nop
    d190:	23 96       	adiw	r28, 0x03	; 3
    d192:	cd bf       	out	0x3d, r28	; 61
    d194:	de bf       	out	0x3e, r29	; 62
    d196:	df 91       	pop	r29
    d198:	cf 91       	pop	r28
    d19a:	08 95       	ret

0000d19c <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    d19c:	cf 93       	push	r28
    d19e:	df 93       	push	r29
    d1a0:	cd b7       	in	r28, 0x3d	; 61
    d1a2:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(CLKCTRL.PLLCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run Standby: disabled */
	//		 | CLKCTRL_MULFAC_DISABLE_gc /* 1 */
	//		 | 0 << CLKCTRL_SOURCE_bp /* Select Source for PLL: disabled */);

	ccp_write_io((void *)&(CLKCTRL.OSCHFCTRLA),
    d1a4:	64 e2       	ldi	r22, 0x24	; 36
    d1a6:	88 e6       	ldi	r24, 0x68	; 104
    d1a8:	90 e0       	ldi	r25, 0x00	; 0
    d1aa:	0e 94 b8 68 	call	0xd170	; 0xd170 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
    d1ae:	80 e0       	ldi	r24, 0x00	; 0
}
    d1b0:	df 91       	pop	r29
    d1b2:	cf 91       	pop	r28
    d1b4:	08 95       	ret

0000d1b6 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
    d1b6:	cf 93       	push	r28
    d1b8:	df 93       	push	r29
    d1ba:	cd b7       	in	r28, 0x3d	; 61
    d1bc:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    d1be:	78 94       	sei

	return 0;
    d1c0:	80 e0       	ldi	r24, 0x00	; 0
}
    d1c2:	df 91       	pop	r29
    d1c4:	cf 91       	pop	r28
    d1c6:	08 95       	ret

0000d1c8 <DAC_0_init>:
 * \return Nothing
 */
void DAC_0_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
}
    d1c8:	cf 93       	push	r28
    d1ca:	df 93       	push	r29
    d1cc:	cd b7       	in	r28, 0x3d	; 61
    d1ce:	de b7       	in	r29, 0x3e	; 62
    d1d0:	80 ea       	ldi	r24, 0xA0	; 160
    d1d2:	96 e0       	ldi	r25, 0x06	; 6
    d1d4:	fc 01       	movw	r30, r24
    d1d6:	12 82       	std	Z+2, r1	; 0x02
    d1d8:	13 82       	std	Z+3, r1	; 0x03
    d1da:	80 ea       	ldi	r24, 0xA0	; 160
    d1dc:	96 e0       	ldi	r25, 0x06	; 6
    d1de:	21 e4       	ldi	r18, 0x41	; 65
    d1e0:	fc 01       	movw	r30, r24
    d1e2:	20 83       	st	Z, r18
    d1e4:	80 e0       	ldi	r24, 0x00	; 0
    d1e6:	df 91       	pop	r29
    d1e8:	cf 91       	pop	r28
    d1ea:	08 95       	ret

0000d1ec <DAC_0_set_output>:
 * \param[in] value The digital value to be converted to analogue voltage by the DAC
 *
 * \return Nothing
 */
void DAC_0_set_output(dac_resolution_t value)
{
    d1ec:	cf 93       	push	r28
    d1ee:	df 93       	push	r29
    d1f0:	00 d0       	rcall	.+0      	; 0xd1f2 <DAC_0_set_output+0x6>
    d1f2:	cd b7       	in	r28, 0x3d	; 61
    d1f4:	de b7       	in	r29, 0x3e	; 62
    d1f6:	89 83       	std	Y+1, r24	; 0x01
    d1f8:	9a 83       	std	Y+2, r25	; 0x02
	value     = value << DAC_DATA_gp;
    d1fa:	89 81       	ldd	r24, Y+1	; 0x01
    d1fc:	9a 81       	ldd	r25, Y+2	; 0x02
    d1fe:	00 24       	eor	r0, r0
    d200:	96 95       	lsr	r25
    d202:	87 95       	ror	r24
    d204:	07 94       	ror	r0
    d206:	96 95       	lsr	r25
    d208:	87 95       	ror	r24
    d20a:	07 94       	ror	r0
    d20c:	98 2f       	mov	r25, r24
    d20e:	80 2d       	mov	r24, r0
    d210:	89 83       	std	Y+1, r24	; 0x01
    d212:	9a 83       	std	Y+2, r25	; 0x02
	value     = value & 0xFFC0;
    d214:	89 81       	ldd	r24, Y+1	; 0x01
    d216:	9a 81       	ldd	r25, Y+2	; 0x02
    d218:	80 7c       	andi	r24, 0xC0	; 192
    d21a:	89 83       	std	Y+1, r24	; 0x01
    d21c:	9a 83       	std	Y+2, r25	; 0x02
	DAC0.DATA = value;
    d21e:	80 ea       	ldi	r24, 0xA0	; 160
    d220:	96 e0       	ldi	r25, 0x06	; 6
    d222:	29 81       	ldd	r18, Y+1	; 0x01
    d224:	3a 81       	ldd	r19, Y+2	; 0x02
    d226:	fc 01       	movw	r30, r24
    d228:	22 83       	std	Z+2, r18	; 0x02
    d22a:	33 83       	std	Z+3, r19	; 0x03
}
    d22c:	00 00       	nop
    d22e:	0f 90       	pop	r0
    d230:	0f 90       	pop	r0
    d232:	df 91       	pop	r29
    d234:	cf 91       	pop	r28
    d236:	08 95       	ret

0000d238 <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    d238:	cf 93       	push	r28
    d23a:	df 93       	push	r29
    d23c:	00 d0       	rcall	.+0      	; 0xd23e <PORTA_set_pin_pull_mode+0x6>
    d23e:	00 d0       	rcall	.+0      	; 0xd240 <PORTA_set_pin_pull_mode+0x8>
    d240:	cd b7       	in	r28, 0x3d	; 61
    d242:	de b7       	in	r29, 0x3e	; 62
    d244:	8b 83       	std	Y+3, r24	; 0x03
    d246:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
    d248:	8b 81       	ldd	r24, Y+3	; 0x03
    d24a:	88 2f       	mov	r24, r24
    d24c:	90 e0       	ldi	r25, 0x00	; 0
    d24e:	80 5f       	subi	r24, 0xF0	; 240
    d250:	9b 4f       	sbci	r25, 0xFB	; 251
    d252:	89 83       	std	Y+1, r24	; 0x01
    d254:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    d256:	8c 81       	ldd	r24, Y+4	; 0x04
    d258:	81 30       	cpi	r24, 0x01	; 1
    d25a:	59 f4       	brne	.+22     	; 0xd272 <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    d25c:	89 81       	ldd	r24, Y+1	; 0x01
    d25e:	9a 81       	ldd	r25, Y+2	; 0x02
    d260:	fc 01       	movw	r30, r24
    d262:	80 81       	ld	r24, Z
    d264:	28 2f       	mov	r18, r24
    d266:	28 60       	ori	r18, 0x08	; 8
    d268:	89 81       	ldd	r24, Y+1	; 0x01
    d26a:	9a 81       	ldd	r25, Y+2	; 0x02
    d26c:	fc 01       	movw	r30, r24
    d26e:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    d270:	0d c0       	rjmp	.+26     	; 0xd28c <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    d272:	8c 81       	ldd	r24, Y+4	; 0x04
    d274:	88 23       	and	r24, r24
    d276:	51 f4       	brne	.+20     	; 0xd28c <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    d278:	89 81       	ldd	r24, Y+1	; 0x01
    d27a:	9a 81       	ldd	r25, Y+2	; 0x02
    d27c:	fc 01       	movw	r30, r24
    d27e:	80 81       	ld	r24, Z
    d280:	28 2f       	mov	r18, r24
    d282:	27 7f       	andi	r18, 0xF7	; 247
    d284:	89 81       	ldd	r24, Y+1	; 0x01
    d286:	9a 81       	ldd	r25, Y+2	; 0x02
    d288:	fc 01       	movw	r30, r24
    d28a:	20 83       	st	Z, r18
	}
}
    d28c:	00 00       	nop
    d28e:	24 96       	adiw	r28, 0x04	; 4
    d290:	cd bf       	out	0x3d, r28	; 61
    d292:	de bf       	out	0x3e, r29	; 62
    d294:	df 91       	pop	r29
    d296:	cf 91       	pop	r28
    d298:	08 95       	ret

0000d29a <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    d29a:	cf 93       	push	r28
    d29c:	df 93       	push	r29
    d29e:	00 d0       	rcall	.+0      	; 0xd2a0 <PORTA_set_pin_dir+0x6>
    d2a0:	cd b7       	in	r28, 0x3d	; 61
    d2a2:	de b7       	in	r29, 0x3e	; 62
    d2a4:	89 83       	std	Y+1, r24	; 0x01
    d2a6:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    d2a8:	8a 81       	ldd	r24, Y+2	; 0x02
    d2aa:	88 2f       	mov	r24, r24
    d2ac:	90 e0       	ldi	r25, 0x00	; 0
    d2ae:	81 30       	cpi	r24, 0x01	; 1
    d2b0:	91 05       	cpc	r25, r1
    d2b2:	e1 f0       	breq	.+56     	; 0xd2ec <PORTA_set_pin_dir+0x52>
    d2b4:	82 30       	cpi	r24, 0x02	; 2
    d2b6:	91 05       	cpc	r25, r1
    d2b8:	71 f1       	breq	.+92     	; 0xd316 <PORTA_set_pin_dir+0x7c>
    d2ba:	89 2b       	or	r24, r25
    d2bc:	09 f0       	breq	.+2      	; 0xd2c0 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    d2be:	3b c0       	rjmp	.+118    	; 0xd336 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    d2c0:	20 e0       	ldi	r18, 0x00	; 0
    d2c2:	30 e0       	ldi	r19, 0x00	; 0
    d2c4:	80 e0       	ldi	r24, 0x00	; 0
    d2c6:	90 e0       	ldi	r25, 0x00	; 0
    d2c8:	fc 01       	movw	r30, r24
    d2ca:	80 81       	ld	r24, Z
    d2cc:	68 2f       	mov	r22, r24
    d2ce:	89 81       	ldd	r24, Y+1	; 0x01
    d2d0:	48 2f       	mov	r20, r24
    d2d2:	50 e0       	ldi	r21, 0x00	; 0
    d2d4:	81 e0       	ldi	r24, 0x01	; 1
    d2d6:	90 e0       	ldi	r25, 0x00	; 0
    d2d8:	02 c0       	rjmp	.+4      	; 0xd2de <PORTA_set_pin_dir+0x44>
    d2da:	88 0f       	add	r24, r24
    d2dc:	99 1f       	adc	r25, r25
    d2de:	4a 95       	dec	r20
    d2e0:	e2 f7       	brpl	.-8      	; 0xd2da <PORTA_set_pin_dir+0x40>
    d2e2:	80 95       	com	r24
    d2e4:	86 23       	and	r24, r22
    d2e6:	f9 01       	movw	r30, r18
    d2e8:	80 83       	st	Z, r24
		break;
    d2ea:	25 c0       	rjmp	.+74     	; 0xd336 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    d2ec:	20 e0       	ldi	r18, 0x00	; 0
    d2ee:	30 e0       	ldi	r19, 0x00	; 0
    d2f0:	80 e0       	ldi	r24, 0x00	; 0
    d2f2:	90 e0       	ldi	r25, 0x00	; 0
    d2f4:	fc 01       	movw	r30, r24
    d2f6:	80 81       	ld	r24, Z
    d2f8:	68 2f       	mov	r22, r24
    d2fa:	89 81       	ldd	r24, Y+1	; 0x01
    d2fc:	48 2f       	mov	r20, r24
    d2fe:	50 e0       	ldi	r21, 0x00	; 0
    d300:	81 e0       	ldi	r24, 0x01	; 1
    d302:	90 e0       	ldi	r25, 0x00	; 0
    d304:	02 c0       	rjmp	.+4      	; 0xd30a <PORTA_set_pin_dir+0x70>
    d306:	88 0f       	add	r24, r24
    d308:	99 1f       	adc	r25, r25
    d30a:	4a 95       	dec	r20
    d30c:	e2 f7       	brpl	.-8      	; 0xd306 <PORTA_set_pin_dir+0x6c>
    d30e:	86 2b       	or	r24, r22
    d310:	f9 01       	movw	r30, r18
    d312:	80 83       	st	Z, r24
		break;
    d314:	10 c0       	rjmp	.+32     	; 0xd336 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    d316:	89 81       	ldd	r24, Y+1	; 0x01
    d318:	88 2f       	mov	r24, r24
    d31a:	90 e0       	ldi	r25, 0x00	; 0
    d31c:	80 5f       	subi	r24, 0xF0	; 240
    d31e:	9b 4f       	sbci	r25, 0xFB	; 251
    d320:	29 81       	ldd	r18, Y+1	; 0x01
    d322:	22 2f       	mov	r18, r18
    d324:	30 e0       	ldi	r19, 0x00	; 0
    d326:	20 5f       	subi	r18, 0xF0	; 240
    d328:	3b 4f       	sbci	r19, 0xFB	; 251
    d32a:	f9 01       	movw	r30, r18
    d32c:	20 81       	ld	r18, Z
    d32e:	28 60       	ori	r18, 0x08	; 8
    d330:	fc 01       	movw	r30, r24
    d332:	20 83       	st	Z, r18
		break;
    d334:	00 00       	nop
	default:
		break;
	}
}
    d336:	00 00       	nop
    d338:	0f 90       	pop	r0
    d33a:	0f 90       	pop	r0
    d33c:	df 91       	pop	r29
    d33e:	cf 91       	pop	r28
    d340:	08 95       	ret

0000d342 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    d342:	cf 93       	push	r28
    d344:	df 93       	push	r29
    d346:	00 d0       	rcall	.+0      	; 0xd348 <PORTA_set_pin_level+0x6>
    d348:	cd b7       	in	r28, 0x3d	; 61
    d34a:	de b7       	in	r29, 0x3e	; 62
    d34c:	89 83       	std	Y+1, r24	; 0x01
    d34e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    d350:	8a 81       	ldd	r24, Y+2	; 0x02
    d352:	88 23       	and	r24, r24
    d354:	a9 f0       	breq	.+42     	; 0xd380 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    d356:	20 e0       	ldi	r18, 0x00	; 0
    d358:	30 e0       	ldi	r19, 0x00	; 0
    d35a:	80 e0       	ldi	r24, 0x00	; 0
    d35c:	90 e0       	ldi	r25, 0x00	; 0
    d35e:	fc 01       	movw	r30, r24
    d360:	81 81       	ldd	r24, Z+1	; 0x01
    d362:	68 2f       	mov	r22, r24
    d364:	89 81       	ldd	r24, Y+1	; 0x01
    d366:	48 2f       	mov	r20, r24
    d368:	50 e0       	ldi	r21, 0x00	; 0
    d36a:	81 e0       	ldi	r24, 0x01	; 1
    d36c:	90 e0       	ldi	r25, 0x00	; 0
    d36e:	02 c0       	rjmp	.+4      	; 0xd374 <PORTA_set_pin_level+0x32>
    d370:	88 0f       	add	r24, r24
    d372:	99 1f       	adc	r25, r25
    d374:	4a 95       	dec	r20
    d376:	e2 f7       	brpl	.-8      	; 0xd370 <PORTA_set_pin_level+0x2e>
    d378:	86 2b       	or	r24, r22
    d37a:	f9 01       	movw	r30, r18
    d37c:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    d37e:	15 c0       	rjmp	.+42     	; 0xd3aa <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    d380:	20 e0       	ldi	r18, 0x00	; 0
    d382:	30 e0       	ldi	r19, 0x00	; 0
    d384:	80 e0       	ldi	r24, 0x00	; 0
    d386:	90 e0       	ldi	r25, 0x00	; 0
    d388:	fc 01       	movw	r30, r24
    d38a:	81 81       	ldd	r24, Z+1	; 0x01
    d38c:	68 2f       	mov	r22, r24
    d38e:	89 81       	ldd	r24, Y+1	; 0x01
    d390:	48 2f       	mov	r20, r24
    d392:	50 e0       	ldi	r21, 0x00	; 0
    d394:	81 e0       	ldi	r24, 0x01	; 1
    d396:	90 e0       	ldi	r25, 0x00	; 0
    d398:	02 c0       	rjmp	.+4      	; 0xd39e <PORTA_set_pin_level+0x5c>
    d39a:	88 0f       	add	r24, r24
    d39c:	99 1f       	adc	r25, r25
    d39e:	4a 95       	dec	r20
    d3a0:	e2 f7       	brpl	.-8      	; 0xd39a <PORTA_set_pin_level+0x58>
    d3a2:	80 95       	com	r24
    d3a4:	86 23       	and	r24, r22
    d3a6:	f9 01       	movw	r30, r18
    d3a8:	81 83       	std	Z+1, r24	; 0x01
	}
}
    d3aa:	00 00       	nop
    d3ac:	0f 90       	pop	r0
    d3ae:	0f 90       	pop	r0
    d3b0:	df 91       	pop	r29
    d3b2:	cf 91       	pop	r28
    d3b4:	08 95       	ret

0000d3b6 <PORTC_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    d3b6:	cf 93       	push	r28
    d3b8:	df 93       	push	r29
    d3ba:	00 d0       	rcall	.+0      	; 0xd3bc <PORTC_set_pin_dir+0x6>
    d3bc:	cd b7       	in	r28, 0x3d	; 61
    d3be:	de b7       	in	r29, 0x3e	; 62
    d3c0:	89 83       	std	Y+1, r24	; 0x01
    d3c2:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    d3c4:	8a 81       	ldd	r24, Y+2	; 0x02
    d3c6:	88 2f       	mov	r24, r24
    d3c8:	90 e0       	ldi	r25, 0x00	; 0
    d3ca:	81 30       	cpi	r24, 0x01	; 1
    d3cc:	91 05       	cpc	r25, r1
    d3ce:	e1 f0       	breq	.+56     	; 0xd408 <PORTC_set_pin_dir+0x52>
    d3d0:	82 30       	cpi	r24, 0x02	; 2
    d3d2:	91 05       	cpc	r25, r1
    d3d4:	71 f1       	breq	.+92     	; 0xd432 <PORTC_set_pin_dir+0x7c>
    d3d6:	89 2b       	or	r24, r25
    d3d8:	09 f0       	breq	.+2      	; 0xd3dc <PORTC_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    d3da:	3b c0       	rjmp	.+118    	; 0xd452 <PORTC_set_pin_dir+0x9c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    d3dc:	88 e0       	ldi	r24, 0x08	; 8
    d3de:	90 e0       	ldi	r25, 0x00	; 0
    d3e0:	28 e0       	ldi	r18, 0x08	; 8
    d3e2:	30 e0       	ldi	r19, 0x00	; 0
    d3e4:	f9 01       	movw	r30, r18
    d3e6:	20 81       	ld	r18, Z
    d3e8:	62 2f       	mov	r22, r18
    d3ea:	29 81       	ldd	r18, Y+1	; 0x01
    d3ec:	42 2f       	mov	r20, r18
    d3ee:	50 e0       	ldi	r21, 0x00	; 0
    d3f0:	21 e0       	ldi	r18, 0x01	; 1
    d3f2:	30 e0       	ldi	r19, 0x00	; 0
    d3f4:	02 c0       	rjmp	.+4      	; 0xd3fa <PORTC_set_pin_dir+0x44>
    d3f6:	22 0f       	add	r18, r18
    d3f8:	33 1f       	adc	r19, r19
    d3fa:	4a 95       	dec	r20
    d3fc:	e2 f7       	brpl	.-8      	; 0xd3f6 <PORTC_set_pin_dir+0x40>
    d3fe:	20 95       	com	r18
    d400:	26 23       	and	r18, r22
    d402:	fc 01       	movw	r30, r24
    d404:	20 83       	st	Z, r18
		break;
    d406:	25 c0       	rjmp	.+74     	; 0xd452 <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    d408:	88 e0       	ldi	r24, 0x08	; 8
    d40a:	90 e0       	ldi	r25, 0x00	; 0
    d40c:	28 e0       	ldi	r18, 0x08	; 8
    d40e:	30 e0       	ldi	r19, 0x00	; 0
    d410:	f9 01       	movw	r30, r18
    d412:	20 81       	ld	r18, Z
    d414:	62 2f       	mov	r22, r18
    d416:	29 81       	ldd	r18, Y+1	; 0x01
    d418:	42 2f       	mov	r20, r18
    d41a:	50 e0       	ldi	r21, 0x00	; 0
    d41c:	21 e0       	ldi	r18, 0x01	; 1
    d41e:	30 e0       	ldi	r19, 0x00	; 0
    d420:	02 c0       	rjmp	.+4      	; 0xd426 <PORTC_set_pin_dir+0x70>
    d422:	22 0f       	add	r18, r18
    d424:	33 1f       	adc	r19, r19
    d426:	4a 95       	dec	r20
    d428:	e2 f7       	brpl	.-8      	; 0xd422 <PORTC_set_pin_dir+0x6c>
    d42a:	26 2b       	or	r18, r22
    d42c:	fc 01       	movw	r30, r24
    d42e:	20 83       	st	Z, r18
		break;
    d430:	10 c0       	rjmp	.+32     	; 0xd452 <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    d432:	89 81       	ldd	r24, Y+1	; 0x01
    d434:	88 2f       	mov	r24, r24
    d436:	90 e0       	ldi	r25, 0x00	; 0
    d438:	80 5b       	subi	r24, 0xB0	; 176
    d43a:	9b 4f       	sbci	r25, 0xFB	; 251
    d43c:	29 81       	ldd	r18, Y+1	; 0x01
    d43e:	22 2f       	mov	r18, r18
    d440:	30 e0       	ldi	r19, 0x00	; 0
    d442:	20 5b       	subi	r18, 0xB0	; 176
    d444:	3b 4f       	sbci	r19, 0xFB	; 251
    d446:	f9 01       	movw	r30, r18
    d448:	20 81       	ld	r18, Z
    d44a:	28 60       	ori	r18, 0x08	; 8
    d44c:	fc 01       	movw	r30, r24
    d44e:	20 83       	st	Z, r18
		break;
    d450:	00 00       	nop
	default:
		break;
	}
}
    d452:	00 00       	nop
    d454:	0f 90       	pop	r0
    d456:	0f 90       	pop	r0
    d458:	df 91       	pop	r29
    d45a:	cf 91       	pop	r28
    d45c:	08 95       	ret

0000d45e <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    d45e:	cf 93       	push	r28
    d460:	df 93       	push	r29
    d462:	00 d0       	rcall	.+0      	; 0xd464 <PORTC_set_pin_level+0x6>
    d464:	cd b7       	in	r28, 0x3d	; 61
    d466:	de b7       	in	r29, 0x3e	; 62
    d468:	89 83       	std	Y+1, r24	; 0x01
    d46a:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    d46c:	8a 81       	ldd	r24, Y+2	; 0x02
    d46e:	88 23       	and	r24, r24
    d470:	a9 f0       	breq	.+42     	; 0xd49c <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    d472:	88 e0       	ldi	r24, 0x08	; 8
    d474:	90 e0       	ldi	r25, 0x00	; 0
    d476:	28 e0       	ldi	r18, 0x08	; 8
    d478:	30 e0       	ldi	r19, 0x00	; 0
    d47a:	f9 01       	movw	r30, r18
    d47c:	21 81       	ldd	r18, Z+1	; 0x01
    d47e:	62 2f       	mov	r22, r18
    d480:	29 81       	ldd	r18, Y+1	; 0x01
    d482:	42 2f       	mov	r20, r18
    d484:	50 e0       	ldi	r21, 0x00	; 0
    d486:	21 e0       	ldi	r18, 0x01	; 1
    d488:	30 e0       	ldi	r19, 0x00	; 0
    d48a:	02 c0       	rjmp	.+4      	; 0xd490 <PORTC_set_pin_level+0x32>
    d48c:	22 0f       	add	r18, r18
    d48e:	33 1f       	adc	r19, r19
    d490:	4a 95       	dec	r20
    d492:	e2 f7       	brpl	.-8      	; 0xd48c <PORTC_set_pin_level+0x2e>
    d494:	26 2b       	or	r18, r22
    d496:	fc 01       	movw	r30, r24
    d498:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    d49a:	15 c0       	rjmp	.+42     	; 0xd4c6 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    d49c:	88 e0       	ldi	r24, 0x08	; 8
    d49e:	90 e0       	ldi	r25, 0x00	; 0
    d4a0:	28 e0       	ldi	r18, 0x08	; 8
    d4a2:	30 e0       	ldi	r19, 0x00	; 0
    d4a4:	f9 01       	movw	r30, r18
    d4a6:	21 81       	ldd	r18, Z+1	; 0x01
    d4a8:	62 2f       	mov	r22, r18
    d4aa:	29 81       	ldd	r18, Y+1	; 0x01
    d4ac:	42 2f       	mov	r20, r18
    d4ae:	50 e0       	ldi	r21, 0x00	; 0
    d4b0:	21 e0       	ldi	r18, 0x01	; 1
    d4b2:	30 e0       	ldi	r19, 0x00	; 0
    d4b4:	02 c0       	rjmp	.+4      	; 0xd4ba <PORTC_set_pin_level+0x5c>
    d4b6:	22 0f       	add	r18, r18
    d4b8:	33 1f       	adc	r19, r19
    d4ba:	4a 95       	dec	r20
    d4bc:	e2 f7       	brpl	.-8      	; 0xd4b6 <PORTC_set_pin_level+0x58>
    d4be:	20 95       	com	r18
    d4c0:	26 23       	and	r18, r22
    d4c2:	fc 01       	movw	r30, r24
    d4c4:	21 83       	std	Z+1, r18	; 0x01
	}
}
    d4c6:	00 00       	nop
    d4c8:	0f 90       	pop	r0
    d4ca:	0f 90       	pop	r0
    d4cc:	df 91       	pop	r29
    d4ce:	cf 91       	pop	r28
    d4d0:	08 95       	ret

0000d4d2 <PORTD_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    d4d2:	cf 93       	push	r28
    d4d4:	df 93       	push	r29
    d4d6:	00 d0       	rcall	.+0      	; 0xd4d8 <PORTD_set_pin_pull_mode+0x6>
    d4d8:	00 d0       	rcall	.+0      	; 0xd4da <PORTD_set_pin_pull_mode+0x8>
    d4da:	cd b7       	in	r28, 0x3d	; 61
    d4dc:	de b7       	in	r29, 0x3e	; 62
    d4de:	8b 83       	std	Y+3, r24	; 0x03
    d4e0:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    d4e2:	8b 81       	ldd	r24, Y+3	; 0x03
    d4e4:	88 2f       	mov	r24, r24
    d4e6:	90 e0       	ldi	r25, 0x00	; 0
    d4e8:	80 59       	subi	r24, 0x90	; 144
    d4ea:	9b 4f       	sbci	r25, 0xFB	; 251
    d4ec:	89 83       	std	Y+1, r24	; 0x01
    d4ee:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    d4f0:	8c 81       	ldd	r24, Y+4	; 0x04
    d4f2:	81 30       	cpi	r24, 0x01	; 1
    d4f4:	59 f4       	brne	.+22     	; 0xd50c <PORTD_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    d4f6:	89 81       	ldd	r24, Y+1	; 0x01
    d4f8:	9a 81       	ldd	r25, Y+2	; 0x02
    d4fa:	fc 01       	movw	r30, r24
    d4fc:	80 81       	ld	r24, Z
    d4fe:	28 2f       	mov	r18, r24
    d500:	28 60       	ori	r18, 0x08	; 8
    d502:	89 81       	ldd	r24, Y+1	; 0x01
    d504:	9a 81       	ldd	r25, Y+2	; 0x02
    d506:	fc 01       	movw	r30, r24
    d508:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    d50a:	0d c0       	rjmp	.+26     	; 0xd526 <PORTD_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    d50c:	8c 81       	ldd	r24, Y+4	; 0x04
    d50e:	88 23       	and	r24, r24
    d510:	51 f4       	brne	.+20     	; 0xd526 <PORTD_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    d512:	89 81       	ldd	r24, Y+1	; 0x01
    d514:	9a 81       	ldd	r25, Y+2	; 0x02
    d516:	fc 01       	movw	r30, r24
    d518:	80 81       	ld	r24, Z
    d51a:	28 2f       	mov	r18, r24
    d51c:	27 7f       	andi	r18, 0xF7	; 247
    d51e:	89 81       	ldd	r24, Y+1	; 0x01
    d520:	9a 81       	ldd	r25, Y+2	; 0x02
    d522:	fc 01       	movw	r30, r24
    d524:	20 83       	st	Z, r18
	}
}
    d526:	00 00       	nop
    d528:	24 96       	adiw	r28, 0x04	; 4
    d52a:	cd bf       	out	0x3d, r28	; 61
    d52c:	de bf       	out	0x3e, r29	; 62
    d52e:	df 91       	pop	r29
    d530:	cf 91       	pop	r28
    d532:	08 95       	ret

0000d534 <PORTD_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
    d534:	cf 93       	push	r28
    d536:	df 93       	push	r29
    d538:	00 d0       	rcall	.+0      	; 0xd53a <PORTD_pin_set_isc+0x6>
    d53a:	00 d0       	rcall	.+0      	; 0xd53c <PORTD_pin_set_isc+0x8>
    d53c:	cd b7       	in	r28, 0x3d	; 61
    d53e:	de b7       	in	r29, 0x3e	; 62
    d540:	8b 83       	std	Y+3, r24	; 0x03
    d542:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    d544:	8b 81       	ldd	r24, Y+3	; 0x03
    d546:	88 2f       	mov	r24, r24
    d548:	90 e0       	ldi	r25, 0x00	; 0
    d54a:	80 59       	subi	r24, 0x90	; 144
    d54c:	9b 4f       	sbci	r25, 0xFB	; 251
    d54e:	89 83       	std	Y+1, r24	; 0x01
    d550:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    d552:	89 81       	ldd	r24, Y+1	; 0x01
    d554:	9a 81       	ldd	r25, Y+2	; 0x02
    d556:	fc 01       	movw	r30, r24
    d558:	80 81       	ld	r24, Z
    d55a:	98 2f       	mov	r25, r24
    d55c:	98 7f       	andi	r25, 0xF8	; 248
    d55e:	8c 81       	ldd	r24, Y+4	; 0x04
    d560:	89 2b       	or	r24, r25
    d562:	28 2f       	mov	r18, r24
    d564:	89 81       	ldd	r24, Y+1	; 0x01
    d566:	9a 81       	ldd	r25, Y+2	; 0x02
    d568:	fc 01       	movw	r30, r24
    d56a:	20 83       	st	Z, r18
}
    d56c:	00 00       	nop
    d56e:	24 96       	adiw	r28, 0x04	; 4
    d570:	cd bf       	out	0x3d, r28	; 61
    d572:	de bf       	out	0x3e, r29	; 62
    d574:	df 91       	pop	r29
    d576:	cf 91       	pop	r28
    d578:	08 95       	ret

0000d57a <PORTF_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    d57a:	cf 93       	push	r28
    d57c:	df 93       	push	r29
    d57e:	00 d0       	rcall	.+0      	; 0xd580 <PORTF_set_pin_dir+0x6>
    d580:	cd b7       	in	r28, 0x3d	; 61
    d582:	de b7       	in	r29, 0x3e	; 62
    d584:	89 83       	std	Y+1, r24	; 0x01
    d586:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    d588:	8a 81       	ldd	r24, Y+2	; 0x02
    d58a:	88 2f       	mov	r24, r24
    d58c:	90 e0       	ldi	r25, 0x00	; 0
    d58e:	81 30       	cpi	r24, 0x01	; 1
    d590:	91 05       	cpc	r25, r1
    d592:	e1 f0       	breq	.+56     	; 0xd5cc <PORTF_set_pin_dir+0x52>
    d594:	82 30       	cpi	r24, 0x02	; 2
    d596:	91 05       	cpc	r25, r1
    d598:	71 f1       	breq	.+92     	; 0xd5f6 <PORTF_set_pin_dir+0x7c>
    d59a:	89 2b       	or	r24, r25
    d59c:	09 f0       	breq	.+2      	; 0xd5a0 <PORTF_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    d59e:	3b c0       	rjmp	.+118    	; 0xd616 <PORTF_set_pin_dir+0x9c>
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    d5a0:	84 e1       	ldi	r24, 0x14	; 20
    d5a2:	90 e0       	ldi	r25, 0x00	; 0
    d5a4:	24 e1       	ldi	r18, 0x14	; 20
    d5a6:	30 e0       	ldi	r19, 0x00	; 0
    d5a8:	f9 01       	movw	r30, r18
    d5aa:	20 81       	ld	r18, Z
    d5ac:	62 2f       	mov	r22, r18
    d5ae:	29 81       	ldd	r18, Y+1	; 0x01
    d5b0:	42 2f       	mov	r20, r18
    d5b2:	50 e0       	ldi	r21, 0x00	; 0
    d5b4:	21 e0       	ldi	r18, 0x01	; 1
    d5b6:	30 e0       	ldi	r19, 0x00	; 0
    d5b8:	02 c0       	rjmp	.+4      	; 0xd5be <PORTF_set_pin_dir+0x44>
    d5ba:	22 0f       	add	r18, r18
    d5bc:	33 1f       	adc	r19, r19
    d5be:	4a 95       	dec	r20
    d5c0:	e2 f7       	brpl	.-8      	; 0xd5ba <PORTF_set_pin_dir+0x40>
    d5c2:	20 95       	com	r18
    d5c4:	26 23       	and	r18, r22
    d5c6:	fc 01       	movw	r30, r24
    d5c8:	20 83       	st	Z, r18
		break;
    d5ca:	25 c0       	rjmp	.+74     	; 0xd616 <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    d5cc:	84 e1       	ldi	r24, 0x14	; 20
    d5ce:	90 e0       	ldi	r25, 0x00	; 0
    d5d0:	24 e1       	ldi	r18, 0x14	; 20
    d5d2:	30 e0       	ldi	r19, 0x00	; 0
    d5d4:	f9 01       	movw	r30, r18
    d5d6:	20 81       	ld	r18, Z
    d5d8:	62 2f       	mov	r22, r18
    d5da:	29 81       	ldd	r18, Y+1	; 0x01
    d5dc:	42 2f       	mov	r20, r18
    d5de:	50 e0       	ldi	r21, 0x00	; 0
    d5e0:	21 e0       	ldi	r18, 0x01	; 1
    d5e2:	30 e0       	ldi	r19, 0x00	; 0
    d5e4:	02 c0       	rjmp	.+4      	; 0xd5ea <PORTF_set_pin_dir+0x70>
    d5e6:	22 0f       	add	r18, r18
    d5e8:	33 1f       	adc	r19, r19
    d5ea:	4a 95       	dec	r20
    d5ec:	e2 f7       	brpl	.-8      	; 0xd5e6 <PORTF_set_pin_dir+0x6c>
    d5ee:	26 2b       	or	r18, r22
    d5f0:	fc 01       	movw	r30, r24
    d5f2:	20 83       	st	Z, r18
		break;
    d5f4:	10 c0       	rjmp	.+32     	; 0xd616 <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    d5f6:	89 81       	ldd	r24, Y+1	; 0x01
    d5f8:	88 2f       	mov	r24, r24
    d5fa:	90 e0       	ldi	r25, 0x00	; 0
    d5fc:	80 55       	subi	r24, 0x50	; 80
    d5fe:	9b 4f       	sbci	r25, 0xFB	; 251
    d600:	29 81       	ldd	r18, Y+1	; 0x01
    d602:	22 2f       	mov	r18, r18
    d604:	30 e0       	ldi	r19, 0x00	; 0
    d606:	20 55       	subi	r18, 0x50	; 80
    d608:	3b 4f       	sbci	r19, 0xFB	; 251
    d60a:	f9 01       	movw	r30, r18
    d60c:	20 81       	ld	r18, Z
    d60e:	28 60       	ori	r18, 0x08	; 8
    d610:	fc 01       	movw	r30, r24
    d612:	20 83       	st	Z, r18
		break;
    d614:	00 00       	nop
	default:
		break;
	}
}
    d616:	00 00       	nop
    d618:	0f 90       	pop	r0
    d61a:	0f 90       	pop	r0
    d61c:	df 91       	pop	r29
    d61e:	cf 91       	pop	r28
    d620:	08 95       	ret

0000d622 <PORTF_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
    d622:	cf 93       	push	r28
    d624:	df 93       	push	r29
    d626:	00 d0       	rcall	.+0      	; 0xd628 <PORTF_set_pin_level+0x6>
    d628:	cd b7       	in	r28, 0x3d	; 61
    d62a:	de b7       	in	r29, 0x3e	; 62
    d62c:	89 83       	std	Y+1, r24	; 0x01
    d62e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    d630:	8a 81       	ldd	r24, Y+2	; 0x02
    d632:	88 23       	and	r24, r24
    d634:	a9 f0       	breq	.+42     	; 0xd660 <PORTF_set_pin_level+0x3e>
		VPORTF.OUT |= (1 << pin);
    d636:	84 e1       	ldi	r24, 0x14	; 20
    d638:	90 e0       	ldi	r25, 0x00	; 0
    d63a:	24 e1       	ldi	r18, 0x14	; 20
    d63c:	30 e0       	ldi	r19, 0x00	; 0
    d63e:	f9 01       	movw	r30, r18
    d640:	21 81       	ldd	r18, Z+1	; 0x01
    d642:	62 2f       	mov	r22, r18
    d644:	29 81       	ldd	r18, Y+1	; 0x01
    d646:	42 2f       	mov	r20, r18
    d648:	50 e0       	ldi	r21, 0x00	; 0
    d64a:	21 e0       	ldi	r18, 0x01	; 1
    d64c:	30 e0       	ldi	r19, 0x00	; 0
    d64e:	02 c0       	rjmp	.+4      	; 0xd654 <PORTF_set_pin_level+0x32>
    d650:	22 0f       	add	r18, r18
    d652:	33 1f       	adc	r19, r19
    d654:	4a 95       	dec	r20
    d656:	e2 f7       	brpl	.-8      	; 0xd650 <PORTF_set_pin_level+0x2e>
    d658:	26 2b       	or	r18, r22
    d65a:	fc 01       	movw	r30, r24
    d65c:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTF.OUT &= ~(1 << pin);
	}
}
    d65e:	15 c0       	rjmp	.+42     	; 0xd68a <PORTF_set_pin_level+0x68>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    d660:	84 e1       	ldi	r24, 0x14	; 20
    d662:	90 e0       	ldi	r25, 0x00	; 0
    d664:	24 e1       	ldi	r18, 0x14	; 20
    d666:	30 e0       	ldi	r19, 0x00	; 0
    d668:	f9 01       	movw	r30, r18
    d66a:	21 81       	ldd	r18, Z+1	; 0x01
    d66c:	62 2f       	mov	r22, r18
    d66e:	29 81       	ldd	r18, Y+1	; 0x01
    d670:	42 2f       	mov	r20, r18
    d672:	50 e0       	ldi	r21, 0x00	; 0
    d674:	21 e0       	ldi	r18, 0x01	; 1
    d676:	30 e0       	ldi	r19, 0x00	; 0
    d678:	02 c0       	rjmp	.+4      	; 0xd67e <PORTF_set_pin_level+0x5c>
    d67a:	22 0f       	add	r18, r18
    d67c:	33 1f       	adc	r19, r19
    d67e:	4a 95       	dec	r20
    d680:	e2 f7       	brpl	.-8      	; 0xd67a <PORTF_set_pin_level+0x58>
    d682:	20 95       	com	r18
    d684:	26 23       	and	r18, r22
    d686:	fc 01       	movw	r30, r24
    d688:	21 83       	std	Z+1, r18	; 0x01
	}
}
    d68a:	00 00       	nop
    d68c:	0f 90       	pop	r0
    d68e:	0f 90       	pop	r0
    d690:	df 91       	pop	r29
    d692:	cf 91       	pop	r28
    d694:	08 95       	ret

0000d696 <PA0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA0_set_dir(const enum port_dir dir)
{
    d696:	cf 93       	push	r28
    d698:	df 93       	push	r29
    d69a:	1f 92       	push	r1
    d69c:	cd b7       	in	r28, 0x3d	; 61
    d69e:	de b7       	in	r29, 0x3e	; 62
    d6a0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(0, dir);
    d6a2:	69 81       	ldd	r22, Y+1	; 0x01
    d6a4:	80 e0       	ldi	r24, 0x00	; 0
    d6a6:	0e 94 4d 69 	call	0xd29a	; 0xd29a <PORTA_set_pin_dir>
}
    d6aa:	00 00       	nop
    d6ac:	0f 90       	pop	r0
    d6ae:	df 91       	pop	r29
    d6b0:	cf 91       	pop	r28
    d6b2:	08 95       	ret

0000d6b4 <PA0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA0_set_level(const bool level)
{
    d6b4:	cf 93       	push	r28
    d6b6:	df 93       	push	r29
    d6b8:	1f 92       	push	r1
    d6ba:	cd b7       	in	r28, 0x3d	; 61
    d6bc:	de b7       	in	r29, 0x3e	; 62
    d6be:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(0, level);
    d6c0:	69 81       	ldd	r22, Y+1	; 0x01
    d6c2:	80 e0       	ldi	r24, 0x00	; 0
    d6c4:	0e 94 a1 69 	call	0xd342	; 0xd342 <PORTA_set_pin_level>
}
    d6c8:	00 00       	nop
    d6ca:	0f 90       	pop	r0
    d6cc:	df 91       	pop	r29
    d6ce:	cf 91       	pop	r28
    d6d0:	08 95       	ret

0000d6d2 <PA1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    d6d2:	cf 93       	push	r28
    d6d4:	df 93       	push	r29
    d6d6:	1f 92       	push	r1
    d6d8:	cd b7       	in	r28, 0x3d	; 61
    d6da:	de b7       	in	r29, 0x3e	; 62
    d6dc:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(1, pull_mode);
    d6de:	69 81       	ldd	r22, Y+1	; 0x01
    d6e0:	81 e0       	ldi	r24, 0x01	; 1
    d6e2:	0e 94 1c 69 	call	0xd238	; 0xd238 <PORTA_set_pin_pull_mode>
}
    d6e6:	00 00       	nop
    d6e8:	0f 90       	pop	r0
    d6ea:	df 91       	pop	r29
    d6ec:	cf 91       	pop	r28
    d6ee:	08 95       	ret

0000d6f0 <PA1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA1_set_dir(const enum port_dir dir)
{
    d6f0:	cf 93       	push	r28
    d6f2:	df 93       	push	r29
    d6f4:	1f 92       	push	r1
    d6f6:	cd b7       	in	r28, 0x3d	; 61
    d6f8:	de b7       	in	r29, 0x3e	; 62
    d6fa:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(1, dir);
    d6fc:	69 81       	ldd	r22, Y+1	; 0x01
    d6fe:	81 e0       	ldi	r24, 0x01	; 1
    d700:	0e 94 4d 69 	call	0xd29a	; 0xd29a <PORTA_set_pin_dir>
}
    d704:	00 00       	nop
    d706:	0f 90       	pop	r0
    d708:	df 91       	pop	r29
    d70a:	cf 91       	pop	r28
    d70c:	08 95       	ret

0000d70e <PA2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA2_set_dir(const enum port_dir dir)
{
    d70e:	cf 93       	push	r28
    d710:	df 93       	push	r29
    d712:	1f 92       	push	r1
    d714:	cd b7       	in	r28, 0x3d	; 61
    d716:	de b7       	in	r29, 0x3e	; 62
    d718:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
    d71a:	69 81       	ldd	r22, Y+1	; 0x01
    d71c:	82 e0       	ldi	r24, 0x02	; 2
    d71e:	0e 94 4d 69 	call	0xd29a	; 0xd29a <PORTA_set_pin_dir>
}
    d722:	00 00       	nop
    d724:	0f 90       	pop	r0
    d726:	df 91       	pop	r29
    d728:	cf 91       	pop	r28
    d72a:	08 95       	ret

0000d72c <PA2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA2_set_level(const bool level)
{
    d72c:	cf 93       	push	r28
    d72e:	df 93       	push	r29
    d730:	1f 92       	push	r1
    d732:	cd b7       	in	r28, 0x3d	; 61
    d734:	de b7       	in	r29, 0x3e	; 62
    d736:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(2, level);
    d738:	69 81       	ldd	r22, Y+1	; 0x01
    d73a:	82 e0       	ldi	r24, 0x02	; 2
    d73c:	0e 94 a1 69 	call	0xd342	; 0xd342 <PORTA_set_pin_level>
}
    d740:	00 00       	nop
    d742:	0f 90       	pop	r0
    d744:	df 91       	pop	r29
    d746:	cf 91       	pop	r28
    d748:	08 95       	ret

0000d74a <MOTOR_GATE_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void MOTOR_GATE_set_dir(const enum port_dir dir)
{
    d74a:	cf 93       	push	r28
    d74c:	df 93       	push	r29
    d74e:	1f 92       	push	r1
    d750:	cd b7       	in	r28, 0x3d	; 61
    d752:	de b7       	in	r29, 0x3e	; 62
    d754:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(0, dir);
    d756:	69 81       	ldd	r22, Y+1	; 0x01
    d758:	80 e0       	ldi	r24, 0x00	; 0
    d75a:	0e 94 db 69 	call	0xd3b6	; 0xd3b6 <PORTC_set_pin_dir>
}
    d75e:	00 00       	nop
    d760:	0f 90       	pop	r0
    d762:	df 91       	pop	r29
    d764:	cf 91       	pop	r28
    d766:	08 95       	ret

0000d768 <MOTOR_GATE_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void MOTOR_GATE_set_level(const bool level)
{
    d768:	cf 93       	push	r28
    d76a:	df 93       	push	r29
    d76c:	1f 92       	push	r1
    d76e:	cd b7       	in	r28, 0x3d	; 61
    d770:	de b7       	in	r29, 0x3e	; 62
    d772:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(0, level);
    d774:	69 81       	ldd	r22, Y+1	; 0x01
    d776:	80 e0       	ldi	r24, 0x00	; 0
    d778:	0e 94 2f 6a 	call	0xd45e	; 0xd45e <PORTC_set_pin_level>
}
    d77c:	00 00       	nop
    d77e:	0f 90       	pop	r0
    d780:	df 91       	pop	r29
    d782:	cf 91       	pop	r28
    d784:	08 95       	ret

0000d786 <LED_MCLK_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_MCLK_set_dir(const enum port_dir dir)
{
    d786:	cf 93       	push	r28
    d788:	df 93       	push	r29
    d78a:	1f 92       	push	r1
    d78c:	cd b7       	in	r28, 0x3d	; 61
    d78e:	de b7       	in	r29, 0x3e	; 62
    d790:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(1, dir);
    d792:	69 81       	ldd	r22, Y+1	; 0x01
    d794:	81 e0       	ldi	r24, 0x01	; 1
    d796:	0e 94 db 69 	call	0xd3b6	; 0xd3b6 <PORTC_set_pin_dir>
}
    d79a:	00 00       	nop
    d79c:	0f 90       	pop	r0
    d79e:	df 91       	pop	r29
    d7a0:	cf 91       	pop	r28
    d7a2:	08 95       	ret

0000d7a4 <LED_MCLK_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_MCLK_set_level(const bool level)
{
    d7a4:	cf 93       	push	r28
    d7a6:	df 93       	push	r29
    d7a8:	1f 92       	push	r1
    d7aa:	cd b7       	in	r28, 0x3d	; 61
    d7ac:	de b7       	in	r29, 0x3e	; 62
    d7ae:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(1, level);
    d7b0:	69 81       	ldd	r22, Y+1	; 0x01
    d7b2:	81 e0       	ldi	r24, 0x01	; 1
    d7b4:	0e 94 2f 6a 	call	0xd45e	; 0xd45e <PORTC_set_pin_level>
}
    d7b8:	00 00       	nop
    d7ba:	0f 90       	pop	r0
    d7bc:	df 91       	pop	r29
    d7be:	cf 91       	pop	r28
    d7c0:	08 95       	ret

0000d7c2 <LED_CS_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_CS_set_dir(const enum port_dir dir)
{
    d7c2:	cf 93       	push	r28
    d7c4:	df 93       	push	r29
    d7c6:	1f 92       	push	r1
    d7c8:	cd b7       	in	r28, 0x3d	; 61
    d7ca:	de b7       	in	r29, 0x3e	; 62
    d7cc:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(2, dir);
    d7ce:	69 81       	ldd	r22, Y+1	; 0x01
    d7d0:	82 e0       	ldi	r24, 0x02	; 2
    d7d2:	0e 94 db 69 	call	0xd3b6	; 0xd3b6 <PORTC_set_pin_dir>
}
    d7d6:	00 00       	nop
    d7d8:	0f 90       	pop	r0
    d7da:	df 91       	pop	r29
    d7dc:	cf 91       	pop	r28
    d7de:	08 95       	ret

0000d7e0 <LED_CS_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_CS_set_level(const bool level)
{
    d7e0:	cf 93       	push	r28
    d7e2:	df 93       	push	r29
    d7e4:	1f 92       	push	r1
    d7e6:	cd b7       	in	r28, 0x3d	; 61
    d7e8:	de b7       	in	r29, 0x3e	; 62
    d7ea:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(2, level);
    d7ec:	69 81       	ldd	r22, Y+1	; 0x01
    d7ee:	82 e0       	ldi	r24, 0x02	; 2
    d7f0:	0e 94 2f 6a 	call	0xd45e	; 0xd45e <PORTC_set_pin_level>
}
    d7f4:	00 00       	nop
    d7f6:	0f 90       	pop	r0
    d7f8:	df 91       	pop	r29
    d7fa:	cf 91       	pop	r28
    d7fc:	08 95       	ret

0000d7fe <LED_OUT_DAT_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_OUT_DAT_set_dir(const enum port_dir dir)
{
    d7fe:	cf 93       	push	r28
    d800:	df 93       	push	r29
    d802:	1f 92       	push	r1
    d804:	cd b7       	in	r28, 0x3d	; 61
    d806:	de b7       	in	r29, 0x3e	; 62
    d808:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(3, dir);
    d80a:	69 81       	ldd	r22, Y+1	; 0x01
    d80c:	83 e0       	ldi	r24, 0x03	; 3
    d80e:	0e 94 db 69 	call	0xd3b6	; 0xd3b6 <PORTC_set_pin_dir>
}
    d812:	00 00       	nop
    d814:	0f 90       	pop	r0
    d816:	df 91       	pop	r29
    d818:	cf 91       	pop	r28
    d81a:	08 95       	ret

0000d81c <LED_OUT_DAT_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_OUT_DAT_set_level(const bool level)
{
    d81c:	cf 93       	push	r28
    d81e:	df 93       	push	r29
    d820:	1f 92       	push	r1
    d822:	cd b7       	in	r28, 0x3d	; 61
    d824:	de b7       	in	r29, 0x3e	; 62
    d826:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(3, level);
    d828:	69 81       	ldd	r22, Y+1	; 0x01
    d82a:	83 e0       	ldi	r24, 0x03	; 3
    d82c:	0e 94 2f 6a 	call	0xd45e	; 0xd45e <PORTC_set_pin_level>
}
    d830:	00 00       	nop
    d832:	0f 90       	pop	r0
    d834:	df 91       	pop	r29
    d836:	cf 91       	pop	r28
    d838:	08 95       	ret

0000d83a <PD5_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD5_set_pull_mode(const enum port_pull_mode pull_mode)
{
    d83a:	cf 93       	push	r28
    d83c:	df 93       	push	r29
    d83e:	1f 92       	push	r1
    d840:	cd b7       	in	r28, 0x3d	; 61
    d842:	de b7       	in	r29, 0x3e	; 62
    d844:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(5, pull_mode);
    d846:	69 81       	ldd	r22, Y+1	; 0x01
    d848:	85 e0       	ldi	r24, 0x05	; 5
    d84a:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <PORTD_set_pin_pull_mode>
}
    d84e:	00 00       	nop
    d850:	0f 90       	pop	r0
    d852:	df 91       	pop	r29
    d854:	cf 91       	pop	r28
    d856:	08 95       	ret

0000d858 <PD5_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD5_set_isc(const PORT_ISC_t isc)
{
    d858:	cf 93       	push	r28
    d85a:	df 93       	push	r29
    d85c:	1f 92       	push	r1
    d85e:	cd b7       	in	r28, 0x3d	; 61
    d860:	de b7       	in	r29, 0x3e	; 62
    d862:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(5, isc);
    d864:	69 81       	ldd	r22, Y+1	; 0x01
    d866:	85 e0       	ldi	r24, 0x05	; 5
    d868:	0e 94 9a 6a 	call	0xd534	; 0xd534 <PORTD_pin_set_isc>
}
    d86c:	00 00       	nop
    d86e:	0f 90       	pop	r0
    d870:	df 91       	pop	r29
    d872:	cf 91       	pop	r28
    d874:	08 95       	ret

0000d876 <PD6_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD6_set_pull_mode(const enum port_pull_mode pull_mode)
{
    d876:	cf 93       	push	r28
    d878:	df 93       	push	r29
    d87a:	1f 92       	push	r1
    d87c:	cd b7       	in	r28, 0x3d	; 61
    d87e:	de b7       	in	r29, 0x3e	; 62
    d880:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(6, pull_mode);
    d882:	69 81       	ldd	r22, Y+1	; 0x01
    d884:	86 e0       	ldi	r24, 0x06	; 6
    d886:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <PORTD_set_pin_pull_mode>
}
    d88a:	00 00       	nop
    d88c:	0f 90       	pop	r0
    d88e:	df 91       	pop	r29
    d890:	cf 91       	pop	r28
    d892:	08 95       	ret

0000d894 <PD6_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD6_set_isc(const PORT_ISC_t isc)
{
    d894:	cf 93       	push	r28
    d896:	df 93       	push	r29
    d898:	1f 92       	push	r1
    d89a:	cd b7       	in	r28, 0x3d	; 61
    d89c:	de b7       	in	r29, 0x3e	; 62
    d89e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(6, isc);
    d8a0:	69 81       	ldd	r22, Y+1	; 0x01
    d8a2:	86 e0       	ldi	r24, 0x06	; 6
    d8a4:	0e 94 9a 6a 	call	0xd534	; 0xd534 <PORTD_pin_set_isc>
}
    d8a8:	00 00       	nop
    d8aa:	0f 90       	pop	r0
    d8ac:	df 91       	pop	r29
    d8ae:	cf 91       	pop	r28
    d8b0:	08 95       	ret

0000d8b2 <PD7_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD7_set_pull_mode(const enum port_pull_mode pull_mode)
{
    d8b2:	cf 93       	push	r28
    d8b4:	df 93       	push	r29
    d8b6:	1f 92       	push	r1
    d8b8:	cd b7       	in	r28, 0x3d	; 61
    d8ba:	de b7       	in	r29, 0x3e	; 62
    d8bc:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(7, pull_mode);
    d8be:	69 81       	ldd	r22, Y+1	; 0x01
    d8c0:	87 e0       	ldi	r24, 0x07	; 7
    d8c2:	0e 94 69 6a 	call	0xd4d2	; 0xd4d2 <PORTD_set_pin_pull_mode>
}
    d8c6:	00 00       	nop
    d8c8:	0f 90       	pop	r0
    d8ca:	df 91       	pop	r29
    d8cc:	cf 91       	pop	r28
    d8ce:	08 95       	ret

0000d8d0 <PD7_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD7_set_isc(const PORT_ISC_t isc)
{
    d8d0:	cf 93       	push	r28
    d8d2:	df 93       	push	r29
    d8d4:	1f 92       	push	r1
    d8d6:	cd b7       	in	r28, 0x3d	; 61
    d8d8:	de b7       	in	r29, 0x3e	; 62
    d8da:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(7, isc);
    d8dc:	69 81       	ldd	r22, Y+1	; 0x01
    d8de:	87 e0       	ldi	r24, 0x07	; 7
    d8e0:	0e 94 9a 6a 	call	0xd534	; 0xd534 <PORTD_pin_set_isc>
}
    d8e4:	00 00       	nop
    d8e6:	0f 90       	pop	r0
    d8e8:	df 91       	pop	r29
    d8ea:	cf 91       	pop	r28
    d8ec:	08 95       	ret

0000d8ee <LIN_EN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LIN_EN_set_dir(const enum port_dir dir)
{
    d8ee:	cf 93       	push	r28
    d8f0:	df 93       	push	r29
    d8f2:	1f 92       	push	r1
    d8f4:	cd b7       	in	r28, 0x3d	; 61
    d8f6:	de b7       	in	r29, 0x3e	; 62
    d8f8:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_dir(1, dir);
    d8fa:	69 81       	ldd	r22, Y+1	; 0x01
    d8fc:	81 e0       	ldi	r24, 0x01	; 1
    d8fe:	0e 94 bd 6a 	call	0xd57a	; 0xd57a <PORTF_set_pin_dir>
}
    d902:	00 00       	nop
    d904:	0f 90       	pop	r0
    d906:	df 91       	pop	r29
    d908:	cf 91       	pop	r28
    d90a:	08 95       	ret

0000d90c <LIN_EN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LIN_EN_set_level(const bool level)
{
    d90c:	cf 93       	push	r28
    d90e:	df 93       	push	r29
    d910:	1f 92       	push	r1
    d912:	cd b7       	in	r28, 0x3d	; 61
    d914:	de b7       	in	r29, 0x3e	; 62
    d916:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_level(1, level);
    d918:	69 81       	ldd	r22, Y+1	; 0x01
    d91a:	81 e0       	ldi	r24, 0x01	; 1
    d91c:	0e 94 11 6b 	call	0xd622	; 0xd622 <PORTF_set_pin_level>
}
    d920:	00 00       	nop
    d922:	0f 90       	pop	r0
    d924:	df 91       	pop	r29
    d926:	cf 91       	pop	r28
    d928:	08 95       	ret

0000d92a <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    d92a:	cf 93       	push	r28
    d92c:	df 93       	push	r29
    d92e:	00 d0       	rcall	.+0      	; 0xd930 <mcu_init+0x6>
    d930:	00 d0       	rcall	.+0      	; 0xd932 <mcu_init+0x8>
    d932:	cd b7       	in	r28, 0x3d	; 61
    d934:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    d936:	19 82       	std	Y+1, r1	; 0x01
    d938:	12 c0       	rjmp	.+36     	; 0xd95e <mcu_init+0x34>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d93a:	89 81       	ldd	r24, Y+1	; 0x01
    d93c:	88 2f       	mov	r24, r24
    d93e:	90 e0       	ldi	r25, 0x00	; 0
    d940:	80 5f       	subi	r24, 0xF0	; 240
    d942:	9b 4f       	sbci	r25, 0xFB	; 251
    d944:	29 81       	ldd	r18, Y+1	; 0x01
    d946:	22 2f       	mov	r18, r18
    d948:	30 e0       	ldi	r19, 0x00	; 0
    d94a:	20 5f       	subi	r18, 0xF0	; 240
    d94c:	3b 4f       	sbci	r19, 0xFB	; 251
    d94e:	f9 01       	movw	r30, r18
    d950:	20 81       	ld	r18, Z
    d952:	28 60       	ori	r18, 0x08	; 8
    d954:	fc 01       	movw	r30, r24
    d956:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    d958:	89 81       	ldd	r24, Y+1	; 0x01
    d95a:	8f 5f       	subi	r24, 0xFF	; 255
    d95c:	89 83       	std	Y+1, r24	; 0x01
    d95e:	89 81       	ldd	r24, Y+1	; 0x01
    d960:	88 30       	cpi	r24, 0x08	; 8
    d962:	58 f3       	brcs	.-42     	; 0xd93a <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d964:	1a 82       	std	Y+2, r1	; 0x02
    d966:	12 c0       	rjmp	.+36     	; 0xd98c <mcu_init+0x62>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d968:	8a 81       	ldd	r24, Y+2	; 0x02
    d96a:	88 2f       	mov	r24, r24
    d96c:	90 e0       	ldi	r25, 0x00	; 0
    d96e:	80 5b       	subi	r24, 0xB0	; 176
    d970:	9b 4f       	sbci	r25, 0xFB	; 251
    d972:	2a 81       	ldd	r18, Y+2	; 0x02
    d974:	22 2f       	mov	r18, r18
    d976:	30 e0       	ldi	r19, 0x00	; 0
    d978:	20 5b       	subi	r18, 0xB0	; 176
    d97a:	3b 4f       	sbci	r19, 0xFB	; 251
    d97c:	f9 01       	movw	r30, r18
    d97e:	20 81       	ld	r18, Z
    d980:	28 60       	ori	r18, 0x08	; 8
    d982:	fc 01       	movw	r30, r24
    d984:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d986:	8a 81       	ldd	r24, Y+2	; 0x02
    d988:	8f 5f       	subi	r24, 0xFF	; 255
    d98a:	8a 83       	std	Y+2, r24	; 0x02
    d98c:	8a 81       	ldd	r24, Y+2	; 0x02
    d98e:	88 30       	cpi	r24, 0x08	; 8
    d990:	58 f3       	brcs	.-42     	; 0xd968 <mcu_init+0x3e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d992:	1b 82       	std	Y+3, r1	; 0x03
    d994:	12 c0       	rjmp	.+36     	; 0xd9ba <mcu_init+0x90>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d996:	8b 81       	ldd	r24, Y+3	; 0x03
    d998:	88 2f       	mov	r24, r24
    d99a:	90 e0       	ldi	r25, 0x00	; 0
    d99c:	80 59       	subi	r24, 0x90	; 144
    d99e:	9b 4f       	sbci	r25, 0xFB	; 251
    d9a0:	2b 81       	ldd	r18, Y+3	; 0x03
    d9a2:	22 2f       	mov	r18, r18
    d9a4:	30 e0       	ldi	r19, 0x00	; 0
    d9a6:	20 59       	subi	r18, 0x90	; 144
    d9a8:	3b 4f       	sbci	r19, 0xFB	; 251
    d9aa:	f9 01       	movw	r30, r18
    d9ac:	20 81       	ld	r18, Z
    d9ae:	28 60       	ori	r18, 0x08	; 8
    d9b0:	fc 01       	movw	r30, r24
    d9b2:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d9b4:	8b 81       	ldd	r24, Y+3	; 0x03
    d9b6:	8f 5f       	subi	r24, 0xFF	; 255
    d9b8:	8b 83       	std	Y+3, r24	; 0x03
    d9ba:	8b 81       	ldd	r24, Y+3	; 0x03
    d9bc:	88 30       	cpi	r24, 0x08	; 8
    d9be:	58 f3       	brcs	.-42     	; 0xd996 <mcu_init+0x6c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d9c0:	1c 82       	std	Y+4, r1	; 0x04
    d9c2:	12 c0       	rjmp	.+36     	; 0xd9e8 <mcu_init+0xbe>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d9c4:	8c 81       	ldd	r24, Y+4	; 0x04
    d9c6:	88 2f       	mov	r24, r24
    d9c8:	90 e0       	ldi	r25, 0x00	; 0
    d9ca:	80 55       	subi	r24, 0x50	; 80
    d9cc:	9b 4f       	sbci	r25, 0xFB	; 251
    d9ce:	2c 81       	ldd	r18, Y+4	; 0x04
    d9d0:	22 2f       	mov	r18, r18
    d9d2:	30 e0       	ldi	r19, 0x00	; 0
    d9d4:	20 55       	subi	r18, 0x50	; 80
    d9d6:	3b 4f       	sbci	r19, 0xFB	; 251
    d9d8:	f9 01       	movw	r30, r18
    d9da:	20 81       	ld	r18, Z
    d9dc:	28 60       	ori	r18, 0x08	; 8
    d9de:	fc 01       	movw	r30, r24
    d9e0:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d9e2:	8c 81       	ldd	r24, Y+4	; 0x04
    d9e4:	8f 5f       	subi	r24, 0xFF	; 255
    d9e6:	8c 83       	std	Y+4, r24	; 0x04
    d9e8:	8c 81       	ldd	r24, Y+4	; 0x04
    d9ea:	88 30       	cpi	r24, 0x08	; 8
    d9ec:	58 f3       	brcs	.-42     	; 0xd9c4 <mcu_init+0x9a>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    d9ee:	00 00       	nop
    d9f0:	24 96       	adiw	r28, 0x04	; 4
    d9f2:	cd bf       	out	0x3d, r28	; 61
    d9f4:	de bf       	out	0x3e, r29	; 62
    d9f6:	df 91       	pop	r29
    d9f8:	cf 91       	pop	r28
    d9fa:	08 95       	ret

0000d9fc <USART_initialization>:
#include "driver_init.h"
#include <system.h>

/* configure the pins and initialize the registers */
void USART_initialization(void)
{
    d9fc:	cf 93       	push	r28
    d9fe:	df 93       	push	r29
    da00:	cd b7       	in	r28, 0x3d	; 61
    da02:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PA1_set_dir(PORT_DIR_IN);
    da04:	80 e0       	ldi	r24, 0x00	; 0
    da06:	0e 94 78 6b 	call	0xd6f0	; 0xd6f0 <PA1_set_dir>

	PA1_set_pull_mode(
    da0a:	80 e0       	ldi	r24, 0x00	; 0
    da0c:	0e 94 69 6b 	call	0xd6d2	; 0xd6d2 <PA1_set_pull_mode>
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output

	PA0_set_level(
    da10:	80 e0       	ldi	r24, 0x00	; 0
    da12:	0e 94 5a 6b 	call	0xd6b4	; 0xd6b4 <PA0_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);
    da16:	81 e0       	ldi	r24, 0x01	; 1
    da18:	0e 94 4b 6b 	call	0xd696	; 0xd696 <PA0_set_dir>

	USART_init();
    da1c:	0e 94 83 6e 	call	0xdd06	; 0xdd06 <USART_init>
}
    da20:	00 00       	nop
    da22:	df 91       	pop	r29
    da24:	cf 91       	pop	r28
    da26:	08 95       	ret

0000da28 <DAC_0_initialization>:

/* configure pins and initialize registers */
void DAC_0_initialization(void)
{
    da28:	cf 93       	push	r28
    da2a:	df 93       	push	r29
    da2c:	cd b7       	in	r28, 0x3d	; 61
    da2e:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    da30:	84 e0       	ldi	r24, 0x04	; 4
    da32:	0e 94 4a 6c 	call	0xd894	; 0xd894 <PD6_set_isc>
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);
    da36:	80 e0       	ldi	r24, 0x00	; 0
    da38:	0e 94 3b 6c 	call	0xd876	; 0xd876 <PD6_set_pull_mode>

	DAC_0_init();
    da3c:	0e 94 e4 68 	call	0xd1c8	; 0xd1c8 <DAC_0_init>
}
    da40:	00 00       	nop
    da42:	df 91       	pop	r29
    da44:	cf 91       	pop	r28
    da46:	08 95       	ret

0000da48 <ADC_0_initialization>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{
    da48:	cf 93       	push	r28
    da4a:	df 93       	push	r29
    da4c:	cd b7       	in	r28, 0x3d	; 61
    da4e:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    da50:	84 e0       	ldi	r24, 0x04	; 4
    da52:	0e 94 2c 6c 	call	0xd858	; 0xd858 <PD5_set_isc>
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);
    da56:	80 e0       	ldi	r24, 0x00	; 0
    da58:	0e 94 1d 6c 	call	0xd83a	; 0xd83a <PD5_set_pull_mode>

	// Disable digital input buffer
	PD7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    da5c:	84 e0       	ldi	r24, 0x04	; 4
    da5e:	0e 94 68 6c 	call	0xd8d0	; 0xd8d0 <PD7_set_isc>
	// Disable pull-up resistor
	PD7_set_pull_mode(PORT_PULL_OFF);
    da62:	80 e0       	ldi	r24, 0x00	; 0
    da64:	0e 94 59 6c 	call	0xd8b2	; 0xd8b2 <PD7_set_pull_mode>

	ADC_0_init();
    da68:	0e 94 4a 68 	call	0xd094	; 0xd094 <ADC_0_init>
}
    da6c:	00 00       	nop
    da6e:	df 91       	pop	r29
    da70:	cf 91       	pop	r28
    da72:	08 95       	ret

0000da74 <TIMER_0_initialization>:

void TIMER_0_initialization(void)
{
    da74:	cf 93       	push	r28
    da76:	df 93       	push	r29
    da78:	cd b7       	in	r28, 0x3d	; 61
    da7a:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to output

	PA2_set_level(
    da7c:	80 e0       	ldi	r24, 0x00	; 0
    da7e:	0e 94 96 6b 	call	0xd72c	; 0xd72c <PA2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA2_set_dir(PORT_DIR_OUT);
    da82:	81 e0       	ldi	r24, 0x01	; 1
    da84:	0e 94 87 6b 	call	0xd70e	; 0xd70e <PA2_set_dir>

	TIMER_0_init();
    da88:	0e 94 1d 6e 	call	0xdc3a	; 0xdc3a <TIMER_0_init>
}
    da8c:	00 00       	nop
    da8e:	df 91       	pop	r29
    da90:	cf 91       	pop	r28
    da92:	08 95       	ret

0000da94 <FLASH_0_initialization>:

/* Initialize registers */
void FLASH_0_initialization(void)
{
    da94:	cf 93       	push	r28
    da96:	df 93       	push	r29
    da98:	cd b7       	in	r28, 0x3d	; 61
    da9a:	de b7       	in	r29, 0x3e	; 62
	FLASH_0_init();
    da9c:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <FLASH_0_init>
}
    daa0:	00 00       	nop
    daa2:	df 91       	pop	r29
    daa4:	cf 91       	pop	r28
    daa6:	08 95       	ret

0000daa8 <TIMER_2_initialization>:

void TIMER_2_initialization(void)
{
    daa8:	cf 93       	push	r28
    daaa:	df 93       	push	r29
    daac:	cd b7       	in	r28, 0x3d	; 61
    daae:	de b7       	in	r29, 0x3e	; 62

	TIMER_2_init();
    dab0:	0e 94 3f 6e 	call	0xdc7e	; 0xdc7e <TIMER_2_init>
}
    dab4:	00 00       	nop
    dab6:	df 91       	pop	r29
    dab8:	cf 91       	pop	r28
    daba:	08 95       	ret

0000dabc <TIMER_1_initialization>:

void TIMER_1_initialization(void)
{
    dabc:	cf 93       	push	r28
    dabe:	df 93       	push	r29
    dac0:	cd b7       	in	r28, 0x3d	; 61
    dac2:	de b7       	in	r29, 0x3e	; 62

	TIMER_1_init();
    dac4:	0e 94 61 6e 	call	0xdcc2	; 0xdcc2 <TIMER_1_init>
}
    dac8:	00 00       	nop
    daca:	df 91       	pop	r29
    dacc:	cf 91       	pop	r28
    dace:	08 95       	ret

0000dad0 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    dad0:	cf 93       	push	r28
    dad2:	df 93       	push	r29
    dad4:	cd b7       	in	r28, 0x3d	; 61
    dad6:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    dad8:	0e 94 95 6c 	call	0xd92a	; 0xd92a <mcu_init>

	/* PORT setting on PC0 */

	// Set pin direction to output

	MOTOR_GATE_set_level(
    dadc:	80 e0       	ldi	r24, 0x00	; 0
    dade:	0e 94 b4 6b 	call	0xd768	; 0xd768 <MOTOR_GATE_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	MOTOR_GATE_set_dir(PORT_DIR_OUT);
    dae2:	81 e0       	ldi	r24, 0x01	; 1
    dae4:	0e 94 a5 6b 	call	0xd74a	; 0xd74a <MOTOR_GATE_set_dir>

	/* PORT setting on PC1 */

	// Set pin direction to output

	LED_MCLK_set_level(
    dae8:	80 e0       	ldi	r24, 0x00	; 0
    daea:	0e 94 d2 6b 	call	0xd7a4	; 0xd7a4 <LED_MCLK_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_MCLK_set_dir(PORT_DIR_OUT);
    daee:	81 e0       	ldi	r24, 0x01	; 1
    daf0:	0e 94 c3 6b 	call	0xd786	; 0xd786 <LED_MCLK_set_dir>

	/* PORT setting on PC2 */

	// Set pin direction to output

	LED_CS_set_level(
    daf4:	80 e0       	ldi	r24, 0x00	; 0
    daf6:	0e 94 f0 6b 	call	0xd7e0	; 0xd7e0 <LED_CS_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_CS_set_dir(PORT_DIR_OUT);
    dafa:	81 e0       	ldi	r24, 0x01	; 1
    dafc:	0e 94 e1 6b 	call	0xd7c2	; 0xd7c2 <LED_CS_set_dir>

	/* PORT setting on PC3 */

	// Set pin direction to output

	LED_OUT_DAT_set_level(
    db00:	80 e0       	ldi	r24, 0x00	; 0
    db02:	0e 94 0e 6c 	call	0xd81c	; 0xd81c <LED_OUT_DAT_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_OUT_DAT_set_dir(PORT_DIR_OUT);
    db06:	81 e0       	ldi	r24, 0x01	; 1
    db08:	0e 94 ff 6b 	call	0xd7fe	; 0xd7fe <LED_OUT_DAT_set_dir>

	/* PORT setting on PF1 */

	// Set pin direction to output

	LIN_EN_set_level(
    db0c:	81 e0       	ldi	r24, 0x01	; 1
    db0e:	0e 94 86 6c 	call	0xd90c	; 0xd90c <LIN_EN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	LIN_EN_set_dir(PORT_DIR_OUT);
    db12:	81 e0       	ldi	r24, 0x01	; 1
    db14:	0e 94 77 6c 	call	0xd8ee	; 0xd8ee <LIN_EN_set_dir>

	CLKCTRL_init();
    db18:	0e 94 ce 68 	call	0xd19c	; 0xd19c <CLKCTRL_init>

	USART_initialization();
    db1c:	0e 94 fe 6c 	call	0xd9fc	; 0xd9fc <USART_initialization>

	SLPCTRL_init();
    db20:	0e 94 15 6e 	call	0xdc2a	; 0xdc2a <SLPCTRL_init>

	CPUINT_init();
    db24:	0e 94 db 68 	call	0xd1b6	; 0xd1b6 <CPUINT_init>

	DAC_0_initialization();
    db28:	0e 94 14 6d 	call	0xda28	; 0xda28 <DAC_0_initialization>

	ADC_0_initialization();
    db2c:	0e 94 24 6d 	call	0xda48	; 0xda48 <ADC_0_initialization>

	TIMER_0_initialization();
    db30:	0e 94 3a 6d 	call	0xda74	; 0xda74 <TIMER_0_initialization>

	Timer_init();
    db34:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <Timer_init>

	FLASH_0_initialization();
    db38:	0e 94 4a 6d 	call	0xda94	; 0xda94 <FLASH_0_initialization>

	TIMER_2_initialization();
    db3c:	0e 94 54 6d 	call	0xdaa8	; 0xdaa8 <TIMER_2_initialization>

	TIMER_1_initialization();
    db40:	0e 94 5e 6d 	call	0xdabc	; 0xdabc <TIMER_1_initialization>

	VREF_0_init();
    db44:	0e 94 c8 6e 	call	0xdd90	; 0xdd90 <VREF_0_init>

	BOD_init();
    db48:	0e 94 ac 68 	call	0xd158	; 0xd158 <BOD_init>
}
    db4c:	00 00       	nop
    db4e:	df 91       	pop	r29
    db50:	cf 91       	pop	r28
    db52:	08 95       	ret

0000db54 <ccp_write_spm>:
 */
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{
	// Read operation will be stalled by hardware if any write is in progress
	return *(uint8_t *)(EEPROM_START + eeprom_adr);
}
    db54:	cf 93       	push	r28
    db56:	df 93       	push	r29
    db58:	00 d0       	rcall	.+0      	; 0xdb5a <ccp_write_spm+0x6>
    db5a:	1f 92       	push	r1
    db5c:	cd b7       	in	r28, 0x3d	; 61
    db5e:	de b7       	in	r29, 0x3e	; 62
    db60:	89 83       	std	Y+1, r24	; 0x01
    db62:	9a 83       	std	Y+2, r25	; 0x02
    db64:	6b 83       	std	Y+3, r22	; 0x03
    db66:	89 81       	ldd	r24, Y+1	; 0x01
    db68:	9a 81       	ldd	r25, Y+2	; 0x02
    db6a:	4b 81       	ldd	r20, Y+3	; 0x03
    db6c:	6d e9       	ldi	r22, 0x9D	; 157
    db6e:	0e 94 f3 6d 	call	0xdbe6	; 0xdbe6 <protected_write_io>
    db72:	00 00       	nop
    db74:	23 96       	adiw	r28, 0x03	; 3
    db76:	cd bf       	out	0x3d, r28	; 61
    db78:	de bf       	out	0x3e, r29	; 62
    db7a:	df 91       	pop	r29
    db7c:	cf 91       	pop	r28
    db7e:	08 95       	ret

0000db80 <FLASH_0_init>:
    db80:	cf 93       	push	r28
    db82:	df 93       	push	r29
    db84:	cd b7       	in	r28, 0x3d	; 61
    db86:	de b7       	in	r29, 0x3e	; 62
    db88:	80 e0       	ldi	r24, 0x00	; 0
    db8a:	df 91       	pop	r29
    db8c:	cf 91       	pop	r28
    db8e:	08 95       	ret

0000db90 <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
    db90:	cf 93       	push	r28
    db92:	df 93       	push	r29
    db94:	00 d0       	rcall	.+0      	; 0xdb96 <FLASH_0_write_eeprom_byte+0x6>
    db96:	1f 92       	push	r1
    db98:	cd b7       	in	r28, 0x3d	; 61
    db9a:	de b7       	in	r29, 0x3e	; 62
    db9c:	89 83       	std	Y+1, r24	; 0x01
    db9e:	9a 83       	std	Y+2, r25	; 0x02
    dba0:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous operation */
	while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    dba2:	00 00       	nop
    dba4:	80 e0       	ldi	r24, 0x00	; 0
    dba6:	90 e1       	ldi	r25, 0x10	; 16
    dba8:	fc 01       	movw	r30, r24
    dbaa:	82 81       	ldd	r24, Z+2	; 0x02
    dbac:	88 2f       	mov	r24, r24
    dbae:	90 e0       	ldi	r25, 0x00	; 0
    dbb0:	83 70       	andi	r24, 0x03	; 3
    dbb2:	99 27       	eor	r25, r25
    dbb4:	89 2b       	or	r24, r25
    dbb6:	b1 f7       	brne	.-20     	; 0xdba4 <FLASH_0_write_eeprom_byte+0x14>
		;

	/* Program the EEPROM with desired value(s) */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    dbb8:	63 e1       	ldi	r22, 0x13	; 19
    dbba:	80 e0       	ldi	r24, 0x00	; 0
    dbbc:	90 e1       	ldi	r25, 0x10	; 16
    dbbe:	0e 94 aa 6d 	call	0xdb54	; 0xdb54 <ccp_write_spm>

	/* Write byte to EEPROM */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
    dbc2:	89 81       	ldd	r24, Y+1	; 0x01
    dbc4:	9a 81       	ldd	r25, Y+2	; 0x02
    dbc6:	9c 5e       	subi	r25, 0xEC	; 236
    dbc8:	2b 81       	ldd	r18, Y+3	; 0x03
    dbca:	fc 01       	movw	r30, r24
    dbcc:	20 83       	st	Z, r18

	/* Clear the current command */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    dbce:	60 e0       	ldi	r22, 0x00	; 0
    dbd0:	80 e0       	ldi	r24, 0x00	; 0
    dbd2:	90 e1       	ldi	r25, 0x10	; 16
    dbd4:	0e 94 aa 6d 	call	0xdb54	; 0xdb54 <ccp_write_spm>

	return NVM_OK;
    dbd8:	80 e0       	ldi	r24, 0x00	; 0
}
    dbda:	23 96       	adiw	r28, 0x03	; 3
    dbdc:	cd bf       	out	0x3d, r28	; 61
    dbde:	de bf       	out	0x3e, r29	; 62
    dbe0:	df 91       	pop	r29
    dbe2:	cf 91       	pop	r28
    dbe4:	08 95       	ret

0000dbe6 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    dbe6:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    dbe8:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    dbea:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    dbec:	40 83       	st	Z, r20
	ret                             // Return to caller
    dbee:	08 95       	ret

0000dbf0 <Timer_init>:
/**
 * \brief Initialize rtc interface
 * \return Initialization status.
 */
int8_t Timer_init()
{
    dbf0:	cf 93       	push	r28
    dbf2:	df 93       	push	r29
    dbf4:	cd b7       	in	r28, 0x3d	; 61
    dbf6:	de b7       	in	r29, 0x3e	; 62

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    dbf8:	00 00       	nop
    dbfa:	80 e4       	ldi	r24, 0x40	; 64
    dbfc:	91 e0       	ldi	r25, 0x01	; 1
    dbfe:	fc 01       	movw	r30, r24
    dc00:	81 81       	ldd	r24, Z+1	; 0x01
    dc02:	88 23       	and	r24, r24
    dc04:	d1 f7       	brne	.-12     	; 0xdbfa <Timer_init+0xa>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    dc06:	80 e4       	ldi	r24, 0x40	; 64
    dc08:	91 e0       	ldi	r25, 0x01	; 1
    dc0a:	21 e8       	ldi	r18, 0x81	; 129
    dc0c:	fc 01       	movw	r30, r24
    dc0e:	20 83       	st	Z, r18
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    dc10:	80 e4       	ldi	r24, 0x40	; 64
    dc12:	91 e0       	ldi	r25, 0x01	; 1
    dc14:	fc 01       	movw	r30, r24
    dc16:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
    dc18:	80 e4       	ldi	r24, 0x40	; 64
    dc1a:	91 e0       	ldi	r25, 0x01	; 1
    dc1c:	22 e0       	ldi	r18, 0x02	; 2
    dc1e:	fc 01       	movw	r30, r24
    dc20:	22 83       	std	Z+2, r18	; 0x02

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
    dc22:	80 e0       	ldi	r24, 0x00	; 0
}
    dc24:	df 91       	pop	r29
    dc26:	cf 91       	pop	r28
    dc28:	08 95       	ret

0000dc2a <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    dc2a:	cf 93       	push	r28
    dc2c:	df 93       	push	r29
    dc2e:	cd b7       	in	r28, 0x3d	; 61
    dc30:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    dc32:	80 e0       	ldi	r24, 0x00	; 0
}
    dc34:	df 91       	pop	r29
    dc36:	cf 91       	pop	r28
    dc38:	08 95       	ret

0000dc3a <TIMER_0_init>:
 * \brief Initialize tca interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    dc3a:	cf 93       	push	r28
    dc3c:	df 93       	push	r29
    dc3e:	cd b7       	in	r28, 0x3d	; 61
    dc40:	de b7       	in	r29, 0x3e	; 62

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp			/* Auto Lock Update: disabled */
    dc42:	80 e0       	ldi	r24, 0x00	; 0
    dc44:	9a e0       	ldi	r25, 0x0A	; 10
    dc46:	23 e4       	ldi	r18, 0x43	; 67
    dc48:	fc 01       	movw	r30, r24
    dc4a:	21 83       	std	Z+1, r18	; 0x01
	//		 | 0 << TCA_SINGLE_CMP0EN_bp /* Compare 0 Enable: disabled */
	//		 | 0 << TCA_SINGLE_CMP1EN_bp /* Compare 1 Enable: disabled */
	//		 | 0 << TCA_SINGLE_CMP2EN_bp /* Compare 2 Enable: disabled */
	//		 | TCA_SINGLE_WGMODE_NORMAL_gc; /*  */

	TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp	 /* Compare 0 Waveform Output Value: disabled */
    dc4c:	80 e0       	ldi	r24, 0x00	; 0
    dc4e:	9a e0       	ldi	r25, 0x0A	; 10
    dc50:	24 e0       	ldi	r18, 0x04	; 4
    dc52:	fc 01       	movw	r30, r24
    dc54:	22 83       	std	Z+2, r18	; 0x02
	//		 | 0 << TCA_SINGLE_CNTBEI_bp /* Count on Event Input B: disabled */
	//		 | TCA_SINGLE_EVACTA_CNT_POSEDGE_gc /* Count on positive edge event */
	//		 | TCA_SINGLE_EVACTB_UPDOWN_gc; /* Count on prescaled clock. Event controls count direction. Up-count when
	//event line is 0, down-count when event line is 1. */

	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp	/* Compare 0 Interrupt: disabled */
    dc56:	80 e0       	ldi	r24, 0x00	; 0
    dc58:	9a e0       	ldi	r25, 0x0A	; 10
    dc5a:	fc 01       	movw	r30, r24
    dc5c:	12 86       	std	Z+10, r1	; 0x0a
						  | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
						  | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: enabled */
						  | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 1199; /* Period: 0x95f */
    dc5e:	80 e0       	ldi	r24, 0x00	; 0
    dc60:	9a e0       	ldi	r25, 0x0A	; 10
    dc62:	2f ea       	ldi	r18, 0xAF	; 175
    dc64:	34 e0       	ldi	r19, 0x04	; 4
    dc66:	fc 01       	movw	r30, r24
    dc68:	26 a3       	std	Z+38, r18	; 0x26
    dc6a:	37 a3       	std	Z+39, r19	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc	   /* System Clock */
    dc6c:	80 e0       	ldi	r24, 0x00	; 0
    dc6e:	9a e0       	ldi	r25, 0x0A	; 10
    dc70:	21 e0       	ldi	r18, 0x01	; 1
    dc72:	fc 01       	movw	r30, r24
    dc74:	20 83       	st	Z, r18
						| 1 << TCA_SINGLE_ENABLE_bp	   /* Module Enable: disabled */
						| 0 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: disabled */

	return 0;
    dc76:	80 e0       	ldi	r24, 0x00	; 0
}
    dc78:	df 91       	pop	r29
    dc7a:	cf 91       	pop	r28
    dc7c:	08 95       	ret

0000dc7e <TIMER_2_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_2_init()
{
    dc7e:	cf 93       	push	r28
    dc80:	df 93       	push	r29
    dc82:	cd b7       	in	r28, 0x3d	; 61
    dc84:	de b7       	in	r29, 0x3e	; 62

	TCB0.CCMP = 0x2edf; /* Compare or Capture: 0x2edf */
    dc86:	80 e0       	ldi	r24, 0x00	; 0
    dc88:	9b e0       	ldi	r25, 0x0B	; 11
    dc8a:	2f ed       	ldi	r18, 0xDF	; 223
    dc8c:	3e e2       	ldi	r19, 0x2E	; 46
    dc8e:	fc 01       	movw	r30, r24
    dc90:	24 87       	std	Z+12, r18	; 0x0c
    dc92:	35 87       	std	Z+13, r19	; 0x0d

	TCB0.CNT = 0x0; /* Count: 0x0 */
    dc94:	80 e0       	ldi	r24, 0x00	; 0
    dc96:	9b e0       	ldi	r25, 0x0B	; 11
    dc98:	fc 01       	movw	r30, r24
    dc9a:	12 86       	std	Z+10, r1	; 0x0a
    dc9c:	13 86       	std	Z+11, r1	; 0x0b

	TCB0.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    dc9e:	80 e0       	ldi	r24, 0x00	; 0
    dca0:	9b e0       	ldi	r25, 0x0B	; 11
    dca2:	fc 01       	movw	r30, r24
    dca4:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    dca6:	80 e0       	ldi	r24, 0x00	; 0
    dca8:	9b e0       	ldi	r25, 0x0B	; 11
    dcaa:	21 e0       	ldi	r18, 0x01	; 1
    dcac:	fc 01       	movw	r30, r24
    dcae:	25 83       	std	Z+5, r18	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV2_gc /* CLK_PER */
    dcb0:	80 e0       	ldi	r24, 0x00	; 0
    dcb2:	9b e0       	ldi	r25, 0x0B	; 11
    dcb4:	23 e0       	ldi	r18, 0x03	; 3
    dcb6:	fc 01       	movw	r30, r24
    dcb8:	20 83       	st	Z, r18
			 | 1 << TCB_ENABLE_bp /* Enable: disabled */
			 | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
			 | 0 << TCB_SYNCUPD_bp /* Synchronize Update: disabled */
			 | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    dcba:	80 e0       	ldi	r24, 0x00	; 0
}
    dcbc:	df 91       	pop	r29
    dcbe:	cf 91       	pop	r28
    dcc0:	08 95       	ret

0000dcc2 <TIMER_1_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{
    dcc2:	cf 93       	push	r28
    dcc4:	df 93       	push	r29
    dcc6:	cd b7       	in	r28, 0x3d	; 61
    dcc8:	de b7       	in	r29, 0x3e	; 62

	TCB1.CCMP = 8500; /* Compare or Capture: 0x5dbf */
    dcca:	80 e1       	ldi	r24, 0x10	; 16
    dccc:	9b e0       	ldi	r25, 0x0B	; 11
    dcce:	24 e3       	ldi	r18, 0x34	; 52
    dcd0:	31 e2       	ldi	r19, 0x21	; 33
    dcd2:	fc 01       	movw	r30, r24
    dcd4:	24 87       	std	Z+12, r18	; 0x0c
    dcd6:	35 87       	std	Z+13, r19	; 0x0d

	TCB1.CNT = 0x0; /* Count: 0x0 */
    dcd8:	80 e1       	ldi	r24, 0x10	; 16
    dcda:	9b e0       	ldi	r25, 0x0B	; 11
    dcdc:	fc 01       	movw	r30, r24
    dcde:	12 86       	std	Z+10, r1	; 0x0a
    dce0:	13 86       	std	Z+11, r1	; 0x0b

	TCB1.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    dce2:	80 e1       	ldi	r24, 0x10	; 16
    dce4:	9b e0       	ldi	r25, 0x0B	; 11
    dce6:	fc 01       	movw	r30, r24
    dce8:	11 82       	std	Z+1, r1	; 0x01

	// TCB1.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    dcea:	80 e1       	ldi	r24, 0x10	; 16
    dcec:	9b e0       	ldi	r25, 0x0B	; 11
    dcee:	21 e0       	ldi	r18, 0x01	; 1
    dcf0:	fc 01       	movw	r30, r24
    dcf2:	25 83       	std	Z+5, r18	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    dcf4:	80 e1       	ldi	r24, 0x10	; 16
    dcf6:	9b e0       	ldi	r25, 0x0B	; 11
    dcf8:	21 e0       	ldi	r18, 0x01	; 1
    dcfa:	fc 01       	movw	r30, r24
    dcfc:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    dcfe:	80 e0       	ldi	r24, 0x00	; 0
}
    dd00:	df 91       	pop	r29
    dd02:	cf 91       	pop	r28
    dd04:	08 95       	ret

0000dd06 <USART_init>:
void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
		;
	USART0.TXDATAL = data;
}
    dd06:	cf 93       	push	r28
    dd08:	df 93       	push	r29
    dd0a:	cd b7       	in	r28, 0x3d	; 61
    dd0c:	de b7       	in	r29, 0x3e	; 62
    dd0e:	80 e0       	ldi	r24, 0x00	; 0
    dd10:	98 e0       	ldi	r25, 0x08	; 8
    dd12:	28 e8       	ldi	r18, 0x88	; 136
    dd14:	33 e1       	ldi	r19, 0x13	; 19
    dd16:	fc 01       	movw	r30, r24
    dd18:	20 87       	std	Z+8, r18	; 0x08
    dd1a:	31 87       	std	Z+9, r19	; 0x09
    dd1c:	80 e0       	ldi	r24, 0x00	; 0
    dd1e:	98 e0       	ldi	r25, 0x08	; 8
    dd20:	24 e8       	ldi	r18, 0x84	; 132
    dd22:	fc 01       	movw	r30, r24
    dd24:	25 83       	std	Z+5, r18	; 0x05
    dd26:	80 e0       	ldi	r24, 0x00	; 0
    dd28:	98 e0       	ldi	r25, 0x08	; 8
    dd2a:	26 ec       	ldi	r18, 0xC6	; 198
    dd2c:	fc 01       	movw	r30, r24
    dd2e:	26 83       	std	Z+6, r18	; 0x06
    dd30:	80 e0       	ldi	r24, 0x00	; 0
    dd32:	df 91       	pop	r29
    dd34:	cf 91       	pop	r28
    dd36:	08 95       	ret

0000dd38 <USART0_Read>:

size_t USART0_Read(uint8_t * rDATA)
{
    dd38:	cf 93       	push	r28
    dd3a:	df 93       	push	r29
    dd3c:	00 d0       	rcall	.+0      	; 0xdd3e <USART0_Read+0x6>
    dd3e:	cd b7       	in	r28, 0x3d	; 61
    dd40:	de b7       	in	r29, 0x3e	; 62
    dd42:	89 83       	std	Y+1, r24	; 0x01
    dd44:	9a 83       	std	Y+2, r25	; 0x02
	*rDATA = USART0.RXDATAL;
    dd46:	80 e0       	ldi	r24, 0x00	; 0
    dd48:	98 e0       	ldi	r25, 0x08	; 8
    dd4a:	fc 01       	movw	r30, r24
    dd4c:	20 81       	ld	r18, Z
    dd4e:	89 81       	ldd	r24, Y+1	; 0x01
    dd50:	9a 81       	ldd	r25, Y+2	; 0x02
    dd52:	fc 01       	movw	r30, r24
    dd54:	20 83       	st	Z, r18
	return 0;
    dd56:	80 e0       	ldi	r24, 0x00	; 0
    dd58:	90 e0       	ldi	r25, 0x00	; 0
}
    dd5a:	0f 90       	pop	r0
    dd5c:	0f 90       	pop	r0
    dd5e:	df 91       	pop	r29
    dd60:	cf 91       	pop	r28
    dd62:	08 95       	ret

0000dd64 <USART0_Send>:

size_t USART0_Send(uint8_t * tDATA)
{
    dd64:	cf 93       	push	r28
    dd66:	df 93       	push	r29
    dd68:	00 d0       	rcall	.+0      	; 0xdd6a <USART0_Send+0x6>
    dd6a:	cd b7       	in	r28, 0x3d	; 61
    dd6c:	de b7       	in	r29, 0x3e	; 62
    dd6e:	89 83       	std	Y+1, r24	; 0x01
    dd70:	9a 83       	std	Y+2, r25	; 0x02
	USART0.TXDATAL = *tDATA;
    dd72:	80 e0       	ldi	r24, 0x00	; 0
    dd74:	98 e0       	ldi	r25, 0x08	; 8
    dd76:	29 81       	ldd	r18, Y+1	; 0x01
    dd78:	3a 81       	ldd	r19, Y+2	; 0x02
    dd7a:	f9 01       	movw	r30, r18
    dd7c:	20 81       	ld	r18, Z
    dd7e:	fc 01       	movw	r30, r24
    dd80:	22 83       	std	Z+2, r18	; 0x02
	return 0;
    dd82:	80 e0       	ldi	r24, 0x00	; 0
    dd84:	90 e0       	ldi	r25, 0x00	; 0
}
    dd86:	0f 90       	pop	r0
    dd88:	0f 90       	pop	r0
    dd8a:	df 91       	pop	r29
    dd8c:	cf 91       	pop	r28
    dd8e:	08 95       	ret

0000dd90 <VREF_0_init>:
/**
 * \brief Initialize vref interface
 * \return Initialization status.
 */
int8_t VREF_0_init()
{
    dd90:	cf 93       	push	r28
    dd92:	df 93       	push	r29
    dd94:	cd b7       	in	r28, 0x3d	; 61
    dd96:	de b7       	in	r29, 0x3e	; 62

	VREF.ADC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for ADC0: enabled */
    dd98:	80 ea       	ldi	r24, 0xA0	; 160
    dd9a:	90 e0       	ldi	r25, 0x00	; 0
    dd9c:	25 e8       	ldi	r18, 0x85	; 133
    dd9e:	fc 01       	movw	r30, r24
    dda0:	20 83       	st	Z, r18
	               | VREF_REFSEL_VDD_gc; /* VDD as reference */

	VREF.DAC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: enabled */
    dda2:	80 ea       	ldi	r24, 0xA0	; 160
    dda4:	90 e0       	ldi	r25, 0x00	; 0
    dda6:	25 e8       	ldi	r18, 0x85	; 133
    dda8:	fc 01       	movw	r30, r24
    ddaa:	22 83       	std	Z+2, r18	; 0x02
	               | VREF_REFSEL_VDD_gc; /* VDD as reference */

	// VREF.ACREF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	return 0;
    ddac:	80 e0       	ldi	r24, 0x00	; 0
}
    ddae:	df 91       	pop	r29
    ddb0:	cf 91       	pop	r28
    ddb2:	08 95       	ret

0000ddb4 <check_for_aks_block>:
    ddb4:	cf 92       	push	r12
    ddb6:	df 92       	push	r13
    ddb8:	ff 92       	push	r15
    ddba:	0f 93       	push	r16
    ddbc:	1f 93       	push	r17
    ddbe:	cf 93       	push	r28
    ddc0:	df 93       	push	r29
    ddc2:	ec 01       	movw	r28, r24
    ddc4:	ae 81       	ldd	r26, Y+6	; 0x06
    ddc6:	bf 81       	ldd	r27, Y+7	; 0x07
    ddc8:	eb 01       	movw	r28, r22
    ddca:	cc 0f       	add	r28, r28
    ddcc:	dd 1f       	adc	r29, r29
    ddce:	c6 0f       	add	r28, r22
    ddd0:	d7 1f       	adc	r29, r23
    ddd2:	ca 0f       	add	r28, r26
    ddd4:	db 1f       	adc	r29, r27
    ddd6:	fa 80       	ldd	r15, Y+2	; 0x02
    ddd8:	fc 01       	movw	r30, r24
    ddda:	44 81       	ldd	r20, Z+4	; 0x04
    dddc:	55 81       	ldd	r21, Z+5	; 0x05
    ddde:	e6 e0       	ldi	r30, 0x06	; 6
    dde0:	e6 9f       	mul	r30, r22
    dde2:	90 01       	movw	r18, r0
    dde4:	e7 9f       	mul	r30, r23
    dde6:	30 0d       	add	r19, r0
    dde8:	11 24       	eor	r1, r1
    ddea:	8a 01       	movw	r16, r20
    ddec:	02 0f       	add	r16, r18
    ddee:	13 1f       	adc	r17, r19
    ddf0:	f8 01       	movw	r30, r16
    ddf2:	22 81       	ldd	r18, Z+2	; 0x02
    ddf4:	33 81       	ldd	r19, Z+3	; 0x03
    ddf6:	f9 01       	movw	r30, r18
    ddf8:	21 81       	ldd	r18, Z+1	; 0x01
    ddfa:	32 81       	ldd	r19, Z+2	; 0x02
    ddfc:	f8 01       	movw	r30, r16
    ddfe:	04 81       	ldd	r16, Z+4	; 0x04
    de00:	15 81       	ldd	r17, Z+5	; 0x05
    de02:	20 1b       	sub	r18, r16
    de04:	31 0b       	sbc	r19, r17
    de06:	e8 81       	ld	r30, Y
    de08:	2e 1b       	sub	r18, r30
    de0a:	31 09       	sbc	r19, r1
    de0c:	ec 01       	movw	r28, r24
    de0e:	ea 81       	ldd	r30, Y+2	; 0x02
    de10:	fb 81       	ldd	r31, Y+3	; 0x03
    de12:	00 81       	ld	r16, Z
    de14:	11 81       	ldd	r17, Z+1	; 0x01
    de16:	fa 01       	movw	r30, r20
    de18:	40 e0       	ldi	r20, 0x00	; 0
    de1a:	50 e0       	ldi	r21, 0x00	; 0
    de1c:	40 17       	cp	r20, r16
    de1e:	51 07       	cpc	r21, r17
    de20:	39 f1       	breq	.+78     	; 0xde70 <check_for_aks_block+0xbc>
    de22:	46 17       	cp	r20, r22
    de24:	57 07       	cpc	r21, r23
    de26:	f9 f0       	breq	.+62     	; 0xde66 <check_for_aks_block+0xb2>
    de28:	12 96       	adiw	r26, 0x02	; 2
    de2a:	8c 91       	ld	r24, X
    de2c:	12 97       	sbiw	r26, 0x02	; 2
    de2e:	f8 12       	cpse	r15, r24
    de30:	1a c0       	rjmp	.+52     	; 0xde66 <check_for_aks_block+0xb2>
    de32:	80 81       	ld	r24, Z
    de34:	85 58       	subi	r24, 0x85	; 133
    de36:	82 30       	cpi	r24, 0x02	; 2
    de38:	e8 f0       	brcs	.+58     	; 0xde74 <check_for_aks_block+0xc0>
    de3a:	c4 80       	ldd	r12, Z+4	; 0x04
    de3c:	d5 80       	ldd	r13, Z+5	; 0x05
    de3e:	82 81       	ldd	r24, Z+2	; 0x02
    de40:	93 81       	ldd	r25, Z+3	; 0x03
    de42:	ec 01       	movw	r28, r24
    de44:	89 81       	ldd	r24, Y+1	; 0x01
    de46:	9a 81       	ldd	r25, Y+2	; 0x02
    de48:	c8 16       	cp	r12, r24
    de4a:	d9 06       	cpc	r13, r25
    de4c:	60 f4       	brcc	.+24     	; 0xde66 <check_for_aks_block+0xb2>
    de4e:	8c 19       	sub	r24, r12
    de50:	9d 09       	sbc	r25, r13
    de52:	cc 91       	ld	r28, X
    de54:	d0 e0       	ldi	r29, 0x00	; 0
    de56:	c8 17       	cp	r28, r24
    de58:	d9 07       	cpc	r29, r25
    de5a:	28 f4       	brcc	.+10     	; 0xde66 <check_for_aks_block+0xb2>
    de5c:	8c 1b       	sub	r24, r28
    de5e:	9d 0b       	sbc	r25, r29
    de60:	28 17       	cp	r18, r24
    de62:	39 07       	cpc	r19, r25
    de64:	38 f0       	brcs	.+14     	; 0xde74 <check_for_aks_block+0xc0>
    de66:	4f 5f       	subi	r20, 0xFF	; 255
    de68:	5f 4f       	sbci	r21, 0xFF	; 255
    de6a:	13 96       	adiw	r26, 0x03	; 3
    de6c:	36 96       	adiw	r30, 0x06	; 6
    de6e:	d6 cf       	rjmp	.-84     	; 0xde1c <check_for_aks_block+0x68>
    de70:	80 e0       	ldi	r24, 0x00	; 0
    de72:	01 c0       	rjmp	.+2      	; 0xde76 <check_for_aks_block+0xc2>
    de74:	81 e0       	ldi	r24, 0x01	; 1
    de76:	df 91       	pop	r29
    de78:	cf 91       	pop	r28
    de7a:	1f 91       	pop	r17
    de7c:	0f 91       	pop	r16
    de7e:	ff 90       	pop	r15
    de80:	df 90       	pop	r13
    de82:	cf 90       	pop	r12
    de84:	08 95       	ret

0000de86 <qtm_update_qtlib_timer>:
    de86:	20 91 3e 46 	lds	r18, 0x463E	; 0x80463e <qtm_local_ms_timecount>
    de8a:	30 91 3f 46 	lds	r19, 0x463F	; 0x80463f <qtm_local_ms_timecount+0x1>
    de8e:	82 0f       	add	r24, r18
    de90:	93 1f       	adc	r25, r19
    de92:	80 93 3e 46 	sts	0x463E, r24	; 0x80463e <qtm_local_ms_timecount>
    de96:	90 93 3f 46 	sts	0x463F, r25	; 0x80463f <qtm_local_ms_timecount+0x1>
    de9a:	08 95       	ret

0000de9c <qtm_init_sensor_key>:
    de9c:	00 97       	sbiw	r24, 0x00	; 0
    de9e:	d9 f0       	breq	.+54     	; 0xded6 <qtm_init_sensor_key+0x3a>
    dea0:	41 15       	cp	r20, r1
    dea2:	51 05       	cpc	r21, r1
    dea4:	c1 f0       	breq	.+48     	; 0xded6 <qtm_init_sensor_key+0x3a>
    dea6:	26 e0       	ldi	r18, 0x06	; 6
    dea8:	62 9f       	mul	r22, r18
    deaa:	b0 01       	movw	r22, r0
    deac:	11 24       	eor	r1, r1
    deae:	dc 01       	movw	r26, r24
    deb0:	14 96       	adiw	r26, 0x04	; 4
    deb2:	ed 91       	ld	r30, X+
    deb4:	fc 91       	ld	r31, X
    deb6:	15 97       	sbiw	r26, 0x05	; 5
    deb8:	e6 0f       	add	r30, r22
    deba:	f7 1f       	adc	r31, r23
    debc:	21 e0       	ldi	r18, 0x01	; 1
    debe:	20 83       	st	Z, r18
    dec0:	14 96       	adiw	r26, 0x04	; 4
    dec2:	8d 91       	ld	r24, X+
    dec4:	9c 91       	ld	r25, X
    dec6:	15 97       	sbiw	r26, 0x05	; 5
    dec8:	fc 01       	movw	r30, r24
    deca:	e6 0f       	add	r30, r22
    decc:	f7 1f       	adc	r31, r23
    dece:	42 83       	std	Z+2, r20	; 0x02
    ded0:	53 83       	std	Z+3, r21	; 0x03
    ded2:	80 e0       	ldi	r24, 0x00	; 0
    ded4:	08 95       	ret
    ded6:	8b e0       	ldi	r24, 0x0B	; 11
    ded8:	08 95       	ret

0000deda <qtm_key_sensors_process>:
    deda:	2f 92       	push	r2
    dedc:	3f 92       	push	r3
    dede:	4f 92       	push	r4
    dee0:	5f 92       	push	r5
    dee2:	6f 92       	push	r6
    dee4:	7f 92       	push	r7
    dee6:	8f 92       	push	r8
    dee8:	9f 92       	push	r9
    deea:	af 92       	push	r10
    deec:	bf 92       	push	r11
    deee:	cf 92       	push	r12
    def0:	df 92       	push	r13
    def2:	ef 92       	push	r14
    def4:	ff 92       	push	r15
    def6:	0f 93       	push	r16
    def8:	1f 93       	push	r17
    defa:	cf 93       	push	r28
    defc:	df 93       	push	r29
    defe:	00 97       	sbiw	r24, 0x00	; 0
    df00:	09 f4       	brne	.+2      	; 0xdf04 <qtm_key_sensors_process+0x2a>
    df02:	7e c3       	rjmp	.+1788   	; 0xe600 <qtm_key_sensors_process+0x726>
    df04:	ec 01       	movw	r28, r24
    df06:	a1 2c       	mov	r10, r1
    df08:	b1 2c       	mov	r11, r1
    df0a:	81 2c       	mov	r8, r1
    df0c:	91 2c       	mov	r9, r1
    df0e:	21 2c       	mov	r2, r1
    df10:	d1 2c       	mov	r13, r1
    df12:	55 24       	eor	r5, r5
    df14:	53 94       	inc	r5
    df16:	33 e0       	ldi	r19, 0x03	; 3
    df18:	c3 2e       	mov	r12, r19
    df1a:	45 e8       	ldi	r20, 0x85	; 133
    df1c:	64 2e       	mov	r6, r20
    df1e:	56 e8       	ldi	r21, 0x86	; 134
    df20:	75 2e       	mov	r7, r21
    df22:	62 e0       	ldi	r22, 0x02	; 2
    df24:	36 2e       	mov	r3, r22
    df26:	78 e0       	ldi	r23, 0x08	; 8
    df28:	47 2e       	mov	r4, r23
    df2a:	ea 81       	ldd	r30, Y+2	; 0x02
    df2c:	fb 81       	ldd	r31, Y+3	; 0x03
    df2e:	80 81       	ld	r24, Z
    df30:	91 81       	ldd	r25, Z+1	; 0x01
    df32:	88 16       	cp	r8, r24
    df34:	99 06       	cpc	r9, r25
    df36:	08 f0       	brcs	.+2      	; 0xdf3a <qtm_key_sensors_process+0x60>
    df38:	a6 c1       	rjmp	.+844    	; 0xe286 <qtm_key_sensors_process+0x3ac>
    df3a:	75 01       	movw	r14, r10
    df3c:	ee 0c       	add	r14, r14
    df3e:	ff 1c       	adc	r15, r15
    df40:	ec 81       	ldd	r30, Y+4	; 0x04
    df42:	fd 81       	ldd	r31, Y+5	; 0x05
    df44:	ee 0d       	add	r30, r14
    df46:	ff 1d       	adc	r31, r15
    df48:	a2 81       	ldd	r26, Z+2	; 0x02
    df4a:	b3 81       	ldd	r27, Z+3	; 0x03
    df4c:	9c 91       	ld	r25, X
    df4e:	9e 71       	andi	r25, 0x1E	; 30
    df50:	09 f0       	breq	.+2      	; 0xdf54 <qtm_key_sensors_process+0x7a>
    df52:	50 82       	st	Z, r5
    df54:	0c 81       	ldd	r16, Y+4	; 0x04
    df56:	1d 81       	ldd	r17, Y+5	; 0x05
    df58:	0e 0d       	add	r16, r14
    df5a:	1f 1d       	adc	r17, r15
    df5c:	d8 01       	movw	r26, r16
    df5e:	8c 91       	ld	r24, X
    df60:	84 30       	cpi	r24, 0x04	; 4
    df62:	09 f4       	brne	.+2      	; 0xdf66 <qtm_key_sensors_process+0x8c>
    df64:	9e c0       	rjmp	.+316    	; 0xe0a2 <qtm_key_sensors_process+0x1c8>
    df66:	38 f4       	brcc	.+14     	; 0xdf76 <qtm_key_sensors_process+0x9c>
    df68:	82 30       	cpi	r24, 0x02	; 2
    df6a:	d1 f0       	breq	.+52     	; 0xdfa0 <qtm_key_sensors_process+0xc6>
    df6c:	08 f0       	brcs	.+2      	; 0xdf70 <qtm_key_sensors_process+0x96>
    df6e:	45 c0       	rjmp	.+138    	; 0xdffa <qtm_key_sensors_process+0x120>
    df70:	81 30       	cpi	r24, 0x01	; 1
    df72:	59 f0       	breq	.+22     	; 0xdf8a <qtm_key_sensors_process+0xb0>
    df74:	81 c1       	rjmp	.+770    	; 0xe278 <qtm_key_sensors_process+0x39e>
    df76:	85 38       	cpi	r24, 0x85	; 133
    df78:	09 f4       	brne	.+2      	; 0xdf7c <qtm_key_sensors_process+0xa2>
    df7a:	bf c0       	rjmp	.+382    	; 0xe0fa <qtm_key_sensors_process+0x220>
    df7c:	86 38       	cpi	r24, 0x86	; 134
    df7e:	09 f4       	brne	.+2      	; 0xdf82 <qtm_key_sensors_process+0xa8>
    df80:	f5 c0       	rjmp	.+490    	; 0xe16c <qtm_key_sensors_process+0x292>
    df82:	87 30       	cpi	r24, 0x07	; 7
    df84:	09 f0       	breq	.+2      	; 0xdf88 <qtm_key_sensors_process+0xae>
    df86:	78 c1       	rjmp	.+752    	; 0xe278 <qtm_key_sensors_process+0x39e>
    df88:	36 c1       	rjmp	.+620    	; 0xe1f6 <qtm_key_sensors_process+0x31c>
    df8a:	91 11       	cpse	r25, r1
    df8c:	67 c1       	rjmp	.+718    	; 0xe25c <qtm_key_sensors_process+0x382>
    df8e:	f8 01       	movw	r30, r16
    df90:	30 82       	st	Z, r3
    df92:	8c 81       	ldd	r24, Y+4	; 0x04
    df94:	9d 81       	ldd	r25, Y+5	; 0x05
    df96:	fc 01       	movw	r30, r24
    df98:	ee 0d       	add	r30, r14
    df9a:	ff 1d       	adc	r31, r15
    df9c:	41 82       	std	Z+1, r4	; 0x01
    df9e:	5e c1       	rjmp	.+700    	; 0xe25c <qtm_key_sensors_process+0x382>
    dfa0:	d8 01       	movw	r26, r16
    dfa2:	11 96       	adiw	r26, 0x01	; 1
    dfa4:	2c 91       	ld	r18, X
    dfa6:	11 97       	sbiw	r26, 0x01	; 1
    dfa8:	22 23       	and	r18, r18
    dfaa:	29 f1       	breq	.+74     	; 0xdff6 <qtm_key_sensors_process+0x11c>
    dfac:	12 96       	adiw	r26, 0x02	; 2
    dfae:	ed 91       	ld	r30, X+
    dfb0:	fc 91       	ld	r31, X
    dfb2:	13 97       	sbiw	r26, 0x03	; 3
    dfb4:	25 30       	cpi	r18, 0x05	; 5
    dfb6:	18 f0       	brcs	.+6      	; 0xdfbe <qtm_key_sensors_process+0xe4>
    dfb8:	81 81       	ldd	r24, Z+1	; 0x01
    dfba:	92 81       	ldd	r25, Z+2	; 0x02
    dfbc:	0e c0       	rjmp	.+28     	; 0xdfda <qtm_key_sensors_process+0x100>
    dfbe:	d8 01       	movw	r26, r16
    dfc0:	14 96       	adiw	r26, 0x04	; 4
    dfc2:	8d 91       	ld	r24, X+
    dfc4:	9c 91       	ld	r25, X
    dfc6:	15 97       	sbiw	r26, 0x05	; 5
    dfc8:	41 81       	ldd	r20, Z+1	; 0x01
    dfca:	52 81       	ldd	r21, Z+2	; 0x02
    dfcc:	84 17       	cp	r24, r20
    dfce:	95 07       	cpc	r25, r21
    dfd0:	69 f0       	breq	.+26     	; 0xdfec <qtm_key_sensors_process+0x112>
    dfd2:	48 17       	cp	r20, r24
    dfd4:	59 07       	cpc	r21, r25
    dfd6:	30 f4       	brcc	.+12     	; 0xdfe4 <qtm_key_sensors_process+0x10a>
    dfd8:	01 97       	sbiw	r24, 0x01	; 1
    dfda:	14 96       	adiw	r26, 0x04	; 4
    dfdc:	8d 93       	st	X+, r24
    dfde:	9c 93       	st	X, r25
    dfe0:	15 97       	sbiw	r26, 0x05	; 5
    dfe2:	04 c0       	rjmp	.+8      	; 0xdfec <qtm_key_sensors_process+0x112>
    dfe4:	01 96       	adiw	r24, 0x01	; 1
    dfe6:	f8 01       	movw	r30, r16
    dfe8:	84 83       	std	Z+4, r24	; 0x04
    dfea:	95 83       	std	Z+5, r25	; 0x05
    dfec:	21 50       	subi	r18, 0x01	; 1
    dfee:	d8 01       	movw	r26, r16
    dff0:	11 96       	adiw	r26, 0x01	; 1
    dff2:	2c 93       	st	X, r18
    dff4:	33 c1       	rjmp	.+614    	; 0xe25c <qtm_key_sensors_process+0x382>
    dff6:	f8 01       	movw	r30, r16
    dff8:	2d c1       	rjmp	.+602    	; 0xe254 <qtm_key_sensors_process+0x37a>
    dffa:	d8 01       	movw	r26, r16
    dffc:	14 96       	adiw	r26, 0x04	; 4
    dffe:	2d 91       	ld	r18, X+
    e000:	3c 91       	ld	r19, X
    e002:	15 97       	sbiw	r26, 0x05	; 5
    e004:	12 96       	adiw	r26, 0x02	; 2
    e006:	ed 91       	ld	r30, X+
    e008:	fc 91       	ld	r31, X
    e00a:	13 97       	sbiw	r26, 0x03	; 3
    e00c:	41 81       	ldd	r20, Z+1	; 0x01
    e00e:	52 81       	ldd	r21, Z+2	; 0x02
    e010:	24 17       	cp	r18, r20
    e012:	35 07       	cpc	r19, r21
    e014:	09 f4       	brne	.+2      	; 0xe018 <qtm_key_sensors_process+0x13e>
    e016:	30 c1       	rjmp	.+608    	; 0xe278 <qtm_key_sensors_process+0x39e>
    e018:	8e 81       	ldd	r24, Y+6	; 0x06
    e01a:	9f 81       	ldd	r25, Y+7	; 0x07
    e01c:	42 17       	cp	r20, r18
    e01e:	53 07       	cpc	r21, r19
    e020:	f8 f4       	brcc	.+62     	; 0xe060 <qtm_key_sensors_process+0x186>
    e022:	ea 81       	ldd	r30, Y+2	; 0x02
    e024:	fb 81       	ldd	r31, Y+3	; 0x03
    e026:	24 1b       	sub	r18, r20
    e028:	35 0b       	sbc	r19, r21
    e02a:	dc 01       	movw	r26, r24
    e02c:	aa 0d       	add	r26, r10
    e02e:	bb 1d       	adc	r27, r11
    e030:	8c 91       	ld	r24, X
    e032:	90 e0       	ldi	r25, 0x00	; 0
    e034:	05 80       	ldd	r0, Z+5	; 0x05
    e036:	02 c0       	rjmp	.+4      	; 0xe03c <qtm_key_sensors_process+0x162>
    e038:	95 95       	asr	r25
    e03a:	87 95       	ror	r24
    e03c:	0a 94       	dec	r0
    e03e:	e2 f7       	brpl	.-8      	; 0xe038 <qtm_key_sensors_process+0x15e>
    e040:	99 27       	eor	r25, r25
    e042:	28 17       	cp	r18, r24
    e044:	39 07       	cpc	r19, r25
    e046:	08 f4       	brcc	.+2      	; 0xe04a <qtm_key_sensors_process+0x170>
    e048:	17 c1       	rjmp	.+558    	; 0xe278 <qtm_key_sensors_process+0x39e>
    e04a:	84 81       	ldd	r24, Z+4	; 0x04
    e04c:	88 23       	and	r24, r24
    e04e:	09 f4       	brne	.+2      	; 0xe052 <qtm_key_sensors_process+0x178>
    e050:	13 c1       	rjmp	.+550    	; 0xe278 <qtm_key_sensors_process+0x39e>
    e052:	87 e0       	ldi	r24, 0x07	; 7
    e054:	f8 01       	movw	r30, r16
    e056:	80 83       	st	Z, r24
    e058:	ea 81       	ldd	r30, Y+2	; 0x02
    e05a:	fb 81       	ldd	r31, Y+3	; 0x03
    e05c:	24 81       	ldd	r18, Z+4	; 0x04
    e05e:	1a c0       	rjmp	.+52     	; 0xe094 <qtm_key_sensors_process+0x1ba>
    e060:	fc 01       	movw	r30, r24
    e062:	ea 0d       	add	r30, r10
    e064:	fb 1d       	adc	r31, r11
    e066:	42 1b       	sub	r20, r18
    e068:	53 0b       	sbc	r21, r19
    e06a:	80 81       	ld	r24, Z
    e06c:	90 e0       	ldi	r25, 0x00	; 0
    e06e:	48 17       	cp	r20, r24
    e070:	59 07       	cpc	r21, r25
    e072:	08 f4       	brcc	.+2      	; 0xe076 <qtm_key_sensors_process+0x19c>
    e074:	01 c1       	rjmp	.+514    	; 0xe278 <qtm_key_sensors_process+0x39e>
    e076:	82 81       	ldd	r24, Z+2	; 0x02
    e078:	88 23       	and	r24, r24
    e07a:	31 f0       	breq	.+12     	; 0xe088 <qtm_key_sensors_process+0x1ae>
    e07c:	b4 01       	movw	r22, r8
    e07e:	ce 01       	movw	r24, r28
    e080:	0e 94 da 6e 	call	0xddb4	; 0xddb4 <check_for_aks_block>
    e084:	81 11       	cpse	r24, r1
    e086:	f8 c0       	rjmp	.+496    	; 0xe278 <qtm_key_sensors_process+0x39e>
    e088:	e4 e0       	ldi	r30, 0x04	; 4
    e08a:	d8 01       	movw	r26, r16
    e08c:	ec 93       	st	X, r30
    e08e:	ea 81       	ldd	r30, Y+2	; 0x02
    e090:	fb 81       	ldd	r31, Y+3	; 0x03
    e092:	22 81       	ldd	r18, Z+2	; 0x02
    e094:	8c 81       	ldd	r24, Y+4	; 0x04
    e096:	9d 81       	ldd	r25, Y+5	; 0x05
    e098:	fc 01       	movw	r30, r24
    e09a:	ee 0d       	add	r30, r14
    e09c:	ff 1d       	adc	r31, r15
    e09e:	21 83       	std	Z+1, r18	; 0x01
    e0a0:	dd c0       	rjmp	.+442    	; 0xe25c <qtm_key_sensors_process+0x382>
    e0a2:	d8 01       	movw	r26, r16
    e0a4:	14 96       	adiw	r26, 0x04	; 4
    e0a6:	2d 91       	ld	r18, X+
    e0a8:	3c 91       	ld	r19, X
    e0aa:	15 97       	sbiw	r26, 0x05	; 5
    e0ac:	12 96       	adiw	r26, 0x02	; 2
    e0ae:	ed 91       	ld	r30, X+
    e0b0:	fc 91       	ld	r31, X
    e0b2:	13 97       	sbiw	r26, 0x03	; 3
    e0b4:	81 81       	ldd	r24, Z+1	; 0x01
    e0b6:	92 81       	ldd	r25, Z+2	; 0x02
    e0b8:	82 17       	cp	r24, r18
    e0ba:	93 07       	cpc	r25, r19
    e0bc:	08 f4       	brcc	.+2      	; 0xe0c0 <qtm_key_sensors_process+0x1e6>
    e0be:	bb c0       	rjmp	.+374    	; 0xe236 <qtm_key_sensors_process+0x35c>
    e0c0:	ee 81       	ldd	r30, Y+6	; 0x06
    e0c2:	ff 81       	ldd	r31, Y+7	; 0x07
    e0c4:	ea 0d       	add	r30, r10
    e0c6:	fb 1d       	adc	r31, r11
    e0c8:	82 1b       	sub	r24, r18
    e0ca:	93 0b       	sbc	r25, r19
    e0cc:	20 81       	ld	r18, Z
    e0ce:	30 e0       	ldi	r19, 0x00	; 0
    e0d0:	28 17       	cp	r18, r24
    e0d2:	39 07       	cpc	r19, r25
    e0d4:	08 f0       	brcs	.+2      	; 0xe0d8 <qtm_key_sensors_process+0x1fe>
    e0d6:	c5 c0       	rjmp	.+394    	; 0xe262 <qtm_key_sensors_process+0x388>
    e0d8:	82 81       	ldd	r24, Z+2	; 0x02
    e0da:	88 23       	and	r24, r24
    e0dc:	31 f0       	breq	.+12     	; 0xe0ea <qtm_key_sensors_process+0x210>
    e0de:	b4 01       	movw	r22, r8
    e0e0:	ce 01       	movw	r24, r28
    e0e2:	0e 94 da 6e 	call	0xddb4	; 0xddb4 <check_for_aks_block>
    e0e6:	81 11       	cpse	r24, r1
    e0e8:	c7 c0       	rjmp	.+398    	; 0xe278 <qtm_key_sensors_process+0x39e>
    e0ea:	f8 01       	movw	r30, r16
    e0ec:	81 81       	ldd	r24, Z+1	; 0x01
    e0ee:	88 23       	and	r24, r24
    e0f0:	09 f4       	brne	.+2      	; 0xe0f4 <qtm_key_sensors_process+0x21a>
    e0f2:	6a c0       	rjmp	.+212    	; 0xe1c8 <qtm_key_sensors_process+0x2ee>
    e0f4:	81 50       	subi	r24, 0x01	; 1
    e0f6:	81 83       	std	Z+1, r24	; 0x01
    e0f8:	b1 c0       	rjmp	.+354    	; 0xe25c <qtm_key_sensors_process+0x382>
    e0fa:	e8 81       	ld	r30, Y
    e0fc:	f9 81       	ldd	r31, Y+1	; 0x01
    e0fe:	aa 81       	ldd	r26, Y+2	; 0x02
    e100:	bb 81       	ldd	r27, Y+3	; 0x03
    e102:	18 96       	adiw	r26, 0x08	; 8
    e104:	8c 91       	ld	r24, X
    e106:	83 83       	std	Z+3, r24	; 0x03
    e108:	ec 81       	ldd	r30, Y+4	; 0x04
    e10a:	fd 81       	ldd	r31, Y+5	; 0x05
    e10c:	ee 0d       	add	r30, r14
    e10e:	ff 1d       	adc	r31, r15
    e110:	44 81       	ldd	r20, Z+4	; 0x04
    e112:	55 81       	ldd	r21, Z+5	; 0x05
    e114:	a2 81       	ldd	r26, Z+2	; 0x02
    e116:	b3 81       	ldd	r27, Z+3	; 0x03
    e118:	11 96       	adiw	r26, 0x01	; 1
    e11a:	8d 91       	ld	r24, X+
    e11c:	9c 91       	ld	r25, X
    e11e:	12 97       	sbiw	r26, 0x02	; 2
    e120:	84 17       	cp	r24, r20
    e122:	95 07       	cpc	r25, r21
    e124:	c0 f0       	brcs	.+48     	; 0xe156 <qtm_key_sensors_process+0x27c>
    e126:	ae 81       	ldd	r26, Y+6	; 0x06
    e128:	bf 81       	ldd	r27, Y+7	; 0x07
    e12a:	aa 0d       	add	r26, r10
    e12c:	bb 1d       	adc	r27, r11
    e12e:	6c 91       	ld	r22, X
    e130:	26 2f       	mov	r18, r22
    e132:	30 e0       	ldi	r19, 0x00	; 0
    e134:	11 96       	adiw	r26, 0x01	; 1
    e136:	7c 91       	ld	r23, X
    e138:	7f 5f       	subi	r23, 0xFF	; 255
    e13a:	02 c0       	rjmp	.+4      	; 0xe140 <qtm_key_sensors_process+0x266>
    e13c:	35 95       	asr	r19
    e13e:	27 95       	ror	r18
    e140:	7a 95       	dec	r23
    e142:	e2 f7       	brpl	.-8      	; 0xe13c <qtm_key_sensors_process+0x262>
    e144:	84 1b       	sub	r24, r20
    e146:	95 0b       	sbc	r25, r21
    e148:	62 1b       	sub	r22, r18
    e14a:	26 2f       	mov	r18, r22
    e14c:	30 e0       	ldi	r19, 0x00	; 0
    e14e:	28 17       	cp	r18, r24
    e150:	39 07       	cpc	r19, r25
    e152:	08 f4       	brcc	.+2      	; 0xe156 <qtm_key_sensors_process+0x27c>
    e154:	8f c0       	rjmp	.+286    	; 0xe274 <qtm_key_sensors_process+0x39a>
    e156:	70 82       	st	Z, r7
    e158:	ea 81       	ldd	r30, Y+2	; 0x02
    e15a:	fb 81       	ldd	r31, Y+3	; 0x03
    e15c:	22 81       	ldd	r18, Z+2	; 0x02
    e15e:	8c 81       	ldd	r24, Y+4	; 0x04
    e160:	9d 81       	ldd	r25, Y+5	; 0x05
    e162:	fc 01       	movw	r30, r24
    e164:	ee 0d       	add	r30, r14
    e166:	ff 1d       	adc	r31, r15
    e168:	21 83       	std	Z+1, r18	; 0x01
    e16a:	42 c0       	rjmp	.+132    	; 0xe1f0 <qtm_key_sensors_process+0x316>
    e16c:	d8 01       	movw	r26, r16
    e16e:	14 96       	adiw	r26, 0x04	; 4
    e170:	6d 91       	ld	r22, X+
    e172:	7c 91       	ld	r23, X
    e174:	15 97       	sbiw	r26, 0x05	; 5
    e176:	12 96       	adiw	r26, 0x02	; 2
    e178:	ed 91       	ld	r30, X+
    e17a:	fc 91       	ld	r31, X
    e17c:	13 97       	sbiw	r26, 0x03	; 3
    e17e:	21 81       	ldd	r18, Z+1	; 0x01
    e180:	32 81       	ldd	r19, Z+2	; 0x02
    e182:	26 17       	cp	r18, r22
    e184:	37 07       	cpc	r19, r23
    e186:	58 f4       	brcc	.+22     	; 0xe19e <qtm_key_sensors_process+0x2c4>
    e188:	11 96       	adiw	r26, 0x01	; 1
    e18a:	8c 91       	ld	r24, X
    e18c:	11 97       	sbiw	r26, 0x01	; 1
    e18e:	81 11       	cpse	r24, r1
    e190:	02 c0       	rjmp	.+4      	; 0xe196 <qtm_key_sensors_process+0x2bc>
    e192:	cc 92       	st	X, r12
    e194:	6f c0       	rjmp	.+222    	; 0xe274 <qtm_key_sensors_process+0x39a>
    e196:	81 50       	subi	r24, 0x01	; 1
    e198:	f8 01       	movw	r30, r16
    e19a:	81 83       	std	Z+1, r24	; 0x01
    e19c:	6b c0       	rjmp	.+214    	; 0xe274 <qtm_key_sensors_process+0x39a>
    e19e:	ee 81       	ldd	r30, Y+6	; 0x06
    e1a0:	ff 81       	ldd	r31, Y+7	; 0x07
    e1a2:	ea 0d       	add	r30, r10
    e1a4:	fb 1d       	adc	r31, r11
    e1a6:	80 81       	ld	r24, Z
    e1a8:	48 2f       	mov	r20, r24
    e1aa:	50 e0       	ldi	r21, 0x00	; 0
    e1ac:	91 81       	ldd	r25, Z+1	; 0x01
    e1ae:	9f 5f       	subi	r25, 0xFF	; 255
    e1b0:	02 c0       	rjmp	.+4      	; 0xe1b6 <qtm_key_sensors_process+0x2dc>
    e1b2:	55 95       	asr	r21
    e1b4:	47 95       	ror	r20
    e1b6:	9a 95       	dec	r25
    e1b8:	e2 f7       	brpl	.-8      	; 0xe1b2 <qtm_key_sensors_process+0x2d8>
    e1ba:	26 1b       	sub	r18, r22
    e1bc:	37 0b       	sbc	r19, r23
    e1be:	84 1b       	sub	r24, r20
    e1c0:	90 e0       	ldi	r25, 0x00	; 0
    e1c2:	82 17       	cp	r24, r18
    e1c4:	93 07       	cpc	r25, r19
    e1c6:	60 f4       	brcc	.+24     	; 0xe1e0 <qtm_key_sensors_process+0x306>
    e1c8:	d8 01       	movw	r26, r16
    e1ca:	6c 92       	st	X, r6
    e1cc:	ea 81       	ldd	r30, Y+2	; 0x02
    e1ce:	fb 81       	ldd	r31, Y+3	; 0x03
    e1d0:	23 81       	ldd	r18, Z+3	; 0x03
    e1d2:	8c 81       	ldd	r24, Y+4	; 0x04
    e1d4:	9d 81       	ldd	r25, Y+5	; 0x05
    e1d6:	fc 01       	movw	r30, r24
    e1d8:	ee 0d       	add	r30, r14
    e1da:	ff 1d       	adc	r31, r15
    e1dc:	21 83       	std	Z+1, r18	; 0x01
    e1de:	4a c0       	rjmp	.+148    	; 0xe274 <qtm_key_sensors_process+0x39a>
    e1e0:	f8 01       	movw	r30, r16
    e1e2:	81 81       	ldd	r24, Z+1	; 0x01
    e1e4:	81 11       	cpse	r24, r1
    e1e6:	02 c0       	rjmp	.+4      	; 0xe1ec <qtm_key_sensors_process+0x312>
    e1e8:	c0 82       	st	Z, r12
    e1ea:	44 c0       	rjmp	.+136    	; 0xe274 <qtm_key_sensors_process+0x39a>
    e1ec:	81 50       	subi	r24, 0x01	; 1
    e1ee:	81 83       	std	Z+1, r24	; 0x01
    e1f0:	22 24       	eor	r2, r2
    e1f2:	23 94       	inc	r2
    e1f4:	33 c0       	rjmp	.+102    	; 0xe25c <qtm_key_sensors_process+0x382>
    e1f6:	f8 01       	movw	r30, r16
    e1f8:	24 81       	ldd	r18, Z+4	; 0x04
    e1fa:	35 81       	ldd	r19, Z+5	; 0x05
    e1fc:	02 80       	ldd	r0, Z+2	; 0x02
    e1fe:	f3 81       	ldd	r31, Z+3	; 0x03
    e200:	e0 2d       	mov	r30, r0
    e202:	81 81       	ldd	r24, Z+1	; 0x01
    e204:	92 81       	ldd	r25, Z+2	; 0x02
    e206:	82 17       	cp	r24, r18
    e208:	93 07       	cpc	r25, r19
    e20a:	58 f5       	brcc	.+86     	; 0xe262 <qtm_key_sensors_process+0x388>
    e20c:	28 1b       	sub	r18, r24
    e20e:	39 0b       	sbc	r19, r25
    e210:	ee 81       	ldd	r30, Y+6	; 0x06
    e212:	ff 81       	ldd	r31, Y+7	; 0x07
    e214:	ea 0d       	add	r30, r10
    e216:	fb 1d       	adc	r31, r11
    e218:	80 81       	ld	r24, Z
    e21a:	90 e0       	ldi	r25, 0x00	; 0
    e21c:	ea 81       	ldd	r30, Y+2	; 0x02
    e21e:	fb 81       	ldd	r31, Y+3	; 0x03
    e220:	05 80       	ldd	r0, Z+5	; 0x05
    e222:	02 c0       	rjmp	.+4      	; 0xe228 <qtm_key_sensors_process+0x34e>
    e224:	95 95       	asr	r25
    e226:	87 95       	ror	r24
    e228:	0a 94       	dec	r0
    e22a:	e2 f7       	brpl	.-8      	; 0xe224 <qtm_key_sensors_process+0x34a>
    e22c:	99 27       	eor	r25, r25
    e22e:	28 17       	cp	r18, r24
    e230:	39 07       	cpc	r19, r25
    e232:	18 f4       	brcc	.+6      	; 0xe23a <qtm_key_sensors_process+0x360>
    e234:	d8 01       	movw	r26, r16
    e236:	cc 92       	st	X, r12
    e238:	16 c0       	rjmp	.+44     	; 0xe266 <qtm_key_sensors_process+0x38c>
    e23a:	f8 01       	movw	r30, r16
    e23c:	81 81       	ldd	r24, Z+1	; 0x01
    e23e:	81 11       	cpse	r24, r1
    e240:	0b c0       	rjmp	.+22     	; 0xe258 <qtm_key_sensors_process+0x37e>
    e242:	50 82       	st	Z, r5
    e244:	8c 81       	ldd	r24, Y+4	; 0x04
    e246:	9d 81       	ldd	r25, Y+5	; 0x05
    e248:	fc 01       	movw	r30, r24
    e24a:	ee 0d       	add	r30, r14
    e24c:	ff 1d       	adc	r31, r15
    e24e:	02 80       	ldd	r0, Z+2	; 0x02
    e250:	f3 81       	ldd	r31, Z+3	; 0x03
    e252:	e0 2d       	mov	r30, r0
    e254:	c0 82       	st	Z, r12
    e256:	10 c0       	rjmp	.+32     	; 0xe278 <qtm_key_sensors_process+0x39e>
    e258:	81 50       	subi	r24, 0x01	; 1
    e25a:	81 83       	std	Z+1, r24	; 0x01
    e25c:	dd 24       	eor	r13, r13
    e25e:	d3 94       	inc	r13
    e260:	0b c0       	rjmp	.+22     	; 0xe278 <qtm_key_sensors_process+0x39e>
    e262:	f8 01       	movw	r30, r16
    e264:	c0 82       	st	Z, r12
    e266:	8c 81       	ldd	r24, Y+4	; 0x04
    e268:	9d 81       	ldd	r25, Y+5	; 0x05
    e26a:	fc 01       	movw	r30, r24
    e26c:	ee 0d       	add	r30, r14
    e26e:	ff 1d       	adc	r31, r15
    e270:	11 82       	std	Z+1, r1	; 0x01
    e272:	02 c0       	rjmp	.+4      	; 0xe278 <qtm_key_sensors_process+0x39e>
    e274:	22 24       	eor	r2, r2
    e276:	23 94       	inc	r2
    e278:	ff ef       	ldi	r31, 0xFF	; 255
    e27a:	8f 1a       	sub	r8, r31
    e27c:	9f 0a       	sbc	r9, r31
    e27e:	83 e0       	ldi	r24, 0x03	; 3
    e280:	a8 0e       	add	r10, r24
    e282:	b1 1c       	adc	r11, r1
    e284:	52 ce       	rjmp	.-860    	; 0xdf2a <qtm_key_sensors_process+0x50>
    e286:	e8 81       	ld	r30, Y
    e288:	f9 81       	ldd	r31, Y+1	; 0x01
    e28a:	80 81       	ld	r24, Z
    e28c:	87 ff       	sbrs	r24, 7
    e28e:	23 c0       	rjmp	.+70     	; 0xe2d6 <qtm_key_sensors_process+0x3fc>
    e290:	40 e0       	ldi	r20, 0x00	; 0
    e292:	50 e0       	ldi	r21, 0x00	; 0
    e294:	20 e0       	ldi	r18, 0x00	; 0
    e296:	30 e0       	ldi	r19, 0x00	; 0
    e298:	ea 81       	ldd	r30, Y+2	; 0x02
    e29a:	fb 81       	ldd	r31, Y+3	; 0x03
    e29c:	80 81       	ld	r24, Z
    e29e:	91 81       	ldd	r25, Z+1	; 0x01
    e2a0:	28 17       	cp	r18, r24
    e2a2:	39 07       	cpc	r19, r25
    e2a4:	98 f4       	brcc	.+38     	; 0xe2cc <qtm_key_sensors_process+0x3f2>
    e2a6:	ec 81       	ldd	r30, Y+4	; 0x04
    e2a8:	fd 81       	ldd	r31, Y+5	; 0x05
    e2aa:	e4 0f       	add	r30, r20
    e2ac:	f5 1f       	adc	r31, r21
    e2ae:	a2 81       	ldd	r26, Z+2	; 0x02
    e2b0:	b3 81       	ldd	r27, Z+3	; 0x03
    e2b2:	8c 91       	ld	r24, X
    e2b4:	80 fd       	sbrc	r24, 0
    e2b6:	05 c0       	rjmp	.+10     	; 0xe2c2 <qtm_key_sensors_process+0x3e8>
    e2b8:	90 81       	ld	r25, Z
    e2ba:	97 7f       	andi	r25, 0xF7	; 247
    e2bc:	11 f0       	breq	.+4      	; 0xe2c2 <qtm_key_sensors_process+0x3e8>
    e2be:	81 60       	ori	r24, 0x01	; 1
    e2c0:	8c 93       	st	X, r24
    e2c2:	2f 5f       	subi	r18, 0xFF	; 255
    e2c4:	3f 4f       	sbci	r19, 0xFF	; 255
    e2c6:	4a 5f       	subi	r20, 0xFA	; 250
    e2c8:	5f 4f       	sbci	r21, 0xFF	; 255
    e2ca:	e6 cf       	rjmp	.-52     	; 0xe298 <qtm_key_sensors_process+0x3be>
    e2cc:	e8 81       	ld	r30, Y
    e2ce:	f9 81       	ldd	r31, Y+1	; 0x01
    e2d0:	80 81       	ld	r24, Z
    e2d2:	8f 77       	andi	r24, 0x7F	; 127
    e2d4:	80 83       	st	Z, r24
    e2d6:	d1 10       	cpse	r13, r1
    e2d8:	07 c0       	rjmp	.+14     	; 0xe2e8 <qtm_key_sensors_process+0x40e>
    e2da:	e8 81       	ld	r30, Y
    e2dc:	f9 81       	ldd	r31, Y+1	; 0x01
    e2de:	21 10       	cpse	r2, r1
    e2e0:	6f c0       	rjmp	.+222    	; 0xe3c0 <qtm_key_sensors_process+0x4e6>
    e2e2:	80 81       	ld	r24, Z
    e2e4:	8e 7f       	andi	r24, 0xFE	; 254
    e2e6:	6e c0       	rjmp	.+220    	; 0xe3c4 <qtm_key_sensors_process+0x4ea>
    e2e8:	ea 81       	ldd	r30, Y+2	; 0x02
    e2ea:	fb 81       	ldd	r31, Y+3	; 0x03
    e2ec:	81 85       	ldd	r24, Z+9	; 0x09
    e2ee:	88 23       	and	r24, r24
    e2f0:	a1 f3       	breq	.-24     	; 0xe2da <qtm_key_sensors_process+0x400>
    e2f2:	e8 81       	ld	r30, Y
    e2f4:	f9 81       	ldd	r31, Y+1	; 0x01
    e2f6:	80 81       	ld	r24, Z
    e2f8:	80 68       	ori	r24, 0x80	; 128
    e2fa:	80 83       	st	Z, r24
    e2fc:	ea 81       	ldd	r30, Y+2	; 0x02
    e2fe:	fb 81       	ldd	r31, Y+3	; 0x03
    e300:	81 85       	ldd	r24, Z+9	; 0x09
    e302:	81 30       	cpi	r24, 0x01	; 1
    e304:	51 f7       	brne	.-44     	; 0xe2da <qtm_key_sensors_process+0x400>
    e306:	40 e0       	ldi	r20, 0x00	; 0
    e308:	50 e0       	ldi	r21, 0x00	; 0
    e30a:	20 e0       	ldi	r18, 0x00	; 0
    e30c:	30 e0       	ldi	r19, 0x00	; 0
    e30e:	96 e0       	ldi	r25, 0x06	; 6
    e310:	d9 2e       	mov	r13, r25
    e312:	ea 81       	ldd	r30, Y+2	; 0x02
    e314:	fb 81       	ldd	r31, Y+3	; 0x03
    e316:	60 81       	ld	r22, Z
    e318:	71 81       	ldd	r23, Z+1	; 0x01
    e31a:	26 17       	cp	r18, r22
    e31c:	37 07       	cpc	r19, r23
    e31e:	e8 f6       	brcc	.-70     	; 0xe2da <qtm_key_sensors_process+0x400>
    e320:	0c 81       	ldd	r16, Y+4	; 0x04
    e322:	1d 81       	ldd	r17, Y+5	; 0x05
    e324:	fa 01       	movw	r30, r20
    e326:	ee 0f       	add	r30, r30
    e328:	ff 1f       	adc	r31, r31
    e32a:	e0 0f       	add	r30, r16
    e32c:	f1 1f       	adc	r31, r17
    e32e:	80 81       	ld	r24, Z
    e330:	98 2f       	mov	r25, r24
    e332:	97 7f       	andi	r25, 0xF7	; 247
    e334:	a1 f1       	breq	.+104    	; 0xe39e <qtm_key_sensors_process+0x4c4>
    e336:	85 38       	cpi	r24, 0x85	; 133
    e338:	11 f0       	breq	.+4      	; 0xe33e <qtm_key_sensors_process+0x464>
    e33a:	83 30       	cpi	r24, 0x03	; 3
    e33c:	b1 f5       	brne	.+108    	; 0xe3aa <qtm_key_sensors_process+0x4d0>
    e33e:	ee 80       	ldd	r14, Y+6	; 0x06
    e340:	ff 80       	ldd	r15, Y+7	; 0x07
    e342:	d7 01       	movw	r26, r14
    e344:	a4 0f       	add	r26, r20
    e346:	b5 1f       	adc	r27, r21
    e348:	12 96       	adiw	r26, 0x02	; 2
    e34a:	bc 90       	ld	r11, X
    e34c:	bb 20       	and	r11, r11
    e34e:	39 f1       	breq	.+78     	; 0xe39e <qtm_key_sensors_process+0x4c4>
    e350:	80 e0       	ldi	r24, 0x00	; 0
    e352:	90 e0       	ldi	r25, 0x00	; 0
    e354:	c1 2c       	mov	r12, r1
    e356:	86 17       	cp	r24, r22
    e358:	97 07       	cpc	r25, r23
    e35a:	f8 f4       	brcc	.+62     	; 0xe39a <qtm_key_sensors_process+0x4c0>
    e35c:	28 17       	cp	r18, r24
    e35e:	39 07       	cpc	r19, r25
    e360:	d1 f0       	breq	.+52     	; 0xe396 <qtm_key_sensors_process+0x4bc>
    e362:	d8 9e       	mul	r13, r24
    e364:	d0 01       	movw	r26, r0
    e366:	d9 9e       	mul	r13, r25
    e368:	b0 0d       	add	r27, r0
    e36a:	11 24       	eor	r1, r1
    e36c:	a0 0f       	add	r26, r16
    e36e:	b1 1f       	adc	r27, r17
    e370:	ac 91       	ld	r26, X
    e372:	a4 30       	cpi	r26, 0x04	; 4
    e374:	11 f0       	breq	.+4      	; 0xe37a <qtm_key_sensors_process+0x4a0>
    e376:	a6 38       	cpi	r26, 0x86	; 134
    e378:	71 f4       	brne	.+28     	; 0xe396 <qtm_key_sensors_process+0x4bc>
    e37a:	dc 01       	movw	r26, r24
    e37c:	aa 0f       	add	r26, r26
    e37e:	bb 1f       	adc	r27, r27
    e380:	a8 0f       	add	r26, r24
    e382:	b9 1f       	adc	r27, r25
    e384:	ae 0d       	add	r26, r14
    e386:	bf 1d       	adc	r27, r15
    e388:	12 96       	adiw	r26, 0x02	; 2
    e38a:	ac 91       	ld	r26, X
    e38c:	ba 12       	cpse	r11, r26
    e38e:	03 c0       	rjmp	.+6      	; 0xe396 <qtm_key_sensors_process+0x4bc>
    e390:	cb 01       	movw	r24, r22
    e392:	cc 24       	eor	r12, r12
    e394:	c3 94       	inc	r12
    e396:	01 96       	adiw	r24, 0x01	; 1
    e398:	de cf       	rjmp	.-68     	; 0xe356 <qtm_key_sensors_process+0x47c>
    e39a:	c1 10       	cpse	r12, r1
    e39c:	06 c0       	rjmp	.+12     	; 0xe3aa <qtm_key_sensors_process+0x4d0>
    e39e:	02 80       	ldd	r0, Z+2	; 0x02
    e3a0:	f3 81       	ldd	r31, Z+3	; 0x03
    e3a2:	e0 2d       	mov	r30, r0
    e3a4:	80 81       	ld	r24, Z
    e3a6:	8e 7f       	andi	r24, 0xFE	; 254
    e3a8:	05 c0       	rjmp	.+10     	; 0xe3b4 <qtm_key_sensors_process+0x4da>
    e3aa:	02 80       	ldd	r0, Z+2	; 0x02
    e3ac:	f3 81       	ldd	r31, Z+3	; 0x03
    e3ae:	e0 2d       	mov	r30, r0
    e3b0:	80 81       	ld	r24, Z
    e3b2:	81 60       	ori	r24, 0x01	; 1
    e3b4:	80 83       	st	Z, r24
    e3b6:	2f 5f       	subi	r18, 0xFF	; 255
    e3b8:	3f 4f       	sbci	r19, 0xFF	; 255
    e3ba:	4d 5f       	subi	r20, 0xFD	; 253
    e3bc:	5f 4f       	sbci	r21, 0xFF	; 255
    e3be:	a9 cf       	rjmp	.-174    	; 0xe312 <qtm_key_sensors_process+0x438>
    e3c0:	80 81       	ld	r24, Z
    e3c2:	81 60       	ori	r24, 0x01	; 1
    e3c4:	80 83       	st	Z, r24
    e3c6:	80 91 3e 46 	lds	r24, 0x463E	; 0x80463e <qtm_local_ms_timecount>
    e3ca:	90 91 3f 46 	lds	r25, 0x463F	; 0x80463f <qtm_local_ms_timecount+0x1>
    e3ce:	e8 81       	ld	r30, Y
    e3d0:	f9 81       	ldd	r31, Y+1	; 0x01
    e3d2:	21 81       	ldd	r18, Z+1	; 0x01
    e3d4:	32 81       	ldd	r19, Z+2	; 0x02
    e3d6:	a9 01       	movw	r20, r18
    e3d8:	48 53       	subi	r20, 0x38	; 56
    e3da:	5f 4f       	sbci	r21, 0xFF	; 255
    e3dc:	48 17       	cp	r20, r24
    e3de:	59 07       	cpc	r21, r25
    e3e0:	38 f4       	brcc	.+14     	; 0xe3f0 <qtm_key_sensors_process+0x516>
    e3e2:	82 1b       	sub	r24, r18
    e3e4:	93 0b       	sbc	r25, r19
    e3e6:	aa 24       	eor	r10, r10
    e3e8:	a3 94       	inc	r10
    e3ea:	a3 e0       	ldi	r26, 0x03	; 3
    e3ec:	ba 2e       	mov	r11, r26
    e3ee:	44 c0       	rjmp	.+136    	; 0xe478 <qtm_key_sensors_process+0x59e>
    e3f0:	82 17       	cp	r24, r18
    e3f2:	93 07       	cpc	r25, r19
    e3f4:	10 f0       	brcs	.+4      	; 0xe3fa <qtm_key_sensors_process+0x520>
    e3f6:	80 e0       	ldi	r24, 0x00	; 0
    e3f8:	04 c1       	rjmp	.+520    	; 0xe602 <qtm_key_sensors_process+0x728>
    e3fa:	82 1b       	sub	r24, r18
    e3fc:	93 0b       	sbc	r25, r19
    e3fe:	01 97       	sbiw	r24, 0x01	; 1
    e400:	89 3c       	cpi	r24, 0xC9	; 201
    e402:	91 05       	cpc	r25, r1
    e404:	c0 f3       	brcs	.-16     	; 0xe3f6 <qtm_key_sensors_process+0x51c>
    e406:	ef cf       	rjmp	.-34     	; 0xe3e6 <qtm_key_sensors_process+0x50c>
    e408:	88 5c       	subi	r24, 0xC8	; 200
    e40a:	91 09       	sbc	r25, r1
    e40c:	e8 81       	ld	r30, Y
    e40e:	f9 81       	ldd	r31, Y+1	; 0x01
    e410:	21 81       	ldd	r18, Z+1	; 0x01
    e412:	32 81       	ldd	r19, Z+2	; 0x02
    e414:	28 53       	subi	r18, 0x38	; 56
    e416:	3f 4f       	sbci	r19, 0xFF	; 255
    e418:	21 83       	std	Z+1, r18	; 0x01
    e41a:	32 83       	std	Z+2, r19	; 0x02
    e41c:	23 81       	ldd	r18, Z+3	; 0x03
    e41e:	21 11       	cpse	r18, r1
    e420:	96 c0       	rjmp	.+300    	; 0xe54e <qtm_key_sensors_process+0x674>
    e422:	24 81       	ldd	r18, Z+4	; 0x04
    e424:	22 23       	and	r18, r18
    e426:	11 f0       	breq	.+4      	; 0xe42c <qtm_key_sensors_process+0x552>
    e428:	21 50       	subi	r18, 0x01	; 1
    e42a:	24 83       	std	Z+4, r18	; 0x04
    e42c:	e8 81       	ld	r30, Y
    e42e:	f9 81       	ldd	r31, Y+1	; 0x01
    e430:	25 81       	ldd	r18, Z+5	; 0x05
    e432:	22 23       	and	r18, r18
    e434:	11 f0       	breq	.+4      	; 0xe43a <qtm_key_sensors_process+0x560>
    e436:	21 50       	subi	r18, 0x01	; 1
    e438:	25 83       	std	Z+5, r18	; 0x05
    e43a:	8a 80       	ldd	r8, Y+2	; 0x02
    e43c:	9b 80       	ldd	r9, Y+3	; 0x03
    e43e:	d4 01       	movw	r26, r8
    e440:	16 96       	adiw	r26, 0x06	; 6
    e442:	2c 91       	ld	r18, X
    e444:	16 97       	sbiw	r26, 0x06	; 6
    e446:	21 11       	cpse	r18, r1
    e448:	1b c0       	rjmp	.+54     	; 0xe480 <qtm_key_sensors_process+0x5a6>
    e44a:	8a 80       	ldd	r8, Y+2	; 0x02
    e44c:	9b 80       	ldd	r9, Y+3	; 0x03
    e44e:	f4 01       	movw	r30, r8
    e450:	27 81       	ldd	r18, Z+7	; 0x07
    e452:	21 11       	cpse	r18, r1
    e454:	48 c0       	rjmp	.+144    	; 0xe4e6 <qtm_key_sensors_process+0x60c>
    e456:	ea 81       	ldd	r30, Y+2	; 0x02
    e458:	fb 81       	ldd	r31, Y+3	; 0x03
    e45a:	23 81       	ldd	r18, Z+3	; 0x03
    e45c:	22 23       	and	r18, r18
    e45e:	61 f0       	breq	.+24     	; 0xe478 <qtm_key_sensors_process+0x59e>
    e460:	20 e0       	ldi	r18, 0x00	; 0
    e462:	30 e0       	ldi	r19, 0x00	; 0
    e464:	a0 e0       	ldi	r26, 0x00	; 0
    e466:	b0 e0       	ldi	r27, 0x00	; 0
    e468:	ea 81       	ldd	r30, Y+2	; 0x02
    e46a:	fb 81       	ldd	r31, Y+3	; 0x03
    e46c:	40 81       	ld	r20, Z
    e46e:	51 81       	ldd	r21, Z+1	; 0x01
    e470:	a4 17       	cp	r26, r20
    e472:	b5 07       	cpc	r27, r21
    e474:	08 f4       	brcc	.+2      	; 0xe478 <qtm_key_sensors_process+0x59e>
    e476:	6e c0       	rjmp	.+220    	; 0xe554 <qtm_key_sensors_process+0x67a>
    e478:	89 3c       	cpi	r24, 0xC9	; 201
    e47a:	91 05       	cpc	r25, r1
    e47c:	28 f6       	brcc	.-118    	; 0xe408 <qtm_key_sensors_process+0x52e>
    e47e:	bb cf       	rjmp	.-138    	; 0xe3f6 <qtm_key_sensors_process+0x51c>
    e480:	08 81       	ld	r16, Y
    e482:	19 81       	ldd	r17, Y+1	; 0x01
    e484:	f8 01       	movw	r30, r16
    e486:	24 81       	ldd	r18, Z+4	; 0x04
    e488:	21 11       	cpse	r18, r1
    e48a:	df cf       	rjmp	.-66     	; 0xe44a <qtm_key_sensors_process+0x570>
    e48c:	ed 90       	ld	r14, X+
    e48e:	fc 90       	ld	r15, X
    e490:	60 e0       	ldi	r22, 0x00	; 0
    e492:	70 e0       	ldi	r23, 0x00	; 0
    e494:	40 e0       	ldi	r20, 0x00	; 0
    e496:	50 e0       	ldi	r21, 0x00	; 0
    e498:	4e 15       	cp	r20, r14
    e49a:	5f 05       	cpc	r21, r15
    e49c:	f1 f0       	breq	.+60     	; 0xe4da <qtm_key_sensors_process+0x600>
    e49e:	ec 81       	ldd	r30, Y+4	; 0x04
    e4a0:	fd 81       	ldd	r31, Y+5	; 0x05
    e4a2:	e6 0f       	add	r30, r22
    e4a4:	f7 1f       	adc	r31, r23
    e4a6:	20 81       	ld	r18, Z
    e4a8:	23 30       	cpi	r18, 0x03	; 3
    e4aa:	11 f0       	breq	.+4      	; 0xe4b0 <qtm_key_sensors_process+0x5d6>
    e4ac:	28 30       	cpi	r18, 0x08	; 8
    e4ae:	81 f4       	brne	.+32     	; 0xe4d0 <qtm_key_sensors_process+0x5f6>
    e4b0:	24 81       	ldd	r18, Z+4	; 0x04
    e4b2:	35 81       	ldd	r19, Z+5	; 0x05
    e4b4:	c2 80       	ldd	r12, Z+2	; 0x02
    e4b6:	d3 80       	ldd	r13, Z+3	; 0x03
    e4b8:	d6 01       	movw	r26, r12
    e4ba:	11 96       	adiw	r26, 0x01	; 1
    e4bc:	cd 90       	ld	r12, X+
    e4be:	dc 90       	ld	r13, X
    e4c0:	12 97       	sbiw	r26, 0x02	; 2
    e4c2:	2c 15       	cp	r18, r12
    e4c4:	3d 05       	cpc	r19, r13
    e4c6:	20 f4       	brcc	.+8      	; 0xe4d0 <qtm_key_sensors_process+0x5f6>
    e4c8:	2f 5f       	subi	r18, 0xFF	; 255
    e4ca:	3f 4f       	sbci	r19, 0xFF	; 255
    e4cc:	24 83       	std	Z+4, r18	; 0x04
    e4ce:	35 83       	std	Z+5, r19	; 0x05
    e4d0:	4f 5f       	subi	r20, 0xFF	; 255
    e4d2:	5f 4f       	sbci	r21, 0xFF	; 255
    e4d4:	6a 5f       	subi	r22, 0xFA	; 250
    e4d6:	7f 4f       	sbci	r23, 0xFF	; 255
    e4d8:	df cf       	rjmp	.-66     	; 0xe498 <qtm_key_sensors_process+0x5be>
    e4da:	f4 01       	movw	r30, r8
    e4dc:	26 81       	ldd	r18, Z+6	; 0x06
    e4de:	d8 01       	movw	r26, r16
    e4e0:	14 96       	adiw	r26, 0x04	; 4
    e4e2:	2c 93       	st	X, r18
    e4e4:	b2 cf       	rjmp	.-156    	; 0xe44a <qtm_key_sensors_process+0x570>
    e4e6:	08 81       	ld	r16, Y
    e4e8:	19 81       	ldd	r17, Y+1	; 0x01
    e4ea:	d8 01       	movw	r26, r16
    e4ec:	15 96       	adiw	r26, 0x05	; 5
    e4ee:	2c 91       	ld	r18, X
    e4f0:	21 11       	cpse	r18, r1
    e4f2:	b1 cf       	rjmp	.-158    	; 0xe456 <qtm_key_sensors_process+0x57c>
    e4f4:	e0 80       	ld	r14, Z
    e4f6:	f1 80       	ldd	r15, Z+1	; 0x01
    e4f8:	60 e0       	ldi	r22, 0x00	; 0
    e4fa:	70 e0       	ldi	r23, 0x00	; 0
    e4fc:	40 e0       	ldi	r20, 0x00	; 0
    e4fe:	50 e0       	ldi	r21, 0x00	; 0
    e500:	4e 15       	cp	r20, r14
    e502:	5f 05       	cpc	r21, r15
    e504:	f1 f0       	breq	.+60     	; 0xe542 <qtm_key_sensors_process+0x668>
    e506:	ec 81       	ldd	r30, Y+4	; 0x04
    e508:	fd 81       	ldd	r31, Y+5	; 0x05
    e50a:	e6 0f       	add	r30, r22
    e50c:	f7 1f       	adc	r31, r23
    e50e:	20 81       	ld	r18, Z
    e510:	23 30       	cpi	r18, 0x03	; 3
    e512:	11 f0       	breq	.+4      	; 0xe518 <qtm_key_sensors_process+0x63e>
    e514:	28 30       	cpi	r18, 0x08	; 8
    e516:	81 f4       	brne	.+32     	; 0xe538 <qtm_key_sensors_process+0x65e>
    e518:	24 81       	ldd	r18, Z+4	; 0x04
    e51a:	35 81       	ldd	r19, Z+5	; 0x05
    e51c:	c2 80       	ldd	r12, Z+2	; 0x02
    e51e:	d3 80       	ldd	r13, Z+3	; 0x03
    e520:	d6 01       	movw	r26, r12
    e522:	11 96       	adiw	r26, 0x01	; 1
    e524:	cd 90       	ld	r12, X+
    e526:	dc 90       	ld	r13, X
    e528:	12 97       	sbiw	r26, 0x02	; 2
    e52a:	c2 16       	cp	r12, r18
    e52c:	d3 06       	cpc	r13, r19
    e52e:	20 f4       	brcc	.+8      	; 0xe538 <qtm_key_sensors_process+0x65e>
    e530:	21 50       	subi	r18, 0x01	; 1
    e532:	31 09       	sbc	r19, r1
    e534:	24 83       	std	Z+4, r18	; 0x04
    e536:	35 83       	std	Z+5, r19	; 0x05
    e538:	4f 5f       	subi	r20, 0xFF	; 255
    e53a:	5f 4f       	sbci	r21, 0xFF	; 255
    e53c:	6a 5f       	subi	r22, 0xFA	; 250
    e53e:	7f 4f       	sbci	r23, 0xFF	; 255
    e540:	df cf       	rjmp	.-66     	; 0xe500 <qtm_key_sensors_process+0x626>
    e542:	f4 01       	movw	r30, r8
    e544:	27 81       	ldd	r18, Z+7	; 0x07
    e546:	d8 01       	movw	r26, r16
    e548:	15 96       	adiw	r26, 0x05	; 5
    e54a:	2c 93       	st	X, r18
    e54c:	84 cf       	rjmp	.-248    	; 0xe456 <qtm_key_sensors_process+0x57c>
    e54e:	21 50       	subi	r18, 0x01	; 1
    e550:	23 83       	std	Z+3, r18	; 0x03
    e552:	81 cf       	rjmp	.-254    	; 0xe456 <qtm_key_sensors_process+0x57c>
    e554:	a9 01       	movw	r20, r18
    e556:	44 0f       	add	r20, r20
    e558:	55 1f       	adc	r21, r21
    e55a:	ec 81       	ldd	r30, Y+4	; 0x04
    e55c:	fd 81       	ldd	r31, Y+5	; 0x05
    e55e:	e4 0f       	add	r30, r20
    e560:	f5 1f       	adc	r31, r21
    e562:	60 81       	ld	r22, Z
    e564:	65 38       	cpi	r22, 0x85	; 133
    e566:	09 f0       	breq	.+2      	; 0xe56a <qtm_key_sensors_process+0x690>
    e568:	47 c0       	rjmp	.+142    	; 0xe5f8 <qtm_key_sensors_process+0x71e>
    e56a:	61 81       	ldd	r22, Z+1	; 0x01
    e56c:	66 23       	and	r22, r22
    e56e:	19 f0       	breq	.+6      	; 0xe576 <qtm_key_sensors_process+0x69c>
    e570:	61 50       	subi	r22, 0x01	; 1
    e572:	61 83       	std	Z+1, r22	; 0x01
    e574:	41 c0       	rjmp	.+130    	; 0xe5f8 <qtm_key_sensors_process+0x71e>
    e576:	a0 82       	st	Z, r10
    e578:	6c 81       	ldd	r22, Y+4	; 0x04
    e57a:	7d 81       	ldd	r23, Y+5	; 0x05
    e57c:	fb 01       	movw	r30, r22
    e57e:	e4 0f       	add	r30, r20
    e580:	f5 1f       	adc	r31, r21
    e582:	02 80       	ldd	r0, Z+2	; 0x02
    e584:	f3 81       	ldd	r31, Z+3	; 0x03
    e586:	e0 2d       	mov	r30, r0
    e588:	b0 82       	st	Z, r11
    e58a:	ee 81       	ldd	r30, Y+6	; 0x06
    e58c:	ff 81       	ldd	r31, Y+7	; 0x07
    e58e:	e2 0f       	add	r30, r18
    e590:	f3 1f       	adc	r31, r19
    e592:	d2 80       	ldd	r13, Z+2	; 0x02
    e594:	dd 20       	and	r13, r13
    e596:	81 f1       	breq	.+96     	; 0xe5f8 <qtm_key_sensors_process+0x71e>
    e598:	40 e0       	ldi	r20, 0x00	; 0
    e59a:	50 e0       	ldi	r21, 0x00	; 0
    e59c:	00 e0       	ldi	r16, 0x00	; 0
    e59e:	10 e0       	ldi	r17, 0x00	; 0
    e5a0:	ea 81       	ldd	r30, Y+2	; 0x02
    e5a2:	fb 81       	ldd	r31, Y+3	; 0x03
    e5a4:	60 81       	ld	r22, Z
    e5a6:	71 81       	ldd	r23, Z+1	; 0x01
    e5a8:	06 17       	cp	r16, r22
    e5aa:	17 07       	cpc	r17, r23
    e5ac:	28 f5       	brcc	.+74     	; 0xe5f8 <qtm_key_sensors_process+0x71e>
    e5ae:	ee 81       	ldd	r30, Y+6	; 0x06
    e5b0:	ff 81       	ldd	r31, Y+7	; 0x07
    e5b2:	e4 0f       	add	r30, r20
    e5b4:	f5 1f       	adc	r31, r21
    e5b6:	62 81       	ldd	r22, Z+2	; 0x02
    e5b8:	d6 12       	cpse	r13, r22
    e5ba:	19 c0       	rjmp	.+50     	; 0xe5ee <qtm_key_sensors_process+0x714>
    e5bc:	ba 01       	movw	r22, r20
    e5be:	66 0f       	add	r22, r22
    e5c0:	77 1f       	adc	r23, r23
    e5c2:	ec 81       	ldd	r30, Y+4	; 0x04
    e5c4:	fd 81       	ldd	r31, Y+5	; 0x05
    e5c6:	4f 01       	movw	r8, r30
    e5c8:	86 0e       	add	r8, r22
    e5ca:	97 1e       	adc	r9, r23
    e5cc:	f4 01       	movw	r30, r8
    e5ce:	e2 80       	ldd	r14, Z+2	; 0x02
    e5d0:	f3 80       	ldd	r15, Z+3	; 0x03
    e5d2:	f7 01       	movw	r30, r14
    e5d4:	f0 80       	ld	r15, Z
    e5d6:	f0 fe       	sbrs	r15, 0
    e5d8:	0a c0       	rjmp	.+20     	; 0xe5ee <qtm_key_sensors_process+0x714>
    e5da:	f4 01       	movw	r30, r8
    e5dc:	a0 82       	st	Z, r10
    e5de:	ec 81       	ldd	r30, Y+4	; 0x04
    e5e0:	fd 81       	ldd	r31, Y+5	; 0x05
    e5e2:	e6 0f       	add	r30, r22
    e5e4:	f7 1f       	adc	r31, r23
    e5e6:	02 80       	ldd	r0, Z+2	; 0x02
    e5e8:	f3 81       	ldd	r31, Z+3	; 0x03
    e5ea:	e0 2d       	mov	r30, r0
    e5ec:	b0 82       	st	Z, r11
    e5ee:	0f 5f       	subi	r16, 0xFF	; 255
    e5f0:	1f 4f       	sbci	r17, 0xFF	; 255
    e5f2:	4d 5f       	subi	r20, 0xFD	; 253
    e5f4:	5f 4f       	sbci	r21, 0xFF	; 255
    e5f6:	d4 cf       	rjmp	.-88     	; 0xe5a0 <qtm_key_sensors_process+0x6c6>
    e5f8:	11 96       	adiw	r26, 0x01	; 1
    e5fa:	2d 5f       	subi	r18, 0xFD	; 253
    e5fc:	3f 4f       	sbci	r19, 0xFF	; 255
    e5fe:	34 cf       	rjmp	.-408    	; 0xe468 <qtm_key_sensors_process+0x58e>
    e600:	8b e0       	ldi	r24, 0x0B	; 11
    e602:	df 91       	pop	r29
    e604:	cf 91       	pop	r28
    e606:	1f 91       	pop	r17
    e608:	0f 91       	pop	r16
    e60a:	ff 90       	pop	r15
    e60c:	ef 90       	pop	r14
    e60e:	df 90       	pop	r13
    e610:	cf 90       	pop	r12
    e612:	bf 90       	pop	r11
    e614:	af 90       	pop	r10
    e616:	9f 90       	pop	r9
    e618:	8f 90       	pop	r8
    e61a:	7f 90       	pop	r7
    e61c:	6f 90       	pop	r6
    e61e:	5f 90       	pop	r5
    e620:	4f 90       	pop	r4
    e622:	3f 90       	pop	r3
    e624:	2f 90       	pop	r2
    e626:	08 95       	ret

0000e628 <divide>:
    e628:	9c 01       	movw	r18, r24
    e62a:	61 15       	cp	r22, r1
    e62c:	71 05       	cpc	r23, r1
    e62e:	09 f1       	breq	.+66     	; 0xe672 <divide+0x4a>
    e630:	4f 5f       	subi	r20, 0xFF	; 255
    e632:	37 fd       	sbrc	r19, 7
    e634:	06 c0       	rjmp	.+12     	; 0xe642 <divide+0x1a>
    e636:	44 23       	and	r20, r20
    e638:	21 f0       	breq	.+8      	; 0xe642 <divide+0x1a>
    e63a:	41 50       	subi	r20, 0x01	; 1
    e63c:	22 0f       	add	r18, r18
    e63e:	33 1f       	adc	r19, r19
    e640:	f8 cf       	rjmp	.-16     	; 0xe632 <divide+0xa>
    e642:	77 fd       	sbrc	r23, 7
    e644:	04 c0       	rjmp	.+8      	; 0xe64e <divide+0x26>
    e646:	4f 5f       	subi	r20, 0xFF	; 255
    e648:	66 0f       	add	r22, r22
    e64a:	77 1f       	adc	r23, r23
    e64c:	fa cf       	rjmp	.-12     	; 0xe642 <divide+0x1a>
    e64e:	80 e0       	ldi	r24, 0x00	; 0
    e650:	90 e0       	ldi	r25, 0x00	; 0
    e652:	44 23       	and	r20, r20
    e654:	81 f0       	breq	.+32     	; 0xe676 <divide+0x4e>
    e656:	97 fd       	sbrc	r25, 7
    e658:	0c c0       	rjmp	.+24     	; 0xe672 <divide+0x4a>
    e65a:	88 0f       	add	r24, r24
    e65c:	99 1f       	adc	r25, r25
    e65e:	41 50       	subi	r20, 0x01	; 1
    e660:	26 17       	cp	r18, r22
    e662:	37 07       	cpc	r19, r23
    e664:	18 f0       	brcs	.+6      	; 0xe66c <divide+0x44>
    e666:	26 1b       	sub	r18, r22
    e668:	37 0b       	sbc	r19, r23
    e66a:	01 96       	adiw	r24, 0x01	; 1
    e66c:	76 95       	lsr	r23
    e66e:	67 95       	ror	r22
    e670:	f0 cf       	rjmp	.-32     	; 0xe652 <divide+0x2a>
    e672:	8f ef       	ldi	r24, 0xFF	; 255
    e674:	9f ef       	ldi	r25, 0xFF	; 255
    e676:	08 95       	ret

0000e678 <qtm_init_scroller_module>:
    e678:	cf 93       	push	r28
    e67a:	df 93       	push	r29
    e67c:	fc 01       	movw	r30, r24
    e67e:	89 2b       	or	r24, r25
    e680:	b9 f1       	breq	.+110    	; 0xe6f0 <qtm_init_scroller_module+0x78>
    e682:	24 81       	ldd	r18, Z+4	; 0x04
    e684:	35 81       	ldd	r19, Z+5	; 0x05
    e686:	21 15       	cp	r18, r1
    e688:	31 05       	cpc	r19, r1
    e68a:	91 f1       	breq	.+100    	; 0xe6f0 <qtm_init_scroller_module+0x78>
    e68c:	46 81       	ldd	r20, Z+6	; 0x06
    e68e:	57 81       	ldd	r21, Z+7	; 0x07
    e690:	41 15       	cp	r20, r1
    e692:	51 05       	cpc	r21, r1
    e694:	69 f1       	breq	.+90     	; 0xe6f0 <qtm_init_scroller_module+0x78>
    e696:	a0 81       	ld	r26, Z
    e698:	b1 81       	ldd	r27, Z+1	; 0x01
    e69a:	1c 92       	st	X, r1
    e69c:	90 e0       	ldi	r25, 0x00	; 0
    e69e:	a2 81       	ldd	r26, Z+2	; 0x02
    e6a0:	b3 81       	ldd	r27, Z+3	; 0x03
    e6a2:	12 96       	adiw	r26, 0x02	; 2
    e6a4:	8c 91       	ld	r24, X
    e6a6:	98 17       	cp	r25, r24
    e6a8:	08 f5       	brcc	.+66     	; 0xe6ec <qtm_init_scroller_module+0x74>
    e6aa:	d9 01       	movw	r26, r18
    e6ac:	89 e0       	ldi	r24, 0x09	; 9
    e6ae:	98 9f       	mul	r25, r24
    e6b0:	a0 0d       	add	r26, r0
    e6b2:	b1 1d       	adc	r27, r1
    e6b4:	11 24       	eor	r1, r1
    e6b6:	11 96       	adiw	r26, 0x01	; 1
    e6b8:	1c 92       	st	X, r1
    e6ba:	11 97       	sbiw	r26, 0x01	; 1
    e6bc:	ea 01       	movw	r28, r20
    e6be:	88 e0       	ldi	r24, 0x08	; 8
    e6c0:	98 9f       	mul	r25, r24
    e6c2:	c0 0d       	add	r28, r0
    e6c4:	d1 1d       	adc	r29, r1
    e6c6:	11 24       	eor	r1, r1
    e6c8:	8d 81       	ldd	r24, Y+5	; 0x05
    e6ca:	12 96       	adiw	r26, 0x02	; 2
    e6cc:	8c 93       	st	X, r24
    e6ce:	12 97       	sbiw	r26, 0x02	; 2
    e6d0:	13 96       	adiw	r26, 0x03	; 3
    e6d2:	1d 92       	st	X+, r1
    e6d4:	1c 92       	st	X, r1
    e6d6:	14 97       	sbiw	r26, 0x04	; 4
    e6d8:	15 96       	adiw	r26, 0x05	; 5
    e6da:	1d 92       	st	X+, r1
    e6dc:	1c 92       	st	X, r1
    e6de:	16 97       	sbiw	r26, 0x06	; 6
    e6e0:	17 96       	adiw	r26, 0x07	; 7
    e6e2:	1d 92       	st	X+, r1
    e6e4:	1c 92       	st	X, r1
    e6e6:	18 97       	sbiw	r26, 0x08	; 8
    e6e8:	9f 5f       	subi	r25, 0xFF	; 255
    e6ea:	d9 cf       	rjmp	.-78     	; 0xe69e <qtm_init_scroller_module+0x26>
    e6ec:	80 e0       	ldi	r24, 0x00	; 0
    e6ee:	01 c0       	rjmp	.+2      	; 0xe6f2 <qtm_init_scroller_module+0x7a>
    e6f0:	8b e0       	ldi	r24, 0x0B	; 11
    e6f2:	df 91       	pop	r29
    e6f4:	cf 91       	pop	r28
    e6f6:	08 95       	ret

0000e6f8 <qtm_scroller_process>:
    e6f8:	2f 92       	push	r2
    e6fa:	3f 92       	push	r3
    e6fc:	4f 92       	push	r4
    e6fe:	5f 92       	push	r5
    e700:	6f 92       	push	r6
    e702:	7f 92       	push	r7
    e704:	8f 92       	push	r8
    e706:	9f 92       	push	r9
    e708:	af 92       	push	r10
    e70a:	bf 92       	push	r11
    e70c:	cf 92       	push	r12
    e70e:	df 92       	push	r13
    e710:	ef 92       	push	r14
    e712:	ff 92       	push	r15
    e714:	0f 93       	push	r16
    e716:	1f 93       	push	r17
    e718:	cf 93       	push	r28
    e71a:	df 93       	push	r29
    e71c:	cd b7       	in	r28, 0x3d	; 61
    e71e:	de b7       	in	r29, 0x3e	; 62
    e720:	61 97       	sbiw	r28, 0x11	; 17
    e722:	cd bf       	out	0x3d, r28	; 61
    e724:	de bf       	out	0x3e, r29	; 62
    e726:	fc 01       	movw	r30, r24
    e728:	00 97       	sbiw	r24, 0x00	; 0
    e72a:	09 f4       	brne	.+2      	; 0xe72e <qtm_scroller_process+0x36>
    e72c:	dc c2       	rjmp	.+1464   	; 0xece6 <qtm_scroller_process+0x5ee>
    e72e:	e4 80       	ldd	r14, Z+4	; 0x04
    e730:	f5 80       	ldd	r15, Z+5	; 0x05
    e732:	ea 86       	std	Y+10, r14	; 0x0a
    e734:	fb 86       	std	Y+11, r15	; 0x0b
    e736:	ef 28       	or	r14, r15
    e738:	09 f4       	brne	.+2      	; 0xe73c <qtm_scroller_process+0x44>
    e73a:	d5 c2       	rjmp	.+1450   	; 0xece6 <qtm_scroller_process+0x5ee>
    e73c:	e6 80       	ldd	r14, Z+6	; 0x06
    e73e:	f7 80       	ldd	r15, Z+7	; 0x07
    e740:	e8 86       	std	Y+8, r14	; 0x08
    e742:	f9 86       	std	Y+9, r15	; 0x09
    e744:	ef 28       	or	r14, r15
    e746:	09 f4       	brne	.+2      	; 0xe74a <qtm_scroller_process+0x52>
    e748:	ce c2       	rjmp	.+1436   	; 0xece6 <qtm_scroller_process+0x5ee>
    e74a:	a2 81       	ldd	r26, Z+2	; 0x02
    e74c:	b3 81       	ldd	r27, Z+3	; 0x03
    e74e:	4d 90       	ld	r4, X+
    e750:	5c 90       	ld	r5, X
    e752:	41 14       	cp	r4, r1
    e754:	51 04       	cpc	r5, r1
    e756:	09 f4       	brne	.+2      	; 0xe75a <qtm_scroller_process+0x62>
    e758:	c6 c2       	rjmp	.+1420   	; 0xece6 <qtm_scroller_process+0x5ee>
    e75a:	8e 83       	std	Y+6, r24	; 0x06
    e75c:	9f 83       	std	Y+7, r25	; 0x07
    e75e:	00 e0       	ldi	r16, 0x00	; 0
    e760:	1a 82       	std	Y+2, r1	; 0x02
    e762:	91 2c       	mov	r9, r1
    e764:	16 e0       	ldi	r17, 0x06	; 6
    e766:	81 2e       	mov	r8, r17
    e768:	ae 81       	ldd	r26, Y+6	; 0x06
    e76a:	bf 81       	ldd	r27, Y+7	; 0x07
    e76c:	12 96       	adiw	r26, 0x02	; 2
    e76e:	ed 91       	ld	r30, X+
    e770:	fc 91       	ld	r31, X
    e772:	13 97       	sbiw	r26, 0x03	; 3
    e774:	82 81       	ldd	r24, Z+2	; 0x02
    e776:	98 16       	cp	r9, r24
    e778:	08 f0       	brcs	.+2      	; 0xe77c <qtm_scroller_process+0x84>
    e77a:	b0 c2       	rjmp	.+1376   	; 0xecdc <qtm_scroller_process+0x5e4>
    e77c:	68 84       	ldd	r6, Y+8	; 0x08
    e77e:	79 84       	ldd	r7, Y+9	; 0x09
    e780:	28 e0       	ldi	r18, 0x08	; 8
    e782:	92 9e       	mul	r9, r18
    e784:	60 0c       	add	r6, r0
    e786:	71 1c       	adc	r7, r1
    e788:	11 24       	eor	r1, r1
    e78a:	d3 01       	movw	r26, r6
    e78c:	11 96       	adiw	r26, 0x01	; 1
    e78e:	4d 91       	ld	r20, X+
    e790:	5c 91       	ld	r21, X
    e792:	12 97       	sbiw	r26, 0x02	; 2
    e794:	13 96       	adiw	r26, 0x03	; 3
    e796:	ac 90       	ld	r10, X
    e798:	7a 01       	movw	r14, r20
    e79a:	ea 0c       	add	r14, r10
    e79c:	f1 1c       	adc	r15, r1
    e79e:	ca 01       	movw	r24, r20
    e7a0:	60 e0       	ldi	r22, 0x00	; 0
    e7a2:	8e 15       	cp	r24, r14
    e7a4:	9f 05       	cpc	r25, r15
    e7a6:	70 f4       	brcc	.+28     	; 0xe7c4 <qtm_scroller_process+0xcc>
    e7a8:	88 9e       	mul	r8, r24
    e7aa:	f0 01       	movw	r30, r0
    e7ac:	89 9e       	mul	r8, r25
    e7ae:	f0 0d       	add	r31, r0
    e7b0:	11 24       	eor	r1, r1
    e7b2:	e4 0d       	add	r30, r4
    e7b4:	f5 1d       	adc	r31, r5
    e7b6:	20 81       	ld	r18, Z
    e7b8:	25 38       	cpi	r18, 0x85	; 133
    e7ba:	11 f4       	brne	.+4      	; 0xe7c0 <qtm_scroller_process+0xc8>
    e7bc:	c7 01       	movw	r24, r14
    e7be:	61 e0       	ldi	r22, 0x01	; 1
    e7c0:	01 96       	adiw	r24, 0x01	; 1
    e7c2:	ef cf       	rjmp	.-34     	; 0xe7a2 <qtm_scroller_process+0xaa>
    e7c4:	84 9e       	mul	r8, r20
    e7c6:	f0 01       	movw	r30, r0
    e7c8:	85 9e       	mul	r8, r21
    e7ca:	f0 0d       	add	r31, r0
    e7cc:	11 24       	eor	r1, r1
    e7ce:	ec 83       	std	Y+4, r30	; 0x04
    e7d0:	fd 83       	std	Y+5, r31	; 0x05
    e7d2:	34 97       	sbiw	r30, 0x04	; 4
    e7d4:	e4 0d       	add	r30, r4
    e7d6:	f5 1d       	adc	r31, r5
    e7d8:	26 e0       	ldi	r18, 0x06	; 6
    e7da:	a2 9e       	mul	r10, r18
    e7dc:	50 01       	movw	r10, r0
    e7de:	11 24       	eor	r1, r1
    e7e0:	1a 01       	movw	r2, r20
    e7e2:	70 e0       	ldi	r23, 0x00	; 0
    e7e4:	18 8a       	std	Y+16, r1	; 0x10
    e7e6:	19 8a       	std	Y+17, r1	; 0x11
    e7e8:	2e 14       	cp	r2, r14
    e7ea:	3f 04       	cpc	r3, r15
    e7ec:	08 f0       	brcs	.+2      	; 0xe7f0 <qtm_scroller_process+0xf8>
    e7ee:	4f c0       	rjmp	.+158    	; 0xe88e <qtm_scroller_process+0x196>
    e7f0:	86 81       	ldd	r24, Z+6	; 0x06
    e7f2:	97 81       	ldd	r25, Z+7	; 0x07
    e7f4:	dc 01       	movw	r26, r24
    e7f6:	11 96       	adiw	r26, 0x01	; 1
    e7f8:	2d 91       	ld	r18, X+
    e7fa:	3c 91       	ld	r19, X
    e7fc:	12 97       	sbiw	r26, 0x02	; 2
    e7fe:	80 85       	ldd	r24, Z+8	; 0x08
    e800:	91 85       	ldd	r25, Z+9	; 0x09
    e802:	28 1b       	sub	r18, r24
    e804:	39 0b       	sbc	r19, r25
    e806:	12 16       	cp	r1, r18
    e808:	13 06       	cpc	r1, r19
    e80a:	14 f0       	brlt	.+4      	; 0xe810 <qtm_scroller_process+0x118>
    e80c:	20 e0       	ldi	r18, 0x00	; 0
    e80e:	30 e0       	ldi	r19, 0x00	; 0
    e810:	24 16       	cp	r2, r20
    e812:	35 06       	cpc	r3, r21
    e814:	a9 f4       	brne	.+42     	; 0xe840 <qtm_scroller_process+0x148>
    e816:	d3 01       	movw	r26, r6
    e818:	8c 91       	ld	r24, X
    e81a:	81 30       	cpi	r24, 0x01	; 1
    e81c:	f9 f4       	brne	.+62     	; 0xe85c <qtm_scroller_process+0x164>
    e81e:	6f 01       	movw	r12, r30
    e820:	ca 0c       	add	r12, r10
    e822:	db 1c       	adc	r13, r11
    e824:	d6 01       	movw	r26, r12
    e826:	8d 91       	ld	r24, X+
    e828:	9c 91       	ld	r25, X
    e82a:	dc 01       	movw	r26, r24
    e82c:	11 96       	adiw	r26, 0x01	; 1
    e82e:	8d 91       	ld	r24, X+
    e830:	9c 91       	ld	r25, X
    e832:	12 97       	sbiw	r26, 0x02	; 2
    e834:	d6 01       	movw	r26, r12
    e836:	12 96       	adiw	r26, 0x02	; 2
    e838:	cd 90       	ld	r12, X+
    e83a:	dc 90       	ld	r13, X
    e83c:	13 97       	sbiw	r26, 0x03	; 3
    e83e:	09 c0       	rjmp	.+18     	; 0xe852 <qtm_scroller_process+0x15a>
    e840:	80 81       	ld	r24, Z
    e842:	91 81       	ldd	r25, Z+1	; 0x01
    e844:	dc 01       	movw	r26, r24
    e846:	11 96       	adiw	r26, 0x01	; 1
    e848:	8d 91       	ld	r24, X+
    e84a:	9c 91       	ld	r25, X
    e84c:	12 97       	sbiw	r26, 0x02	; 2
    e84e:	c2 80       	ldd	r12, Z+2	; 0x02
    e850:	d3 80       	ldd	r13, Z+3	; 0x03
    e852:	8c 19       	sub	r24, r12
    e854:	9d 09       	sbc	r25, r13
    e856:	18 16       	cp	r1, r24
    e858:	19 06       	cpc	r1, r25
    e85a:	14 f0       	brlt	.+4      	; 0xe860 <qtm_scroller_process+0x168>
    e85c:	80 e0       	ldi	r24, 0x00	; 0
    e85e:	90 e0       	ldi	r25, 0x00	; 0
    e860:	28 0f       	add	r18, r24
    e862:	39 1f       	adc	r19, r25
    e864:	d3 01       	movw	r26, r6
    e866:	16 96       	adiw	r26, 0x06	; 6
    e868:	8d 91       	ld	r24, X+
    e86a:	9c 91       	ld	r25, X
    e86c:	17 97       	sbiw	r26, 0x07	; 7
    e86e:	28 17       	cp	r18, r24
    e870:	39 07       	cpc	r19, r25
    e872:	40 f0       	brcs	.+16     	; 0xe884 <qtm_scroller_process+0x18c>
    e874:	88 89       	ldd	r24, Y+16	; 0x10
    e876:	99 89       	ldd	r25, Y+17	; 0x11
    e878:	82 17       	cp	r24, r18
    e87a:	93 07       	cpc	r25, r19
    e87c:	10 f4       	brcc	.+4      	; 0xe882 <qtm_scroller_process+0x18a>
    e87e:	28 8b       	std	Y+16, r18	; 0x10
    e880:	39 8b       	std	Y+17, r19	; 0x11
    e882:	71 e0       	ldi	r23, 0x01	; 1
    e884:	9f ef       	ldi	r25, 0xFF	; 255
    e886:	29 1a       	sub	r2, r25
    e888:	39 0a       	sbc	r3, r25
    e88a:	36 96       	adiw	r30, 0x06	; 6
    e88c:	ad cf       	rjmp	.-166    	; 0xe7e8 <qtm_scroller_process+0xf0>
    e88e:	71 11       	cpse	r23, r1
    e890:	01 c0       	rjmp	.+2      	; 0xe894 <qtm_scroller_process+0x19c>
    e892:	60 e0       	ldi	r22, 0x00	; 0
    e894:	a9 e0       	ldi	r26, 0x09	; 9
    e896:	9a 9e       	mul	r9, r26
    e898:	90 01       	movw	r18, r0
    e89a:	11 24       	eor	r1, r1
    e89c:	ea 84       	ldd	r14, Y+10	; 0x0a
    e89e:	fb 84       	ldd	r15, Y+11	; 0x0b
    e8a0:	e2 0e       	add	r14, r18
    e8a2:	f3 1e       	adc	r15, r19
    e8a4:	ee 86       	std	Y+14, r14	; 0x0e
    e8a6:	ff 86       	std	Y+15, r15	; 0x0f
    e8a8:	d7 01       	movw	r26, r14
    e8aa:	8c 91       	ld	r24, X
    e8ac:	ae 81       	ldd	r26, Y+6	; 0x06
    e8ae:	bf 81       	ldd	r27, Y+7	; 0x07
    e8b0:	14 96       	adiw	r26, 0x04	; 4
    e8b2:	ed 91       	ld	r30, X+
    e8b4:	fc 91       	ld	r31, X
    e8b6:	15 97       	sbiw	r26, 0x05	; 5
    e8b8:	b8 2f       	mov	r27, r24
    e8ba:	b1 70       	andi	r27, 0x01	; 1
    e8bc:	bd 87       	std	Y+13, r27	; 0x0d
    e8be:	80 ff       	sbrs	r24, 0
    e8c0:	1e c0       	rjmp	.+60     	; 0xe8fe <qtm_scroller_process+0x206>
    e8c2:	7f 01       	movw	r14, r30
    e8c4:	e2 0e       	add	r14, r18
    e8c6:	f3 1e       	adc	r15, r19
    e8c8:	d7 01       	movw	r26, r14
    e8ca:	17 96       	adiw	r26, 0x07	; 7
    e8cc:	cd 90       	ld	r12, X+
    e8ce:	dc 90       	ld	r13, X
    e8d0:	18 97       	sbiw	r26, 0x08	; 8
    e8d2:	c6 01       	movw	r24, r12
    e8d4:	88 0f       	add	r24, r24
    e8d6:	99 1f       	adc	r25, r25
    e8d8:	8c 0d       	add	r24, r12
    e8da:	9d 1d       	adc	r25, r13
    e8dc:	a8 89       	ldd	r26, Y+16	; 0x10
    e8de:	b9 89       	ldd	r27, Y+17	; 0x11
    e8e0:	8a 0f       	add	r24, r26
    e8e2:	9b 1f       	adc	r25, r27
    e8e4:	96 95       	lsr	r25
    e8e6:	87 95       	ror	r24
    e8e8:	96 95       	lsr	r25
    e8ea:	87 95       	ror	r24
    e8ec:	d7 01       	movw	r26, r14
    e8ee:	17 96       	adiw	r26, 0x07	; 7
    e8f0:	8d 93       	st	X+, r24
    e8f2:	9c 93       	st	X, r25
    e8f4:	18 97       	sbiw	r26, 0x08	; 8
    e8f6:	77 23       	and	r23, r23
    e8f8:	61 f0       	breq	.+24     	; 0xe912 <qtm_scroller_process+0x21a>
    e8fa:	61 e0       	ldi	r22, 0x01	; 1
    e8fc:	0a c0       	rjmp	.+20     	; 0xe912 <qtm_scroller_process+0x21a>
    e8fe:	cf 01       	movw	r24, r30
    e900:	82 0f       	add	r24, r18
    e902:	93 1f       	adc	r25, r19
    e904:	e8 88       	ldd	r14, Y+16	; 0x10
    e906:	f9 88       	ldd	r15, Y+17	; 0x11
    e908:	dc 01       	movw	r26, r24
    e90a:	17 96       	adiw	r26, 0x07	; 7
    e90c:	ed 92       	st	X+, r14
    e90e:	fc 92       	st	X, r15
    e910:	18 97       	sbiw	r26, 0x08	; 8
    e912:	d3 01       	movw	r26, r6
    e914:	bc 91       	ld	r27, X
    e916:	b9 83       	std	Y+1, r27	; 0x01
    e918:	b2 30       	cpi	r27, 0x02	; 2
    e91a:	08 f0       	brcs	.+2      	; 0xe91e <qtm_scroller_process+0x226>
    e91c:	d4 c1       	rjmp	.+936    	; 0xecc6 <qtm_scroller_process+0x5ce>
    e91e:	d3 01       	movw	r26, r6
    e920:	14 96       	adiw	r26, 0x04	; 4
    e922:	1c 91       	ld	r17, X
    e924:	10 3d       	cpi	r17, 0xD0	; 208
    e926:	08 f0       	brcs	.+2      	; 0xe92a <qtm_scroller_process+0x232>
    e928:	ce c1       	rjmp	.+924    	; 0xecc6 <qtm_scroller_process+0x5ce>
    e92a:	61 11       	cpse	r22, r1
    e92c:	05 c0       	rjmp	.+10     	; 0xe938 <qtm_scroller_process+0x240>
    e92e:	e2 0f       	add	r30, r18
    e930:	f3 1f       	adc	r31, r19
    e932:	17 82       	std	Z+7, r1	; 0x07
    e934:	10 86       	std	Z+8, r1	; 0x08
    e936:	c8 c1       	rjmp	.+912    	; 0xecc8 <qtm_scroller_process+0x5d0>
    e938:	f3 01       	movw	r30, r6
    e93a:	f3 81       	ldd	r31, Z+3	; 0x03
    e93c:	fb 83       	std	Y+3, r31	; 0x03
    e93e:	e1 2e       	mov	r14, r17
    e940:	e2 94       	swap	r14
    e942:	9f e0       	ldi	r25, 0x0F	; 15
    e944:	e9 22       	and	r14, r25
    e946:	ec 86       	std	Y+12, r14	; 0x0c
    e948:	ac 80       	ldd	r10, Y+4	; 0x04
    e94a:	bd 80       	ldd	r11, Y+5	; 0x05
    e94c:	a4 0c       	add	r10, r4
    e94e:	b5 1c       	adc	r11, r5
    e950:	f5 01       	movw	r30, r10
    e952:	ba 01       	movw	r22, r20
    e954:	21 2c       	mov	r2, r1
    e956:	31 2c       	mov	r3, r1
    e958:	20 e0       	ldi	r18, 0x00	; 0
    e95a:	30 e0       	ldi	r19, 0x00	; 0
    e95c:	8b 81       	ldd	r24, Y+3	; 0x03
    e95e:	e8 2e       	mov	r14, r24
    e960:	f1 2c       	mov	r15, r1
    e962:	6a 01       	movw	r12, r20
    e964:	ce 0c       	add	r12, r14
    e966:	df 1c       	adc	r13, r15
    e968:	6c 15       	cp	r22, r12
    e96a:	7d 05       	cpc	r23, r13
    e96c:	b0 f4       	brcc	.+44     	; 0xe99a <qtm_scroller_process+0x2a2>
    e96e:	a2 81       	ldd	r26, Z+2	; 0x02
    e970:	b3 81       	ldd	r27, Z+3	; 0x03
    e972:	11 96       	adiw	r26, 0x01	; 1
    e974:	8d 91       	ld	r24, X+
    e976:	9c 91       	ld	r25, X
    e978:	12 97       	sbiw	r26, 0x02	; 2
    e97a:	a4 81       	ldd	r26, Z+4	; 0x04
    e97c:	b5 81       	ldd	r27, Z+5	; 0x05
    e97e:	8a 1b       	sub	r24, r26
    e980:	9b 0b       	sbc	r25, r27
    e982:	18 16       	cp	r1, r24
    e984:	19 06       	cpc	r1, r25
    e986:	2c f4       	brge	.+10     	; 0xe992 <qtm_scroller_process+0x29a>
    e988:	28 16       	cp	r2, r24
    e98a:	39 06       	cpc	r3, r25
    e98c:	14 f4       	brge	.+4      	; 0xe992 <qtm_scroller_process+0x29a>
    e98e:	1c 01       	movw	r2, r24
    e990:	9b 01       	movw	r18, r22
    e992:	6f 5f       	subi	r22, 0xFF	; 255
    e994:	7f 4f       	sbci	r23, 0xFF	; 255
    e996:	36 96       	adiw	r30, 0x06	; 6
    e998:	e7 cf       	rjmp	.-50     	; 0xe968 <qtm_scroller_process+0x270>
    e99a:	42 17       	cp	r20, r18
    e99c:	53 07       	cpc	r21, r19
    e99e:	79 f5       	brne	.+94     	; 0xe9fe <qtm_scroller_process+0x306>
    e9a0:	99 81       	ldd	r25, Y+1	; 0x01
    e9a2:	91 30       	cpi	r25, 0x01	; 1
    e9a4:	09 f0       	breq	.+2      	; 0xe9a8 <qtm_scroller_process+0x2b0>
    e9a6:	a1 c1       	rjmp	.+834    	; 0xecea <qtm_scroller_process+0x5f2>
    e9a8:	8c 9c       	mul	r8, r12
    e9aa:	f0 01       	movw	r30, r0
    e9ac:	8d 9c       	mul	r8, r13
    e9ae:	f0 0d       	add	r31, r0
    e9b0:	11 24       	eor	r1, r1
    e9b2:	36 97       	sbiw	r30, 0x06	; 6
    e9b4:	e4 0d       	add	r30, r4
    e9b6:	f5 1d       	adc	r31, r5
    e9b8:	a2 81       	ldd	r26, Z+2	; 0x02
    e9ba:	b3 81       	ldd	r27, Z+3	; 0x03
    e9bc:	11 96       	adiw	r26, 0x01	; 1
    e9be:	6d 91       	ld	r22, X+
    e9c0:	7c 91       	ld	r23, X
    e9c2:	12 97       	sbiw	r26, 0x02	; 2
    e9c4:	84 81       	ldd	r24, Z+4	; 0x04
    e9c6:	95 81       	ldd	r25, Z+5	; 0x05
    e9c8:	68 1b       	sub	r22, r24
    e9ca:	79 0b       	sbc	r23, r25
    e9cc:	ec 81       	ldd	r30, Y+4	; 0x04
    e9ce:	fd 81       	ldd	r31, Y+5	; 0x05
    e9d0:	36 96       	adiw	r30, 0x06	; 6
    e9d2:	e4 0d       	add	r30, r4
    e9d4:	f5 1d       	adc	r31, r5
    e9d6:	a2 81       	ldd	r26, Z+2	; 0x02
    e9d8:	b3 81       	ldd	r27, Z+3	; 0x03
    e9da:	11 96       	adiw	r26, 0x01	; 1
    e9dc:	8d 91       	ld	r24, X+
    e9de:	9c 91       	ld	r25, X
    e9e0:	12 97       	sbiw	r26, 0x02	; 2
    e9e2:	04 80       	ldd	r0, Z+4	; 0x04
    e9e4:	f5 81       	ldd	r31, Z+5	; 0x05
    e9e6:	e0 2d       	mov	r30, r0
    e9e8:	8e 1b       	sub	r24, r30
    e9ea:	9f 0b       	sbc	r25, r31
    e9ec:	97 ff       	sbrs	r25, 7
    e9ee:	02 c0       	rjmp	.+4      	; 0xe9f4 <qtm_scroller_process+0x2fc>
    e9f0:	80 e0       	ldi	r24, 0x00	; 0
    e9f2:	90 e0       	ldi	r25, 0x00	; 0
    e9f4:	86 17       	cp	r24, r22
    e9f6:	97 07       	cpc	r25, r23
    e9f8:	0c f4       	brge	.+2      	; 0xe9fc <qtm_scroller_process+0x304>
    e9fa:	7b c1       	rjmp	.+758    	; 0xecf2 <qtm_scroller_process+0x5fa>
    e9fc:	12 c0       	rjmp	.+36     	; 0xea22 <qtm_scroller_process+0x32a>
    e9fe:	82 9e       	mul	r8, r18
    ea00:	f0 01       	movw	r30, r0
    ea02:	83 9e       	mul	r8, r19
    ea04:	f0 0d       	add	r31, r0
    ea06:	11 24       	eor	r1, r1
    ea08:	36 97       	sbiw	r30, 0x06	; 6
    ea0a:	e4 0d       	add	r30, r4
    ea0c:	f5 1d       	adc	r31, r5
    ea0e:	a2 81       	ldd	r26, Z+2	; 0x02
    ea10:	b3 81       	ldd	r27, Z+3	; 0x03
    ea12:	11 96       	adiw	r26, 0x01	; 1
    ea14:	6d 91       	ld	r22, X+
    ea16:	7c 91       	ld	r23, X
    ea18:	12 97       	sbiw	r26, 0x02	; 2
    ea1a:	84 81       	ldd	r24, Z+4	; 0x04
    ea1c:	95 81       	ldd	r25, Z+5	; 0x05
    ea1e:	68 1b       	sub	r22, r24
    ea20:	79 0b       	sbc	r23, r25
    ea22:	90 e0       	ldi	r25, 0x00	; 0
    ea24:	77 ff       	sbrs	r23, 7
    ea26:	02 c0       	rjmp	.+4      	; 0xea2c <qtm_scroller_process+0x334>
    ea28:	60 e0       	ldi	r22, 0x00	; 0
    ea2a:	70 e0       	ldi	r23, 0x00	; 0
    ea2c:	a1 e0       	ldi	r26, 0x01	; 1
    ea2e:	ca 1a       	sub	r12, r26
    ea30:	d1 08       	sbc	r13, r1
    ea32:	2c 15       	cp	r18, r12
    ea34:	3d 05       	cpc	r19, r13
    ea36:	81 f4       	brne	.+32     	; 0xea58 <qtm_scroller_process+0x360>
    ea38:	b9 81       	ldd	r27, Y+1	; 0x01
    ea3a:	b1 30       	cpi	r27, 0x01	; 1
    ea3c:	29 f5       	brne	.+74     	; 0xea88 <qtm_scroller_process+0x390>
    ea3e:	d5 01       	movw	r26, r10
    ea40:	12 96       	adiw	r26, 0x02	; 2
    ea42:	ed 91       	ld	r30, X+
    ea44:	fc 91       	ld	r31, X
    ea46:	13 97       	sbiw	r26, 0x03	; 3
    ea48:	c1 80       	ldd	r12, Z+1	; 0x01
    ea4a:	d2 80       	ldd	r13, Z+2	; 0x02
    ea4c:	14 96       	adiw	r26, 0x04	; 4
    ea4e:	0d 90       	ld	r0, X+
    ea50:	bc 91       	ld	r27, X
    ea52:	a0 2d       	mov	r26, r0
    ea54:	f6 01       	movw	r30, r12
    ea56:	14 c0       	rjmp	.+40     	; 0xea80 <qtm_scroller_process+0x388>
    ea58:	f9 01       	movw	r30, r18
    ea5a:	31 96       	adiw	r30, 0x01	; 1
    ea5c:	8e 9e       	mul	r8, r30
    ea5e:	d0 01       	movw	r26, r0
    ea60:	8f 9e       	mul	r8, r31
    ea62:	b0 0d       	add	r27, r0
    ea64:	11 24       	eor	r1, r1
    ea66:	a4 0d       	add	r26, r4
    ea68:	b5 1d       	adc	r27, r5
    ea6a:	12 96       	adiw	r26, 0x02	; 2
    ea6c:	ed 91       	ld	r30, X+
    ea6e:	fc 91       	ld	r31, X
    ea70:	13 97       	sbiw	r26, 0x03	; 3
    ea72:	01 80       	ldd	r0, Z+1	; 0x01
    ea74:	f2 81       	ldd	r31, Z+2	; 0x02
    ea76:	e0 2d       	mov	r30, r0
    ea78:	14 96       	adiw	r26, 0x04	; 4
    ea7a:	0d 90       	ld	r0, X+
    ea7c:	bc 91       	ld	r27, X
    ea7e:	a0 2d       	mov	r26, r0
    ea80:	ea 1b       	sub	r30, r26
    ea82:	fb 0b       	sbc	r31, r27
    ea84:	f7 ff       	sbrs	r31, 7
    ea86:	02 c0       	rjmp	.+4      	; 0xea8c <qtm_scroller_process+0x394>
    ea88:	e0 e0       	ldi	r30, 0x00	; 0
    ea8a:	f0 e0       	ldi	r31, 0x00	; 0
    ea8c:	bb 81       	ldd	r27, Y+3	; 0x03
    ea8e:	b0 31       	cpi	r27, 0x10	; 16
    ea90:	28 f0       	brcs	.+10     	; 0xea9c <qtm_scroller_process+0x3a4>
    ea92:	b4 e0       	ldi	r27, 0x04	; 4
    ea94:	ab 2e       	mov	r10, r27
    ea96:	88 e0       	ldi	r24, 0x08	; 8
    ea98:	b8 2e       	mov	r11, r24
    ea9a:	03 c0       	rjmp	.+6      	; 0xeaa2 <qtm_scroller_process+0x3aa>
    ea9c:	a1 2c       	mov	r10, r1
    ea9e:	ac e0       	ldi	r26, 0x0C	; 12
    eaa0:	ba 2e       	mov	r11, r26
    eaa2:	91 30       	cpi	r25, 0x01	; 1
    eaa4:	11 f4       	brne	.+4      	; 0xeaaa <qtm_scroller_process+0x3b2>
    eaa6:	67 01       	movw	r12, r14
    eaa8:	03 c0       	rjmp	.+6      	; 0xeab0 <qtm_scroller_process+0x3b8>
    eaaa:	24 1b       	sub	r18, r20
    eaac:	35 0b       	sbc	r19, r21
    eaae:	69 01       	movw	r12, r18
    eab0:	0b 2c       	mov	r0, r11
    eab2:	02 c0       	rjmp	.+4      	; 0xeab8 <qtm_scroller_process+0x3c0>
    eab4:	cc 0c       	add	r12, r12
    eab6:	dd 1c       	adc	r13, r13
    eab8:	0a 94       	dec	r0
    eaba:	e2 f7       	brpl	.-8      	; 0xeab4 <qtm_scroller_process+0x3bc>
    eabc:	6e 17       	cp	r22, r30
    eabe:	7f 07       	cpc	r23, r31
    eac0:	a8 f0       	brcs	.+42     	; 0xeaec <qtm_scroller_process+0x3f4>
    eac2:	c1 01       	movw	r24, r2
    eac4:	8e 1b       	sub	r24, r30
    eac6:	9f 0b       	sbc	r25, r31
    eac8:	9c 01       	movw	r18, r24
    eaca:	2e 1b       	sub	r18, r30
    eacc:	3f 0b       	sbc	r19, r31
    eace:	62 0f       	add	r22, r18
    ead0:	73 1f       	adc	r23, r19
    ead2:	4b 2d       	mov	r20, r11
    ead4:	0e 94 14 73 	call	0xe628	; 0xe628 <divide>
    ead8:	21 e0       	ldi	r18, 0x01	; 1
    eada:	30 e0       	ldi	r19, 0x00	; 0
    eadc:	02 c0       	rjmp	.+4      	; 0xeae2 <qtm_scroller_process+0x3ea>
    eade:	22 0f       	add	r18, r18
    eae0:	33 1f       	adc	r19, r19
    eae2:	ba 94       	dec	r11
    eae4:	e2 f7       	brpl	.-8      	; 0xeade <qtm_scroller_process+0x3e6>
    eae6:	82 1b       	sub	r24, r18
    eae8:	93 0b       	sbc	r25, r19
    eaea:	0c c0       	rjmp	.+24     	; 0xeb04 <qtm_scroller_process+0x40c>
    eaec:	cf 01       	movw	r24, r30
    eaee:	86 1b       	sub	r24, r22
    eaf0:	97 0b       	sbc	r25, r23
    eaf2:	f1 01       	movw	r30, r2
    eaf4:	e6 1b       	sub	r30, r22
    eaf6:	f7 0b       	sbc	r31, r23
    eaf8:	bf 01       	movw	r22, r30
    eafa:	68 0f       	add	r22, r24
    eafc:	79 1f       	adc	r23, r25
    eafe:	4b 2d       	mov	r20, r11
    eb00:	0e 94 14 73 	call	0xe628	; 0xe628 <divide>
    eb04:	8c 0d       	add	r24, r12
    eb06:	9d 1d       	adc	r25, r13
    eb08:	fb 81       	ldd	r31, Y+3	; 0x03
    eb0a:	f3 30       	cpi	r31, 0x03	; 3
    eb0c:	60 f0       	brcs	.+24     	; 0xeb26 <qtm_scroller_process+0x42e>
    eb0e:	29 81       	ldd	r18, Y+1	; 0x01
    eb10:	21 30       	cpi	r18, 0x01	; 1
    eb12:	19 f4       	brne	.+6      	; 0xeb1a <qtm_scroller_process+0x422>
    eb14:	4a 2d       	mov	r20, r10
    eb16:	b7 01       	movw	r22, r14
    eb18:	04 c0       	rjmp	.+8      	; 0xeb22 <qtm_scroller_process+0x42a>
    eb1a:	b7 01       	movw	r22, r14
    eb1c:	61 50       	subi	r22, 0x01	; 1
    eb1e:	71 09       	sbc	r23, r1
    eb20:	4a 2d       	mov	r20, r10
    eb22:	0e 94 14 73 	call	0xe628	; 0xe628 <divide>
    eb26:	81 30       	cpi	r24, 0x01	; 1
    eb28:	30 e1       	ldi	r19, 0x10	; 16
    eb2a:	93 07       	cpc	r25, r19
    eb2c:	10 f0       	brcs	.+4      	; 0xeb32 <qtm_scroller_process+0x43a>
    eb2e:	80 e0       	ldi	r24, 0x00	; 0
    eb30:	90 e1       	ldi	r25, 0x10	; 16
    eb32:	e9 80       	ldd	r14, Y+1	; 0x01
    eb34:	e1 10       	cpse	r14, r1
    eb36:	17 c0       	rjmp	.+46     	; 0xeb66 <qtm_scroller_process+0x46e>
    eb38:	1f 70       	andi	r17, 0x0F	; 15
    eb3a:	a9 f0       	breq	.+42     	; 0xeb66 <qtm_scroller_process+0x46e>
    eb3c:	28 e2       	ldi	r18, 0x28	; 40
    eb3e:	12 9f       	mul	r17, r18
    eb40:	a0 01       	movw	r20, r0
    eb42:	11 24       	eor	r1, r1
    eb44:	84 17       	cp	r24, r20
    eb46:	95 07       	cpc	r25, r21
    eb48:	18 f0       	brcs	.+6      	; 0xeb50 <qtm_scroller_process+0x458>
    eb4a:	84 1b       	sub	r24, r20
    eb4c:	95 0b       	sbc	r25, r21
    eb4e:	02 c0       	rjmp	.+4      	; 0xeb54 <qtm_scroller_process+0x45c>
    eb50:	80 e0       	ldi	r24, 0x00	; 0
    eb52:	90 e0       	ldi	r25, 0x00	; 0
    eb54:	44 0f       	add	r20, r20
    eb56:	55 1f       	adc	r21, r21
    eb58:	60 e0       	ldi	r22, 0x00	; 0
    eb5a:	70 e1       	ldi	r23, 0x10	; 16
    eb5c:	64 1b       	sub	r22, r20
    eb5e:	75 0b       	sbc	r23, r21
    eb60:	4c e0       	ldi	r20, 0x0C	; 12
    eb62:	0e 94 14 73 	call	0xe628	; 0xe628 <divide>
    eb66:	2c e0       	ldi	r18, 0x0C	; 12
    eb68:	30 e0       	ldi	r19, 0x00	; 0
    eb6a:	ec 84       	ldd	r14, Y+12	; 0x0c
    eb6c:	2e 19       	sub	r18, r14
    eb6e:	31 09       	sbc	r19, r1
    eb70:	61 e0       	ldi	r22, 0x01	; 1
    eb72:	70 e0       	ldi	r23, 0x00	; 0
    eb74:	02 c0       	rjmp	.+4      	; 0xeb7a <qtm_scroller_process+0x482>
    eb76:	66 0f       	add	r22, r22
    eb78:	77 1f       	adc	r23, r23
    eb7a:	ea 94       	dec	r14
    eb7c:	e2 f7       	brpl	.-8      	; 0xeb76 <qtm_scroller_process+0x47e>
    eb7e:	fb 01       	movw	r30, r22
    eb80:	31 97       	sbiw	r30, 0x01	; 1
    eb82:	02 c0       	rjmp	.+4      	; 0xeb88 <qtm_scroller_process+0x490>
    eb84:	96 95       	lsr	r25
    eb86:	87 95       	ror	r24
    eb88:	2a 95       	dec	r18
    eb8a:	e2 f7       	brpl	.-8      	; 0xeb84 <qtm_scroller_process+0x48c>
    eb8c:	e8 17       	cp	r30, r24
    eb8e:	f9 07       	cpc	r31, r25
    eb90:	08 f4       	brcc	.+2      	; 0xeb94 <qtm_scroller_process+0x49c>
    eb92:	cf 01       	movw	r24, r30
    eb94:	fd 84       	ldd	r15, Y+13	; 0x0d
    eb96:	ff 20       	and	r15, r15
    eb98:	d9 f1       	breq	.+118    	; 0xec10 <qtm_scroller_process+0x518>
    eb9a:	ae 85       	ldd	r26, Y+14	; 0x0e
    eb9c:	bf 85       	ldd	r27, Y+15	; 0x0f
    eb9e:	13 96       	adiw	r26, 0x03	; 3
    eba0:	4d 91       	ld	r20, X+
    eba2:	5c 91       	ld	r21, X
    eba4:	14 97       	sbiw	r26, 0x04	; 4
    eba6:	9c 01       	movw	r18, r24
    eba8:	24 1b       	sub	r18, r20
    ebaa:	35 0b       	sbc	r19, r21
    ebac:	b9 81       	ldd	r27, Y+1	; 0x01
    ebae:	b1 30       	cpi	r27, 0x01	; 1
    ebb0:	a9 f4       	brne	.+42     	; 0xebdc <qtm_scroller_process+0x4e4>
    ebb2:	db 01       	movw	r26, r22
    ebb4:	b6 95       	lsr	r27
    ebb6:	a7 95       	ror	r26
    ebb8:	37 ff       	sbrs	r19, 7
    ebba:	0a c0       	rjmp	.+20     	; 0xebd0 <qtm_scroller_process+0x4d8>
    ebbc:	b1 95       	neg	r27
    ebbe:	a1 95       	neg	r26
    ebc0:	b1 09       	sbc	r27, r1
    ebc2:	2a 17       	cp	r18, r26
    ebc4:	3b 07       	cpc	r19, r27
    ebc6:	0c f0       	brlt	.+2      	; 0xebca <qtm_scroller_process+0x4d2>
    ebc8:	96 c0       	rjmp	.+300    	; 0xecf6 <qtm_scroller_process+0x5fe>
    ebca:	26 0f       	add	r18, r22
    ebcc:	37 1f       	adc	r19, r23
    ebce:	06 c0       	rjmp	.+12     	; 0xebdc <qtm_scroller_process+0x4e4>
    ebd0:	a2 17       	cp	r26, r18
    ebd2:	b3 07       	cpc	r27, r19
    ebd4:	0c f0       	brlt	.+2      	; 0xebd8 <qtm_scroller_process+0x4e0>
    ebd6:	95 c0       	rjmp	.+298    	; 0xed02 <qtm_scroller_process+0x60a>
    ebd8:	26 1b       	sub	r18, r22
    ebda:	37 0b       	sbc	r19, r23
    ebdc:	21 30       	cpi	r18, 0x01	; 1
    ebde:	31 05       	cpc	r19, r1
    ebe0:	c1 f0       	breq	.+48     	; 0xec12 <qtm_scroller_process+0x51a>
    ebe2:	2f 3f       	cpi	r18, 0xFF	; 255
    ebe4:	6f ef       	ldi	r22, 0xFF	; 255
    ebe6:	36 07       	cpc	r19, r22
    ebe8:	a1 f0       	breq	.+40     	; 0xec12 <qtm_scroller_process+0x51a>
    ebea:	37 ff       	sbrs	r19, 7
    ebec:	09 c0       	rjmp	.+18     	; 0xec00 <qtm_scroller_process+0x508>
    ebee:	31 95       	neg	r19
    ebf0:	21 95       	neg	r18
    ebf2:	31 09       	sbc	r19, r1
    ebf4:	36 95       	lsr	r19
    ebf6:	27 95       	ror	r18
    ebf8:	31 95       	neg	r19
    ebfa:	21 95       	neg	r18
    ebfc:	31 09       	sbc	r19, r1
    ebfe:	02 c0       	rjmp	.+4      	; 0xec04 <qtm_scroller_process+0x50c>
    ec00:	36 95       	lsr	r19
    ec02:	27 95       	ror	r18
    ec04:	24 0f       	add	r18, r20
    ec06:	35 1f       	adc	r19, r21
    ec08:	af 01       	movw	r20, r30
    ec0a:	42 23       	and	r20, r18
    ec0c:	53 23       	and	r21, r19
    ec0e:	01 c0       	rjmp	.+2      	; 0xec12 <qtm_scroller_process+0x51a>
    ec10:	ac 01       	movw	r20, r24
    ec12:	ae 85       	ldd	r26, Y+14	; 0x0e
    ec14:	bf 85       	ldd	r27, Y+15	; 0x0f
    ec16:	13 96       	adiw	r26, 0x03	; 3
    ec18:	8d 93       	st	X+, r24
    ec1a:	9c 93       	st	X, r25
    ec1c:	14 97       	sbiw	r26, 0x04	; 4
    ec1e:	f3 01       	movw	r30, r6
    ec20:	a5 81       	ldd	r26, Z+5	; 0x05
    ec22:	ee 85       	ldd	r30, Y+14	; 0x0e
    ec24:	ff 85       	ldd	r31, Y+15	; 0x0f
    ec26:	65 81       	ldd	r22, Z+5	; 0x05
    ec28:	76 81       	ldd	r23, Z+6	; 0x06
    ec2a:	f3 01       	movw	r30, r6
    ec2c:	24 81       	ldd	r18, Z+4	; 0x04
    ec2e:	ca 01       	movw	r24, r20
    ec30:	86 1b       	sub	r24, r22
    ec32:	97 0b       	sbc	r25, r23
    ec34:	30 81       	ld	r19, Z
    ec36:	31 30       	cpi	r19, 0x01	; 1
    ec38:	e1 f4       	brne	.+56     	; 0xec72 <qtm_scroller_process+0x57a>
    ec3a:	22 95       	swap	r18
    ec3c:	2f 70       	andi	r18, 0x0F	; 15
    ec3e:	e1 e0       	ldi	r30, 0x01	; 1
    ec40:	f0 e0       	ldi	r31, 0x00	; 0
    ec42:	02 c0       	rjmp	.+4      	; 0xec48 <qtm_scroller_process+0x550>
    ec44:	ee 0f       	add	r30, r30
    ec46:	ff 1f       	adc	r31, r31
    ec48:	2a 95       	dec	r18
    ec4a:	e2 f7       	brpl	.-8      	; 0xec44 <qtm_scroller_process+0x54c>
    ec4c:	9f 01       	movw	r18, r30
    ec4e:	36 95       	lsr	r19
    ec50:	27 95       	ror	r18
    ec52:	97 ff       	sbrs	r25, 7
    ec54:	09 c0       	rjmp	.+18     	; 0xec68 <qtm_scroller_process+0x570>
    ec56:	31 95       	neg	r19
    ec58:	21 95       	neg	r18
    ec5a:	31 09       	sbc	r19, r1
    ec5c:	82 17       	cp	r24, r18
    ec5e:	93 07       	cpc	r25, r19
    ec60:	54 f4       	brge	.+20     	; 0xec76 <qtm_scroller_process+0x57e>
    ec62:	8e 0f       	add	r24, r30
    ec64:	9f 1f       	adc	r25, r31
    ec66:	05 c0       	rjmp	.+10     	; 0xec72 <qtm_scroller_process+0x57a>
    ec68:	28 17       	cp	r18, r24
    ec6a:	39 07       	cpc	r19, r25
    ec6c:	ac f4       	brge	.+42     	; 0xec98 <qtm_scroller_process+0x5a0>
    ec6e:	8e 1b       	sub	r24, r30
    ec70:	9f 0b       	sbc	r25, r31
    ec72:	97 ff       	sbrs	r25, 7
    ec74:	11 c0       	rjmp	.+34     	; 0xec98 <qtm_scroller_process+0x5a0>
    ec76:	91 95       	neg	r25
    ec78:	81 95       	neg	r24
    ec7a:	91 09       	sbc	r25, r1
    ec7c:	ee 85       	ldd	r30, Y+14	; 0x0e
    ec7e:	ff 85       	ldd	r31, Y+15	; 0x0f
    ec80:	22 81       	ldd	r18, Z+2	; 0x02
    ec82:	30 e0       	ldi	r19, 0x00	; 0
    ec84:	28 17       	cp	r18, r24
    ec86:	39 07       	cpc	r19, r25
    ec88:	14 f0       	brlt	.+4      	; 0xec8e <qtm_scroller_process+0x596>
    ec8a:	80 e0       	ldi	r24, 0x00	; 0
    ec8c:	1a c0       	rjmp	.+52     	; 0xecc2 <qtm_scroller_process+0x5ca>
    ec8e:	ee 85       	ldd	r30, Y+14	; 0x0e
    ec90:	ff 85       	ldd	r31, Y+15	; 0x0f
    ec92:	a1 83       	std	Z+1, r26	; 0x01
    ec94:	12 82       	std	Z+2, r1	; 0x02
    ec96:	0b c0       	rjmp	.+22     	; 0xecae <qtm_scroller_process+0x5b6>
    ec98:	ee 85       	ldd	r30, Y+14	; 0x0e
    ec9a:	ff 85       	ldd	r31, Y+15	; 0x0f
    ec9c:	21 81       	ldd	r18, Z+1	; 0x01
    ec9e:	30 e0       	ldi	r19, 0x00	; 0
    eca0:	28 17       	cp	r18, r24
    eca2:	39 07       	cpc	r19, r25
    eca4:	94 f7       	brge	.-28     	; 0xec8a <qtm_scroller_process+0x592>
    eca6:	ee 85       	ldd	r30, Y+14	; 0x0e
    eca8:	ff 85       	ldd	r31, Y+15	; 0x0f
    ecaa:	11 82       	std	Z+1, r1	; 0x01
    ecac:	a2 83       	std	Z+2, r26	; 0x02
    ecae:	46 17       	cp	r20, r22
    ecb0:	57 07       	cpc	r21, r23
    ecb2:	59 f3       	breq	.-42     	; 0xec8a <qtm_scroller_process+0x592>
    ecb4:	ae 85       	ldd	r26, Y+14	; 0x0e
    ecb6:	bf 85       	ldd	r27, Y+15	; 0x0f
    ecb8:	15 96       	adiw	r26, 0x05	; 5
    ecba:	4d 93       	st	X+, r20
    ecbc:	5c 93       	st	X, r21
    ecbe:	16 97       	sbiw	r26, 0x06	; 6
    ecc0:	82 e0       	ldi	r24, 0x02	; 2
    ecc2:	81 68       	ori	r24, 0x81	; 129
    ecc4:	02 c0       	rjmp	.+4      	; 0xecca <qtm_scroller_process+0x5d2>
    ecc6:	02 e0       	ldi	r16, 0x02	; 2
    ecc8:	80 e0       	ldi	r24, 0x00	; 0
    ecca:	ee 85       	ldd	r30, Y+14	; 0x0e
    eccc:	ff 85       	ldd	r31, Y+15	; 0x0f
    ecce:	80 83       	st	Z, r24
    ecd0:	81 78       	andi	r24, 0x81	; 129
    ecd2:	ea 80       	ldd	r14, Y+2	; 0x02
    ecd4:	e8 2a       	or	r14, r24
    ecd6:	ea 82       	std	Y+2, r14	; 0x02
    ecd8:	93 94       	inc	r9
    ecda:	46 cd       	rjmp	.-1396   	; 0xe768 <qtm_scroller_process+0x70>
    ecdc:	ed 91       	ld	r30, X+
    ecde:	fc 91       	ld	r31, X
    ece0:	ea 80       	ldd	r14, Y+2	; 0x02
    ece2:	e0 82       	st	Z, r14
    ece4:	13 c0       	rjmp	.+38     	; 0xed0c <qtm_scroller_process+0x614>
    ece6:	0b e0       	ldi	r16, 0x0B	; 11
    ece8:	11 c0       	rjmp	.+34     	; 0xed0c <qtm_scroller_process+0x614>
    ecea:	60 e0       	ldi	r22, 0x00	; 0
    ecec:	70 e0       	ldi	r23, 0x00	; 0
    ecee:	90 e0       	ldi	r25, 0x00	; 0
    ecf0:	9d ce       	rjmp	.-710    	; 0xea2c <qtm_scroller_process+0x334>
    ecf2:	91 e0       	ldi	r25, 0x01	; 1
    ecf4:	9b ce       	rjmp	.-714    	; 0xea2c <qtm_scroller_process+0x334>
    ecf6:	2f 3f       	cpi	r18, 0xFF	; 255
    ecf8:	6f ef       	ldi	r22, 0xFF	; 255
    ecfa:	36 07       	cpc	r19, r22
    ecfc:	09 f0       	breq	.+2      	; 0xed00 <qtm_scroller_process+0x608>
    ecfe:	77 cf       	rjmp	.-274    	; 0xebee <qtm_scroller_process+0x4f6>
    ed00:	88 cf       	rjmp	.-240    	; 0xec12 <qtm_scroller_process+0x51a>
    ed02:	21 30       	cpi	r18, 0x01	; 1
    ed04:	31 05       	cpc	r19, r1
    ed06:	09 f0       	breq	.+2      	; 0xed0a <qtm_scroller_process+0x612>
    ed08:	70 cf       	rjmp	.-288    	; 0xebea <qtm_scroller_process+0x4f2>
    ed0a:	83 cf       	rjmp	.-250    	; 0xec12 <qtm_scroller_process+0x51a>
    ed0c:	80 2f       	mov	r24, r16
    ed0e:	61 96       	adiw	r28, 0x11	; 17
    ed10:	cd bf       	out	0x3d, r28	; 61
    ed12:	de bf       	out	0x3e, r29	; 62
    ed14:	df 91       	pop	r29
    ed16:	cf 91       	pop	r28
    ed18:	1f 91       	pop	r17
    ed1a:	0f 91       	pop	r16
    ed1c:	ff 90       	pop	r15
    ed1e:	ef 90       	pop	r14
    ed20:	df 90       	pop	r13
    ed22:	cf 90       	pop	r12
    ed24:	bf 90       	pop	r11
    ed26:	af 90       	pop	r10
    ed28:	9f 90       	pop	r9
    ed2a:	8f 90       	pop	r8
    ed2c:	7f 90       	pop	r7
    ed2e:	6f 90       	pop	r6
    ed30:	5f 90       	pop	r5
    ed32:	4f 90       	pop	r4
    ed34:	3f 90       	pop	r3
    ed36:	2f 90       	pop	r2
    ed38:	08 95       	ret

0000ed3a <charge_share_test>:
    ed3a:	a0 91 49 47 	lds	r26, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr>
    ed3e:	b0 91 4a 47 	lds	r27, 0x474A	; 0x80474a <qtm_acquisition_control_working_set_ptr+0x1>
    ed42:	25 e0       	ldi	r18, 0x05	; 5
    ed44:	ac 01       	movw	r20, r24
    ed46:	24 9f       	mul	r18, r20
    ed48:	c0 01       	movw	r24, r0
    ed4a:	25 9f       	mul	r18, r21
    ed4c:	90 0d       	add	r25, r0
    ed4e:	11 24       	eor	r1, r1
    ed50:	14 96       	adiw	r26, 0x04	; 4
    ed52:	ed 91       	ld	r30, X+
    ed54:	fc 91       	ld	r31, X
    ed56:	15 97       	sbiw	r26, 0x05	; 5
    ed58:	e8 0f       	add	r30, r24
    ed5a:	f9 1f       	adc	r31, r25
    ed5c:	81 81       	ldd	r24, Z+1	; 0x01
    ed5e:	92 81       	ldd	r25, Z+2	; 0x02
    ed60:	86 17       	cp	r24, r22
    ed62:	97 07       	cpc	r25, r23
    ed64:	81 f1       	breq	.+96     	; 0xedc6 <charge_share_test+0x8c>
    ed66:	86 17       	cp	r24, r22
    ed68:	97 07       	cpc	r25, r23
    ed6a:	18 f4       	brcc	.+6      	; 0xed72 <charge_share_test+0x38>
    ed6c:	68 1b       	sub	r22, r24
    ed6e:	79 0b       	sbc	r23, r25
    ed70:	04 c0       	rjmp	.+8      	; 0xed7a <charge_share_test+0x40>
    ed72:	9c 01       	movw	r18, r24
    ed74:	26 1b       	sub	r18, r22
    ed76:	37 0b       	sbc	r19, r23
    ed78:	b9 01       	movw	r22, r18
    ed7a:	ed 91       	ld	r30, X+
    ed7c:	fc 91       	ld	r31, X
    ed7e:	82 81       	ldd	r24, Z+2	; 0x02
    ed80:	80 34       	cpi	r24, 0x40	; 64
    ed82:	11 f4       	brne	.+4      	; 0xed88 <charge_share_test+0x4e>
    ed84:	76 95       	lsr	r23
    ed86:	67 95       	ror	r22
    ed88:	65 38       	cpi	r22, 0x85	; 133
    ed8a:	71 05       	cpc	r23, r1
    ed8c:	d0 f4       	brcc	.+52     	; 0xedc2 <charge_share_test+0x88>
    ed8e:	66 30       	cpi	r22, 0x06	; 6
    ed90:	71 05       	cpc	r23, r1
    ed92:	c8 f0       	brcs	.+50     	; 0xedc6 <charge_share_test+0x8c>
    ed94:	e3 81       	ldd	r30, Z+3	; 0x03
    ed96:	e0 73       	andi	r30, 0x30	; 48
    ed98:	f0 e0       	ldi	r31, 0x00	; 0
    ed9a:	83 e0       	ldi	r24, 0x03	; 3
    ed9c:	f6 95       	lsr	r31
    ed9e:	e7 95       	ror	r30
    eda0:	8a 95       	dec	r24
    eda2:	e1 f7       	brne	.-8      	; 0xed9c <charge_share_test+0x62>
    eda4:	ea 54       	subi	r30, 0x4A	; 74
    eda6:	fd 4b       	sbci	r31, 0xBD	; 189
    eda8:	80 81       	ld	r24, Z
    edaa:	91 81       	ldd	r25, Z+1	; 0x01
    edac:	68 9f       	mul	r22, r24
    edae:	90 01       	movw	r18, r0
    edb0:	69 9f       	mul	r22, r25
    edb2:	30 0d       	add	r19, r0
    edb4:	78 9f       	mul	r23, r24
    edb6:	30 0d       	add	r19, r0
    edb8:	11 24       	eor	r1, r1
    edba:	81 e0       	ldi	r24, 0x01	; 1
    edbc:	23 2b       	or	r18, r19
    edbe:	21 f4       	brne	.+8      	; 0xedc8 <charge_share_test+0x8e>
    edc0:	02 c0       	rjmp	.+4      	; 0xedc6 <charge_share_test+0x8c>
    edc2:	81 e0       	ldi	r24, 0x01	; 1
    edc4:	08 95       	ret
    edc6:	80 e0       	ldi	r24, 0x00	; 0
    edc8:	08 95       	ret

0000edca <select_next_channel_to_measure>:
    edca:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    edce:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    edd2:	a0 91 49 47 	lds	r26, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr>
    edd6:	b0 91 4a 47 	lds	r27, 0x474A	; 0x80474a <qtm_acquisition_control_working_set_ptr+0x1>
    edda:	ed 91       	ld	r30, X+
    eddc:	fc 91       	ld	r31, X
    edde:	11 97       	sbiw	r26, 0x01	; 1
    ede0:	40 81       	ld	r20, Z
    ede2:	51 81       	ldd	r21, Z+1	; 0x01
    ede4:	25 e0       	ldi	r18, 0x05	; 5
    ede6:	28 9f       	mul	r18, r24
    ede8:	b0 01       	movw	r22, r0
    edea:	29 9f       	mul	r18, r25
    edec:	70 0d       	add	r23, r0
    edee:	11 24       	eor	r1, r1
    edf0:	20 e0       	ldi	r18, 0x00	; 0
    edf2:	30 e0       	ldi	r19, 0x00	; 0
    edf4:	84 17       	cp	r24, r20
    edf6:	95 07       	cpc	r25, r21
    edf8:	a8 f4       	brcc	.+42     	; 0xee24 <select_next_channel_to_measure+0x5a>
    edfa:	14 96       	adiw	r26, 0x04	; 4
    edfc:	ed 91       	ld	r30, X+
    edfe:	fc 91       	ld	r31, X
    ee00:	15 97       	sbiw	r26, 0x05	; 5
    ee02:	e2 0f       	add	r30, r18
    ee04:	f3 1f       	adc	r31, r19
    ee06:	e6 0f       	add	r30, r22
    ee08:	f7 1f       	adc	r31, r23
    ee0a:	e0 81       	ld	r30, Z
    ee0c:	2b 5f       	subi	r18, 0xFB	; 251
    ee0e:	3f 4f       	sbci	r19, 0xFF	; 255
    ee10:	e0 fd       	sbrc	r30, 0
    ee12:	02 c0       	rjmp	.+4      	; 0xee18 <select_next_channel_to_measure+0x4e>
    ee14:	01 96       	adiw	r24, 0x01	; 1
    ee16:	ee cf       	rjmp	.-36     	; 0xedf4 <select_next_channel_to_measure+0x2a>
    ee18:	80 93 45 46 	sts	0x4645, r24	; 0x804645 <current_measure_channel>
    ee1c:	90 93 46 46 	sts	0x4646, r25	; 0x804646 <current_measure_channel+0x1>
    ee20:	80 e0       	ldi	r24, 0x00	; 0
    ee22:	08 95       	ret
    ee24:	10 92 45 46 	sts	0x4645, r1	; 0x804645 <current_measure_channel>
    ee28:	10 92 46 46 	sts	0x4646, r1	; 0x804646 <current_measure_channel+0x1>
    ee2c:	81 e0       	ldi	r24, 0x01	; 1
    ee2e:	08 95       	ret

0000ee30 <qtm_measure_node>:
    ee30:	af 92       	push	r10
    ee32:	bf 92       	push	r11
    ee34:	cf 92       	push	r12
    ee36:	df 92       	push	r13
    ee38:	ef 92       	push	r14
    ee3a:	ff 92       	push	r15
    ee3c:	0f 93       	push	r16
    ee3e:	1f 93       	push	r17
    ee40:	cf 93       	push	r28
    ee42:	df 93       	push	r29
    ee44:	7c 01       	movw	r14, r24
    ee46:	e0 91 49 47 	lds	r30, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr>
    ee4a:	f0 91 4a 47 	lds	r31, 0x474A	; 0x80474a <qtm_acquisition_control_working_set_ptr+0x1>
    ee4e:	84 e1       	ldi	r24, 0x14	; 20
    ee50:	8e 9d       	mul	r24, r14
    ee52:	e0 01       	movw	r28, r0
    ee54:	8f 9d       	mul	r24, r15
    ee56:	d0 0d       	add	r29, r0
    ee58:	11 24       	eor	r1, r1
    ee5a:	a2 81       	ldd	r26, Z+2	; 0x02
    ee5c:	b3 81       	ldd	r27, Z+3	; 0x03
    ee5e:	ac 0f       	add	r26, r28
    ee60:	bd 1f       	adc	r27, r29
    ee62:	18 96       	adiw	r26, 0x08	; 8
    ee64:	2c 91       	ld	r18, X
    ee66:	18 97       	sbiw	r26, 0x08	; 8
    ee68:	19 96       	adiw	r26, 0x09	; 9
    ee6a:	3c 91       	ld	r19, X
    ee6c:	19 97       	sbiw	r26, 0x09	; 9
    ee6e:	1a 96       	adiw	r26, 0x0a	; 10
    ee70:	4c 91       	ld	r20, X
    ee72:	1a 97       	sbiw	r26, 0x0a	; 10
    ee74:	1b 96       	adiw	r26, 0x0b	; 11
    ee76:	5c 91       	ld	r21, X
    ee78:	1b 97       	sbiw	r26, 0x0b	; 11
    ee7a:	1c 96       	adiw	r26, 0x0c	; 12
    ee7c:	6c 91       	ld	r22, X
    ee7e:	1c 97       	sbiw	r26, 0x0c	; 12
    ee80:	1d 96       	adiw	r26, 0x0d	; 13
    ee82:	7c 91       	ld	r23, X
    ee84:	1d 97       	sbiw	r26, 0x0d	; 13
    ee86:	1e 96       	adiw	r26, 0x0e	; 14
    ee88:	8c 91       	ld	r24, X
    ee8a:	1e 97       	sbiw	r26, 0x0e	; 14
    ee8c:	1f 96       	adiw	r26, 0x0f	; 15
    ee8e:	9c 91       	ld	r25, X
    ee90:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    ee94:	08 e0       	ldi	r16, 0x08	; 8
    ee96:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    ee9a:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    ee9e:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    eea2:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    eea6:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    eeaa:	20 93 f3 07 	sts	0x07F3, r18	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    eeae:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    eeb2:	20 93 f4 07 	sts	0x07F4, r18	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    eeb6:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    eeba:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    eebe:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    eec2:	a0 81       	ld	r26, Z
    eec4:	b1 81       	ldd	r27, Z+1	; 0x01
    eec6:	12 96       	adiw	r26, 0x02	; 2
    eec8:	8c 91       	ld	r24, X
    eeca:	80 38       	cpi	r24, 0x80	; 128
    eecc:	09 f4       	brne	.+2      	; 0xeed0 <qtm_measure_node+0xa0>
    eece:	4f c0       	rjmp	.+158    	; 0xef6e <qtm_measure_node+0x13e>
    eed0:	a2 81       	ldd	r26, Z+2	; 0x02
    eed2:	b3 81       	ldd	r27, Z+3	; 0x03
    eed4:	ac 0f       	add	r26, r28
    eed6:	bd 1f       	adc	r27, r29
    eed8:	cc 90       	ld	r12, X
    eeda:	11 96       	adiw	r26, 0x01	; 1
    eedc:	3c 91       	ld	r19, X
    eede:	11 97       	sbiw	r26, 0x01	; 1
    eee0:	12 96       	adiw	r26, 0x02	; 2
    eee2:	4c 91       	ld	r20, X
    eee4:	12 97       	sbiw	r26, 0x02	; 2
    eee6:	13 96       	adiw	r26, 0x03	; 3
    eee8:	5c 91       	ld	r21, X
    eeea:	13 97       	sbiw	r26, 0x03	; 3
    eeec:	14 96       	adiw	r26, 0x04	; 4
    eeee:	6c 91       	ld	r22, X
    eef0:	14 97       	sbiw	r26, 0x04	; 4
    eef2:	15 96       	adiw	r26, 0x05	; 5
    eef4:	7c 91       	ld	r23, X
    eef6:	15 97       	sbiw	r26, 0x05	; 5
    eef8:	16 96       	adiw	r26, 0x06	; 6
    eefa:	8c 91       	ld	r24, X
    eefc:	16 97       	sbiw	r26, 0x06	; 6
    eefe:	17 96       	adiw	r26, 0x07	; 7
    ef00:	9c 91       	ld	r25, X
    ef02:	c0 92 e8 07 	sts	0x07E8, r12	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    ef06:	2c 2d       	mov	r18, r12
    ef08:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    ef0c:	d2 2e       	mov	r13, r18
    ef0e:	20 93 e9 07 	sts	0x07E9, r18	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    ef12:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    ef16:	12 2f       	mov	r17, r18
    ef18:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    ef1c:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    ef20:	a2 2e       	mov	r10, r18
    ef22:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    ef26:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    ef2a:	b2 2e       	mov	r11, r18
    ef2c:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    ef30:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    ef34:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    ef38:	80 81       	ld	r24, Z
    ef3a:	91 81       	ldd	r25, Z+1	; 0x01
    ef3c:	dc 01       	movw	r26, r24
    ef3e:	12 96       	adiw	r26, 0x02	; 2
    ef40:	8c 91       	ld	r24, X
    ef42:	81 38       	cpi	r24, 0x81	; 129
    ef44:	21 f4       	brne	.+8      	; 0xef4e <qtm_measure_node+0x11e>
    ef46:	81 e0       	ldi	r24, 0x01	; 1
    ef48:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    ef4c:	10 c0       	rjmp	.+32     	; 0xef6e <qtm_measure_node+0x13e>
    ef4e:	82 38       	cpi	r24, 0x82	; 130
    ef50:	71 f4       	brne	.+28     	; 0xef6e <qtm_measure_node+0x13e>
    ef52:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    ef56:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    ef5a:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    ef5e:	10 93 fa 07 	sts	0x07FA, r17	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    ef62:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    ef66:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    ef6a:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    ef6e:	25 e0       	ldi	r18, 0x05	; 5
    ef70:	2e 9d       	mul	r18, r14
    ef72:	c0 01       	movw	r24, r0
    ef74:	2f 9d       	mul	r18, r15
    ef76:	90 0d       	add	r25, r0
    ef78:	11 24       	eor	r1, r1
    ef7a:	a4 81       	ldd	r26, Z+4	; 0x04
    ef7c:	b5 81       	ldd	r27, Z+5	; 0x05
    ef7e:	a8 0f       	add	r26, r24
    ef80:	b9 1f       	adc	r27, r25
    ef82:	13 96       	adiw	r26, 0x03	; 3
    ef84:	2d 91       	ld	r18, X+
    ef86:	3c 91       	ld	r19, X
    ef88:	14 97       	sbiw	r26, 0x04	; 4
    ef8a:	a9 01       	movw	r20, r18
    ef8c:	53 70       	andi	r21, 0x03	; 3
    ef8e:	40 93 e4 07 	sts	0x07E4, r20	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7e07e4>
    ef92:	50 93 e5 07 	sts	0x07E5, r21	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7e07e5>
    ef96:	37 fd       	sbrc	r19, 7
    ef98:	03 c0       	rjmp	.+6      	; 0xefa0 <qtm_measure_node+0x170>
    ef9a:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    ef9e:	03 c0       	rjmp	.+6      	; 0xefa6 <qtm_measure_node+0x176>
    efa0:	21 e0       	ldi	r18, 0x01	; 1
    efa2:	20 93 ca 07 	sts	0x07CA, r18	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    efa6:	a4 81       	ldd	r26, Z+4	; 0x04
    efa8:	b5 81       	ldd	r27, Z+5	; 0x05
    efaa:	a8 0f       	add	r26, r24
    efac:	b9 1f       	adc	r27, r25
    efae:	2c 91       	ld	r18, X
    efb0:	21 ff       	sbrs	r18, 1
    efb2:	02 c0       	rjmp	.+4      	; 0xefb8 <qtm_measure_node+0x188>
    efb4:	25 e0       	ldi	r18, 0x05	; 5
    efb6:	2c 93       	st	X, r18
    efb8:	24 81       	ldd	r18, Z+4	; 0x04
    efba:	35 81       	ldd	r19, Z+5	; 0x05
    efbc:	d9 01       	movw	r26, r18
    efbe:	a8 0f       	add	r26, r24
    efc0:	b9 1f       	adc	r27, r25
    efc2:	8c 91       	ld	r24, X
    efc4:	8c 71       	andi	r24, 0x1C	; 28
    efc6:	69 f4       	brne	.+26     	; 0xefe2 <qtm_measure_node+0x1b2>
    efc8:	a2 81       	ldd	r26, Z+2	; 0x02
    efca:	b3 81       	ldd	r27, Z+3	; 0x03
    efcc:	ac 0f       	add	r26, r28
    efce:	bd 1f       	adc	r27, r29
    efd0:	52 96       	adiw	r26, 0x12	; 18
    efd2:	ac 91       	ld	r26, X
    efd4:	a2 95       	swap	r26
    efd6:	af 70       	andi	r26, 0x0F	; 15
    efd8:	b0 e0       	ldi	r27, 0x00	; 0
    efda:	a2 54       	subi	r26, 0x42	; 66
    efdc:	bd 4b       	sbci	r27, 0xBD	; 189
    efde:	8c 91       	ld	r24, X
    efe0:	01 c0       	rjmp	.+2      	; 0xefe4 <qtm_measure_node+0x1b4>
    efe2:	8f e1       	ldi	r24, 0x1F	; 31
    efe4:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7e07e6>
    efe8:	a2 81       	ldd	r26, Z+2	; 0x02
    efea:	b3 81       	ldd	r27, Z+3	; 0x03
    efec:	ac 0f       	add	r26, r28
    efee:	bd 1f       	adc	r27, r29
    eff0:	50 96       	adiw	r26, 0x10	; 16
    eff2:	8c 91       	ld	r24, X
    eff4:	8b 37       	cpi	r24, 0x7B	; 123
    eff6:	10 f4       	brcc	.+4      	; 0xeffc <qtm_measure_node+0x1cc>
    eff8:	8c 5f       	subi	r24, 0xFC	; 252
    effa:	01 c0       	rjmp	.+2      	; 0xeffe <qtm_measure_node+0x1ce>
    effc:	8f e7       	ldi	r24, 0x7F	; 127
    effe:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7e07c4>
    f002:	a2 81       	ldd	r26, Z+2	; 0x02
    f004:	b3 81       	ldd	r27, Z+3	; 0x03
    f006:	ac 0f       	add	r26, r28
    f008:	bd 1f       	adc	r27, r29
    f00a:	53 96       	adiw	r26, 0x13	; 19
    f00c:	8c 91       	ld	r24, X
    f00e:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7e07c7>
    f012:	a2 81       	ldd	r26, Z+2	; 0x02
    f014:	b3 81       	ldd	r27, Z+3	; 0x03
    f016:	ac 0f       	add	r26, r28
    f018:	bd 1f       	adc	r27, r29
    f01a:	51 96       	adiw	r26, 0x11	; 17
    f01c:	8c 91       	ld	r24, X
    f01e:	82 95       	swap	r24
    f020:	8f 70       	andi	r24, 0x0F	; 15
    f022:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7e07c9>
    f026:	82 81       	ldd	r24, Z+2	; 0x02
    f028:	93 81       	ldd	r25, Z+3	; 0x03
    f02a:	c8 0f       	add	r28, r24
    f02c:	d9 1f       	adc	r29, r25
    f02e:	89 89       	ldd	r24, Y+17	; 0x11
    f030:	8f 70       	andi	r24, 0x0F	; 15
    f032:	80 68       	ori	r24, 0x80	; 128
    f034:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__TEXT_REGION_LENGTH__+0x7e07c2>
    f038:	81 e8       	ldi	r24, 0x81	; 129
    f03a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    f03e:	81 e0       	ldi	r24, 0x01	; 1
    f040:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7e07d0>
    f044:	df 91       	pop	r29
    f046:	cf 91       	pop	r28
    f048:	1f 91       	pop	r17
    f04a:	0f 91       	pop	r16
    f04c:	ff 90       	pop	r15
    f04e:	ef 90       	pop	r14
    f050:	df 90       	pop	r13
    f052:	cf 90       	pop	r12
    f054:	bf 90       	pop	r11
    f056:	af 90       	pop	r10
    f058:	08 95       	ret

0000f05a <qtm_acquisition_process>:
    f05a:	2f 92       	push	r2
    f05c:	3f 92       	push	r3
    f05e:	4f 92       	push	r4
    f060:	5f 92       	push	r5
    f062:	6f 92       	push	r6
    f064:	7f 92       	push	r7
    f066:	8f 92       	push	r8
    f068:	9f 92       	push	r9
    f06a:	af 92       	push	r10
    f06c:	bf 92       	push	r11
    f06e:	cf 92       	push	r12
    f070:	df 92       	push	r13
    f072:	ef 92       	push	r14
    f074:	ff 92       	push	r15
    f076:	0f 93       	push	r16
    f078:	1f 93       	push	r17
    f07a:	cf 93       	push	r28
    f07c:	df 93       	push	r29
    f07e:	cd b7       	in	r28, 0x3d	; 61
    f080:	de b7       	in	r29, 0x3e	; 62
    f082:	27 97       	sbiw	r28, 0x07	; 7
    f084:	cd bf       	out	0x3d, r28	; 61
    f086:	de bf       	out	0x3e, r29	; 62
    f088:	80 91 44 46 	lds	r24, 0x4644	; 0x804644 <touch_seq_lib_state>
    f08c:	88 23       	and	r24, r24
    f08e:	09 f4       	brne	.+2      	; 0xf092 <qtm_acquisition_process+0x38>
    f090:	46 c2       	rjmp	.+1164   	; 0xf51e <qtm_acquisition_process+0x4c4>
    f092:	00 91 49 47 	lds	r16, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr>
    f096:	10 91 4a 47 	lds	r17, 0x474A	; 0x80474a <qtm_acquisition_control_working_set_ptr+0x1>
    f09a:	20 91 4b 47 	lds	r18, 0x474B	; 0x80474b <qtm_raw_data_measurements_ptr>
    f09e:	30 91 4c 47 	lds	r19, 0x474C	; 0x80474c <qtm_raw_data_measurements_ptr+0x1>
    f0a2:	2a 83       	std	Y+2, r18	; 0x02
    f0a4:	3b 83       	std	Y+3, r19	; 0x03
    f0a6:	c1 2c       	mov	r12, r1
    f0a8:	d1 2c       	mov	r13, r1
    f0aa:	a1 2c       	mov	r10, r1
    f0ac:	b1 2c       	mov	r11, r1
    f0ae:	21 2c       	mov	r2, r1
    f0b0:	31 2c       	mov	r3, r1
    f0b2:	19 82       	std	Y+1, r1	; 0x01
    f0b4:	44 24       	eor	r4, r4
    f0b6:	4a 94       	dec	r4
    f0b8:	55 24       	eor	r5, r5
    f0ba:	53 94       	inc	r5
    f0bc:	77 24       	eor	r7, r7
    f0be:	73 94       	inc	r7
    f0c0:	d8 01       	movw	r26, r16
    f0c2:	0d 90       	ld	r0, X+
    f0c4:	bc 91       	ld	r27, X
    f0c6:	a0 2d       	mov	r26, r0
    f0c8:	ae 83       	std	Y+6, r26	; 0x06
    f0ca:	bf 83       	std	Y+7, r27	; 0x07
    f0cc:	8d 91       	ld	r24, X+
    f0ce:	9c 91       	ld	r25, X
    f0d0:	28 16       	cp	r2, r24
    f0d2:	39 06       	cpc	r3, r25
    f0d4:	08 f0       	brcs	.+2      	; 0xf0d8 <qtm_acquisition_process+0x7e>
    f0d6:	1f c2       	rjmp	.+1086   	; 0xf516 <qtm_acquisition_process+0x4bc>
    f0d8:	aa 81       	ldd	r26, Y+2	; 0x02
    f0da:	bb 81       	ldd	r27, Y+3	; 0x03
    f0dc:	4d 91       	ld	r20, X+
    f0de:	5d 91       	ld	r21, X+
    f0e0:	aa 83       	std	Y+2, r26	; 0x02
    f0e2:	bb 83       	std	Y+3, r27	; 0x03
    f0e4:	f8 01       	movw	r30, r16
    f0e6:	e4 80       	ldd	r14, Z+4	; 0x04
    f0e8:	f5 80       	ldd	r15, Z+5	; 0x05
    f0ea:	ea 0c       	add	r14, r10
    f0ec:	fb 1c       	adc	r15, r11
    f0ee:	d7 01       	movw	r26, r14
    f0f0:	2c 91       	ld	r18, X
    f0f2:	82 2f       	mov	r24, r18
    f0f4:	8c 71       	andi	r24, 0x1C	; 28
    f0f6:	90 e0       	ldi	r25, 0x00	; 0
    f0f8:	96 95       	lsr	r25
    f0fa:	87 95       	ror	r24
    f0fc:	96 95       	lsr	r25
    f0fe:	87 95       	ror	r24
    f100:	82 30       	cpi	r24, 0x02	; 2
    f102:	91 05       	cpc	r25, r1
    f104:	09 f4       	brne	.+2      	; 0xf108 <qtm_acquisition_process+0xae>
    f106:	a0 c1       	rjmp	.+832    	; 0xf448 <qtm_acquisition_process+0x3ee>
    f108:	28 f4       	brcc	.+10     	; 0xf114 <qtm_acquisition_process+0xba>
    f10a:	00 97       	sbiw	r24, 0x00	; 0
    f10c:	59 f0       	breq	.+22     	; 0xf124 <qtm_acquisition_process+0xca>
    f10e:	01 97       	sbiw	r24, 0x01	; 1
    f110:	01 f1       	breq	.+64     	; 0xf152 <qtm_acquisition_process+0xf8>
    f112:	f7 c1       	rjmp	.+1006   	; 0xf502 <qtm_acquisition_process+0x4a8>
    f114:	83 30       	cpi	r24, 0x03	; 3
    f116:	91 05       	cpc	r25, r1
    f118:	09 f4       	brne	.+2      	; 0xf11c <qtm_acquisition_process+0xc2>
    f11a:	59 c1       	rjmp	.+690    	; 0xf3ce <qtm_acquisition_process+0x374>
    f11c:	04 97       	sbiw	r24, 0x04	; 4
    f11e:	09 f4       	brne	.+2      	; 0xf122 <qtm_acquisition_process+0xc8>
    f120:	e1 c0       	rjmp	.+450    	; 0xf2e4 <qtm_acquisition_process+0x28a>
    f122:	ef c1       	rjmp	.+990    	; 0xf502 <qtm_acquisition_process+0x4a8>
    f124:	02 80       	ldd	r0, Z+2	; 0x02
    f126:	f3 81       	ldd	r31, Z+3	; 0x03
    f128:	e0 2d       	mov	r30, r0
    f12a:	ec 0d       	add	r30, r12
    f12c:	fd 1d       	adc	r31, r13
    f12e:	92 89       	ldd	r25, Z+18	; 0x12
    f130:	9f 70       	andi	r25, 0x0F	; 15
    f132:	83 89       	ldd	r24, Z+19	; 0x13
    f134:	98 17       	cp	r25, r24
    f136:	10 f4       	brcc	.+4      	; 0xf13c <qtm_acquisition_process+0xe2>
    f138:	89 1b       	sub	r24, r25
    f13a:	01 c0       	rjmp	.+2      	; 0xf13e <qtm_acquisition_process+0xe4>
    f13c:	80 e0       	ldi	r24, 0x00	; 0
    f13e:	9a 01       	movw	r18, r20
    f140:	02 c0       	rjmp	.+4      	; 0xf146 <qtm_acquisition_process+0xec>
    f142:	36 95       	lsr	r19
    f144:	27 95       	ror	r18
    f146:	8a 95       	dec	r24
    f148:	e2 f7       	brpl	.-8      	; 0xf142 <qtm_acquisition_process+0xe8>
    f14a:	f7 01       	movw	r30, r14
    f14c:	21 83       	std	Z+1, r18	; 0x01
    f14e:	32 83       	std	Z+2, r19	; 0x02
    f150:	d8 c1       	rjmp	.+944    	; 0xf502 <qtm_acquisition_process+0x4a8>
    f152:	82 81       	ldd	r24, Z+2	; 0x02
    f154:	93 81       	ldd	r25, Z+3	; 0x03
    f156:	fc 01       	movw	r30, r24
    f158:	ec 0d       	add	r30, r12
    f15a:	fd 1d       	adc	r31, r13
    f15c:	4a 01       	movw	r8, r20
    f15e:	03 88       	ldd	r0, Z+19	; 0x13
    f160:	02 c0       	rjmp	.+4      	; 0xf166 <qtm_acquisition_process+0x10c>
    f162:	96 94       	lsr	r9
    f164:	87 94       	ror	r8
    f166:	0a 94       	dec	r0
    f168:	e2 f7       	brpl	.-8      	; 0xf162 <qtm_acquisition_process+0x108>
    f16a:	d7 01       	movw	r26, r14
    f16c:	11 96       	adiw	r26, 0x01	; 1
    f16e:	8d 92       	st	X+, r8
    f170:	9c 92       	st	X, r9
    f172:	12 97       	sbiw	r26, 0x02	; 2
    f174:	13 96       	adiw	r26, 0x03	; 3
    f176:	8d 91       	ld	r24, X+
    f178:	9c 91       	ld	r25, X
    f17a:	14 97       	sbiw	r26, 0x04	; 4
    f17c:	69 2f       	mov	r22, r25
    f17e:	66 1f       	adc	r22, r22
    f180:	66 27       	eor	r22, r22
    f182:	66 1f       	adc	r22, r22
    f184:	81 14       	cp	r8, r1
    f186:	b2 e0       	ldi	r27, 0x02	; 2
    f188:	9b 06       	cpc	r9, r27
    f18a:	30 f0       	brcs	.+12     	; 0xf198 <qtm_acquisition_process+0x13e>
    f18c:	3f ef       	ldi	r19, 0xFF	; 255
    f18e:	83 1a       	sub	r8, r19
    f190:	31 e0       	ldi	r19, 0x01	; 1
    f192:	93 0a       	sbc	r9, r19
    f194:	41 e0       	ldi	r20, 0x01	; 1
    f196:	05 c0       	rjmp	.+10     	; 0xf1a2 <qtm_acquisition_process+0x148>
    f198:	a2 01       	movw	r20, r4
    f19a:	48 19       	sub	r20, r8
    f19c:	59 09       	sbc	r21, r9
    f19e:	4a 01       	movw	r8, r20
    f1a0:	40 e0       	ldi	r20, 0x00	; 0
    f1a2:	96 94       	lsr	r9
    f1a4:	87 94       	ror	r8
    f1a6:	ae 81       	ldd	r26, Y+6	; 0x06
    f1a8:	bf 81       	ldd	r27, Y+7	; 0x07
    f1aa:	12 96       	adiw	r26, 0x02	; 2
    f1ac:	3c 91       	ld	r19, X
    f1ae:	30 34       	cpi	r19, 0x40	; 64
    f1b0:	29 f0       	breq	.+10     	; 0xf1bc <qtm_acquisition_process+0x162>
    f1b2:	44 23       	and	r20, r20
    f1b4:	09 f4       	brne	.+2      	; 0xf1b8 <qtm_acquisition_process+0x15e>
    f1b6:	b6 c1       	rjmp	.+876    	; 0xf524 <qtm_acquisition_process+0x4ca>
    f1b8:	46 2f       	mov	r20, r22
    f1ba:	06 c0       	rjmp	.+12     	; 0xf1c8 <qtm_acquisition_process+0x16e>
    f1bc:	97 ff       	sbrs	r25, 7
    f1be:	04 c0       	rjmp	.+8      	; 0xf1c8 <qtm_acquisition_process+0x16e>
    f1c0:	31 e0       	ldi	r19, 0x01	; 1
    f1c2:	41 11       	cpse	r20, r1
    f1c4:	30 e0       	ldi	r19, 0x00	; 0
    f1c6:	43 2f       	mov	r20, r19
    f1c8:	ba e0       	ldi	r27, 0x0A	; 10
    f1ca:	8b 16       	cp	r8, r27
    f1cc:	91 04       	cpc	r9, r1
    f1ce:	08 f0       	brcs	.+2      	; 0xf1d2 <qtm_acquisition_process+0x178>
    f1d0:	3f c0       	rjmp	.+126    	; 0xf250 <qtm_acquisition_process+0x1f6>
    f1d2:	26 fd       	sbrc	r18, 6
    f1d4:	3a c0       	rjmp	.+116    	; 0xf24a <qtm_acquisition_process+0x1f0>
    f1d6:	27 fd       	sbrc	r18, 7
    f1d8:	94 c1       	rjmp	.+808    	; 0xf502 <qtm_acquisition_process+0x4a8>
    f1da:	ae 81       	ldd	r26, Y+6	; 0x06
    f1dc:	bf 81       	ldd	r27, Y+7	; 0x07
    f1de:	13 96       	adiw	r26, 0x03	; 3
    f1e0:	8c 91       	ld	r24, X
    f1e2:	83 70       	andi	r24, 0x03	; 3
    f1e4:	83 30       	cpi	r24, 0x03	; 3
    f1e6:	59 f4       	brne	.+22     	; 0xf1fe <qtm_acquisition_process+0x1a4>
    f1e8:	bf e7       	ldi	r27, 0x7F	; 127
    f1ea:	b0 8b       	std	Z+16, r27	; 0x10
    f1ec:	d8 01       	movw	r26, r16
    f1ee:	14 96       	adiw	r26, 0x04	; 4
    f1f0:	ed 91       	ld	r30, X+
    f1f2:	fc 91       	ld	r31, X
    f1f4:	15 97       	sbiw	r26, 0x05	; 5
    f1f6:	ea 0d       	add	r30, r10
    f1f8:	fb 1d       	adc	r31, r11
    f1fa:	b1 e1       	ldi	r27, 0x11	; 17
    f1fc:	0d c0       	rjmp	.+26     	; 0xf218 <qtm_acquisition_process+0x1be>
    f1fe:	82 30       	cpi	r24, 0x02	; 2
    f200:	69 f4       	brne	.+26     	; 0xf21c <qtm_acquisition_process+0x1c2>
    f202:	81 89       	ldd	r24, Z+17	; 0x11
    f204:	80 7f       	andi	r24, 0xF0	; 240
    f206:	81 8b       	std	Z+17, r24	; 0x11
    f208:	d8 01       	movw	r26, r16
    f20a:	14 96       	adiw	r26, 0x04	; 4
    f20c:	ed 91       	ld	r30, X+
    f20e:	fc 91       	ld	r31, X
    f210:	15 97       	sbiw	r26, 0x05	; 5
    f212:	ea 0d       	add	r30, r10
    f214:	fb 1d       	adc	r31, r11
    f216:	b9 e0       	ldi	r27, 0x09	; 9
    f218:	b0 83       	st	Z, r27
    f21a:	73 c1       	rjmp	.+742    	; 0xf502 <qtm_acquisition_process+0x4a8>
    f21c:	81 30       	cpi	r24, 0x01	; 1
    f21e:	a9 f4       	brne	.+42     	; 0xf24a <qtm_acquisition_process+0x1f0>
    f220:	81 89       	ldd	r24, Z+17	; 0x11
    f222:	8f 70       	andi	r24, 0x0F	; 15
    f224:	81 8b       	std	Z+17, r24	; 0x11
    f226:	d8 01       	movw	r26, r16
    f228:	12 96       	adiw	r26, 0x02	; 2
    f22a:	ed 91       	ld	r30, X+
    f22c:	fc 91       	ld	r31, X
    f22e:	13 97       	sbiw	r26, 0x03	; 3
    f230:	ec 0d       	add	r30, r12
    f232:	fd 1d       	adc	r31, r13
    f234:	81 89       	ldd	r24, Z+17	; 0x11
    f236:	80 67       	ori	r24, 0x70	; 112
    f238:	81 8b       	std	Z+17, r24	; 0x11
    f23a:	14 96       	adiw	r26, 0x04	; 4
    f23c:	ed 91       	ld	r30, X+
    f23e:	fc 91       	ld	r31, X
    f240:	15 97       	sbiw	r26, 0x05	; 5
    f242:	ea 0d       	add	r30, r10
    f244:	fb 1d       	adc	r31, r11
    f246:	bd e0       	ldi	r27, 0x0D	; 13
    f248:	e7 cf       	rjmp	.-50     	; 0xf218 <qtm_acquisition_process+0x1be>
    f24a:	f7 01       	movw	r30, r14
    f24c:	70 82       	st	Z, r7
    f24e:	59 c1       	rjmp	.+690    	; 0xf502 <qtm_acquisition_process+0x4a8>
    f250:	9c 01       	movw	r18, r24
    f252:	33 70       	andi	r19, 0x03	; 3
    f254:	2f 3f       	cpi	r18, 0xFF	; 255
    f256:	f3 e0       	ldi	r31, 0x03	; 3
    f258:	3f 07       	cpc	r19, r31
    f25a:	31 f4       	brne	.+12     	; 0xf268 <qtm_acquisition_process+0x20e>
    f25c:	e1 e8       	ldi	r30, 0x81	; 129
    f25e:	d7 01       	movw	r26, r14
    f260:	ec 93       	st	X, r30
    f262:	8f ef       	ldi	r24, 0xFF	; 255
    f264:	93 e0       	ldi	r25, 0x03	; 3
    f266:	0b c0       	rjmp	.+22     	; 0xf27e <qtm_acquisition_process+0x224>
    f268:	21 15       	cp	r18, r1
    f26a:	31 05       	cpc	r19, r1
    f26c:	59 f4       	brne	.+22     	; 0xf284 <qtm_acquisition_process+0x22a>
    f26e:	97 ff       	sbrs	r25, 7
    f270:	25 c0       	rjmp	.+74     	; 0xf2bc <qtm_acquisition_process+0x262>
    f272:	e1 e8       	ldi	r30, 0x81	; 129
    f274:	d7 01       	movw	r26, r14
    f276:	ec 93       	st	X, r30
    f278:	80 e0       	ldi	r24, 0x00	; 0
    f27a:	90 e0       	ldi	r25, 0x00	; 0
    f27c:	61 e0       	ldi	r22, 0x01	; 1
    f27e:	fe e0       	ldi	r31, 0x0E	; 14
    f280:	f9 83       	std	Y+1, r31	; 0x01
    f282:	1f c0       	rjmp	.+62     	; 0xf2c2 <qtm_acquisition_process+0x268>
    f284:	c9 01       	movw	r24, r18
    f286:	41 11       	cpse	r20, r1
    f288:	0f c0       	rjmp	.+30     	; 0xf2a8 <qtm_acquisition_process+0x24e>
    f28a:	01 96       	adiw	r24, 0x01	; 1
    f28c:	21 e0       	ldi	r18, 0x01	; 1
    f28e:	82 1a       	sub	r8, r18
    f290:	91 08       	sbc	r9, r1
    f292:	31 e0       	ldi	r19, 0x01	; 1
    f294:	83 16       	cp	r8, r19
    f296:	91 04       	cpc	r9, r1
    f298:	a1 f0       	breq	.+40     	; 0xf2c2 <qtm_acquisition_process+0x268>
    f29a:	8f 3f       	cpi	r24, 0xFF	; 255
    f29c:	43 e0       	ldi	r20, 0x03	; 3
    f29e:	94 07       	cpc	r25, r20
    f2a0:	a1 f7       	brne	.-24     	; 0xf28a <qtm_acquisition_process+0x230>
    f2a2:	0f c0       	rjmp	.+30     	; 0xf2c2 <qtm_acquisition_process+0x268>
    f2a4:	00 97       	sbiw	r24, 0x00	; 0
    f2a6:	69 f0       	breq	.+26     	; 0xf2c2 <qtm_acquisition_process+0x268>
    f2a8:	01 97       	sbiw	r24, 0x01	; 1
    f2aa:	ac 01       	movw	r20, r24
    f2ac:	42 1b       	sub	r20, r18
    f2ae:	53 0b       	sbc	r21, r19
    f2b0:	48 0d       	add	r20, r8
    f2b2:	59 1d       	adc	r21, r9
    f2b4:	41 30       	cpi	r20, 0x01	; 1
    f2b6:	51 05       	cpc	r21, r1
    f2b8:	a9 f7       	brne	.-22     	; 0xf2a4 <qtm_acquisition_process+0x24a>
    f2ba:	03 c0       	rjmp	.+6      	; 0xf2c2 <qtm_acquisition_process+0x268>
    f2bc:	80 ef       	ldi	r24, 0xF0	; 240
    f2be:	90 e0       	ldi	r25, 0x00	; 0
    f2c0:	61 e0       	ldi	r22, 0x01	; 1
    f2c2:	d8 01       	movw	r26, r16
    f2c4:	14 96       	adiw	r26, 0x04	; 4
    f2c6:	ed 91       	ld	r30, X+
    f2c8:	fc 91       	ld	r31, X
    f2ca:	15 97       	sbiw	r26, 0x05	; 5
    f2cc:	ea 0d       	add	r30, r10
    f2ce:	fb 1d       	adc	r31, r11
    f2d0:	70 e0       	ldi	r23, 0x00	; 0
    f2d2:	77 27       	eor	r23, r23
    f2d4:	66 95       	lsr	r22
    f2d6:	77 95       	ror	r23
    f2d8:	66 27       	eor	r22, r22
    f2da:	86 2b       	or	r24, r22
    f2dc:	97 2b       	or	r25, r23
    f2de:	83 83       	std	Z+3, r24	; 0x03
    f2e0:	94 83       	std	Z+4, r25	; 0x04
    f2e2:	0f c1       	rjmp	.+542    	; 0xf502 <qtm_acquisition_process+0x4a8>
    f2e4:	f8 01       	movw	r30, r16
    f2e6:	82 80       	ldd	r8, Z+2	; 0x02
    f2e8:	93 80       	ldd	r9, Z+3	; 0x03
    f2ea:	8c 0c       	add	r8, r12
    f2ec:	9d 1c       	adc	r9, r13
    f2ee:	fa 01       	movw	r30, r20
    f2f0:	d4 01       	movw	r26, r8
    f2f2:	53 96       	adiw	r26, 0x13	; 19
    f2f4:	0c 90       	ld	r0, X
    f2f6:	53 97       	sbiw	r26, 0x13	; 19
    f2f8:	02 c0       	rjmp	.+4      	; 0xf2fe <qtm_acquisition_process+0x2a4>
    f2fa:	f6 95       	lsr	r31
    f2fc:	e7 95       	ror	r30
    f2fe:	0a 94       	dec	r0
    f300:	e2 f7       	brpl	.-8      	; 0xf2fa <qtm_acquisition_process+0x2a0>
    f302:	ec 83       	std	Y+4, r30	; 0x04
    f304:	fd 83       	std	Y+5, r31	; 0x05
    f306:	50 96       	adiw	r26, 0x10	; 16
    f308:	6c 90       	ld	r6, X
    f30a:	ff e7       	ldi	r31, 0x7F	; 127
    f30c:	6f 12       	cpse	r6, r31
    f30e:	0f c0       	rjmp	.+30     	; 0xf32e <qtm_acquisition_process+0x2d4>
    f310:	ec 81       	ldd	r30, Y+4	; 0x04
    f312:	fd 81       	ldd	r31, Y+5	; 0x05
    f314:	d7 01       	movw	r26, r14
    f316:	11 96       	adiw	r26, 0x01	; 1
    f318:	ed 93       	st	X+, r30
    f31a:	fc 93       	st	X, r31
    f31c:	12 97       	sbiw	r26, 0x02	; 2
    f31e:	d4 01       	movw	r26, r8
    f320:	50 96       	adiw	r26, 0x10	; 16
    f322:	8c 91       	ld	r24, X
    f324:	50 97       	sbiw	r26, 0x10	; 16
    f326:	8f 7b       	andi	r24, 0xBF	; 191
    f328:	50 96       	adiw	r26, 0x10	; 16
    f32a:	8c 93       	st	X, r24
    f32c:	42 c0       	rjmp	.+132    	; 0xf3b2 <qtm_acquisition_process+0x358>
    f32e:	f1 2c       	mov	r15, r1
    f330:	26 2d       	mov	r18, r6
    f332:	30 e0       	ldi	r19, 0x00	; 0
    f334:	c9 01       	movw	r24, r18
    f336:	0f 2c       	mov	r0, r15
    f338:	02 c0       	rjmp	.+4      	; 0xf33e <qtm_acquisition_process+0x2e4>
    f33a:	96 95       	lsr	r25
    f33c:	87 95       	ror	r24
    f33e:	0a 94       	dec	r0
    f340:	e2 f7       	brpl	.-8      	; 0xf33a <qtm_acquisition_process+0x2e0>
    f342:	80 ff       	sbrs	r24, 0
    f344:	03 c0       	rjmp	.+6      	; 0xf34c <qtm_acquisition_process+0x2f2>
    f346:	8f 2d       	mov	r24, r15
    f348:	f1 2c       	mov	r15, r1
    f34a:	01 c0       	rjmp	.+2      	; 0xf34e <qtm_acquisition_process+0x2f4>
    f34c:	87 e0       	ldi	r24, 0x07	; 7
    f34e:	8f 5f       	subi	r24, 0xFF	; 255
    f350:	87 30       	cpi	r24, 0x07	; 7
    f352:	10 f4       	brcc	.+4      	; 0xf358 <qtm_acquisition_process+0x2fe>
    f354:	f8 2e       	mov	r15, r24
    f356:	ee cf       	rjmp	.-36     	; 0xf334 <qtm_acquisition_process+0x2da>
    f358:	6c 81       	ldd	r22, Y+4	; 0x04
    f35a:	7d 81       	ldd	r23, Y+5	; 0x05
    f35c:	c1 01       	movw	r24, r2
    f35e:	0e 94 9d 76 	call	0xed3a	; 0xed3a <charge_share_test>
    f362:	88 23       	and	r24, r24
    f364:	51 f0       	breq	.+20     	; 0xf37a <qtm_acquisition_process+0x320>
    f366:	81 e0       	ldi	r24, 0x01	; 1
    f368:	90 e0       	ldi	r25, 0x00	; 0
    f36a:	0f 2c       	mov	r0, r15
    f36c:	01 c0       	rjmp	.+2      	; 0xf370 <qtm_acquisition_process+0x316>
    f36e:	88 0f       	add	r24, r24
    f370:	0a 94       	dec	r0
    f372:	ea f7       	brpl	.-6      	; 0xf36e <qtm_acquisition_process+0x314>
    f374:	86 29       	or	r24, r6
    f376:	f4 01       	movw	r30, r8
    f378:	80 8b       	std	Z+16, r24	; 0x10
    f37a:	d8 01       	movw	r26, r16
    f37c:	ff 20       	and	r15, r15
    f37e:	91 f0       	breq	.+36     	; 0xf3a4 <qtm_acquisition_process+0x34a>
    f380:	12 96       	adiw	r26, 0x02	; 2
    f382:	ed 91       	ld	r30, X+
    f384:	fc 91       	ld	r31, X
    f386:	13 97       	sbiw	r26, 0x03	; 3
    f388:	ec 0d       	add	r30, r12
    f38a:	fd 1d       	adc	r31, r13
    f38c:	fa 94       	dec	r15
    f38e:	81 e0       	ldi	r24, 0x01	; 1
    f390:	90 e0       	ldi	r25, 0x00	; 0
    f392:	01 c0       	rjmp	.+2      	; 0xf396 <qtm_acquisition_process+0x33c>
    f394:	88 0f       	add	r24, r24
    f396:	fa 94       	dec	r15
    f398:	ea f7       	brpl	.-6      	; 0xf394 <qtm_acquisition_process+0x33a>
    f39a:	80 95       	com	r24
    f39c:	90 89       	ldd	r25, Z+16	; 0x10
    f39e:	89 23       	and	r24, r25
    f3a0:	80 8b       	std	Z+16, r24	; 0x10
    f3a2:	07 c0       	rjmp	.+14     	; 0xf3b2 <qtm_acquisition_process+0x358>
    f3a4:	14 96       	adiw	r26, 0x04	; 4
    f3a6:	ed 91       	ld	r30, X+
    f3a8:	fc 91       	ld	r31, X
    f3aa:	15 97       	sbiw	r26, 0x05	; 5
    f3ac:	ea 0d       	add	r30, r10
    f3ae:	fb 1d       	adc	r31, r11
    f3b0:	70 82       	st	Z, r7
    f3b2:	d8 01       	movw	r26, r16
    f3b4:	14 96       	adiw	r26, 0x04	; 4
    f3b6:	ed 91       	ld	r30, X+
    f3b8:	fc 91       	ld	r31, X
    f3ba:	15 97       	sbiw	r26, 0x05	; 5
    f3bc:	ea 0d       	add	r30, r10
    f3be:	fb 1d       	adc	r31, r11
    f3c0:	80 81       	ld	r24, Z
    f3c2:	81 30       	cpi	r24, 0x01	; 1
    f3c4:	09 f0       	breq	.+2      	; 0xf3c8 <qtm_acquisition_process+0x36e>
    f3c6:	9d c0       	rjmp	.+314    	; 0xf502 <qtm_acquisition_process+0x4a8>
    f3c8:	2c 81       	ldd	r18, Y+4	; 0x04
    f3ca:	3d 81       	ldd	r19, Y+5	; 0x05
    f3cc:	83 c0       	rjmp	.+262    	; 0xf4d4 <qtm_acquisition_process+0x47a>
    f3ce:	02 80       	ldd	r0, Z+2	; 0x02
    f3d0:	f3 81       	ldd	r31, Z+3	; 0x03
    f3d2:	e0 2d       	mov	r30, r0
    f3d4:	ec 0d       	add	r30, r12
    f3d6:	fd 1d       	adc	r31, r13
    f3d8:	9a 01       	movw	r18, r20
    f3da:	03 88       	ldd	r0, Z+19	; 0x13
    f3dc:	02 c0       	rjmp	.+4      	; 0xf3e2 <qtm_acquisition_process+0x388>
    f3de:	36 95       	lsr	r19
    f3e0:	27 95       	ror	r18
    f3e2:	0a 94       	dec	r0
    f3e4:	e2 f7       	brpl	.-8      	; 0xf3de <qtm_acquisition_process+0x384>
    f3e6:	2c 83       	std	Y+4, r18	; 0x04
    f3e8:	3d 83       	std	Y+5, r19	; 0x05
    f3ea:	91 88       	ldd	r9, Z+17	; 0x11
    f3ec:	92 94       	swap	r9
    f3ee:	2f e0       	ldi	r18, 0x0F	; 15
    f3f0:	92 22       	and	r9, r18
    f3f2:	37 e0       	ldi	r19, 0x07	; 7
    f3f4:	93 16       	cp	r9, r19
    f3f6:	91 f0       	breq	.+36     	; 0xf41c <qtm_acquisition_process+0x3c2>
    f3f8:	6c 81       	ldd	r22, Y+4	; 0x04
    f3fa:	7d 81       	ldd	r23, Y+5	; 0x05
    f3fc:	c1 01       	movw	r24, r2
    f3fe:	0e 94 9d 76 	call	0xed3a	; 0xed3a <charge_share_test>
    f402:	81 11       	cpse	r24, r1
    f404:	04 c0       	rjmp	.+8      	; 0xf40e <qtm_acquisition_process+0x3b4>
    f406:	93 94       	inc	r9
    f408:	d7 01       	movw	r26, r14
    f40a:	7c 92       	st	X, r7
    f40c:	09 c0       	rjmp	.+18     	; 0xf420 <qtm_acquisition_process+0x3c6>
    f40e:	91 10       	cpse	r9, r1
    f410:	03 c0       	rjmp	.+6      	; 0xf418 <qtm_acquisition_process+0x3be>
    f412:	f7 01       	movw	r30, r14
    f414:	70 82       	st	Z, r7
    f416:	04 c0       	rjmp	.+8      	; 0xf420 <qtm_acquisition_process+0x3c6>
    f418:	9a 94       	dec	r9
    f41a:	02 c0       	rjmp	.+4      	; 0xf420 <qtm_acquisition_process+0x3c6>
    f41c:	96 e0       	ldi	r25, 0x06	; 6
    f41e:	99 2e       	mov	r9, r25
    f420:	d8 01       	movw	r26, r16
    f422:	12 96       	adiw	r26, 0x02	; 2
    f424:	ed 91       	ld	r30, X+
    f426:	fc 91       	ld	r31, X
    f428:	13 97       	sbiw	r26, 0x03	; 3
    f42a:	ec 0d       	add	r30, r12
    f42c:	fd 1d       	adc	r31, r13
    f42e:	81 89       	ldd	r24, Z+17	; 0x11
    f430:	8f 70       	andi	r24, 0x0F	; 15
    f432:	81 8b       	std	Z+17, r24	; 0x11
    f434:	12 96       	adiw	r26, 0x02	; 2
    f436:	ed 91       	ld	r30, X+
    f438:	fc 91       	ld	r31, X
    f43a:	13 97       	sbiw	r26, 0x03	; 3
    f43c:	ec 0d       	add	r30, r12
    f43e:	fd 1d       	adc	r31, r13
    f440:	92 94       	swap	r9
    f442:	80 ef       	ldi	r24, 0xF0	; 240
    f444:	98 22       	and	r9, r24
    f446:	36 c0       	rjmp	.+108    	; 0xf4b4 <qtm_acquisition_process+0x45a>
    f448:	02 80       	ldd	r0, Z+2	; 0x02
    f44a:	f3 81       	ldd	r31, Z+3	; 0x03
    f44c:	e0 2d       	mov	r30, r0
    f44e:	ec 0d       	add	r30, r12
    f450:	fd 1d       	adc	r31, r13
    f452:	9a 01       	movw	r18, r20
    f454:	03 88       	ldd	r0, Z+19	; 0x13
    f456:	02 c0       	rjmp	.+4      	; 0xf45c <qtm_acquisition_process+0x402>
    f458:	36 95       	lsr	r19
    f45a:	27 95       	ror	r18
    f45c:	0a 94       	dec	r0
    f45e:	e2 f7       	brpl	.-8      	; 0xf458 <qtm_acquisition_process+0x3fe>
    f460:	2c 83       	std	Y+4, r18	; 0x04
    f462:	3d 83       	std	Y+5, r19	; 0x05
    f464:	81 89       	ldd	r24, Z+17	; 0x11
    f466:	8f 70       	andi	r24, 0x0F	; 15
    f468:	98 2e       	mov	r9, r24
    f46a:	91 f0       	breq	.+36     	; 0xf490 <qtm_acquisition_process+0x436>
    f46c:	b9 01       	movw	r22, r18
    f46e:	c1 01       	movw	r24, r2
    f470:	0e 94 9d 76 	call	0xed3a	; 0xed3a <charge_share_test>
    f474:	81 11       	cpse	r24, r1
    f476:	04 c0       	rjmp	.+8      	; 0xf480 <qtm_acquisition_process+0x426>
    f478:	9a 94       	dec	r9
    f47a:	d7 01       	movw	r26, r14
    f47c:	7c 92       	st	X, r7
    f47e:	0a c0       	rjmp	.+20     	; 0xf494 <qtm_acquisition_process+0x43a>
    f480:	b7 e0       	ldi	r27, 0x07	; 7
    f482:	9b 12       	cpse	r9, r27
    f484:	03 c0       	rjmp	.+6      	; 0xf48c <qtm_acquisition_process+0x432>
    f486:	f7 01       	movw	r30, r14
    f488:	70 82       	st	Z, r7
    f48a:	04 c0       	rjmp	.+8      	; 0xf494 <qtm_acquisition_process+0x43a>
    f48c:	93 94       	inc	r9
    f48e:	02 c0       	rjmp	.+4      	; 0xf494 <qtm_acquisition_process+0x43a>
    f490:	99 24       	eor	r9, r9
    f492:	93 94       	inc	r9
    f494:	d8 01       	movw	r26, r16
    f496:	12 96       	adiw	r26, 0x02	; 2
    f498:	ed 91       	ld	r30, X+
    f49a:	fc 91       	ld	r31, X
    f49c:	13 97       	sbiw	r26, 0x03	; 3
    f49e:	ec 0d       	add	r30, r12
    f4a0:	fd 1d       	adc	r31, r13
    f4a2:	81 89       	ldd	r24, Z+17	; 0x11
    f4a4:	80 7f       	andi	r24, 0xF0	; 240
    f4a6:	81 8b       	std	Z+17, r24	; 0x11
    f4a8:	12 96       	adiw	r26, 0x02	; 2
    f4aa:	ed 91       	ld	r30, X+
    f4ac:	fc 91       	ld	r31, X
    f4ae:	13 97       	sbiw	r26, 0x03	; 3
    f4b0:	ec 0d       	add	r30, r12
    f4b2:	fd 1d       	adc	r31, r13
    f4b4:	81 89       	ldd	r24, Z+17	; 0x11
    f4b6:	98 2a       	or	r9, r24
    f4b8:	91 8a       	std	Z+17, r9	; 0x11
    f4ba:	14 96       	adiw	r26, 0x04	; 4
    f4bc:	ed 91       	ld	r30, X+
    f4be:	fc 91       	ld	r31, X
    f4c0:	15 97       	sbiw	r26, 0x05	; 5
    f4c2:	ea 0d       	add	r30, r10
    f4c4:	fb 1d       	adc	r31, r11
    f4c6:	2c 81       	ldd	r18, Y+4	; 0x04
    f4c8:	3d 81       	ldd	r19, Y+5	; 0x05
    f4ca:	21 83       	std	Z+1, r18	; 0x01
    f4cc:	32 83       	std	Z+2, r19	; 0x02
    f4ce:	80 81       	ld	r24, Z
    f4d0:	81 30       	cpi	r24, 0x01	; 1
    f4d2:	b9 f4       	brne	.+46     	; 0xf502 <qtm_acquisition_process+0x4a8>
    f4d4:	21 15       	cp	r18, r1
    f4d6:	42 e0       	ldi	r20, 0x02	; 2
    f4d8:	34 07       	cpc	r19, r20
    f4da:	28 f0       	brcs	.+10     	; 0xf4e6 <qtm_acquisition_process+0x48c>
    f4dc:	2f 5f       	subi	r18, 0xFF	; 255
    f4de:	31 40       	sbci	r19, 0x01	; 1
    f4e0:	2c 83       	std	Y+4, r18	; 0x04
    f4e2:	3d 83       	std	Y+5, r19	; 0x05
    f4e4:	07 c0       	rjmp	.+14     	; 0xf4f4 <qtm_acquisition_process+0x49a>
    f4e6:	c2 01       	movw	r24, r4
    f4e8:	ac 81       	ldd	r26, Y+4	; 0x04
    f4ea:	bd 81       	ldd	r27, Y+5	; 0x05
    f4ec:	8a 1b       	sub	r24, r26
    f4ee:	9b 0b       	sbc	r25, r27
    f4f0:	8c 83       	std	Y+4, r24	; 0x04
    f4f2:	9d 83       	std	Y+5, r25	; 0x05
    f4f4:	2c 81       	ldd	r18, Y+4	; 0x04
    f4f6:	3d 81       	ldd	r19, Y+5	; 0x05
    f4f8:	2b 30       	cpi	r18, 0x0B	; 11
    f4fa:	31 05       	cpc	r19, r1
    f4fc:	10 f0       	brcs	.+4      	; 0xf502 <qtm_acquisition_process+0x4a8>
    f4fe:	35 e4       	ldi	r19, 0x45	; 69
    f500:	30 83       	st	Z, r19
    f502:	4f ef       	ldi	r20, 0xFF	; 255
    f504:	24 1a       	sub	r2, r20
    f506:	34 0a       	sbc	r3, r20
    f508:	55 e0       	ldi	r21, 0x05	; 5
    f50a:	a5 0e       	add	r10, r21
    f50c:	b1 1c       	adc	r11, r1
    f50e:	84 e1       	ldi	r24, 0x14	; 20
    f510:	c8 0e       	add	r12, r24
    f512:	d1 1c       	adc	r13, r1
    f514:	d5 cd       	rjmp	.-1110   	; 0xf0c0 <qtm_acquisition_process+0x66>
    f516:	82 e0       	ldi	r24, 0x02	; 2
    f518:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f51c:	09 c0       	rjmp	.+18     	; 0xf530 <qtm_acquisition_process+0x4d6>
    f51e:	b3 e0       	ldi	r27, 0x03	; 3
    f520:	b9 83       	std	Y+1, r27	; 0x01
    f522:	06 c0       	rjmp	.+12     	; 0xf530 <qtm_acquisition_process+0x4d6>
    f524:	49 2f       	mov	r20, r25
    f526:	40 95       	com	r20
    f528:	44 1f       	adc	r20, r20
    f52a:	44 27       	eor	r20, r20
    f52c:	44 1f       	adc	r20, r20
    f52e:	4c ce       	rjmp	.-872    	; 0xf1c8 <qtm_acquisition_process+0x16e>
    f530:	89 81       	ldd	r24, Y+1	; 0x01
    f532:	27 96       	adiw	r28, 0x07	; 7
    f534:	cd bf       	out	0x3d, r28	; 61
    f536:	de bf       	out	0x3e, r29	; 62
    f538:	df 91       	pop	r29
    f53a:	cf 91       	pop	r28
    f53c:	1f 91       	pop	r17
    f53e:	0f 91       	pop	r16
    f540:	ff 90       	pop	r15
    f542:	ef 90       	pop	r14
    f544:	df 90       	pop	r13
    f546:	cf 90       	pop	r12
    f548:	bf 90       	pop	r11
    f54a:	af 90       	pop	r10
    f54c:	9f 90       	pop	r9
    f54e:	8f 90       	pop	r8
    f550:	7f 90       	pop	r7
    f552:	6f 90       	pop	r6
    f554:	5f 90       	pop	r5
    f556:	4f 90       	pop	r4
    f558:	3f 90       	pop	r3
    f55a:	2f 90       	pop	r2
    f55c:	08 95       	ret

0000f55e <qtm_ptc_init_acquisition_module>:
    f55e:	5f 92       	push	r5
    f560:	6f 92       	push	r6
    f562:	7f 92       	push	r7
    f564:	8f 92       	push	r8
    f566:	9f 92       	push	r9
    f568:	af 92       	push	r10
    f56a:	bf 92       	push	r11
    f56c:	cf 92       	push	r12
    f56e:	df 92       	push	r13
    f570:	ef 92       	push	r14
    f572:	ff 92       	push	r15
    f574:	0f 93       	push	r16
    f576:	1f 93       	push	r17
    f578:	cf 93       	push	r28
    f57a:	df 93       	push	r29
    f57c:	00 97       	sbiw	r24, 0x00	; 0
    f57e:	09 f4       	brne	.+2      	; 0xf582 <qtm_ptc_init_acquisition_module+0x24>
    f580:	92 c0       	rjmp	.+292    	; 0xf6a6 <qtm_ptc_init_acquisition_module+0x148>
    f582:	dc 01       	movw	r26, r24
    f584:	ed 91       	ld	r30, X+
    f586:	fc 91       	ld	r31, X
    f588:	60 81       	ld	r22, Z
    f58a:	71 81       	ldd	r23, Z+1	; 0x01
    f58c:	40 e0       	ldi	r20, 0x00	; 0
    f58e:	50 e0       	ldi	r21, 0x00	; 0
    f590:	20 e0       	ldi	r18, 0x00	; 0
    f592:	30 e0       	ldi	r19, 0x00	; 0
    f594:	b0 e0       	ldi	r27, 0x00	; 0
    f596:	10 e0       	ldi	r17, 0x00	; 0
    f598:	f1 2c       	mov	r15, r1
    f59a:	e1 2c       	mov	r14, r1
    f59c:	91 2c       	mov	r9, r1
    f59e:	81 2c       	mov	r8, r1
    f5a0:	71 2c       	mov	r7, r1
    f5a2:	61 2c       	mov	r6, r1
    f5a4:	26 17       	cp	r18, r22
    f5a6:	37 07       	cpc	r19, r23
    f5a8:	51 f1       	breq	.+84     	; 0xf5fe <qtm_ptc_init_acquisition_module+0xa0>
    f5aa:	ec 01       	movw	r28, r24
    f5ac:	ea 81       	ldd	r30, Y+2	; 0x02
    f5ae:	fb 81       	ldd	r31, Y+3	; 0x03
    f5b0:	e4 0f       	add	r30, r20
    f5b2:	f5 1f       	adc	r31, r21
    f5b4:	a0 80       	ld	r10, Z
    f5b6:	a0 85       	ldd	r26, Z+8	; 0x08
    f5b8:	aa 2a       	or	r10, r26
    f5ba:	b1 80       	ldd	r11, Z+1	; 0x01
    f5bc:	a1 85       	ldd	r26, Z+9	; 0x09
    f5be:	ba 2a       	or	r11, r26
    f5c0:	c2 80       	ldd	r12, Z+2	; 0x02
    f5c2:	a2 85       	ldd	r26, Z+10	; 0x0a
    f5c4:	ca 2a       	or	r12, r26
    f5c6:	d3 80       	ldd	r13, Z+3	; 0x03
    f5c8:	a3 85       	ldd	r26, Z+11	; 0x0b
    f5ca:	da 2a       	or	r13, r26
    f5cc:	d4 81       	ldd	r29, Z+4	; 0x04
    f5ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    f5d0:	da 2b       	or	r29, r26
    f5d2:	c5 81       	ldd	r28, Z+5	; 0x05
    f5d4:	a5 85       	ldd	r26, Z+13	; 0x0d
    f5d6:	ca 2b       	or	r28, r26
    f5d8:	56 80       	ldd	r5, Z+6	; 0x06
    f5da:	a6 85       	ldd	r26, Z+14	; 0x0e
    f5dc:	a5 29       	or	r26, r5
    f5de:	57 80       	ldd	r5, Z+7	; 0x07
    f5e0:	e7 85       	ldd	r30, Z+15	; 0x0f
    f5e2:	e5 29       	or	r30, r5
    f5e4:	ba 29       	or	r27, r10
    f5e6:	1b 29       	or	r17, r11
    f5e8:	fc 28       	or	r15, r12
    f5ea:	ed 28       	or	r14, r13
    f5ec:	9d 2a       	or	r9, r29
    f5ee:	8c 2a       	or	r8, r28
    f5f0:	7a 2a       	or	r7, r26
    f5f2:	6e 2a       	or	r6, r30
    f5f4:	2f 5f       	subi	r18, 0xFF	; 255
    f5f6:	3f 4f       	sbci	r19, 0xFF	; 255
    f5f8:	4c 5e       	subi	r20, 0xEC	; 236
    f5fa:	5f 4f       	sbci	r21, 0xFF	; 255
    f5fc:	d3 cf       	rjmp	.-90     	; 0xf5a4 <qtm_ptc_init_acquisition_module+0x46>
    f5fe:	2b 2f       	mov	r18, r27
    f600:	31 2f       	mov	r19, r17
    f602:	4f 2d       	mov	r20, r15
    f604:	5e 2d       	mov	r21, r14
    f606:	69 2d       	mov	r22, r9
    f608:	78 2d       	mov	r23, r8
    f60a:	87 2d       	mov	r24, r7
    f60c:	96 2d       	mov	r25, r6
    f60e:	a0 e0       	ldi	r26, 0x00	; 0
    f610:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <__cmpdi2_s8>
    f614:	09 f4       	brne	.+2      	; 0xf618 <qtm_ptc_init_acquisition_module+0xba>
    f616:	49 c0       	rjmp	.+146    	; 0xf6aa <qtm_ptc_init_acquisition_module+0x14c>
    f618:	81 e0       	ldi	r24, 0x01	; 1
    f61a:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f61e:	21 ed       	ldi	r18, 0xD1	; 209
    f620:	c2 2e       	mov	r12, r18
    f622:	22 e4       	ldi	r18, 0x42	; 66
    f624:	d2 2e       	mov	r13, r18
    f626:	c0 e0       	ldi	r28, 0x00	; 0
    f628:	d0 e0       	ldi	r29, 0x00	; 0
    f62a:	aa 24       	eor	r10, r10
    f62c:	a3 94       	inc	r10
    f62e:	b1 2c       	mov	r11, r1
    f630:	4c e0       	ldi	r20, 0x0C	; 12
    f632:	54 2e       	mov	r5, r20
    f634:	2b 2f       	mov	r18, r27
    f636:	31 2f       	mov	r19, r17
    f638:	4f 2d       	mov	r20, r15
    f63a:	5e 2d       	mov	r21, r14
    f63c:	69 2d       	mov	r22, r9
    f63e:	78 2d       	mov	r23, r8
    f640:	87 2d       	mov	r24, r7
    f642:	96 2d       	mov	r25, r6
    f644:	0c 2f       	mov	r16, r28
    f646:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <__lshrdi3>
    f64a:	21 70       	andi	r18, 0x01	; 1
    f64c:	30 e0       	ldi	r19, 0x00	; 0
    f64e:	40 e0       	ldi	r20, 0x00	; 0
    f650:	50 e0       	ldi	r21, 0x00	; 0
    f652:	60 e0       	ldi	r22, 0x00	; 0
    f654:	70 e0       	ldi	r23, 0x00	; 0
    f656:	80 e0       	ldi	r24, 0x00	; 0
    f658:	90 e0       	ldi	r25, 0x00	; 0
    f65a:	a0 e0       	ldi	r26, 0x00	; 0
    f65c:	0e 94 50 7d 	call	0xfaa0	; 0xfaa0 <__cmpdi2_s8>
    f660:	c9 f0       	breq	.+50     	; 0xf694 <qtm_ptc_init_acquisition_module+0x136>
    f662:	f6 01       	movw	r30, r12
    f664:	80 81       	ld	r24, Z
    f666:	e8 2f       	mov	r30, r24
    f668:	e2 95       	swap	r30
    f66a:	e6 95       	lsr	r30
    f66c:	e7 70       	andi	r30, 0x07	; 7
    f66e:	f0 e0       	ldi	r31, 0x00	; 0
    f670:	ee 0f       	add	r30, r30
    f672:	ff 1f       	adc	r31, r31
    f674:	ed 53       	subi	r30, 0x3D	; 61
    f676:	fd 4b       	sbci	r31, 0xBD	; 189
    f678:	01 90       	ld	r0, Z+
    f67a:	f0 81       	ld	r31, Z
    f67c:	e0 2d       	mov	r30, r0
    f67e:	8f 71       	andi	r24, 0x1F	; 31
    f680:	95 01       	movw	r18, r10
    f682:	02 c0       	rjmp	.+4      	; 0xf688 <qtm_ptc_init_acquisition_module+0x12a>
    f684:	22 0f       	add	r18, r18
    f686:	33 1f       	adc	r19, r19
    f688:	8a 95       	dec	r24
    f68a:	e2 f7       	brpl	.-8      	; 0xf684 <qtm_ptc_init_acquisition_module+0x126>
    f68c:	22 83       	std	Z+2, r18	; 0x02
    f68e:	26 83       	std	Z+6, r18	; 0x06
    f690:	53 86       	std	Z+11, r5	; 0x0b
    f692:	25 87       	std	Z+13, r18	; 0x0d
    f694:	21 96       	adiw	r28, 0x01	; 1
    f696:	3f ef       	ldi	r19, 0xFF	; 255
    f698:	c3 1a       	sub	r12, r19
    f69a:	d3 0a       	sbc	r13, r19
    f69c:	c0 33       	cpi	r28, 0x30	; 48
    f69e:	d1 05       	cpc	r29, r1
    f6a0:	49 f6       	brne	.-110    	; 0xf634 <qtm_ptc_init_acquisition_module+0xd6>
    f6a2:	80 e0       	ldi	r24, 0x00	; 0
    f6a4:	03 c0       	rjmp	.+6      	; 0xf6ac <qtm_ptc_init_acquisition_module+0x14e>
    f6a6:	8b e0       	ldi	r24, 0x0B	; 11
    f6a8:	01 c0       	rjmp	.+2      	; 0xf6ac <qtm_ptc_init_acquisition_module+0x14e>
    f6aa:	82 e0       	ldi	r24, 0x02	; 2
    f6ac:	df 91       	pop	r29
    f6ae:	cf 91       	pop	r28
    f6b0:	1f 91       	pop	r17
    f6b2:	0f 91       	pop	r16
    f6b4:	ff 90       	pop	r15
    f6b6:	ef 90       	pop	r14
    f6b8:	df 90       	pop	r13
    f6ba:	cf 90       	pop	r12
    f6bc:	bf 90       	pop	r11
    f6be:	af 90       	pop	r10
    f6c0:	9f 90       	pop	r9
    f6c2:	8f 90       	pop	r8
    f6c4:	7f 90       	pop	r7
    f6c6:	6f 90       	pop	r6
    f6c8:	5f 90       	pop	r5
    f6ca:	08 95       	ret

0000f6cc <qtm_ptc_qtlib_assign_signal_memory>:
    f6cc:	00 97       	sbiw	r24, 0x00	; 0
    f6ce:	31 f0       	breq	.+12     	; 0xf6dc <qtm_ptc_qtlib_assign_signal_memory+0x10>
    f6d0:	80 93 4b 47 	sts	0x474B, r24	; 0x80474b <qtm_raw_data_measurements_ptr>
    f6d4:	90 93 4c 47 	sts	0x474C, r25	; 0x80474c <qtm_raw_data_measurements_ptr+0x1>
    f6d8:	80 e0       	ldi	r24, 0x00	; 0
    f6da:	08 95       	ret
    f6dc:	8b e0       	ldi	r24, 0x0B	; 11
    f6de:	08 95       	ret

0000f6e0 <qtm_ptc_start_measurement_seq>:
    f6e0:	61 15       	cp	r22, r1
    f6e2:	71 05       	cpc	r23, r1
    f6e4:	61 f1       	breq	.+88     	; 0xf73e <qtm_ptc_start_measurement_seq+0x5e>
    f6e6:	00 97       	sbiw	r24, 0x00	; 0
    f6e8:	51 f1       	breq	.+84     	; 0xf73e <qtm_ptc_start_measurement_seq+0x5e>
    f6ea:	20 91 44 46 	lds	r18, 0x4644	; 0x804644 <touch_seq_lib_state>
    f6ee:	22 23       	and	r18, r18
    f6f0:	41 f1       	breq	.+80     	; 0xf742 <qtm_ptc_start_measurement_seq+0x62>
    f6f2:	24 30       	cpi	r18, 0x04	; 4
    f6f4:	41 f1       	breq	.+80     	; 0xf746 <qtm_ptc_start_measurement_seq+0x66>
    f6f6:	80 93 49 47 	sts	0x4749, r24	; 0x804749 <qtm_acquisition_control_working_set_ptr>
    f6fa:	90 93 4a 47 	sts	0x474A, r25	; 0x80474a <qtm_acquisition_control_working_set_ptr+0x1>
    f6fe:	60 93 42 46 	sts	0x4642, r22	; 0x804642 <ptc_seq_measure_complete_pointer>
    f702:	70 93 43 46 	sts	0x4643, r23	; 0x804643 <ptc_seq_measure_complete_pointer+0x1>
    f706:	dc 01       	movw	r26, r24
    f708:	ed 91       	ld	r30, X+
    f70a:	fc 91       	ld	r31, X
    f70c:	22 81       	ldd	r18, Z+2	; 0x02
    f70e:	20 34       	cpi	r18, 0x40	; 64
    f710:	19 f4       	brne	.+6      	; 0xf718 <qtm_ptc_start_measurement_seq+0x38>
    f712:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    f716:	07 c0       	rjmp	.+14     	; 0xf726 <qtm_ptc_start_measurement_seq+0x46>
    f718:	20 38       	cpi	r18, 0x80	; 128
    f71a:	11 f0       	breq	.+4      	; 0xf720 <qtm_ptc_start_measurement_seq+0x40>
    f71c:	21 38       	cpi	r18, 0x81	; 129
    f71e:	31 f4       	brne	.+12     	; 0xf72c <qtm_ptc_start_measurement_seq+0x4c>
    f720:	21 e0       	ldi	r18, 0x01	; 1
    f722:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    f726:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    f72a:	11 c0       	rjmp	.+34     	; 0xf74e <qtm_ptc_start_measurement_seq+0x6e>
    f72c:	22 38       	cpi	r18, 0x82	; 130
    f72e:	69 f4       	brne	.+26     	; 0xf74a <qtm_ptc_start_measurement_seq+0x6a>
    f730:	21 e0       	ldi	r18, 0x01	; 1
    f732:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    f736:	29 e0       	ldi	r18, 0x09	; 9
    f738:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    f73c:	08 c0       	rjmp	.+16     	; 0xf74e <qtm_ptc_start_measurement_seq+0x6e>
    f73e:	8b e0       	ldi	r24, 0x0B	; 11
    f740:	08 95       	ret
    f742:	83 e0       	ldi	r24, 0x03	; 3
    f744:	08 95       	ret
    f746:	81 e0       	ldi	r24, 0x01	; 1
    f748:	08 95       	ret
    f74a:	82 e0       	ldi	r24, 0x02	; 2
    f74c:	08 95       	ret
    f74e:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    f752:	dc 01       	movw	r26, r24
    f754:	ed 91       	ld	r30, X+
    f756:	fc 91       	ld	r31, X
    f758:	84 81       	ldd	r24, Z+4	; 0x04
    f75a:	92 81       	ldd	r25, Z+2	; 0x02
    f75c:	90 34       	cpi	r25, 0x40	; 64
    f75e:	51 f4       	brne	.+20     	; 0xf774 <qtm_ptc_start_measurement_seq+0x94>
    f760:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    f764:	80 31       	cpi	r24, 0x10	; 16
    f766:	10 f4       	brcc	.+4      	; 0xf76c <qtm_ptc_start_measurement_seq+0x8c>
    f768:	80 62       	ori	r24, 0x20	; 32
    f76a:	01 c0       	rjmp	.+2      	; 0xf76e <qtm_ptc_start_measurement_seq+0x8e>
    f76c:	8f e2       	ldi	r24, 0x2F	; 47
    f76e:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    f772:	08 c0       	rjmp	.+16     	; 0xf784 <qtm_ptc_start_measurement_seq+0xa4>
    f774:	90 e2       	ldi	r25, 0x20	; 32
    f776:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    f77a:	8f 30       	cpi	r24, 0x0F	; 15
    f77c:	08 f0       	brcs	.+2      	; 0xf780 <qtm_ptc_start_measurement_seq+0xa0>
    f77e:	8f e0       	ldi	r24, 0x0F	; 15
    f780:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    f784:	81 e0       	ldi	r24, 0x01	; 1
    f786:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <__TEXT_REGION_LENGTH__+0x7e07d3>
    f78a:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <__TEXT_REGION_LENGTH__+0x7e07d2>
    f78e:	80 93 f0 41 	sts	0x41F0, r24	; 0x8041f0 <qtm_which_mode_current>
    f792:	10 92 45 46 	sts	0x4645, r1	; 0x804645 <current_measure_channel>
    f796:	10 92 46 46 	sts	0x4646, r1	; 0x804646 <current_measure_channel+0x1>
    f79a:	0e 94 e5 76 	call	0xedca	; 0xedca <select_next_channel_to_measure>
    f79e:	81 11       	cpse	r24, r1
    f7a0:	0b c0       	rjmp	.+22     	; 0xf7b8 <qtm_ptc_start_measurement_seq+0xd8>
    f7a2:	84 e0       	ldi	r24, 0x04	; 4
    f7a4:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f7a8:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    f7ac:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    f7b0:	0e 94 18 77 	call	0xee30	; 0xee30 <qtm_measure_node>
    f7b4:	80 e0       	ldi	r24, 0x00	; 0
    f7b6:	08 95       	ret
    f7b8:	82 e0       	ldi	r24, 0x02	; 2
    f7ba:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f7be:	08 95       	ret

0000f7c0 <qtm_enable_sensor_node>:
    f7c0:	00 97       	sbiw	r24, 0x00	; 0
    f7c2:	c9 f0       	breq	.+50     	; 0xf7f6 <qtm_enable_sensor_node+0x36>
    f7c4:	dc 01       	movw	r26, r24
    f7c6:	ed 91       	ld	r30, X+
    f7c8:	fc 91       	ld	r31, X
    f7ca:	11 97       	sbiw	r26, 0x01	; 1
    f7cc:	20 81       	ld	r18, Z
    f7ce:	31 81       	ldd	r19, Z+1	; 0x01
    f7d0:	26 17       	cp	r18, r22
    f7d2:	37 07       	cpc	r19, r23
    f7d4:	90 f0       	brcs	.+36     	; 0xf7fa <qtm_enable_sensor_node+0x3a>
    f7d6:	45 e0       	ldi	r20, 0x05	; 5
    f7d8:	46 9f       	mul	r20, r22
    f7da:	90 01       	movw	r18, r0
    f7dc:	47 9f       	mul	r20, r23
    f7de:	30 0d       	add	r19, r0
    f7e0:	11 24       	eor	r1, r1
    f7e2:	14 96       	adiw	r26, 0x04	; 4
    f7e4:	ed 91       	ld	r30, X+
    f7e6:	fc 91       	ld	r31, X
    f7e8:	15 97       	sbiw	r26, 0x05	; 5
    f7ea:	e2 0f       	add	r30, r18
    f7ec:	f3 1f       	adc	r31, r19
    f7ee:	81 e0       	ldi	r24, 0x01	; 1
    f7f0:	80 83       	st	Z, r24
    f7f2:	80 e0       	ldi	r24, 0x00	; 0
    f7f4:	08 95       	ret
    f7f6:	8b e0       	ldi	r24, 0x0B	; 11
    f7f8:	08 95       	ret
    f7fa:	82 e0       	ldi	r24, 0x02	; 2
    f7fc:	08 95       	ret

0000f7fe <qtm_calibrate_sensor_node>:
    f7fe:	fc 01       	movw	r30, r24
    f800:	89 2b       	or	r24, r25
    f802:	d1 f1       	breq	.+116    	; 0xf878 <qtm_calibrate_sensor_node+0x7a>
    f804:	a0 81       	ld	r26, Z
    f806:	b1 81       	ldd	r27, Z+1	; 0x01
    f808:	8d 91       	ld	r24, X+
    f80a:	9c 91       	ld	r25, X
    f80c:	11 97       	sbiw	r26, 0x01	; 1
    f80e:	86 17       	cp	r24, r22
    f810:	97 07       	cpc	r25, r23
    f812:	a0 f1       	brcs	.+104    	; 0xf87c <qtm_calibrate_sensor_node+0x7e>
    f814:	12 96       	adiw	r26, 0x02	; 2
    f816:	9c 91       	ld	r25, X
    f818:	04 80       	ldd	r0, Z+4	; 0x04
    f81a:	f5 81       	ldd	r31, Z+5	; 0x05
    f81c:	e0 2d       	mov	r30, r0
    f81e:	90 34       	cpi	r25, 0x40	; 64
    f820:	59 f4       	brne	.+22     	; 0xf838 <qtm_calibrate_sensor_node+0x3a>
    f822:	85 e0       	ldi	r24, 0x05	; 5
    f824:	86 9f       	mul	r24, r22
    f826:	d0 01       	movw	r26, r0
    f828:	87 9f       	mul	r24, r23
    f82a:	b0 0d       	add	r27, r0
    f82c:	11 24       	eor	r1, r1
    f82e:	ae 0f       	add	r26, r30
    f830:	bf 1f       	adc	r27, r31
    f832:	80 ea       	ldi	r24, 0xA0	; 160
    f834:	90 e0       	ldi	r25, 0x00	; 0
    f836:	0d c0       	rjmp	.+26     	; 0xf852 <qtm_calibrate_sensor_node+0x54>
    f838:	90 58       	subi	r25, 0x80	; 128
    f83a:	93 30       	cpi	r25, 0x03	; 3
    f83c:	80 f4       	brcc	.+32     	; 0xf85e <qtm_calibrate_sensor_node+0x60>
    f83e:	85 e0       	ldi	r24, 0x05	; 5
    f840:	86 9f       	mul	r24, r22
    f842:	d0 01       	movw	r26, r0
    f844:	87 9f       	mul	r24, r23
    f846:	b0 0d       	add	r27, r0
    f848:	11 24       	eor	r1, r1
    f84a:	ae 0f       	add	r26, r30
    f84c:	bf 1f       	adc	r27, r31
    f84e:	80 ef       	ldi	r24, 0xF0	; 240
    f850:	90 e0       	ldi	r25, 0x00	; 0
    f852:	13 96       	adiw	r26, 0x03	; 3
    f854:	8d 93       	st	X+, r24
    f856:	9c 93       	st	X, r25
    f858:	14 97       	sbiw	r26, 0x04	; 4
    f85a:	80 e0       	ldi	r24, 0x00	; 0
    f85c:	01 c0       	rjmp	.+2      	; 0xf860 <qtm_calibrate_sensor_node+0x62>
    f85e:	82 e0       	ldi	r24, 0x02	; 2
    f860:	95 e0       	ldi	r25, 0x05	; 5
    f862:	96 9f       	mul	r25, r22
    f864:	90 01       	movw	r18, r0
    f866:	97 9f       	mul	r25, r23
    f868:	30 0d       	add	r19, r0
    f86a:	11 24       	eor	r1, r1
    f86c:	e2 0f       	add	r30, r18
    f86e:	f3 1f       	adc	r31, r19
    f870:	90 81       	ld	r25, Z
    f872:	92 60       	ori	r25, 0x02	; 2
    f874:	90 83       	st	Z, r25
    f876:	08 95       	ret
    f878:	8b e0       	ldi	r24, 0x0B	; 11
    f87a:	08 95       	ret
    f87c:	82 e0       	ldi	r24, 0x02	; 2
    f87e:	08 95       	ret

0000f880 <qtm_avr_da_ptc_handler_wcomp>:
    f880:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    f884:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    f888:	60 91 45 46 	lds	r22, 0x4645	; 0x804645 <current_measure_channel>
    f88c:	70 91 46 46 	lds	r23, 0x4646	; 0x804646 <current_measure_channel+0x1>
    f890:	cb 01       	movw	r24, r22
    f892:	88 0f       	add	r24, r24
    f894:	99 1f       	adc	r25, r25
    f896:	e0 91 4b 47 	lds	r30, 0x474B	; 0x80474b <qtm_raw_data_measurements_ptr>
    f89a:	f0 91 4c 47 	lds	r31, 0x474C	; 0x80474c <qtm_raw_data_measurements_ptr+0x1>
    f89e:	e8 0f       	add	r30, r24
    f8a0:	f9 1f       	adc	r31, r25
    f8a2:	20 83       	st	Z, r18
    f8a4:	31 83       	std	Z+1, r19	; 0x01
    f8a6:	a0 91 49 47 	lds	r26, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr>
    f8aa:	b0 91 4a 47 	lds	r27, 0x474A	; 0x80474a <qtm_acquisition_control_working_set_ptr+0x1>
    f8ae:	44 e1       	ldi	r20, 0x14	; 20
    f8b0:	46 9f       	mul	r20, r22
    f8b2:	c0 01       	movw	r24, r0
    f8b4:	47 9f       	mul	r20, r23
    f8b6:	90 0d       	add	r25, r0
    f8b8:	11 24       	eor	r1, r1
    f8ba:	12 96       	adiw	r26, 0x02	; 2
    f8bc:	ed 91       	ld	r30, X+
    f8be:	fc 91       	ld	r31, X
    f8c0:	13 97       	sbiw	r26, 0x03	; 3
    f8c2:	e8 0f       	add	r30, r24
    f8c4:	f9 1f       	adc	r31, r25
    f8c6:	92 89       	ldd	r25, Z+18	; 0x12
    f8c8:	9f 70       	andi	r25, 0x0F	; 15
    f8ca:	83 89       	ldd	r24, Z+19	; 0x13
    f8cc:	98 17       	cp	r25, r24
    f8ce:	10 f4       	brcc	.+4      	; 0xf8d4 <qtm_avr_da_ptc_handler_wcomp+0x54>
    f8d0:	89 1b       	sub	r24, r25
    f8d2:	01 c0       	rjmp	.+2      	; 0xf8d6 <qtm_avr_da_ptc_handler_wcomp+0x56>
    f8d4:	80 e0       	ldi	r24, 0x00	; 0
    f8d6:	95 e0       	ldi	r25, 0x05	; 5
    f8d8:	96 9f       	mul	r25, r22
    f8da:	a0 01       	movw	r20, r0
    f8dc:	97 9f       	mul	r25, r23
    f8de:	50 0d       	add	r21, r0
    f8e0:	11 24       	eor	r1, r1
    f8e2:	14 96       	adiw	r26, 0x04	; 4
    f8e4:	ed 91       	ld	r30, X+
    f8e6:	fc 91       	ld	r31, X
    f8e8:	15 97       	sbiw	r26, 0x05	; 5
    f8ea:	e4 0f       	add	r30, r20
    f8ec:	f5 1f       	adc	r31, r21
    f8ee:	02 c0       	rjmp	.+4      	; 0xf8f4 <qtm_avr_da_ptc_handler_wcomp+0x74>
    f8f0:	36 95       	lsr	r19
    f8f2:	27 95       	ror	r18
    f8f4:	8a 95       	dec	r24
    f8f6:	e2 f7       	brpl	.-8      	; 0xf8f0 <qtm_avr_da_ptc_handler_wcomp+0x70>
    f8f8:	21 83       	std	Z+1, r18	; 0x01
    f8fa:	32 83       	std	Z+2, r19	; 0x02
    f8fc:	82 e0       	ldi	r24, 0x02	; 2
    f8fe:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f902:	e0 91 40 46 	lds	r30, 0x4640	; 0x804640 <ptc_wcomp_happened_pointer>
    f906:	f0 91 41 46 	lds	r31, 0x4641	; 0x804641 <ptc_wcomp_happened_pointer+0x1>
    f90a:	09 94       	ijmp

0000f90c <qtm_avr_da_ptc_handler_eoc>:
    f90c:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    f910:	80 91 f0 41 	lds	r24, 0x41F0	; 0x8041f0 <qtm_which_mode_current>
    f914:	81 30       	cpi	r24, 0x01	; 1
    f916:	09 f0       	breq	.+2      	; 0xf91a <qtm_avr_da_ptc_handler_eoc+0xe>
    f918:	4e c0       	rjmp	.+156    	; 0xf9b6 <qtm_avr_da_ptc_handler_eoc+0xaa>
    f91a:	40 91 da 07 	lds	r20, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    f91e:	50 91 db 07 	lds	r21, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    f922:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    f926:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    f92a:	9c 01       	movw	r18, r24
    f92c:	22 0f       	add	r18, r18
    f92e:	33 1f       	adc	r19, r19
    f930:	e0 91 4b 47 	lds	r30, 0x474B	; 0x80474b <qtm_raw_data_measurements_ptr>
    f934:	f0 91 4c 47 	lds	r31, 0x474C	; 0x80474c <qtm_raw_data_measurements_ptr+0x1>
    f938:	e2 0f       	add	r30, r18
    f93a:	f3 1f       	adc	r31, r19
    f93c:	40 83       	st	Z, r20
    f93e:	51 83       	std	Z+1, r21	; 0x01
    f940:	01 96       	adiw	r24, 0x01	; 1
    f942:	80 93 45 46 	sts	0x4645, r24	; 0x804645 <current_measure_channel>
    f946:	90 93 46 46 	sts	0x4646, r25	; 0x804646 <current_measure_channel+0x1>
    f94a:	0e 94 e5 76 	call	0xedca	; 0xedca <select_next_channel_to_measure>
    f94e:	81 11       	cpse	r24, r1
    f950:	09 c0       	rjmp	.+18     	; 0xf964 <qtm_avr_da_ptc_handler_eoc+0x58>
    f952:	84 e0       	ldi	r24, 0x04	; 4
    f954:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f958:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    f95c:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    f960:	0c 94 18 77 	jmp	0xee30	; 0xee30 <qtm_measure_node>
    f964:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    f968:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    f96c:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    f970:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    f974:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    f978:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    f97c:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    f980:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    f984:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    f988:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    f98c:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    f990:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    f994:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    f998:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    f99c:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    f9a0:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    f9a4:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    f9a8:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    f9ac:	e0 91 42 46 	lds	r30, 0x4642	; 0x804642 <ptc_seq_measure_complete_pointer>
    f9b0:	f0 91 43 46 	lds	r31, 0x4643	; 0x804643 <ptc_seq_measure_complete_pointer+0x1>
    f9b4:	09 94       	ijmp
    f9b6:	0c 94 40 7c 	jmp	0xf880	; 0xf880 <qtm_avr_da_ptc_handler_wcomp>

0000f9ba <__mulsi3>:
    f9ba:	db 01       	movw	r26, r22
    f9bc:	8f 93       	push	r24
    f9be:	9f 93       	push	r25
    f9c0:	0e 94 27 7d 	call	0xfa4e	; 0xfa4e <__muluhisi3>
    f9c4:	bf 91       	pop	r27
    f9c6:	af 91       	pop	r26
    f9c8:	a2 9f       	mul	r26, r18
    f9ca:	80 0d       	add	r24, r0
    f9cc:	91 1d       	adc	r25, r1
    f9ce:	a3 9f       	mul	r26, r19
    f9d0:	90 0d       	add	r25, r0
    f9d2:	b2 9f       	mul	r27, r18
    f9d4:	90 0d       	add	r25, r0
    f9d6:	11 24       	eor	r1, r1
    f9d8:	08 95       	ret

0000f9da <__udivmodsi4>:
    f9da:	a1 e2       	ldi	r26, 0x21	; 33
    f9dc:	1a 2e       	mov	r1, r26
    f9de:	aa 1b       	sub	r26, r26
    f9e0:	bb 1b       	sub	r27, r27
    f9e2:	fd 01       	movw	r30, r26
    f9e4:	0d c0       	rjmp	.+26     	; 0xfa00 <__udivmodsi4_ep>

0000f9e6 <__udivmodsi4_loop>:
    f9e6:	aa 1f       	adc	r26, r26
    f9e8:	bb 1f       	adc	r27, r27
    f9ea:	ee 1f       	adc	r30, r30
    f9ec:	ff 1f       	adc	r31, r31
    f9ee:	a2 17       	cp	r26, r18
    f9f0:	b3 07       	cpc	r27, r19
    f9f2:	e4 07       	cpc	r30, r20
    f9f4:	f5 07       	cpc	r31, r21
    f9f6:	20 f0       	brcs	.+8      	; 0xfa00 <__udivmodsi4_ep>
    f9f8:	a2 1b       	sub	r26, r18
    f9fa:	b3 0b       	sbc	r27, r19
    f9fc:	e4 0b       	sbc	r30, r20
    f9fe:	f5 0b       	sbc	r31, r21

0000fa00 <__udivmodsi4_ep>:
    fa00:	66 1f       	adc	r22, r22
    fa02:	77 1f       	adc	r23, r23
    fa04:	88 1f       	adc	r24, r24
    fa06:	99 1f       	adc	r25, r25
    fa08:	1a 94       	dec	r1
    fa0a:	69 f7       	brne	.-38     	; 0xf9e6 <__udivmodsi4_loop>
    fa0c:	60 95       	com	r22
    fa0e:	70 95       	com	r23
    fa10:	80 95       	com	r24
    fa12:	90 95       	com	r25
    fa14:	9b 01       	movw	r18, r22
    fa16:	ac 01       	movw	r20, r24
    fa18:	bd 01       	movw	r22, r26
    fa1a:	cf 01       	movw	r24, r30
    fa1c:	08 95       	ret

0000fa1e <__tablejump2__>:
    fa1e:	ee 0f       	add	r30, r30
    fa20:	ff 1f       	adc	r31, r31
    fa22:	00 24       	eor	r0, r0
    fa24:	00 1c       	adc	r0, r0
    fa26:	0b be       	out	0x3b, r0	; 59
    fa28:	07 90       	elpm	r0, Z+
    fa2a:	f6 91       	elpm	r31, Z
    fa2c:	e0 2d       	mov	r30, r0
    fa2e:	09 94       	ijmp

0000fa30 <__umulhisi3>:
    fa30:	a2 9f       	mul	r26, r18
    fa32:	b0 01       	movw	r22, r0
    fa34:	b3 9f       	mul	r27, r19
    fa36:	c0 01       	movw	r24, r0
    fa38:	a3 9f       	mul	r26, r19
    fa3a:	70 0d       	add	r23, r0
    fa3c:	81 1d       	adc	r24, r1
    fa3e:	11 24       	eor	r1, r1
    fa40:	91 1d       	adc	r25, r1
    fa42:	b2 9f       	mul	r27, r18
    fa44:	70 0d       	add	r23, r0
    fa46:	81 1d       	adc	r24, r1
    fa48:	11 24       	eor	r1, r1
    fa4a:	91 1d       	adc	r25, r1
    fa4c:	08 95       	ret

0000fa4e <__muluhisi3>:
    fa4e:	0e 94 18 7d 	call	0xfa30	; 0xfa30 <__umulhisi3>
    fa52:	a5 9f       	mul	r26, r21
    fa54:	90 0d       	add	r25, r0
    fa56:	b4 9f       	mul	r27, r20
    fa58:	90 0d       	add	r25, r0
    fa5a:	a4 9f       	mul	r26, r20
    fa5c:	80 0d       	add	r24, r0
    fa5e:	91 1d       	adc	r25, r1
    fa60:	11 24       	eor	r1, r1
    fa62:	08 95       	ret

0000fa64 <__ashrdi3>:
    fa64:	97 fb       	bst	r25, 7
    fa66:	10 f8       	bld	r1, 0

0000fa68 <__lshrdi3>:
    fa68:	16 94       	lsr	r1
    fa6a:	00 08       	sbc	r0, r0
    fa6c:	0f 93       	push	r16
    fa6e:	08 30       	cpi	r16, 0x08	; 8
    fa70:	98 f0       	brcs	.+38     	; 0xfa98 <__lshrdi3+0x30>
    fa72:	08 50       	subi	r16, 0x08	; 8
    fa74:	23 2f       	mov	r18, r19
    fa76:	34 2f       	mov	r19, r20
    fa78:	45 2f       	mov	r20, r21
    fa7a:	56 2f       	mov	r21, r22
    fa7c:	67 2f       	mov	r22, r23
    fa7e:	78 2f       	mov	r23, r24
    fa80:	89 2f       	mov	r24, r25
    fa82:	90 2d       	mov	r25, r0
    fa84:	f4 cf       	rjmp	.-24     	; 0xfa6e <__lshrdi3+0x6>
    fa86:	05 94       	asr	r0
    fa88:	97 95       	ror	r25
    fa8a:	87 95       	ror	r24
    fa8c:	77 95       	ror	r23
    fa8e:	67 95       	ror	r22
    fa90:	57 95       	ror	r21
    fa92:	47 95       	ror	r20
    fa94:	37 95       	ror	r19
    fa96:	27 95       	ror	r18
    fa98:	0a 95       	dec	r16
    fa9a:	aa f7       	brpl	.-22     	; 0xfa86 <__lshrdi3+0x1e>
    fa9c:	0f 91       	pop	r16
    fa9e:	08 95       	ret

0000faa0 <__cmpdi2_s8>:
    faa0:	00 24       	eor	r0, r0
    faa2:	a7 fd       	sbrc	r26, 7
    faa4:	00 94       	com	r0
    faa6:	2a 17       	cp	r18, r26
    faa8:	30 05       	cpc	r19, r0
    faaa:	40 05       	cpc	r20, r0
    faac:	50 05       	cpc	r21, r0
    faae:	60 05       	cpc	r22, r0
    fab0:	70 05       	cpc	r23, r0
    fab2:	80 05       	cpc	r24, r0
    fab4:	90 05       	cpc	r25, r0
    fab6:	08 95       	ret

0000fab8 <malloc>:
    fab8:	0f 93       	push	r16
    faba:	1f 93       	push	r17
    fabc:	cf 93       	push	r28
    fabe:	df 93       	push	r29
    fac0:	82 30       	cpi	r24, 0x02	; 2
    fac2:	91 05       	cpc	r25, r1
    fac4:	10 f4       	brcc	.+4      	; 0xfaca <malloc+0x12>
    fac6:	82 e0       	ldi	r24, 0x02	; 2
    fac8:	90 e0       	ldi	r25, 0x00	; 0
    faca:	e0 91 4f 47 	lds	r30, 0x474F	; 0x80474f <__flp>
    face:	f0 91 50 47 	lds	r31, 0x4750	; 0x804750 <__flp+0x1>
    fad2:	20 e0       	ldi	r18, 0x00	; 0
    fad4:	30 e0       	ldi	r19, 0x00	; 0
    fad6:	a0 e0       	ldi	r26, 0x00	; 0
    fad8:	b0 e0       	ldi	r27, 0x00	; 0
    fada:	30 97       	sbiw	r30, 0x00	; 0
    fadc:	19 f1       	breq	.+70     	; 0xfb24 <malloc+0x6c>
    fade:	40 81       	ld	r20, Z
    fae0:	51 81       	ldd	r21, Z+1	; 0x01
    fae2:	02 81       	ldd	r16, Z+2	; 0x02
    fae4:	13 81       	ldd	r17, Z+3	; 0x03
    fae6:	48 17       	cp	r20, r24
    fae8:	59 07       	cpc	r21, r25
    faea:	c8 f0       	brcs	.+50     	; 0xfb1e <malloc+0x66>
    faec:	84 17       	cp	r24, r20
    faee:	95 07       	cpc	r25, r21
    faf0:	69 f4       	brne	.+26     	; 0xfb0c <malloc+0x54>
    faf2:	10 97       	sbiw	r26, 0x00	; 0
    faf4:	31 f0       	breq	.+12     	; 0xfb02 <malloc+0x4a>
    faf6:	12 96       	adiw	r26, 0x02	; 2
    faf8:	0c 93       	st	X, r16
    fafa:	12 97       	sbiw	r26, 0x02	; 2
    fafc:	13 96       	adiw	r26, 0x03	; 3
    fafe:	1c 93       	st	X, r17
    fb00:	27 c0       	rjmp	.+78     	; 0xfb50 <malloc+0x98>
    fb02:	00 93 4f 47 	sts	0x474F, r16	; 0x80474f <__flp>
    fb06:	10 93 50 47 	sts	0x4750, r17	; 0x804750 <__flp+0x1>
    fb0a:	22 c0       	rjmp	.+68     	; 0xfb50 <malloc+0x98>
    fb0c:	21 15       	cp	r18, r1
    fb0e:	31 05       	cpc	r19, r1
    fb10:	19 f0       	breq	.+6      	; 0xfb18 <malloc+0x60>
    fb12:	42 17       	cp	r20, r18
    fb14:	53 07       	cpc	r21, r19
    fb16:	18 f4       	brcc	.+6      	; 0xfb1e <malloc+0x66>
    fb18:	9a 01       	movw	r18, r20
    fb1a:	bd 01       	movw	r22, r26
    fb1c:	ef 01       	movw	r28, r30
    fb1e:	df 01       	movw	r26, r30
    fb20:	f8 01       	movw	r30, r16
    fb22:	db cf       	rjmp	.-74     	; 0xfada <malloc+0x22>
    fb24:	21 15       	cp	r18, r1
    fb26:	31 05       	cpc	r19, r1
    fb28:	f9 f0       	breq	.+62     	; 0xfb68 <malloc+0xb0>
    fb2a:	28 1b       	sub	r18, r24
    fb2c:	39 0b       	sbc	r19, r25
    fb2e:	24 30       	cpi	r18, 0x04	; 4
    fb30:	31 05       	cpc	r19, r1
    fb32:	80 f4       	brcc	.+32     	; 0xfb54 <malloc+0x9c>
    fb34:	8a 81       	ldd	r24, Y+2	; 0x02
    fb36:	9b 81       	ldd	r25, Y+3	; 0x03
    fb38:	61 15       	cp	r22, r1
    fb3a:	71 05       	cpc	r23, r1
    fb3c:	21 f0       	breq	.+8      	; 0xfb46 <malloc+0x8e>
    fb3e:	fb 01       	movw	r30, r22
    fb40:	82 83       	std	Z+2, r24	; 0x02
    fb42:	93 83       	std	Z+3, r25	; 0x03
    fb44:	04 c0       	rjmp	.+8      	; 0xfb4e <malloc+0x96>
    fb46:	80 93 4f 47 	sts	0x474F, r24	; 0x80474f <__flp>
    fb4a:	90 93 50 47 	sts	0x4750, r25	; 0x804750 <__flp+0x1>
    fb4e:	fe 01       	movw	r30, r28
    fb50:	32 96       	adiw	r30, 0x02	; 2
    fb52:	44 c0       	rjmp	.+136    	; 0xfbdc <malloc+0x124>
    fb54:	fe 01       	movw	r30, r28
    fb56:	e2 0f       	add	r30, r18
    fb58:	f3 1f       	adc	r31, r19
    fb5a:	81 93       	st	Z+, r24
    fb5c:	91 93       	st	Z+, r25
    fb5e:	22 50       	subi	r18, 0x02	; 2
    fb60:	31 09       	sbc	r19, r1
    fb62:	28 83       	st	Y, r18
    fb64:	39 83       	std	Y+1, r19	; 0x01
    fb66:	3a c0       	rjmp	.+116    	; 0xfbdc <malloc+0x124>
    fb68:	20 91 4d 47 	lds	r18, 0x474D	; 0x80474d <__brkval>
    fb6c:	30 91 4e 47 	lds	r19, 0x474E	; 0x80474e <__brkval+0x1>
    fb70:	23 2b       	or	r18, r19
    fb72:	41 f4       	brne	.+16     	; 0xfb84 <malloc+0xcc>
    fb74:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    fb78:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    fb7c:	20 93 4d 47 	sts	0x474D, r18	; 0x80474d <__brkval>
    fb80:	30 93 4e 47 	sts	0x474E, r19	; 0x80474e <__brkval+0x1>
    fb84:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    fb88:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    fb8c:	21 15       	cp	r18, r1
    fb8e:	31 05       	cpc	r19, r1
    fb90:	41 f4       	brne	.+16     	; 0xfba2 <malloc+0xea>
    fb92:	2d b7       	in	r18, 0x3d	; 61
    fb94:	3e b7       	in	r19, 0x3e	; 62
    fb96:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    fb9a:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    fb9e:	24 1b       	sub	r18, r20
    fba0:	35 0b       	sbc	r19, r21
    fba2:	e0 91 4d 47 	lds	r30, 0x474D	; 0x80474d <__brkval>
    fba6:	f0 91 4e 47 	lds	r31, 0x474E	; 0x80474e <__brkval+0x1>
    fbaa:	e2 17       	cp	r30, r18
    fbac:	f3 07       	cpc	r31, r19
    fbae:	a0 f4       	brcc	.+40     	; 0xfbd8 <malloc+0x120>
    fbb0:	2e 1b       	sub	r18, r30
    fbb2:	3f 0b       	sbc	r19, r31
    fbb4:	28 17       	cp	r18, r24
    fbb6:	39 07       	cpc	r19, r25
    fbb8:	78 f0       	brcs	.+30     	; 0xfbd8 <malloc+0x120>
    fbba:	ac 01       	movw	r20, r24
    fbbc:	4e 5f       	subi	r20, 0xFE	; 254
    fbbe:	5f 4f       	sbci	r21, 0xFF	; 255
    fbc0:	24 17       	cp	r18, r20
    fbc2:	35 07       	cpc	r19, r21
    fbc4:	48 f0       	brcs	.+18     	; 0xfbd8 <malloc+0x120>
    fbc6:	4e 0f       	add	r20, r30
    fbc8:	5f 1f       	adc	r21, r31
    fbca:	40 93 4d 47 	sts	0x474D, r20	; 0x80474d <__brkval>
    fbce:	50 93 4e 47 	sts	0x474E, r21	; 0x80474e <__brkval+0x1>
    fbd2:	81 93       	st	Z+, r24
    fbd4:	91 93       	st	Z+, r25
    fbd6:	02 c0       	rjmp	.+4      	; 0xfbdc <malloc+0x124>
    fbd8:	e0 e0       	ldi	r30, 0x00	; 0
    fbda:	f0 e0       	ldi	r31, 0x00	; 0
    fbdc:	cf 01       	movw	r24, r30
    fbde:	df 91       	pop	r29
    fbe0:	cf 91       	pop	r28
    fbe2:	1f 91       	pop	r17
    fbe4:	0f 91       	pop	r16
    fbe6:	08 95       	ret

0000fbe8 <free>:
    fbe8:	cf 93       	push	r28
    fbea:	df 93       	push	r29
    fbec:	00 97       	sbiw	r24, 0x00	; 0
    fbee:	09 f4       	brne	.+2      	; 0xfbf2 <free+0xa>
    fbf0:	81 c0       	rjmp	.+258    	; 0xfcf4 <free+0x10c>
    fbf2:	fc 01       	movw	r30, r24
    fbf4:	32 97       	sbiw	r30, 0x02	; 2
    fbf6:	12 82       	std	Z+2, r1	; 0x02
    fbf8:	13 82       	std	Z+3, r1	; 0x03
    fbfa:	a0 91 4f 47 	lds	r26, 0x474F	; 0x80474f <__flp>
    fbfe:	b0 91 50 47 	lds	r27, 0x4750	; 0x804750 <__flp+0x1>
    fc02:	10 97       	sbiw	r26, 0x00	; 0
    fc04:	81 f4       	brne	.+32     	; 0xfc26 <free+0x3e>
    fc06:	20 81       	ld	r18, Z
    fc08:	31 81       	ldd	r19, Z+1	; 0x01
    fc0a:	82 0f       	add	r24, r18
    fc0c:	93 1f       	adc	r25, r19
    fc0e:	20 91 4d 47 	lds	r18, 0x474D	; 0x80474d <__brkval>
    fc12:	30 91 4e 47 	lds	r19, 0x474E	; 0x80474e <__brkval+0x1>
    fc16:	28 17       	cp	r18, r24
    fc18:	39 07       	cpc	r19, r25
    fc1a:	51 f5       	brne	.+84     	; 0xfc70 <free+0x88>
    fc1c:	e0 93 4d 47 	sts	0x474D, r30	; 0x80474d <__brkval>
    fc20:	f0 93 4e 47 	sts	0x474E, r31	; 0x80474e <__brkval+0x1>
    fc24:	67 c0       	rjmp	.+206    	; 0xfcf4 <free+0x10c>
    fc26:	ed 01       	movw	r28, r26
    fc28:	20 e0       	ldi	r18, 0x00	; 0
    fc2a:	30 e0       	ldi	r19, 0x00	; 0
    fc2c:	ce 17       	cp	r28, r30
    fc2e:	df 07       	cpc	r29, r31
    fc30:	40 f4       	brcc	.+16     	; 0xfc42 <free+0x5a>
    fc32:	4a 81       	ldd	r20, Y+2	; 0x02
    fc34:	5b 81       	ldd	r21, Y+3	; 0x03
    fc36:	9e 01       	movw	r18, r28
    fc38:	41 15       	cp	r20, r1
    fc3a:	51 05       	cpc	r21, r1
    fc3c:	f1 f0       	breq	.+60     	; 0xfc7a <free+0x92>
    fc3e:	ea 01       	movw	r28, r20
    fc40:	f5 cf       	rjmp	.-22     	; 0xfc2c <free+0x44>
    fc42:	c2 83       	std	Z+2, r28	; 0x02
    fc44:	d3 83       	std	Z+3, r29	; 0x03
    fc46:	40 81       	ld	r20, Z
    fc48:	51 81       	ldd	r21, Z+1	; 0x01
    fc4a:	84 0f       	add	r24, r20
    fc4c:	95 1f       	adc	r25, r21
    fc4e:	c8 17       	cp	r28, r24
    fc50:	d9 07       	cpc	r29, r25
    fc52:	59 f4       	brne	.+22     	; 0xfc6a <free+0x82>
    fc54:	88 81       	ld	r24, Y
    fc56:	99 81       	ldd	r25, Y+1	; 0x01
    fc58:	84 0f       	add	r24, r20
    fc5a:	95 1f       	adc	r25, r21
    fc5c:	02 96       	adiw	r24, 0x02	; 2
    fc5e:	80 83       	st	Z, r24
    fc60:	91 83       	std	Z+1, r25	; 0x01
    fc62:	8a 81       	ldd	r24, Y+2	; 0x02
    fc64:	9b 81       	ldd	r25, Y+3	; 0x03
    fc66:	82 83       	std	Z+2, r24	; 0x02
    fc68:	93 83       	std	Z+3, r25	; 0x03
    fc6a:	21 15       	cp	r18, r1
    fc6c:	31 05       	cpc	r19, r1
    fc6e:	29 f4       	brne	.+10     	; 0xfc7a <free+0x92>
    fc70:	e0 93 4f 47 	sts	0x474F, r30	; 0x80474f <__flp>
    fc74:	f0 93 50 47 	sts	0x4750, r31	; 0x804750 <__flp+0x1>
    fc78:	3d c0       	rjmp	.+122    	; 0xfcf4 <free+0x10c>
    fc7a:	e9 01       	movw	r28, r18
    fc7c:	ea 83       	std	Y+2, r30	; 0x02
    fc7e:	fb 83       	std	Y+3, r31	; 0x03
    fc80:	49 91       	ld	r20, Y+
    fc82:	59 91       	ld	r21, Y+
    fc84:	c4 0f       	add	r28, r20
    fc86:	d5 1f       	adc	r29, r21
    fc88:	ec 17       	cp	r30, r28
    fc8a:	fd 07       	cpc	r31, r29
    fc8c:	61 f4       	brne	.+24     	; 0xfca6 <free+0xbe>
    fc8e:	80 81       	ld	r24, Z
    fc90:	91 81       	ldd	r25, Z+1	; 0x01
    fc92:	84 0f       	add	r24, r20
    fc94:	95 1f       	adc	r25, r21
    fc96:	02 96       	adiw	r24, 0x02	; 2
    fc98:	e9 01       	movw	r28, r18
    fc9a:	88 83       	st	Y, r24
    fc9c:	99 83       	std	Y+1, r25	; 0x01
    fc9e:	82 81       	ldd	r24, Z+2	; 0x02
    fca0:	93 81       	ldd	r25, Z+3	; 0x03
    fca2:	8a 83       	std	Y+2, r24	; 0x02
    fca4:	9b 83       	std	Y+3, r25	; 0x03
    fca6:	e0 e0       	ldi	r30, 0x00	; 0
    fca8:	f0 e0       	ldi	r31, 0x00	; 0
    fcaa:	12 96       	adiw	r26, 0x02	; 2
    fcac:	8d 91       	ld	r24, X+
    fcae:	9c 91       	ld	r25, X
    fcb0:	13 97       	sbiw	r26, 0x03	; 3
    fcb2:	00 97       	sbiw	r24, 0x00	; 0
    fcb4:	19 f0       	breq	.+6      	; 0xfcbc <free+0xd4>
    fcb6:	fd 01       	movw	r30, r26
    fcb8:	dc 01       	movw	r26, r24
    fcba:	f7 cf       	rjmp	.-18     	; 0xfcaa <free+0xc2>
    fcbc:	8d 91       	ld	r24, X+
    fcbe:	9c 91       	ld	r25, X
    fcc0:	11 97       	sbiw	r26, 0x01	; 1
    fcc2:	9d 01       	movw	r18, r26
    fcc4:	2e 5f       	subi	r18, 0xFE	; 254
    fcc6:	3f 4f       	sbci	r19, 0xFF	; 255
    fcc8:	82 0f       	add	r24, r18
    fcca:	93 1f       	adc	r25, r19
    fccc:	20 91 4d 47 	lds	r18, 0x474D	; 0x80474d <__brkval>
    fcd0:	30 91 4e 47 	lds	r19, 0x474E	; 0x80474e <__brkval+0x1>
    fcd4:	28 17       	cp	r18, r24
    fcd6:	39 07       	cpc	r19, r25
    fcd8:	69 f4       	brne	.+26     	; 0xfcf4 <free+0x10c>
    fcda:	30 97       	sbiw	r30, 0x00	; 0
    fcdc:	29 f4       	brne	.+10     	; 0xfce8 <free+0x100>
    fcde:	10 92 4f 47 	sts	0x474F, r1	; 0x80474f <__flp>
    fce2:	10 92 50 47 	sts	0x4750, r1	; 0x804750 <__flp+0x1>
    fce6:	02 c0       	rjmp	.+4      	; 0xfcec <free+0x104>
    fce8:	12 82       	std	Z+2, r1	; 0x02
    fcea:	13 82       	std	Z+3, r1	; 0x03
    fcec:	a0 93 4d 47 	sts	0x474D, r26	; 0x80474d <__brkval>
    fcf0:	b0 93 4e 47 	sts	0x474E, r27	; 0x80474e <__brkval+0x1>
    fcf4:	df 91       	pop	r29
    fcf6:	cf 91       	pop	r28
    fcf8:	08 95       	ret

0000fcfa <memset>:
    fcfa:	dc 01       	movw	r26, r24
    fcfc:	01 c0       	rjmp	.+2      	; 0xfd00 <memset+0x6>
    fcfe:	6d 93       	st	X+, r22
    fd00:	41 50       	subi	r20, 0x01	; 1
    fd02:	50 40       	sbci	r21, 0x00	; 0
    fd04:	e0 f7       	brcc	.-8      	; 0xfcfe <memset+0x4>
    fd06:	08 95       	ret

0000fd08 <_exit>:
    fd08:	f8 94       	cli

0000fd0a <__stop_program>:
    fd0a:	ff cf       	rjmp	.-2      	; 0xfd0a <__stop_program>
