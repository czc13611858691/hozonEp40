
microchip_studio_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000041c  00806000  000078e0  00007974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000078e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ec  0080641c  0080641c  00007d90  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00007d90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a40  00000000  00000000  00007e30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017f94  00000000  00000000  00008870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006982  00000000  00000000  00020804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007c4e  00000000  00000000  00027186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a6c  00000000  00000000  0002edd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007c90  00000000  00000000  00030840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008a6a  00000000  00000000  000384d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e8  00000000  00000000  00040f3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_3>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_12>
      34:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_13>
      38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      58:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      5c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      60:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <__vector_24>
      64:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      68:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      6c:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__vector_27>
      70:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      74:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      78:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      7c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      80:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      84:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      88:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      8c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      90:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      94:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      98:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      9c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      a0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      a4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      a8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      ac:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      b0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      b4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      b8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      bc:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      c0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      c4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      c8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      cc:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      d0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      d4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      d8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      dc:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_55>
      e0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      e4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      e8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      ec:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      f0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      f4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      f8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      fc:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
     100:	66 02       	muls	r22, r22
     102:	98 02       	muls	r25, r24
     104:	cd 02       	muls	r28, r29
     106:	02 03       	mulsu	r16, r18
     108:	37 03       	mulsu	r19, r23
     10a:	69 03       	fmul	r22, r17
     10c:	9e 03       	fmulsu	r17, r22
     10e:	d3 03       	fmuls	r21, r19
     110:	08 04       	cpc	r0, r8
     112:	3d 04       	cpc	r3, r13
     114:	e9 1d       	adc	r30, r9
     116:	ff 1d       	adc	r31, r15
     118:	e3 1d       	adc	r30, r3
     11a:	8a 1d       	adc	r24, r10
     11c:	ff 1d       	adc	r31, r15
     11e:	cd 1d       	adc	r28, r13
     120:	85 1d       	adc	r24, r5
     122:	a9 1d       	adc	r26, r9
     124:	c7 1d       	adc	r28, r7
     126:	c1 1d       	adc	r28, r1
     128:	bb 1d       	adc	r27, r11
     12a:	af 1d       	adc	r26, r15
     12c:	b5 1d       	adc	r27, r5
     12e:	b3 28       	or	r11, r3
     130:	b7 28       	or	r11, r7
     132:	db 28       	or	r13, r11
     134:	df 28       	or	r13, r15
     136:	e3 28       	or	r14, r3
     138:	e8 28       	or	r14, r8
     13a:	ec 28       	or	r14, r12
     13c:	90 28       	or	r9, r0

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	cd bf       	out	0x3d, r28	; 61
     146:	df e7       	ldi	r29, 0x7F	; 127
     148:	de bf       	out	0x3e, r29	; 62

0000014a <__do_copy_data>:
     14a:	14 e6       	ldi	r17, 0x64	; 100
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b0 e6       	ldi	r27, 0x60	; 96
     150:	e0 ee       	ldi	r30, 0xE0	; 224
     152:	f8 e7       	ldi	r31, 0x78	; 120
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x10>
     156:	05 90       	lpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	ac 31       	cpi	r26, 0x1C	; 28
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0xc>

00000160 <__do_clear_bss>:
     160:	29 e6       	ldi	r18, 0x69	; 105
     162:	ac e1       	ldi	r26, 0x1C	; 28
     164:	b4 e6       	ldi	r27, 0x64	; 100
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a8 30       	cpi	r26, 0x08	; 8
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>
     170:	0e 94 b7 08 	call	0x116e	; 0x116e <main>
     174:	0c 94 6e 3c 	jmp	0x78dc	; 0x78dc <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
     17c:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <system_init>

	touch_init();
     180:	0e 94 f6 29 	call	0x53ec	; 0x53ec <touch_init>
     184:	08 95       	ret

00000186 <__vector_55>:


/* lin RX接收到一个完整数据产生的中断 */
ISR(USART4_RXC_vect)

{
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	2f 93       	push	r18
     192:	3f 93       	push	r19
     194:	4f 93       	push	r20
     196:	5f 93       	push	r21
     198:	6f 93       	push	r22
     19a:	7f 93       	push	r23
     19c:	8f 93       	push	r24
     19e:	9f 93       	push	r25
     1a0:	af 93       	push	r26
     1a2:	bf 93       	push	r27
     1a4:	ef 93       	push	r30
     1a6:	ff 93       	push	r31
   uint8_t index;
   index = (USART4.STATUS & USART_ISFIF_bm) >> USART_ISFIF_bp;
     1a8:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7f0884>
     1ac:	88 70       	andi	r24, 0x08	; 8
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	95 95       	asr	r25
     1b2:	87 95       	ror	r24
     1b4:	95 95       	asr	r25
     1b6:	87 95       	ror	r24
     1b8:	95 95       	asr	r25
     1ba:	87 95       	ror	r24
   if (index == 1)
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	61 f4       	brne	.+24     	; 0x1d8 <__vector_55+0x52>
   {
      LIN_DRV_IRQHandler(0, -1);
     1c0:	4f ef       	ldi	r20, 0xFF	; 255
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	cb 01       	movw	r24, r22
     1c8:	0e 94 c7 1b 	call	0x378e	; 0x378e <LIN_DRV_IRQHandler>
      USART4.STATUS |= USART_ISFIF_bm;
     1cc:	e0 e8       	ldi	r30, 0x80	; 128
     1ce:	f8 e0       	ldi	r31, 0x08	; 8
     1d0:	84 81       	ldd	r24, Z+4	; 0x04
     1d2:	88 60       	ori	r24, 0x08	; 8
     1d4:	84 83       	std	Z+4, r24	; 0x04
      return;
     1d6:	1b c0       	rjmp	.+54     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
   }

   index = (USART4.RXDATAH & USART_DATA8_bm) >> USART_DATA8_bp;
     1d8:	80 91 81 08 	lds	r24, 0x0881	; 0x800881 <__TEXT_REGION_LENGTH__+0x7f0881>
   if (index == 0) /* is pid */
     1dc:	80 fd       	sbrc	r24, 0
     1de:	0c c0       	rjmp	.+24     	; 0x1f8 <__vector_55+0x72>
   {
      LIN_DRV_IRQHandler(0, 1);
     1e0:	41 e0       	ldi	r20, 0x01	; 1
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	cb 01       	movw	r24, r22
     1e8:	0e 94 c7 1b 	call	0x378e	; 0x378e <LIN_DRV_IRQHandler>
      USART4.STATUS |= USART_ISFIF_bm;
     1ec:	e0 e8       	ldi	r30, 0x80	; 128
     1ee:	f8 e0       	ldi	r31, 0x08	; 8
     1f0:	84 81       	ldd	r24, Z+4	; 0x04
     1f2:	88 60       	ori	r24, 0x08	; 8
     1f4:	84 83       	std	Z+4, r24	; 0x04
      return;
     1f6:	0b c0       	rjmp	.+22     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
   }

   LIN_DRV_IRQHandler(0, 0);
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	cb 01       	movw	r24, r22
     200:	0e 94 c7 1b 	call	0x378e	; 0x378e <LIN_DRV_IRQHandler>
   USART4.STATUS |= USART_ISFIF_bm;
     204:	e0 e8       	ldi	r30, 0x80	; 128
     206:	f8 e0       	ldi	r31, 0x08	; 8
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	88 60       	ori	r24, 0x08	; 8
     20c:	84 83       	std	Z+4, r24	; 0x04
}
     20e:	ff 91       	pop	r31
     210:	ef 91       	pop	r30
     212:	bf 91       	pop	r27
     214:	af 91       	pop	r26
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	7f 91       	pop	r23
     21c:	6f 91       	pop	r22
     21e:	5f 91       	pop	r21
     220:	4f 91       	pop	r20
     222:	3f 91       	pop	r19
     224:	2f 91       	pop	r18
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <__vector_3>:

/* RTC时钟定时器中断用于触摸时基 */
ISR(RTC_CNT_vect)
{
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	2f 93       	push	r18
     23c:	3f 93       	push	r19
     23e:	4f 93       	push	r20
     240:	5f 93       	push	r21
     242:	6f 93       	push	r22
     244:	7f 93       	push	r23
     246:	8f 93       	push	r24
     248:	9f 93       	push	r25
     24a:	af 93       	push	r26
     24c:	bf 93       	push	r27
     24e:	ef 93       	push	r30
     250:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
     252:	0e 94 3b 2a 	call	0x5476	; 0x5476 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f0143>
}
     25c:	ff 91       	pop	r31
     25e:	ef 91       	pop	r30
     260:	bf 91       	pop	r27
     262:	af 91       	pop	r26
     264:	9f 91       	pop	r25
     266:	8f 91       	pop	r24
     268:	7f 91       	pop	r23
     26a:	6f 91       	pop	r22
     26c:	5f 91       	pop	r21
     26e:	4f 91       	pop	r20
     270:	3f 91       	pop	r19
     272:	2f 91       	pop	r18
     274:	0f 90       	pop	r0
     276:	0f be       	out	0x3f, r0	; 63
     278:	0f 90       	pop	r0
     27a:	1f 90       	pop	r1
     27c:	18 95       	reti

0000027e <__vector_12>:

/* 软件时基定时器中断 */
ISR(TCB0_INT_vect)
{
     27e:	1f 92       	push	r1
     280:	0f 92       	push	r0
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	0f 92       	push	r0
     286:	11 24       	eor	r1, r1
     288:	2f 93       	push	r18
     28a:	3f 93       	push	r19
     28c:	4f 93       	push	r20
     28e:	5f 93       	push	r21
     290:	6f 93       	push	r22
     292:	7f 93       	push	r23
     294:	8f 93       	push	r24
     296:	9f 93       	push	r25
     298:	af 93       	push	r26
     29a:	bf 93       	push	r27
     29c:	ef 93       	push	r30
     29e:	ff 93       	push	r31
	lin_lld_timeout_service(0);
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 3c 20 	call	0x4078	; 0x4078 <lin_lld_timeout_service>
	g_soft_timer_ticks++;
     2a6:	80 91 62 67 	lds	r24, 0x6762	; 0x806762 <g_soft_timer_ticks>
     2aa:	90 91 63 67 	lds	r25, 0x6763	; 0x806763 <g_soft_timer_ticks+0x1>
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	80 93 62 67 	sts	0x6762, r24	; 0x806762 <g_soft_timer_ticks>
     2b4:	90 93 63 67 	sts	0x6763, r25	; 0x806763 <g_soft_timer_ticks+0x1>
	TCB0.INTFLAGS = TCB_CAPT_bm;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
}
     2be:	ff 91       	pop	r31
     2c0:	ef 91       	pop	r30
     2c2:	bf 91       	pop	r27
     2c4:	af 91       	pop	r26
     2c6:	9f 91       	pop	r25
     2c8:	8f 91       	pop	r24
     2ca:	7f 91       	pop	r23
     2cc:	6f 91       	pop	r22
     2ce:	5f 91       	pop	r21
     2d0:	4f 91       	pop	r20
     2d2:	3f 91       	pop	r19
     2d4:	2f 91       	pop	r18
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <soft_timer_sin_data_task>:
};
uint8_t sin_data_out_flg=0;

void soft_timer_sin_data_task(void)
{
	if(sin_data_out_flg==1)
     2e0:	80 91 1c 64 	lds	r24, 0x641C	; 0x80641c <__data_end>
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	01 f5       	brne	.+64     	; 0x328 <soft_timer_sin_data_task+0x48>
	{
		if(sin_data_index<(sizeof(sin_data)/sizeof(sin_data[0])))
     2e8:	80 91 1d 64 	lds	r24, 0x641D	; 0x80641d <sin_data_index>
     2ec:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <sin_data_index+0x1>
     2f0:	85 33       	cpi	r24, 0x35	; 53
     2f2:	91 05       	cpc	r25, r1
     2f4:	98 f4       	brcc	.+38     	; 0x31c <soft_timer_sin_data_task+0x3c>
		{
			DAC_0_set_output(sin_data[sin_data_index]);
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	fc 01       	movw	r30, r24
     2fc:	ea 5f       	subi	r30, 0xFA	; 250
     2fe:	ff 49       	sbci	r31, 0x9F	; 159
     300:	80 81       	ld	r24, Z
     302:	91 81       	ldd	r25, Z+1	; 0x01
     304:	0e 94 3b 2b 	call	0x5676	; 0x5676 <DAC_0_set_output>
			sin_data_index++;
     308:	80 91 1d 64 	lds	r24, 0x641D	; 0x80641d <sin_data_index>
     30c:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <sin_data_index+0x1>
     310:	01 96       	adiw	r24, 0x01	; 1
     312:	80 93 1d 64 	sts	0x641D, r24	; 0x80641d <sin_data_index>
     316:	90 93 1e 64 	sts	0x641E, r25	; 0x80641e <sin_data_index+0x1>
     31a:	08 95       	ret
		}else{
			sin_data_index=0;
     31c:	10 92 1d 64 	sts	0x641D, r1	; 0x80641d <sin_data_index>
     320:	10 92 1e 64 	sts	0x641E, r1	; 0x80641e <sin_data_index+0x1>
			sin_data_out_flg=0;
     324:	10 92 1c 64 	sts	0x641C, r1	; 0x80641c <__data_end>
     328:	08 95       	ret

0000032a <__vector_13>:
		}
	}
}

ISR(TCB1_INT_vect)
{
     32a:	1f 92       	push	r1
     32c:	0f 92       	push	r0
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	0f 92       	push	r0
     332:	11 24       	eor	r1, r1
     334:	2f 93       	push	r18
     336:	3f 93       	push	r19
     338:	4f 93       	push	r20
     33a:	5f 93       	push	r21
     33c:	6f 93       	push	r22
     33e:	7f 93       	push	r23
     340:	8f 93       	push	r24
     342:	9f 93       	push	r25
     344:	af 93       	push	r26
     346:	bf 93       	push	r27
     348:	ef 93       	push	r30
     34a:	ff 93       	push	r31
	soft_timer_sin_data_task();
     34c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <soft_timer_sin_data_task>
	TCB1.INTFLAGS = TCB_CAPT_bm;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7f0b16>
}
     356:	ff 91       	pop	r31
     358:	ef 91       	pop	r30
     35a:	bf 91       	pop	r27
     35c:	af 91       	pop	r26
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	7f 91       	pop	r23
     364:	6f 91       	pop	r22
     366:	5f 91       	pop	r21
     368:	4f 91       	pop	r20
     36a:	3f 91       	pop	r19
     36c:	2f 91       	pop	r18
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <backlight_cb>:
/* 背光亮度控制回调函数注册 */
void backlight_cb(uint32_t duty);
backlight_cb_t g_backlight_cb = backlight_cb;
void backlight_cb(uint32_t duty)
{
    TCA0.SPLIT.HCMP0 = duty;
     378:	60 93 29 0a 	sts	0x0A29, r22	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f0a29>
     37c:	08 95       	ret

0000037e <rear_led_ctrl>:
    btn_rear_tick_task();
}

void rear_led_ctrl(uint8_t status)
{
    if (status == 1)
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	49 f4       	brne	.+18     	; 0x394 <rear_led_ctrl+0x16>
    {
        led_set_level(led_d5, 1);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
        led_set_level(led_d6, 0);
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
     392:	08 95       	ret
    }
    else
    {
        led_set_level(led_d5, 0);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
        led_set_level(led_d6, 1);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
     3a4:	08 95       	ret

000003a6 <window_lock_led_cb>:
    .signal_cb = window_lock_signal_cb,
};

void window_lock_led_cb(uint8_t status)
{
    if (status == 1)
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	49 f4       	brne	.+18     	; 0x3bc <window_lock_led_cb+0x16>
    {
        led_set_level(led_d7, 1);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	84 e0       	ldi	r24, 0x04	; 4
     3ae:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
        led_set_level(led_d8, 0);
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	85 e0       	ldi	r24, 0x05	; 5
     3b6:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
     3ba:	08 95       	ret
    }
    else
    {
        led_set_level(led_d7, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
        led_set_level(led_d8, 1);
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	85 e0       	ldi	r24, 0x05	; 5
     3c8:	0e 94 75 08 	call	0x10ea	; 0x10ea <led_set_level>
     3cc:	08 95       	ret

000003ce <soft_timer_rear_btn_task>:
    .rear_led_ctrl_cb = rear_led_ctrl,
};

/* REAR触摸检测定时器任务 */
void soft_timer_rear_btn_task(void)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
    static uint8_t btn_status_last = 0;
    static uint8_t btn_status = 0;
    uint8_t all_cap_status = 0;
    btn_status_last = btn_status;
     3d2:	80 91 24 64 	lds	r24, 0x6424	; 0x806424 <btn_status.6372>
     3d6:	80 93 23 64 	sts	0x6423, r24	; 0x806423 <btn_status_last.6371>
    btn_status = get_sensor_state(0) & 0x80;
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 4c 2a 	call	0x5498	; 0x5498 <get_sensor_state>
     3e2:	80 78       	andi	r24, 0x80	; 128
     3e4:	80 93 24 64 	sts	0x6424, r24	; 0x806424 <btn_status.6372>

    g_btn_rear.press_trig_flg = 1;
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	90 93 aa 60 	sts	0x60AA, r25	; 0x8060aa <g_btn_rear+0x3>

    if ((btn_status != 0) && (btn_status_last == 0))
     3ee:	88 23       	and	r24, r24
     3f0:	39 f0       	breq	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f2:	80 91 23 64 	lds	r24, 0x6423	; 0x806423 <btn_status_last.6371>
     3f6:	81 11       	cpse	r24, r1
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
    {
        g_btn_rear.cap_trig_flg = 1;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 a8 60 	sts	0x60A8, r24	; 0x8060a8 <g_btn_rear+0x1>

    for (uint8_t i = 0; i < 6; i++)
    {
        if ((get_sensor_state(i) & 0x80) != 0)
        {
            all_cap_status = 1;
     400:	c0 e0       	ldi	r28, 0x00	; 0
     402:	d0 e0       	ldi	r29, 0x00	; 0
     404:	08 c0       	rjmp	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        g_btn_rear.cap_trig_flg = 1;
    }

    for (uint8_t i = 0; i < 6; i++)
    {
        if ((get_sensor_state(i) & 0x80) != 0)
     406:	8c 2f       	mov	r24, r28
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 4c 2a 	call	0x5498	; 0x5498 <get_sensor_state>
     40e:	88 23       	and	r24, r24
     410:	0c f4       	brge	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        {
            all_cap_status = 1;
     412:	d1 e0       	ldi	r29, 0x01	; 1
    if ((btn_status != 0) && (btn_status_last == 0))
    {
        g_btn_rear.cap_trig_flg = 1;
    }

    for (uint8_t i = 0; i < 6; i++)
     414:	cf 5f       	subi	r28, 0xFF	; 255
     416:	c6 30       	cpi	r28, 0x06	; 6
     418:	b0 f3       	brcs	.-20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     41a:	c0 e0       	ldi	r28, 0x00	; 0
     41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
            all_cap_status = 1;
        }
    }
    for (uint8_t i = 0; i < 2; i++)
    {
        if (get_scroller_state(i) != 0)
     41e:	8c 2f       	mov	r24, r28
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <get_scroller_state>
     426:	81 11       	cpse	r24, r1
        {
            all_cap_status = 1;
     428:	d1 e0       	ldi	r29, 0x01	; 1
        if ((get_sensor_state(i) & 0x80) != 0)
        {
            all_cap_status = 1;
        }
    }
    for (uint8_t i = 0; i < 2; i++)
     42a:	cf 5f       	subi	r28, 0xFF	; 255
     42c:	c2 30       	cpi	r28, 0x02	; 2
     42e:	b8 f3       	brcs	.-18     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
        {
            all_cap_status = 1;
        }
    }

    g_btn_rear.all_cap_status = all_cap_status;
     430:	d0 93 a9 60 	sts	0x60A9, r29	; 0x8060a9 <g_btn_rear+0x2>

    btn_rear_tick_task();
     434:	0e 94 a4 06 	call	0xd48	; 0xd48 <btn_rear_tick_task>
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <soft_timer_window_lock_task>:
/* 窗锁止定时器按键触摸检测任务 */
void soft_timer_window_lock_task(void)
{
    static uint8_t btn_status_last = 0;
    static uint8_t btn_status = 0;
    btn_status_last = btn_status;
     43e:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <btn_status.6397>
     442:	80 93 21 64 	sts	0x6421, r24	; 0x806421 <btn_status_last.6396>
    btn_status = get_sensor_state(3) & 0x80;
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 4c 2a 	call	0x5498	; 0x5498 <get_sensor_state>
     44e:	80 78       	andi	r24, 0x80	; 128
     450:	80 93 22 64 	sts	0x6422, r24	; 0x806422 <btn_status.6397>

    g_window_lock.press_flg = 1;
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	90 93 a2 60 	sts	0x60A2, r25	; 0x8060a2 <g_window_lock+0x1>

    if ((btn_status != 0) && (btn_status_last == 0))
     45a:	88 23       	and	r24, r24
     45c:	39 f0       	breq	.+14     	; 0x46c <soft_timer_window_lock_task+0x2e>
     45e:	80 91 21 64 	lds	r24, 0x6421	; 0x806421 <btn_status_last.6396>
     462:	81 11       	cpse	r24, r1
     464:	03 c0       	rjmp	.+6      	; 0x46c <soft_timer_window_lock_task+0x2e>
    {
        g_window_lock.capsense_flg = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 a1 60 	sts	0x60A1, r24	; 0x8060a1 <g_window_lock>
    }

    window_lock_task();
     46c:	0e 94 ba 07 	call	0xf74	; 0xf74 <window_lock_task>
     470:	08 95       	ret

00000472 <soft_timer_lin_signal_update_task>:
    .backlight_brightness = 3,
};
/* lin信号更新到变量定时器任务 */
void soft_timer_lin_signal_update_task(void)
{
    if (l_u8_rd_LI0_DDCU_BDCS1_Backlight_brightness_fb() != 0)
     472:	80 91 dc 60 	lds	r24, 0x60DC	; 0x8060dc <g_lin_frame_data_buffer+0x4>
     476:	82 95       	swap	r24
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	59 f0       	breq	.+22     	; 0x492 <soft_timer_lin_signal_update_task+0x20>
    {
        g_lin_rx_signal.backlight_brightness = l_u8_rd_LI0_DDCU_BDCS1_Backlight_brightness_fb();
     47c:	80 91 dc 60 	lds	r24, 0x60DC	; 0x8060dc <g_lin_frame_data_buffer+0x4>
     480:	98 2f       	mov	r25, r24
     482:	92 95       	swap	r25
     484:	9f 70       	andi	r25, 0x0F	; 15
     486:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
     48a:	80 7f       	andi	r24, 0xF0	; 240
     48c:	89 2b       	or	r24, r25
     48e:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    }
    g_lin_rx_signal.backlight_status = l_bool_rd_LI0_DDCU_BDCS1_BacklightStatus();
     492:	e8 ed       	ldi	r30, 0xD8	; 216
     494:	f0 e6       	ldi	r31, 0x60	; 96
     496:	90 81       	ld	r25, Z
     498:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
     49c:	90 fb       	bst	r25, 0
     49e:	85 f9       	bld	r24, 5
     4a0:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    g_lin_rx_signal.ctrl_window_lock = l_bool_rd_LI0_DDCU_ControlWindowLockSwInd();
     4a4:	95 81       	ldd	r25, Z+5	; 0x05
     4a6:	90 fb       	bst	r25, 0
     4a8:	84 f9       	bld	r24, 4
     4aa:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
     4ae:	08 95       	ret

000004b0 <ep40_lin_signal_update_while_task>:

lin_signal_cnt_t g_lin_signal_cnt[LIN_NUM_OF_SIGS];

void ep40_lin_signal_update_while_task(void)
{
    for (uint8_t i = 0; i < LIN_NUM_OF_SIGS; i++)
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	18 c2       	rjmp	.+1072   	; 0x8e4 <ep40_lin_signal_update_while_task+0x434>
    {
        switch (i)
     4b4:	82 2f       	mov	r24, r18
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	fc 01       	movw	r30, r24
     4ba:	34 97       	sbiw	r30, 0x04	; 4
     4bc:	ea 30       	cpi	r30, 0x0A	; 10
     4be:	f1 05       	cpc	r31, r1
     4c0:	08 f0       	brcs	.+2      	; 0x4c4 <ep40_lin_signal_update_while_task+0x14>
     4c2:	0f c2       	rjmp	.+1054   	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
     4c4:	e0 58       	subi	r30, 0x80	; 128
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__tablejump2__>
        {
        case LI0_DFGLS_FLWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
     4cc:	82 2f       	mov	r24, r18
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	fc 01       	movw	r30, r24
     4d2:	ee 0f       	add	r30, r30
     4d4:	ff 1f       	adc	r31, r31
     4d6:	e8 0f       	add	r30, r24
     4d8:	f9 1f       	adc	r31, r25
     4da:	eb 59       	subi	r30, 0x9B	; 155
     4dc:	f8 49       	sbci	r31, 0x98	; 152
     4de:	30 81       	ld	r19, Z
     4e0:	33 23       	and	r19, r19
     4e2:	d9 f0       	breq	.+54     	; 0x51a <ep40_lin_signal_update_while_task+0x6a>
            {
                g_lin_signal_cnt[i].cnt--;
     4e4:	fc 01       	movw	r30, r24
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	8e 0f       	add	r24, r30
     4ec:	9f 1f       	adc	r25, r31
     4ee:	fc 01       	movw	r30, r24
     4f0:	eb 59       	subi	r30, 0x9B	; 155
     4f2:	f8 49       	sbci	r31, 0x98	; 152
     4f4:	31 50       	subi	r19, 0x01	; 1
     4f6:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_FLWindowControl(g_lin_signal_cnt[i].val);
     4f8:	a8 ed       	ldi	r26, 0xD8	; 216
     4fa:	b0 e6       	ldi	r27, 0x60	; 96
     4fc:	18 96       	adiw	r26, 0x08	; 8
     4fe:	9c 91       	ld	r25, X
     500:	18 97       	sbiw	r26, 0x08	; 8
     502:	81 81       	ldd	r24, Z+1	; 0x01
     504:	98 7f       	andi	r25, 0xF8	; 248
     506:	87 70       	andi	r24, 0x07	; 7
     508:	89 2b       	or	r24, r25
     50a:	18 96       	adiw	r26, 0x08	; 8
     50c:	8c 93       	st	X, r24
     50e:	e5 ed       	ldi	r30, 0xD5	; 213
     510:	f0 e6       	ldi	r31, 0x60	; 96
     512:	81 81       	ldd	r24, Z+1	; 0x01
     514:	8e 7f       	andi	r24, 0xFE	; 254
     516:	81 83       	std	Z+1, r24	; 0x01
     518:	e4 c1       	rjmp	.+968    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_FLWindowControl(0);
     51a:	e8 ed       	ldi	r30, 0xD8	; 216
     51c:	f0 e6       	ldi	r31, 0x60	; 96
     51e:	80 85       	ldd	r24, Z+8	; 0x08
     520:	88 7f       	andi	r24, 0xF8	; 248
     522:	80 87       	std	Z+8, r24	; 0x08
     524:	e5 ed       	ldi	r30, 0xD5	; 213
     526:	f0 e6       	ldi	r31, 0x60	; 96
     528:	81 81       	ldd	r24, Z+1	; 0x01
     52a:	8e 7f       	andi	r24, 0xFE	; 254
     52c:	81 83       	std	Z+1, r24	; 0x01
     52e:	d9 c1       	rjmp	.+946    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_FRWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
     530:	82 2f       	mov	r24, r18
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	fc 01       	movw	r30, r24
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	e8 0f       	add	r30, r24
     53c:	f9 1f       	adc	r31, r25
     53e:	eb 59       	subi	r30, 0x9B	; 155
     540:	f8 49       	sbci	r31, 0x98	; 152
     542:	30 81       	ld	r19, Z
     544:	33 23       	and	r19, r19
     546:	f1 f0       	breq	.+60     	; 0x584 <ep40_lin_signal_update_while_task+0xd4>
            {
                g_lin_signal_cnt[i].cnt--;
     548:	fc 01       	movw	r30, r24
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	8e 0f       	add	r24, r30
     550:	9f 1f       	adc	r25, r31
     552:	fc 01       	movw	r30, r24
     554:	eb 59       	subi	r30, 0x9B	; 155
     556:	f8 49       	sbci	r31, 0x98	; 152
     558:	31 50       	subi	r19, 0x01	; 1
     55a:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_FRWindowControl(g_lin_signal_cnt[i].val);
     55c:	a8 ed       	ldi	r26, 0xD8	; 216
     55e:	b0 e6       	ldi	r27, 0x60	; 96
     560:	18 96       	adiw	r26, 0x08	; 8
     562:	8c 91       	ld	r24, X
     564:	18 97       	sbiw	r26, 0x08	; 8
     566:	91 81       	ldd	r25, Z+1	; 0x01
     568:	99 0f       	add	r25, r25
     56a:	99 0f       	add	r25, r25
     56c:	99 0f       	add	r25, r25
     56e:	98 73       	andi	r25, 0x38	; 56
     570:	87 7c       	andi	r24, 0xC7	; 199
     572:	89 2b       	or	r24, r25
     574:	18 96       	adiw	r26, 0x08	; 8
     576:	8c 93       	st	X, r24
     578:	e5 ed       	ldi	r30, 0xD5	; 213
     57a:	f0 e6       	ldi	r31, 0x60	; 96
     57c:	81 81       	ldd	r24, Z+1	; 0x01
     57e:	8d 7f       	andi	r24, 0xFD	; 253
     580:	81 83       	std	Z+1, r24	; 0x01
     582:	af c1       	rjmp	.+862    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_FRWindowControl(0);
     584:	e8 ed       	ldi	r30, 0xD8	; 216
     586:	f0 e6       	ldi	r31, 0x60	; 96
     588:	80 85       	ldd	r24, Z+8	; 0x08
     58a:	87 7c       	andi	r24, 0xC7	; 199
     58c:	80 87       	std	Z+8, r24	; 0x08
     58e:	e5 ed       	ldi	r30, 0xD5	; 213
     590:	f0 e6       	ldi	r31, 0x60	; 96
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	8d 7f       	andi	r24, 0xFD	; 253
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	a4 c1       	rjmp	.+840    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ControlWindowLockSw:
            if (g_lin_signal_cnt[i].cnt > 0)
     59a:	82 2f       	mov	r24, r18
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	fc 01       	movw	r30, r24
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	e8 0f       	add	r30, r24
     5a6:	f9 1f       	adc	r31, r25
     5a8:	eb 59       	subi	r30, 0x9B	; 155
     5aa:	f8 49       	sbci	r31, 0x98	; 152
     5ac:	30 81       	ld	r19, Z
     5ae:	33 23       	and	r19, r19
     5b0:	f1 f0       	breq	.+60     	; 0x5ee <ep40_lin_signal_update_while_task+0x13e>
            {
                g_lin_signal_cnt[i].cnt--;
     5b2:	fc 01       	movw	r30, r24
     5b4:	ee 0f       	add	r30, r30
     5b6:	ff 1f       	adc	r31, r31
     5b8:	8e 0f       	add	r24, r30
     5ba:	9f 1f       	adc	r25, r31
     5bc:	fc 01       	movw	r30, r24
     5be:	eb 59       	subi	r30, 0x9B	; 155
     5c0:	f8 49       	sbci	r31, 0x98	; 152
     5c2:	31 50       	subi	r19, 0x01	; 1
     5c4:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ControlWindowLockSw(g_lin_signal_cnt[i].val);
     5c6:	81 81       	ldd	r24, Z+1	; 0x01
     5c8:	88 23       	and	r24, r24
     5ca:	31 f0       	breq	.+12     	; 0x5d8 <ep40_lin_signal_update_while_task+0x128>
     5cc:	e8 ed       	ldi	r30, 0xD8	; 216
     5ce:	f0 e6       	ldi	r31, 0x60	; 96
     5d0:	80 85       	ldd	r24, Z+8	; 0x08
     5d2:	80 64       	ori	r24, 0x40	; 64
     5d4:	80 87       	std	Z+8, r24	; 0x08
     5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <ep40_lin_signal_update_while_task+0x132>
     5d8:	e8 ed       	ldi	r30, 0xD8	; 216
     5da:	f0 e6       	ldi	r31, 0x60	; 96
     5dc:	80 85       	ldd	r24, Z+8	; 0x08
     5de:	8f 7b       	andi	r24, 0xBF	; 191
     5e0:	80 87       	std	Z+8, r24	; 0x08
     5e2:	e5 ed       	ldi	r30, 0xD5	; 213
     5e4:	f0 e6       	ldi	r31, 0x60	; 96
     5e6:	81 81       	ldd	r24, Z+1	; 0x01
     5e8:	8b 7f       	andi	r24, 0xFB	; 251
     5ea:	81 83       	std	Z+1, r24	; 0x01
     5ec:	7a c1       	rjmp	.+756    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ControlWindowLockSw(0);
     5ee:	e8 ed       	ldi	r30, 0xD8	; 216
     5f0:	f0 e6       	ldi	r31, 0x60	; 96
     5f2:	80 85       	ldd	r24, Z+8	; 0x08
     5f4:	8f 7b       	andi	r24, 0xBF	; 191
     5f6:	80 87       	std	Z+8, r24	; 0x08
     5f8:	e5 ed       	ldi	r30, 0xD5	; 213
     5fa:	f0 e6       	ldi	r31, 0x60	; 96
     5fc:	81 81       	ldd	r24, Z+1	; 0x01
     5fe:	8b 7f       	andi	r24, 0xFB	; 251
     600:	81 83       	std	Z+1, r24	; 0x01
     602:	6f c1       	rjmp	.+734    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ErrorSts:
            if (g_lin_signal_cnt[i].cnt > 0)
     604:	82 2f       	mov	r24, r18
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	fc 01       	movw	r30, r24
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	e8 0f       	add	r30, r24
     610:	f9 1f       	adc	r31, r25
     612:	eb 59       	subi	r30, 0x9B	; 155
     614:	f8 49       	sbci	r31, 0x98	; 152
     616:	30 81       	ld	r19, Z
     618:	33 23       	and	r19, r19
     61a:	f1 f0       	breq	.+60     	; 0x658 <ep40_lin_signal_update_while_task+0x1a8>
            {
                g_lin_signal_cnt[i].cnt--;
     61c:	fc 01       	movw	r30, r24
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	8e 0f       	add	r24, r30
     624:	9f 1f       	adc	r25, r31
     626:	fc 01       	movw	r30, r24
     628:	eb 59       	subi	r30, 0x9B	; 155
     62a:	f8 49       	sbci	r31, 0x98	; 152
     62c:	31 50       	subi	r19, 0x01	; 1
     62e:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ErrorSts(g_lin_signal_cnt[i].val);
     630:	81 81       	ldd	r24, Z+1	; 0x01
     632:	88 23       	and	r24, r24
     634:	31 f0       	breq	.+12     	; 0x642 <ep40_lin_signal_update_while_task+0x192>
     636:	e8 ed       	ldi	r30, 0xD8	; 216
     638:	f0 e6       	ldi	r31, 0x60	; 96
     63a:	80 85       	ldd	r24, Z+8	; 0x08
     63c:	80 68       	ori	r24, 0x80	; 128
     63e:	80 87       	std	Z+8, r24	; 0x08
     640:	05 c0       	rjmp	.+10     	; 0x64c <ep40_lin_signal_update_while_task+0x19c>
     642:	e8 ed       	ldi	r30, 0xD8	; 216
     644:	f0 e6       	ldi	r31, 0x60	; 96
     646:	80 85       	ldd	r24, Z+8	; 0x08
     648:	8f 77       	andi	r24, 0x7F	; 127
     64a:	80 87       	std	Z+8, r24	; 0x08
     64c:	e5 ed       	ldi	r30, 0xD5	; 213
     64e:	f0 e6       	ldi	r31, 0x60	; 96
     650:	81 81       	ldd	r24, Z+1	; 0x01
     652:	87 7f       	andi	r24, 0xF7	; 247
     654:	81 83       	std	Z+1, r24	; 0x01
     656:	45 c1       	rjmp	.+650    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ErrorSts(0);
     658:	e8 ed       	ldi	r30, 0xD8	; 216
     65a:	f0 e6       	ldi	r31, 0x60	; 96
     65c:	80 85       	ldd	r24, Z+8	; 0x08
     65e:	8f 77       	andi	r24, 0x7F	; 127
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	e5 ed       	ldi	r30, 0xD5	; 213
     664:	f0 e6       	ldi	r31, 0x60	; 96
     666:	81 81       	ldd	r24, Z+1	; 0x01
     668:	87 7f       	andi	r24, 0xF7	; 247
     66a:	81 83       	std	Z+1, r24	; 0x01
     66c:	3a c1       	rjmp	.+628    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_RLWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
     66e:	82 2f       	mov	r24, r18
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e8 0f       	add	r30, r24
     67a:	f9 1f       	adc	r31, r25
     67c:	eb 59       	subi	r30, 0x9B	; 155
     67e:	f8 49       	sbci	r31, 0x98	; 152
     680:	30 81       	ld	r19, Z
     682:	33 23       	and	r19, r19
     684:	d9 f0       	breq	.+54     	; 0x6bc <ep40_lin_signal_update_while_task+0x20c>
            {
                g_lin_signal_cnt[i].cnt--;
     686:	fc 01       	movw	r30, r24
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	8e 0f       	add	r24, r30
     68e:	9f 1f       	adc	r25, r31
     690:	fc 01       	movw	r30, r24
     692:	eb 59       	subi	r30, 0x9B	; 155
     694:	f8 49       	sbci	r31, 0x98	; 152
     696:	31 50       	subi	r19, 0x01	; 1
     698:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_RLWindowControl(g_lin_signal_cnt[i].val);
     69a:	a8 ed       	ldi	r26, 0xD8	; 216
     69c:	b0 e6       	ldi	r27, 0x60	; 96
     69e:	19 96       	adiw	r26, 0x09	; 9
     6a0:	9c 91       	ld	r25, X
     6a2:	19 97       	sbiw	r26, 0x09	; 9
     6a4:	81 81       	ldd	r24, Z+1	; 0x01
     6a6:	98 7f       	andi	r25, 0xF8	; 248
     6a8:	87 70       	andi	r24, 0x07	; 7
     6aa:	89 2b       	or	r24, r25
     6ac:	19 96       	adiw	r26, 0x09	; 9
     6ae:	8c 93       	st	X, r24
     6b0:	e5 ed       	ldi	r30, 0xD5	; 213
     6b2:	f0 e6       	ldi	r31, 0x60	; 96
     6b4:	81 81       	ldd	r24, Z+1	; 0x01
     6b6:	8f 7e       	andi	r24, 0xEF	; 239
     6b8:	81 83       	std	Z+1, r24	; 0x01
     6ba:	13 c1       	rjmp	.+550    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_RLWindowControl(0);
     6bc:	e8 ed       	ldi	r30, 0xD8	; 216
     6be:	f0 e6       	ldi	r31, 0x60	; 96
     6c0:	81 85       	ldd	r24, Z+9	; 0x09
     6c2:	88 7f       	andi	r24, 0xF8	; 248
     6c4:	81 87       	std	Z+9, r24	; 0x09
     6c6:	e5 ed       	ldi	r30, 0xD5	; 213
     6c8:	f0 e6       	ldi	r31, 0x60	; 96
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
     6cc:	8f 7e       	andi	r24, 0xEF	; 239
     6ce:	81 83       	std	Z+1, r24	; 0x01
     6d0:	08 c1       	rjmp	.+528    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_RRWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
     6d2:	82 2f       	mov	r24, r18
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	fc 01       	movw	r30, r24
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	e8 0f       	add	r30, r24
     6de:	f9 1f       	adc	r31, r25
     6e0:	eb 59       	subi	r30, 0x9B	; 155
     6e2:	f8 49       	sbci	r31, 0x98	; 152
     6e4:	30 81       	ld	r19, Z
     6e6:	33 23       	and	r19, r19
     6e8:	f1 f0       	breq	.+60     	; 0x726 <ep40_lin_signal_update_while_task+0x276>
            {
                g_lin_signal_cnt[i].cnt--;
     6ea:	fc 01       	movw	r30, r24
     6ec:	ee 0f       	add	r30, r30
     6ee:	ff 1f       	adc	r31, r31
     6f0:	8e 0f       	add	r24, r30
     6f2:	9f 1f       	adc	r25, r31
     6f4:	fc 01       	movw	r30, r24
     6f6:	eb 59       	subi	r30, 0x9B	; 155
     6f8:	f8 49       	sbci	r31, 0x98	; 152
     6fa:	31 50       	subi	r19, 0x01	; 1
     6fc:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_RRWindowControl(g_lin_signal_cnt[i].val);
     6fe:	a8 ed       	ldi	r26, 0xD8	; 216
     700:	b0 e6       	ldi	r27, 0x60	; 96
     702:	19 96       	adiw	r26, 0x09	; 9
     704:	8c 91       	ld	r24, X
     706:	19 97       	sbiw	r26, 0x09	; 9
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	99 0f       	add	r25, r25
     70c:	99 0f       	add	r25, r25
     70e:	99 0f       	add	r25, r25
     710:	98 73       	andi	r25, 0x38	; 56
     712:	87 7c       	andi	r24, 0xC7	; 199
     714:	89 2b       	or	r24, r25
     716:	19 96       	adiw	r26, 0x09	; 9
     718:	8c 93       	st	X, r24
     71a:	e5 ed       	ldi	r30, 0xD5	; 213
     71c:	f0 e6       	ldi	r31, 0x60	; 96
     71e:	81 81       	ldd	r24, Z+1	; 0x01
     720:	8f 7d       	andi	r24, 0xDF	; 223
     722:	81 83       	std	Z+1, r24	; 0x01
     724:	de c0       	rjmp	.+444    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_RRWindowControl(0);
     726:	e8 ed       	ldi	r30, 0xD8	; 216
     728:	f0 e6       	ldi	r31, 0x60	; 96
     72a:	81 85       	ldd	r24, Z+9	; 0x09
     72c:	87 7c       	andi	r24, 0xC7	; 199
     72e:	81 87       	std	Z+9, r24	; 0x09
     730:	e5 ed       	ldi	r30, 0xD5	; 213
     732:	f0 e6       	ldi	r31, 0x60	; 96
     734:	81 81       	ldd	r24, Z+1	; 0x01
     736:	8f 7d       	andi	r24, 0xDF	; 223
     738:	81 83       	std	Z+1, r24	; 0x01
     73a:	d3 c0       	rjmp	.+422    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ButtonSoundRequest:
            if (g_lin_signal_cnt[i].cnt > 0)
     73c:	82 2f       	mov	r24, r18
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	fc 01       	movw	r30, r24
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	e8 0f       	add	r30, r24
     748:	f9 1f       	adc	r31, r25
     74a:	eb 59       	subi	r30, 0x9B	; 155
     74c:	f8 49       	sbci	r31, 0x98	; 152
     74e:	30 81       	ld	r19, Z
     750:	33 23       	and	r19, r19
     752:	f1 f0       	breq	.+60     	; 0x790 <ep40_lin_signal_update_while_task+0x2e0>
            {
                g_lin_signal_cnt[i].cnt--;
     754:	fc 01       	movw	r30, r24
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	8e 0f       	add	r24, r30
     75c:	9f 1f       	adc	r25, r31
     75e:	fc 01       	movw	r30, r24
     760:	eb 59       	subi	r30, 0x9B	; 155
     762:	f8 49       	sbci	r31, 0x98	; 152
     764:	31 50       	subi	r19, 0x01	; 1
     766:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ButtonSoundRequest(g_lin_signal_cnt[i].val);
     768:	81 81       	ldd	r24, Z+1	; 0x01
     76a:	88 23       	and	r24, r24
     76c:	31 f0       	breq	.+12     	; 0x77a <ep40_lin_signal_update_while_task+0x2ca>
     76e:	e8 ed       	ldi	r30, 0xD8	; 216
     770:	f0 e6       	ldi	r31, 0x60	; 96
     772:	81 85       	ldd	r24, Z+9	; 0x09
     774:	80 64       	ori	r24, 0x40	; 64
     776:	81 87       	std	Z+9, r24	; 0x09
     778:	05 c0       	rjmp	.+10     	; 0x784 <ep40_lin_signal_update_while_task+0x2d4>
     77a:	e8 ed       	ldi	r30, 0xD8	; 216
     77c:	f0 e6       	ldi	r31, 0x60	; 96
     77e:	81 85       	ldd	r24, Z+9	; 0x09
     780:	8f 7b       	andi	r24, 0xBF	; 191
     782:	81 87       	std	Z+9, r24	; 0x09
     784:	e5 ed       	ldi	r30, 0xD5	; 213
     786:	f0 e6       	ldi	r31, 0x60	; 96
     788:	81 81       	ldd	r24, Z+1	; 0x01
     78a:	8f 7b       	andi	r24, 0xBF	; 191
     78c:	81 83       	std	Z+1, r24	; 0x01
     78e:	a9 c0       	rjmp	.+338    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ButtonSoundRequest(0);
     790:	e8 ed       	ldi	r30, 0xD8	; 216
     792:	f0 e6       	ldi	r31, 0x60	; 96
     794:	81 85       	ldd	r24, Z+9	; 0x09
     796:	8f 7b       	andi	r24, 0xBF	; 191
     798:	81 87       	std	Z+9, r24	; 0x09
     79a:	e5 ed       	ldi	r30, 0xD5	; 213
     79c:	f0 e6       	ldi	r31, 0x60	; 96
     79e:	81 81       	ldd	r24, Z+1	; 0x01
     7a0:	8f 7b       	andi	r24, 0xBF	; 191
     7a2:	81 83       	std	Z+1, r24	; 0x01
     7a4:	9e c0       	rjmp	.+316    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Voltage_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
     7a6:	82 2f       	mov	r24, r18
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e8 0f       	add	r30, r24
     7b2:	f9 1f       	adc	r31, r25
     7b4:	eb 59       	subi	r30, 0x9B	; 155
     7b6:	f8 49       	sbci	r31, 0x98	; 152
     7b8:	30 81       	ld	r19, Z
     7ba:	33 23       	and	r19, r19
     7bc:	f1 f0       	breq	.+60     	; 0x7fa <ep40_lin_signal_update_while_task+0x34a>
            {
                g_lin_signal_cnt[i].cnt--;
     7be:	fc 01       	movw	r30, r24
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	8e 0f       	add	r24, r30
     7c6:	9f 1f       	adc	r25, r31
     7c8:	fc 01       	movw	r30, r24
     7ca:	eb 59       	subi	r30, 0x9B	; 155
     7cc:	f8 49       	sbci	r31, 0x98	; 152
     7ce:	31 50       	subi	r19, 0x01	; 1
     7d0:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Voltage_errorCode(g_lin_signal_cnt[i].val);
     7d2:	81 81       	ldd	r24, Z+1	; 0x01
     7d4:	88 23       	and	r24, r24
     7d6:	31 f0       	breq	.+12     	; 0x7e4 <ep40_lin_signal_update_while_task+0x334>
     7d8:	e8 ed       	ldi	r30, 0xD8	; 216
     7da:	f0 e6       	ldi	r31, 0x60	; 96
     7dc:	82 85       	ldd	r24, Z+10	; 0x0a
     7de:	81 60       	ori	r24, 0x01	; 1
     7e0:	82 87       	std	Z+10, r24	; 0x0a
     7e2:	05 c0       	rjmp	.+10     	; 0x7ee <ep40_lin_signal_update_while_task+0x33e>
     7e4:	e8 ed       	ldi	r30, 0xD8	; 216
     7e6:	f0 e6       	ldi	r31, 0x60	; 96
     7e8:	82 85       	ldd	r24, Z+10	; 0x0a
     7ea:	8e 7f       	andi	r24, 0xFE	; 254
     7ec:	82 87       	std	Z+10, r24	; 0x0a
     7ee:	e5 ed       	ldi	r30, 0xD5	; 213
     7f0:	f0 e6       	ldi	r31, 0x60	; 96
     7f2:	81 81       	ldd	r24, Z+1	; 0x01
     7f4:	8f 77       	andi	r24, 0x7F	; 127
     7f6:	81 83       	std	Z+1, r24	; 0x01
     7f8:	74 c0       	rjmp	.+232    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Voltage_errorCode(0);
     7fa:	e8 ed       	ldi	r30, 0xD8	; 216
     7fc:	f0 e6       	ldi	r31, 0x60	; 96
     7fe:	82 85       	ldd	r24, Z+10	; 0x0a
     800:	8e 7f       	andi	r24, 0xFE	; 254
     802:	82 87       	std	Z+10, r24	; 0x0a
     804:	e5 ed       	ldi	r30, 0xD5	; 213
     806:	f0 e6       	ldi	r31, 0x60	; 96
     808:	81 81       	ldd	r24, Z+1	; 0x01
     80a:	8f 77       	andi	r24, 0x7F	; 127
     80c:	81 83       	std	Z+1, r24	; 0x01
     80e:	69 c0       	rjmp	.+210    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Capsense_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
     810:	82 2f       	mov	r24, r18
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	fc 01       	movw	r30, r24
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	e8 0f       	add	r30, r24
     81c:	f9 1f       	adc	r31, r25
     81e:	eb 59       	subi	r30, 0x9B	; 155
     820:	f8 49       	sbci	r31, 0x98	; 152
     822:	30 81       	ld	r19, Z
     824:	33 23       	and	r19, r19
     826:	f1 f0       	breq	.+60     	; 0x864 <ep40_lin_signal_update_while_task+0x3b4>
            {
                g_lin_signal_cnt[i].cnt--;
     828:	fc 01       	movw	r30, r24
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	8e 0f       	add	r24, r30
     830:	9f 1f       	adc	r25, r31
     832:	fc 01       	movw	r30, r24
     834:	eb 59       	subi	r30, 0x9B	; 155
     836:	f8 49       	sbci	r31, 0x98	; 152
     838:	31 50       	subi	r19, 0x01	; 1
     83a:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Capsense_errorCode(g_lin_signal_cnt[i].val);
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	88 23       	and	r24, r24
     840:	31 f0       	breq	.+12     	; 0x84e <ep40_lin_signal_update_while_task+0x39e>
     842:	e8 ed       	ldi	r30, 0xD8	; 216
     844:	f0 e6       	ldi	r31, 0x60	; 96
     846:	82 85       	ldd	r24, Z+10	; 0x0a
     848:	82 60       	ori	r24, 0x02	; 2
     84a:	82 87       	std	Z+10, r24	; 0x0a
     84c:	05 c0       	rjmp	.+10     	; 0x858 <ep40_lin_signal_update_while_task+0x3a8>
     84e:	e8 ed       	ldi	r30, 0xD8	; 216
     850:	f0 e6       	ldi	r31, 0x60	; 96
     852:	82 85       	ldd	r24, Z+10	; 0x0a
     854:	8d 7f       	andi	r24, 0xFD	; 253
     856:	82 87       	std	Z+10, r24	; 0x0a
     858:	e5 ed       	ldi	r30, 0xD5	; 213
     85a:	f0 e6       	ldi	r31, 0x60	; 96
     85c:	82 81       	ldd	r24, Z+2	; 0x02
     85e:	8e 7f       	andi	r24, 0xFE	; 254
     860:	82 83       	std	Z+2, r24	; 0x02
     862:	3f c0       	rjmp	.+126    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Capsense_errorCode(0);
     864:	e8 ed       	ldi	r30, 0xD8	; 216
     866:	f0 e6       	ldi	r31, 0x60	; 96
     868:	82 85       	ldd	r24, Z+10	; 0x0a
     86a:	8d 7f       	andi	r24, 0xFD	; 253
     86c:	82 87       	std	Z+10, r24	; 0x0a
     86e:	e5 ed       	ldi	r30, 0xD5	; 213
     870:	f0 e6       	ldi	r31, 0x60	; 96
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	8e 7f       	andi	r24, 0xFE	; 254
     876:	82 83       	std	Z+2, r24	; 0x02
     878:	34 c0       	rjmp	.+104    	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Motor_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
     87a:	82 2f       	mov	r24, r18
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	e8 0f       	add	r30, r24
     886:	f9 1f       	adc	r31, r25
     888:	eb 59       	subi	r30, 0x9B	; 155
     88a:	f8 49       	sbci	r31, 0x98	; 152
     88c:	30 81       	ld	r19, Z
     88e:	33 23       	and	r19, r19
     890:	f1 f0       	breq	.+60     	; 0x8ce <ep40_lin_signal_update_while_task+0x41e>
            {
                g_lin_signal_cnt[i].cnt--;
     892:	fc 01       	movw	r30, r24
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	8e 0f       	add	r24, r30
     89a:	9f 1f       	adc	r25, r31
     89c:	fc 01       	movw	r30, r24
     89e:	eb 59       	subi	r30, 0x9B	; 155
     8a0:	f8 49       	sbci	r31, 0x98	; 152
     8a2:	31 50       	subi	r19, 0x01	; 1
     8a4:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Motor_errorCode(g_lin_signal_cnt[i].val);
     8a6:	81 81       	ldd	r24, Z+1	; 0x01
     8a8:	88 23       	and	r24, r24
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <ep40_lin_signal_update_while_task+0x408>
     8ac:	e8 ed       	ldi	r30, 0xD8	; 216
     8ae:	f0 e6       	ldi	r31, 0x60	; 96
     8b0:	82 85       	ldd	r24, Z+10	; 0x0a
     8b2:	84 60       	ori	r24, 0x04	; 4
     8b4:	82 87       	std	Z+10, r24	; 0x0a
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <ep40_lin_signal_update_while_task+0x412>
     8b8:	e8 ed       	ldi	r30, 0xD8	; 216
     8ba:	f0 e6       	ldi	r31, 0x60	; 96
     8bc:	82 85       	ldd	r24, Z+10	; 0x0a
     8be:	8b 7f       	andi	r24, 0xFB	; 251
     8c0:	82 87       	std	Z+10, r24	; 0x0a
     8c2:	e5 ed       	ldi	r30, 0xD5	; 213
     8c4:	f0 e6       	ldi	r31, 0x60	; 96
     8c6:	82 81       	ldd	r24, Z+2	; 0x02
     8c8:	8d 7f       	andi	r24, 0xFD	; 253
     8ca:	82 83       	std	Z+2, r24	; 0x02
     8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Motor_errorCode(0);
     8ce:	e8 ed       	ldi	r30, 0xD8	; 216
     8d0:	f0 e6       	ldi	r31, 0x60	; 96
     8d2:	82 85       	ldd	r24, Z+10	; 0x0a
     8d4:	8b 7f       	andi	r24, 0xFB	; 251
     8d6:	82 87       	std	Z+10, r24	; 0x0a
     8d8:	e5 ed       	ldi	r30, 0xD5	; 213
     8da:	f0 e6       	ldi	r31, 0x60	; 96
     8dc:	82 81       	ldd	r24, Z+2	; 0x02
     8de:	8d 7f       	andi	r24, 0xFD	; 253
     8e0:	82 83       	std	Z+2, r24	; 0x02

lin_signal_cnt_t g_lin_signal_cnt[LIN_NUM_OF_SIGS];

void ep40_lin_signal_update_while_task(void)
{
    for (uint8_t i = 0; i < LIN_NUM_OF_SIGS; i++)
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	2e 30       	cpi	r18, 0x0E	; 14
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <ep40_lin_signal_update_while_task+0x43a>
     8e8:	e5 cd       	rjmp	.-1078   	; 0x4b4 <ep40_lin_signal_update_while_task+0x4>

        default:
            break;
        }
    }
}
     8ea:	08 95       	ret

000008ec <lin_signal_send_x_times>:

void lin_signal_send_x_times(l_signal_handle signal_handle, uint8_t cnt, uint8_t val)
{
    g_lin_signal_cnt[signal_handle].cnt = cnt;
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	fc 01       	movw	r30, r24
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	8e 0f       	add	r24, r30
     8f6:	9f 1f       	adc	r25, r31
     8f8:	fc 01       	movw	r30, r24
     8fa:	eb 59       	subi	r30, 0x9B	; 155
     8fc:	f8 49       	sbci	r31, 0x98	; 152
     8fe:	60 83       	st	Z, r22
    g_lin_signal_cnt[signal_handle].val = val;
     900:	41 83       	std	Z+1, r20	; 0x01
     902:	08 95       	ret

00000904 <window_lock_signal_cb>:
}

void window_lock_signal_cb(void)
{
    // lin_signal_x_shot_wr(DFGLS_0X21_CONTROL_WINDOW_LOCK_SW, 1, 3);
    lin_signal_send_x_times(LI0_DFGLS_ControlWindowLockSw, 3, 1);
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	63 e0       	ldi	r22, 0x03	; 3
     908:	86 e0       	ldi	r24, 0x06	; 6
     90a:	0e 94 76 04 	call	0x8ec	; 0x8ec <lin_signal_send_x_times>
     90e:	08 95       	ret

00000910 <left_window_signal_out_cb>:
}

/* 左边窗提升信号输出回调函数 */
void left_window_signal_out_cb(uint8_t signal)
{
    uint8_t rear_status = g_btn_rear.status;
     910:	90 91 a7 60 	lds	r25, 0x60A7	; 0x8060a7 <g_btn_rear>

    if (rear_status == 0)
     914:	91 11       	cpse	r25, r1
     916:	06 c0       	rjmp	.+12     	; 0x924 <left_window_signal_out_cb+0x14>
    {
        // lin_signal_x_shot_wr(DFGLS_0X21_FL_WINDOW_CONTROL, signal, 3);
        lin_signal_send_x_times(LI0_DFGLS_FLWindowControl, 3, signal);
     918:	48 2f       	mov	r20, r24
     91a:	63 e0       	ldi	r22, 0x03	; 3
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	0e 94 76 04 	call	0x8ec	; 0x8ec <lin_signal_send_x_times>
     922:	08 95       	ret
    }
    else
    {
        // lin_signal_x_shot_wr(DFGLS_0X21_RL_WINDOW_CONTROL, signal, 3);
        lin_signal_send_x_times(LI0_DFGLS_RLWindowControl, 3, signal);
     924:	48 2f       	mov	r20, r24
     926:	63 e0       	ldi	r22, 0x03	; 3
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	0e 94 76 04 	call	0x8ec	; 0x8ec <lin_signal_send_x_times>
     92e:	08 95       	ret

00000930 <right_window_signal_out_cb>:
}

/* 右边窗提升信号输出回调函数 */
void right_window_signal_out_cb(uint8_t signal)
{
    uint8_t rear_status = g_btn_rear.status;
     930:	90 91 a7 60 	lds	r25, 0x60A7	; 0x8060a7 <g_btn_rear>

    if (rear_status == 0)
     934:	91 11       	cpse	r25, r1
     936:	06 c0       	rjmp	.+12     	; 0x944 <right_window_signal_out_cb+0x14>
    {
        lin_signal_send_x_times(LI0_DFGLS_FRWindowControl, 3, signal);
     938:	48 2f       	mov	r20, r24
     93a:	63 e0       	ldi	r22, 0x03	; 3
     93c:	85 e0       	ldi	r24, 0x05	; 5
     93e:	0e 94 76 04 	call	0x8ec	; 0x8ec <lin_signal_send_x_times>
     942:	08 95       	ret
    }
    else
    {
        lin_signal_send_x_times(LI0_DFGLS_RRWindowControl, 3, signal);
     944:	48 2f       	mov	r20, r24
     946:	63 e0       	ldi	r22, 0x03	; 3
     948:	89 e0       	ldi	r24, 0x09	; 9
     94a:	0e 94 76 04 	call	0x8ec	; 0x8ec <lin_signal_send_x_times>
     94e:	08 95       	ret

00000950 <window_obj_var_clear>:
    g_lin_signal_cnt[signal_handle].cnt = cnt;
    g_lin_signal_cnt[signal_handle].val = val;
}

void window_obj_var_clear(window_obj_t *handle)
{
     950:	fc 01       	movw	r30, r24
    handle->status = 0;
     952:	10 82       	st	Z, r1
    handle->ticks = 0;
     954:	11 82       	std	Z+1, r1	; 0x01
     956:	12 82       	std	Z+2, r1	; 0x02
    handle->btn_a_status_last = 0;
     958:	13 82       	std	Z+3, r1	; 0x03
    handle->btn_a_status = 0;
     95a:	14 82       	std	Z+4, r1	; 0x04
    handle->btn_b_status_last = 0;
     95c:	15 82       	std	Z+5, r1	; 0x05
    handle->btn_b_status = 0;
     95e:	16 82       	std	Z+6, r1	; 0x06
    handle->slide_status_last = 0;
     960:	17 82       	std	Z+7, r1	; 0x07
    handle->slide_status = 0;
     962:	10 86       	std	Z+8, r1	; 0x08
    handle->slide_pos_first = 0;
     964:	11 86       	std	Z+9, r1	; 0x09
    handle->slide_pos = 0;
     966:	12 86       	std	Z+10, r1	; 0x0a
    handle->window.status = 0;
     968:	13 86       	std	Z+11, r1	; 0x0b
    handle->window.long_flg = 0;
     96a:	14 86       	std	Z+12, r1	; 0x0c
    handle->window.btn_b_cap_trig_flg = 0;
     96c:	15 86       	std	Z+13, r1	; 0x0d
    handle->window.btn_a_cap_trig_flg = 0;
     96e:	16 86       	std	Z+14, r1	; 0x0e
    handle->window.slide_1_to_2_flg = 0;
     970:	17 86       	std	Z+15, r1	; 0x0f
    handle->window.slide_2_to_1_flg = 0;
     972:	10 8a       	std	Z+16, r1	; 0x10
    handle->window.btn_a_status = 0;
     974:	11 8a       	std	Z+17, r1	; 0x11
    handle->window.btn_b_status = 0;
     976:	12 8a       	std	Z+18, r1	; 0x12
    handle->window.slide_status = 0;
     978:	13 8a       	std	Z+19, r1	; 0x13
    handle->window.signal = 0;
     97a:	14 8a       	std	Z+20, r1	; 0x14
     97c:	08 95       	ret

0000097e <soft_timer_window_task>:
    }
}

/* 窗提升滑条按键软件定时器任务 */
void soft_timer_window_task(void)
{
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
    window_obj_t *window_obj_ptr = &g_left_window_obj;
    window_t *window_ptr = &g_left_window_obj.window;
    static uint8_t rear_status_last = 0;
    static uint8_t rear_status = 0;

    rear_status_last = rear_status;
     982:	90 91 20 64 	lds	r25, 0x6420	; 0x806420 <rear_status.6478>
     986:	90 93 1f 64 	sts	0x641F, r25	; 0x80641f <rear_status_last.6477>
    rear_status = g_btn_rear.status;
     98a:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <g_btn_rear>
     98e:	80 93 20 64 	sts	0x6420, r24	; 0x806420 <rear_status.6478>

    /*************************************LEFT************************************************/

    if (rear_status_last != rear_status)
     992:	98 17       	cp	r25, r24
     994:	21 f0       	breq	.+8      	; 0x99e <soft_timer_window_task+0x20>
    {
        window_obj_var_clear(window_obj_ptr);
     996:	87 e8       	ldi	r24, 0x87	; 135
     998:	90 e6       	ldi	r25, 0x60	; 96
     99a:	0e 94 a8 04 	call	0x950	; 0x950 <window_obj_var_clear>
    }

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
     99e:	c7 e8       	ldi	r28, 0x87	; 135
     9a0:	d0 e6       	ldi	r29, 0x60	; 96
     9a2:	8c 81       	ldd	r24, Y+4	; 0x04
     9a4:	8b 83       	std	Y+3, r24	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(5) & 0x80;
     9a6:	85 e0       	ldi	r24, 0x05	; 5
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 4c 2a 	call	0x5498	; 0x5498 <get_sensor_state>
     9ae:	80 78       	andi	r24, 0x80	; 128
     9b0:	8c 83       	std	Y+4, r24	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	8d 83       	std	Y+5, r24	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(4) & 0x80;
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 4c 2a 	call	0x5498	; 0x5498 <get_sensor_state>
     9be:	80 78       	andi	r24, 0x80	; 128
     9c0:	8e 83       	std	Y+6, r24	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	99 8b       	std	Y+17, r25	; 0x11
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
     9c6:	8a 8b       	std	Y+18, r24	; 0x12

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
     9c8:	99 23       	and	r25, r25
     9ca:	41 f0       	breq	.+16     	; 0x9dc <soft_timer_window_task+0x5e>
     9cc:	20 91 8a 60 	lds	r18, 0x608A	; 0x80608a <g_left_window_obj+0x3>
     9d0:	21 11       	cpse	r18, r1
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <soft_timer_window_task+0x5e>
    {
        window_obj_ptr->ticks = 0;
     9d4:	19 82       	std	Y+1, r1	; 0x01
     9d6:	1a 82       	std	Y+2, r1	; 0x02
        window_obj_ptr->status = 2;
     9d8:	22 e0       	ldi	r18, 0x02	; 2
     9da:	28 83       	st	Y, r18
    }

    if (window_obj_ptr->status == 2)
     9dc:	20 91 87 60 	lds	r18, 0x6087	; 0x806087 <g_left_window_obj>
     9e0:	22 30       	cpi	r18, 0x02	; 2
     9e2:	c1 f4       	brne	.+48     	; 0xa14 <soft_timer_window_task+0x96>
    {
        window_obj_ptr->ticks++;
     9e4:	e7 e8       	ldi	r30, 0x87	; 135
     9e6:	f0 e6       	ldi	r31, 0x60	; 96
     9e8:	21 81       	ldd	r18, Z+1	; 0x01
     9ea:	32 81       	ldd	r19, Z+2	; 0x02
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	21 83       	std	Z+1, r18	; 0x01
     9f2:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	44 87       	std	Z+12, r20	; 0x0c
        window_ptr->btn_a_cap_trig_flg = 1;
     9f8:	46 87       	std	Z+14, r20	; 0x0e
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     9fa:	22 33       	cpi	r18, 0x32	; 50
     9fc:	31 05       	cpc	r19, r1
     9fe:	10 f0       	brcs	.+4      	; 0xa04 <soft_timer_window_task+0x86>
        {
            window_obj_ptr->status = 0;
     a00:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_a_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_a_status == 0)
     a04:	91 11       	cpse	r25, r1
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <soft_timer_window_task+0x96>
        {
            window_obj_ptr->status = 0;
     a08:	e7 e8       	ldi	r30, 0x87	; 135
     a0a:	f0 e6       	ldi	r31, 0x60	; 96
     a0c:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
     a0e:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_a_cap_trig_flg = 1;
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	96 87       	std	Z+14, r25	; 0x0e
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
     a14:	88 23       	and	r24, r24
     a16:	51 f0       	breq	.+20     	; 0xa2c <soft_timer_window_task+0xae>
     a18:	90 91 8c 60 	lds	r25, 0x608C	; 0x80608c <g_left_window_obj+0x5>
     a1c:	91 11       	cpse	r25, r1
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <soft_timer_window_task+0xae>
    {
        window_obj_ptr->ticks = 0;
     a20:	e7 e8       	ldi	r30, 0x87	; 135
     a22:	f0 e6       	ldi	r31, 0x60	; 96
     a24:	11 82       	std	Z+1, r1	; 0x01
     a26:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
     a28:	93 e0       	ldi	r25, 0x03	; 3
     a2a:	90 83       	st	Z, r25
    }

    if (window_obj_ptr->status == 3)
     a2c:	90 91 87 60 	lds	r25, 0x6087	; 0x806087 <g_left_window_obj>
     a30:	93 30       	cpi	r25, 0x03	; 3
     a32:	c1 f4       	brne	.+48     	; 0xa64 <soft_timer_window_task+0xe6>
    {
        window_obj_ptr->ticks++;
     a34:	e7 e8       	ldi	r30, 0x87	; 135
     a36:	f0 e6       	ldi	r31, 0x60	; 96
     a38:	21 81       	ldd	r18, Z+1	; 0x01
     a3a:	32 81       	ldd	r19, Z+2	; 0x02
     a3c:	2f 5f       	subi	r18, 0xFF	; 255
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	21 83       	std	Z+1, r18	; 0x01
     a42:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	94 87       	std	Z+12, r25	; 0x0c
        window_ptr->btn_b_cap_trig_flg = 1;
     a48:	95 87       	std	Z+13, r25	; 0x0d
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     a4a:	22 33       	cpi	r18, 0x32	; 50
     a4c:	31 05       	cpc	r19, r1
     a4e:	10 f0       	brcs	.+4      	; 0xa54 <soft_timer_window_task+0xd6>
        {
            window_obj_ptr->status = 0;
     a50:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_b_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_b_status == 0)
     a54:	81 11       	cpse	r24, r1
     a56:	06 c0       	rjmp	.+12     	; 0xa64 <soft_timer_window_task+0xe6>
        {
            window_obj_ptr->status = 0;
     a58:	e7 e8       	ldi	r30, 0x87	; 135
     a5a:	f0 e6       	ldi	r31, 0x60	; 96
     a5c:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
     a5e:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_b_cap_trig_flg = 1;
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	85 87       	std	Z+13, r24	; 0x0d
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
     a64:	c7 e8       	ldi	r28, 0x87	; 135
     a66:	d0 e6       	ldi	r29, 0x60	; 96
     a68:	88 85       	ldd	r24, Y+8	; 0x08
     a6a:	8f 83       	std	Y+7, r24	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(1);
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <get_scroller_state>
     a74:	88 87       	std	Y+8, r24	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
     a76:	8b 8b       	std	Y+19, r24	; 0x13

    window_obj_ptr->slide_pos = get_scroller_position(1);
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 6d 2a 	call	0x54da	; 0x54da <get_scroller_position>
     a80:	8a 87       	std	Y+10, r24	; 0x0a

    if (window_obj_ptr->status == 0)
     a82:	98 81       	ld	r25, Y
     a84:	91 11       	cpse	r25, r1
     a86:	0f c0       	rjmp	.+30     	; 0xaa6 <soft_timer_window_task+0x128>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
     a88:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <g_left_window_obj+0x8>
     a8c:	99 23       	and	r25, r25
     a8e:	09 f4       	brne	.+2      	; 0xa92 <soft_timer_window_task+0x114>
     a90:	66 c0       	rjmp	.+204    	; 0xb5e <soft_timer_window_task+0x1e0>
     a92:	90 91 8e 60 	lds	r25, 0x608E	; 0x80608e <g_left_window_obj+0x7>
     a96:	91 11       	cpse	r25, r1
     a98:	62 c0       	rjmp	.+196    	; 0xb5e <soft_timer_window_task+0x1e0>
        {
            window_obj_ptr->ticks = 0;
     a9a:	19 82       	std	Y+1, r1	; 0x01
     a9c:	1a 82       	std	Y+2, r1	; 0x02
            window_obj_ptr->status = 4;
     a9e:	94 e0       	ldi	r25, 0x04	; 4
     aa0:	98 83       	st	Y, r25
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
     aa2:	89 87       	std	Y+9, r24	; 0x09
     aa4:	5c c0       	rjmp	.+184    	; 0xb5e <soft_timer_window_task+0x1e0>
        }
    }
    else if (window_obj_ptr->status == 4)
     aa6:	94 30       	cpi	r25, 0x04	; 4
     aa8:	09 f0       	breq	.+2      	; 0xaac <soft_timer_window_task+0x12e>
     aaa:	51 c0       	rjmp	.+162    	; 0xb4e <soft_timer_window_task+0x1d0>
    {
        if (window_obj_ptr->slide_status == 0)
     aac:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <g_left_window_obj+0x8>
     ab0:	91 11       	cpse	r25, r1
     ab2:	19 c0       	rjmp	.+50     	; 0xae6 <soft_timer_window_task+0x168>
        {
            window_obj_ptr->status = 0;
     ab4:	e7 e8       	ldi	r30, 0x87	; 135
     ab6:	f0 e6       	ldi	r31, 0x60	; 96
     ab8:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
     aba:	91 85       	ldd	r25, Z+9	; 0x09
     abc:	94 36       	cpi	r25, 0x64	; 100
     abe:	38 f4       	brcc	.+14     	; 0xace <soft_timer_window_task+0x150>
            {
                if (window_obj_ptr->slide_pos > 150)
     ac0:	87 39       	cpi	r24, 0x97	; 151
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <soft_timer_window_task+0x148>
     ac4:	4c c0       	rjmp	.+152    	; 0xb5e <soft_timer_window_task+0x1e0>
                {
                    window_ptr->long_flg = 0;
     ac6:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_1_to_2_flg = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	87 87       	std	Z+15, r24	; 0x0f
     acc:	48 c0       	rjmp	.+144    	; 0xb5e <soft_timer_window_task+0x1e0>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
     ace:	97 39       	cpi	r25, 0x97	; 151
     ad0:	08 f4       	brcc	.+2      	; 0xad4 <soft_timer_window_task+0x156>
     ad2:	45 c0       	rjmp	.+138    	; 0xb5e <soft_timer_window_task+0x1e0>
            {
                if (window_obj_ptr->slide_pos < 100)
     ad4:	84 36       	cpi	r24, 0x64	; 100
     ad6:	08 f0       	brcs	.+2      	; 0xada <soft_timer_window_task+0x15c>
     ad8:	42 c0       	rjmp	.+132    	; 0xb5e <soft_timer_window_task+0x1e0>
                {
                    window_ptr->long_flg = 0;
     ada:	e7 e8       	ldi	r30, 0x87	; 135
     adc:	f0 e6       	ldi	r31, 0x60	; 96
     ade:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_2_to_1_flg = 1;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 8b       	std	Z+16, r24	; 0x10
     ae4:	3c c0       	rjmp	.+120    	; 0xb5e <soft_timer_window_task+0x1e0>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
     ae6:	e7 e8       	ldi	r30, 0x87	; 135
     ae8:	f0 e6       	ldi	r31, 0x60	; 96
     aea:	21 81       	ldd	r18, Z+1	; 0x01
     aec:	32 81       	ldd	r19, Z+2	; 0x02
     aee:	2f 5f       	subi	r18, 0xFF	; 255
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	21 83       	std	Z+1, r18	; 0x01
     af4:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
     af6:	99 23       	and	r25, r25
     af8:	91 f1       	breq	.+100    	; 0xb5e <soft_timer_window_task+0x1e0>
            {
                if (window_obj_ptr->slide_pos_first < 100)
     afa:	90 91 90 60 	lds	r25, 0x6090	; 0x806090 <g_left_window_obj+0x9>
     afe:	94 36       	cpi	r25, 0x64	; 100
     b00:	88 f4       	brcc	.+34     	; 0xb24 <soft_timer_window_task+0x1a6>
                {
                    if (window_obj_ptr->slide_pos > 150)
     b02:	87 39       	cpi	r24, 0x97	; 151
     b04:	60 f1       	brcs	.+88     	; 0xb5e <soft_timer_window_task+0x1e0>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     b06:	22 33       	cpi	r18, 0x32	; 50
     b08:	31 05       	cpc	r19, r1
     b0a:	30 f0       	brcs	.+12     	; 0xb18 <soft_timer_window_task+0x19a>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	87 87       	std	Z+15, r24	; 0x0f
                            window_obj_ptr->status = 5;
     b10:	95 e0       	ldi	r25, 0x05	; 5
     b12:	90 83       	st	Z, r25
                            window_ptr->long_flg = 1;
     b14:	84 87       	std	Z+12, r24	; 0x0c
     b16:	23 c0       	rjmp	.+70     	; 0xb5e <soft_timer_window_task+0x1e0>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
     b18:	e7 e8       	ldi	r30, 0x87	; 135
     b1a:	f0 e6       	ldi	r31, 0x60	; 96
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	87 87       	std	Z+15, r24	; 0x0f
                            window_ptr->long_flg = 1;
     b20:	84 87       	std	Z+12, r24	; 0x0c
     b22:	1d c0       	rjmp	.+58     	; 0xb5e <soft_timer_window_task+0x1e0>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
     b24:	97 39       	cpi	r25, 0x97	; 151
     b26:	d8 f0       	brcs	.+54     	; 0xb5e <soft_timer_window_task+0x1e0>
                {
                    if (window_obj_ptr->slide_pos < 100)
     b28:	84 36       	cpi	r24, 0x64	; 100
     b2a:	c8 f4       	brcc	.+50     	; 0xb5e <soft_timer_window_task+0x1e0>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     b2c:	22 33       	cpi	r18, 0x32	; 50
     b2e:	31 05       	cpc	r19, r1
     b30:	40 f0       	brcs	.+16     	; 0xb42 <soft_timer_window_task+0x1c4>
                        {
                            window_obj_ptr->status = 5;
     b32:	e7 e8       	ldi	r30, 0x87	; 135
     b34:	f0 e6       	ldi	r31, 0x60	; 96
     b36:	85 e0       	ldi	r24, 0x05	; 5
     b38:	80 83       	st	Z, r24
                            window_ptr->long_flg = 1;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
     b3e:	80 8b       	std	Z+16, r24	; 0x10
     b40:	0e c0       	rjmp	.+28     	; 0xb5e <soft_timer_window_task+0x1e0>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
     b42:	e7 e8       	ldi	r30, 0x87	; 135
     b44:	f0 e6       	ldi	r31, 0x60	; 96
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
     b4a:	80 8b       	std	Z+16, r24	; 0x10
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <soft_timer_window_task+0x1e0>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
     b4e:	95 30       	cpi	r25, 0x05	; 5
     b50:	31 f4       	brne	.+12     	; 0xb5e <soft_timer_window_task+0x1e0>
    {
        if (window_obj_ptr->slide_status == 0)
     b52:	80 91 8f 60 	lds	r24, 0x608F	; 0x80608f <g_left_window_obj+0x8>
     b56:	81 11       	cpse	r24, r1
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <soft_timer_window_task+0x1e0>
        {
            window_obj_ptr->status = 0;
     b5a:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
        }
    }
    window_task(window_ptr);
     b5e:	82 e9       	ldi	r24, 0x92	; 146
     b60:	90 e6       	ldi	r25, 0x60	; 96
     b62:	0e 94 0e 07 	call	0xe1c	; 0xe1c <window_task>

    /*************************************RIGHT************************************************/
    window_obj_ptr = &g_right_window_obj;
    window_ptr = &g_right_window_obj.window;
    if (rear_status_last != rear_status)
     b66:	90 91 1f 64 	lds	r25, 0x641F	; 0x80641f <rear_status_last.6477>
     b6a:	80 91 20 64 	lds	r24, 0x6420	; 0x806420 <rear_status.6478>
     b6e:	98 17       	cp	r25, r24
     b70:	21 f0       	breq	.+8      	; 0xb7a <soft_timer_window_task+0x1fc>
    {
        window_obj_var_clear(window_obj_ptr);
     b72:	80 e7       	ldi	r24, 0x70	; 112
     b74:	90 e6       	ldi	r25, 0x60	; 96
     b76:	0e 94 a8 04 	call	0x950	; 0x950 <window_obj_var_clear>
    }

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
     b7a:	c0 e7       	ldi	r28, 0x70	; 112
     b7c:	d0 e6       	ldi	r29, 0x60	; 96
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	8b 83       	std	Y+3, r24	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(2) & 0x80;
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 4c 2a 	call	0x5498	; 0x5498 <get_sensor_state>
     b8a:	80 78       	andi	r24, 0x80	; 128
     b8c:	8c 83       	std	Y+4, r24	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
     b8e:	8e 81       	ldd	r24, Y+6	; 0x06
     b90:	8d 83       	std	Y+5, r24	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(1) & 0x80;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 4c 2a 	call	0x5498	; 0x5498 <get_sensor_state>
     b9a:	80 78       	andi	r24, 0x80	; 128
     b9c:	8e 83       	std	Y+6, r24	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	99 8b       	std	Y+17, r25	; 0x11
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
     ba2:	8a 8b       	std	Y+18, r24	; 0x12

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
     ba4:	99 23       	and	r25, r25
     ba6:	41 f0       	breq	.+16     	; 0xbb8 <soft_timer_window_task+0x23a>
     ba8:	20 91 73 60 	lds	r18, 0x6073	; 0x806073 <g_right_window_obj+0x3>
     bac:	21 11       	cpse	r18, r1
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <soft_timer_window_task+0x23a>
    {
        window_obj_ptr->ticks = 0;
     bb0:	19 82       	std	Y+1, r1	; 0x01
     bb2:	1a 82       	std	Y+2, r1	; 0x02
        window_obj_ptr->status = 2;
     bb4:	22 e0       	ldi	r18, 0x02	; 2
     bb6:	28 83       	st	Y, r18
    }

    if (window_obj_ptr->status == 2)
     bb8:	20 91 70 60 	lds	r18, 0x6070	; 0x806070 <g_right_window_obj>
     bbc:	22 30       	cpi	r18, 0x02	; 2
     bbe:	c1 f4       	brne	.+48     	; 0xbf0 <soft_timer_window_task+0x272>
    {
        window_obj_ptr->ticks++;
     bc0:	e0 e7       	ldi	r30, 0x70	; 112
     bc2:	f0 e6       	ldi	r31, 0x60	; 96
     bc4:	21 81       	ldd	r18, Z+1	; 0x01
     bc6:	32 81       	ldd	r19, Z+2	; 0x02
     bc8:	2f 5f       	subi	r18, 0xFF	; 255
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	21 83       	std	Z+1, r18	; 0x01
     bce:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	44 87       	std	Z+12, r20	; 0x0c
        window_ptr->btn_a_cap_trig_flg = 1;
     bd4:	46 87       	std	Z+14, r20	; 0x0e
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     bd6:	22 33       	cpi	r18, 0x32	; 50
     bd8:	31 05       	cpc	r19, r1
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <soft_timer_window_task+0x262>
        {
            window_obj_ptr->status = 0;
     bdc:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_a_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_a_status == 0)
     be0:	91 11       	cpse	r25, r1
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <soft_timer_window_task+0x272>
        {
            window_obj_ptr->status = 0;
     be4:	e0 e7       	ldi	r30, 0x70	; 112
     be6:	f0 e6       	ldi	r31, 0x60	; 96
     be8:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
     bea:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_a_cap_trig_flg = 1;
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	96 87       	std	Z+14, r25	; 0x0e
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
     bf0:	88 23       	and	r24, r24
     bf2:	51 f0       	breq	.+20     	; 0xc08 <soft_timer_window_task+0x28a>
     bf4:	90 91 75 60 	lds	r25, 0x6075	; 0x806075 <g_right_window_obj+0x5>
     bf8:	91 11       	cpse	r25, r1
     bfa:	06 c0       	rjmp	.+12     	; 0xc08 <soft_timer_window_task+0x28a>
    {
        window_obj_ptr->ticks = 0;
     bfc:	e0 e7       	ldi	r30, 0x70	; 112
     bfe:	f0 e6       	ldi	r31, 0x60	; 96
     c00:	11 82       	std	Z+1, r1	; 0x01
     c02:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	90 83       	st	Z, r25
    }

    if (window_obj_ptr->status == 3)
     c08:	90 91 70 60 	lds	r25, 0x6070	; 0x806070 <g_right_window_obj>
     c0c:	93 30       	cpi	r25, 0x03	; 3
     c0e:	c1 f4       	brne	.+48     	; 0xc40 <soft_timer_window_task+0x2c2>
    {
        window_obj_ptr->ticks++;
     c10:	e0 e7       	ldi	r30, 0x70	; 112
     c12:	f0 e6       	ldi	r31, 0x60	; 96
     c14:	21 81       	ldd	r18, Z+1	; 0x01
     c16:	32 81       	ldd	r19, Z+2	; 0x02
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	3f 4f       	sbci	r19, 0xFF	; 255
     c1c:	21 83       	std	Z+1, r18	; 0x01
     c1e:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	94 87       	std	Z+12, r25	; 0x0c
        window_ptr->btn_b_cap_trig_flg = 1;
     c24:	95 87       	std	Z+13, r25	; 0x0d
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     c26:	22 33       	cpi	r18, 0x32	; 50
     c28:	31 05       	cpc	r19, r1
     c2a:	10 f0       	brcs	.+4      	; 0xc30 <soft_timer_window_task+0x2b2>
        {
            window_obj_ptr->status = 0;
     c2c:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_b_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_b_status == 0)
     c30:	81 11       	cpse	r24, r1
     c32:	06 c0       	rjmp	.+12     	; 0xc40 <soft_timer_window_task+0x2c2>
        {
            window_obj_ptr->status = 0;
     c34:	e0 e7       	ldi	r30, 0x70	; 112
     c36:	f0 e6       	ldi	r31, 0x60	; 96
     c38:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
     c3a:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_b_cap_trig_flg = 1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	85 87       	std	Z+13, r24	; 0x0d
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
     c40:	c0 e7       	ldi	r28, 0x70	; 112
     c42:	d0 e6       	ldi	r29, 0x60	; 96
     c44:	88 85       	ldd	r24, Y+8	; 0x08
     c46:	8f 83       	std	Y+7, r24	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(0);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <get_scroller_state>
     c50:	88 87       	std	Y+8, r24	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
     c52:	8b 8b       	std	Y+19, r24	; 0x13

    window_obj_ptr->slide_pos = get_scroller_position(0);
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 6d 2a 	call	0x54da	; 0x54da <get_scroller_position>
     c5c:	8a 87       	std	Y+10, r24	; 0x0a

    if (window_obj_ptr->status == 0)
     c5e:	98 81       	ld	r25, Y
     c60:	91 11       	cpse	r25, r1
     c62:	0f c0       	rjmp	.+30     	; 0xc82 <soft_timer_window_task+0x304>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
     c64:	90 91 78 60 	lds	r25, 0x6078	; 0x806078 <g_right_window_obj+0x8>
     c68:	99 23       	and	r25, r25
     c6a:	09 f4       	brne	.+2      	; 0xc6e <soft_timer_window_task+0x2f0>
     c6c:	66 c0       	rjmp	.+204    	; 0xd3a <soft_timer_window_task+0x3bc>
     c6e:	90 91 77 60 	lds	r25, 0x6077	; 0x806077 <g_right_window_obj+0x7>
     c72:	91 11       	cpse	r25, r1
     c74:	62 c0       	rjmp	.+196    	; 0xd3a <soft_timer_window_task+0x3bc>
        {
            window_obj_ptr->ticks = 0;
     c76:	19 82       	std	Y+1, r1	; 0x01
     c78:	1a 82       	std	Y+2, r1	; 0x02
            window_obj_ptr->status = 4;
     c7a:	94 e0       	ldi	r25, 0x04	; 4
     c7c:	98 83       	st	Y, r25
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
     c7e:	89 87       	std	Y+9, r24	; 0x09
     c80:	5c c0       	rjmp	.+184    	; 0xd3a <soft_timer_window_task+0x3bc>
        }
    }
    else if (window_obj_ptr->status == 4)
     c82:	94 30       	cpi	r25, 0x04	; 4
     c84:	09 f0       	breq	.+2      	; 0xc88 <soft_timer_window_task+0x30a>
     c86:	51 c0       	rjmp	.+162    	; 0xd2a <soft_timer_window_task+0x3ac>
    {
        if (window_obj_ptr->slide_status == 0)
     c88:	90 91 78 60 	lds	r25, 0x6078	; 0x806078 <g_right_window_obj+0x8>
     c8c:	91 11       	cpse	r25, r1
     c8e:	19 c0       	rjmp	.+50     	; 0xcc2 <soft_timer_window_task+0x344>
        {
            window_obj_ptr->status = 0;
     c90:	e0 e7       	ldi	r30, 0x70	; 112
     c92:	f0 e6       	ldi	r31, 0x60	; 96
     c94:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
     c96:	91 85       	ldd	r25, Z+9	; 0x09
     c98:	94 36       	cpi	r25, 0x64	; 100
     c9a:	38 f4       	brcc	.+14     	; 0xcaa <soft_timer_window_task+0x32c>
            {
                if (window_obj_ptr->slide_pos > 150)
     c9c:	87 39       	cpi	r24, 0x97	; 151
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <soft_timer_window_task+0x324>
     ca0:	4c c0       	rjmp	.+152    	; 0xd3a <soft_timer_window_task+0x3bc>
                {
                    window_ptr->long_flg = 0;
     ca2:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_1_to_2_flg = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	87 87       	std	Z+15, r24	; 0x0f
     ca8:	48 c0       	rjmp	.+144    	; 0xd3a <soft_timer_window_task+0x3bc>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
     caa:	97 39       	cpi	r25, 0x97	; 151
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <soft_timer_window_task+0x332>
     cae:	45 c0       	rjmp	.+138    	; 0xd3a <soft_timer_window_task+0x3bc>
            {
                if (window_obj_ptr->slide_pos < 100)
     cb0:	84 36       	cpi	r24, 0x64	; 100
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <soft_timer_window_task+0x338>
     cb4:	42 c0       	rjmp	.+132    	; 0xd3a <soft_timer_window_task+0x3bc>
                {
                    window_ptr->long_flg = 0;
     cb6:	e0 e7       	ldi	r30, 0x70	; 112
     cb8:	f0 e6       	ldi	r31, 0x60	; 96
     cba:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_2_to_1_flg = 1;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 8b       	std	Z+16, r24	; 0x10
     cc0:	3c c0       	rjmp	.+120    	; 0xd3a <soft_timer_window_task+0x3bc>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
     cc2:	e0 e7       	ldi	r30, 0x70	; 112
     cc4:	f0 e6       	ldi	r31, 0x60	; 96
     cc6:	21 81       	ldd	r18, Z+1	; 0x01
     cc8:	32 81       	ldd	r19, Z+2	; 0x02
     cca:	2f 5f       	subi	r18, 0xFF	; 255
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	21 83       	std	Z+1, r18	; 0x01
     cd0:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
     cd2:	99 23       	and	r25, r25
     cd4:	91 f1       	breq	.+100    	; 0xd3a <soft_timer_window_task+0x3bc>
            {
                if (window_obj_ptr->slide_pos_first < 100)
     cd6:	90 91 79 60 	lds	r25, 0x6079	; 0x806079 <g_right_window_obj+0x9>
     cda:	94 36       	cpi	r25, 0x64	; 100
     cdc:	88 f4       	brcc	.+34     	; 0xd00 <soft_timer_window_task+0x382>
                {
                    if (window_obj_ptr->slide_pos > 150)
     cde:	87 39       	cpi	r24, 0x97	; 151
     ce0:	60 f1       	brcs	.+88     	; 0xd3a <soft_timer_window_task+0x3bc>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     ce2:	22 33       	cpi	r18, 0x32	; 50
     ce4:	31 05       	cpc	r19, r1
     ce6:	30 f0       	brcs	.+12     	; 0xcf4 <soft_timer_window_task+0x376>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	87 87       	std	Z+15, r24	; 0x0f
                            window_obj_ptr->status = 5;
     cec:	95 e0       	ldi	r25, 0x05	; 5
     cee:	90 83       	st	Z, r25
                            window_ptr->long_flg = 1;
     cf0:	84 87       	std	Z+12, r24	; 0x0c
     cf2:	23 c0       	rjmp	.+70     	; 0xd3a <soft_timer_window_task+0x3bc>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
     cf4:	e0 e7       	ldi	r30, 0x70	; 112
     cf6:	f0 e6       	ldi	r31, 0x60	; 96
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	87 87       	std	Z+15, r24	; 0x0f
                            window_ptr->long_flg = 1;
     cfc:	84 87       	std	Z+12, r24	; 0x0c
     cfe:	1d c0       	rjmp	.+58     	; 0xd3a <soft_timer_window_task+0x3bc>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
     d00:	97 39       	cpi	r25, 0x97	; 151
     d02:	d8 f0       	brcs	.+54     	; 0xd3a <soft_timer_window_task+0x3bc>
                {
                    if (window_obj_ptr->slide_pos < 100)
     d04:	84 36       	cpi	r24, 0x64	; 100
     d06:	c8 f4       	brcc	.+50     	; 0xd3a <soft_timer_window_task+0x3bc>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
     d08:	22 33       	cpi	r18, 0x32	; 50
     d0a:	31 05       	cpc	r19, r1
     d0c:	40 f0       	brcs	.+16     	; 0xd1e <soft_timer_window_task+0x3a0>
                        {
                            window_obj_ptr->status = 5;
     d0e:	e0 e7       	ldi	r30, 0x70	; 112
     d10:	f0 e6       	ldi	r31, 0x60	; 96
     d12:	85 e0       	ldi	r24, 0x05	; 5
     d14:	80 83       	st	Z, r24
                            window_ptr->long_flg = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
     d1a:	80 8b       	std	Z+16, r24	; 0x10
     d1c:	0e c0       	rjmp	.+28     	; 0xd3a <soft_timer_window_task+0x3bc>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
     d1e:	e0 e7       	ldi	r30, 0x70	; 112
     d20:	f0 e6       	ldi	r31, 0x60	; 96
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
     d26:	80 8b       	std	Z+16, r24	; 0x10
     d28:	08 c0       	rjmp	.+16     	; 0xd3a <soft_timer_window_task+0x3bc>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
     d2a:	95 30       	cpi	r25, 0x05	; 5
     d2c:	31 f4       	brne	.+12     	; 0xd3a <soft_timer_window_task+0x3bc>
    {
        if (window_obj_ptr->slide_status == 0)
     d2e:	80 91 78 60 	lds	r24, 0x6078	; 0x806078 <g_right_window_obj+0x8>
     d32:	81 11       	cpse	r24, r1
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <soft_timer_window_task+0x3bc>
        {
            window_obj_ptr->status = 0;
     d36:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
        }
    }
    window_task(window_ptr);
     d3a:	8b e7       	ldi	r24, 0x7B	; 123
     d3c:	90 e6       	ldi	r25, 0x60	; 96
     d3e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <window_task>
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <btn_rear_tick_task>:
/* 判断电容触发标志，压力触发标志 */
/* 输出:反转LED控制回调函数 */
void btn_rear_tick_task(void)
{
    btn_rear_t *btn_rear_ptr = &g_btn_rear;
    switch (btn_rear_ptr->status)
     d48:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <g_btn_rear>
     d4c:	88 23       	and	r24, r24
     d4e:	19 f0       	breq	.+6      	; 0xd56 <btn_rear_tick_task+0xe>
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	d9 f0       	breq	.+54     	; 0xd8a <btn_rear_tick_task+0x42>
     d54:	08 95       	ret
    {
    case 0:
        if (btn_rear_ptr->cap_trig_flg == 1)
     d56:	80 91 a8 60 	lds	r24, 0x60A8	; 0x8060a8 <g_btn_rear+0x1>
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	09 f0       	breq	.+2      	; 0xd60 <btn_rear_tick_task+0x18>
     d5e:	5d c0       	rjmp	.+186    	; 0xe1a <btn_rear_tick_task+0xd2>
        {
            btn_rear_ptr->cap_trig_flg = 0;
     d60:	e7 ea       	ldi	r30, 0xA7	; 167
     d62:	f0 e6       	ldi	r31, 0x60	; 96
     d64:	11 82       	std	Z+1, r1	; 0x01
            if (btn_rear_ptr->press_trig_flg == 1)
     d66:	83 81       	ldd	r24, Z+3	; 0x03
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	09 f0       	breq	.+2      	; 0xd6e <btn_rear_tick_task+0x26>
     d6c:	56 c0       	rjmp	.+172    	; 0xe1a <btn_rear_tick_task+0xd2>
            {
                btn_rear_ptr->press_trig_flg = 0;
     d6e:	13 82       	std	Z+3, r1	; 0x03

                btn_rear_ptr->status = 1;
     d70:	80 83       	st	Z, r24
                btn_rear_ptr->ticks = 0;
     d72:	14 82       	std	Z+4, r1	; 0x04
     d74:	15 82       	std	Z+5, r1	; 0x05
     d76:	16 82       	std	Z+6, r1	; 0x06
     d78:	17 82       	std	Z+7, r1	; 0x07
                if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
     d7a:	00 84       	ldd	r0, Z+8	; 0x08
     d7c:	f1 85       	ldd	r31, Z+9	; 0x09
     d7e:	e0 2d       	mov	r30, r0
     d80:	30 97       	sbiw	r30, 0x00	; 0
     d82:	09 f4       	brne	.+2      	; 0xd86 <btn_rear_tick_task+0x3e>
     d84:	4a c0       	rjmp	.+148    	; 0xe1a <btn_rear_tick_task+0xd2>
                {
                    btn_rear_ptr->rear_led_ctrl_cb(1);
     d86:	09 95       	icall
     d88:	08 95       	ret
                }
            }
        }
        break;
    case 1:
        if (btn_rear_ptr->all_cap_status == 1)
     d8a:	80 91 a9 60 	lds	r24, 0x60A9	; 0x8060a9 <g_btn_rear+0x2>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	49 f4       	brne	.+18     	; 0xda4 <btn_rear_tick_task+0x5c>
        {
            btn_rear_ptr->ticks = 0;
     d92:	10 92 ab 60 	sts	0x60AB, r1	; 0x8060ab <g_btn_rear+0x4>
     d96:	10 92 ac 60 	sts	0x60AC, r1	; 0x8060ac <g_btn_rear+0x5>
     d9a:	10 92 ad 60 	sts	0x60AD, r1	; 0x8060ad <g_btn_rear+0x6>
     d9e:	10 92 ae 60 	sts	0x60AE, r1	; 0x8060ae <g_btn_rear+0x7>
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <btn_rear_tick_task+0x76>
        }
        else
        {
            btn_rear_ptr->ticks++;
     da4:	e7 ea       	ldi	r30, 0xA7	; 167
     da6:	f0 e6       	ldi	r31, 0x60	; 96
     da8:	84 81       	ldd	r24, Z+4	; 0x04
     daa:	95 81       	ldd	r25, Z+5	; 0x05
     dac:	a6 81       	ldd	r26, Z+6	; 0x06
     dae:	b7 81       	ldd	r27, Z+7	; 0x07
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	a1 1d       	adc	r26, r1
     db4:	b1 1d       	adc	r27, r1
     db6:	84 83       	std	Z+4, r24	; 0x04
     db8:	95 83       	std	Z+5, r25	; 0x05
     dba:	a6 83       	std	Z+6, r26	; 0x06
     dbc:	b7 83       	std	Z+7, r27	; 0x07
        }
        if (btn_rear_ptr->ticks >= ((uint32_t)TIMEOUT_REAR_UNIT_S * 1000 / ONE_TICK_UNIT_MS))
     dbe:	80 91 ab 60 	lds	r24, 0x60AB	; 0x8060ab <g_btn_rear+0x4>
     dc2:	90 91 ac 60 	lds	r25, 0x60AC	; 0x8060ac <g_btn_rear+0x5>
     dc6:	a0 91 ad 60 	lds	r26, 0x60AD	; 0x8060ad <g_btn_rear+0x6>
     dca:	b0 91 ae 60 	lds	r27, 0x60AE	; 0x8060ae <g_btn_rear+0x7>
     dce:	88 3b       	cpi	r24, 0xB8	; 184
     dd0:	9b 40       	sbci	r25, 0x0B	; 11
     dd2:	a1 05       	cpc	r26, r1
     dd4:	b1 05       	cpc	r27, r1
     dd6:	70 f0       	brcs	.+28     	; 0xdf4 <btn_rear_tick_task+0xac>
        {
            btn_rear_ptr->ticks = 0;
     dd8:	e7 ea       	ldi	r30, 0xA7	; 167
     dda:	f0 e6       	ldi	r31, 0x60	; 96
     ddc:	14 82       	std	Z+4, r1	; 0x04
     dde:	15 82       	std	Z+5, r1	; 0x05
     de0:	16 82       	std	Z+6, r1	; 0x06
     de2:	17 82       	std	Z+7, r1	; 0x07

            btn_rear_ptr->status = 0;
     de4:	10 82       	st	Z, r1
            if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
     de6:	00 84       	ldd	r0, Z+8	; 0x08
     de8:	f1 85       	ldd	r31, Z+9	; 0x09
     dea:	e0 2d       	mov	r30, r0
     dec:	30 97       	sbiw	r30, 0x00	; 0
     dee:	11 f0       	breq	.+4      	; 0xdf4 <btn_rear_tick_task+0xac>
            {
                btn_rear_ptr->rear_led_ctrl_cb(0);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	09 95       	icall
            }
        }
        if (btn_rear_ptr->cap_trig_flg == 1)
     df4:	80 91 a8 60 	lds	r24, 0x60A8	; 0x8060a8 <g_btn_rear+0x1>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	79 f4       	brne	.+30     	; 0xe1a <btn_rear_tick_task+0xd2>
        {
            btn_rear_ptr->cap_trig_flg = 0;
     dfc:	e7 ea       	ldi	r30, 0xA7	; 167
     dfe:	f0 e6       	ldi	r31, 0x60	; 96
     e00:	11 82       	std	Z+1, r1	; 0x01
            if (btn_rear_ptr->press_trig_flg == 1)
     e02:	83 81       	ldd	r24, Z+3	; 0x03
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	49 f4       	brne	.+18     	; 0xe1a <btn_rear_tick_task+0xd2>
            {
                btn_rear_ptr->press_trig_flg = 0;
     e08:	13 82       	std	Z+3, r1	; 0x03

                btn_rear_ptr->status = 0;
     e0a:	10 82       	st	Z, r1
                if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
     e0c:	00 84       	ldd	r0, Z+8	; 0x08
     e0e:	f1 85       	ldd	r31, Z+9	; 0x09
     e10:	e0 2d       	mov	r30, r0
     e12:	30 97       	sbiw	r30, 0x00	; 0
     e14:	11 f0       	breq	.+4      	; 0xe1a <btn_rear_tick_task+0xd2>
                {
                    btn_rear_ptr->rear_led_ctrl_cb(0);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	09 95       	icall
     e1a:	08 95       	ret

00000e1c <window_task>:
        break;
    }
}

void window_task(window_t *window_ptr)
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
    switch (window_ptr->status)
     e22:	88 81       	ld	r24, Y
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	09 f4       	brne	.+2      	; 0xe2a <window_task+0xe>
     e28:	6c c0       	rjmp	.+216    	; 0xf02 <window_task+0xe6>
     e2a:	20 f0       	brcs	.+8      	; 0xe34 <window_task+0x18>
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	09 f4       	brne	.+2      	; 0xe32 <window_task+0x16>
     e30:	8d c0       	rjmp	.+282    	; 0xf4c <window_task+0x130>
     e32:	9d c0       	rjmp	.+314    	; 0xf6e <window_task+0x152>
    {
    case 0:
    {
        window_ptr->signal = SIGNAL_VAL_NO_REQUEST;
     e34:	19 86       	std	Y+9, r1	; 0x09
        if (window_ptr->btn_a_cap_trig_flg == 1)
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	b1 f4       	brne	.+44     	; 0xe68 <window_task+0x4c>
        {
            window_ptr->btn_a_cap_trig_flg = 0;
     e3c:	1b 82       	std	Y+3, r1	; 0x03

            if (window_ptr->long_flg == 1)
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	49 f4       	brne	.+18     	; 0xe56 <window_task+0x3a>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
     e44:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     e46:	ea 85       	ldd	r30, Y+10	; 0x0a
     e48:	fb 85       	ldd	r31, Y+11	; 0x0b
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	09 f0       	breq	.+2      	; 0xe50 <window_task+0x34>
                {
                    window_ptr->cb(window_ptr->signal);
     e4e:	09 95       	icall
                }
                window_ptr->status = 1;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	88 83       	st	Y, r24
     e54:	8c c0       	rjmp	.+280    	; 0xf6e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
     e56:	83 e0       	ldi	r24, 0x03	; 3
     e58:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     e5a:	ea 85       	ldd	r30, Y+10	; 0x0a
     e5c:	fb 85       	ldd	r31, Y+11	; 0x0b
     e5e:	30 97       	sbiw	r30, 0x00	; 0
     e60:	09 f4       	brne	.+2      	; 0xe64 <window_task+0x48>
     e62:	85 c0       	rjmp	.+266    	; 0xf6e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
     e64:	09 95       	icall
     e66:	83 c0       	rjmp	.+262    	; 0xf6e <window_task+0x152>
                }
            }
        }
        else if (window_ptr->btn_b_cap_trig_flg == 1)
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	b9 f4       	brne	.+46     	; 0xe9c <window_task+0x80>
        {
            window_ptr->btn_b_cap_trig_flg = 0;
     e6e:	1a 82       	std	Y+2, r1	; 0x02

            if (window_ptr->long_flg == 1)
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	51 f4       	brne	.+20     	; 0xe8a <window_task+0x6e>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     e7a:	ea 85       	ldd	r30, Y+10	; 0x0a
     e7c:	fb 85       	ldd	r31, Y+11	; 0x0b
     e7e:	30 97       	sbiw	r30, 0x00	; 0
     e80:	09 f0       	breq	.+2      	; 0xe84 <window_task+0x68>
                {
                    window_ptr->cb(window_ptr->signal);
     e82:	09 95       	icall
                }
                window_ptr->status = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	88 83       	st	Y, r24
     e88:	72 c0       	rjmp	.+228    	; 0xf6e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     e8e:	ea 85       	ldd	r30, Y+10	; 0x0a
     e90:	fb 85       	ldd	r31, Y+11	; 0x0b
     e92:	30 97       	sbiw	r30, 0x00	; 0
     e94:	09 f4       	brne	.+2      	; 0xe98 <window_task+0x7c>
     e96:	6b c0       	rjmp	.+214    	; 0xf6e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
     e98:	09 95       	icall
     e9a:	69 c0       	rjmp	.+210    	; 0xf6e <window_task+0x152>
                }
            }
        }
        else if (window_ptr->slide_1_to_2_flg == 1)
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	b1 f4       	brne	.+44     	; 0xece <window_task+0xb2>
        {
            window_ptr->slide_1_to_2_flg = 0;
     ea2:	1c 82       	std	Y+4, r1	; 0x04
            if (window_ptr->long_flg == 1)
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	49 f4       	brne	.+18     	; 0xebc <window_task+0xa0>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
     eaa:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     eac:	ea 85       	ldd	r30, Y+10	; 0x0a
     eae:	fb 85       	ldd	r31, Y+11	; 0x0b
     eb0:	30 97       	sbiw	r30, 0x00	; 0
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <window_task+0x9a>
                {
                    window_ptr->cb(window_ptr->signal);
     eb4:	09 95       	icall
                }
                window_ptr->status = 2;
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	88 83       	st	Y, r24
     eba:	59 c0       	rjmp	.+178    	; 0xf6e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     ec0:	ea 85       	ldd	r30, Y+10	; 0x0a
     ec2:	fb 85       	ldd	r31, Y+11	; 0x0b
     ec4:	30 97       	sbiw	r30, 0x00	; 0
     ec6:	09 f4       	brne	.+2      	; 0xeca <window_task+0xae>
     ec8:	52 c0       	rjmp	.+164    	; 0xf6e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
     eca:	09 95       	icall
     ecc:	50 c0       	rjmp	.+160    	; 0xf6e <window_task+0x152>
                }
            }
        }
        else if (window_ptr->slide_2_to_1_flg == 1)
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	09 f0       	breq	.+2      	; 0xed6 <window_task+0xba>
     ed4:	4c c0       	rjmp	.+152    	; 0xf6e <window_task+0x152>
        {
            window_ptr->slide_2_to_1_flg = 0;
     ed6:	1d 82       	std	Y+5, r1	; 0x05
            if (window_ptr->long_flg == 1)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	51 f4       	brne	.+20     	; 0xef2 <window_task+0xd6>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     ee2:	ea 85       	ldd	r30, Y+10	; 0x0a
     ee4:	fb 85       	ldd	r31, Y+11	; 0x0b
     ee6:	30 97       	sbiw	r30, 0x00	; 0
     ee8:	09 f0       	breq	.+2      	; 0xeec <window_task+0xd0>
                {
                    window_ptr->cb(window_ptr->signal);
     eea:	09 95       	icall
                }
                window_ptr->status = 2;
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	88 83       	st	Y, r24
     ef0:	3e c0       	rjmp	.+124    	; 0xf6e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
     ef2:	84 e0       	ldi	r24, 0x04	; 4
     ef4:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
     ef6:	ea 85       	ldd	r30, Y+10	; 0x0a
     ef8:	fb 85       	ldd	r31, Y+11	; 0x0b
     efa:	30 97       	sbiw	r30, 0x00	; 0
     efc:	c1 f1       	breq	.+112    	; 0xf6e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
     efe:	09 95       	icall
     f00:	36 c0       	rjmp	.+108    	; 0xf6e <window_task+0x152>
        }
    }
    break;
    case 1:
    {
        if (window_ptr->signal == SIGNAL_VAL_MANUAL_DOWN)
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	81 f4       	brne	.+32     	; 0xf28 <window_task+0x10c>
        {
            if (window_ptr->btn_b_status != 0)
     f08:	9f 81       	ldd	r25, Y+7	; 0x07
     f0a:	99 23       	and	r25, r25
     f0c:	31 f0       	breq	.+12     	; 0xf1a <window_task+0xfe>
            {
                if (window_ptr->cb != NULL)
     f0e:	ea 85       	ldd	r30, Y+10	; 0x0a
     f10:	fb 85       	ldd	r31, Y+11	; 0x0b
     f12:	30 97       	sbiw	r30, 0x00	; 0
     f14:	61 f1       	breq	.+88     	; 0xf6e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
     f16:	09 95       	icall
     f18:	2a c0       	rjmp	.+84     	; 0xf6e <window_task+0x152>
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
     f1a:	ea 85       	ldd	r30, Y+10	; 0x0a
     f1c:	fb 85       	ldd	r31, Y+11	; 0x0b
     f1e:	30 97       	sbiw	r30, 0x00	; 0
     f20:	09 f0       	breq	.+2      	; 0xf24 <window_task+0x108>
                {
                    window_ptr->cb(window_ptr->signal);
     f22:	09 95       	icall
                }
                window_ptr->status = 0;
     f24:	18 82       	st	Y, r1
     f26:	23 c0       	rjmp	.+70     	; 0xf6e <window_task+0x152>
            }
        }
        else if (window_ptr->signal == SIGNAL_VAL_MANUAL_UP)
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	09 f5       	brne	.+66     	; 0xf6e <window_task+0x152>
        {
            if (window_ptr->btn_a_status != 0)
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	99 23       	and	r25, r25
     f30:	31 f0       	breq	.+12     	; 0xf3e <window_task+0x122>
            {
                if (window_ptr->cb != NULL)
     f32:	ea 85       	ldd	r30, Y+10	; 0x0a
     f34:	fb 85       	ldd	r31, Y+11	; 0x0b
     f36:	30 97       	sbiw	r30, 0x00	; 0
     f38:	d1 f0       	breq	.+52     	; 0xf6e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
     f3a:	09 95       	icall
     f3c:	18 c0       	rjmp	.+48     	; 0xf6e <window_task+0x152>
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
     f3e:	ea 85       	ldd	r30, Y+10	; 0x0a
     f40:	fb 85       	ldd	r31, Y+11	; 0x0b
     f42:	30 97       	sbiw	r30, 0x00	; 0
     f44:	09 f0       	breq	.+2      	; 0xf48 <window_task+0x12c>
                {
                    window_ptr->cb(window_ptr->signal);
     f46:	09 95       	icall
                }
                window_ptr->status = 0;
     f48:	18 82       	st	Y, r1
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <window_task+0x152>
        }
    }
    break;
    case 2:
    {
        if (window_ptr->slide_status != 0)
     f4c:	88 85       	ldd	r24, Y+8	; 0x08
     f4e:	88 23       	and	r24, r24
     f50:	39 f0       	breq	.+14     	; 0xf60 <window_task+0x144>
        {
            if (window_ptr->cb != NULL)
     f52:	ea 85       	ldd	r30, Y+10	; 0x0a
     f54:	fb 85       	ldd	r31, Y+11	; 0x0b
     f56:	30 97       	sbiw	r30, 0x00	; 0
     f58:	51 f0       	breq	.+20     	; 0xf6e <window_task+0x152>
            {
                window_ptr->cb(window_ptr->signal);
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	09 95       	icall
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <window_task+0x152>
            }
        }
        else
        {
            if (window_ptr->cb != NULL)
     f60:	ea 85       	ldd	r30, Y+10	; 0x0a
     f62:	fb 85       	ldd	r31, Y+11	; 0x0b
     f64:	30 97       	sbiw	r30, 0x00	; 0
     f66:	11 f0       	breq	.+4      	; 0xf6c <window_task+0x150>
            {
                window_ptr->cb(window_ptr->signal);
     f68:	89 85       	ldd	r24, Y+9	; 0x09
     f6a:	09 95       	icall
            }
            window_ptr->status = 0;
     f6c:	18 82       	st	Y, r1
    }
    break;
    default:
        break;
    }
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <window_lock_task>:
void window_lock_task(void)
{
    window_lock_t *window_lock_ptr = &g_window_lock;
    LIN_RX_signal_t *signal_ptr = &g_lin_rx_signal;

    if (window_lock_ptr->capsense_flg == 1)
     f74:	80 91 a1 60 	lds	r24, 0x60A1	; 0x8060a1 <g_window_lock>
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	69 f4       	brne	.+26     	; 0xf96 <window_lock_task+0x22>
    {
        window_lock_ptr->capsense_flg = 0;
     f7c:	e1 ea       	ldi	r30, 0xA1	; 161
     f7e:	f0 e6       	ldi	r31, 0x60	; 96
     f80:	10 82       	st	Z, r1

        if (window_lock_ptr->press_flg == 1)
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	39 f4       	brne	.+14     	; 0xf96 <window_lock_task+0x22>
        {
            window_lock_ptr->press_flg = 0;
     f88:	11 82       	std	Z+1, r1	; 0x01

            if (window_lock_ptr->signal_cb != NULL)
     f8a:	04 80       	ldd	r0, Z+4	; 0x04
     f8c:	f5 81       	ldd	r31, Z+5	; 0x05
     f8e:	e0 2d       	mov	r30, r0
     f90:	30 97       	sbiw	r30, 0x00	; 0
     f92:	09 f0       	breq	.+2      	; 0xf96 <window_lock_task+0x22>
            {
                window_lock_ptr->signal_cb();
     f94:	09 95       	icall
            }
        }
    }

    if (window_lock_ptr->led_cb != NULL)
     f96:	e0 91 a3 60 	lds	r30, 0x60A3	; 0x8060a3 <g_window_lock+0x2>
     f9a:	f0 91 a4 60 	lds	r31, 0x60A4	; 0x8060a4 <g_window_lock+0x3>
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	29 f0       	breq	.+10     	; 0xfac <window_lock_task+0x38>
    {
        window_lock_ptr->led_cb(signal_ptr->ctrl_window_lock);
     fa2:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
     fa6:	82 95       	swap	r24
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	09 95       	icall
     fac:	08 95       	ret

00000fae <backlight_task>:

    uint32_t tmp = 0;
    uint32_t night_gain = 0;
    uint32_t pwm_index = 0;

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
     fae:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
     fb2:	85 ff       	sbrs	r24, 5
     fb4:	07 c0       	rjmp	.+14     	; 0xfc4 <backlight_task+0x16>
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
        pwm_index = signal_ptr->backlight_brightness;
     fb6:	8f 70       	andi	r24, 0x0F	; 15
     fb8:	90 e0       	ldi	r25, 0x00	; 0
    uint32_t night_gain = 0;
    uint32_t pwm_index = 0;

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
     fba:	22 e3       	ldi	r18, 0x32	; 50
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <backlight_task+0x26>
        pwm_index = signal_ptr->backlight_brightness;
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
        pwm_index = 9;
     fc4:	89 e0       	ldi	r24, 0x09	; 9
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a0 e0       	ldi	r26, 0x00	; 0
     fca:	b0 e0       	ldi	r27, 0x00	; 0
        night_gain = BACKLIGHT_NIGHT_GAIN;
        pwm_index = signal_ptr->backlight_brightness;
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
     fcc:	24 e6       	ldi	r18, 0x64	; 100
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
        pwm_index = 9;
    }

    tmp = g_level[pwm_index] * night_gain * DUTY_MAX / 10000;
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	fc 01       	movw	r30, r24
     fde:	e0 50       	subi	r30, 0x00	; 0
     fe0:	fd 49       	sbci	r31, 0x9D	; 157
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <__mulsi3>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	aa e4       	ldi	r26, 0x4A	; 74
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
     ffa:	20 e1       	ldi	r18, 0x10	; 16
     ffc:	37 e2       	ldi	r19, 0x27	; 39
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>

    if (g_backlight_cb != NULL)
    1006:	e0 91 9e 60 	lds	r30, 0x609E	; 0x80609e <g_backlight_cb>
    100a:	f0 91 9f 60 	lds	r31, 0x609F	; 0x80609f <g_backlight_cb+0x1>
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	19 f0       	breq	.+6      	; 0x1018 <backlight_task+0x6a>
    {
        g_backlight_cb(tmp);
    1012:	ca 01       	movw	r24, r20
    1014:	b9 01       	movw	r22, r18
    1016:	09 95       	icall
    1018:	08 95       	ret

0000101a <lin_go_to_sleep>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    101a:	81 b1       	in	r24, 0x01	; 1
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	81 b9       	out	0x01, r24	; 1
{
    /* 使能脚设置低电平 */
    LIN_EN_set_level(0);

    /* 关闭usart模块 */
    Disable_global_interrupt();
    1020:	f8 94       	cli
    USART4.CTRLA &= ~(1 << USART_ABEIE_bp | 1 << USART_RXCIE_bp);
    1022:	e0 e8       	ldi	r30, 0x80	; 128
    1024:	f8 e0       	ldi	r31, 0x08	; 8
    1026:	85 81       	ldd	r24, Z+5	; 0x05
    1028:	8b 77       	andi	r24, 0x7B	; 123
    102a:	85 83       	std	Z+5, r24	; 0x05
    USART4.CTRLB &= ~(1 << USART_TXEN_bp | USART_RXMODE_LINAUTO_gc | 1 << USART_RXEN_bp);
    102c:	86 81       	ldd	r24, Z+6	; 0x06
    102e:	89 73       	andi	r24, 0x39	; 57
    1030:	86 83       	std	Z+6, r24	; 0x06
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    1032:	80 b3       	in	r24, 0x10	; 16
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    1038:	81 b3       	in	r24, 0x11	; 17
    103a:	8e 7f       	andi	r24, 0xFE	; 254
    103c:	81 bb       	out	0x11, r24	; 17
    103e:	08 95       	ret

00001040 <HC595_Write>:
#define HC595_STCP_RST LED_CS_set_level(false)
#define HC595_SHCP_SET LED_MCLK_set_level(true)
#define HC595_SHCP_RST LED_MCLK_set_level(false)

void HC595_Write(uint8_t *dataPtr, uint8_t icNum, uint8_t bitLen)
{
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	00 d0       	rcall	.+0      	; 0x1046 <HC595_Write+0x6>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	dc 01       	movw	r26, r24
    uint8_t _dataArr[HC595_NUM] = {0};
    104c:	19 82       	std	Y+1, r1	; 0x01
    104e:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	12 c0       	rjmp	.+36     	; 0x1078 <HC595_Write+0x38>
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    1054:	e6 2f       	mov	r30, r22
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	31 97       	sbiw	r30, 0x01	; 1
    105a:	29 2f       	mov	r18, r25
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	e2 1b       	sub	r30, r18
    1060:	f3 0b       	sbc	r31, r19
    1062:	ea 0f       	add	r30, r26
    1064:	fb 1f       	adc	r31, r27
    1066:	80 81       	ld	r24, Z
    1068:	e1 e0       	ldi	r30, 0x01	; 1
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	ec 0f       	add	r30, r28
    106e:	fd 1f       	adc	r31, r29
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	80 83       	st	Z, r24
{
    uint8_t _dataArr[HC595_NUM] = {0};
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	96 17       	cp	r25, r22
    107a:	60 f3       	brcs	.-40     	; 0x1054 <HC595_Write+0x14>
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	28 c0       	rjmp	.+80     	; 0x10d0 <HC595_Write+0x90>

    for (uint8_t i = 0; i < bitLen; i++)
    {
        arrIdx = i / 8;
        bitIdx = i % 8;
        bitVal = _dataArr[arrIdx] & (0x01 << (7 - bitIdx));
    1080:	82 2f       	mov	r24, r18
    1082:	86 95       	lsr	r24
    1084:	86 95       	lsr	r24
    1086:	86 95       	lsr	r24
    1088:	e1 e0       	ldi	r30, 0x01	; 1
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	ec 0f       	add	r30, r28
    108e:	fd 1f       	adc	r31, r29
    1090:	e8 0f       	add	r30, r24
    1092:	f1 1d       	adc	r31, r1
    1094:	30 81       	ld	r19, Z
    1096:	67 e0       	ldi	r22, 0x07	; 7
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	92 2f       	mov	r25, r18
    109c:	97 70       	andi	r25, 0x07	; 7
    109e:	69 1b       	sub	r22, r25
    10a0:	71 09       	sbc	r23, r1
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <HC595_Write+0x6c>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	6a 95       	dec	r22
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <HC595_Write+0x68>
    10b0:	83 23       	and	r24, r19

        if (bitVal != 0)
    10b2:	21 f0       	breq	.+8      	; 0x10bc <HC595_Write+0x7c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    10b4:	81 b1       	in	r24, 0x01	; 1
    10b6:	88 60       	ori	r24, 0x08	; 8
    10b8:	81 b9       	out	0x01, r24	; 1
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <HC595_Write+0x82>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    10bc:	81 b1       	in	r24, 0x01	; 1
    10be:	87 7f       	andi	r24, 0xF7	; 247
    10c0:	81 b9       	out	0x01, r24	; 1
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    10c2:	89 b1       	in	r24, 0x09	; 9
    10c4:	8f 77       	andi	r24, 0x7F	; 127
    10c6:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    10c8:	89 b1       	in	r24, 0x09	; 9
    10ca:	80 68       	ori	r24, 0x80	; 128
    10cc:	89 b9       	out	0x09, r24	; 9
    for (uint8_t i = 0; i < icNum; i++)
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    }

    for (uint8_t i = 0; i < bitLen; i++)
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	24 17       	cp	r18, r20
    10d2:	b0 f2       	brcs	.-84     	; 0x1080 <HC595_Write+0x40>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    10d4:	81 b1       	in	r24, 0x01	; 1
    10d6:	8b 7f       	andi	r24, 0xFB	; 251
    10d8:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    10da:	81 b1       	in	r24, 0x01	; 1
    10dc:	84 60       	ori	r24, 0x04	; 4
    10de:	81 b9       	out	0x01, r24	; 1
        HC595_SHCP_RST;
        HC595_SHCP_SET;
    }
    HC595_STCP_RST;
    HC595_STCP_SET;
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <led_set_level>:

void led_set_level(led_Dx_e Dx, uint8_t level)
{
	uint8_t byte = 0;
	uint8_t bit = 0;
	byte = g_led_Dx[Dx].byte;
    10ea:	e8 2f       	mov	r30, r24
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	e8 5d       	subi	r30, 0xD8	; 216
    10f4:	fc 49       	sbci	r31, 0x9C	; 156
    10f6:	80 81       	ld	r24, Z
	bit = g_led_Dx[Dx].bit;
    10f8:	21 81       	ldd	r18, Z+1	; 0x01
	if (level == 1)
    10fa:	61 30       	cpi	r22, 0x01	; 1
    10fc:	99 f4       	brne	.+38     	; 0x1124 <led_set_level+0x3a>
	{
		bitSet(g_hc595_buffer[byte], bit);
    10fe:	e8 2f       	mov	r30, r24
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a0 e0       	ldi	r26, 0x00	; 0
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <led_set_level+0x2a>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	2a 95       	dec	r18
    1116:	d2 f7       	brpl	.-12     	; 0x110c <led_set_level+0x22>
    1118:	ef 54       	subi	r30, 0x4F	; 79
    111a:	ff 49       	sbci	r31, 0x9F	; 159
    111c:	20 81       	ld	r18, Z
    111e:	82 2b       	or	r24, r18
    1120:	80 83       	st	Z, r24
    1122:	08 95       	ret
	}
	else
	{
		bitClear(g_hc595_buffer[byte], bit);
    1124:	e8 2f       	mov	r30, r24
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a0 e0       	ldi	r26, 0x00	; 0
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	04 c0       	rjmp	.+8      	; 0x113a <led_set_level+0x50>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	aa 1f       	adc	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	2a 95       	dec	r18
    113c:	d2 f7       	brpl	.-12     	; 0x1132 <led_set_level+0x48>
    113e:	ef 54       	subi	r30, 0x4F	; 79
    1140:	ff 49       	sbci	r31, 0x9F	; 159
    1142:	80 95       	com	r24
    1144:	90 81       	ld	r25, Z
    1146:	89 23       	and	r24, r25
    1148:	80 83       	st	Z, r24
    114a:	08 95       	ret

0000114c <led_update_buf_task>:
	}
}

void led_update_buf_task(void)
{
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    114c:	40 e1       	ldi	r20, 0x10	; 16
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	81 eb       	ldi	r24, 0xB1	; 177
    1152:	90 e6       	ldi	r25, 0x60	; 96
    1154:	0e 94 20 08 	call	0x1040	; 0x1040 <HC595_Write>
    1158:	08 95       	ret

0000115a <led_init>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    115a:	89 b1       	in	r24, 0x09	; 9
    115c:	8f 7b       	andi	r24, 0xBF	; 191
    115e:	89 b9       	out	0x09, r24	; 9
{
	/* 亮度控制，目前20KHz，最大0x4a,默认%45亮度 */
	// TCA0.SPLIT.HCMP0 = 33;

	LED_ON_N_set_level(0);
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    1160:	40 e1       	ldi	r20, 0x10	; 16
    1162:	62 e0       	ldi	r22, 0x02	; 2
    1164:	81 eb       	ldi	r24, 0xB1	; 177
    1166:	90 e6       	ldi	r25, 0x60	; 96
    1168:	0e 94 20 08 	call	0x1040	; 0x1040 <HC595_Write>
    116c:	08 95       	ret

0000116e <main>:
 ********************* MAIN **********************
 ************************************************/
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    116e:	0e 94 be 00 	call	0x17c	; 0x17c <atmel_start_init>
	Enable_global_interrupt();
    1172:	78 94       	sei

	// adc_init();
	led_init();
    1174:	0e 94 ad 08 	call	0x115a	; 0x115a <led_init>
	//lin_signal_x_shot_wr(SIGNAL_FL_WINDOW_CTRL,1,2);

	// soft_timer_create(50, soft_timer_touch_led_task);

	/* REAR按键软件定时器任务 */
	soft_timer_create(20, soft_timer_rear_btn_task);
    1178:	67 ee       	ldi	r22, 0xE7	; 231
    117a:	71 e0       	ldi	r23, 0x01	; 1
    117c:	84 e1       	ldi	r24, 0x14	; 20
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 a4 2a 	call	0x5548	; 0x5548 <soft_timer_create>

	/* WINDOW LOCK按键软件定时器任务 */
	soft_timer_create(20, soft_timer_window_lock_task);
    1184:	6f e1       	ldi	r22, 0x1F	; 31
    1186:	72 e0       	ldi	r23, 0x02	; 2
    1188:	84 e1       	ldi	r24, 0x14	; 20
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	0e 94 a4 2a 	call	0x5548	; 0x5548 <soft_timer_create>

	/* WINDOW 提升软件定时器任务 */
	soft_timer_create(20, soft_timer_window_task);
    1190:	6f eb       	ldi	r22, 0xBF	; 191
    1192:	74 e0       	ldi	r23, 0x04	; 4
    1194:	84 e1       	ldi	r24, 0x14	; 20
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 a4 2a 	call	0x5548	; 0x5548 <soft_timer_create>

	/* led灯光更新任务 */
	soft_timer_create(50, led_update_buf_task);
    119c:	66 ea       	ldi	r22, 0xA6	; 166
    119e:	78 e0       	ldi	r23, 0x08	; 8
    11a0:	82 e3       	ldi	r24, 0x32	; 50
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 a4 2a 	call	0x5548	; 0x5548 <soft_timer_create>

	/* lin 接收信号变量更新任务 */
	soft_timer_create(10, soft_timer_lin_signal_update_task);
    11a8:	69 e3       	ldi	r22, 0x39	; 57
    11aa:	72 e0       	ldi	r23, 0x02	; 2
    11ac:	8a e0       	ldi	r24, 0x0A	; 10
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 a4 2a 	call	0x5548	; 0x5548 <soft_timer_create>

	/* 背光亮度控制更新任务 */
	soft_timer_create(100, backlight_task);
    11b4:	67 ed       	ldi	r22, 0xD7	; 215
    11b6:	77 e0       	ldi	r23, 0x07	; 7
    11b8:	84 e6       	ldi	r24, 0x64	; 100
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 a4 2a 	call	0x5548	; 0x5548 <soft_timer_create>

	l_sys_init();
    11c0:	0e 94 02 09 	call	0x1204	; 0x1204 <l_sys_init>
	l_ifc_init(LI0);
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	0e 94 04 09 	call	0x1208	; 0x1208 <l_ifc_init>
	ld_init(LI0);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 86 21 	call	0x430c	; 0x430c <ld_init>

	/* Replace with your application code */
	while (1)
	{
		soft_timer_run();
    11d0:	0e 94 c9 2a 	call	0x5592	; 0x5592 <soft_timer_run>
		touch_process();
    11d4:	0e 94 fe 29 	call	0x53fc	; 0x53fc <touch_process>

		if (eeprom_set_boot_flg == 1)
    11d8:	80 91 2f 66 	lds	r24, 0x662F	; 0x80662f <eeprom_set_boot_flg>
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	c1 f7       	brne	.-16     	; 0x11d0 <main+0x62>
		{
			eeprom_set_boot_flg = 0;
    11e0:	10 92 2f 66 	sts	0x662F, r1	; 0x80662f <eeprom_set_boot_flg>
			FLASH_0_write_eeprom_byte(0x00, 0xaa);
    11e4:	6a ea       	ldi	r22, 0xAA	; 170
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 36 2c 	call	0x586c	; 0x586c <FLASH_0_write_eeprom_byte>
			while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    11ee:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f1002>
    11f2:	83 70       	andi	r24, 0x03	; 3
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <main+0x80>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    11f6:	41 e0       	ldi	r20, 0x01	; 1
    11f8:	68 ed       	ldi	r22, 0xD8	; 216
    11fa:	81 e4       	ldi	r24, 0x41	; 65
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <protected_write_io>
    1202:	e6 cf       	rjmp	.-52     	; 0x11d0 <main+0x62>

00001204 <l_sys_init>:
 * Implements    : l_sys_init_Activity
 *END**************************************************************************/
l_bool l_sys_init(void)
{
    return (l_bool)0;
}
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret

00001208 <l_ifc_init>:
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    static l_u8 lin_schedule_start_entry[LIN_NUM_OF_SCHD_TBL];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    l_bool ret_val;
    prot_state_ptr->diagnostic_mode = DIAG_NONE;
    1208:	96 e1       	ldi	r25, 0x16	; 22
    120a:	89 9f       	mul	r24, r25
    120c:	f0 01       	movw	r30, r0
    120e:	11 24       	eor	r1, r1
    1210:	e9 53       	subi	r30, 0x39	; 57
    1212:	f8 49       	sbci	r31, 0x98	; 152
    1214:	10 8a       	std	Z+16, r1	; 0x10

    /* Call Low level initialization function */
    ret_val = lin_lld_init(iii);
    1216:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <lin_lld_init>
        }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }

    return ret_val;
}
    121a:	08 95       	ret

0000121c <lin_update_tx_flags>:
    l_u8 flag_size;
    l_u8 i;
    l_u8 associate_frame_offset;
    const lin_frame_t * lin_frame_ptr;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frm_id]);
    121c:	2c e1       	ldi	r18, 0x1C	; 28
    121e:	82 9f       	mul	r24, r18
    1220:	c0 01       	movw	r24, r0
    1222:	11 24       	eor	r1, r1
    1224:	fc 01       	movw	r30, r24
    1226:	e8 5b       	subi	r30, 0xB8	; 184
    1228:	fc 49       	sbci	r31, 0x9C	; 156
    122a:	46 81       	ldd	r20, Z+6	; 0x06
    122c:	57 81       	ldd	r21, Z+7	; 0x07
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	fb 01       	movw	r30, r22
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	66 0f       	add	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	e6 0f       	add	r30, r22
    1244:	f7 1f       	adc	r31, r23
    1246:	e4 0f       	add	r30, r20
    1248:	f5 1f       	adc	r31, r21

    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    124a:	80 81       	ld	r24, Z
    124c:	81 11       	cpse	r24, r1
    124e:	0e c0       	rjmp	.+28     	; 0x126c <lin_update_tx_flags+0x50>
    {
        flag_offset = lin_frame_ptr->flag_offset;
    1250:	25 81       	ldd	r18, Z+5	; 0x05
    1252:	36 81       	ldd	r19, Z+6	; 0x06
        flag_size = lin_frame_ptr->flag_size;
    1254:	67 81       	ldd	r22, Z+7	; 0x07
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <lin_update_tx_flags+0x4c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU; //在这里更新flag位，整字节更新
    1258:	d9 01       	movw	r26, r18
    125a:	ab 52       	subi	r26, 0x2B	; 43
    125c:	bf 49       	sbci	r27, 0x9F	; 159
    125e:	9f ef       	ldi	r25, 0xFF	; 255
    1260:	9c 93       	st	X, r25
            flag_offset++;
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    {
        flag_offset = lin_frame_ptr->flag_offset;
        flag_size = lin_frame_ptr->flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	86 17       	cp	r24, r22
    126a:	b0 f3       	brcs	.-20     	; 0x1258 <lin_update_tx_flags+0x3c>
            flag_offset++;
        }
    }

    /* check event trigger frame and clear flag */
    if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    126c:	80 81       	ld	r24, Z
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	29 f5       	brne	.+74     	; 0x12bc <lin_update_tx_flags+0xa0>
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    1272:	00 84       	ldd	r0, Z+8	; 0x08
    1274:	f1 85       	ldd	r31, Z+9	; 0x09
    1276:	e0 2d       	mov	r30, r0
    1278:	01 80       	ldd	r0, Z+1	; 0x01
    127a:	f2 81       	ldd	r31, Z+2	; 0x02
    127c:	e0 2d       	mov	r30, r0
    127e:	80 81       	ld	r24, Z
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	fc 01       	movw	r30, r24
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	8e 0f       	add	r24, r30
    1296:	9f 1f       	adc	r25, r31
    1298:	fa 01       	movw	r30, r20
    129a:	e8 0f       	add	r30, r24
    129c:	f9 1f       	adc	r31, r25
    129e:	25 81       	ldd	r18, Z+5	; 0x05
    12a0:	36 81       	ldd	r19, Z+6	; 0x06
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
    12a2:	47 81       	ldd	r20, Z+7	; 0x07
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 c0       	rjmp	.+16     	; 0x12b8 <lin_update_tx_flags+0x9c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    12a8:	f9 01       	movw	r30, r18
    12aa:	eb 52       	subi	r30, 0x2B	; 43
    12ac:	ff 49       	sbci	r31, 0x9F	; 159
    12ae:	9f ef       	ldi	r25, 0xFF	; 255
    12b0:	90 83       	st	Z, r25
            flag_offset++;
    12b2:	2f 5f       	subi	r18, 0xFF	; 255
    12b4:	3f 4f       	sbci	r19, 0xFF	; 255
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	84 17       	cp	r24, r20
    12ba:	b0 f3       	brcs	.-20     	; 0x12a8 <lin_update_tx_flags+0x8c>
    12bc:	08 95       	ret

000012be <lin_bus_activity_timeout>:
 * Description   : This function set bus activity timeout
 *
 * Implements    : lin_bus_activity_timeout_Activity
 *END**************************************************************************/
static void lin_bus_activity_timeout(l_ifc_handle iii)
{
    12be:	cf 93       	push	r28
    12c0:	c8 2f       	mov	r28, r24
    /* Set goto sleep mode */
#if (1U == SUPPORT_SLAVE_MODE)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    12c2:	90 e0       	ldi	r25, 0x00	; 0

    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    12c4:	2c e1       	ldi	r18, 0x1C	; 28
    12c6:	28 9f       	mul	r18, r24
    12c8:	f0 01       	movw	r30, r0
    12ca:	29 9f       	mul	r18, r25
    12cc:	f0 0d       	add	r31, r0
    12ce:	11 24       	eor	r1, r1
    12d0:	e8 5b       	subi	r30, 0xB8	; 184
    12d2:	fc 49       	sbci	r31, 0x9C	; 156
    12d4:	23 81       	ldd	r18, Z+3	; 0x03
    12d6:	21 11       	cpse	r18, r1
    12d8:	11 c0       	rjmp	.+34     	; 0x12fc <lin_bus_activity_timeout+0x3e>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    12da:	2c e1       	ldi	r18, 0x1C	; 28
    12dc:	28 9f       	mul	r18, r24
    12de:	f0 01       	movw	r30, r0
    12e0:	29 9f       	mul	r18, r25
    12e2:	f0 0d       	add	r31, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	e8 5b       	subi	r30, 0xB8	; 184
    12e8:	fc 49       	sbci	r31, 0x9C	; 156
    12ea:	80 81       	ld	r24, Z
    12ec:	88 23       	and	r24, r24
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <lin_bus_activity_timeout+0x36>
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	21 f4       	brne	.+8      	; 0x12fc <lin_bus_activity_timeout+0x3e>
        {
            lin_update_word_status_lin21(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT);
    12f4:	68 e0       	ldi	r22, 0x08	; 8
    12f6:	8c 2f       	mov	r24, r28
    12f8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <lin_update_word_status_lin21>
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */

    /* Change to low power mode */
    (void)lin_lld_set_low_power_mode(iii);
    12fc:	8c 2f       	mov	r24, r28
    12fe:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <lin_lld_set_low_power_mode>
}
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <lin_get_frame_index>:
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    1306:	48 2f       	mov	r20, r24
    1308:	50 e0       	ldi	r21, 0x00	; 0

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    130a:	8c e1       	ldi	r24, 0x1C	; 28
    130c:	84 9f       	mul	r24, r20
    130e:	f0 01       	movw	r30, r0
    1310:	85 9f       	mul	r24, r21
    1312:	f0 0d       	add	r31, r0
    1314:	11 24       	eor	r1, r1
    1316:	e8 5b       	subi	r30, 0xB8	; 184
    1318:	fc 49       	sbci	r31, 0x9C	; 156
    131a:	94 81       	ldd	r25, Z+4	; 0x04
    131c:	1d c0       	rjmp	.+58     	; 0x1358 <lin_get_frame_index+0x52>
    {
        if (prot_user_config_ptr->list_identifiers_RAM_ptr[i] == id)
    131e:	2c e1       	ldi	r18, 0x1C	; 28
    1320:	24 9f       	mul	r18, r20
    1322:	f0 01       	movw	r30, r0
    1324:	25 9f       	mul	r18, r21
    1326:	f0 0d       	add	r31, r0
    1328:	11 24       	eor	r1, r1
    132a:	e8 5b       	subi	r30, 0xB8	; 184
    132c:	fc 49       	sbci	r31, 0x9C	; 156
    132e:	02 84       	ldd	r0, Z+10	; 0x0a
    1330:	f3 85       	ldd	r31, Z+11	; 0x0b
    1332:	e0 2d       	mov	r30, r0
    1334:	e9 0f       	add	r30, r25
    1336:	f1 1d       	adc	r31, r1
    1338:	20 81       	ld	r18, Z
    133a:	26 13       	cpse	r18, r22
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <lin_get_frame_index+0x50>
        {
            retVal = (l_u8)(i + prot_user_config_ptr->frame_start - 1U);
    133e:	8c e1       	ldi	r24, 0x1C	; 28
    1340:	84 9f       	mul	r24, r20
    1342:	f0 01       	movw	r30, r0
    1344:	85 9f       	mul	r24, r21
    1346:	f0 0d       	add	r31, r0
    1348:	11 24       	eor	r1, r1
    134a:	e8 5b       	subi	r30, 0xB8	; 184
    134c:	fc 49       	sbci	r31, 0x9C	; 156
    134e:	85 81       	ldd	r24, Z+5	; 0x05
    1350:	89 0f       	add	r24, r25
    1352:	81 50       	subi	r24, 0x01	; 1
            //找到一个就退出
            break;
    1354:	08 95       	ret
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    1356:	91 50       	subi	r25, 0x01	; 1
    1358:	91 11       	cpse	r25, r1
    135a:	e1 cf       	rjmp	.-62     	; 0x131e <lin_get_frame_index+0x18>
 *END**************************************************************************/
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    135c:	8f ef       	ldi	r24, 0xFF	; 255
            break;
        }
    }

    return retVal;
}
    135e:	08 95       	ret

00001360 <lin_update_tx>:
 *
 * Implements    : lin_update_tx_Activity
 *END**************************************************************************/
static void lin_update_tx(l_ifc_handle iii,
                          l_u8 id)
{
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	18 2f       	mov	r17, r24
    136e:	06 2f       	mov	r16, r22
    l_u8 frame_index; //index用来获取当前数据的号
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    1370:	c8 2f       	mov	r28, r24
    1372:	d0 e0       	ldi	r29, 0x00	; 0
    l_u16* byte_offset_temp_ptr;
    const lin_node_attribute_t * node_attr_ptr;
#endif /*((1U == SUPPORT_PROTOCOL_J2602) && (1U == SUPPORT_SLAVE_MODE)) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    1374:	86 e1       	ldi	r24, 0x16	; 22
    1376:	8c 9f       	mul	r24, r28
    1378:	f0 01       	movw	r30, r0
    137a:	8d 9f       	mul	r24, r29
    137c:	f0 0d       	add	r31, r0
    137e:	11 24       	eor	r1, r1
    1380:	e9 53       	subi	r30, 0x39	; 57
    1382:	f8 49       	sbci	r31, 0x98	; 152
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	85 83       	std	Z+5, r24	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    1388:	82 85       	ldd	r24, Z+10	; 0x0a
    138a:	8f 3f       	cpi	r24, 0xFF	; 255
    138c:	51 f0       	breq	.+20     	; 0x13a2 <lin_update_tx+0x42>
    {
        prot_state_ptr->num_of_processed_frame++;
    138e:	96 e1       	ldi	r25, 0x16	; 22
    1390:	9c 9f       	mul	r25, r28
    1392:	f0 01       	movw	r30, r0
    1394:	9d 9f       	mul	r25, r29
    1396:	f0 0d       	add	r31, r0
    1398:	11 24       	eor	r1, r1
    139a:	e9 53       	subi	r30, 0x39	; 57
    139c:	f8 49       	sbci	r31, 0x98	; 152
    139e:	8f 5f       	subi	r24, 0xFF	; 255
    13a0:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    13a2:	86 e1       	ldi	r24, 0x16	; 22
    13a4:	8c 9f       	mul	r24, r28
    13a6:	f0 01       	movw	r30, r0
    13a8:	8d 9f       	mul	r24, r29
    13aa:	f0 0d       	add	r31, r0
    13ac:	11 24       	eor	r1, r1
    13ae:	e9 53       	subi	r30, 0x39	; 57
    13b0:	f8 49       	sbci	r31, 0x98	; 152
    13b2:	82 85       	ldd	r24, Z+10	; 0x0a
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	a8 f0       	brcs	.+42     	; 0x13e2 <lin_update_tx+0x82>
    13b8:	86 e1       	ldi	r24, 0x16	; 22
    13ba:	8c 9f       	mul	r24, r28
    13bc:	f0 01       	movw	r30, r0
    13be:	8d 9f       	mul	r24, r29
    13c0:	f0 0d       	add	r31, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	e9 53       	subi	r30, 0x39	; 57
    13c6:	f8 49       	sbci	r31, 0x98	; 152
    13c8:	83 85       	ldd	r24, Z+11	; 0x0b
    13ca:	81 11       	cpse	r24, r1
    13cc:	0a c0       	rjmp	.+20     	; 0x13e2 <lin_update_tx+0x82>
    {
        prot_state_ptr->overrun_flg = 1U;
    13ce:	86 e1       	ldi	r24, 0x16	; 22
    13d0:	8c 9f       	mul	r24, r28
    13d2:	f0 01       	movw	r30, r0
    13d4:	8d 9f       	mul	r24, r29
    13d6:	f0 0d       	add	r31, r0
    13d8:	11 24       	eor	r1, r1
    13da:	e9 53       	subi	r30, 0x39	; 57
    13dc:	f8 49       	sbci	r31, 0x98	; 152
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	83 87       	std	Z+11, r24	; 0x0b
    }

    if ((bool)1U == prot_state_ptr->transmit_error_resp_sig_flg)
    13e2:	86 e1       	ldi	r24, 0x16	; 22
    13e4:	8c 9f       	mul	r24, r28
    13e6:	f0 01       	movw	r30, r0
    13e8:	8d 9f       	mul	r24, r29
    13ea:	f0 0d       	add	r31, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	e9 53       	subi	r30, 0x39	; 57
    13f0:	f8 49       	sbci	r31, 0x98	; 152
    13f2:	85 89       	ldd	r24, Z+21	; 0x15
    13f4:	88 23       	and	r24, r24
    13f6:	51 f0       	breq	.+20     	; 0x140c <lin_update_tx+0xac>
    {
        /* Set no error in response */
        prot_state_ptr->error_in_response = 0U;
    13f8:	86 e1       	ldi	r24, 0x16	; 22
    13fa:	8c 9f       	mul	r24, r28
    13fc:	f0 01       	movw	r30, r0
    13fe:	8d 9f       	mul	r24, r29
    1400:	f0 0d       	add	r31, r0
    1402:	11 24       	eor	r1, r1
    1404:	e9 53       	subi	r30, 0x39	; 57
    1406:	f8 49       	sbci	r31, 0x98	; 152
    1408:	16 82       	std	Z+6, r1	; 0x06
        prot_state_ptr->transmit_error_resp_sig_flg = (bool)0U;
    140a:	15 8a       	std	Z+21, r1	; 0x15
            (void)lin_lld_set_low_power_mode(iii);
        }
    }
#endif /* (1U == SUPPORT_MASTER_MODE) */
    /* Find frame index by pid */
    frame_index = lin_get_frame_index(iii, id);
    140c:	60 2f       	mov	r22, r16
    140e:	81 2f       	mov	r24, r17
    1410:	0e 94 83 09 	call	0x1306	; 0x1306 <lin_get_frame_index>
    1414:	e8 2e       	mov	r14, r24
    if ((((bool)LIN_MASTER == prot_user_config_ptr->function) && (0x3CU == id) && (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)) ||
    1416:	8c e1       	ldi	r24, 0x1C	; 28
    1418:	8c 9f       	mul	r24, r28
    141a:	f0 01       	movw	r30, r0
    141c:	8d 9f       	mul	r24, r29
    141e:	f0 0d       	add	r31, r0
    1420:	11 24       	eor	r1, r1
    1422:	e8 5b       	subi	r30, 0xB8	; 184
    1424:	fc 49       	sbci	r31, 0x9C	; 156
    1426:	f3 80       	ldd	r15, Z+3	; 0x03
    1428:	ff 20       	and	r15, r15
    142a:	69 f0       	breq	.+26     	; 0x1446 <lin_update_tx+0xe6>
    142c:	0c 33       	cpi	r16, 0x3C	; 60
    142e:	59 f4       	brne	.+22     	; 0x1446 <lin_update_tx+0xe6>
    1430:	86 e1       	ldi	r24, 0x16	; 22
    1432:	8c 9f       	mul	r24, r28
    1434:	f0 01       	movw	r30, r0
    1436:	8d 9f       	mul	r24, r29
    1438:	f0 0d       	add	r31, r0
    143a:	11 24       	eor	r1, r1
    143c:	e9 53       	subi	r30, 0x39	; 57
    143e:	f8 49       	sbci	r31, 0x98	; 152
    1440:	80 89       	ldd	r24, Z+16	; 0x10
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	21 f0       	breq	.+8      	; 0x144e <lin_update_tx+0xee>
    1446:	f1 10       	cpse	r15, r1
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <lin_update_tx+0xf8>
        (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (0x3DU == id)))
    144a:	0d 33       	cpi	r16, 0x3D	; 61
    144c:	29 f4       	brne	.+10     	; 0x1458 <lin_update_tx+0xf8>
    {
        /* Call transport layer callback to process TL_TX_COMPLETED event*/
        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TX_COMPLETED, id);
    144e:	40 2f       	mov	r20, r16
    1450:	62 e0       	ldi	r22, 0x02	; 2
    1452:	81 2f       	mov	r24, r17
    1454:	0e 94 80 28 	call	0x5100	; 0x5100 <lin_tl_callback_handler>
    }
    if (frame_index < LIN_NUM_OF_FRMS)
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	8e 15       	cp	r24, r14
    145c:	50 f0       	brcs	.+20     	; 0x1472 <lin_update_tx+0x112>
    {
        /* Update signal flag */
        lin_update_tx_flags(iii, frame_index);
    145e:	6e 2d       	mov	r22, r14
    1460:	81 2f       	mov	r24, r17
    1462:	0e 94 0e 09 	call	0x121c	; 0x121c <lin_update_tx_flags>
        /* Update tx frame flag */
        g_lin_frame_flag_handle_tbl[frame_index] = true;
    1466:	ee 2d       	mov	r30, r14
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ec 5c       	subi	r30, 0xCC	; 204
    146c:	f9 49       	sbci	r31, 0x99	; 153
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    1472:	f1 10       	cpse	r15, r1
    1474:	15 c0       	rjmp	.+42     	; 0x14a0 <lin_update_tx+0x140>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    1476:	8c e1       	ldi	r24, 0x1C	; 28
    1478:	8c 9f       	mul	r24, r28
    147a:	f0 01       	movw	r30, r0
    147c:	8d 9f       	mul	r24, r29
    147e:	f0 0d       	add	r31, r0
    1480:	11 24       	eor	r1, r1
    1482:	e8 5b       	subi	r30, 0xB8	; 184
    1484:	fc 49       	sbci	r31, 0x9C	; 156
    1486:	80 81       	ld	r24, Z
    1488:	88 23       	and	r24, r24
    148a:	11 f0       	breq	.+4      	; 0x1490 <lin_update_tx+0x130>
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	41 f4       	brne	.+16     	; 0x14a0 <lin_update_tx+0x140>
        {
            lin_update_err_signal(iii, frame_index);
    1490:	6e 2d       	mov	r22, r14
    1492:	81 2f       	mov	r24, r17
    1494:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <lin_update_err_signal>
            lin_update_word_status_lin21(iii, LIN_LLD_TX_COMPLETED);
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	81 2f       	mov	r24, r17
    149c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <lin_update_word_status_lin21>

    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	08 95       	ret

000014ae <lin_handle_error>:
 * Implements    : lin_handle_error_Activity
 *END**************************************************************************/
static void lin_handle_error(l_ifc_handle iii,
                             lin_lld_event_id_t event_id,
                             l_u8 id)
{
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	18 2f       	mov	r17, r24
    14bc:	06 2f       	mov	r16, r22
    14be:	e4 2e       	mov	r14, r20
#if ((1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_SLAVE_MODE))
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    14c0:	c8 2f       	mov	r28, r24
    14c2:	d0 e0       	ldi	r29, 0x00	; 0
    lin_master_data_t * master_data_ptr;
#endif /* ((1U == SUPPORT_MASTER_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))) */

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
    l_u8 frame_index;
    frame_index = lin_get_frame_index(iii, id);
    14c4:	64 2f       	mov	r22, r20
    14c6:	0e 94 83 09 	call	0x1306	; 0x1306 <lin_get_frame_index>
    14ca:	f8 2e       	mov	r15, r24
#endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */

    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    14cc:	86 e1       	ldi	r24, 0x16	; 22
    14ce:	8c 9f       	mul	r24, r28
    14d0:	f0 01       	movw	r30, r0
    14d2:	8d 9f       	mul	r24, r29
    14d4:	f0 0d       	add	r31, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	e9 53       	subi	r30, 0x39	; 57
    14da:	f8 49       	sbci	r31, 0x98	; 152
    14dc:	82 85       	ldd	r24, Z+10	; 0x0a
    14de:	8f 3f       	cpi	r24, 0xFF	; 255
    14e0:	51 f0       	breq	.+20     	; 0x14f6 <lin_handle_error+0x48>
    {
        prot_state_ptr->num_of_processed_frame++;
    14e2:	96 e1       	ldi	r25, 0x16	; 22
    14e4:	9c 9f       	mul	r25, r28
    14e6:	f0 01       	movw	r30, r0
    14e8:	9d 9f       	mul	r25, r29
    14ea:	f0 0d       	add	r31, r0
    14ec:	11 24       	eor	r1, r1
    14ee:	e9 53       	subi	r30, 0x39	; 57
    14f0:	f8 49       	sbci	r31, 0x98	; 152
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    14f6:	86 e1       	ldi	r24, 0x16	; 22
    14f8:	8c 9f       	mul	r24, r28
    14fa:	f0 01       	movw	r30, r0
    14fc:	8d 9f       	mul	r24, r29
    14fe:	f0 0d       	add	r31, r0
    1500:	11 24       	eor	r1, r1
    1502:	e9 53       	subi	r30, 0x39	; 57
    1504:	f8 49       	sbci	r31, 0x98	; 152
    1506:	82 85       	ldd	r24, Z+10	; 0x0a
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	a8 f0       	brcs	.+42     	; 0x1536 <lin_handle_error+0x88>
    150c:	86 e1       	ldi	r24, 0x16	; 22
    150e:	8c 9f       	mul	r24, r28
    1510:	f0 01       	movw	r30, r0
    1512:	8d 9f       	mul	r24, r29
    1514:	f0 0d       	add	r31, r0
    1516:	11 24       	eor	r1, r1
    1518:	e9 53       	subi	r30, 0x39	; 57
    151a:	f8 49       	sbci	r31, 0x98	; 152
    151c:	83 85       	ldd	r24, Z+11	; 0x0b
    151e:	81 11       	cpse	r24, r1
    1520:	0a c0       	rjmp	.+20     	; 0x1536 <lin_handle_error+0x88>
    {
        prot_state_ptr->overrun_flg = 1U;
    1522:	86 e1       	ldi	r24, 0x16	; 22
    1524:	8c 9f       	mul	r24, r28
    1526:	f0 01       	movw	r30, r0
    1528:	8d 9f       	mul	r24, r29
    152a:	f0 0d       	add	r31, r0
    152c:	11 24       	eor	r1, r1
    152e:	e9 53       	subi	r30, 0x39	; 57
    1530:	f8 49       	sbci	r31, 0x98	; 152
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	83 87       	std	Z+11, r24	; 0x0b
    }

    switch (event_id)
    1536:	8c ef       	ldi	r24, 0xFC	; 252
    1538:	80 0f       	add	r24, r16
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	80 f5       	brcc	.+96     	; 0x159e <lin_handle_error+0xf0>
        case LIN_LLD_NODATA_TIMEOUT:
        #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
            /* Check if frame type is event trigger */
            /* Find the corresponding frame */

            if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    153e:	8c e1       	ldi	r24, 0x1C	; 28
    1540:	8c 9f       	mul	r24, r28
    1542:	f0 01       	movw	r30, r0
    1544:	8d 9f       	mul	r24, r29
    1546:	f0 0d       	add	r31, r0
    1548:	11 24       	eor	r1, r1
    154a:	e8 5b       	subi	r30, 0xB8	; 184
    154c:	fc 49       	sbci	r31, 0x9C	; 156
    154e:	26 81       	ldd	r18, Z+6	; 0x06
    1550:	37 81       	ldd	r19, Z+7	; 0x07
    1552:	8f 2d       	mov	r24, r15
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	fc 01       	movw	r30, r24
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	8e 0f       	add	r24, r30
    156a:	9f 1f       	adc	r25, r31
    156c:	f9 01       	movw	r30, r18
    156e:	e8 0f       	add	r30, r24
    1570:	f9 1f       	adc	r31, r25
    1572:	80 81       	ld	r24, Z
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	99 f0       	breq	.+38     	; 0x159e <lin_handle_error+0xf0>
            }
            else
        #endif  /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */
            {
                /* Set response error */
                prot_state_ptr->error_in_response = 1U;
    1578:	86 e1       	ldi	r24, 0x16	; 22
    157a:	8c 9f       	mul	r24, r28
    157c:	f0 01       	movw	r30, r0
    157e:	8d 9f       	mul	r24, r29
    1580:	f0 0d       	add	r31, r0
    1582:	11 24       	eor	r1, r1
    1584:	e9 53       	subi	r30, 0x39	; 57
    1586:	f8 49       	sbci	r31, 0x98	; 152
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	86 83       	std	Z+6, r24	; 0x06
                /* TL support */
                if ((0x3CU == id) || (0x3DU == id))
    158c:	84 ec       	ldi	r24, 0xC4	; 196
    158e:	8e 0d       	add	r24, r14
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	28 f4       	brcc	.+10     	; 0x159e <lin_handle_error+0xf0>
                {
                    /* Call transport layer callback to handle TL_ERROR */
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_ERROR, id);
    1594:	4e 2d       	mov	r20, r14
    1596:	64 e0       	ldi	r22, 0x04	; 4
    1598:	81 2f       	mov	r24, r17
    159a:	0e 94 80 28 	call	0x5100	; 0x5100 <lin_tl_callback_handler>
            break;
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    159e:	8c e1       	ldi	r24, 0x1C	; 28
    15a0:	8c 9f       	mul	r24, r28
    15a2:	f0 01       	movw	r30, r0
    15a4:	8d 9f       	mul	r24, r29
    15a6:	f0 0d       	add	r31, r0
    15a8:	11 24       	eor	r1, r1
    15aa:	e8 5b       	subi	r30, 0xB8	; 184
    15ac:	fc 49       	sbci	r31, 0x9C	; 156
    15ae:	83 81       	ldd	r24, Z+3	; 0x03
    15b0:	81 11       	cpse	r24, r1
    15b2:	20 c0       	rjmp	.+64     	; 0x15f4 <lin_handle_error+0x146>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    15b4:	8c e1       	ldi	r24, 0x1C	; 28
    15b6:	8c 9f       	mul	r24, r28
    15b8:	f0 01       	movw	r30, r0
    15ba:	8d 9f       	mul	r24, r29
    15bc:	f0 0d       	add	r31, r0
    15be:	11 24       	eor	r1, r1
    15c0:	e8 5b       	subi	r30, 0xB8	; 184
    15c2:	fc 49       	sbci	r31, 0x9C	; 156
    15c4:	80 81       	ld	r24, Z
    15c6:	88 23       	and	r24, r24
    15c8:	11 f0       	breq	.+4      	; 0x15ce <lin_handle_error+0x120>
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	99 f4       	brne	.+38     	; 0x15f4 <lin_handle_error+0x146>
        {
            if (prot_state_ptr->error_in_response == 1U)
    15ce:	86 e1       	ldi	r24, 0x16	; 22
    15d0:	8c 9f       	mul	r24, r28
    15d2:	f0 01       	movw	r30, r0
    15d4:	8d 9f       	mul	r24, r29
    15d6:	f0 0d       	add	r31, r0
    15d8:	11 24       	eor	r1, r1
    15da:	e9 53       	subi	r30, 0x39	; 57
    15dc:	f8 49       	sbci	r31, 0x98	; 152
    15de:	86 81       	ldd	r24, Z+6	; 0x06
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	21 f4       	brne	.+8      	; 0x15ec <lin_handle_error+0x13e>
            {
                lin_update_err_signal(iii, frame_index);
    15e4:	6f 2d       	mov	r22, r15
    15e6:	81 2f       	mov	r24, r17
    15e8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <lin_update_err_signal>
            }
            lin_update_word_status_lin21(iii, event_id);
    15ec:	60 2f       	mov	r22, r16
    15ee:	81 2f       	mov	r24, r17
    15f0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <lin_update_word_status_lin21>
            lin_update_word_status_j2602(iii);
        }
    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }
#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <lin_process_uncd_frame>:
 * Implements    : lin_process_uncd_frame_Activity
 *END**************************************************************************/
void lin_process_uncd_frame(l_ifc_handle iii,
                            l_u8 id,
                            l_u8 type)
{
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	16 2f       	mov	r17, r22
    160c:	04 2f       	mov	r16, r20
    l_u8 frame_index;
    l_u8 * response_buffer_ptr;
    l_u16 frame_byte_offset;
    l_u8 i;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    160e:	c8 2f       	mov	r28, r24
    1610:	d0 e0       	ldi	r29, 0x00	; 0
    l_u8 flag;
#endif /* (1U == SUPPORT_SLAVE_MODE) */
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */
    frame_index = lin_get_frame_index(iii, id);
    1612:	0e 94 83 09 	call	0x1306	; 0x1306 <lin_get_frame_index>

    if (0xFFU != frame_index)
    1616:	8f 3f       	cpi	r24, 0xFF	; 255
    1618:	09 f4       	brne	.+2      	; 0x161c <lin_process_uncd_frame+0x1a>
    161a:	bb c0       	rjmp	.+374    	; 0x1792 <lin_process_uncd_frame+0x190>
    {
        response_buffer_ptr = prot_state_ptr->response_buffer_ptr;
    161c:	96 e1       	ldi	r25, 0x16	; 22
    161e:	9c 9f       	mul	r25, r28
    1620:	d0 01       	movw	r26, r0
    1622:	9d 9f       	mul	r25, r29
    1624:	b0 0d       	add	r27, r0
    1626:	11 24       	eor	r1, r1
    1628:	a9 53       	subi	r26, 0x39	; 57
    162a:	b8 49       	sbci	r27, 0x98	; 152
    162c:	12 96       	adiw	r26, 0x02	; 2
    162e:	4d 91       	ld	r20, X+
    1630:	5c 91       	ld	r21, X
    1632:	13 97       	sbiw	r26, 0x03	; 3

        /* Set frame length */
        prot_state_ptr->response_length = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_len;  // 长度参数也需要考虑在内
    1634:	9c e1       	ldi	r25, 0x1C	; 28
    1636:	9c 9f       	mul	r25, r28
    1638:	f0 01       	movw	r30, r0
    163a:	9d 9f       	mul	r25, r29
    163c:	f0 0d       	add	r31, r0
    163e:	11 24       	eor	r1, r1
    1640:	e8 5b       	subi	r30, 0xB8	; 184
    1642:	fc 49       	sbci	r31, 0x9C	; 156
    1644:	66 81       	ldd	r22, Z+6	; 0x06
    1646:	77 81       	ldd	r23, Z+7	; 0x07
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	f9 01       	movw	r30, r18
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	22 0f       	add	r18, r18
    1654:	33 1f       	adc	r19, r19
    1656:	22 0f       	add	r18, r18
    1658:	33 1f       	adc	r19, r19
    165a:	22 0f       	add	r18, r18
    165c:	33 1f       	adc	r19, r19
    165e:	2e 0f       	add	r18, r30
    1660:	3f 1f       	adc	r19, r31
    1662:	fb 01       	movw	r30, r22
    1664:	e2 0f       	add	r30, r18
    1666:	f3 1f       	adc	r31, r19
    1668:	31 81       	ldd	r19, Z+1	; 0x01
    166a:	14 96       	adiw	r26, 0x04	; 4
    166c:	3c 93       	st	X, r19
        frame_byte_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_offset;             // frm_offset是啥意思
    166e:	63 81       	ldd	r22, Z+3	; 0x03
    1670:	74 81       	ldd	r23, Z+4	; 0x04

        /* Make unconditional frame */                                                               //
        if (MAKE_UNCONDITIONAL_FRAME == type)                                                        
    1672:	01 11       	cpse	r16, r1
    1674:	72 c0       	rjmp	.+228    	; 0x175a <lin_process_uncd_frame+0x158>
        {
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    1676:	9c 9f       	mul	r25, r28
    1678:	f0 01       	movw	r30, r0
    167a:	9d 9f       	mul	r25, r29
    167c:	f0 0d       	add	r31, r0
    167e:	11 24       	eor	r1, r1
    1680:	e8 5b       	subi	r30, 0xB8	; 184
    1682:	fc 49       	sbci	r31, 0x9C	; 156
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	91 11       	cpse	r25, r1
    1688:	84 c0       	rjmp	.+264    	; 0x1792 <lin_process_uncd_frame+0x190>
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    168a:	9c e1       	ldi	r25, 0x1C	; 28
    168c:	9c 9f       	mul	r25, r28
    168e:	f0 01       	movw	r30, r0
    1690:	9d 9f       	mul	r25, r29
    1692:	f0 0d       	add	r31, r0
    1694:	11 24       	eor	r1, r1
    1696:	e8 5b       	subi	r30, 0xB8	; 184
    1698:	fc 49       	sbci	r31, 0x9C	; 156
    169a:	22 89       	ldd	r18, Z+18	; 0x12
    169c:	30 e0       	ldi	r19, 0x00	; 0

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	1c c0       	rjmp	.+56     	; 0x16da <lin_process_uncd_frame+0xd8>
                {
                    /* Check if frame contain error signal */
                    if (id == node_attr_ptr->resp_err_frm_id_ptr[i])
    16a2:	a4 e2       	ldi	r26, 0x24	; 36
    16a4:	a2 9f       	mul	r26, r18
    16a6:	f0 01       	movw	r30, r0
    16a8:	a3 9f       	mul	r26, r19
    16aa:	f0 0d       	add	r31, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	ec 59       	subi	r30, 0x9C	; 156
    16b0:	fc 49       	sbci	r31, 0x9C	; 156
    16b2:	04 84       	ldd	r0, Z+12	; 0x0c
    16b4:	f5 85       	ldd	r31, Z+13	; 0x0d
    16b6:	e0 2d       	mov	r30, r0
    16b8:	e9 0f       	add	r30, r25
    16ba:	f1 1d       	adc	r31, r1
    16bc:	e0 81       	ld	r30, Z
    16be:	1e 13       	cpse	r17, r30
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <lin_process_uncd_frame+0xd6>
                    {
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
    16c2:	96 e1       	ldi	r25, 0x16	; 22
    16c4:	9c 9f       	mul	r25, r28
    16c6:	f0 01       	movw	r30, r0
    16c8:	9d 9f       	mul	r25, r29
    16ca:	f0 0d       	add	r31, r0
    16cc:	11 24       	eor	r1, r1
    16ce:	e9 53       	subi	r30, 0x39	; 57
    16d0:	f8 49       	sbci	r31, 0x98	; 152
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	95 8b       	std	Z+21, r25	; 0x15
                        break;
    16d6:	0c c0       	rjmp	.+24     	; 0x16f0 <lin_process_uncd_frame+0xee>
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    16d8:	9f 5f       	subi	r25, 0xFF	; 255
    16da:	a4 e2       	ldi	r26, 0x24	; 36
    16dc:	a2 9f       	mul	r26, r18
    16de:	f0 01       	movw	r30, r0
    16e0:	a3 9f       	mul	r26, r19
    16e2:	f0 0d       	add	r31, r0
    16e4:	11 24       	eor	r1, r1
    16e6:	ec 59       	subi	r30, 0x9C	; 156
    16e8:	fc 49       	sbci	r31, 0x9C	; 156
    16ea:	e6 85       	ldd	r30, Z+14	; 0x0e
    16ec:	9e 17       	cp	r25, r30
    16ee:	c8 f2       	brcs	.-78     	; 0x16a2 <lin_process_uncd_frame+0xa0>
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
                        break;
                    }
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];
    16f0:	e8 2f       	mov	r30, r24
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	e0 5d       	subi	r30, 0xD0	; 208
    16f6:	f9 49       	sbci	r31, 0x99	; 153
    16f8:	a0 81       	ld	r26, Z

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	22 c0       	rjmp	.+68     	; 0x1742 <lin_process_uncd_frame+0x140>
                {
                    if((flag & (1U << i)) != 0U)
    16fe:	e8 2f       	mov	r30, r24
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	2a 2f       	mov	r18, r26
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	08 2e       	mov	r0, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <lin_process_uncd_frame+0x10c>
    170a:	36 95       	lsr	r19
    170c:	27 95       	ror	r18
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <lin_process_uncd_frame+0x108>
    1712:	20 ff       	sbrs	r18, 0
    1714:	08 c0       	rjmp	.+16     	; 0x1726 <lin_process_uncd_frame+0x124>
                    {
                        response_buffer_ptr[i] = g_buffer_backup_data[i];
    1716:	e8 5c       	subi	r30, 0xC8	; 200
    1718:	f9 49       	sbci	r31, 0x99	; 153
    171a:	90 81       	ld	r25, Z
    171c:	fa 01       	movw	r30, r20
    171e:	e8 0f       	add	r30, r24
    1720:	f1 1d       	adc	r31, r1
    1722:	90 83       	st	Z, r25
    1724:	0d c0       	rjmp	.+26     	; 0x1740 <lin_process_uncd_frame+0x13e>
                    }
                    else
                    {
                        response_buffer_ptr[i] = g_lin_frame_data_buffer[frame_byte_offset + i];
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	8a 01       	movw	r16, r20
    172c:	02 0f       	add	r16, r18
    172e:	13 1f       	adc	r17, r19
    1730:	26 0f       	add	r18, r22
    1732:	37 1f       	adc	r19, r23
    1734:	f9 01       	movw	r30, r18
    1736:	e8 52       	subi	r30, 0x28	; 40
    1738:	ff 49       	sbci	r31, 0x9F	; 159
    173a:	90 81       	ld	r25, Z
    173c:	f8 01       	movw	r30, r16
    173e:	90 83       	st	Z, r25
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	96 e1       	ldi	r25, 0x16	; 22
    1744:	9c 9f       	mul	r25, r28
    1746:	f0 01       	movw	r30, r0
    1748:	9d 9f       	mul	r25, r29
    174a:	f0 0d       	add	r31, r0
    174c:	11 24       	eor	r1, r1
    174e:	e9 53       	subi	r30, 0x39	; 57
    1750:	f8 49       	sbci	r31, 0x98	; 152
    1752:	94 81       	ldd	r25, Z+4	; 0x04
    1754:	89 17       	cp	r24, r25
    1756:	98 f2       	brcs	.-90     	; 0x16fe <lin_process_uncd_frame+0xfc>
    1758:	1c c0       	rjmp	.+56     	; 0x1792 <lin_process_uncd_frame+0x190>
            }
        }
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    175a:	8c e1       	ldi	r24, 0x1C	; 28
    175c:	8c 9f       	mul	r24, r28
    175e:	f0 01       	movw	r30, r0
    1760:	8d 9f       	mul	r24, r29
    1762:	f0 0d       	add	r31, r0
    1764:	11 24       	eor	r1, r1
    1766:	e8 5b       	subi	r30, 0xB8	; 184
    1768:	fc 49       	sbci	r31, 0x9C	; 156
    176a:	83 81       	ldd	r24, Z+3	; 0x03
    176c:	81 11       	cpse	r24, r1
    176e:	11 c0       	rjmp	.+34     	; 0x1792 <lin_process_uncd_frame+0x190>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	0d c0       	rjmp	.+26     	; 0x178e <lin_process_uncd_frame+0x18c>
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
                {
                    g_lin_frame_data_buffer[frame_byte_offset + i] = response_buffer_ptr[i];
    1774:	82 2f       	mov	r24, r18
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	fb 01       	movw	r30, r22
    177a:	e8 0f       	add	r30, r24
    177c:	f9 1f       	adc	r31, r25
    177e:	da 01       	movw	r26, r20
    1780:	a8 0f       	add	r26, r24
    1782:	b9 1f       	adc	r27, r25
    1784:	8c 91       	ld	r24, X
    1786:	e8 52       	subi	r30, 0x28	; 40
    1788:	ff 49       	sbci	r31, 0x9F	; 159
    178a:	80 83       	st	Z, r24
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    178c:	2f 5f       	subi	r18, 0xFF	; 255
    178e:	23 17       	cp	r18, r19
    1790:	88 f3       	brcs	.-30     	; 0x1774 <lin_process_uncd_frame+0x172>
                }
            }
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }
    }
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <lin_process_id>:
 *
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	1f 92       	push	r1
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	b8 2e       	mov	r11, r24
    17b8:	a6 2e       	mov	r10, r22
    l_u16 flag_offset;
    l_u8 flag_size;
    l_u8 i;
#endif /* ((1U == SUPPORT_SLAVE_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))) */

    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];                              //获取用户协议配置信息
    17ba:	e8 2e       	mov	r14, r24
    17bc:	f1 2c       	mov	r15, r1
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];                                                   //获取协议

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    17be:	0e 94 83 09 	call	0x1306	; 0x1306 <lin_get_frame_index>
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    17c2:	9c e1       	ldi	r25, 0x1C	; 28
    17c4:	9e 9d       	mul	r25, r14
    17c6:	f0 01       	movw	r30, r0
    17c8:	9f 9d       	mul	r25, r15
    17ca:	f0 0d       	add	r31, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	e8 5b       	subi	r30, 0xB8	; 184
    17d0:	fc 49       	sbci	r31, 0x9C	; 156
    17d2:	c6 80       	ldd	r12, Z+6	; 0x06
    17d4:	d7 80       	ldd	r13, Z+7	; 0x07
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	89 01       	movw	r16, r18
    17dc:	00 0f       	add	r16, r16
    17de:	11 1f       	adc	r17, r17
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	22 0f       	add	r18, r18
    17e6:	33 1f       	adc	r19, r19
    17e8:	22 0f       	add	r18, r18
    17ea:	33 1f       	adc	r19, r19
    17ec:	02 0f       	add	r16, r18
    17ee:	13 1f       	adc	r17, r19
    17f0:	0c 0d       	add	r16, r12
    17f2:	1d 1d       	adc	r17, r13
    if (0xFFU != frame_index)
    17f4:	8f 3f       	cpi	r24, 0xFF	; 255
    17f6:	09 f4       	brne	.+2      	; 0x17fa <lin_process_id+0x5e>
    17f8:	b9 c0       	rjmp	.+370    	; 0x196c <lin_process_id+0x1d0>
    {
        action = 1U;
        prot_state_ptr->last_pid = lin_process_parity(id,MAKE_PARITY);                      //判断pid校验是否正确
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	8a 2d       	mov	r24, r10
    17fe:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <lin_process_parity>
    1802:	96 e1       	ldi	r25, 0x16	; 22
    1804:	9e 9d       	mul	r25, r14
    1806:	f0 01       	movw	r30, r0
    1808:	9f 9d       	mul	r25, r15
    180a:	f0 0d       	add	r31, r0
    180c:	11 24       	eor	r1, r1
    180e:	e9 53       	subi	r30, 0x39	; 57
    1810:	f8 49       	sbci	r31, 0x98	; 152
    1812:	81 87       	std	Z+9, r24	; 0x09
        /* PID belongs to this node, then check type of frame */
        switch (lin_frame_ptr->frm_type)                                                
    1814:	d8 01       	movw	r26, r16
    1816:	8c 91       	ld	r24, X
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	81 f0       	breq	.+32     	; 0x183c <lin_process_id+0xa0>
    181c:	20 f0       	brcs	.+8      	; 0x1826 <lin_process_id+0x8a>
    181e:	81 31       	cpi	r24, 0x11	; 17
    1820:	09 f4       	brne	.+2      	; 0x1824 <lin_process_id+0x88>
    1822:	70 c0       	rjmp	.+224    	; 0x1904 <lin_process_id+0x168>
    1824:	a5 c0       	rjmp	.+330    	; 0x1970 <lin_process_id+0x1d4>
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    1826:	f8 01       	movw	r30, r16
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	81 11       	cpse	r24, r1
    182c:	a3 c0       	rjmp	.+326    	; 0x1974 <lin_process_id+0x1d8>
                {
                    lin_process_uncd_frame(iii, id, MAKE_UNCONDITIONAL_FRAME);
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	6a 2d       	mov	r22, r10
    1832:	8b 2d       	mov	r24, r11
    1834:	0e 94 01 0b 	call	0x1602	; 0x1602 <lin_process_uncd_frame>
                    /* Set response */
                    action = 2U;
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	a5 c0       	rjmp	.+330    	; 0x1986 <lin_process_id+0x1ea>
                }
                break;
            #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    183c:	8c e1       	ldi	r24, 0x1C	; 28
    183e:	8e 9d       	mul	r24, r14
    1840:	f0 01       	movw	r30, r0
    1842:	8f 9d       	mul	r24, r15
    1844:	f0 0d       	add	r31, r0
    1846:	11 24       	eor	r1, r1
    1848:	e8 5b       	subi	r30, 0xB8	; 184
    184a:	fc 49       	sbci	r31, 0x9C	; 156
    184c:	83 81       	ldd	r24, Z+3	; 0x03
    184e:	81 11       	cpse	r24, r1
    1850:	93 c0       	rjmp	.+294    	; 0x1978 <lin_process_id+0x1dc>
                }
            #if (1U == SUPPORT_SLAVE_MODE)
                else
                {
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    1852:	d8 01       	movw	r26, r16
    1854:	18 96       	adiw	r26, 0x08	; 8
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	19 97       	sbiw	r26, 0x09	; 9
    185c:	01 80       	ldd	r0, Z+1	; 0x01
    185e:	f2 81       	ldd	r31, Z+2	; 0x02
    1860:	e0 2d       	mov	r30, r0
    1862:	80 81       	ld	r24, Z
    1864:	89 83       	std	Y+1, r24	; 0x01
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	fc 01       	movw	r30, r24
    186c:	ee 0f       	add	r30, r30
    186e:	ff 1f       	adc	r31, r31
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	e8 0f       	add	r30, r24
    187e:	f9 1f       	adc	r31, r25
    1880:	ec 0d       	add	r30, r12
    1882:	fd 1d       	adc	r31, r13
    1884:	85 81       	ldd	r24, Z+5	; 0x05
    1886:	96 81       	ldd	r25, Z+6	; 0x06
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
    1888:	29 81       	ldd	r18, Y+1	; 0x01
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	a9 01       	movw	r20, r18
    188e:	44 0f       	add	r20, r20
    1890:	55 1f       	adc	r21, r21
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	22 0f       	add	r18, r18
    1898:	33 1f       	adc	r19, r19
    189a:	22 0f       	add	r18, r18
    189c:	33 1f       	adc	r19, r19
    189e:	24 0f       	add	r18, r20
    18a0:	35 1f       	adc	r19, r21
    18a2:	f6 01       	movw	r30, r12
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
    18a8:	37 81       	ldd	r19, Z+7	; 0x07
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	27 c0       	rjmp	.+78     	; 0x18fc <lin_process_id+0x160>
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    18ae:	ac 01       	movw	r20, r24
    18b0:	4f 5f       	subi	r20, 0xFF	; 255
    18b2:	5f 4f       	sbci	r21, 0xFF	; 255
    18b4:	fc 01       	movw	r30, r24
    18b6:	eb 52       	subi	r30, 0x2B	; 43
    18b8:	ff 49       	sbci	r31, 0x9F	; 159
    18ba:	80 81       	ld	r24, Z
    18bc:	8f 3f       	cpi	r24, 0xFF	; 255
    18be:	e1 f0       	breq	.+56     	; 0x18f8 <lin_process_id+0x15c>
                        {
                            /* Frame is updated */
                            lin_make_res_evnt_frame(iii, prot_user_config_ptr->list_identifiers_RAM_ptr[1U + associate_frame - prot_user_config_ptr->frame_start]);
    18c0:	8c e1       	ldi	r24, 0x1C	; 28
    18c2:	8e 9d       	mul	r24, r14
    18c4:	d0 01       	movw	r26, r0
    18c6:	8f 9d       	mul	r24, r15
    18c8:	b0 0d       	add	r27, r0
    18ca:	11 24       	eor	r1, r1
    18cc:	a8 5b       	subi	r26, 0xB8	; 184
    18ce:	bc 49       	sbci	r27, 0x9C	; 156
    18d0:	1a 96       	adiw	r26, 0x0a	; 10
    18d2:	2d 91       	ld	r18, X+
    18d4:	3c 91       	ld	r19, X
    18d6:	1b 97       	sbiw	r26, 0x0b	; 11
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	15 96       	adiw	r26, 0x05	; 5
    18dc:	9c 91       	ld	r25, X
    18de:	e8 2f       	mov	r30, r24
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	e9 1b       	sub	r30, r25
    18e4:	f1 09       	sbc	r31, r1
    18e6:	31 96       	adiw	r30, 0x01	; 1
    18e8:	e2 0f       	add	r30, r18
    18ea:	f3 1f       	adc	r31, r19
    18ec:	60 81       	ld	r22, Z
    18ee:	8b 2d       	mov	r24, r11
    18f0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <lin_make_res_evnt_frame>
                            /* Set response */
                            action = 2U;
    18f4:	82 e0       	ldi	r24, 0x02	; 2
                            break;
    18f6:	47 c0       	rjmp	.+142    	; 0x1986 <lin_process_id+0x1ea>
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    18f8:	2f 5f       	subi	r18, 0xFF	; 255
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    18fa:	ca 01       	movw	r24, r20
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    18fc:	23 17       	cp	r18, r19
    18fe:	b8 f2       	brcs	.-82     	; 0x18ae <lin_process_id+0x112>

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    if (0xFFU != frame_index)
    {
        action = 1U;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	41 c0       	rjmp	.+130    	; 0x1986 <lin_process_id+0x1ea>
                break;
            #endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13)) */

            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
    1904:	8c e1       	ldi	r24, 0x1C	; 28
    1906:	8e 9d       	mul	r24, r14
    1908:	f0 01       	movw	r30, r0
    190a:	8f 9d       	mul	r24, r15
    190c:	f0 0d       	add	r31, r0
    190e:	11 24       	eor	r1, r1
    1910:	e8 5b       	subi	r30, 0xB8	; 184
    1912:	fc 49       	sbci	r31, 0x9C	; 156
    1914:	80 81       	ld	r24, Z
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	89 f1       	breq	.+98     	; 0x197c <lin_process_id+0x1e0>
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    191a:	f8 01       	movw	r30, r16
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	81 11       	cpse	r24, r1
    1920:	1e c0       	rjmp	.+60     	; 0x195e <lin_process_id+0x1c2>
                    {
                        action = 2U;
                        if (0x3CU == id)
    1922:	fc e3       	ldi	r31, 0x3C	; 60
    1924:	af 12       	cpse	r10, r31
    1926:	12 c0       	rjmp	.+36     	; 0x194c <lin_process_id+0x1b0>
                        {
                            if (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)
    1928:	86 e1       	ldi	r24, 0x16	; 22
    192a:	8e 9d       	mul	r24, r14
    192c:	f0 01       	movw	r30, r0
    192e:	8f 9d       	mul	r24, r15
    1930:	f0 0d       	add	r31, r0
    1932:	11 24       	eor	r1, r1
    1934:	e9 53       	subi	r30, 0x39	; 57
    1936:	f8 49       	sbci	r31, 0x98	; 152
    1938:	80 89       	ldd	r24, Z+16	; 0x10
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	09 f5       	brne	.+66     	; 0x1980 <lin_process_id+0x1e4>
                            {
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
    193e:	4a 2d       	mov	r20, r10
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	8b 2d       	mov	r24, r11
    1944:	0e 94 80 28 	call	0x5100	; 0x5100 <lin_tl_callback_handler>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	1d c0       	rjmp	.+58     	; 0x1986 <lin_process_id+0x1ea>
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
                            }
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
    194c:	4a 2d       	mov	r20, r10
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	8b 2d       	mov	r24, r11
    1952:	0e 94 80 28 	call	0x5100	; 0x5100 <lin_tl_callback_handler>
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	a9 f0       	breq	.+42     	; 0x1984 <lin_process_id+0x1e8>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	14 c0       	rjmp	.+40     	; 0x1986 <lin_process_id+0x1ea>
                            }
                        }
                    }
                    else
                    {
                        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RECEIVE_MESSAGE, id);
    195e:	4a 2d       	mov	r20, r10
    1960:	67 e0       	ldi	r22, 0x07	; 7
    1962:	8b 2d       	mov	r24, r11
    1964:	0e 94 80 28 	call	0x5100	; 0x5100 <lin_tl_callback_handler>
                        /* Rx response */
                        action = 1U;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <lin_process_id+0x1ea>
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    l_u8 action = 0U;
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0b c0       	rjmp	.+22     	; 0x1986 <lin_process_id+0x1ea>

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    if (0xFFU != frame_index)
    {
        action = 1U;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <lin_process_id+0x1ea>
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <lin_process_id+0x1ea>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
                {
                    /* Rx response */
                    action = 1U;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <lin_process_id+0x1ea>
                        action = 1U;
                    }
                }
                else
                {
                    action = 0U;
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <lin_process_id+0x1ea>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <lin_process_id+0x1ea>
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
                            {
                                action = 0U;
    1984:	80 e0       	ldi	r24, 0x00	; 0
                /* do nothing */
                break;
        }
    }

    switch (action)
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	19 f0       	breq	.+6      	; 0x1990 <lin_process_id+0x1f4>
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	41 f0       	breq	.+16     	; 0x199e <lin_process_id+0x202>
    198e:	0d c0       	rjmp	.+26     	; 0x19aa <lin_process_id+0x20e>
    {
        case 1U:
            /* Receive response */
            (void)lin_lld_rx_response(iii, lin_frame_ptr->frm_len);
    1990:	d8 01       	movw	r26, r16
    1992:	11 96       	adiw	r26, 0x01	; 1
    1994:	6c 91       	ld	r22, X
    1996:	8b 2d       	mov	r24, r11
    1998:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <lin_lld_rx_response>
            break;
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <lin_process_id+0x214>
        case 2U:
            /* Set response */
            (void)lin_lld_set_response(iii, lin_frame_ptr->frm_len);
    199e:	f8 01       	movw	r30, r16
    19a0:	61 81       	ldd	r22, Z+1	; 0x01
    19a2:	8b 2d       	mov	r24, r11
    19a4:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <lin_lld_set_response>
            break;
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <lin_process_id+0x214>
        default:
            /* ignore response */
            (void)lin_lld_ignore_response(iii);
    19aa:	8b 2d       	mov	r24, r11
    19ac:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <lin_lld_ignore_response>
            break;
    }
}
    19b0:	0f 90       	pop	r0
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	cf 90       	pop	r12
    19c2:	bf 90       	pop	r11
    19c4:	af 90       	pop	r10
    19c6:	08 95       	ret

000019c8 <lin_update_rx>:
 *
 * Implements    : lin_update_rx_Activity
 *END**************************************************************************/
static void lin_update_rx(l_ifc_handle iii,
                          l_u8 id)
{
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	f8 2e       	mov	r15, r24
    19d8:	d6 2e       	mov	r13, r22
    l_u8 frame_index, flag_size, i, associate_id;
    l_u16 flag_offset;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    19da:	c8 2f       	mov	r28, r24
    19dc:	d0 e0       	ldi	r29, 0x00	; 0
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    19de:	86 e1       	ldi	r24, 0x16	; 22
    19e0:	8c 9f       	mul	r24, r28
    19e2:	f0 01       	movw	r30, r0
    19e4:	8d 9f       	mul	r24, r29
    19e6:	f0 0d       	add	r31, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	e9 53       	subi	r30, 0x39	; 57
    19ec:	f8 49       	sbci	r31, 0x98	; 152
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	85 83       	std	Z+5, r24	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    19f2:	82 85       	ldd	r24, Z+10	; 0x0a
    19f4:	8f 3f       	cpi	r24, 0xFF	; 255
    19f6:	51 f0       	breq	.+20     	; 0x1a0c <lin_update_rx+0x44>
    {
        prot_state_ptr->num_of_processed_frame++; 
    19f8:	96 e1       	ldi	r25, 0x16	; 22
    19fa:	9c 9f       	mul	r25, r28
    19fc:	f0 01       	movw	r30, r0
    19fe:	9d 9f       	mul	r25, r29
    1a00:	f0 0d       	add	r31, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	e9 53       	subi	r30, 0x39	; 57
    1a06:	f8 49       	sbci	r31, 0x98	; 152
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    1a0c:	86 e1       	ldi	r24, 0x16	; 22
    1a0e:	8c 9f       	mul	r24, r28
    1a10:	f0 01       	movw	r30, r0
    1a12:	8d 9f       	mul	r24, r29
    1a14:	f0 0d       	add	r31, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	e9 53       	subi	r30, 0x39	; 57
    1a1a:	f8 49       	sbci	r31, 0x98	; 152
    1a1c:	82 85       	ldd	r24, Z+10	; 0x0a
    1a1e:	82 30       	cpi	r24, 0x02	; 2
    1a20:	a8 f0       	brcs	.+42     	; 0x1a4c <lin_update_rx+0x84>
    1a22:	86 e1       	ldi	r24, 0x16	; 22
    1a24:	8c 9f       	mul	r24, r28
    1a26:	f0 01       	movw	r30, r0
    1a28:	8d 9f       	mul	r24, r29
    1a2a:	f0 0d       	add	r31, r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	e9 53       	subi	r30, 0x39	; 57
    1a30:	f8 49       	sbci	r31, 0x98	; 152
    1a32:	83 85       	ldd	r24, Z+11	; 0x0b
    1a34:	81 11       	cpse	r24, r1
    1a36:	0a c0       	rjmp	.+20     	; 0x1a4c <lin_update_rx+0x84>
    {
        prot_state_ptr->overrun_flg = 1U;
    1a38:	86 e1       	ldi	r24, 0x16	; 22
    1a3a:	8c 9f       	mul	r24, r28
    1a3c:	f0 01       	movw	r30, r0
    1a3e:	8d 9f       	mul	r24, r29
    1a40:	f0 0d       	add	r31, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	e9 53       	subi	r30, 0x39	; 57
    1a46:	f8 49       	sbci	r31, 0x98	; 152
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	83 87       	std	Z+11, r24	; 0x0b
    }

    frame_index = lin_get_frame_index(iii, id);
    1a4c:	6d 2d       	mov	r22, r13
    1a4e:	8f 2d       	mov	r24, r15
    1a50:	0e 94 83 09 	call	0x1306	; 0x1306 <lin_get_frame_index>
    1a54:	e8 2e       	mov	r14, r24
    if (frame_index < LIN_NUM_OF_FRMS)
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	8e 15       	cp	r24, r14
    1a5a:	08 f4       	brcc	.+2      	; 0x1a5e <lin_update_rx+0x96>
    1a5c:	b4 c0       	rjmp	.+360    	; 0x1bc6 <lin_update_rx+0x1fe>
    {
        /* This PID doesn't belong to this node */
        /* PID belongs to this node, then check type of frame */
        switch (prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    1a5e:	8c e1       	ldi	r24, 0x1C	; 28
    1a60:	8c 9f       	mul	r24, r28
    1a62:	f0 01       	movw	r30, r0
    1a64:	8d 9f       	mul	r24, r29
    1a66:	f0 0d       	add	r31, r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	e8 5b       	subi	r30, 0xB8	; 184
    1a6c:	fc 49       	sbci	r31, 0x9C	; 156
    1a6e:	06 81       	ldd	r16, Z+6	; 0x06
    1a70:	17 81       	ldd	r17, Z+7	; 0x07
    1a72:	8e 2d       	mov	r24, r14
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	fc 01       	movw	r30, r24
    1a78:	ee 0f       	add	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	e8 0f       	add	r30, r24
    1a8a:	f9 1f       	adc	r31, r25
    1a8c:	e0 0f       	add	r30, r16
    1a8e:	f1 1f       	adc	r31, r17
    1a90:	80 81       	ld	r24, Z
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	51 f0       	breq	.+20     	; 0x1aaa <lin_update_rx+0xe2>
    1a96:	18 f0       	brcs	.+6      	; 0x1a9e <lin_update_rx+0xd6>
    1a98:	81 31       	cpi	r24, 0x11	; 17
    1a9a:	01 f1       	breq	.+64     	; 0x1adc <lin_update_rx+0x114>
    1a9c:	40 c0       	rjmp	.+128    	; 0x1b1e <lin_update_rx+0x156>
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                lin_process_uncd_frame(iii, id, UPDATE_UNCONDITIONAL_FRAME);
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	6d 2d       	mov	r22, r13
    1aa2:	8f 2d       	mov	r24, r15
    1aa4:	0e 94 01 0b 	call	0x1602	; 0x1602 <lin_process_uncd_frame>
                break;
    1aa8:	3a c0       	rjmp	.+116    	; 0x1b1e <lin_update_rx+0x156>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                lin_update_rx_evnt_frame(iii, id);
    1aaa:	6d 2d       	mov	r22, r13
    1aac:	8f 2d       	mov	r24, r15
    1aae:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <lin_update_rx_evnt_frame>
                /* Recalculate frame_index by updating associate PID */
                associate_id = lin_process_parity(prot_state_ptr->response_buffer_ptr[0], CHECK_PARITY);
    1ab2:	86 e1       	ldi	r24, 0x16	; 22
    1ab4:	8c 9f       	mul	r24, r28
    1ab6:	f0 01       	movw	r30, r0
    1ab8:	8d 9f       	mul	r24, r29
    1aba:	f0 0d       	add	r31, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	e9 53       	subi	r30, 0x39	; 57
    1ac0:	f8 49       	sbci	r31, 0x98	; 152
    1ac2:	02 80       	ldd	r0, Z+2	; 0x02
    1ac4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ac6:	e0 2d       	mov	r30, r0
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	80 81       	ld	r24, Z
    1acc:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <lin_process_parity>
                frame_index = lin_get_frame_index(iii, associate_id);
    1ad0:	68 2f       	mov	r22, r24
    1ad2:	8f 2d       	mov	r24, r15
    1ad4:	0e 94 83 09 	call	0x1306	; 0x1306 <lin_get_frame_index>
    1ad8:	e8 2e       	mov	r14, r24
                break;
    1ada:	21 c0       	rjmp	.+66     	; 0x1b1e <lin_update_rx+0x156>
            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                /* If goto sleep signal */
                if (0U == prot_state_ptr->response_buffer_ptr[0])
    1adc:	86 e1       	ldi	r24, 0x16	; 22
    1ade:	8c 9f       	mul	r24, r28
    1ae0:	f0 01       	movw	r30, r0
    1ae2:	8d 9f       	mul	r24, r29
    1ae4:	f0 0d       	add	r31, r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	e9 53       	subi	r30, 0x39	; 57
    1aea:	f8 49       	sbci	r31, 0x98	; 152
    1aec:	02 80       	ldd	r0, Z+2	; 0x02
    1aee:	f3 81       	ldd	r31, Z+3	; 0x03
    1af0:	e0 2d       	mov	r30, r0
    1af2:	80 81       	ld	r24, Z
    1af4:	81 11       	cpse	r24, r1
    1af6:	0e c0       	rjmp	.+28     	; 0x1b14 <lin_update_rx+0x14c>
                {
                    /* In a slave node, set go to sleep flag in state structure */
                    prot_state_ptr->go_to_sleep_flg = true;
    1af8:	86 e1       	ldi	r24, 0x16	; 22
    1afa:	8c 9f       	mul	r24, r28
    1afc:	f0 01       	movw	r30, r0
    1afe:	8d 9f       	mul	r24, r29
    1b00:	f0 0d       	add	r31, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	e9 53       	subi	r30, 0x39	; 57
    1b06:	f8 49       	sbci	r31, 0x98	; 152
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	87 83       	std	Z+7, r24	; 0x07
                    (void)lin_lld_set_low_power_mode(iii);
    1b0c:	8f 2d       	mov	r24, r15
    1b0e:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <lin_lld_set_low_power_mode>
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <lin_update_rx+0x156>
                }
                else
                {
                    /* Call transport layer callback to process TL_RX_COMPLETED event*/
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RX_COMPLETED, id);
    1b14:	4d 2d       	mov	r20, r13
    1b16:	63 e0       	ldi	r22, 0x03	; 3
    1b18:	8f 2d       	mov	r24, r15
    1b1a:	0e 94 80 28 	call	0x5100	; 0x5100 <lin_tl_callback_handler>
            default:
                /* do nothing */
                break;
        }

        if (frame_index < LIN_NUM_OF_FRMS)
    1b1e:	83 e0       	ldi	r24, 0x03	; 3
    1b20:	8e 15       	cp	r24, r14
    1b22:	78 f1       	brcs	.+94     	; 0x1b82 <lin_update_rx+0x1ba>
        {
            /* Update rx frame flag */
            g_lin_frame_flag_handle_tbl[frame_index] = true;
    1b24:	ee 2d       	mov	r30, r14
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	ec 5c       	subi	r30, 0xCC	; 204
    1b2a:	f9 49       	sbci	r31, 0x99	; 153
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 83       	st	Z, r24

            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    1b30:	8c e1       	ldi	r24, 0x1C	; 28
    1b32:	8c 9f       	mul	r24, r28
    1b34:	f0 01       	movw	r30, r0
    1b36:	8d 9f       	mul	r24, r29
    1b38:	f0 0d       	add	r31, r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	e8 5b       	subi	r30, 0xB8	; 184
    1b3e:	fc 49       	sbci	r31, 0x9C	; 156
    1b40:	83 81       	ldd	r24, Z+3	; 0x03
    1b42:	81 11       	cpse	r24, r1
    1b44:	1e c0       	rjmp	.+60     	; 0x1b82 <lin_update_rx+0x1ba>
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
    1b46:	8e 2d       	mov	r24, r14
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	e8 0f       	add	r30, r24
    1b5e:	f9 1f       	adc	r31, r25
    1b60:	e0 0f       	add	r30, r16
    1b62:	f1 1f       	adc	r31, r17
    1b64:	25 81       	ldd	r18, Z+5	; 0x05
    1b66:	36 81       	ldd	r19, Z+6	; 0x06
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
    1b68:	47 81       	ldd	r20, Z+7	; 0x07
                for (i = 0U; i < flag_size; i++)
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <lin_update_rx+0x1b6>
                {
                    g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    1b6e:	f9 01       	movw	r30, r18
    1b70:	eb 52       	subi	r30, 0x2B	; 43
    1b72:	ff 49       	sbci	r31, 0x9F	; 159
    1b74:	9f ef       	ldi	r25, 0xFF	; 255
    1b76:	90 83       	st	Z, r25
                    flag_offset++;
    1b78:	2f 5f       	subi	r18, 0xFF	; 255
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
                for (i = 0U; i < flag_size; i++)
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	84 17       	cp	r24, r20
    1b80:	b0 f3       	brcs	.-20     	; 0x1b6e <lin_update_rx+0x1a6>
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }

    #if (1U == SUPPORT_SLAVE_MODE)
        /* update word status */
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    1b82:	8c e1       	ldi	r24, 0x1C	; 28
    1b84:	8c 9f       	mul	r24, r28
    1b86:	f0 01       	movw	r30, r0
    1b88:	8d 9f       	mul	r24, r29
    1b8a:	f0 0d       	add	r31, r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	e8 5b       	subi	r30, 0xB8	; 184
    1b90:	fc 49       	sbci	r31, 0x9C	; 156
    1b92:	83 81       	ldd	r24, Z+3	; 0x03
    1b94:	81 11       	cpse	r24, r1
    1b96:	17 c0       	rjmp	.+46     	; 0x1bc6 <lin_update_rx+0x1fe>
        {
            if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    1b98:	8c e1       	ldi	r24, 0x1C	; 28
    1b9a:	8c 9f       	mul	r24, r28
    1b9c:	f0 01       	movw	r30, r0
    1b9e:	8d 9f       	mul	r24, r29
    1ba0:	f0 0d       	add	r31, r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	e8 5b       	subi	r30, 0xB8	; 184
    1ba6:	fc 49       	sbci	r31, 0x9C	; 156
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 23       	and	r24, r24
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <lin_update_rx+0x1ea>
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <lin_update_rx+0x1f4>
            {
                lin_update_word_status_lin21(iii, LIN_LLD_RX_COMPLETED);
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	8f 2d       	mov	r24, r15
    1bb6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <lin_update_word_status_lin21>
    1bba:	05 c0       	rjmp	.+10     	; 0x1bc6 <lin_update_rx+0x1fe>
            }
            else
            {
                if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_J2602)
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	19 f4       	brne	.+6      	; 0x1bc6 <lin_update_rx+0x1fe>
                {
                    lin_update_word_status_j2602(iii);
    1bc0:	8f 2d       	mov	r24, r15
    1bc2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <lin_update_word_status_j2602>
                }
            }
        }
    #endif /* (1U == SUPPORT_SLAVE_MODE) */
    }
}
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	08 95       	ret

00001bd6 <lin_pid_resp_callback_handler>:
 *END**************************************************************************/
void lin_pid_resp_callback_handler(l_ifc_handle iii,
                                   const lin_lld_event_id_t event_id,
                                   l_u8 id)
{
    switch (event_id)
    1bd6:	62 30       	cpi	r22, 0x02	; 2
    1bd8:	99 f0       	breq	.+38     	; 0x1c00 <lin_pid_resp_callback_handler+0x2a>
    1bda:	28 f4       	brcc	.+10     	; 0x1be6 <lin_pid_resp_callback_handler+0x10>
    1bdc:	66 23       	and	r22, r22
    1bde:	41 f0       	breq	.+16     	; 0x1bf0 <lin_pid_resp_callback_handler+0x1a>
    1be0:	61 30       	cpi	r22, 0x01	; 1
    1be2:	51 f0       	breq	.+20     	; 0x1bf8 <lin_pid_resp_callback_handler+0x22>
    1be4:	08 95       	ret
    1be6:	68 30       	cpi	r22, 0x08	; 8
    1be8:	90 f0       	brcs	.+36     	; 0x1c0e <lin_pid_resp_callback_handler+0x38>
    1bea:	68 30       	cpi	r22, 0x08	; 8
    1bec:	69 f0       	breq	.+26     	; 0x1c08 <lin_pid_resp_callback_handler+0x32>
    1bee:	08 95       	ret
    {
        case LIN_LLD_PID_OK:
            lin_process_id(iii, id);
    1bf0:	64 2f       	mov	r22, r20
    1bf2:	0e 94 ce 0b 	call	0x179c	; 0x179c <lin_process_id>
            break;
    1bf6:	08 95       	ret
        case LIN_LLD_TX_COMPLETED:
            lin_update_tx(iii, id);
    1bf8:	64 2f       	mov	r22, r20
    1bfa:	0e 94 b0 09 	call	0x1360	; 0x1360 <lin_update_tx>
            break;
    1bfe:	08 95       	ret
        case LIN_LLD_RX_COMPLETED:
            lin_update_rx(iii, id);
    1c00:	64 2f       	mov	r22, r20
    1c02:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <lin_update_rx>
            break;
    1c06:	08 95       	ret
        case LIN_LLD_BUS_ACTIVITY_TIMEOUT:
            lin_bus_activity_timeout(iii);
    1c08:	0e 94 5f 09 	call	0x12be	; 0x12be <lin_bus_activity_timeout>
            break;
    1c0c:	08 95       	ret
        case LIN_LLD_PID_ERR:
        case LIN_LLD_FRAME_ERR:
        case LIN_LLD_CHECKSUM_ERR:
        case LIN_LLD_READBACK_ERR:
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
    1c0e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <lin_handle_error>
    1c12:	08 95       	ret

00001c14 <lin_update_word_status_j2602>:
{
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 overrun_flg;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0

    err_in_res = prot_state_ptr->error_in_response;
    1c18:	86 e1       	ldi	r24, 0x16	; 22
    1c1a:	82 9f       	mul	r24, r18
    1c1c:	d0 01       	movw	r26, r0
    1c1e:	83 9f       	mul	r24, r19
    1c20:	b0 0d       	add	r27, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	fd 01       	movw	r30, r26
    1c26:	e9 53       	subi	r30, 0x39	; 57
    1c28:	f8 49       	sbci	r31, 0x98	; 152
    1c2a:	46 81       	ldd	r20, Z+6	; 0x06
    prot_state_ptr->error_in_response = 0;
    1c2c:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    1c2e:	85 81       	ldd	r24, Z+5	; 0x05
    overrun_flg = prot_state_ptr->overrun_flg;
    1c30:	53 85       	ldd	r21, Z+11	; 0x0b

    word_status_ptr = &prot_state_ptr->word_status;

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    1c32:	ad 52       	subi	r26, 0x2D	; 45
    1c34:	b8 49       	sbci	r27, 0x98	; 152
    1c36:	9c 91       	ld	r25, X
    1c38:	69 2f       	mov	r22, r25
    1c3a:	61 70       	andi	r22, 0x01	; 1
    1c3c:	46 2b       	or	r20, r22
    1c3e:	40 fb       	bst	r20, 0
    1c40:	90 f9       	bld	r25, 0
    word_status_ptr->successful_transfer |= suc_in_tras;
    1c42:	91 fb       	bst	r25, 1
    1c44:	44 27       	eor	r20, r20
    1c46:	40 f9       	bld	r20, 0
    1c48:	84 2b       	or	r24, r20
    1c4a:	80 fb       	bst	r24, 0
    1c4c:	91 f9       	bld	r25, 1


    word_status_ptr->overrun = overrun_flg;
    1c4e:	50 fb       	bst	r21, 0
    1c50:	92 f9       	bld	r25, 2
    1c52:	9c 93       	st	X, r25
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    1c54:	81 85       	ldd	r24, Z+9	; 0x09
    1c56:	85 87       	std	Z+13, r24	; 0x0d

    if(prot_state_ptr->go_to_sleep_flg == true)
    1c58:	87 81       	ldd	r24, Z+7	; 0x07
    1c5a:	88 23       	and	r24, r24
    1c5c:	21 f0       	breq	.+8      	; 0x1c66 <lin_update_word_status_j2602+0x52>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    1c5e:	fd 01       	movw	r30, r26
    1c60:	89 2f       	mov	r24, r25
    1c62:	88 60       	ori	r24, 0x08	; 8
    1c64:	80 83       	st	Z, r24
    1c66:	08 95       	ret

00001c68 <lin_update_word_status_lin21>:
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 save_config;
    l_u8 overrun_flag;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_master_data_t * master_data_ptr;
    l_u8 active_schedule_id;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    err_in_res = prot_state_ptr->error_in_response;
    1c6c:	86 e1       	ldi	r24, 0x16	; 22
    1c6e:	82 9f       	mul	r24, r18
    1c70:	f0 01       	movw	r30, r0
    1c72:	83 9f       	mul	r24, r19
    1c74:	f0 0d       	add	r31, r0
    1c76:	11 24       	eor	r1, r1
    1c78:	e9 53       	subi	r30, 0x39	; 57
    1c7a:	f8 49       	sbci	r31, 0x98	; 152
    1c7c:	46 81       	ldd	r20, Z+6	; 0x06
    prot_state_ptr->error_in_response = 0;
    1c7e:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    1c80:	85 81       	ldd	r24, Z+5	; 0x05
    /* use of ternary operator below is for being MISRA compliant */
    save_config = (l_u8)(prot_state_ptr->save_config_flg ? 1U : 0U);
    1c82:	97 85       	ldd	r25, Z+15	; 0x0f
    1c84:	99 23       	and	r25, r25
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <lin_update_word_status_lin21+0x24>
    1c88:	51 e0       	ldi	r21, 0x01	; 1
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <lin_update_word_status_lin21+0x26>
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    overrun_flag = prot_state_ptr->overrun_flg;
    1c8e:	96 e1       	ldi	r25, 0x16	; 22
    1c90:	92 9f       	mul	r25, r18
    1c92:	f0 01       	movw	r30, r0
    1c94:	93 9f       	mul	r25, r19
    1c96:	f0 0d       	add	r31, r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	df 01       	movw	r26, r30
    1c9c:	a9 53       	subi	r26, 0x39	; 57
    1c9e:	b8 49       	sbci	r27, 0x98	; 152
    1ca0:	1b 96       	adiw	r26, 0x0b	; 11
    1ca2:	7c 91       	ld	r23, X
    1ca4:	1b 97       	sbiw	r26, 0x0b	; 11

    word_status_ptr = &prot_state_ptr->word_status;
    word_status_ptr->overrun = overrun_flag;
    1ca6:	ed 52       	subi	r30, 0x2D	; 45
    1ca8:	f8 49       	sbci	r31, 0x98	; 152
    1caa:	90 81       	ld	r25, Z
    1cac:	70 fb       	bst	r23, 0
    1cae:	92 f9       	bld	r25, 2

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    1cb0:	79 2f       	mov	r23, r25
    1cb2:	71 70       	andi	r23, 0x01	; 1
    1cb4:	47 2b       	or	r20, r23
    1cb6:	40 fb       	bst	r20, 0
    1cb8:	90 f9       	bld	r25, 0
    word_status_ptr->successful_transfer |= suc_in_tras;
    1cba:	91 fb       	bst	r25, 1
    1cbc:	44 27       	eor	r20, r20
    1cbe:	40 f9       	bld	r20, 0
    1cc0:	84 2b       	or	r24, r20
    1cc2:	80 fb       	bst	r24, 0
    1cc4:	91 f9       	bld	r25, 1
    1cc6:	90 83       	st	Z, r25
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    1cc8:	19 96       	adiw	r26, 0x09	; 9
    1cca:	8c 91       	ld	r24, X
    1ccc:	19 97       	sbiw	r26, 0x09	; 9
    1cce:	1d 96       	adiw	r26, 0x0d	; 13
    1cd0:	8c 93       	st	X, r24
    1cd2:	1d 97       	sbiw	r26, 0x0d	; 13

    if(prot_state_ptr->go_to_sleep_flg == true)
    1cd4:	17 96       	adiw	r26, 0x07	; 7
    1cd6:	8c 91       	ld	r24, X
    1cd8:	88 23       	and	r24, r24
    1cda:	59 f0       	breq	.+22     	; 0x1cf2 <lin_update_word_status_lin21+0x8a>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    1cdc:	86 e1       	ldi	r24, 0x16	; 22
    1cde:	82 9f       	mul	r24, r18
    1ce0:	f0 01       	movw	r30, r0
    1ce2:	83 9f       	mul	r24, r19
    1ce4:	f0 0d       	add	r31, r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	ed 52       	subi	r30, 0x2D	; 45
    1cea:	f8 49       	sbci	r31, 0x98	; 152
    1cec:	89 2f       	mov	r24, r25
    1cee:	88 60       	ori	r24, 0x08	; 8
    1cf0:	80 83       	st	Z, r24
    }

    if(LIN_LLD_BUS_ACTIVITY_TIMEOUT != event_id)
    1cf2:	68 30       	cpi	r22, 0x08	; 8
    1cf4:	59 f0       	breq	.+22     	; 0x1d0c <lin_update_word_status_lin21+0xa4>
    {
        /* Set bus activity timeout */
        word_status_ptr->bus_activity = 1U;
    1cf6:	86 e1       	ldi	r24, 0x16	; 22
    1cf8:	82 9f       	mul	r24, r18
    1cfa:	f0 01       	movw	r30, r0
    1cfc:	83 9f       	mul	r24, r19
    1cfe:	f0 0d       	add	r31, r0
    1d00:	11 24       	eor	r1, r1
    1d02:	ed 52       	subi	r30, 0x2D	; 45
    1d04:	f8 49       	sbci	r31, 0x98	; 152
    1d06:	80 81       	ld	r24, Z
    1d08:	80 61       	ori	r24, 0x10	; 16
    1d0a:	80 83       	st	Z, r24
    }
    else
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* For Slave node - using ternary operator is a workaround for MISRA */
        word_status_ptr->event_trigger_collision_flg = 0U;
    1d0c:	86 e1       	ldi	r24, 0x16	; 22
    1d0e:	82 9f       	mul	r24, r18
    1d10:	f0 01       	movw	r30, r0
    1d12:	83 9f       	mul	r24, r19
    1d14:	f0 0d       	add	r31, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	ed 52       	subi	r30, 0x2D	; 45
    1d1a:	f8 49       	sbci	r31, 0x98	; 152
    1d1c:	80 81       	ld	r24, Z
        /* Updated save configuration value to word status */
        word_status_ptr->save_config_flg = save_config;
    1d1e:	8f 7d       	andi	r24, 0xDF	; 223
    1d20:	50 fb       	bst	r21, 0
    1d22:	86 f9       	bld	r24, 6
        word_status_ptr->reserved = 0U;
    1d24:	8f 77       	andi	r24, 0x7F	; 127
    1d26:	80 83       	st	Z, r24
    1d28:	08 95       	ret

00001d2a <lin_update_err_signal>:
 *
 * Implements    : lin_update_err_signal_Activity
 *END**************************************************************************/
void lin_update_err_signal(l_ifc_handle iii,
                           l_u8 frm_id)
{
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    l_u8 i;
    const l_u16* byte_offset_temp_ptr;
    const l_u8* bit_offset_temp_ptr;
    l_u8 err_in_res = g_lin_protocol_state_array[iii].error_in_response;
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	26 e1       	ldi	r18, 0x16	; 22
    1d34:	28 9f       	mul	r18, r24
    1d36:	f0 01       	movw	r30, r0
    1d38:	29 9f       	mul	r18, r25
    1d3a:	f0 0d       	add	r31, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	e9 53       	subi	r30, 0x39	; 57
    1d40:	f8 49       	sbci	r31, 0x98	; 152
    1d42:	16 81       	ldd	r17, Z+6	; 0x06
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    1d44:	2c e1       	ldi	r18, 0x1C	; 28
    1d46:	28 9f       	mul	r18, r24
    1d48:	f0 01       	movw	r30, r0
    1d4a:	29 9f       	mul	r18, r25
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	e8 5b       	subi	r30, 0xB8	; 184
    1d52:	fc 49       	sbci	r31, 0x9C	; 156
    1d54:	42 89       	ldd	r20, Z+18	; 0x12
    1d56:	50 e0       	ldi	r21, 0x00	; 0

    if (frm_id < LIN_NUM_OF_FRMS)
    1d58:	64 30       	cpi	r22, 0x04	; 4
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <lin_update_err_signal+0x34>
    1d5c:	59 c0       	rjmp	.+178    	; 0x1e10 <lin_update_err_signal+0xe6>
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    1d5e:	28 9f       	mul	r18, r24
    1d60:	f0 01       	movw	r30, r0
    1d62:	29 9f       	mul	r18, r25
    1d64:	f0 0d       	add	r31, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	e8 5b       	subi	r30, 0xB8	; 184
    1d6a:	fc 49       	sbci	r31, 0x9C	; 156
    1d6c:	86 81       	ldd	r24, Z+6	; 0x06
    1d6e:	97 81       	ldd	r25, Z+7	; 0x07
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	fb 01       	movw	r30, r22
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	66 0f       	add	r22, r22
    1d7a:	77 1f       	adc	r23, r23
    1d7c:	66 0f       	add	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	66 0f       	add	r22, r22
    1d82:	77 1f       	adc	r23, r23
    1d84:	6e 0f       	add	r22, r30
    1d86:	7f 1f       	adc	r23, r31
    1d88:	fc 01       	movw	r30, r24
    1d8a:	e6 0f       	add	r30, r22
    1d8c:	f7 1f       	adc	r31, r23
    1d8e:	80 81       	ld	r24, Z
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	91 f5       	brne	.+100    	; 0x1df8 <lin_update_err_signal+0xce>
    1d94:	3d c0       	rjmp	.+122    	; 0x1e10 <lin_update_err_signal+0xe6>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
    1d96:	84 e2       	ldi	r24, 0x24	; 36
    1d98:	84 9f       	mul	r24, r20
    1d9a:	f0 01       	movw	r30, r0
    1d9c:	85 9f       	mul	r24, r21
    1d9e:	f0 0d       	add	r31, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	ec 59       	subi	r30, 0x9C	; 156
    1da4:	fc 49       	sbci	r31, 0x9C	; 156
    1da6:	a0 89       	ldd	r26, Z+16	; 0x10
    1da8:	b1 89       	ldd	r27, Z+17	; 0x11
    1daa:	86 2f       	mov	r24, r22
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 01       	movw	r18, r24
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	2a 0f       	add	r18, r26
    1db6:	3b 1f       	adc	r19, r27
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
    1db8:	a2 89       	ldd	r26, Z+18	; 0x12
    1dba:	b3 89       	ldd	r27, Z+19	; 0x13
    1dbc:	a8 0f       	add	r26, r24
    1dbe:	b9 1f       	adc	r27, r25
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    1dc0:	e9 01       	movw	r28, r18
    1dc2:	e8 81       	ld	r30, Y
    1dc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc6:	e8 52       	subi	r30, 0x28	; 40
    1dc8:	ff 49       	sbci	r31, 0x9F	; 159
    1dca:	70 81       	ld	r23, Z
    1dcc:	ac 91       	ld	r26, X
    1dce:	21 e0       	ldi	r18, 0x01	; 1
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	0a 2e       	mov	r0, r26
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <lin_update_err_signal+0xb0>
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	0a 94       	dec	r0
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <lin_update_err_signal+0xac>
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
    1dde:	81 2f       	mov	r24, r17
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <lin_update_err_signal+0xbe>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	aa 95       	dec	r26
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <lin_update_err_signal+0xba>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    1dec:	20 95       	com	r18
    1dee:	27 23       	and	r18, r23
    1df0:	82 2b       	or	r24, r18
    1df2:	80 83       	st	Z, r24
    if (frm_id < LIN_NUM_OF_FRMS)
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
    1df4:	6f 5f       	subi	r22, 0xFF	; 255
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <lin_update_err_signal+0xd0>
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	84 e2       	ldi	r24, 0x24	; 36
    1dfc:	84 9f       	mul	r24, r20
    1dfe:	f0 01       	movw	r30, r0
    1e00:	85 9f       	mul	r24, r21
    1e02:	f0 0d       	add	r31, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	ec 59       	subi	r30, 0x9C	; 156
    1e08:	fc 49       	sbci	r31, 0x9C	; 156
    1e0a:	86 85       	ldd	r24, Z+14	; 0x0e
    1e0c:	68 17       	cp	r22, r24
    1e0e:	18 f2       	brcs	.-122    	; 0x1d96 <lin_update_err_signal+0x6c>
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
            }
        }
    }
}
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	08 95       	ret

00001e18 <lin_update_rx_evnt_frame>:
 *
 * Implements    : lin_update_rx_evnt_frame_Activity
 *END**************************************************************************/
void lin_update_rx_evnt_frame(l_ifc_handle iii,
                              l_u8 pid)
{
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	18 2f       	mov	r17, r24
    const lin_associate_frame_t * ptr;
    l_u8 frame_index, i, associate_id;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    1e2a:	c8 2f       	mov	r28, r24
    1e2c:	d0 e0       	ldi	r29, 0x00	; 0

    /* Get frame index of the event trigger frame */
    frame_index = lin_get_frame_index(iii, pid);
    1e2e:	0e 94 83 09 	call	0x1306	; 0x1306 <lin_get_frame_index>
    1e32:	08 2f       	mov	r16, r24

    if (0xFFU != frame_index) /* This PID doesn't belong to this node */
    1e34:	8f 3f       	cpi	r24, 0xFF	; 255
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <lin_update_rx_evnt_frame+0x22>
    1e38:	56 c0       	rjmp	.+172    	; 0x1ee6 <lin_update_rx_evnt_frame+0xce>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
    1e3a:	86 e1       	ldi	r24, 0x16	; 22
    1e3c:	8c 9f       	mul	r24, r28
    1e3e:	f0 01       	movw	r30, r0
    1e40:	8d 9f       	mul	r24, r29
    1e42:	f0 0d       	add	r31, r0
    1e44:	11 24       	eor	r1, r1
    1e46:	e9 53       	subi	r30, 0x39	; 57
    1e48:	f8 49       	sbci	r31, 0x98	; 152
    1e4a:	02 80       	ldd	r0, Z+2	; 0x02
    1e4c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e4e:	e0 2d       	mov	r30, r0
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	80 81       	ld	r24, Z
    1e54:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <lin_process_parity>
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;
    1e58:	9c e1       	ldi	r25, 0x1C	; 28
    1e5a:	9c 9f       	mul	r25, r28
    1e5c:	f0 01       	movw	r30, r0
    1e5e:	9d 9f       	mul	r25, r29
    1e60:	f0 0d       	add	r31, r0
    1e62:	11 24       	eor	r1, r1
    1e64:	e8 5b       	subi	r30, 0xB8	; 184
    1e66:	fc 49       	sbci	r31, 0x9C	; 156
    1e68:	46 81       	ldd	r20, Z+6	; 0x06
    1e6a:	57 81       	ldd	r21, Z+7	; 0x07
    1e6c:	20 2f       	mov	r18, r16
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	f9 01       	movw	r30, r18
    1e72:	ee 0f       	add	r30, r30
    1e74:	ff 1f       	adc	r31, r31
    1e76:	22 0f       	add	r18, r18
    1e78:	33 1f       	adc	r19, r19
    1e7a:	22 0f       	add	r18, r18
    1e7c:	33 1f       	adc	r19, r19
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	2e 0f       	add	r18, r30
    1e84:	3f 1f       	adc	r19, r31
    1e86:	fa 01       	movw	r30, r20
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	e0 84       	ldd	r14, Z+8	; 0x08
    1e8e:	f1 84       	ldd	r15, Z+9	; 0x09

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	25 c0       	rjmp	.+74     	; 0x1ede <lin_update_rx_evnt_frame+0xc6>
        {
            /* First byte of response for event trigger is the PID of the associate frame */
            if (prot_user_config_ptr->list_identifiers_RAM_ptr[((l_u8)ptr->associated_uncond_frame_ptr[i] - prot_user_config_ptr->frame_start) + 1U] == associate_id)
    1e94:	9c e1       	ldi	r25, 0x1C	; 28
    1e96:	9c 9f       	mul	r25, r28
    1e98:	d0 01       	movw	r26, r0
    1e9a:	9d 9f       	mul	r25, r29
    1e9c:	b0 0d       	add	r27, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	a8 5b       	subi	r26, 0xB8	; 184
    1ea2:	bc 49       	sbci	r27, 0x9C	; 156
    1ea4:	1a 96       	adiw	r26, 0x0a	; 10
    1ea6:	cd 90       	ld	r12, X+
    1ea8:	dc 90       	ld	r13, X
    1eaa:	1b 97       	sbiw	r26, 0x0b	; 11
    1eac:	f7 01       	movw	r30, r14
    1eae:	41 81       	ldd	r20, Z+1	; 0x01
    1eb0:	52 81       	ldd	r21, Z+2	; 0x02
    1eb2:	fa 01       	movw	r30, r20
    1eb4:	e2 0f       	add	r30, r18
    1eb6:	f1 1d       	adc	r31, r1
    1eb8:	90 81       	ld	r25, Z
    1eba:	15 96       	adiw	r26, 0x05	; 5
    1ebc:	3c 91       	ld	r19, X
    1ebe:	e9 2f       	mov	r30, r25
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	e3 1b       	sub	r30, r19
    1ec4:	f1 09       	sbc	r31, r1
    1ec6:	ec 0d       	add	r30, r12
    1ec8:	fd 1d       	adc	r31, r13
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	89 13       	cpse	r24, r25
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <lin_update_rx_evnt_frame+0xc4>
            {
                /* Update unconditional frame */
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	68 2f       	mov	r22, r24
    1ed4:	81 2f       	mov	r24, r17
    1ed6:	0e 94 01 0b 	call	0x1602	; 0x1602 <lin_process_uncd_frame>
                break;
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <lin_update_rx_evnt_frame+0xce>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    1edc:	2f 5f       	subi	r18, 0xFF	; 255
    1ede:	f7 01       	movw	r30, r14
    1ee0:	90 81       	ld	r25, Z
    1ee2:	29 17       	cp	r18, r25
    1ee4:	b8 f2       	brcs	.-82     	; 0x1e94 <lin_update_rx_evnt_frame+0x7c>
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
                break;
            }
        }
    }
}
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	df 90       	pop	r13
    1ef4:	cf 90       	pop	r12
    1ef6:	08 95       	ret

00001ef8 <lin_make_res_evnt_frame>:
 *
 * Implements    : lin_make_res_evnt_frame_Activity
 *END**************************************************************************/
void lin_make_res_evnt_frame(l_ifc_handle iii,
                             l_u8 pid)
{
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	c8 2f       	mov	r28, r24
    1f02:	d6 2f       	mov	r29, r22
    /* Create response */
    lin_process_uncd_frame(iii, pid, MAKE_UNCONDITIONAL_FRAME);
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	0e 94 01 0b 	call	0x1602	; 0x1602 <lin_process_uncd_frame>
    /* Set associate PID */
    g_lin_protocol_state_array[iii].response_buffer_ptr[0] = lin_process_parity(pid, MAKE_PARITY);
    1f0a:	86 e1       	ldi	r24, 0x16	; 22
    1f0c:	c8 9f       	mul	r28, r24
    1f0e:	f0 01       	movw	r30, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	e9 53       	subi	r30, 0x39	; 57
    1f14:	f8 49       	sbci	r31, 0x98	; 152
    1f16:	02 81       	ldd	r16, Z+2	; 0x02
    1f18:	13 81       	ldd	r17, Z+3	; 0x03
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	8d 2f       	mov	r24, r29
    1f1e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <lin_process_parity>
    1f22:	f8 01       	movw	r30, r16
    1f24:	80 83       	st	Z, r24
}
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	08 95       	ret

00001f30 <ld_make_slave_response_pdu>:
        /* Get current configuration */
        service_flag = node_attr_ptr->service_flags_ptr;

        if (flag_order < node_attr_ptr->number_support_sid)
        {
            service_flag[flag_order] = 0U;
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	2d 97       	sbiw	r28, 0x0d	; 13
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	08 2f       	mov	r16, r24
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	9c e1       	ldi	r25, 0x1C	; 28
    1f54:	90 9f       	mul	r25, r16
    1f56:	f0 01       	movw	r30, r0
    1f58:	91 9f       	mul	r25, r17
    1f5a:	f0 0d       	add	r31, r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	e8 5b       	subi	r30, 0xB8	; 184
    1f60:	fc 49       	sbci	r31, 0x9C	; 156
    1f62:	e2 88       	ldd	r14, Z+18	; 0x12
    1f64:	f1 2c       	mov	r15, r1
    1f66:	94 e3       	ldi	r25, 0x34	; 52
    1f68:	90 9f       	mul	r25, r16
    1f6a:	d0 01       	movw	r26, r0
    1f6c:	91 9f       	mul	r25, r17
    1f6e:	b0 0d       	add	r27, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	ad 56       	subi	r26, 0x6D	; 109
    1f74:	b8 49       	sbci	r27, 0x98	; 152
    1f76:	54 96       	adiw	r26, 0x14	; 20
    1f78:	cd 90       	ld	r12, X+
    1f7a:	dc 90       	ld	r13, X
    1f7c:	55 97       	sbiw	r26, 0x15	; 21
    1f7e:	1b 96       	adiw	r26, 0x0b	; 11
    1f80:	ed 91       	ld	r30, X+
    1f82:	fc 91       	ld	r31, X
    1f84:	1c 97       	sbiw	r26, 0x0c	; 12
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ec 0d       	add	r30, r12
    1f94:	fd 1d       	adc	r31, r13
    1f96:	90 81       	ld	r25, Z
    1f98:	9e 37       	cpi	r25, 0x7E	; 126
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <ld_make_slave_response_pdu+0x6e>
    1f9c:	d8 c0       	rjmp	.+432    	; 0x214e <__DATA_REGION_LENGTH__+0x14e>
    1f9e:	d8 2e       	mov	r13, r24
    1fa0:	84 e2       	ldi	r24, 0x24	; 36
    1fa2:	8e 9d       	mul	r24, r14
    1fa4:	d0 01       	movw	r26, r0
    1fa6:	8f 9d       	mul	r24, r15
    1fa8:	b0 0d       	add	r27, r0
    1faa:	11 24       	eor	r1, r1
    1fac:	ac 59       	subi	r26, 0x9C	; 156
    1fae:	bc 49       	sbci	r27, 0x9C	; 156
    1fb0:	ad 90       	ld	r10, X+
    1fb2:	bc 90       	ld	r11, X
    1fb4:	d5 01       	movw	r26, r10
    1fb6:	8c 91       	ld	r24, X
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    1fbe:	8f e7       	ldi	r24, 0x7F	; 127
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
    1fc2:	6c 83       	std	Y+4, r22	; 0x04
    1fc4:	2d 83       	std	Y+5, r18	; 0x05
    1fc6:	9f ef       	ldi	r25, 0xFF	; 255
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	9f 83       	std	Y+7, r25	; 0x07
    1fcc:	98 87       	std	Y+8, r25	; 0x08
    1fce:	62 3b       	cpi	r22, 0xB2	; 178
    1fd0:	91 f0       	breq	.+36     	; 0x1ff6 <ld_make_slave_response_pdu+0xc6>
    1fd2:	38 f4       	brcc	.+14     	; 0x1fe2 <ld_make_slave_response_pdu+0xb2>
    1fd4:	60 3b       	cpi	r22, 0xB0	; 176
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <ld_make_slave_response_pdu+0xaa>
    1fd8:	79 c0       	rjmp	.+242    	; 0x20cc <__DATA_REGION_LENGTH__+0xcc>
    1fda:	61 3b       	cpi	r22, 0xB1	; 177
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <ld_make_slave_response_pdu+0xb0>
    1fde:	6b c0       	rjmp	.+214    	; 0x20b6 <__DATA_REGION_LENGTH__+0xb6>
    1fe0:	a5 c0       	rjmp	.+330    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    1fe2:	66 3b       	cpi	r22, 0xB6	; 182
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <ld_make_slave_response_pdu+0xb8>
    1fe6:	91 c0       	rjmp	.+290    	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
    1fe8:	67 3b       	cpi	r22, 0xB7	; 183
    1fea:	09 f4       	brne	.+2      	; 0x1fee <ld_make_slave_response_pdu+0xbe>
    1fec:	96 c0       	rjmp	.+300    	; 0x211a <__DATA_REGION_LENGTH__+0x11a>
    1fee:	63 3b       	cpi	r22, 0xB3	; 179
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <ld_make_slave_response_pdu+0xc4>
    1ff2:	9c c0       	rjmp	.+312    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    1ff4:	82 c0       	rjmp	.+260    	; 0x20fa <__DATA_REGION_LENGTH__+0xfa>
    1ff6:	41 30       	cpi	r20, 0x01	; 1
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <ld_make_slave_response_pdu+0xcc>
    1ffa:	98 c0       	rjmp	.+304    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    1ffc:	86 e0       	ldi	r24, 0x06	; 6
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	60 5c       	subi	r22, 0xC0	; 192
    2002:	6b 83       	std	Y+3, r22	; 0x03
    2004:	21 11       	cpse	r18, r1
    2006:	13 c0       	rjmp	.+38     	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    2008:	84 e2       	ldi	r24, 0x24	; 36
    200a:	8e 9d       	mul	r24, r14
    200c:	f0 01       	movw	r30, r0
    200e:	8f 9d       	mul	r24, r15
    2010:	f0 0d       	add	r31, r0
    2012:	11 24       	eor	r1, r1
    2014:	ec 59       	subi	r30, 0x9C	; 156
    2016:	fc 49       	sbci	r31, 0x9C	; 156
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	84 81       	ldd	r24, Z+4	; 0x04
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	95 81       	ldd	r25, Z+5	; 0x05
    2022:	86 81       	ldd	r24, Z+6	; 0x06
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8f 83       	std	Y+7, r24	; 0x07
    2028:	87 81       	ldd	r24, Z+7	; 0x07
    202a:	88 87       	std	Y+8, r24	; 0x08
    202c:	7f c0       	rjmp	.+254    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    202e:	21 30       	cpi	r18, 0x01	; 1
    2030:	99 f4       	brne	.+38     	; 0x2058 <__DATA_REGION_LENGTH__+0x58>
    2032:	84 e2       	ldi	r24, 0x24	; 36
    2034:	8e 9d       	mul	r24, r14
    2036:	f0 01       	movw	r30, r0
    2038:	8f 9d       	mul	r24, r15
    203a:	f0 0d       	add	r31, r0
    203c:	11 24       	eor	r1, r1
    203e:	ec 59       	subi	r30, 0x9C	; 156
    2040:	fc 49       	sbci	r31, 0x9C	; 156
    2042:	80 85       	ldd	r24, Z+8	; 0x08
    2044:	8c 83       	std	Y+4, r24	; 0x04
    2046:	81 85       	ldd	r24, Z+9	; 0x09
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	82 85       	ldd	r24, Z+10	; 0x0a
    204c:	8e 83       	std	Y+6, r24	; 0x06
    204e:	83 85       	ldd	r24, Z+11	; 0x0b
    2050:	8f 83       	std	Y+7, r24	; 0x07
    2052:	85 e0       	ldi	r24, 0x05	; 5
    2054:	8a 83       	std	Y+2, r24	; 0x02
    2056:	6a c0       	rjmp	.+212    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    2058:	85 e0       	ldi	r24, 0x05	; 5
    205a:	eb ef       	ldi	r30, 0xFB	; 251
    205c:	f2 e6       	ldi	r31, 0x62	; 98
    205e:	de 01       	movw	r26, r28
    2060:	19 96       	adiw	r26, 0x09	; 9
    2062:	01 90       	ld	r0, Z+
    2064:	0d 92       	st	X+, r0
    2066:	8a 95       	dec	r24
    2068:	e1 f7       	brne	.-8      	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    206a:	ae 01       	movw	r20, r28
    206c:	47 5f       	subi	r20, 0xF7	; 247
    206e:	5f 4f       	sbci	r21, 0xFF	; 255
    2070:	62 2f       	mov	r22, r18
    2072:	80 2f       	mov	r24, r16
    2074:	0e 94 79 19 	call	0x32f2	; 0x32f2 <ld_read_by_id_callout>
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	8c 83       	std	Y+4, r24	; 0x04
    207c:	8a 85       	ldd	r24, Y+10	; 0x0a
    207e:	8d 83       	std	Y+5, r24	; 0x05
    2080:	8b 85       	ldd	r24, Y+11	; 0x0b
    2082:	8e 83       	std	Y+6, r24	; 0x06
    2084:	8c 85       	ldd	r24, Y+12	; 0x0c
    2086:	8f 83       	std	Y+7, r24	; 0x07
    2088:	8d 85       	ldd	r24, Y+13	; 0x0d
    208a:	88 87       	std	Y+8, r24	; 0x08
    208c:	85 e0       	ldi	r24, 0x05	; 5
    208e:	10 c0       	rjmp	.+32     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    2090:	e8 2f       	mov	r30, r24
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	31 97       	sbiw	r30, 0x01	; 1
    2096:	29 e0       	ldi	r18, 0x09	; 9
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	2c 0f       	add	r18, r28
    209c:	3d 1f       	adc	r19, r29
    209e:	e2 0f       	add	r30, r18
    20a0:	f3 1f       	adc	r31, r19
    20a2:	90 81       	ld	r25, Z
    20a4:	9f 3f       	cpi	r25, 0xFF	; 255
    20a6:	19 f0       	breq	.+6      	; 0x20ae <__DATA_REGION_LENGTH__+0xae>
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	3f c0       	rjmp	.+126    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    20ae:	81 50       	subi	r24, 0x01	; 1
    20b0:	81 11       	cpse	r24, r1
    20b2:	ee cf       	rjmp	.-36     	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
    20b4:	3b c0       	rjmp	.+118    	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    20b6:	d5 01       	movw	r26, r10
    20b8:	8c 91       	ld	r24, X
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	8a 83       	std	Y+2, r24	; 0x02
    20c0:	81 ef       	ldi	r24, 0xF1	; 241
    20c2:	8b 83       	std	Y+3, r24	; 0x03
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	8c 83       	std	Y+4, r24	; 0x04
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	30 c0       	rjmp	.+96     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    20cc:	24 e2       	ldi	r18, 0x24	; 36
    20ce:	2e 9d       	mul	r18, r14
    20d0:	c0 01       	movw	r24, r0
    20d2:	2f 9d       	mul	r18, r15
    20d4:	90 0d       	add	r25, r0
    20d6:	11 24       	eor	r1, r1
    20d8:	8c 59       	subi	r24, 0x9C	; 156
    20da:	9c 49       	sbci	r25, 0x9C	; 156
    20dc:	dc 01       	movw	r26, r24
    20de:	12 96       	adiw	r26, 0x02	; 2
    20e0:	8c 91       	ld	r24, X
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	87 81       	ldd	r24, Z+7	; 0x07
    20e6:	f5 01       	movw	r30, r10
    20e8:	80 83       	st	Z, r24
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	8a 83       	std	Y+2, r24	; 0x02
    20ee:	80 ef       	ldi	r24, 0xF0	; 240
    20f0:	8b 83       	std	Y+3, r24	; 0x03
    20f2:	8f ef       	ldi	r24, 0xFF	; 255
    20f4:	8c 83       	std	Y+4, r24	; 0x04
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	19 c0       	rjmp	.+50     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	8a 83       	std	Y+2, r24	; 0x02
    20fe:	83 ef       	ldi	r24, 0xF3	; 243
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8f ef       	ldi	r24, 0xFF	; 255
    2104:	8c 83       	std	Y+4, r24	; 0x04
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	11 c0       	rjmp	.+34     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	8a 83       	std	Y+2, r24	; 0x02
    210e:	60 5c       	subi	r22, 0xC0	; 192
    2110:	6b 83       	std	Y+3, r22	; 0x03
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	8c 83       	std	Y+4, r24	; 0x04
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	09 c0       	rjmp	.+18     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    211a:	41 30       	cpi	r20, 0x01	; 1
    211c:	39 f4       	brne	.+14     	; 0x212c <__DATA_REGION_LENGTH__+0x12c>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	8a 83       	std	Y+2, r24	; 0x02
    2122:	60 5c       	subi	r22, 0xC0	; 192
    2124:	6b 83       	std	Y+3, r22	; 0x03
    2126:	8f ef       	ldi	r24, 0xFF	; 255
    2128:	8c 83       	std	Y+4, r24	; 0x04
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	be 01       	movw	r22, r28
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	8d 2d       	mov	r24, r13
    2134:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2138:	84 e3       	ldi	r24, 0x34	; 52
    213a:	80 9f       	mul	r24, r16
    213c:	f0 01       	movw	r30, r0
    213e:	81 9f       	mul	r24, r17
    2140:	f0 0d       	add	r31, r0
    2142:	11 24       	eor	r1, r1
    2144:	ed 56       	subi	r30, 0x6D	; 109
    2146:	f8 49       	sbci	r31, 0x98	; 152
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	86 a3       	std	Z+38, r24	; 0x26
    214c:	0a c0       	rjmp	.+20     	; 0x2162 <__DATA_REGION_LENGTH__+0x162>
    214e:	84 e3       	ldi	r24, 0x34	; 52
    2150:	80 9f       	mul	r24, r16
    2152:	f0 01       	movw	r30, r0
    2154:	81 9f       	mul	r24, r17
    2156:	f0 0d       	add	r31, r0
    2158:	11 24       	eor	r1, r1
    215a:	ed 56       	subi	r30, 0x6D	; 109
    215c:	f8 49       	sbci	r31, 0x98	; 152
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	86 a3       	std	Z+38, r24	; 0x26
    2162:	2d 96       	adiw	r28, 0x0d	; 13
    2164:	cd bf       	out	0x3d, r28	; 61
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	df 90       	pop	r13
    2176:	cf 90       	pop	r12
    2178:	bf 90       	pop	r11
    217a:	af 90       	pop	r10
    217c:	08 95       	ret

0000217e <lin_condittional_change_nad>:
    217e:	cf 92       	push	r12
    2180:	df 92       	push	r13
    2182:	ef 92       	push	r14
    2184:	ff 92       	push	r15
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	25 97       	sbiw	r28, 0x05	; 5
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	e8 2e       	mov	r14, r24
    219a:	f1 2c       	mov	r15, r1
    219c:	9c e1       	ldi	r25, 0x1C	; 28
    219e:	9e 9d       	mul	r25, r14
    21a0:	f0 01       	movw	r30, r0
    21a2:	9f 9d       	mul	r25, r15
    21a4:	f0 0d       	add	r31, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	e8 5b       	subi	r30, 0xB8	; 184
    21aa:	fc 49       	sbci	r31, 0x9C	; 156
    21ac:	02 89       	ldd	r16, Z+18	; 0x12
    21ae:	10 e0       	ldi	r17, 0x00	; 0
    21b0:	94 e2       	ldi	r25, 0x24	; 36
    21b2:	90 9f       	mul	r25, r16
    21b4:	90 01       	movw	r18, r0
    21b6:	91 9f       	mul	r25, r17
    21b8:	30 0d       	add	r19, r0
    21ba:	11 24       	eor	r1, r1
    21bc:	f9 01       	movw	r30, r18
    21be:	e9 59       	subi	r30, 0x99	; 153
    21c0:	fc 49       	sbci	r31, 0x9C	; 156
    21c2:	95 e0       	ldi	r25, 0x05	; 5
    21c4:	de 01       	movw	r26, r28
    21c6:	11 96       	adiw	r26, 0x01	; 1
    21c8:	01 90       	ld	r0, Z+
    21ca:	0d 92       	st	X+, r0
    21cc:	9a 95       	dec	r25
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <lin_condittional_change_nad+0x4a>
    21d0:	d9 01       	movw	r26, r18
    21d2:	ac 59       	subi	r26, 0x9C	; 156
    21d4:	bc 49       	sbci	r27, 0x9C	; 156
    21d6:	fd 01       	movw	r30, r26
    21d8:	38 96       	adiw	r30, 0x08	; 8
    21da:	18 96       	adiw	r26, 0x08	; 8
    21dc:	cc 90       	ld	r12, X
    21de:	d1 80       	ldd	r13, Z+1	; 0x01
    21e0:	52 81       	ldd	r21, Z+2	; 0x02
    21e2:	43 81       	ldd	r20, Z+3	; 0x03
    21e4:	94 e3       	ldi	r25, 0x34	; 52
    21e6:	9e 9d       	mul	r25, r14
    21e8:	d0 01       	movw	r26, r0
    21ea:	9f 9d       	mul	r25, r15
    21ec:	b0 0d       	add	r27, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	ad 56       	subi	r26, 0x6D	; 109
    21f2:	b8 49       	sbci	r27, 0x98	; 152
    21f4:	54 96       	adiw	r26, 0x14	; 20
    21f6:	2d 91       	ld	r18, X+
    21f8:	3c 91       	ld	r19, X
    21fa:	55 97       	sbiw	r26, 0x15	; 21
    21fc:	1b 96       	adiw	r26, 0x0b	; 11
    21fe:	ed 91       	ld	r30, X+
    2200:	fc 91       	ld	r31, X
    2202:	1c 97       	sbiw	r26, 0x0c	; 12
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	ee 0f       	add	r30, r30
    220a:	ff 1f       	adc	r31, r31
    220c:	ee 0f       	add	r30, r30
    220e:	ff 1f       	adc	r31, r31
    2210:	e2 0f       	add	r30, r18
    2212:	f3 1f       	adc	r31, r19
    2214:	33 81       	ldd	r19, Z+3	; 0x03
    2216:	94 81       	ldd	r25, Z+4	; 0x04
    2218:	75 81       	ldd	r23, Z+5	; 0x05
    221a:	66 81       	ldd	r22, Z+6	; 0x06
    221c:	33 23       	and	r19, r19
    221e:	19 f0       	breq	.+6      	; 0x2226 <lin_condittional_change_nad+0xa8>
    2220:	31 30       	cpi	r19, 0x01	; 1
    2222:	c1 f1       	breq	.+112    	; 0x2294 <lin_condittional_change_nad+0x116>
    2224:	54 c0       	rjmp	.+168    	; 0x22ce <lin_condittional_change_nad+0x150>
    2226:	2f ef       	ldi	r18, 0xFF	; 255
    2228:	29 0f       	add	r18, r25
    222a:	25 30       	cpi	r18, 0x05	; 5
    222c:	08 f0       	brcs	.+2      	; 0x2230 <lin_condittional_change_nad+0xb2>
    222e:	51 c0       	rjmp	.+162    	; 0x22d2 <lin_condittional_change_nad+0x154>
    2230:	22 30       	cpi	r18, 0x02	; 2
    2232:	90 f4       	brcc	.+36     	; 0x2258 <lin_condittional_change_nad+0xda>
    2234:	49 81       	ldd	r20, Y+1	; 0x01
    2236:	5a 81       	ldd	r21, Y+2	; 0x02
    2238:	29 2f       	mov	r18, r25
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	21 50       	subi	r18, 0x01	; 1
    223e:	30 4e       	sbci	r19, 0xE0	; 224
    2240:	22 0f       	add	r18, r18
    2242:	33 1f       	adc	r19, r19
    2244:	22 0f       	add	r18, r18
    2246:	33 1f       	adc	r19, r19
    2248:	22 0f       	add	r18, r18
    224a:	33 1f       	adc	r19, r19
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <lin_condittional_change_nad+0xd4>
    224e:	56 95       	lsr	r21
    2250:	47 95       	ror	r20
    2252:	2a 95       	dec	r18
    2254:	e2 f7       	brpl	.-8      	; 0x224e <lin_condittional_change_nad+0xd0>
    2256:	19 c0       	rjmp	.+50     	; 0x228a <lin_condittional_change_nad+0x10c>
    2258:	2d ef       	ldi	r18, 0xFD	; 253
    225a:	29 0f       	add	r18, r25
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	a0 f4       	brcc	.+40     	; 0x2288 <lin_condittional_change_nad+0x10a>
    2260:	2b 81       	ldd	r18, Y+3	; 0x03
    2262:	3c 81       	ldd	r19, Y+4	; 0x04
    2264:	49 2f       	mov	r20, r25
    2266:	50 e0       	ldi	r21, 0x00	; 0
    2268:	43 50       	subi	r20, 0x03	; 3
    226a:	50 4e       	sbci	r21, 0xE0	; 224
    226c:	44 0f       	add	r20, r20
    226e:	55 1f       	adc	r21, r21
    2270:	44 0f       	add	r20, r20
    2272:	55 1f       	adc	r21, r21
    2274:	44 0f       	add	r20, r20
    2276:	55 1f       	adc	r21, r21
    2278:	f9 01       	movw	r30, r18
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <lin_condittional_change_nad+0x102>
    227c:	f6 95       	lsr	r31
    227e:	e7 95       	ror	r30
    2280:	4a 95       	dec	r20
    2282:	e2 f7       	brpl	.-8      	; 0x227c <lin_condittional_change_nad+0xfe>
    2284:	af 01       	movw	r20, r30
    2286:	01 c0       	rjmp	.+2      	; 0x228a <lin_condittional_change_nad+0x10c>
    2288:	4d 81       	ldd	r20, Y+5	; 0x05
    228a:	46 27       	eor	r20, r22
    228c:	47 23       	and	r20, r23
    228e:	19 f1       	breq	.+70     	; 0x22d6 <lin_condittional_change_nad+0x158>
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	26 c0       	rjmp	.+76     	; 0x22e0 <lin_condittional_change_nad+0x162>
    2294:	2f ef       	ldi	r18, 0xFF	; 255
    2296:	29 0f       	add	r18, r25
    2298:	24 30       	cpi	r18, 0x04	; 4
    229a:	f8 f4       	brcc	.+62     	; 0x22da <lin_condittional_change_nad+0x15c>
    229c:	92 30       	cpi	r25, 0x02	; 2
    229e:	59 f0       	breq	.+22     	; 0x22b6 <lin_condittional_change_nad+0x138>
    22a0:	18 f4       	brcc	.+6      	; 0x22a8 <lin_condittional_change_nad+0x12a>
    22a2:	91 30       	cpi	r25, 0x01	; 1
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <lin_condittional_change_nad+0x134>
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <lin_condittional_change_nad+0x142>
    22a8:	93 30       	cpi	r25, 0x03	; 3
    22aa:	39 f0       	breq	.+14     	; 0x22ba <lin_condittional_change_nad+0x13c>
    22ac:	94 30       	cpi	r25, 0x04	; 4
    22ae:	39 f0       	breq	.+14     	; 0x22be <lin_condittional_change_nad+0x140>
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <lin_condittional_change_nad+0x142>
    22b2:	9c 2d       	mov	r25, r12
    22b4:	05 c0       	rjmp	.+10     	; 0x22c0 <lin_condittional_change_nad+0x142>
    22b6:	9d 2d       	mov	r25, r13
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <lin_condittional_change_nad+0x142>
    22ba:	95 2f       	mov	r25, r21
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <lin_condittional_change_nad+0x142>
    22be:	94 2f       	mov	r25, r20
    22c0:	29 2f       	mov	r18, r25
    22c2:	26 27       	eor	r18, r22
    22c4:	47 2f       	mov	r20, r23
    22c6:	42 23       	and	r20, r18
    22c8:	51 f0       	breq	.+20     	; 0x22de <lin_condittional_change_nad+0x160>
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <lin_condittional_change_nad+0x162>
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <lin_condittional_change_nad+0x162>
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <lin_condittional_change_nad+0x162>
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <lin_condittional_change_nad+0x162>
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <lin_condittional_change_nad+0x162>
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	99 23       	and	r25, r25
    22e2:	51 f1       	breq	.+84     	; 0x2338 <lin_condittional_change_nad+0x1ba>
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	63 eb       	ldi	r22, 0xB3	; 179
    22ea:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    22ee:	84 e2       	ldi	r24, 0x24	; 36
    22f0:	80 9f       	mul	r24, r16
    22f2:	f0 01       	movw	r30, r0
    22f4:	81 9f       	mul	r24, r17
    22f6:	f0 0d       	add	r31, r0
    22f8:	11 24       	eor	r1, r1
    22fa:	ec 59       	subi	r30, 0x9C	; 156
    22fc:	fc 49       	sbci	r31, 0x9C	; 156
    22fe:	80 81       	ld	r24, Z
    2300:	91 81       	ldd	r25, Z+1	; 0x01
    2302:	24 e3       	ldi	r18, 0x34	; 52
    2304:	2e 9d       	mul	r18, r14
    2306:	d0 01       	movw	r26, r0
    2308:	2f 9d       	mul	r18, r15
    230a:	b0 0d       	add	r27, r0
    230c:	11 24       	eor	r1, r1
    230e:	ad 56       	subi	r26, 0x6D	; 109
    2310:	b8 49       	sbci	r27, 0x98	; 152
    2312:	54 96       	adiw	r26, 0x14	; 20
    2314:	2d 91       	ld	r18, X+
    2316:	3c 91       	ld	r19, X
    2318:	55 97       	sbiw	r26, 0x15	; 21
    231a:	1b 96       	adiw	r26, 0x0b	; 11
    231c:	ed 91       	ld	r30, X+
    231e:	fc 91       	ld	r31, X
    2320:	1c 97       	sbiw	r26, 0x0c	; 12
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	ee 0f       	add	r30, r30
    2328:	ff 1f       	adc	r31, r31
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	e2 0f       	add	r30, r18
    2330:	f3 1f       	adc	r31, r19
    2332:	27 81       	ldd	r18, Z+7	; 0x07
    2334:	fc 01       	movw	r30, r24
    2336:	20 83       	st	Z, r18
    2338:	25 96       	adiw	r28, 0x05	; 5
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	08 95       	ret

00002350 <lin_assign_nad>:
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	2d 97       	sbiw	r28, 0x0d	; 13
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	48 2f       	mov	r20, r24
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	9c e1       	ldi	r25, 0x1C	; 28
    2364:	94 9f       	mul	r25, r20
    2366:	f0 01       	movw	r30, r0
    2368:	95 9f       	mul	r25, r21
    236a:	f0 0d       	add	r31, r0
    236c:	11 24       	eor	r1, r1
    236e:	e8 5b       	subi	r30, 0xB8	; 184
    2370:	fc 49       	sbci	r31, 0x9C	; 156
    2372:	e2 89       	ldd	r30, Z+18	; 0x12
    2374:	94 e2       	ldi	r25, 0x24	; 36
    2376:	e9 9f       	mul	r30, r25
    2378:	f0 01       	movw	r30, r0
    237a:	11 24       	eor	r1, r1
    237c:	e9 59       	subi	r30, 0x99	; 153
    237e:	fc 49       	sbci	r31, 0x9C	; 156
    2380:	95 e0       	ldi	r25, 0x05	; 5
    2382:	de 01       	movw	r26, r28
    2384:	19 96       	adiw	r26, 0x09	; 9
    2386:	01 90       	ld	r0, Z+
    2388:	0d 92       	st	X+, r0
    238a:	9a 95       	dec	r25
    238c:	e1 f7       	brne	.-8      	; 0x2386 <lin_assign_nad+0x36>
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	25 c0       	rjmp	.+74     	; 0x23dc <lin_assign_nad+0x8c>
    2392:	24 e3       	ldi	r18, 0x34	; 52
    2394:	24 9f       	mul	r18, r20
    2396:	d0 01       	movw	r26, r0
    2398:	25 9f       	mul	r18, r21
    239a:	b0 0d       	add	r27, r0
    239c:	11 24       	eor	r1, r1
    239e:	ad 56       	subi	r26, 0x6D	; 109
    23a0:	b8 49       	sbci	r27, 0x98	; 152
    23a2:	54 96       	adiw	r26, 0x14	; 20
    23a4:	2d 91       	ld	r18, X+
    23a6:	3c 91       	ld	r19, X
    23a8:	55 97       	sbiw	r26, 0x15	; 21
    23aa:	1b 96       	adiw	r26, 0x0b	; 11
    23ac:	ed 91       	ld	r30, X+
    23ae:	fc 91       	ld	r31, X
    23b0:	1c 97       	sbiw	r26, 0x0c	; 12
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	e2 0f       	add	r30, r18
    23c0:	f3 1f       	adc	r31, r19
    23c2:	29 2f       	mov	r18, r25
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	e2 0f       	add	r30, r18
    23c8:	f3 1f       	adc	r31, r19
    23ca:	60 81       	ld	r22, Z
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	ec 0f       	add	r30, r28
    23d2:	fd 1f       	adc	r31, r29
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	60 83       	st	Z, r22
    23da:	9f 5f       	subi	r25, 0xFF	; 255
    23dc:	98 30       	cpi	r25, 0x08	; 8
    23de:	c8 f2       	brcs	.-78     	; 0x2392 <lin_assign_nad+0x42>
    23e0:	2d 81       	ldd	r18, Y+5	; 0x05
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	32 2f       	mov	r19, r18
    23e6:	22 27       	eor	r18, r18
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	29 2b       	or	r18, r25
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	76 2f       	mov	r23, r22
    23f2:	66 27       	eor	r22, r22
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	69 2b       	or	r22, r25
    23f8:	e9 85       	ldd	r30, Y+9	; 0x09
    23fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    23fc:	2e 17       	cp	r18, r30
    23fe:	3f 07       	cpc	r19, r31
    2400:	19 f0       	breq	.+6      	; 0x2408 <lin_assign_nad+0xb8>
    2402:	2f 3f       	cpi	r18, 0xFF	; 255
    2404:	3f 47       	sbci	r19, 0x7F	; 127
    2406:	41 f4       	brne	.+16     	; 0x2418 <lin_assign_nad+0xc8>
    2408:	2b 85       	ldd	r18, Y+11	; 0x0b
    240a:	3c 85       	ldd	r19, Y+12	; 0x0c
    240c:	62 17       	cp	r22, r18
    240e:	73 07       	cpc	r23, r19
    2410:	69 f0       	breq	.+26     	; 0x242c <lin_assign_nad+0xdc>
    2412:	6f 3f       	cpi	r22, 0xFF	; 255
    2414:	7f 4f       	sbci	r23, 0xFF	; 255
    2416:	51 f0       	breq	.+20     	; 0x242c <lin_assign_nad+0xdc>
    2418:	84 e3       	ldi	r24, 0x34	; 52
    241a:	84 9f       	mul	r24, r20
    241c:	f0 01       	movw	r30, r0
    241e:	85 9f       	mul	r24, r21
    2420:	f0 0d       	add	r31, r0
    2422:	11 24       	eor	r1, r1
    2424:	ed 56       	subi	r30, 0x6D	; 109
    2426:	f8 49       	sbci	r31, 0x98	; 152
    2428:	12 a6       	std	Z+42, r1	; 0x2a
    242a:	05 c0       	rjmp	.+10     	; 0x2436 <lin_assign_nad+0xe6>
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	60 eb       	ldi	r22, 0xB0	; 176
    2432:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2436:	2d 96       	adiw	r28, 0x0d	; 13
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	08 95       	ret

00002442 <lin_diagservice_assign_frame_id_range>:
    2442:	af 92       	push	r10
    2444:	bf 92       	push	r11
    2446:	df 92       	push	r13
    2448:	ef 92       	push	r14
    244a:	ff 92       	push	r15
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	28 97       	sbiw	r28, 0x08	; 8
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	f8 2e       	mov	r15, r24
    2460:	08 2f       	mov	r16, r24
    2462:	10 e0       	ldi	r17, 0x00	; 0
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	25 c0       	rjmp	.+74     	; 0x24b2 <lin_diagservice_assign_frame_id_range+0x70>
    2468:	84 e3       	ldi	r24, 0x34	; 52
    246a:	80 9f       	mul	r24, r16
    246c:	d0 01       	movw	r26, r0
    246e:	81 9f       	mul	r24, r17
    2470:	b0 0d       	add	r27, r0
    2472:	11 24       	eor	r1, r1
    2474:	ad 56       	subi	r26, 0x6D	; 109
    2476:	b8 49       	sbci	r27, 0x98	; 152
    2478:	54 96       	adiw	r26, 0x14	; 20
    247a:	8d 91       	ld	r24, X+
    247c:	9c 91       	ld	r25, X
    247e:	55 97       	sbiw	r26, 0x15	; 21
    2480:	1b 96       	adiw	r26, 0x0b	; 11
    2482:	ed 91       	ld	r30, X+
    2484:	fc 91       	ld	r31, X
    2486:	1c 97       	sbiw	r26, 0x0c	; 12
    2488:	ee 0f       	add	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	ee 0f       	add	r30, r30
    248e:	ff 1f       	adc	r31, r31
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	e8 0f       	add	r30, r24
    2496:	f9 1f       	adc	r31, r25
    2498:	82 2f       	mov	r24, r18
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	e8 0f       	add	r30, r24
    249e:	f9 1f       	adc	r31, r25
    24a0:	30 81       	ld	r19, Z
    24a2:	e1 e0       	ldi	r30, 0x01	; 1
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	ec 0f       	add	r30, r28
    24a8:	fd 1f       	adc	r31, r29
    24aa:	e8 0f       	add	r30, r24
    24ac:	f9 1f       	adc	r31, r25
    24ae:	30 83       	st	Z, r19
    24b0:	2f 5f       	subi	r18, 0xFF	; 255
    24b2:	28 30       	cpi	r18, 0x08	; 8
    24b4:	c8 f2       	brcs	.-78     	; 0x2468 <lin_diagservice_assign_frame_id_range+0x26>
    24b6:	ec 80       	ldd	r14, Y+4	; 0x04
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <lin_diagservice_assign_frame_id_range+0x80>
    24be:	9f 5f       	subi	r25, 0xFF	; 255
    24c0:	84 2f       	mov	r24, r20
    24c2:	2c e1       	ldi	r18, 0x1C	; 28
    24c4:	20 9f       	mul	r18, r16
    24c6:	f0 01       	movw	r30, r0
    24c8:	21 9f       	mul	r18, r17
    24ca:	f0 0d       	add	r31, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	e8 5b       	subi	r30, 0xB8	; 184
    24d0:	fc 49       	sbci	r31, 0x9C	; 156
    24d2:	20 85       	ldd	r18, Z+8	; 0x08
    24d4:	31 85       	ldd	r19, Z+9	; 0x09
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	48 0f       	add	r20, r24
    24da:	e8 2f       	mov	r30, r24
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	e2 0f       	add	r30, r18
    24e4:	f3 1f       	adc	r31, r19
    24e6:	20 81       	ld	r18, Z
    24e8:	31 81       	ldd	r19, Z+1	; 0x01
    24ea:	2f 3f       	cpi	r18, 0xFF	; 255
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	39 f7       	brne	.-50     	; 0x24be <lin_diagservice_assign_frame_id_range+0x7c>
    24f0:	6d ef       	ldi	r22, 0xFD	; 253
    24f2:	69 0f       	add	r22, r25
    24f4:	4e 2d       	mov	r20, r14
    24f6:	54 e0       	ldi	r21, 0x04	; 4
    24f8:	17 c0       	rjmp	.+46     	; 0x2528 <lin_diagservice_assign_frame_id_range+0xe6>
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	95 0f       	add	r25, r21
    24fe:	e1 e0       	ldi	r30, 0x01	; 1
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	ec 0f       	add	r30, r28
    2504:	fd 1f       	adc	r31, r29
    2506:	e5 0f       	add	r30, r21
    2508:	f1 1d       	adc	r31, r1
    250a:	80 81       	ld	r24, Z
    250c:	8f 3f       	cpi	r24, 0xFF	; 255
    250e:	51 f0       	breq	.+20     	; 0x2524 <lin_diagservice_assign_frame_id_range+0xe2>
    2510:	64 17       	cp	r22, r20
    2512:	40 f4       	brcc	.+16     	; 0x2524 <lin_diagservice_assign_frame_id_range+0xe2>
    2514:	20 e1       	ldi	r18, 0x10	; 16
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	67 eb       	ldi	r22, 0xB7	; 183
    251a:	8f 2d       	mov	r24, r15
    251c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	0b c0       	rjmp	.+22     	; 0x253a <lin_diagservice_assign_frame_id_range+0xf8>
    2524:	4f 5f       	subi	r20, 0xFF	; 255
    2526:	59 2f       	mov	r21, r25
    2528:	24 2f       	mov	r18, r20
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	8e 2d       	mov	r24, r14
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	04 96       	adiw	r24, 0x04	; 4
    2532:	28 17       	cp	r18, r24
    2534:	39 07       	cpc	r19, r25
    2536:	08 f3       	brcs	.-62     	; 0x24fa <lin_diagservice_assign_frame_id_range+0xb8>
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	81 30       	cpi	r24, 0x01	; 1
    253c:	f1 f5       	brne	.+124    	; 0x25ba <lin_diagservice_assign_frame_id_range+0x178>
    253e:	31 c0       	rjmp	.+98     	; 0x25a2 <lin_diagservice_assign_frame_id_range+0x160>
    2540:	e1 e0       	ldi	r30, 0x01	; 1
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	ec 0f       	add	r30, r28
    2546:	fd 1f       	adc	r31, r29
    2548:	ed 0d       	add	r30, r13
    254a:	f1 1d       	adc	r31, r1
    254c:	80 81       	ld	r24, Z
    254e:	88 23       	and	r24, r24
    2550:	19 f0       	breq	.+6      	; 0x2558 <lin_diagservice_assign_frame_id_range+0x116>
    2552:	8f 3f       	cpi	r24, 0xFF	; 255
    2554:	21 f1       	breq	.+72     	; 0x259e <lin_diagservice_assign_frame_id_range+0x15c>
    2556:	11 c0       	rjmp	.+34     	; 0x257a <lin_diagservice_assign_frame_id_range+0x138>
    2558:	e3 94       	inc	r14
    255a:	8c e1       	ldi	r24, 0x1C	; 28
    255c:	80 9f       	mul	r24, r16
    255e:	f0 01       	movw	r30, r0
    2560:	81 9f       	mul	r24, r17
    2562:	f0 0d       	add	r31, r0
    2564:	11 24       	eor	r1, r1
    2566:	e8 5b       	subi	r30, 0xB8	; 184
    2568:	fc 49       	sbci	r31, 0x9C	; 156
    256a:	02 84       	ldd	r0, Z+10	; 0x0a
    256c:	f3 85       	ldd	r31, Z+11	; 0x0b
    256e:	e0 2d       	mov	r30, r0
    2570:	ee 0d       	add	r30, r14
    2572:	f1 1d       	adc	r31, r1
    2574:	8f ef       	ldi	r24, 0xFF	; 255
    2576:	80 83       	st	Z, r24
    2578:	12 c0       	rjmp	.+36     	; 0x259e <lin_diagservice_assign_frame_id_range+0x15c>
    257a:	e3 94       	inc	r14
    257c:	9c e1       	ldi	r25, 0x1C	; 28
    257e:	90 9f       	mul	r25, r16
    2580:	f0 01       	movw	r30, r0
    2582:	91 9f       	mul	r25, r17
    2584:	f0 0d       	add	r31, r0
    2586:	11 24       	eor	r1, r1
    2588:	e8 5b       	subi	r30, 0xB8	; 184
    258a:	fc 49       	sbci	r31, 0x9C	; 156
    258c:	a2 84       	ldd	r10, Z+10	; 0x0a
    258e:	b3 84       	ldd	r11, Z+11	; 0x0b
    2590:	ae 0c       	add	r10, r14
    2592:	b1 1c       	adc	r11, r1
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <lin_process_parity>
    259a:	f5 01       	movw	r30, r10
    259c:	80 83       	st	Z, r24
    259e:	d3 94       	inc	r13
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <lin_diagservice_assign_frame_id_range+0x166>
    25a2:	68 94       	set
    25a4:	dd 24       	eor	r13, r13
    25a6:	d2 f8       	bld	r13, 2
    25a8:	f7 e0       	ldi	r31, 0x07	; 7
    25aa:	fd 15       	cp	r31, r13
    25ac:	48 f6       	brcc	.-110    	; 0x2540 <lin_diagservice_assign_frame_id_range+0xfe>
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	67 eb       	ldi	r22, 0xB7	; 183
    25b4:	8f 2d       	mov	r24, r15
    25b6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    25ba:	28 96       	adiw	r28, 0x08	; 8
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	df 90       	pop	r13
    25ce:	bf 90       	pop	r11
    25d0:	af 90       	pop	r10
    25d2:	08 95       	ret

000025d4 <lin_diagservice_read_by_identifier>:
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	62 97       	sbiw	r28, 0x12	; 18
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	08 2f       	mov	r16, r24
    25ec:	10 e0       	ldi	r17, 0x00	; 0
    25ee:	9c e1       	ldi	r25, 0x1C	; 28
    25f0:	90 9f       	mul	r25, r16
    25f2:	f0 01       	movw	r30, r0
    25f4:	91 9f       	mul	r25, r17
    25f6:	f0 0d       	add	r31, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	e8 5b       	subi	r30, 0xB8	; 184
    25fc:	fc 49       	sbci	r31, 0x9C	; 156
    25fe:	42 89       	ldd	r20, Z+18	; 0x12
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	25 c0       	rjmp	.+74     	; 0x2650 <lin_diagservice_read_by_identifier+0x7c>
    2606:	24 e3       	ldi	r18, 0x34	; 52
    2608:	20 9f       	mul	r18, r16
    260a:	d0 01       	movw	r26, r0
    260c:	21 9f       	mul	r18, r17
    260e:	b0 0d       	add	r27, r0
    2610:	11 24       	eor	r1, r1
    2612:	ad 56       	subi	r26, 0x6D	; 109
    2614:	b8 49       	sbci	r27, 0x98	; 152
    2616:	54 96       	adiw	r26, 0x14	; 20
    2618:	2d 91       	ld	r18, X+
    261a:	3c 91       	ld	r19, X
    261c:	55 97       	sbiw	r26, 0x15	; 21
    261e:	1b 96       	adiw	r26, 0x0b	; 11
    2620:	ed 91       	ld	r30, X+
    2622:	fc 91       	ld	r31, X
    2624:	1c 97       	sbiw	r26, 0x0c	; 12
    2626:	ee 0f       	add	r30, r30
    2628:	ff 1f       	adc	r31, r31
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	29 2f       	mov	r18, r25
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	60 81       	ld	r22, Z
    2640:	e6 e0       	ldi	r30, 0x06	; 6
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	ec 0f       	add	r30, r28
    2646:	fd 1f       	adc	r31, r29
    2648:	e2 0f       	add	r30, r18
    264a:	f3 1f       	adc	r31, r19
    264c:	60 83       	st	Z, r22
    264e:	9f 5f       	subi	r25, 0xFF	; 255
    2650:	98 30       	cpi	r25, 0x08	; 8
    2652:	c8 f2       	brcs	.-78     	; 0x2606 <lin_diagservice_read_by_identifier+0x32>
    2654:	94 e2       	ldi	r25, 0x24	; 36
    2656:	94 9f       	mul	r25, r20
    2658:	f0 01       	movw	r30, r0
    265a:	95 9f       	mul	r25, r21
    265c:	f0 0d       	add	r31, r0
    265e:	11 24       	eor	r1, r1
    2660:	e9 59       	subi	r30, 0x99	; 153
    2662:	fc 49       	sbci	r31, 0x9C	; 156
    2664:	95 e0       	ldi	r25, 0x05	; 5
    2666:	de 01       	movw	r26, r28
    2668:	11 96       	adiw	r26, 0x01	; 1
    266a:	01 90       	ld	r0, Z+
    266c:	0d 92       	st	X+, r0
    266e:	9a 95       	dec	r25
    2670:	e1 f7       	brne	.-8      	; 0x266a <lin_diagservice_read_by_identifier+0x96>
    2672:	2b 85       	ldd	r18, Y+11	; 0x0b
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	32 2f       	mov	r19, r18
    2678:	22 27       	eor	r18, r18
    267a:	9a 85       	ldd	r25, Y+10	; 0x0a
    267c:	29 2b       	or	r18, r25
    267e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	54 2f       	mov	r21, r20
    2684:	44 27       	eor	r20, r20
    2686:	9c 85       	ldd	r25, Y+12	; 0x0c
    2688:	49 2b       	or	r20, r25
    268a:	69 81       	ldd	r22, Y+1	; 0x01
    268c:	7a 81       	ldd	r23, Y+2	; 0x02
    268e:	26 17       	cp	r18, r22
    2690:	37 07       	cpc	r19, r23
    2692:	19 f0       	breq	.+6      	; 0x269a <lin_diagservice_read_by_identifier+0xc6>
    2694:	2f 3f       	cpi	r18, 0xFF	; 255
    2696:	3f 47       	sbci	r19, 0x7F	; 127
    2698:	41 f4       	brne	.+16     	; 0x26aa <lin_diagservice_read_by_identifier+0xd6>
    269a:	2b 81       	ldd	r18, Y+3	; 0x03
    269c:	3c 81       	ldd	r19, Y+4	; 0x04
    269e:	42 17       	cp	r20, r18
    26a0:	53 07       	cpc	r21, r19
    26a2:	69 f0       	breq	.+26     	; 0x26be <lin_diagservice_read_by_identifier+0xea>
    26a4:	4f 3f       	cpi	r20, 0xFF	; 255
    26a6:	5f 4f       	sbci	r21, 0xFF	; 255
    26a8:	51 f0       	breq	.+20     	; 0x26be <lin_diagservice_read_by_identifier+0xea>
    26aa:	84 e3       	ldi	r24, 0x34	; 52
    26ac:	80 9f       	mul	r24, r16
    26ae:	f0 01       	movw	r30, r0
    26b0:	81 9f       	mul	r24, r17
    26b2:	f0 0d       	add	r31, r0
    26b4:	11 24       	eor	r1, r1
    26b6:	ed 56       	subi	r30, 0x6D	; 109
    26b8:	f8 49       	sbci	r31, 0x98	; 152
    26ba:	12 a6       	std	Z+42, r1	; 0x2a
    26bc:	66 c0       	rjmp	.+204    	; 0x278a <lin_diagservice_read_by_identifier+0x1b6>
    26be:	f8 2e       	mov	r15, r24
    26c0:	e9 84       	ldd	r14, Y+9	; 0x09
    26c2:	ee 20       	and	r14, r14
    26c4:	21 f0       	breq	.+8      	; 0x26ce <lin_diagservice_read_by_identifier+0xfa>
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	e8 16       	cp	r14, r24
    26ca:	39 f0       	breq	.+14     	; 0x26da <lin_diagservice_read_by_identifier+0x106>
    26cc:	0d c0       	rjmp	.+26     	; 0x26e8 <lin_diagservice_read_by_identifier+0x114>
    26ce:	2e 2d       	mov	r18, r14
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	62 eb       	ldi	r22, 0xB2	; 178
    26d4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    26d8:	58 c0       	rjmp	.+176    	; 0x278a <lin_diagservice_read_by_identifier+0x1b6>
    26da:	2e 2d       	mov	r18, r14
    26dc:	41 e0       	ldi	r20, 0x01	; 1
    26de:	62 eb       	ldi	r22, 0xB2	; 178
    26e0:	8f 2d       	mov	r24, r15
    26e2:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    26e6:	51 c0       	rjmp	.+162    	; 0x278a <lin_diagservice_read_by_identifier+0x1b6>
    26e8:	80 ee       	ldi	r24, 0xE0	; 224
    26ea:	8e 0d       	add	r24, r14
    26ec:	80 32       	cpi	r24, 0x20	; 32
    26ee:	08 f0       	brcs	.+2      	; 0x26f2 <lin_diagservice_read_by_identifier+0x11e>
    26f0:	46 c0       	rjmp	.+140    	; 0x277e <lin_diagservice_read_by_identifier+0x1aa>
    26f2:	85 e0       	ldi	r24, 0x05	; 5
    26f4:	eb ef       	ldi	r30, 0xFB	; 251
    26f6:	f2 e6       	ldi	r31, 0x62	; 98
    26f8:	de 01       	movw	r26, r28
    26fa:	1e 96       	adiw	r26, 0x0e	; 14
    26fc:	01 90       	ld	r0, Z+
    26fe:	0d 92       	st	X+, r0
    2700:	8a 95       	dec	r24
    2702:	e1 f7       	brne	.-8      	; 0x26fc <lin_diagservice_read_by_identifier+0x128>
    2704:	ae 01       	movw	r20, r28
    2706:	42 5f       	subi	r20, 0xF2	; 242
    2708:	5f 4f       	sbci	r21, 0xFF	; 255
    270a:	6e 2d       	mov	r22, r14
    270c:	8f 2d       	mov	r24, r15
    270e:	0e 94 79 19 	call	0x32f2	; 0x32f2 <ld_read_by_id_callout>
    2712:	84 35       	cpi	r24, 0x54	; 84
    2714:	f9 f4       	brne	.+62     	; 0x2754 <lin_diagservice_read_by_identifier+0x180>
    2716:	02 c0       	rjmp	.+4      	; 0x271c <lin_diagservice_read_by_identifier+0x148>
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	01 c0       	rjmp	.+2      	; 0x271e <lin_diagservice_read_by_identifier+0x14a>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	85 30       	cpi	r24, 0x05	; 5
    2720:	48 f4       	brcc	.+18     	; 0x2734 <lin_diagservice_read_by_identifier+0x160>
    2722:	ee e0       	ldi	r30, 0x0E	; 14
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	ec 0f       	add	r30, r28
    2728:	fd 1f       	adc	r31, r29
    272a:	e8 0f       	add	r30, r24
    272c:	f1 1d       	adc	r31, r1
    272e:	90 81       	ld	r25, Z
    2730:	9f 3f       	cpi	r25, 0xFF	; 255
    2732:	91 f3       	breq	.-28     	; 0x2718 <lin_diagservice_read_by_identifier+0x144>
    2734:	85 30       	cpi	r24, 0x05	; 5
    2736:	38 f4       	brcc	.+14     	; 0x2746 <lin_diagservice_read_by_identifier+0x172>
    2738:	2e 2d       	mov	r18, r14
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	62 eb       	ldi	r22, 0xB2	; 178
    273e:	8f 2d       	mov	r24, r15
    2740:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2744:	22 c0       	rjmp	.+68     	; 0x278a <lin_diagservice_read_by_identifier+0x1b6>
    2746:	22 e1       	ldi	r18, 0x12	; 18
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	62 eb       	ldi	r22, 0xB2	; 178
    274c:	8f 2d       	mov	r24, r15
    274e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2752:	1b c0       	rjmp	.+54     	; 0x278a <lin_diagservice_read_by_identifier+0x1b6>
    2754:	83 35       	cpi	r24, 0x53	; 83
    2756:	39 f4       	brne	.+14     	; 0x2766 <lin_diagservice_read_by_identifier+0x192>
    2758:	22 e1       	ldi	r18, 0x12	; 18
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	62 eb       	ldi	r22, 0xB2	; 178
    275e:	8f 2d       	mov	r24, r15
    2760:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2764:	12 c0       	rjmp	.+36     	; 0x278a <lin_diagservice_read_by_identifier+0x1b6>
    2766:	84 e3       	ldi	r24, 0x34	; 52
    2768:	80 9f       	mul	r24, r16
    276a:	f0 01       	movw	r30, r0
    276c:	81 9f       	mul	r24, r17
    276e:	f0 0d       	add	r31, r0
    2770:	11 24       	eor	r1, r1
    2772:	ed 56       	subi	r30, 0x6D	; 109
    2774:	f8 49       	sbci	r31, 0x98	; 152
    2776:	12 a6       	std	Z+42, r1	; 0x2a
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	83 a7       	std	Z+43, r24	; 0x2b
    277c:	06 c0       	rjmp	.+12     	; 0x278a <lin_diagservice_read_by_identifier+0x1b6>
    277e:	22 e1       	ldi	r18, 0x12	; 18
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	62 eb       	ldi	r22, 0xB2	; 178
    2784:	8f 2d       	mov	r24, r15
    2786:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    278a:	62 96       	adiw	r28, 0x12	; 18
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	08 95       	ret

0000279e <lin_read_data_by_identify>:
    279e:	af 92       	push	r10
    27a0:	bf 92       	push	r11
    27a2:	cf 92       	push	r12
    27a4:	df 92       	push	r13
    27a6:	ef 92       	push	r14
    27a8:	ff 92       	push	r15
    27aa:	0f 93       	push	r16
    27ac:	1f 93       	push	r17
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	28 97       	sbiw	r28, 0x08	; 8
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	f8 2e       	mov	r15, r24
    27be:	08 2f       	mov	r16, r24
    27c0:	10 e0       	ldi	r17, 0x00	; 0
    27c2:	8c e1       	ldi	r24, 0x1C	; 28
    27c4:	80 9f       	mul	r24, r16
    27c6:	f0 01       	movw	r30, r0
    27c8:	81 9f       	mul	r24, r17
    27ca:	f0 0d       	add	r31, r0
    27cc:	11 24       	eor	r1, r1
    27ce:	e8 5b       	subi	r30, 0xB8	; 184
    27d0:	fc 49       	sbci	r31, 0x9C	; 156
    27d2:	22 89       	ldd	r18, Z+18	; 0x12
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	25 c0       	rjmp	.+74     	; 0x2824 <lin_read_data_by_identify+0x86>
    27da:	84 e3       	ldi	r24, 0x34	; 52
    27dc:	80 9f       	mul	r24, r16
    27de:	d0 01       	movw	r26, r0
    27e0:	81 9f       	mul	r24, r17
    27e2:	b0 0d       	add	r27, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	ad 56       	subi	r26, 0x6D	; 109
    27e8:	b8 49       	sbci	r27, 0x98	; 152
    27ea:	54 96       	adiw	r26, 0x14	; 20
    27ec:	8d 91       	ld	r24, X+
    27ee:	9c 91       	ld	r25, X
    27f0:	55 97       	sbiw	r26, 0x15	; 21
    27f2:	1b 96       	adiw	r26, 0x0b	; 11
    27f4:	ed 91       	ld	r30, X+
    27f6:	fc 91       	ld	r31, X
    27f8:	1c 97       	sbiw	r26, 0x0c	; 12
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	e8 0f       	add	r30, r24
    2808:	f9 1f       	adc	r31, r25
    280a:	84 2f       	mov	r24, r20
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	e8 0f       	add	r30, r24
    2810:	f9 1f       	adc	r31, r25
    2812:	50 81       	ld	r21, Z
    2814:	e1 e0       	ldi	r30, 0x01	; 1
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	ec 0f       	add	r30, r28
    281a:	fd 1f       	adc	r31, r29
    281c:	e8 0f       	add	r30, r24
    281e:	f9 1f       	adc	r31, r25
    2820:	50 83       	st	Z, r21
    2822:	4f 5f       	subi	r20, 0xFF	; 255
    2824:	48 30       	cpi	r20, 0x08	; 8
    2826:	c8 f2       	brcs	.-78     	; 0x27da <lin_read_data_by_identify+0x3c>
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	98 2f       	mov	r25, r24
    282e:	88 27       	eor	r24, r24
    2830:	4d 81       	ldd	r20, Y+5	; 0x05
    2832:	84 2b       	or	r24, r20
    2834:	4b 81       	ldd	r20, Y+3	; 0x03
    2836:	81 39       	cpi	r24, 0x91	; 145
    2838:	51 ef       	ldi	r21, 0xF1	; 241
    283a:	95 07       	cpc	r25, r21
    283c:	09 f4       	brne	.+2      	; 0x2840 <lin_read_data_by_identify+0xa2>
    283e:	db c0       	rjmp	.+438    	; 0x29f6 <lin_read_data_by_identify+0x258>
    2840:	48 f4       	brcc	.+18     	; 0x2854 <lin_read_data_by_identify+0xb6>
    2842:	80 38       	cpi	r24, 0x80	; 128
    2844:	f1 ef       	ldi	r31, 0xF1	; 241
    2846:	9f 07       	cpc	r25, r31
    2848:	09 f4       	brne	.+2      	; 0x284c <lin_read_data_by_identify+0xae>
    284a:	91 c0       	rjmp	.+290    	; 0x296e <lin_read_data_by_identify+0x1d0>
    284c:	88 38       	cpi	r24, 0x88	; 136
    284e:	91 4f       	sbci	r25, 0xF1	; 241
    2850:	59 f0       	breq	.+22     	; 0x2868 <lin_read_data_by_identify+0xca>
    2852:	14 c1       	rjmp	.+552    	; 0x2a7c <lin_read_data_by_identify+0x2de>
    2854:	88 39       	cpi	r24, 0x98	; 152
    2856:	e1 ef       	ldi	r30, 0xF1	; 241
    2858:	9e 07       	cpc	r25, r30
    285a:	09 f4       	brne	.+2      	; 0x285e <lin_read_data_by_identify+0xc0>
    285c:	15 c1       	rjmp	.+554    	; 0x2a88 <lin_read_data_by_identify+0x2ea>
    285e:	89 39       	cpi	r24, 0x99	; 153
    2860:	91 4f       	sbci	r25, 0xF1	; 241
    2862:	09 f4       	brne	.+2      	; 0x2866 <lin_read_data_by_identify+0xc8>
    2864:	45 c0       	rjmp	.+138    	; 0x28f0 <lin_read_data_by_identify+0x152>
    2866:	0a c1       	rjmp	.+532    	; 0x2a7c <lin_read_data_by_identify+0x2de>
    2868:	84 e2       	ldi	r24, 0x24	; 36
    286a:	82 9f       	mul	r24, r18
    286c:	f0 01       	movw	r30, r0
    286e:	83 9f       	mul	r24, r19
    2870:	f0 0d       	add	r31, r0
    2872:	11 24       	eor	r1, r1
    2874:	ec 59       	subi	r30, 0x9C	; 156
    2876:	fc 49       	sbci	r31, 0x9C	; 156
    2878:	a0 80       	ld	r10, Z
    287a:	b1 80       	ldd	r11, Z+1	; 0x01
    287c:	f5 01       	movw	r30, r10
    287e:	80 81       	ld	r24, Z
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	80 e1       	ldi	r24, 0x10	; 16
    2884:	8a 83       	std	Y+2, r24	; 0x02
    2886:	8a e0       	ldi	r24, 0x0A	; 10
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	40 5c       	subi	r20, 0xC0	; 192
    288c:	4c 83       	std	Y+4, r20	; 0x04
    288e:	81 ef       	ldi	r24, 0xF1	; 241
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	88 e8       	ldi	r24, 0x88	; 136
    2894:	8e 83       	std	Y+6, r24	; 0x06
    2896:	0f 2e       	mov	r0, r31
    2898:	f0 e3       	ldi	r31, 0x30	; 48
    289a:	ef 2e       	mov	r14, r31
    289c:	f0 2d       	mov	r31, r0
    289e:	ef 82       	std	Y+7, r14	; 0x07
    28a0:	0f 2e       	mov	r0, r31
    28a2:	f2 e3       	ldi	r31, 0x32	; 50
    28a4:	df 2e       	mov	r13, r31
    28a6:	f0 2d       	mov	r31, r0
    28a8:	d8 86       	std	Y+8, r13	; 0x08
    28aa:	be 01       	movw	r22, r28
    28ac:	6f 5f       	subi	r22, 0xFF	; 255
    28ae:	7f 4f       	sbci	r23, 0xFF	; 255
    28b0:	8f 2d       	mov	r24, r15
    28b2:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    28b6:	f5 01       	movw	r30, r10
    28b8:	80 81       	ld	r24, Z
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	81 e2       	ldi	r24, 0x21	; 33
    28be:	8a 83       	std	Y+2, r24	; 0x02
    28c0:	8e e2       	ldi	r24, 0x2E	; 46
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	ec 82       	std	Y+4, r14	; 0x04
    28c6:	dd 82       	std	Y+5, r13	; 0x05
    28c8:	8e 83       	std	Y+6, r24	; 0x06
    28ca:	ef 82       	std	Y+7, r14	; 0x07
    28cc:	e8 86       	std	Y+8, r14	; 0x08
    28ce:	be 01       	movw	r22, r28
    28d0:	6f 5f       	subi	r22, 0xFF	; 255
    28d2:	7f 4f       	sbci	r23, 0xFF	; 255
    28d4:	8f 2d       	mov	r24, r15
    28d6:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    28da:	84 e3       	ldi	r24, 0x34	; 52
    28dc:	80 9f       	mul	r24, r16
    28de:	f0 01       	movw	r30, r0
    28e0:	81 9f       	mul	r24, r17
    28e2:	f0 0d       	add	r31, r0
    28e4:	11 24       	eor	r1, r1
    28e6:	ed 56       	subi	r30, 0x6D	; 109
    28e8:	f8 49       	sbci	r31, 0x98	; 152
    28ea:	82 e0       	ldi	r24, 0x02	; 2
    28ec:	86 a3       	std	Z+38, r24	; 0x26
    28ee:	cc c0       	rjmp	.+408    	; 0x2a88 <lin_read_data_by_identify+0x2ea>
    28f0:	84 e2       	ldi	r24, 0x24	; 36
    28f2:	82 9f       	mul	r24, r18
    28f4:	f0 01       	movw	r30, r0
    28f6:	83 9f       	mul	r24, r19
    28f8:	f0 0d       	add	r31, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	ec 59       	subi	r30, 0x9C	; 156
    28fe:	fc 49       	sbci	r31, 0x9C	; 156
    2900:	c0 80       	ld	r12, Z
    2902:	d1 80       	ldd	r13, Z+1	; 0x01
    2904:	f6 01       	movw	r30, r12
    2906:	80 81       	ld	r24, Z
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	80 e1       	ldi	r24, 0x10	; 16
    290c:	8a 83       	std	Y+2, r24	; 0x02
    290e:	96 e0       	ldi	r25, 0x06	; 6
    2910:	9b 83       	std	Y+3, r25	; 0x03
    2912:	40 5c       	subi	r20, 0xC0	; 192
    2914:	4c 83       	std	Y+4, r20	; 0x04
    2916:	91 ef       	ldi	r25, 0xF1	; 241
    2918:	9d 83       	std	Y+5, r25	; 0x05
    291a:	99 e9       	ldi	r25, 0x99	; 153
    291c:	9e 83       	std	Y+6, r25	; 0x06
    291e:	94 e1       	ldi	r25, 0x14	; 20
    2920:	9f 83       	std	Y+7, r25	; 0x07
    2922:	88 87       	std	Y+8, r24	; 0x08
    2924:	be 01       	movw	r22, r28
    2926:	6f 5f       	subi	r22, 0xFF	; 255
    2928:	7f 4f       	sbci	r23, 0xFF	; 255
    292a:	8f 2d       	mov	r24, r15
    292c:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2930:	f6 01       	movw	r30, r12
    2932:	80 81       	ld	r24, Z
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	81 e2       	ldi	r24, 0x21	; 33
    2938:	8a 83       	std	Y+2, r24	; 0x02
    293a:	8b e0       	ldi	r24, 0x0B	; 11
    293c:	8b 83       	std	Y+3, r24	; 0x03
    293e:	8c e0       	ldi	r24, 0x0C	; 12
    2940:	8c 83       	std	Y+4, r24	; 0x04
    2942:	8f ef       	ldi	r24, 0xFF	; 255
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	8e 83       	std	Y+6, r24	; 0x06
    2948:	8f 83       	std	Y+7, r24	; 0x07
    294a:	88 87       	std	Y+8, r24	; 0x08
    294c:	be 01       	movw	r22, r28
    294e:	6f 5f       	subi	r22, 0xFF	; 255
    2950:	7f 4f       	sbci	r23, 0xFF	; 255
    2952:	8f 2d       	mov	r24, r15
    2954:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2958:	84 e3       	ldi	r24, 0x34	; 52
    295a:	80 9f       	mul	r24, r16
    295c:	f0 01       	movw	r30, r0
    295e:	81 9f       	mul	r24, r17
    2960:	f0 0d       	add	r31, r0
    2962:	11 24       	eor	r1, r1
    2964:	ed 56       	subi	r30, 0x6D	; 109
    2966:	f8 49       	sbci	r31, 0x98	; 152
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	86 a3       	std	Z+38, r24	; 0x26
    296c:	8d c0       	rjmp	.+282    	; 0x2a88 <lin_read_data_by_identify+0x2ea>
    296e:	84 e2       	ldi	r24, 0x24	; 36
    2970:	82 9f       	mul	r24, r18
    2972:	f0 01       	movw	r30, r0
    2974:	83 9f       	mul	r24, r19
    2976:	f0 0d       	add	r31, r0
    2978:	11 24       	eor	r1, r1
    297a:	ec 59       	subi	r30, 0x9C	; 156
    297c:	fc 49       	sbci	r31, 0x9C	; 156
    297e:	a0 80       	ld	r10, Z
    2980:	b1 80       	ldd	r11, Z+1	; 0x01
    2982:	f5 01       	movw	r30, r10
    2984:	80 81       	ld	r24, Z
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	80 e1       	ldi	r24, 0x10	; 16
    298a:	8a 83       	std	Y+2, r24	; 0x02
    298c:	8a e0       	ldi	r24, 0x0A	; 10
    298e:	8b 83       	std	Y+3, r24	; 0x03
    2990:	40 5c       	subi	r20, 0xC0	; 192
    2992:	4c 83       	std	Y+4, r20	; 0x04
    2994:	81 ef       	ldi	r24, 0xF1	; 241
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	80 e8       	ldi	r24, 0x80	; 128
    299a:	8e 83       	std	Y+6, r24	; 0x06
    299c:	0f 2e       	mov	r0, r31
    299e:	f0 e3       	ldi	r31, 0x30	; 48
    29a0:	ef 2e       	mov	r14, r31
    29a2:	f0 2d       	mov	r31, r0
    29a4:	ef 82       	std	Y+7, r14	; 0x07
    29a6:	0f 2e       	mov	r0, r31
    29a8:	f2 e3       	ldi	r31, 0x32	; 50
    29aa:	df 2e       	mov	r13, r31
    29ac:	f0 2d       	mov	r31, r0
    29ae:	d8 86       	std	Y+8, r13	; 0x08
    29b0:	be 01       	movw	r22, r28
    29b2:	6f 5f       	subi	r22, 0xFF	; 255
    29b4:	7f 4f       	sbci	r23, 0xFF	; 255
    29b6:	8f 2d       	mov	r24, r15
    29b8:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    29bc:	f5 01       	movw	r30, r10
    29be:	80 81       	ld	r24, Z
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	81 e2       	ldi	r24, 0x21	; 33
    29c4:	8a 83       	std	Y+2, r24	; 0x02
    29c6:	8e e2       	ldi	r24, 0x2E	; 46
    29c8:	8b 83       	std	Y+3, r24	; 0x03
    29ca:	ec 82       	std	Y+4, r14	; 0x04
    29cc:	dd 82       	std	Y+5, r13	; 0x05
    29ce:	8e 83       	std	Y+6, r24	; 0x06
    29d0:	ef 82       	std	Y+7, r14	; 0x07
    29d2:	e8 86       	std	Y+8, r14	; 0x08
    29d4:	be 01       	movw	r22, r28
    29d6:	6f 5f       	subi	r22, 0xFF	; 255
    29d8:	7f 4f       	sbci	r23, 0xFF	; 255
    29da:	8f 2d       	mov	r24, r15
    29dc:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    29e0:	84 e3       	ldi	r24, 0x34	; 52
    29e2:	80 9f       	mul	r24, r16
    29e4:	f0 01       	movw	r30, r0
    29e6:	81 9f       	mul	r24, r17
    29e8:	f0 0d       	add	r31, r0
    29ea:	11 24       	eor	r1, r1
    29ec:	ed 56       	subi	r30, 0x6D	; 109
    29ee:	f8 49       	sbci	r31, 0x98	; 152
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	86 a3       	std	Z+38, r24	; 0x26
    29f4:	49 c0       	rjmp	.+146    	; 0x2a88 <lin_read_data_by_identify+0x2ea>
    29f6:	84 e2       	ldi	r24, 0x24	; 36
    29f8:	82 9f       	mul	r24, r18
    29fa:	f0 01       	movw	r30, r0
    29fc:	83 9f       	mul	r24, r19
    29fe:	f0 0d       	add	r31, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	ec 59       	subi	r30, 0x9C	; 156
    2a04:	fc 49       	sbci	r31, 0x9C	; 156
    2a06:	c0 80       	ld	r12, Z
    2a08:	d1 80       	ldd	r13, Z+1	; 0x01
    2a0a:	f6 01       	movw	r30, r12
    2a0c:	80 81       	ld	r24, Z
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	80 e1       	ldi	r24, 0x10	; 16
    2a12:	8a 83       	std	Y+2, r24	; 0x02
    2a14:	87 e0       	ldi	r24, 0x07	; 7
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	40 5c       	subi	r20, 0xC0	; 192
    2a1a:	4c 83       	std	Y+4, r20	; 0x04
    2a1c:	81 ef       	ldi	r24, 0xF1	; 241
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	81 e9       	ldi	r24, 0x91	; 145
    2a22:	8e 83       	std	Y+6, r24	; 0x06
    2a24:	88 e4       	ldi	r24, 0x48	; 72
    2a26:	8f 83       	std	Y+7, r24	; 0x07
    2a28:	0f 2e       	mov	r0, r31
    2a2a:	f1 e2       	ldi	r31, 0x21	; 33
    2a2c:	ef 2e       	mov	r14, r31
    2a2e:	f0 2d       	mov	r31, r0
    2a30:	e8 86       	std	Y+8, r14	; 0x08
    2a32:	be 01       	movw	r22, r28
    2a34:	6f 5f       	subi	r22, 0xFF	; 255
    2a36:	7f 4f       	sbci	r23, 0xFF	; 255
    2a38:	8f 2d       	mov	r24, r15
    2a3a:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2a3e:	f6 01       	movw	r30, r12
    2a40:	80 81       	ld	r24, Z
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	ea 82       	std	Y+2, r14	; 0x02
    2a46:	8e e2       	ldi	r24, 0x2E	; 46
    2a48:	8b 83       	std	Y+3, r24	; 0x03
    2a4a:	80 e3       	ldi	r24, 0x30	; 48
    2a4c:	8c 83       	std	Y+4, r24	; 0x04
    2a4e:	81 e3       	ldi	r24, 0x31	; 49
    2a50:	8d 83       	std	Y+5, r24	; 0x05
    2a52:	8f ef       	ldi	r24, 0xFF	; 255
    2a54:	8e 83       	std	Y+6, r24	; 0x06
    2a56:	8f 83       	std	Y+7, r24	; 0x07
    2a58:	88 87       	std	Y+8, r24	; 0x08
    2a5a:	be 01       	movw	r22, r28
    2a5c:	6f 5f       	subi	r22, 0xFF	; 255
    2a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a60:	8f 2d       	mov	r24, r15
    2a62:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2a66:	84 e3       	ldi	r24, 0x34	; 52
    2a68:	80 9f       	mul	r24, r16
    2a6a:	f0 01       	movw	r30, r0
    2a6c:	81 9f       	mul	r24, r17
    2a6e:	f0 0d       	add	r31, r0
    2a70:	11 24       	eor	r1, r1
    2a72:	ed 56       	subi	r30, 0x6D	; 109
    2a74:	f8 49       	sbci	r31, 0x98	; 152
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	86 a3       	std	Z+38, r24	; 0x26
    2a7a:	06 c0       	rjmp	.+12     	; 0x2a88 <lin_read_data_by_identify+0x2ea>
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	62 e2       	ldi	r22, 0x22	; 34
    2a82:	8f 2d       	mov	r24, r15
    2a84:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2a88:	28 96       	adiw	r28, 0x08	; 8
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
    2a9e:	bf 90       	pop	r11
    2aa0:	af 90       	pop	r10
    2aa2:	08 95       	ret

00002aa4 <lin_slave_session_ctr>:
    2aa4:	ff 92       	push	r15
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	28 97       	sbiw	r28, 0x08	; 8
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	08 2f       	mov	r16, r24
    2aba:	10 e0       	ldi	r17, 0x00	; 0
    2abc:	9c e1       	ldi	r25, 0x1C	; 28
    2abe:	90 9f       	mul	r25, r16
    2ac0:	f0 01       	movw	r30, r0
    2ac2:	91 9f       	mul	r25, r17
    2ac4:	f0 0d       	add	r31, r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	e8 5b       	subi	r30, 0xB8	; 184
    2aca:	fc 49       	sbci	r31, 0x9C	; 156
    2acc:	22 89       	ldd	r18, Z+18	; 0x12
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	94 e3       	ldi	r25, 0x34	; 52
    2ad2:	90 9f       	mul	r25, r16
    2ad4:	d0 01       	movw	r26, r0
    2ad6:	91 9f       	mul	r25, r17
    2ad8:	b0 0d       	add	r27, r0
    2ada:	11 24       	eor	r1, r1
    2adc:	ad 56       	subi	r26, 0x6D	; 109
    2ade:	b8 49       	sbci	r27, 0x98	; 152
    2ae0:	54 96       	adiw	r26, 0x14	; 20
    2ae2:	4d 91       	ld	r20, X+
    2ae4:	5c 91       	ld	r21, X
    2ae6:	55 97       	sbiw	r26, 0x15	; 21
    2ae8:	1b 96       	adiw	r26, 0x0b	; 11
    2aea:	ed 91       	ld	r30, X+
    2aec:	fc 91       	ld	r31, X
    2aee:	1c 97       	sbiw	r26, 0x0c	; 12
    2af0:	ee 0f       	add	r30, r30
    2af2:	ff 1f       	adc	r31, r31
    2af4:	ee 0f       	add	r30, r30
    2af6:	ff 1f       	adc	r31, r31
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	e4 0f       	add	r30, r20
    2afe:	f5 1f       	adc	r31, r21
    2b00:	43 81       	ldd	r20, Z+3	; 0x03
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	9f 70       	andi	r25, 0x0F	; 15
    2b06:	92 30       	cpi	r25, 0x02	; 2
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <lin_slave_session_ctr+0x68>
    2b0a:	85 c0       	rjmp	.+266    	; 0x2c16 <lin_slave_session_ctr+0x172>
    2b0c:	41 30       	cpi	r20, 0x01	; 1
    2b0e:	69 f1       	breq	.+90     	; 0x2b6a <lin_slave_session_ctr+0xc6>
    2b10:	20 f0       	brcs	.+8      	; 0x2b1a <lin_slave_session_ctr+0x76>
    2b12:	42 30       	cpi	r20, 0x02	; 2
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <lin_slave_session_ctr+0x74>
    2b16:	51 c0       	rjmp	.+162    	; 0x2bba <lin_slave_session_ctr+0x116>
    2b18:	78 c0       	rjmp	.+240    	; 0x2c0a <lin_slave_session_ctr+0x166>
    2b1a:	94 e2       	ldi	r25, 0x24	; 36
    2b1c:	92 9f       	mul	r25, r18
    2b1e:	f0 01       	movw	r30, r0
    2b20:	93 9f       	mul	r25, r19
    2b22:	f0 0d       	add	r31, r0
    2b24:	11 24       	eor	r1, r1
    2b26:	ec 59       	subi	r30, 0x9C	; 156
    2b28:	fc 49       	sbci	r31, 0x9C	; 156
    2b2a:	01 90       	ld	r0, Z+
    2b2c:	f0 81       	ld	r31, Z
    2b2e:	e0 2d       	mov	r30, r0
    2b30:	90 81       	ld	r25, Z
    2b32:	99 83       	std	Y+1, r25	; 0x01
    2b34:	68 94       	set
    2b36:	ff 24       	eor	r15, r15
    2b38:	f1 f8       	bld	r15, 1
    2b3a:	fa 82       	std	Y+2, r15	; 0x02
    2b3c:	90 e5       	ldi	r25, 0x50	; 80
    2b3e:	9b 83       	std	Y+3, r25	; 0x03
    2b40:	4c 83       	std	Y+4, r20	; 0x04
    2b42:	9f ef       	ldi	r25, 0xFF	; 255
    2b44:	9d 83       	std	Y+5, r25	; 0x05
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	9f 83       	std	Y+7, r25	; 0x07
    2b4a:	98 87       	std	Y+8, r25	; 0x08
    2b4c:	be 01       	movw	r22, r28
    2b4e:	6f 5f       	subi	r22, 0xFF	; 255
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255
    2b52:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2b56:	84 e3       	ldi	r24, 0x34	; 52
    2b58:	80 9f       	mul	r24, r16
    2b5a:	f0 01       	movw	r30, r0
    2b5c:	81 9f       	mul	r24, r17
    2b5e:	f0 0d       	add	r31, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	ed 56       	subi	r30, 0x6D	; 109
    2b64:	f8 49       	sbci	r31, 0x98	; 152
    2b66:	f6 a2       	std	Z+38, r15	; 0x26
    2b68:	5b c0       	rjmp	.+182    	; 0x2c20 <lin_slave_session_ctr+0x17c>
    2b6a:	94 e2       	ldi	r25, 0x24	; 36
    2b6c:	92 9f       	mul	r25, r18
    2b6e:	f0 01       	movw	r30, r0
    2b70:	93 9f       	mul	r25, r19
    2b72:	f0 0d       	add	r31, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	ec 59       	subi	r30, 0x9C	; 156
    2b78:	fc 49       	sbci	r31, 0x9C	; 156
    2b7a:	01 90       	ld	r0, Z+
    2b7c:	f0 81       	ld	r31, Z
    2b7e:	e0 2d       	mov	r30, r0
    2b80:	90 81       	ld	r25, Z
    2b82:	99 83       	std	Y+1, r25	; 0x01
    2b84:	68 94       	set
    2b86:	ff 24       	eor	r15, r15
    2b88:	f1 f8       	bld	r15, 1
    2b8a:	fa 82       	std	Y+2, r15	; 0x02
    2b8c:	90 e5       	ldi	r25, 0x50	; 80
    2b8e:	9b 83       	std	Y+3, r25	; 0x03
    2b90:	4c 83       	std	Y+4, r20	; 0x04
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	9d 83       	std	Y+5, r25	; 0x05
    2b96:	9e 83       	std	Y+6, r25	; 0x06
    2b98:	9f 83       	std	Y+7, r25	; 0x07
    2b9a:	98 87       	std	Y+8, r25	; 0x08
    2b9c:	be 01       	movw	r22, r28
    2b9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba2:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2ba6:	84 e3       	ldi	r24, 0x34	; 52
    2ba8:	80 9f       	mul	r24, r16
    2baa:	f0 01       	movw	r30, r0
    2bac:	81 9f       	mul	r24, r17
    2bae:	f0 0d       	add	r31, r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	ed 56       	subi	r30, 0x6D	; 109
    2bb4:	f8 49       	sbci	r31, 0x98	; 152
    2bb6:	f6 a2       	std	Z+38, r15	; 0x26
    2bb8:	33 c0       	rjmp	.+102    	; 0x2c20 <lin_slave_session_ctr+0x17c>
    2bba:	94 e2       	ldi	r25, 0x24	; 36
    2bbc:	92 9f       	mul	r25, r18
    2bbe:	f0 01       	movw	r30, r0
    2bc0:	93 9f       	mul	r25, r19
    2bc2:	f0 0d       	add	r31, r0
    2bc4:	11 24       	eor	r1, r1
    2bc6:	ec 59       	subi	r30, 0x9C	; 156
    2bc8:	fc 49       	sbci	r31, 0x9C	; 156
    2bca:	01 90       	ld	r0, Z+
    2bcc:	f0 81       	ld	r31, Z
    2bce:	e0 2d       	mov	r30, r0
    2bd0:	90 81       	ld	r25, Z
    2bd2:	99 83       	std	Y+1, r25	; 0x01
    2bd4:	68 94       	set
    2bd6:	ff 24       	eor	r15, r15
    2bd8:	f1 f8       	bld	r15, 1
    2bda:	fa 82       	std	Y+2, r15	; 0x02
    2bdc:	90 e5       	ldi	r25, 0x50	; 80
    2bde:	9b 83       	std	Y+3, r25	; 0x03
    2be0:	4c 83       	std	Y+4, r20	; 0x04
    2be2:	9f ef       	ldi	r25, 0xFF	; 255
    2be4:	9d 83       	std	Y+5, r25	; 0x05
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	9f 83       	std	Y+7, r25	; 0x07
    2bea:	98 87       	std	Y+8, r25	; 0x08
    2bec:	be 01       	movw	r22, r28
    2bee:	6f 5f       	subi	r22, 0xFF	; 255
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2bf6:	84 e3       	ldi	r24, 0x34	; 52
    2bf8:	80 9f       	mul	r24, r16
    2bfa:	f0 01       	movw	r30, r0
    2bfc:	81 9f       	mul	r24, r17
    2bfe:	f0 0d       	add	r31, r0
    2c00:	11 24       	eor	r1, r1
    2c02:	ed 56       	subi	r30, 0x6D	; 109
    2c04:	f8 49       	sbci	r31, 0x98	; 152
    2c06:	f6 a2       	std	Z+38, r15	; 0x26
    2c08:	0b c0       	rjmp	.+22     	; 0x2c20 <lin_slave_session_ctr+0x17c>
    2c0a:	22 e1       	ldi	r18, 0x12	; 18
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	60 e1       	ldi	r22, 0x10	; 16
    2c10:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <lin_slave_session_ctr+0x17c>
    2c16:	23 e1       	ldi	r18, 0x13	; 19
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	60 e1       	ldi	r22, 0x10	; 16
    2c1c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
    2c20:	28 96       	adiw	r28, 0x08	; 8
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	08 95       	ret

00002c32 <lin_routine_control>:
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	28 97       	sbiw	r28, 0x08	; 8
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	08 2f       	mov	r16, r24
    2c46:	10 e0       	ldi	r17, 0x00	; 0
    2c48:	9c e1       	ldi	r25, 0x1C	; 28
    2c4a:	90 9f       	mul	r25, r16
    2c4c:	f0 01       	movw	r30, r0
    2c4e:	91 9f       	mul	r25, r17
    2c50:	f0 0d       	add	r31, r0
    2c52:	11 24       	eor	r1, r1
    2c54:	e8 5b       	subi	r30, 0xB8	; 184
    2c56:	fc 49       	sbci	r31, 0x9C	; 156
    2c58:	42 89       	ldd	r20, Z+18	; 0x12
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	94 e3       	ldi	r25, 0x34	; 52
    2c5e:	90 9f       	mul	r25, r16
    2c60:	d0 01       	movw	r26, r0
    2c62:	91 9f       	mul	r25, r17
    2c64:	b0 0d       	add	r27, r0
    2c66:	11 24       	eor	r1, r1
    2c68:	ad 56       	subi	r26, 0x6D	; 109
    2c6a:	b8 49       	sbci	r27, 0x98	; 152
    2c6c:	54 96       	adiw	r26, 0x14	; 20
    2c6e:	2d 91       	ld	r18, X+
    2c70:	3c 91       	ld	r19, X
    2c72:	55 97       	sbiw	r26, 0x15	; 21
    2c74:	1b 96       	adiw	r26, 0x0b	; 11
    2c76:	ed 91       	ld	r30, X+
    2c78:	fc 91       	ld	r31, X
    2c7a:	1c 97       	sbiw	r26, 0x0c	; 12
    2c7c:	ee 0f       	add	r30, r30
    2c7e:	ff 1f       	adc	r31, r31
    2c80:	ee 0f       	add	r30, r30
    2c82:	ff 1f       	adc	r31, r31
    2c84:	ee 0f       	add	r30, r30
    2c86:	ff 1f       	adc	r31, r31
    2c88:	e2 0f       	add	r30, r18
    2c8a:	f3 1f       	adc	r31, r19
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	92 95       	swap	r25
    2c90:	9f 70       	andi	r25, 0x0F	; 15
    2c92:	09 f0       	breq	.+2      	; 0x2c96 <lin_routine_control+0x64>
    2c94:	4c c0       	rjmp	.+152    	; 0x2d2e <lin_routine_control+0xfc>
    2c96:	24 81       	ldd	r18, Z+4	; 0x04
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	32 2f       	mov	r19, r18
    2c9c:	22 27       	eor	r18, r18
    2c9e:	95 81       	ldd	r25, Z+5	; 0x05
    2ca0:	29 2b       	or	r18, r25
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	91 30       	cpi	r25, 0x01	; 1
    2ca6:	f9 f4       	brne	.+62     	; 0x2ce6 <lin_routine_control+0xb4>
    2ca8:	23 30       	cpi	r18, 0x03	; 3
    2caa:	62 e0       	ldi	r22, 0x02	; 2
    2cac:	36 07       	cpc	r19, r22
    2cae:	d9 f4       	brne	.+54     	; 0x2ce6 <lin_routine_control+0xb4>
    2cb0:	94 e2       	ldi	r25, 0x24	; 36
    2cb2:	94 9f       	mul	r25, r20
    2cb4:	f0 01       	movw	r30, r0
    2cb6:	95 9f       	mul	r25, r21
    2cb8:	f0 0d       	add	r31, r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	ec 59       	subi	r30, 0x9C	; 156
    2cbe:	fc 49       	sbci	r31, 0x9C	; 156
    2cc0:	01 90       	ld	r0, Z+
    2cc2:	f0 81       	ld	r31, Z
    2cc4:	e0 2d       	mov	r30, r0
    2cc6:	90 81       	ld	r25, Z
    2cc8:	99 83       	std	Y+1, r25	; 0x01
    2cca:	95 e0       	ldi	r25, 0x05	; 5
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	91 e7       	ldi	r25, 0x71	; 113
    2cd0:	9b 83       	std	Y+3, r25	; 0x03
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	92 e0       	ldi	r25, 0x02	; 2
    2cd8:	9d 83       	std	Y+5, r25	; 0x05
    2cda:	23 e0       	ldi	r18, 0x03	; 3
    2cdc:	2e 83       	std	Y+6, r18	; 0x06
    2cde:	9f 83       	std	Y+7, r25	; 0x07
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	98 87       	std	Y+8, r25	; 0x08
    2ce4:	4f c0       	rjmp	.+158    	; 0x2d84 <lin_routine_control+0x152>
    2ce6:	93 30       	cpi	r25, 0x03	; 3
    2ce8:	09 f0       	breq	.+2      	; 0x2cec <lin_routine_control+0xba>
    2cea:	4c c0       	rjmp	.+152    	; 0x2d84 <lin_routine_control+0x152>
    2cec:	23 30       	cpi	r18, 0x03	; 3
    2cee:	32 40       	sbci	r19, 0x02	; 2
    2cf0:	09 f0       	breq	.+2      	; 0x2cf4 <lin_routine_control+0xc2>
    2cf2:	48 c0       	rjmp	.+144    	; 0x2d84 <lin_routine_control+0x152>
    2cf4:	94 e2       	ldi	r25, 0x24	; 36
    2cf6:	94 9f       	mul	r25, r20
    2cf8:	f0 01       	movw	r30, r0
    2cfa:	95 9f       	mul	r25, r21
    2cfc:	f0 0d       	add	r31, r0
    2cfe:	11 24       	eor	r1, r1
    2d00:	ec 59       	subi	r30, 0x9C	; 156
    2d02:	fc 49       	sbci	r31, 0x9C	; 156
    2d04:	01 90       	ld	r0, Z+
    2d06:	f0 81       	ld	r31, Z
    2d08:	e0 2d       	mov	r30, r0
    2d0a:	90 81       	ld	r25, Z
    2d0c:	99 83       	std	Y+1, r25	; 0x01
    2d0e:	95 e0       	ldi	r25, 0x05	; 5
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	91 e7       	ldi	r25, 0x71	; 113
    2d14:	9b 83       	std	Y+3, r25	; 0x03
    2d16:	23 e0       	ldi	r18, 0x03	; 3
    2d18:	2c 83       	std	Y+4, r18	; 0x04
    2d1a:	92 e0       	ldi	r25, 0x02	; 2
    2d1c:	9d 83       	std	Y+5, r25	; 0x05
    2d1e:	2e 83       	std	Y+6, r18	; 0x06
    2d20:	9f 83       	std	Y+7, r25	; 0x07
    2d22:	9f ef       	ldi	r25, 0xFF	; 255
    2d24:	98 87       	std	Y+8, r25	; 0x08
    2d26:	91 e0       	ldi	r25, 0x01	; 1
    2d28:	90 93 2f 66 	sts	0x662F, r25	; 0x80662f <eeprom_set_boot_flg>
    2d2c:	2b c0       	rjmp	.+86     	; 0x2d84 <lin_routine_control+0x152>
    2d2e:	25 81       	ldd	r18, Z+5	; 0x05
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	32 2f       	mov	r19, r18
    2d34:	22 27       	eor	r18, r18
    2d36:	96 81       	ldd	r25, Z+6	; 0x06
    2d38:	29 2b       	or	r18, r25
    2d3a:	94 81       	ldd	r25, Z+4	; 0x04
    2d3c:	91 30       	cpi	r25, 0x01	; 1
    2d3e:	11 f5       	brne	.+68     	; 0x2d84 <lin_routine_control+0x152>
    2d40:	21 15       	cp	r18, r1
    2d42:	3f 4f       	sbci	r19, 0xFF	; 255
    2d44:	f9 f4       	brne	.+62     	; 0x2d84 <lin_routine_control+0x152>
    2d46:	21 e0       	ldi	r18, 0x01	; 1
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	20 93 2d 66 	sts	0x662D, r18	; 0x80662d <erase_flag>
    2d4e:	30 93 2e 66 	sts	0x662E, r19	; 0x80662e <erase_flag+0x1>
    2d52:	94 e2       	ldi	r25, 0x24	; 36
    2d54:	94 9f       	mul	r25, r20
    2d56:	f0 01       	movw	r30, r0
    2d58:	95 9f       	mul	r25, r21
    2d5a:	f0 0d       	add	r31, r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	ec 59       	subi	r30, 0x9C	; 156
    2d60:	fc 49       	sbci	r31, 0x9C	; 156
    2d62:	01 90       	ld	r0, Z+
    2d64:	f0 81       	ld	r31, Z
    2d66:	e0 2d       	mov	r30, r0
    2d68:	90 81       	ld	r25, Z
    2d6a:	99 83       	std	Y+1, r25	; 0x01
    2d6c:	95 e0       	ldi	r25, 0x05	; 5
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	91 e7       	ldi	r25, 0x71	; 113
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	91 e0       	ldi	r25, 0x01	; 1
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	9f ef       	ldi	r25, 0xFF	; 255
    2d7a:	9d 83       	std	Y+5, r25	; 0x05
    2d7c:	1e 82       	std	Y+6, r1	; 0x06
    2d7e:	22 e0       	ldi	r18, 0x02	; 2
    2d80:	2f 83       	std	Y+7, r18	; 0x07
    2d82:	98 87       	std	Y+8, r25	; 0x08
    2d84:	be 01       	movw	r22, r28
    2d86:	6f 5f       	subi	r22, 0xFF	; 255
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2d8e:	84 e3       	ldi	r24, 0x34	; 52
    2d90:	80 9f       	mul	r24, r16
    2d92:	f0 01       	movw	r30, r0
    2d94:	81 9f       	mul	r24, r17
    2d96:	f0 0d       	add	r31, r0
    2d98:	11 24       	eor	r1, r1
    2d9a:	ed 56       	subi	r30, 0x6D	; 109
    2d9c:	f8 49       	sbci	r31, 0x98	; 152
    2d9e:	82 e0       	ldi	r24, 0x02	; 2
    2da0:	86 a3       	std	Z+38, r24	; 0x26
    2da2:	28 96       	adiw	r28, 0x08	; 8
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret

00002db2 <control_dtc_setting>:
    2db2:	ff 92       	push	r15
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	28 97       	sbiw	r28, 0x08	; 8
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	08 2f       	mov	r16, r24
    2dc8:	10 e0       	ldi	r17, 0x00	; 0
    2dca:	9c e1       	ldi	r25, 0x1C	; 28
    2dcc:	90 9f       	mul	r25, r16
    2dce:	f0 01       	movw	r30, r0
    2dd0:	91 9f       	mul	r25, r17
    2dd2:	f0 0d       	add	r31, r0
    2dd4:	11 24       	eor	r1, r1
    2dd6:	e8 5b       	subi	r30, 0xB8	; 184
    2dd8:	fc 49       	sbci	r31, 0x9C	; 156
    2dda:	22 89       	ldd	r18, Z+18	; 0x12
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	94 e3       	ldi	r25, 0x34	; 52
    2de0:	90 9f       	mul	r25, r16
    2de2:	d0 01       	movw	r26, r0
    2de4:	91 9f       	mul	r25, r17
    2de6:	b0 0d       	add	r27, r0
    2de8:	11 24       	eor	r1, r1
    2dea:	ad 56       	subi	r26, 0x6D	; 109
    2dec:	b8 49       	sbci	r27, 0x98	; 152
    2dee:	54 96       	adiw	r26, 0x14	; 20
    2df0:	4d 91       	ld	r20, X+
    2df2:	5c 91       	ld	r21, X
    2df4:	55 97       	sbiw	r26, 0x15	; 21
    2df6:	1b 96       	adiw	r26, 0x0b	; 11
    2df8:	ed 91       	ld	r30, X+
    2dfa:	fc 91       	ld	r31, X
    2dfc:	1c 97       	sbiw	r26, 0x0c	; 12
    2dfe:	ee 0f       	add	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	ee 0f       	add	r30, r30
    2e04:	ff 1f       	adc	r31, r31
    2e06:	ee 0f       	add	r30, r30
    2e08:	ff 1f       	adc	r31, r31
    2e0a:	e4 0f       	add	r30, r20
    2e0c:	f5 1f       	adc	r31, r21
    2e0e:	93 81       	ldd	r25, Z+3	; 0x03
    2e10:	91 30       	cpi	r25, 0x01	; 1
    2e12:	49 f5       	brne	.+82     	; 0x2e66 <control_dtc_setting+0xb4>
    2e14:	94 e2       	ldi	r25, 0x24	; 36
    2e16:	92 9f       	mul	r25, r18
    2e18:	f0 01       	movw	r30, r0
    2e1a:	93 9f       	mul	r25, r19
    2e1c:	f0 0d       	add	r31, r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	ec 59       	subi	r30, 0x9C	; 156
    2e22:	fc 49       	sbci	r31, 0x9C	; 156
    2e24:	01 90       	ld	r0, Z+
    2e26:	f0 81       	ld	r31, Z
    2e28:	e0 2d       	mov	r30, r0
    2e2a:	90 81       	ld	r25, Z
    2e2c:	99 83       	std	Y+1, r25	; 0x01
    2e2e:	68 94       	set
    2e30:	ff 24       	eor	r15, r15
    2e32:	f1 f8       	bld	r15, 1
    2e34:	fa 82       	std	Y+2, r15	; 0x02
    2e36:	95 ec       	ldi	r25, 0xC5	; 197
    2e38:	9b 83       	std	Y+3, r25	; 0x03
    2e3a:	91 e0       	ldi	r25, 0x01	; 1
    2e3c:	9c 83       	std	Y+4, r25	; 0x04
    2e3e:	9f ef       	ldi	r25, 0xFF	; 255
    2e40:	9d 83       	std	Y+5, r25	; 0x05
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	9f 83       	std	Y+7, r25	; 0x07
    2e46:	98 87       	std	Y+8, r25	; 0x08
    2e48:	be 01       	movw	r22, r28
    2e4a:	6f 5f       	subi	r22, 0xFF	; 255
    2e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e4e:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2e52:	84 e3       	ldi	r24, 0x34	; 52
    2e54:	80 9f       	mul	r24, r16
    2e56:	f0 01       	movw	r30, r0
    2e58:	81 9f       	mul	r24, r17
    2e5a:	f0 0d       	add	r31, r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	ed 56       	subi	r30, 0x6D	; 109
    2e60:	f8 49       	sbci	r31, 0x98	; 152
    2e62:	f6 a2       	std	Z+38, r15	; 0x26
    2e64:	29 c0       	rjmp	.+82     	; 0x2eb8 <control_dtc_setting+0x106>
    2e66:	92 30       	cpi	r25, 0x02	; 2
    2e68:	39 f5       	brne	.+78     	; 0x2eb8 <control_dtc_setting+0x106>
    2e6a:	94 e2       	ldi	r25, 0x24	; 36
    2e6c:	92 9f       	mul	r25, r18
    2e6e:	f0 01       	movw	r30, r0
    2e70:	93 9f       	mul	r25, r19
    2e72:	f0 0d       	add	r31, r0
    2e74:	11 24       	eor	r1, r1
    2e76:	ec 59       	subi	r30, 0x9C	; 156
    2e78:	fc 49       	sbci	r31, 0x9C	; 156
    2e7a:	01 90       	ld	r0, Z+
    2e7c:	f0 81       	ld	r31, Z
    2e7e:	e0 2d       	mov	r30, r0
    2e80:	90 81       	ld	r25, Z
    2e82:	99 83       	std	Y+1, r25	; 0x01
    2e84:	68 94       	set
    2e86:	ff 24       	eor	r15, r15
    2e88:	f1 f8       	bld	r15, 1
    2e8a:	fa 82       	std	Y+2, r15	; 0x02
    2e8c:	95 ec       	ldi	r25, 0xC5	; 197
    2e8e:	9b 83       	std	Y+3, r25	; 0x03
    2e90:	fc 82       	std	Y+4, r15	; 0x04
    2e92:	9f ef       	ldi	r25, 0xFF	; 255
    2e94:	9d 83       	std	Y+5, r25	; 0x05
    2e96:	9e 83       	std	Y+6, r25	; 0x06
    2e98:	9f 83       	std	Y+7, r25	; 0x07
    2e9a:	98 87       	std	Y+8, r25	; 0x08
    2e9c:	be 01       	movw	r22, r28
    2e9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea2:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    2ea6:	84 e3       	ldi	r24, 0x34	; 52
    2ea8:	80 9f       	mul	r24, r16
    2eaa:	f0 01       	movw	r30, r0
    2eac:	81 9f       	mul	r24, r17
    2eae:	f0 0d       	add	r31, r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	ed 56       	subi	r30, 0x6D	; 109
    2eb4:	f8 49       	sbci	r31, 0x98	; 152
    2eb6:	f6 a2       	std	Z+38, r15	; 0x26
    2eb8:	28 96       	adiw	r28, 0x08	; 8
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	ff 90       	pop	r15
    2ec8:	08 95       	ret

00002eca <lin_transfer_data>:
    2eca:	9f 92       	push	r9
    2ecc:	af 92       	push	r10
    2ece:	bf 92       	push	r11
    2ed0:	cf 92       	push	r12
    2ed2:	df 92       	push	r13
    2ed4:	ef 92       	push	r14
    2ed6:	ff 92       	push	r15
    2ed8:	0f 93       	push	r16
    2eda:	1f 93       	push	r17
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	28 97       	sbiw	r28, 0x08	; 8
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	c0 90 27 64 	lds	r12, 0x6427	; 0x806427 <update_cnt>
    2eee:	d0 90 28 64 	lds	r13, 0x6428	; 0x806428 <update_cnt+0x1>
    2ef2:	08 2f       	mov	r16, r24
    2ef4:	10 e0       	ldi	r17, 0x00	; 0
    2ef6:	9c e1       	ldi	r25, 0x1C	; 28
    2ef8:	90 9f       	mul	r25, r16
    2efa:	f0 01       	movw	r30, r0
    2efc:	91 9f       	mul	r25, r17
    2efe:	f0 0d       	add	r31, r0
    2f00:	11 24       	eor	r1, r1
    2f02:	e8 5b       	subi	r30, 0xB8	; 184
    2f04:	fc 49       	sbci	r31, 0x9C	; 156
    2f06:	e2 88       	ldd	r14, Z+18	; 0x12
    2f08:	f1 2c       	mov	r15, r1
    2f0a:	94 e3       	ldi	r25, 0x34	; 52
    2f0c:	90 9f       	mul	r25, r16
    2f0e:	f0 01       	movw	r30, r0
    2f10:	91 9f       	mul	r25, r17
    2f12:	f0 0d       	add	r31, r0
    2f14:	11 24       	eor	r1, r1
    2f16:	ed 56       	subi	r30, 0x6D	; 109
    2f18:	f8 49       	sbci	r31, 0x98	; 152
    2f1a:	a4 89       	ldd	r26, Z+20	; 0x14
    2f1c:	b5 89       	ldd	r27, Z+21	; 0x15
    2f1e:	03 84       	ldd	r0, Z+11	; 0x0b
    2f20:	f4 85       	ldd	r31, Z+12	; 0x0c
    2f22:	e0 2d       	mov	r30, r0
    2f24:	ee 0f       	add	r30, r30
    2f26:	ff 1f       	adc	r31, r31
    2f28:	ee 0f       	add	r30, r30
    2f2a:	ff 1f       	adc	r31, r31
    2f2c:	ee 0f       	add	r30, r30
    2f2e:	ff 1f       	adc	r31, r31
    2f30:	bf 01       	movw	r22, r30
    2f32:	6a 0f       	add	r22, r26
    2f34:	7b 1f       	adc	r23, r27
    2f36:	fb 01       	movw	r30, r22
    2f38:	91 81       	ldd	r25, Z+1	; 0x01
    2f3a:	92 95       	swap	r25
    2f3c:	9f 70       	andi	r25, 0x0F	; 15
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <lin_transfer_data+0x78>
    2f40:	f0 c0       	rjmp	.+480    	; 0x3122 <lin_transfer_data+0x258>
    2f42:	94 80       	ldd	r9, Z+4	; 0x04
    2f44:	42 81       	ldd	r20, Z+2	; 0x02
    2f46:	42 50       	subi	r20, 0x02	; 2
    2f48:	b0 90 92 67 	lds	r11, 0x6792	; 0x806792 <history_blcok_count>
    2f4c:	9b 10       	cpse	r9, r11
    2f4e:	d2 c0       	rjmp	.+420    	; 0x30f4 <lin_transfer_data+0x22a>
    2f50:	95 81       	ldd	r25, Z+5	; 0x05
    2f52:	96 01       	movw	r18, r12
    2f54:	27 5d       	subi	r18, 0xD7	; 215
    2f56:	3b 49       	sbci	r19, 0x9B	; 155
    2f58:	f9 01       	movw	r30, r18
    2f5a:	90 83       	st	Z, r25
    2f5c:	fb 01       	movw	r30, r22
    2f5e:	96 81       	ldd	r25, Z+6	; 0x06
    2f60:	96 01       	movw	r18, r12
    2f62:	26 5d       	subi	r18, 0xD6	; 214
    2f64:	3b 49       	sbci	r19, 0x9B	; 155
    2f66:	f9 01       	movw	r30, r18
    2f68:	90 83       	st	Z, r25
    2f6a:	96 01       	movw	r18, r12
    2f6c:	2d 5f       	subi	r18, 0xFD	; 253
    2f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f70:	fb 01       	movw	r30, r22
    2f72:	97 81       	ldd	r25, Z+7	; 0x07
    2f74:	f6 01       	movw	r30, r12
    2f76:	e5 5d       	subi	r30, 0xD5	; 213
    2f78:	fb 49       	sbci	r31, 0x9B	; 155
    2f7a:	90 83       	st	Z, r25
    2f7c:	61 e0       	ldi	r22, 0x01	; 1
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	74 c0       	rjmp	.+232    	; 0x306c <lin_transfer_data+0x1a2>
    2f84:	94 17       	cp	r25, r20
    2f86:	88 f4       	brcc	.+34     	; 0x2faa <lin_transfer_data+0xe0>
    2f88:	9f 5f       	subi	r25, 0xFF	; 255
    2f8a:	fb 01       	movw	r30, r22
    2f8c:	ee 0f       	add	r30, r30
    2f8e:	ff 1f       	adc	r31, r31
    2f90:	ee 0f       	add	r30, r30
    2f92:	ff 1f       	adc	r31, r31
    2f94:	ee 0f       	add	r30, r30
    2f96:	ff 1f       	adc	r31, r31
    2f98:	ea 0f       	add	r30, r26
    2f9a:	fb 1f       	adc	r31, r27
    2f9c:	a2 80       	ldd	r10, Z+2	; 0x02
    2f9e:	f9 01       	movw	r30, r18
    2fa0:	e7 5d       	subi	r30, 0xD7	; 215
    2fa2:	fb 49       	sbci	r31, 0x9B	; 155
    2fa4:	a0 82       	st	Z, r10
    2fa6:	2f 5f       	subi	r18, 0xFF	; 255
    2fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    2faa:	94 17       	cp	r25, r20
    2fac:	88 f4       	brcc	.+34     	; 0x2fd0 <lin_transfer_data+0x106>
    2fae:	9f 5f       	subi	r25, 0xFF	; 255
    2fb0:	fb 01       	movw	r30, r22
    2fb2:	ee 0f       	add	r30, r30
    2fb4:	ff 1f       	adc	r31, r31
    2fb6:	ee 0f       	add	r30, r30
    2fb8:	ff 1f       	adc	r31, r31
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 1f       	adc	r31, r31
    2fbe:	ea 0f       	add	r30, r26
    2fc0:	fb 1f       	adc	r31, r27
    2fc2:	a3 80       	ldd	r10, Z+3	; 0x03
    2fc4:	f9 01       	movw	r30, r18
    2fc6:	e7 5d       	subi	r30, 0xD7	; 215
    2fc8:	fb 49       	sbci	r31, 0x9B	; 155
    2fca:	a0 82       	st	Z, r10
    2fcc:	2f 5f       	subi	r18, 0xFF	; 255
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	94 17       	cp	r25, r20
    2fd2:	88 f4       	brcc	.+34     	; 0x2ff6 <lin_transfer_data+0x12c>
    2fd4:	9f 5f       	subi	r25, 0xFF	; 255
    2fd6:	fb 01       	movw	r30, r22
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	ee 0f       	add	r30, r30
    2fe2:	ff 1f       	adc	r31, r31
    2fe4:	ea 0f       	add	r30, r26
    2fe6:	fb 1f       	adc	r31, r27
    2fe8:	a4 80       	ldd	r10, Z+4	; 0x04
    2fea:	f9 01       	movw	r30, r18
    2fec:	e7 5d       	subi	r30, 0xD7	; 215
    2fee:	fb 49       	sbci	r31, 0x9B	; 155
    2ff0:	a0 82       	st	Z, r10
    2ff2:	2f 5f       	subi	r18, 0xFF	; 255
    2ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff6:	94 17       	cp	r25, r20
    2ff8:	88 f4       	brcc	.+34     	; 0x301c <lin_transfer_data+0x152>
    2ffa:	9f 5f       	subi	r25, 0xFF	; 255
    2ffc:	fb 01       	movw	r30, r22
    2ffe:	ee 0f       	add	r30, r30
    3000:	ff 1f       	adc	r31, r31
    3002:	ee 0f       	add	r30, r30
    3004:	ff 1f       	adc	r31, r31
    3006:	ee 0f       	add	r30, r30
    3008:	ff 1f       	adc	r31, r31
    300a:	ea 0f       	add	r30, r26
    300c:	fb 1f       	adc	r31, r27
    300e:	a5 80       	ldd	r10, Z+5	; 0x05
    3010:	f9 01       	movw	r30, r18
    3012:	e7 5d       	subi	r30, 0xD7	; 215
    3014:	fb 49       	sbci	r31, 0x9B	; 155
    3016:	a0 82       	st	Z, r10
    3018:	2f 5f       	subi	r18, 0xFF	; 255
    301a:	3f 4f       	sbci	r19, 0xFF	; 255
    301c:	94 17       	cp	r25, r20
    301e:	88 f4       	brcc	.+34     	; 0x3042 <lin_transfer_data+0x178>
    3020:	9f 5f       	subi	r25, 0xFF	; 255
    3022:	fb 01       	movw	r30, r22
    3024:	ee 0f       	add	r30, r30
    3026:	ff 1f       	adc	r31, r31
    3028:	ee 0f       	add	r30, r30
    302a:	ff 1f       	adc	r31, r31
    302c:	ee 0f       	add	r30, r30
    302e:	ff 1f       	adc	r31, r31
    3030:	ea 0f       	add	r30, r26
    3032:	fb 1f       	adc	r31, r27
    3034:	a6 80       	ldd	r10, Z+6	; 0x06
    3036:	f9 01       	movw	r30, r18
    3038:	e7 5d       	subi	r30, 0xD7	; 215
    303a:	fb 49       	sbci	r31, 0x9B	; 155
    303c:	a0 82       	st	Z, r10
    303e:	2f 5f       	subi	r18, 0xFF	; 255
    3040:	3f 4f       	sbci	r19, 0xFF	; 255
    3042:	94 17       	cp	r25, r20
    3044:	88 f4       	brcc	.+34     	; 0x3068 <lin_transfer_data+0x19e>
    3046:	9f 5f       	subi	r25, 0xFF	; 255
    3048:	fb 01       	movw	r30, r22
    304a:	ee 0f       	add	r30, r30
    304c:	ff 1f       	adc	r31, r31
    304e:	ee 0f       	add	r30, r30
    3050:	ff 1f       	adc	r31, r31
    3052:	ee 0f       	add	r30, r30
    3054:	ff 1f       	adc	r31, r31
    3056:	ea 0f       	add	r30, r26
    3058:	fb 1f       	adc	r31, r27
    305a:	a7 80       	ldd	r10, Z+7	; 0x07
    305c:	f9 01       	movw	r30, r18
    305e:	e7 5d       	subi	r30, 0xD7	; 215
    3060:	fb 49       	sbci	r31, 0x9B	; 155
    3062:	a0 82       	st	Z, r10
    3064:	2f 5f       	subi	r18, 0xFF	; 255
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	6f 5f       	subi	r22, 0xFF	; 255
    306a:	7f 4f       	sbci	r23, 0xFF	; 255
    306c:	54 e3       	ldi	r21, 0x34	; 52
    306e:	50 9f       	mul	r21, r16
    3070:	f0 01       	movw	r30, r0
    3072:	51 9f       	mul	r21, r17
    3074:	f0 0d       	add	r31, r0
    3076:	11 24       	eor	r1, r1
    3078:	ed 56       	subi	r30, 0x6D	; 109
    307a:	f8 49       	sbci	r31, 0x98	; 152
    307c:	05 84       	ldd	r0, Z+13	; 0x0d
    307e:	f6 85       	ldd	r31, Z+14	; 0x0e
    3080:	e0 2d       	mov	r30, r0
    3082:	e6 17       	cp	r30, r22
    3084:	f7 07       	cpc	r31, r23
    3086:	08 f0       	brcs	.+2      	; 0x308a <lin_transfer_data+0x1c0>
    3088:	7d cf       	rjmp	.-262    	; 0x2f84 <lin_transfer_data+0xba>
    308a:	b3 94       	inc	r11
    308c:	b0 92 92 67 	sts	0x6792, r11	; 0x806792 <history_blcok_count>
    3090:	24 2f       	mov	r18, r20
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	c2 0e       	add	r12, r18
    3096:	d3 1e       	adc	r13, r19
    3098:	c0 92 27 64 	sts	0x6427, r12	; 0x806427 <update_cnt>
    309c:	d0 92 28 64 	sts	0x6428, r13	; 0x806428 <update_cnt+0x1>
    30a0:	60 91 25 64 	lds	r22, 0x6425	; 0x806425 <bin_size_cnt>
    30a4:	70 91 26 64 	lds	r23, 0x6426	; 0x806426 <bin_size_cnt+0x1>
    30a8:	26 0f       	add	r18, r22
    30aa:	37 1f       	adc	r19, r23
    30ac:	20 93 25 64 	sts	0x6425, r18	; 0x806425 <bin_size_cnt>
    30b0:	30 93 26 64 	sts	0x6426, r19	; 0x806426 <bin_size_cnt+0x1>
    30b4:	c1 14       	cp	r12, r1
    30b6:	f2 e0       	ldi	r31, 0x02	; 2
    30b8:	df 06       	cpc	r13, r31
    30ba:	58 f0       	brcs	.+22     	; 0x30d2 <lin_transfer_data+0x208>
    30bc:	10 92 27 64 	sts	0x6427, r1	; 0x806427 <update_cnt>
    30c0:	10 92 28 64 	sts	0x6428, r1	; 0x806428 <update_cnt+0x1>
    30c4:	21 e0       	ldi	r18, 0x01	; 1
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	20 93 2b 66 	sts	0x662B, r18	; 0x80662b <flash_flag>
    30cc:	30 93 2c 66 	sts	0x662C, r19	; 0x80662c <flash_flag+0x1>
    30d0:	11 c0       	rjmp	.+34     	; 0x30f4 <lin_transfer_data+0x22a>
    30d2:	20 3d       	cpi	r18, 0xD0	; 208
    30d4:	34 45       	sbci	r19, 0x54	; 84
    30d6:	70 f0       	brcs	.+28     	; 0x30f4 <lin_transfer_data+0x22a>
    30d8:	10 92 27 64 	sts	0x6427, r1	; 0x806427 <update_cnt>
    30dc:	10 92 28 64 	sts	0x6428, r1	; 0x806428 <update_cnt+0x1>
    30e0:	21 e0       	ldi	r18, 0x01	; 1
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	20 93 2b 66 	sts	0x662B, r18	; 0x80662b <flash_flag>
    30e8:	30 93 2c 66 	sts	0x662C, r19	; 0x80662c <flash_flag+0x1>
    30ec:	20 93 29 66 	sts	0x6629, r18	; 0x806629 <jump_flag>
    30f0:	30 93 2a 66 	sts	0x662A, r19	; 0x80662a <jump_flag+0x1>
    30f4:	94 e2       	ldi	r25, 0x24	; 36
    30f6:	9e 9d       	mul	r25, r14
    30f8:	f0 01       	movw	r30, r0
    30fa:	9f 9d       	mul	r25, r15
    30fc:	f0 0d       	add	r31, r0
    30fe:	11 24       	eor	r1, r1
    3100:	ec 59       	subi	r30, 0x9C	; 156
    3102:	fc 49       	sbci	r31, 0x9C	; 156
    3104:	01 90       	ld	r0, Z+
    3106:	f0 81       	ld	r31, Z
    3108:	e0 2d       	mov	r30, r0
    310a:	90 81       	ld	r25, Z
    310c:	99 83       	std	Y+1, r25	; 0x01
    310e:	92 e0       	ldi	r25, 0x02	; 2
    3110:	9a 83       	std	Y+2, r25	; 0x02
    3112:	96 e7       	ldi	r25, 0x76	; 118
    3114:	9b 83       	std	Y+3, r25	; 0x03
    3116:	9c 82       	std	Y+4, r9	; 0x04
    3118:	9f ef       	ldi	r25, 0xFF	; 255
    311a:	9d 83       	std	Y+5, r25	; 0x05
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	9f 83       	std	Y+7, r25	; 0x07
    3120:	98 87       	std	Y+8, r25	; 0x08
    3122:	be 01       	movw	r22, r28
    3124:	6f 5f       	subi	r22, 0xFF	; 255
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	0e 94 0f 22 	call	0x441e	; 0x441e <ld_put_raw>
    312c:	84 e3       	ldi	r24, 0x34	; 52
    312e:	80 9f       	mul	r24, r16
    3130:	f0 01       	movw	r30, r0
    3132:	81 9f       	mul	r24, r17
    3134:	f0 0d       	add	r31, r0
    3136:	11 24       	eor	r1, r1
    3138:	ed 56       	subi	r30, 0x6D	; 109
    313a:	f8 49       	sbci	r31, 0x98	; 152
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	86 a3       	std	Z+38, r24	; 0x26
    3140:	28 96       	adiw	r28, 0x08	; 8
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	0f 91       	pop	r16
    314e:	ff 90       	pop	r15
    3150:	ef 90       	pop	r14
    3152:	df 90       	pop	r13
    3154:	cf 90       	pop	r12
    3156:	bf 90       	pop	r11
    3158:	af 90       	pop	r10
    315a:	9f 90       	pop	r9
    315c:	08 95       	ret

0000315e <lin_diag_service_callback>:
 *
 * Implements    : lin_diag_service_callback_Activity
 *END**************************************************************************/
void lin_diag_service_callback(l_ifc_handle iii,
                               l_u8 sid)
{
    315e:	ef 92       	push	r14
    3160:	ff 92       	push	r15
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    316a:	c8 2f       	mov	r28, r24
    316c:	d0 e0       	ldi	r29, 0x00	; 0
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    316e:	9c e1       	ldi	r25, 0x1C	; 28
    3170:	9c 9f       	mul	r25, r28
    3172:	f0 01       	movw	r30, r0
    3174:	9d 9f       	mul	r25, r29
    3176:	f0 0d       	add	r31, r0
    3178:	11 24       	eor	r1, r1
    317a:	e8 5b       	subi	r30, 0xB8	; 184
    317c:	fc 49       	sbci	r31, 0x9C	; 156
    317e:	a2 89       	ldd	r26, Z+18	; 0x12
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    l_bool sid_supported_flg = (bool)0U;
    l_u8 i;
    const l_u8 *service_supported_ptr;
    l_u8 *service_flag_ptr;
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    3182:	94 e2       	ldi	r25, 0x24	; 36
    3184:	9a 9f       	mul	r25, r26
    3186:	f0 01       	movw	r30, r0
    3188:	9b 9f       	mul	r25, r27
    318a:	f0 0d       	add	r31, r0
    318c:	11 24       	eor	r1, r1
    318e:	ec 59       	subi	r30, 0x9C	; 156
    3190:	fc 49       	sbci	r31, 0x9C	; 156
    3192:	00 a1       	ldd	r16, Z+32	; 0x20
    3194:	11 a1       	ldd	r17, Z+33	; 0x21
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;
    3196:	e2 a0       	ldd	r14, Z+34	; 0x22
    3198:	f3 a0       	ldd	r15, Z+35	; 0x23

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0f c0       	rjmp	.+30     	; 0x31bc <lin_diag_service_callback+0x5e>
    {
        if (service_supported_ptr[i] == sid)
    319e:	29 2f       	mov	r18, r25
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	f8 01       	movw	r30, r16
    31a4:	e2 0f       	add	r30, r18
    31a6:	f3 1f       	adc	r31, r19
    31a8:	40 81       	ld	r20, Z
    31aa:	46 13       	cpse	r20, r22
    31ac:	06 c0       	rjmp	.+12     	; 0x31ba <lin_diag_service_callback+0x5c>
        {
            service_flag_ptr[i] = 1U;
    31ae:	f7 01       	movw	r30, r14
    31b0:	e2 0f       	add	r30, r18
    31b2:	f3 1f       	adc	r31, r19
    31b4:	91 e0       	ldi	r25, 0x01	; 1
    31b6:	90 83       	st	Z, r25
            sid_supported_flg = (bool)1U;
            break;
    31b8:	0d c0       	rjmp	.+26     	; 0x31d4 <lin_diag_service_callback+0x76>
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    31ba:	9f 5f       	subi	r25, 0xFF	; 255
    31bc:	34 e2       	ldi	r19, 0x24	; 36
    31be:	3a 9f       	mul	r19, r26
    31c0:	f0 01       	movw	r30, r0
    31c2:	3b 9f       	mul	r19, r27
    31c4:	f0 0d       	add	r31, r0
    31c6:	11 24       	eor	r1, r1
    31c8:	ec 59       	subi	r30, 0x9C	; 156
    31ca:	fc 49       	sbci	r31, 0x9C	; 156
    31cc:	37 8d       	ldd	r19, Z+31	; 0x1f
    31ce:	93 17       	cp	r25, r19
    31d0:	30 f3       	brcs	.-52     	; 0x319e <lin_diag_service_callback+0x40>
{
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    l_bool sid_supported_flg = (bool)0U;
    31d2:	90 e0       	ldi	r25, 0x00	; 0
            sid_supported_flg = (bool)1U;
            break;
        }
    }

    if (sid_supported_flg == (bool)1U)
    31d4:	99 23       	and	r25, r25
    31d6:	09 f4       	brne	.+2      	; 0x31da <lin_diag_service_callback+0x7c>
    31d8:	72 c0       	rjmp	.+228    	; 0x32be <lin_diag_service_callback+0x160>
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    31da:	65 38       	cpi	r22, 0x85	; 133
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <lin_diag_service_callback+0x82>
    31de:	69 c0       	rjmp	.+210    	; 0x32b2 <lin_diag_service_callback+0x154>
    31e0:	78 f4       	brcc	.+30     	; 0x3200 <lin_diag_service_callback+0xa2>
    31e2:	62 32       	cpi	r22, 0x22	; 34
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <lin_diag_service_callback+0x8a>
    31e6:	5f c0       	rjmp	.+190    	; 0x32a6 <lin_diag_service_callback+0x148>
    31e8:	20 f4       	brcc	.+8      	; 0x31f2 <lin_diag_service_callback+0x94>
    31ea:	60 31       	cpi	r22, 0x10	; 16
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <lin_diag_service_callback+0x92>
    31ee:	58 c0       	rjmp	.+176    	; 0x32a0 <lin_diag_service_callback+0x142>
    31f0:	79 c0       	rjmp	.+242    	; 0x32e4 <lin_diag_service_callback+0x186>
    31f2:	61 33       	cpi	r22, 0x31	; 49
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <lin_diag_service_callback+0x9a>
    31f6:	5a c0       	rjmp	.+180    	; 0x32ac <lin_diag_service_callback+0x14e>
    31f8:	66 33       	cpi	r22, 0x36	; 54
    31fa:	09 f4       	brne	.+2      	; 0x31fe <lin_diag_service_callback+0xa0>
    31fc:	5d c0       	rjmp	.+186    	; 0x32b8 <lin_diag_service_callback+0x15a>
    31fe:	72 c0       	rjmp	.+228    	; 0x32e4 <lin_diag_service_callback+0x186>
    3200:	63 3b       	cpi	r22, 0xB3	; 179
    3202:	71 f0       	breq	.+28     	; 0x3220 <lin_diag_service_callback+0xc2>
    3204:	28 f4       	brcc	.+10     	; 0x3210 <lin_diag_service_callback+0xb2>
    3206:	60 3b       	cpi	r22, 0xB0	; 176
    3208:	e1 f0       	breq	.+56     	; 0x3242 <lin_diag_service_callback+0xe4>
    320a:	62 3b       	cpi	r22, 0xB2	; 178
    320c:	31 f0       	breq	.+12     	; 0x321a <lin_diag_service_callback+0xbc>
    320e:	6a c0       	rjmp	.+212    	; 0x32e4 <lin_diag_service_callback+0x186>
    3210:	66 3b       	cpi	r22, 0xB6	; 182
    3212:	b1 f1       	breq	.+108    	; 0x3280 <lin_diag_service_callback+0x122>
    3214:	67 3b       	cpi	r22, 0xB7	; 183
    3216:	31 f1       	breq	.+76     	; 0x3264 <lin_diag_service_callback+0x106>
    3218:	65 c0       	rjmp	.+202    	; 0x32e4 <lin_diag_service_callback+0x186>
        {
        case SERVICE_READ_BY_IDENTIFY: /* Mandatory for TL LIN 2.1 & 2.0, Optional for J2602 */
            lin_diagservice_read_by_identifier(iii);
    321a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <lin_diagservice_read_by_identifier>
            break;
    321e:	62 c0       	rjmp	.+196    	; 0x32e4 <lin_diag_service_callback+0x186>

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    3220:	9c e1       	ldi	r25, 0x1C	; 28
    3222:	9c 9f       	mul	r25, r28
    3224:	f0 01       	movw	r30, r0
    3226:	9d 9f       	mul	r25, r29
    3228:	f0 0d       	add	r31, r0
    322a:	11 24       	eor	r1, r1
    322c:	e8 5b       	subi	r30, 0xB8	; 184
    322e:	fc 49       	sbci	r31, 0x9C	; 156
    3230:	90 81       	ld	r25, Z
    3232:	99 23       	and	r25, r25
    3234:	19 f0       	breq	.+6      	; 0x323c <lin_diag_service_callback+0xde>
    3236:	93 30       	cpi	r25, 0x03	; 3
    3238:	09 f0       	breq	.+2      	; 0x323c <lin_diag_service_callback+0xde>
    323a:	54 c0       	rjmp	.+168    	; 0x32e4 <lin_diag_service_callback+0x186>
            {
                lin_condittional_change_nad(iii);
    323c:	0e 94 bf 10 	call	0x217e	; 0x217e <lin_condittional_change_nad>
    3240:	51 c0       	rjmp	.+162    	; 0x32e4 <lin_diag_service_callback+0x186>
            }
            break;
        case SERVICE_ASSIGN_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    3242:	9c e1       	ldi	r25, 0x1C	; 28
    3244:	9c 9f       	mul	r25, r28
    3246:	f0 01       	movw	r30, r0
    3248:	9d 9f       	mul	r25, r29
    324a:	f0 0d       	add	r31, r0
    324c:	11 24       	eor	r1, r1
    324e:	e8 5b       	subi	r30, 0xB8	; 184
    3250:	fc 49       	sbci	r31, 0x9C	; 156
    3252:	90 81       	ld	r25, Z
    3254:	99 23       	and	r25, r25
    3256:	19 f0       	breq	.+6      	; 0x325e <lin_diag_service_callback+0x100>
    3258:	93 30       	cpi	r25, 0x03	; 3
    325a:	09 f0       	breq	.+2      	; 0x325e <lin_diag_service_callback+0x100>
    325c:	43 c0       	rjmp	.+134    	; 0x32e4 <lin_diag_service_callback+0x186>
            {
                lin_assign_nad(iii);
    325e:	0e 94 a8 11 	call	0x2350	; 0x2350 <lin_assign_nad>
    3262:	40 c0       	rjmp	.+128    	; 0x32e4 <lin_diag_service_callback+0x186>
            }
            break;

#if (1U == SUPPORT_PROTOCOL_21)
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version)
    3264:	9c e1       	ldi	r25, 0x1C	; 28
    3266:	9c 9f       	mul	r25, r28
    3268:	f0 01       	movw	r30, r0
    326a:	9d 9f       	mul	r25, r29
    326c:	f0 0d       	add	r31, r0
    326e:	11 24       	eor	r1, r1
    3270:	e8 5b       	subi	r30, 0xB8	; 184
    3272:	fc 49       	sbci	r31, 0x9C	; 156
    3274:	90 81       	ld	r25, Z
    3276:	91 11       	cpse	r25, r1
    3278:	35 c0       	rjmp	.+106    	; 0x32e4 <lin_diag_service_callback+0x186>
            {
                lin_diagservice_assign_frame_id_range(iii);
    327a:	0e 94 21 12 	call	0x2442	; 0x2442 <lin_diagservice_assign_frame_id_range>
    327e:	32 c0       	rjmp	.+100    	; 0x32e4 <lin_diag_service_callback+0x186>
            }
            break;
        case SERVICE_SAVE_CONFIGURATION:
            /* Set save configuration flag */
            g_lin_protocol_state_array[iii].save_config_flg = (l_bool)1U;
    3280:	96 e1       	ldi	r25, 0x16	; 22
    3282:	9c 9f       	mul	r25, r28
    3284:	f0 01       	movw	r30, r0
    3286:	9d 9f       	mul	r25, r29
    3288:	f0 0d       	add	r31, r0
    328a:	11 24       	eor	r1, r1
    328c:	e9 53       	subi	r30, 0x39	; 57
    328e:	f8 49       	sbci	r31, 0x98	; 152
    3290:	91 e0       	ldi	r25, 0x01	; 1
    3292:	97 87       	std	Z+15, r25	; 0x0f
            /* Response to master - RSID */
            ld_make_slave_response_pdu(iii, SERVICE_SAVE_CONFIGURATION, POSITIVE, 0U);
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	41 e0       	ldi	r20, 0x01	; 1
    3298:	66 eb       	ldi	r22, 0xB6	; 182
    329a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
            break;
    329e:	22 c0       	rjmp	.+68     	; 0x32e4 <lin_diag_service_callback+0x186>
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

#endif                                /* ((1U == SUPPORT_PROTOCOL_J2602) || (1U == SUPPORT_PROTOCOL_20)) */
        case SERVICE_SESSION_CONTROL: //诊断会话控制
            //诊断会话控制切换会话
            lin_slave_session_ctr(iii);
    32a0:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <lin_slave_session_ctr>
            break;
    32a4:	1f c0       	rjmp	.+62     	; 0x32e4 <lin_diag_service_callback+0x186>
        case SERVICE_READ_DATA_BY_IDENTIFY:
            //根据id读取数据信息
            lin_read_data_by_identify(iii);
    32a6:	0e 94 cf 13 	call	0x279e	; 0x279e <lin_read_data_by_identify>
            break;
    32aa:	1c c0       	rjmp	.+56     	; 0x32e4 <lin_diag_service_callback+0x186>
        case SERIVCE_ROUTINE_CONTROL:
            //路由控制,支持在扩展模式下
            lin_routine_control(iii);
    32ac:	0e 94 19 16 	call	0x2c32	; 0x2c32 <lin_routine_control>
            break;
    32b0:	19 c0       	rjmp	.+50     	; 0x32e4 <lin_diag_service_callback+0x186>
        case 0x85:
            control_dtc_setting(iii);
    32b2:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <control_dtc_setting>
            break;
    32b6:	16 c0       	rjmp	.+44     	; 0x32e4 <lin_diag_service_callback+0x186>
        case 0x36:
            lin_transfer_data(iii);
    32b8:	0e 94 65 17 	call	0x2eca	; 0x2eca <lin_transfer_data>
            break;
    32bc:	13 c0       	rjmp	.+38     	; 0x32e4 <lin_diag_service_callback+0x186>
            break;
        } /* end of switch */
    }
    else
    {
        ld_make_slave_response_pdu(iii, sid, NEGATIVE, SERVICE_NOT_SUPPORTED);
    32be:	21 e1       	ldi	r18, 0x11	; 17
    32c0:	40 e0       	ldi	r20, 0x00	; 0
    32c2:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ld_make_slave_response_pdu>
        /* clear queue */
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    32c6:	84 e3       	ldi	r24, 0x34	; 52
    32c8:	8c 9f       	mul	r24, r28
    32ca:	f0 01       	movw	r30, r0
    32cc:	8d 9f       	mul	r24, r29
    32ce:	f0 0d       	add	r31, r0
    32d0:	11 24       	eor	r1, r1
    32d2:	ed 56       	subi	r30, 0x6D	; 109
    32d4:	f8 49       	sbci	r31, 0x98	; 152
    32d6:	17 86       	std	Z+15, r1	; 0x0f
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0U;
    32d8:	10 8a       	std	Z+16, r1	; 0x10
    32da:	11 8a       	std	Z+17, r1	; 0x11
        tl_desc_ptr->tl_rx_queue.queue_header = tl_desc_ptr->tl_rx_queue.queue_tail;
    32dc:	85 85       	ldd	r24, Z+13	; 0x0d
    32de:	96 85       	ldd	r25, Z+14	; 0x0e
    32e0:	83 87       	std	Z+11, r24	; 0x0b
    32e2:	94 87       	std	Z+12, r25	; 0x0c
    }
}
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	ff 90       	pop	r15
    32ee:	ef 90       	pop	r14
    32f0:	08 95       	ret

000032f2 <ld_read_by_id_callout>:
    l_u8 retval = LD_NEGATIVE_RESPONSE;

    /* Get the current configuration */
    const lin_protocol_user_config_t  *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    32f2:	2c e1       	ldi	r18, 0x1C	; 28
    32f4:	82 9f       	mul	r24, r18
    32f6:	c0 01       	movw	r24, r0
    32f8:	11 24       	eor	r1, r1
    32fa:	fc 01       	movw	r30, r24
    32fc:	e8 5b       	subi	r30, 0xB8	; 184
    32fe:	fc 49       	sbci	r31, 0x9C	; 156
    3300:	83 81       	ldd	r24, Z+3	; 0x03
    3302:	81 11       	cpse	r24, r1
    3304:	13 c0       	rjmp	.+38     	; 0x332c <ld_read_by_id_callout+0x3a>
    {
        /* Following code is an example - Real implementation is application-dependent */
        /* the handling does essentially depend on the id of the requested item */
        /* This example implement with ID = 32 - LIN_READ_USR_DEF_MIN */
        if (id == LIN_READ_USR_DEF_MIN)
    3306:	60 32       	cpi	r22, 0x20	; 32
    3308:	99 f4       	brne	.+38     	; 0x3330 <ld_read_by_id_callout+0x3e>
        {
            /*
            * id received is user defined 32
            */
            /* A positive response is ready to be sent to the user defined request */
            data[0] = (l_u8) (id + 1U);    /* Data user define */
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	86 0f       	add	r24, r22
    330e:	fa 01       	movw	r30, r20
    3310:	80 83       	st	Z, r24
            data[1] = (l_u8) (id + 2U);    /* Data user define */
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	86 0f       	add	r24, r22
    3316:	81 83       	std	Z+1, r24	; 0x01
            data[2] = (l_u8) (id + 3U);    /* Data user define */
    3318:	83 e0       	ldi	r24, 0x03	; 3
    331a:	86 0f       	add	r24, r22
    331c:	82 83       	std	Z+2, r24	; 0x02
            data[3] = (l_u8) (id + 4U);    /* Data user define */
    331e:	84 e0       	ldi	r24, 0x04	; 4
    3320:	86 0f       	add	r24, r22
    3322:	83 83       	std	Z+3, r24	; 0x03
            data[4] = (l_u8) (id + 5U);    /* Data user define */
    3324:	6b 5f       	subi	r22, 0xFB	; 251
    3326:	64 83       	std	Z+4, r22	; 0x04
            retval = LD_POSITIVE_RESPONSE;
    3328:	84 e5       	ldi	r24, 0x54	; 84
    332a:	08 95       	ret
 * Implements    : ld_read_by_id_callout_Activity
 *END**************************************************************************/

l_u8 ld_read_by_id_callout(l_ifc_handle iii, l_u8 id, l_u8 *data)
{
    l_u8 retval = LD_NEGATIVE_RESPONSE;
    332c:	83 e5       	ldi	r24, 0x53	; 83
    332e:	08 95       	ret
    3330:	83 e5       	ldi	r24, 0x53	; 83
            * id received is user defined 63 - no response
            */
        }
    } /* End (conf->function == _SLAVE_) */
   return retval;
}
    3332:	08 95       	ret

00003334 <LIN_DRV_ProcessParity>:
 *
 * Implements    : LIN_DRV_ProcessParity_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_ProcessParity(uint8_t PID,
                              uint8_t typeAction)
{
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    return (uint8_t)((A >> B) & 0x01U);
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	e9 01       	movw	r28, r18
    333e:	d5 95       	asr	r29
    3340:	c7 95       	ror	r28
    3342:	a9 01       	movw	r20, r18
    3344:	55 95       	asr	r21
    3346:	47 95       	ror	r20
    3348:	55 95       	asr	r21
    334a:	47 95       	ror	r20
    334c:	f9 01       	movw	r30, r18
    334e:	f5 95       	asr	r31
    3350:	e7 95       	ror	r30
    3352:	f5 95       	asr	r31
    3354:	e7 95       	ror	r30
    3356:	f5 95       	asr	r31
    3358:	e7 95       	ror	r30
    335a:	f5 95       	asr	r31
    335c:	e7 95       	ror	r30
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    335e:	9c 2f       	mov	r25, r28
    3360:	98 27       	eor	r25, r24
    3362:	49 27       	eor	r20, r25
    3364:	4e 27       	eor	r20, r30
    3366:	41 70       	andi	r20, 0x01	; 1
    3368:	42 95       	swap	r20
    336a:	44 0f       	add	r20, r20
    336c:	44 0f       	add	r20, r20
    336e:	40 7c       	andi	r20, 0xC0	; 192
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    return (uint8_t)((A >> B) & 0x01U);
    3370:	d9 01       	movw	r26, r18
    3372:	b5 95       	asr	r27
    3374:	a7 95       	ror	r26
    3376:	b5 95       	asr	r27
    3378:	a7 95       	ror	r26
    337a:	b5 95       	asr	r27
    337c:	a7 95       	ror	r26
    337e:	35 95       	asr	r19
    3380:	27 95       	ror	r18
    3382:	35 95       	asr	r19
    3384:	27 95       	ror	r18
    3386:	35 95       	asr	r19
    3388:	27 95       	ror	r18
    338a:	35 95       	asr	r19
    338c:	27 95       	ror	r18
    338e:	35 95       	asr	r19
    3390:	27 95       	ror	r18
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    3392:	9c 2f       	mov	r25, r28
    3394:	9a 27       	eor	r25, r26
    3396:	9e 27       	eor	r25, r30
    3398:	92 27       	eor	r25, r18
    339a:	91 70       	andi	r25, 0x01	; 1
    339c:	90 95       	com	r25
    339e:	97 95       	ror	r25
    33a0:	99 27       	eor	r25, r25
    33a2:	97 95       	ror	r25
    33a4:	24 2f       	mov	r18, r20
    33a6:	29 2b       	or	r18, r25
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));

    /* Check if action is checking parity bits */
    if (CHECK_PARITY == typeAction)
    33a8:	61 30       	cpi	r22, 0x01	; 1
    33aa:	31 f4       	brne	.+12     	; 0x33b8 <LIN_DRV_ProcessParity+0x84>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
    33ac:	98 2f       	mov	r25, r24
    33ae:	90 7c       	andi	r25, 0xC0	; 192
    33b0:	92 13       	cpse	r25, r18
    33b2:	04 c0       	rjmp	.+8      	; 0x33bc <LIN_DRV_ProcessParity+0x88>
        }
        /* If parity bits are correct */
        else
        {
            /* Return ID if parity bits are correct */
            retVal = (uint8_t)(PID & 0x3FU);
    33b4:	8f 73       	andi	r24, 0x3F	; 63
    33b6:	03 c0       	rjmp	.+6      	; 0x33be <LIN_DRV_ProcessParity+0x8a>
    }
    /* If action is making parity bits */
    else
    {
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    33b8:	82 2b       	or	r24, r18
    33ba:	01 c0       	rjmp	.+2      	; 0x33be <LIN_DRV_ProcessParity+0x8a>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
        {
            /* Return 0xFF if parity bits are incorrect */
            retVal = 0xFFU;
    33bc:	8f ef       	ldi	r24, 0xFF	; 255
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    }

    return retVal;
}
    33be:	df 91       	pop	r29
    33c0:	cf 91       	pop	r28
    33c2:	08 95       	ret

000033c4 <LIN_DRV_MakeChecksumByte>:
 * 计算经典型校验方式，传入参数PID应该为0
 *
 * Implements    : LIN_DRV_MakeChecksumByte_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_MakeChecksumByte(const uint8_t * buffer, uint8_t sizeBuffer, uint8_t PID)
{
    33c4:	fc 01       	movw	r30, r24
    uint8_t length;
    uint16_t checksum = 0U;

    /* For PID is 0x3C (ID 0x3C) or 0x7D (ID 0x3D) or 0xFE (ID 0x3E) or 0xBF (ID 0x3F)
     * apply classic checksum and apply enhanced checksum for other PID */
    if ((0x3CU != PID) && (0x7DU != PID) && (0xFEU != PID) && (0xBFU != PID))
    33c6:	4c 33       	cpi	r20, 0x3C	; 60
    33c8:	41 f0       	breq	.+16     	; 0x33da <LIN_DRV_MakeChecksumByte+0x16>
    33ca:	4d 37       	cpi	r20, 0x7D	; 125
    33cc:	49 f0       	breq	.+18     	; 0x33e0 <LIN_DRV_MakeChecksumByte+0x1c>
    33ce:	4e 3f       	cpi	r20, 0xFE	; 254
    33d0:	51 f0       	breq	.+20     	; 0x33e6 <LIN_DRV_MakeChecksumByte+0x22>
    33d2:	4f 3b       	cpi	r20, 0xBF	; 191
    33d4:	59 f0       	breq	.+22     	; 0x33ec <LIN_DRV_MakeChecksumByte+0x28>
    {
        /* For PID other than 0x3C, 0x7D, 0xFE and 0xBF: Add PID in checksum calculation */
        checksum = PID;
    33d6:	50 e0       	ldi	r21, 0x00	; 0
    33d8:	16 c0       	rjmp	.+44     	; 0x3406 <LIN_DRV_MakeChecksumByte+0x42>
    }
    else
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	50 e0       	ldi	r21, 0x00	; 0
    33de:	13 c0       	rjmp	.+38     	; 0x3406 <LIN_DRV_MakeChecksumByte+0x42>
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	10 c0       	rjmp	.+32     	; 0x3406 <LIN_DRV_MakeChecksumByte+0x42>
    33e6:	40 e0       	ldi	r20, 0x00	; 0
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	0d c0       	rjmp	.+26     	; 0x3406 <LIN_DRV_MakeChecksumByte+0x42>
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	50 e0       	ldi	r21, 0x00	; 0
    33f0:	0a c0       	rjmp	.+20     	; 0x3406 <LIN_DRV_MakeChecksumByte+0x42>
    }

    for (length = sizeBuffer; 0U < length; length--)
    {
        checksum += *buffer;
    33f2:	81 91       	ld	r24, Z+
    33f4:	48 0f       	add	r20, r24
    33f6:	51 1d       	adc	r21, r1
        buffer++;
        /* Deal with the carry */
        if (checksum > 0xFFU)
    33f8:	4f 3f       	cpi	r20, 0xFF	; 255
    33fa:	51 05       	cpc	r21, r1
    33fc:	19 f0       	breq	.+6      	; 0x3404 <LIN_DRV_MakeChecksumByte+0x40>
    33fe:	10 f0       	brcs	.+4      	; 0x3404 <LIN_DRV_MakeChecksumByte+0x40>
        {
            checksum -= 0xFFU;
    3400:	4f 5f       	subi	r20, 0xFF	; 255
    3402:	51 09       	sbc	r21, r1
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    }

    for (length = sizeBuffer; 0U < length; length--)
    3404:	61 50       	subi	r22, 0x01	; 1
    3406:	61 11       	cpse	r22, r1
    3408:	f4 cf       	rjmp	.-24     	; 0x33f2 <LIN_DRV_MakeChecksumByte+0x2e>
        }
    }

    /* Return reversed checksum */
    return (uint8_t)(~checksum);
}
    340a:	84 2f       	mov	r24, r20
    340c:	80 95       	com	r24
    340e:	08 95       	ret

00003410 <LIN_DRV_ProcessFrameHeader>:

    /* Disable LPUART interrupts. */
    //TODO:
    
    return retVal;
}
    3410:	cf 92       	push	r12
    3412:	df 92       	push	r13
    3414:	ef 92       	push	r14
    3416:	ff 92       	push	r15
    3418:	1f 93       	push	r17
    341a:	cf 93       	push	r28
    341c:	df 93       	push	r29
    341e:	9b 01       	movw	r18, r22
    3420:	22 0f       	add	r18, r18
    3422:	33 1f       	adc	r19, r19
    3424:	f9 01       	movw	r30, r18
    3426:	e4 5f       	subi	r30, 0xF4	; 244
    3428:	f8 49       	sbci	r31, 0x98	; 152
    342a:	01 90       	ld	r0, Z+
    342c:	f0 81       	ld	r31, Z
    342e:	e0 2d       	mov	r30, r0
    3430:	d9 01       	movw	r26, r18
    3432:	a2 5f       	subi	r26, 0xF2	; 242
    3434:	b8 49       	sbci	r27, 0x98	; 152
    3436:	cd 91       	ld	r28, X+
    3438:	dc 91       	ld	r29, X
    343a:	2a 89       	ldd	r18, Y+18	; 0x12
    343c:	26 30       	cpi	r18, 0x06	; 6
    343e:	59 f5       	brne	.+86     	; 0x3496 <LIN_DRV_ProcessFrameHeader+0x86>
    3440:	24 81       	ldd	r18, Z+4	; 0x04
    3442:	21 11       	cpse	r18, r1
    3444:	28 c0       	rjmp	.+80     	; 0x3496 <LIN_DRV_ProcessFrameHeader+0x86>
    3446:	14 2f       	mov	r17, r20
    3448:	6b 01       	movw	r12, r22
    344a:	7c 01       	movw	r14, r24
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	84 2f       	mov	r24, r20
    3450:	0e 94 9a 19 	call	0x3334	; 0x3334 <LIN_DRV_ProcessParity>
    3454:	8f 87       	std	Y+15, r24	; 0x0f
    3456:	18 8b       	std	Y+16, r17	; 0x10
    3458:	8f 3f       	cpi	r24, 0xFF	; 255
    345a:	a9 f0       	breq	.+42     	; 0x3486 <LIN_DRV_ProcessFrameHeader+0x76>
    345c:	86 e0       	ldi	r24, 0x06	; 6
    345e:	89 8b       	std	Y+17, r24	; 0x11
    3460:	8c 85       	ldd	r24, Y+12	; 0x0c
    3462:	88 23       	and	r24, r24
    3464:	31 f0       	breq	.+12     	; 0x3472 <LIN_DRV_ProcessFrameHeader+0x62>
    3466:	87 e0       	ldi	r24, 0x07	; 7
    3468:	8a 8b       	std	Y+18, r24	; 0x12
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	8a 87       	std	Y+10, r24	; 0x0a
    346e:	89 87       	std	Y+9, r24	; 0x09
    3470:	12 c0       	rjmp	.+36     	; 0x3496 <LIN_DRV_ProcessFrameHeader+0x86>
    3472:	1a 86       	std	Y+10, r1	; 0x0a
    3474:	ed 85       	ldd	r30, Y+13	; 0x0d
    3476:	fe 85       	ldd	r31, Y+14	; 0x0e
    3478:	30 97       	sbiw	r30, 0x00	; 0
    347a:	69 f0       	breq	.+26     	; 0x3496 <LIN_DRV_ProcessFrameHeader+0x86>
    347c:	ae 01       	movw	r20, r28
    347e:	c7 01       	movw	r24, r14
    3480:	b6 01       	movw	r22, r12
    3482:	09 95       	icall
    3484:	08 c0       	rjmp	.+16     	; 0x3496 <LIN_DRV_ProcessFrameHeader+0x86>
    3486:	87 e0       	ldi	r24, 0x07	; 7
    3488:	89 8b       	std	Y+17, r24	; 0x11
    348a:	ed 85       	ldd	r30, Y+13	; 0x0d
    348c:	fe 85       	ldd	r31, Y+14	; 0x0e
    348e:	ae 01       	movw	r20, r28
    3490:	c7 01       	movw	r24, r14
    3492:	b6 01       	movw	r22, r12
    3494:	09 95       	icall
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	ff 90       	pop	r15
    349e:	ef 90       	pop	r14
    34a0:	df 90       	pop	r13
    34a2:	cf 90       	pop	r12
    34a4:	08 95       	ret

000034a6 <LIN_COM_DRV_MakeChecksumByte>:
    34a6:	0f 93       	push	r16
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	ea 01       	movw	r28, r20
    34ae:	40 2f       	mov	r20, r16
    34b0:	66 0f       	add	r22, r22
    34b2:	77 1f       	adc	r23, r23
    34b4:	fb 01       	movw	r30, r22
    34b6:	e4 5f       	subi	r30, 0xF4	; 244
    34b8:	f8 49       	sbci	r31, 0x98	; 152
    34ba:	01 90       	ld	r0, Z+
    34bc:	f0 81       	ld	r31, Z
    34be:	e0 2d       	mov	r30, r0
    34c0:	a0 85       	ldd	r26, Z+8	; 0x08
    34c2:	b1 85       	ldd	r27, Z+9	; 0x09
    34c4:	52 85       	ldd	r21, Z+10	; 0x0a
    34c6:	5f 3f       	cpi	r21, 0xFF	; 255
    34c8:	79 f0       	breq	.+30     	; 0x34e8 <LIN_COM_DRV_MakeChecksumByte+0x42>
    34ca:	10 97       	sbiw	r26, 0x00	; 0
    34cc:	49 f4       	brne	.+18     	; 0x34e0 <LIN_COM_DRV_MakeChecksumByte+0x3a>
    34ce:	0f c0       	rjmp	.+30     	; 0x34ee <LIN_COM_DRV_MakeChecksumByte+0x48>
    34d0:	fd 01       	movw	r30, r26
    34d2:	e9 0f       	add	r30, r25
    34d4:	f1 1d       	adc	r31, r1
    34d6:	30 81       	ld	r19, Z
    34d8:	43 17       	cp	r20, r19
    34da:	41 f0       	breq	.+16     	; 0x34ec <LIN_COM_DRV_MakeChecksumByte+0x46>
    34dc:	9f 5f       	subi	r25, 0xFF	; 255
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <LIN_COM_DRV_MakeChecksumByte+0x3c>
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	95 17       	cp	r25, r21
    34e4:	a8 f3       	brcs	.-22     	; 0x34d0 <LIN_COM_DRV_MakeChecksumByte+0x2a>
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <LIN_COM_DRV_MakeChecksumByte+0x48>
    34e8:	40 e0       	ldi	r20, 0x00	; 0
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <LIN_COM_DRV_MakeChecksumByte+0x48>
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	62 2f       	mov	r22, r18
    34f0:	ce 01       	movw	r24, r28
    34f2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <LIN_DRV_MakeChecksumByte>
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	0f 91       	pop	r16
    34fc:	08 95       	ret

000034fe <LIN_DRV_ProcessSendFrameData>:
    34fe:	1f 93       	push	r17
    3500:	cf 93       	push	r28
    3502:	df 93       	push	r29
    3504:	9b 01       	movw	r18, r22
    3506:	22 0f       	add	r18, r18
    3508:	33 1f       	adc	r19, r19
    350a:	f9 01       	movw	r30, r18
    350c:	e2 5f       	subi	r30, 0xF2	; 242
    350e:	f8 49       	sbci	r31, 0x98	; 152
    3510:	c0 81       	ld	r28, Z
    3512:	d1 81       	ldd	r29, Z+1	; 0x01
    3514:	f9 01       	movw	r30, r18
    3516:	e6 5f       	subi	r30, 0xF6	; 246
    3518:	f8 49       	sbci	r31, 0x98	; 152
    351a:	01 90       	ld	r0, Z+
    351c:	f0 81       	ld	r31, Z
    351e:	e0 2d       	mov	r30, r0
    3520:	2d 81       	ldd	r18, Y+5	; 0x05
    3522:	5c 81       	ldd	r21, Y+4	; 0x04
    3524:	32 2f       	mov	r19, r18
    3526:	35 1b       	sub	r19, r21
    3528:	31 30       	cpi	r19, 0x01	; 1
    352a:	29 f4       	brne	.+10     	; 0x3536 <LIN_DRV_ProcessSendFrameData+0x38>
    352c:	2f 81       	ldd	r18, Y+7	; 0x07
    352e:	24 13       	cpse	r18, r20
    3530:	04 c0       	rjmp	.+8      	; 0x353a <LIN_DRV_ProcessSendFrameData+0x3c>
    3532:	a0 e0       	ldi	r26, 0x00	; 0
    3534:	03 c0       	rjmp	.+6      	; 0x353c <LIN_DRV_ProcessSendFrameData+0x3e>
    3536:	a0 e0       	ldi	r26, 0x00	; 0
    3538:	01 c0       	rjmp	.+2      	; 0x353c <LIN_DRV_ProcessSendFrameData+0x3e>
    353a:	a1 e0       	ldi	r26, 0x01	; 1
    353c:	2a 2f       	mov	r18, r26
    353e:	21 70       	andi	r18, 0x01	; 1
    3540:	a8 81       	ld	r26, Y
    3542:	b9 81       	ldd	r27, Y+1	; 0x01
    3544:	1c 91       	ld	r17, X
    3546:	41 17       	cp	r20, r17
    3548:	21 f0       	breq	.+8      	; 0x3552 <LIN_DRV_ProcessSendFrameData+0x54>
    354a:	31 30       	cpi	r19, 0x01	; 1
    354c:	21 f4       	brne	.+8      	; 0x3556 <LIN_DRV_ProcessSendFrameData+0x58>
    354e:	40 e0       	ldi	r20, 0x00	; 0
    3550:	03 c0       	rjmp	.+6      	; 0x3558 <LIN_DRV_ProcessSendFrameData+0x5a>
    3552:	40 e0       	ldi	r20, 0x00	; 0
    3554:	01 c0       	rjmp	.+2      	; 0x3558 <LIN_DRV_ProcessSendFrameData+0x5a>
    3556:	41 e0       	ldi	r20, 0x01	; 1
    3558:	34 2f       	mov	r19, r20
    355a:	31 70       	andi	r19, 0x01	; 1
    355c:	11 f4       	brne	.+4      	; 0x3562 <LIN_DRV_ProcessSendFrameData+0x64>
    355e:	22 23       	and	r18, r18
    3560:	39 f0       	breq	.+14     	; 0x3570 <LIN_DRV_ProcessSendFrameData+0x72>
    3562:	29 e0       	ldi	r18, 0x09	; 9
    3564:	29 8b       	std	Y+17, r18	; 0x11
    3566:	2b 85       	ldd	r18, Y+11	; 0x0b
    3568:	21 11       	cpse	r18, r1
    356a:	09 c0       	rjmp	.+18     	; 0x357e <LIN_DRV_ProcessSendFrameData+0x80>
    356c:	18 86       	std	Y+8, r1	; 0x08
    356e:	08 c0       	rjmp	.+16     	; 0x3580 <LIN_DRV_ProcessSendFrameData+0x82>
    3570:	11 96       	adiw	r26, 0x01	; 1
    3572:	a8 83       	st	Y, r26
    3574:	b9 83       	std	Y+1, r27	; 0x01
    3576:	5f 5f       	subi	r21, 0xFF	; 255
    3578:	5c 83       	std	Y+4, r21	; 0x04
    357a:	21 e0       	ldi	r18, 0x01	; 1
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <LIN_DRV_ProcessSendFrameData+0x82>
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	22 23       	and	r18, r18
    3582:	61 f1       	breq	.+88     	; 0x35dc <LIN_DRV_ProcessSendFrameData+0xde>
    3584:	2c 81       	ldd	r18, Y+4	; 0x04
    3586:	3d 81       	ldd	r19, Y+5	; 0x05
    3588:	23 17       	cp	r18, r19
    358a:	a0 f4       	brcc	.+40     	; 0x35b4 <LIN_DRV_ProcessSendFrameData+0xb6>
    358c:	8d 81       	ldd	r24, Y+5	; 0x05
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	82 1b       	sub	r24, r18
    3592:	91 09       	sbc	r25, r1
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	39 f4       	brne	.+14     	; 0x35a6 <LIN_DRV_ProcessSendFrameData+0xa8>
    3598:	02 80       	ldd	r0, Z+2	; 0x02
    359a:	f3 81       	ldd	r31, Z+3	; 0x03
    359c:	e0 2d       	mov	r30, r0
    359e:	ce 01       	movw	r24, r28
    35a0:	07 96       	adiw	r24, 0x07	; 7
    35a2:	09 95       	icall
    35a4:	1b c0       	rjmp	.+54     	; 0x35dc <LIN_DRV_ProcessSendFrameData+0xde>
    35a6:	02 80       	ldd	r0, Z+2	; 0x02
    35a8:	f3 81       	ldd	r31, Z+3	; 0x03
    35aa:	e0 2d       	mov	r30, r0
    35ac:	88 81       	ld	r24, Y
    35ae:	99 81       	ldd	r25, Y+1	; 0x01
    35b0:	09 95       	icall
    35b2:	14 c0       	rjmp	.+40     	; 0x35dc <LIN_DRV_ProcessSendFrameData+0xde>
    35b4:	2b e0       	ldi	r18, 0x0B	; 11
    35b6:	29 8b       	std	Y+17, r18	; 0x11
    35b8:	2a e0       	ldi	r18, 0x0A	; 10
    35ba:	2a 8b       	std	Y+18, r18	; 0x12
    35bc:	ed 85       	ldd	r30, Y+13	; 0x0d
    35be:	fe 85       	ldd	r31, Y+14	; 0x0e
    35c0:	30 97       	sbiw	r30, 0x00	; 0
    35c2:	11 f0       	breq	.+4      	; 0x35c8 <LIN_DRV_ProcessSendFrameData+0xca>
    35c4:	ae 01       	movw	r20, r28
    35c6:	09 95       	icall
    35c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    35ca:	81 11       	cpse	r24, r1
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <LIN_DRV_ProcessSendFrameData+0xda>
    35ce:	18 86       	std	Y+8, r1	; 0x08
    35d0:	19 8a       	std	Y+17, r1	; 0x11
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	8a 8b       	std	Y+18, r24	; 0x12
    35d6:	1a 86       	std	Y+10, r1	; 0x0a
    35d8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ep40_lin_signal_update_while_task>
    35dc:	df 91       	pop	r29
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	08 95       	ret

000035e4 <LIN_DRV_Init>:
    35e4:	f9 01       	movw	r30, r18
    35e6:	66 0f       	add	r22, r22
    35e8:	77 1f       	adc	r23, r23
    35ea:	db 01       	movw	r26, r22
    35ec:	a2 5f       	subi	r26, 0xF2	; 242
    35ee:	b8 49       	sbci	r27, 0x98	; 152
    35f0:	2d 93       	st	X+, r18
    35f2:	3c 93       	st	X, r19
    35f4:	db 01       	movw	r26, r22
    35f6:	a4 5f       	subi	r26, 0xF4	; 244
    35f8:	b8 49       	sbci	r27, 0x98	; 152
    35fa:	4d 93       	st	X+, r20
    35fc:	5c 93       	st	X, r21
    35fe:	db 01       	movw	r26, r22
    3600:	a6 5f       	subi	r26, 0xF6	; 246
    3602:	b8 49       	sbci	r27, 0x98	; 152
    3604:	83 eb       	ldi	r24, 0xB3	; 179
    3606:	90 e6       	ldi	r25, 0x60	; 96
    3608:	8d 93       	st	X+, r24
    360a:	9c 93       	st	X, r25
    360c:	82 e0       	ldi	r24, 0x02	; 2
    360e:	82 8b       	std	Z+18, r24	; 0x12
    3610:	10 86       	std	Z+8, r1	; 0x08
    3612:	11 86       	std	Z+9, r1	; 0x09
    3614:	12 86       	std	Z+10, r1	; 0x0a
    3616:	14 86       	std	Z+12, r1	; 0x0c
    3618:	13 86       	std	Z+11, r1	; 0x0b
    361a:	17 8a       	std	Z+23, r1	; 0x17
    361c:	13 8a       	std	Z+19, r1	; 0x13
    361e:	14 8a       	std	Z+20, r1	; 0x14
    3620:	15 8a       	std	Z+21, r1	; 0x15
    3622:	16 8a       	std	Z+22, r1	; 0x16
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	08 95       	ret

0000362a <LIN_DRV_GotoIdleState>:
    362a:	66 0f       	add	r22, r22
    362c:	77 1f       	adc	r23, r23
    362e:	fb 01       	movw	r30, r22
    3630:	e2 5f       	subi	r30, 0xF2	; 242
    3632:	f8 49       	sbci	r31, 0x98	; 152
    3634:	01 90       	ld	r0, Z+
    3636:	f0 81       	ld	r31, Z
    3638:	e0 2d       	mov	r30, r0
    363a:	11 8a       	std	Z+17, r1	; 0x11
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	82 8b       	std	Z+18, r24	; 0x12
    3640:	12 86       	std	Z+10, r1	; 0x0a
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	08 95       	ret

00003648 <LIN_DRV_ProcessReceiveFrameData>:
    3648:	cf 92       	push	r12
    364a:	df 92       	push	r13
    364c:	ef 92       	push	r14
    364e:	ff 92       	push	r15
    3650:	0f 93       	push	r16
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	fb 01       	movw	r30, r22
    3658:	ee 0f       	add	r30, r30
    365a:	ff 1f       	adc	r31, r31
    365c:	e2 5f       	subi	r30, 0xF2	; 242
    365e:	f8 49       	sbci	r31, 0x98	; 152
    3660:	c0 81       	ld	r28, Z
    3662:	d1 81       	ldd	r29, Z+1	; 0x01
    3664:	2e 81       	ldd	r18, Y+6	; 0x06
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	5c 81       	ldd	r21, Y+4	; 0x04
    366a:	e5 2f       	mov	r30, r21
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	31 96       	adiw	r30, 0x01	; 1
    3670:	e2 17       	cp	r30, r18
    3672:	f3 07       	cpc	r31, r19
    3674:	50 f4       	brcc	.+20     	; 0x368a <LIN_DRV_ProcessReceiveFrameData+0x42>
    3676:	ea 81       	ldd	r30, Y+2	; 0x02
    3678:	fb 81       	ldd	r31, Y+3	; 0x03
    367a:	40 83       	st	Z, r20
    367c:	2a 81       	ldd	r18, Y+2	; 0x02
    367e:	3b 81       	ldd	r19, Y+3	; 0x03
    3680:	2f 5f       	subi	r18, 0xFF	; 255
    3682:	3f 4f       	sbci	r19, 0xFF	; 255
    3684:	2a 83       	std	Y+2, r18	; 0x02
    3686:	3b 83       	std	Y+3, r19	; 0x03
    3688:	08 c0       	rjmp	.+16     	; 0x369a <LIN_DRV_ProcessReceiveFrameData+0x52>
    368a:	2e 81       	ldd	r18, Y+6	; 0x06
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	25 1b       	sub	r18, r21
    3690:	31 09       	sbc	r19, r1
    3692:	21 30       	cpi	r18, 0x01	; 1
    3694:	31 05       	cpc	r19, r1
    3696:	09 f4       	brne	.+2      	; 0x369a <LIN_DRV_ProcessReceiveFrameData+0x52>
    3698:	4f 83       	std	Y+7, r20	; 0x07
    369a:	2c 81       	ldd	r18, Y+4	; 0x04
    369c:	31 e0       	ldi	r19, 0x01	; 1
    369e:	32 0f       	add	r19, r18
    36a0:	3c 83       	std	Y+4, r19	; 0x04
    36a2:	2e 81       	ldd	r18, Y+6	; 0x06
    36a4:	32 13       	cpse	r19, r18
    36a6:	3d c0       	rjmp	.+122    	; 0x3722 <LIN_DRV_ProcessReceiveFrameData+0xda>
    36a8:	6b 01       	movw	r12, r22
    36aa:	7c 01       	movw	r14, r24
    36ac:	8e 81       	ldd	r24, Y+6	; 0x06
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	4a 81       	ldd	r20, Y+2	; 0x02
    36b4:	5b 81       	ldd	r21, Y+3	; 0x03
    36b6:	48 1b       	sub	r20, r24
    36b8:	59 0b       	sbc	r21, r25
    36ba:	4a 83       	std	Y+2, r20	; 0x02
    36bc:	5b 83       	std	Y+3, r21	; 0x03
    36be:	2e 81       	ldd	r18, Y+6	; 0x06
    36c0:	21 50       	subi	r18, 0x01	; 1
    36c2:	08 89       	ldd	r16, Y+16	; 0x10
    36c4:	c7 01       	movw	r24, r14
    36c6:	b6 01       	movw	r22, r12
    36c8:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <LIN_COM_DRV_MakeChecksumByte>
    36cc:	9f 81       	ldd	r25, Y+7	; 0x07
    36ce:	89 13       	cpse	r24, r25
    36d0:	19 c0       	rjmp	.+50     	; 0x3704 <LIN_DRV_ProcessReceiveFrameData+0xbc>
    36d2:	8c e0       	ldi	r24, 0x0C	; 12
    36d4:	89 8b       	std	Y+17, r24	; 0x11
    36d6:	88 e0       	ldi	r24, 0x08	; 8
    36d8:	8a 8b       	std	Y+18, r24	; 0x12
    36da:	ed 85       	ldd	r30, Y+13	; 0x0d
    36dc:	fe 85       	ldd	r31, Y+14	; 0x0e
    36de:	30 97       	sbiw	r30, 0x00	; 0
    36e0:	21 f0       	breq	.+8      	; 0x36ea <LIN_DRV_ProcessReceiveFrameData+0xa2>
    36e2:	ae 01       	movw	r20, r28
    36e4:	c7 01       	movw	r24, r14
    36e6:	b6 01       	movw	r22, r12
    36e8:	09 95       	icall
    36ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    36ec:	81 11       	cpse	r24, r1
    36ee:	19 c0       	rjmp	.+50     	; 0x3722 <LIN_DRV_ProcessReceiveFrameData+0xda>
    36f0:	1a 86       	std	Y+10, r1	; 0x0a
    36f2:	19 86       	std	Y+9, r1	; 0x09
    36f4:	8a 89       	ldd	r24, Y+18	; 0x12
    36f6:	81 30       	cpi	r24, 0x01	; 1
    36f8:	a1 f0       	breq	.+40     	; 0x3722 <LIN_DRV_ProcessReceiveFrameData+0xda>
    36fa:	c7 01       	movw	r24, r14
    36fc:	b6 01       	movw	r22, r12
    36fe:	0e 94 15 1b 	call	0x362a	; 0x362a <LIN_DRV_GotoIdleState>
    3702:	0f c0       	rjmp	.+30     	; 0x3722 <LIN_DRV_ProcessReceiveFrameData+0xda>
    3704:	8a e0       	ldi	r24, 0x0A	; 10
    3706:	89 8b       	std	Y+17, r24	; 0x11
    3708:	ed 85       	ldd	r30, Y+13	; 0x0d
    370a:	fe 85       	ldd	r31, Y+14	; 0x0e
    370c:	30 97       	sbiw	r30, 0x00	; 0
    370e:	21 f0       	breq	.+8      	; 0x3718 <LIN_DRV_ProcessReceiveFrameData+0xd0>
    3710:	ae 01       	movw	r20, r28
    3712:	c7 01       	movw	r24, r14
    3714:	b6 01       	movw	r22, r12
    3716:	09 95       	icall
    3718:	19 86       	std	Y+9, r1	; 0x09
    371a:	c7 01       	movw	r24, r14
    371c:	b6 01       	movw	r22, r12
    371e:	0e 94 15 1b 	call	0x362a	; 0x362a <LIN_DRV_GotoIdleState>
    3722:	df 91       	pop	r29
    3724:	cf 91       	pop	r28
    3726:	0f 91       	pop	r16
    3728:	ff 90       	pop	r15
    372a:	ef 90       	pop	r14
    372c:	df 90       	pop	r13
    372e:	cf 90       	pop	r12
    3730:	08 95       	ret

00003732 <LIN_DRV_GoToSleepMode>:
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    3732:	66 0f       	add	r22, r22
    3734:	77 1f       	adc	r23, r23
    3736:	fb 01       	movw	r30, r22
    3738:	e2 5f       	subi	r30, 0xF2	; 242
    373a:	f8 49       	sbci	r31, 0x98	; 152
    373c:	01 90       	ld	r0, Z+
    373e:	f0 81       	ld	r31, Z
    3740:	e0 2d       	mov	r30, r0

    /* Update node's current state to SLEEP_MODE. */
    linCurrentState->currentNodeState = LIN_NODE_STATE_SLEEP_MODE;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	82 8b       	std	Z+18, r24	; 0x12

    lin_go_to_sleep();
    3746:	0e 94 0d 08 	call	0x101a	; 0x101a <lin_go_to_sleep>

    return STATUS_SUCCESS;
}
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	08 95       	ret

00003750 <LIN_DRV_AbortTransferData>:
 * function to terminate immediately the transferring.
 *
 * Implements    : LIN_DRV_AbortTransferData_Activity
 *END**************************************************************************/
status_t LIN_DRV_AbortTransferData(uint32_t instance)
{
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    3754:	fb 01       	movw	r30, r22
    3756:	ee 0f       	add	r30, r30
    3758:	ff 1f       	adc	r31, r31
    375a:	e2 5f       	subi	r30, 0xF2	; 242
    375c:	f8 49       	sbci	r31, 0x98	; 152
    375e:	c0 81       	ld	r28, Z
    3760:	d1 81       	ldd	r29, Z+1	; 0x01

    /* Change node's current state to IDLE */
    (void)LIN_DRV_GotoIdleState(instance);
    3762:	0e 94 15 1b 	call	0x362a	; 0x362a <LIN_DRV_GotoIdleState>

    /* Clear LIN Tx and Rx Busy flag */
    linCurrentState->isTxBusy = false;
    3766:	18 86       	std	Y+8, r1	; 0x08
    linCurrentState->isRxBusy = false;
    3768:	19 86       	std	Y+9, r1	; 0x09

    return retVal;
}
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	df 91       	pop	r29
    3770:	cf 91       	pop	r28
    3772:	08 95       	ret

00003774 <LIN_DRV_InstallCallback>:
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    3774:	66 0f       	add	r22, r22
    3776:	77 1f       	adc	r23, r23
    3778:	fb 01       	movw	r30, r22
    377a:	e2 5f       	subi	r30, 0xF2	; 242
    377c:	f8 49       	sbci	r31, 0x98	; 152
    377e:	01 90       	ld	r0, Z+
    3780:	f0 81       	ld	r31, Z
    3782:	e0 2d       	mov	r30, r0

    /* Get the current callback function. */
    lin_callback_t currentCallback = linCurrentState->Callback;
    3784:	85 85       	ldd	r24, Z+13	; 0x0d
    3786:	96 85       	ldd	r25, Z+14	; 0x0e

    /* Install new callback function. */
    linCurrentState->Callback = function;
    3788:	45 87       	std	Z+13, r20	; 0x0d
    378a:	56 87       	std	Z+14, r21	; 0x0e

    return currentCallback;
}
    378c:	08 95       	ret

0000378e <LIN_DRV_IRQHandler>:

/*  参数instance为串口标号，取决于配置的顺序
*/

void LIN_DRV_IRQHandler(uint32_t instance, int8_t event)
{
    378e:	cf 92       	push	r12
    3790:	df 92       	push	r13
    3792:	ef 92       	push	r14
    3794:	ff 92       	push	r15
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	1f 92       	push	r1
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	6b 01       	movw	r12, r22
    37a2:	7c 01       	movw	r14, r24
    /* 一下功能实现只针对AVRxxDA系列8位单片机 */
    uint8_t temp_buf; 
    /************/
    const lin_user_config_t * linUserConfig = g_linUserconfigPtr[instance];
    37a4:	cb 01       	movw	r24, r22
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	fc 01       	movw	r30, r24
    37ac:	e4 5f       	subi	r30, 0xF4	; 244
    37ae:	f8 49       	sbci	r31, 0x98	; 152
    37b0:	20 81       	ld	r18, Z
    37b2:	31 81       	ldd	r19, Z+1	; 0x01
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    37b4:	fc 01       	movw	r30, r24
    37b6:	e2 5f       	subi	r30, 0xF2	; 242
    37b8:	f8 49       	sbci	r31, 0x98	; 152
    37ba:	a0 81       	ld	r26, Z
    37bc:	b1 81       	ldd	r27, Z+1	; 0x01
    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    37be:	fc 01       	movw	r30, r24
    37c0:	e6 5f       	subi	r30, 0xF6	; 246
    37c2:	f8 49       	sbci	r31, 0x98	; 152
    37c4:	60 81       	ld	r22, Z
    37c6:	71 81       	ldd	r23, Z+1	; 0x01

    if(event == 1) // 检测到PID
    37c8:	41 30       	cpi	r20, 0x01	; 1
    37ca:	d9 f4       	brne	.+54     	; 0x3802 <LIN_DRV_IRQHandler+0x74>
    {
        //AVR系列单片机特殊的地方 BREAK SYNC PID 一起识别触发
        if(linUserConfig->nodeFunction == (bool)MASTER)
    37cc:	f9 01       	movw	r30, r18
    37ce:	84 81       	ldd	r24, Z+4	; 0x04
    37d0:	81 11       	cpse	r24, r1
    37d2:	57 c0       	rjmp	.+174    	; 0x3882 <LIN_DRV_IRQHandler+0xf4>
        {
            //TODO:主机模式后续更新，AVR 8位机无法实现主机模式
        }else
        {
            /* Set flag LIN bus busy */
            linCurrentState->isBusBusy = true;
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	1a 96       	adiw	r26, 0x0a	; 10
    37d8:	8c 93       	st	X, r24
    37da:	1a 97       	sbiw	r26, 0x0a	; 10
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentEventId = LIN_SYNC_OK;
    37dc:	84 e0       	ldi	r24, 0x04	; 4
    37de:	51 96       	adiw	r26, 0x11	; 17
    37e0:	8c 93       	st	X, r24
    37e2:	51 97       	sbiw	r26, 0x11	; 17
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_PID;
    37e4:	86 e0       	ldi	r24, 0x06	; 6
    37e6:	52 96       	adiw	r26, 0x12	; 18
    37e8:	8c 93       	st	X, r24
            /* 直接读取data缓冲区数据，存放得当前PID */
            linFuncCallback->ReadByte(&temp_buf);
    37ea:	db 01       	movw	r26, r22
    37ec:	ed 91       	ld	r30, X+
    37ee:	fc 91       	ld	r31, X
    37f0:	ce 01       	movw	r24, r28
    37f2:	01 96       	adiw	r24, 0x01	; 1
    37f4:	09 95       	icall
            /* 判断PID是否合理，有错误 */
            LIN_DRV_ProcessFrameHeader(instance, temp_buf);
    37f6:	49 81       	ldd	r20, Y+1	; 0x01
    37f8:	c7 01       	movw	r24, r14
    37fa:	b6 01       	movw	r22, r12
    37fc:	0e 94 08 1a 	call	0x3410	; 0x3410 <LIN_DRV_ProcessFrameHeader>
    3800:	40 c0       	rjmp	.+128    	; 0x3882 <LIN_DRV_IRQHandler+0xf4>
            // {
            //     linCurrentState->Callback(instance, linCurrentState);
            // }
        }
    }
    else if(event == 0) //处理帧数据
    3802:	41 11       	cpse	r20, r1
    3804:	2a c0       	rjmp	.+84     	; 0x385a <LIN_DRV_IRQHandler+0xcc>
    {
        /* Check node's current state */
        switch (linCurrentState->currentNodeState)
    3806:	52 96       	adiw	r26, 0x12	; 18
    3808:	8c 91       	ld	r24, X
    380a:	87 30       	cpi	r24, 0x07	; 7
    380c:	39 f0       	breq	.+14     	; 0x381c <LIN_DRV_IRQHandler+0x8e>
    380e:	18 f4       	brcc	.+6      	; 0x3816 <LIN_DRV_IRQHandler+0x88>
    3810:	84 30       	cpi	r24, 0x04	; 4
    3812:	b8 f5       	brcc	.+110    	; 0x3882 <LIN_DRV_IRQHandler+0xf4>
    3814:	1b c0       	rjmp	.+54     	; 0x384c <LIN_DRV_IRQHandler+0xbe>
    3816:	89 30       	cpi	r24, 0x09	; 9
    3818:	69 f0       	breq	.+26     	; 0x3834 <LIN_DRV_IRQHandler+0xa6>
    381a:	18 c0       	rjmp	.+48     	; 0x384c <LIN_DRV_IRQHandler+0xbe>
            /* if current state is RECEIVE PID */
            case LIN_NODE_STATE_RECV_PID:
                break;
            /* if current state is RECEIVE DATA */
            case LIN_NODE_STATE_RECV_DATA:
                linFuncCallback->ReadByte(&temp_buf);
    381c:	db 01       	movw	r26, r22
    381e:	ed 91       	ld	r30, X+
    3820:	fc 91       	ld	r31, X
    3822:	ce 01       	movw	r24, r28
    3824:	01 96       	adiw	r24, 0x01	; 1
    3826:	09 95       	icall
                LIN_DRV_ProcessReceiveFrameData(instance, temp_buf);
    3828:	49 81       	ldd	r20, Y+1	; 0x01
    382a:	c7 01       	movw	r24, r14
    382c:	b6 01       	movw	r22, r12
    382e:	0e 94 24 1b 	call	0x3648	; 0x3648 <LIN_DRV_ProcessReceiveFrameData>
                break;
    3832:	27 c0       	rjmp	.+78     	; 0x3882 <LIN_DRV_IRQHandler+0xf4>
            /* if current state is SENDING DATA */
            case LIN_NODE_STATE_SEND_DATA:
                /* 发送时会回显数据 读上次发送的回显数据 */
                linFuncCallback->ReadByte(&temp_buf);
    3834:	db 01       	movw	r26, r22
    3836:	ed 91       	ld	r30, X+
    3838:	fc 91       	ld	r31, X
    383a:	ce 01       	movw	r24, r28
    383c:	01 96       	adiw	r24, 0x01	; 1
    383e:	09 95       	icall
                LIN_DRV_ProcessSendFrameData(instance, temp_buf);
    3840:	49 81       	ldd	r20, Y+1	; 0x01
    3842:	c7 01       	movw	r24, r14
    3844:	b6 01       	movw	r22, r12
    3846:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <LIN_DRV_ProcessSendFrameData>
                break;
    384a:	1b c0       	rjmp	.+54     	; 0x3882 <LIN_DRV_IRQHandler+0xf4>

            default:
                /* Other node state */
				linFuncCallback->ReadByte(&temp_buf);
    384c:	db 01       	movw	r26, r22
    384e:	ed 91       	ld	r30, X+
    3850:	fc 91       	ld	r31, X
    3852:	ce 01       	movw	r24, r28
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	09 95       	icall
                break;
    3858:	14 c0       	rjmp	.+40     	; 0x3882 <LIN_DRV_IRQHandler+0xf4>
        }
    }
    else if(event == -1) //报错
    385a:	4f 3f       	cpi	r20, 0xFF	; 255
    385c:	91 f4       	brne	.+36     	; 0x3882 <LIN_DRV_IRQHandler+0xf4>
        // else if(err == USART_ERROR_FRAMING)
        // {

        // }
        // AVRXXDA系列的型号
        linCurrentState->currentEventId = LIN_SYNC_ERROR;
    385e:	85 e0       	ldi	r24, 0x05	; 5
    3860:	51 96       	adiw	r26, 0x11	; 17
    3862:	8c 93       	st	X, r24
    3864:	51 97       	sbiw	r26, 0x11	; 17
        if(linCurrentState->Callback != NULL)
    3866:	1d 96       	adiw	r26, 0x0d	; 13
    3868:	ed 91       	ld	r30, X+
    386a:	fc 91       	ld	r31, X
    386c:	1e 97       	sbiw	r26, 0x0e	; 14
    386e:	30 97       	sbiw	r30, 0x00	; 0
    3870:	21 f0       	breq	.+8      	; 0x387a <LIN_DRV_IRQHandler+0xec>
        {
            linCurrentState->Callback(instance, linCurrentState);
    3872:	ad 01       	movw	r20, r26
    3874:	c7 01       	movw	r24, r14
    3876:	b6 01       	movw	r22, r12
    3878:	09 95       	icall
        }
        (void)LIN_DRV_GotoIdleState(instance);
    387a:	c7 01       	movw	r24, r14
    387c:	b6 01       	movw	r22, r12
    387e:	0e 94 15 1b 	call	0x362a	; 0x362a <LIN_DRV_GotoIdleState>
    }
}
    3882:	0f 90       	pop	r0
    3884:	df 91       	pop	r29
    3886:	cf 91       	pop	r28
    3888:	ff 90       	pop	r15
    388a:	ef 90       	pop	r14
    388c:	df 90       	pop	r13
    388e:	cf 90       	pop	r12
    3890:	08 95       	ret

00003892 <LIN_DRV_SendFrameData>:
 * isBusBusy is currently true then the function will return STATUS_BUSY.
 * 非阻塞模式下发送数据,该函数会计算校验字节，并发送帧数据，立即返回
 * Implements    : LIN_LPUART_DRV_SendFrameData_Activity
 * */
status_t LIN_DRV_SendFrameData(uint32_t instance, const uint8_t * txBuff, uint8_t txSize)
{
    3892:	cf 92       	push	r12
    3894:	df 92       	push	r13
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    38a2:	fb 01       	movw	r30, r22
    38a4:	ee 0f       	add	r30, r30
    38a6:	ff 1f       	adc	r31, r31
    38a8:	df 01       	movw	r26, r30
    38aa:	a2 5f       	subi	r26, 0xF2	; 242
    38ac:	b8 49       	sbci	r27, 0x98	; 152
    38ae:	cd 91       	ld	r28, X+
    38b0:	dc 91       	ld	r29, X

    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    38b2:	e6 5f       	subi	r30, 0xF6	; 246
    38b4:	f8 49       	sbci	r31, 0x98	; 152
    38b6:	c0 80       	ld	r12, Z
    38b8:	d1 80       	ldd	r13, Z+1	; 0x01

    /* 判断节点是否处于睡眠状态 */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    38ba:	ea 89       	ldd	r30, Y+18	; 0x12

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    38bc:	3f ef       	ldi	r19, 0xFF	; 255
    38be:	32 0f       	add	r19, r18
    38c0:	38 30       	cpi	r19, 0x08	; 8
    38c2:	08 f5       	brcc	.+66     	; 0x3906 <LIN_DRV_SendFrameData+0x74>
    38c4:	e1 30       	cpi	r30, 0x01	; 1
    38c6:	11 f1       	breq	.+68     	; 0x390c <LIN_DRV_SendFrameData+0x7a>
        retVal = STATUS_ERROR;
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    38c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    38ca:	31 11       	cpse	r19, r1
    38cc:	22 c0       	rjmp	.+68     	; 0x3912 <LIN_DRV_SendFrameData+0x80>
    38ce:	12 2f       	mov	r17, r18
    38d0:	7a 01       	movw	r14, r20
            retVal = STATUS_BUSY;
        }
        else
        {
            /* Make the checksum byte. */           
            linCurrentState->checkSum = LIN_COM_DRV_MakeChecksumByte(instance, txBuff, txSize, linCurrentState->currentPid);
    38d2:	08 89       	ldd	r16, Y+16	; 0x10
    38d4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <LIN_COM_DRV_MakeChecksumByte>
    38d8:	8f 83       	std	Y+7, r24	; 0x07

            /* Update the LIN state structure. */
            linCurrentState->txBuff = txBuff;
    38da:	e8 82       	st	Y, r14
    38dc:	f9 82       	std	Y+1, r15	; 0x01
            /* Add a place for checksum byte */
            linCurrentState->txSize = (uint8_t)(txSize + 1U);
    38de:	21 e0       	ldi	r18, 0x01	; 1
    38e0:	21 0f       	add	r18, r17
    38e2:	2d 83       	std	Y+5, r18	; 0x05
            linCurrentState->cntByte = 0U;
    38e4:	1c 82       	std	Y+4, r1	; 0x04
            linCurrentState->currentNodeState = LIN_NODE_STATE_SEND_DATA;
    38e6:	89 e0       	ldi	r24, 0x09	; 9
    38e8:	8a 8b       	std	Y+18, r24	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    38ea:	19 8a       	std	Y+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	8a 87       	std	Y+10, r24	; 0x0a
            linCurrentState->isTxBusy = true;
    38f0:	88 87       	std	Y+8, r24	; 0x08

            /* Set Break char detect length as 10 bits minimum */
            //LPUART_SetBreakCharDetectLength(base, LPUART_BREAK_CHAR_10_BIT_MINIMUM);  

            /* Start sending data */
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
    38f2:	d6 01       	movw	r26, r12
    38f4:	12 96       	adiw	r26, 0x02	; 2
    38f6:	ed 91       	ld	r30, X+
    38f8:	fc 91       	ld	r31, X
    38fa:	13 97       	sbiw	r26, 0x03	; 3
    38fc:	c7 01       	movw	r24, r14
    38fe:	09 95       	icall
{
    /* Assert parameters. */
    DEV_ASSERT(txBuff != NULL);
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	08 c0       	rjmp	.+16     	; 0x3916 <LIN_DRV_SendFrameData+0x84>

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    {
        retVal = STATUS_ERROR;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	05 c0       	rjmp	.+10     	; 0x3916 <LIN_DRV_SendFrameData+0x84>
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <LIN_DRV_SendFrameData+0x84>
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
        {
            retVal = STATUS_BUSY;
    3912:	82 e0       	ldi	r24, 0x02	; 2
    3914:	90 e0       	ldi	r25, 0x00	; 0
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
        }
    }

    return retVal;
}
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	ff 90       	pop	r15
    3920:	ef 90       	pop	r14
    3922:	df 90       	pop	r13
    3924:	cf 90       	pop	r12
    3926:	08 95       	ret

00003928 <LIN_DRV_ReceiveFrameData>:
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    3928:	66 0f       	add	r22, r22
    392a:	77 1f       	adc	r23, r23
    392c:	fb 01       	movw	r30, r22
    392e:	e2 5f       	subi	r30, 0xF2	; 242
    3930:	f8 49       	sbci	r31, 0x98	; 152
    3932:	01 90       	ld	r0, Z+
    3934:	f0 81       	ld	r31, Z
    3936:	e0 2d       	mov	r30, r0

    /* Check whether current mode is sleep mode */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    3938:	92 89       	ldd	r25, Z+18	; 0x12

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    393a:	8f ef       	ldi	r24, 0xFF	; 255
    393c:	82 0f       	add	r24, r18
    393e:	88 30       	cpi	r24, 0x08	; 8
    3940:	a0 f4       	brcc	.+40     	; 0x396a <LIN_DRV_ReceiveFrameData+0x42>
    3942:	91 30       	cpi	r25, 0x01	; 1
    3944:	a9 f0       	breq	.+42     	; 0x3970 <LIN_DRV_ReceiveFrameData+0x48>
        retVal = STATUS_ERROR;
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    3946:	82 85       	ldd	r24, Z+10	; 0x0a
    3948:	81 11       	cpse	r24, r1
    394a:	15 c0       	rjmp	.+42     	; 0x3976 <LIN_DRV_ReceiveFrameData+0x4e>
            retVal = STATUS_BUSY;
        }
        else
        {
            /* Update the LIN state structure. */
            linCurrentState->rxBuff = rxBuff;
    394c:	42 83       	std	Z+2, r20	; 0x02
    394e:	53 83       	std	Z+3, r21	; 0x03
            /* Add a place for checksum byte */
            linCurrentState->rxSize = (uint8_t)(rxSize + 1U);
    3950:	2f 5f       	subi	r18, 0xFF	; 255
    3952:	26 83       	std	Z+6, r18	; 0x06
            linCurrentState->cntByte = 0U;
    3954:	14 82       	std	Z+4, r1	; 0x04

            /* Start receiving data */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA;
    3956:	87 e0       	ldi	r24, 0x07	; 7
    3958:	82 8b       	std	Z+18, r24	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    395a:	11 8a       	std	Z+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	82 87       	std	Z+10, r24	; 0x0a
            linCurrentState->isRxBusy = true;
    3960:	81 87       	std	Z+9, r24	; 0x09
            linCurrentState->isRxBlocking = false;
    3962:	14 86       	std	Z+12, r1	; 0x0c
{
    /* Assert parameters. */
    DEV_ASSERT(rxBuff != NULL);
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	08 95       	ret

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    {
        retVal = STATUS_ERROR;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	08 95       	ret
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	08 95       	ret
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
        {
            retVal = STATUS_BUSY;
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	90 e0       	ldi	r25, 0x00	; 0
            linCurrentState->isRxBlocking = false;
        }
    }

    return retVal;
}
    397a:	08 95       	ret

0000397c <LIN_DRV_TimeoutService>:
 * Implements    : LIN_DRV_TimeoutService_Activity
 * 
 * 需要初始化一个定时器,每0.5ms需要回调一次该函数,计数没有实现,AVR单片机容易导致卡死
 *END**************************************************************************/
void LIN_DRV_TimeoutService(uint32_t instance)
{
    397c:	cf 92       	push	r12
    397e:	df 92       	push	r13
    3980:	ef 92       	push	r14
    3982:	ff 92       	push	r15
    3984:	cf 93       	push	r28
    3986:	df 93       	push	r29
    3988:	6b 01       	movw	r12, r22
    398a:	7c 01       	movw	r14, r24
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    398c:	fb 01       	movw	r30, r22
    398e:	ee 0f       	add	r30, r30
    3990:	ff 1f       	adc	r31, r31
    3992:	e2 5f       	subi	r30, 0xF2	; 242
    3994:	f8 49       	sbci	r31, 0x98	; 152
    3996:	c0 81       	ld	r28, Z
    3998:	d1 81       	ldd	r29, Z+1	; 0x01

    /* Get LIN node's current state */
    lin_node_state_t state = linCurrentState->currentNodeState;
    399a:	8a 89       	ldd	r24, Y+18	; 0x12

    switch (state)
    399c:	87 30       	cpi	r24, 0x07	; 7
    399e:	51 f1       	breq	.+84     	; 0x39f4 <LIN_DRV_TimeoutService+0x78>
    39a0:	89 30       	cpi	r24, 0x09	; 9
    39a2:	09 f0       	breq	.+2      	; 0x39a6 <LIN_DRV_TimeoutService+0x2a>
    39a4:	4d c0       	rjmp	.+154    	; 0x3a40 <LIN_DRV_TimeoutService+0xc4>
    {
        /* If the node is SENDING DATA */
        case LIN_NODE_STATE_SEND_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    39a6:	8b 89       	ldd	r24, Y+19	; 0x13
    39a8:	9c 89       	ldd	r25, Y+20	; 0x14
    39aa:	ad 89       	ldd	r26, Y+21	; 0x15
    39ac:	be 89       	ldd	r27, Y+22	; 0x16
    39ae:	89 2b       	or	r24, r25
    39b0:	8a 2b       	or	r24, r26
    39b2:	8b 2b       	or	r24, r27
    39b4:	99 f4       	brne	.+38     	; 0x39dc <LIN_DRV_TimeoutService+0x60>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	8f 8b       	std	Y+23, r24	; 0x17

                if (linCurrentState->isTxBlocking == false)
    39ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    39bc:	81 11       	cpse	r24, r1
    39be:	40 c0       	rjmp	.+128    	; 0x3a40 <LIN_DRV_TimeoutService+0xc4>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    39c0:	ed 85       	ldd	r30, Y+13	; 0x0d
    39c2:	fe 85       	ldd	r31, Y+14	; 0x0e
    39c4:	30 97       	sbiw	r30, 0x00	; 0
    39c6:	21 f0       	breq	.+8      	; 0x39d0 <LIN_DRV_TimeoutService+0x54>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    39c8:	ae 01       	movw	r20, r28
    39ca:	c7 01       	movw	r24, r14
    39cc:	b6 01       	movw	r22, r12
    39ce:	09 95       	icall
                    }

                    /* Clear Tx busy flag */
                    linCurrentState->isTxBusy = false;
    39d0:	18 86       	std	Y+8, r1	; 0x08

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    39d2:	c7 01       	movw	r24, r14
    39d4:	b6 01       	movw	r22, r12
    39d6:	0e 94 15 1b 	call	0x362a	; 0x362a <LIN_DRV_GotoIdleState>
    39da:	32 c0       	rjmp	.+100    	; 0x3a40 <LIN_DRV_TimeoutService+0xc4>
                }
            }
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
    39dc:	8b 89       	ldd	r24, Y+19	; 0x13
    39de:	9c 89       	ldd	r25, Y+20	; 0x14
    39e0:	ad 89       	ldd	r26, Y+21	; 0x15
    39e2:	be 89       	ldd	r27, Y+22	; 0x16
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	a1 09       	sbc	r26, r1
    39e8:	b1 09       	sbc	r27, r1
    39ea:	8b 8b       	std	Y+19, r24	; 0x13
    39ec:	9c 8b       	std	Y+20, r25	; 0x14
    39ee:	ad 8b       	std	Y+21, r26	; 0x15
    39f0:	be 8b       	std	Y+22, r27	; 0x16
    39f2:	26 c0       	rjmp	.+76     	; 0x3a40 <LIN_DRV_TimeoutService+0xc4>

            break;
        /* If the node is RECEIVING DATA */
        case LIN_NODE_STATE_RECV_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    39f4:	8b 89       	ldd	r24, Y+19	; 0x13
    39f6:	9c 89       	ldd	r25, Y+20	; 0x14
    39f8:	ad 89       	ldd	r26, Y+21	; 0x15
    39fa:	be 89       	ldd	r27, Y+22	; 0x16
    39fc:	89 2b       	or	r24, r25
    39fe:	8a 2b       	or	r24, r26
    3a00:	8b 2b       	or	r24, r27
    3a02:	99 f4       	brne	.+38     	; 0x3a2a <LIN_DRV_TimeoutService+0xae>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	8f 8b       	std	Y+23, r24	; 0x17

                /* Check if the reception is non-blocking */
                if (linCurrentState->isRxBlocking == false)
    3a08:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a0a:	81 11       	cpse	r24, r1
    3a0c:	19 c0       	rjmp	.+50     	; 0x3a40 <LIN_DRV_TimeoutService+0xc4>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    3a0e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3a10:	fe 85       	ldd	r31, Y+14	; 0x0e
    3a12:	30 97       	sbiw	r30, 0x00	; 0
    3a14:	21 f0       	breq	.+8      	; 0x3a1e <LIN_DRV_TimeoutService+0xa2>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    3a16:	ae 01       	movw	r20, r28
    3a18:	c7 01       	movw	r24, r14
    3a1a:	b6 01       	movw	r22, r12
    3a1c:	09 95       	icall
                    }

                    /* Clear Rx busy flag */
                    linCurrentState->isRxBusy = false;
    3a1e:	19 86       	std	Y+9, r1	; 0x09

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    3a20:	c7 01       	movw	r24, r14
    3a22:	b6 01       	movw	r22, r12
    3a24:	0e 94 15 1b 	call	0x362a	; 0x362a <LIN_DRV_GotoIdleState>
    3a28:	0b c0       	rjmp	.+22     	; 0x3a40 <LIN_DRV_TimeoutService+0xc4>
                }
            }
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
    3a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2e:	ad 89       	ldd	r26, Y+21	; 0x15
    3a30:	be 89       	ldd	r27, Y+22	; 0x16
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	a1 09       	sbc	r26, r1
    3a36:	b1 09       	sbc	r27, r1
    3a38:	8b 8b       	std	Y+19, r24	; 0x13
    3a3a:	9c 8b       	std	Y+20, r25	; 0x14
    3a3c:	ad 8b       	std	Y+21, r26	; 0x15
    3a3e:	be 8b       	std	Y+22, r27	; 0x16
            break;
        default:
            /* The node state is not SENDING nor RECEIVING data */
            break;
    }
}
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	ff 90       	pop	r15
    3a46:	ef 90       	pop	r14
    3a48:	df 90       	pop	r13
    3a4a:	cf 90       	pop	r12
    3a4c:	08 95       	ret

00003a4e <LIN_DRV_SetTimeoutCounter>:
{
    /* Assert parameters. */
    //DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    3a4e:	66 0f       	add	r22, r22
    3a50:	77 1f       	adc	r23, r23
    3a52:	fb 01       	movw	r30, r22
    3a54:	e2 5f       	subi	r30, 0xF2	; 242
    3a56:	f8 49       	sbci	r31, 0x98	; 152
    3a58:	01 90       	ld	r0, Z+
    3a5a:	f0 81       	ld	r31, Z
    3a5c:	e0 2d       	mov	r30, r0

    /* Clear Timeout Counter Flag */
    linCurrentState->timeoutCounterFlag = false;
    3a5e:	17 8a       	std	Z+23, r1	; 0x17

    /* Set new value for Timeout Counter */
    linCurrentState->timeoutCounter = timeoutValue;
    3a60:	23 8b       	std	Z+19, r18	; 0x13
    3a62:	34 8b       	std	Z+20, r19	; 0x14
    3a64:	45 8b       	std	Z+21, r20	; 0x15
    3a66:	56 8b       	std	Z+22, r21	; 0x16
    3a68:	08 95       	ret

00003a6a <LIN_DRV_GetReceiveStatus>:
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    const lin_state_t * linCurrentState = g_linStatePtr[instance];
    3a6a:	66 0f       	add	r22, r22
    3a6c:	77 1f       	adc	r23, r23
    3a6e:	fb 01       	movw	r30, r22
    3a70:	e2 5f       	subi	r30, 0xF2	; 242
    3a72:	f8 49       	sbci	r31, 0x98	; 152
    3a74:	01 90       	ld	r0, Z+
    3a76:	f0 81       	ld	r31, Z
    3a78:	e0 2d       	mov	r30, r0

    /* Get the number of bytes that is still needed to receive */
    *bytesRemaining = (uint8_t)(linCurrentState->rxSize - linCurrentState->cntByte);
    3a7a:	86 81       	ldd	r24, Z+6	; 0x06
    3a7c:	94 81       	ldd	r25, Z+4	; 0x04
    3a7e:	89 1b       	sub	r24, r25
    3a80:	da 01       	movw	r26, r20
    3a82:	8c 93       	st	X, r24

    /* Return status of the on-going reception */
    if ((linCurrentState->currentEventId == LIN_NO_EVENT) && (*bytesRemaining != 0U))
    3a84:	91 89       	ldd	r25, Z+17	; 0x11
    3a86:	91 11       	cpse	r25, r1
    3a88:	08 c0       	rjmp	.+16     	; 0x3a9a <LIN_DRV_GetReceiveStatus+0x30>
    3a8a:	88 23       	and	r24, r24
    3a8c:	49 f0       	breq	.+18     	; 0x3aa0 <LIN_DRV_GetReceiveStatus+0x36>
    {
        if (linCurrentState->timeoutCounterFlag == false)
    3a8e:	87 89       	ldd	r24, Z+23	; 0x17
    3a90:	81 11       	cpse	r24, r1
    3a92:	09 c0       	rjmp	.+18     	; 0x3aa6 <LIN_DRV_GetReceiveStatus+0x3c>
        {
            retVal = STATUS_BUSY;
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	08 95       	ret
status_t LIN_DRV_GetReceiveStatus(uint32_t instance, uint8_t * bytesRemaining)
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	08 95       	ret
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	08 95       	ret
        {
            retVal = STATUS_BUSY;
        }
        else
        {
            retVal = STATUS_TIMEOUT;
    3aa6:	83 e0       	ldi	r24, 0x03	; 3
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
        }
    }

    return retVal;
    3aaa:	08 95       	ret

00003aac <CallbackHandler>:

    /* Call function LIN_DRV_DisableIRQ to disable interrupts */
    retVal = LIN_DRV_DisableIRQ(lin_hardware_instance);

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
}
    3aac:	4f 92       	push	r4
    3aae:	5f 92       	push	r5
    3ab0:	6f 92       	push	r6
    3ab2:	7f 92       	push	r7
    3ab4:	8f 92       	push	r8
    3ab6:	9f 92       	push	r9
    3ab8:	af 92       	push	r10
    3aba:	bf 92       	push	r11
    3abc:	cf 92       	push	r12
    3abe:	df 92       	push	r13
    3ac0:	ef 92       	push	r14
    3ac2:	ff 92       	push	r15
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	cf 93       	push	r28
    3aca:	df 93       	push	r29
    3acc:	1f 92       	push	r1
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	da 01       	movw	r26, r20
    3ad4:	1f 96       	adiw	r26, 0x0f	; 15
    3ad6:	cc 90       	ld	r12, X
    3ad8:	1f 97       	sbiw	r26, 0x0f	; 15
    3ada:	19 82       	std	Y+1, r1	; 0x01
    3adc:	fb 01       	movw	r30, r22
    3ade:	ec 53       	subi	r30, 0x3C	; 60
    3ae0:	fc 49       	sbci	r31, 0x9C	; 156
    3ae2:	d0 80       	ld	r13, Z
    3ae4:	ed 2c       	mov	r14, r13
    3ae6:	f1 2c       	mov	r15, r1
    3ae8:	51 96       	adiw	r26, 0x11	; 17
    3aea:	ec 91       	ld	r30, X
    3aec:	4e 2e       	mov	r4, r30
    3aee:	51 2c       	mov	r5, r1
    3af0:	bd e0       	ldi	r27, 0x0D	; 13
    3af2:	4b 16       	cp	r4, r27
    3af4:	51 04       	cpc	r5, r1
    3af6:	08 f0       	brcs	.+2      	; 0x3afa <CallbackHandler+0x4e>
    3af8:	82 c0       	rjmp	.+260    	; 0x3bfe <CallbackHandler+0x152>
    3afa:	8a 01       	movw	r16, r20
    3afc:	4b 01       	movw	r8, r22
    3afe:	5c 01       	movw	r10, r24
    3b00:	f2 01       	movw	r30, r4
    3b02:	e6 57       	subi	r30, 0x76	; 118
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__tablejump2__>
    3b0a:	4c 2d       	mov	r20, r12
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	8d 2d       	mov	r24, r13
    3b10:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3b14:	f7 01       	movw	r30, r14
    3b16:	e2 95       	swap	r30
    3b18:	f2 95       	swap	r31
    3b1a:	f0 7f       	andi	r31, 0xF0	; 240
    3b1c:	fe 27       	eor	r31, r30
    3b1e:	e0 7f       	andi	r30, 0xF0	; 240
    3b20:	fe 27       	eor	r31, r30
    3b22:	e5 5e       	subi	r30, 0xE5	; 229
    3b24:	f8 49       	sbci	r31, 0x98	; 152
    3b26:	26 85       	ldd	r18, Z+14	; 0x0e
    3b28:	37 85       	ldd	r19, Z+15	; 0x0f
    3b2a:	f7 01       	movw	r30, r14
    3b2c:	ee 0f       	add	r30, r30
    3b2e:	ff 1f       	adc	r31, r31
    3b30:	e5 5d       	subi	r30, 0xD5	; 213
    3b32:	f8 49       	sbci	r31, 0x98	; 152
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	82 0f       	add	r24, r18
    3b3a:	93 1f       	adc	r25, r19
    3b3c:	26 e1       	ldi	r18, 0x16	; 22
    3b3e:	2e 9d       	mul	r18, r14
    3b40:	f0 01       	movw	r30, r0
    3b42:	2f 9d       	mul	r18, r15
    3b44:	f0 0d       	add	r31, r0
    3b46:	11 24       	eor	r1, r1
    3b48:	e9 53       	subi	r30, 0x39	; 57
    3b4a:	f8 49       	sbci	r31, 0x98	; 152
    3b4c:	81 8b       	std	Z+17, r24	; 0x11
    3b4e:	92 8b       	std	Z+18, r25	; 0x12
    3b50:	56 c0       	rjmp	.+172    	; 0x3bfe <CallbackHandler+0x152>
    3b52:	4c 2d       	mov	r20, r12
    3b54:	63 e0       	ldi	r22, 0x03	; 3
    3b56:	8d 2d       	mov	r24, r13
    3b58:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3b5c:	50 c0       	rjmp	.+160    	; 0x3bfe <CallbackHandler+0x152>
    3b5e:	4c 2d       	mov	r20, r12
    3b60:	61 e0       	ldi	r22, 0x01	; 1
    3b62:	8d 2d       	mov	r24, r13
    3b64:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3b68:	4a c0       	rjmp	.+148    	; 0x3bfe <CallbackHandler+0x152>
    3b6a:	4c 2d       	mov	r20, r12
    3b6c:	62 e0       	ldi	r22, 0x02	; 2
    3b6e:	8d 2d       	mov	r24, r13
    3b70:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3b74:	44 c0       	rjmp	.+136    	; 0x3bfe <CallbackHandler+0x152>
    3b76:	4c 2d       	mov	r20, r12
    3b78:	65 e0       	ldi	r22, 0x05	; 5
    3b7a:	8d 2d       	mov	r24, r13
    3b7c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3b80:	3e c0       	rjmp	.+124    	; 0x3bfe <CallbackHandler+0x152>
    3b82:	4c 2d       	mov	r20, r12
    3b84:	66 e0       	ldi	r22, 0x06	; 6
    3b86:	8d 2d       	mov	r24, r13
    3b88:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3b8c:	38 c0       	rjmp	.+112    	; 0x3bfe <CallbackHandler+0x152>
    3b8e:	4c 2d       	mov	r20, r12
    3b90:	64 e0       	ldi	r22, 0x04	; 4
    3b92:	8d 2d       	mov	r24, r13
    3b94:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3b98:	32 c0       	rjmp	.+100    	; 0x3bfe <CallbackHandler+0x152>
    3b9a:	f7 01       	movw	r30, r14
    3b9c:	e2 95       	swap	r30
    3b9e:	f2 95       	swap	r31
    3ba0:	f0 7f       	andi	r31, 0xF0	; 240
    3ba2:	fe 27       	eor	r31, r30
    3ba4:	e0 7f       	andi	r30, 0xF0	; 240
    3ba6:	fe 27       	eor	r31, r30
    3ba8:	e5 5e       	subi	r30, 0xE5	; 229
    3baa:	f8 49       	sbci	r31, 0x98	; 152
    3bac:	86 85       	ldd	r24, Z+14	; 0x0e
    3bae:	97 85       	ldd	r25, Z+15	; 0x0f
    3bb0:	26 e1       	ldi	r18, 0x16	; 22
    3bb2:	2e 9d       	mul	r18, r14
    3bb4:	f0 01       	movw	r30, r0
    3bb6:	2f 9d       	mul	r18, r15
    3bb8:	f0 0d       	add	r31, r0
    3bba:	11 24       	eor	r1, r1
    3bbc:	e9 53       	subi	r30, 0x39	; 57
    3bbe:	f8 49       	sbci	r31, 0x98	; 152
    3bc0:	81 8b       	std	Z+17, r24	; 0x11
    3bc2:	92 8b       	std	Z+18, r25	; 0x12
    3bc4:	1c c0       	rjmp	.+56     	; 0x3bfe <CallbackHandler+0x152>
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	f7 01       	movw	r30, r14
    3bca:	e6 5e       	subi	r30, 0xE6	; 230
    3bcc:	f8 49       	sbci	r31, 0x98	; 152
    3bce:	80 83       	st	Z, r24
    3bd0:	16 c0       	rjmp	.+44     	; 0x3bfe <CallbackHandler+0x152>
    3bd2:	fa 01       	movw	r30, r20
    3bd4:	87 89       	ldd	r24, Z+23	; 0x17
    3bd6:	88 23       	and	r24, r24
    3bd8:	91 f0       	breq	.+36     	; 0x3bfe <CallbackHandler+0x152>
    3bda:	ae 01       	movw	r20, r28
    3bdc:	4f 5f       	subi	r20, 0xFF	; 255
    3bde:	5f 4f       	sbci	r21, 0xFF	; 255
    3be0:	c5 01       	movw	r24, r10
    3be2:	b4 01       	movw	r22, r8
    3be4:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <LIN_DRV_GetReceiveStatus>
    3be8:	d8 01       	movw	r26, r16
    3bea:	16 96       	adiw	r26, 0x06	; 6
    3bec:	9c 91       	ld	r25, X
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	89 17       	cp	r24, r25
    3bf2:	28 f4       	brcc	.+10     	; 0x3bfe <CallbackHandler+0x152>
    3bf4:	4c 2d       	mov	r20, r12
    3bf6:	67 e0       	ldi	r22, 0x07	; 7
    3bf8:	8d 2d       	mov	r24, r13
    3bfa:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>
    3bfe:	8c e1       	ldi	r24, 0x1C	; 28
    3c00:	8e 9d       	mul	r24, r14
    3c02:	f0 01       	movw	r30, r0
    3c04:	8f 9d       	mul	r24, r15
    3c06:	f0 0d       	add	r31, r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	e8 5b       	subi	r30, 0xB8	; 184
    3c0c:	fc 49       	sbci	r31, 0x9C	; 156
    3c0e:	84 85       	ldd	r24, Z+12	; 0x0c
    3c10:	95 85       	ldd	r25, Z+13	; 0x0d
    3c12:	26 e1       	ldi	r18, 0x16	; 22
    3c14:	2e 9d       	mul	r18, r14
    3c16:	f0 01       	movw	r30, r0
    3c18:	2f 9d       	mul	r18, r15
    3c1a:	f0 0d       	add	r31, r0
    3c1c:	11 24       	eor	r1, r1
    3c1e:	e9 53       	subi	r30, 0x39	; 57
    3c20:	f8 49       	sbci	r31, 0x98	; 152
    3c22:	83 8b       	std	Z+19, r24	; 0x13
    3c24:	94 8b       	std	Z+20, r25	; 0x14
    3c26:	0f 90       	pop	r0
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	ff 90       	pop	r15
    3c32:	ef 90       	pop	r14
    3c34:	df 90       	pop	r13
    3c36:	cf 90       	pop	r12
    3c38:	bf 90       	pop	r11
    3c3a:	af 90       	pop	r10
    3c3c:	9f 90       	pop	r9
    3c3e:	8f 90       	pop	r8
    3c40:	7f 90       	pop	r7
    3c42:	6f 90       	pop	r6
    3c44:	5f 90       	pop	r5
    3c46:	4f 90       	pop	r4
    3c48:	08 95       	ret

00003c4a <lin_process_parity>:
    3c4a:	0e 94 9a 19 	call	0x3334	; 0x3334 <LIN_DRV_ProcessParity>
    3c4e:	08 95       	ret

00003c50 <lin_lld_init>:
    3c50:	3f 92       	push	r3
    3c52:	4f 92       	push	r4
    3c54:	5f 92       	push	r5
    3c56:	6f 92       	push	r6
    3c58:	7f 92       	push	r7
    3c5a:	8f 92       	push	r8
    3c5c:	9f 92       	push	r9
    3c5e:	af 92       	push	r10
    3c60:	bf 92       	push	r11
    3c62:	ef 92       	push	r14
    3c64:	ff 92       	push	r15
    3c66:	0f 93       	push	r16
    3c68:	1f 93       	push	r17
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	26 97       	sbiw	r28, 0x06	; 6
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	08 2f       	mov	r16, r24
    3c7a:	10 e0       	ldi	r17, 0x00	; 0
    3c7c:	98 01       	movw	r18, r16
    3c7e:	22 0f       	add	r18, r18
    3c80:	33 1f       	adc	r19, r19
    3c82:	c8 01       	movw	r24, r16
    3c84:	88 0f       	add	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	88 0f       	add	r24, r24
    3c8a:	99 1f       	adc	r25, r25
    3c8c:	88 0f       	add	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	82 0f       	add	r24, r18
    3c92:	93 1f       	adc	r25, r19
    3c94:	80 5f       	subi	r24, 0xF0	; 240
    3c96:	98 49       	sbci	r25, 0x98	; 152
    3c98:	26 e1       	ldi	r18, 0x16	; 22
    3c9a:	20 9f       	mul	r18, r16
    3c9c:	f0 01       	movw	r30, r0
    3c9e:	21 9f       	mul	r18, r17
    3ca0:	f0 0d       	add	r31, r0
    3ca2:	11 24       	eor	r1, r1
    3ca4:	e9 53       	subi	r30, 0x39	; 57
    3ca6:	f8 49       	sbci	r31, 0x98	; 152
    3ca8:	82 83       	std	Z+2, r24	; 0x02
    3caa:	93 83       	std	Z+3, r25	; 0x03
    3cac:	f8 01       	movw	r30, r16
    3cae:	ee 0f       	add	r30, r30
    3cb0:	ff 1f       	adc	r31, r31
    3cb2:	ee 0f       	add	r30, r30
    3cb4:	ff 1f       	adc	r31, r31
    3cb6:	e0 54       	subi	r30, 0x40	; 64
    3cb8:	fc 49       	sbci	r31, 0x9C	; 156
    3cba:	80 80       	ld	r8, Z
    3cbc:	91 80       	ldd	r9, Z+1	; 0x01
    3cbe:	a2 80       	ldd	r10, Z+2	; 0x02
    3cc0:	b3 80       	ldd	r11, Z+3	; 0x03
    3cc2:	8c e1       	ldi	r24, 0x1C	; 28
    3cc4:	80 9f       	mul	r24, r16
    3cc6:	f0 01       	movw	r30, r0
    3cc8:	81 9f       	mul	r24, r17
    3cca:	f0 0d       	add	r31, r0
    3ccc:	11 24       	eor	r1, r1
    3cce:	e8 5b       	subi	r30, 0xB8	; 184
    3cd0:	fc 49       	sbci	r31, 0x9C	; 156
    3cd2:	e4 88       	ldd	r14, Z+20	; 0x14
    3cd4:	f5 88       	ldd	r15, Z+21	; 0x15
    3cd6:	f7 01       	movw	r30, r14
    3cd8:	85 81       	ldd	r24, Z+5	; 0x05
    3cda:	88 23       	and	r24, r24
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <lin_lld_init+0x90>
    3cde:	44 c0       	rjmp	.+136    	; 0x3d68 <lin_lld_init+0x118>
    3ce0:	f8 01       	movw	r30, r16
    3ce2:	ee 0f       	add	r30, r30
    3ce4:	ff 1f       	adc	r31, r31
    3ce6:	e5 5d       	subi	r30, 0xD5	; 213
    3ce8:	f8 49       	sbci	r31, 0x98	; 152
    3cea:	84 e1       	ldi	r24, 0x14	; 20
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	80 83       	st	Z, r24
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	ff 24       	eor	r15, r15
    3cf4:	f3 94       	inc	r15
    3cf6:	34 c0       	rjmp	.+104    	; 0x3d60 <lin_lld_init+0x110>
    3cf8:	8f 2d       	mov	r24, r15
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9c 01       	movw	r18, r24
    3cfe:	21 50       	subi	r18, 0x01	; 1
    3d00:	31 09       	sbc	r19, r1
    3d02:	29 83       	std	Y+1, r18	; 0x01
    3d04:	3a 83       	std	Y+2, r19	; 0x02
    3d06:	01 96       	adiw	r24, 0x01	; 1
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	dc 01       	movw	r26, r24
    3d0e:	aa 0f       	add	r26, r26
    3d10:	bb 1f       	adc	r27, r27
    3d12:	aa 0f       	add	r26, r26
    3d14:	bb 1f       	adc	r27, r27
    3d16:	aa 0f       	add	r26, r26
    3d18:	bb 1f       	adc	r27, r27
    3d1a:	a8 1b       	sub	r26, r24
    3d1c:	b9 0b       	sbc	r27, r25
    3d1e:	20 e4       	ldi	r18, 0x40	; 64
    3d20:	32 e4       	ldi	r19, 0x42	; 66
    3d22:	4f e0       	ldi	r20, 0x0F	; 15
    3d24:	50 e0       	ldi	r21, 0x00	; 0
    3d26:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	3f e9       	ldi	r19, 0x9F	; 159
    3d2e:	44 e2       	ldi	r20, 0x24	; 36
    3d30:	50 e0       	ldi	r21, 0x00	; 0
    3d32:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    3d36:	2f 5f       	subi	r18, 0xFF	; 255
    3d38:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3a:	c8 01       	movw	r24, r16
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	88 0f       	add	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	49 81       	ldd	r20, Y+1	; 0x01
    3d4a:	5a 81       	ldd	r21, Y+2	; 0x02
    3d4c:	48 0f       	add	r20, r24
    3d4e:	59 1f       	adc	r21, r25
    3d50:	44 0f       	add	r20, r20
    3d52:	55 1f       	adc	r21, r21
    3d54:	45 5e       	subi	r20, 0xE5	; 229
    3d56:	58 49       	sbci	r21, 0x98	; 152
    3d58:	fa 01       	movw	r30, r20
    3d5a:	20 83       	st	Z, r18
    3d5c:	31 83       	std	Z+1, r19	; 0x01
    3d5e:	f3 94       	inc	r15
    3d60:	f8 e0       	ldi	r31, 0x08	; 8
    3d62:	ff 15       	cp	r31, r15
    3d64:	48 f6       	brcc	.-110    	; 0x3cf8 <lin_lld_init+0xa8>
    3d66:	66 c0       	rjmp	.+204    	; 0x3e34 <lin_lld_init+0x1e4>
    3d68:	f7 01       	movw	r30, r14
    3d6a:	20 81       	ld	r18, Z
    3d6c:	31 81       	ldd	r19, Z+1	; 0x01
    3d6e:	42 81       	ldd	r20, Z+2	; 0x02
    3d70:	53 81       	ldd	r21, Z+3	; 0x03
    3d72:	a8 ee       	ldi	r26, 0xE8	; 232
    3d74:	b3 e0       	ldi	r27, 0x03	; 3
    3d76:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    3d7a:	9b 01       	movw	r18, r22
    3d7c:	ac 01       	movw	r20, r24
    3d7e:	60 e8       	ldi	r22, 0x80	; 128
    3d80:	71 e5       	ldi	r23, 0x51	; 81
    3d82:	86 ed       	ldi	r24, 0xD6	; 214
    3d84:	92 e0       	ldi	r25, 0x02	; 2
    3d86:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    3d8a:	2f 5f       	subi	r18, 0xFF	; 255
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	f8 01       	movw	r30, r16
    3d90:	ee 0f       	add	r30, r30
    3d92:	ff 1f       	adc	r31, r31
    3d94:	e5 5d       	subi	r30, 0xD5	; 213
    3d96:	f8 49       	sbci	r31, 0x98	; 152
    3d98:	20 83       	st	Z, r18
    3d9a:	31 83       	std	Z+1, r19	; 0x01
    3d9c:	33 24       	eor	r3, r3
    3d9e:	33 94       	inc	r3
    3da0:	45 c0       	rjmp	.+138    	; 0x3e2c <lin_lld_init+0x1dc>
    3da2:	83 2d       	mov	r24, r3
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	9c 01       	movw	r18, r24
    3da8:	21 50       	subi	r18, 0x01	; 1
    3daa:	31 09       	sbc	r19, r1
    3dac:	2d 83       	std	Y+5, r18	; 0x05
    3dae:	3e 83       	std	Y+6, r19	; 0x06
    3db0:	f7 01       	movw	r30, r14
    3db2:	40 80       	ld	r4, Z
    3db4:	51 80       	ldd	r5, Z+1	; 0x01
    3db6:	62 80       	ldd	r6, Z+2	; 0x02
    3db8:	73 80       	ldd	r7, Z+3	; 0x03
    3dba:	01 96       	adiw	r24, 0x01	; 1
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	aa 0f       	add	r26, r26
    3dc4:	bb 1f       	adc	r27, r27
    3dc6:	aa 0f       	add	r26, r26
    3dc8:	bb 1f       	adc	r27, r27
    3dca:	aa 0f       	add	r26, r26
    3dcc:	bb 1f       	adc	r27, r27
    3dce:	a8 1b       	sub	r26, r24
    3dd0:	b9 0b       	sbc	r27, r25
    3dd2:	20 e4       	ldi	r18, 0x40	; 64
    3dd4:	32 e4       	ldi	r19, 0x42	; 66
    3dd6:	4f e0       	ldi	r20, 0x0F	; 15
    3dd8:	50 e0       	ldi	r21, 0x00	; 0
    3dda:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    3dde:	69 83       	std	Y+1, r22	; 0x01
    3de0:	7a 83       	std	Y+2, r23	; 0x02
    3de2:	8b 83       	std	Y+3, r24	; 0x03
    3de4:	9c 83       	std	Y+4, r25	; 0x04
    3de6:	a8 ee       	ldi	r26, 0xE8	; 232
    3de8:	b3 e0       	ldi	r27, 0x03	; 3
    3dea:	a3 01       	movw	r20, r6
    3dec:	92 01       	movw	r18, r4
    3dee:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    3df2:	9b 01       	movw	r18, r22
    3df4:	ac 01       	movw	r20, r24
    3df6:	69 81       	ldd	r22, Y+1	; 0x01
    3df8:	7a 81       	ldd	r23, Y+2	; 0x02
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfe:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    3e02:	2f 5f       	subi	r18, 0xFF	; 255
    3e04:	3f 4f       	sbci	r19, 0xFF	; 255
    3e06:	c8 01       	movw	r24, r16
    3e08:	88 0f       	add	r24, r24
    3e0a:	99 1f       	adc	r25, r25
    3e0c:	88 0f       	add	r24, r24
    3e0e:	99 1f       	adc	r25, r25
    3e10:	88 0f       	add	r24, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	4d 81       	ldd	r20, Y+5	; 0x05
    3e16:	5e 81       	ldd	r21, Y+6	; 0x06
    3e18:	48 0f       	add	r20, r24
    3e1a:	59 1f       	adc	r21, r25
    3e1c:	44 0f       	add	r20, r20
    3e1e:	55 1f       	adc	r21, r21
    3e20:	45 5e       	subi	r20, 0xE5	; 229
    3e22:	58 49       	sbci	r21, 0x98	; 152
    3e24:	fa 01       	movw	r30, r20
    3e26:	20 83       	st	Z, r18
    3e28:	31 83       	std	Z+1, r19	; 0x01
    3e2a:	33 94       	inc	r3
    3e2c:	f8 e0       	ldi	r31, 0x08	; 8
    3e2e:	f3 15       	cp	r31, r3
    3e30:	08 f0       	brcs	.+2      	; 0x3e34 <lin_lld_init+0x1e4>
    3e32:	b7 cf       	rjmp	.-146    	; 0x3da2 <lin_lld_init+0x152>
    3e34:	f8 01       	movw	r30, r16
    3e36:	e2 95       	swap	r30
    3e38:	f2 95       	swap	r31
    3e3a:	f0 7f       	andi	r31, 0xF0	; 240
    3e3c:	fe 27       	eor	r31, r30
    3e3e:	e0 7f       	andi	r30, 0xF0	; 240
    3e40:	fe 27       	eor	r31, r30
    3e42:	e5 5e       	subi	r30, 0xE5	; 229
    3e44:	f8 49       	sbci	r31, 0x98	; 152
    3e46:	86 85       	ldd	r24, Z+14	; 0x0e
    3e48:	97 85       	ldd	r25, Z+15	; 0x0f
    3e4a:	26 e1       	ldi	r18, 0x16	; 22
    3e4c:	20 9f       	mul	r18, r16
    3e4e:	d0 01       	movw	r26, r0
    3e50:	21 9f       	mul	r18, r17
    3e52:	b0 0d       	add	r27, r0
    3e54:	11 24       	eor	r1, r1
    3e56:	a9 53       	subi	r26, 0x39	; 57
    3e58:	b8 49       	sbci	r27, 0x98	; 152
    3e5a:	51 96       	adiw	r26, 0x11	; 17
    3e5c:	8d 93       	st	X+, r24
    3e5e:	9c 93       	st	X, r25
    3e60:	52 97       	sbiw	r26, 0x12	; 18
    3e62:	8c e1       	ldi	r24, 0x1C	; 28
    3e64:	80 9f       	mul	r24, r16
    3e66:	f0 01       	movw	r30, r0
    3e68:	81 9f       	mul	r24, r17
    3e6a:	f0 0d       	add	r31, r0
    3e6c:	11 24       	eor	r1, r1
    3e6e:	e8 5b       	subi	r30, 0xB8	; 184
    3e70:	fc 49       	sbci	r31, 0x9C	; 156
    3e72:	84 85       	ldd	r24, Z+12	; 0x0c
    3e74:	95 85       	ldd	r25, Z+13	; 0x0d
    3e76:	53 96       	adiw	r26, 0x13	; 19
    3e78:	8d 93       	st	X+, r24
    3e7a:	9c 93       	st	X, r25
    3e7c:	54 97       	sbiw	r26, 0x14	; 20
    3e7e:	8e e1       	ldi	r24, 0x1E	; 30
    3e80:	80 9f       	mul	r24, r16
    3e82:	90 01       	movw	r18, r0
    3e84:	81 9f       	mul	r24, r17
    3e86:	30 0d       	add	r19, r0
    3e88:	11 24       	eor	r1, r1
    3e8a:	23 5d       	subi	r18, 0xD3	; 211
    3e8c:	38 49       	sbci	r19, 0x98	; 152
    3e8e:	44 89       	ldd	r20, Z+20	; 0x14
    3e90:	55 89       	ldd	r21, Z+21	; 0x15
    3e92:	c5 01       	movw	r24, r10
    3e94:	b4 01       	movw	r22, r8
    3e96:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LIN_DRV_Init>
    3e9a:	89 83       	std	Y+1, r24	; 0x01
    3e9c:	9a 83       	std	Y+2, r25	; 0x02
    3e9e:	89 2b       	or	r24, r25
    3ea0:	51 f4       	brne	.+20     	; 0x3eb6 <lin_lld_init+0x266>
    3ea2:	46 e5       	ldi	r20, 0x56	; 86
    3ea4:	5d e1       	ldi	r21, 0x1D	; 29
    3ea6:	c5 01       	movw	r24, r10
    3ea8:	b4 01       	movw	r22, r8
    3eaa:	0e 94 ba 1b 	call	0x3774	; 0x3774 <LIN_DRV_InstallCallback>
    3eae:	f8 01       	movw	r30, r16
    3eb0:	e6 5e       	subi	r30, 0xE6	; 230
    3eb2:	f8 49       	sbci	r31, 0x98	; 152
    3eb4:	10 82       	st	Z, r1
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	29 81       	ldd	r18, Y+1	; 0x01
    3eba:	3a 81       	ldd	r19, Y+2	; 0x02
    3ebc:	23 2b       	or	r18, r19
    3ebe:	09 f4       	brne	.+2      	; 0x3ec2 <lin_lld_init+0x272>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	26 96       	adiw	r28, 0x06	; 6
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	ff 90       	pop	r15
    3ed2:	ef 90       	pop	r14
    3ed4:	bf 90       	pop	r11
    3ed6:	af 90       	pop	r10
    3ed8:	9f 90       	pop	r9
    3eda:	8f 90       	pop	r8
    3edc:	7f 90       	pop	r7
    3ede:	6f 90       	pop	r6
    3ee0:	5f 90       	pop	r5
    3ee2:	4f 90       	pop	r4
    3ee4:	3f 90       	pop	r3
    3ee6:	08 95       	ret

00003ee8 <lin_lld_ignore_response>:

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    3ee8:	e8 2f       	mov	r30, r24
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	ee 0f       	add	r30, r30
    3eee:	ff 1f       	adc	r31, r31
    3ef0:	ee 0f       	add	r30, r30
    3ef2:	ff 1f       	adc	r31, r31
    3ef4:	e0 54       	subi	r30, 0x40	; 64
    3ef6:	fc 49       	sbci	r31, 0x9C	; 156
    3ef8:	60 81       	ld	r22, Z
    3efa:	71 81       	ldd	r23, Z+1	; 0x01
    3efc:	82 81       	ldd	r24, Z+2	; 0x02
    3efe:	93 81       	ldd	r25, Z+3	; 0x03

    /* Abort frame data transferring */
    retVal = LIN_DRV_AbortTransferData(lin_hardware_instance);
    3f00:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LIN_DRV_AbortTransferData>

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    3f04:	89 2b       	or	r24, r25
    3f06:	11 f4       	brne	.+4      	; 0x3f0c <lin_lld_ignore_response+0x24>
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	08 95       	ret
    3f0c:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f0e:	08 95       	ret

00003f10 <lin_lld_set_low_power_mode>:

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    3f10:	e8 2f       	mov	r30, r24
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	ee 0f       	add	r30, r30
    3f16:	ff 1f       	adc	r31, r31
    3f18:	ee 0f       	add	r30, r30
    3f1a:	ff 1f       	adc	r31, r31
    3f1c:	e0 54       	subi	r30, 0x40	; 64
    3f1e:	fc 49       	sbci	r31, 0x9C	; 156
    3f20:	60 81       	ld	r22, Z
    3f22:	71 81       	ldd	r23, Z+1	; 0x01
    3f24:	82 81       	ldd	r24, Z+2	; 0x02
    3f26:	93 81       	ldd	r25, Z+3	; 0x03

    /* Put current node to sleep mode */
    retVal = LIN_DRV_GoToSleepMode(lin_hardware_instance);
    3f28:	0e 94 99 1b 	call	0x3732	; 0x3732 <LIN_DRV_GoToSleepMode>

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    3f2c:	89 2b       	or	r24, r25
    3f2e:	11 f4       	brne	.+4      	; 0x3f34 <lin_lld_set_low_power_mode+0x24>
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	08 95       	ret
    3f34:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f36:	08 95       	ret

00003f38 <lin_lld_set_response>:
 *
 * Implements    : lin_lld_set_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_set_response(l_ifc_handle iii,
                          l_u8 response_length)
{
    3f38:	cf 92       	push	r12
    3f3a:	df 92       	push	r13
    3f3c:	ef 92       	push	r14
    3f3e:	ff 92       	push	r15
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	cf 93       	push	r28
    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    const l_u8 * buffer;

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    3f46:	9f ef       	ldi	r25, 0xFF	; 255
    3f48:	96 0f       	add	r25, r22
    3f4a:	98 30       	cpi	r25, 0x08	; 8
    3f4c:	b0 f5       	brcc	.+108    	; 0x3fba <lin_lld_set_response+0x82>
    3f4e:	c6 2f       	mov	r28, r22
    {
        buffer = g_lin_protocol_state_array[iii].response_buffer_ptr;
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	26 e1       	ldi	r18, 0x16	; 22
    3f54:	28 9f       	mul	r18, r24
    3f56:	f0 01       	movw	r30, r0
    3f58:	29 9f       	mul	r18, r25
    3f5a:	f0 0d       	add	r31, r0
    3f5c:	11 24       	eor	r1, r1
    3f5e:	e9 53       	subi	r30, 0x39	; 57
    3f60:	f8 49       	sbci	r31, 0x98	; 152
    3f62:	02 81       	ldd	r16, Z+2	; 0x02
    3f64:	13 81       	ldd	r17, Z+3	; 0x03
        /* Get the LIN hardware instance number */
        lin_hardware_instance = g_lin_virtual_ifc[iii];
    3f66:	dc 01       	movw	r26, r24
    3f68:	aa 0f       	add	r26, r26
    3f6a:	bb 1f       	adc	r27, r27
    3f6c:	aa 0f       	add	r26, r26
    3f6e:	bb 1f       	adc	r27, r27
    3f70:	a0 54       	subi	r26, 0x40	; 64
    3f72:	bc 49       	sbci	r27, 0x9C	; 156
    3f74:	cd 90       	ld	r12, X+
    3f76:	dd 90       	ld	r13, X+
    3f78:	ed 90       	ld	r14, X+
    3f7a:	fc 90       	ld	r15, X

        /* Put response length into buffer */
        g_lin_protocol_state_array[iii].response_length = response_length;
    3f7c:	64 83       	std	Z+4, r22	; 0x04

        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    3f7e:	e6 2f       	mov	r30, r22
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	31 97       	sbiw	r30, 0x01	; 1
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	88 0f       	add	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	e8 0f       	add	r30, r24
    3f92:	f9 1f       	adc	r31, r25
    3f94:	ee 0f       	add	r30, r30
    3f96:	ff 1f       	adc	r31, r31
    3f98:	e5 5e       	subi	r30, 0xE5	; 229
    3f9a:	f8 49       	sbci	r31, 0x98	; 152
    3f9c:	20 81       	ld	r18, Z
    3f9e:	31 81       	ldd	r19, Z+1	; 0x01
    3fa0:	40 e0       	ldi	r20, 0x00	; 0
    3fa2:	50 e0       	ldi	r21, 0x00	; 0
    3fa4:	c7 01       	movw	r24, r14
    3fa6:	b6 01       	movw	r22, r12
    3fa8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <LIN_DRV_SetTimeoutCounter>

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    3fac:	2c 2f       	mov	r18, r28
    3fae:	a8 01       	movw	r20, r16
    3fb0:	c7 01       	movw	r24, r14
    3fb2:	b6 01       	movw	r22, r12
    3fb4:	0e 94 49 1c 	call	0x3892	; 0x3892 <LIN_DRV_SendFrameData>
    3fb8:	02 c0       	rjmp	.+4      	; 0x3fbe <lin_lld_set_response+0x86>
                          l_u8 response_length)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	90 e0       	ldi	r25, 0x00	; 0

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    3fbe:	89 2b       	or	r24, r25
    3fc0:	11 f4       	brne	.+4      	; 0x3fc6 <lin_lld_set_response+0x8e>
    3fc2:	80 e0       	ldi	r24, 0x00	; 0
    3fc4:	01 c0       	rjmp	.+2      	; 0x3fc8 <lin_lld_set_response+0x90>
    3fc6:	8f ef       	ldi	r24, 0xFF	; 255
}
    3fc8:	cf 91       	pop	r28
    3fca:	1f 91       	pop	r17
    3fcc:	0f 91       	pop	r16
    3fce:	ff 90       	pop	r15
    3fd0:	ef 90       	pop	r14
    3fd2:	df 90       	pop	r13
    3fd4:	cf 90       	pop	r12
    3fd6:	08 95       	ret

00003fd8 <lin_lld_rx_response>:
 *
 * Implements    : lin_lld_rx_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_rx_response(l_ifc_handle iii,
                         l_u8 response_length)
{
    3fd8:	cf 92       	push	r12
    3fda:	df 92       	push	r13
    3fdc:	ef 92       	push	r14
    3fde:	ff 92       	push	r15
    3fe0:	1f 93       	push	r17
    3fe2:	cf 93       	push	r28
    3fe4:	df 93       	push	r29

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    3fe6:	c8 2f       	mov	r28, r24
    3fe8:	d0 e0       	ldi	r29, 0x00	; 0
    3fea:	fe 01       	movw	r30, r28
    3fec:	ee 0f       	add	r30, r30
    3fee:	ff 1f       	adc	r31, r31
    3ff0:	ee 0f       	add	r30, r30
    3ff2:	ff 1f       	adc	r31, r31
    3ff4:	e0 54       	subi	r30, 0x40	; 64
    3ff6:	fc 49       	sbci	r31, 0x9C	; 156
    3ff8:	c0 80       	ld	r12, Z
    3ffa:	d1 80       	ldd	r13, Z+1	; 0x01
    3ffc:	e2 80       	ldd	r14, Z+2	; 0x02
    3ffe:	f3 80       	ldd	r15, Z+3	; 0x03

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    4000:	8f ef       	ldi	r24, 0xFF	; 255
    4002:	86 0f       	add	r24, r22
    4004:	88 30       	cpi	r24, 0x08	; 8
    4006:	48 f5       	brcc	.+82     	; 0x405a <lin_lld_rx_response+0x82>
    4008:	16 2f       	mov	r17, r22
    {
        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    400a:	e6 2f       	mov	r30, r22
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	31 97       	sbiw	r30, 0x01	; 1
    4010:	ce 01       	movw	r24, r28
    4012:	88 0f       	add	r24, r24
    4014:	99 1f       	adc	r25, r25
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	e8 0f       	add	r30, r24
    4020:	f9 1f       	adc	r31, r25
    4022:	ee 0f       	add	r30, r30
    4024:	ff 1f       	adc	r31, r31
    4026:	e5 5e       	subi	r30, 0xE5	; 229
    4028:	f8 49       	sbci	r31, 0x98	; 152
    402a:	20 81       	ld	r18, Z
    402c:	31 81       	ldd	r19, Z+1	; 0x01
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	c7 01       	movw	r24, r14
    4034:	b6 01       	movw	r22, r12
    4036:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <LIN_DRV_SetTimeoutCounter>

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    403a:	86 e1       	ldi	r24, 0x16	; 22
    403c:	8c 9f       	mul	r24, r28
    403e:	f0 01       	movw	r30, r0
    4040:	8d 9f       	mul	r24, r29
    4042:	f0 0d       	add	r31, r0
    4044:	11 24       	eor	r1, r1
    4046:	e9 53       	subi	r30, 0x39	; 57
    4048:	f8 49       	sbci	r31, 0x98	; 152
    404a:	42 81       	ldd	r20, Z+2	; 0x02
    404c:	53 81       	ldd	r21, Z+3	; 0x03
    404e:	21 2f       	mov	r18, r17
    4050:	c7 01       	movw	r24, r14
    4052:	b6 01       	movw	r22, r12
    4054:	0e 94 94 1c 	call	0x3928	; 0x3928 <LIN_DRV_ReceiveFrameData>
    4058:	02 c0       	rjmp	.+4      	; 0x405e <lin_lld_rx_response+0x86>
                         l_u8 response_length)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	90 e0       	ldi	r25, 0x00	; 0

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    405e:	89 2b       	or	r24, r25
    4060:	11 f4       	brne	.+4      	; 0x4066 <lin_lld_rx_response+0x8e>
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	01 c0       	rjmp	.+2      	; 0x4068 <lin_lld_rx_response+0x90>
    4066:	8f ef       	ldi	r24, 0xFF	; 255
}
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	1f 91       	pop	r17
    406e:	ff 90       	pop	r15
    4070:	ef 90       	pop	r14
    4072:	df 90       	pop	r13
    4074:	cf 90       	pop	r12
    4076:	08 95       	ret

00004078 <lin_lld_timeout_service>:
 * Description   : This is a part of Timer Interrupt Handler.
 *
 * Implements    : lin_lld_timeout_service_Activity
 *END**************************************************************************/
void lin_lld_timeout_service(l_ifc_handle iii)
{
    4078:	4f 92       	push	r4
    407a:	5f 92       	push	r5
    407c:	6f 92       	push	r6
    407e:	7f 92       	push	r7
    4080:	bf 92       	push	r11
    4082:	cf 92       	push	r12
    4084:	df 92       	push	r13
    4086:	ef 92       	push	r14
    4088:	ff 92       	push	r15
    408a:	0f 93       	push	r16
    408c:	1f 93       	push	r17
    408e:	cf 93       	push	r28
    4090:	df 93       	push	r29
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	a2 97       	sbiw	r28, 0x22	; 34
    4098:	cd bf       	out	0x3d, r28	; 61
    409a:	de bf       	out	0x3e, r29	; 62
    409c:	18 2f       	mov	r17, r24
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);
    l_u32 lin_hardware_instance = g_lin_virtual_ifc[iii];
    409e:	e8 2e       	mov	r14, r24
    40a0:	f1 2c       	mov	r15, r1
    40a2:	f7 01       	movw	r30, r14
    40a4:	ee 0f       	add	r30, r30
    40a6:	ff 1f       	adc	r31, r31
    40a8:	ee 0f       	add	r30, r30
    40aa:	ff 1f       	adc	r31, r31
    40ac:	e0 54       	subi	r30, 0x40	; 64
    40ae:	fc 49       	sbci	r31, 0x9C	; 156
    40b0:	40 80       	ld	r4, Z
    40b2:	51 80       	ldd	r5, Z+1	; 0x01
    40b4:	62 80       	ldd	r6, Z+2	; 0x02
    40b6:	73 80       	ldd	r7, Z+3	; 0x03
    lin_state_t linState = s_lin_state_array[iii];
    40b8:	8e e1       	ldi	r24, 0x1E	; 30
    40ba:	8e 9d       	mul	r24, r14
    40bc:	f0 01       	movw	r30, r0
    40be:	8f 9d       	mul	r24, r15
    40c0:	f0 0d       	add	r31, r0
    40c2:	11 24       	eor	r1, r1
    40c4:	e3 5d       	subi	r30, 0xD3	; 211
    40c6:	f8 49       	sbci	r31, 0x98	; 152
    40c8:	de 01       	movw	r26, r28
    40ca:	11 96       	adiw	r26, 0x01	; 1
    40cc:	01 90       	ld	r0, Z+
    40ce:	0d 92       	st	X+, r0
    40d0:	8a 95       	dec	r24
    40d2:	e1 f7       	brne	.-8      	; 0x40cc <lin_lld_timeout_service+0x54>
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    l_u8 index;

    LIN_DRV_TimeoutService(lin_hardware_instance);
    40d4:	c3 01       	movw	r24, r6
    40d6:	b2 01       	movw	r22, r4
    40d8:	0e 94 be 1c 	call	0x397c	; 0x397c <LIN_DRV_TimeoutService>
#if (SUPPORT_PROTOCOL_21 == 1U)
    /* Callback to transport layer to handle N_As and N_Cr timeout for LIN 2.1 and above*/
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
    40dc:	40 e0       	ldi	r20, 0x00	; 0
    40de:	65 e0       	ldi	r22, 0x05	; 5
    40e0:	81 2f       	mov	r24, r17
    40e2:	0e 94 80 28 	call	0x5100	; 0x5100 <lin_tl_callback_handler>
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    40e6:	8b 89       	ldd	r24, Y+19	; 0x13
    40e8:	87 30       	cpi	r24, 0x07	; 7
    40ea:	30 f4       	brcc	.+12     	; 0x40f8 <lin_lld_timeout_service+0x80>
    40ec:	83 30       	cpi	r24, 0x03	; 3
    40ee:	08 f0       	brcs	.+2      	; 0x40f2 <lin_lld_timeout_service+0x7a>
    40f0:	a6 c0       	rjmp	.+332    	; 0x423e <lin_lld_timeout_service+0x1c6>
    40f2:	82 30       	cpi	r24, 0x02	; 2
    40f4:	29 f0       	breq	.+10     	; 0x4100 <lin_lld_timeout_service+0x88>
    40f6:	f9 c0       	rjmp	.+498    	; 0x42ea <lin_lld_timeout_service+0x272>
    40f8:	89 30       	cpi	r24, 0x09	; 9
    40fa:	09 f4       	brne	.+2      	; 0x40fe <lin_lld_timeout_service+0x86>
    40fc:	cc c0       	rjmp	.+408    	; 0x4296 <lin_lld_timeout_service+0x21e>
    40fe:	f5 c0       	rjmp	.+490    	; 0x42ea <lin_lld_timeout_service+0x272>
    {
        case LIN_NODE_STATE_IDLE:
            if (!(prot_state_ptr->idle_timeout_cnt-- > 0U))
    4100:	86 e1       	ldi	r24, 0x16	; 22
    4102:	8e 9d       	mul	r24, r14
    4104:	f0 01       	movw	r30, r0
    4106:	8f 9d       	mul	r24, r15
    4108:	f0 0d       	add	r31, r0
    410a:	11 24       	eor	r1, r1
    410c:	e9 53       	subi	r30, 0x39	; 57
    410e:	f8 49       	sbci	r31, 0x98	; 152
    4110:	83 89       	ldd	r24, Z+19	; 0x13
    4112:	94 89       	ldd	r25, Z+20	; 0x14
    4114:	9c 01       	movw	r18, r24
    4116:	21 50       	subi	r18, 0x01	; 1
    4118:	31 09       	sbc	r19, r1
    411a:	23 8b       	std	Z+19, r18	; 0x13
    411c:	34 8b       	std	Z+20, r19	; 0x14
    411e:	89 2b       	or	r24, r25
    4120:	e9 f4       	brne	.+58     	; 0x415c <lin_lld_timeout_service+0xe4>
            {
                /* Callback to handle timeout */
                CALLBACK_HANDLER(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT, 0xFFU);
    4122:	4f ef       	ldi	r20, 0xFF	; 255
    4124:	68 e0       	ldi	r22, 0x08	; 8
    4126:	81 2f       	mov	r24, r17
    4128:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <lin_pid_resp_callback_handler>

                /* Put current node to Idle state, reset idle timeout count */
                prot_state_ptr->idle_timeout_cnt = g_lin_protocol_user_cfg_array[iii].max_idle_timeout_cnt;
    412c:	8c e1       	ldi	r24, 0x1C	; 28
    412e:	8e 9d       	mul	r24, r14
    4130:	f0 01       	movw	r30, r0
    4132:	8f 9d       	mul	r24, r15
    4134:	f0 0d       	add	r31, r0
    4136:	11 24       	eor	r1, r1
    4138:	e8 5b       	subi	r30, 0xB8	; 184
    413a:	fc 49       	sbci	r31, 0x9C	; 156
    413c:	84 85       	ldd	r24, Z+12	; 0x0c
    413e:	95 85       	ldd	r25, Z+13	; 0x0d
    4140:	26 e1       	ldi	r18, 0x16	; 22
    4142:	2e 9d       	mul	r18, r14
    4144:	f0 01       	movw	r30, r0
    4146:	2f 9d       	mul	r18, r15
    4148:	f0 0d       	add	r31, r0
    414a:	11 24       	eor	r1, r1
    414c:	e9 53       	subi	r30, 0x39	; 57
    414e:	f8 49       	sbci	r31, 0x98	; 152
    4150:	83 8b       	std	Z+19, r24	; 0x13
    4152:	94 8b       	std	Z+20, r25	; 0x14

                /* Put current node to sleep mode */
                (void)LIN_DRV_GoToSleepMode(lin_hardware_instance);
    4154:	c3 01       	movw	r24, r6
    4156:	b2 01       	movw	r22, r4
    4158:	0e 94 99 1b 	call	0x3732	; 0x3732 <LIN_DRV_GoToSleepMode>
            }
            /* Re-calculate s_lin_max_header_timeout and s_lin_max_frame_res_timeout_val */
            if (s_baudrate_adjusted_flg[iii])
    415c:	f7 01       	movw	r30, r14
    415e:	e6 5e       	subi	r30, 0xE6	; 230
    4160:	f8 49       	sbci	r31, 0x98	; 152
    4162:	80 81       	ld	r24, Z
    4164:	88 23       	and	r24, r24
    4166:	09 f4       	brne	.+2      	; 0x416a <lin_lld_timeout_service+0xf2>
    4168:	c0 c0       	rjmp	.+384    	; 0x42ea <lin_lld_timeout_service+0x272>
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
    416a:	f7 01       	movw	r30, r14
    416c:	e6 5e       	subi	r30, 0xE6	; 230
    416e:	f8 49       	sbci	r31, 0x98	; 152
    4170:	10 82       	st	Z, r1
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
    4172:	c0 90 5c 63 	lds	r12, 0x635C	; 0x80635c <g_lin_protocol_user_cfg_array+0x14>
    4176:	d0 90 5d 63 	lds	r13, 0x635D	; 0x80635d <g_lin_protocol_user_cfg_array+0x15>
    417a:	f6 01       	movw	r30, r12
    417c:	20 81       	ld	r18, Z
    417e:	31 81       	ldd	r19, Z+1	; 0x01
    4180:	42 81       	ldd	r20, Z+2	; 0x02
    4182:	53 81       	ldd	r21, Z+3	; 0x03
 *
 * Implements : lin_calc_max_header_timeout_cnt_Activity
 */
static inline l_u16 lin_calc_max_header_timeout_cnt(l_u32 baudRate)
{
    return (l_u16)((14U * 34U * 100000U / (TIME_OUT_UNIT_US * baudRate)) + 1U);
    4184:	a8 ee       	ldi	r26, 0xE8	; 232
    4186:	b3 e0       	ldi	r27, 0x03	; 3
    4188:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    418c:	9b 01       	movw	r18, r22
    418e:	ac 01       	movw	r20, r24
    4190:	60 e8       	ldi	r22, 0x80	; 128
    4192:	71 e5       	ldi	r23, 0x51	; 81
    4194:	86 ed       	ldi	r24, 0xD6	; 214
    4196:	92 e0       	ldi	r25, 0x02	; 2
    4198:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    419c:	2f 5f       	subi	r18, 0xFF	; 255
    419e:	3f 4f       	sbci	r19, 0xFF	; 255
    41a0:	f7 01       	movw	r30, r14
    41a2:	ee 0f       	add	r30, r30
    41a4:	ff 1f       	adc	r31, r31
    41a6:	e5 5d       	subi	r30, 0xD5	; 213
    41a8:	f8 49       	sbci	r31, 0x98	; 152
    41aa:	20 83       	st	Z, r18
    41ac:	31 83       	std	Z+1, r19	; 0x01
                for (index = 1U; index < 9U; index++)
    41ae:	bb 24       	eor	r11, r11
    41b0:	b3 94       	inc	r11
    41b2:	40 c0       	rjmp	.+128    	; 0x4234 <lin_lld_timeout_service+0x1bc>
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
    41b4:	8b 2d       	mov	r24, r11
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	8c 01       	movw	r16, r24
    41ba:	01 50       	subi	r16, 0x01	; 1
    41bc:	11 09       	sbc	r17, r1
    41be:	f6 01       	movw	r30, r12
    41c0:	40 80       	ld	r4, Z
    41c2:	51 80       	ldd	r5, Z+1	; 0x01
    41c4:	62 80       	ldd	r6, Z+2	; 0x02
    41c6:	73 80       	ldd	r7, Z+3	; 0x03
 * Implements : lin_calc_max_res_timeout_cnt_Activity
 */
static inline l_u16 lin_calc_max_res_timeout_cnt(l_u32 baudRate,
                                                 l_u8 size)
{
    l_u16 a = (l_u16)(14U * (1U + (l_u16)size));
    41c8:	01 96       	adiw	r24, 0x01	; 1
    41ca:	88 0f       	add	r24, r24
    41cc:	99 1f       	adc	r25, r25
    41ce:	dc 01       	movw	r26, r24
    41d0:	aa 0f       	add	r26, r26
    41d2:	bb 1f       	adc	r27, r27
    41d4:	aa 0f       	add	r26, r26
    41d6:	bb 1f       	adc	r27, r27
    41d8:	aa 0f       	add	r26, r26
    41da:	bb 1f       	adc	r27, r27
    41dc:	a8 1b       	sub	r26, r24
    41de:	b9 0b       	sbc	r27, r25

    return (l_u16)((a * 1000000U / (TIME_OUT_UNIT_US * baudRate)) + 1U);
    41e0:	20 e4       	ldi	r18, 0x40	; 64
    41e2:	32 e4       	ldi	r19, 0x42	; 66
    41e4:	4f e0       	ldi	r20, 0x0F	; 15
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    41ec:	6f 8f       	std	Y+31, r22	; 0x1f
    41ee:	78 a3       	std	Y+32, r23	; 0x20
    41f0:	89 a3       	std	Y+33, r24	; 0x21
    41f2:	9a a3       	std	Y+34, r25	; 0x22
    41f4:	a8 ee       	ldi	r26, 0xE8	; 232
    41f6:	b3 e0       	ldi	r27, 0x03	; 3
    41f8:	a3 01       	movw	r20, r6
    41fa:	92 01       	movw	r18, r4
    41fc:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    4200:	9b 01       	movw	r18, r22
    4202:	ac 01       	movw	r20, r24
    4204:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4206:	78 a1       	ldd	r23, Y+32	; 0x20
    4208:	89 a1       	ldd	r24, Y+33	; 0x21
    420a:	9a a1       	ldd	r25, Y+34	; 0x22
    420c:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <__udivmodsi4>
    4210:	2f 5f       	subi	r18, 0xFF	; 255
    4212:	3f 4f       	sbci	r19, 0xFF	; 255
    4214:	f7 01       	movw	r30, r14
    4216:	ee 0f       	add	r30, r30
    4218:	ff 1f       	adc	r31, r31
    421a:	ee 0f       	add	r30, r30
    421c:	ff 1f       	adc	r31, r31
    421e:	ee 0f       	add	r30, r30
    4220:	ff 1f       	adc	r31, r31
    4222:	e0 0f       	add	r30, r16
    4224:	f1 1f       	adc	r31, r17
    4226:	ee 0f       	add	r30, r30
    4228:	ff 1f       	adc	r31, r31
    422a:	e5 5e       	subi	r30, 0xE5	; 229
    422c:	f8 49       	sbci	r31, 0x98	; 152
    422e:	20 83       	st	Z, r18
    4230:	31 83       	std	Z+1, r19	; 0x01
            if (s_baudrate_adjusted_flg[iii])
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
                for (index = 1U; index < 9U; index++)
    4232:	b3 94       	inc	r11
    4234:	f8 e0       	ldi	r31, 0x08	; 8
    4236:	fb 15       	cp	r31, r11
    4238:	08 f0       	brcs	.+2      	; 0x423c <lin_lld_timeout_service+0x1c4>
    423a:	bc cf       	rjmp	.-136    	; 0x41b4 <lin_lld_timeout_service+0x13c>
    423c:	56 c0       	rjmp	.+172    	; 0x42ea <lin_lld_timeout_service+0x272>
        case LIN_NODE_STATE_SEND_BREAK_FIELD:
        case LIN_NODE_STATE_RECV_SYNC:
        case LIN_NODE_STATE_RECV_PID:
        case LIN_NODE_STATE_SEND_PID:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    423e:	86 e1       	ldi	r24, 0x16	; 22
    4240:	8e 9d       	mul	r24, r14
    4242:	f0 01       	movw	r30, r0
    4244:	8f 9d       	mul	r24, r15
    4246:	f0 0d       	add	r31, r0
    4248:	11 24       	eor	r1, r1
    424a:	e9 53       	subi	r30, 0x39	; 57
    424c:	f8 49       	sbci	r31, 0x98	; 152
    424e:	81 89       	ldd	r24, Z+17	; 0x11
    4250:	92 89       	ldd	r25, Z+18	; 0x12
    4252:	9c 01       	movw	r18, r24
    4254:	21 50       	subi	r18, 0x01	; 1
    4256:	31 09       	sbc	r19, r1
    4258:	21 8b       	std	Z+17, r18	; 0x11
    425a:	32 8b       	std	Z+18, r19	; 0x12
    425c:	89 2b       	or	r24, r25
    425e:	09 f0       	breq	.+2      	; 0x4262 <lin_lld_timeout_service+0x1ea>
    4260:	44 c0       	rjmp	.+136    	; 0x42ea <lin_lld_timeout_service+0x272>
            {
                /* Go to idle state */
                (void)LIN_DRV_GotoIdleState(lin_hardware_instance);
    4262:	c3 01       	movw	r24, r6
    4264:	b2 01       	movw	r22, r4
    4266:	0e 94 15 1b 	call	0x362a	; 0x362a <LIN_DRV_GotoIdleState>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    426a:	f7 01       	movw	r30, r14
    426c:	e2 95       	swap	r30
    426e:	f2 95       	swap	r31
    4270:	f0 7f       	andi	r31, 0xF0	; 240
    4272:	fe 27       	eor	r31, r30
    4274:	e0 7f       	andi	r30, 0xF0	; 240
    4276:	fe 27       	eor	r31, r30
    4278:	e5 5e       	subi	r30, 0xE5	; 229
    427a:	f8 49       	sbci	r31, 0x98	; 152
    427c:	86 85       	ldd	r24, Z+14	; 0x0e
    427e:	97 85       	ldd	r25, Z+15	; 0x0f
    4280:	26 e1       	ldi	r18, 0x16	; 22
    4282:	2e 9d       	mul	r18, r14
    4284:	f0 01       	movw	r30, r0
    4286:	2f 9d       	mul	r18, r15
    4288:	f0 0d       	add	r31, r0
    428a:	11 24       	eor	r1, r1
    428c:	e9 53       	subi	r30, 0x39	; 57
    428e:	f8 49       	sbci	r31, 0x98	; 152
    4290:	81 8b       	std	Z+17, r24	; 0x11
    4292:	92 8b       	std	Z+18, r25	; 0x12
    4294:	2a c0       	rjmp	.+84     	; 0x42ea <lin_lld_timeout_service+0x272>
            }
            break;
        case LIN_NODE_STATE_SEND_DATA:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    4296:	86 e1       	ldi	r24, 0x16	; 22
    4298:	8e 9d       	mul	r24, r14
    429a:	f0 01       	movw	r30, r0
    429c:	8f 9d       	mul	r24, r15
    429e:	f0 0d       	add	r31, r0
    42a0:	11 24       	eor	r1, r1
    42a2:	e9 53       	subi	r30, 0x39	; 57
    42a4:	f8 49       	sbci	r31, 0x98	; 152
    42a6:	81 89       	ldd	r24, Z+17	; 0x11
    42a8:	92 89       	ldd	r25, Z+18	; 0x12
    42aa:	9c 01       	movw	r18, r24
    42ac:	21 50       	subi	r18, 0x01	; 1
    42ae:	31 09       	sbc	r19, r1
    42b0:	21 8b       	std	Z+17, r18	; 0x11
    42b2:	32 8b       	std	Z+18, r19	; 0x12
    42b4:	89 2b       	or	r24, r25
    42b6:	c9 f4       	brne	.+50     	; 0x42ea <lin_lld_timeout_service+0x272>
            {
                /* Abort frame data transferring */
                (void)LIN_DRV_AbortTransferData(lin_hardware_instance);
    42b8:	c3 01       	movw	r24, r6
    42ba:	b2 01       	movw	r22, r4
    42bc:	0e 94 a8 1b 	call	0x3750	; 0x3750 <LIN_DRV_AbortTransferData>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    42c0:	f7 01       	movw	r30, r14
    42c2:	e2 95       	swap	r30
    42c4:	f2 95       	swap	r31
    42c6:	f0 7f       	andi	r31, 0xF0	; 240
    42c8:	fe 27       	eor	r31, r30
    42ca:	e0 7f       	andi	r30, 0xF0	; 240
    42cc:	fe 27       	eor	r31, r30
    42ce:	e5 5e       	subi	r30, 0xE5	; 229
    42d0:	f8 49       	sbci	r31, 0x98	; 152
    42d2:	86 85       	ldd	r24, Z+14	; 0x0e
    42d4:	97 85       	ldd	r25, Z+15	; 0x0f
    42d6:	26 e1       	ldi	r18, 0x16	; 22
    42d8:	2e 9d       	mul	r18, r14
    42da:	f0 01       	movw	r30, r0
    42dc:	2f 9d       	mul	r18, r15
    42de:	f0 0d       	add	r31, r0
    42e0:	11 24       	eor	r1, r1
    42e2:	e9 53       	subi	r30, 0x39	; 57
    42e4:	f8 49       	sbci	r31, 0x98	; 152
    42e6:	81 8b       	std	Z+17, r24	; 0x11
    42e8:	92 8b       	std	Z+18, r25	; 0x12
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    }
}
    42ea:	a2 96       	adiw	r28, 0x22	; 34
    42ec:	cd bf       	out	0x3d, r28	; 61
    42ee:	de bf       	out	0x3e, r29	; 62
    42f0:	df 91       	pop	r29
    42f2:	cf 91       	pop	r28
    42f4:	1f 91       	pop	r17
    42f6:	0f 91       	pop	r16
    42f8:	ff 90       	pop	r15
    42fa:	ef 90       	pop	r14
    42fc:	df 90       	pop	r13
    42fe:	cf 90       	pop	r12
    4300:	bf 90       	pop	r11
    4302:	7f 90       	pop	r7
    4304:	6f 90       	pop	r6
    4306:	5f 90       	pop	r5
    4308:	4f 90       	pop	r4
    430a:	08 95       	ret

0000430c <ld_init>:
{

    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_tx_queue.queue_status);
}
    430c:	48 2f       	mov	r20, r24
    430e:	50 e0       	ldi	r21, 0x00	; 0
    4310:	8c e1       	ldi	r24, 0x1C	; 28
    4312:	84 9f       	mul	r24, r20
    4314:	f0 01       	movw	r30, r0
    4316:	85 9f       	mul	r24, r21
    4318:	f0 0d       	add	r31, r0
    431a:	11 24       	eor	r1, r1
    431c:	e8 5b       	subi	r30, 0xB8	; 184
    431e:	fc 49       	sbci	r31, 0x9C	; 156
    4320:	22 8d       	ldd	r18, Z+26	; 0x1a
    4322:	33 8d       	ldd	r19, Z+27	; 0x1b
    4324:	27 30       	cpi	r18, 0x07	; 7
    4326:	31 05       	cpc	r19, r1
    4328:	48 f1       	brcs	.+82     	; 0x437c <ld_init+0x70>
    432a:	f9 01       	movw	r30, r18
    432c:	35 97       	sbiw	r30, 0x05	; 5
    432e:	9f 01       	movw	r18, r30
    4330:	ab ea       	ldi	r26, 0xAB	; 171
    4332:	ba ea       	ldi	r27, 0xAA	; 170
    4334:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    4338:	96 95       	lsr	r25
    433a:	87 95       	ror	r24
    433c:	96 95       	lsr	r25
    433e:	87 95       	ror	r24
    4340:	9c 01       	movw	r18, r24
    4342:	22 0f       	add	r18, r18
    4344:	33 1f       	adc	r19, r19
    4346:	82 0f       	add	r24, r18
    4348:	93 1f       	adc	r25, r19
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	e8 17       	cp	r30, r24
    4350:	f9 07       	cpc	r31, r25
    4352:	49 f4       	brne	.+18     	; 0x4366 <ld_init+0x5a>
    4354:	9f 01       	movw	r18, r30
    4356:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    435a:	96 95       	lsr	r25
    435c:	87 95       	ror	r24
    435e:	96 95       	lsr	r25
    4360:	87 95       	ror	r24
    4362:	01 96       	adiw	r24, 0x01	; 1
    4364:	0d c0       	rjmp	.+26     	; 0x4380 <ld_init+0x74>
    4366:	9f 01       	movw	r18, r30
    4368:	ab ea       	ldi	r26, 0xAB	; 171
    436a:	ba ea       	ldi	r27, 0xAA	; 170
    436c:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    4370:	96 95       	lsr	r25
    4372:	87 95       	ror	r24
    4374:	96 95       	lsr	r25
    4376:	87 95       	ror	r24
    4378:	02 96       	adiw	r24, 0x02	; 2
    437a:	02 c0       	rjmp	.+4      	; 0x4380 <ld_init+0x74>
    437c:	81 e0       	ldi	r24, 0x01	; 1
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	2c e1       	ldi	r18, 0x1C	; 28
    4382:	24 9f       	mul	r18, r20
    4384:	d0 01       	movw	r26, r0
    4386:	25 9f       	mul	r18, r21
    4388:	b0 0d       	add	r27, r0
    438a:	11 24       	eor	r1, r1
    438c:	a8 5b       	subi	r26, 0xB8	; 184
    438e:	bc 49       	sbci	r27, 0x9C	; 156
    4390:	56 96       	adiw	r26, 0x16	; 22
    4392:	2d 91       	ld	r18, X+
    4394:	3c 91       	ld	r19, X
    4396:	57 97       	sbiw	r26, 0x17	; 23
    4398:	64 e3       	ldi	r22, 0x34	; 52
    439a:	64 9f       	mul	r22, r20
    439c:	f0 01       	movw	r30, r0
    439e:	65 9f       	mul	r22, r21
    43a0:	f0 0d       	add	r31, r0
    43a2:	11 24       	eor	r1, r1
    43a4:	ed 56       	subi	r30, 0x6D	; 109
    43a6:	f8 49       	sbci	r31, 0x98	; 152
    43a8:	21 87       	std	Z+9, r18	; 0x09
    43aa:	32 87       	std	Z+10, r19	; 0x0a
    43ac:	58 96       	adiw	r26, 0x18	; 24
    43ae:	2d 91       	ld	r18, X+
    43b0:	3c 91       	ld	r19, X
    43b2:	59 97       	sbiw	r26, 0x19	; 25
    43b4:	24 8b       	std	Z+20, r18	; 0x14
    43b6:	35 8b       	std	Z+21, r19	; 0x15
    43b8:	9a 01       	movw	r18, r20
    43ba:	22 0f       	add	r18, r18
    43bc:	33 1f       	adc	r19, r19
    43be:	22 0f       	add	r18, r18
    43c0:	33 1f       	adc	r19, r19
    43c2:	42 0f       	add	r20, r18
    43c4:	53 1f       	adc	r21, r19
    43c6:	45 5b       	subi	r20, 0xB5	; 181
    43c8:	58 49       	sbci	r21, 0x98	; 152
    43ca:	42 a3       	std	Z+34, r20	; 0x22
    43cc:	53 a3       	std	Z+35, r21	; 0x23
    43ce:	87 83       	std	Z+7, r24	; 0x07
    43d0:	90 87       	std	Z+8, r25	; 0x08
    43d2:	82 8b       	std	Z+18, r24	; 0x12
    43d4:	93 8b       	std	Z+19, r25	; 0x13
    43d6:	10 82       	st	Z, r1
    43d8:	11 82       	std	Z+1, r1	; 0x01
    43da:	12 82       	std	Z+2, r1	; 0x02
    43dc:	13 82       	std	Z+3, r1	; 0x03
    43de:	85 e0       	ldi	r24, 0x05	; 5
    43e0:	84 83       	std	Z+4, r24	; 0x04
    43e2:	15 82       	std	Z+5, r1	; 0x05
    43e4:	16 82       	std	Z+6, r1	; 0x06
    43e6:	13 86       	std	Z+11, r1	; 0x0b
    43e8:	14 86       	std	Z+12, r1	; 0x0c
    43ea:	15 86       	std	Z+13, r1	; 0x0d
    43ec:	16 86       	std	Z+14, r1	; 0x0e
    43ee:	17 86       	std	Z+15, r1	; 0x0f
    43f0:	10 8a       	std	Z+16, r1	; 0x10
    43f2:	11 8a       	std	Z+17, r1	; 0x11
    43f4:	82 e0       	ldi	r24, 0x02	; 2
    43f6:	86 8b       	std	Z+22, r24	; 0x16
    43f8:	81 8f       	std	Z+25, r24	; 0x19
    43fa:	14 8e       	std	Z+28, r1	; 0x1c
    43fc:	15 8e       	std	Z+29, r1	; 0x1d
    43fe:	16 8e       	std	Z+30, r1	; 0x1e
    4400:	15 a2       	std	Z+37, r1	; 0x25
    4402:	14 a2       	std	Z+36, r1	; 0x24
    4404:	12 a6       	std	Z+42, r1	; 0x2a
    4406:	17 8e       	std	Z+31, r1	; 0x1f
    4408:	10 a2       	std	Z+32, r1	; 0x20
    440a:	11 a2       	std	Z+33, r1	; 0x21
    440c:	91 e0       	ldi	r25, 0x01	; 1
    440e:	96 a3       	std	Z+38, r25	; 0x26
    4410:	83 a7       	std	Z+43, r24	; 0x2b
    4412:	17 a2       	std	Z+39, r1	; 0x27
    4414:	10 a6       	std	Z+40, r1	; 0x28
    4416:	11 a6       	std	Z+41, r1	; 0x29
    4418:	15 a6       	std	Z+45, r1	; 0x2d
    441a:	14 a6       	std	Z+44, r1	; 0x2c
    441c:	08 95       	ret

0000441e <ld_put_raw>:
    441e:	28 2f       	mov	r18, r24
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	9c e1       	ldi	r25, 0x1C	; 28
    4424:	92 9f       	mul	r25, r18
    4426:	f0 01       	movw	r30, r0
    4428:	93 9f       	mul	r25, r19
    442a:	f0 0d       	add	r31, r0
    442c:	11 24       	eor	r1, r1
    442e:	e8 5b       	subi	r30, 0xB8	; 184
    4430:	fc 49       	sbci	r31, 0x9C	; 156
    4432:	93 81       	ldd	r25, Z+3	; 0x03
    4434:	91 11       	cpse	r25, r1
    4436:	28 c0       	rjmp	.+80     	; 0x4488 <ld_put_raw+0x6a>
    4438:	9c e1       	ldi	r25, 0x1C	; 28
    443a:	92 9f       	mul	r25, r18
    443c:	f0 01       	movw	r30, r0
    443e:	93 9f       	mul	r25, r19
    4440:	f0 0d       	add	r31, r0
    4442:	11 24       	eor	r1, r1
    4444:	e8 5b       	subi	r30, 0xB8	; 184
    4446:	fc 49       	sbci	r31, 0x9C	; 156
    4448:	90 81       	ld	r25, Z
    444a:	91 11       	cpse	r25, r1
    444c:	1d c0       	rjmp	.+58     	; 0x4488 <ld_put_raw+0x6a>
    444e:	9c e1       	ldi	r25, 0x1C	; 28
    4450:	92 9f       	mul	r25, r18
    4452:	f0 01       	movw	r30, r0
    4454:	93 9f       	mul	r25, r19
    4456:	f0 0d       	add	r31, r0
    4458:	11 24       	eor	r1, r1
    445a:	e8 5b       	subi	r30, 0xB8	; 184
    445c:	fc 49       	sbci	r31, 0x9C	; 156
    445e:	e2 89       	ldd	r30, Z+18	; 0x12
    4460:	94 e2       	ldi	r25, 0x24	; 36
    4462:	e9 9f       	mul	r30, r25
    4464:	f0 01       	movw	r30, r0
    4466:	11 24       	eor	r1, r1
    4468:	ec 59       	subi	r30, 0x9C	; 156
    446a:	fc 49       	sbci	r31, 0x9C	; 156
    446c:	43 8d       	ldd	r20, Z+27	; 0x1b
    446e:	54 8d       	ldd	r21, Z+28	; 0x1c
    4470:	94 e3       	ldi	r25, 0x34	; 52
    4472:	92 9f       	mul	r25, r18
    4474:	f0 01       	movw	r30, r0
    4476:	93 9f       	mul	r25, r19
    4478:	f0 0d       	add	r31, r0
    447a:	11 24       	eor	r1, r1
    447c:	ed 56       	subi	r30, 0x6D	; 109
    447e:	f8 49       	sbci	r31, 0x98	; 152
    4480:	40 a3       	std	Z+32, r20	; 0x20
    4482:	51 a3       	std	Z+33, r21	; 0x21
    4484:	91 e0       	ldi	r25, 0x01	; 1
    4486:	97 8f       	std	Z+31, r25	; 0x1f
    4488:	94 e3       	ldi	r25, 0x34	; 52
    448a:	92 9f       	mul	r25, r18
    448c:	a0 01       	movw	r20, r0
    448e:	93 9f       	mul	r25, r19
    4490:	50 0d       	add	r21, r0
    4492:	11 24       	eor	r1, r1
    4494:	4d 56       	subi	r20, 0x6D	; 109
    4496:	58 49       	sbci	r21, 0x98	; 152
    4498:	fa 01       	movw	r30, r20
    449a:	92 a5       	ldd	r25, Z+42	; 0x2a
    449c:	9f 5f       	subi	r25, 0xFF	; 255
    449e:	92 a7       	std	Z+42, r25	; 0x2a
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	0e 94 ce 24 	call	0x499c	; 0x499c <tl_put_raw>
    44a6:	08 95       	ret

000044a8 <ld_get_raw>:
    44a8:	94 e3       	ldi	r25, 0x34	; 52
    44aa:	89 9f       	mul	r24, r25
    44ac:	a0 01       	movw	r20, r0
    44ae:	11 24       	eor	r1, r1
    44b0:	42 56       	subi	r20, 0x62	; 98
    44b2:	58 49       	sbci	r21, 0x98	; 152
    44b4:	21 e0       	ldi	r18, 0x01	; 1
    44b6:	0e 94 00 28 	call	0x5000	; 0x5000 <tl_get_raw>
    44ba:	08 95       	ret

000044bc <ld_raw_rx_status>:
 *END**************************************************************************/
l_u8 ld_raw_rx_status(l_ifc_handle iii)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_rx_queue.queue_status);
    44bc:	24 e3       	ldi	r18, 0x34	; 52
    44be:	82 9f       	mul	r24, r18
    44c0:	c0 01       	movw	r24, r0
    44c2:	11 24       	eor	r1, r1
    44c4:	fc 01       	movw	r30, r24
    44c6:	ed 56       	subi	r30, 0x6D	; 109
    44c8:	f8 49       	sbci	r31, 0x98	; 152
}
    44ca:	87 85       	ldd	r24, Z+15	; 0x0f
    44cc:	08 95       	ret

000044ce <lin_tl_handle_timeout>:
 *
 * Implements    : lin_tl_handle_timeout_Activity
 *END**************************************************************************/
static void lin_tl_handle_timeout(l_ifc_handle iii)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    #if (SUPPORT_MASTER_MODE == 1U)
    const lin_master_data_t * master_data_ptr;
    const lin_schedule_t * active_schedule_struct_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    if (LD_CHECK_N_CR_TIMEOUT == tl_desc_ptr->check_timeout_type)
    44d0:	24 e3       	ldi	r18, 0x34	; 52
    44d2:	28 9f       	mul	r18, r24
    44d4:	f0 01       	movw	r30, r0
    44d6:	29 9f       	mul	r18, r25
    44d8:	f0 0d       	add	r31, r0
    44da:	11 24       	eor	r1, r1
    44dc:	ed 56       	subi	r30, 0x6D	; 109
    44de:	f8 49       	sbci	r31, 0x98	; 152
    44e0:	27 8d       	ldd	r18, Z+31	; 0x1f
    44e2:	22 30       	cpi	r18, 0x02	; 2
    44e4:	59 f5       	brne	.+86     	; 0x453c <lin_tl_handle_timeout+0x6e>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    44e6:	24 e3       	ldi	r18, 0x34	; 52
    44e8:	28 9f       	mul	r18, r24
    44ea:	f0 01       	movw	r30, r0
    44ec:	29 9f       	mul	r18, r25
    44ee:	f0 0d       	add	r31, r0
    44f0:	11 24       	eor	r1, r1
    44f2:	ed 56       	subi	r30, 0x6D	; 109
    44f4:	f8 49       	sbci	r31, 0x98	; 152
    44f6:	20 a1       	ldd	r18, Z+32	; 0x20
    44f8:	31 a1       	ldd	r19, Z+33	; 0x21
    44fa:	a9 01       	movw	r20, r18
    44fc:	41 50       	subi	r20, 0x01	; 1
    44fe:	51 09       	sbc	r21, r1
    4500:	40 a3       	std	Z+32, r20	; 0x20
    4502:	51 a3       	std	Z+33, r21	; 0x21
    4504:	23 2b       	or	r18, r19
    4506:	d1 f4       	brne	.+52     	; 0x453c <lin_tl_handle_timeout+0x6e>
        {
            /* Update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    4508:	26 e1       	ldi	r18, 0x16	; 22
    450a:	28 9f       	mul	r18, r24
    450c:	f0 01       	movw	r30, r0
    450e:	29 9f       	mul	r18, r25
    4510:	f0 0d       	add	r31, r0
    4512:	11 24       	eor	r1, r1
    4514:	e9 53       	subi	r30, 0x39	; 57
    4516:	f8 49       	sbci	r31, 0x98	; 152
    4518:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    451a:	24 e3       	ldi	r18, 0x34	; 52
    451c:	28 9f       	mul	r18, r24
    451e:	f0 01       	movw	r30, r0
    4520:	29 9f       	mul	r18, r25
    4522:	f0 0d       	add	r31, r0
    4524:	11 24       	eor	r1, r1
    4526:	ed 56       	subi	r30, 0x6D	; 109
    4528:	f8 49       	sbci	r31, 0x98	; 152
    452a:	23 e0       	ldi	r18, 0x03	; 3
    452c:	23 a7       	std	Z+43, r18	; 0x2b
            tl_desc_ptr->rx_msg_status = LD_N_CR_TIMEOUT;
    452e:	25 e0       	ldi	r18, 0x05	; 5
    4530:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->ld_return_data = false;
    4532:	14 a6       	std	Z+44, r1	; 0x2c
            tl_desc_ptr->FF_pdu_received = false;
    4534:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    4536:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    4538:	21 e0       	ldi	r18, 0x01	; 1
    453a:	26 a3       	std	Z+38, r18	; 0x26
        }
    }

    if (LD_CHECK_N_AS_TIMEOUT == tl_desc_ptr->check_timeout_type)
    453c:	24 e3       	ldi	r18, 0x34	; 52
    453e:	28 9f       	mul	r18, r24
    4540:	f0 01       	movw	r30, r0
    4542:	29 9f       	mul	r18, r25
    4544:	f0 0d       	add	r31, r0
    4546:	11 24       	eor	r1, r1
    4548:	ed 56       	subi	r30, 0x6D	; 109
    454a:	f8 49       	sbci	r31, 0x98	; 152
    454c:	27 8d       	ldd	r18, Z+31	; 0x1f
    454e:	21 30       	cpi	r18, 0x01	; 1
    4550:	49 f5       	brne	.+82     	; 0x45a4 <lin_tl_handle_timeout+0xd6>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    4552:	24 e3       	ldi	r18, 0x34	; 52
    4554:	28 9f       	mul	r18, r24
    4556:	f0 01       	movw	r30, r0
    4558:	29 9f       	mul	r18, r25
    455a:	f0 0d       	add	r31, r0
    455c:	11 24       	eor	r1, r1
    455e:	ed 56       	subi	r30, 0x6D	; 109
    4560:	f8 49       	sbci	r31, 0x98	; 152
    4562:	20 a1       	ldd	r18, Z+32	; 0x20
    4564:	31 a1       	ldd	r19, Z+33	; 0x21
    4566:	a9 01       	movw	r20, r18
    4568:	41 50       	subi	r20, 0x01	; 1
    456a:	51 09       	sbc	r21, r1
    456c:	40 a3       	std	Z+32, r20	; 0x20
    456e:	51 a3       	std	Z+33, r21	; 0x21
    4570:	23 2b       	or	r18, r19
    4572:	c1 f4       	brne	.+48     	; 0x45a4 <lin_tl_handle_timeout+0xd6>
        {
            /* update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    4574:	26 e1       	ldi	r18, 0x16	; 22
    4576:	28 9f       	mul	r18, r24
    4578:	f0 01       	movw	r30, r0
    457a:	29 9f       	mul	r18, r25
    457c:	f0 0d       	add	r31, r0
    457e:	11 24       	eor	r1, r1
    4580:	e9 53       	subi	r30, 0x39	; 57
    4582:	f8 49       	sbci	r31, 0x98	; 152
    4584:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    4586:	24 e3       	ldi	r18, 0x34	; 52
    4588:	28 9f       	mul	r18, r24
    458a:	f0 01       	movw	r30, r0
    458c:	29 9f       	mul	r18, r25
    458e:	f0 0d       	add	r31, r0
    4590:	11 24       	eor	r1, r1
    4592:	ed 56       	subi	r30, 0x6D	; 109
    4594:	f8 49       	sbci	r31, 0x98	; 152
    4596:	83 e0       	ldi	r24, 0x03	; 3
    4598:	83 a7       	std	Z+43, r24	; 0x2b
            tl_desc_ptr->tx_msg_status = LD_N_AS_TIMEOUT;
    459a:	84 e0       	ldi	r24, 0x04	; 4
    459c:	81 8f       	std	Z+25, r24	; 0x19
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    459e:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	86 a3       	std	Z+38, r24	; 0x26
    45a4:	08 95       	ret

000045a6 <lin_tl_handler_error>:
 * Implements    : lin_tl_handler_error_Activity
 *END**************************************************************************/
static void lin_tl_handler_error(l_ifc_handle iii,
                                 l_u8 pid)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    else
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* for slave */
        /* Master request */
        if (0x3CU == pid)
    45a8:	6c 33       	cpi	r22, 0x3C	; 60
    45aa:	61 f5       	brne	.+88     	; 0x4604 <lin_tl_handler_error+0x5e>
        {
            /* update status of message and queue */
            tl_desc_ptr->rx_msg_status = LD_FAILED;
    45ac:	24 e3       	ldi	r18, 0x34	; 52
    45ae:	28 9f       	mul	r18, r24
    45b0:	f0 01       	movw	r30, r0
    45b2:	29 9f       	mul	r18, r25
    45b4:	f0 0d       	add	r31, r0
    45b6:	11 24       	eor	r1, r1
    45b8:	ed 56       	subi	r30, 0x6D	; 109
    45ba:	f8 49       	sbci	r31, 0x98	; 152
    45bc:	23 e0       	ldi	r18, 0x03	; 3
    45be:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->slave_resp_cnt = 0U;
    45c0:	12 a6       	std	Z+42, r1	; 0x2a

            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    45c2:	2c e1       	ldi	r18, 0x1C	; 28
    45c4:	28 9f       	mul	r18, r24
    45c6:	f0 01       	movw	r30, r0
    45c8:	29 9f       	mul	r18, r25
    45ca:	f0 0d       	add	r31, r0
    45cc:	11 24       	eor	r1, r1
    45ce:	e8 5b       	subi	r30, 0xB8	; 184
    45d0:	fc 49       	sbci	r31, 0x9C	; 156
    45d2:	20 81       	ld	r18, Z
    45d4:	21 11       	cpse	r18, r1
    45d6:	0b c0       	rjmp	.+22     	; 0x45ee <lin_tl_handler_error+0x48>
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_RECEIVE_ERROR;
    45d8:	24 e3       	ldi	r18, 0x34	; 52
    45da:	28 9f       	mul	r18, r24
    45dc:	f0 01       	movw	r30, r0
    45de:	29 9f       	mul	r18, r25
    45e0:	f0 0d       	add	r31, r0
    45e2:	11 24       	eor	r1, r1
    45e4:	ed 56       	subi	r30, 0x6D	; 109
    45e6:	f8 49       	sbci	r31, 0x98	; 152
    45e8:	22 e0       	ldi	r18, 0x02	; 2
    45ea:	27 87       	std	Z+15, r18	; 0x0f
    45ec:	35 c0       	rjmp	.+106    	; 0x4658 <lin_tl_handler_error+0xb2>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_TRANSFER_ERROR;
    45ee:	24 e3       	ldi	r18, 0x34	; 52
    45f0:	28 9f       	mul	r18, r24
    45f2:	f0 01       	movw	r30, r0
    45f4:	29 9f       	mul	r18, r25
    45f6:	f0 0d       	add	r31, r0
    45f8:	11 24       	eor	r1, r1
    45fa:	ed 56       	subi	r30, 0x6D	; 109
    45fc:	f8 49       	sbci	r31, 0x98	; 152
    45fe:	27 e0       	ldi	r18, 0x07	; 7
    4600:	27 87       	std	Z+15, r18	; 0x0f
    4602:	2a c0       	rjmp	.+84     	; 0x4658 <lin_tl_handler_error+0xb2>
        }
        else
        {
            /* Slave Response */
            /* update status of message and queue */
            tl_desc_ptr->tx_msg_status = LD_FAILED;
    4604:	24 e3       	ldi	r18, 0x34	; 52
    4606:	28 9f       	mul	r18, r24
    4608:	f0 01       	movw	r30, r0
    460a:	29 9f       	mul	r18, r25
    460c:	f0 0d       	add	r31, r0
    460e:	11 24       	eor	r1, r1
    4610:	ed 56       	subi	r30, 0x6D	; 109
    4612:	f8 49       	sbci	r31, 0x98	; 152
    4614:	23 e0       	ldi	r18, 0x03	; 3
    4616:	21 8f       	std	Z+25, r18	; 0x19
            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    4618:	2c e1       	ldi	r18, 0x1C	; 28
    461a:	28 9f       	mul	r18, r24
    461c:	f0 01       	movw	r30, r0
    461e:	29 9f       	mul	r18, r25
    4620:	f0 0d       	add	r31, r0
    4622:	11 24       	eor	r1, r1
    4624:	e8 5b       	subi	r30, 0xB8	; 184
    4626:	fc 49       	sbci	r31, 0x9C	; 156
    4628:	20 81       	ld	r18, Z
    462a:	21 11       	cpse	r18, r1
    462c:	0b c0       	rjmp	.+22     	; 0x4644 <lin_tl_handler_error+0x9e>
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSMIT_ERROR;
    462e:	24 e3       	ldi	r18, 0x34	; 52
    4630:	28 9f       	mul	r18, r24
    4632:	f0 01       	movw	r30, r0
    4634:	29 9f       	mul	r18, r25
    4636:	f0 0d       	add	r31, r0
    4638:	11 24       	eor	r1, r1
    463a:	ed 56       	subi	r30, 0x6D	; 109
    463c:	f8 49       	sbci	r31, 0x98	; 152
    463e:	26 e0       	ldi	r18, 0x06	; 6
    4640:	24 83       	std	Z+4, r18	; 0x04
    4642:	0a c0       	rjmp	.+20     	; 0x4658 <lin_tl_handler_error+0xb2>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSFER_ERROR;
    4644:	24 e3       	ldi	r18, 0x34	; 52
    4646:	28 9f       	mul	r18, r24
    4648:	f0 01       	movw	r30, r0
    464a:	29 9f       	mul	r18, r25
    464c:	f0 0d       	add	r31, r0
    464e:	11 24       	eor	r1, r1
    4650:	ed 56       	subi	r30, 0x6D	; 109
    4652:	f8 49       	sbci	r31, 0x98	; 152
    4654:	27 e0       	ldi	r18, 0x07	; 7
    4656:	24 83       	std	Z+4, r18	; 0x04
            }
        } /* end of (0x3C == pid) */

        tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    4658:	24 e3       	ldi	r18, 0x34	; 52
    465a:	28 9f       	mul	r18, r24
    465c:	f0 01       	movw	r30, r0
    465e:	29 9f       	mul	r18, r25
    4660:	f0 0d       	add	r31, r0
    4662:	11 24       	eor	r1, r1
    4664:	ed 56       	subi	r30, 0x6D	; 109
    4666:	f8 49       	sbci	r31, 0x98	; 152
    4668:	83 e0       	ldi	r24, 0x03	; 3
    466a:	83 a7       	std	Z+43, r24	; 0x2b
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    466c:	17 8e       	std	Z+31, r1	; 0x1f
    466e:	08 95       	ret

00004670 <lin_tl_handler_tx_completed>:
 *
 * Implements    : lin_tl_handler_tx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_tx_completed(l_ifc_handle iii)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    4670:	90 e0       	ldi	r25, 0x00	; 0
    #if (SUPPORT_MASTER_MODE == 1U)
    lin_master_data_t * master_data_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Reset interleave timeout */
    tl_desc_ptr->interleave_timeout_counter = 0;
    4672:	24 e3       	ldi	r18, 0x34	; 52
    4674:	28 9f       	mul	r18, r24
    4676:	f0 01       	movw	r30, r0
    4678:	29 9f       	mul	r18, r25
    467a:	f0 0d       	add	r31, r0
    467c:	11 24       	eor	r1, r1
    467e:	ed 56       	subi	r30, 0x6D	; 109
    4680:	f8 49       	sbci	r31, 0x98	; 152
    4682:	10 a6       	std	Z+40, r1	; 0x28
    4684:	11 a6       	std	Z+41, r1	; 0x29
    /* Check message is sent completely */
    if (0U == tl_desc_ptr->tl_tx_queue.queue_current_size)
    4686:	25 81       	ldd	r18, Z+5	; 0x05
    4688:	36 81       	ldd	r19, Z+6	; 0x06
    468a:	23 2b       	or	r18, r19
    468c:	19 f5       	brne	.+70     	; 0x46d4 <lin_tl_handler_tx_completed+0x64>
    {
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    468e:	24 e3       	ldi	r18, 0x34	; 52
    4690:	28 9f       	mul	r18, r24
    4692:	f0 01       	movw	r30, r0
    4694:	29 9f       	mul	r18, r25
    4696:	f0 0d       	add	r31, r0
    4698:	11 24       	eor	r1, r1
    469a:	ed 56       	subi	r30, 0x6D	; 109
    469c:	f8 49       	sbci	r31, 0x98	; 152
    469e:	17 8e       	std	Z+31, r1	; 0x1f
        tl_desc_ptr->tx_msg_status = LD_COMPLETED;
    46a0:	22 e0       	ldi	r18, 0x02	; 2
    46a2:	21 8f       	std	Z+25, r18	; 0x19
        tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    46a4:	21 e0       	ldi	r18, 0x01	; 1
    46a6:	23 a7       	std	Z+43, r18	; 0x2b
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    46a8:	2c e1       	ldi	r18, 0x1C	; 28
    46aa:	28 9f       	mul	r18, r24
    46ac:	f0 01       	movw	r30, r0
    46ae:	29 9f       	mul	r18, r25
    46b0:	f0 0d       	add	r31, r0
    46b2:	11 24       	eor	r1, r1
    46b4:	e8 5b       	subi	r30, 0xB8	; 184
    46b6:	fc 49       	sbci	r31, 0x9C	; 156
    46b8:	23 81       	ldd	r18, Z+3	; 0x03
    46ba:	21 11       	cpse	r18, r1
    46bc:	3e c0       	rjmp	.+124    	; 0x473a <lin_tl_handler_tx_completed+0xca>
        {
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    46be:	24 e3       	ldi	r18, 0x34	; 52
    46c0:	28 9f       	mul	r18, r24
    46c2:	f0 01       	movw	r30, r0
    46c4:	29 9f       	mul	r18, r25
    46c6:	f0 0d       	add	r31, r0
    46c8:	11 24       	eor	r1, r1
    46ca:	ed 56       	subi	r30, 0x6D	; 109
    46cc:	f8 49       	sbci	r31, 0x98	; 152
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	86 a3       	std	Z+38, r24	; 0x26
    46d2:	08 95       	ret
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }
    else
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    46d4:	2c e1       	ldi	r18, 0x1C	; 28
    46d6:	28 9f       	mul	r18, r24
    46d8:	f0 01       	movw	r30, r0
    46da:	29 9f       	mul	r18, r25
    46dc:	f0 0d       	add	r31, r0
    46de:	11 24       	eor	r1, r1
    46e0:	e8 5b       	subi	r30, 0xB8	; 184
    46e2:	fc 49       	sbci	r31, 0x9C	; 156
    46e4:	23 81       	ldd	r18, Z+3	; 0x03
    46e6:	21 11       	cpse	r18, r1
    46e8:	28 c0       	rjmp	.+80     	; 0x473a <lin_tl_handler_tx_completed+0xca>
        {
            if(prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    46ea:	2c e1       	ldi	r18, 0x1C	; 28
    46ec:	28 9f       	mul	r18, r24
    46ee:	f0 01       	movw	r30, r0
    46f0:	29 9f       	mul	r18, r25
    46f2:	f0 0d       	add	r31, r0
    46f4:	11 24       	eor	r1, r1
    46f6:	e8 5b       	subi	r30, 0xB8	; 184
    46f8:	fc 49       	sbci	r31, 0x9C	; 156
    46fa:	20 81       	ld	r18, Z
    46fc:	21 11       	cpse	r18, r1
    46fe:	1d c0       	rjmp	.+58     	; 0x473a <lin_tl_handler_tx_completed+0xca>
            {
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_As_timeout;
    4700:	2c e1       	ldi	r18, 0x1C	; 28
    4702:	28 9f       	mul	r18, r24
    4704:	f0 01       	movw	r30, r0
    4706:	29 9f       	mul	r18, r25
    4708:	f0 0d       	add	r31, r0
    470a:	11 24       	eor	r1, r1
    470c:	e8 5b       	subi	r30, 0xB8	; 184
    470e:	fc 49       	sbci	r31, 0x9C	; 156
    4710:	e2 89       	ldd	r30, Z+18	; 0x12
    4712:	24 e2       	ldi	r18, 0x24	; 36
    4714:	e2 9f       	mul	r30, r18
    4716:	f0 01       	movw	r30, r0
    4718:	11 24       	eor	r1, r1
    471a:	ec 59       	subi	r30, 0x9C	; 156
    471c:	fc 49       	sbci	r31, 0x9C	; 156
    471e:	23 8d       	ldd	r18, Z+27	; 0x1b
    4720:	34 8d       	ldd	r19, Z+28	; 0x1c
    4722:	44 e3       	ldi	r20, 0x34	; 52
    4724:	48 9f       	mul	r20, r24
    4726:	f0 01       	movw	r30, r0
    4728:	49 9f       	mul	r20, r25
    472a:	f0 0d       	add	r31, r0
    472c:	11 24       	eor	r1, r1
    472e:	ed 56       	subi	r30, 0x6D	; 109
    4730:	f8 49       	sbci	r31, 0x98	; 152
    4732:	20 a3       	std	Z+32, r18	; 0x20
    4734:	31 a3       	std	Z+33, r19	; 0x21
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_AS_TIMEOUT;
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	87 8f       	std	Z+31, r24	; 0x1f
    473a:	08 95       	ret

0000473c <lin_tl_attach_service>:
 * This function is implemented for Slave only.
 *
 * Implements    : lin_tl_attach_service_Activity
 *END**************************************************************************/
static void lin_tl_attach_service(l_ifc_handle iii)
{
    473c:	0f 93       	push	r16
    473e:	1f 93       	push	r17
    4740:	cf 93       	push	r28
    4742:	c8 2f       	mov	r28, r24
    l_u8 sid;
    l_u8 frame_type;
    l_u8 rx_queue_current_status;
    const lin_transport_layer_queue_t * rx_queue;
    lin_transport_layer_queue_t * tx_queue;
    rx_queue = &(g_lin_tl_descriptor_array[iii].tl_rx_queue);
    4744:	08 2f       	mov	r16, r24
    4746:	10 e0       	ldi	r17, 0x00	; 0
    tx_queue = &(g_lin_tl_descriptor_array[iii].tl_tx_queue);


    /* prepare tx queue */
    tx_queue->queue_current_size = 0;
    4748:	84 e3       	ldi	r24, 0x34	; 52
    474a:	80 9f       	mul	r24, r16
    474c:	f0 01       	movw	r30, r0
    474e:	81 9f       	mul	r24, r17
    4750:	f0 0d       	add	r31, r0
    4752:	11 24       	eor	r1, r1
    4754:	ed 56       	subi	r30, 0x6D	; 109
    4756:	f8 49       	sbci	r31, 0x98	; 152
    4758:	15 82       	std	Z+5, r1	; 0x05
    475a:	16 82       	std	Z+6, r1	; 0x06
    tx_queue->queue_header = 0;
    475c:	10 82       	st	Z, r1
    475e:	11 82       	std	Z+1, r1	; 0x01
    tx_queue->queue_tail = 0;
    4760:	12 82       	std	Z+2, r1	; 0x02
    4762:	13 82       	std	Z+3, r1	; 0x03
    tx_queue->queue_status = LD_QUEUE_EMPTY;
    4764:	85 e0       	ldi	r24, 0x05	; 5
    4766:	84 83       	std	Z+4, r24	; 0x04

    /* Get rx queue current status */
    rx_queue_current_status = ld_raw_rx_status(iii);
    4768:	8c 2f       	mov	r24, r28
    476a:	0e 94 5e 22 	call	0x44bc	; 0x44bc <ld_raw_rx_status>
    /* Check whether RX Queue contains data */
    if (((l_u8)LD_DATA_AVAILABLE == rx_queue_current_status) || ((l_u8)LD_QUEUE_FULL == rx_queue_current_status))
    476e:	81 30       	cpi	r24, 0x01	; 1
    4770:	11 f0       	breq	.+4      	; 0x4776 <lin_tl_attach_service+0x3a>
    4772:	83 30       	cpi	r24, 0x03	; 3
    4774:	19 f5       	brne	.+70     	; 0x47bc <lin_tl_attach_service+0x80>
    {
        /* get frame type */
        frame_type = (l_u8)((rx_queue->tl_pdu_ptr[rx_queue->queue_header][1] & 0xF0U) >> 4U);
    4776:	84 e3       	ldi	r24, 0x34	; 52
    4778:	80 9f       	mul	r24, r16
    477a:	d0 01       	movw	r26, r0
    477c:	81 9f       	mul	r24, r17
    477e:	b0 0d       	add	r27, r0
    4780:	11 24       	eor	r1, r1
    4782:	ad 56       	subi	r26, 0x6D	; 109
    4784:	b8 49       	sbci	r27, 0x98	; 152
    4786:	54 96       	adiw	r26, 0x14	; 20
    4788:	8d 91       	ld	r24, X+
    478a:	9c 91       	ld	r25, X
    478c:	55 97       	sbiw	r26, 0x15	; 21
    478e:	1b 96       	adiw	r26, 0x0b	; 11
    4790:	ed 91       	ld	r30, X+
    4792:	fc 91       	ld	r31, X
    4794:	1c 97       	sbiw	r26, 0x0c	; 12
    4796:	ee 0f       	add	r30, r30
    4798:	ff 1f       	adc	r31, r31
    479a:	ee 0f       	add	r30, r30
    479c:	ff 1f       	adc	r31, r31
    479e:	ee 0f       	add	r30, r30
    47a0:	ff 1f       	adc	r31, r31
    47a2:	e8 0f       	add	r30, r24
    47a4:	f9 1f       	adc	r31, r25
    47a6:	81 81       	ldd	r24, Z+1	; 0x01
    47a8:	82 95       	swap	r24
    47aa:	8f 70       	andi	r24, 0x0F	; 15
        /* Get SID information */
        if (frame_type == PCI_FF)
    47ac:	81 30       	cpi	r24, 0x01	; 1
    47ae:	11 f4       	brne	.+4      	; 0x47b4 <lin_tl_attach_service+0x78>
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][3];
    47b0:	63 81       	ldd	r22, Z+3	; 0x03
    47b2:	01 c0       	rjmp	.+2      	; 0x47b6 <lin_tl_attach_service+0x7a>
        }
        else
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][2];
    47b4:	62 81       	ldd	r22, Z+2	; 0x02
        }

        /* Callback to diagnostic layer to process SID */
        DIAG_SERVICE_CALLBACK_HANDLER(iii, sid);
    47b6:	8c 2f       	mov	r24, r28
    47b8:	0e 94 af 18 	call	0x315e	; 0x315e <lin_diag_service_callback>
    }
}
    47bc:	cf 91       	pop	r28
    47be:	1f 91       	pop	r17
    47c0:	0f 91       	pop	r16
    47c2:	08 95       	ret

000047c4 <tl_receive_message>:
 *                 ld_receive_message() function
 *
 * Implements    : tl_receive_message_Activity
 *END**************************************************************************/
static void tl_receive_message(l_ifc_handle iii)
{
    47c4:	9f 92       	push	r9
    47c6:	af 92       	push	r10
    47c8:	bf 92       	push	r11
    47ca:	cf 92       	push	r12
    47cc:	df 92       	push	r13
    47ce:	ef 92       	push	r14
    47d0:	ff 92       	push	r15
    47d2:	0f 93       	push	r16
    47d4:	1f 93       	push	r17
    47d6:	cf 93       	push	r28
    47d8:	df 93       	push	r29
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	28 97       	sbiw	r28, 0x08	; 8
    47e0:	cd bf       	out	0x3d, r28	; 61
    47e2:	de bf       	out	0x3e, r29	; 62
  lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    47e4:	a8 2e       	mov	r10, r24
    47e6:	b1 2c       	mov	r11, r1
    lin_tl_pdu_data_t pdu;
    l_u16 i;
    l_u16 data_index = 0U;
    l_u16 tmp_length = 0U;
    l_u8 PCI_type;
    l_u8* data = tl_desc_ptr->receive_message_ptr;
    47e8:	94 e3       	ldi	r25, 0x34	; 52
    47ea:	9a 9d       	mul	r25, r10
    47ec:	f0 01       	movw	r30, r0
    47ee:	9b 9d       	mul	r25, r11
    47f0:	f0 0d       	add	r31, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	ed 56       	subi	r30, 0x6D	; 109
    47f6:	f8 49       	sbci	r31, 0x98	; 152
    47f8:	e6 a4       	ldd	r14, Z+46	; 0x2e
    47fa:	f7 a4       	ldd	r15, Z+47	; 0x2f
    l_u8* NAD = tl_desc_ptr->receive_NAD_ptr;
    47fc:	c0 a8       	ldd	r12, Z+48	; 0x30
    47fe:	d1 a8       	ldd	r13, Z+49	; 0x31
    l_u16* length = tl_desc_ptr->receive_message_length_ptr;
    4800:	02 a9       	ldd	r16, Z+50	; 0x32
    4802:	13 a9       	ldd	r17, Z+51	; 0x33

    if (LD_NO_DATA != tl_desc_ptr->tl_rx_queue.queue_status)
    4804:	97 85       	ldd	r25, Z+15	; 0x0f
    4806:	99 23       	and	r25, r25
    4808:	09 f4       	brne	.+2      	; 0x480c <tl_receive_message+0x48>
    480a:	b9 c0       	rjmp	.+370    	; 0x497e <tl_receive_message+0x1ba>
    480c:	98 2e       	mov	r9, r24
        /* Message is received completely */
        /* get data from receive queue */
        /*
        * @violates MISRA 2012 Required Rule 1.3 Required
        */
        ld_get_raw(iii, pdu);
    480e:	be 01       	movw	r22, r28
    4810:	6f 5f       	subi	r22, 0xFF	; 255
    4812:	7f 4f       	sbci	r23, 0xFF	; 255
    4814:	8a 2d       	mov	r24, r10
    4816:	0e 94 54 22 	call	0x44a8	; 0x44a8 <ld_get_raw>
        /* Analyze data */
        if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    481a:	8c e1       	ldi	r24, 0x1C	; 28
    481c:	8a 9d       	mul	r24, r10
    481e:	f0 01       	movw	r30, r0
    4820:	8b 9d       	mul	r24, r11
    4822:	f0 0d       	add	r31, r0
    4824:	11 24       	eor	r1, r1
    4826:	e8 5b       	subi	r30, 0xB8	; 184
    4828:	fc 49       	sbci	r31, 0x9C	; 156
    482a:	83 81       	ldd	r24, Z+3	; 0x03
    482c:	88 23       	and	r24, r24
    482e:	19 f0       	breq	.+6      	; 0x4836 <tl_receive_message+0x72>
        {
            *NAD = pdu[0];
    4830:	89 81       	ldd	r24, Y+1	; 0x01
    4832:	f6 01       	movw	r30, r12
    4834:	80 83       	st	Z, r24
        }

        /* Check type of pdu */
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
    4836:	8a 81       	ldd	r24, Y+2	; 0x02
    4838:	98 2f       	mov	r25, r24
    483a:	92 95       	swap	r25
    483c:	9f 70       	andi	r25, 0x0F	; 15
        switch (PCI_type)
    483e:	19 f0       	breq	.+6      	; 0x4846 <tl_receive_message+0x82>
    4840:	91 30       	cpi	r25, 0x01	; 1
    4842:	21 f1       	breq	.+72     	; 0x488c <tl_receive_message+0xc8>
    4844:	91 c0       	rjmp	.+290    	; 0x4968 <tl_receive_message+0x1a4>
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    4846:	8f 70       	andi	r24, 0x0F	; 15
    4848:	90 e0       	ldi	r25, 0x00	; 0
                i = *length;
    484a:	f8 01       	movw	r30, r16
    484c:	40 81       	ld	r20, Z
    484e:	51 81       	ldd	r21, Z+1	; 0x01
                *length = tmp_length;
    4850:	80 83       	st	Z, r24
    4852:	91 83       	std	Z+1, r25	; 0x01
                if (i < tmp_length)
    4854:	48 17       	cp	r20, r24
    4856:	59 07       	cpc	r21, r25
    4858:	08 f0       	brcs	.+2      	; 0x485c <tl_receive_message+0x98>
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
        switch (PCI_type)
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    485a:	ac 01       	movw	r20, r24
                if (i < tmp_length)
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
    485c:	8b 81       	ldd	r24, Y+3	; 0x03
    485e:	f7 01       	movw	r30, r14
    4860:	80 83       	st	Z, r24
                for (i = 1U; i < tmp_length; i++)
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	0e c0       	rjmp	.+28     	; 0x4884 <tl_receive_message+0xc0>
                {
                    data[i] = pdu[i + 2U];
    4868:	d7 01       	movw	r26, r14
    486a:	a8 0f       	add	r26, r24
    486c:	b9 1f       	adc	r27, r25
    486e:	fc 01       	movw	r30, r24
    4870:	32 96       	adiw	r30, 0x02	; 2
    4872:	21 e0       	ldi	r18, 0x01	; 1
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	2c 0f       	add	r18, r28
    4878:	3d 1f       	adc	r19, r29
    487a:	e2 0f       	add	r30, r18
    487c:	f3 1f       	adc	r31, r19
    487e:	20 81       	ld	r18, Z
    4880:	2c 93       	st	X, r18
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
                for (i = 1U; i < tmp_length; i++)
    4882:	01 96       	adiw	r24, 0x01	; 1
    4884:	84 17       	cp	r24, r20
    4886:	95 07       	cpc	r25, r21
    4888:	78 f3       	brcs	.-34     	; 0x4868 <tl_receive_message+0xa4>
    488a:	6e c0       	rjmp	.+220    	; 0x4968 <tl_receive_message+0x1a4>
                }
                break;
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    488c:	8f 70       	andi	r24, 0x0F	; 15
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	98 2f       	mov	r25, r24
    4892:	88 27       	eor	r24, r24
    4894:	2b 81       	ldd	r18, Y+3	; 0x03
    4896:	82 0f       	add	r24, r18
    4898:	91 1d       	adc	r25, r1
                i = *length;
    489a:	f8 01       	movw	r30, r16
    489c:	c0 80       	ld	r12, Z
    489e:	d1 80       	ldd	r13, Z+1	; 0x01
                *length = tmp_length;
    48a0:	80 83       	st	Z, r24
    48a2:	91 83       	std	Z+1, r25	; 0x01
                if (i < tmp_length)
    48a4:	c8 16       	cp	r12, r24
    48a6:	d9 06       	cpc	r13, r25
    48a8:	08 f0       	brcs	.+2      	; 0x48ac <tl_receive_message+0xe8>
                }
                break;
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    48aa:	6c 01       	movw	r12, r24
                *length = tmp_length;
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
    48ac:	8c 81       	ldd	r24, Y+4	; 0x04
    48ae:	f7 01       	movw	r30, r14
    48b0:	80 83       	st	Z, r24
                for (i = 1U; i < 5U; i++)
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	0e c0       	rjmp	.+28     	; 0x48d4 <tl_receive_message+0x110>
                {
                    data[i] = pdu[i + 3U];
    48b8:	d7 01       	movw	r26, r14
    48ba:	a8 0f       	add	r26, r24
    48bc:	b9 1f       	adc	r27, r25
    48be:	fc 01       	movw	r30, r24
    48c0:	33 96       	adiw	r30, 0x03	; 3
    48c2:	21 e0       	ldi	r18, 0x01	; 1
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	2c 0f       	add	r18, r28
    48c8:	3d 1f       	adc	r19, r29
    48ca:	e2 0f       	add	r30, r18
    48cc:	f3 1f       	adc	r31, r19
    48ce:	20 81       	ld	r18, Z
    48d0:	2c 93       	st	X, r18
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
                for (i = 1U; i < 5U; i++)
    48d2:	01 96       	adiw	r24, 0x01	; 1
    48d4:	85 30       	cpi	r24, 0x05	; 5
    48d6:	91 05       	cpc	r25, r1
    48d8:	78 f3       	brcs	.-34     	; 0x48b8 <tl_receive_message+0xf4>
                {
                    data[i] = pdu[i + 3U];
                }

                tmp_length -= 5U;
    48da:	35 e0       	ldi	r19, 0x05	; 5
    48dc:	c3 1a       	sub	r12, r19
    48de:	d1 08       	sbc	r13, r1
                data_index += 5U;
    48e0:	05 e0       	ldi	r16, 0x05	; 5
    48e2:	10 e0       	ldi	r17, 0x00	; 0

                /* Consecutive frame */
                while (tmp_length > 6U)
    48e4:	1e c0       	rjmp	.+60     	; 0x4922 <tl_receive_message+0x15e>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    48e6:	be 01       	movw	r22, r28
    48e8:	6f 5f       	subi	r22, 0xFF	; 255
    48ea:	7f 4f       	sbci	r23, 0xFF	; 255
    48ec:	89 2d       	mov	r24, r9
    48ee:	0e 94 54 22 	call	0x44a8	; 0x44a8 <ld_get_raw>
                    for (i = 2U; i < 8U; i++)
    48f2:	22 e0       	ldi	r18, 0x02	; 2
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	0f c0       	rjmp	.+30     	; 0x4916 <tl_receive_message+0x152>
                    {
                        data[data_index] = pdu[i];
    48f8:	d7 01       	movw	r26, r14
    48fa:	a0 0f       	add	r26, r16
    48fc:	b1 1f       	adc	r27, r17
    48fe:	e1 e0       	ldi	r30, 0x01	; 1
    4900:	f0 e0       	ldi	r31, 0x00	; 0
    4902:	ec 0f       	add	r30, r28
    4904:	fd 1f       	adc	r31, r29
    4906:	e2 0f       	add	r30, r18
    4908:	f3 1f       	adc	r31, r19
    490a:	90 81       	ld	r25, Z
    490c:	9c 93       	st	X, r25
                        data_index++;
    490e:	0f 5f       	subi	r16, 0xFF	; 255
    4910:	1f 4f       	sbci	r17, 0xFF	; 255
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 2U; i < 8U; i++)
    4912:	2f 5f       	subi	r18, 0xFF	; 255
    4914:	3f 4f       	sbci	r19, 0xFF	; 255
    4916:	28 30       	cpi	r18, 0x08	; 8
    4918:	31 05       	cpc	r19, r1
    491a:	70 f3       	brcs	.-36     	; 0x48f8 <tl_receive_message+0x134>
                    {
                        data[data_index] = pdu[i];
                        data_index++;
                    }

                    tmp_length -= 6U;
    491c:	86 e0       	ldi	r24, 0x06	; 6
    491e:	c8 1a       	sub	r12, r24
    4920:	d1 08       	sbc	r13, r1

                tmp_length -= 5U;
                data_index += 5U;

                /* Consecutive frame */
                while (tmp_length > 6U)
    4922:	e7 e0       	ldi	r30, 0x07	; 7
    4924:	ce 16       	cp	r12, r30
    4926:	d1 04       	cpc	r13, r1
    4928:	f0 f6       	brcc	.-68     	; 0x48e6 <tl_receive_message+0x122>

                    tmp_length -= 6U;
                }

                /* Last frame */
                if (tmp_length > 0U)
    492a:	c1 14       	cp	r12, r1
    492c:	d1 04       	cpc	r13, r1
    492e:	e1 f0       	breq	.+56     	; 0x4968 <tl_receive_message+0x1a4>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    4930:	be 01       	movw	r22, r28
    4932:	6f 5f       	subi	r22, 0xFF	; 255
    4934:	7f 4f       	sbci	r23, 0xFF	; 255
    4936:	89 2d       	mov	r24, r9
    4938:	0e 94 54 22 	call	0x44a8	; 0x44a8 <ld_get_raw>
                    for (i = 0U; i < tmp_length; i++)
    493c:	80 e0       	ldi	r24, 0x00	; 0
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	10 c0       	rjmp	.+32     	; 0x4962 <tl_receive_message+0x19e>
                    {
                        data[data_index] = pdu[i + 2U];
    4942:	d7 01       	movw	r26, r14
    4944:	a0 0f       	add	r26, r16
    4946:	b1 1f       	adc	r27, r17
    4948:	fc 01       	movw	r30, r24
    494a:	32 96       	adiw	r30, 0x02	; 2
    494c:	21 e0       	ldi	r18, 0x01	; 1
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	2c 0f       	add	r18, r28
    4952:	3d 1f       	adc	r19, r29
    4954:	e2 0f       	add	r30, r18
    4956:	f3 1f       	adc	r31, r19
    4958:	20 81       	ld	r18, Z
    495a:	2c 93       	st	X, r18
                        data_index++;
    495c:	0f 5f       	subi	r16, 0xFF	; 255
    495e:	1f 4f       	sbci	r17, 0xFF	; 255
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 0U; i < tmp_length; i++)
    4960:	01 96       	adiw	r24, 0x01	; 1
    4962:	8c 15       	cp	r24, r12
    4964:	9d 05       	cpc	r25, r13
    4966:	68 f3       	brcs	.-38     	; 0x4942 <tl_receive_message+0x17e>
                break;
            default:
                /* do nothing */
                break;
        } /* end of switch */
        tl_desc_ptr->ld_return_data = false;
    4968:	84 e3       	ldi	r24, 0x34	; 52
    496a:	8a 9d       	mul	r24, r10
    496c:	f0 01       	movw	r30, r0
    496e:	8b 9d       	mul	r24, r11
    4970:	f0 0d       	add	r31, r0
    4972:	11 24       	eor	r1, r1
    4974:	ed 56       	subi	r30, 0x6D	; 109
    4976:	f8 49       	sbci	r31, 0x98	; 152
    4978:	14 a6       	std	Z+44, r1	; 0x2c
        tl_desc_ptr->rx_msg_status = LD_COMPLETED;
    497a:	82 e0       	ldi	r24, 0x02	; 2
    497c:	86 8b       	std	Z+22, r24	; 0x16
    }
}
    497e:	28 96       	adiw	r28, 0x08	; 8
    4980:	cd bf       	out	0x3d, r28	; 61
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	df 91       	pop	r29
    4986:	cf 91       	pop	r28
    4988:	1f 91       	pop	r17
    498a:	0f 91       	pop	r16
    498c:	ff 90       	pop	r15
    498e:	ef 90       	pop	r14
    4990:	df 90       	pop	r13
    4992:	cf 90       	pop	r12
    4994:	bf 90       	pop	r11
    4996:	af 90       	pop	r10
    4998:	9f 90       	pop	r9
    499a:	08 95       	ret

0000499c <tl_put_raw>:
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    499c:	cf 93       	push	r28
    499e:	df 93       	push	r29
    49a0:	fa 01       	movw	r30, r20
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Get transmit queue */
    queue_data = queue->tl_pdu_ptr;
    49a2:	c1 85       	ldd	r28, Z+9	; 0x09
    49a4:	d2 85       	ldd	r29, Z+10	; 0x0a

    /* check status of queue */
    if ((queue->queue_current_size < queue->queue_max_size) && ((data[0] != LD_FUNCTIONAL_NAD) || (queue_data[queue->queue_header][0] != LD_FUNCTIONAL_NAD)))
    49a6:	45 81       	ldd	r20, Z+5	; 0x05
    49a8:	56 81       	ldd	r21, Z+6	; 0x06
    49aa:	87 81       	ldd	r24, Z+7	; 0x07
    49ac:	90 85       	ldd	r25, Z+8	; 0x08
    49ae:	48 17       	cp	r20, r24
    49b0:	59 07       	cpc	r21, r25
    49b2:	08 f0       	brcs	.+2      	; 0x49b6 <tl_put_raw+0x1a>
    49b4:	5f c0       	rjmp	.+190    	; 0x4a74 <tl_put_raw+0xd8>
    49b6:	db 01       	movw	r26, r22
    49b8:	4c 91       	ld	r20, X
    49ba:	4e 37       	cpi	r20, 0x7E	; 126
    49bc:	71 f4       	brne	.+28     	; 0x49da <tl_put_raw+0x3e>
    49be:	a0 81       	ld	r26, Z
    49c0:	b1 81       	ldd	r27, Z+1	; 0x01
    49c2:	aa 0f       	add	r26, r26
    49c4:	bb 1f       	adc	r27, r27
    49c6:	aa 0f       	add	r26, r26
    49c8:	bb 1f       	adc	r27, r27
    49ca:	aa 0f       	add	r26, r26
    49cc:	bb 1f       	adc	r27, r27
    49ce:	ac 0f       	add	r26, r28
    49d0:	bd 1f       	adc	r27, r29
    49d2:	3c 91       	ld	r19, X
    49d4:	3e 37       	cpi	r19, 0x7E	; 126
    49d6:	09 f4       	brne	.+2      	; 0x49da <tl_put_raw+0x3e>
    49d8:	4d c0       	rjmp	.+154    	; 0x4a74 <tl_put_raw+0xd8>
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
    49da:	34 81       	ldd	r19, Z+4	; 0x04
    49dc:	35 30       	cpi	r19, 0x05	; 5
    49de:	11 f0       	breq	.+4      	; 0x49e4 <tl_put_raw+0x48>
    49e0:	31 11       	cpse	r19, r1
    49e2:	08 c0       	rjmp	.+16     	; 0x49f4 <tl_put_raw+0x58>
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    49e4:	21 11       	cpse	r18, r1
    49e6:	03 c0       	rjmp	.+6      	; 0x49ee <tl_put_raw+0x52>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    49e8:	84 e0       	ldi	r24, 0x04	; 4
    49ea:	84 83       	std	Z+4, r24	; 0x04
    49ec:	1e c0       	rjmp	.+60     	; 0x4a2a <tl_put_raw+0x8e>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    49ee:	81 e0       	ldi	r24, 0x01	; 1
    49f0:	84 83       	std	Z+4, r24	; 0x04
    49f2:	1b c0       	rjmp	.+54     	; 0x4a2a <tl_put_raw+0x8e>
            }
        }
        else
        {
            if ((data[0] == LD_FUNCTIONAL_NAD) && (TRANSMITTING == direction))
    49f4:	4e 37       	cpi	r20, 0x7E	; 126
    49f6:	71 f4       	brne	.+28     	; 0x4a14 <tl_put_raw+0x78>
    49f8:	21 11       	cpse	r18, r1
    49fa:	0c c0       	rjmp	.+24     	; 0x4a14 <tl_put_raw+0x78>
            {
                if (0U == queue->queue_header)
    49fc:	20 81       	ld	r18, Z
    49fe:	31 81       	ldd	r19, Z+1	; 0x01
    4a00:	23 2b       	or	r18, r19
    4a02:	11 f4       	brne	.+4      	; 0x4a08 <tl_put_raw+0x6c>
                {
                    queue->queue_header = queue->queue_max_size;
    4a04:	80 83       	st	Z, r24
    4a06:	91 83       	std	Z+1, r25	; 0x01
                }
                queue->queue_header--;
    4a08:	80 81       	ld	r24, Z
    4a0a:	91 81       	ldd	r25, Z+1	; 0x01
    4a0c:	01 97       	sbiw	r24, 0x01	; 1
    4a0e:	80 83       	st	Z, r24
    4a10:	91 83       	std	Z+1, r25	; 0x01
    4a12:	0b c0       	rjmp	.+22     	; 0x4a2a <tl_put_raw+0x8e>
            }
            else
            {
                queue->queue_tail++;
    4a14:	22 81       	ldd	r18, Z+2	; 0x02
    4a16:	33 81       	ldd	r19, Z+3	; 0x03
    4a18:	2f 5f       	subi	r18, 0xFF	; 255
    4a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a1c:	22 83       	std	Z+2, r18	; 0x02
    4a1e:	33 83       	std	Z+3, r19	; 0x03
                /* Check if queue size equal to queue tail */
                if (queue->queue_max_size == queue->queue_tail)
    4a20:	82 17       	cp	r24, r18
    4a22:	93 07       	cpc	r25, r19
    4a24:	11 f4       	brne	.+4      	; 0x4a2a <tl_put_raw+0x8e>
                {
                    queue->queue_tail = 0U;
    4a26:	12 82       	std	Z+2, r1	; 0x02
    4a28:	13 82       	std	Z+3, r1	; 0x03
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    4a2a:	50 e0       	ldi	r21, 0x00	; 0
    4a2c:	15 c0       	rjmp	.+42     	; 0x4a58 <tl_put_raw+0xbc>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
            {
                queue_data[queue->queue_tail][i] = data[i];
    4a2e:	82 81       	ldd	r24, Z+2	; 0x02
    4a30:	93 81       	ldd	r25, Z+3	; 0x03
    4a32:	88 0f       	add	r24, r24
    4a34:	99 1f       	adc	r25, r25
    4a36:	88 0f       	add	r24, r24
    4a38:	99 1f       	adc	r25, r25
    4a3a:	88 0f       	add	r24, r24
    4a3c:	99 1f       	adc	r25, r25
    4a3e:	8c 0f       	add	r24, r28
    4a40:	9d 1f       	adc	r25, r29
    4a42:	25 2f       	mov	r18, r21
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	db 01       	movw	r26, r22
    4a48:	a2 0f       	add	r26, r18
    4a4a:	b3 1f       	adc	r27, r19
    4a4c:	4c 91       	ld	r20, X
    4a4e:	dc 01       	movw	r26, r24
    4a50:	a2 0f       	add	r26, r18
    4a52:	b3 1f       	adc	r27, r19
    4a54:	4c 93       	st	X, r20
        }
        else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
    4a56:	5f 5f       	subi	r21, 0xFF	; 255
    4a58:	58 30       	cpi	r21, 0x08	; 8
    4a5a:	48 f3       	brcs	.-46     	; 0x4a2e <tl_put_raw+0x92>
                queue_data[queue->queue_tail][i] = data[i];
            }
        }

        /* update queue status */
        queue->queue_current_size++;
    4a5c:	85 81       	ldd	r24, Z+5	; 0x05
    4a5e:	96 81       	ldd	r25, Z+6	; 0x06
    4a60:	01 96       	adiw	r24, 0x01	; 1
    4a62:	85 83       	std	Z+5, r24	; 0x05
    4a64:	96 83       	std	Z+6, r25	; 0x06
        if (queue->queue_current_size >= queue->queue_max_size)
    4a66:	27 81       	ldd	r18, Z+7	; 0x07
    4a68:	30 85       	ldd	r19, Z+8	; 0x08
    4a6a:	82 17       	cp	r24, r18
    4a6c:	93 07       	cpc	r25, r19
    4a6e:	10 f0       	brcs	.+4      	; 0x4a74 <tl_put_raw+0xd8>
        {
            queue->queue_status = LD_QUEUE_FULL;
    4a70:	83 e0       	ldi	r24, 0x03	; 3
    4a72:	84 83       	std	Z+4, r24	; 0x04
        }
    }
}
    4a74:	df 91       	pop	r29
    4a76:	cf 91       	pop	r28
    4a78:	08 95       	ret

00004a7a <lin_process_single_frame>:
 * Description   : Process single frame.
 *
 * Implements    : lin_process_single_frame_Activity
 *END**************************************************************************/
static void lin_process_single_frame(l_ifc_handle iii)
{
    4a7a:	ff 92       	push	r15
    4a7c:	0f 93       	push	r16
    4a7e:	1f 93       	push	r17
    4a80:	cf 93       	push	r28
    4a82:	df 93       	push	r29
    l_u8 length;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    4a84:	08 2f       	mov	r16, r24
    4a86:	10 e0       	ldi	r17, 0x00	; 0
    const l_u8 * data = prot_state_ptr->response_buffer_ptr;
    4a88:	96 e1       	ldi	r25, 0x16	; 22
    4a8a:	90 9f       	mul	r25, r16
    4a8c:	f0 01       	movw	r30, r0
    4a8e:	91 9f       	mul	r25, r17
    4a90:	f0 0d       	add	r31, r0
    4a92:	11 24       	eor	r1, r1
    4a94:	e9 53       	subi	r30, 0x39	; 57
    4a96:	f8 49       	sbci	r31, 0x98	; 152
    4a98:	a2 81       	ldd	r26, Z+2	; 0x02
    4a9a:	b3 81       	ldd	r27, Z+3	; 0x03
    {
        master_data_ptr = &g_lin_master_data_array[g_lin_protocol_user_cfg_array[iii].master_ifc_handle];
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    length = (l_u8)(data[1] & 0x0FU);
    4a9c:	11 96       	adiw	r26, 0x01	; 1
    4a9e:	9c 91       	ld	r25, X
    4aa0:	11 97       	sbiw	r26, 0x01	; 1
    4aa2:	9f 70       	andi	r25, 0x0F	; 15
    /* check length of SF. If not valid, ignore this PDU */
    if (length <= 6U)
    4aa4:	97 30       	cpi	r25, 0x07	; 7
    4aa6:	08 f0       	brcs	.+2      	; 0x4aaa <lin_process_single_frame+0x30>
    4aa8:	50 c0       	rjmp	.+160    	; 0x4b4a <lin_process_single_frame+0xd0>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
        #if (SUPPORT_SLAVE_MODE == 1U)
            /* Slave interface */
            /* put PDU to rx queue */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    4aaa:	94 e3       	ldi	r25, 0x34	; 52
    4aac:	90 9f       	mul	r25, r16
    4aae:	f0 01       	movw	r30, r0
    4ab0:	91 9f       	mul	r25, r17
    4ab2:	f0 0d       	add	r31, r0
    4ab4:	11 24       	eor	r1, r1
    4ab6:	ed 56       	subi	r30, 0x6D	; 109
    4ab8:	f8 49       	sbci	r31, 0x98	; 152
    4aba:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    4abc:	91 e0       	ldi	r25, 0x01	; 1
    4abe:	93 a7       	std	Z+43, r25	; 0x2b
            /* reset queue header and queue tail */
            tl_desc_ptr->tl_rx_queue.queue_header = 0;
    4ac0:	13 86       	std	Z+11, r1	; 0x0b
    4ac2:	14 86       	std	Z+12, r1	; 0x0c
            tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    4ac4:	15 86       	std	Z+13, r1	; 0x0d
    4ac6:	16 86       	std	Z+14, r1	; 0x0e
            tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    4ac8:	10 8a       	std	Z+16, r1	; 0x10
    4aca:	11 8a       	std	Z+17, r1	; 0x11
            tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    4acc:	17 86       	std	Z+15, r1	; 0x0f

            if (data[0] == LD_FUNCTIONAL_NAD)
    4ace:	9c 91       	ld	r25, X
    4ad0:	9e 37       	cpi	r25, 0x7E	; 126
    4ad2:	59 f4       	brne	.+22     	; 0x4aea <lin_process_single_frame+0x70>
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_FUNCTIONAL;
    4ad4:	94 e3       	ldi	r25, 0x34	; 52
    4ad6:	90 9f       	mul	r25, r16
    4ad8:	f0 01       	movw	r30, r0
    4ada:	91 9f       	mul	r25, r17
    4adc:	f0 0d       	add	r31, r0
    4ade:	11 24       	eor	r1, r1
    4ae0:	ed 56       	subi	r30, 0x6D	; 109
    4ae2:	f8 49       	sbci	r31, 0x98	; 152
    4ae4:	96 e0       	ldi	r25, 0x06	; 6
    4ae6:	96 a3       	std	Z+38, r25	; 0x26
    4ae8:	0a c0       	rjmp	.+20     	; 0x4afe <lin_process_single_frame+0x84>
            }
            else
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    4aea:	94 e3       	ldi	r25, 0x34	; 52
    4aec:	90 9f       	mul	r25, r16
    4aee:	f0 01       	movw	r30, r0
    4af0:	91 9f       	mul	r25, r17
    4af2:	f0 0d       	add	r31, r0
    4af4:	11 24       	eor	r1, r1
    4af6:	ed 56       	subi	r30, 0x6D	; 109
    4af8:	f8 49       	sbci	r31, 0x98	; 152
    4afa:	95 e0       	ldi	r25, 0x05	; 5
    4afc:	96 a3       	std	Z+38, r25	; 0x26
    4afe:	f8 2e       	mov	r15, r24
            }

            /* put to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    4b00:	84 e3       	ldi	r24, 0x34	; 52
    4b02:	80 9f       	mul	r24, r16
    4b04:	e0 01       	movw	r28, r0
    4b06:	81 9f       	mul	r24, r17
    4b08:	d0 0d       	add	r29, r0
    4b0a:	11 24       	eor	r1, r1
    4b0c:	ae 01       	movw	r20, r28
    4b0e:	42 56       	subi	r20, 0x62	; 98
    4b10:	58 49       	sbci	r21, 0x98	; 152
    4b12:	21 e0       	ldi	r18, 0x01	; 1
    4b14:	bd 01       	movw	r22, r26
    4b16:	8f 2d       	mov	r24, r15
    4b18:	0e 94 ce 24 	call	0x499c	; 0x499c <tl_put_raw>
            tl_desc_ptr->frame_counter = 1;
    4b1c:	cd 56       	subi	r28, 0x6D	; 109
    4b1e:	d8 49       	sbci	r29, 0x98	; 152
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	8d a3       	std	Y+37, r24	; 0x25
            tl_desc_ptr->num_of_pdu = 1;
    4b24:	8c a3       	std	Y+36, r24	; 0x24
            lin_tl_attach_service(iii);
    4b26:	8f 2d       	mov	r24, r15
    4b28:	0e 94 9e 23 	call	0x473c	; 0x473c <lin_tl_attach_service>
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        }

        /* If ld_receive_message() function is called before SF pdu to be sent */
        if(tl_desc_ptr->ld_return_data)
    4b2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    4b2e:	88 23       	and	r24, r24
    4b30:	19 f0       	breq	.+6      	; 0x4b38 <lin_process_single_frame+0xbe>
        {
            tl_receive_message(iii);
    4b32:	8f 2d       	mov	r24, r15
    4b34:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <tl_receive_message>
        }
        tl_desc_ptr->FF_pdu_received = false;
    4b38:	84 e3       	ldi	r24, 0x34	; 52
    4b3a:	80 9f       	mul	r24, r16
    4b3c:	f0 01       	movw	r30, r0
    4b3e:	81 9f       	mul	r24, r17
    4b40:	f0 0d       	add	r31, r0
    4b42:	11 24       	eor	r1, r1
    4b44:	ed 56       	subi	r30, 0x6D	; 109
    4b46:	f8 49       	sbci	r31, 0x98	; 152
    4b48:	15 a6       	std	Z+45, r1	; 0x2d
    }
}
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	1f 91       	pop	r17
    4b50:	0f 91       	pop	r16
    4b52:	ff 90       	pop	r15
    4b54:	08 95       	ret

00004b56 <lin_process_first_frame>:
 * Description   : Process first frame.
 *
 * Implements    : lin_process_first_frame_Activity
 *END**************************************************************************/
static void lin_process_first_frame(l_ifc_handle iii)
{
    4b56:	0f 93       	push	r16
    4b58:	1f 93       	push	r17
    4b5a:	cf 93       	push	r28
    4b5c:	df 93       	push	r29
    l_u16 length;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    4b5e:	08 2f       	mov	r16, r24
    4b60:	10 e0       	ldi	r17, 0x00	; 0
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    4b62:	96 e1       	ldi	r25, 0x16	; 22
    4b64:	90 9f       	mul	r25, r16
    4b66:	f0 01       	movw	r30, r0
    4b68:	91 9f       	mul	r25, r17
    4b6a:	f0 0d       	add	r31, r0
    4b6c:	11 24       	eor	r1, r1
    4b6e:	e9 53       	subi	r30, 0x39	; 57
    4b70:	f8 49       	sbci	r31, 0x98	; 152
    4b72:	02 80       	ldd	r0, Z+2	; 0x02
    4b74:	f3 81       	ldd	r31, Z+3	; 0x03
    4b76:	e0 2d       	mov	r30, r0
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    /* for both MASTER and SLAVE */
    length = (l_u16)((((l_u16)data[1] & 0x0FU) << 8U) + (l_u16)data[2]);
    4b78:	c1 81       	ldd	r28, Z+1	; 0x01
    4b7a:	cf 70       	andi	r28, 0x0F	; 15
    4b7c:	d0 e0       	ldi	r29, 0x00	; 0
    4b7e:	dc 2f       	mov	r29, r28
    4b80:	cc 27       	eor	r28, r28
    4b82:	92 81       	ldd	r25, Z+2	; 0x02
    4b84:	c9 0f       	add	r28, r25
    4b86:	d1 1d       	adc	r29, r1
    /* check length of FF. If not valid, ignore this PDU */
    if ((length >= 7U) && (length <= prot_user_config_ptr->max_message_length))
    4b88:	c7 30       	cpi	r28, 0x07	; 7
    4b8a:	d1 05       	cpc	r29, r1
    4b8c:	08 f4       	brcc	.+2      	; 0x4b90 <lin_process_first_frame+0x3a>
    4b8e:	b7 c0       	rjmp	.+366    	; 0x4cfe <lin_process_first_frame+0x1a8>
    4b90:	9c e1       	ldi	r25, 0x1C	; 28
    4b92:	90 9f       	mul	r25, r16
    4b94:	d0 01       	movw	r26, r0
    4b96:	91 9f       	mul	r25, r17
    4b98:	b0 0d       	add	r27, r0
    4b9a:	11 24       	eor	r1, r1
    4b9c:	a8 5b       	subi	r26, 0xB8	; 184
    4b9e:	bc 49       	sbci	r27, 0x9C	; 156
    4ba0:	5a 96       	adiw	r26, 0x1a	; 26
    4ba2:	2d 91       	ld	r18, X+
    4ba4:	3c 91       	ld	r19, X
    4ba6:	5b 97       	sbiw	r26, 0x1b	; 27
    4ba8:	2c 17       	cp	r18, r28
    4baa:	3d 07       	cpc	r19, r29
    4bac:	08 f4       	brcc	.+2      	; 0x4bb0 <lin_process_first_frame+0x5a>
    4bae:	a7 c0       	rjmp	.+334    	; 0x4cfe <lin_process_first_frame+0x1a8>
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    4bb0:	90 9f       	mul	r25, r16
    4bb2:	d0 01       	movw	r26, r0
    4bb4:	91 9f       	mul	r25, r17
    4bb6:	b0 0d       	add	r27, r0
    4bb8:	11 24       	eor	r1, r1
    4bba:	a8 5b       	subi	r26, 0xB8	; 184
    4bbc:	bc 49       	sbci	r27, 0x9C	; 156
    4bbe:	13 96       	adiw	r26, 0x03	; 3
    4bc0:	9c 91       	ld	r25, X
    4bc2:	91 11       	cpse	r25, r1
    4bc4:	39 c0       	rjmp	.+114    	; 0x4c38 <lin_process_first_frame+0xe2>
        {
            /* For misra compliant rule 9.1 */
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    4bc6:	94 e3       	ldi	r25, 0x34	; 52
    4bc8:	90 9f       	mul	r25, r16
    4bca:	d0 01       	movw	r26, r0
    4bcc:	91 9f       	mul	r25, r17
    4bce:	b0 0d       	add	r27, r0
    4bd0:	11 24       	eor	r1, r1
    4bd2:	ad 56       	subi	r26, 0x6D	; 109
    4bd4:	b8 49       	sbci	r27, 0x98	; 152
    4bd6:	95 e0       	ldi	r25, 0x05	; 5
    4bd8:	96 96       	adiw	r26, 0x26	; 38
    4bda:	9c 93       	st	X, r25
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    4bdc:	9c e1       	ldi	r25, 0x1C	; 28
    4bde:	90 9f       	mul	r25, r16
    4be0:	d0 01       	movw	r26, r0
    4be2:	91 9f       	mul	r25, r17
    4be4:	b0 0d       	add	r27, r0
    4be6:	11 24       	eor	r1, r1
    4be8:	a8 5b       	subi	r26, 0xB8	; 184
    4bea:	bc 49       	sbci	r27, 0x9C	; 156
    4bec:	9c 91       	ld	r25, X
    4bee:	91 11       	cpse	r25, r1
    4bf0:	23 c0       	rjmp	.+70     	; 0x4c38 <lin_process_first_frame+0xe2>
            {
                /* Set check N_Cr timeout */
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    4bf2:	9c e1       	ldi	r25, 0x1C	; 28
    4bf4:	90 9f       	mul	r25, r16
    4bf6:	d0 01       	movw	r26, r0
    4bf8:	91 9f       	mul	r25, r17
    4bfa:	b0 0d       	add	r27, r0
    4bfc:	11 24       	eor	r1, r1
    4bfe:	a8 5b       	subi	r26, 0xB8	; 184
    4c00:	bc 49       	sbci	r27, 0x9C	; 156
    4c02:	52 96       	adiw	r26, 0x12	; 18
    4c04:	ac 91       	ld	r26, X
    4c06:	94 e2       	ldi	r25, 0x24	; 36
    4c08:	a9 9f       	mul	r26, r25
    4c0a:	d0 01       	movw	r26, r0
    4c0c:	11 24       	eor	r1, r1
    4c0e:	ac 59       	subi	r26, 0x9C	; 156
    4c10:	bc 49       	sbci	r27, 0x9C	; 156
    4c12:	5d 96       	adiw	r26, 0x1d	; 29
    4c14:	2d 91       	ld	r18, X+
    4c16:	3c 91       	ld	r19, X
    4c18:	5e 97       	sbiw	r26, 0x1e	; 30
    4c1a:	94 e3       	ldi	r25, 0x34	; 52
    4c1c:	90 9f       	mul	r25, r16
    4c1e:	d0 01       	movw	r26, r0
    4c20:	91 9f       	mul	r25, r17
    4c22:	b0 0d       	add	r27, r0
    4c24:	11 24       	eor	r1, r1
    4c26:	ad 56       	subi	r26, 0x6D	; 109
    4c28:	b8 49       	sbci	r27, 0x98	; 152
    4c2a:	90 96       	adiw	r26, 0x20	; 32
    4c2c:	2d 93       	st	X+, r18
    4c2e:	3c 93       	st	X, r19
    4c30:	91 97       	sbiw	r26, 0x21	; 33
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    4c32:	92 e0       	ldi	r25, 0x02	; 2
    4c34:	5f 96       	adiw	r26, 0x1f	; 31
    4c36:	9c 93       	st	X, r25
            }
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        /* put PDU to rx queue */
        /* reset queue header and queue tail */
        tl_desc_ptr->tl_rx_queue.queue_header = 0;
    4c38:	94 e3       	ldi	r25, 0x34	; 52
    4c3a:	90 9f       	mul	r25, r16
    4c3c:	a0 01       	movw	r20, r0
    4c3e:	91 9f       	mul	r25, r17
    4c40:	50 0d       	add	r21, r0
    4c42:	11 24       	eor	r1, r1
    4c44:	da 01       	movw	r26, r20
    4c46:	ad 56       	subi	r26, 0x6D	; 109
    4c48:	b8 49       	sbci	r27, 0x98	; 152
    4c4a:	1b 96       	adiw	r26, 0x0b	; 11
    4c4c:	1d 92       	st	X+, r1
    4c4e:	1c 92       	st	X, r1
    4c50:	1c 97       	sbiw	r26, 0x0c	; 12
        tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    4c52:	1d 96       	adiw	r26, 0x0d	; 13
    4c54:	1d 92       	st	X+, r1
    4c56:	1c 92       	st	X, r1
    4c58:	1e 97       	sbiw	r26, 0x0e	; 14
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    4c5a:	50 96       	adiw	r26, 0x10	; 16
    4c5c:	1d 92       	st	X+, r1
    4c5e:	1c 92       	st	X, r1
    4c60:	51 97       	sbiw	r26, 0x11	; 17
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    4c62:	1f 96       	adiw	r26, 0x0f	; 15
    4c64:	1c 92       	st	X, r1
        tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    4c66:	42 56       	subi	r20, 0x62	; 98
    4c68:	58 49       	sbci	r21, 0x98	; 152
    4c6a:	21 e0       	ldi	r18, 0x01	; 1
    4c6c:	bf 01       	movw	r22, r30
    4c6e:	0e 94 ce 24 	call	0x499c	; 0x499c <tl_put_raw>

        /* calculate number of PDU for this message */
        if (((length - 5U) % 6U) == 0U)
    4c72:	25 97       	sbiw	r28, 0x05	; 5
    4c74:	9e 01       	movw	r18, r28
    4c76:	ab ea       	ldi	r26, 0xAB	; 171
    4c78:	ba ea       	ldi	r27, 0xAA	; 170
    4c7a:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    4c7e:	96 95       	lsr	r25
    4c80:	87 95       	ror	r24
    4c82:	96 95       	lsr	r25
    4c84:	87 95       	ror	r24
    4c86:	9c 01       	movw	r18, r24
    4c88:	22 0f       	add	r18, r18
    4c8a:	33 1f       	adc	r19, r19
    4c8c:	82 0f       	add	r24, r18
    4c8e:	93 1f       	adc	r25, r19
    4c90:	88 0f       	add	r24, r24
    4c92:	99 1f       	adc	r25, r25
    4c94:	c8 17       	cp	r28, r24
    4c96:	d9 07       	cpc	r29, r25
    4c98:	89 f4       	brne	.+34     	; 0x4cbc <lin_process_first_frame+0x166>
        {
            tl_desc_ptr->num_of_pdu = (l_u8)((length - 5U) / 6U);
    4c9a:	9e 01       	movw	r18, r28
    4c9c:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    4ca0:	96 95       	lsr	r25
    4ca2:	87 95       	ror	r24
    4ca4:	96 95       	lsr	r25
    4ca6:	87 95       	ror	r24
    4ca8:	94 e3       	ldi	r25, 0x34	; 52
    4caa:	90 9f       	mul	r25, r16
    4cac:	f0 01       	movw	r30, r0
    4cae:	91 9f       	mul	r25, r17
    4cb0:	f0 0d       	add	r31, r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	ed 56       	subi	r30, 0x6D	; 109
    4cb6:	f8 49       	sbci	r31, 0x98	; 152
    4cb8:	84 a3       	std	Z+36, r24	; 0x24
    4cba:	13 c0       	rjmp	.+38     	; 0x4ce2 <lin_process_first_frame+0x18c>
        }
        else
        {
            tl_desc_ptr->num_of_pdu = (l_u8)(((length - 5U) / 6U) + 1U);
    4cbc:	9e 01       	movw	r18, r28
    4cbe:	ab ea       	ldi	r26, 0xAB	; 171
    4cc0:	ba ea       	ldi	r27, 0xAA	; 170
    4cc2:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    4cc6:	96 95       	lsr	r25
    4cc8:	87 95       	ror	r24
    4cca:	96 95       	lsr	r25
    4ccc:	87 95       	ror	r24
    4cce:	8f 5f       	subi	r24, 0xFF	; 255
    4cd0:	94 e3       	ldi	r25, 0x34	; 52
    4cd2:	90 9f       	mul	r25, r16
    4cd4:	f0 01       	movw	r30, r0
    4cd6:	91 9f       	mul	r25, r17
    4cd8:	f0 0d       	add	r31, r0
    4cda:	11 24       	eor	r1, r1
    4cdc:	ed 56       	subi	r30, 0x6D	; 109
    4cde:	f8 49       	sbci	r31, 0x98	; 152
    4ce0:	84 a3       	std	Z+36, r24	; 0x24
        }

        /* set frame counter = 1 */
        tl_desc_ptr->frame_counter = 1U;
    4ce2:	84 e3       	ldi	r24, 0x34	; 52
    4ce4:	80 9f       	mul	r24, r16
    4ce6:	f0 01       	movw	r30, r0
    4ce8:	81 9f       	mul	r24, r17
    4cea:	f0 0d       	add	r31, r0
    4cec:	11 24       	eor	r1, r1
    4cee:	ed 56       	subi	r30, 0x6D	; 109
    4cf0:	f8 49       	sbci	r31, 0x98	; 152
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	85 a3       	std	Z+37, r24	; 0x25
        tl_desc_ptr->service_status = LD_SERVICE_BUSY;
    4cf6:	13 a6       	std	Z+43, r1	; 0x2b

        /* Mark FF pdu is sent */
        tl_desc_ptr->FF_pdu_received = true;
    4cf8:	85 a7       	std	Z+45, r24	; 0x2d
        tl_desc_ptr->interleave_timeout_counter = 0;
    4cfa:	10 a6       	std	Z+40, r1	; 0x28
    4cfc:	11 a6       	std	Z+41, r1	; 0x29
    }
}
    4cfe:	df 91       	pop	r29
    4d00:	cf 91       	pop	r28
    4d02:	1f 91       	pop	r17
    4d04:	0f 91       	pop	r16
    4d06:	08 95       	ret

00004d08 <lin_process_consecutive_frame>:
 * Description   : Process consecutive frame.
 *
 * Implements    : lin_process_consecutive_frame_Activity
 *END**************************************************************************/
static void lin_process_consecutive_frame(l_ifc_handle iii)
{
    4d08:	ef 92       	push	r14
    4d0a:	ff 92       	push	r15
    4d0c:	1f 93       	push	r17
    4d0e:	cf 93       	push	r28
    4d10:	df 93       	push	r29
    4d12:	18 2f       	mov	r17, r24
    l_u8 tmp_frame_counter;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    4d14:	c8 2f       	mov	r28, r24
    4d16:	d0 e0       	ldi	r29, 0x00	; 0
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    4d18:	86 e1       	ldi	r24, 0x16	; 22
    4d1a:	8c 9f       	mul	r24, r28
    4d1c:	f0 01       	movw	r30, r0
    4d1e:	8d 9f       	mul	r24, r29
    4d20:	f0 0d       	add	r31, r0
    4d22:	11 24       	eor	r1, r1
    4d24:	e9 53       	subi	r30, 0x39	; 57
    4d26:	f8 49       	sbci	r31, 0x98	; 152
    4d28:	a2 81       	ldd	r26, Z+2	; 0x02
    4d2a:	b3 81       	ldd	r27, Z+3	; 0x03
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        /* for SLAVE */
        /* For misra compliant rule 9.1 */

        if (g_lin_protocol_user_cfg_array[iii].protocol_version == LIN_PROTOCOL_21)
    4d2c:	8c e1       	ldi	r24, 0x1C	; 28
    4d2e:	8c 9f       	mul	r24, r28
    4d30:	f0 01       	movw	r30, r0
    4d32:	8d 9f       	mul	r24, r29
    4d34:	f0 0d       	add	r31, r0
    4d36:	11 24       	eor	r1, r1
    4d38:	e8 5b       	subi	r30, 0xB8	; 184
    4d3a:	fc 49       	sbci	r31, 0x9C	; 156
    4d3c:	80 81       	ld	r24, Z
    4d3e:	81 11       	cpse	r24, r1
    4d40:	1d c0       	rjmp	.+58     	; 0x4d7c <lin_process_consecutive_frame+0x74>
        {
            /* Set check N_Cr timeout */
            tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    4d42:	8c e1       	ldi	r24, 0x1C	; 28
    4d44:	8c 9f       	mul	r24, r28
    4d46:	f0 01       	movw	r30, r0
    4d48:	8d 9f       	mul	r24, r29
    4d4a:	f0 0d       	add	r31, r0
    4d4c:	11 24       	eor	r1, r1
    4d4e:	e8 5b       	subi	r30, 0xB8	; 184
    4d50:	fc 49       	sbci	r31, 0x9C	; 156
    4d52:	e2 89       	ldd	r30, Z+18	; 0x12
    4d54:	24 e2       	ldi	r18, 0x24	; 36
    4d56:	e2 9f       	mul	r30, r18
    4d58:	f0 01       	movw	r30, r0
    4d5a:	11 24       	eor	r1, r1
    4d5c:	ec 59       	subi	r30, 0x9C	; 156
    4d5e:	fc 49       	sbci	r31, 0x9C	; 156
    4d60:	85 8d       	ldd	r24, Z+29	; 0x1d
    4d62:	96 8d       	ldd	r25, Z+30	; 0x1e
    4d64:	24 e3       	ldi	r18, 0x34	; 52
    4d66:	2c 9f       	mul	r18, r28
    4d68:	f0 01       	movw	r30, r0
    4d6a:	2d 9f       	mul	r18, r29
    4d6c:	f0 0d       	add	r31, r0
    4d6e:	11 24       	eor	r1, r1
    4d70:	ed 56       	subi	r30, 0x6D	; 109
    4d72:	f8 49       	sbci	r31, 0x98	; 152
    4d74:	80 a3       	std	Z+32, r24	; 0x20
    4d76:	91 a3       	std	Z+33, r25	; 0x21
            tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    4d78:	82 e0       	ldi	r24, 0x02	; 2
    4d7a:	87 8f       	std	Z+31, r24	; 0x1f
        }
        /* get frame counter of this PDU */
        tmp_frame_counter = (l_u8)(data[1] & 0x0FU);
    4d7c:	11 96       	adiw	r26, 0x01	; 1
    4d7e:	8c 91       	ld	r24, X
    4d80:	11 97       	sbiw	r26, 0x01	; 1
    4d82:	8f 70       	andi	r24, 0x0F	; 15
        /* Check valid frame counter */
        if (tmp_frame_counter == tl_desc_ptr->frame_counter)
    4d84:	94 e3       	ldi	r25, 0x34	; 52
    4d86:	9c 9f       	mul	r25, r28
    4d88:	f0 01       	movw	r30, r0
    4d8a:	9d 9f       	mul	r25, r29
    4d8c:	f0 0d       	add	r31, r0
    4d8e:	11 24       	eor	r1, r1
    4d90:	ed 56       	subi	r30, 0x6D	; 109
    4d92:	f8 49       	sbci	r31, 0x98	; 152
    4d94:	95 a1       	ldd	r25, Z+37	; 0x25
    4d96:	89 13       	cpse	r24, r25
    4d98:	2d c0       	rjmp	.+90     	; 0x4df4 <lin_process_consecutive_frame+0xec>
        {
            /* increase frame counter */
            tl_desc_ptr->frame_counter++;
    4d9a:	9f 5f       	subi	r25, 0xFF	; 255
    4d9c:	84 e3       	ldi	r24, 0x34	; 52
    4d9e:	8c 9f       	mul	r24, r28
    4da0:	f0 01       	movw	r30, r0
    4da2:	8d 9f       	mul	r24, r29
    4da4:	f0 0d       	add	r31, r0
    4da6:	11 24       	eor	r1, r1
    4da8:	ed 56       	subi	r30, 0x6D	; 109
    4daa:	f8 49       	sbci	r31, 0x98	; 152
    4dac:	95 a3       	std	Z+37, r25	; 0x25
            if (tl_desc_ptr->frame_counter > 15U)
    4dae:	90 31       	cpi	r25, 0x10	; 16
    4db0:	40 f0       	brcs	.+16     	; 0x4dc2 <lin_process_consecutive_frame+0xba>
            {
                tl_desc_ptr->frame_counter = 0U;
    4db2:	8c 9f       	mul	r24, r28
    4db4:	f0 01       	movw	r30, r0
    4db6:	8d 9f       	mul	r24, r29
    4db8:	f0 0d       	add	r31, r0
    4dba:	11 24       	eor	r1, r1
    4dbc:	ed 56       	subi	r30, 0x6D	; 109
    4dbe:	f8 49       	sbci	r31, 0x98	; 152
    4dc0:	15 a2       	std	Z+37, r1	; 0x25
            }

            /* decrease number of PDU to check message is complete */
            tl_desc_ptr->num_of_pdu--;
    4dc2:	84 e3       	ldi	r24, 0x34	; 52
    4dc4:	8c 9f       	mul	r24, r28
    4dc6:	a0 01       	movw	r20, r0
    4dc8:	8d 9f       	mul	r24, r29
    4dca:	50 0d       	add	r21, r0
    4dcc:	11 24       	eor	r1, r1
    4dce:	ca 01       	movw	r24, r20
    4dd0:	8d 56       	subi	r24, 0x6D	; 109
    4dd2:	98 49       	sbci	r25, 0x98	; 152
    4dd4:	7c 01       	movw	r14, r24
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	84 a1       	ldd	r24, Z+36	; 0x24
    4dda:	81 50       	subi	r24, 0x01	; 1
    4ddc:	84 a3       	std	Z+36, r24	; 0x24
            /* put PDU to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    4dde:	42 56       	subi	r20, 0x62	; 98
    4de0:	58 49       	sbci	r21, 0x98	; 152
    4de2:	21 e0       	ldi	r18, 0x01	; 1
    4de4:	bd 01       	movw	r22, r26
    4de6:	81 2f       	mov	r24, r17
    4de8:	0e 94 ce 24 	call	0x499c	; 0x499c <tl_put_raw>
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    4dec:	85 e0       	ldi	r24, 0x05	; 5
    4dee:	f7 01       	movw	r30, r14
    4df0:	86 a3       	std	Z+38, r24	; 0x26
    4df2:	22 c0       	rjmp	.+68     	; 0x4e38 <lin_process_consecutive_frame+0x130>
        }
        else
        {
            /* abort this message */
            if(tl_desc_ptr->ld_return_data)
    4df4:	84 e3       	ldi	r24, 0x34	; 52
    4df6:	8c 9f       	mul	r24, r28
    4df8:	f0 01       	movw	r30, r0
    4dfa:	8d 9f       	mul	r24, r29
    4dfc:	f0 0d       	add	r31, r0
    4dfe:	11 24       	eor	r1, r1
    4e00:	ed 56       	subi	r30, 0x6D	; 109
    4e02:	f8 49       	sbci	r31, 0x98	; 152
    4e04:	84 a5       	ldd	r24, Z+44	; 0x2c
    4e06:	88 23       	and	r24, r24
    4e08:	49 f0       	breq	.+18     	; 0x4e1c <lin_process_consecutive_frame+0x114>
            {
               tl_desc_ptr->ld_return_data = false;
    4e0a:	84 e3       	ldi	r24, 0x34	; 52
    4e0c:	8c 9f       	mul	r24, r28
    4e0e:	f0 01       	movw	r30, r0
    4e10:	8d 9f       	mul	r24, r29
    4e12:	f0 0d       	add	r31, r0
    4e14:	11 24       	eor	r1, r1
    4e16:	ed 56       	subi	r30, 0x6D	; 109
    4e18:	f8 49       	sbci	r31, 0x98	; 152
    4e1a:	14 a6       	std	Z+44, r1	; 0x2c
            }
            tl_desc_ptr->FF_pdu_received = false;
    4e1c:	84 e3       	ldi	r24, 0x34	; 52
    4e1e:	8c 9f       	mul	r24, r28
    4e20:	f0 01       	movw	r30, r0
    4e22:	8d 9f       	mul	r24, r29
    4e24:	f0 0d       	add	r31, r0
    4e26:	11 24       	eor	r1, r1
    4e28:	ed 56       	subi	r30, 0x6D	; 109
    4e2a:	f8 49       	sbci	r31, 0x98	; 152
    4e2c:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->rx_msg_status = LD_WRONG_SN;
    4e2e:	86 e0       	ldi	r24, 0x06	; 6
    4e30:	86 8b       	std	Z+22, r24	; 0x16
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    4e32:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state  = LD_DIAG_IDLE;
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	86 a3       	std	Z+38, r24	; 0x26
        }

        if (0U == tl_desc_ptr->num_of_pdu)
    4e38:	84 e3       	ldi	r24, 0x34	; 52
    4e3a:	8c 9f       	mul	r24, r28
    4e3c:	f0 01       	movw	r30, r0
    4e3e:	8d 9f       	mul	r24, r29
    4e40:	f0 0d       	add	r31, r0
    4e42:	11 24       	eor	r1, r1
    4e44:	ed 56       	subi	r30, 0x6D	; 109
    4e46:	f8 49       	sbci	r31, 0x98	; 152
    4e48:	84 a1       	ldd	r24, Z+36	; 0x24
    4e4a:	81 11       	cpse	r24, r1
    4e4c:	17 c0       	rjmp	.+46     	; 0x4e7c <lin_process_consecutive_frame+0x174>
        {
            /* message is received completely */
            /* set status is IDLE to receive new message */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    4e4e:	7f 01       	movw	r14, r30
    4e50:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	83 a7       	std	Z+43, r24	; 0x2b

            lin_tl_attach_service(iii);
    4e56:	81 2f       	mov	r24, r17
    4e58:	0e 94 9e 23 	call	0x473c	; 0x473c <lin_tl_attach_service>
            /* If ld_receive_message() function is called before FF pdu to be sent */
            if(tl_desc_ptr->ld_return_data)
    4e5c:	f7 01       	movw	r30, r14
    4e5e:	84 a5       	ldd	r24, Z+44	; 0x2c
    4e60:	88 23       	and	r24, r24
    4e62:	19 f0       	breq	.+6      	; 0x4e6a <lin_process_consecutive_frame+0x162>
            {
                tl_receive_message(iii);
    4e64:	81 2f       	mov	r24, r17
    4e66:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <tl_receive_message>
            }
            tl_desc_ptr->FF_pdu_received = false;
    4e6a:	84 e3       	ldi	r24, 0x34	; 52
    4e6c:	8c 9f       	mul	r24, r28
    4e6e:	f0 01       	movw	r30, r0
    4e70:	8d 9f       	mul	r24, r29
    4e72:	f0 0d       	add	r31, r0
    4e74:	11 24       	eor	r1, r1
    4e76:	ed 56       	subi	r30, 0x6D	; 109
    4e78:	f8 49       	sbci	r31, 0x98	; 152
    4e7a:	15 a6       	std	Z+45, r1	; 0x2d
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    }
}
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	1f 91       	pop	r17
    4e82:	ff 90       	pop	r15
    4e84:	ef 90       	pop	r14
    4e86:	08 95       	ret

00004e88 <lin_process_pdu>:
static void lin_process_pdu(l_ifc_handle iii,
                            const lin_tl_pdu_data_t * pdu)
{
    l_u8 pci_type;
#if (SUPPORT_SLAVE_MODE == 1U)
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    4e88:	28 2f       	mov	r18, r24
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    if ((bool)LIN_SLAVE == g_lin_protocol_user_cfg_array[iii].function)
    4e8c:	9c e1       	ldi	r25, 0x1C	; 28
    4e8e:	92 9f       	mul	r25, r18
    4e90:	f0 01       	movw	r30, r0
    4e92:	93 9f       	mul	r25, r19
    4e94:	f0 0d       	add	r31, r0
    4e96:	11 24       	eor	r1, r1
    4e98:	e8 5b       	subi	r30, 0xB8	; 184
    4e9a:	fc 49       	sbci	r31, 0x9C	; 156
    4e9c:	93 81       	ldd	r25, Z+3	; 0x03
    4e9e:	91 11       	cpse	r25, r1
    4ea0:	11 c0       	rjmp	.+34     	; 0x4ec4 <lin_process_pdu+0x3c>
    {
        g_lin_tl_descriptor_array[iii].slave_resp_cnt = 0U;
    4ea2:	94 e3       	ldi	r25, 0x34	; 52
    4ea4:	92 9f       	mul	r25, r18
    4ea6:	f0 01       	movw	r30, r0
    4ea8:	93 9f       	mul	r25, r19
    4eaa:	f0 0d       	add	r31, r0
    4eac:	11 24       	eor	r1, r1
    4eae:	ed 56       	subi	r30, 0x6D	; 109
    4eb0:	f8 49       	sbci	r31, 0x98	; 152
    4eb2:	12 a6       	std	Z+42, r1	; 0x2a
        /* clear queue */
        tl_desc_ptr->tl_tx_queue.queue_status = LD_QUEUE_EMPTY;
    4eb4:	95 e0       	ldi	r25, 0x05	; 5
    4eb6:	94 83       	std	Z+4, r25	; 0x04
        tl_desc_ptr->tl_tx_queue.queue_current_size = 0U;
    4eb8:	15 82       	std	Z+5, r1	; 0x05
    4eba:	16 82       	std	Z+6, r1	; 0x06
        tl_desc_ptr->tl_tx_queue.queue_header = tl_desc_ptr->tl_tx_queue.queue_tail;
    4ebc:	22 81       	ldd	r18, Z+2	; 0x02
    4ebe:	33 81       	ldd	r19, Z+3	; 0x03
    4ec0:	20 83       	st	Z, r18
    4ec2:	31 83       	std	Z+1, r19	; 0x01
    }
#endif /* End (SUPPORT_SLAVE_MODE == 1U) */

    /* get PCI type */
    pci_type = (l_u8)(((*pdu)[1] & 0xF0U) >> 4U);
    4ec4:	fb 01       	movw	r30, r22
    4ec6:	91 81       	ldd	r25, Z+1	; 0x01
    4ec8:	92 95       	swap	r25
    4eca:	9f 70       	andi	r25, 0x0F	; 15
    switch (pci_type)
    4ecc:	91 30       	cpi	r25, 0x01	; 1
    4ece:	39 f0       	breq	.+14     	; 0x4ede <lin_process_pdu+0x56>
    4ed0:	18 f0       	brcs	.+6      	; 0x4ed8 <lin_process_pdu+0x50>
    4ed2:	92 30       	cpi	r25, 0x02	; 2
    4ed4:	39 f0       	breq	.+14     	; 0x4ee4 <lin_process_pdu+0x5c>
    4ed6:	08 95       	ret
    {
        case PCI_SF:
            lin_process_single_frame(iii);
    4ed8:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <lin_process_single_frame>
            break;
    4edc:	08 95       	ret
        case PCI_FF:
            lin_process_first_frame(iii);
    4ede:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <lin_process_first_frame>
            break;
    4ee2:	08 95       	ret
        case PCI_CF:
            lin_process_consecutive_frame(iii);
    4ee4:	0e 94 84 26 	call	0x4d08	; 0x4d08 <lin_process_consecutive_frame>
    4ee8:	08 95       	ret

00004eea <lin_tl_handler_rx_completed>:
 * Implements    : lin_tl_handler_rx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_rx_completed(l_ifc_handle iii)
{
    l_u8 pci_type;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    4eea:	28 2f       	mov	r18, r24
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    4eee:	96 e1       	ldi	r25, 0x16	; 22
    4ef0:	92 9f       	mul	r25, r18
    4ef2:	f0 01       	movw	r30, r0
    4ef4:	93 9f       	mul	r25, r19
    4ef6:	f0 0d       	add	r31, r0
    4ef8:	11 24       	eor	r1, r1
    4efa:	e9 53       	subi	r30, 0x39	; 57
    4efc:	f8 49       	sbci	r31, 0x98	; 152
    4efe:	a2 81       	ldd	r26, Z+2	; 0x02
    4f00:	b3 81       	ldd	r27, Z+3	; 0x03
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    4f02:	9c e1       	ldi	r25, 0x1C	; 28
    4f04:	92 9f       	mul	r25, r18
    4f06:	f0 01       	movw	r30, r0
    4f08:	93 9f       	mul	r25, r19
    4f0a:	f0 0d       	add	r31, r0
    4f0c:	11 24       	eor	r1, r1
    4f0e:	e8 5b       	subi	r30, 0xB8	; 184
    4f10:	fc 49       	sbci	r31, 0x9C	; 156
    4f12:	43 81       	ldd	r20, Z+3	; 0x03
    4f14:	41 11       	cpse	r20, r1
    4f16:	3d c0       	rjmp	.+122    	; 0x4f92 <lin_tl_handler_rx_completed+0xa8>
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    4f18:	92 9f       	mul	r25, r18
    4f1a:	f0 01       	movw	r30, r0
    4f1c:	93 9f       	mul	r25, r19
    4f1e:	f0 0d       	add	r31, r0
    4f20:	11 24       	eor	r1, r1
    4f22:	e8 5b       	subi	r30, 0xB8	; 184
    4f24:	fc 49       	sbci	r31, 0x9C	; 156
    4f26:	62 89       	ldd	r22, Z+18	; 0x12
    4f28:	70 e0       	ldi	r23, 0x00	; 0
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    4f2a:	9c 91       	ld	r25, X
    4f2c:	52 e8       	ldi	r21, 0x82	; 130
    4f2e:	59 0f       	add	r21, r25
    4f30:	52 30       	cpi	r21, 0x02	; 2
    4f32:	28 f1       	brcs	.+74     	; 0x4f7e <lin_tl_handler_rx_completed+0x94>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    4f34:	54 e2       	ldi	r21, 0x24	; 36
    4f36:	56 9f       	mul	r21, r22
    4f38:	f0 01       	movw	r30, r0
    4f3a:	57 9f       	mul	r21, r23
    4f3c:	f0 0d       	add	r31, r0
    4f3e:	11 24       	eor	r1, r1
    4f40:	ec 59       	subi	r30, 0x9C	; 156
    4f42:	fc 49       	sbci	r31, 0x9C	; 156
    4f44:	01 90       	ld	r0, Z+
    4f46:	f0 81       	ld	r31, Z
    4f48:	e0 2d       	mov	r30, r0
    4f4a:	50 81       	ld	r21, Z
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    4f4c:	95 17       	cp	r25, r21
    4f4e:	29 f0       	breq	.+10     	; 0x4f5a <lin_tl_handler_rx_completed+0x70>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    4f50:	12 96       	adiw	r26, 0x02	; 2
    4f52:	5c 91       	ld	r21, X
    4f54:	12 97       	sbiw	r26, 0x02	; 2
    4f56:	50 3b       	cpi	r21, 0xB0	; 176
    4f58:	a1 f4       	brne	.+40     	; 0x4f82 <lin_tl_handler_rx_completed+0x98>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    4f5a:	54 e2       	ldi	r21, 0x24	; 36
    4f5c:	56 9f       	mul	r21, r22
    4f5e:	f0 01       	movw	r30, r0
    4f60:	57 9f       	mul	r21, r23
    4f62:	f0 0d       	add	r31, r0
    4f64:	11 24       	eor	r1, r1
    4f66:	ec 59       	subi	r30, 0x9C	; 156
    4f68:	fc 49       	sbci	r31, 0x9C	; 156
    4f6a:	52 81       	ldd	r21, Z+2	; 0x02
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    4f6c:	95 17       	cp	r25, r21
    4f6e:	59 f0       	breq	.+22     	; 0x4f86 <lin_tl_handler_rx_completed+0x9c>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    4f70:	12 96       	adiw	r26, 0x02	; 2
    4f72:	9c 91       	ld	r25, X
    4f74:	12 97       	sbiw	r26, 0x02	; 2
    4f76:	90 3b       	cpi	r25, 0xB0	; 176
    4f78:	41 f0       	breq	.+16     	; 0x4f8a <lin_tl_handler_rx_completed+0xa0>
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	07 c0       	rjmp	.+14     	; 0x4f8c <lin_tl_handler_rx_completed+0xa2>
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	05 c0       	rjmp	.+10     	; 0x4f8c <lin_tl_handler_rx_completed+0xa2>
    4f82:	91 e0       	ldi	r25, 0x01	; 1
    4f84:	03 c0       	rjmp	.+6      	; 0x4f8c <lin_tl_handler_rx_completed+0xa2>
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	01 c0       	rjmp	.+2      	; 0x4f8c <lin_tl_handler_rx_completed+0xa2>
    4f8a:	91 e0       	ldi	r25, 0x01	; 1
    4f8c:	59 2f       	mov	r21, r25
    4f8e:	51 70       	andi	r21, 0x01	; 1
    4f90:	01 c0       	rjmp	.+2      	; 0x4f94 <lin_tl_handler_rx_completed+0xaa>
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    4f92:	50 e0       	ldi	r21, 0x00	; 0
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    }
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    pci_type = (l_u8)(((*lin_tl_pdu)[1] & 0xF0U) >> 4U);
    4f94:	11 96       	adiw	r26, 0x01	; 1
    4f96:	9c 91       	ld	r25, X
    4f98:	11 97       	sbiw	r26, 0x01	; 1
    4f9a:	92 95       	swap	r25
    4f9c:	9f 70       	andi	r25, 0x0F	; 15
    /* check NAD whether or not belongs to this slave node */
    #if (SUPPORT_SLAVE_MODE == 1U)
    if (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (invalid_NAD || (pci_type > PCI_CF)))
    4f9e:	41 11       	cpse	r20, r1
    4fa0:	0e c0       	rjmp	.+28     	; 0x4fbe <lin_tl_handler_rx_completed+0xd4>
    4fa2:	51 11       	cpse	r21, r1
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <lin_tl_handler_rx_completed+0xc0>
    4fa6:	93 30       	cpi	r25, 0x03	; 3
    4fa8:	50 f0       	brcs	.+20     	; 0x4fbe <lin_tl_handler_rx_completed+0xd4>
    {
        tl_desc_ptr->slave_resp_cnt = 0;
    4faa:	84 e3       	ldi	r24, 0x34	; 52
    4fac:	82 9f       	mul	r24, r18
    4fae:	f0 01       	movw	r30, r0
    4fb0:	83 9f       	mul	r24, r19
    4fb2:	f0 0d       	add	r31, r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	ed 56       	subi	r30, 0x6D	; 109
    4fb8:	f8 49       	sbci	r31, 0x98	; 152
    4fba:	12 a6       	std	Z+42, r1	; 0x2a
    4fbc:	08 95       	ret
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    4fbe:	44 e3       	ldi	r20, 0x34	; 52
    4fc0:	42 9f       	mul	r20, r18
    4fc2:	f0 01       	movw	r30, r0
    4fc4:	43 9f       	mul	r20, r19
    4fc6:	f0 0d       	add	r31, r0
    4fc8:	11 24       	eor	r1, r1
    4fca:	ed 56       	subi	r30, 0x6D	; 109
    4fcc:	f8 49       	sbci	r31, 0x98	; 152
    4fce:	46 a1       	ldd	r20, Z+38	; 0x26
    4fd0:	45 30       	cpi	r20, 0x05	; 5
    4fd2:	11 f0       	breq	.+4      	; 0x4fd8 <lin_tl_handler_rx_completed+0xee>
    4fd4:	42 30       	cpi	r20, 0x02	; 2
    4fd6:	19 f4       	brne	.+6      	; 0x4fde <lin_tl_handler_rx_completed+0xf4>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
    4fd8:	4c 91       	ld	r20, X
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    4fda:	4e 37       	cpi	r20, 0x7E	; 126
    4fdc:	81 f0       	breq	.+32     	; 0x4ffe <lin_tl_handler_rx_completed+0x114>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
        {
            /* check error */
            if (!((tl_desc_ptr->service_status == LD_SERVICE_ERROR) && (pci_type == PCI_CF)))
    4fde:	44 e3       	ldi	r20, 0x34	; 52
    4fe0:	42 9f       	mul	r20, r18
    4fe2:	f0 01       	movw	r30, r0
    4fe4:	43 9f       	mul	r20, r19
    4fe6:	f0 0d       	add	r31, r0
    4fe8:	11 24       	eor	r1, r1
    4fea:	ed 56       	subi	r30, 0x6D	; 109
    4fec:	f8 49       	sbci	r31, 0x98	; 152
    4fee:	23 a5       	ldd	r18, Z+43	; 0x2b
    4ff0:	23 30       	cpi	r18, 0x03	; 3
    4ff2:	11 f4       	brne	.+4      	; 0x4ff8 <lin_tl_handler_rx_completed+0x10e>
    4ff4:	92 30       	cpi	r25, 0x02	; 2
    4ff6:	19 f0       	breq	.+6      	; 0x4ffe <lin_tl_handler_rx_completed+0x114>
            {
                /* process received PDU */
                lin_process_pdu(iii, lin_tl_pdu);
    4ff8:	bd 01       	movw	r22, r26
    4ffa:	0e 94 44 27 	call	0x4e88	; 0x4e88 <lin_process_pdu>
    4ffe:	08 95       	ret

00005000 <tl_get_raw>:
 *END**************************************************************************/
void tl_get_raw(l_ifc_handle iii,
                l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    5000:	0f 93       	push	r16
    5002:	1f 93       	push	r17
    5004:	cf 93       	push	r28
    5006:	df 93       	push	r29
    5008:	ea 01       	movw	r28, r20
    const lin_tl_pdu_data_t * queue_data;
    l_u8 i;
    l_u16 queue_header;
    tl_queue = queue;
    /* Get queue */
    queue_data = (const lin_tl_pdu_data_t *)tl_queue->tl_pdu_ptr;
    500a:	49 85       	ldd	r20, Y+9	; 0x09
    500c:	5a 85       	ldd	r21, Y+10	; 0x0a

    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    500e:	8d 81       	ldd	r24, Y+5	; 0x05
    5010:	9e 81       	ldd	r25, Y+6	; 0x06
    5012:	89 2b       	or	r24, r25
    5014:	d1 f1       	breq	.+116    	; 0x508a <tl_get_raw+0x8a>
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
    5016:	08 81       	ld	r16, Y
    5018:	19 81       	ldd	r17, Y+1	; 0x01
        for (i = 0U; i < 8U; i++)
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	13 c0       	rjmp	.+38     	; 0x5044 <tl_get_raw+0x44>
        {
            data[i] = queue_data[queue_header][i];
    501e:	83 2f       	mov	r24, r19
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	db 01       	movw	r26, r22
    5024:	a8 0f       	add	r26, r24
    5026:	b9 1f       	adc	r27, r25
    5028:	f8 01       	movw	r30, r16
    502a:	ee 0f       	add	r30, r30
    502c:	ff 1f       	adc	r31, r31
    502e:	ee 0f       	add	r30, r30
    5030:	ff 1f       	adc	r31, r31
    5032:	ee 0f       	add	r30, r30
    5034:	ff 1f       	adc	r31, r31
    5036:	e4 0f       	add	r30, r20
    5038:	f5 1f       	adc	r31, r21
    503a:	e8 0f       	add	r30, r24
    503c:	f9 1f       	adc	r31, r25
    503e:	80 81       	ld	r24, Z
    5040:	8c 93       	st	X, r24
    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
        for (i = 0U; i < 8U; i++)
    5042:	3f 5f       	subi	r19, 0xFF	; 255
    5044:	38 30       	cpi	r19, 0x08	; 8
    5046:	58 f3       	brcs	.-42     	; 0x501e <tl_get_raw+0x1e>
        {
            data[i] = queue_data[queue_header][i];
        }

        /* update queue status */
        if (0U == (--queue->queue_current_size))
    5048:	8d 81       	ldd	r24, Y+5	; 0x05
    504a:	9e 81       	ldd	r25, Y+6	; 0x06
    504c:	01 97       	sbiw	r24, 0x01	; 1
    504e:	8d 83       	std	Y+5, r24	; 0x05
    5050:	9e 83       	std	Y+6, r25	; 0x06
    5052:	89 2b       	or	r24, r25
    5054:	39 f4       	brne	.+14     	; 0x5064 <tl_get_raw+0x64>
        {
            if (TRANSMITTING == direction)
    5056:	21 11       	cpse	r18, r1
    5058:	03 c0       	rjmp	.+6      	; 0x5060 <tl_get_raw+0x60>
            {
                queue->queue_status = LD_QUEUE_EMPTY;
    505a:	85 e0       	ldi	r24, 0x05	; 5
    505c:	8c 83       	std	Y+4, r24	; 0x04
    505e:	15 c0       	rjmp	.+42     	; 0x508a <tl_get_raw+0x8a>
            }
            else
            {
                queue->queue_status = LD_NO_DATA;
    5060:	1c 82       	std	Y+4, r1	; 0x04
    5062:	13 c0       	rjmp	.+38     	; 0x508a <tl_get_raw+0x8a>
            }
        }
        else
        {
            if (TRANSMITTING == direction)
    5064:	21 11       	cpse	r18, r1
    5066:	03 c0       	rjmp	.+6      	; 0x506e <tl_get_raw+0x6e>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    5068:	84 e0       	ldi	r24, 0x04	; 4
    506a:	8c 83       	std	Y+4, r24	; 0x04
    506c:	02 c0       	rjmp	.+4      	; 0x5072 <tl_get_raw+0x72>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	8c 83       	std	Y+4, r24	; 0x04
            }
            /* change queue header */
            queue->queue_header++;
    5072:	88 81       	ld	r24, Y
    5074:	99 81       	ldd	r25, Y+1	; 0x01
    5076:	01 96       	adiw	r24, 0x01	; 1
    5078:	88 83       	st	Y, r24
    507a:	99 83       	std	Y+1, r25	; 0x01
            if (queue->queue_header == queue->queue_max_size)
    507c:	2f 81       	ldd	r18, Y+7	; 0x07
    507e:	38 85       	ldd	r19, Y+8	; 0x08
    5080:	82 17       	cp	r24, r18
    5082:	93 07       	cpc	r25, r19
    5084:	11 f4       	brne	.+4      	; 0x508a <tl_get_raw+0x8a>
            {
                queue->queue_header = 0U;
    5086:	18 82       	st	Y, r1
    5088:	19 82       	std	Y+1, r1	; 0x01
            }
        }
    }
    (void)iii;
}
    508a:	df 91       	pop	r29
    508c:	cf 91       	pop	r28
    508e:	1f 91       	pop	r17
    5090:	0f 91       	pop	r16
    5092:	08 95       	ret

00005094 <lin_tl_make_master_request_pdu>:
 * This function is implemented for Master
 *
 * Implements    : lin_tl_make_master_request_pdu_Activity
 *END**************************************************************************/
static void lin_tl_make_master_request_pdu(l_ifc_handle iii)
{
    5094:	cf 93       	push	r28
    5096:	df 93       	push	r29
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    5098:	28 2f       	mov	r18, r24
    509a:	30 e0       	ldi	r19, 0x00	; 0

    tl_get_raw(iii, prot_state_ptr->response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    509c:	94 e3       	ldi	r25, 0x34	; 52
    509e:	92 9f       	mul	r25, r18
    50a0:	a0 01       	movw	r20, r0
    50a2:	93 9f       	mul	r25, r19
    50a4:	50 0d       	add	r21, r0
    50a6:	11 24       	eor	r1, r1
    50a8:	4d 56       	subi	r20, 0x6D	; 109
    50aa:	58 49       	sbci	r21, 0x98	; 152
    50ac:	96 e1       	ldi	r25, 0x16	; 22
    50ae:	92 9f       	mul	r25, r18
    50b0:	e0 01       	movw	r28, r0
    50b2:	93 9f       	mul	r25, r19
    50b4:	d0 0d       	add	r29, r0
    50b6:	11 24       	eor	r1, r1
    50b8:	c9 53       	subi	r28, 0x39	; 57
    50ba:	d8 49       	sbci	r29, 0x98	; 152
    50bc:	6a 81       	ldd	r22, Y+2	; 0x02
    50be:	7b 81       	ldd	r23, Y+3	; 0x03
    50c0:	20 e0       	ldi	r18, 0x00	; 0
    50c2:	0e 94 00 28 	call	0x5000	; 0x5000 <tl_get_raw>
    prot_state_ptr->response_length = 8U;
    50c6:	88 e0       	ldi	r24, 0x08	; 8
    50c8:	8c 83       	std	Y+4, r24	; 0x04
}
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	08 95       	ret

000050d0 <lin_tl_get_pdu>:
 * Implements    : lin_tl_get_pdu_Activity
 *END**************************************************************************/
static void lin_tl_get_pdu(l_ifc_handle iii)
{
    /* Get data from tx queue */
    tl_get_raw(iii, g_lin_protocol_state_array[iii].response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    50d0:	28 2f       	mov	r18, r24
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	94 e3       	ldi	r25, 0x34	; 52
    50d6:	92 9f       	mul	r25, r18
    50d8:	a0 01       	movw	r20, r0
    50da:	93 9f       	mul	r25, r19
    50dc:	50 0d       	add	r21, r0
    50de:	11 24       	eor	r1, r1
    50e0:	4d 56       	subi	r20, 0x6D	; 109
    50e2:	58 49       	sbci	r21, 0x98	; 152
    50e4:	96 e1       	ldi	r25, 0x16	; 22
    50e6:	92 9f       	mul	r25, r18
    50e8:	f0 01       	movw	r30, r0
    50ea:	93 9f       	mul	r25, r19
    50ec:	f0 0d       	add	r31, r0
    50ee:	11 24       	eor	r1, r1
    50f0:	e9 53       	subi	r30, 0x39	; 57
    50f2:	f8 49       	sbci	r31, 0x98	; 152
    50f4:	62 81       	ldd	r22, Z+2	; 0x02
    50f6:	73 81       	ldd	r23, Z+3	; 0x03
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	0e 94 00 28 	call	0x5000	; 0x5000 <tl_get_raw>
    50fe:	08 95       	ret

00005100 <lin_tl_callback_handler>:
 * Implements    : lin_tl_callback_handler_Activity
 *END**************************************************************************/
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    5100:	0f 93       	push	r16
    5102:	1f 93       	push	r17
    5104:	e6 2f       	mov	r30, r22
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    5106:	68 2f       	mov	r22, r24
    5108:	70 e0       	ldi	r23, 0x00	; 0
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;

    switch (tl_event_id)
    510a:	0e 2f       	mov	r16, r30
    510c:	10 e0       	ldi	r17, 0x00	; 0
    510e:	08 30       	cpi	r16, 0x08	; 8
    5110:	11 05       	cpc	r17, r1
    5112:	08 f0       	brcs	.+2      	; 0x5116 <lin_tl_callback_handler+0x16>
    5114:	61 c0       	rjmp	.+194    	; 0x51d8 <lin_tl_callback_handler+0xd8>
    5116:	f8 01       	movw	r30, r16
    5118:	e9 56       	subi	r30, 0x69	; 105
    511a:	ff 4f       	sbci	r31, 0xFF	; 255
    511c:	0c 94 03 3b 	jmp	0x7606	; 0x7606 <__tablejump2__>
    {
        case TL_RECEIVE_MESSAGE:
            /* If ld_receive_message is called and first frame in multi PDU is not transmitted */
            if ((tl_desc_ptr->rx_msg_status == LD_IN_PROGRESS) && (tl_desc_ptr->FF_pdu_received == false))
    5120:	84 e3       	ldi	r24, 0x34	; 52
    5122:	86 9f       	mul	r24, r22
    5124:	f0 01       	movw	r30, r0
    5126:	87 9f       	mul	r24, r23
    5128:	f0 0d       	add	r31, r0
    512a:	11 24       	eor	r1, r1
    512c:	ed 56       	subi	r30, 0x6D	; 109
    512e:	f8 49       	sbci	r31, 0x98	; 152
    5130:	86 89       	ldd	r24, Z+22	; 0x16
    5132:	81 30       	cpi	r24, 0x01	; 1
    5134:	09 f0       	breq	.+2      	; 0x5138 <lin_tl_callback_handler+0x38>
    5136:	52 c0       	rjmp	.+164    	; 0x51dc <lin_tl_callback_handler+0xdc>
    5138:	84 e3       	ldi	r24, 0x34	; 52
    513a:	86 9f       	mul	r24, r22
    513c:	f0 01       	movw	r30, r0
    513e:	87 9f       	mul	r24, r23
    5140:	f0 0d       	add	r31, r0
    5142:	11 24       	eor	r1, r1
    5144:	ed 56       	subi	r30, 0x6D	; 109
    5146:	f8 49       	sbci	r31, 0x98	; 152
    5148:	85 a5       	ldd	r24, Z+45	; 0x2d
    514a:	81 11       	cpse	r24, r1
    514c:	49 c0       	rjmp	.+146    	; 0x51e0 <lin_tl_callback_handler+0xe0>
            {
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
    514e:	84 e3       	ldi	r24, 0x34	; 52
    5150:	86 9f       	mul	r24, r22
    5152:	f0 01       	movw	r30, r0
    5154:	87 9f       	mul	r24, r23
    5156:	f0 0d       	add	r31, r0
    5158:	11 24       	eor	r1, r1
    515a:	ed 56       	subi	r30, 0x6D	; 109
    515c:	f8 49       	sbci	r31, 0x98	; 152
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	84 a7       	std	Z+44, r24	; 0x2c
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    5162:	80 e0       	ldi	r24, 0x00	; 0
    5164:	42 c0       	rjmp	.+132    	; 0x51ea <lin_tl_callback_handler+0xea>
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
            }
            break;
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
    5166:	0e 94 4a 28 	call	0x5094	; 0x5094 <lin_tl_make_master_request_pdu>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    516a:	80 e0       	ldi	r24, 0x00	; 0
              tl_desc_ptr->ld_return_data = true;
            }
            break;
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
            break;
    516c:	3e c0       	rjmp	.+124    	; 0x51ea <lin_tl_callback_handler+0xea>
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
    516e:	94 e3       	ldi	r25, 0x34	; 52
    5170:	96 9f       	mul	r25, r22
    5172:	f0 01       	movw	r30, r0
    5174:	97 9f       	mul	r25, r23
    5176:	f0 0d       	add	r31, r0
    5178:	11 24       	eor	r1, r1
    517a:	ed 56       	subi	r30, 0x6D	; 109
    517c:	f8 49       	sbci	r31, 0x98	; 152
    517e:	92 a5       	ldd	r25, Z+42	; 0x2a
    5180:	99 23       	and	r25, r25
    5182:	81 f1       	breq	.+96     	; 0x51e4 <lin_tl_callback_handler+0xe4>
    5184:	24 e3       	ldi	r18, 0x34	; 52
    5186:	26 9f       	mul	r18, r22
    5188:	f0 01       	movw	r30, r0
    518a:	27 9f       	mul	r18, r23
    518c:	f0 0d       	add	r31, r0
    518e:	11 24       	eor	r1, r1
    5190:	ed 56       	subi	r30, 0x6D	; 109
    5192:	f8 49       	sbci	r31, 0x98	; 152
    5194:	23 a5       	ldd	r18, Z+43	; 0x2b
    5196:	23 30       	cpi	r18, 0x03	; 3
    5198:	39 f1       	breq	.+78     	; 0x51e8 <lin_tl_callback_handler+0xe8>
            {
                tl_desc_ptr->slave_resp_cnt--;
    519a:	24 e3       	ldi	r18, 0x34	; 52
    519c:	26 9f       	mul	r18, r22
    519e:	f0 01       	movw	r30, r0
    51a0:	27 9f       	mul	r18, r23
    51a2:	f0 0d       	add	r31, r0
    51a4:	11 24       	eor	r1, r1
    51a6:	ed 56       	subi	r30, 0x6D	; 109
    51a8:	f8 49       	sbci	r31, 0x98	; 152
    51aa:	91 50       	subi	r25, 0x01	; 1
    51ac:	92 a7       	std	Z+42, r25	; 0x2a
                lin_tl_get_pdu(iii);
    51ae:	0e 94 68 28 	call	0x50d0	; 0x50d0 <lin_tl_get_pdu>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    51b2:	80 e0       	ldi	r24, 0x00	; 0
            break;
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
            {
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
    51b4:	1a c0       	rjmp	.+52     	; 0x51ea <lin_tl_callback_handler+0xea>
            {
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
    51b6:	0e 94 38 23 	call	0x4670	; 0x4670 <lin_tl_handler_tx_completed>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    51ba:	80 e0       	ldi	r24, 0x00	; 0
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
            break;
    51bc:	16 c0       	rjmp	.+44     	; 0x51ea <lin_tl_callback_handler+0xea>
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
    51be:	0e 94 75 27 	call	0x4eea	; 0x4eea <lin_tl_handler_rx_completed>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    51c2:	80 e0       	ldi	r24, 0x00	; 0
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
            break;
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
            break;
    51c4:	12 c0       	rjmp	.+36     	; 0x51ea <lin_tl_callback_handler+0xea>
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
    51c6:	64 2f       	mov	r22, r20
    51c8:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <lin_tl_handler_error>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    51cc:	80 e0       	ldi	r24, 0x00	; 0
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
            break;
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
            break;
    51ce:	0d c0       	rjmp	.+26     	; 0x51ea <lin_tl_callback_handler+0xea>
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
    51d0:	0e 94 67 22 	call	0x44ce	; 0x44ce <lin_tl_handle_timeout>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    51d4:	80 e0       	ldi	r24, 0x00	; 0
            lin_tl_handler_error(iii, id);
            break;
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
            break;
    51d6:	09 c0       	rjmp	.+18     	; 0x51ea <lin_tl_callback_handler+0xea>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	07 c0       	rjmp	.+14     	; 0x51ea <lin_tl_callback_handler+0xea>
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	05 c0       	rjmp	.+10     	; 0x51ea <lin_tl_callback_handler+0xea>
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	03 c0       	rjmp	.+6      	; 0x51ea <lin_tl_callback_handler+0xea>
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
            }
            else
            {
                ret_val = TL_ACTION_ID_IGNORE;
    51e4:	81 e0       	ldi	r24, 0x01	; 1
    51e6:	01 c0       	rjmp	.+2      	; 0x51ea <lin_tl_callback_handler+0xea>
    51e8:	81 e0       	ldi	r24, 0x01	; 1
            /* Do nothing */
            break;
    }

    return ret_val;
}
    51ea:	1f 91       	pop	r17
    51ec:	0f 91       	pop	r16
    51ee:	08 95       	ret

000051f0 <touch_ptc_pin_config>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
    51f0:	e4 e3       	ldi	r30, 0x34	; 52
    51f2:	f4 e0       	ldi	r31, 0x04	; 4
    51f4:	80 81       	ld	r24, Z
    51f6:	87 7f       	andi	r24, 0xF7	; 247
    51f8:	80 83       	st	Z, r24
    51fa:	80 81       	ld	r24, Z
    51fc:	88 7f       	andi	r24, 0xF8	; 248
    51fe:	84 60       	ori	r24, 0x04	; 4
    5200:	80 83       	st	Z, r24
    5202:	e5 e3       	ldi	r30, 0x35	; 53
    5204:	f4 e0       	ldi	r31, 0x04	; 4
    5206:	80 81       	ld	r24, Z
    5208:	87 7f       	andi	r24, 0xF7	; 247
    520a:	80 83       	st	Z, r24
    520c:	80 81       	ld	r24, Z
    520e:	88 7f       	andi	r24, 0xF8	; 248
    5210:	84 60       	ori	r24, 0x04	; 4
    5212:	80 83       	st	Z, r24
    5214:	e7 e1       	ldi	r30, 0x17	; 23
    5216:	f4 e0       	ldi	r31, 0x04	; 4
    5218:	80 81       	ld	r24, Z
    521a:	87 7f       	andi	r24, 0xF7	; 247
    521c:	80 83       	st	Z, r24
    521e:	80 81       	ld	r24, Z
    5220:	88 7f       	andi	r24, 0xF8	; 248
    5222:	84 60       	ori	r24, 0x04	; 4
    5224:	80 83       	st	Z, r24
    5226:	e7 e7       	ldi	r30, 0x77	; 119
    5228:	f4 e0       	ldi	r31, 0x04	; 4
    522a:	80 81       	ld	r24, Z
    522c:	87 7f       	andi	r24, 0xF7	; 247
    522e:	80 83       	st	Z, r24
    5230:	80 81       	ld	r24, Z
    5232:	88 7f       	andi	r24, 0xF8	; 248
    5234:	84 60       	ori	r24, 0x04	; 4
    5236:	80 83       	st	Z, r24
    5238:	e4 e9       	ldi	r30, 0x94	; 148
    523a:	f4 e0       	ldi	r31, 0x04	; 4
    523c:	80 81       	ld	r24, Z
    523e:	87 7f       	andi	r24, 0xF7	; 247
    5240:	80 83       	st	Z, r24
    5242:	80 81       	ld	r24, Z
    5244:	88 7f       	andi	r24, 0xF8	; 248
    5246:	84 60       	ori	r24, 0x04	; 4
    5248:	80 83       	st	Z, r24
    524a:	e2 e7       	ldi	r30, 0x72	; 114
    524c:	f4 e0       	ldi	r31, 0x04	; 4
    524e:	80 81       	ld	r24, Z
    5250:	87 7f       	andi	r24, 0xF7	; 247
    5252:	80 83       	st	Z, r24
    5254:	80 81       	ld	r24, Z
    5256:	88 7f       	andi	r24, 0xF8	; 248
    5258:	84 60       	ori	r24, 0x04	; 4
    525a:	80 83       	st	Z, r24
    525c:	e5 e1       	ldi	r30, 0x15	; 21
    525e:	f4 e0       	ldi	r31, 0x04	; 4
    5260:	80 81       	ld	r24, Z
    5262:	87 7f       	andi	r24, 0xF7	; 247
    5264:	80 83       	st	Z, r24
    5266:	80 81       	ld	r24, Z
    5268:	88 7f       	andi	r24, 0xF8	; 248
    526a:	84 60       	ori	r24, 0x04	; 4
    526c:	80 83       	st	Z, r24
    526e:	e4 e1       	ldi	r30, 0x14	; 20
    5270:	f4 e0       	ldi	r31, 0x04	; 4
    5272:	80 81       	ld	r24, Z
    5274:	87 7f       	andi	r24, 0xF7	; 247
    5276:	80 83       	st	Z, r24
    5278:	80 81       	ld	r24, Z
    527a:	88 7f       	andi	r24, 0xF8	; 248
    527c:	84 60       	ori	r24, 0x04	; 4
    527e:	80 83       	st	Z, r24
    5280:	e0 e3       	ldi	r30, 0x30	; 48
    5282:	f4 e0       	ldi	r31, 0x04	; 4
    5284:	80 81       	ld	r24, Z
    5286:	87 7f       	andi	r24, 0xF7	; 247
    5288:	80 83       	st	Z, r24
    528a:	80 81       	ld	r24, Z
    528c:	88 7f       	andi	r24, 0xF8	; 248
    528e:	84 60       	ori	r24, 0x04	; 4
    5290:	80 83       	st	Z, r24
    5292:	e1 e3       	ldi	r30, 0x31	; 49
    5294:	f4 e0       	ldi	r31, 0x04	; 4
    5296:	80 81       	ld	r24, Z
    5298:	87 7f       	andi	r24, 0xF7	; 247
    529a:	80 83       	st	Z, r24
    529c:	80 81       	ld	r24, Z
    529e:	88 7f       	andi	r24, 0xF8	; 248
    52a0:	84 60       	ori	r24, 0x04	; 4
    52a2:	80 83       	st	Z, r24
    52a4:	e2 e3       	ldi	r30, 0x32	; 50
    52a6:	f4 e0       	ldi	r31, 0x04	; 4
    52a8:	80 81       	ld	r24, Z
    52aa:	87 7f       	andi	r24, 0xF7	; 247
    52ac:	80 83       	st	Z, r24
    52ae:	80 81       	ld	r24, Z
    52b0:	88 7f       	andi	r24, 0xF8	; 248
    52b2:	84 60       	ori	r24, 0x04	; 4
    52b4:	80 83       	st	Z, r24
    52b6:	e3 e3       	ldi	r30, 0x33	; 51
    52b8:	f4 e0       	ldi	r31, 0x04	; 4
    52ba:	80 81       	ld	r24, Z
    52bc:	87 7f       	andi	r24, 0xF7	; 247
    52be:	80 83       	st	Z, r24
    52c0:	80 81       	ld	r24, Z
    52c2:	88 7f       	andi	r24, 0xF8	; 248
    52c4:	84 60       	ori	r24, 0x04	; 4
    52c6:	80 83       	st	Z, r24
    52c8:	e6 e1       	ldi	r30, 0x16	; 22
    52ca:	f4 e0       	ldi	r31, 0x04	; 4
    52cc:	80 81       	ld	r24, Z
    52ce:	87 7f       	andi	r24, 0xF7	; 247
    52d0:	80 83       	st	Z, r24
    52d2:	80 81       	ld	r24, Z
    52d4:	88 7f       	andi	r24, 0xF8	; 248
    52d6:	84 60       	ori	r24, 0x04	; 4
    52d8:	80 83       	st	Z, r24
    52da:	e0 e7       	ldi	r30, 0x70	; 112
    52dc:	f4 e0       	ldi	r31, 0x04	; 4
    52de:	80 81       	ld	r24, Z
    52e0:	87 7f       	andi	r24, 0xF7	; 247
    52e2:	80 83       	st	Z, r24
    52e4:	80 81       	ld	r24, Z
    52e6:	88 7f       	andi	r24, 0xF8	; 248
    52e8:	84 60       	ori	r24, 0x04	; 4
    52ea:	80 83       	st	Z, r24
    52ec:	e1 e7       	ldi	r30, 0x71	; 113
    52ee:	f4 e0       	ldi	r31, 0x04	; 4
    52f0:	80 81       	ld	r24, Z
    52f2:	87 7f       	andi	r24, 0xF7	; 247
    52f4:	80 83       	st	Z, r24
    52f6:	80 81       	ld	r24, Z
    52f8:	88 7f       	andi	r24, 0xF8	; 248
    52fa:	84 60       	ori	r24, 0x04	; 4
    52fc:	80 83       	st	Z, r24
    52fe:	e7 e3       	ldi	r30, 0x37	; 55
    5300:	f4 e0       	ldi	r31, 0x04	; 4
    5302:	80 81       	ld	r24, Z
    5304:	87 7f       	andi	r24, 0xF7	; 247
    5306:	80 83       	st	Z, r24
    5308:	80 81       	ld	r24, Z
    530a:	88 7f       	andi	r24, 0xF8	; 248
    530c:	84 60       	ori	r24, 0x04	; 4
    530e:	80 83       	st	Z, r24
    5310:	e6 e3       	ldi	r30, 0x36	; 54
    5312:	f4 e0       	ldi	r31, 0x04	; 4
    5314:	80 81       	ld	r24, Z
    5316:	87 7f       	andi	r24, 0xF7	; 247
    5318:	80 83       	st	Z, r24
    531a:	80 81       	ld	r24, Z
    531c:	88 7f       	andi	r24, 0xF8	; 248
    531e:	84 60       	ori	r24, 0x04	; 4
    5320:	80 83       	st	Z, r24
    5322:	e3 e7       	ldi	r30, 0x73	; 115
    5324:	f4 e0       	ldi	r31, 0x04	; 4
    5326:	80 81       	ld	r24, Z
    5328:	87 7f       	andi	r24, 0xF7	; 247
    532a:	80 83       	st	Z, r24
    532c:	80 81       	ld	r24, Z
    532e:	88 7f       	andi	r24, 0xF8	; 248
    5330:	84 60       	ori	r24, 0x04	; 4
    5332:	80 83       	st	Z, r24
    5334:	e4 e7       	ldi	r30, 0x74	; 116
    5336:	f4 e0       	ldi	r31, 0x04	; 4
    5338:	80 81       	ld	r24, Z
    533a:	87 7f       	andi	r24, 0xF7	; 247
    533c:	80 83       	st	Z, r24
    533e:	80 81       	ld	r24, Z
    5340:	88 7f       	andi	r24, 0xF8	; 248
    5342:	84 60       	ori	r24, 0x04	; 4
    5344:	80 83       	st	Z, r24
    5346:	e5 e7       	ldi	r30, 0x75	; 117
    5348:	f4 e0       	ldi	r31, 0x04	; 4
    534a:	80 81       	ld	r24, Z
    534c:	87 7f       	andi	r24, 0xF7	; 247
    534e:	80 83       	st	Z, r24
    5350:	80 81       	ld	r24, Z
    5352:	88 7f       	andi	r24, 0xF8	; 248
    5354:	84 60       	ori	r24, 0x04	; 4
    5356:	80 83       	st	Z, r24
    5358:	08 95       	ret

0000535a <qtm_measure_complete_callback>:
    535a:	81 e0       	ldi	r24, 0x01	; 1
    535c:	80 93 53 67 	sts	0x6753, r24	; 0x806753 <touch_postprocess_request>
    5360:	08 95       	ret

00005362 <qtm_error_callback>:
    5362:	8f 5f       	subi	r24, 0xFF	; 255
    5364:	80 93 51 67 	sts	0x6751, r24	; 0x806751 <module_error_code>
    5368:	08 95       	ret

0000536a <touch_sensors_config>:
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	81 e5       	ldi	r24, 0x51	; 81
    5370:	91 e6       	ldi	r25, 0x61	; 97
    5372:	0e 94 a3 38 	call	0x7146	; 0x7146 <qtm_ptc_init_acquisition_module>
    5376:	8a e5       	ldi	r24, 0x5A	; 90
    5378:	98 e6       	ldi	r25, 0x68	; 104
    537a:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <qtm_ptc_qtlib_assign_signal_memory>
    537e:	c0 e0       	ldi	r28, 0x00	; 0
    5380:	d0 e0       	ldi	r29, 0x00	; 0
    5382:	0b c0       	rjmp	.+22     	; 0x539a <touch_sensors_config+0x30>
    5384:	be 01       	movw	r22, r28
    5386:	81 e5       	ldi	r24, 0x51	; 81
    5388:	91 e6       	ldi	r25, 0x61	; 97
    538a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <qtm_enable_sensor_node>
    538e:	be 01       	movw	r22, r28
    5390:	81 e5       	ldi	r24, 0x51	; 81
    5392:	91 e6       	ldi	r25, 0x61	; 97
    5394:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <qtm_calibrate_sensor_node>
    5398:	21 96       	adiw	r28, 0x01	; 1
    539a:	c4 31       	cpi	r28, 0x14	; 20
    539c:	d1 05       	cpc	r29, r1
    539e:	90 f3       	brcs	.-28     	; 0x5384 <touch_sensors_config+0x1a>
    53a0:	c0 e0       	ldi	r28, 0x00	; 0
    53a2:	d0 e0       	ldi	r29, 0x00	; 0
    53a4:	0f c0       	rjmp	.+30     	; 0x53c4 <touch_sensors_config+0x5a>
    53a6:	ae 01       	movw	r20, r28
    53a8:	44 0f       	add	r20, r20
    53aa:	55 1f       	adc	r21, r21
    53ac:	44 0f       	add	r20, r20
    53ae:	55 1f       	adc	r21, r21
    53b0:	4c 0f       	add	r20, r28
    53b2:	5d 1f       	adc	r21, r29
    53b4:	4c 51       	subi	r20, 0x1C	; 28
    53b6:	58 49       	sbci	r21, 0x98	; 152
    53b8:	6c 2f       	mov	r22, r28
    53ba:	83 e0       	ldi	r24, 0x03	; 3
    53bc:	91 e6       	ldi	r25, 0x61	; 97
    53be:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <qtm_init_sensor_key>
    53c2:	21 96       	adiw	r28, 0x01	; 1
    53c4:	c4 31       	cpi	r28, 0x14	; 20
    53c6:	d1 05       	cpc	r29, r1
    53c8:	70 f3       	brcs	.-36     	; 0x53a6 <touch_sensors_config+0x3c>
    53ca:	88 ee       	ldi	r24, 0xE8	; 232
    53cc:	90 e6       	ldi	r25, 0x60	; 96
    53ce:	0e 94 30 31 	call	0x6260	; 0x6260 <qtm_init_scroller_module>
    53d2:	df 91       	pop	r29
    53d4:	cf 91       	pop	r28
    53d6:	08 95       	ret

000053d8 <Timer_set_period>:
    53d8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    53dc:	92 fd       	sbrc	r25, 2
    53de:	fc cf       	rjmp	.-8      	; 0x53d8 <Timer_set_period>
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x7f014a>
    53e6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x7f014b>
    53ea:	08 95       	ret

000053ec <touch_init>:
    53ec:	80 e2       	ldi	r24, 0x20	; 32
    53ee:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <Timer_set_period>
    53f2:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <touch_ptc_pin_config>
    53f6:	0e 94 b5 29 	call	0x536a	; 0x536a <touch_sensors_config>
    53fa:	08 95       	ret

000053fc <touch_process>:
    53fc:	80 91 54 67 	lds	r24, 0x6754	; 0x806754 <time_to_measure_touch_flag>
    5400:	81 30       	cpi	r24, 0x01	; 1
    5402:	51 f4       	brne	.+20     	; 0x5418 <touch_process+0x1c>
    5404:	6d ea       	ldi	r22, 0xAD	; 173
    5406:	79 e2       	ldi	r23, 0x29	; 41
    5408:	81 e5       	ldi	r24, 0x51	; 81
    540a:	91 e6       	ldi	r25, 0x61	; 97
    540c:	0e 94 64 39 	call	0x72c8	; 0x72c8 <qtm_ptc_start_measurement_seq>
    5410:	81 11       	cpse	r24, r1
    5412:	02 c0       	rjmp	.+4      	; 0x5418 <touch_process+0x1c>
    5414:	10 92 54 67 	sts	0x6754, r1	; 0x806754 <time_to_measure_touch_flag>
    5418:	80 91 53 67 	lds	r24, 0x6753	; 0x806753 <touch_postprocess_request>
    541c:	81 30       	cpi	r24, 0x01	; 1
    541e:	51 f5       	brne	.+84     	; 0x5474 <touch_process+0x78>
    5420:	10 92 53 67 	sts	0x6753, r1	; 0x806753 <touch_postprocess_request>
    5424:	0e 94 21 36 	call	0x6c42	; 0x6c42 <qtm_acquisition_process>
    5428:	81 11       	cpse	r24, r1
    542a:	13 c0       	rjmp	.+38     	; 0x5452 <touch_process+0x56>
    542c:	83 e0       	ldi	r24, 0x03	; 3
    542e:	91 e6       	ldi	r25, 0x61	; 97
    5430:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <qtm_key_sensors_process>
    5434:	88 23       	and	r24, r24
    5436:	19 f0       	breq	.+6      	; 0x543e <touch_process+0x42>
    5438:	81 e0       	ldi	r24, 0x01	; 1
    543a:	0e 94 b1 29 	call	0x5362	; 0x5362 <qtm_error_callback>
    543e:	88 ee       	ldi	r24, 0xE8	; 232
    5440:	90 e6       	ldi	r25, 0x60	; 96
    5442:	0e 94 70 31 	call	0x62e0	; 0x62e0 <qtm_scroller_process>
    5446:	88 23       	and	r24, r24
    5448:	39 f0       	breq	.+14     	; 0x5458 <touch_process+0x5c>
    544a:	82 e0       	ldi	r24, 0x02	; 2
    544c:	0e 94 b1 29 	call	0x5362	; 0x5362 <qtm_error_callback>
    5450:	03 c0       	rjmp	.+6      	; 0x5458 <touch_process+0x5c>
    5452:	80 e0       	ldi	r24, 0x00	; 0
    5454:	0e 94 b1 29 	call	0x5362	; 0x5362 <qtm_error_callback>
    5458:	e0 91 03 61 	lds	r30, 0x6103	; 0x806103 <qtlib_key_set1>
    545c:	f0 91 04 61 	lds	r31, 0x6104	; 0x806104 <qtlib_key_set1+0x1>
    5460:	80 81       	ld	r24, Z
    5462:	88 23       	and	r24, r24
    5464:	24 f4       	brge	.+8      	; 0x546e <touch_process+0x72>
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	80 93 54 67 	sts	0x6754, r24	; 0x806754 <time_to_measure_touch_flag>
    546c:	08 95       	ret
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	80 93 52 67 	sts	0x6752, r24	; 0x806752 <measurement_done_touch>
    5474:	08 95       	ret

00005476 <touch_timer_handler>:
    5476:	80 91 e3 67 	lds	r24, 0x67E3	; 0x8067e3 <interrupt_cnt>
    547a:	8f 5f       	subi	r24, 0xFF	; 255
    547c:	80 93 e3 67 	sts	0x67E3, r24	; 0x8067e3 <interrupt_cnt>
    5480:	84 31       	cpi	r24, 0x14	; 20
    5482:	48 f0       	brcs	.+18     	; 0x5496 <touch_timer_handler+0x20>
    5484:	10 92 e3 67 	sts	0x67E3, r1	; 0x8067e3 <interrupt_cnt>
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	80 93 54 67 	sts	0x6754, r24	; 0x806754 <time_to_measure_touch_flag>
    548e:	84 e1       	ldi	r24, 0x14	; 20
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <qtm_update_qtlib_timer>
    5496:	08 95       	ret

00005498 <get_sensor_state>:
    5498:	e0 91 07 61 	lds	r30, 0x6107	; 0x806107 <qtlib_key_set1+0x4>
    549c:	f0 91 08 61 	lds	r31, 0x6108	; 0x806108 <qtlib_key_set1+0x5>
    54a0:	9c 01       	movw	r18, r24
    54a2:	22 0f       	add	r18, r18
    54a4:	33 1f       	adc	r19, r19
    54a6:	82 0f       	add	r24, r18
    54a8:	93 1f       	adc	r25, r19
    54aa:	88 0f       	add	r24, r24
    54ac:	99 1f       	adc	r25, r25
    54ae:	e8 0f       	add	r30, r24
    54b0:	f9 1f       	adc	r31, r25
    54b2:	80 81       	ld	r24, Z
    54b4:	08 95       	ret

000054b6 <get_scroller_state>:

uint8_t get_scroller_state(uint16_t sensor_node)
{
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].scroller_status);
    54b6:	20 91 ec 60 	lds	r18, 0x60EC	; 0x8060ec <qtm_scroller_control1+0x4>
    54ba:	30 91 ed 60 	lds	r19, 0x60ED	; 0x8060ed <qtm_scroller_control1+0x5>
    54be:	fc 01       	movw	r30, r24
    54c0:	ee 0f       	add	r30, r30
    54c2:	ff 1f       	adc	r31, r31
    54c4:	ee 0f       	add	r30, r30
    54c6:	ff 1f       	adc	r31, r31
    54c8:	ee 0f       	add	r30, r30
    54ca:	ff 1f       	adc	r31, r31
    54cc:	8e 0f       	add	r24, r30
    54ce:	9f 1f       	adc	r25, r31
    54d0:	f9 01       	movw	r30, r18
    54d2:	e8 0f       	add	r30, r24
    54d4:	f9 1f       	adc	r31, r25
}
    54d6:	80 81       	ld	r24, Z
    54d8:	08 95       	ret

000054da <get_scroller_position>:

uint16_t get_scroller_position(uint16_t sensor_node)
{
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].position);
    54da:	20 91 ec 60 	lds	r18, 0x60EC	; 0x8060ec <qtm_scroller_control1+0x4>
    54de:	30 91 ed 60 	lds	r19, 0x60ED	; 0x8060ed <qtm_scroller_control1+0x5>
    54e2:	fc 01       	movw	r30, r24
    54e4:	ee 0f       	add	r30, r30
    54e6:	ff 1f       	adc	r31, r31
    54e8:	ee 0f       	add	r30, r30
    54ea:	ff 1f       	adc	r31, r31
    54ec:	ee 0f       	add	r30, r30
    54ee:	ff 1f       	adc	r31, r31
    54f0:	8e 0f       	add	r24, r30
    54f2:	9f 1f       	adc	r25, r31
    54f4:	f9 01       	movw	r30, r18
    54f6:	e8 0f       	add	r30, r24
    54f8:	f9 1f       	adc	r31, r25
}
    54fa:	85 81       	ldd	r24, Z+5	; 0x05
    54fc:	96 81       	ldd	r25, Z+6	; 0x06
    54fe:	08 95       	ret

00005500 <__vector_27>:
#if defined(__ICCAVR__)
ISR(QTML_PTC_vect_iar)
#else
ISR(QTML_PTC_vect)
#endif
{
    5500:	1f 92       	push	r1
    5502:	0f 92       	push	r0
    5504:	0f b6       	in	r0, 0x3f	; 63
    5506:	0f 92       	push	r0
    5508:	11 24       	eor	r1, r1
    550a:	2f 93       	push	r18
    550c:	3f 93       	push	r19
    550e:	4f 93       	push	r20
    5510:	5f 93       	push	r21
    5512:	6f 93       	push	r22
    5514:	7f 93       	push	r23
    5516:	8f 93       	push	r24
    5518:	9f 93       	push	r25
    551a:	af 93       	push	r26
    551c:	bf 93       	push	r27
    551e:	ef 93       	push	r30
    5520:	ff 93       	push	r31
	qtm_avr_da_ptc_handler_eoc();
    5522:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <qtm_avr_da_ptc_handler_eoc>
}
    5526:	ff 91       	pop	r31
    5528:	ef 91       	pop	r30
    552a:	bf 91       	pop	r27
    552c:	af 91       	pop	r26
    552e:	9f 91       	pop	r25
    5530:	8f 91       	pop	r24
    5532:	7f 91       	pop	r23
    5534:	6f 91       	pop	r22
    5536:	5f 91       	pop	r21
    5538:	4f 91       	pop	r20
    553a:	3f 91       	pop	r19
    553c:	2f 91       	pop	r18
    553e:	0f 90       	pop	r0
    5540:	0f be       	out	0x3f, r0	; 63
    5542:	0f 90       	pop	r0
    5544:	1f 90       	pop	r1
    5546:	18 95       	reti

00005548 <soft_timer_create>:
} soft_timer_obj_t;

soft_timer_obj_t *g_soft_timer_head = NULL;

void soft_timer_create(soft_timer_base_t period, soft_timer_cb cb)
{
    5548:	0f 93       	push	r16
    554a:	1f 93       	push	r17
    554c:	cf 93       	push	r28
    554e:	df 93       	push	r29
    5550:	8c 01       	movw	r16, r24
    5552:	eb 01       	movw	r28, r22
    soft_timer_obj_t *obj = NULL;
    obj = (soft_timer_obj_t *)malloc(sizeof(soft_timer_obj_t));
    5554:	88 e0       	ldi	r24, 0x08	; 8
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	0e 94 4d 3b 	call	0x769a	; 0x769a <malloc>
    555c:	fc 01       	movw	r30, r24
    if (obj == NULL)
    555e:	89 2b       	or	r24, r25
    5560:	99 f0       	breq	.+38     	; 0x5588 <soft_timer_create+0x40>
    {
        return;
    }
    memset(obj, 0, sizeof(soft_timer_obj_t));
    5562:	88 e0       	ldi	r24, 0x08	; 8
    5564:	df 01       	movw	r26, r30
    5566:	1d 92       	st	X+, r1
    5568:	8a 95       	dec	r24
    556a:	e9 f7       	brne	.-6      	; 0x5566 <soft_timer_create+0x1e>

    obj->period = period;
    556c:	02 83       	std	Z+2, r16	; 0x02
    556e:	13 83       	std	Z+3, r17	; 0x03
    obj->cb = cb;
    5570:	c4 83       	std	Z+4, r28	; 0x04
    5572:	d5 83       	std	Z+5, r29	; 0x05
    obj->next = g_soft_timer_head;
    5574:	80 91 55 67 	lds	r24, 0x6755	; 0x806755 <g_soft_timer_head>
    5578:	90 91 56 67 	lds	r25, 0x6756	; 0x806756 <g_soft_timer_head+0x1>
    557c:	86 83       	std	Z+6, r24	; 0x06
    557e:	97 83       	std	Z+7, r25	; 0x07
    g_soft_timer_head = obj;
    5580:	e0 93 55 67 	sts	0x6755, r30	; 0x806755 <g_soft_timer_head>
    5584:	f0 93 56 67 	sts	0x6756, r31	; 0x806756 <g_soft_timer_head+0x1>
}
    5588:	df 91       	pop	r29
    558a:	cf 91       	pop	r28
    558c:	1f 91       	pop	r17
    558e:	0f 91       	pop	r16
    5590:	08 95       	ret

00005592 <soft_timer_run>:

void soft_timer_run(void)
{
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    soft_timer_obj_t *obj = g_soft_timer_head;
    5596:	c0 91 55 67 	lds	r28, 0x6755	; 0x806755 <g_soft_timer_head>
    559a:	d0 91 56 67 	lds	r29, 0x6756	; 0x806756 <g_soft_timer_head+0x1>
    for (; obj != NULL; obj = obj->next)
    559e:	16 c0       	rjmp	.+44     	; 0x55cc <soft_timer_run+0x3a>
    {
        if ((soft_timer_base_t)(g_soft_timer_ticks - obj->cnt) >= obj->period)
    55a0:	80 91 62 67 	lds	r24, 0x6762	; 0x806762 <g_soft_timer_ticks>
    55a4:	90 91 63 67 	lds	r25, 0x6763	; 0x806763 <g_soft_timer_ticks+0x1>
    55a8:	28 81       	ld	r18, Y
    55aa:	39 81       	ldd	r19, Y+1	; 0x01
    55ac:	ac 01       	movw	r20, r24
    55ae:	42 1b       	sub	r20, r18
    55b0:	53 0b       	sbc	r21, r19
    55b2:	2a 81       	ldd	r18, Y+2	; 0x02
    55b4:	3b 81       	ldd	r19, Y+3	; 0x03
    55b6:	42 17       	cp	r20, r18
    55b8:	53 07       	cpc	r21, r19
    55ba:	28 f0       	brcs	.+10     	; 0x55c6 <soft_timer_run+0x34>
        {
            obj->cnt = g_soft_timer_ticks;
    55bc:	88 83       	st	Y, r24
    55be:	99 83       	std	Y+1, r25	; 0x01
            obj->cb();
    55c0:	ec 81       	ldd	r30, Y+4	; 0x04
    55c2:	fd 81       	ldd	r31, Y+5	; 0x05
    55c4:	09 95       	icall
}

void soft_timer_run(void)
{
    soft_timer_obj_t *obj = g_soft_timer_head;
    for (; obj != NULL; obj = obj->next)
    55c6:	0e 80       	ldd	r0, Y+6	; 0x06
    55c8:	df 81       	ldd	r29, Y+7	; 0x07
    55ca:	c0 2d       	mov	r28, r0
    55cc:	20 97       	sbiw	r28, 0x00	; 0
    55ce:	41 f7       	brne	.-48     	; 0x55a0 <soft_timer_run+0xe>
        {
            obj->cnt = g_soft_timer_ticks;
            obj->cb();
        }
    }
    55d0:	df 91       	pop	r29
    55d2:	cf 91       	pop	r28
    55d4:	08 95       	ret

000055d6 <ADC_0_init>:
 *
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
    55d6:	e0 e0       	ldi	r30, 0x00	; 0
    55d8:	f6 e0       	ldi	r31, 0x06	; 6
    55da:	87 e0       	ldi	r24, 0x07	; 7
    55dc:	81 83       	std	Z+1, r24	; 0x01
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	84 87       	std	Z+12, r24	; 0x0c
    55e2:	9f e7       	ldi	r25, 0x7F	; 127
    55e4:	95 83       	std	Z+5, r25	; 0x05
    55e6:	80 83       	st	Z, r24
    55e8:	80 e0       	ldi	r24, 0x00	; 0
    55ea:	08 95       	ret

000055ec <__vector_24>:
}

ISR(ADC0_RESRDY_vect)
{
    55ec:	1f 92       	push	r1
    55ee:	0f 92       	push	r0
    55f0:	0f b6       	in	r0, 0x3f	; 63
    55f2:	0f 92       	push	r0
    55f4:	11 24       	eor	r1, r1
    55f6:	2f 93       	push	r18
    55f8:	3f 93       	push	r19
    55fa:	4f 93       	push	r20
    55fc:	5f 93       	push	r21
    55fe:	6f 93       	push	r22
    5600:	7f 93       	push	r23
    5602:	8f 93       	push	r24
    5604:	9f 93       	push	r25
    5606:	af 93       	push	r26
    5608:	bf 93       	push	r27
    560a:	ef 93       	push	r30
    560c:	ff 93       	push	r31
	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
    560e:	e0 e0       	ldi	r30, 0x00	; 0
    5610:	f6 e0       	ldi	r31, 0x06	; 6
    5612:	85 85       	ldd	r24, Z+13	; 0x0d
    5614:	81 60       	ori	r24, 0x01	; 1
    5616:	85 87       	std	Z+13, r24	; 0x0d

	if (ADC_0_cb != NULL) {
    5618:	e0 91 57 67 	lds	r30, 0x6757	; 0x806757 <ADC_0_cb>
    561c:	f0 91 58 67 	lds	r31, 0x6758	; 0x806758 <ADC_0_cb+0x1>
    5620:	30 97       	sbiw	r30, 0x00	; 0
    5622:	09 f0       	breq	.+2      	; 0x5626 <__vector_24+0x3a>
		ADC_0_cb();
    5624:	09 95       	icall
	}
}
    5626:	ff 91       	pop	r31
    5628:	ef 91       	pop	r30
    562a:	bf 91       	pop	r27
    562c:	af 91       	pop	r26
    562e:	9f 91       	pop	r25
    5630:	8f 91       	pop	r24
    5632:	7f 91       	pop	r23
    5634:	6f 91       	pop	r22
    5636:	5f 91       	pop	r21
    5638:	4f 91       	pop	r20
    563a:	3f 91       	pop	r19
    563c:	2f 91       	pop	r18
    563e:	0f 90       	pop	r0
    5640:	0f be       	out	0x3f, r0	; 63
    5642:	0f 90       	pop	r0
    5644:	1f 90       	pop	r1
    5646:	18 95       	reti

00005648 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    5648:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	08 95       	ret

00005650 <CLKCTRL_init>:
    5650:	44 e2       	ldi	r20, 0x24	; 36
    5652:	68 ed       	ldi	r22, 0xD8	; 216
    5654:	88 e6       	ldi	r24, 0x68	; 104
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	08 95       	ret

00005660 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    5660:	78 94       	sei

	return 0;
}
    5662:	80 e0       	ldi	r24, 0x00	; 0
    5664:	08 95       	ret

00005666 <DAC_0_init>:
 *
 * \return Nothing
 */
void DAC_0_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
    5666:	e0 ea       	ldi	r30, 0xA0	; 160
    5668:	f6 e0       	ldi	r31, 0x06	; 6
    566a:	12 82       	std	Z+2, r1	; 0x02
    566c:	13 82       	std	Z+3, r1	; 0x03
    566e:	81 e4       	ldi	r24, 0x41	; 65
    5670:	80 83       	st	Z, r24
    5672:	80 e0       	ldi	r24, 0x00	; 0
    5674:	08 95       	ret

00005676 <DAC_0_set_output>:
 *
 * \return Nothing
 */
void DAC_0_set_output(dac_resolution_t value)
{
	value     = value << DAC_DATA_gp;
    5676:	00 24       	eor	r0, r0
    5678:	96 95       	lsr	r25
    567a:	87 95       	ror	r24
    567c:	07 94       	ror	r0
    567e:	96 95       	lsr	r25
    5680:	87 95       	ror	r24
    5682:	07 94       	ror	r0
    5684:	98 2f       	mov	r25, r24
    5686:	80 2d       	mov	r24, r0
	value     = value & 0xFFC0;
	DAC0.DATA = value;
    5688:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7f06a2>
    568c:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <__TEXT_REGION_LENGTH__+0x7f06a3>
    5690:	08 95       	ret

00005692 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	08 c0       	rjmp	.+16     	; 0x56a6 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5696:	e8 2f       	mov	r30, r24
    5698:	f0 e0       	ldi	r31, 0x00	; 0
    569a:	e0 5f       	subi	r30, 0xF0	; 240
    569c:	fb 4f       	sbci	r31, 0xFB	; 251
    569e:	90 81       	ld	r25, Z
    56a0:	98 60       	ori	r25, 0x08	; 8
    56a2:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    56a4:	8f 5f       	subi	r24, 0xFF	; 255
    56a6:	88 30       	cpi	r24, 0x08	; 8
    56a8:	b0 f3       	brcs	.-20     	; 0x5696 <mcu_init+0x4>
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	08 c0       	rjmp	.+16     	; 0x56be <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    56ae:	e8 2f       	mov	r30, r24
    56b0:	f0 e0       	ldi	r31, 0x00	; 0
    56b2:	e0 5d       	subi	r30, 0xD0	; 208
    56b4:	fb 4f       	sbci	r31, 0xFB	; 251
    56b6:	90 81       	ld	r25, Z
    56b8:	98 60       	ori	r25, 0x08	; 8
    56ba:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    56bc:	8f 5f       	subi	r24, 0xFF	; 255
    56be:	88 30       	cpi	r24, 0x08	; 8
    56c0:	b0 f3       	brcs	.-20     	; 0x56ae <mcu_init+0x1c>
    56c2:	80 e0       	ldi	r24, 0x00	; 0
    56c4:	08 c0       	rjmp	.+16     	; 0x56d6 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    56c6:	e8 2f       	mov	r30, r24
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	e0 5b       	subi	r30, 0xB0	; 176
    56cc:	fb 4f       	sbci	r31, 0xFB	; 251
    56ce:	90 81       	ld	r25, Z
    56d0:	98 60       	ori	r25, 0x08	; 8
    56d2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    56d4:	8f 5f       	subi	r24, 0xFF	; 255
    56d6:	88 30       	cpi	r24, 0x08	; 8
    56d8:	b0 f3       	brcs	.-20     	; 0x56c6 <mcu_init+0x34>
    56da:	80 e0       	ldi	r24, 0x00	; 0
    56dc:	08 c0       	rjmp	.+16     	; 0x56ee <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    56de:	e8 2f       	mov	r30, r24
    56e0:	f0 e0       	ldi	r31, 0x00	; 0
    56e2:	e0 59       	subi	r30, 0x90	; 144
    56e4:	fb 4f       	sbci	r31, 0xFB	; 251
    56e6:	90 81       	ld	r25, Z
    56e8:	98 60       	ori	r25, 0x08	; 8
    56ea:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    56ec:	8f 5f       	subi	r24, 0xFF	; 255
    56ee:	88 30       	cpi	r24, 0x08	; 8
    56f0:	b0 f3       	brcs	.-20     	; 0x56de <mcu_init+0x4c>
    56f2:	80 e0       	ldi	r24, 0x00	; 0
    56f4:	08 c0       	rjmp	.+16     	; 0x5706 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    56f6:	e8 2f       	mov	r30, r24
    56f8:	f0 e0       	ldi	r31, 0x00	; 0
    56fa:	e0 57       	subi	r30, 0x70	; 112
    56fc:	fb 4f       	sbci	r31, 0xFB	; 251
    56fe:	90 81       	ld	r25, Z
    5700:	98 60       	ori	r25, 0x08	; 8
    5702:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5704:	8f 5f       	subi	r24, 0xFF	; 255
    5706:	88 30       	cpi	r24, 0x08	; 8
    5708:	b0 f3       	brcs	.-20     	; 0x56f6 <mcu_init+0x64>
    570a:	80 e0       	ldi	r24, 0x00	; 0
    570c:	08 c0       	rjmp	.+16     	; 0x571e <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    570e:	e8 2f       	mov	r30, r24
    5710:	f0 e0       	ldi	r31, 0x00	; 0
    5712:	e0 55       	subi	r30, 0x50	; 80
    5714:	fb 4f       	sbci	r31, 0xFB	; 251
    5716:	90 81       	ld	r25, Z
    5718:	98 60       	ori	r25, 0x08	; 8
    571a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    571c:	8f 5f       	subi	r24, 0xFF	; 255
    571e:	88 30       	cpi	r24, 0x08	; 8
    5720:	b0 f3       	brcs	.-20     	; 0x570e <mcu_init+0x7c>
    5722:	80 e0       	ldi	r24, 0x00	; 0
    5724:	08 c0       	rjmp	.+16     	; 0x5736 <mcu_init+0xa4>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    5726:	e8 2f       	mov	r30, r24
    5728:	f0 e0       	ldi	r31, 0x00	; 0
    572a:	e0 53       	subi	r30, 0x30	; 48
    572c:	fb 4f       	sbci	r31, 0xFB	; 251
    572e:	90 81       	ld	r25, Z
    5730:	98 60       	ori	r25, 0x08	; 8
    5732:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    5734:	8f 5f       	subi	r24, 0xFF	; 255
    5736:	88 30       	cpi	r24, 0x08	; 8
    5738:	b0 f3       	brcs	.-20     	; 0x5726 <mcu_init+0x94>
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    573a:	08 95       	ret

0000573c <USART_1_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    573c:	84 b3       	in	r24, 0x14	; 20
    573e:	8d 7f       	andi	r24, 0xFD	; 253
    5740:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    5742:	e1 eb       	ldi	r30, 0xB1	; 177
    5744:	f4 e0       	ldi	r31, 0x04	; 4
    5746:	80 81       	ld	r24, Z
    5748:	87 7f       	andi	r24, 0xF7	; 247
    574a:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    574c:	85 b3       	in	r24, 0x15	; 21
    574e:	8e 7f       	andi	r24, 0xFE	; 254
    5750:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    5752:	84 b3       	in	r24, 0x14	; 20
    5754:	81 60       	ori	r24, 0x01	; 1
    5756:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	USART_1_init();
    5758:	0e 94 9d 2c 	call	0x593a	; 0x593a <USART_1_init>
    575c:	08 95       	ret

0000575e <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
    575e:	80 b3       	in	r24, 0x10	; 16
    5760:	8d 7f       	andi	r24, 0xFD	; 253
    5762:	80 bb       	out	0x10, r24	; 16
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    5764:	e1 e9       	ldi	r30, 0x91	; 145
    5766:	f4 e0       	ldi	r31, 0x04	; 4
    5768:	80 81       	ld	r24, Z
    576a:	87 7f       	andi	r24, 0xF7	; 247
    576c:	80 83       	st	Z, r24
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    576e:	81 b3       	in	r24, 0x11	; 17
    5770:	8e 7f       	andi	r24, 0xFE	; 254
    5772:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    5774:	80 b3       	in	r24, 0x10	; 16
    5776:	81 60       	ori	r24, 0x01	; 1
    5778:	80 bb       	out	0x10, r24	; 16
	    // <true"> High
	    false);

	PE0_set_dir(PORT_DIR_OUT);

	USART_0_init();
    577a:	0e 94 91 2c 	call	0x5922	; 0x5922 <USART_0_init>
    577e:	08 95       	ret

00005780 <DAC_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5780:	e6 e7       	ldi	r30, 0x76	; 118
    5782:	f4 e0       	ldi	r31, 0x04	; 4
    5784:	80 81       	ld	r24, Z
    5786:	88 7f       	andi	r24, 0xF8	; 248
    5788:	84 60       	ori	r24, 0x04	; 4
    578a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    578c:	80 81       	ld	r24, Z
    578e:	87 7f       	andi	r24, 0xF7	; 247
    5790:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	DAC_0_init();
    5792:	0e 94 33 2b 	call	0x5666	; 0x5666 <DAC_0_init>
    5796:	08 95       	ret

00005798 <ADC_0_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    5798:	e6 e9       	ldi	r30, 0x96	; 150
    579a:	f4 e0       	ldi	r31, 0x04	; 4
    579c:	80 81       	ld	r24, Z
    579e:	88 7f       	andi	r24, 0xF8	; 248
    57a0:	84 60       	ori	r24, 0x04	; 4
    57a2:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    57a4:	80 81       	ld	r24, Z
    57a6:	87 7f       	andi	r24, 0xF7	; 247
    57a8:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    57aa:	e7 e9       	ldi	r30, 0x97	; 151
    57ac:	f4 e0       	ldi	r31, 0x04	; 4
    57ae:	80 81       	ld	r24, Z
    57b0:	88 7f       	andi	r24, 0xF8	; 248
    57b2:	84 60       	ori	r24, 0x04	; 4
    57b4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    57b6:	80 81       	ld	r24, Z
    57b8:	87 7f       	andi	r24, 0xF7	; 247
    57ba:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE7_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
    57bc:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <ADC_0_init>
    57c0:	08 95       	ret

000057c2 <TIMER_1_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    57c2:	89 b1       	in	r24, 0x09	; 9
    57c4:	87 7f       	andi	r24, 0xF7	; 247
    57c6:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    57c8:	88 b1       	in	r24, 0x08	; 8
    57ca:	88 60       	ori	r24, 0x08	; 8
    57cc:	88 b9       	out	0x08, r24	; 8

	PC3_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= PORTMUX_TCA01_bm;
    57ce:	e0 ee       	ldi	r30, 0xE0	; 224
    57d0:	f5 e0       	ldi	r31, 0x05	; 5
    57d2:	86 81       	ldd	r24, Z+6	; 0x06
    57d4:	82 60       	ori	r24, 0x02	; 2
    57d6:	86 83       	std	Z+6, r24	; 0x06

	TIMER_1_init();
    57d8:	0e 94 66 2c 	call	0x58cc	; 0x58cc <TIMER_1_init>
    57dc:	08 95       	ret

000057de <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
    57de:	0e 94 75 2c 	call	0x58ea	; 0x58ea <TIMER_0_init>
    57e2:	08 95       	ret

000057e4 <TIMER_2_initialization>:
}

void TIMER_2_initialization(void)
{

	TIMER_2_init();
    57e4:	0e 94 83 2c 	call	0x5906	; 0x5906 <TIMER_2_init>
    57e8:	08 95       	ret

000057ea <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    57ea:	0e 94 49 2b 	call	0x5692	; 0x5692 <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    57ee:	81 b1       	in	r24, 0x01	; 1
    57f0:	81 60       	ori	r24, 0x01	; 1
    57f2:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    57f4:	80 b1       	in	r24, 0x00	; 0
    57f6:	81 60       	ori	r24, 0x01	; 1
    57f8:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    57fa:	81 b1       	in	r24, 0x01	; 1
    57fc:	8b 7f       	andi	r24, 0xFB	; 251
    57fe:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    5800:	80 b1       	in	r24, 0x00	; 0
    5802:	84 60       	ori	r24, 0x04	; 4
    5804:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    5806:	81 b1       	in	r24, 0x01	; 1
    5808:	87 7f       	andi	r24, 0xF7	; 247
    580a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    580c:	80 b1       	in	r24, 0x00	; 0
    580e:	88 60       	ori	r24, 0x08	; 8
    5810:	80 b9       	out	0x00, r24	; 0
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5812:	89 b1       	in	r24, 0x09	; 9
    5814:	8f 7b       	andi	r24, 0xBF	; 191
    5816:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5818:	88 b1       	in	r24, 0x08	; 8
    581a:	80 64       	ori	r24, 0x40	; 64
    581c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    581e:	89 b1       	in	r24, 0x09	; 9
    5820:	8f 77       	andi	r24, 0x7F	; 127
    5822:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    5824:	88 b1       	in	r24, 0x08	; 8
    5826:	80 68       	ori	r24, 0x80	; 128
    5828:	88 b9       	out	0x08, r24	; 8
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    582a:	81 b3       	in	r24, 0x11	; 17
    582c:	8f 7d       	andi	r24, 0xDF	; 223
    582e:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    5830:	80 b3       	in	r24, 0x10	; 16
    5832:	80 62       	ori	r24, 0x20	; 32
    5834:	80 bb       	out	0x10, r24	; 16
	    // <true"> High
	    false);

	MOTOR_GATE_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
    5836:	0e 94 28 2b 	call	0x5650	; 0x5650 <CLKCTRL_init>

	USART_1_initialization();
    583a:	0e 94 9e 2b 	call	0x573c	; 0x573c <USART_1_initialization>

	USART_0_initialization();
    583e:	0e 94 af 2b 	call	0x575e	; 0x575e <USART_0_initialization>

	SLPCTRL_init();
    5842:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <SLPCTRL_init>

	CPUINT_init();
    5846:	0e 94 30 2b 	call	0x5660	; 0x5660 <CPUINT_init>

	DAC_0_initialization();
    584a:	0e 94 c0 2b 	call	0x5780	; 0x5780 <DAC_0_initialization>

	ADC_0_initialization();
    584e:	0e 94 cc 2b 	call	0x5798	; 0x5798 <ADC_0_initialization>
	
	TIMER_2_initialization();
    5852:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <TIMER_2_initialization>

	TIMER_1_initialization();
    5856:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <TIMER_1_initialization>

	Timer_init();
    585a:	0e 94 57 2c 	call	0x58ae	; 0x58ae <Timer_init>

	TIMER_0_initialization();
    585e:	0e 94 ef 2b 	call	0x57de	; 0x57de <TIMER_0_initialization>

	VREF_0_init();
    5862:	0e 94 c7 2c 	call	0x598e	; 0x598e <VREF_0_init>

	BOD_init();
    5866:	0e 94 24 2b 	call	0x5648	; 0x5648 <BOD_init>
    586a:	08 95       	ret

0000586c <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
    586c:	1f 93       	push	r17
    586e:	cf 93       	push	r28
    5870:	df 93       	push	r29
    5872:	ec 01       	movw	r28, r24
    5874:	16 2f       	mov	r17, r22
	/* Wait for completion of previous operation */
	while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    5876:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f1002>
    587a:	83 70       	andi	r24, 0x03	; 3
    587c:	e1 f7       	brne	.-8      	; 0x5876 <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
    587e:	43 e1       	ldi	r20, 0x13	; 19
    5880:	6d e9       	ldi	r22, 0x9D	; 157
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	90 e1       	ldi	r25, 0x10	; 16
    5886:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <protected_write_io>

	/* Program the EEPROM with desired value(s) */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);

	/* Write byte to EEPROM */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
    588a:	dc 5e       	subi	r29, 0xEC	; 236
    588c:	18 83       	st	Y, r17
    588e:	40 e0       	ldi	r20, 0x00	; 0
    5890:	6d e9       	ldi	r22, 0x9D	; 157
    5892:	80 e0       	ldi	r24, 0x00	; 0
    5894:	90 e1       	ldi	r25, 0x10	; 16
    5896:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <protected_write_io>

	/* Clear the current command */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);

	return NVM_OK;
}
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	1f 91       	pop	r17
    58a2:	08 95       	ret

000058a4 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    58a4:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    58a6:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    58a8:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    58aa:	40 83       	st	Z, r20
	ret                             // Return to caller
    58ac:	08 95       	ret

000058ae <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    58ae:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    58b2:	81 11       	cpse	r24, r1
    58b4:	fc cf       	rjmp	.-8      	; 0x58ae <Timer_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    58b6:	e0 e4       	ldi	r30, 0x40	; 64
    58b8:	f1 e0       	ldi	r31, 0x01	; 1
    58ba:	81 e8       	ldi	r24, 0x81	; 129
    58bc:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    58be:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
    58c0:	82 e0       	ldi	r24, 0x02	; 2
    58c2:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
    58c4:	80 e0       	ldi	r24, 0x00	; 0
    58c6:	08 95       	ret

000058c8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    58c8:	80 e0       	ldi	r24, 0x00	; 0
    58ca:	08 95       	ret

000058cc <TIMER_1_init>:
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{

	TCA0.SPLIT.CTRLD = 1 << TCA_SPLIT_SPLITM_bp /* Split Mode : enabled */;
    58cc:	e0 e0       	ldi	r30, 0x00	; 0
    58ce:	fa e0       	ldi	r31, 0x0A	; 10
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	83 83       	std	Z+3, r24	; 0x03

	TCA0.SPLIT.CTRLB = 1 << TCA_SPLIT_HCMP0EN_bp    /* High Compare 0 Enable: enabled */
    58d4:	80 e1       	ldi	r24, 0x10	; 16
    58d6:	81 83       	std	Z+1, r24	; 0x01
	                   | 0 << TCA_SPLIT_HCMP2EN_bp  /* High Compare 2 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP0EN_bp  /* Low Compare 0 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP1EN_bp  /* Low Compare 1 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP2EN_bp; /* Low Compare 2 Enable: disabled */

	TCA0.SPLIT.CTRLC = 1 << TCA_SPLIT_HCMP0OV_bp    /* High Compare 0 Output Value: enabled */
    58d8:	82 83       	std	Z+2, r24	; 0x02
	                   | 0 << TCA_SPLIT_HCMP2OV_bp  /* High Compare 2 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP0OV_bp  /* Low Compare 0 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP1OV_bp  /* Low Compare 1 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP2OV_bp; /* Low Compare 2 Output Value: disabled */

	TCA0.SPLIT.HCMP0 = 0x4f; /* Compare value of channel 0: 0x4f */
    58da:	8f e4       	ldi	r24, 0x4F	; 79
    58dc:	81 a7       	std	Z+41, r24	; 0x29

	// TCA0.SPLIT.HCMP2 = 0x0; /* Compare value of channel 2: 0x0 */

	// TCA0.SPLIT.HCNT = 0x0; /*  High-byte Timer Counter Register: 0x0 */

	TCA0.SPLIT.HPER = 0x4a; /*  High-byte Period Register: 0x4a */
    58de:	8a e4       	ldi	r24, 0x4A	; 74
    58e0:	87 a3       	std	Z+39, r24	; 0x27

	// TCA0.SPLIT.LPER = 0xff; /*  Low-byte Timer Period Register: 0xff */

	// TCA0.SPLIT.DBGCTRL = 0 << TCA_SPLIT_DBGRUN_bp; /* Debug Run: disabled */

	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV16_gc /* System Clock / 16 */
    58e2:	89 e0       	ldi	r24, 0x09	; 9
    58e4:	80 83       	st	Z, r24
	                   | 1 << TCA_SPLIT_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
    58e6:	80 e0       	ldi	r24, 0x00	; 0
    58e8:	08 95       	ret

000058ea <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB0.CCMP = 23999; /* Compare or Capture: 0x0 */
    58ea:	e0 e0       	ldi	r30, 0x00	; 0
    58ec:	fb e0       	ldi	r31, 0x0B	; 11
    58ee:	8f eb       	ldi	r24, 0xBF	; 191
    58f0:	9d e5       	ldi	r25, 0x5D	; 93
    58f2:	84 87       	std	Z+12, r24	; 0x0c
    58f4:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0; /* Count: 0x5dbf */
    58f6:	12 86       	std	Z+10, r1	; 0x0a
    58f8:	13 86       	std	Z+11, r1	; 0x0b

	TCB0.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    58fa:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    5900:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    5902:	80 e0       	ldi	r24, 0x00	; 0
    5904:	08 95       	ret

00005906 <TIMER_2_init>:
 * \return Initialization status.
 */
int8_t TIMER_2_init()
{

	TCB1.CCMP = 12000; /* Compare or Capture: 0x0 */
    5906:	e0 e1       	ldi	r30, 0x10	; 16
    5908:	fb e0       	ldi	r31, 0x0B	; 11
    590a:	80 ee       	ldi	r24, 0xE0	; 224
    590c:	9e e2       	ldi	r25, 0x2E	; 46
    590e:	84 87       	std	Z+12, r24	; 0x0c
    5910:	95 87       	std	Z+13, r25	; 0x0d

	TCB1.CNT = 0; /* Count: 0x5dbf */
    5912:	12 86       	std	Z+10, r1	; 0x0a
    5914:	13 86       	std	Z+11, r1	; 0x0b

	TCB1.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    5916:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    5918:	81 e0       	ldi	r24, 0x01	; 1
    591a:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    591c:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    591e:	80 e0       	ldi	r24, 0x00	; 0
    5920:	08 95       	ret

00005922 <USART_0_init>:
 *
 * \return Initialization status.
 */
int8_t USART_0_init()
{
	USART4.BAUD = (uint16_t)(((float)(F_CPU * 64 / (16 * (float)19200)) + 0.5));
    5922:	e0 e8       	ldi	r30, 0x80	; 128
    5924:	f8 e0       	ldi	r31, 0x08	; 8
    5926:	88 e8       	ldi	r24, 0x88	; 136
    5928:	93 e1       	ldi	r25, 0x13	; 19
    592a:	80 87       	std	Z+8, r24	; 0x08
    592c:	91 87       	std	Z+9, r25	; 0x09

	USART4.CTRLA = 1 << USART_ABEIE_bp		/* Auto-baud Error Interrupt Enable: enabled */
    592e:	84 e8       	ldi	r24, 0x84	; 132
    5930:	85 83       	std	Z+5, r24	; 0x05
				   | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
				   | 1 << USART_RXCIE_bp	/* Receive Complete Interrupt Enable: enabled */
				   | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */ 
				   | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART4.CTRLB = 0 << USART_MPCM_bp		 /* Multi-processor Communication Mode: disabled */
    5932:	86 ec       	ldi	r24, 0xC6	; 198
    5934:	86 83       	std	Z+6, r24	; 0x06
	// USART4.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART4.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
    5936:	80 e0       	ldi	r24, 0x00	; 0
    5938:	08 95       	ret

0000593a <USART_1_init>:
uint8_t USART_1_read()
{
	while (!(USART2.STATUS & USART_RXCIF_bm))
		;
	return USART2.RXDATAL;
}
    593a:	e0 e4       	ldi	r30, 0x40	; 64
    593c:	f8 e0       	ldi	r31, 0x08	; 8
    593e:	81 e4       	ldi	r24, 0x41	; 65
    5940:	93 e0       	ldi	r25, 0x03	; 3
    5942:	80 87       	std	Z+8, r24	; 0x08
    5944:	91 87       	std	Z+9, r25	; 0x09
    5946:	80 ec       	ldi	r24, 0xC0	; 192
    5948:	86 83       	std	Z+6, r24	; 0x06
    594a:	8c ee       	ldi	r24, 0xEC	; 236
    594c:	92 e6       	ldi	r25, 0x62	; 98
    594e:	80 93 04 69 	sts	0x6904, r24	; 0x806904 <__iob+0x2>
    5952:	90 93 05 69 	sts	0x6905, r25	; 0x806905 <__iob+0x3>
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	08 95       	ret

0000595a <USART_1_write>:
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
	while (!(USART2.STATUS & USART_DREIF_bm))
    595a:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f0844>
    595e:	95 ff       	sbrs	r25, 5
    5960:	fc cf       	rjmp	.-8      	; 0x595a <USART_1_write>
		;
	USART2.TXDATAL = data;
    5962:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f0842>
    5966:	08 95       	ret

00005968 <USART_1_printCHAR>:

#if defined(__GNUC__)

int USART_1_printCHAR(char character, FILE *stream)
{
	USART_1_write(character);
    5968:	0e 94 ad 2c 	call	0x595a	; 0x595a <USART_1_write>
	return 0;
}
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	90 e0       	ldi	r25, 0x00	; 0
    5970:	08 95       	ret

00005972 <USART4_Read>:
	USART2.TXDATAL = data;
}

size_t USART4_Read(uint8_t * rDATA)
{
	*rDATA = USART4.RXDATAL;
    5972:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7f0880>
    5976:	fc 01       	movw	r30, r24
    5978:	20 83       	st	Z, r18
	return 0;
}
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	90 e0       	ldi	r25, 0x00	; 0
    597e:	08 95       	ret

00005980 <USART4_Send>:

size_t USART4_Send(uint8_t * tDATA)
{
	USART4.TXDATAL = *tDATA;
    5980:	fc 01       	movw	r30, r24
    5982:	80 81       	ld	r24, Z
    5984:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <__TEXT_REGION_LENGTH__+0x7f0882>
	return 0;
    5988:	80 e0       	ldi	r24, 0x00	; 0
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	08 95       	ret

0000598e <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF.ADC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for ADC0: enabled */
    598e:	e0 ea       	ldi	r30, 0xA0	; 160
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	85 e8       	ldi	r24, 0x85	; 133
    5994:	80 83       	st	Z, r24
	               | VREF_REFSEL_VDD_gc; /* VDD as reference */

	VREF.DAC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: enabled */
    5996:	82 83       	std	Z+2, r24	; 0x02

	// VREF.ACREF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	return 0;
}
    5998:	80 e0       	ldi	r24, 0x00	; 0
    599a:	08 95       	ret

0000599c <check_for_aks_block>:
    599c:	cf 92       	push	r12
    599e:	df 92       	push	r13
    59a0:	ff 92       	push	r15
    59a2:	0f 93       	push	r16
    59a4:	1f 93       	push	r17
    59a6:	cf 93       	push	r28
    59a8:	df 93       	push	r29
    59aa:	ec 01       	movw	r28, r24
    59ac:	ae 81       	ldd	r26, Y+6	; 0x06
    59ae:	bf 81       	ldd	r27, Y+7	; 0x07
    59b0:	eb 01       	movw	r28, r22
    59b2:	cc 0f       	add	r28, r28
    59b4:	dd 1f       	adc	r29, r29
    59b6:	c6 0f       	add	r28, r22
    59b8:	d7 1f       	adc	r29, r23
    59ba:	ca 0f       	add	r28, r26
    59bc:	db 1f       	adc	r29, r27
    59be:	fa 80       	ldd	r15, Y+2	; 0x02
    59c0:	fc 01       	movw	r30, r24
    59c2:	44 81       	ldd	r20, Z+4	; 0x04
    59c4:	55 81       	ldd	r21, Z+5	; 0x05
    59c6:	e6 e0       	ldi	r30, 0x06	; 6
    59c8:	e6 9f       	mul	r30, r22
    59ca:	90 01       	movw	r18, r0
    59cc:	e7 9f       	mul	r30, r23
    59ce:	30 0d       	add	r19, r0
    59d0:	11 24       	eor	r1, r1
    59d2:	8a 01       	movw	r16, r20
    59d4:	02 0f       	add	r16, r18
    59d6:	13 1f       	adc	r17, r19
    59d8:	f8 01       	movw	r30, r16
    59da:	22 81       	ldd	r18, Z+2	; 0x02
    59dc:	33 81       	ldd	r19, Z+3	; 0x03
    59de:	f9 01       	movw	r30, r18
    59e0:	21 81       	ldd	r18, Z+1	; 0x01
    59e2:	32 81       	ldd	r19, Z+2	; 0x02
    59e4:	f8 01       	movw	r30, r16
    59e6:	04 81       	ldd	r16, Z+4	; 0x04
    59e8:	15 81       	ldd	r17, Z+5	; 0x05
    59ea:	20 1b       	sub	r18, r16
    59ec:	31 0b       	sbc	r19, r17
    59ee:	e8 81       	ld	r30, Y
    59f0:	2e 1b       	sub	r18, r30
    59f2:	31 09       	sbc	r19, r1
    59f4:	ec 01       	movw	r28, r24
    59f6:	ea 81       	ldd	r30, Y+2	; 0x02
    59f8:	fb 81       	ldd	r31, Y+3	; 0x03
    59fa:	00 81       	ld	r16, Z
    59fc:	11 81       	ldd	r17, Z+1	; 0x01
    59fe:	fa 01       	movw	r30, r20
    5a00:	40 e0       	ldi	r20, 0x00	; 0
    5a02:	50 e0       	ldi	r21, 0x00	; 0
    5a04:	40 17       	cp	r20, r16
    5a06:	51 07       	cpc	r21, r17
    5a08:	39 f1       	breq	.+78     	; 0x5a58 <check_for_aks_block+0xbc>
    5a0a:	46 17       	cp	r20, r22
    5a0c:	57 07       	cpc	r21, r23
    5a0e:	f9 f0       	breq	.+62     	; 0x5a4e <check_for_aks_block+0xb2>
    5a10:	12 96       	adiw	r26, 0x02	; 2
    5a12:	8c 91       	ld	r24, X
    5a14:	12 97       	sbiw	r26, 0x02	; 2
    5a16:	f8 12       	cpse	r15, r24
    5a18:	1a c0       	rjmp	.+52     	; 0x5a4e <check_for_aks_block+0xb2>
    5a1a:	80 81       	ld	r24, Z
    5a1c:	85 58       	subi	r24, 0x85	; 133
    5a1e:	82 30       	cpi	r24, 0x02	; 2
    5a20:	e8 f0       	brcs	.+58     	; 0x5a5c <check_for_aks_block+0xc0>
    5a22:	c4 80       	ldd	r12, Z+4	; 0x04
    5a24:	d5 80       	ldd	r13, Z+5	; 0x05
    5a26:	82 81       	ldd	r24, Z+2	; 0x02
    5a28:	93 81       	ldd	r25, Z+3	; 0x03
    5a2a:	ec 01       	movw	r28, r24
    5a2c:	89 81       	ldd	r24, Y+1	; 0x01
    5a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a30:	c8 16       	cp	r12, r24
    5a32:	d9 06       	cpc	r13, r25
    5a34:	60 f4       	brcc	.+24     	; 0x5a4e <check_for_aks_block+0xb2>
    5a36:	8c 19       	sub	r24, r12
    5a38:	9d 09       	sbc	r25, r13
    5a3a:	cc 91       	ld	r28, X
    5a3c:	d0 e0       	ldi	r29, 0x00	; 0
    5a3e:	c8 17       	cp	r28, r24
    5a40:	d9 07       	cpc	r29, r25
    5a42:	28 f4       	brcc	.+10     	; 0x5a4e <check_for_aks_block+0xb2>
    5a44:	8c 1b       	sub	r24, r28
    5a46:	9d 0b       	sbc	r25, r29
    5a48:	28 17       	cp	r18, r24
    5a4a:	39 07       	cpc	r19, r25
    5a4c:	38 f0       	brcs	.+14     	; 0x5a5c <check_for_aks_block+0xc0>
    5a4e:	4f 5f       	subi	r20, 0xFF	; 255
    5a50:	5f 4f       	sbci	r21, 0xFF	; 255
    5a52:	13 96       	adiw	r26, 0x03	; 3
    5a54:	36 96       	adiw	r30, 0x06	; 6
    5a56:	d6 cf       	rjmp	.-84     	; 0x5a04 <check_for_aks_block+0x68>
    5a58:	80 e0       	ldi	r24, 0x00	; 0
    5a5a:	01 c0       	rjmp	.+2      	; 0x5a5e <check_for_aks_block+0xc2>
    5a5c:	81 e0       	ldi	r24, 0x01	; 1
    5a5e:	df 91       	pop	r29
    5a60:	cf 91       	pop	r28
    5a62:	1f 91       	pop	r17
    5a64:	0f 91       	pop	r16
    5a66:	ff 90       	pop	r15
    5a68:	df 90       	pop	r13
    5a6a:	cf 90       	pop	r12
    5a6c:	08 95       	ret

00005a6e <qtm_update_qtlib_timer>:
    5a6e:	20 91 59 67 	lds	r18, 0x6759	; 0x806759 <qtm_local_ms_timecount>
    5a72:	30 91 5a 67 	lds	r19, 0x675A	; 0x80675a <qtm_local_ms_timecount+0x1>
    5a76:	82 0f       	add	r24, r18
    5a78:	93 1f       	adc	r25, r19
    5a7a:	80 93 59 67 	sts	0x6759, r24	; 0x806759 <qtm_local_ms_timecount>
    5a7e:	90 93 5a 67 	sts	0x675A, r25	; 0x80675a <qtm_local_ms_timecount+0x1>
    5a82:	08 95       	ret

00005a84 <qtm_init_sensor_key>:
    5a84:	00 97       	sbiw	r24, 0x00	; 0
    5a86:	d9 f0       	breq	.+54     	; 0x5abe <qtm_init_sensor_key+0x3a>
    5a88:	41 15       	cp	r20, r1
    5a8a:	51 05       	cpc	r21, r1
    5a8c:	c1 f0       	breq	.+48     	; 0x5abe <qtm_init_sensor_key+0x3a>
    5a8e:	26 e0       	ldi	r18, 0x06	; 6
    5a90:	62 9f       	mul	r22, r18
    5a92:	b0 01       	movw	r22, r0
    5a94:	11 24       	eor	r1, r1
    5a96:	dc 01       	movw	r26, r24
    5a98:	14 96       	adiw	r26, 0x04	; 4
    5a9a:	ed 91       	ld	r30, X+
    5a9c:	fc 91       	ld	r31, X
    5a9e:	15 97       	sbiw	r26, 0x05	; 5
    5aa0:	e6 0f       	add	r30, r22
    5aa2:	f7 1f       	adc	r31, r23
    5aa4:	21 e0       	ldi	r18, 0x01	; 1
    5aa6:	20 83       	st	Z, r18
    5aa8:	14 96       	adiw	r26, 0x04	; 4
    5aaa:	8d 91       	ld	r24, X+
    5aac:	9c 91       	ld	r25, X
    5aae:	15 97       	sbiw	r26, 0x05	; 5
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	e6 0f       	add	r30, r22
    5ab4:	f7 1f       	adc	r31, r23
    5ab6:	42 83       	std	Z+2, r20	; 0x02
    5ab8:	53 83       	std	Z+3, r21	; 0x03
    5aba:	80 e0       	ldi	r24, 0x00	; 0
    5abc:	08 95       	ret
    5abe:	8b e0       	ldi	r24, 0x0B	; 11
    5ac0:	08 95       	ret

00005ac2 <qtm_key_sensors_process>:
    5ac2:	2f 92       	push	r2
    5ac4:	3f 92       	push	r3
    5ac6:	4f 92       	push	r4
    5ac8:	5f 92       	push	r5
    5aca:	6f 92       	push	r6
    5acc:	7f 92       	push	r7
    5ace:	8f 92       	push	r8
    5ad0:	9f 92       	push	r9
    5ad2:	af 92       	push	r10
    5ad4:	bf 92       	push	r11
    5ad6:	cf 92       	push	r12
    5ad8:	df 92       	push	r13
    5ada:	ef 92       	push	r14
    5adc:	ff 92       	push	r15
    5ade:	0f 93       	push	r16
    5ae0:	1f 93       	push	r17
    5ae2:	cf 93       	push	r28
    5ae4:	df 93       	push	r29
    5ae6:	00 97       	sbiw	r24, 0x00	; 0
    5ae8:	09 f4       	brne	.+2      	; 0x5aec <qtm_key_sensors_process+0x2a>
    5aea:	7e c3       	rjmp	.+1788   	; 0x61e8 <qtm_key_sensors_process+0x726>
    5aec:	ec 01       	movw	r28, r24
    5aee:	a1 2c       	mov	r10, r1
    5af0:	b1 2c       	mov	r11, r1
    5af2:	81 2c       	mov	r8, r1
    5af4:	91 2c       	mov	r9, r1
    5af6:	21 2c       	mov	r2, r1
    5af8:	d1 2c       	mov	r13, r1
    5afa:	55 24       	eor	r5, r5
    5afc:	53 94       	inc	r5
    5afe:	33 e0       	ldi	r19, 0x03	; 3
    5b00:	c3 2e       	mov	r12, r19
    5b02:	45 e8       	ldi	r20, 0x85	; 133
    5b04:	64 2e       	mov	r6, r20
    5b06:	56 e8       	ldi	r21, 0x86	; 134
    5b08:	75 2e       	mov	r7, r21
    5b0a:	62 e0       	ldi	r22, 0x02	; 2
    5b0c:	36 2e       	mov	r3, r22
    5b0e:	78 e0       	ldi	r23, 0x08	; 8
    5b10:	47 2e       	mov	r4, r23
    5b12:	ea 81       	ldd	r30, Y+2	; 0x02
    5b14:	fb 81       	ldd	r31, Y+3	; 0x03
    5b16:	80 81       	ld	r24, Z
    5b18:	91 81       	ldd	r25, Z+1	; 0x01
    5b1a:	88 16       	cp	r8, r24
    5b1c:	99 06       	cpc	r9, r25
    5b1e:	08 f0       	brcs	.+2      	; 0x5b22 <qtm_key_sensors_process+0x60>
    5b20:	a6 c1       	rjmp	.+844    	; 0x5e6e <qtm_key_sensors_process+0x3ac>
    5b22:	75 01       	movw	r14, r10
    5b24:	ee 0c       	add	r14, r14
    5b26:	ff 1c       	adc	r15, r15
    5b28:	ec 81       	ldd	r30, Y+4	; 0x04
    5b2a:	fd 81       	ldd	r31, Y+5	; 0x05
    5b2c:	ee 0d       	add	r30, r14
    5b2e:	ff 1d       	adc	r31, r15
    5b30:	a2 81       	ldd	r26, Z+2	; 0x02
    5b32:	b3 81       	ldd	r27, Z+3	; 0x03
    5b34:	9c 91       	ld	r25, X
    5b36:	9e 71       	andi	r25, 0x1E	; 30
    5b38:	09 f0       	breq	.+2      	; 0x5b3c <qtm_key_sensors_process+0x7a>
    5b3a:	50 82       	st	Z, r5
    5b3c:	0c 81       	ldd	r16, Y+4	; 0x04
    5b3e:	1d 81       	ldd	r17, Y+5	; 0x05
    5b40:	0e 0d       	add	r16, r14
    5b42:	1f 1d       	adc	r17, r15
    5b44:	d8 01       	movw	r26, r16
    5b46:	8c 91       	ld	r24, X
    5b48:	84 30       	cpi	r24, 0x04	; 4
    5b4a:	09 f4       	brne	.+2      	; 0x5b4e <qtm_key_sensors_process+0x8c>
    5b4c:	9e c0       	rjmp	.+316    	; 0x5c8a <qtm_key_sensors_process+0x1c8>
    5b4e:	38 f4       	brcc	.+14     	; 0x5b5e <qtm_key_sensors_process+0x9c>
    5b50:	82 30       	cpi	r24, 0x02	; 2
    5b52:	d1 f0       	breq	.+52     	; 0x5b88 <qtm_key_sensors_process+0xc6>
    5b54:	08 f0       	brcs	.+2      	; 0x5b58 <qtm_key_sensors_process+0x96>
    5b56:	45 c0       	rjmp	.+138    	; 0x5be2 <qtm_key_sensors_process+0x120>
    5b58:	81 30       	cpi	r24, 0x01	; 1
    5b5a:	59 f0       	breq	.+22     	; 0x5b72 <qtm_key_sensors_process+0xb0>
    5b5c:	81 c1       	rjmp	.+770    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5b5e:	85 38       	cpi	r24, 0x85	; 133
    5b60:	09 f4       	brne	.+2      	; 0x5b64 <qtm_key_sensors_process+0xa2>
    5b62:	bf c0       	rjmp	.+382    	; 0x5ce2 <qtm_key_sensors_process+0x220>
    5b64:	86 38       	cpi	r24, 0x86	; 134
    5b66:	09 f4       	brne	.+2      	; 0x5b6a <qtm_key_sensors_process+0xa8>
    5b68:	f5 c0       	rjmp	.+490    	; 0x5d54 <qtm_key_sensors_process+0x292>
    5b6a:	87 30       	cpi	r24, 0x07	; 7
    5b6c:	09 f0       	breq	.+2      	; 0x5b70 <qtm_key_sensors_process+0xae>
    5b6e:	78 c1       	rjmp	.+752    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5b70:	36 c1       	rjmp	.+620    	; 0x5dde <qtm_key_sensors_process+0x31c>
    5b72:	91 11       	cpse	r25, r1
    5b74:	67 c1       	rjmp	.+718    	; 0x5e44 <qtm_key_sensors_process+0x382>
    5b76:	f8 01       	movw	r30, r16
    5b78:	30 82       	st	Z, r3
    5b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    5b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    5b7e:	fc 01       	movw	r30, r24
    5b80:	ee 0d       	add	r30, r14
    5b82:	ff 1d       	adc	r31, r15
    5b84:	41 82       	std	Z+1, r4	; 0x01
    5b86:	5e c1       	rjmp	.+700    	; 0x5e44 <qtm_key_sensors_process+0x382>
    5b88:	d8 01       	movw	r26, r16
    5b8a:	11 96       	adiw	r26, 0x01	; 1
    5b8c:	2c 91       	ld	r18, X
    5b8e:	11 97       	sbiw	r26, 0x01	; 1
    5b90:	22 23       	and	r18, r18
    5b92:	29 f1       	breq	.+74     	; 0x5bde <qtm_key_sensors_process+0x11c>
    5b94:	12 96       	adiw	r26, 0x02	; 2
    5b96:	ed 91       	ld	r30, X+
    5b98:	fc 91       	ld	r31, X
    5b9a:	13 97       	sbiw	r26, 0x03	; 3
    5b9c:	25 30       	cpi	r18, 0x05	; 5
    5b9e:	18 f0       	brcs	.+6      	; 0x5ba6 <qtm_key_sensors_process+0xe4>
    5ba0:	81 81       	ldd	r24, Z+1	; 0x01
    5ba2:	92 81       	ldd	r25, Z+2	; 0x02
    5ba4:	0e c0       	rjmp	.+28     	; 0x5bc2 <qtm_key_sensors_process+0x100>
    5ba6:	d8 01       	movw	r26, r16
    5ba8:	14 96       	adiw	r26, 0x04	; 4
    5baa:	8d 91       	ld	r24, X+
    5bac:	9c 91       	ld	r25, X
    5bae:	15 97       	sbiw	r26, 0x05	; 5
    5bb0:	41 81       	ldd	r20, Z+1	; 0x01
    5bb2:	52 81       	ldd	r21, Z+2	; 0x02
    5bb4:	84 17       	cp	r24, r20
    5bb6:	95 07       	cpc	r25, r21
    5bb8:	69 f0       	breq	.+26     	; 0x5bd4 <qtm_key_sensors_process+0x112>
    5bba:	48 17       	cp	r20, r24
    5bbc:	59 07       	cpc	r21, r25
    5bbe:	30 f4       	brcc	.+12     	; 0x5bcc <qtm_key_sensors_process+0x10a>
    5bc0:	01 97       	sbiw	r24, 0x01	; 1
    5bc2:	14 96       	adiw	r26, 0x04	; 4
    5bc4:	8d 93       	st	X+, r24
    5bc6:	9c 93       	st	X, r25
    5bc8:	15 97       	sbiw	r26, 0x05	; 5
    5bca:	04 c0       	rjmp	.+8      	; 0x5bd4 <qtm_key_sensors_process+0x112>
    5bcc:	01 96       	adiw	r24, 0x01	; 1
    5bce:	f8 01       	movw	r30, r16
    5bd0:	84 83       	std	Z+4, r24	; 0x04
    5bd2:	95 83       	std	Z+5, r25	; 0x05
    5bd4:	21 50       	subi	r18, 0x01	; 1
    5bd6:	d8 01       	movw	r26, r16
    5bd8:	11 96       	adiw	r26, 0x01	; 1
    5bda:	2c 93       	st	X, r18
    5bdc:	33 c1       	rjmp	.+614    	; 0x5e44 <qtm_key_sensors_process+0x382>
    5bde:	f8 01       	movw	r30, r16
    5be0:	2d c1       	rjmp	.+602    	; 0x5e3c <qtm_key_sensors_process+0x37a>
    5be2:	d8 01       	movw	r26, r16
    5be4:	14 96       	adiw	r26, 0x04	; 4
    5be6:	2d 91       	ld	r18, X+
    5be8:	3c 91       	ld	r19, X
    5bea:	15 97       	sbiw	r26, 0x05	; 5
    5bec:	12 96       	adiw	r26, 0x02	; 2
    5bee:	ed 91       	ld	r30, X+
    5bf0:	fc 91       	ld	r31, X
    5bf2:	13 97       	sbiw	r26, 0x03	; 3
    5bf4:	41 81       	ldd	r20, Z+1	; 0x01
    5bf6:	52 81       	ldd	r21, Z+2	; 0x02
    5bf8:	24 17       	cp	r18, r20
    5bfa:	35 07       	cpc	r19, r21
    5bfc:	09 f4       	brne	.+2      	; 0x5c00 <qtm_key_sensors_process+0x13e>
    5bfe:	30 c1       	rjmp	.+608    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5c00:	8e 81       	ldd	r24, Y+6	; 0x06
    5c02:	9f 81       	ldd	r25, Y+7	; 0x07
    5c04:	42 17       	cp	r20, r18
    5c06:	53 07       	cpc	r21, r19
    5c08:	f8 f4       	brcc	.+62     	; 0x5c48 <qtm_key_sensors_process+0x186>
    5c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    5c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    5c0e:	24 1b       	sub	r18, r20
    5c10:	35 0b       	sbc	r19, r21
    5c12:	dc 01       	movw	r26, r24
    5c14:	aa 0d       	add	r26, r10
    5c16:	bb 1d       	adc	r27, r11
    5c18:	8c 91       	ld	r24, X
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	05 80       	ldd	r0, Z+5	; 0x05
    5c1e:	02 c0       	rjmp	.+4      	; 0x5c24 <qtm_key_sensors_process+0x162>
    5c20:	95 95       	asr	r25
    5c22:	87 95       	ror	r24
    5c24:	0a 94       	dec	r0
    5c26:	e2 f7       	brpl	.-8      	; 0x5c20 <qtm_key_sensors_process+0x15e>
    5c28:	99 27       	eor	r25, r25
    5c2a:	28 17       	cp	r18, r24
    5c2c:	39 07       	cpc	r19, r25
    5c2e:	08 f4       	brcc	.+2      	; 0x5c32 <qtm_key_sensors_process+0x170>
    5c30:	17 c1       	rjmp	.+558    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5c32:	84 81       	ldd	r24, Z+4	; 0x04
    5c34:	88 23       	and	r24, r24
    5c36:	09 f4       	brne	.+2      	; 0x5c3a <qtm_key_sensors_process+0x178>
    5c38:	13 c1       	rjmp	.+550    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5c3a:	87 e0       	ldi	r24, 0x07	; 7
    5c3c:	f8 01       	movw	r30, r16
    5c3e:	80 83       	st	Z, r24
    5c40:	ea 81       	ldd	r30, Y+2	; 0x02
    5c42:	fb 81       	ldd	r31, Y+3	; 0x03
    5c44:	24 81       	ldd	r18, Z+4	; 0x04
    5c46:	1a c0       	rjmp	.+52     	; 0x5c7c <qtm_key_sensors_process+0x1ba>
    5c48:	fc 01       	movw	r30, r24
    5c4a:	ea 0d       	add	r30, r10
    5c4c:	fb 1d       	adc	r31, r11
    5c4e:	42 1b       	sub	r20, r18
    5c50:	53 0b       	sbc	r21, r19
    5c52:	80 81       	ld	r24, Z
    5c54:	90 e0       	ldi	r25, 0x00	; 0
    5c56:	48 17       	cp	r20, r24
    5c58:	59 07       	cpc	r21, r25
    5c5a:	08 f4       	brcc	.+2      	; 0x5c5e <qtm_key_sensors_process+0x19c>
    5c5c:	01 c1       	rjmp	.+514    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5c5e:	82 81       	ldd	r24, Z+2	; 0x02
    5c60:	88 23       	and	r24, r24
    5c62:	31 f0       	breq	.+12     	; 0x5c70 <qtm_key_sensors_process+0x1ae>
    5c64:	b4 01       	movw	r22, r8
    5c66:	ce 01       	movw	r24, r28
    5c68:	0e 94 ce 2c 	call	0x599c	; 0x599c <check_for_aks_block>
    5c6c:	81 11       	cpse	r24, r1
    5c6e:	f8 c0       	rjmp	.+496    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5c70:	e4 e0       	ldi	r30, 0x04	; 4
    5c72:	d8 01       	movw	r26, r16
    5c74:	ec 93       	st	X, r30
    5c76:	ea 81       	ldd	r30, Y+2	; 0x02
    5c78:	fb 81       	ldd	r31, Y+3	; 0x03
    5c7a:	22 81       	ldd	r18, Z+2	; 0x02
    5c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    5c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    5c80:	fc 01       	movw	r30, r24
    5c82:	ee 0d       	add	r30, r14
    5c84:	ff 1d       	adc	r31, r15
    5c86:	21 83       	std	Z+1, r18	; 0x01
    5c88:	dd c0       	rjmp	.+442    	; 0x5e44 <qtm_key_sensors_process+0x382>
    5c8a:	d8 01       	movw	r26, r16
    5c8c:	14 96       	adiw	r26, 0x04	; 4
    5c8e:	2d 91       	ld	r18, X+
    5c90:	3c 91       	ld	r19, X
    5c92:	15 97       	sbiw	r26, 0x05	; 5
    5c94:	12 96       	adiw	r26, 0x02	; 2
    5c96:	ed 91       	ld	r30, X+
    5c98:	fc 91       	ld	r31, X
    5c9a:	13 97       	sbiw	r26, 0x03	; 3
    5c9c:	81 81       	ldd	r24, Z+1	; 0x01
    5c9e:	92 81       	ldd	r25, Z+2	; 0x02
    5ca0:	82 17       	cp	r24, r18
    5ca2:	93 07       	cpc	r25, r19
    5ca4:	08 f4       	brcc	.+2      	; 0x5ca8 <qtm_key_sensors_process+0x1e6>
    5ca6:	bb c0       	rjmp	.+374    	; 0x5e1e <qtm_key_sensors_process+0x35c>
    5ca8:	ee 81       	ldd	r30, Y+6	; 0x06
    5caa:	ff 81       	ldd	r31, Y+7	; 0x07
    5cac:	ea 0d       	add	r30, r10
    5cae:	fb 1d       	adc	r31, r11
    5cb0:	82 1b       	sub	r24, r18
    5cb2:	93 0b       	sbc	r25, r19
    5cb4:	20 81       	ld	r18, Z
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	28 17       	cp	r18, r24
    5cba:	39 07       	cpc	r19, r25
    5cbc:	08 f0       	brcs	.+2      	; 0x5cc0 <qtm_key_sensors_process+0x1fe>
    5cbe:	c5 c0       	rjmp	.+394    	; 0x5e4a <qtm_key_sensors_process+0x388>
    5cc0:	82 81       	ldd	r24, Z+2	; 0x02
    5cc2:	88 23       	and	r24, r24
    5cc4:	31 f0       	breq	.+12     	; 0x5cd2 <qtm_key_sensors_process+0x210>
    5cc6:	b4 01       	movw	r22, r8
    5cc8:	ce 01       	movw	r24, r28
    5cca:	0e 94 ce 2c 	call	0x599c	; 0x599c <check_for_aks_block>
    5cce:	81 11       	cpse	r24, r1
    5cd0:	c7 c0       	rjmp	.+398    	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5cd2:	f8 01       	movw	r30, r16
    5cd4:	81 81       	ldd	r24, Z+1	; 0x01
    5cd6:	88 23       	and	r24, r24
    5cd8:	09 f4       	brne	.+2      	; 0x5cdc <qtm_key_sensors_process+0x21a>
    5cda:	6a c0       	rjmp	.+212    	; 0x5db0 <qtm_key_sensors_process+0x2ee>
    5cdc:	81 50       	subi	r24, 0x01	; 1
    5cde:	81 83       	std	Z+1, r24	; 0x01
    5ce0:	b1 c0       	rjmp	.+354    	; 0x5e44 <qtm_key_sensors_process+0x382>
    5ce2:	e8 81       	ld	r30, Y
    5ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    5ce6:	aa 81       	ldd	r26, Y+2	; 0x02
    5ce8:	bb 81       	ldd	r27, Y+3	; 0x03
    5cea:	18 96       	adiw	r26, 0x08	; 8
    5cec:	8c 91       	ld	r24, X
    5cee:	83 83       	std	Z+3, r24	; 0x03
    5cf0:	ec 81       	ldd	r30, Y+4	; 0x04
    5cf2:	fd 81       	ldd	r31, Y+5	; 0x05
    5cf4:	ee 0d       	add	r30, r14
    5cf6:	ff 1d       	adc	r31, r15
    5cf8:	44 81       	ldd	r20, Z+4	; 0x04
    5cfa:	55 81       	ldd	r21, Z+5	; 0x05
    5cfc:	a2 81       	ldd	r26, Z+2	; 0x02
    5cfe:	b3 81       	ldd	r27, Z+3	; 0x03
    5d00:	11 96       	adiw	r26, 0x01	; 1
    5d02:	8d 91       	ld	r24, X+
    5d04:	9c 91       	ld	r25, X
    5d06:	12 97       	sbiw	r26, 0x02	; 2
    5d08:	84 17       	cp	r24, r20
    5d0a:	95 07       	cpc	r25, r21
    5d0c:	c0 f0       	brcs	.+48     	; 0x5d3e <qtm_key_sensors_process+0x27c>
    5d0e:	ae 81       	ldd	r26, Y+6	; 0x06
    5d10:	bf 81       	ldd	r27, Y+7	; 0x07
    5d12:	aa 0d       	add	r26, r10
    5d14:	bb 1d       	adc	r27, r11
    5d16:	6c 91       	ld	r22, X
    5d18:	26 2f       	mov	r18, r22
    5d1a:	30 e0       	ldi	r19, 0x00	; 0
    5d1c:	11 96       	adiw	r26, 0x01	; 1
    5d1e:	7c 91       	ld	r23, X
    5d20:	7f 5f       	subi	r23, 0xFF	; 255
    5d22:	02 c0       	rjmp	.+4      	; 0x5d28 <qtm_key_sensors_process+0x266>
    5d24:	35 95       	asr	r19
    5d26:	27 95       	ror	r18
    5d28:	7a 95       	dec	r23
    5d2a:	e2 f7       	brpl	.-8      	; 0x5d24 <qtm_key_sensors_process+0x262>
    5d2c:	84 1b       	sub	r24, r20
    5d2e:	95 0b       	sbc	r25, r21
    5d30:	62 1b       	sub	r22, r18
    5d32:	26 2f       	mov	r18, r22
    5d34:	30 e0       	ldi	r19, 0x00	; 0
    5d36:	28 17       	cp	r18, r24
    5d38:	39 07       	cpc	r19, r25
    5d3a:	08 f4       	brcc	.+2      	; 0x5d3e <qtm_key_sensors_process+0x27c>
    5d3c:	8f c0       	rjmp	.+286    	; 0x5e5c <qtm_key_sensors_process+0x39a>
    5d3e:	70 82       	st	Z, r7
    5d40:	ea 81       	ldd	r30, Y+2	; 0x02
    5d42:	fb 81       	ldd	r31, Y+3	; 0x03
    5d44:	22 81       	ldd	r18, Z+2	; 0x02
    5d46:	8c 81       	ldd	r24, Y+4	; 0x04
    5d48:	9d 81       	ldd	r25, Y+5	; 0x05
    5d4a:	fc 01       	movw	r30, r24
    5d4c:	ee 0d       	add	r30, r14
    5d4e:	ff 1d       	adc	r31, r15
    5d50:	21 83       	std	Z+1, r18	; 0x01
    5d52:	42 c0       	rjmp	.+132    	; 0x5dd8 <qtm_key_sensors_process+0x316>
    5d54:	d8 01       	movw	r26, r16
    5d56:	14 96       	adiw	r26, 0x04	; 4
    5d58:	6d 91       	ld	r22, X+
    5d5a:	7c 91       	ld	r23, X
    5d5c:	15 97       	sbiw	r26, 0x05	; 5
    5d5e:	12 96       	adiw	r26, 0x02	; 2
    5d60:	ed 91       	ld	r30, X+
    5d62:	fc 91       	ld	r31, X
    5d64:	13 97       	sbiw	r26, 0x03	; 3
    5d66:	21 81       	ldd	r18, Z+1	; 0x01
    5d68:	32 81       	ldd	r19, Z+2	; 0x02
    5d6a:	26 17       	cp	r18, r22
    5d6c:	37 07       	cpc	r19, r23
    5d6e:	58 f4       	brcc	.+22     	; 0x5d86 <qtm_key_sensors_process+0x2c4>
    5d70:	11 96       	adiw	r26, 0x01	; 1
    5d72:	8c 91       	ld	r24, X
    5d74:	11 97       	sbiw	r26, 0x01	; 1
    5d76:	81 11       	cpse	r24, r1
    5d78:	02 c0       	rjmp	.+4      	; 0x5d7e <qtm_key_sensors_process+0x2bc>
    5d7a:	cc 92       	st	X, r12
    5d7c:	6f c0       	rjmp	.+222    	; 0x5e5c <qtm_key_sensors_process+0x39a>
    5d7e:	81 50       	subi	r24, 0x01	; 1
    5d80:	f8 01       	movw	r30, r16
    5d82:	81 83       	std	Z+1, r24	; 0x01
    5d84:	6b c0       	rjmp	.+214    	; 0x5e5c <qtm_key_sensors_process+0x39a>
    5d86:	ee 81       	ldd	r30, Y+6	; 0x06
    5d88:	ff 81       	ldd	r31, Y+7	; 0x07
    5d8a:	ea 0d       	add	r30, r10
    5d8c:	fb 1d       	adc	r31, r11
    5d8e:	80 81       	ld	r24, Z
    5d90:	48 2f       	mov	r20, r24
    5d92:	50 e0       	ldi	r21, 0x00	; 0
    5d94:	91 81       	ldd	r25, Z+1	; 0x01
    5d96:	9f 5f       	subi	r25, 0xFF	; 255
    5d98:	02 c0       	rjmp	.+4      	; 0x5d9e <qtm_key_sensors_process+0x2dc>
    5d9a:	55 95       	asr	r21
    5d9c:	47 95       	ror	r20
    5d9e:	9a 95       	dec	r25
    5da0:	e2 f7       	brpl	.-8      	; 0x5d9a <qtm_key_sensors_process+0x2d8>
    5da2:	26 1b       	sub	r18, r22
    5da4:	37 0b       	sbc	r19, r23
    5da6:	84 1b       	sub	r24, r20
    5da8:	90 e0       	ldi	r25, 0x00	; 0
    5daa:	82 17       	cp	r24, r18
    5dac:	93 07       	cpc	r25, r19
    5dae:	60 f4       	brcc	.+24     	; 0x5dc8 <qtm_key_sensors_process+0x306>
    5db0:	d8 01       	movw	r26, r16
    5db2:	6c 92       	st	X, r6
    5db4:	ea 81       	ldd	r30, Y+2	; 0x02
    5db6:	fb 81       	ldd	r31, Y+3	; 0x03
    5db8:	23 81       	ldd	r18, Z+3	; 0x03
    5dba:	8c 81       	ldd	r24, Y+4	; 0x04
    5dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    5dbe:	fc 01       	movw	r30, r24
    5dc0:	ee 0d       	add	r30, r14
    5dc2:	ff 1d       	adc	r31, r15
    5dc4:	21 83       	std	Z+1, r18	; 0x01
    5dc6:	4a c0       	rjmp	.+148    	; 0x5e5c <qtm_key_sensors_process+0x39a>
    5dc8:	f8 01       	movw	r30, r16
    5dca:	81 81       	ldd	r24, Z+1	; 0x01
    5dcc:	81 11       	cpse	r24, r1
    5dce:	02 c0       	rjmp	.+4      	; 0x5dd4 <qtm_key_sensors_process+0x312>
    5dd0:	c0 82       	st	Z, r12
    5dd2:	44 c0       	rjmp	.+136    	; 0x5e5c <qtm_key_sensors_process+0x39a>
    5dd4:	81 50       	subi	r24, 0x01	; 1
    5dd6:	81 83       	std	Z+1, r24	; 0x01
    5dd8:	22 24       	eor	r2, r2
    5dda:	23 94       	inc	r2
    5ddc:	33 c0       	rjmp	.+102    	; 0x5e44 <qtm_key_sensors_process+0x382>
    5dde:	f8 01       	movw	r30, r16
    5de0:	24 81       	ldd	r18, Z+4	; 0x04
    5de2:	35 81       	ldd	r19, Z+5	; 0x05
    5de4:	02 80       	ldd	r0, Z+2	; 0x02
    5de6:	f3 81       	ldd	r31, Z+3	; 0x03
    5de8:	e0 2d       	mov	r30, r0
    5dea:	81 81       	ldd	r24, Z+1	; 0x01
    5dec:	92 81       	ldd	r25, Z+2	; 0x02
    5dee:	82 17       	cp	r24, r18
    5df0:	93 07       	cpc	r25, r19
    5df2:	58 f5       	brcc	.+86     	; 0x5e4a <qtm_key_sensors_process+0x388>
    5df4:	28 1b       	sub	r18, r24
    5df6:	39 0b       	sbc	r19, r25
    5df8:	ee 81       	ldd	r30, Y+6	; 0x06
    5dfa:	ff 81       	ldd	r31, Y+7	; 0x07
    5dfc:	ea 0d       	add	r30, r10
    5dfe:	fb 1d       	adc	r31, r11
    5e00:	80 81       	ld	r24, Z
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	ea 81       	ldd	r30, Y+2	; 0x02
    5e06:	fb 81       	ldd	r31, Y+3	; 0x03
    5e08:	05 80       	ldd	r0, Z+5	; 0x05
    5e0a:	02 c0       	rjmp	.+4      	; 0x5e10 <qtm_key_sensors_process+0x34e>
    5e0c:	95 95       	asr	r25
    5e0e:	87 95       	ror	r24
    5e10:	0a 94       	dec	r0
    5e12:	e2 f7       	brpl	.-8      	; 0x5e0c <qtm_key_sensors_process+0x34a>
    5e14:	99 27       	eor	r25, r25
    5e16:	28 17       	cp	r18, r24
    5e18:	39 07       	cpc	r19, r25
    5e1a:	18 f4       	brcc	.+6      	; 0x5e22 <qtm_key_sensors_process+0x360>
    5e1c:	d8 01       	movw	r26, r16
    5e1e:	cc 92       	st	X, r12
    5e20:	16 c0       	rjmp	.+44     	; 0x5e4e <qtm_key_sensors_process+0x38c>
    5e22:	f8 01       	movw	r30, r16
    5e24:	81 81       	ldd	r24, Z+1	; 0x01
    5e26:	81 11       	cpse	r24, r1
    5e28:	0b c0       	rjmp	.+22     	; 0x5e40 <qtm_key_sensors_process+0x37e>
    5e2a:	50 82       	st	Z, r5
    5e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    5e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    5e30:	fc 01       	movw	r30, r24
    5e32:	ee 0d       	add	r30, r14
    5e34:	ff 1d       	adc	r31, r15
    5e36:	02 80       	ldd	r0, Z+2	; 0x02
    5e38:	f3 81       	ldd	r31, Z+3	; 0x03
    5e3a:	e0 2d       	mov	r30, r0
    5e3c:	c0 82       	st	Z, r12
    5e3e:	10 c0       	rjmp	.+32     	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5e40:	81 50       	subi	r24, 0x01	; 1
    5e42:	81 83       	std	Z+1, r24	; 0x01
    5e44:	dd 24       	eor	r13, r13
    5e46:	d3 94       	inc	r13
    5e48:	0b c0       	rjmp	.+22     	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5e4a:	f8 01       	movw	r30, r16
    5e4c:	c0 82       	st	Z, r12
    5e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    5e50:	9d 81       	ldd	r25, Y+5	; 0x05
    5e52:	fc 01       	movw	r30, r24
    5e54:	ee 0d       	add	r30, r14
    5e56:	ff 1d       	adc	r31, r15
    5e58:	11 82       	std	Z+1, r1	; 0x01
    5e5a:	02 c0       	rjmp	.+4      	; 0x5e60 <qtm_key_sensors_process+0x39e>
    5e5c:	22 24       	eor	r2, r2
    5e5e:	23 94       	inc	r2
    5e60:	ff ef       	ldi	r31, 0xFF	; 255
    5e62:	8f 1a       	sub	r8, r31
    5e64:	9f 0a       	sbc	r9, r31
    5e66:	83 e0       	ldi	r24, 0x03	; 3
    5e68:	a8 0e       	add	r10, r24
    5e6a:	b1 1c       	adc	r11, r1
    5e6c:	52 ce       	rjmp	.-860    	; 0x5b12 <qtm_key_sensors_process+0x50>
    5e6e:	e8 81       	ld	r30, Y
    5e70:	f9 81       	ldd	r31, Y+1	; 0x01
    5e72:	80 81       	ld	r24, Z
    5e74:	87 ff       	sbrs	r24, 7
    5e76:	23 c0       	rjmp	.+70     	; 0x5ebe <qtm_key_sensors_process+0x3fc>
    5e78:	40 e0       	ldi	r20, 0x00	; 0
    5e7a:	50 e0       	ldi	r21, 0x00	; 0
    5e7c:	20 e0       	ldi	r18, 0x00	; 0
    5e7e:	30 e0       	ldi	r19, 0x00	; 0
    5e80:	ea 81       	ldd	r30, Y+2	; 0x02
    5e82:	fb 81       	ldd	r31, Y+3	; 0x03
    5e84:	80 81       	ld	r24, Z
    5e86:	91 81       	ldd	r25, Z+1	; 0x01
    5e88:	28 17       	cp	r18, r24
    5e8a:	39 07       	cpc	r19, r25
    5e8c:	98 f4       	brcc	.+38     	; 0x5eb4 <qtm_key_sensors_process+0x3f2>
    5e8e:	ec 81       	ldd	r30, Y+4	; 0x04
    5e90:	fd 81       	ldd	r31, Y+5	; 0x05
    5e92:	e4 0f       	add	r30, r20
    5e94:	f5 1f       	adc	r31, r21
    5e96:	a2 81       	ldd	r26, Z+2	; 0x02
    5e98:	b3 81       	ldd	r27, Z+3	; 0x03
    5e9a:	8c 91       	ld	r24, X
    5e9c:	80 fd       	sbrc	r24, 0
    5e9e:	05 c0       	rjmp	.+10     	; 0x5eaa <qtm_key_sensors_process+0x3e8>
    5ea0:	90 81       	ld	r25, Z
    5ea2:	97 7f       	andi	r25, 0xF7	; 247
    5ea4:	11 f0       	breq	.+4      	; 0x5eaa <qtm_key_sensors_process+0x3e8>
    5ea6:	81 60       	ori	r24, 0x01	; 1
    5ea8:	8c 93       	st	X, r24
    5eaa:	2f 5f       	subi	r18, 0xFF	; 255
    5eac:	3f 4f       	sbci	r19, 0xFF	; 255
    5eae:	4a 5f       	subi	r20, 0xFA	; 250
    5eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    5eb2:	e6 cf       	rjmp	.-52     	; 0x5e80 <qtm_key_sensors_process+0x3be>
    5eb4:	e8 81       	ld	r30, Y
    5eb6:	f9 81       	ldd	r31, Y+1	; 0x01
    5eb8:	80 81       	ld	r24, Z
    5eba:	8f 77       	andi	r24, 0x7F	; 127
    5ebc:	80 83       	st	Z, r24
    5ebe:	d1 10       	cpse	r13, r1
    5ec0:	07 c0       	rjmp	.+14     	; 0x5ed0 <qtm_key_sensors_process+0x40e>
    5ec2:	e8 81       	ld	r30, Y
    5ec4:	f9 81       	ldd	r31, Y+1	; 0x01
    5ec6:	21 10       	cpse	r2, r1
    5ec8:	6f c0       	rjmp	.+222    	; 0x5fa8 <qtm_key_sensors_process+0x4e6>
    5eca:	80 81       	ld	r24, Z
    5ecc:	8e 7f       	andi	r24, 0xFE	; 254
    5ece:	6e c0       	rjmp	.+220    	; 0x5fac <qtm_key_sensors_process+0x4ea>
    5ed0:	ea 81       	ldd	r30, Y+2	; 0x02
    5ed2:	fb 81       	ldd	r31, Y+3	; 0x03
    5ed4:	81 85       	ldd	r24, Z+9	; 0x09
    5ed6:	88 23       	and	r24, r24
    5ed8:	a1 f3       	breq	.-24     	; 0x5ec2 <qtm_key_sensors_process+0x400>
    5eda:	e8 81       	ld	r30, Y
    5edc:	f9 81       	ldd	r31, Y+1	; 0x01
    5ede:	80 81       	ld	r24, Z
    5ee0:	80 68       	ori	r24, 0x80	; 128
    5ee2:	80 83       	st	Z, r24
    5ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    5ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    5ee8:	81 85       	ldd	r24, Z+9	; 0x09
    5eea:	81 30       	cpi	r24, 0x01	; 1
    5eec:	51 f7       	brne	.-44     	; 0x5ec2 <qtm_key_sensors_process+0x400>
    5eee:	40 e0       	ldi	r20, 0x00	; 0
    5ef0:	50 e0       	ldi	r21, 0x00	; 0
    5ef2:	20 e0       	ldi	r18, 0x00	; 0
    5ef4:	30 e0       	ldi	r19, 0x00	; 0
    5ef6:	96 e0       	ldi	r25, 0x06	; 6
    5ef8:	d9 2e       	mov	r13, r25
    5efa:	ea 81       	ldd	r30, Y+2	; 0x02
    5efc:	fb 81       	ldd	r31, Y+3	; 0x03
    5efe:	60 81       	ld	r22, Z
    5f00:	71 81       	ldd	r23, Z+1	; 0x01
    5f02:	26 17       	cp	r18, r22
    5f04:	37 07       	cpc	r19, r23
    5f06:	e8 f6       	brcc	.-70     	; 0x5ec2 <qtm_key_sensors_process+0x400>
    5f08:	0c 81       	ldd	r16, Y+4	; 0x04
    5f0a:	1d 81       	ldd	r17, Y+5	; 0x05
    5f0c:	fa 01       	movw	r30, r20
    5f0e:	ee 0f       	add	r30, r30
    5f10:	ff 1f       	adc	r31, r31
    5f12:	e0 0f       	add	r30, r16
    5f14:	f1 1f       	adc	r31, r17
    5f16:	80 81       	ld	r24, Z
    5f18:	98 2f       	mov	r25, r24
    5f1a:	97 7f       	andi	r25, 0xF7	; 247
    5f1c:	a1 f1       	breq	.+104    	; 0x5f86 <qtm_key_sensors_process+0x4c4>
    5f1e:	85 38       	cpi	r24, 0x85	; 133
    5f20:	11 f0       	breq	.+4      	; 0x5f26 <qtm_key_sensors_process+0x464>
    5f22:	83 30       	cpi	r24, 0x03	; 3
    5f24:	b1 f5       	brne	.+108    	; 0x5f92 <qtm_key_sensors_process+0x4d0>
    5f26:	ee 80       	ldd	r14, Y+6	; 0x06
    5f28:	ff 80       	ldd	r15, Y+7	; 0x07
    5f2a:	d7 01       	movw	r26, r14
    5f2c:	a4 0f       	add	r26, r20
    5f2e:	b5 1f       	adc	r27, r21
    5f30:	12 96       	adiw	r26, 0x02	; 2
    5f32:	bc 90       	ld	r11, X
    5f34:	bb 20       	and	r11, r11
    5f36:	39 f1       	breq	.+78     	; 0x5f86 <qtm_key_sensors_process+0x4c4>
    5f38:	80 e0       	ldi	r24, 0x00	; 0
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	c1 2c       	mov	r12, r1
    5f3e:	86 17       	cp	r24, r22
    5f40:	97 07       	cpc	r25, r23
    5f42:	f8 f4       	brcc	.+62     	; 0x5f82 <qtm_key_sensors_process+0x4c0>
    5f44:	28 17       	cp	r18, r24
    5f46:	39 07       	cpc	r19, r25
    5f48:	d1 f0       	breq	.+52     	; 0x5f7e <qtm_key_sensors_process+0x4bc>
    5f4a:	d8 9e       	mul	r13, r24
    5f4c:	d0 01       	movw	r26, r0
    5f4e:	d9 9e       	mul	r13, r25
    5f50:	b0 0d       	add	r27, r0
    5f52:	11 24       	eor	r1, r1
    5f54:	a0 0f       	add	r26, r16
    5f56:	b1 1f       	adc	r27, r17
    5f58:	ac 91       	ld	r26, X
    5f5a:	a4 30       	cpi	r26, 0x04	; 4
    5f5c:	11 f0       	breq	.+4      	; 0x5f62 <qtm_key_sensors_process+0x4a0>
    5f5e:	a6 38       	cpi	r26, 0x86	; 134
    5f60:	71 f4       	brne	.+28     	; 0x5f7e <qtm_key_sensors_process+0x4bc>
    5f62:	dc 01       	movw	r26, r24
    5f64:	aa 0f       	add	r26, r26
    5f66:	bb 1f       	adc	r27, r27
    5f68:	a8 0f       	add	r26, r24
    5f6a:	b9 1f       	adc	r27, r25
    5f6c:	ae 0d       	add	r26, r14
    5f6e:	bf 1d       	adc	r27, r15
    5f70:	12 96       	adiw	r26, 0x02	; 2
    5f72:	ac 91       	ld	r26, X
    5f74:	ba 12       	cpse	r11, r26
    5f76:	03 c0       	rjmp	.+6      	; 0x5f7e <qtm_key_sensors_process+0x4bc>
    5f78:	cb 01       	movw	r24, r22
    5f7a:	cc 24       	eor	r12, r12
    5f7c:	c3 94       	inc	r12
    5f7e:	01 96       	adiw	r24, 0x01	; 1
    5f80:	de cf       	rjmp	.-68     	; 0x5f3e <qtm_key_sensors_process+0x47c>
    5f82:	c1 10       	cpse	r12, r1
    5f84:	06 c0       	rjmp	.+12     	; 0x5f92 <qtm_key_sensors_process+0x4d0>
    5f86:	02 80       	ldd	r0, Z+2	; 0x02
    5f88:	f3 81       	ldd	r31, Z+3	; 0x03
    5f8a:	e0 2d       	mov	r30, r0
    5f8c:	80 81       	ld	r24, Z
    5f8e:	8e 7f       	andi	r24, 0xFE	; 254
    5f90:	05 c0       	rjmp	.+10     	; 0x5f9c <qtm_key_sensors_process+0x4da>
    5f92:	02 80       	ldd	r0, Z+2	; 0x02
    5f94:	f3 81       	ldd	r31, Z+3	; 0x03
    5f96:	e0 2d       	mov	r30, r0
    5f98:	80 81       	ld	r24, Z
    5f9a:	81 60       	ori	r24, 0x01	; 1
    5f9c:	80 83       	st	Z, r24
    5f9e:	2f 5f       	subi	r18, 0xFF	; 255
    5fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa2:	4d 5f       	subi	r20, 0xFD	; 253
    5fa4:	5f 4f       	sbci	r21, 0xFF	; 255
    5fa6:	a9 cf       	rjmp	.-174    	; 0x5efa <qtm_key_sensors_process+0x438>
    5fa8:	80 81       	ld	r24, Z
    5faa:	81 60       	ori	r24, 0x01	; 1
    5fac:	80 83       	st	Z, r24
    5fae:	80 91 59 67 	lds	r24, 0x6759	; 0x806759 <qtm_local_ms_timecount>
    5fb2:	90 91 5a 67 	lds	r25, 0x675A	; 0x80675a <qtm_local_ms_timecount+0x1>
    5fb6:	e8 81       	ld	r30, Y
    5fb8:	f9 81       	ldd	r31, Y+1	; 0x01
    5fba:	21 81       	ldd	r18, Z+1	; 0x01
    5fbc:	32 81       	ldd	r19, Z+2	; 0x02
    5fbe:	a9 01       	movw	r20, r18
    5fc0:	48 53       	subi	r20, 0x38	; 56
    5fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc4:	48 17       	cp	r20, r24
    5fc6:	59 07       	cpc	r21, r25
    5fc8:	38 f4       	brcc	.+14     	; 0x5fd8 <qtm_key_sensors_process+0x516>
    5fca:	82 1b       	sub	r24, r18
    5fcc:	93 0b       	sbc	r25, r19
    5fce:	aa 24       	eor	r10, r10
    5fd0:	a3 94       	inc	r10
    5fd2:	a3 e0       	ldi	r26, 0x03	; 3
    5fd4:	ba 2e       	mov	r11, r26
    5fd6:	44 c0       	rjmp	.+136    	; 0x6060 <qtm_key_sensors_process+0x59e>
    5fd8:	82 17       	cp	r24, r18
    5fda:	93 07       	cpc	r25, r19
    5fdc:	10 f0       	brcs	.+4      	; 0x5fe2 <qtm_key_sensors_process+0x520>
    5fde:	80 e0       	ldi	r24, 0x00	; 0
    5fe0:	04 c1       	rjmp	.+520    	; 0x61ea <qtm_key_sensors_process+0x728>
    5fe2:	82 1b       	sub	r24, r18
    5fe4:	93 0b       	sbc	r25, r19
    5fe6:	01 97       	sbiw	r24, 0x01	; 1
    5fe8:	89 3c       	cpi	r24, 0xC9	; 201
    5fea:	91 05       	cpc	r25, r1
    5fec:	c0 f3       	brcs	.-16     	; 0x5fde <qtm_key_sensors_process+0x51c>
    5fee:	ef cf       	rjmp	.-34     	; 0x5fce <qtm_key_sensors_process+0x50c>
    5ff0:	88 5c       	subi	r24, 0xC8	; 200
    5ff2:	91 09       	sbc	r25, r1
    5ff4:	e8 81       	ld	r30, Y
    5ff6:	f9 81       	ldd	r31, Y+1	; 0x01
    5ff8:	21 81       	ldd	r18, Z+1	; 0x01
    5ffa:	32 81       	ldd	r19, Z+2	; 0x02
    5ffc:	28 53       	subi	r18, 0x38	; 56
    5ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    6000:	21 83       	std	Z+1, r18	; 0x01
    6002:	32 83       	std	Z+2, r19	; 0x02
    6004:	23 81       	ldd	r18, Z+3	; 0x03
    6006:	21 11       	cpse	r18, r1
    6008:	96 c0       	rjmp	.+300    	; 0x6136 <qtm_key_sensors_process+0x674>
    600a:	24 81       	ldd	r18, Z+4	; 0x04
    600c:	22 23       	and	r18, r18
    600e:	11 f0       	breq	.+4      	; 0x6014 <qtm_key_sensors_process+0x552>
    6010:	21 50       	subi	r18, 0x01	; 1
    6012:	24 83       	std	Z+4, r18	; 0x04
    6014:	e8 81       	ld	r30, Y
    6016:	f9 81       	ldd	r31, Y+1	; 0x01
    6018:	25 81       	ldd	r18, Z+5	; 0x05
    601a:	22 23       	and	r18, r18
    601c:	11 f0       	breq	.+4      	; 0x6022 <qtm_key_sensors_process+0x560>
    601e:	21 50       	subi	r18, 0x01	; 1
    6020:	25 83       	std	Z+5, r18	; 0x05
    6022:	8a 80       	ldd	r8, Y+2	; 0x02
    6024:	9b 80       	ldd	r9, Y+3	; 0x03
    6026:	d4 01       	movw	r26, r8
    6028:	16 96       	adiw	r26, 0x06	; 6
    602a:	2c 91       	ld	r18, X
    602c:	16 97       	sbiw	r26, 0x06	; 6
    602e:	21 11       	cpse	r18, r1
    6030:	1b c0       	rjmp	.+54     	; 0x6068 <qtm_key_sensors_process+0x5a6>
    6032:	8a 80       	ldd	r8, Y+2	; 0x02
    6034:	9b 80       	ldd	r9, Y+3	; 0x03
    6036:	f4 01       	movw	r30, r8
    6038:	27 81       	ldd	r18, Z+7	; 0x07
    603a:	21 11       	cpse	r18, r1
    603c:	48 c0       	rjmp	.+144    	; 0x60ce <qtm_key_sensors_process+0x60c>
    603e:	ea 81       	ldd	r30, Y+2	; 0x02
    6040:	fb 81       	ldd	r31, Y+3	; 0x03
    6042:	23 81       	ldd	r18, Z+3	; 0x03
    6044:	22 23       	and	r18, r18
    6046:	61 f0       	breq	.+24     	; 0x6060 <qtm_key_sensors_process+0x59e>
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	a0 e0       	ldi	r26, 0x00	; 0
    604e:	b0 e0       	ldi	r27, 0x00	; 0
    6050:	ea 81       	ldd	r30, Y+2	; 0x02
    6052:	fb 81       	ldd	r31, Y+3	; 0x03
    6054:	40 81       	ld	r20, Z
    6056:	51 81       	ldd	r21, Z+1	; 0x01
    6058:	a4 17       	cp	r26, r20
    605a:	b5 07       	cpc	r27, r21
    605c:	08 f4       	brcc	.+2      	; 0x6060 <qtm_key_sensors_process+0x59e>
    605e:	6e c0       	rjmp	.+220    	; 0x613c <qtm_key_sensors_process+0x67a>
    6060:	89 3c       	cpi	r24, 0xC9	; 201
    6062:	91 05       	cpc	r25, r1
    6064:	28 f6       	brcc	.-118    	; 0x5ff0 <qtm_key_sensors_process+0x52e>
    6066:	bb cf       	rjmp	.-138    	; 0x5fde <qtm_key_sensors_process+0x51c>
    6068:	08 81       	ld	r16, Y
    606a:	19 81       	ldd	r17, Y+1	; 0x01
    606c:	f8 01       	movw	r30, r16
    606e:	24 81       	ldd	r18, Z+4	; 0x04
    6070:	21 11       	cpse	r18, r1
    6072:	df cf       	rjmp	.-66     	; 0x6032 <qtm_key_sensors_process+0x570>
    6074:	ed 90       	ld	r14, X+
    6076:	fc 90       	ld	r15, X
    6078:	60 e0       	ldi	r22, 0x00	; 0
    607a:	70 e0       	ldi	r23, 0x00	; 0
    607c:	40 e0       	ldi	r20, 0x00	; 0
    607e:	50 e0       	ldi	r21, 0x00	; 0
    6080:	4e 15       	cp	r20, r14
    6082:	5f 05       	cpc	r21, r15
    6084:	f1 f0       	breq	.+60     	; 0x60c2 <qtm_key_sensors_process+0x600>
    6086:	ec 81       	ldd	r30, Y+4	; 0x04
    6088:	fd 81       	ldd	r31, Y+5	; 0x05
    608a:	e6 0f       	add	r30, r22
    608c:	f7 1f       	adc	r31, r23
    608e:	20 81       	ld	r18, Z
    6090:	23 30       	cpi	r18, 0x03	; 3
    6092:	11 f0       	breq	.+4      	; 0x6098 <qtm_key_sensors_process+0x5d6>
    6094:	28 30       	cpi	r18, 0x08	; 8
    6096:	81 f4       	brne	.+32     	; 0x60b8 <qtm_key_sensors_process+0x5f6>
    6098:	24 81       	ldd	r18, Z+4	; 0x04
    609a:	35 81       	ldd	r19, Z+5	; 0x05
    609c:	c2 80       	ldd	r12, Z+2	; 0x02
    609e:	d3 80       	ldd	r13, Z+3	; 0x03
    60a0:	d6 01       	movw	r26, r12
    60a2:	11 96       	adiw	r26, 0x01	; 1
    60a4:	cd 90       	ld	r12, X+
    60a6:	dc 90       	ld	r13, X
    60a8:	12 97       	sbiw	r26, 0x02	; 2
    60aa:	2c 15       	cp	r18, r12
    60ac:	3d 05       	cpc	r19, r13
    60ae:	20 f4       	brcc	.+8      	; 0x60b8 <qtm_key_sensors_process+0x5f6>
    60b0:	2f 5f       	subi	r18, 0xFF	; 255
    60b2:	3f 4f       	sbci	r19, 0xFF	; 255
    60b4:	24 83       	std	Z+4, r18	; 0x04
    60b6:	35 83       	std	Z+5, r19	; 0x05
    60b8:	4f 5f       	subi	r20, 0xFF	; 255
    60ba:	5f 4f       	sbci	r21, 0xFF	; 255
    60bc:	6a 5f       	subi	r22, 0xFA	; 250
    60be:	7f 4f       	sbci	r23, 0xFF	; 255
    60c0:	df cf       	rjmp	.-66     	; 0x6080 <qtm_key_sensors_process+0x5be>
    60c2:	f4 01       	movw	r30, r8
    60c4:	26 81       	ldd	r18, Z+6	; 0x06
    60c6:	d8 01       	movw	r26, r16
    60c8:	14 96       	adiw	r26, 0x04	; 4
    60ca:	2c 93       	st	X, r18
    60cc:	b2 cf       	rjmp	.-156    	; 0x6032 <qtm_key_sensors_process+0x570>
    60ce:	08 81       	ld	r16, Y
    60d0:	19 81       	ldd	r17, Y+1	; 0x01
    60d2:	d8 01       	movw	r26, r16
    60d4:	15 96       	adiw	r26, 0x05	; 5
    60d6:	2c 91       	ld	r18, X
    60d8:	21 11       	cpse	r18, r1
    60da:	b1 cf       	rjmp	.-158    	; 0x603e <qtm_key_sensors_process+0x57c>
    60dc:	e0 80       	ld	r14, Z
    60de:	f1 80       	ldd	r15, Z+1	; 0x01
    60e0:	60 e0       	ldi	r22, 0x00	; 0
    60e2:	70 e0       	ldi	r23, 0x00	; 0
    60e4:	40 e0       	ldi	r20, 0x00	; 0
    60e6:	50 e0       	ldi	r21, 0x00	; 0
    60e8:	4e 15       	cp	r20, r14
    60ea:	5f 05       	cpc	r21, r15
    60ec:	f1 f0       	breq	.+60     	; 0x612a <qtm_key_sensors_process+0x668>
    60ee:	ec 81       	ldd	r30, Y+4	; 0x04
    60f0:	fd 81       	ldd	r31, Y+5	; 0x05
    60f2:	e6 0f       	add	r30, r22
    60f4:	f7 1f       	adc	r31, r23
    60f6:	20 81       	ld	r18, Z
    60f8:	23 30       	cpi	r18, 0x03	; 3
    60fa:	11 f0       	breq	.+4      	; 0x6100 <qtm_key_sensors_process+0x63e>
    60fc:	28 30       	cpi	r18, 0x08	; 8
    60fe:	81 f4       	brne	.+32     	; 0x6120 <qtm_key_sensors_process+0x65e>
    6100:	24 81       	ldd	r18, Z+4	; 0x04
    6102:	35 81       	ldd	r19, Z+5	; 0x05
    6104:	c2 80       	ldd	r12, Z+2	; 0x02
    6106:	d3 80       	ldd	r13, Z+3	; 0x03
    6108:	d6 01       	movw	r26, r12
    610a:	11 96       	adiw	r26, 0x01	; 1
    610c:	cd 90       	ld	r12, X+
    610e:	dc 90       	ld	r13, X
    6110:	12 97       	sbiw	r26, 0x02	; 2
    6112:	c2 16       	cp	r12, r18
    6114:	d3 06       	cpc	r13, r19
    6116:	20 f4       	brcc	.+8      	; 0x6120 <qtm_key_sensors_process+0x65e>
    6118:	21 50       	subi	r18, 0x01	; 1
    611a:	31 09       	sbc	r19, r1
    611c:	24 83       	std	Z+4, r18	; 0x04
    611e:	35 83       	std	Z+5, r19	; 0x05
    6120:	4f 5f       	subi	r20, 0xFF	; 255
    6122:	5f 4f       	sbci	r21, 0xFF	; 255
    6124:	6a 5f       	subi	r22, 0xFA	; 250
    6126:	7f 4f       	sbci	r23, 0xFF	; 255
    6128:	df cf       	rjmp	.-66     	; 0x60e8 <qtm_key_sensors_process+0x626>
    612a:	f4 01       	movw	r30, r8
    612c:	27 81       	ldd	r18, Z+7	; 0x07
    612e:	d8 01       	movw	r26, r16
    6130:	15 96       	adiw	r26, 0x05	; 5
    6132:	2c 93       	st	X, r18
    6134:	84 cf       	rjmp	.-248    	; 0x603e <qtm_key_sensors_process+0x57c>
    6136:	21 50       	subi	r18, 0x01	; 1
    6138:	23 83       	std	Z+3, r18	; 0x03
    613a:	81 cf       	rjmp	.-254    	; 0x603e <qtm_key_sensors_process+0x57c>
    613c:	a9 01       	movw	r20, r18
    613e:	44 0f       	add	r20, r20
    6140:	55 1f       	adc	r21, r21
    6142:	ec 81       	ldd	r30, Y+4	; 0x04
    6144:	fd 81       	ldd	r31, Y+5	; 0x05
    6146:	e4 0f       	add	r30, r20
    6148:	f5 1f       	adc	r31, r21
    614a:	60 81       	ld	r22, Z
    614c:	65 38       	cpi	r22, 0x85	; 133
    614e:	09 f0       	breq	.+2      	; 0x6152 <qtm_key_sensors_process+0x690>
    6150:	47 c0       	rjmp	.+142    	; 0x61e0 <qtm_key_sensors_process+0x71e>
    6152:	61 81       	ldd	r22, Z+1	; 0x01
    6154:	66 23       	and	r22, r22
    6156:	19 f0       	breq	.+6      	; 0x615e <qtm_key_sensors_process+0x69c>
    6158:	61 50       	subi	r22, 0x01	; 1
    615a:	61 83       	std	Z+1, r22	; 0x01
    615c:	41 c0       	rjmp	.+130    	; 0x61e0 <qtm_key_sensors_process+0x71e>
    615e:	a0 82       	st	Z, r10
    6160:	6c 81       	ldd	r22, Y+4	; 0x04
    6162:	7d 81       	ldd	r23, Y+5	; 0x05
    6164:	fb 01       	movw	r30, r22
    6166:	e4 0f       	add	r30, r20
    6168:	f5 1f       	adc	r31, r21
    616a:	02 80       	ldd	r0, Z+2	; 0x02
    616c:	f3 81       	ldd	r31, Z+3	; 0x03
    616e:	e0 2d       	mov	r30, r0
    6170:	b0 82       	st	Z, r11
    6172:	ee 81       	ldd	r30, Y+6	; 0x06
    6174:	ff 81       	ldd	r31, Y+7	; 0x07
    6176:	e2 0f       	add	r30, r18
    6178:	f3 1f       	adc	r31, r19
    617a:	d2 80       	ldd	r13, Z+2	; 0x02
    617c:	dd 20       	and	r13, r13
    617e:	81 f1       	breq	.+96     	; 0x61e0 <qtm_key_sensors_process+0x71e>
    6180:	40 e0       	ldi	r20, 0x00	; 0
    6182:	50 e0       	ldi	r21, 0x00	; 0
    6184:	00 e0       	ldi	r16, 0x00	; 0
    6186:	10 e0       	ldi	r17, 0x00	; 0
    6188:	ea 81       	ldd	r30, Y+2	; 0x02
    618a:	fb 81       	ldd	r31, Y+3	; 0x03
    618c:	60 81       	ld	r22, Z
    618e:	71 81       	ldd	r23, Z+1	; 0x01
    6190:	06 17       	cp	r16, r22
    6192:	17 07       	cpc	r17, r23
    6194:	28 f5       	brcc	.+74     	; 0x61e0 <qtm_key_sensors_process+0x71e>
    6196:	ee 81       	ldd	r30, Y+6	; 0x06
    6198:	ff 81       	ldd	r31, Y+7	; 0x07
    619a:	e4 0f       	add	r30, r20
    619c:	f5 1f       	adc	r31, r21
    619e:	62 81       	ldd	r22, Z+2	; 0x02
    61a0:	d6 12       	cpse	r13, r22
    61a2:	19 c0       	rjmp	.+50     	; 0x61d6 <qtm_key_sensors_process+0x714>
    61a4:	ba 01       	movw	r22, r20
    61a6:	66 0f       	add	r22, r22
    61a8:	77 1f       	adc	r23, r23
    61aa:	ec 81       	ldd	r30, Y+4	; 0x04
    61ac:	fd 81       	ldd	r31, Y+5	; 0x05
    61ae:	4f 01       	movw	r8, r30
    61b0:	86 0e       	add	r8, r22
    61b2:	97 1e       	adc	r9, r23
    61b4:	f4 01       	movw	r30, r8
    61b6:	e2 80       	ldd	r14, Z+2	; 0x02
    61b8:	f3 80       	ldd	r15, Z+3	; 0x03
    61ba:	f7 01       	movw	r30, r14
    61bc:	f0 80       	ld	r15, Z
    61be:	f0 fe       	sbrs	r15, 0
    61c0:	0a c0       	rjmp	.+20     	; 0x61d6 <qtm_key_sensors_process+0x714>
    61c2:	f4 01       	movw	r30, r8
    61c4:	a0 82       	st	Z, r10
    61c6:	ec 81       	ldd	r30, Y+4	; 0x04
    61c8:	fd 81       	ldd	r31, Y+5	; 0x05
    61ca:	e6 0f       	add	r30, r22
    61cc:	f7 1f       	adc	r31, r23
    61ce:	02 80       	ldd	r0, Z+2	; 0x02
    61d0:	f3 81       	ldd	r31, Z+3	; 0x03
    61d2:	e0 2d       	mov	r30, r0
    61d4:	b0 82       	st	Z, r11
    61d6:	0f 5f       	subi	r16, 0xFF	; 255
    61d8:	1f 4f       	sbci	r17, 0xFF	; 255
    61da:	4d 5f       	subi	r20, 0xFD	; 253
    61dc:	5f 4f       	sbci	r21, 0xFF	; 255
    61de:	d4 cf       	rjmp	.-88     	; 0x6188 <qtm_key_sensors_process+0x6c6>
    61e0:	11 96       	adiw	r26, 0x01	; 1
    61e2:	2d 5f       	subi	r18, 0xFD	; 253
    61e4:	3f 4f       	sbci	r19, 0xFF	; 255
    61e6:	34 cf       	rjmp	.-408    	; 0x6050 <qtm_key_sensors_process+0x58e>
    61e8:	8b e0       	ldi	r24, 0x0B	; 11
    61ea:	df 91       	pop	r29
    61ec:	cf 91       	pop	r28
    61ee:	1f 91       	pop	r17
    61f0:	0f 91       	pop	r16
    61f2:	ff 90       	pop	r15
    61f4:	ef 90       	pop	r14
    61f6:	df 90       	pop	r13
    61f8:	cf 90       	pop	r12
    61fa:	bf 90       	pop	r11
    61fc:	af 90       	pop	r10
    61fe:	9f 90       	pop	r9
    6200:	8f 90       	pop	r8
    6202:	7f 90       	pop	r7
    6204:	6f 90       	pop	r6
    6206:	5f 90       	pop	r5
    6208:	4f 90       	pop	r4
    620a:	3f 90       	pop	r3
    620c:	2f 90       	pop	r2
    620e:	08 95       	ret

00006210 <divide>:
    6210:	9c 01       	movw	r18, r24
    6212:	61 15       	cp	r22, r1
    6214:	71 05       	cpc	r23, r1
    6216:	09 f1       	breq	.+66     	; 0x625a <divide+0x4a>
    6218:	4f 5f       	subi	r20, 0xFF	; 255
    621a:	37 fd       	sbrc	r19, 7
    621c:	06 c0       	rjmp	.+12     	; 0x622a <divide+0x1a>
    621e:	44 23       	and	r20, r20
    6220:	21 f0       	breq	.+8      	; 0x622a <divide+0x1a>
    6222:	41 50       	subi	r20, 0x01	; 1
    6224:	22 0f       	add	r18, r18
    6226:	33 1f       	adc	r19, r19
    6228:	f8 cf       	rjmp	.-16     	; 0x621a <divide+0xa>
    622a:	77 fd       	sbrc	r23, 7
    622c:	04 c0       	rjmp	.+8      	; 0x6236 <divide+0x26>
    622e:	4f 5f       	subi	r20, 0xFF	; 255
    6230:	66 0f       	add	r22, r22
    6232:	77 1f       	adc	r23, r23
    6234:	fa cf       	rjmp	.-12     	; 0x622a <divide+0x1a>
    6236:	80 e0       	ldi	r24, 0x00	; 0
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	44 23       	and	r20, r20
    623c:	81 f0       	breq	.+32     	; 0x625e <divide+0x4e>
    623e:	97 fd       	sbrc	r25, 7
    6240:	0c c0       	rjmp	.+24     	; 0x625a <divide+0x4a>
    6242:	88 0f       	add	r24, r24
    6244:	99 1f       	adc	r25, r25
    6246:	41 50       	subi	r20, 0x01	; 1
    6248:	26 17       	cp	r18, r22
    624a:	37 07       	cpc	r19, r23
    624c:	18 f0       	brcs	.+6      	; 0x6254 <divide+0x44>
    624e:	26 1b       	sub	r18, r22
    6250:	37 0b       	sbc	r19, r23
    6252:	01 96       	adiw	r24, 0x01	; 1
    6254:	76 95       	lsr	r23
    6256:	67 95       	ror	r22
    6258:	f0 cf       	rjmp	.-32     	; 0x623a <divide+0x2a>
    625a:	8f ef       	ldi	r24, 0xFF	; 255
    625c:	9f ef       	ldi	r25, 0xFF	; 255
    625e:	08 95       	ret

00006260 <qtm_init_scroller_module>:
    6260:	cf 93       	push	r28
    6262:	df 93       	push	r29
    6264:	fc 01       	movw	r30, r24
    6266:	89 2b       	or	r24, r25
    6268:	b9 f1       	breq	.+110    	; 0x62d8 <qtm_init_scroller_module+0x78>
    626a:	24 81       	ldd	r18, Z+4	; 0x04
    626c:	35 81       	ldd	r19, Z+5	; 0x05
    626e:	21 15       	cp	r18, r1
    6270:	31 05       	cpc	r19, r1
    6272:	91 f1       	breq	.+100    	; 0x62d8 <qtm_init_scroller_module+0x78>
    6274:	46 81       	ldd	r20, Z+6	; 0x06
    6276:	57 81       	ldd	r21, Z+7	; 0x07
    6278:	41 15       	cp	r20, r1
    627a:	51 05       	cpc	r21, r1
    627c:	69 f1       	breq	.+90     	; 0x62d8 <qtm_init_scroller_module+0x78>
    627e:	a0 81       	ld	r26, Z
    6280:	b1 81       	ldd	r27, Z+1	; 0x01
    6282:	1c 92       	st	X, r1
    6284:	90 e0       	ldi	r25, 0x00	; 0
    6286:	a2 81       	ldd	r26, Z+2	; 0x02
    6288:	b3 81       	ldd	r27, Z+3	; 0x03
    628a:	12 96       	adiw	r26, 0x02	; 2
    628c:	8c 91       	ld	r24, X
    628e:	98 17       	cp	r25, r24
    6290:	08 f5       	brcc	.+66     	; 0x62d4 <qtm_init_scroller_module+0x74>
    6292:	d9 01       	movw	r26, r18
    6294:	89 e0       	ldi	r24, 0x09	; 9
    6296:	98 9f       	mul	r25, r24
    6298:	a0 0d       	add	r26, r0
    629a:	b1 1d       	adc	r27, r1
    629c:	11 24       	eor	r1, r1
    629e:	11 96       	adiw	r26, 0x01	; 1
    62a0:	1c 92       	st	X, r1
    62a2:	11 97       	sbiw	r26, 0x01	; 1
    62a4:	ea 01       	movw	r28, r20
    62a6:	88 e0       	ldi	r24, 0x08	; 8
    62a8:	98 9f       	mul	r25, r24
    62aa:	c0 0d       	add	r28, r0
    62ac:	d1 1d       	adc	r29, r1
    62ae:	11 24       	eor	r1, r1
    62b0:	8d 81       	ldd	r24, Y+5	; 0x05
    62b2:	12 96       	adiw	r26, 0x02	; 2
    62b4:	8c 93       	st	X, r24
    62b6:	12 97       	sbiw	r26, 0x02	; 2
    62b8:	13 96       	adiw	r26, 0x03	; 3
    62ba:	1d 92       	st	X+, r1
    62bc:	1c 92       	st	X, r1
    62be:	14 97       	sbiw	r26, 0x04	; 4
    62c0:	15 96       	adiw	r26, 0x05	; 5
    62c2:	1d 92       	st	X+, r1
    62c4:	1c 92       	st	X, r1
    62c6:	16 97       	sbiw	r26, 0x06	; 6
    62c8:	17 96       	adiw	r26, 0x07	; 7
    62ca:	1d 92       	st	X+, r1
    62cc:	1c 92       	st	X, r1
    62ce:	18 97       	sbiw	r26, 0x08	; 8
    62d0:	9f 5f       	subi	r25, 0xFF	; 255
    62d2:	d9 cf       	rjmp	.-78     	; 0x6286 <qtm_init_scroller_module+0x26>
    62d4:	80 e0       	ldi	r24, 0x00	; 0
    62d6:	01 c0       	rjmp	.+2      	; 0x62da <qtm_init_scroller_module+0x7a>
    62d8:	8b e0       	ldi	r24, 0x0B	; 11
    62da:	df 91       	pop	r29
    62dc:	cf 91       	pop	r28
    62de:	08 95       	ret

000062e0 <qtm_scroller_process>:
    62e0:	2f 92       	push	r2
    62e2:	3f 92       	push	r3
    62e4:	4f 92       	push	r4
    62e6:	5f 92       	push	r5
    62e8:	6f 92       	push	r6
    62ea:	7f 92       	push	r7
    62ec:	8f 92       	push	r8
    62ee:	9f 92       	push	r9
    62f0:	af 92       	push	r10
    62f2:	bf 92       	push	r11
    62f4:	cf 92       	push	r12
    62f6:	df 92       	push	r13
    62f8:	ef 92       	push	r14
    62fa:	ff 92       	push	r15
    62fc:	0f 93       	push	r16
    62fe:	1f 93       	push	r17
    6300:	cf 93       	push	r28
    6302:	df 93       	push	r29
    6304:	cd b7       	in	r28, 0x3d	; 61
    6306:	de b7       	in	r29, 0x3e	; 62
    6308:	61 97       	sbiw	r28, 0x11	; 17
    630a:	cd bf       	out	0x3d, r28	; 61
    630c:	de bf       	out	0x3e, r29	; 62
    630e:	fc 01       	movw	r30, r24
    6310:	00 97       	sbiw	r24, 0x00	; 0
    6312:	09 f4       	brne	.+2      	; 0x6316 <qtm_scroller_process+0x36>
    6314:	dc c2       	rjmp	.+1464   	; 0x68ce <qtm_scroller_process+0x5ee>
    6316:	e4 80       	ldd	r14, Z+4	; 0x04
    6318:	f5 80       	ldd	r15, Z+5	; 0x05
    631a:	ea 86       	std	Y+10, r14	; 0x0a
    631c:	fb 86       	std	Y+11, r15	; 0x0b
    631e:	ef 28       	or	r14, r15
    6320:	09 f4       	brne	.+2      	; 0x6324 <qtm_scroller_process+0x44>
    6322:	d5 c2       	rjmp	.+1450   	; 0x68ce <qtm_scroller_process+0x5ee>
    6324:	e6 80       	ldd	r14, Z+6	; 0x06
    6326:	f7 80       	ldd	r15, Z+7	; 0x07
    6328:	e8 86       	std	Y+8, r14	; 0x08
    632a:	f9 86       	std	Y+9, r15	; 0x09
    632c:	ef 28       	or	r14, r15
    632e:	09 f4       	brne	.+2      	; 0x6332 <qtm_scroller_process+0x52>
    6330:	ce c2       	rjmp	.+1436   	; 0x68ce <qtm_scroller_process+0x5ee>
    6332:	a2 81       	ldd	r26, Z+2	; 0x02
    6334:	b3 81       	ldd	r27, Z+3	; 0x03
    6336:	4d 90       	ld	r4, X+
    6338:	5c 90       	ld	r5, X
    633a:	41 14       	cp	r4, r1
    633c:	51 04       	cpc	r5, r1
    633e:	09 f4       	brne	.+2      	; 0x6342 <qtm_scroller_process+0x62>
    6340:	c6 c2       	rjmp	.+1420   	; 0x68ce <qtm_scroller_process+0x5ee>
    6342:	8e 83       	std	Y+6, r24	; 0x06
    6344:	9f 83       	std	Y+7, r25	; 0x07
    6346:	00 e0       	ldi	r16, 0x00	; 0
    6348:	1a 82       	std	Y+2, r1	; 0x02
    634a:	91 2c       	mov	r9, r1
    634c:	16 e0       	ldi	r17, 0x06	; 6
    634e:	81 2e       	mov	r8, r17
    6350:	ae 81       	ldd	r26, Y+6	; 0x06
    6352:	bf 81       	ldd	r27, Y+7	; 0x07
    6354:	12 96       	adiw	r26, 0x02	; 2
    6356:	ed 91       	ld	r30, X+
    6358:	fc 91       	ld	r31, X
    635a:	13 97       	sbiw	r26, 0x03	; 3
    635c:	82 81       	ldd	r24, Z+2	; 0x02
    635e:	98 16       	cp	r9, r24
    6360:	08 f0       	brcs	.+2      	; 0x6364 <qtm_scroller_process+0x84>
    6362:	b0 c2       	rjmp	.+1376   	; 0x68c4 <qtm_scroller_process+0x5e4>
    6364:	68 84       	ldd	r6, Y+8	; 0x08
    6366:	79 84       	ldd	r7, Y+9	; 0x09
    6368:	28 e0       	ldi	r18, 0x08	; 8
    636a:	92 9e       	mul	r9, r18
    636c:	60 0c       	add	r6, r0
    636e:	71 1c       	adc	r7, r1
    6370:	11 24       	eor	r1, r1
    6372:	d3 01       	movw	r26, r6
    6374:	11 96       	adiw	r26, 0x01	; 1
    6376:	4d 91       	ld	r20, X+
    6378:	5c 91       	ld	r21, X
    637a:	12 97       	sbiw	r26, 0x02	; 2
    637c:	13 96       	adiw	r26, 0x03	; 3
    637e:	ac 90       	ld	r10, X
    6380:	7a 01       	movw	r14, r20
    6382:	ea 0c       	add	r14, r10
    6384:	f1 1c       	adc	r15, r1
    6386:	ca 01       	movw	r24, r20
    6388:	60 e0       	ldi	r22, 0x00	; 0
    638a:	8e 15       	cp	r24, r14
    638c:	9f 05       	cpc	r25, r15
    638e:	70 f4       	brcc	.+28     	; 0x63ac <qtm_scroller_process+0xcc>
    6390:	88 9e       	mul	r8, r24
    6392:	f0 01       	movw	r30, r0
    6394:	89 9e       	mul	r8, r25
    6396:	f0 0d       	add	r31, r0
    6398:	11 24       	eor	r1, r1
    639a:	e4 0d       	add	r30, r4
    639c:	f5 1d       	adc	r31, r5
    639e:	20 81       	ld	r18, Z
    63a0:	25 38       	cpi	r18, 0x85	; 133
    63a2:	11 f4       	brne	.+4      	; 0x63a8 <qtm_scroller_process+0xc8>
    63a4:	c7 01       	movw	r24, r14
    63a6:	61 e0       	ldi	r22, 0x01	; 1
    63a8:	01 96       	adiw	r24, 0x01	; 1
    63aa:	ef cf       	rjmp	.-34     	; 0x638a <qtm_scroller_process+0xaa>
    63ac:	84 9e       	mul	r8, r20
    63ae:	f0 01       	movw	r30, r0
    63b0:	85 9e       	mul	r8, r21
    63b2:	f0 0d       	add	r31, r0
    63b4:	11 24       	eor	r1, r1
    63b6:	ec 83       	std	Y+4, r30	; 0x04
    63b8:	fd 83       	std	Y+5, r31	; 0x05
    63ba:	34 97       	sbiw	r30, 0x04	; 4
    63bc:	e4 0d       	add	r30, r4
    63be:	f5 1d       	adc	r31, r5
    63c0:	26 e0       	ldi	r18, 0x06	; 6
    63c2:	a2 9e       	mul	r10, r18
    63c4:	50 01       	movw	r10, r0
    63c6:	11 24       	eor	r1, r1
    63c8:	1a 01       	movw	r2, r20
    63ca:	70 e0       	ldi	r23, 0x00	; 0
    63cc:	18 8a       	std	Y+16, r1	; 0x10
    63ce:	19 8a       	std	Y+17, r1	; 0x11
    63d0:	2e 14       	cp	r2, r14
    63d2:	3f 04       	cpc	r3, r15
    63d4:	08 f0       	brcs	.+2      	; 0x63d8 <qtm_scroller_process+0xf8>
    63d6:	4f c0       	rjmp	.+158    	; 0x6476 <qtm_scroller_process+0x196>
    63d8:	86 81       	ldd	r24, Z+6	; 0x06
    63da:	97 81       	ldd	r25, Z+7	; 0x07
    63dc:	dc 01       	movw	r26, r24
    63de:	11 96       	adiw	r26, 0x01	; 1
    63e0:	2d 91       	ld	r18, X+
    63e2:	3c 91       	ld	r19, X
    63e4:	12 97       	sbiw	r26, 0x02	; 2
    63e6:	80 85       	ldd	r24, Z+8	; 0x08
    63e8:	91 85       	ldd	r25, Z+9	; 0x09
    63ea:	28 1b       	sub	r18, r24
    63ec:	39 0b       	sbc	r19, r25
    63ee:	12 16       	cp	r1, r18
    63f0:	13 06       	cpc	r1, r19
    63f2:	14 f0       	brlt	.+4      	; 0x63f8 <qtm_scroller_process+0x118>
    63f4:	20 e0       	ldi	r18, 0x00	; 0
    63f6:	30 e0       	ldi	r19, 0x00	; 0
    63f8:	24 16       	cp	r2, r20
    63fa:	35 06       	cpc	r3, r21
    63fc:	a9 f4       	brne	.+42     	; 0x6428 <qtm_scroller_process+0x148>
    63fe:	d3 01       	movw	r26, r6
    6400:	8c 91       	ld	r24, X
    6402:	81 30       	cpi	r24, 0x01	; 1
    6404:	f9 f4       	brne	.+62     	; 0x6444 <qtm_scroller_process+0x164>
    6406:	6f 01       	movw	r12, r30
    6408:	ca 0c       	add	r12, r10
    640a:	db 1c       	adc	r13, r11
    640c:	d6 01       	movw	r26, r12
    640e:	8d 91       	ld	r24, X+
    6410:	9c 91       	ld	r25, X
    6412:	dc 01       	movw	r26, r24
    6414:	11 96       	adiw	r26, 0x01	; 1
    6416:	8d 91       	ld	r24, X+
    6418:	9c 91       	ld	r25, X
    641a:	12 97       	sbiw	r26, 0x02	; 2
    641c:	d6 01       	movw	r26, r12
    641e:	12 96       	adiw	r26, 0x02	; 2
    6420:	cd 90       	ld	r12, X+
    6422:	dc 90       	ld	r13, X
    6424:	13 97       	sbiw	r26, 0x03	; 3
    6426:	09 c0       	rjmp	.+18     	; 0x643a <qtm_scroller_process+0x15a>
    6428:	80 81       	ld	r24, Z
    642a:	91 81       	ldd	r25, Z+1	; 0x01
    642c:	dc 01       	movw	r26, r24
    642e:	11 96       	adiw	r26, 0x01	; 1
    6430:	8d 91       	ld	r24, X+
    6432:	9c 91       	ld	r25, X
    6434:	12 97       	sbiw	r26, 0x02	; 2
    6436:	c2 80       	ldd	r12, Z+2	; 0x02
    6438:	d3 80       	ldd	r13, Z+3	; 0x03
    643a:	8c 19       	sub	r24, r12
    643c:	9d 09       	sbc	r25, r13
    643e:	18 16       	cp	r1, r24
    6440:	19 06       	cpc	r1, r25
    6442:	14 f0       	brlt	.+4      	; 0x6448 <qtm_scroller_process+0x168>
    6444:	80 e0       	ldi	r24, 0x00	; 0
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	28 0f       	add	r18, r24
    644a:	39 1f       	adc	r19, r25
    644c:	d3 01       	movw	r26, r6
    644e:	16 96       	adiw	r26, 0x06	; 6
    6450:	8d 91       	ld	r24, X+
    6452:	9c 91       	ld	r25, X
    6454:	17 97       	sbiw	r26, 0x07	; 7
    6456:	28 17       	cp	r18, r24
    6458:	39 07       	cpc	r19, r25
    645a:	40 f0       	brcs	.+16     	; 0x646c <qtm_scroller_process+0x18c>
    645c:	88 89       	ldd	r24, Y+16	; 0x10
    645e:	99 89       	ldd	r25, Y+17	; 0x11
    6460:	82 17       	cp	r24, r18
    6462:	93 07       	cpc	r25, r19
    6464:	10 f4       	brcc	.+4      	; 0x646a <qtm_scroller_process+0x18a>
    6466:	28 8b       	std	Y+16, r18	; 0x10
    6468:	39 8b       	std	Y+17, r19	; 0x11
    646a:	71 e0       	ldi	r23, 0x01	; 1
    646c:	9f ef       	ldi	r25, 0xFF	; 255
    646e:	29 1a       	sub	r2, r25
    6470:	39 0a       	sbc	r3, r25
    6472:	36 96       	adiw	r30, 0x06	; 6
    6474:	ad cf       	rjmp	.-166    	; 0x63d0 <qtm_scroller_process+0xf0>
    6476:	71 11       	cpse	r23, r1
    6478:	01 c0       	rjmp	.+2      	; 0x647c <qtm_scroller_process+0x19c>
    647a:	60 e0       	ldi	r22, 0x00	; 0
    647c:	a9 e0       	ldi	r26, 0x09	; 9
    647e:	9a 9e       	mul	r9, r26
    6480:	90 01       	movw	r18, r0
    6482:	11 24       	eor	r1, r1
    6484:	ea 84       	ldd	r14, Y+10	; 0x0a
    6486:	fb 84       	ldd	r15, Y+11	; 0x0b
    6488:	e2 0e       	add	r14, r18
    648a:	f3 1e       	adc	r15, r19
    648c:	ee 86       	std	Y+14, r14	; 0x0e
    648e:	ff 86       	std	Y+15, r15	; 0x0f
    6490:	d7 01       	movw	r26, r14
    6492:	8c 91       	ld	r24, X
    6494:	ae 81       	ldd	r26, Y+6	; 0x06
    6496:	bf 81       	ldd	r27, Y+7	; 0x07
    6498:	14 96       	adiw	r26, 0x04	; 4
    649a:	ed 91       	ld	r30, X+
    649c:	fc 91       	ld	r31, X
    649e:	15 97       	sbiw	r26, 0x05	; 5
    64a0:	b8 2f       	mov	r27, r24
    64a2:	b1 70       	andi	r27, 0x01	; 1
    64a4:	bd 87       	std	Y+13, r27	; 0x0d
    64a6:	80 ff       	sbrs	r24, 0
    64a8:	1e c0       	rjmp	.+60     	; 0x64e6 <qtm_scroller_process+0x206>
    64aa:	7f 01       	movw	r14, r30
    64ac:	e2 0e       	add	r14, r18
    64ae:	f3 1e       	adc	r15, r19
    64b0:	d7 01       	movw	r26, r14
    64b2:	17 96       	adiw	r26, 0x07	; 7
    64b4:	cd 90       	ld	r12, X+
    64b6:	dc 90       	ld	r13, X
    64b8:	18 97       	sbiw	r26, 0x08	; 8
    64ba:	c6 01       	movw	r24, r12
    64bc:	88 0f       	add	r24, r24
    64be:	99 1f       	adc	r25, r25
    64c0:	8c 0d       	add	r24, r12
    64c2:	9d 1d       	adc	r25, r13
    64c4:	a8 89       	ldd	r26, Y+16	; 0x10
    64c6:	b9 89       	ldd	r27, Y+17	; 0x11
    64c8:	8a 0f       	add	r24, r26
    64ca:	9b 1f       	adc	r25, r27
    64cc:	96 95       	lsr	r25
    64ce:	87 95       	ror	r24
    64d0:	96 95       	lsr	r25
    64d2:	87 95       	ror	r24
    64d4:	d7 01       	movw	r26, r14
    64d6:	17 96       	adiw	r26, 0x07	; 7
    64d8:	8d 93       	st	X+, r24
    64da:	9c 93       	st	X, r25
    64dc:	18 97       	sbiw	r26, 0x08	; 8
    64de:	77 23       	and	r23, r23
    64e0:	61 f0       	breq	.+24     	; 0x64fa <qtm_scroller_process+0x21a>
    64e2:	61 e0       	ldi	r22, 0x01	; 1
    64e4:	0a c0       	rjmp	.+20     	; 0x64fa <qtm_scroller_process+0x21a>
    64e6:	cf 01       	movw	r24, r30
    64e8:	82 0f       	add	r24, r18
    64ea:	93 1f       	adc	r25, r19
    64ec:	e8 88       	ldd	r14, Y+16	; 0x10
    64ee:	f9 88       	ldd	r15, Y+17	; 0x11
    64f0:	dc 01       	movw	r26, r24
    64f2:	17 96       	adiw	r26, 0x07	; 7
    64f4:	ed 92       	st	X+, r14
    64f6:	fc 92       	st	X, r15
    64f8:	18 97       	sbiw	r26, 0x08	; 8
    64fa:	d3 01       	movw	r26, r6
    64fc:	bc 91       	ld	r27, X
    64fe:	b9 83       	std	Y+1, r27	; 0x01
    6500:	b2 30       	cpi	r27, 0x02	; 2
    6502:	08 f0       	brcs	.+2      	; 0x6506 <qtm_scroller_process+0x226>
    6504:	d4 c1       	rjmp	.+936    	; 0x68ae <qtm_scroller_process+0x5ce>
    6506:	d3 01       	movw	r26, r6
    6508:	14 96       	adiw	r26, 0x04	; 4
    650a:	1c 91       	ld	r17, X
    650c:	10 3d       	cpi	r17, 0xD0	; 208
    650e:	08 f0       	brcs	.+2      	; 0x6512 <qtm_scroller_process+0x232>
    6510:	ce c1       	rjmp	.+924    	; 0x68ae <qtm_scroller_process+0x5ce>
    6512:	61 11       	cpse	r22, r1
    6514:	05 c0       	rjmp	.+10     	; 0x6520 <qtm_scroller_process+0x240>
    6516:	e2 0f       	add	r30, r18
    6518:	f3 1f       	adc	r31, r19
    651a:	17 82       	std	Z+7, r1	; 0x07
    651c:	10 86       	std	Z+8, r1	; 0x08
    651e:	c8 c1       	rjmp	.+912    	; 0x68b0 <qtm_scroller_process+0x5d0>
    6520:	f3 01       	movw	r30, r6
    6522:	f3 81       	ldd	r31, Z+3	; 0x03
    6524:	fb 83       	std	Y+3, r31	; 0x03
    6526:	e1 2e       	mov	r14, r17
    6528:	e2 94       	swap	r14
    652a:	9f e0       	ldi	r25, 0x0F	; 15
    652c:	e9 22       	and	r14, r25
    652e:	ec 86       	std	Y+12, r14	; 0x0c
    6530:	ac 80       	ldd	r10, Y+4	; 0x04
    6532:	bd 80       	ldd	r11, Y+5	; 0x05
    6534:	a4 0c       	add	r10, r4
    6536:	b5 1c       	adc	r11, r5
    6538:	f5 01       	movw	r30, r10
    653a:	ba 01       	movw	r22, r20
    653c:	21 2c       	mov	r2, r1
    653e:	31 2c       	mov	r3, r1
    6540:	20 e0       	ldi	r18, 0x00	; 0
    6542:	30 e0       	ldi	r19, 0x00	; 0
    6544:	8b 81       	ldd	r24, Y+3	; 0x03
    6546:	e8 2e       	mov	r14, r24
    6548:	f1 2c       	mov	r15, r1
    654a:	6a 01       	movw	r12, r20
    654c:	ce 0c       	add	r12, r14
    654e:	df 1c       	adc	r13, r15
    6550:	6c 15       	cp	r22, r12
    6552:	7d 05       	cpc	r23, r13
    6554:	b0 f4       	brcc	.+44     	; 0x6582 <qtm_scroller_process+0x2a2>
    6556:	a2 81       	ldd	r26, Z+2	; 0x02
    6558:	b3 81       	ldd	r27, Z+3	; 0x03
    655a:	11 96       	adiw	r26, 0x01	; 1
    655c:	8d 91       	ld	r24, X+
    655e:	9c 91       	ld	r25, X
    6560:	12 97       	sbiw	r26, 0x02	; 2
    6562:	a4 81       	ldd	r26, Z+4	; 0x04
    6564:	b5 81       	ldd	r27, Z+5	; 0x05
    6566:	8a 1b       	sub	r24, r26
    6568:	9b 0b       	sbc	r25, r27
    656a:	18 16       	cp	r1, r24
    656c:	19 06       	cpc	r1, r25
    656e:	2c f4       	brge	.+10     	; 0x657a <qtm_scroller_process+0x29a>
    6570:	28 16       	cp	r2, r24
    6572:	39 06       	cpc	r3, r25
    6574:	14 f4       	brge	.+4      	; 0x657a <qtm_scroller_process+0x29a>
    6576:	1c 01       	movw	r2, r24
    6578:	9b 01       	movw	r18, r22
    657a:	6f 5f       	subi	r22, 0xFF	; 255
    657c:	7f 4f       	sbci	r23, 0xFF	; 255
    657e:	36 96       	adiw	r30, 0x06	; 6
    6580:	e7 cf       	rjmp	.-50     	; 0x6550 <qtm_scroller_process+0x270>
    6582:	42 17       	cp	r20, r18
    6584:	53 07       	cpc	r21, r19
    6586:	79 f5       	brne	.+94     	; 0x65e6 <qtm_scroller_process+0x306>
    6588:	99 81       	ldd	r25, Y+1	; 0x01
    658a:	91 30       	cpi	r25, 0x01	; 1
    658c:	09 f0       	breq	.+2      	; 0x6590 <qtm_scroller_process+0x2b0>
    658e:	a1 c1       	rjmp	.+834    	; 0x68d2 <qtm_scroller_process+0x5f2>
    6590:	8c 9c       	mul	r8, r12
    6592:	f0 01       	movw	r30, r0
    6594:	8d 9c       	mul	r8, r13
    6596:	f0 0d       	add	r31, r0
    6598:	11 24       	eor	r1, r1
    659a:	36 97       	sbiw	r30, 0x06	; 6
    659c:	e4 0d       	add	r30, r4
    659e:	f5 1d       	adc	r31, r5
    65a0:	a2 81       	ldd	r26, Z+2	; 0x02
    65a2:	b3 81       	ldd	r27, Z+3	; 0x03
    65a4:	11 96       	adiw	r26, 0x01	; 1
    65a6:	6d 91       	ld	r22, X+
    65a8:	7c 91       	ld	r23, X
    65aa:	12 97       	sbiw	r26, 0x02	; 2
    65ac:	84 81       	ldd	r24, Z+4	; 0x04
    65ae:	95 81       	ldd	r25, Z+5	; 0x05
    65b0:	68 1b       	sub	r22, r24
    65b2:	79 0b       	sbc	r23, r25
    65b4:	ec 81       	ldd	r30, Y+4	; 0x04
    65b6:	fd 81       	ldd	r31, Y+5	; 0x05
    65b8:	36 96       	adiw	r30, 0x06	; 6
    65ba:	e4 0d       	add	r30, r4
    65bc:	f5 1d       	adc	r31, r5
    65be:	a2 81       	ldd	r26, Z+2	; 0x02
    65c0:	b3 81       	ldd	r27, Z+3	; 0x03
    65c2:	11 96       	adiw	r26, 0x01	; 1
    65c4:	8d 91       	ld	r24, X+
    65c6:	9c 91       	ld	r25, X
    65c8:	12 97       	sbiw	r26, 0x02	; 2
    65ca:	04 80       	ldd	r0, Z+4	; 0x04
    65cc:	f5 81       	ldd	r31, Z+5	; 0x05
    65ce:	e0 2d       	mov	r30, r0
    65d0:	8e 1b       	sub	r24, r30
    65d2:	9f 0b       	sbc	r25, r31
    65d4:	97 ff       	sbrs	r25, 7
    65d6:	02 c0       	rjmp	.+4      	; 0x65dc <qtm_scroller_process+0x2fc>
    65d8:	80 e0       	ldi	r24, 0x00	; 0
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	86 17       	cp	r24, r22
    65de:	97 07       	cpc	r25, r23
    65e0:	0c f4       	brge	.+2      	; 0x65e4 <qtm_scroller_process+0x304>
    65e2:	7b c1       	rjmp	.+758    	; 0x68da <qtm_scroller_process+0x5fa>
    65e4:	12 c0       	rjmp	.+36     	; 0x660a <qtm_scroller_process+0x32a>
    65e6:	82 9e       	mul	r8, r18
    65e8:	f0 01       	movw	r30, r0
    65ea:	83 9e       	mul	r8, r19
    65ec:	f0 0d       	add	r31, r0
    65ee:	11 24       	eor	r1, r1
    65f0:	36 97       	sbiw	r30, 0x06	; 6
    65f2:	e4 0d       	add	r30, r4
    65f4:	f5 1d       	adc	r31, r5
    65f6:	a2 81       	ldd	r26, Z+2	; 0x02
    65f8:	b3 81       	ldd	r27, Z+3	; 0x03
    65fa:	11 96       	adiw	r26, 0x01	; 1
    65fc:	6d 91       	ld	r22, X+
    65fe:	7c 91       	ld	r23, X
    6600:	12 97       	sbiw	r26, 0x02	; 2
    6602:	84 81       	ldd	r24, Z+4	; 0x04
    6604:	95 81       	ldd	r25, Z+5	; 0x05
    6606:	68 1b       	sub	r22, r24
    6608:	79 0b       	sbc	r23, r25
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	77 ff       	sbrs	r23, 7
    660e:	02 c0       	rjmp	.+4      	; 0x6614 <qtm_scroller_process+0x334>
    6610:	60 e0       	ldi	r22, 0x00	; 0
    6612:	70 e0       	ldi	r23, 0x00	; 0
    6614:	a1 e0       	ldi	r26, 0x01	; 1
    6616:	ca 1a       	sub	r12, r26
    6618:	d1 08       	sbc	r13, r1
    661a:	2c 15       	cp	r18, r12
    661c:	3d 05       	cpc	r19, r13
    661e:	81 f4       	brne	.+32     	; 0x6640 <qtm_scroller_process+0x360>
    6620:	b9 81       	ldd	r27, Y+1	; 0x01
    6622:	b1 30       	cpi	r27, 0x01	; 1
    6624:	29 f5       	brne	.+74     	; 0x6670 <qtm_scroller_process+0x390>
    6626:	d5 01       	movw	r26, r10
    6628:	12 96       	adiw	r26, 0x02	; 2
    662a:	ed 91       	ld	r30, X+
    662c:	fc 91       	ld	r31, X
    662e:	13 97       	sbiw	r26, 0x03	; 3
    6630:	c1 80       	ldd	r12, Z+1	; 0x01
    6632:	d2 80       	ldd	r13, Z+2	; 0x02
    6634:	14 96       	adiw	r26, 0x04	; 4
    6636:	0d 90       	ld	r0, X+
    6638:	bc 91       	ld	r27, X
    663a:	a0 2d       	mov	r26, r0
    663c:	f6 01       	movw	r30, r12
    663e:	14 c0       	rjmp	.+40     	; 0x6668 <qtm_scroller_process+0x388>
    6640:	f9 01       	movw	r30, r18
    6642:	31 96       	adiw	r30, 0x01	; 1
    6644:	8e 9e       	mul	r8, r30
    6646:	d0 01       	movw	r26, r0
    6648:	8f 9e       	mul	r8, r31
    664a:	b0 0d       	add	r27, r0
    664c:	11 24       	eor	r1, r1
    664e:	a4 0d       	add	r26, r4
    6650:	b5 1d       	adc	r27, r5
    6652:	12 96       	adiw	r26, 0x02	; 2
    6654:	ed 91       	ld	r30, X+
    6656:	fc 91       	ld	r31, X
    6658:	13 97       	sbiw	r26, 0x03	; 3
    665a:	01 80       	ldd	r0, Z+1	; 0x01
    665c:	f2 81       	ldd	r31, Z+2	; 0x02
    665e:	e0 2d       	mov	r30, r0
    6660:	14 96       	adiw	r26, 0x04	; 4
    6662:	0d 90       	ld	r0, X+
    6664:	bc 91       	ld	r27, X
    6666:	a0 2d       	mov	r26, r0
    6668:	ea 1b       	sub	r30, r26
    666a:	fb 0b       	sbc	r31, r27
    666c:	f7 ff       	sbrs	r31, 7
    666e:	02 c0       	rjmp	.+4      	; 0x6674 <qtm_scroller_process+0x394>
    6670:	e0 e0       	ldi	r30, 0x00	; 0
    6672:	f0 e0       	ldi	r31, 0x00	; 0
    6674:	bb 81       	ldd	r27, Y+3	; 0x03
    6676:	b0 31       	cpi	r27, 0x10	; 16
    6678:	28 f0       	brcs	.+10     	; 0x6684 <qtm_scroller_process+0x3a4>
    667a:	b4 e0       	ldi	r27, 0x04	; 4
    667c:	ab 2e       	mov	r10, r27
    667e:	88 e0       	ldi	r24, 0x08	; 8
    6680:	b8 2e       	mov	r11, r24
    6682:	03 c0       	rjmp	.+6      	; 0x668a <qtm_scroller_process+0x3aa>
    6684:	a1 2c       	mov	r10, r1
    6686:	ac e0       	ldi	r26, 0x0C	; 12
    6688:	ba 2e       	mov	r11, r26
    668a:	91 30       	cpi	r25, 0x01	; 1
    668c:	11 f4       	brne	.+4      	; 0x6692 <qtm_scroller_process+0x3b2>
    668e:	67 01       	movw	r12, r14
    6690:	03 c0       	rjmp	.+6      	; 0x6698 <qtm_scroller_process+0x3b8>
    6692:	24 1b       	sub	r18, r20
    6694:	35 0b       	sbc	r19, r21
    6696:	69 01       	movw	r12, r18
    6698:	0b 2c       	mov	r0, r11
    669a:	02 c0       	rjmp	.+4      	; 0x66a0 <qtm_scroller_process+0x3c0>
    669c:	cc 0c       	add	r12, r12
    669e:	dd 1c       	adc	r13, r13
    66a0:	0a 94       	dec	r0
    66a2:	e2 f7       	brpl	.-8      	; 0x669c <qtm_scroller_process+0x3bc>
    66a4:	6e 17       	cp	r22, r30
    66a6:	7f 07       	cpc	r23, r31
    66a8:	a8 f0       	brcs	.+42     	; 0x66d4 <qtm_scroller_process+0x3f4>
    66aa:	c1 01       	movw	r24, r2
    66ac:	8e 1b       	sub	r24, r30
    66ae:	9f 0b       	sbc	r25, r31
    66b0:	9c 01       	movw	r18, r24
    66b2:	2e 1b       	sub	r18, r30
    66b4:	3f 0b       	sbc	r19, r31
    66b6:	62 0f       	add	r22, r18
    66b8:	73 1f       	adc	r23, r19
    66ba:	4b 2d       	mov	r20, r11
    66bc:	0e 94 08 31 	call	0x6210	; 0x6210 <divide>
    66c0:	21 e0       	ldi	r18, 0x01	; 1
    66c2:	30 e0       	ldi	r19, 0x00	; 0
    66c4:	02 c0       	rjmp	.+4      	; 0x66ca <qtm_scroller_process+0x3ea>
    66c6:	22 0f       	add	r18, r18
    66c8:	33 1f       	adc	r19, r19
    66ca:	ba 94       	dec	r11
    66cc:	e2 f7       	brpl	.-8      	; 0x66c6 <qtm_scroller_process+0x3e6>
    66ce:	82 1b       	sub	r24, r18
    66d0:	93 0b       	sbc	r25, r19
    66d2:	0c c0       	rjmp	.+24     	; 0x66ec <qtm_scroller_process+0x40c>
    66d4:	cf 01       	movw	r24, r30
    66d6:	86 1b       	sub	r24, r22
    66d8:	97 0b       	sbc	r25, r23
    66da:	f1 01       	movw	r30, r2
    66dc:	e6 1b       	sub	r30, r22
    66de:	f7 0b       	sbc	r31, r23
    66e0:	bf 01       	movw	r22, r30
    66e2:	68 0f       	add	r22, r24
    66e4:	79 1f       	adc	r23, r25
    66e6:	4b 2d       	mov	r20, r11
    66e8:	0e 94 08 31 	call	0x6210	; 0x6210 <divide>
    66ec:	8c 0d       	add	r24, r12
    66ee:	9d 1d       	adc	r25, r13
    66f0:	fb 81       	ldd	r31, Y+3	; 0x03
    66f2:	f3 30       	cpi	r31, 0x03	; 3
    66f4:	60 f0       	brcs	.+24     	; 0x670e <qtm_scroller_process+0x42e>
    66f6:	29 81       	ldd	r18, Y+1	; 0x01
    66f8:	21 30       	cpi	r18, 0x01	; 1
    66fa:	19 f4       	brne	.+6      	; 0x6702 <qtm_scroller_process+0x422>
    66fc:	4a 2d       	mov	r20, r10
    66fe:	b7 01       	movw	r22, r14
    6700:	04 c0       	rjmp	.+8      	; 0x670a <qtm_scroller_process+0x42a>
    6702:	b7 01       	movw	r22, r14
    6704:	61 50       	subi	r22, 0x01	; 1
    6706:	71 09       	sbc	r23, r1
    6708:	4a 2d       	mov	r20, r10
    670a:	0e 94 08 31 	call	0x6210	; 0x6210 <divide>
    670e:	81 30       	cpi	r24, 0x01	; 1
    6710:	30 e1       	ldi	r19, 0x10	; 16
    6712:	93 07       	cpc	r25, r19
    6714:	10 f0       	brcs	.+4      	; 0x671a <qtm_scroller_process+0x43a>
    6716:	80 e0       	ldi	r24, 0x00	; 0
    6718:	90 e1       	ldi	r25, 0x10	; 16
    671a:	e9 80       	ldd	r14, Y+1	; 0x01
    671c:	e1 10       	cpse	r14, r1
    671e:	17 c0       	rjmp	.+46     	; 0x674e <qtm_scroller_process+0x46e>
    6720:	1f 70       	andi	r17, 0x0F	; 15
    6722:	a9 f0       	breq	.+42     	; 0x674e <qtm_scroller_process+0x46e>
    6724:	28 e2       	ldi	r18, 0x28	; 40
    6726:	12 9f       	mul	r17, r18
    6728:	a0 01       	movw	r20, r0
    672a:	11 24       	eor	r1, r1
    672c:	84 17       	cp	r24, r20
    672e:	95 07       	cpc	r25, r21
    6730:	18 f0       	brcs	.+6      	; 0x6738 <qtm_scroller_process+0x458>
    6732:	84 1b       	sub	r24, r20
    6734:	95 0b       	sbc	r25, r21
    6736:	02 c0       	rjmp	.+4      	; 0x673c <qtm_scroller_process+0x45c>
    6738:	80 e0       	ldi	r24, 0x00	; 0
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	44 0f       	add	r20, r20
    673e:	55 1f       	adc	r21, r21
    6740:	60 e0       	ldi	r22, 0x00	; 0
    6742:	70 e1       	ldi	r23, 0x10	; 16
    6744:	64 1b       	sub	r22, r20
    6746:	75 0b       	sbc	r23, r21
    6748:	4c e0       	ldi	r20, 0x0C	; 12
    674a:	0e 94 08 31 	call	0x6210	; 0x6210 <divide>
    674e:	2c e0       	ldi	r18, 0x0C	; 12
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	ec 84       	ldd	r14, Y+12	; 0x0c
    6754:	2e 19       	sub	r18, r14
    6756:	31 09       	sbc	r19, r1
    6758:	61 e0       	ldi	r22, 0x01	; 1
    675a:	70 e0       	ldi	r23, 0x00	; 0
    675c:	02 c0       	rjmp	.+4      	; 0x6762 <qtm_scroller_process+0x482>
    675e:	66 0f       	add	r22, r22
    6760:	77 1f       	adc	r23, r23
    6762:	ea 94       	dec	r14
    6764:	e2 f7       	brpl	.-8      	; 0x675e <qtm_scroller_process+0x47e>
    6766:	fb 01       	movw	r30, r22
    6768:	31 97       	sbiw	r30, 0x01	; 1
    676a:	02 c0       	rjmp	.+4      	; 0x6770 <qtm_scroller_process+0x490>
    676c:	96 95       	lsr	r25
    676e:	87 95       	ror	r24
    6770:	2a 95       	dec	r18
    6772:	e2 f7       	brpl	.-8      	; 0x676c <qtm_scroller_process+0x48c>
    6774:	e8 17       	cp	r30, r24
    6776:	f9 07       	cpc	r31, r25
    6778:	08 f4       	brcc	.+2      	; 0x677c <qtm_scroller_process+0x49c>
    677a:	cf 01       	movw	r24, r30
    677c:	fd 84       	ldd	r15, Y+13	; 0x0d
    677e:	ff 20       	and	r15, r15
    6780:	d9 f1       	breq	.+118    	; 0x67f8 <qtm_scroller_process+0x518>
    6782:	ae 85       	ldd	r26, Y+14	; 0x0e
    6784:	bf 85       	ldd	r27, Y+15	; 0x0f
    6786:	13 96       	adiw	r26, 0x03	; 3
    6788:	4d 91       	ld	r20, X+
    678a:	5c 91       	ld	r21, X
    678c:	14 97       	sbiw	r26, 0x04	; 4
    678e:	9c 01       	movw	r18, r24
    6790:	24 1b       	sub	r18, r20
    6792:	35 0b       	sbc	r19, r21
    6794:	b9 81       	ldd	r27, Y+1	; 0x01
    6796:	b1 30       	cpi	r27, 0x01	; 1
    6798:	a9 f4       	brne	.+42     	; 0x67c4 <qtm_scroller_process+0x4e4>
    679a:	db 01       	movw	r26, r22
    679c:	b6 95       	lsr	r27
    679e:	a7 95       	ror	r26
    67a0:	37 ff       	sbrs	r19, 7
    67a2:	0a c0       	rjmp	.+20     	; 0x67b8 <qtm_scroller_process+0x4d8>
    67a4:	b1 95       	neg	r27
    67a6:	a1 95       	neg	r26
    67a8:	b1 09       	sbc	r27, r1
    67aa:	2a 17       	cp	r18, r26
    67ac:	3b 07       	cpc	r19, r27
    67ae:	0c f0       	brlt	.+2      	; 0x67b2 <qtm_scroller_process+0x4d2>
    67b0:	96 c0       	rjmp	.+300    	; 0x68de <qtm_scroller_process+0x5fe>
    67b2:	26 0f       	add	r18, r22
    67b4:	37 1f       	adc	r19, r23
    67b6:	06 c0       	rjmp	.+12     	; 0x67c4 <qtm_scroller_process+0x4e4>
    67b8:	a2 17       	cp	r26, r18
    67ba:	b3 07       	cpc	r27, r19
    67bc:	0c f0       	brlt	.+2      	; 0x67c0 <qtm_scroller_process+0x4e0>
    67be:	95 c0       	rjmp	.+298    	; 0x68ea <qtm_scroller_process+0x60a>
    67c0:	26 1b       	sub	r18, r22
    67c2:	37 0b       	sbc	r19, r23
    67c4:	21 30       	cpi	r18, 0x01	; 1
    67c6:	31 05       	cpc	r19, r1
    67c8:	c1 f0       	breq	.+48     	; 0x67fa <qtm_scroller_process+0x51a>
    67ca:	2f 3f       	cpi	r18, 0xFF	; 255
    67cc:	6f ef       	ldi	r22, 0xFF	; 255
    67ce:	36 07       	cpc	r19, r22
    67d0:	a1 f0       	breq	.+40     	; 0x67fa <qtm_scroller_process+0x51a>
    67d2:	37 ff       	sbrs	r19, 7
    67d4:	09 c0       	rjmp	.+18     	; 0x67e8 <qtm_scroller_process+0x508>
    67d6:	31 95       	neg	r19
    67d8:	21 95       	neg	r18
    67da:	31 09       	sbc	r19, r1
    67dc:	36 95       	lsr	r19
    67de:	27 95       	ror	r18
    67e0:	31 95       	neg	r19
    67e2:	21 95       	neg	r18
    67e4:	31 09       	sbc	r19, r1
    67e6:	02 c0       	rjmp	.+4      	; 0x67ec <qtm_scroller_process+0x50c>
    67e8:	36 95       	lsr	r19
    67ea:	27 95       	ror	r18
    67ec:	24 0f       	add	r18, r20
    67ee:	35 1f       	adc	r19, r21
    67f0:	af 01       	movw	r20, r30
    67f2:	42 23       	and	r20, r18
    67f4:	53 23       	and	r21, r19
    67f6:	01 c0       	rjmp	.+2      	; 0x67fa <qtm_scroller_process+0x51a>
    67f8:	ac 01       	movw	r20, r24
    67fa:	ae 85       	ldd	r26, Y+14	; 0x0e
    67fc:	bf 85       	ldd	r27, Y+15	; 0x0f
    67fe:	13 96       	adiw	r26, 0x03	; 3
    6800:	8d 93       	st	X+, r24
    6802:	9c 93       	st	X, r25
    6804:	14 97       	sbiw	r26, 0x04	; 4
    6806:	f3 01       	movw	r30, r6
    6808:	a5 81       	ldd	r26, Z+5	; 0x05
    680a:	ee 85       	ldd	r30, Y+14	; 0x0e
    680c:	ff 85       	ldd	r31, Y+15	; 0x0f
    680e:	65 81       	ldd	r22, Z+5	; 0x05
    6810:	76 81       	ldd	r23, Z+6	; 0x06
    6812:	f3 01       	movw	r30, r6
    6814:	24 81       	ldd	r18, Z+4	; 0x04
    6816:	ca 01       	movw	r24, r20
    6818:	86 1b       	sub	r24, r22
    681a:	97 0b       	sbc	r25, r23
    681c:	30 81       	ld	r19, Z
    681e:	31 30       	cpi	r19, 0x01	; 1
    6820:	e1 f4       	brne	.+56     	; 0x685a <qtm_scroller_process+0x57a>
    6822:	22 95       	swap	r18
    6824:	2f 70       	andi	r18, 0x0F	; 15
    6826:	e1 e0       	ldi	r30, 0x01	; 1
    6828:	f0 e0       	ldi	r31, 0x00	; 0
    682a:	02 c0       	rjmp	.+4      	; 0x6830 <qtm_scroller_process+0x550>
    682c:	ee 0f       	add	r30, r30
    682e:	ff 1f       	adc	r31, r31
    6830:	2a 95       	dec	r18
    6832:	e2 f7       	brpl	.-8      	; 0x682c <qtm_scroller_process+0x54c>
    6834:	9f 01       	movw	r18, r30
    6836:	36 95       	lsr	r19
    6838:	27 95       	ror	r18
    683a:	97 ff       	sbrs	r25, 7
    683c:	09 c0       	rjmp	.+18     	; 0x6850 <qtm_scroller_process+0x570>
    683e:	31 95       	neg	r19
    6840:	21 95       	neg	r18
    6842:	31 09       	sbc	r19, r1
    6844:	82 17       	cp	r24, r18
    6846:	93 07       	cpc	r25, r19
    6848:	54 f4       	brge	.+20     	; 0x685e <qtm_scroller_process+0x57e>
    684a:	8e 0f       	add	r24, r30
    684c:	9f 1f       	adc	r25, r31
    684e:	05 c0       	rjmp	.+10     	; 0x685a <qtm_scroller_process+0x57a>
    6850:	28 17       	cp	r18, r24
    6852:	39 07       	cpc	r19, r25
    6854:	ac f4       	brge	.+42     	; 0x6880 <qtm_scroller_process+0x5a0>
    6856:	8e 1b       	sub	r24, r30
    6858:	9f 0b       	sbc	r25, r31
    685a:	97 ff       	sbrs	r25, 7
    685c:	11 c0       	rjmp	.+34     	; 0x6880 <qtm_scroller_process+0x5a0>
    685e:	91 95       	neg	r25
    6860:	81 95       	neg	r24
    6862:	91 09       	sbc	r25, r1
    6864:	ee 85       	ldd	r30, Y+14	; 0x0e
    6866:	ff 85       	ldd	r31, Y+15	; 0x0f
    6868:	22 81       	ldd	r18, Z+2	; 0x02
    686a:	30 e0       	ldi	r19, 0x00	; 0
    686c:	28 17       	cp	r18, r24
    686e:	39 07       	cpc	r19, r25
    6870:	14 f0       	brlt	.+4      	; 0x6876 <qtm_scroller_process+0x596>
    6872:	80 e0       	ldi	r24, 0x00	; 0
    6874:	1a c0       	rjmp	.+52     	; 0x68aa <qtm_scroller_process+0x5ca>
    6876:	ee 85       	ldd	r30, Y+14	; 0x0e
    6878:	ff 85       	ldd	r31, Y+15	; 0x0f
    687a:	a1 83       	std	Z+1, r26	; 0x01
    687c:	12 82       	std	Z+2, r1	; 0x02
    687e:	0b c0       	rjmp	.+22     	; 0x6896 <qtm_scroller_process+0x5b6>
    6880:	ee 85       	ldd	r30, Y+14	; 0x0e
    6882:	ff 85       	ldd	r31, Y+15	; 0x0f
    6884:	21 81       	ldd	r18, Z+1	; 0x01
    6886:	30 e0       	ldi	r19, 0x00	; 0
    6888:	28 17       	cp	r18, r24
    688a:	39 07       	cpc	r19, r25
    688c:	94 f7       	brge	.-28     	; 0x6872 <qtm_scroller_process+0x592>
    688e:	ee 85       	ldd	r30, Y+14	; 0x0e
    6890:	ff 85       	ldd	r31, Y+15	; 0x0f
    6892:	11 82       	std	Z+1, r1	; 0x01
    6894:	a2 83       	std	Z+2, r26	; 0x02
    6896:	46 17       	cp	r20, r22
    6898:	57 07       	cpc	r21, r23
    689a:	59 f3       	breq	.-42     	; 0x6872 <qtm_scroller_process+0x592>
    689c:	ae 85       	ldd	r26, Y+14	; 0x0e
    689e:	bf 85       	ldd	r27, Y+15	; 0x0f
    68a0:	15 96       	adiw	r26, 0x05	; 5
    68a2:	4d 93       	st	X+, r20
    68a4:	5c 93       	st	X, r21
    68a6:	16 97       	sbiw	r26, 0x06	; 6
    68a8:	82 e0       	ldi	r24, 0x02	; 2
    68aa:	81 68       	ori	r24, 0x81	; 129
    68ac:	02 c0       	rjmp	.+4      	; 0x68b2 <qtm_scroller_process+0x5d2>
    68ae:	02 e0       	ldi	r16, 0x02	; 2
    68b0:	80 e0       	ldi	r24, 0x00	; 0
    68b2:	ee 85       	ldd	r30, Y+14	; 0x0e
    68b4:	ff 85       	ldd	r31, Y+15	; 0x0f
    68b6:	80 83       	st	Z, r24
    68b8:	81 78       	andi	r24, 0x81	; 129
    68ba:	ea 80       	ldd	r14, Y+2	; 0x02
    68bc:	e8 2a       	or	r14, r24
    68be:	ea 82       	std	Y+2, r14	; 0x02
    68c0:	93 94       	inc	r9
    68c2:	46 cd       	rjmp	.-1396   	; 0x6350 <qtm_scroller_process+0x70>
    68c4:	ed 91       	ld	r30, X+
    68c6:	fc 91       	ld	r31, X
    68c8:	ea 80       	ldd	r14, Y+2	; 0x02
    68ca:	e0 82       	st	Z, r14
    68cc:	13 c0       	rjmp	.+38     	; 0x68f4 <qtm_scroller_process+0x614>
    68ce:	0b e0       	ldi	r16, 0x0B	; 11
    68d0:	11 c0       	rjmp	.+34     	; 0x68f4 <qtm_scroller_process+0x614>
    68d2:	60 e0       	ldi	r22, 0x00	; 0
    68d4:	70 e0       	ldi	r23, 0x00	; 0
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	9d ce       	rjmp	.-710    	; 0x6614 <qtm_scroller_process+0x334>
    68da:	91 e0       	ldi	r25, 0x01	; 1
    68dc:	9b ce       	rjmp	.-714    	; 0x6614 <qtm_scroller_process+0x334>
    68de:	2f 3f       	cpi	r18, 0xFF	; 255
    68e0:	6f ef       	ldi	r22, 0xFF	; 255
    68e2:	36 07       	cpc	r19, r22
    68e4:	09 f0       	breq	.+2      	; 0x68e8 <qtm_scroller_process+0x608>
    68e6:	77 cf       	rjmp	.-274    	; 0x67d6 <qtm_scroller_process+0x4f6>
    68e8:	88 cf       	rjmp	.-240    	; 0x67fa <qtm_scroller_process+0x51a>
    68ea:	21 30       	cpi	r18, 0x01	; 1
    68ec:	31 05       	cpc	r19, r1
    68ee:	09 f0       	breq	.+2      	; 0x68f2 <qtm_scroller_process+0x612>
    68f0:	70 cf       	rjmp	.-288    	; 0x67d2 <qtm_scroller_process+0x4f2>
    68f2:	83 cf       	rjmp	.-250    	; 0x67fa <qtm_scroller_process+0x51a>
    68f4:	80 2f       	mov	r24, r16
    68f6:	61 96       	adiw	r28, 0x11	; 17
    68f8:	cd bf       	out	0x3d, r28	; 61
    68fa:	de bf       	out	0x3e, r29	; 62
    68fc:	df 91       	pop	r29
    68fe:	cf 91       	pop	r28
    6900:	1f 91       	pop	r17
    6902:	0f 91       	pop	r16
    6904:	ff 90       	pop	r15
    6906:	ef 90       	pop	r14
    6908:	df 90       	pop	r13
    690a:	cf 90       	pop	r12
    690c:	bf 90       	pop	r11
    690e:	af 90       	pop	r10
    6910:	9f 90       	pop	r9
    6912:	8f 90       	pop	r8
    6914:	7f 90       	pop	r7
    6916:	6f 90       	pop	r6
    6918:	5f 90       	pop	r5
    691a:	4f 90       	pop	r4
    691c:	3f 90       	pop	r3
    691e:	2f 90       	pop	r2
    6920:	08 95       	ret

00006922 <charge_share_test>:
    6922:	a0 91 fa 68 	lds	r26, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    6926:	b0 91 fb 68 	lds	r27, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    692a:	25 e0       	ldi	r18, 0x05	; 5
    692c:	ac 01       	movw	r20, r24
    692e:	24 9f       	mul	r18, r20
    6930:	c0 01       	movw	r24, r0
    6932:	25 9f       	mul	r18, r21
    6934:	90 0d       	add	r25, r0
    6936:	11 24       	eor	r1, r1
    6938:	14 96       	adiw	r26, 0x04	; 4
    693a:	ed 91       	ld	r30, X+
    693c:	fc 91       	ld	r31, X
    693e:	15 97       	sbiw	r26, 0x05	; 5
    6940:	e8 0f       	add	r30, r24
    6942:	f9 1f       	adc	r31, r25
    6944:	81 81       	ldd	r24, Z+1	; 0x01
    6946:	92 81       	ldd	r25, Z+2	; 0x02
    6948:	86 17       	cp	r24, r22
    694a:	97 07       	cpc	r25, r23
    694c:	81 f1       	breq	.+96     	; 0x69ae <charge_share_test+0x8c>
    694e:	86 17       	cp	r24, r22
    6950:	97 07       	cpc	r25, r23
    6952:	18 f4       	brcc	.+6      	; 0x695a <charge_share_test+0x38>
    6954:	68 1b       	sub	r22, r24
    6956:	79 0b       	sbc	r23, r25
    6958:	04 c0       	rjmp	.+8      	; 0x6962 <charge_share_test+0x40>
    695a:	9c 01       	movw	r18, r24
    695c:	26 1b       	sub	r18, r22
    695e:	37 0b       	sbc	r19, r23
    6960:	b9 01       	movw	r22, r18
    6962:	ed 91       	ld	r30, X+
    6964:	fc 91       	ld	r31, X
    6966:	82 81       	ldd	r24, Z+2	; 0x02
    6968:	80 34       	cpi	r24, 0x40	; 64
    696a:	11 f4       	brne	.+4      	; 0x6970 <charge_share_test+0x4e>
    696c:	76 95       	lsr	r23
    696e:	67 95       	ror	r22
    6970:	65 38       	cpi	r22, 0x85	; 133
    6972:	71 05       	cpc	r23, r1
    6974:	d0 f4       	brcc	.+52     	; 0x69aa <charge_share_test+0x88>
    6976:	66 30       	cpi	r22, 0x06	; 6
    6978:	71 05       	cpc	r23, r1
    697a:	c8 f0       	brcs	.+50     	; 0x69ae <charge_share_test+0x8c>
    697c:	e3 81       	ldd	r30, Z+3	; 0x03
    697e:	e0 73       	andi	r30, 0x30	; 48
    6980:	f0 e0       	ldi	r31, 0x00	; 0
    6982:	83 e0       	ldi	r24, 0x03	; 3
    6984:	f6 95       	lsr	r31
    6986:	e7 95       	ror	r30
    6988:	8a 95       	dec	r24
    698a:	e1 f7       	brne	.-8      	; 0x6984 <charge_share_test+0x62>
    698c:	e0 53       	subi	r30, 0x30	; 48
    698e:	fc 49       	sbci	r31, 0x9C	; 156
    6990:	80 81       	ld	r24, Z
    6992:	91 81       	ldd	r25, Z+1	; 0x01
    6994:	68 9f       	mul	r22, r24
    6996:	90 01       	movw	r18, r0
    6998:	69 9f       	mul	r22, r25
    699a:	30 0d       	add	r19, r0
    699c:	78 9f       	mul	r23, r24
    699e:	30 0d       	add	r19, r0
    69a0:	11 24       	eor	r1, r1
    69a2:	81 e0       	ldi	r24, 0x01	; 1
    69a4:	23 2b       	or	r18, r19
    69a6:	21 f4       	brne	.+8      	; 0x69b0 <charge_share_test+0x8e>
    69a8:	02 c0       	rjmp	.+4      	; 0x69ae <charge_share_test+0x8c>
    69aa:	81 e0       	ldi	r24, 0x01	; 1
    69ac:	08 95       	ret
    69ae:	80 e0       	ldi	r24, 0x00	; 0
    69b0:	08 95       	ret

000069b2 <select_next_channel_to_measure>:
    69b2:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    69b6:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    69ba:	a0 91 fa 68 	lds	r26, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    69be:	b0 91 fb 68 	lds	r27, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    69c2:	ed 91       	ld	r30, X+
    69c4:	fc 91       	ld	r31, X
    69c6:	11 97       	sbiw	r26, 0x01	; 1
    69c8:	40 81       	ld	r20, Z
    69ca:	51 81       	ldd	r21, Z+1	; 0x01
    69cc:	25 e0       	ldi	r18, 0x05	; 5
    69ce:	28 9f       	mul	r18, r24
    69d0:	b0 01       	movw	r22, r0
    69d2:	29 9f       	mul	r18, r25
    69d4:	70 0d       	add	r23, r0
    69d6:	11 24       	eor	r1, r1
    69d8:	20 e0       	ldi	r18, 0x00	; 0
    69da:	30 e0       	ldi	r19, 0x00	; 0
    69dc:	84 17       	cp	r24, r20
    69de:	95 07       	cpc	r25, r21
    69e0:	a8 f4       	brcc	.+42     	; 0x6a0c <select_next_channel_to_measure+0x5a>
    69e2:	14 96       	adiw	r26, 0x04	; 4
    69e4:	ed 91       	ld	r30, X+
    69e6:	fc 91       	ld	r31, X
    69e8:	15 97       	sbiw	r26, 0x05	; 5
    69ea:	e2 0f       	add	r30, r18
    69ec:	f3 1f       	adc	r31, r19
    69ee:	e6 0f       	add	r30, r22
    69f0:	f7 1f       	adc	r31, r23
    69f2:	e0 81       	ld	r30, Z
    69f4:	2b 5f       	subi	r18, 0xFB	; 251
    69f6:	3f 4f       	sbci	r19, 0xFF	; 255
    69f8:	e0 fd       	sbrc	r30, 0
    69fa:	02 c0       	rjmp	.+4      	; 0x6a00 <select_next_channel_to_measure+0x4e>
    69fc:	01 96       	adiw	r24, 0x01	; 1
    69fe:	ee cf       	rjmp	.-36     	; 0x69dc <select_next_channel_to_measure+0x2a>
    6a00:	80 93 60 67 	sts	0x6760, r24	; 0x806760 <current_measure_channel>
    6a04:	90 93 61 67 	sts	0x6761, r25	; 0x806761 <current_measure_channel+0x1>
    6a08:	80 e0       	ldi	r24, 0x00	; 0
    6a0a:	08 95       	ret
    6a0c:	10 92 60 67 	sts	0x6760, r1	; 0x806760 <current_measure_channel>
    6a10:	10 92 61 67 	sts	0x6761, r1	; 0x806761 <current_measure_channel+0x1>
    6a14:	81 e0       	ldi	r24, 0x01	; 1
    6a16:	08 95       	ret

00006a18 <qtm_measure_node>:
    6a18:	af 92       	push	r10
    6a1a:	bf 92       	push	r11
    6a1c:	cf 92       	push	r12
    6a1e:	df 92       	push	r13
    6a20:	ef 92       	push	r14
    6a22:	ff 92       	push	r15
    6a24:	0f 93       	push	r16
    6a26:	1f 93       	push	r17
    6a28:	cf 93       	push	r28
    6a2a:	df 93       	push	r29
    6a2c:	7c 01       	movw	r14, r24
    6a2e:	e0 91 fa 68 	lds	r30, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    6a32:	f0 91 fb 68 	lds	r31, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    6a36:	84 e1       	ldi	r24, 0x14	; 20
    6a38:	8e 9d       	mul	r24, r14
    6a3a:	e0 01       	movw	r28, r0
    6a3c:	8f 9d       	mul	r24, r15
    6a3e:	d0 0d       	add	r29, r0
    6a40:	11 24       	eor	r1, r1
    6a42:	a2 81       	ldd	r26, Z+2	; 0x02
    6a44:	b3 81       	ldd	r27, Z+3	; 0x03
    6a46:	ac 0f       	add	r26, r28
    6a48:	bd 1f       	adc	r27, r29
    6a4a:	18 96       	adiw	r26, 0x08	; 8
    6a4c:	2c 91       	ld	r18, X
    6a4e:	18 97       	sbiw	r26, 0x08	; 8
    6a50:	19 96       	adiw	r26, 0x09	; 9
    6a52:	3c 91       	ld	r19, X
    6a54:	19 97       	sbiw	r26, 0x09	; 9
    6a56:	1a 96       	adiw	r26, 0x0a	; 10
    6a58:	4c 91       	ld	r20, X
    6a5a:	1a 97       	sbiw	r26, 0x0a	; 10
    6a5c:	1b 96       	adiw	r26, 0x0b	; 11
    6a5e:	5c 91       	ld	r21, X
    6a60:	1b 97       	sbiw	r26, 0x0b	; 11
    6a62:	1c 96       	adiw	r26, 0x0c	; 12
    6a64:	6c 91       	ld	r22, X
    6a66:	1c 97       	sbiw	r26, 0x0c	; 12
    6a68:	1d 96       	adiw	r26, 0x0d	; 13
    6a6a:	7c 91       	ld	r23, X
    6a6c:	1d 97       	sbiw	r26, 0x0d	; 13
    6a6e:	1e 96       	adiw	r26, 0x0e	; 14
    6a70:	8c 91       	ld	r24, X
    6a72:	1e 97       	sbiw	r26, 0x0e	; 14
    6a74:	1f 96       	adiw	r26, 0x0f	; 15
    6a76:	9c 91       	ld	r25, X
    6a78:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7f07f0>
    6a7c:	08 e0       	ldi	r16, 0x08	; 8
    6a7e:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6a82:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7f07f1>
    6a86:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6a8a:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7f07f2>
    6a8e:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6a92:	20 93 f3 07 	sts	0x07F3, r18	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7f07f3>
    6a96:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6a9a:	20 93 f4 07 	sts	0x07F4, r18	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7f07f4>
    6a9e:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6aa2:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7f07f5>
    6aa6:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    6aaa:	a0 81       	ld	r26, Z
    6aac:	b1 81       	ldd	r27, Z+1	; 0x01
    6aae:	12 96       	adiw	r26, 0x02	; 2
    6ab0:	8c 91       	ld	r24, X
    6ab2:	80 38       	cpi	r24, 0x80	; 128
    6ab4:	09 f4       	brne	.+2      	; 0x6ab8 <qtm_measure_node+0xa0>
    6ab6:	4f c0       	rjmp	.+158    	; 0x6b56 <qtm_measure_node+0x13e>
    6ab8:	a2 81       	ldd	r26, Z+2	; 0x02
    6aba:	b3 81       	ldd	r27, Z+3	; 0x03
    6abc:	ac 0f       	add	r26, r28
    6abe:	bd 1f       	adc	r27, r29
    6ac0:	cc 90       	ld	r12, X
    6ac2:	11 96       	adiw	r26, 0x01	; 1
    6ac4:	3c 91       	ld	r19, X
    6ac6:	11 97       	sbiw	r26, 0x01	; 1
    6ac8:	12 96       	adiw	r26, 0x02	; 2
    6aca:	4c 91       	ld	r20, X
    6acc:	12 97       	sbiw	r26, 0x02	; 2
    6ace:	13 96       	adiw	r26, 0x03	; 3
    6ad0:	5c 91       	ld	r21, X
    6ad2:	13 97       	sbiw	r26, 0x03	; 3
    6ad4:	14 96       	adiw	r26, 0x04	; 4
    6ad6:	6c 91       	ld	r22, X
    6ad8:	14 97       	sbiw	r26, 0x04	; 4
    6ada:	15 96       	adiw	r26, 0x05	; 5
    6adc:	7c 91       	ld	r23, X
    6ade:	15 97       	sbiw	r26, 0x05	; 5
    6ae0:	16 96       	adiw	r26, 0x06	; 6
    6ae2:	8c 91       	ld	r24, X
    6ae4:	16 97       	sbiw	r26, 0x06	; 6
    6ae6:	17 96       	adiw	r26, 0x07	; 7
    6ae8:	9c 91       	ld	r25, X
    6aea:	c0 92 e8 07 	sts	0x07E8, r12	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7f07e8>
    6aee:	2c 2d       	mov	r18, r12
    6af0:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6af4:	d2 2e       	mov	r13, r18
    6af6:	20 93 e9 07 	sts	0x07E9, r18	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7f07e9>
    6afa:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6afe:	12 2f       	mov	r17, r18
    6b00:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7f07ea>
    6b04:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6b08:	a2 2e       	mov	r10, r18
    6b0a:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7f07eb>
    6b0e:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6b12:	b2 2e       	mov	r11, r18
    6b14:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7f07ec>
    6b18:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    6b1c:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7f07ed>
    6b20:	80 81       	ld	r24, Z
    6b22:	91 81       	ldd	r25, Z+1	; 0x01
    6b24:	dc 01       	movw	r26, r24
    6b26:	12 96       	adiw	r26, 0x02	; 2
    6b28:	8c 91       	ld	r24, X
    6b2a:	81 38       	cpi	r24, 0x81	; 129
    6b2c:	21 f4       	brne	.+8      	; 0x6b36 <qtm_measure_node+0x11e>
    6b2e:	81 e0       	ldi	r24, 0x01	; 1
    6b30:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    6b34:	10 c0       	rjmp	.+32     	; 0x6b56 <qtm_measure_node+0x13e>
    6b36:	82 38       	cpi	r24, 0x82	; 130
    6b38:	71 f4       	brne	.+28     	; 0x6b56 <qtm_measure_node+0x13e>
    6b3a:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    6b3e:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7f07f8>
    6b42:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7f07f9>
    6b46:	10 93 fa 07 	sts	0x07FA, r17	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7f07fa>
    6b4a:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7f07fb>
    6b4e:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7f07fc>
    6b52:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7f07fd>
    6b56:	25 e0       	ldi	r18, 0x05	; 5
    6b58:	2e 9d       	mul	r18, r14
    6b5a:	c0 01       	movw	r24, r0
    6b5c:	2f 9d       	mul	r18, r15
    6b5e:	90 0d       	add	r25, r0
    6b60:	11 24       	eor	r1, r1
    6b62:	a4 81       	ldd	r26, Z+4	; 0x04
    6b64:	b5 81       	ldd	r27, Z+5	; 0x05
    6b66:	a8 0f       	add	r26, r24
    6b68:	b9 1f       	adc	r27, r25
    6b6a:	13 96       	adiw	r26, 0x03	; 3
    6b6c:	2d 91       	ld	r18, X+
    6b6e:	3c 91       	ld	r19, X
    6b70:	14 97       	sbiw	r26, 0x04	; 4
    6b72:	a9 01       	movw	r20, r18
    6b74:	53 70       	andi	r21, 0x03	; 3
    6b76:	40 93 e4 07 	sts	0x07E4, r20	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7f07e4>
    6b7a:	50 93 e5 07 	sts	0x07E5, r21	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7f07e5>
    6b7e:	37 fd       	sbrc	r19, 7
    6b80:	03 c0       	rjmp	.+6      	; 0x6b88 <qtm_measure_node+0x170>
    6b82:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7f07ca>
    6b86:	03 c0       	rjmp	.+6      	; 0x6b8e <qtm_measure_node+0x176>
    6b88:	21 e0       	ldi	r18, 0x01	; 1
    6b8a:	20 93 ca 07 	sts	0x07CA, r18	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7f07ca>
    6b8e:	a4 81       	ldd	r26, Z+4	; 0x04
    6b90:	b5 81       	ldd	r27, Z+5	; 0x05
    6b92:	a8 0f       	add	r26, r24
    6b94:	b9 1f       	adc	r27, r25
    6b96:	2c 91       	ld	r18, X
    6b98:	21 ff       	sbrs	r18, 1
    6b9a:	02 c0       	rjmp	.+4      	; 0x6ba0 <qtm_measure_node+0x188>
    6b9c:	25 e0       	ldi	r18, 0x05	; 5
    6b9e:	2c 93       	st	X, r18
    6ba0:	24 81       	ldd	r18, Z+4	; 0x04
    6ba2:	35 81       	ldd	r19, Z+5	; 0x05
    6ba4:	d9 01       	movw	r26, r18
    6ba6:	a8 0f       	add	r26, r24
    6ba8:	b9 1f       	adc	r27, r25
    6baa:	8c 91       	ld	r24, X
    6bac:	8c 71       	andi	r24, 0x1C	; 28
    6bae:	69 f4       	brne	.+26     	; 0x6bca <qtm_measure_node+0x1b2>
    6bb0:	a2 81       	ldd	r26, Z+2	; 0x02
    6bb2:	b3 81       	ldd	r27, Z+3	; 0x03
    6bb4:	ac 0f       	add	r26, r28
    6bb6:	bd 1f       	adc	r27, r29
    6bb8:	52 96       	adiw	r26, 0x12	; 18
    6bba:	ac 91       	ld	r26, X
    6bbc:	a2 95       	swap	r26
    6bbe:	af 70       	andi	r26, 0x0F	; 15
    6bc0:	b0 e0       	ldi	r27, 0x00	; 0
    6bc2:	a8 52       	subi	r26, 0x28	; 40
    6bc4:	bc 49       	sbci	r27, 0x9C	; 156
    6bc6:	8c 91       	ld	r24, X
    6bc8:	01 c0       	rjmp	.+2      	; 0x6bcc <qtm_measure_node+0x1b4>
    6bca:	8f e1       	ldi	r24, 0x1F	; 31
    6bcc:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7f07e6>
    6bd0:	a2 81       	ldd	r26, Z+2	; 0x02
    6bd2:	b3 81       	ldd	r27, Z+3	; 0x03
    6bd4:	ac 0f       	add	r26, r28
    6bd6:	bd 1f       	adc	r27, r29
    6bd8:	50 96       	adiw	r26, 0x10	; 16
    6bda:	8c 91       	ld	r24, X
    6bdc:	8b 37       	cpi	r24, 0x7B	; 123
    6bde:	10 f4       	brcc	.+4      	; 0x6be4 <qtm_measure_node+0x1cc>
    6be0:	8c 5f       	subi	r24, 0xFC	; 252
    6be2:	01 c0       	rjmp	.+2      	; 0x6be6 <qtm_measure_node+0x1ce>
    6be4:	8f e7       	ldi	r24, 0x7F	; 127
    6be6:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7f07c4>
    6bea:	a2 81       	ldd	r26, Z+2	; 0x02
    6bec:	b3 81       	ldd	r27, Z+3	; 0x03
    6bee:	ac 0f       	add	r26, r28
    6bf0:	bd 1f       	adc	r27, r29
    6bf2:	53 96       	adiw	r26, 0x13	; 19
    6bf4:	8c 91       	ld	r24, X
    6bf6:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7f07c7>
    6bfa:	a2 81       	ldd	r26, Z+2	; 0x02
    6bfc:	b3 81       	ldd	r27, Z+3	; 0x03
    6bfe:	ac 0f       	add	r26, r28
    6c00:	bd 1f       	adc	r27, r29
    6c02:	51 96       	adiw	r26, 0x11	; 17
    6c04:	8c 91       	ld	r24, X
    6c06:	82 95       	swap	r24
    6c08:	8f 70       	andi	r24, 0x0F	; 15
    6c0a:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7f07c9>
    6c0e:	82 81       	ldd	r24, Z+2	; 0x02
    6c10:	93 81       	ldd	r25, Z+3	; 0x03
    6c12:	c8 0f       	add	r28, r24
    6c14:	d9 1f       	adc	r29, r25
    6c16:	89 89       	ldd	r24, Y+17	; 0x11
    6c18:	8f 70       	andi	r24, 0x0F	; 15
    6c1a:	80 68       	ori	r24, 0x80	; 128
    6c1c:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__TEXT_REGION_LENGTH__+0x7f07c2>
    6c20:	81 e8       	ldi	r24, 0x81	; 129
    6c22:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7f07d0>
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28
    6c30:	1f 91       	pop	r17
    6c32:	0f 91       	pop	r16
    6c34:	ff 90       	pop	r15
    6c36:	ef 90       	pop	r14
    6c38:	df 90       	pop	r13
    6c3a:	cf 90       	pop	r12
    6c3c:	bf 90       	pop	r11
    6c3e:	af 90       	pop	r10
    6c40:	08 95       	ret

00006c42 <qtm_acquisition_process>:
    6c42:	2f 92       	push	r2
    6c44:	3f 92       	push	r3
    6c46:	4f 92       	push	r4
    6c48:	5f 92       	push	r5
    6c4a:	6f 92       	push	r6
    6c4c:	7f 92       	push	r7
    6c4e:	8f 92       	push	r8
    6c50:	9f 92       	push	r9
    6c52:	af 92       	push	r10
    6c54:	bf 92       	push	r11
    6c56:	cf 92       	push	r12
    6c58:	df 92       	push	r13
    6c5a:	ef 92       	push	r14
    6c5c:	ff 92       	push	r15
    6c5e:	0f 93       	push	r16
    6c60:	1f 93       	push	r17
    6c62:	cf 93       	push	r28
    6c64:	df 93       	push	r29
    6c66:	cd b7       	in	r28, 0x3d	; 61
    6c68:	de b7       	in	r29, 0x3e	; 62
    6c6a:	27 97       	sbiw	r28, 0x07	; 7
    6c6c:	cd bf       	out	0x3d, r28	; 61
    6c6e:	de bf       	out	0x3e, r29	; 62
    6c70:	80 91 5f 67 	lds	r24, 0x675F	; 0x80675f <touch_seq_lib_state>
    6c74:	88 23       	and	r24, r24
    6c76:	09 f4       	brne	.+2      	; 0x6c7a <qtm_acquisition_process+0x38>
    6c78:	46 c2       	rjmp	.+1164   	; 0x7106 <qtm_acquisition_process+0x4c4>
    6c7a:	00 91 fa 68 	lds	r16, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    6c7e:	10 91 fb 68 	lds	r17, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    6c82:	20 91 fc 68 	lds	r18, 0x68FC	; 0x8068fc <qtm_raw_data_measurements_ptr>
    6c86:	30 91 fd 68 	lds	r19, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    6c8a:	2a 83       	std	Y+2, r18	; 0x02
    6c8c:	3b 83       	std	Y+3, r19	; 0x03
    6c8e:	c1 2c       	mov	r12, r1
    6c90:	d1 2c       	mov	r13, r1
    6c92:	a1 2c       	mov	r10, r1
    6c94:	b1 2c       	mov	r11, r1
    6c96:	21 2c       	mov	r2, r1
    6c98:	31 2c       	mov	r3, r1
    6c9a:	19 82       	std	Y+1, r1	; 0x01
    6c9c:	44 24       	eor	r4, r4
    6c9e:	4a 94       	dec	r4
    6ca0:	55 24       	eor	r5, r5
    6ca2:	53 94       	inc	r5
    6ca4:	77 24       	eor	r7, r7
    6ca6:	73 94       	inc	r7
    6ca8:	d8 01       	movw	r26, r16
    6caa:	0d 90       	ld	r0, X+
    6cac:	bc 91       	ld	r27, X
    6cae:	a0 2d       	mov	r26, r0
    6cb0:	ae 83       	std	Y+6, r26	; 0x06
    6cb2:	bf 83       	std	Y+7, r27	; 0x07
    6cb4:	8d 91       	ld	r24, X+
    6cb6:	9c 91       	ld	r25, X
    6cb8:	28 16       	cp	r2, r24
    6cba:	39 06       	cpc	r3, r25
    6cbc:	08 f0       	brcs	.+2      	; 0x6cc0 <qtm_acquisition_process+0x7e>
    6cbe:	1f c2       	rjmp	.+1086   	; 0x70fe <qtm_acquisition_process+0x4bc>
    6cc0:	aa 81       	ldd	r26, Y+2	; 0x02
    6cc2:	bb 81       	ldd	r27, Y+3	; 0x03
    6cc4:	4d 91       	ld	r20, X+
    6cc6:	5d 91       	ld	r21, X+
    6cc8:	aa 83       	std	Y+2, r26	; 0x02
    6cca:	bb 83       	std	Y+3, r27	; 0x03
    6ccc:	f8 01       	movw	r30, r16
    6cce:	e4 80       	ldd	r14, Z+4	; 0x04
    6cd0:	f5 80       	ldd	r15, Z+5	; 0x05
    6cd2:	ea 0c       	add	r14, r10
    6cd4:	fb 1c       	adc	r15, r11
    6cd6:	d7 01       	movw	r26, r14
    6cd8:	2c 91       	ld	r18, X
    6cda:	82 2f       	mov	r24, r18
    6cdc:	8c 71       	andi	r24, 0x1C	; 28
    6cde:	90 e0       	ldi	r25, 0x00	; 0
    6ce0:	96 95       	lsr	r25
    6ce2:	87 95       	ror	r24
    6ce4:	96 95       	lsr	r25
    6ce6:	87 95       	ror	r24
    6ce8:	82 30       	cpi	r24, 0x02	; 2
    6cea:	91 05       	cpc	r25, r1
    6cec:	09 f4       	brne	.+2      	; 0x6cf0 <qtm_acquisition_process+0xae>
    6cee:	a0 c1       	rjmp	.+832    	; 0x7030 <qtm_acquisition_process+0x3ee>
    6cf0:	28 f4       	brcc	.+10     	; 0x6cfc <qtm_acquisition_process+0xba>
    6cf2:	00 97       	sbiw	r24, 0x00	; 0
    6cf4:	59 f0       	breq	.+22     	; 0x6d0c <qtm_acquisition_process+0xca>
    6cf6:	01 97       	sbiw	r24, 0x01	; 1
    6cf8:	01 f1       	breq	.+64     	; 0x6d3a <qtm_acquisition_process+0xf8>
    6cfa:	f7 c1       	rjmp	.+1006   	; 0x70ea <qtm_acquisition_process+0x4a8>
    6cfc:	83 30       	cpi	r24, 0x03	; 3
    6cfe:	91 05       	cpc	r25, r1
    6d00:	09 f4       	brne	.+2      	; 0x6d04 <qtm_acquisition_process+0xc2>
    6d02:	59 c1       	rjmp	.+690    	; 0x6fb6 <qtm_acquisition_process+0x374>
    6d04:	04 97       	sbiw	r24, 0x04	; 4
    6d06:	09 f4       	brne	.+2      	; 0x6d0a <qtm_acquisition_process+0xc8>
    6d08:	e1 c0       	rjmp	.+450    	; 0x6ecc <qtm_acquisition_process+0x28a>
    6d0a:	ef c1       	rjmp	.+990    	; 0x70ea <qtm_acquisition_process+0x4a8>
    6d0c:	02 80       	ldd	r0, Z+2	; 0x02
    6d0e:	f3 81       	ldd	r31, Z+3	; 0x03
    6d10:	e0 2d       	mov	r30, r0
    6d12:	ec 0d       	add	r30, r12
    6d14:	fd 1d       	adc	r31, r13
    6d16:	92 89       	ldd	r25, Z+18	; 0x12
    6d18:	9f 70       	andi	r25, 0x0F	; 15
    6d1a:	83 89       	ldd	r24, Z+19	; 0x13
    6d1c:	98 17       	cp	r25, r24
    6d1e:	10 f4       	brcc	.+4      	; 0x6d24 <qtm_acquisition_process+0xe2>
    6d20:	89 1b       	sub	r24, r25
    6d22:	01 c0       	rjmp	.+2      	; 0x6d26 <qtm_acquisition_process+0xe4>
    6d24:	80 e0       	ldi	r24, 0x00	; 0
    6d26:	9a 01       	movw	r18, r20
    6d28:	02 c0       	rjmp	.+4      	; 0x6d2e <qtm_acquisition_process+0xec>
    6d2a:	36 95       	lsr	r19
    6d2c:	27 95       	ror	r18
    6d2e:	8a 95       	dec	r24
    6d30:	e2 f7       	brpl	.-8      	; 0x6d2a <qtm_acquisition_process+0xe8>
    6d32:	f7 01       	movw	r30, r14
    6d34:	21 83       	std	Z+1, r18	; 0x01
    6d36:	32 83       	std	Z+2, r19	; 0x02
    6d38:	d8 c1       	rjmp	.+944    	; 0x70ea <qtm_acquisition_process+0x4a8>
    6d3a:	82 81       	ldd	r24, Z+2	; 0x02
    6d3c:	93 81       	ldd	r25, Z+3	; 0x03
    6d3e:	fc 01       	movw	r30, r24
    6d40:	ec 0d       	add	r30, r12
    6d42:	fd 1d       	adc	r31, r13
    6d44:	4a 01       	movw	r8, r20
    6d46:	03 88       	ldd	r0, Z+19	; 0x13
    6d48:	02 c0       	rjmp	.+4      	; 0x6d4e <qtm_acquisition_process+0x10c>
    6d4a:	96 94       	lsr	r9
    6d4c:	87 94       	ror	r8
    6d4e:	0a 94       	dec	r0
    6d50:	e2 f7       	brpl	.-8      	; 0x6d4a <qtm_acquisition_process+0x108>
    6d52:	d7 01       	movw	r26, r14
    6d54:	11 96       	adiw	r26, 0x01	; 1
    6d56:	8d 92       	st	X+, r8
    6d58:	9c 92       	st	X, r9
    6d5a:	12 97       	sbiw	r26, 0x02	; 2
    6d5c:	13 96       	adiw	r26, 0x03	; 3
    6d5e:	8d 91       	ld	r24, X+
    6d60:	9c 91       	ld	r25, X
    6d62:	14 97       	sbiw	r26, 0x04	; 4
    6d64:	69 2f       	mov	r22, r25
    6d66:	66 1f       	adc	r22, r22
    6d68:	66 27       	eor	r22, r22
    6d6a:	66 1f       	adc	r22, r22
    6d6c:	81 14       	cp	r8, r1
    6d6e:	b2 e0       	ldi	r27, 0x02	; 2
    6d70:	9b 06       	cpc	r9, r27
    6d72:	30 f0       	brcs	.+12     	; 0x6d80 <qtm_acquisition_process+0x13e>
    6d74:	3f ef       	ldi	r19, 0xFF	; 255
    6d76:	83 1a       	sub	r8, r19
    6d78:	31 e0       	ldi	r19, 0x01	; 1
    6d7a:	93 0a       	sbc	r9, r19
    6d7c:	41 e0       	ldi	r20, 0x01	; 1
    6d7e:	05 c0       	rjmp	.+10     	; 0x6d8a <qtm_acquisition_process+0x148>
    6d80:	a2 01       	movw	r20, r4
    6d82:	48 19       	sub	r20, r8
    6d84:	59 09       	sbc	r21, r9
    6d86:	4a 01       	movw	r8, r20
    6d88:	40 e0       	ldi	r20, 0x00	; 0
    6d8a:	96 94       	lsr	r9
    6d8c:	87 94       	ror	r8
    6d8e:	ae 81       	ldd	r26, Y+6	; 0x06
    6d90:	bf 81       	ldd	r27, Y+7	; 0x07
    6d92:	12 96       	adiw	r26, 0x02	; 2
    6d94:	3c 91       	ld	r19, X
    6d96:	30 34       	cpi	r19, 0x40	; 64
    6d98:	29 f0       	breq	.+10     	; 0x6da4 <qtm_acquisition_process+0x162>
    6d9a:	44 23       	and	r20, r20
    6d9c:	09 f4       	brne	.+2      	; 0x6da0 <qtm_acquisition_process+0x15e>
    6d9e:	b6 c1       	rjmp	.+876    	; 0x710c <qtm_acquisition_process+0x4ca>
    6da0:	46 2f       	mov	r20, r22
    6da2:	06 c0       	rjmp	.+12     	; 0x6db0 <qtm_acquisition_process+0x16e>
    6da4:	97 ff       	sbrs	r25, 7
    6da6:	04 c0       	rjmp	.+8      	; 0x6db0 <qtm_acquisition_process+0x16e>
    6da8:	31 e0       	ldi	r19, 0x01	; 1
    6daa:	41 11       	cpse	r20, r1
    6dac:	30 e0       	ldi	r19, 0x00	; 0
    6dae:	43 2f       	mov	r20, r19
    6db0:	ba e0       	ldi	r27, 0x0A	; 10
    6db2:	8b 16       	cp	r8, r27
    6db4:	91 04       	cpc	r9, r1
    6db6:	08 f0       	brcs	.+2      	; 0x6dba <qtm_acquisition_process+0x178>
    6db8:	3f c0       	rjmp	.+126    	; 0x6e38 <qtm_acquisition_process+0x1f6>
    6dba:	26 fd       	sbrc	r18, 6
    6dbc:	3a c0       	rjmp	.+116    	; 0x6e32 <qtm_acquisition_process+0x1f0>
    6dbe:	27 fd       	sbrc	r18, 7
    6dc0:	94 c1       	rjmp	.+808    	; 0x70ea <qtm_acquisition_process+0x4a8>
    6dc2:	ae 81       	ldd	r26, Y+6	; 0x06
    6dc4:	bf 81       	ldd	r27, Y+7	; 0x07
    6dc6:	13 96       	adiw	r26, 0x03	; 3
    6dc8:	8c 91       	ld	r24, X
    6dca:	83 70       	andi	r24, 0x03	; 3
    6dcc:	83 30       	cpi	r24, 0x03	; 3
    6dce:	59 f4       	brne	.+22     	; 0x6de6 <qtm_acquisition_process+0x1a4>
    6dd0:	bf e7       	ldi	r27, 0x7F	; 127
    6dd2:	b0 8b       	std	Z+16, r27	; 0x10
    6dd4:	d8 01       	movw	r26, r16
    6dd6:	14 96       	adiw	r26, 0x04	; 4
    6dd8:	ed 91       	ld	r30, X+
    6dda:	fc 91       	ld	r31, X
    6ddc:	15 97       	sbiw	r26, 0x05	; 5
    6dde:	ea 0d       	add	r30, r10
    6de0:	fb 1d       	adc	r31, r11
    6de2:	b1 e1       	ldi	r27, 0x11	; 17
    6de4:	0d c0       	rjmp	.+26     	; 0x6e00 <qtm_acquisition_process+0x1be>
    6de6:	82 30       	cpi	r24, 0x02	; 2
    6de8:	69 f4       	brne	.+26     	; 0x6e04 <qtm_acquisition_process+0x1c2>
    6dea:	81 89       	ldd	r24, Z+17	; 0x11
    6dec:	80 7f       	andi	r24, 0xF0	; 240
    6dee:	81 8b       	std	Z+17, r24	; 0x11
    6df0:	d8 01       	movw	r26, r16
    6df2:	14 96       	adiw	r26, 0x04	; 4
    6df4:	ed 91       	ld	r30, X+
    6df6:	fc 91       	ld	r31, X
    6df8:	15 97       	sbiw	r26, 0x05	; 5
    6dfa:	ea 0d       	add	r30, r10
    6dfc:	fb 1d       	adc	r31, r11
    6dfe:	b9 e0       	ldi	r27, 0x09	; 9
    6e00:	b0 83       	st	Z, r27
    6e02:	73 c1       	rjmp	.+742    	; 0x70ea <qtm_acquisition_process+0x4a8>
    6e04:	81 30       	cpi	r24, 0x01	; 1
    6e06:	a9 f4       	brne	.+42     	; 0x6e32 <qtm_acquisition_process+0x1f0>
    6e08:	81 89       	ldd	r24, Z+17	; 0x11
    6e0a:	8f 70       	andi	r24, 0x0F	; 15
    6e0c:	81 8b       	std	Z+17, r24	; 0x11
    6e0e:	d8 01       	movw	r26, r16
    6e10:	12 96       	adiw	r26, 0x02	; 2
    6e12:	ed 91       	ld	r30, X+
    6e14:	fc 91       	ld	r31, X
    6e16:	13 97       	sbiw	r26, 0x03	; 3
    6e18:	ec 0d       	add	r30, r12
    6e1a:	fd 1d       	adc	r31, r13
    6e1c:	81 89       	ldd	r24, Z+17	; 0x11
    6e1e:	80 67       	ori	r24, 0x70	; 112
    6e20:	81 8b       	std	Z+17, r24	; 0x11
    6e22:	14 96       	adiw	r26, 0x04	; 4
    6e24:	ed 91       	ld	r30, X+
    6e26:	fc 91       	ld	r31, X
    6e28:	15 97       	sbiw	r26, 0x05	; 5
    6e2a:	ea 0d       	add	r30, r10
    6e2c:	fb 1d       	adc	r31, r11
    6e2e:	bd e0       	ldi	r27, 0x0D	; 13
    6e30:	e7 cf       	rjmp	.-50     	; 0x6e00 <qtm_acquisition_process+0x1be>
    6e32:	f7 01       	movw	r30, r14
    6e34:	70 82       	st	Z, r7
    6e36:	59 c1       	rjmp	.+690    	; 0x70ea <qtm_acquisition_process+0x4a8>
    6e38:	9c 01       	movw	r18, r24
    6e3a:	33 70       	andi	r19, 0x03	; 3
    6e3c:	2f 3f       	cpi	r18, 0xFF	; 255
    6e3e:	f3 e0       	ldi	r31, 0x03	; 3
    6e40:	3f 07       	cpc	r19, r31
    6e42:	31 f4       	brne	.+12     	; 0x6e50 <qtm_acquisition_process+0x20e>
    6e44:	e1 e8       	ldi	r30, 0x81	; 129
    6e46:	d7 01       	movw	r26, r14
    6e48:	ec 93       	st	X, r30
    6e4a:	8f ef       	ldi	r24, 0xFF	; 255
    6e4c:	93 e0       	ldi	r25, 0x03	; 3
    6e4e:	0b c0       	rjmp	.+22     	; 0x6e66 <qtm_acquisition_process+0x224>
    6e50:	21 15       	cp	r18, r1
    6e52:	31 05       	cpc	r19, r1
    6e54:	59 f4       	brne	.+22     	; 0x6e6c <qtm_acquisition_process+0x22a>
    6e56:	97 ff       	sbrs	r25, 7
    6e58:	25 c0       	rjmp	.+74     	; 0x6ea4 <qtm_acquisition_process+0x262>
    6e5a:	e1 e8       	ldi	r30, 0x81	; 129
    6e5c:	d7 01       	movw	r26, r14
    6e5e:	ec 93       	st	X, r30
    6e60:	80 e0       	ldi	r24, 0x00	; 0
    6e62:	90 e0       	ldi	r25, 0x00	; 0
    6e64:	61 e0       	ldi	r22, 0x01	; 1
    6e66:	fe e0       	ldi	r31, 0x0E	; 14
    6e68:	f9 83       	std	Y+1, r31	; 0x01
    6e6a:	1f c0       	rjmp	.+62     	; 0x6eaa <qtm_acquisition_process+0x268>
    6e6c:	c9 01       	movw	r24, r18
    6e6e:	41 11       	cpse	r20, r1
    6e70:	0f c0       	rjmp	.+30     	; 0x6e90 <qtm_acquisition_process+0x24e>
    6e72:	01 96       	adiw	r24, 0x01	; 1
    6e74:	21 e0       	ldi	r18, 0x01	; 1
    6e76:	82 1a       	sub	r8, r18
    6e78:	91 08       	sbc	r9, r1
    6e7a:	31 e0       	ldi	r19, 0x01	; 1
    6e7c:	83 16       	cp	r8, r19
    6e7e:	91 04       	cpc	r9, r1
    6e80:	a1 f0       	breq	.+40     	; 0x6eaa <qtm_acquisition_process+0x268>
    6e82:	8f 3f       	cpi	r24, 0xFF	; 255
    6e84:	43 e0       	ldi	r20, 0x03	; 3
    6e86:	94 07       	cpc	r25, r20
    6e88:	a1 f7       	brne	.-24     	; 0x6e72 <qtm_acquisition_process+0x230>
    6e8a:	0f c0       	rjmp	.+30     	; 0x6eaa <qtm_acquisition_process+0x268>
    6e8c:	00 97       	sbiw	r24, 0x00	; 0
    6e8e:	69 f0       	breq	.+26     	; 0x6eaa <qtm_acquisition_process+0x268>
    6e90:	01 97       	sbiw	r24, 0x01	; 1
    6e92:	ac 01       	movw	r20, r24
    6e94:	42 1b       	sub	r20, r18
    6e96:	53 0b       	sbc	r21, r19
    6e98:	48 0d       	add	r20, r8
    6e9a:	59 1d       	adc	r21, r9
    6e9c:	41 30       	cpi	r20, 0x01	; 1
    6e9e:	51 05       	cpc	r21, r1
    6ea0:	a9 f7       	brne	.-22     	; 0x6e8c <qtm_acquisition_process+0x24a>
    6ea2:	03 c0       	rjmp	.+6      	; 0x6eaa <qtm_acquisition_process+0x268>
    6ea4:	80 ef       	ldi	r24, 0xF0	; 240
    6ea6:	90 e0       	ldi	r25, 0x00	; 0
    6ea8:	61 e0       	ldi	r22, 0x01	; 1
    6eaa:	d8 01       	movw	r26, r16
    6eac:	14 96       	adiw	r26, 0x04	; 4
    6eae:	ed 91       	ld	r30, X+
    6eb0:	fc 91       	ld	r31, X
    6eb2:	15 97       	sbiw	r26, 0x05	; 5
    6eb4:	ea 0d       	add	r30, r10
    6eb6:	fb 1d       	adc	r31, r11
    6eb8:	70 e0       	ldi	r23, 0x00	; 0
    6eba:	77 27       	eor	r23, r23
    6ebc:	66 95       	lsr	r22
    6ebe:	77 95       	ror	r23
    6ec0:	66 27       	eor	r22, r22
    6ec2:	86 2b       	or	r24, r22
    6ec4:	97 2b       	or	r25, r23
    6ec6:	83 83       	std	Z+3, r24	; 0x03
    6ec8:	94 83       	std	Z+4, r25	; 0x04
    6eca:	0f c1       	rjmp	.+542    	; 0x70ea <qtm_acquisition_process+0x4a8>
    6ecc:	f8 01       	movw	r30, r16
    6ece:	82 80       	ldd	r8, Z+2	; 0x02
    6ed0:	93 80       	ldd	r9, Z+3	; 0x03
    6ed2:	8c 0c       	add	r8, r12
    6ed4:	9d 1c       	adc	r9, r13
    6ed6:	fa 01       	movw	r30, r20
    6ed8:	d4 01       	movw	r26, r8
    6eda:	53 96       	adiw	r26, 0x13	; 19
    6edc:	0c 90       	ld	r0, X
    6ede:	53 97       	sbiw	r26, 0x13	; 19
    6ee0:	02 c0       	rjmp	.+4      	; 0x6ee6 <qtm_acquisition_process+0x2a4>
    6ee2:	f6 95       	lsr	r31
    6ee4:	e7 95       	ror	r30
    6ee6:	0a 94       	dec	r0
    6ee8:	e2 f7       	brpl	.-8      	; 0x6ee2 <qtm_acquisition_process+0x2a0>
    6eea:	ec 83       	std	Y+4, r30	; 0x04
    6eec:	fd 83       	std	Y+5, r31	; 0x05
    6eee:	50 96       	adiw	r26, 0x10	; 16
    6ef0:	6c 90       	ld	r6, X
    6ef2:	ff e7       	ldi	r31, 0x7F	; 127
    6ef4:	6f 12       	cpse	r6, r31
    6ef6:	0f c0       	rjmp	.+30     	; 0x6f16 <qtm_acquisition_process+0x2d4>
    6ef8:	ec 81       	ldd	r30, Y+4	; 0x04
    6efa:	fd 81       	ldd	r31, Y+5	; 0x05
    6efc:	d7 01       	movw	r26, r14
    6efe:	11 96       	adiw	r26, 0x01	; 1
    6f00:	ed 93       	st	X+, r30
    6f02:	fc 93       	st	X, r31
    6f04:	12 97       	sbiw	r26, 0x02	; 2
    6f06:	d4 01       	movw	r26, r8
    6f08:	50 96       	adiw	r26, 0x10	; 16
    6f0a:	8c 91       	ld	r24, X
    6f0c:	50 97       	sbiw	r26, 0x10	; 16
    6f0e:	8f 7b       	andi	r24, 0xBF	; 191
    6f10:	50 96       	adiw	r26, 0x10	; 16
    6f12:	8c 93       	st	X, r24
    6f14:	42 c0       	rjmp	.+132    	; 0x6f9a <qtm_acquisition_process+0x358>
    6f16:	f1 2c       	mov	r15, r1
    6f18:	26 2d       	mov	r18, r6
    6f1a:	30 e0       	ldi	r19, 0x00	; 0
    6f1c:	c9 01       	movw	r24, r18
    6f1e:	0f 2c       	mov	r0, r15
    6f20:	02 c0       	rjmp	.+4      	; 0x6f26 <qtm_acquisition_process+0x2e4>
    6f22:	96 95       	lsr	r25
    6f24:	87 95       	ror	r24
    6f26:	0a 94       	dec	r0
    6f28:	e2 f7       	brpl	.-8      	; 0x6f22 <qtm_acquisition_process+0x2e0>
    6f2a:	80 ff       	sbrs	r24, 0
    6f2c:	03 c0       	rjmp	.+6      	; 0x6f34 <qtm_acquisition_process+0x2f2>
    6f2e:	8f 2d       	mov	r24, r15
    6f30:	f1 2c       	mov	r15, r1
    6f32:	01 c0       	rjmp	.+2      	; 0x6f36 <qtm_acquisition_process+0x2f4>
    6f34:	87 e0       	ldi	r24, 0x07	; 7
    6f36:	8f 5f       	subi	r24, 0xFF	; 255
    6f38:	87 30       	cpi	r24, 0x07	; 7
    6f3a:	10 f4       	brcc	.+4      	; 0x6f40 <qtm_acquisition_process+0x2fe>
    6f3c:	f8 2e       	mov	r15, r24
    6f3e:	ee cf       	rjmp	.-36     	; 0x6f1c <qtm_acquisition_process+0x2da>
    6f40:	6c 81       	ldd	r22, Y+4	; 0x04
    6f42:	7d 81       	ldd	r23, Y+5	; 0x05
    6f44:	c1 01       	movw	r24, r2
    6f46:	0e 94 91 34 	call	0x6922	; 0x6922 <charge_share_test>
    6f4a:	88 23       	and	r24, r24
    6f4c:	51 f0       	breq	.+20     	; 0x6f62 <qtm_acquisition_process+0x320>
    6f4e:	81 e0       	ldi	r24, 0x01	; 1
    6f50:	90 e0       	ldi	r25, 0x00	; 0
    6f52:	0f 2c       	mov	r0, r15
    6f54:	01 c0       	rjmp	.+2      	; 0x6f58 <qtm_acquisition_process+0x316>
    6f56:	88 0f       	add	r24, r24
    6f58:	0a 94       	dec	r0
    6f5a:	ea f7       	brpl	.-6      	; 0x6f56 <qtm_acquisition_process+0x314>
    6f5c:	86 29       	or	r24, r6
    6f5e:	f4 01       	movw	r30, r8
    6f60:	80 8b       	std	Z+16, r24	; 0x10
    6f62:	d8 01       	movw	r26, r16
    6f64:	ff 20       	and	r15, r15
    6f66:	91 f0       	breq	.+36     	; 0x6f8c <qtm_acquisition_process+0x34a>
    6f68:	12 96       	adiw	r26, 0x02	; 2
    6f6a:	ed 91       	ld	r30, X+
    6f6c:	fc 91       	ld	r31, X
    6f6e:	13 97       	sbiw	r26, 0x03	; 3
    6f70:	ec 0d       	add	r30, r12
    6f72:	fd 1d       	adc	r31, r13
    6f74:	fa 94       	dec	r15
    6f76:	81 e0       	ldi	r24, 0x01	; 1
    6f78:	90 e0       	ldi	r25, 0x00	; 0
    6f7a:	01 c0       	rjmp	.+2      	; 0x6f7e <qtm_acquisition_process+0x33c>
    6f7c:	88 0f       	add	r24, r24
    6f7e:	fa 94       	dec	r15
    6f80:	ea f7       	brpl	.-6      	; 0x6f7c <qtm_acquisition_process+0x33a>
    6f82:	80 95       	com	r24
    6f84:	90 89       	ldd	r25, Z+16	; 0x10
    6f86:	89 23       	and	r24, r25
    6f88:	80 8b       	std	Z+16, r24	; 0x10
    6f8a:	07 c0       	rjmp	.+14     	; 0x6f9a <qtm_acquisition_process+0x358>
    6f8c:	14 96       	adiw	r26, 0x04	; 4
    6f8e:	ed 91       	ld	r30, X+
    6f90:	fc 91       	ld	r31, X
    6f92:	15 97       	sbiw	r26, 0x05	; 5
    6f94:	ea 0d       	add	r30, r10
    6f96:	fb 1d       	adc	r31, r11
    6f98:	70 82       	st	Z, r7
    6f9a:	d8 01       	movw	r26, r16
    6f9c:	14 96       	adiw	r26, 0x04	; 4
    6f9e:	ed 91       	ld	r30, X+
    6fa0:	fc 91       	ld	r31, X
    6fa2:	15 97       	sbiw	r26, 0x05	; 5
    6fa4:	ea 0d       	add	r30, r10
    6fa6:	fb 1d       	adc	r31, r11
    6fa8:	80 81       	ld	r24, Z
    6faa:	81 30       	cpi	r24, 0x01	; 1
    6fac:	09 f0       	breq	.+2      	; 0x6fb0 <qtm_acquisition_process+0x36e>
    6fae:	9d c0       	rjmp	.+314    	; 0x70ea <qtm_acquisition_process+0x4a8>
    6fb0:	2c 81       	ldd	r18, Y+4	; 0x04
    6fb2:	3d 81       	ldd	r19, Y+5	; 0x05
    6fb4:	83 c0       	rjmp	.+262    	; 0x70bc <qtm_acquisition_process+0x47a>
    6fb6:	02 80       	ldd	r0, Z+2	; 0x02
    6fb8:	f3 81       	ldd	r31, Z+3	; 0x03
    6fba:	e0 2d       	mov	r30, r0
    6fbc:	ec 0d       	add	r30, r12
    6fbe:	fd 1d       	adc	r31, r13
    6fc0:	9a 01       	movw	r18, r20
    6fc2:	03 88       	ldd	r0, Z+19	; 0x13
    6fc4:	02 c0       	rjmp	.+4      	; 0x6fca <qtm_acquisition_process+0x388>
    6fc6:	36 95       	lsr	r19
    6fc8:	27 95       	ror	r18
    6fca:	0a 94       	dec	r0
    6fcc:	e2 f7       	brpl	.-8      	; 0x6fc6 <qtm_acquisition_process+0x384>
    6fce:	2c 83       	std	Y+4, r18	; 0x04
    6fd0:	3d 83       	std	Y+5, r19	; 0x05
    6fd2:	91 88       	ldd	r9, Z+17	; 0x11
    6fd4:	92 94       	swap	r9
    6fd6:	2f e0       	ldi	r18, 0x0F	; 15
    6fd8:	92 22       	and	r9, r18
    6fda:	37 e0       	ldi	r19, 0x07	; 7
    6fdc:	93 16       	cp	r9, r19
    6fde:	91 f0       	breq	.+36     	; 0x7004 <qtm_acquisition_process+0x3c2>
    6fe0:	6c 81       	ldd	r22, Y+4	; 0x04
    6fe2:	7d 81       	ldd	r23, Y+5	; 0x05
    6fe4:	c1 01       	movw	r24, r2
    6fe6:	0e 94 91 34 	call	0x6922	; 0x6922 <charge_share_test>
    6fea:	81 11       	cpse	r24, r1
    6fec:	04 c0       	rjmp	.+8      	; 0x6ff6 <qtm_acquisition_process+0x3b4>
    6fee:	93 94       	inc	r9
    6ff0:	d7 01       	movw	r26, r14
    6ff2:	7c 92       	st	X, r7
    6ff4:	09 c0       	rjmp	.+18     	; 0x7008 <qtm_acquisition_process+0x3c6>
    6ff6:	91 10       	cpse	r9, r1
    6ff8:	03 c0       	rjmp	.+6      	; 0x7000 <qtm_acquisition_process+0x3be>
    6ffa:	f7 01       	movw	r30, r14
    6ffc:	70 82       	st	Z, r7
    6ffe:	04 c0       	rjmp	.+8      	; 0x7008 <qtm_acquisition_process+0x3c6>
    7000:	9a 94       	dec	r9
    7002:	02 c0       	rjmp	.+4      	; 0x7008 <qtm_acquisition_process+0x3c6>
    7004:	96 e0       	ldi	r25, 0x06	; 6
    7006:	99 2e       	mov	r9, r25
    7008:	d8 01       	movw	r26, r16
    700a:	12 96       	adiw	r26, 0x02	; 2
    700c:	ed 91       	ld	r30, X+
    700e:	fc 91       	ld	r31, X
    7010:	13 97       	sbiw	r26, 0x03	; 3
    7012:	ec 0d       	add	r30, r12
    7014:	fd 1d       	adc	r31, r13
    7016:	81 89       	ldd	r24, Z+17	; 0x11
    7018:	8f 70       	andi	r24, 0x0F	; 15
    701a:	81 8b       	std	Z+17, r24	; 0x11
    701c:	12 96       	adiw	r26, 0x02	; 2
    701e:	ed 91       	ld	r30, X+
    7020:	fc 91       	ld	r31, X
    7022:	13 97       	sbiw	r26, 0x03	; 3
    7024:	ec 0d       	add	r30, r12
    7026:	fd 1d       	adc	r31, r13
    7028:	92 94       	swap	r9
    702a:	80 ef       	ldi	r24, 0xF0	; 240
    702c:	98 22       	and	r9, r24
    702e:	36 c0       	rjmp	.+108    	; 0x709c <qtm_acquisition_process+0x45a>
    7030:	02 80       	ldd	r0, Z+2	; 0x02
    7032:	f3 81       	ldd	r31, Z+3	; 0x03
    7034:	e0 2d       	mov	r30, r0
    7036:	ec 0d       	add	r30, r12
    7038:	fd 1d       	adc	r31, r13
    703a:	9a 01       	movw	r18, r20
    703c:	03 88       	ldd	r0, Z+19	; 0x13
    703e:	02 c0       	rjmp	.+4      	; 0x7044 <qtm_acquisition_process+0x402>
    7040:	36 95       	lsr	r19
    7042:	27 95       	ror	r18
    7044:	0a 94       	dec	r0
    7046:	e2 f7       	brpl	.-8      	; 0x7040 <qtm_acquisition_process+0x3fe>
    7048:	2c 83       	std	Y+4, r18	; 0x04
    704a:	3d 83       	std	Y+5, r19	; 0x05
    704c:	81 89       	ldd	r24, Z+17	; 0x11
    704e:	8f 70       	andi	r24, 0x0F	; 15
    7050:	98 2e       	mov	r9, r24
    7052:	91 f0       	breq	.+36     	; 0x7078 <qtm_acquisition_process+0x436>
    7054:	b9 01       	movw	r22, r18
    7056:	c1 01       	movw	r24, r2
    7058:	0e 94 91 34 	call	0x6922	; 0x6922 <charge_share_test>
    705c:	81 11       	cpse	r24, r1
    705e:	04 c0       	rjmp	.+8      	; 0x7068 <qtm_acquisition_process+0x426>
    7060:	9a 94       	dec	r9
    7062:	d7 01       	movw	r26, r14
    7064:	7c 92       	st	X, r7
    7066:	0a c0       	rjmp	.+20     	; 0x707c <qtm_acquisition_process+0x43a>
    7068:	b7 e0       	ldi	r27, 0x07	; 7
    706a:	9b 12       	cpse	r9, r27
    706c:	03 c0       	rjmp	.+6      	; 0x7074 <qtm_acquisition_process+0x432>
    706e:	f7 01       	movw	r30, r14
    7070:	70 82       	st	Z, r7
    7072:	04 c0       	rjmp	.+8      	; 0x707c <qtm_acquisition_process+0x43a>
    7074:	93 94       	inc	r9
    7076:	02 c0       	rjmp	.+4      	; 0x707c <qtm_acquisition_process+0x43a>
    7078:	99 24       	eor	r9, r9
    707a:	93 94       	inc	r9
    707c:	d8 01       	movw	r26, r16
    707e:	12 96       	adiw	r26, 0x02	; 2
    7080:	ed 91       	ld	r30, X+
    7082:	fc 91       	ld	r31, X
    7084:	13 97       	sbiw	r26, 0x03	; 3
    7086:	ec 0d       	add	r30, r12
    7088:	fd 1d       	adc	r31, r13
    708a:	81 89       	ldd	r24, Z+17	; 0x11
    708c:	80 7f       	andi	r24, 0xF0	; 240
    708e:	81 8b       	std	Z+17, r24	; 0x11
    7090:	12 96       	adiw	r26, 0x02	; 2
    7092:	ed 91       	ld	r30, X+
    7094:	fc 91       	ld	r31, X
    7096:	13 97       	sbiw	r26, 0x03	; 3
    7098:	ec 0d       	add	r30, r12
    709a:	fd 1d       	adc	r31, r13
    709c:	81 89       	ldd	r24, Z+17	; 0x11
    709e:	98 2a       	or	r9, r24
    70a0:	91 8a       	std	Z+17, r9	; 0x11
    70a2:	14 96       	adiw	r26, 0x04	; 4
    70a4:	ed 91       	ld	r30, X+
    70a6:	fc 91       	ld	r31, X
    70a8:	15 97       	sbiw	r26, 0x05	; 5
    70aa:	ea 0d       	add	r30, r10
    70ac:	fb 1d       	adc	r31, r11
    70ae:	2c 81       	ldd	r18, Y+4	; 0x04
    70b0:	3d 81       	ldd	r19, Y+5	; 0x05
    70b2:	21 83       	std	Z+1, r18	; 0x01
    70b4:	32 83       	std	Z+2, r19	; 0x02
    70b6:	80 81       	ld	r24, Z
    70b8:	81 30       	cpi	r24, 0x01	; 1
    70ba:	b9 f4       	brne	.+46     	; 0x70ea <qtm_acquisition_process+0x4a8>
    70bc:	21 15       	cp	r18, r1
    70be:	42 e0       	ldi	r20, 0x02	; 2
    70c0:	34 07       	cpc	r19, r20
    70c2:	28 f0       	brcs	.+10     	; 0x70ce <qtm_acquisition_process+0x48c>
    70c4:	2f 5f       	subi	r18, 0xFF	; 255
    70c6:	31 40       	sbci	r19, 0x01	; 1
    70c8:	2c 83       	std	Y+4, r18	; 0x04
    70ca:	3d 83       	std	Y+5, r19	; 0x05
    70cc:	07 c0       	rjmp	.+14     	; 0x70dc <qtm_acquisition_process+0x49a>
    70ce:	c2 01       	movw	r24, r4
    70d0:	ac 81       	ldd	r26, Y+4	; 0x04
    70d2:	bd 81       	ldd	r27, Y+5	; 0x05
    70d4:	8a 1b       	sub	r24, r26
    70d6:	9b 0b       	sbc	r25, r27
    70d8:	8c 83       	std	Y+4, r24	; 0x04
    70da:	9d 83       	std	Y+5, r25	; 0x05
    70dc:	2c 81       	ldd	r18, Y+4	; 0x04
    70de:	3d 81       	ldd	r19, Y+5	; 0x05
    70e0:	2b 30       	cpi	r18, 0x0B	; 11
    70e2:	31 05       	cpc	r19, r1
    70e4:	10 f0       	brcs	.+4      	; 0x70ea <qtm_acquisition_process+0x4a8>
    70e6:	35 e4       	ldi	r19, 0x45	; 69
    70e8:	30 83       	st	Z, r19
    70ea:	4f ef       	ldi	r20, 0xFF	; 255
    70ec:	24 1a       	sub	r2, r20
    70ee:	34 0a       	sbc	r3, r20
    70f0:	55 e0       	ldi	r21, 0x05	; 5
    70f2:	a5 0e       	add	r10, r21
    70f4:	b1 1c       	adc	r11, r1
    70f6:	84 e1       	ldi	r24, 0x14	; 20
    70f8:	c8 0e       	add	r12, r24
    70fa:	d1 1c       	adc	r13, r1
    70fc:	d5 cd       	rjmp	.-1110   	; 0x6ca8 <qtm_acquisition_process+0x66>
    70fe:	82 e0       	ldi	r24, 0x02	; 2
    7100:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    7104:	09 c0       	rjmp	.+18     	; 0x7118 <qtm_acquisition_process+0x4d6>
    7106:	b3 e0       	ldi	r27, 0x03	; 3
    7108:	b9 83       	std	Y+1, r27	; 0x01
    710a:	06 c0       	rjmp	.+12     	; 0x7118 <qtm_acquisition_process+0x4d6>
    710c:	49 2f       	mov	r20, r25
    710e:	40 95       	com	r20
    7110:	44 1f       	adc	r20, r20
    7112:	44 27       	eor	r20, r20
    7114:	44 1f       	adc	r20, r20
    7116:	4c ce       	rjmp	.-872    	; 0x6db0 <qtm_acquisition_process+0x16e>
    7118:	89 81       	ldd	r24, Y+1	; 0x01
    711a:	27 96       	adiw	r28, 0x07	; 7
    711c:	cd bf       	out	0x3d, r28	; 61
    711e:	de bf       	out	0x3e, r29	; 62
    7120:	df 91       	pop	r29
    7122:	cf 91       	pop	r28
    7124:	1f 91       	pop	r17
    7126:	0f 91       	pop	r16
    7128:	ff 90       	pop	r15
    712a:	ef 90       	pop	r14
    712c:	df 90       	pop	r13
    712e:	cf 90       	pop	r12
    7130:	bf 90       	pop	r11
    7132:	af 90       	pop	r10
    7134:	9f 90       	pop	r9
    7136:	8f 90       	pop	r8
    7138:	7f 90       	pop	r7
    713a:	6f 90       	pop	r6
    713c:	5f 90       	pop	r5
    713e:	4f 90       	pop	r4
    7140:	3f 90       	pop	r3
    7142:	2f 90       	pop	r2
    7144:	08 95       	ret

00007146 <qtm_ptc_init_acquisition_module>:
    7146:	5f 92       	push	r5
    7148:	6f 92       	push	r6
    714a:	7f 92       	push	r7
    714c:	8f 92       	push	r8
    714e:	9f 92       	push	r9
    7150:	af 92       	push	r10
    7152:	bf 92       	push	r11
    7154:	cf 92       	push	r12
    7156:	df 92       	push	r13
    7158:	ef 92       	push	r14
    715a:	ff 92       	push	r15
    715c:	0f 93       	push	r16
    715e:	1f 93       	push	r17
    7160:	cf 93       	push	r28
    7162:	df 93       	push	r29
    7164:	00 97       	sbiw	r24, 0x00	; 0
    7166:	09 f4       	brne	.+2      	; 0x716a <qtm_ptc_init_acquisition_module+0x24>
    7168:	92 c0       	rjmp	.+292    	; 0x728e <qtm_ptc_init_acquisition_module+0x148>
    716a:	dc 01       	movw	r26, r24
    716c:	ed 91       	ld	r30, X+
    716e:	fc 91       	ld	r31, X
    7170:	60 81       	ld	r22, Z
    7172:	71 81       	ldd	r23, Z+1	; 0x01
    7174:	40 e0       	ldi	r20, 0x00	; 0
    7176:	50 e0       	ldi	r21, 0x00	; 0
    7178:	20 e0       	ldi	r18, 0x00	; 0
    717a:	30 e0       	ldi	r19, 0x00	; 0
    717c:	b0 e0       	ldi	r27, 0x00	; 0
    717e:	10 e0       	ldi	r17, 0x00	; 0
    7180:	f1 2c       	mov	r15, r1
    7182:	e1 2c       	mov	r14, r1
    7184:	91 2c       	mov	r9, r1
    7186:	81 2c       	mov	r8, r1
    7188:	71 2c       	mov	r7, r1
    718a:	61 2c       	mov	r6, r1
    718c:	26 17       	cp	r18, r22
    718e:	37 07       	cpc	r19, r23
    7190:	51 f1       	breq	.+84     	; 0x71e6 <qtm_ptc_init_acquisition_module+0xa0>
    7192:	ec 01       	movw	r28, r24
    7194:	ea 81       	ldd	r30, Y+2	; 0x02
    7196:	fb 81       	ldd	r31, Y+3	; 0x03
    7198:	e4 0f       	add	r30, r20
    719a:	f5 1f       	adc	r31, r21
    719c:	a0 80       	ld	r10, Z
    719e:	a0 85       	ldd	r26, Z+8	; 0x08
    71a0:	aa 2a       	or	r10, r26
    71a2:	b1 80       	ldd	r11, Z+1	; 0x01
    71a4:	a1 85       	ldd	r26, Z+9	; 0x09
    71a6:	ba 2a       	or	r11, r26
    71a8:	c2 80       	ldd	r12, Z+2	; 0x02
    71aa:	a2 85       	ldd	r26, Z+10	; 0x0a
    71ac:	ca 2a       	or	r12, r26
    71ae:	d3 80       	ldd	r13, Z+3	; 0x03
    71b0:	a3 85       	ldd	r26, Z+11	; 0x0b
    71b2:	da 2a       	or	r13, r26
    71b4:	d4 81       	ldd	r29, Z+4	; 0x04
    71b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    71b8:	da 2b       	or	r29, r26
    71ba:	c5 81       	ldd	r28, Z+5	; 0x05
    71bc:	a5 85       	ldd	r26, Z+13	; 0x0d
    71be:	ca 2b       	or	r28, r26
    71c0:	56 80       	ldd	r5, Z+6	; 0x06
    71c2:	a6 85       	ldd	r26, Z+14	; 0x0e
    71c4:	a5 29       	or	r26, r5
    71c6:	57 80       	ldd	r5, Z+7	; 0x07
    71c8:	e7 85       	ldd	r30, Z+15	; 0x0f
    71ca:	e5 29       	or	r30, r5
    71cc:	ba 29       	or	r27, r10
    71ce:	1b 29       	or	r17, r11
    71d0:	fc 28       	or	r15, r12
    71d2:	ed 28       	or	r14, r13
    71d4:	9d 2a       	or	r9, r29
    71d6:	8c 2a       	or	r8, r28
    71d8:	7a 2a       	or	r7, r26
    71da:	6e 2a       	or	r6, r30
    71dc:	2f 5f       	subi	r18, 0xFF	; 255
    71de:	3f 4f       	sbci	r19, 0xFF	; 255
    71e0:	4c 5e       	subi	r20, 0xEC	; 236
    71e2:	5f 4f       	sbci	r21, 0xFF	; 255
    71e4:	d3 cf       	rjmp	.-90     	; 0x718c <qtm_ptc_init_acquisition_module+0x46>
    71e6:	2b 2f       	mov	r18, r27
    71e8:	31 2f       	mov	r19, r17
    71ea:	4f 2d       	mov	r20, r15
    71ec:	5e 2d       	mov	r21, r14
    71ee:	69 2d       	mov	r22, r9
    71f0:	78 2d       	mov	r23, r8
    71f2:	87 2d       	mov	r24, r7
    71f4:	96 2d       	mov	r25, r6
    71f6:	a0 e0       	ldi	r26, 0x00	; 0
    71f8:	0e 94 41 3b 	call	0x7682	; 0x7682 <__cmpdi2_s8>
    71fc:	09 f4       	brne	.+2      	; 0x7200 <qtm_ptc_init_acquisition_module+0xba>
    71fe:	49 c0       	rjmp	.+146    	; 0x7292 <qtm_ptc_init_acquisition_module+0x14c>
    7200:	81 e0       	ldi	r24, 0x01	; 1
    7202:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    7206:	2b ee       	ldi	r18, 0xEB	; 235
    7208:	c2 2e       	mov	r12, r18
    720a:	23 e6       	ldi	r18, 0x63	; 99
    720c:	d2 2e       	mov	r13, r18
    720e:	c0 e0       	ldi	r28, 0x00	; 0
    7210:	d0 e0       	ldi	r29, 0x00	; 0
    7212:	aa 24       	eor	r10, r10
    7214:	a3 94       	inc	r10
    7216:	b1 2c       	mov	r11, r1
    7218:	4c e0       	ldi	r20, 0x0C	; 12
    721a:	54 2e       	mov	r5, r20
    721c:	2b 2f       	mov	r18, r27
    721e:	31 2f       	mov	r19, r17
    7220:	4f 2d       	mov	r20, r15
    7222:	5e 2d       	mov	r21, r14
    7224:	69 2d       	mov	r22, r9
    7226:	78 2d       	mov	r23, r8
    7228:	87 2d       	mov	r24, r7
    722a:	96 2d       	mov	r25, r6
    722c:	0c 2f       	mov	r16, r28
    722e:	0e 94 25 3b 	call	0x764a	; 0x764a <__lshrdi3>
    7232:	21 70       	andi	r18, 0x01	; 1
    7234:	30 e0       	ldi	r19, 0x00	; 0
    7236:	40 e0       	ldi	r20, 0x00	; 0
    7238:	50 e0       	ldi	r21, 0x00	; 0
    723a:	60 e0       	ldi	r22, 0x00	; 0
    723c:	70 e0       	ldi	r23, 0x00	; 0
    723e:	80 e0       	ldi	r24, 0x00	; 0
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	a0 e0       	ldi	r26, 0x00	; 0
    7244:	0e 94 41 3b 	call	0x7682	; 0x7682 <__cmpdi2_s8>
    7248:	c9 f0       	breq	.+50     	; 0x727c <qtm_ptc_init_acquisition_module+0x136>
    724a:	f6 01       	movw	r30, r12
    724c:	80 81       	ld	r24, Z
    724e:	e8 2f       	mov	r30, r24
    7250:	e2 95       	swap	r30
    7252:	e6 95       	lsr	r30
    7254:	e7 70       	andi	r30, 0x07	; 7
    7256:	f0 e0       	ldi	r31, 0x00	; 0
    7258:	ee 0f       	add	r30, r30
    725a:	ff 1f       	adc	r31, r31
    725c:	e3 52       	subi	r30, 0x23	; 35
    725e:	fc 49       	sbci	r31, 0x9C	; 156
    7260:	01 90       	ld	r0, Z+
    7262:	f0 81       	ld	r31, Z
    7264:	e0 2d       	mov	r30, r0
    7266:	8f 71       	andi	r24, 0x1F	; 31
    7268:	95 01       	movw	r18, r10
    726a:	02 c0       	rjmp	.+4      	; 0x7270 <qtm_ptc_init_acquisition_module+0x12a>
    726c:	22 0f       	add	r18, r18
    726e:	33 1f       	adc	r19, r19
    7270:	8a 95       	dec	r24
    7272:	e2 f7       	brpl	.-8      	; 0x726c <qtm_ptc_init_acquisition_module+0x126>
    7274:	22 83       	std	Z+2, r18	; 0x02
    7276:	26 83       	std	Z+6, r18	; 0x06
    7278:	53 86       	std	Z+11, r5	; 0x0b
    727a:	25 87       	std	Z+13, r18	; 0x0d
    727c:	21 96       	adiw	r28, 0x01	; 1
    727e:	3f ef       	ldi	r19, 0xFF	; 255
    7280:	c3 1a       	sub	r12, r19
    7282:	d3 0a       	sbc	r13, r19
    7284:	c0 33       	cpi	r28, 0x30	; 48
    7286:	d1 05       	cpc	r29, r1
    7288:	49 f6       	brne	.-110    	; 0x721c <qtm_ptc_init_acquisition_module+0xd6>
    728a:	80 e0       	ldi	r24, 0x00	; 0
    728c:	03 c0       	rjmp	.+6      	; 0x7294 <qtm_ptc_init_acquisition_module+0x14e>
    728e:	8b e0       	ldi	r24, 0x0B	; 11
    7290:	01 c0       	rjmp	.+2      	; 0x7294 <qtm_ptc_init_acquisition_module+0x14e>
    7292:	82 e0       	ldi	r24, 0x02	; 2
    7294:	df 91       	pop	r29
    7296:	cf 91       	pop	r28
    7298:	1f 91       	pop	r17
    729a:	0f 91       	pop	r16
    729c:	ff 90       	pop	r15
    729e:	ef 90       	pop	r14
    72a0:	df 90       	pop	r13
    72a2:	cf 90       	pop	r12
    72a4:	bf 90       	pop	r11
    72a6:	af 90       	pop	r10
    72a8:	9f 90       	pop	r9
    72aa:	8f 90       	pop	r8
    72ac:	7f 90       	pop	r7
    72ae:	6f 90       	pop	r6
    72b0:	5f 90       	pop	r5
    72b2:	08 95       	ret

000072b4 <qtm_ptc_qtlib_assign_signal_memory>:
    72b4:	00 97       	sbiw	r24, 0x00	; 0
    72b6:	31 f0       	breq	.+12     	; 0x72c4 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    72b8:	80 93 fc 68 	sts	0x68FC, r24	; 0x8068fc <qtm_raw_data_measurements_ptr>
    72bc:	90 93 fd 68 	sts	0x68FD, r25	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    72c0:	80 e0       	ldi	r24, 0x00	; 0
    72c2:	08 95       	ret
    72c4:	8b e0       	ldi	r24, 0x0B	; 11
    72c6:	08 95       	ret

000072c8 <qtm_ptc_start_measurement_seq>:
    72c8:	61 15       	cp	r22, r1
    72ca:	71 05       	cpc	r23, r1
    72cc:	61 f1       	breq	.+88     	; 0x7326 <qtm_ptc_start_measurement_seq+0x5e>
    72ce:	00 97       	sbiw	r24, 0x00	; 0
    72d0:	51 f1       	breq	.+84     	; 0x7326 <qtm_ptc_start_measurement_seq+0x5e>
    72d2:	20 91 5f 67 	lds	r18, 0x675F	; 0x80675f <touch_seq_lib_state>
    72d6:	22 23       	and	r18, r18
    72d8:	41 f1       	breq	.+80     	; 0x732a <qtm_ptc_start_measurement_seq+0x62>
    72da:	24 30       	cpi	r18, 0x04	; 4
    72dc:	41 f1       	breq	.+80     	; 0x732e <qtm_ptc_start_measurement_seq+0x66>
    72de:	80 93 fa 68 	sts	0x68FA, r24	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    72e2:	90 93 fb 68 	sts	0x68FB, r25	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    72e6:	60 93 5d 67 	sts	0x675D, r22	; 0x80675d <ptc_seq_measure_complete_pointer>
    72ea:	70 93 5e 67 	sts	0x675E, r23	; 0x80675e <ptc_seq_measure_complete_pointer+0x1>
    72ee:	dc 01       	movw	r26, r24
    72f0:	ed 91       	ld	r30, X+
    72f2:	fc 91       	ld	r31, X
    72f4:	22 81       	ldd	r18, Z+2	; 0x02
    72f6:	20 34       	cpi	r18, 0x40	; 64
    72f8:	19 f4       	brne	.+6      	; 0x7300 <qtm_ptc_start_measurement_seq+0x38>
    72fa:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    72fe:	07 c0       	rjmp	.+14     	; 0x730e <qtm_ptc_start_measurement_seq+0x46>
    7300:	20 38       	cpi	r18, 0x80	; 128
    7302:	11 f0       	breq	.+4      	; 0x7308 <qtm_ptc_start_measurement_seq+0x40>
    7304:	21 38       	cpi	r18, 0x81	; 129
    7306:	31 f4       	brne	.+12     	; 0x7314 <qtm_ptc_start_measurement_seq+0x4c>
    7308:	21 e0       	ldi	r18, 0x01	; 1
    730a:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    730e:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7f07cb>
    7312:	11 c0       	rjmp	.+34     	; 0x7336 <qtm_ptc_start_measurement_seq+0x6e>
    7314:	22 38       	cpi	r18, 0x82	; 130
    7316:	69 f4       	brne	.+26     	; 0x7332 <qtm_ptc_start_measurement_seq+0x6a>
    7318:	21 e0       	ldi	r18, 0x01	; 1
    731a:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    731e:	29 e0       	ldi	r18, 0x09	; 9
    7320:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7f07cb>
    7324:	08 c0       	rjmp	.+16     	; 0x7336 <qtm_ptc_start_measurement_seq+0x6e>
    7326:	8b e0       	ldi	r24, 0x0B	; 11
    7328:	08 95       	ret
    732a:	83 e0       	ldi	r24, 0x03	; 3
    732c:	08 95       	ret
    732e:	81 e0       	ldi	r24, 0x01	; 1
    7330:	08 95       	ret
    7332:	82 e0       	ldi	r24, 0x02	; 2
    7334:	08 95       	ret
    7336:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    733a:	dc 01       	movw	r26, r24
    733c:	ed 91       	ld	r30, X+
    733e:	fc 91       	ld	r31, X
    7340:	84 81       	ldd	r24, Z+4	; 0x04
    7342:	92 81       	ldd	r25, Z+2	; 0x02
    7344:	90 34       	cpi	r25, 0x40	; 64
    7346:	51 f4       	brne	.+20     	; 0x735c <qtm_ptc_start_measurement_seq+0x94>
    7348:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7f07c5>
    734c:	80 31       	cpi	r24, 0x10	; 16
    734e:	10 f4       	brcc	.+4      	; 0x7354 <qtm_ptc_start_measurement_seq+0x8c>
    7350:	80 62       	ori	r24, 0x20	; 32
    7352:	01 c0       	rjmp	.+2      	; 0x7356 <qtm_ptc_start_measurement_seq+0x8e>
    7354:	8f e2       	ldi	r24, 0x2F	; 47
    7356:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7f07c3>
    735a:	08 c0       	rjmp	.+16     	; 0x736c <qtm_ptc_start_measurement_seq+0xa4>
    735c:	90 e2       	ldi	r25, 0x20	; 32
    735e:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7f07c3>
    7362:	8f 30       	cpi	r24, 0x0F	; 15
    7364:	08 f0       	brcs	.+2      	; 0x7368 <qtm_ptc_start_measurement_seq+0xa0>
    7366:	8f e0       	ldi	r24, 0x0F	; 15
    7368:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7f07c5>
    736c:	81 e0       	ldi	r24, 0x01	; 1
    736e:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <__TEXT_REGION_LENGTH__+0x7f07d3>
    7372:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <__TEXT_REGION_LENGTH__+0x7f07d2>
    7376:	80 93 fa 62 	sts	0x62FA, r24	; 0x8062fa <qtm_which_mode_current>
    737a:	10 92 60 67 	sts	0x6760, r1	; 0x806760 <current_measure_channel>
    737e:	10 92 61 67 	sts	0x6761, r1	; 0x806761 <current_measure_channel+0x1>
    7382:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <select_next_channel_to_measure>
    7386:	81 11       	cpse	r24, r1
    7388:	0b c0       	rjmp	.+22     	; 0x73a0 <qtm_ptc_start_measurement_seq+0xd8>
    738a:	84 e0       	ldi	r24, 0x04	; 4
    738c:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    7390:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    7394:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    7398:	0e 94 0c 35 	call	0x6a18	; 0x6a18 <qtm_measure_node>
    739c:	80 e0       	ldi	r24, 0x00	; 0
    739e:	08 95       	ret
    73a0:	82 e0       	ldi	r24, 0x02	; 2
    73a2:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    73a6:	08 95       	ret

000073a8 <qtm_enable_sensor_node>:
    73a8:	00 97       	sbiw	r24, 0x00	; 0
    73aa:	c9 f0       	breq	.+50     	; 0x73de <qtm_enable_sensor_node+0x36>
    73ac:	dc 01       	movw	r26, r24
    73ae:	ed 91       	ld	r30, X+
    73b0:	fc 91       	ld	r31, X
    73b2:	11 97       	sbiw	r26, 0x01	; 1
    73b4:	20 81       	ld	r18, Z
    73b6:	31 81       	ldd	r19, Z+1	; 0x01
    73b8:	26 17       	cp	r18, r22
    73ba:	37 07       	cpc	r19, r23
    73bc:	90 f0       	brcs	.+36     	; 0x73e2 <qtm_enable_sensor_node+0x3a>
    73be:	45 e0       	ldi	r20, 0x05	; 5
    73c0:	46 9f       	mul	r20, r22
    73c2:	90 01       	movw	r18, r0
    73c4:	47 9f       	mul	r20, r23
    73c6:	30 0d       	add	r19, r0
    73c8:	11 24       	eor	r1, r1
    73ca:	14 96       	adiw	r26, 0x04	; 4
    73cc:	ed 91       	ld	r30, X+
    73ce:	fc 91       	ld	r31, X
    73d0:	15 97       	sbiw	r26, 0x05	; 5
    73d2:	e2 0f       	add	r30, r18
    73d4:	f3 1f       	adc	r31, r19
    73d6:	81 e0       	ldi	r24, 0x01	; 1
    73d8:	80 83       	st	Z, r24
    73da:	80 e0       	ldi	r24, 0x00	; 0
    73dc:	08 95       	ret
    73de:	8b e0       	ldi	r24, 0x0B	; 11
    73e0:	08 95       	ret
    73e2:	82 e0       	ldi	r24, 0x02	; 2
    73e4:	08 95       	ret

000073e6 <qtm_calibrate_sensor_node>:
    73e6:	fc 01       	movw	r30, r24
    73e8:	89 2b       	or	r24, r25
    73ea:	d1 f1       	breq	.+116    	; 0x7460 <qtm_calibrate_sensor_node+0x7a>
    73ec:	a0 81       	ld	r26, Z
    73ee:	b1 81       	ldd	r27, Z+1	; 0x01
    73f0:	8d 91       	ld	r24, X+
    73f2:	9c 91       	ld	r25, X
    73f4:	11 97       	sbiw	r26, 0x01	; 1
    73f6:	86 17       	cp	r24, r22
    73f8:	97 07       	cpc	r25, r23
    73fa:	a0 f1       	brcs	.+104    	; 0x7464 <qtm_calibrate_sensor_node+0x7e>
    73fc:	12 96       	adiw	r26, 0x02	; 2
    73fe:	9c 91       	ld	r25, X
    7400:	04 80       	ldd	r0, Z+4	; 0x04
    7402:	f5 81       	ldd	r31, Z+5	; 0x05
    7404:	e0 2d       	mov	r30, r0
    7406:	90 34       	cpi	r25, 0x40	; 64
    7408:	59 f4       	brne	.+22     	; 0x7420 <qtm_calibrate_sensor_node+0x3a>
    740a:	85 e0       	ldi	r24, 0x05	; 5
    740c:	86 9f       	mul	r24, r22
    740e:	d0 01       	movw	r26, r0
    7410:	87 9f       	mul	r24, r23
    7412:	b0 0d       	add	r27, r0
    7414:	11 24       	eor	r1, r1
    7416:	ae 0f       	add	r26, r30
    7418:	bf 1f       	adc	r27, r31
    741a:	80 ea       	ldi	r24, 0xA0	; 160
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	0d c0       	rjmp	.+26     	; 0x743a <qtm_calibrate_sensor_node+0x54>
    7420:	90 58       	subi	r25, 0x80	; 128
    7422:	93 30       	cpi	r25, 0x03	; 3
    7424:	80 f4       	brcc	.+32     	; 0x7446 <qtm_calibrate_sensor_node+0x60>
    7426:	85 e0       	ldi	r24, 0x05	; 5
    7428:	86 9f       	mul	r24, r22
    742a:	d0 01       	movw	r26, r0
    742c:	87 9f       	mul	r24, r23
    742e:	b0 0d       	add	r27, r0
    7430:	11 24       	eor	r1, r1
    7432:	ae 0f       	add	r26, r30
    7434:	bf 1f       	adc	r27, r31
    7436:	80 ef       	ldi	r24, 0xF0	; 240
    7438:	90 e0       	ldi	r25, 0x00	; 0
    743a:	13 96       	adiw	r26, 0x03	; 3
    743c:	8d 93       	st	X+, r24
    743e:	9c 93       	st	X, r25
    7440:	14 97       	sbiw	r26, 0x04	; 4
    7442:	80 e0       	ldi	r24, 0x00	; 0
    7444:	01 c0       	rjmp	.+2      	; 0x7448 <qtm_calibrate_sensor_node+0x62>
    7446:	82 e0       	ldi	r24, 0x02	; 2
    7448:	95 e0       	ldi	r25, 0x05	; 5
    744a:	96 9f       	mul	r25, r22
    744c:	90 01       	movw	r18, r0
    744e:	97 9f       	mul	r25, r23
    7450:	30 0d       	add	r19, r0
    7452:	11 24       	eor	r1, r1
    7454:	e2 0f       	add	r30, r18
    7456:	f3 1f       	adc	r31, r19
    7458:	90 81       	ld	r25, Z
    745a:	92 60       	ori	r25, 0x02	; 2
    745c:	90 83       	st	Z, r25
    745e:	08 95       	ret
    7460:	8b e0       	ldi	r24, 0x0B	; 11
    7462:	08 95       	ret
    7464:	82 e0       	ldi	r24, 0x02	; 2
    7466:	08 95       	ret

00007468 <qtm_avr_da_ptc_handler_wcomp>:
    7468:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7f07da>
    746c:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7f07db>
    7470:	60 91 60 67 	lds	r22, 0x6760	; 0x806760 <current_measure_channel>
    7474:	70 91 61 67 	lds	r23, 0x6761	; 0x806761 <current_measure_channel+0x1>
    7478:	cb 01       	movw	r24, r22
    747a:	88 0f       	add	r24, r24
    747c:	99 1f       	adc	r25, r25
    747e:	e0 91 fc 68 	lds	r30, 0x68FC	; 0x8068fc <qtm_raw_data_measurements_ptr>
    7482:	f0 91 fd 68 	lds	r31, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    7486:	e8 0f       	add	r30, r24
    7488:	f9 1f       	adc	r31, r25
    748a:	20 83       	st	Z, r18
    748c:	31 83       	std	Z+1, r19	; 0x01
    748e:	a0 91 fa 68 	lds	r26, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    7492:	b0 91 fb 68 	lds	r27, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    7496:	44 e1       	ldi	r20, 0x14	; 20
    7498:	46 9f       	mul	r20, r22
    749a:	c0 01       	movw	r24, r0
    749c:	47 9f       	mul	r20, r23
    749e:	90 0d       	add	r25, r0
    74a0:	11 24       	eor	r1, r1
    74a2:	12 96       	adiw	r26, 0x02	; 2
    74a4:	ed 91       	ld	r30, X+
    74a6:	fc 91       	ld	r31, X
    74a8:	13 97       	sbiw	r26, 0x03	; 3
    74aa:	e8 0f       	add	r30, r24
    74ac:	f9 1f       	adc	r31, r25
    74ae:	92 89       	ldd	r25, Z+18	; 0x12
    74b0:	9f 70       	andi	r25, 0x0F	; 15
    74b2:	83 89       	ldd	r24, Z+19	; 0x13
    74b4:	98 17       	cp	r25, r24
    74b6:	10 f4       	brcc	.+4      	; 0x74bc <qtm_avr_da_ptc_handler_wcomp+0x54>
    74b8:	89 1b       	sub	r24, r25
    74ba:	01 c0       	rjmp	.+2      	; 0x74be <qtm_avr_da_ptc_handler_wcomp+0x56>
    74bc:	80 e0       	ldi	r24, 0x00	; 0
    74be:	95 e0       	ldi	r25, 0x05	; 5
    74c0:	96 9f       	mul	r25, r22
    74c2:	a0 01       	movw	r20, r0
    74c4:	97 9f       	mul	r25, r23
    74c6:	50 0d       	add	r21, r0
    74c8:	11 24       	eor	r1, r1
    74ca:	14 96       	adiw	r26, 0x04	; 4
    74cc:	ed 91       	ld	r30, X+
    74ce:	fc 91       	ld	r31, X
    74d0:	15 97       	sbiw	r26, 0x05	; 5
    74d2:	e4 0f       	add	r30, r20
    74d4:	f5 1f       	adc	r31, r21
    74d6:	02 c0       	rjmp	.+4      	; 0x74dc <qtm_avr_da_ptc_handler_wcomp+0x74>
    74d8:	36 95       	lsr	r19
    74da:	27 95       	ror	r18
    74dc:	8a 95       	dec	r24
    74de:	e2 f7       	brpl	.-8      	; 0x74d8 <qtm_avr_da_ptc_handler_wcomp+0x70>
    74e0:	21 83       	std	Z+1, r18	; 0x01
    74e2:	32 83       	std	Z+2, r19	; 0x02
    74e4:	82 e0       	ldi	r24, 0x02	; 2
    74e6:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    74ea:	e0 91 5b 67 	lds	r30, 0x675B	; 0x80675b <ptc_wcomp_happened_pointer>
    74ee:	f0 91 5c 67 	lds	r31, 0x675C	; 0x80675c <ptc_wcomp_happened_pointer+0x1>
    74f2:	09 94       	ijmp

000074f4 <qtm_avr_da_ptc_handler_eoc>:
    74f4:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    74f8:	80 91 fa 62 	lds	r24, 0x62FA	; 0x8062fa <qtm_which_mode_current>
    74fc:	81 30       	cpi	r24, 0x01	; 1
    74fe:	09 f0       	breq	.+2      	; 0x7502 <qtm_avr_da_ptc_handler_eoc+0xe>
    7500:	4e c0       	rjmp	.+156    	; 0x759e <qtm_avr_da_ptc_handler_eoc+0xaa>
    7502:	40 91 da 07 	lds	r20, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7f07da>
    7506:	50 91 db 07 	lds	r21, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7f07db>
    750a:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    750e:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    7512:	9c 01       	movw	r18, r24
    7514:	22 0f       	add	r18, r18
    7516:	33 1f       	adc	r19, r19
    7518:	e0 91 fc 68 	lds	r30, 0x68FC	; 0x8068fc <qtm_raw_data_measurements_ptr>
    751c:	f0 91 fd 68 	lds	r31, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    7520:	e2 0f       	add	r30, r18
    7522:	f3 1f       	adc	r31, r19
    7524:	40 83       	st	Z, r20
    7526:	51 83       	std	Z+1, r21	; 0x01
    7528:	01 96       	adiw	r24, 0x01	; 1
    752a:	80 93 60 67 	sts	0x6760, r24	; 0x806760 <current_measure_channel>
    752e:	90 93 61 67 	sts	0x6761, r25	; 0x806761 <current_measure_channel+0x1>
    7532:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <select_next_channel_to_measure>
    7536:	81 11       	cpse	r24, r1
    7538:	09 c0       	rjmp	.+18     	; 0x754c <qtm_avr_da_ptc_handler_eoc+0x58>
    753a:	84 e0       	ldi	r24, 0x04	; 4
    753c:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    7540:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    7544:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    7548:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <qtm_measure_node>
    754c:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7f07e8>
    7550:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7f07e9>
    7554:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7f07ea>
    7558:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7f07eb>
    755c:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7f07ec>
    7560:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7f07ed>
    7564:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7f07f0>
    7568:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7f07f1>
    756c:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7f07f2>
    7570:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7f07f3>
    7574:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7f07f4>
    7578:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7f07f5>
    757c:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7f07f8>
    7580:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7f07f9>
    7584:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7f07fa>
    7588:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7f07fb>
    758c:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7f07fc>
    7590:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7f07fd>
    7594:	e0 91 5d 67 	lds	r30, 0x675D	; 0x80675d <ptc_seq_measure_complete_pointer>
    7598:	f0 91 5e 67 	lds	r31, 0x675E	; 0x80675e <ptc_seq_measure_complete_pointer+0x1>
    759c:	09 94       	ijmp
    759e:	0c 94 34 3a 	jmp	0x7468	; 0x7468 <qtm_avr_da_ptc_handler_wcomp>

000075a2 <__mulsi3>:
    75a2:	db 01       	movw	r26, r22
    75a4:	8f 93       	push	r24
    75a6:	9f 93       	push	r25
    75a8:	0e 94 18 3b 	call	0x7630	; 0x7630 <__muluhisi3>
    75ac:	bf 91       	pop	r27
    75ae:	af 91       	pop	r26
    75b0:	a2 9f       	mul	r26, r18
    75b2:	80 0d       	add	r24, r0
    75b4:	91 1d       	adc	r25, r1
    75b6:	a3 9f       	mul	r26, r19
    75b8:	90 0d       	add	r25, r0
    75ba:	b2 9f       	mul	r27, r18
    75bc:	90 0d       	add	r25, r0
    75be:	11 24       	eor	r1, r1
    75c0:	08 95       	ret

000075c2 <__udivmodsi4>:
    75c2:	a1 e2       	ldi	r26, 0x21	; 33
    75c4:	1a 2e       	mov	r1, r26
    75c6:	aa 1b       	sub	r26, r26
    75c8:	bb 1b       	sub	r27, r27
    75ca:	fd 01       	movw	r30, r26
    75cc:	0d c0       	rjmp	.+26     	; 0x75e8 <__udivmodsi4_ep>

000075ce <__udivmodsi4_loop>:
    75ce:	aa 1f       	adc	r26, r26
    75d0:	bb 1f       	adc	r27, r27
    75d2:	ee 1f       	adc	r30, r30
    75d4:	ff 1f       	adc	r31, r31
    75d6:	a2 17       	cp	r26, r18
    75d8:	b3 07       	cpc	r27, r19
    75da:	e4 07       	cpc	r30, r20
    75dc:	f5 07       	cpc	r31, r21
    75de:	20 f0       	brcs	.+8      	; 0x75e8 <__udivmodsi4_ep>
    75e0:	a2 1b       	sub	r26, r18
    75e2:	b3 0b       	sbc	r27, r19
    75e4:	e4 0b       	sbc	r30, r20
    75e6:	f5 0b       	sbc	r31, r21

000075e8 <__udivmodsi4_ep>:
    75e8:	66 1f       	adc	r22, r22
    75ea:	77 1f       	adc	r23, r23
    75ec:	88 1f       	adc	r24, r24
    75ee:	99 1f       	adc	r25, r25
    75f0:	1a 94       	dec	r1
    75f2:	69 f7       	brne	.-38     	; 0x75ce <__udivmodsi4_loop>
    75f4:	60 95       	com	r22
    75f6:	70 95       	com	r23
    75f8:	80 95       	com	r24
    75fa:	90 95       	com	r25
    75fc:	9b 01       	movw	r18, r22
    75fe:	ac 01       	movw	r20, r24
    7600:	bd 01       	movw	r22, r26
    7602:	cf 01       	movw	r24, r30
    7604:	08 95       	ret

00007606 <__tablejump2__>:
    7606:	ee 0f       	add	r30, r30
    7608:	ff 1f       	adc	r31, r31
    760a:	05 90       	lpm	r0, Z+
    760c:	f4 91       	lpm	r31, Z
    760e:	e0 2d       	mov	r30, r0
    7610:	09 94       	ijmp

00007612 <__umulhisi3>:
    7612:	a2 9f       	mul	r26, r18
    7614:	b0 01       	movw	r22, r0
    7616:	b3 9f       	mul	r27, r19
    7618:	c0 01       	movw	r24, r0
    761a:	a3 9f       	mul	r26, r19
    761c:	70 0d       	add	r23, r0
    761e:	81 1d       	adc	r24, r1
    7620:	11 24       	eor	r1, r1
    7622:	91 1d       	adc	r25, r1
    7624:	b2 9f       	mul	r27, r18
    7626:	70 0d       	add	r23, r0
    7628:	81 1d       	adc	r24, r1
    762a:	11 24       	eor	r1, r1
    762c:	91 1d       	adc	r25, r1
    762e:	08 95       	ret

00007630 <__muluhisi3>:
    7630:	0e 94 09 3b 	call	0x7612	; 0x7612 <__umulhisi3>
    7634:	a5 9f       	mul	r26, r21
    7636:	90 0d       	add	r25, r0
    7638:	b4 9f       	mul	r27, r20
    763a:	90 0d       	add	r25, r0
    763c:	a4 9f       	mul	r26, r20
    763e:	80 0d       	add	r24, r0
    7640:	91 1d       	adc	r25, r1
    7642:	11 24       	eor	r1, r1
    7644:	08 95       	ret

00007646 <__ashrdi3>:
    7646:	97 fb       	bst	r25, 7
    7648:	10 f8       	bld	r1, 0

0000764a <__lshrdi3>:
    764a:	16 94       	lsr	r1
    764c:	00 08       	sbc	r0, r0
    764e:	0f 93       	push	r16
    7650:	08 30       	cpi	r16, 0x08	; 8
    7652:	98 f0       	brcs	.+38     	; 0x767a <__lshrdi3+0x30>
    7654:	08 50       	subi	r16, 0x08	; 8
    7656:	23 2f       	mov	r18, r19
    7658:	34 2f       	mov	r19, r20
    765a:	45 2f       	mov	r20, r21
    765c:	56 2f       	mov	r21, r22
    765e:	67 2f       	mov	r22, r23
    7660:	78 2f       	mov	r23, r24
    7662:	89 2f       	mov	r24, r25
    7664:	90 2d       	mov	r25, r0
    7666:	f4 cf       	rjmp	.-24     	; 0x7650 <__lshrdi3+0x6>
    7668:	05 94       	asr	r0
    766a:	97 95       	ror	r25
    766c:	87 95       	ror	r24
    766e:	77 95       	ror	r23
    7670:	67 95       	ror	r22
    7672:	57 95       	ror	r21
    7674:	47 95       	ror	r20
    7676:	37 95       	ror	r19
    7678:	27 95       	ror	r18
    767a:	0a 95       	dec	r16
    767c:	aa f7       	brpl	.-22     	; 0x7668 <__lshrdi3+0x1e>
    767e:	0f 91       	pop	r16
    7680:	08 95       	ret

00007682 <__cmpdi2_s8>:
    7682:	00 24       	eor	r0, r0
    7684:	a7 fd       	sbrc	r26, 7
    7686:	00 94       	com	r0
    7688:	2a 17       	cp	r18, r26
    768a:	30 05       	cpc	r19, r0
    768c:	40 05       	cpc	r20, r0
    768e:	50 05       	cpc	r21, r0
    7690:	60 05       	cpc	r22, r0
    7692:	70 05       	cpc	r23, r0
    7694:	80 05       	cpc	r24, r0
    7696:	90 05       	cpc	r25, r0
    7698:	08 95       	ret

0000769a <malloc>:
    769a:	0f 93       	push	r16
    769c:	1f 93       	push	r17
    769e:	cf 93       	push	r28
    76a0:	df 93       	push	r29
    76a2:	82 30       	cpi	r24, 0x02	; 2
    76a4:	91 05       	cpc	r25, r1
    76a6:	10 f4       	brcc	.+4      	; 0x76ac <malloc+0x12>
    76a8:	82 e0       	ldi	r24, 0x02	; 2
    76aa:	90 e0       	ldi	r25, 0x00	; 0
    76ac:	e0 91 00 69 	lds	r30, 0x6900	; 0x806900 <__flp>
    76b0:	f0 91 01 69 	lds	r31, 0x6901	; 0x806901 <__flp+0x1>
    76b4:	20 e0       	ldi	r18, 0x00	; 0
    76b6:	30 e0       	ldi	r19, 0x00	; 0
    76b8:	a0 e0       	ldi	r26, 0x00	; 0
    76ba:	b0 e0       	ldi	r27, 0x00	; 0
    76bc:	30 97       	sbiw	r30, 0x00	; 0
    76be:	19 f1       	breq	.+70     	; 0x7706 <malloc+0x6c>
    76c0:	40 81       	ld	r20, Z
    76c2:	51 81       	ldd	r21, Z+1	; 0x01
    76c4:	02 81       	ldd	r16, Z+2	; 0x02
    76c6:	13 81       	ldd	r17, Z+3	; 0x03
    76c8:	48 17       	cp	r20, r24
    76ca:	59 07       	cpc	r21, r25
    76cc:	c8 f0       	brcs	.+50     	; 0x7700 <malloc+0x66>
    76ce:	84 17       	cp	r24, r20
    76d0:	95 07       	cpc	r25, r21
    76d2:	69 f4       	brne	.+26     	; 0x76ee <malloc+0x54>
    76d4:	10 97       	sbiw	r26, 0x00	; 0
    76d6:	31 f0       	breq	.+12     	; 0x76e4 <malloc+0x4a>
    76d8:	12 96       	adiw	r26, 0x02	; 2
    76da:	0c 93       	st	X, r16
    76dc:	12 97       	sbiw	r26, 0x02	; 2
    76de:	13 96       	adiw	r26, 0x03	; 3
    76e0:	1c 93       	st	X, r17
    76e2:	27 c0       	rjmp	.+78     	; 0x7732 <malloc+0x98>
    76e4:	00 93 00 69 	sts	0x6900, r16	; 0x806900 <__flp>
    76e8:	10 93 01 69 	sts	0x6901, r17	; 0x806901 <__flp+0x1>
    76ec:	22 c0       	rjmp	.+68     	; 0x7732 <malloc+0x98>
    76ee:	21 15       	cp	r18, r1
    76f0:	31 05       	cpc	r19, r1
    76f2:	19 f0       	breq	.+6      	; 0x76fa <malloc+0x60>
    76f4:	42 17       	cp	r20, r18
    76f6:	53 07       	cpc	r21, r19
    76f8:	18 f4       	brcc	.+6      	; 0x7700 <malloc+0x66>
    76fa:	9a 01       	movw	r18, r20
    76fc:	bd 01       	movw	r22, r26
    76fe:	ef 01       	movw	r28, r30
    7700:	df 01       	movw	r26, r30
    7702:	f8 01       	movw	r30, r16
    7704:	db cf       	rjmp	.-74     	; 0x76bc <malloc+0x22>
    7706:	21 15       	cp	r18, r1
    7708:	31 05       	cpc	r19, r1
    770a:	f9 f0       	breq	.+62     	; 0x774a <malloc+0xb0>
    770c:	28 1b       	sub	r18, r24
    770e:	39 0b       	sbc	r19, r25
    7710:	24 30       	cpi	r18, 0x04	; 4
    7712:	31 05       	cpc	r19, r1
    7714:	80 f4       	brcc	.+32     	; 0x7736 <malloc+0x9c>
    7716:	8a 81       	ldd	r24, Y+2	; 0x02
    7718:	9b 81       	ldd	r25, Y+3	; 0x03
    771a:	61 15       	cp	r22, r1
    771c:	71 05       	cpc	r23, r1
    771e:	21 f0       	breq	.+8      	; 0x7728 <malloc+0x8e>
    7720:	fb 01       	movw	r30, r22
    7722:	82 83       	std	Z+2, r24	; 0x02
    7724:	93 83       	std	Z+3, r25	; 0x03
    7726:	04 c0       	rjmp	.+8      	; 0x7730 <malloc+0x96>
    7728:	80 93 00 69 	sts	0x6900, r24	; 0x806900 <__flp>
    772c:	90 93 01 69 	sts	0x6901, r25	; 0x806901 <__flp+0x1>
    7730:	fe 01       	movw	r30, r28
    7732:	32 96       	adiw	r30, 0x02	; 2
    7734:	44 c0       	rjmp	.+136    	; 0x77be <malloc+0x124>
    7736:	fe 01       	movw	r30, r28
    7738:	e2 0f       	add	r30, r18
    773a:	f3 1f       	adc	r31, r19
    773c:	81 93       	st	Z+, r24
    773e:	91 93       	st	Z+, r25
    7740:	22 50       	subi	r18, 0x02	; 2
    7742:	31 09       	sbc	r19, r1
    7744:	28 83       	st	Y, r18
    7746:	39 83       	std	Y+1, r19	; 0x01
    7748:	3a c0       	rjmp	.+116    	; 0x77be <malloc+0x124>
    774a:	20 91 fe 68 	lds	r18, 0x68FE	; 0x8068fe <__brkval>
    774e:	30 91 ff 68 	lds	r19, 0x68FF	; 0x8068ff <__brkval+0x1>
    7752:	23 2b       	or	r18, r19
    7754:	41 f4       	brne	.+16     	; 0x7766 <malloc+0xcc>
    7756:	20 91 02 60 	lds	r18, 0x6002	; 0x806002 <__malloc_heap_start>
    775a:	30 91 03 60 	lds	r19, 0x6003	; 0x806003 <__malloc_heap_start+0x1>
    775e:	20 93 fe 68 	sts	0x68FE, r18	; 0x8068fe <__brkval>
    7762:	30 93 ff 68 	sts	0x68FF, r19	; 0x8068ff <__brkval+0x1>
    7766:	20 91 00 60 	lds	r18, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    776a:	30 91 01 60 	lds	r19, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
    776e:	21 15       	cp	r18, r1
    7770:	31 05       	cpc	r19, r1
    7772:	41 f4       	brne	.+16     	; 0x7784 <malloc+0xea>
    7774:	2d b7       	in	r18, 0x3d	; 61
    7776:	3e b7       	in	r19, 0x3e	; 62
    7778:	40 91 04 60 	lds	r20, 0x6004	; 0x806004 <__malloc_margin>
    777c:	50 91 05 60 	lds	r21, 0x6005	; 0x806005 <__malloc_margin+0x1>
    7780:	24 1b       	sub	r18, r20
    7782:	35 0b       	sbc	r19, r21
    7784:	e0 91 fe 68 	lds	r30, 0x68FE	; 0x8068fe <__brkval>
    7788:	f0 91 ff 68 	lds	r31, 0x68FF	; 0x8068ff <__brkval+0x1>
    778c:	e2 17       	cp	r30, r18
    778e:	f3 07       	cpc	r31, r19
    7790:	a0 f4       	brcc	.+40     	; 0x77ba <malloc+0x120>
    7792:	2e 1b       	sub	r18, r30
    7794:	3f 0b       	sbc	r19, r31
    7796:	28 17       	cp	r18, r24
    7798:	39 07       	cpc	r19, r25
    779a:	78 f0       	brcs	.+30     	; 0x77ba <malloc+0x120>
    779c:	ac 01       	movw	r20, r24
    779e:	4e 5f       	subi	r20, 0xFE	; 254
    77a0:	5f 4f       	sbci	r21, 0xFF	; 255
    77a2:	24 17       	cp	r18, r20
    77a4:	35 07       	cpc	r19, r21
    77a6:	48 f0       	brcs	.+18     	; 0x77ba <malloc+0x120>
    77a8:	4e 0f       	add	r20, r30
    77aa:	5f 1f       	adc	r21, r31
    77ac:	40 93 fe 68 	sts	0x68FE, r20	; 0x8068fe <__brkval>
    77b0:	50 93 ff 68 	sts	0x68FF, r21	; 0x8068ff <__brkval+0x1>
    77b4:	81 93       	st	Z+, r24
    77b6:	91 93       	st	Z+, r25
    77b8:	02 c0       	rjmp	.+4      	; 0x77be <malloc+0x124>
    77ba:	e0 e0       	ldi	r30, 0x00	; 0
    77bc:	f0 e0       	ldi	r31, 0x00	; 0
    77be:	cf 01       	movw	r24, r30
    77c0:	df 91       	pop	r29
    77c2:	cf 91       	pop	r28
    77c4:	1f 91       	pop	r17
    77c6:	0f 91       	pop	r16
    77c8:	08 95       	ret

000077ca <free>:
    77ca:	cf 93       	push	r28
    77cc:	df 93       	push	r29
    77ce:	00 97       	sbiw	r24, 0x00	; 0
    77d0:	09 f4       	brne	.+2      	; 0x77d4 <free+0xa>
    77d2:	81 c0       	rjmp	.+258    	; 0x78d6 <free+0x10c>
    77d4:	fc 01       	movw	r30, r24
    77d6:	32 97       	sbiw	r30, 0x02	; 2
    77d8:	12 82       	std	Z+2, r1	; 0x02
    77da:	13 82       	std	Z+3, r1	; 0x03
    77dc:	a0 91 00 69 	lds	r26, 0x6900	; 0x806900 <__flp>
    77e0:	b0 91 01 69 	lds	r27, 0x6901	; 0x806901 <__flp+0x1>
    77e4:	10 97       	sbiw	r26, 0x00	; 0
    77e6:	81 f4       	brne	.+32     	; 0x7808 <free+0x3e>
    77e8:	20 81       	ld	r18, Z
    77ea:	31 81       	ldd	r19, Z+1	; 0x01
    77ec:	82 0f       	add	r24, r18
    77ee:	93 1f       	adc	r25, r19
    77f0:	20 91 fe 68 	lds	r18, 0x68FE	; 0x8068fe <__brkval>
    77f4:	30 91 ff 68 	lds	r19, 0x68FF	; 0x8068ff <__brkval+0x1>
    77f8:	28 17       	cp	r18, r24
    77fa:	39 07       	cpc	r19, r25
    77fc:	51 f5       	brne	.+84     	; 0x7852 <free+0x88>
    77fe:	e0 93 fe 68 	sts	0x68FE, r30	; 0x8068fe <__brkval>
    7802:	f0 93 ff 68 	sts	0x68FF, r31	; 0x8068ff <__brkval+0x1>
    7806:	67 c0       	rjmp	.+206    	; 0x78d6 <free+0x10c>
    7808:	ed 01       	movw	r28, r26
    780a:	20 e0       	ldi	r18, 0x00	; 0
    780c:	30 e0       	ldi	r19, 0x00	; 0
    780e:	ce 17       	cp	r28, r30
    7810:	df 07       	cpc	r29, r31
    7812:	40 f4       	brcc	.+16     	; 0x7824 <free+0x5a>
    7814:	4a 81       	ldd	r20, Y+2	; 0x02
    7816:	5b 81       	ldd	r21, Y+3	; 0x03
    7818:	9e 01       	movw	r18, r28
    781a:	41 15       	cp	r20, r1
    781c:	51 05       	cpc	r21, r1
    781e:	f1 f0       	breq	.+60     	; 0x785c <free+0x92>
    7820:	ea 01       	movw	r28, r20
    7822:	f5 cf       	rjmp	.-22     	; 0x780e <free+0x44>
    7824:	c2 83       	std	Z+2, r28	; 0x02
    7826:	d3 83       	std	Z+3, r29	; 0x03
    7828:	40 81       	ld	r20, Z
    782a:	51 81       	ldd	r21, Z+1	; 0x01
    782c:	84 0f       	add	r24, r20
    782e:	95 1f       	adc	r25, r21
    7830:	c8 17       	cp	r28, r24
    7832:	d9 07       	cpc	r29, r25
    7834:	59 f4       	brne	.+22     	; 0x784c <free+0x82>
    7836:	88 81       	ld	r24, Y
    7838:	99 81       	ldd	r25, Y+1	; 0x01
    783a:	84 0f       	add	r24, r20
    783c:	95 1f       	adc	r25, r21
    783e:	02 96       	adiw	r24, 0x02	; 2
    7840:	80 83       	st	Z, r24
    7842:	91 83       	std	Z+1, r25	; 0x01
    7844:	8a 81       	ldd	r24, Y+2	; 0x02
    7846:	9b 81       	ldd	r25, Y+3	; 0x03
    7848:	82 83       	std	Z+2, r24	; 0x02
    784a:	93 83       	std	Z+3, r25	; 0x03
    784c:	21 15       	cp	r18, r1
    784e:	31 05       	cpc	r19, r1
    7850:	29 f4       	brne	.+10     	; 0x785c <free+0x92>
    7852:	e0 93 00 69 	sts	0x6900, r30	; 0x806900 <__flp>
    7856:	f0 93 01 69 	sts	0x6901, r31	; 0x806901 <__flp+0x1>
    785a:	3d c0       	rjmp	.+122    	; 0x78d6 <free+0x10c>
    785c:	e9 01       	movw	r28, r18
    785e:	ea 83       	std	Y+2, r30	; 0x02
    7860:	fb 83       	std	Y+3, r31	; 0x03
    7862:	49 91       	ld	r20, Y+
    7864:	59 91       	ld	r21, Y+
    7866:	c4 0f       	add	r28, r20
    7868:	d5 1f       	adc	r29, r21
    786a:	ec 17       	cp	r30, r28
    786c:	fd 07       	cpc	r31, r29
    786e:	61 f4       	brne	.+24     	; 0x7888 <free+0xbe>
    7870:	80 81       	ld	r24, Z
    7872:	91 81       	ldd	r25, Z+1	; 0x01
    7874:	84 0f       	add	r24, r20
    7876:	95 1f       	adc	r25, r21
    7878:	02 96       	adiw	r24, 0x02	; 2
    787a:	e9 01       	movw	r28, r18
    787c:	88 83       	st	Y, r24
    787e:	99 83       	std	Y+1, r25	; 0x01
    7880:	82 81       	ldd	r24, Z+2	; 0x02
    7882:	93 81       	ldd	r25, Z+3	; 0x03
    7884:	8a 83       	std	Y+2, r24	; 0x02
    7886:	9b 83       	std	Y+3, r25	; 0x03
    7888:	e0 e0       	ldi	r30, 0x00	; 0
    788a:	f0 e0       	ldi	r31, 0x00	; 0
    788c:	12 96       	adiw	r26, 0x02	; 2
    788e:	8d 91       	ld	r24, X+
    7890:	9c 91       	ld	r25, X
    7892:	13 97       	sbiw	r26, 0x03	; 3
    7894:	00 97       	sbiw	r24, 0x00	; 0
    7896:	19 f0       	breq	.+6      	; 0x789e <free+0xd4>
    7898:	fd 01       	movw	r30, r26
    789a:	dc 01       	movw	r26, r24
    789c:	f7 cf       	rjmp	.-18     	; 0x788c <free+0xc2>
    789e:	8d 91       	ld	r24, X+
    78a0:	9c 91       	ld	r25, X
    78a2:	11 97       	sbiw	r26, 0x01	; 1
    78a4:	9d 01       	movw	r18, r26
    78a6:	2e 5f       	subi	r18, 0xFE	; 254
    78a8:	3f 4f       	sbci	r19, 0xFF	; 255
    78aa:	82 0f       	add	r24, r18
    78ac:	93 1f       	adc	r25, r19
    78ae:	20 91 fe 68 	lds	r18, 0x68FE	; 0x8068fe <__brkval>
    78b2:	30 91 ff 68 	lds	r19, 0x68FF	; 0x8068ff <__brkval+0x1>
    78b6:	28 17       	cp	r18, r24
    78b8:	39 07       	cpc	r19, r25
    78ba:	69 f4       	brne	.+26     	; 0x78d6 <free+0x10c>
    78bc:	30 97       	sbiw	r30, 0x00	; 0
    78be:	29 f4       	brne	.+10     	; 0x78ca <free+0x100>
    78c0:	10 92 00 69 	sts	0x6900, r1	; 0x806900 <__flp>
    78c4:	10 92 01 69 	sts	0x6901, r1	; 0x806901 <__flp+0x1>
    78c8:	02 c0       	rjmp	.+4      	; 0x78ce <free+0x104>
    78ca:	12 82       	std	Z+2, r1	; 0x02
    78cc:	13 82       	std	Z+3, r1	; 0x03
    78ce:	a0 93 fe 68 	sts	0x68FE, r26	; 0x8068fe <__brkval>
    78d2:	b0 93 ff 68 	sts	0x68FF, r27	; 0x8068ff <__brkval+0x1>
    78d6:	df 91       	pop	r29
    78d8:	cf 91       	pop	r28
    78da:	08 95       	ret

000078dc <_exit>:
    78dc:	f8 94       	cli

000078de <__stop_program>:
    78de:	ff cf       	rjmp	.-2      	; 0x78de <__stop_program>
