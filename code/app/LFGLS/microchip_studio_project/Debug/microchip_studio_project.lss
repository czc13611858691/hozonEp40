
microchip_studio_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000041c  00806000  0000c0e0  00007974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000078e0  00004800  00004800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ec  0080641c  0080641c  00007d90  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00007d90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a10  00000000  00000000  00007e30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001770c  00000000  00000000  00008840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000068d5  00000000  00000000  0001ff4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000079c7  00000000  00000000  00026821  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019e4  00000000  00000000  0002e1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007ba4  00000000  00000000  0002fbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008962  00000000  00000000  00037770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  000400d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004800 <__vectors>:
    4800:	0c 94 9f 24 	jmp	0x493e	; 0x493e <__ctors_end>
    4804:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4808:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    480c:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__vector_3>
    4810:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4814:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4818:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    481c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4820:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4824:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4828:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    482c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4830:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <__vector_12>
    4834:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__vector_13>
    4838:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    483c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4840:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4844:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4848:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    484c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4850:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4854:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4858:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    485c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4860:	0c 94 f6 4e 	jmp	0x9dec	; 0x9dec <__vector_24>
    4864:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4868:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    486c:	0c 94 80 4e 	jmp	0x9d00	; 0x9d00 <__vector_27>
    4870:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4874:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4878:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    487c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4880:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4884:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4888:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    488c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4890:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4894:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4898:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    489c:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48a0:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48a4:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48a8:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48ac:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48b0:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48b4:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48b8:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48bc:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48c0:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48c4:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48c8:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48cc:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48d0:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48d4:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48d8:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48dc:	0c 94 c3 24 	jmp	0x4986	; 0x4986 <__vector_55>
    48e0:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48e4:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48e8:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48ec:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48f0:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48f4:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48f8:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    48fc:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__bad_interrupt>
    4900:	66 26       	eor	r6, r22
    4902:	98 26       	eor	r9, r24
    4904:	cd 26       	eor	r12, r29
    4906:	02 27       	eor	r16, r18
    4908:	37 27       	eor	r19, r23
    490a:	69 27       	eor	r22, r25
    490c:	9e 27       	eor	r25, r30
    490e:	d3 27       	eor	r29, r19
    4910:	08 28       	or	r0, r8
    4912:	3d 28       	or	r3, r13
    4914:	e9 41       	sbci	r30, 0x19	; 25
    4916:	ff 41       	sbci	r31, 0x1F	; 31
    4918:	e3 41       	sbci	r30, 0x13	; 19
    491a:	8a 41       	sbci	r24, 0x1A	; 26
    491c:	ff 41       	sbci	r31, 0x1F	; 31
    491e:	cd 41       	sbci	r28, 0x1D	; 29
    4920:	85 41       	sbci	r24, 0x15	; 21
    4922:	a9 41       	sbci	r26, 0x19	; 25
    4924:	c7 41       	sbci	r28, 0x17	; 23
    4926:	c1 41       	sbci	r28, 0x11	; 17
    4928:	bb 41       	sbci	r27, 0x1B	; 27
    492a:	af 41       	sbci	r26, 0x1F	; 31
    492c:	b5 41       	sbci	r27, 0x15	; 21
    492e:	b3 4c       	sbci	r27, 0xC3	; 195
    4930:	b7 4c       	sbci	r27, 0xC7	; 199
    4932:	db 4c       	sbci	r29, 0xCB	; 203
    4934:	df 4c       	sbci	r29, 0xCF	; 207
    4936:	e3 4c       	sbci	r30, 0xC3	; 195
    4938:	e8 4c       	sbci	r30, 0xC8	; 200
    493a:	ec 4c       	sbci	r30, 0xCC	; 204
    493c:	90 4c       	sbci	r25, 0xC0	; 192

0000493e <__ctors_end>:
    493e:	11 24       	eor	r1, r1
    4940:	1f be       	out	0x3f, r1	; 63
    4942:	cf ef       	ldi	r28, 0xFF	; 255
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	df e7       	ldi	r29, 0x7F	; 127
    4948:	de bf       	out	0x3e, r29	; 62

0000494a <__do_copy_data>:
    494a:	14 e6       	ldi	r17, 0x64	; 100
    494c:	a0 e0       	ldi	r26, 0x00	; 0
    494e:	b0 e6       	ldi	r27, 0x60	; 96
    4950:	e0 ee       	ldi	r30, 0xE0	; 224
    4952:	f0 ec       	ldi	r31, 0xC0	; 192
    4954:	02 c0       	rjmp	.+4      	; 0x495a <__do_copy_data+0x10>
    4956:	05 90       	lpm	r0, Z+
    4958:	0d 92       	st	X+, r0
    495a:	ac 31       	cpi	r26, 0x1C	; 28
    495c:	b1 07       	cpc	r27, r17
    495e:	d9 f7       	brne	.-10     	; 0x4956 <__do_copy_data+0xc>

00004960 <__do_clear_bss>:
    4960:	29 e6       	ldi	r18, 0x69	; 105
    4962:	ac e1       	ldi	r26, 0x1C	; 28
    4964:	b4 e6       	ldi	r27, 0x64	; 100
    4966:	01 c0       	rjmp	.+2      	; 0x496a <.do_clear_bss_start>

00004968 <.do_clear_bss_loop>:
    4968:	1d 92       	st	X+, r1

0000496a <.do_clear_bss_start>:
    496a:	a8 30       	cpi	r26, 0x08	; 8
    496c:	b2 07       	cpc	r27, r18
    496e:	e1 f7       	brne	.-8      	; 0x4968 <.do_clear_bss_loop>
    4970:	0e 94 b7 2c 	call	0x596e	; 0x596e <main>
    4974:	0c 94 6e 60 	jmp	0xc0dc	; 0xc0dc <_exit>

00004978 <__bad_interrupt>:
    4978:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__vectors>

0000497c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
    497c:	0e 94 f5 4f 	call	0x9fea	; 0x9fea <system_init>

	touch_init();
    4980:	0e 94 f6 4d 	call	0x9bec	; 0x9bec <touch_init>
    4984:	08 95       	ret

00004986 <__vector_55>:


/* lin RX接收到一个完整数据产生的中断 */
ISR(USART4_RXC_vect)

{
    4986:	1f 92       	push	r1
    4988:	0f 92       	push	r0
    498a:	0f b6       	in	r0, 0x3f	; 63
    498c:	0f 92       	push	r0
    498e:	11 24       	eor	r1, r1
    4990:	2f 93       	push	r18
    4992:	3f 93       	push	r19
    4994:	4f 93       	push	r20
    4996:	5f 93       	push	r21
    4998:	6f 93       	push	r22
    499a:	7f 93       	push	r23
    499c:	8f 93       	push	r24
    499e:	9f 93       	push	r25
    49a0:	af 93       	push	r26
    49a2:	bf 93       	push	r27
    49a4:	ef 93       	push	r30
    49a6:	ff 93       	push	r31
   uint8_t index;
   index = (USART4.STATUS & USART_ISFIF_bm) >> USART_ISFIF_bp;
    49a8:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7f0884>
    49ac:	88 70       	andi	r24, 0x08	; 8
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	95 95       	asr	r25
    49b2:	87 95       	ror	r24
    49b4:	95 95       	asr	r25
    49b6:	87 95       	ror	r24
    49b8:	95 95       	asr	r25
    49ba:	87 95       	ror	r24
   if (index == 1)
    49bc:	81 30       	cpi	r24, 0x01	; 1
    49be:	61 f4       	brne	.+24     	; 0x49d8 <__vector_55+0x52>
   {
      LIN_DRV_IRQHandler(0, -1);
    49c0:	4f ef       	ldi	r20, 0xFF	; 255
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	70 e0       	ldi	r23, 0x00	; 0
    49c6:	cb 01       	movw	r24, r22
    49c8:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <LIN_DRV_IRQHandler>
      USART4.STATUS |= USART_ISFIF_bm;
    49cc:	e0 e8       	ldi	r30, 0x80	; 128
    49ce:	f8 e0       	ldi	r31, 0x08	; 8
    49d0:	84 81       	ldd	r24, Z+4	; 0x04
    49d2:	88 60       	ori	r24, 0x08	; 8
    49d4:	84 83       	std	Z+4, r24	; 0x04
      return;
    49d6:	1b c0       	rjmp	.+54     	; 0x4a0e <__vector_55+0x88>
   }

   index = (USART4.RXDATAH & USART_DATA8_bm) >> USART_DATA8_bp;
    49d8:	80 91 81 08 	lds	r24, 0x0881	; 0x800881 <__TEXT_REGION_LENGTH__+0x7f0881>
   if (index == 0) /* is pid */
    49dc:	80 fd       	sbrc	r24, 0
    49de:	0c c0       	rjmp	.+24     	; 0x49f8 <__vector_55+0x72>
   {
      LIN_DRV_IRQHandler(0, 1);
    49e0:	41 e0       	ldi	r20, 0x01	; 1
    49e2:	60 e0       	ldi	r22, 0x00	; 0
    49e4:	70 e0       	ldi	r23, 0x00	; 0
    49e6:	cb 01       	movw	r24, r22
    49e8:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <LIN_DRV_IRQHandler>
      USART4.STATUS |= USART_ISFIF_bm;
    49ec:	e0 e8       	ldi	r30, 0x80	; 128
    49ee:	f8 e0       	ldi	r31, 0x08	; 8
    49f0:	84 81       	ldd	r24, Z+4	; 0x04
    49f2:	88 60       	ori	r24, 0x08	; 8
    49f4:	84 83       	std	Z+4, r24	; 0x04
      return;
    49f6:	0b c0       	rjmp	.+22     	; 0x4a0e <__vector_55+0x88>
   }

   LIN_DRV_IRQHandler(0, 0);
    49f8:	40 e0       	ldi	r20, 0x00	; 0
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	70 e0       	ldi	r23, 0x00	; 0
    49fe:	cb 01       	movw	r24, r22
    4a00:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <LIN_DRV_IRQHandler>
   USART4.STATUS |= USART_ISFIF_bm;
    4a04:	e0 e8       	ldi	r30, 0x80	; 128
    4a06:	f8 e0       	ldi	r31, 0x08	; 8
    4a08:	84 81       	ldd	r24, Z+4	; 0x04
    4a0a:	88 60       	ori	r24, 0x08	; 8
    4a0c:	84 83       	std	Z+4, r24	; 0x04
}
    4a0e:	ff 91       	pop	r31
    4a10:	ef 91       	pop	r30
    4a12:	bf 91       	pop	r27
    4a14:	af 91       	pop	r26
    4a16:	9f 91       	pop	r25
    4a18:	8f 91       	pop	r24
    4a1a:	7f 91       	pop	r23
    4a1c:	6f 91       	pop	r22
    4a1e:	5f 91       	pop	r21
    4a20:	4f 91       	pop	r20
    4a22:	3f 91       	pop	r19
    4a24:	2f 91       	pop	r18
    4a26:	0f 90       	pop	r0
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	0f 90       	pop	r0
    4a2c:	1f 90       	pop	r1
    4a2e:	18 95       	reti

00004a30 <__vector_3>:

/* RTC时钟定时器中断用于触摸时基 */
ISR(RTC_CNT_vect)
{
    4a30:	1f 92       	push	r1
    4a32:	0f 92       	push	r0
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	0f 92       	push	r0
    4a38:	11 24       	eor	r1, r1
    4a3a:	2f 93       	push	r18
    4a3c:	3f 93       	push	r19
    4a3e:	4f 93       	push	r20
    4a40:	5f 93       	push	r21
    4a42:	6f 93       	push	r22
    4a44:	7f 93       	push	r23
    4a46:	8f 93       	push	r24
    4a48:	9f 93       	push	r25
    4a4a:	af 93       	push	r26
    4a4c:	bf 93       	push	r27
    4a4e:	ef 93       	push	r30
    4a50:	ff 93       	push	r31
	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
    4a52:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
    4a56:	82 e0       	ldi	r24, 0x02	; 2
    4a58:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7f0143>
}
    4a5c:	ff 91       	pop	r31
    4a5e:	ef 91       	pop	r30
    4a60:	bf 91       	pop	r27
    4a62:	af 91       	pop	r26
    4a64:	9f 91       	pop	r25
    4a66:	8f 91       	pop	r24
    4a68:	7f 91       	pop	r23
    4a6a:	6f 91       	pop	r22
    4a6c:	5f 91       	pop	r21
    4a6e:	4f 91       	pop	r20
    4a70:	3f 91       	pop	r19
    4a72:	2f 91       	pop	r18
    4a74:	0f 90       	pop	r0
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	0f 90       	pop	r0
    4a7a:	1f 90       	pop	r1
    4a7c:	18 95       	reti

00004a7e <__vector_12>:

/* 软件时基定时器中断 */
ISR(TCB0_INT_vect)
{
    4a7e:	1f 92       	push	r1
    4a80:	0f 92       	push	r0
    4a82:	0f b6       	in	r0, 0x3f	; 63
    4a84:	0f 92       	push	r0
    4a86:	11 24       	eor	r1, r1
    4a88:	2f 93       	push	r18
    4a8a:	3f 93       	push	r19
    4a8c:	4f 93       	push	r20
    4a8e:	5f 93       	push	r21
    4a90:	6f 93       	push	r22
    4a92:	7f 93       	push	r23
    4a94:	8f 93       	push	r24
    4a96:	9f 93       	push	r25
    4a98:	af 93       	push	r26
    4a9a:	bf 93       	push	r27
    4a9c:	ef 93       	push	r30
    4a9e:	ff 93       	push	r31
	lin_lld_timeout_service(0);
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
    4aa2:	0e 94 3c 44 	call	0x8878	; 0x8878 <lin_lld_timeout_service>
	g_soft_timer_ticks++;
    4aa6:	80 91 62 67 	lds	r24, 0x6762	; 0x806762 <g_soft_timer_ticks>
    4aaa:	90 91 63 67 	lds	r25, 0x6763	; 0x806763 <g_soft_timer_ticks+0x1>
    4aae:	01 96       	adiw	r24, 0x01	; 1
    4ab0:	80 93 62 67 	sts	0x6762, r24	; 0x806762 <g_soft_timer_ticks>
    4ab4:	90 93 63 67 	sts	0x6763, r25	; 0x806763 <g_soft_timer_ticks+0x1>
	TCB0.INTFLAGS = TCB_CAPT_bm;
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	80 93 06 0b 	sts	0x0B06, r24	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7f0b06>
}
    4abe:	ff 91       	pop	r31
    4ac0:	ef 91       	pop	r30
    4ac2:	bf 91       	pop	r27
    4ac4:	af 91       	pop	r26
    4ac6:	9f 91       	pop	r25
    4ac8:	8f 91       	pop	r24
    4aca:	7f 91       	pop	r23
    4acc:	6f 91       	pop	r22
    4ace:	5f 91       	pop	r21
    4ad0:	4f 91       	pop	r20
    4ad2:	3f 91       	pop	r19
    4ad4:	2f 91       	pop	r18
    4ad6:	0f 90       	pop	r0
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	0f 90       	pop	r0
    4adc:	1f 90       	pop	r1
    4ade:	18 95       	reti

00004ae0 <soft_timer_sin_data_task>:
};
uint8_t sin_data_out_flg=0;

void soft_timer_sin_data_task(void)
{
	if(sin_data_out_flg==1)
    4ae0:	80 91 1c 64 	lds	r24, 0x641C	; 0x80641c <__data_end>
    4ae4:	81 30       	cpi	r24, 0x01	; 1
    4ae6:	01 f5       	brne	.+64     	; 0x4b28 <soft_timer_sin_data_task+0x48>
	{
		if(sin_data_index<(sizeof(sin_data)/sizeof(sin_data[0])))
    4ae8:	80 91 1d 64 	lds	r24, 0x641D	; 0x80641d <sin_data_index>
    4aec:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <sin_data_index+0x1>
    4af0:	85 33       	cpi	r24, 0x35	; 53
    4af2:	91 05       	cpc	r25, r1
    4af4:	98 f4       	brcc	.+38     	; 0x4b1c <soft_timer_sin_data_task+0x3c>
		{
			DAC_0_set_output(sin_data[sin_data_index]);
    4af6:	88 0f       	add	r24, r24
    4af8:	99 1f       	adc	r25, r25
    4afa:	fc 01       	movw	r30, r24
    4afc:	ea 5f       	subi	r30, 0xFA	; 250
    4afe:	ff 49       	sbci	r31, 0x9F	; 159
    4b00:	80 81       	ld	r24, Z
    4b02:	91 81       	ldd	r25, Z+1	; 0x01
    4b04:	0e 94 3b 4f 	call	0x9e76	; 0x9e76 <DAC_0_set_output>
			sin_data_index++;
    4b08:	80 91 1d 64 	lds	r24, 0x641D	; 0x80641d <sin_data_index>
    4b0c:	90 91 1e 64 	lds	r25, 0x641E	; 0x80641e <sin_data_index+0x1>
    4b10:	01 96       	adiw	r24, 0x01	; 1
    4b12:	80 93 1d 64 	sts	0x641D, r24	; 0x80641d <sin_data_index>
    4b16:	90 93 1e 64 	sts	0x641E, r25	; 0x80641e <sin_data_index+0x1>
    4b1a:	08 95       	ret
		}else{
			sin_data_index=0;
    4b1c:	10 92 1d 64 	sts	0x641D, r1	; 0x80641d <sin_data_index>
    4b20:	10 92 1e 64 	sts	0x641E, r1	; 0x80641e <sin_data_index+0x1>
			sin_data_out_flg=0;
    4b24:	10 92 1c 64 	sts	0x641C, r1	; 0x80641c <__data_end>
    4b28:	08 95       	ret

00004b2a <__vector_13>:
		}
	}
}

ISR(TCB1_INT_vect)
{
    4b2a:	1f 92       	push	r1
    4b2c:	0f 92       	push	r0
    4b2e:	0f b6       	in	r0, 0x3f	; 63
    4b30:	0f 92       	push	r0
    4b32:	11 24       	eor	r1, r1
    4b34:	2f 93       	push	r18
    4b36:	3f 93       	push	r19
    4b38:	4f 93       	push	r20
    4b3a:	5f 93       	push	r21
    4b3c:	6f 93       	push	r22
    4b3e:	7f 93       	push	r23
    4b40:	8f 93       	push	r24
    4b42:	9f 93       	push	r25
    4b44:	af 93       	push	r26
    4b46:	bf 93       	push	r27
    4b48:	ef 93       	push	r30
    4b4a:	ff 93       	push	r31
	soft_timer_sin_data_task();
    4b4c:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <soft_timer_sin_data_task>
	TCB1.INTFLAGS = TCB_CAPT_bm;
    4b50:	81 e0       	ldi	r24, 0x01	; 1
    4b52:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <__TEXT_REGION_LENGTH__+0x7f0b16>
}
    4b56:	ff 91       	pop	r31
    4b58:	ef 91       	pop	r30
    4b5a:	bf 91       	pop	r27
    4b5c:	af 91       	pop	r26
    4b5e:	9f 91       	pop	r25
    4b60:	8f 91       	pop	r24
    4b62:	7f 91       	pop	r23
    4b64:	6f 91       	pop	r22
    4b66:	5f 91       	pop	r21
    4b68:	4f 91       	pop	r20
    4b6a:	3f 91       	pop	r19
    4b6c:	2f 91       	pop	r18
    4b6e:	0f 90       	pop	r0
    4b70:	0f be       	out	0x3f, r0	; 63
    4b72:	0f 90       	pop	r0
    4b74:	1f 90       	pop	r1
    4b76:	18 95       	reti

00004b78 <backlight_cb>:
/* 背光亮度控制回调函数注册 */
void backlight_cb(uint32_t duty);
backlight_cb_t g_backlight_cb = backlight_cb;
void backlight_cb(uint32_t duty)
{
    TCA0.SPLIT.HCMP0 = duty;
    4b78:	60 93 29 0a 	sts	0x0A29, r22	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f0a29>
    4b7c:	08 95       	ret

00004b7e <rear_led_ctrl>:
    btn_rear_tick_task();
}

void rear_led_ctrl(uint8_t status)
{
    if (status == 1)
    4b7e:	81 30       	cpi	r24, 0x01	; 1
    4b80:	49 f4       	brne	.+18     	; 0x4b94 <rear_led_ctrl+0x16>
    {
        led_set_level(led_d5, 1);
    4b82:	61 e0       	ldi	r22, 0x01	; 1
    4b84:	82 e0       	ldi	r24, 0x02	; 2
    4b86:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
        led_set_level(led_d6, 0);
    4b8a:	60 e0       	ldi	r22, 0x00	; 0
    4b8c:	83 e0       	ldi	r24, 0x03	; 3
    4b8e:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
    4b92:	08 95       	ret
    }
    else
    {
        led_set_level(led_d5, 0);
    4b94:	60 e0       	ldi	r22, 0x00	; 0
    4b96:	82 e0       	ldi	r24, 0x02	; 2
    4b98:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
        led_set_level(led_d6, 1);
    4b9c:	61 e0       	ldi	r22, 0x01	; 1
    4b9e:	83 e0       	ldi	r24, 0x03	; 3
    4ba0:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
    4ba4:	08 95       	ret

00004ba6 <window_lock_led_cb>:
    .signal_cb = window_lock_signal_cb,
};

void window_lock_led_cb(uint8_t status)
{
    if (status == 1)
    4ba6:	81 30       	cpi	r24, 0x01	; 1
    4ba8:	49 f4       	brne	.+18     	; 0x4bbc <window_lock_led_cb+0x16>
    {
        led_set_level(led_d7, 1);
    4baa:	61 e0       	ldi	r22, 0x01	; 1
    4bac:	84 e0       	ldi	r24, 0x04	; 4
    4bae:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
        led_set_level(led_d8, 0);
    4bb2:	60 e0       	ldi	r22, 0x00	; 0
    4bb4:	85 e0       	ldi	r24, 0x05	; 5
    4bb6:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
    4bba:	08 95       	ret
    }
    else
    {
        led_set_level(led_d7, 0);
    4bbc:	60 e0       	ldi	r22, 0x00	; 0
    4bbe:	84 e0       	ldi	r24, 0x04	; 4
    4bc0:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
        led_set_level(led_d8, 1);
    4bc4:	61 e0       	ldi	r22, 0x01	; 1
    4bc6:	85 e0       	ldi	r24, 0x05	; 5
    4bc8:	0e 94 75 2c 	call	0x58ea	; 0x58ea <led_set_level>
    4bcc:	08 95       	ret

00004bce <soft_timer_rear_btn_task>:
    .rear_led_ctrl_cb = rear_led_ctrl,
};

/* REAR触摸检测定时器任务 */
void soft_timer_rear_btn_task(void)
{
    4bce:	cf 93       	push	r28
    4bd0:	df 93       	push	r29
    static uint8_t btn_status_last = 0;
    static uint8_t btn_status = 0;
    uint8_t all_cap_status = 0;
    btn_status_last = btn_status;
    4bd2:	80 91 24 64 	lds	r24, 0x6424	; 0x806424 <btn_status.6367>
    4bd6:	80 93 23 64 	sts	0x6423, r24	; 0x806423 <btn_status_last.6366>
    btn_status = get_sensor_state(0) & 0x80;
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <get_sensor_state>
    4be2:	80 78       	andi	r24, 0x80	; 128
    4be4:	80 93 24 64 	sts	0x6424, r24	; 0x806424 <btn_status.6367>

    g_btn_rear.press_trig_flg = 1;
    4be8:	91 e0       	ldi	r25, 0x01	; 1
    4bea:	90 93 aa 60 	sts	0x60AA, r25	; 0x8060aa <g_btn_rear+0x3>

    if ((btn_status != 0) && (btn_status_last == 0))
    4bee:	88 23       	and	r24, r24
    4bf0:	39 f0       	breq	.+14     	; 0x4c00 <soft_timer_rear_btn_task+0x32>
    4bf2:	80 91 23 64 	lds	r24, 0x6423	; 0x806423 <btn_status_last.6366>
    4bf6:	81 11       	cpse	r24, r1
    4bf8:	03 c0       	rjmp	.+6      	; 0x4c00 <soft_timer_rear_btn_task+0x32>
    {
        g_btn_rear.cap_trig_flg = 1;
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	80 93 a8 60 	sts	0x60A8, r24	; 0x8060a8 <g_btn_rear+0x1>

    for (uint8_t i = 0; i < 6; i++)
    {
        if ((get_sensor_state(i) & 0x80) != 0)
        {
            all_cap_status = 1;
    4c00:	c0 e0       	ldi	r28, 0x00	; 0
    4c02:	d0 e0       	ldi	r29, 0x00	; 0
    4c04:	08 c0       	rjmp	.+16     	; 0x4c16 <soft_timer_rear_btn_task+0x48>
        g_btn_rear.cap_trig_flg = 1;
    }

    for (uint8_t i = 0; i < 6; i++)
    {
        if ((get_sensor_state(i) & 0x80) != 0)
    4c06:	8c 2f       	mov	r24, r28
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <get_sensor_state>
    4c0e:	88 23       	and	r24, r24
    4c10:	0c f4       	brge	.+2      	; 0x4c14 <soft_timer_rear_btn_task+0x46>
        {
            all_cap_status = 1;
    4c12:	d1 e0       	ldi	r29, 0x01	; 1
    if ((btn_status != 0) && (btn_status_last == 0))
    {
        g_btn_rear.cap_trig_flg = 1;
    }

    for (uint8_t i = 0; i < 6; i++)
    4c14:	cf 5f       	subi	r28, 0xFF	; 255
    4c16:	c6 30       	cpi	r28, 0x06	; 6
    4c18:	b0 f3       	brcs	.-20     	; 0x4c06 <soft_timer_rear_btn_task+0x38>
    4c1a:	c0 e0       	ldi	r28, 0x00	; 0
    4c1c:	07 c0       	rjmp	.+14     	; 0x4c2c <soft_timer_rear_btn_task+0x5e>
            all_cap_status = 1;
        }
    }
    for (uint8_t i = 0; i < 2; i++)
    {
        if (get_scroller_state(i) != 0)
    4c1e:	8c 2f       	mov	r24, r28
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <get_scroller_state>
    4c26:	81 11       	cpse	r24, r1
        {
            all_cap_status = 1;
    4c28:	d1 e0       	ldi	r29, 0x01	; 1
        if ((get_sensor_state(i) & 0x80) != 0)
        {
            all_cap_status = 1;
        }
    }
    for (uint8_t i = 0; i < 2; i++)
    4c2a:	cf 5f       	subi	r28, 0xFF	; 255
    4c2c:	c2 30       	cpi	r28, 0x02	; 2
    4c2e:	b8 f3       	brcs	.-18     	; 0x4c1e <soft_timer_rear_btn_task+0x50>
        {
            all_cap_status = 1;
        }
    }

    g_btn_rear.all_cap_status = all_cap_status;
    4c30:	d0 93 a9 60 	sts	0x60A9, r29	; 0x8060a9 <g_btn_rear+0x2>

    btn_rear_tick_task();
    4c34:	0e 94 a4 2a 	call	0x5548	; 0x5548 <btn_rear_tick_task>
}
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	08 95       	ret

00004c3e <soft_timer_window_lock_task>:
/* 窗锁止定时器按键触摸检测任务 */
void soft_timer_window_lock_task(void)
{
    static uint8_t btn_status_last = 0;
    static uint8_t btn_status = 0;
    btn_status_last = btn_status;
    4c3e:	80 91 22 64 	lds	r24, 0x6422	; 0x806422 <btn_status.6392>
    4c42:	80 93 21 64 	sts	0x6421, r24	; 0x806421 <btn_status_last.6391>
    btn_status = get_sensor_state(3) & 0x80;
    4c46:	83 e0       	ldi	r24, 0x03	; 3
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <get_sensor_state>
    4c4e:	80 78       	andi	r24, 0x80	; 128
    4c50:	80 93 22 64 	sts	0x6422, r24	; 0x806422 <btn_status.6392>

    g_window_lock.press_flg = 1;
    4c54:	91 e0       	ldi	r25, 0x01	; 1
    4c56:	90 93 a2 60 	sts	0x60A2, r25	; 0x8060a2 <g_window_lock+0x1>

    if ((btn_status != 0) && (btn_status_last == 0))
    4c5a:	88 23       	and	r24, r24
    4c5c:	39 f0       	breq	.+14     	; 0x4c6c <soft_timer_window_lock_task+0x2e>
    4c5e:	80 91 21 64 	lds	r24, 0x6421	; 0x806421 <btn_status_last.6391>
    4c62:	81 11       	cpse	r24, r1
    4c64:	03 c0       	rjmp	.+6      	; 0x4c6c <soft_timer_window_lock_task+0x2e>
    {
        g_window_lock.capsense_flg = 1;
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	80 93 a1 60 	sts	0x60A1, r24	; 0x8060a1 <g_window_lock>
    }

    window_lock_task();
    4c6c:	0e 94 ba 2b 	call	0x5774	; 0x5774 <window_lock_task>
    4c70:	08 95       	ret

00004c72 <soft_timer_lin_signal_update_task>:
    .backlight_brightness = 3,
};
/* lin信号更新到变量定时器任务 */
void soft_timer_lin_signal_update_task(void)
{
    if (l_u8_rd_LI0_DDCU_BDCS1_Backlight_brightness_fb() != 0)
    4c72:	80 91 dc 60 	lds	r24, 0x60DC	; 0x8060dc <g_lin_frame_data_buffer+0x4>
    4c76:	82 95       	swap	r24
    4c78:	8f 70       	andi	r24, 0x0F	; 15
    4c7a:	59 f0       	breq	.+22     	; 0x4c92 <soft_timer_lin_signal_update_task+0x20>
    {
        g_lin_rx_signal.backlight_brightness = l_u8_rd_LI0_DDCU_BDCS1_Backlight_brightness_fb();
    4c7c:	80 91 dc 60 	lds	r24, 0x60DC	; 0x8060dc <g_lin_frame_data_buffer+0x4>
    4c80:	98 2f       	mov	r25, r24
    4c82:	92 95       	swap	r25
    4c84:	9f 70       	andi	r25, 0x0F	; 15
    4c86:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    4c8a:	80 7f       	andi	r24, 0xF0	; 240
    4c8c:	89 2b       	or	r24, r25
    4c8e:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    }
    g_lin_rx_signal.backlight_status = l_bool_rd_LI0_DDCU_BDCS1_BacklightStatus();
    4c92:	e8 ed       	ldi	r30, 0xD8	; 216
    4c94:	f0 e6       	ldi	r31, 0x60	; 96
    4c96:	90 81       	ld	r25, Z
    4c98:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    4c9c:	90 fb       	bst	r25, 0
    4c9e:	85 f9       	bld	r24, 5
    4ca0:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    g_lin_rx_signal.ctrl_window_lock = l_bool_rd_LI0_DDCU_ControlWindowLockSwInd();
    4ca4:	95 81       	ldd	r25, Z+5	; 0x05
    4ca6:	90 fb       	bst	r25, 0
    4ca8:	84 f9       	bld	r24, 4
    4caa:	80 93 a0 60 	sts	0x60A0, r24	; 0x8060a0 <g_lin_rx_signal>
    4cae:	08 95       	ret

00004cb0 <ep40_lin_signal_update_while_task>:

lin_signal_cnt_t g_lin_signal_cnt[LIN_NUM_OF_SIGS];

void ep40_lin_signal_update_while_task(void)
{
    for (uint8_t i = 0; i < LIN_NUM_OF_SIGS; i++)
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	18 c2       	rjmp	.+1072   	; 0x50e4 <ep40_lin_signal_update_while_task+0x434>
    {
        switch (i)
    4cb4:	82 2f       	mov	r24, r18
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	fc 01       	movw	r30, r24
    4cba:	34 97       	sbiw	r30, 0x04	; 4
    4cbc:	ea 30       	cpi	r30, 0x0A	; 10
    4cbe:	f1 05       	cpc	r31, r1
    4cc0:	08 f0       	brcs	.+2      	; 0x4cc4 <ep40_lin_signal_update_while_task+0x14>
    4cc2:	0f c2       	rjmp	.+1054   	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
    4cc4:	e0 58       	subi	r30, 0x80	; 128
    4cc6:	fb 4d       	sbci	r31, 0xDB	; 219
    4cc8:	0c 94 03 5f 	jmp	0xbe06	; 0xbe06 <__tablejump2__>
        {
        case LI0_DFGLS_FLWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4ccc:	82 2f       	mov	r24, r18
    4cce:	90 e0       	ldi	r25, 0x00	; 0
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	ee 0f       	add	r30, r30
    4cd4:	ff 1f       	adc	r31, r31
    4cd6:	e8 0f       	add	r30, r24
    4cd8:	f9 1f       	adc	r31, r25
    4cda:	eb 59       	subi	r30, 0x9B	; 155
    4cdc:	f8 49       	sbci	r31, 0x98	; 152
    4cde:	30 81       	ld	r19, Z
    4ce0:	33 23       	and	r19, r19
    4ce2:	d9 f0       	breq	.+54     	; 0x4d1a <ep40_lin_signal_update_while_task+0x6a>
            {
                g_lin_signal_cnt[i].cnt--;
    4ce4:	fc 01       	movw	r30, r24
    4ce6:	ee 0f       	add	r30, r30
    4ce8:	ff 1f       	adc	r31, r31
    4cea:	8e 0f       	add	r24, r30
    4cec:	9f 1f       	adc	r25, r31
    4cee:	fc 01       	movw	r30, r24
    4cf0:	eb 59       	subi	r30, 0x9B	; 155
    4cf2:	f8 49       	sbci	r31, 0x98	; 152
    4cf4:	31 50       	subi	r19, 0x01	; 1
    4cf6:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_FLWindowControl(g_lin_signal_cnt[i].val);
    4cf8:	a8 ed       	ldi	r26, 0xD8	; 216
    4cfa:	b0 e6       	ldi	r27, 0x60	; 96
    4cfc:	18 96       	adiw	r26, 0x08	; 8
    4cfe:	9c 91       	ld	r25, X
    4d00:	18 97       	sbiw	r26, 0x08	; 8
    4d02:	81 81       	ldd	r24, Z+1	; 0x01
    4d04:	98 7f       	andi	r25, 0xF8	; 248
    4d06:	87 70       	andi	r24, 0x07	; 7
    4d08:	89 2b       	or	r24, r25
    4d0a:	18 96       	adiw	r26, 0x08	; 8
    4d0c:	8c 93       	st	X, r24
    4d0e:	e5 ed       	ldi	r30, 0xD5	; 213
    4d10:	f0 e6       	ldi	r31, 0x60	; 96
    4d12:	81 81       	ldd	r24, Z+1	; 0x01
    4d14:	8e 7f       	andi	r24, 0xFE	; 254
    4d16:	81 83       	std	Z+1, r24	; 0x01
    4d18:	e4 c1       	rjmp	.+968    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_FLWindowControl(0);
    4d1a:	e8 ed       	ldi	r30, 0xD8	; 216
    4d1c:	f0 e6       	ldi	r31, 0x60	; 96
    4d1e:	80 85       	ldd	r24, Z+8	; 0x08
    4d20:	88 7f       	andi	r24, 0xF8	; 248
    4d22:	80 87       	std	Z+8, r24	; 0x08
    4d24:	e5 ed       	ldi	r30, 0xD5	; 213
    4d26:	f0 e6       	ldi	r31, 0x60	; 96
    4d28:	81 81       	ldd	r24, Z+1	; 0x01
    4d2a:	8e 7f       	andi	r24, 0xFE	; 254
    4d2c:	81 83       	std	Z+1, r24	; 0x01
    4d2e:	d9 c1       	rjmp	.+946    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_FRWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4d30:	82 2f       	mov	r24, r18
    4d32:	90 e0       	ldi	r25, 0x00	; 0
    4d34:	fc 01       	movw	r30, r24
    4d36:	ee 0f       	add	r30, r30
    4d38:	ff 1f       	adc	r31, r31
    4d3a:	e8 0f       	add	r30, r24
    4d3c:	f9 1f       	adc	r31, r25
    4d3e:	eb 59       	subi	r30, 0x9B	; 155
    4d40:	f8 49       	sbci	r31, 0x98	; 152
    4d42:	30 81       	ld	r19, Z
    4d44:	33 23       	and	r19, r19
    4d46:	f1 f0       	breq	.+60     	; 0x4d84 <ep40_lin_signal_update_while_task+0xd4>
            {
                g_lin_signal_cnt[i].cnt--;
    4d48:	fc 01       	movw	r30, r24
    4d4a:	ee 0f       	add	r30, r30
    4d4c:	ff 1f       	adc	r31, r31
    4d4e:	8e 0f       	add	r24, r30
    4d50:	9f 1f       	adc	r25, r31
    4d52:	fc 01       	movw	r30, r24
    4d54:	eb 59       	subi	r30, 0x9B	; 155
    4d56:	f8 49       	sbci	r31, 0x98	; 152
    4d58:	31 50       	subi	r19, 0x01	; 1
    4d5a:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_FRWindowControl(g_lin_signal_cnt[i].val);
    4d5c:	a8 ed       	ldi	r26, 0xD8	; 216
    4d5e:	b0 e6       	ldi	r27, 0x60	; 96
    4d60:	18 96       	adiw	r26, 0x08	; 8
    4d62:	8c 91       	ld	r24, X
    4d64:	18 97       	sbiw	r26, 0x08	; 8
    4d66:	91 81       	ldd	r25, Z+1	; 0x01
    4d68:	99 0f       	add	r25, r25
    4d6a:	99 0f       	add	r25, r25
    4d6c:	99 0f       	add	r25, r25
    4d6e:	98 73       	andi	r25, 0x38	; 56
    4d70:	87 7c       	andi	r24, 0xC7	; 199
    4d72:	89 2b       	or	r24, r25
    4d74:	18 96       	adiw	r26, 0x08	; 8
    4d76:	8c 93       	st	X, r24
    4d78:	e5 ed       	ldi	r30, 0xD5	; 213
    4d7a:	f0 e6       	ldi	r31, 0x60	; 96
    4d7c:	81 81       	ldd	r24, Z+1	; 0x01
    4d7e:	8d 7f       	andi	r24, 0xFD	; 253
    4d80:	81 83       	std	Z+1, r24	; 0x01
    4d82:	af c1       	rjmp	.+862    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_FRWindowControl(0);
    4d84:	e8 ed       	ldi	r30, 0xD8	; 216
    4d86:	f0 e6       	ldi	r31, 0x60	; 96
    4d88:	80 85       	ldd	r24, Z+8	; 0x08
    4d8a:	87 7c       	andi	r24, 0xC7	; 199
    4d8c:	80 87       	std	Z+8, r24	; 0x08
    4d8e:	e5 ed       	ldi	r30, 0xD5	; 213
    4d90:	f0 e6       	ldi	r31, 0x60	; 96
    4d92:	81 81       	ldd	r24, Z+1	; 0x01
    4d94:	8d 7f       	andi	r24, 0xFD	; 253
    4d96:	81 83       	std	Z+1, r24	; 0x01
    4d98:	a4 c1       	rjmp	.+840    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ControlWindowLockSw:
            if (g_lin_signal_cnt[i].cnt > 0)
    4d9a:	82 2f       	mov	r24, r18
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	fc 01       	movw	r30, r24
    4da0:	ee 0f       	add	r30, r30
    4da2:	ff 1f       	adc	r31, r31
    4da4:	e8 0f       	add	r30, r24
    4da6:	f9 1f       	adc	r31, r25
    4da8:	eb 59       	subi	r30, 0x9B	; 155
    4daa:	f8 49       	sbci	r31, 0x98	; 152
    4dac:	30 81       	ld	r19, Z
    4dae:	33 23       	and	r19, r19
    4db0:	f1 f0       	breq	.+60     	; 0x4dee <ep40_lin_signal_update_while_task+0x13e>
            {
                g_lin_signal_cnt[i].cnt--;
    4db2:	fc 01       	movw	r30, r24
    4db4:	ee 0f       	add	r30, r30
    4db6:	ff 1f       	adc	r31, r31
    4db8:	8e 0f       	add	r24, r30
    4dba:	9f 1f       	adc	r25, r31
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	eb 59       	subi	r30, 0x9B	; 155
    4dc0:	f8 49       	sbci	r31, 0x98	; 152
    4dc2:	31 50       	subi	r19, 0x01	; 1
    4dc4:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ControlWindowLockSw(g_lin_signal_cnt[i].val);
    4dc6:	81 81       	ldd	r24, Z+1	; 0x01
    4dc8:	88 23       	and	r24, r24
    4dca:	31 f0       	breq	.+12     	; 0x4dd8 <ep40_lin_signal_update_while_task+0x128>
    4dcc:	e8 ed       	ldi	r30, 0xD8	; 216
    4dce:	f0 e6       	ldi	r31, 0x60	; 96
    4dd0:	80 85       	ldd	r24, Z+8	; 0x08
    4dd2:	80 64       	ori	r24, 0x40	; 64
    4dd4:	80 87       	std	Z+8, r24	; 0x08
    4dd6:	05 c0       	rjmp	.+10     	; 0x4de2 <ep40_lin_signal_update_while_task+0x132>
    4dd8:	e8 ed       	ldi	r30, 0xD8	; 216
    4dda:	f0 e6       	ldi	r31, 0x60	; 96
    4ddc:	80 85       	ldd	r24, Z+8	; 0x08
    4dde:	8f 7b       	andi	r24, 0xBF	; 191
    4de0:	80 87       	std	Z+8, r24	; 0x08
    4de2:	e5 ed       	ldi	r30, 0xD5	; 213
    4de4:	f0 e6       	ldi	r31, 0x60	; 96
    4de6:	81 81       	ldd	r24, Z+1	; 0x01
    4de8:	8b 7f       	andi	r24, 0xFB	; 251
    4dea:	81 83       	std	Z+1, r24	; 0x01
    4dec:	7a c1       	rjmp	.+756    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ControlWindowLockSw(0);
    4dee:	e8 ed       	ldi	r30, 0xD8	; 216
    4df0:	f0 e6       	ldi	r31, 0x60	; 96
    4df2:	80 85       	ldd	r24, Z+8	; 0x08
    4df4:	8f 7b       	andi	r24, 0xBF	; 191
    4df6:	80 87       	std	Z+8, r24	; 0x08
    4df8:	e5 ed       	ldi	r30, 0xD5	; 213
    4dfa:	f0 e6       	ldi	r31, 0x60	; 96
    4dfc:	81 81       	ldd	r24, Z+1	; 0x01
    4dfe:	8b 7f       	andi	r24, 0xFB	; 251
    4e00:	81 83       	std	Z+1, r24	; 0x01
    4e02:	6f c1       	rjmp	.+734    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ErrorSts:
            if (g_lin_signal_cnt[i].cnt > 0)
    4e04:	82 2f       	mov	r24, r18
    4e06:	90 e0       	ldi	r25, 0x00	; 0
    4e08:	fc 01       	movw	r30, r24
    4e0a:	ee 0f       	add	r30, r30
    4e0c:	ff 1f       	adc	r31, r31
    4e0e:	e8 0f       	add	r30, r24
    4e10:	f9 1f       	adc	r31, r25
    4e12:	eb 59       	subi	r30, 0x9B	; 155
    4e14:	f8 49       	sbci	r31, 0x98	; 152
    4e16:	30 81       	ld	r19, Z
    4e18:	33 23       	and	r19, r19
    4e1a:	f1 f0       	breq	.+60     	; 0x4e58 <ep40_lin_signal_update_while_task+0x1a8>
            {
                g_lin_signal_cnt[i].cnt--;
    4e1c:	fc 01       	movw	r30, r24
    4e1e:	ee 0f       	add	r30, r30
    4e20:	ff 1f       	adc	r31, r31
    4e22:	8e 0f       	add	r24, r30
    4e24:	9f 1f       	adc	r25, r31
    4e26:	fc 01       	movw	r30, r24
    4e28:	eb 59       	subi	r30, 0x9B	; 155
    4e2a:	f8 49       	sbci	r31, 0x98	; 152
    4e2c:	31 50       	subi	r19, 0x01	; 1
    4e2e:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ErrorSts(g_lin_signal_cnt[i].val);
    4e30:	81 81       	ldd	r24, Z+1	; 0x01
    4e32:	88 23       	and	r24, r24
    4e34:	31 f0       	breq	.+12     	; 0x4e42 <ep40_lin_signal_update_while_task+0x192>
    4e36:	e8 ed       	ldi	r30, 0xD8	; 216
    4e38:	f0 e6       	ldi	r31, 0x60	; 96
    4e3a:	80 85       	ldd	r24, Z+8	; 0x08
    4e3c:	80 68       	ori	r24, 0x80	; 128
    4e3e:	80 87       	std	Z+8, r24	; 0x08
    4e40:	05 c0       	rjmp	.+10     	; 0x4e4c <ep40_lin_signal_update_while_task+0x19c>
    4e42:	e8 ed       	ldi	r30, 0xD8	; 216
    4e44:	f0 e6       	ldi	r31, 0x60	; 96
    4e46:	80 85       	ldd	r24, Z+8	; 0x08
    4e48:	8f 77       	andi	r24, 0x7F	; 127
    4e4a:	80 87       	std	Z+8, r24	; 0x08
    4e4c:	e5 ed       	ldi	r30, 0xD5	; 213
    4e4e:	f0 e6       	ldi	r31, 0x60	; 96
    4e50:	81 81       	ldd	r24, Z+1	; 0x01
    4e52:	87 7f       	andi	r24, 0xF7	; 247
    4e54:	81 83       	std	Z+1, r24	; 0x01
    4e56:	45 c1       	rjmp	.+650    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ErrorSts(0);
    4e58:	e8 ed       	ldi	r30, 0xD8	; 216
    4e5a:	f0 e6       	ldi	r31, 0x60	; 96
    4e5c:	80 85       	ldd	r24, Z+8	; 0x08
    4e5e:	8f 77       	andi	r24, 0x7F	; 127
    4e60:	80 87       	std	Z+8, r24	; 0x08
    4e62:	e5 ed       	ldi	r30, 0xD5	; 213
    4e64:	f0 e6       	ldi	r31, 0x60	; 96
    4e66:	81 81       	ldd	r24, Z+1	; 0x01
    4e68:	87 7f       	andi	r24, 0xF7	; 247
    4e6a:	81 83       	std	Z+1, r24	; 0x01
    4e6c:	3a c1       	rjmp	.+628    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_RLWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4e6e:	82 2f       	mov	r24, r18
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	fc 01       	movw	r30, r24
    4e74:	ee 0f       	add	r30, r30
    4e76:	ff 1f       	adc	r31, r31
    4e78:	e8 0f       	add	r30, r24
    4e7a:	f9 1f       	adc	r31, r25
    4e7c:	eb 59       	subi	r30, 0x9B	; 155
    4e7e:	f8 49       	sbci	r31, 0x98	; 152
    4e80:	30 81       	ld	r19, Z
    4e82:	33 23       	and	r19, r19
    4e84:	d9 f0       	breq	.+54     	; 0x4ebc <ep40_lin_signal_update_while_task+0x20c>
            {
                g_lin_signal_cnt[i].cnt--;
    4e86:	fc 01       	movw	r30, r24
    4e88:	ee 0f       	add	r30, r30
    4e8a:	ff 1f       	adc	r31, r31
    4e8c:	8e 0f       	add	r24, r30
    4e8e:	9f 1f       	adc	r25, r31
    4e90:	fc 01       	movw	r30, r24
    4e92:	eb 59       	subi	r30, 0x9B	; 155
    4e94:	f8 49       	sbci	r31, 0x98	; 152
    4e96:	31 50       	subi	r19, 0x01	; 1
    4e98:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_RLWindowControl(g_lin_signal_cnt[i].val);
    4e9a:	a8 ed       	ldi	r26, 0xD8	; 216
    4e9c:	b0 e6       	ldi	r27, 0x60	; 96
    4e9e:	19 96       	adiw	r26, 0x09	; 9
    4ea0:	9c 91       	ld	r25, X
    4ea2:	19 97       	sbiw	r26, 0x09	; 9
    4ea4:	81 81       	ldd	r24, Z+1	; 0x01
    4ea6:	98 7f       	andi	r25, 0xF8	; 248
    4ea8:	87 70       	andi	r24, 0x07	; 7
    4eaa:	89 2b       	or	r24, r25
    4eac:	19 96       	adiw	r26, 0x09	; 9
    4eae:	8c 93       	st	X, r24
    4eb0:	e5 ed       	ldi	r30, 0xD5	; 213
    4eb2:	f0 e6       	ldi	r31, 0x60	; 96
    4eb4:	81 81       	ldd	r24, Z+1	; 0x01
    4eb6:	8f 7e       	andi	r24, 0xEF	; 239
    4eb8:	81 83       	std	Z+1, r24	; 0x01
    4eba:	13 c1       	rjmp	.+550    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_RLWindowControl(0);
    4ebc:	e8 ed       	ldi	r30, 0xD8	; 216
    4ebe:	f0 e6       	ldi	r31, 0x60	; 96
    4ec0:	81 85       	ldd	r24, Z+9	; 0x09
    4ec2:	88 7f       	andi	r24, 0xF8	; 248
    4ec4:	81 87       	std	Z+9, r24	; 0x09
    4ec6:	e5 ed       	ldi	r30, 0xD5	; 213
    4ec8:	f0 e6       	ldi	r31, 0x60	; 96
    4eca:	81 81       	ldd	r24, Z+1	; 0x01
    4ecc:	8f 7e       	andi	r24, 0xEF	; 239
    4ece:	81 83       	std	Z+1, r24	; 0x01
    4ed0:	08 c1       	rjmp	.+528    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_RRWindowControl:
            if (g_lin_signal_cnt[i].cnt > 0)
    4ed2:	82 2f       	mov	r24, r18
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	fc 01       	movw	r30, r24
    4ed8:	ee 0f       	add	r30, r30
    4eda:	ff 1f       	adc	r31, r31
    4edc:	e8 0f       	add	r30, r24
    4ede:	f9 1f       	adc	r31, r25
    4ee0:	eb 59       	subi	r30, 0x9B	; 155
    4ee2:	f8 49       	sbci	r31, 0x98	; 152
    4ee4:	30 81       	ld	r19, Z
    4ee6:	33 23       	and	r19, r19
    4ee8:	f1 f0       	breq	.+60     	; 0x4f26 <ep40_lin_signal_update_while_task+0x276>
            {
                g_lin_signal_cnt[i].cnt--;
    4eea:	fc 01       	movw	r30, r24
    4eec:	ee 0f       	add	r30, r30
    4eee:	ff 1f       	adc	r31, r31
    4ef0:	8e 0f       	add	r24, r30
    4ef2:	9f 1f       	adc	r25, r31
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	eb 59       	subi	r30, 0x9B	; 155
    4ef8:	f8 49       	sbci	r31, 0x98	; 152
    4efa:	31 50       	subi	r19, 0x01	; 1
    4efc:	30 83       	st	Z, r19
                l_u8_wr_LI0_DFGLS_RRWindowControl(g_lin_signal_cnt[i].val);
    4efe:	a8 ed       	ldi	r26, 0xD8	; 216
    4f00:	b0 e6       	ldi	r27, 0x60	; 96
    4f02:	19 96       	adiw	r26, 0x09	; 9
    4f04:	8c 91       	ld	r24, X
    4f06:	19 97       	sbiw	r26, 0x09	; 9
    4f08:	91 81       	ldd	r25, Z+1	; 0x01
    4f0a:	99 0f       	add	r25, r25
    4f0c:	99 0f       	add	r25, r25
    4f0e:	99 0f       	add	r25, r25
    4f10:	98 73       	andi	r25, 0x38	; 56
    4f12:	87 7c       	andi	r24, 0xC7	; 199
    4f14:	89 2b       	or	r24, r25
    4f16:	19 96       	adiw	r26, 0x09	; 9
    4f18:	8c 93       	st	X, r24
    4f1a:	e5 ed       	ldi	r30, 0xD5	; 213
    4f1c:	f0 e6       	ldi	r31, 0x60	; 96
    4f1e:	81 81       	ldd	r24, Z+1	; 0x01
    4f20:	8f 7d       	andi	r24, 0xDF	; 223
    4f22:	81 83       	std	Z+1, r24	; 0x01
    4f24:	de c0       	rjmp	.+444    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_u8_wr_LI0_DFGLS_RRWindowControl(0);
    4f26:	e8 ed       	ldi	r30, 0xD8	; 216
    4f28:	f0 e6       	ldi	r31, 0x60	; 96
    4f2a:	81 85       	ldd	r24, Z+9	; 0x09
    4f2c:	87 7c       	andi	r24, 0xC7	; 199
    4f2e:	81 87       	std	Z+9, r24	; 0x09
    4f30:	e5 ed       	ldi	r30, 0xD5	; 213
    4f32:	f0 e6       	ldi	r31, 0x60	; 96
    4f34:	81 81       	ldd	r24, Z+1	; 0x01
    4f36:	8f 7d       	andi	r24, 0xDF	; 223
    4f38:	81 83       	std	Z+1, r24	; 0x01
    4f3a:	d3 c0       	rjmp	.+422    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_ButtonSoundRequest:
            if (g_lin_signal_cnt[i].cnt > 0)
    4f3c:	82 2f       	mov	r24, r18
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	fc 01       	movw	r30, r24
    4f42:	ee 0f       	add	r30, r30
    4f44:	ff 1f       	adc	r31, r31
    4f46:	e8 0f       	add	r30, r24
    4f48:	f9 1f       	adc	r31, r25
    4f4a:	eb 59       	subi	r30, 0x9B	; 155
    4f4c:	f8 49       	sbci	r31, 0x98	; 152
    4f4e:	30 81       	ld	r19, Z
    4f50:	33 23       	and	r19, r19
    4f52:	f1 f0       	breq	.+60     	; 0x4f90 <ep40_lin_signal_update_while_task+0x2e0>
            {
                g_lin_signal_cnt[i].cnt--;
    4f54:	fc 01       	movw	r30, r24
    4f56:	ee 0f       	add	r30, r30
    4f58:	ff 1f       	adc	r31, r31
    4f5a:	8e 0f       	add	r24, r30
    4f5c:	9f 1f       	adc	r25, r31
    4f5e:	fc 01       	movw	r30, r24
    4f60:	eb 59       	subi	r30, 0x9B	; 155
    4f62:	f8 49       	sbci	r31, 0x98	; 152
    4f64:	31 50       	subi	r19, 0x01	; 1
    4f66:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_ButtonSoundRequest(g_lin_signal_cnt[i].val);
    4f68:	81 81       	ldd	r24, Z+1	; 0x01
    4f6a:	88 23       	and	r24, r24
    4f6c:	31 f0       	breq	.+12     	; 0x4f7a <ep40_lin_signal_update_while_task+0x2ca>
    4f6e:	e8 ed       	ldi	r30, 0xD8	; 216
    4f70:	f0 e6       	ldi	r31, 0x60	; 96
    4f72:	81 85       	ldd	r24, Z+9	; 0x09
    4f74:	80 64       	ori	r24, 0x40	; 64
    4f76:	81 87       	std	Z+9, r24	; 0x09
    4f78:	05 c0       	rjmp	.+10     	; 0x4f84 <ep40_lin_signal_update_while_task+0x2d4>
    4f7a:	e8 ed       	ldi	r30, 0xD8	; 216
    4f7c:	f0 e6       	ldi	r31, 0x60	; 96
    4f7e:	81 85       	ldd	r24, Z+9	; 0x09
    4f80:	8f 7b       	andi	r24, 0xBF	; 191
    4f82:	81 87       	std	Z+9, r24	; 0x09
    4f84:	e5 ed       	ldi	r30, 0xD5	; 213
    4f86:	f0 e6       	ldi	r31, 0x60	; 96
    4f88:	81 81       	ldd	r24, Z+1	; 0x01
    4f8a:	8f 7b       	andi	r24, 0xBF	; 191
    4f8c:	81 83       	std	Z+1, r24	; 0x01
    4f8e:	a9 c0       	rjmp	.+338    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_ButtonSoundRequest(0);
    4f90:	e8 ed       	ldi	r30, 0xD8	; 216
    4f92:	f0 e6       	ldi	r31, 0x60	; 96
    4f94:	81 85       	ldd	r24, Z+9	; 0x09
    4f96:	8f 7b       	andi	r24, 0xBF	; 191
    4f98:	81 87       	std	Z+9, r24	; 0x09
    4f9a:	e5 ed       	ldi	r30, 0xD5	; 213
    4f9c:	f0 e6       	ldi	r31, 0x60	; 96
    4f9e:	81 81       	ldd	r24, Z+1	; 0x01
    4fa0:	8f 7b       	andi	r24, 0xBF	; 191
    4fa2:	81 83       	std	Z+1, r24	; 0x01
    4fa4:	9e c0       	rjmp	.+316    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Voltage_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
    4fa6:	82 2f       	mov	r24, r18
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	fc 01       	movw	r30, r24
    4fac:	ee 0f       	add	r30, r30
    4fae:	ff 1f       	adc	r31, r31
    4fb0:	e8 0f       	add	r30, r24
    4fb2:	f9 1f       	adc	r31, r25
    4fb4:	eb 59       	subi	r30, 0x9B	; 155
    4fb6:	f8 49       	sbci	r31, 0x98	; 152
    4fb8:	30 81       	ld	r19, Z
    4fba:	33 23       	and	r19, r19
    4fbc:	f1 f0       	breq	.+60     	; 0x4ffa <ep40_lin_signal_update_while_task+0x34a>
            {
                g_lin_signal_cnt[i].cnt--;
    4fbe:	fc 01       	movw	r30, r24
    4fc0:	ee 0f       	add	r30, r30
    4fc2:	ff 1f       	adc	r31, r31
    4fc4:	8e 0f       	add	r24, r30
    4fc6:	9f 1f       	adc	r25, r31
    4fc8:	fc 01       	movw	r30, r24
    4fca:	eb 59       	subi	r30, 0x9B	; 155
    4fcc:	f8 49       	sbci	r31, 0x98	; 152
    4fce:	31 50       	subi	r19, 0x01	; 1
    4fd0:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Voltage_errorCode(g_lin_signal_cnt[i].val);
    4fd2:	81 81       	ldd	r24, Z+1	; 0x01
    4fd4:	88 23       	and	r24, r24
    4fd6:	31 f0       	breq	.+12     	; 0x4fe4 <ep40_lin_signal_update_while_task+0x334>
    4fd8:	e8 ed       	ldi	r30, 0xD8	; 216
    4fda:	f0 e6       	ldi	r31, 0x60	; 96
    4fdc:	82 85       	ldd	r24, Z+10	; 0x0a
    4fde:	81 60       	ori	r24, 0x01	; 1
    4fe0:	82 87       	std	Z+10, r24	; 0x0a
    4fe2:	05 c0       	rjmp	.+10     	; 0x4fee <ep40_lin_signal_update_while_task+0x33e>
    4fe4:	e8 ed       	ldi	r30, 0xD8	; 216
    4fe6:	f0 e6       	ldi	r31, 0x60	; 96
    4fe8:	82 85       	ldd	r24, Z+10	; 0x0a
    4fea:	8e 7f       	andi	r24, 0xFE	; 254
    4fec:	82 87       	std	Z+10, r24	; 0x0a
    4fee:	e5 ed       	ldi	r30, 0xD5	; 213
    4ff0:	f0 e6       	ldi	r31, 0x60	; 96
    4ff2:	81 81       	ldd	r24, Z+1	; 0x01
    4ff4:	8f 77       	andi	r24, 0x7F	; 127
    4ff6:	81 83       	std	Z+1, r24	; 0x01
    4ff8:	74 c0       	rjmp	.+232    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Voltage_errorCode(0);
    4ffa:	e8 ed       	ldi	r30, 0xD8	; 216
    4ffc:	f0 e6       	ldi	r31, 0x60	; 96
    4ffe:	82 85       	ldd	r24, Z+10	; 0x0a
    5000:	8e 7f       	andi	r24, 0xFE	; 254
    5002:	82 87       	std	Z+10, r24	; 0x0a
    5004:	e5 ed       	ldi	r30, 0xD5	; 213
    5006:	f0 e6       	ldi	r31, 0x60	; 96
    5008:	81 81       	ldd	r24, Z+1	; 0x01
    500a:	8f 77       	andi	r24, 0x7F	; 127
    500c:	81 83       	std	Z+1, r24	; 0x01
    500e:	69 c0       	rjmp	.+210    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Capsense_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
    5010:	82 2f       	mov	r24, r18
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	fc 01       	movw	r30, r24
    5016:	ee 0f       	add	r30, r30
    5018:	ff 1f       	adc	r31, r31
    501a:	e8 0f       	add	r30, r24
    501c:	f9 1f       	adc	r31, r25
    501e:	eb 59       	subi	r30, 0x9B	; 155
    5020:	f8 49       	sbci	r31, 0x98	; 152
    5022:	30 81       	ld	r19, Z
    5024:	33 23       	and	r19, r19
    5026:	f1 f0       	breq	.+60     	; 0x5064 <ep40_lin_signal_update_while_task+0x3b4>
            {
                g_lin_signal_cnt[i].cnt--;
    5028:	fc 01       	movw	r30, r24
    502a:	ee 0f       	add	r30, r30
    502c:	ff 1f       	adc	r31, r31
    502e:	8e 0f       	add	r24, r30
    5030:	9f 1f       	adc	r25, r31
    5032:	fc 01       	movw	r30, r24
    5034:	eb 59       	subi	r30, 0x9B	; 155
    5036:	f8 49       	sbci	r31, 0x98	; 152
    5038:	31 50       	subi	r19, 0x01	; 1
    503a:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Capsense_errorCode(g_lin_signal_cnt[i].val);
    503c:	81 81       	ldd	r24, Z+1	; 0x01
    503e:	88 23       	and	r24, r24
    5040:	31 f0       	breq	.+12     	; 0x504e <ep40_lin_signal_update_while_task+0x39e>
    5042:	e8 ed       	ldi	r30, 0xD8	; 216
    5044:	f0 e6       	ldi	r31, 0x60	; 96
    5046:	82 85       	ldd	r24, Z+10	; 0x0a
    5048:	82 60       	ori	r24, 0x02	; 2
    504a:	82 87       	std	Z+10, r24	; 0x0a
    504c:	05 c0       	rjmp	.+10     	; 0x5058 <ep40_lin_signal_update_while_task+0x3a8>
    504e:	e8 ed       	ldi	r30, 0xD8	; 216
    5050:	f0 e6       	ldi	r31, 0x60	; 96
    5052:	82 85       	ldd	r24, Z+10	; 0x0a
    5054:	8d 7f       	andi	r24, 0xFD	; 253
    5056:	82 87       	std	Z+10, r24	; 0x0a
    5058:	e5 ed       	ldi	r30, 0xD5	; 213
    505a:	f0 e6       	ldi	r31, 0x60	; 96
    505c:	82 81       	ldd	r24, Z+2	; 0x02
    505e:	8e 7f       	andi	r24, 0xFE	; 254
    5060:	82 83       	std	Z+2, r24	; 0x02
    5062:	3f c0       	rjmp	.+126    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Capsense_errorCode(0);
    5064:	e8 ed       	ldi	r30, 0xD8	; 216
    5066:	f0 e6       	ldi	r31, 0x60	; 96
    5068:	82 85       	ldd	r24, Z+10	; 0x0a
    506a:	8d 7f       	andi	r24, 0xFD	; 253
    506c:	82 87       	std	Z+10, r24	; 0x0a
    506e:	e5 ed       	ldi	r30, 0xD5	; 213
    5070:	f0 e6       	ldi	r31, 0x60	; 96
    5072:	82 81       	ldd	r24, Z+2	; 0x02
    5074:	8e 7f       	andi	r24, 0xFE	; 254
    5076:	82 83       	std	Z+2, r24	; 0x02
    5078:	34 c0       	rjmp	.+104    	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            break;

        case LI0_DFGLS_Motor_errorCode:
            if (g_lin_signal_cnt[i].cnt > 0)
    507a:	82 2f       	mov	r24, r18
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	fc 01       	movw	r30, r24
    5080:	ee 0f       	add	r30, r30
    5082:	ff 1f       	adc	r31, r31
    5084:	e8 0f       	add	r30, r24
    5086:	f9 1f       	adc	r31, r25
    5088:	eb 59       	subi	r30, 0x9B	; 155
    508a:	f8 49       	sbci	r31, 0x98	; 152
    508c:	30 81       	ld	r19, Z
    508e:	33 23       	and	r19, r19
    5090:	f1 f0       	breq	.+60     	; 0x50ce <ep40_lin_signal_update_while_task+0x41e>
            {
                g_lin_signal_cnt[i].cnt--;
    5092:	fc 01       	movw	r30, r24
    5094:	ee 0f       	add	r30, r30
    5096:	ff 1f       	adc	r31, r31
    5098:	8e 0f       	add	r24, r30
    509a:	9f 1f       	adc	r25, r31
    509c:	fc 01       	movw	r30, r24
    509e:	eb 59       	subi	r30, 0x9B	; 155
    50a0:	f8 49       	sbci	r31, 0x98	; 152
    50a2:	31 50       	subi	r19, 0x01	; 1
    50a4:	30 83       	st	Z, r19
                l_bool_wr_LI0_DFGLS_Motor_errorCode(g_lin_signal_cnt[i].val);
    50a6:	81 81       	ldd	r24, Z+1	; 0x01
    50a8:	88 23       	and	r24, r24
    50aa:	31 f0       	breq	.+12     	; 0x50b8 <ep40_lin_signal_update_while_task+0x408>
    50ac:	e8 ed       	ldi	r30, 0xD8	; 216
    50ae:	f0 e6       	ldi	r31, 0x60	; 96
    50b0:	82 85       	ldd	r24, Z+10	; 0x0a
    50b2:	84 60       	ori	r24, 0x04	; 4
    50b4:	82 87       	std	Z+10, r24	; 0x0a
    50b6:	05 c0       	rjmp	.+10     	; 0x50c2 <ep40_lin_signal_update_while_task+0x412>
    50b8:	e8 ed       	ldi	r30, 0xD8	; 216
    50ba:	f0 e6       	ldi	r31, 0x60	; 96
    50bc:	82 85       	ldd	r24, Z+10	; 0x0a
    50be:	8b 7f       	andi	r24, 0xFB	; 251
    50c0:	82 87       	std	Z+10, r24	; 0x0a
    50c2:	e5 ed       	ldi	r30, 0xD5	; 213
    50c4:	f0 e6       	ldi	r31, 0x60	; 96
    50c6:	82 81       	ldd	r24, Z+2	; 0x02
    50c8:	8d 7f       	andi	r24, 0xFD	; 253
    50ca:	82 83       	std	Z+2, r24	; 0x02
    50cc:	0a c0       	rjmp	.+20     	; 0x50e2 <ep40_lin_signal_update_while_task+0x432>
            }
            else
            {
                l_bool_wr_LI0_DFGLS_Motor_errorCode(0);
    50ce:	e8 ed       	ldi	r30, 0xD8	; 216
    50d0:	f0 e6       	ldi	r31, 0x60	; 96
    50d2:	82 85       	ldd	r24, Z+10	; 0x0a
    50d4:	8b 7f       	andi	r24, 0xFB	; 251
    50d6:	82 87       	std	Z+10, r24	; 0x0a
    50d8:	e5 ed       	ldi	r30, 0xD5	; 213
    50da:	f0 e6       	ldi	r31, 0x60	; 96
    50dc:	82 81       	ldd	r24, Z+2	; 0x02
    50de:	8d 7f       	andi	r24, 0xFD	; 253
    50e0:	82 83       	std	Z+2, r24	; 0x02

lin_signal_cnt_t g_lin_signal_cnt[LIN_NUM_OF_SIGS];

void ep40_lin_signal_update_while_task(void)
{
    for (uint8_t i = 0; i < LIN_NUM_OF_SIGS; i++)
    50e2:	2f 5f       	subi	r18, 0xFF	; 255
    50e4:	2e 30       	cpi	r18, 0x0E	; 14
    50e6:	08 f4       	brcc	.+2      	; 0x50ea <ep40_lin_signal_update_while_task+0x43a>
    50e8:	e5 cd       	rjmp	.-1078   	; 0x4cb4 <ep40_lin_signal_update_while_task+0x4>

        default:
            break;
        }
    }
}
    50ea:	08 95       	ret

000050ec <lin_signal_send_x_times>:

void lin_signal_send_x_times(l_signal_handle signal_handle, uint8_t cnt, uint8_t val)
{
    g_lin_signal_cnt[signal_handle].cnt = cnt;
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	fc 01       	movw	r30, r24
    50f0:	ee 0f       	add	r30, r30
    50f2:	ff 1f       	adc	r31, r31
    50f4:	8e 0f       	add	r24, r30
    50f6:	9f 1f       	adc	r25, r31
    50f8:	fc 01       	movw	r30, r24
    50fa:	eb 59       	subi	r30, 0x9B	; 155
    50fc:	f8 49       	sbci	r31, 0x98	; 152
    50fe:	60 83       	st	Z, r22
    g_lin_signal_cnt[signal_handle].val = val;
    5100:	41 83       	std	Z+1, r20	; 0x01
    5102:	08 95       	ret

00005104 <window_lock_signal_cb>:
    window_lock_task();
}

void window_lock_signal_cb(void)
{
    lin_signal_send_x_times(LI0_DFGLS_ControlWindowLockSw, 3, 1);
    5104:	41 e0       	ldi	r20, 0x01	; 1
    5106:	63 e0       	ldi	r22, 0x03	; 3
    5108:	86 e0       	ldi	r24, 0x06	; 6
    510a:	0e 94 76 28 	call	0x50ec	; 0x50ec <lin_signal_send_x_times>
    510e:	08 95       	ret

00005110 <left_window_signal_out_cb>:
}

/* 左边窗提升信号输出回调函数 */
void left_window_signal_out_cb(uint8_t signal)
{
    uint8_t rear_status = g_btn_rear.status;
    5110:	90 91 a7 60 	lds	r25, 0x60A7	; 0x8060a7 <g_btn_rear>

    if (rear_status == 0)
    5114:	91 11       	cpse	r25, r1
    5116:	06 c0       	rjmp	.+12     	; 0x5124 <left_window_signal_out_cb+0x14>
    {
        lin_signal_send_x_times(LI0_DFGLS_FLWindowControl, 3, signal);
    5118:	48 2f       	mov	r20, r24
    511a:	63 e0       	ldi	r22, 0x03	; 3
    511c:	84 e0       	ldi	r24, 0x04	; 4
    511e:	0e 94 76 28 	call	0x50ec	; 0x50ec <lin_signal_send_x_times>
    5122:	08 95       	ret
    }
    else
    {
        lin_signal_send_x_times(LI0_DFGLS_RLWindowControl, 3, signal);
    5124:	48 2f       	mov	r20, r24
    5126:	63 e0       	ldi	r22, 0x03	; 3
    5128:	88 e0       	ldi	r24, 0x08	; 8
    512a:	0e 94 76 28 	call	0x50ec	; 0x50ec <lin_signal_send_x_times>
    512e:	08 95       	ret

00005130 <right_window_signal_out_cb>:
}

/* 右边窗提升信号输出回调函数 */
void right_window_signal_out_cb(uint8_t signal)
{
    uint8_t rear_status = g_btn_rear.status;
    5130:	90 91 a7 60 	lds	r25, 0x60A7	; 0x8060a7 <g_btn_rear>

    if (rear_status == 0)
    5134:	91 11       	cpse	r25, r1
    5136:	06 c0       	rjmp	.+12     	; 0x5144 <right_window_signal_out_cb+0x14>
    {
        lin_signal_send_x_times(LI0_DFGLS_FRWindowControl, 3, signal);
    5138:	48 2f       	mov	r20, r24
    513a:	63 e0       	ldi	r22, 0x03	; 3
    513c:	85 e0       	ldi	r24, 0x05	; 5
    513e:	0e 94 76 28 	call	0x50ec	; 0x50ec <lin_signal_send_x_times>
    5142:	08 95       	ret
    }
    else
    {
        lin_signal_send_x_times(LI0_DFGLS_RRWindowControl, 3, signal);
    5144:	48 2f       	mov	r20, r24
    5146:	63 e0       	ldi	r22, 0x03	; 3
    5148:	89 e0       	ldi	r24, 0x09	; 9
    514a:	0e 94 76 28 	call	0x50ec	; 0x50ec <lin_signal_send_x_times>
    514e:	08 95       	ret

00005150 <window_obj_var_clear>:
    g_lin_signal_cnt[signal_handle].cnt = cnt;
    g_lin_signal_cnt[signal_handle].val = val;
}

void window_obj_var_clear(window_obj_t *handle)
{
    5150:	fc 01       	movw	r30, r24
    handle->status = 0;
    5152:	10 82       	st	Z, r1
    handle->ticks = 0;
    5154:	11 82       	std	Z+1, r1	; 0x01
    5156:	12 82       	std	Z+2, r1	; 0x02
    handle->btn_a_status_last = 0;
    5158:	13 82       	std	Z+3, r1	; 0x03
    handle->btn_a_status = 0;
    515a:	14 82       	std	Z+4, r1	; 0x04
    handle->btn_b_status_last = 0;
    515c:	15 82       	std	Z+5, r1	; 0x05
    handle->btn_b_status = 0;
    515e:	16 82       	std	Z+6, r1	; 0x06
    handle->slide_status_last = 0;
    5160:	17 82       	std	Z+7, r1	; 0x07
    handle->slide_status = 0;
    5162:	10 86       	std	Z+8, r1	; 0x08
    handle->slide_pos_first = 0;
    5164:	11 86       	std	Z+9, r1	; 0x09
    handle->slide_pos = 0;
    5166:	12 86       	std	Z+10, r1	; 0x0a
    handle->window.status = 0;
    5168:	13 86       	std	Z+11, r1	; 0x0b
    handle->window.long_flg = 0;
    516a:	14 86       	std	Z+12, r1	; 0x0c
    handle->window.btn_b_cap_trig_flg = 0;
    516c:	15 86       	std	Z+13, r1	; 0x0d
    handle->window.btn_a_cap_trig_flg = 0;
    516e:	16 86       	std	Z+14, r1	; 0x0e
    handle->window.slide_1_to_2_flg = 0;
    5170:	17 86       	std	Z+15, r1	; 0x0f
    handle->window.slide_2_to_1_flg = 0;
    5172:	10 8a       	std	Z+16, r1	; 0x10
    handle->window.btn_a_status = 0;
    5174:	11 8a       	std	Z+17, r1	; 0x11
    handle->window.btn_b_status = 0;
    5176:	12 8a       	std	Z+18, r1	; 0x12
    handle->window.slide_status = 0;
    5178:	13 8a       	std	Z+19, r1	; 0x13
    handle->window.signal = 0;
    517a:	14 8a       	std	Z+20, r1	; 0x14
    517c:	08 95       	ret

0000517e <soft_timer_window_task>:
    }
}

/* 窗提升滑条按键软件定时器任务 */
void soft_timer_window_task(void)
{
    517e:	cf 93       	push	r28
    5180:	df 93       	push	r29
    window_obj_t *window_obj_ptr = &g_left_window_obj;
    window_t *window_ptr = &g_left_window_obj.window;
    static uint8_t rear_status_last = 0;
    static uint8_t rear_status = 0;

    rear_status_last = rear_status;
    5182:	90 91 20 64 	lds	r25, 0x6420	; 0x806420 <rear_status.6473>
    5186:	90 93 1f 64 	sts	0x641F, r25	; 0x80641f <rear_status_last.6472>
    rear_status = g_btn_rear.status;
    518a:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <g_btn_rear>
    518e:	80 93 20 64 	sts	0x6420, r24	; 0x806420 <rear_status.6473>

    /*************************************LEFT************************************************/

    if (rear_status_last != rear_status)
    5192:	98 17       	cp	r25, r24
    5194:	21 f0       	breq	.+8      	; 0x519e <soft_timer_window_task+0x20>
    {
        window_obj_var_clear(window_obj_ptr);
    5196:	87 e8       	ldi	r24, 0x87	; 135
    5198:	90 e6       	ldi	r25, 0x60	; 96
    519a:	0e 94 a8 28 	call	0x5150	; 0x5150 <window_obj_var_clear>
    }

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
    519e:	c7 e8       	ldi	r28, 0x87	; 135
    51a0:	d0 e6       	ldi	r29, 0x60	; 96
    51a2:	8c 81       	ldd	r24, Y+4	; 0x04
    51a4:	8b 83       	std	Y+3, r24	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(5) & 0x80;
    51a6:	85 e0       	ldi	r24, 0x05	; 5
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <get_sensor_state>
    51ae:	80 78       	andi	r24, 0x80	; 128
    51b0:	8c 83       	std	Y+4, r24	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
    51b2:	8e 81       	ldd	r24, Y+6	; 0x06
    51b4:	8d 83       	std	Y+5, r24	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(4) & 0x80;
    51b6:	84 e0       	ldi	r24, 0x04	; 4
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <get_sensor_state>
    51be:	80 78       	andi	r24, 0x80	; 128
    51c0:	8e 83       	std	Y+6, r24	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
    51c2:	9c 81       	ldd	r25, Y+4	; 0x04
    51c4:	99 8b       	std	Y+17, r25	; 0x11
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
    51c6:	8a 8b       	std	Y+18, r24	; 0x12

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
    51c8:	99 23       	and	r25, r25
    51ca:	41 f0       	breq	.+16     	; 0x51dc <soft_timer_window_task+0x5e>
    51cc:	20 91 8a 60 	lds	r18, 0x608A	; 0x80608a <g_left_window_obj+0x3>
    51d0:	21 11       	cpse	r18, r1
    51d2:	04 c0       	rjmp	.+8      	; 0x51dc <soft_timer_window_task+0x5e>
    {
        window_obj_ptr->ticks = 0;
    51d4:	19 82       	std	Y+1, r1	; 0x01
    51d6:	1a 82       	std	Y+2, r1	; 0x02
        window_obj_ptr->status = 2;
    51d8:	22 e0       	ldi	r18, 0x02	; 2
    51da:	28 83       	st	Y, r18
    }

    if (window_obj_ptr->status == 2)
    51dc:	20 91 87 60 	lds	r18, 0x6087	; 0x806087 <g_left_window_obj>
    51e0:	22 30       	cpi	r18, 0x02	; 2
    51e2:	c1 f4       	brne	.+48     	; 0x5214 <soft_timer_window_task+0x96>
    {
        window_obj_ptr->ticks++;
    51e4:	e7 e8       	ldi	r30, 0x87	; 135
    51e6:	f0 e6       	ldi	r31, 0x60	; 96
    51e8:	21 81       	ldd	r18, Z+1	; 0x01
    51ea:	32 81       	ldd	r19, Z+2	; 0x02
    51ec:	2f 5f       	subi	r18, 0xFF	; 255
    51ee:	3f 4f       	sbci	r19, 0xFF	; 255
    51f0:	21 83       	std	Z+1, r18	; 0x01
    51f2:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    51f4:	41 e0       	ldi	r20, 0x01	; 1
    51f6:	44 87       	std	Z+12, r20	; 0x0c
        window_ptr->btn_a_cap_trig_flg = 1;
    51f8:	46 87       	std	Z+14, r20	; 0x0e
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    51fa:	2f 30       	cpi	r18, 0x0F	; 15
    51fc:	31 05       	cpc	r19, r1
    51fe:	10 f0       	brcs	.+4      	; 0x5204 <soft_timer_window_task+0x86>
        {
            window_obj_ptr->status = 0;
    5200:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_a_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_a_status == 0)
    5204:	91 11       	cpse	r25, r1
    5206:	06 c0       	rjmp	.+12     	; 0x5214 <soft_timer_window_task+0x96>
        {
            window_obj_ptr->status = 0;
    5208:	e7 e8       	ldi	r30, 0x87	; 135
    520a:	f0 e6       	ldi	r31, 0x60	; 96
    520c:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    520e:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_a_cap_trig_flg = 1;
    5210:	91 e0       	ldi	r25, 0x01	; 1
    5212:	96 87       	std	Z+14, r25	; 0x0e
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
    5214:	88 23       	and	r24, r24
    5216:	51 f0       	breq	.+20     	; 0x522c <soft_timer_window_task+0xae>
    5218:	90 91 8c 60 	lds	r25, 0x608C	; 0x80608c <g_left_window_obj+0x5>
    521c:	91 11       	cpse	r25, r1
    521e:	06 c0       	rjmp	.+12     	; 0x522c <soft_timer_window_task+0xae>
    {
        window_obj_ptr->ticks = 0;
    5220:	e7 e8       	ldi	r30, 0x87	; 135
    5222:	f0 e6       	ldi	r31, 0x60	; 96
    5224:	11 82       	std	Z+1, r1	; 0x01
    5226:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
    5228:	93 e0       	ldi	r25, 0x03	; 3
    522a:	90 83       	st	Z, r25
    }

    if (window_obj_ptr->status == 3)
    522c:	90 91 87 60 	lds	r25, 0x6087	; 0x806087 <g_left_window_obj>
    5230:	93 30       	cpi	r25, 0x03	; 3
    5232:	c1 f4       	brne	.+48     	; 0x5264 <soft_timer_window_task+0xe6>
    {
        window_obj_ptr->ticks++;
    5234:	e7 e8       	ldi	r30, 0x87	; 135
    5236:	f0 e6       	ldi	r31, 0x60	; 96
    5238:	21 81       	ldd	r18, Z+1	; 0x01
    523a:	32 81       	ldd	r19, Z+2	; 0x02
    523c:	2f 5f       	subi	r18, 0xFF	; 255
    523e:	3f 4f       	sbci	r19, 0xFF	; 255
    5240:	21 83       	std	Z+1, r18	; 0x01
    5242:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    5244:	91 e0       	ldi	r25, 0x01	; 1
    5246:	94 87       	std	Z+12, r25	; 0x0c
        window_ptr->btn_b_cap_trig_flg = 1;
    5248:	95 87       	std	Z+13, r25	; 0x0d
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    524a:	2f 30       	cpi	r18, 0x0F	; 15
    524c:	31 05       	cpc	r19, r1
    524e:	10 f0       	brcs	.+4      	; 0x5254 <soft_timer_window_task+0xd6>
        {
            window_obj_ptr->status = 0;
    5250:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_b_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_b_status == 0)
    5254:	81 11       	cpse	r24, r1
    5256:	06 c0       	rjmp	.+12     	; 0x5264 <soft_timer_window_task+0xe6>
        {
            window_obj_ptr->status = 0;
    5258:	e7 e8       	ldi	r30, 0x87	; 135
    525a:	f0 e6       	ldi	r31, 0x60	; 96
    525c:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    525e:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_b_cap_trig_flg = 1;
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	85 87       	std	Z+13, r24	; 0x0d
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
    5264:	c7 e8       	ldi	r28, 0x87	; 135
    5266:	d0 e6       	ldi	r29, 0x60	; 96
    5268:	88 85       	ldd	r24, Y+8	; 0x08
    526a:	8f 83       	std	Y+7, r24	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(1);
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <get_scroller_state>
    5274:	88 87       	std	Y+8, r24	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
    5276:	8b 8b       	std	Y+19, r24	; 0x13

    window_obj_ptr->slide_pos = get_scroller_position(1);
    5278:	81 e0       	ldi	r24, 0x01	; 1
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	0e 94 6d 4e 	call	0x9cda	; 0x9cda <get_scroller_position>
    5280:	8a 87       	std	Y+10, r24	; 0x0a

    if (window_obj_ptr->status == 0)
    5282:	98 81       	ld	r25, Y
    5284:	91 11       	cpse	r25, r1
    5286:	0f c0       	rjmp	.+30     	; 0x52a6 <soft_timer_window_task+0x128>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
    5288:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <g_left_window_obj+0x8>
    528c:	99 23       	and	r25, r25
    528e:	09 f4       	brne	.+2      	; 0x5292 <soft_timer_window_task+0x114>
    5290:	66 c0       	rjmp	.+204    	; 0x535e <soft_timer_window_task+0x1e0>
    5292:	90 91 8e 60 	lds	r25, 0x608E	; 0x80608e <g_left_window_obj+0x7>
    5296:	91 11       	cpse	r25, r1
    5298:	62 c0       	rjmp	.+196    	; 0x535e <soft_timer_window_task+0x1e0>
        {
            window_obj_ptr->ticks = 0;
    529a:	19 82       	std	Y+1, r1	; 0x01
    529c:	1a 82       	std	Y+2, r1	; 0x02
            window_obj_ptr->status = 4;
    529e:	94 e0       	ldi	r25, 0x04	; 4
    52a0:	98 83       	st	Y, r25
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
    52a2:	89 87       	std	Y+9, r24	; 0x09
    52a4:	5c c0       	rjmp	.+184    	; 0x535e <soft_timer_window_task+0x1e0>
        }
    }
    else if (window_obj_ptr->status == 4)
    52a6:	94 30       	cpi	r25, 0x04	; 4
    52a8:	09 f0       	breq	.+2      	; 0x52ac <soft_timer_window_task+0x12e>
    52aa:	51 c0       	rjmp	.+162    	; 0x534e <soft_timer_window_task+0x1d0>
    {
        if (window_obj_ptr->slide_status == 0)
    52ac:	90 91 8f 60 	lds	r25, 0x608F	; 0x80608f <g_left_window_obj+0x8>
    52b0:	91 11       	cpse	r25, r1
    52b2:	19 c0       	rjmp	.+50     	; 0x52e6 <soft_timer_window_task+0x168>
        {
            window_obj_ptr->status = 0;
    52b4:	e7 e8       	ldi	r30, 0x87	; 135
    52b6:	f0 e6       	ldi	r31, 0x60	; 96
    52b8:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
    52ba:	91 85       	ldd	r25, Z+9	; 0x09
    52bc:	94 36       	cpi	r25, 0x64	; 100
    52be:	38 f4       	brcc	.+14     	; 0x52ce <soft_timer_window_task+0x150>
            {
                if (window_obj_ptr->slide_pos > 150)
    52c0:	87 39       	cpi	r24, 0x97	; 151
    52c2:	08 f4       	brcc	.+2      	; 0x52c6 <soft_timer_window_task+0x148>
    52c4:	4c c0       	rjmp	.+152    	; 0x535e <soft_timer_window_task+0x1e0>
                {
                    window_ptr->long_flg = 0;
    52c6:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_1_to_2_flg = 1;
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	87 87       	std	Z+15, r24	; 0x0f
    52cc:	48 c0       	rjmp	.+144    	; 0x535e <soft_timer_window_task+0x1e0>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
    52ce:	97 39       	cpi	r25, 0x97	; 151
    52d0:	08 f4       	brcc	.+2      	; 0x52d4 <soft_timer_window_task+0x156>
    52d2:	45 c0       	rjmp	.+138    	; 0x535e <soft_timer_window_task+0x1e0>
            {
                if (window_obj_ptr->slide_pos < 100)
    52d4:	84 36       	cpi	r24, 0x64	; 100
    52d6:	08 f0       	brcs	.+2      	; 0x52da <soft_timer_window_task+0x15c>
    52d8:	42 c0       	rjmp	.+132    	; 0x535e <soft_timer_window_task+0x1e0>
                {
                    window_ptr->long_flg = 0;
    52da:	e7 e8       	ldi	r30, 0x87	; 135
    52dc:	f0 e6       	ldi	r31, 0x60	; 96
    52de:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_2_to_1_flg = 1;
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	80 8b       	std	Z+16, r24	; 0x10
    52e4:	3c c0       	rjmp	.+120    	; 0x535e <soft_timer_window_task+0x1e0>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
    52e6:	e7 e8       	ldi	r30, 0x87	; 135
    52e8:	f0 e6       	ldi	r31, 0x60	; 96
    52ea:	21 81       	ldd	r18, Z+1	; 0x01
    52ec:	32 81       	ldd	r19, Z+2	; 0x02
    52ee:	2f 5f       	subi	r18, 0xFF	; 255
    52f0:	3f 4f       	sbci	r19, 0xFF	; 255
    52f2:	21 83       	std	Z+1, r18	; 0x01
    52f4:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
    52f6:	99 23       	and	r25, r25
    52f8:	91 f1       	breq	.+100    	; 0x535e <soft_timer_window_task+0x1e0>
            {
                if (window_obj_ptr->slide_pos_first < 100)
    52fa:	90 91 90 60 	lds	r25, 0x6090	; 0x806090 <g_left_window_obj+0x9>
    52fe:	94 36       	cpi	r25, 0x64	; 100
    5300:	88 f4       	brcc	.+34     	; 0x5324 <soft_timer_window_task+0x1a6>
                {
                    if (window_obj_ptr->slide_pos > 150)
    5302:	87 39       	cpi	r24, 0x97	; 151
    5304:	60 f1       	brcs	.+88     	; 0x535e <soft_timer_window_task+0x1e0>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    5306:	2f 30       	cpi	r18, 0x0F	; 15
    5308:	31 05       	cpc	r19, r1
    530a:	30 f0       	brcs	.+12     	; 0x5318 <soft_timer_window_task+0x19a>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	87 87       	std	Z+15, r24	; 0x0f
                            window_obj_ptr->status = 5;
    5310:	95 e0       	ldi	r25, 0x05	; 5
    5312:	90 83       	st	Z, r25
                            window_ptr->long_flg = 1;
    5314:	84 87       	std	Z+12, r24	; 0x0c
    5316:	23 c0       	rjmp	.+70     	; 0x535e <soft_timer_window_task+0x1e0>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    5318:	e7 e8       	ldi	r30, 0x87	; 135
    531a:	f0 e6       	ldi	r31, 0x60	; 96
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	87 87       	std	Z+15, r24	; 0x0f
                            window_ptr->long_flg = 1;
    5320:	84 87       	std	Z+12, r24	; 0x0c
    5322:	1d c0       	rjmp	.+58     	; 0x535e <soft_timer_window_task+0x1e0>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
    5324:	97 39       	cpi	r25, 0x97	; 151
    5326:	d8 f0       	brcs	.+54     	; 0x535e <soft_timer_window_task+0x1e0>
                {
                    if (window_obj_ptr->slide_pos < 100)
    5328:	84 36       	cpi	r24, 0x64	; 100
    532a:	c8 f4       	brcc	.+50     	; 0x535e <soft_timer_window_task+0x1e0>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    532c:	2f 30       	cpi	r18, 0x0F	; 15
    532e:	31 05       	cpc	r19, r1
    5330:	40 f0       	brcs	.+16     	; 0x5342 <soft_timer_window_task+0x1c4>
                        {
                            window_obj_ptr->status = 5;
    5332:	e7 e8       	ldi	r30, 0x87	; 135
    5334:	f0 e6       	ldi	r31, 0x60	; 96
    5336:	85 e0       	ldi	r24, 0x05	; 5
    5338:	80 83       	st	Z, r24
                            window_ptr->long_flg = 1;
    533a:	81 e0       	ldi	r24, 0x01	; 1
    533c:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    533e:	80 8b       	std	Z+16, r24	; 0x10
    5340:	0e c0       	rjmp	.+28     	; 0x535e <soft_timer_window_task+0x1e0>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
    5342:	e7 e8       	ldi	r30, 0x87	; 135
    5344:	f0 e6       	ldi	r31, 0x60	; 96
    5346:	81 e0       	ldi	r24, 0x01	; 1
    5348:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    534a:	80 8b       	std	Z+16, r24	; 0x10
    534c:	08 c0       	rjmp	.+16     	; 0x535e <soft_timer_window_task+0x1e0>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
    534e:	95 30       	cpi	r25, 0x05	; 5
    5350:	31 f4       	brne	.+12     	; 0x535e <soft_timer_window_task+0x1e0>
    {
        if (window_obj_ptr->slide_status == 0)
    5352:	80 91 8f 60 	lds	r24, 0x608F	; 0x80608f <g_left_window_obj+0x8>
    5356:	81 11       	cpse	r24, r1
    5358:	02 c0       	rjmp	.+4      	; 0x535e <soft_timer_window_task+0x1e0>
        {
            window_obj_ptr->status = 0;
    535a:	10 92 87 60 	sts	0x6087, r1	; 0x806087 <g_left_window_obj>
        }
    }
    window_task(window_ptr);
    535e:	82 e9       	ldi	r24, 0x92	; 146
    5360:	90 e6       	ldi	r25, 0x60	; 96
    5362:	0e 94 0e 2b 	call	0x561c	; 0x561c <window_task>

    /*************************************RIGHT************************************************/
    window_obj_ptr = &g_right_window_obj;
    window_ptr = &g_right_window_obj.window;
    if (rear_status_last != rear_status)
    5366:	90 91 1f 64 	lds	r25, 0x641F	; 0x80641f <rear_status_last.6472>
    536a:	80 91 20 64 	lds	r24, 0x6420	; 0x806420 <rear_status.6473>
    536e:	98 17       	cp	r25, r24
    5370:	21 f0       	breq	.+8      	; 0x537a <soft_timer_window_task+0x1fc>
    {
        window_obj_var_clear(window_obj_ptr);
    5372:	80 e7       	ldi	r24, 0x70	; 112
    5374:	90 e6       	ldi	r25, 0x60	; 96
    5376:	0e 94 a8 28 	call	0x5150	; 0x5150 <window_obj_var_clear>
    }

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
    537a:	c0 e7       	ldi	r28, 0x70	; 112
    537c:	d0 e6       	ldi	r29, 0x60	; 96
    537e:	8c 81       	ldd	r24, Y+4	; 0x04
    5380:	8b 83       	std	Y+3, r24	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(2) & 0x80;
    5382:	82 e0       	ldi	r24, 0x02	; 2
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <get_sensor_state>
    538a:	80 78       	andi	r24, 0x80	; 128
    538c:	8c 83       	std	Y+4, r24	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
    538e:	8e 81       	ldd	r24, Y+6	; 0x06
    5390:	8d 83       	std	Y+5, r24	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(1) & 0x80;
    5392:	81 e0       	ldi	r24, 0x01	; 1
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	0e 94 4c 4e 	call	0x9c98	; 0x9c98 <get_sensor_state>
    539a:	80 78       	andi	r24, 0x80	; 128
    539c:	8e 83       	std	Y+6, r24	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
    539e:	9c 81       	ldd	r25, Y+4	; 0x04
    53a0:	99 8b       	std	Y+17, r25	; 0x11
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
    53a2:	8a 8b       	std	Y+18, r24	; 0x12

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
    53a4:	99 23       	and	r25, r25
    53a6:	41 f0       	breq	.+16     	; 0x53b8 <soft_timer_window_task+0x23a>
    53a8:	20 91 73 60 	lds	r18, 0x6073	; 0x806073 <g_right_window_obj+0x3>
    53ac:	21 11       	cpse	r18, r1
    53ae:	04 c0       	rjmp	.+8      	; 0x53b8 <soft_timer_window_task+0x23a>
    {
        window_obj_ptr->ticks = 0;
    53b0:	19 82       	std	Y+1, r1	; 0x01
    53b2:	1a 82       	std	Y+2, r1	; 0x02
        window_obj_ptr->status = 2;
    53b4:	22 e0       	ldi	r18, 0x02	; 2
    53b6:	28 83       	st	Y, r18
    }

    if (window_obj_ptr->status == 2)
    53b8:	20 91 70 60 	lds	r18, 0x6070	; 0x806070 <g_right_window_obj>
    53bc:	22 30       	cpi	r18, 0x02	; 2
    53be:	c1 f4       	brne	.+48     	; 0x53f0 <soft_timer_window_task+0x272>
    {
        window_obj_ptr->ticks++;
    53c0:	e0 e7       	ldi	r30, 0x70	; 112
    53c2:	f0 e6       	ldi	r31, 0x60	; 96
    53c4:	21 81       	ldd	r18, Z+1	; 0x01
    53c6:	32 81       	ldd	r19, Z+2	; 0x02
    53c8:	2f 5f       	subi	r18, 0xFF	; 255
    53ca:	3f 4f       	sbci	r19, 0xFF	; 255
    53cc:	21 83       	std	Z+1, r18	; 0x01
    53ce:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    53d0:	41 e0       	ldi	r20, 0x01	; 1
    53d2:	44 87       	std	Z+12, r20	; 0x0c
        window_ptr->btn_a_cap_trig_flg = 1;
    53d4:	46 87       	std	Z+14, r20	; 0x0e
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    53d6:	2f 30       	cpi	r18, 0x0F	; 15
    53d8:	31 05       	cpc	r19, r1
    53da:	10 f0       	brcs	.+4      	; 0x53e0 <soft_timer_window_task+0x262>
        {
            window_obj_ptr->status = 0;
    53dc:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_a_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_a_status == 0)
    53e0:	91 11       	cpse	r25, r1
    53e2:	06 c0       	rjmp	.+12     	; 0x53f0 <soft_timer_window_task+0x272>
        {
            window_obj_ptr->status = 0;
    53e4:	e0 e7       	ldi	r30, 0x70	; 112
    53e6:	f0 e6       	ldi	r31, 0x60	; 96
    53e8:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    53ea:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_a_cap_trig_flg = 1;
    53ec:	91 e0       	ldi	r25, 0x01	; 1
    53ee:	96 87       	std	Z+14, r25	; 0x0e
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
    53f0:	88 23       	and	r24, r24
    53f2:	51 f0       	breq	.+20     	; 0x5408 <soft_timer_window_task+0x28a>
    53f4:	90 91 75 60 	lds	r25, 0x6075	; 0x806075 <g_right_window_obj+0x5>
    53f8:	91 11       	cpse	r25, r1
    53fa:	06 c0       	rjmp	.+12     	; 0x5408 <soft_timer_window_task+0x28a>
    {
        window_obj_ptr->ticks = 0;
    53fc:	e0 e7       	ldi	r30, 0x70	; 112
    53fe:	f0 e6       	ldi	r31, 0x60	; 96
    5400:	11 82       	std	Z+1, r1	; 0x01
    5402:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
    5404:	93 e0       	ldi	r25, 0x03	; 3
    5406:	90 83       	st	Z, r25
    }

    if (window_obj_ptr->status == 3)
    5408:	90 91 70 60 	lds	r25, 0x6070	; 0x806070 <g_right_window_obj>
    540c:	93 30       	cpi	r25, 0x03	; 3
    540e:	c1 f4       	brne	.+48     	; 0x5440 <soft_timer_window_task+0x2c2>
    {
        window_obj_ptr->ticks++;
    5410:	e0 e7       	ldi	r30, 0x70	; 112
    5412:	f0 e6       	ldi	r31, 0x60	; 96
    5414:	21 81       	ldd	r18, Z+1	; 0x01
    5416:	32 81       	ldd	r19, Z+2	; 0x02
    5418:	2f 5f       	subi	r18, 0xFF	; 255
    541a:	3f 4f       	sbci	r19, 0xFF	; 255
    541c:	21 83       	std	Z+1, r18	; 0x01
    541e:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    5420:	91 e0       	ldi	r25, 0x01	; 1
    5422:	94 87       	std	Z+12, r25	; 0x0c
        window_ptr->btn_b_cap_trig_flg = 1;
    5424:	95 87       	std	Z+13, r25	; 0x0d
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    5426:	2f 30       	cpi	r18, 0x0F	; 15
    5428:	31 05       	cpc	r19, r1
    542a:	10 f0       	brcs	.+4      	; 0x5430 <soft_timer_window_task+0x2b2>
        {
            window_obj_ptr->status = 0;
    542c:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
            window_ptr->long_flg = 1;
            window_ptr->btn_b_cap_trig_flg = 1;
        }
        if (window_obj_ptr->btn_b_status == 0)
    5430:	81 11       	cpse	r24, r1
    5432:	06 c0       	rjmp	.+12     	; 0x5440 <soft_timer_window_task+0x2c2>
        {
            window_obj_ptr->status = 0;
    5434:	e0 e7       	ldi	r30, 0x70	; 112
    5436:	f0 e6       	ldi	r31, 0x60	; 96
    5438:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    543a:	14 86       	std	Z+12, r1	; 0x0c
            window_ptr->btn_b_cap_trig_flg = 1;
    543c:	81 e0       	ldi	r24, 0x01	; 1
    543e:	85 87       	std	Z+13, r24	; 0x0d
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
    5440:	c0 e7       	ldi	r28, 0x70	; 112
    5442:	d0 e6       	ldi	r29, 0x60	; 96
    5444:	88 85       	ldd	r24, Y+8	; 0x08
    5446:	8f 83       	std	Y+7, r24	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(0);
    5448:	80 e0       	ldi	r24, 0x00	; 0
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	0e 94 5b 4e 	call	0x9cb6	; 0x9cb6 <get_scroller_state>
    5450:	88 87       	std	Y+8, r24	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
    5452:	8b 8b       	std	Y+19, r24	; 0x13

    window_obj_ptr->slide_pos = get_scroller_position(0);
    5454:	80 e0       	ldi	r24, 0x00	; 0
    5456:	90 e0       	ldi	r25, 0x00	; 0
    5458:	0e 94 6d 4e 	call	0x9cda	; 0x9cda <get_scroller_position>
    545c:	8a 87       	std	Y+10, r24	; 0x0a

    if (window_obj_ptr->status == 0)
    545e:	98 81       	ld	r25, Y
    5460:	91 11       	cpse	r25, r1
    5462:	0f c0       	rjmp	.+30     	; 0x5482 <soft_timer_window_task+0x304>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
    5464:	90 91 78 60 	lds	r25, 0x6078	; 0x806078 <g_right_window_obj+0x8>
    5468:	99 23       	and	r25, r25
    546a:	09 f4       	brne	.+2      	; 0x546e <soft_timer_window_task+0x2f0>
    546c:	66 c0       	rjmp	.+204    	; 0x553a <soft_timer_window_task+0x3bc>
    546e:	90 91 77 60 	lds	r25, 0x6077	; 0x806077 <g_right_window_obj+0x7>
    5472:	91 11       	cpse	r25, r1
    5474:	62 c0       	rjmp	.+196    	; 0x553a <soft_timer_window_task+0x3bc>
        {
            window_obj_ptr->ticks = 0;
    5476:	19 82       	std	Y+1, r1	; 0x01
    5478:	1a 82       	std	Y+2, r1	; 0x02
            window_obj_ptr->status = 4;
    547a:	94 e0       	ldi	r25, 0x04	; 4
    547c:	98 83       	st	Y, r25
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
    547e:	89 87       	std	Y+9, r24	; 0x09
    5480:	5c c0       	rjmp	.+184    	; 0x553a <soft_timer_window_task+0x3bc>
        }
    }
    else if (window_obj_ptr->status == 4)
    5482:	94 30       	cpi	r25, 0x04	; 4
    5484:	09 f0       	breq	.+2      	; 0x5488 <soft_timer_window_task+0x30a>
    5486:	51 c0       	rjmp	.+162    	; 0x552a <soft_timer_window_task+0x3ac>
    {
        if (window_obj_ptr->slide_status == 0)
    5488:	90 91 78 60 	lds	r25, 0x6078	; 0x806078 <g_right_window_obj+0x8>
    548c:	91 11       	cpse	r25, r1
    548e:	19 c0       	rjmp	.+50     	; 0x54c2 <soft_timer_window_task+0x344>
        {
            window_obj_ptr->status = 0;
    5490:	e0 e7       	ldi	r30, 0x70	; 112
    5492:	f0 e6       	ldi	r31, 0x60	; 96
    5494:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
    5496:	91 85       	ldd	r25, Z+9	; 0x09
    5498:	94 36       	cpi	r25, 0x64	; 100
    549a:	38 f4       	brcc	.+14     	; 0x54aa <soft_timer_window_task+0x32c>
            {
                if (window_obj_ptr->slide_pos > 150)
    549c:	87 39       	cpi	r24, 0x97	; 151
    549e:	08 f4       	brcc	.+2      	; 0x54a2 <soft_timer_window_task+0x324>
    54a0:	4c c0       	rjmp	.+152    	; 0x553a <soft_timer_window_task+0x3bc>
                {
                    window_ptr->long_flg = 0;
    54a2:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_1_to_2_flg = 1;
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	87 87       	std	Z+15, r24	; 0x0f
    54a8:	48 c0       	rjmp	.+144    	; 0x553a <soft_timer_window_task+0x3bc>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
    54aa:	97 39       	cpi	r25, 0x97	; 151
    54ac:	08 f4       	brcc	.+2      	; 0x54b0 <soft_timer_window_task+0x332>
    54ae:	45 c0       	rjmp	.+138    	; 0x553a <soft_timer_window_task+0x3bc>
            {
                if (window_obj_ptr->slide_pos < 100)
    54b0:	84 36       	cpi	r24, 0x64	; 100
    54b2:	08 f0       	brcs	.+2      	; 0x54b6 <soft_timer_window_task+0x338>
    54b4:	42 c0       	rjmp	.+132    	; 0x553a <soft_timer_window_task+0x3bc>
                {
                    window_ptr->long_flg = 0;
    54b6:	e0 e7       	ldi	r30, 0x70	; 112
    54b8:	f0 e6       	ldi	r31, 0x60	; 96
    54ba:	14 86       	std	Z+12, r1	; 0x0c
                    window_ptr->slide_2_to_1_flg = 1;
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	80 8b       	std	Z+16, r24	; 0x10
    54c0:	3c c0       	rjmp	.+120    	; 0x553a <soft_timer_window_task+0x3bc>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
    54c2:	e0 e7       	ldi	r30, 0x70	; 112
    54c4:	f0 e6       	ldi	r31, 0x60	; 96
    54c6:	21 81       	ldd	r18, Z+1	; 0x01
    54c8:	32 81       	ldd	r19, Z+2	; 0x02
    54ca:	2f 5f       	subi	r18, 0xFF	; 255
    54cc:	3f 4f       	sbci	r19, 0xFF	; 255
    54ce:	21 83       	std	Z+1, r18	; 0x01
    54d0:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
    54d2:	99 23       	and	r25, r25
    54d4:	91 f1       	breq	.+100    	; 0x553a <soft_timer_window_task+0x3bc>
            {
                if (window_obj_ptr->slide_pos_first < 100)
    54d6:	90 91 79 60 	lds	r25, 0x6079	; 0x806079 <g_right_window_obj+0x9>
    54da:	94 36       	cpi	r25, 0x64	; 100
    54dc:	88 f4       	brcc	.+34     	; 0x5500 <soft_timer_window_task+0x382>
                {
                    if (window_obj_ptr->slide_pos > 150)
    54de:	87 39       	cpi	r24, 0x97	; 151
    54e0:	60 f1       	brcs	.+88     	; 0x553a <soft_timer_window_task+0x3bc>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    54e2:	2f 30       	cpi	r18, 0x0F	; 15
    54e4:	31 05       	cpc	r19, r1
    54e6:	30 f0       	brcs	.+12     	; 0x54f4 <soft_timer_window_task+0x376>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    54e8:	81 e0       	ldi	r24, 0x01	; 1
    54ea:	87 87       	std	Z+15, r24	; 0x0f
                            window_obj_ptr->status = 5;
    54ec:	95 e0       	ldi	r25, 0x05	; 5
    54ee:	90 83       	st	Z, r25
                            window_ptr->long_flg = 1;
    54f0:	84 87       	std	Z+12, r24	; 0x0c
    54f2:	23 c0       	rjmp	.+70     	; 0x553a <soft_timer_window_task+0x3bc>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    54f4:	e0 e7       	ldi	r30, 0x70	; 112
    54f6:	f0 e6       	ldi	r31, 0x60	; 96
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	87 87       	std	Z+15, r24	; 0x0f
                            window_ptr->long_flg = 1;
    54fc:	84 87       	std	Z+12, r24	; 0x0c
    54fe:	1d c0       	rjmp	.+58     	; 0x553a <soft_timer_window_task+0x3bc>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
    5500:	97 39       	cpi	r25, 0x97	; 151
    5502:	d8 f0       	brcs	.+54     	; 0x553a <soft_timer_window_task+0x3bc>
                {
                    if (window_obj_ptr->slide_pos < 100)
    5504:	84 36       	cpi	r24, 0x64	; 100
    5506:	c8 f4       	brcc	.+50     	; 0x553a <soft_timer_window_task+0x3bc>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    5508:	2f 30       	cpi	r18, 0x0F	; 15
    550a:	31 05       	cpc	r19, r1
    550c:	40 f0       	brcs	.+16     	; 0x551e <soft_timer_window_task+0x3a0>
                        {
                            window_obj_ptr->status = 5;
    550e:	e0 e7       	ldi	r30, 0x70	; 112
    5510:	f0 e6       	ldi	r31, 0x60	; 96
    5512:	85 e0       	ldi	r24, 0x05	; 5
    5514:	80 83       	st	Z, r24
                            window_ptr->long_flg = 1;
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    551a:	80 8b       	std	Z+16, r24	; 0x10
    551c:	0e c0       	rjmp	.+28     	; 0x553a <soft_timer_window_task+0x3bc>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
    551e:	e0 e7       	ldi	r30, 0x70	; 112
    5520:	f0 e6       	ldi	r31, 0x60	; 96
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	84 87       	std	Z+12, r24	; 0x0c
                            window_ptr->slide_2_to_1_flg = 1;
    5526:	80 8b       	std	Z+16, r24	; 0x10
    5528:	08 c0       	rjmp	.+16     	; 0x553a <soft_timer_window_task+0x3bc>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
    552a:	95 30       	cpi	r25, 0x05	; 5
    552c:	31 f4       	brne	.+12     	; 0x553a <soft_timer_window_task+0x3bc>
    {
        if (window_obj_ptr->slide_status == 0)
    552e:	80 91 78 60 	lds	r24, 0x6078	; 0x806078 <g_right_window_obj+0x8>
    5532:	81 11       	cpse	r24, r1
    5534:	02 c0       	rjmp	.+4      	; 0x553a <soft_timer_window_task+0x3bc>
        {
            window_obj_ptr->status = 0;
    5536:	10 92 70 60 	sts	0x6070, r1	; 0x806070 <g_right_window_obj>
        }
    }
    window_task(window_ptr);
    553a:	8b e7       	ldi	r24, 0x7B	; 123
    553c:	90 e6       	ldi	r25, 0x60	; 96
    553e:	0e 94 0e 2b 	call	0x561c	; 0x561c <window_task>
}
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	08 95       	ret

00005548 <btn_rear_tick_task>:
#include "atmel_start_pins.h"

void btn_rear_tick_task(void)
{
    btn_rear_t *btn_rear_ptr = &g_btn_rear;
    switch (btn_rear_ptr->status)
    5548:	80 91 a7 60 	lds	r24, 0x60A7	; 0x8060a7 <g_btn_rear>
    554c:	88 23       	and	r24, r24
    554e:	19 f0       	breq	.+6      	; 0x5556 <btn_rear_tick_task+0xe>
    5550:	81 30       	cpi	r24, 0x01	; 1
    5552:	d9 f0       	breq	.+54     	; 0x558a <btn_rear_tick_task+0x42>
    5554:	08 95       	ret
    {
    case 0:
        if (btn_rear_ptr->cap_trig_flg == 1)
    5556:	80 91 a8 60 	lds	r24, 0x60A8	; 0x8060a8 <g_btn_rear+0x1>
    555a:	81 30       	cpi	r24, 0x01	; 1
    555c:	09 f0       	breq	.+2      	; 0x5560 <btn_rear_tick_task+0x18>
    555e:	5d c0       	rjmp	.+186    	; 0x561a <btn_rear_tick_task+0xd2>
        {
            btn_rear_ptr->cap_trig_flg = 0;
    5560:	e7 ea       	ldi	r30, 0xA7	; 167
    5562:	f0 e6       	ldi	r31, 0x60	; 96
    5564:	11 82       	std	Z+1, r1	; 0x01
            if (btn_rear_ptr->press_trig_flg == 1)
    5566:	83 81       	ldd	r24, Z+3	; 0x03
    5568:	81 30       	cpi	r24, 0x01	; 1
    556a:	09 f0       	breq	.+2      	; 0x556e <btn_rear_tick_task+0x26>
    556c:	56 c0       	rjmp	.+172    	; 0x561a <btn_rear_tick_task+0xd2>
            {
                btn_rear_ptr->press_trig_flg = 0;
    556e:	13 82       	std	Z+3, r1	; 0x03

                btn_rear_ptr->status = 1;
    5570:	80 83       	st	Z, r24
                btn_rear_ptr->ticks = 0;
    5572:	14 82       	std	Z+4, r1	; 0x04
    5574:	15 82       	std	Z+5, r1	; 0x05
    5576:	16 82       	std	Z+6, r1	; 0x06
    5578:	17 82       	std	Z+7, r1	; 0x07
                if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
    557a:	00 84       	ldd	r0, Z+8	; 0x08
    557c:	f1 85       	ldd	r31, Z+9	; 0x09
    557e:	e0 2d       	mov	r30, r0
    5580:	30 97       	sbiw	r30, 0x00	; 0
    5582:	09 f4       	brne	.+2      	; 0x5586 <btn_rear_tick_task+0x3e>
    5584:	4a c0       	rjmp	.+148    	; 0x561a <btn_rear_tick_task+0xd2>
                {
                    btn_rear_ptr->rear_led_ctrl_cb(1);
    5586:	09 95       	icall
    5588:	08 95       	ret
                }
            }
        }
        break;
    case 1:
        if (btn_rear_ptr->all_cap_status == 1)
    558a:	80 91 a9 60 	lds	r24, 0x60A9	; 0x8060a9 <g_btn_rear+0x2>
    558e:	81 30       	cpi	r24, 0x01	; 1
    5590:	49 f4       	brne	.+18     	; 0x55a4 <btn_rear_tick_task+0x5c>
        {
            btn_rear_ptr->ticks = 0;
    5592:	10 92 ab 60 	sts	0x60AB, r1	; 0x8060ab <g_btn_rear+0x4>
    5596:	10 92 ac 60 	sts	0x60AC, r1	; 0x8060ac <g_btn_rear+0x5>
    559a:	10 92 ad 60 	sts	0x60AD, r1	; 0x8060ad <g_btn_rear+0x6>
    559e:	10 92 ae 60 	sts	0x60AE, r1	; 0x8060ae <g_btn_rear+0x7>
    55a2:	0d c0       	rjmp	.+26     	; 0x55be <btn_rear_tick_task+0x76>
        }
        else
        {
            btn_rear_ptr->ticks++;
    55a4:	e7 ea       	ldi	r30, 0xA7	; 167
    55a6:	f0 e6       	ldi	r31, 0x60	; 96
    55a8:	84 81       	ldd	r24, Z+4	; 0x04
    55aa:	95 81       	ldd	r25, Z+5	; 0x05
    55ac:	a6 81       	ldd	r26, Z+6	; 0x06
    55ae:	b7 81       	ldd	r27, Z+7	; 0x07
    55b0:	01 96       	adiw	r24, 0x01	; 1
    55b2:	a1 1d       	adc	r26, r1
    55b4:	b1 1d       	adc	r27, r1
    55b6:	84 83       	std	Z+4, r24	; 0x04
    55b8:	95 83       	std	Z+5, r25	; 0x05
    55ba:	a6 83       	std	Z+6, r26	; 0x06
    55bc:	b7 83       	std	Z+7, r27	; 0x07
        }
        if (btn_rear_ptr->ticks >= ((uint32_t)TIMEOUT_REAR_UNIT_S * 1000 / ONE_TICK_UNIT_MS))
    55be:	80 91 ab 60 	lds	r24, 0x60AB	; 0x8060ab <g_btn_rear+0x4>
    55c2:	90 91 ac 60 	lds	r25, 0x60AC	; 0x8060ac <g_btn_rear+0x5>
    55c6:	a0 91 ad 60 	lds	r26, 0x60AD	; 0x8060ad <g_btn_rear+0x6>
    55ca:	b0 91 ae 60 	lds	r27, 0x60AE	; 0x8060ae <g_btn_rear+0x7>
    55ce:	88 3b       	cpi	r24, 0xB8	; 184
    55d0:	9b 40       	sbci	r25, 0x0B	; 11
    55d2:	a1 05       	cpc	r26, r1
    55d4:	b1 05       	cpc	r27, r1
    55d6:	70 f0       	brcs	.+28     	; 0x55f4 <btn_rear_tick_task+0xac>
        {
            btn_rear_ptr->ticks = 0;
    55d8:	e7 ea       	ldi	r30, 0xA7	; 167
    55da:	f0 e6       	ldi	r31, 0x60	; 96
    55dc:	14 82       	std	Z+4, r1	; 0x04
    55de:	15 82       	std	Z+5, r1	; 0x05
    55e0:	16 82       	std	Z+6, r1	; 0x06
    55e2:	17 82       	std	Z+7, r1	; 0x07

            btn_rear_ptr->status = 0;
    55e4:	10 82       	st	Z, r1
            if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
    55e6:	00 84       	ldd	r0, Z+8	; 0x08
    55e8:	f1 85       	ldd	r31, Z+9	; 0x09
    55ea:	e0 2d       	mov	r30, r0
    55ec:	30 97       	sbiw	r30, 0x00	; 0
    55ee:	11 f0       	breq	.+4      	; 0x55f4 <btn_rear_tick_task+0xac>
            {
                btn_rear_ptr->rear_led_ctrl_cb(0);
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	09 95       	icall
            }
        }
        if (btn_rear_ptr->cap_trig_flg == 1)
    55f4:	80 91 a8 60 	lds	r24, 0x60A8	; 0x8060a8 <g_btn_rear+0x1>
    55f8:	81 30       	cpi	r24, 0x01	; 1
    55fa:	79 f4       	brne	.+30     	; 0x561a <btn_rear_tick_task+0xd2>
        {
            btn_rear_ptr->cap_trig_flg = 0;
    55fc:	e7 ea       	ldi	r30, 0xA7	; 167
    55fe:	f0 e6       	ldi	r31, 0x60	; 96
    5600:	11 82       	std	Z+1, r1	; 0x01
            if (btn_rear_ptr->press_trig_flg == 1)
    5602:	83 81       	ldd	r24, Z+3	; 0x03
    5604:	81 30       	cpi	r24, 0x01	; 1
    5606:	49 f4       	brne	.+18     	; 0x561a <btn_rear_tick_task+0xd2>
            {
                btn_rear_ptr->press_trig_flg = 0;
    5608:	13 82       	std	Z+3, r1	; 0x03

                btn_rear_ptr->status = 0;
    560a:	10 82       	st	Z, r1
                if (btn_rear_ptr->rear_led_ctrl_cb != NULL)
    560c:	00 84       	ldd	r0, Z+8	; 0x08
    560e:	f1 85       	ldd	r31, Z+9	; 0x09
    5610:	e0 2d       	mov	r30, r0
    5612:	30 97       	sbiw	r30, 0x00	; 0
    5614:	11 f0       	breq	.+4      	; 0x561a <btn_rear_tick_task+0xd2>
                {
                    btn_rear_ptr->rear_led_ctrl_cb(0);
    5616:	80 e0       	ldi	r24, 0x00	; 0
    5618:	09 95       	icall
    561a:	08 95       	ret

0000561c <window_task>:
        break;
    }
}

void window_task(window_t *window_ptr)
{
    561c:	cf 93       	push	r28
    561e:	df 93       	push	r29
    5620:	ec 01       	movw	r28, r24
    switch (window_ptr->status)
    5622:	88 81       	ld	r24, Y
    5624:	81 30       	cpi	r24, 0x01	; 1
    5626:	09 f4       	brne	.+2      	; 0x562a <window_task+0xe>
    5628:	6c c0       	rjmp	.+216    	; 0x5702 <window_task+0xe6>
    562a:	20 f0       	brcs	.+8      	; 0x5634 <window_task+0x18>
    562c:	82 30       	cpi	r24, 0x02	; 2
    562e:	09 f4       	brne	.+2      	; 0x5632 <window_task+0x16>
    5630:	8d c0       	rjmp	.+282    	; 0x574c <window_task+0x130>
    5632:	9d c0       	rjmp	.+314    	; 0x576e <window_task+0x152>
    {
    case 0:
    {
        window_ptr->signal = SIGNAL_VAL_NO_REQUEST;
    5634:	19 86       	std	Y+9, r1	; 0x09
        if (window_ptr->btn_a_cap_trig_flg == 1)
    5636:	8b 81       	ldd	r24, Y+3	; 0x03
    5638:	81 30       	cpi	r24, 0x01	; 1
    563a:	b1 f4       	brne	.+44     	; 0x5668 <window_task+0x4c>
        {
            window_ptr->btn_a_cap_trig_flg = 0;
    563c:	1b 82       	std	Y+3, r1	; 0x03

            if (window_ptr->long_flg == 1)
    563e:	89 81       	ldd	r24, Y+1	; 0x01
    5640:	81 30       	cpi	r24, 0x01	; 1
    5642:	49 f4       	brne	.+18     	; 0x5656 <window_task+0x3a>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    5644:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    5646:	ea 85       	ldd	r30, Y+10	; 0x0a
    5648:	fb 85       	ldd	r31, Y+11	; 0x0b
    564a:	30 97       	sbiw	r30, 0x00	; 0
    564c:	09 f0       	breq	.+2      	; 0x5650 <window_task+0x34>
                {
                    window_ptr->cb(window_ptr->signal);
    564e:	09 95       	icall
                }
                window_ptr->status = 1;
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	88 83       	st	Y, r24
    5654:	8c c0       	rjmp	.+280    	; 0x576e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    5656:	83 e0       	ldi	r24, 0x03	; 3
    5658:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    565a:	ea 85       	ldd	r30, Y+10	; 0x0a
    565c:	fb 85       	ldd	r31, Y+11	; 0x0b
    565e:	30 97       	sbiw	r30, 0x00	; 0
    5660:	09 f4       	brne	.+2      	; 0x5664 <window_task+0x48>
    5662:	85 c0       	rjmp	.+266    	; 0x576e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    5664:	09 95       	icall
    5666:	83 c0       	rjmp	.+262    	; 0x576e <window_task+0x152>
                }
            }
        }
        else if (window_ptr->btn_b_cap_trig_flg == 1)
    5668:	8a 81       	ldd	r24, Y+2	; 0x02
    566a:	81 30       	cpi	r24, 0x01	; 1
    566c:	b9 f4       	brne	.+46     	; 0x569c <window_task+0x80>
        {
            window_ptr->btn_b_cap_trig_flg = 0;
    566e:	1a 82       	std	Y+2, r1	; 0x02

            if (window_ptr->long_flg == 1)
    5670:	89 81       	ldd	r24, Y+1	; 0x01
    5672:	81 30       	cpi	r24, 0x01	; 1
    5674:	51 f4       	brne	.+20     	; 0x568a <window_task+0x6e>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    5676:	82 e0       	ldi	r24, 0x02	; 2
    5678:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    567a:	ea 85       	ldd	r30, Y+10	; 0x0a
    567c:	fb 85       	ldd	r31, Y+11	; 0x0b
    567e:	30 97       	sbiw	r30, 0x00	; 0
    5680:	09 f0       	breq	.+2      	; 0x5684 <window_task+0x68>
                {
                    window_ptr->cb(window_ptr->signal);
    5682:	09 95       	icall
                }
                window_ptr->status = 1;
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	88 83       	st	Y, r24
    5688:	72 c0       	rjmp	.+228    	; 0x576e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    568a:	84 e0       	ldi	r24, 0x04	; 4
    568c:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    568e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5690:	fb 85       	ldd	r31, Y+11	; 0x0b
    5692:	30 97       	sbiw	r30, 0x00	; 0
    5694:	09 f4       	brne	.+2      	; 0x5698 <window_task+0x7c>
    5696:	6b c0       	rjmp	.+214    	; 0x576e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    5698:	09 95       	icall
    569a:	69 c0       	rjmp	.+210    	; 0x576e <window_task+0x152>
                }
            }
        }
        else if (window_ptr->slide_1_to_2_flg == 1)
    569c:	8c 81       	ldd	r24, Y+4	; 0x04
    569e:	81 30       	cpi	r24, 0x01	; 1
    56a0:	b1 f4       	brne	.+44     	; 0x56ce <window_task+0xb2>
        {
            window_ptr->slide_1_to_2_flg = 0;
    56a2:	1c 82       	std	Y+4, r1	; 0x04
            if (window_ptr->long_flg == 1)
    56a4:	89 81       	ldd	r24, Y+1	; 0x01
    56a6:	81 30       	cpi	r24, 0x01	; 1
    56a8:	49 f4       	brne	.+18     	; 0x56bc <window_task+0xa0>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    56aa:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    56ac:	ea 85       	ldd	r30, Y+10	; 0x0a
    56ae:	fb 85       	ldd	r31, Y+11	; 0x0b
    56b0:	30 97       	sbiw	r30, 0x00	; 0
    56b2:	09 f0       	breq	.+2      	; 0x56b6 <window_task+0x9a>
                {
                    window_ptr->cb(window_ptr->signal);
    56b4:	09 95       	icall
                }
                window_ptr->status = 2;
    56b6:	82 e0       	ldi	r24, 0x02	; 2
    56b8:	88 83       	st	Y, r24
    56ba:	59 c0       	rjmp	.+178    	; 0x576e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    56bc:	83 e0       	ldi	r24, 0x03	; 3
    56be:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    56c0:	ea 85       	ldd	r30, Y+10	; 0x0a
    56c2:	fb 85       	ldd	r31, Y+11	; 0x0b
    56c4:	30 97       	sbiw	r30, 0x00	; 0
    56c6:	09 f4       	brne	.+2      	; 0x56ca <window_task+0xae>
    56c8:	52 c0       	rjmp	.+164    	; 0x576e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    56ca:	09 95       	icall
    56cc:	50 c0       	rjmp	.+160    	; 0x576e <window_task+0x152>
                }
            }
        }
        else if (window_ptr->slide_2_to_1_flg == 1)
    56ce:	8d 81       	ldd	r24, Y+5	; 0x05
    56d0:	81 30       	cpi	r24, 0x01	; 1
    56d2:	09 f0       	breq	.+2      	; 0x56d6 <window_task+0xba>
    56d4:	4c c0       	rjmp	.+152    	; 0x576e <window_task+0x152>
        {
            window_ptr->slide_2_to_1_flg = 0;
    56d6:	1d 82       	std	Y+5, r1	; 0x05
            if (window_ptr->long_flg == 1)
    56d8:	89 81       	ldd	r24, Y+1	; 0x01
    56da:	81 30       	cpi	r24, 0x01	; 1
    56dc:	51 f4       	brne	.+20     	; 0x56f2 <window_task+0xd6>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    56de:	82 e0       	ldi	r24, 0x02	; 2
    56e0:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    56e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    56e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    56e6:	30 97       	sbiw	r30, 0x00	; 0
    56e8:	09 f0       	breq	.+2      	; 0x56ec <window_task+0xd0>
                {
                    window_ptr->cb(window_ptr->signal);
    56ea:	09 95       	icall
                }
                window_ptr->status = 2;
    56ec:	82 e0       	ldi	r24, 0x02	; 2
    56ee:	88 83       	st	Y, r24
    56f0:	3e c0       	rjmp	.+124    	; 0x576e <window_task+0x152>
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    56f2:	84 e0       	ldi	r24, 0x04	; 4
    56f4:	89 87       	std	Y+9, r24	; 0x09
                if (window_ptr->cb != NULL)
    56f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    56f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    56fa:	30 97       	sbiw	r30, 0x00	; 0
    56fc:	c1 f1       	breq	.+112    	; 0x576e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    56fe:	09 95       	icall
    5700:	36 c0       	rjmp	.+108    	; 0x576e <window_task+0x152>
        }
    }
    break;
    case 1:
    {
        if (window_ptr->signal == SIGNAL_VAL_MANUAL_DOWN)
    5702:	89 85       	ldd	r24, Y+9	; 0x09
    5704:	82 30       	cpi	r24, 0x02	; 2
    5706:	81 f4       	brne	.+32     	; 0x5728 <window_task+0x10c>
        {
            if (window_ptr->btn_b_status != 0)
    5708:	9f 81       	ldd	r25, Y+7	; 0x07
    570a:	99 23       	and	r25, r25
    570c:	31 f0       	breq	.+12     	; 0x571a <window_task+0xfe>
            {
                if (window_ptr->cb != NULL)
    570e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5710:	fb 85       	ldd	r31, Y+11	; 0x0b
    5712:	30 97       	sbiw	r30, 0x00	; 0
    5714:	61 f1       	breq	.+88     	; 0x576e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    5716:	09 95       	icall
    5718:	2a c0       	rjmp	.+84     	; 0x576e <window_task+0x152>
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    571a:	ea 85       	ldd	r30, Y+10	; 0x0a
    571c:	fb 85       	ldd	r31, Y+11	; 0x0b
    571e:	30 97       	sbiw	r30, 0x00	; 0
    5720:	09 f0       	breq	.+2      	; 0x5724 <window_task+0x108>
                {
                    window_ptr->cb(window_ptr->signal);
    5722:	09 95       	icall
                }
                window_ptr->status = 0;
    5724:	18 82       	st	Y, r1
    5726:	23 c0       	rjmp	.+70     	; 0x576e <window_task+0x152>
            }
        }
        else if (window_ptr->signal == SIGNAL_VAL_MANUAL_UP)
    5728:	81 30       	cpi	r24, 0x01	; 1
    572a:	09 f5       	brne	.+66     	; 0x576e <window_task+0x152>
        {
            if (window_ptr->btn_a_status != 0)
    572c:	9e 81       	ldd	r25, Y+6	; 0x06
    572e:	99 23       	and	r25, r25
    5730:	31 f0       	breq	.+12     	; 0x573e <window_task+0x122>
            {
                if (window_ptr->cb != NULL)
    5732:	ea 85       	ldd	r30, Y+10	; 0x0a
    5734:	fb 85       	ldd	r31, Y+11	; 0x0b
    5736:	30 97       	sbiw	r30, 0x00	; 0
    5738:	d1 f0       	breq	.+52     	; 0x576e <window_task+0x152>
                {
                    window_ptr->cb(window_ptr->signal);
    573a:	09 95       	icall
    573c:	18 c0       	rjmp	.+48     	; 0x576e <window_task+0x152>
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    573e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5740:	fb 85       	ldd	r31, Y+11	; 0x0b
    5742:	30 97       	sbiw	r30, 0x00	; 0
    5744:	09 f0       	breq	.+2      	; 0x5748 <window_task+0x12c>
                {
                    window_ptr->cb(window_ptr->signal);
    5746:	09 95       	icall
                }
                window_ptr->status = 0;
    5748:	18 82       	st	Y, r1
    574a:	11 c0       	rjmp	.+34     	; 0x576e <window_task+0x152>
        }
    }
    break;
    case 2:
    {
        if (window_ptr->slide_status != 0)
    574c:	88 85       	ldd	r24, Y+8	; 0x08
    574e:	88 23       	and	r24, r24
    5750:	39 f0       	breq	.+14     	; 0x5760 <window_task+0x144>
        {
            if (window_ptr->cb != NULL)
    5752:	ea 85       	ldd	r30, Y+10	; 0x0a
    5754:	fb 85       	ldd	r31, Y+11	; 0x0b
    5756:	30 97       	sbiw	r30, 0x00	; 0
    5758:	51 f0       	breq	.+20     	; 0x576e <window_task+0x152>
            {
                window_ptr->cb(window_ptr->signal);
    575a:	89 85       	ldd	r24, Y+9	; 0x09
    575c:	09 95       	icall
    575e:	07 c0       	rjmp	.+14     	; 0x576e <window_task+0x152>
            }
        }
        else
        {
            if (window_ptr->cb != NULL)
    5760:	ea 85       	ldd	r30, Y+10	; 0x0a
    5762:	fb 85       	ldd	r31, Y+11	; 0x0b
    5764:	30 97       	sbiw	r30, 0x00	; 0
    5766:	11 f0       	breq	.+4      	; 0x576c <window_task+0x150>
            {
                window_ptr->cb(window_ptr->signal);
    5768:	89 85       	ldd	r24, Y+9	; 0x09
    576a:	09 95       	icall
            }
            window_ptr->status = 0;
    576c:	18 82       	st	Y, r1
    }
    break;
    default:
        break;
    }
}
    576e:	df 91       	pop	r29
    5770:	cf 91       	pop	r28
    5772:	08 95       	ret

00005774 <window_lock_task>:
void window_lock_task(void)
{
    window_lock_t *window_lock_ptr = &g_window_lock;
    LIN_RX_signal_t *signal_ptr = &g_lin_rx_signal;

    if (window_lock_ptr->capsense_flg == 1)
    5774:	80 91 a1 60 	lds	r24, 0x60A1	; 0x8060a1 <g_window_lock>
    5778:	81 30       	cpi	r24, 0x01	; 1
    577a:	69 f4       	brne	.+26     	; 0x5796 <window_lock_task+0x22>
    {
        window_lock_ptr->capsense_flg = 0;
    577c:	e1 ea       	ldi	r30, 0xA1	; 161
    577e:	f0 e6       	ldi	r31, 0x60	; 96
    5780:	10 82       	st	Z, r1

        if (window_lock_ptr->press_flg == 1)
    5782:	81 81       	ldd	r24, Z+1	; 0x01
    5784:	81 30       	cpi	r24, 0x01	; 1
    5786:	39 f4       	brne	.+14     	; 0x5796 <window_lock_task+0x22>
        {
            window_lock_ptr->press_flg = 0;
    5788:	11 82       	std	Z+1, r1	; 0x01

            if (window_lock_ptr->signal_cb != NULL)
    578a:	04 80       	ldd	r0, Z+4	; 0x04
    578c:	f5 81       	ldd	r31, Z+5	; 0x05
    578e:	e0 2d       	mov	r30, r0
    5790:	30 97       	sbiw	r30, 0x00	; 0
    5792:	09 f0       	breq	.+2      	; 0x5796 <window_lock_task+0x22>
            {
                window_lock_ptr->signal_cb();
    5794:	09 95       	icall
            }
        }
    }

    if (window_lock_ptr->led_cb != NULL)
    5796:	e0 91 a3 60 	lds	r30, 0x60A3	; 0x8060a3 <g_window_lock+0x2>
    579a:	f0 91 a4 60 	lds	r31, 0x60A4	; 0x8060a4 <g_window_lock+0x3>
    579e:	30 97       	sbiw	r30, 0x00	; 0
    57a0:	29 f0       	breq	.+10     	; 0x57ac <window_lock_task+0x38>
    {
        window_lock_ptr->led_cb(signal_ptr->ctrl_window_lock);
    57a2:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    57a6:	82 95       	swap	r24
    57a8:	81 70       	andi	r24, 0x01	; 1
    57aa:	09 95       	icall
    57ac:	08 95       	ret

000057ae <backlight_task>:

    uint32_t tmp = 0;
    uint32_t night_gain = 0;
    uint32_t pwm_index = 0;

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
    57ae:	80 91 a0 60 	lds	r24, 0x60A0	; 0x8060a0 <g_lin_rx_signal>
    57b2:	85 ff       	sbrs	r24, 5
    57b4:	07 c0       	rjmp	.+14     	; 0x57c4 <backlight_task+0x16>
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
        pwm_index = signal_ptr->backlight_brightness;
    57b6:	8f 70       	andi	r24, 0x0F	; 15
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    uint32_t night_gain = 0;
    uint32_t pwm_index = 0;

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
    57ba:	22 e3       	ldi	r18, 0x32	; 50
    57bc:	30 e0       	ldi	r19, 0x00	; 0
    57be:	40 e0       	ldi	r20, 0x00	; 0
    57c0:	50 e0       	ldi	r21, 0x00	; 0
    57c2:	08 c0       	rjmp	.+16     	; 0x57d4 <backlight_task+0x26>
        pwm_index = signal_ptr->backlight_brightness;
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
        pwm_index = 9;
    57c4:	89 e0       	ldi	r24, 0x09	; 9
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	a0 e0       	ldi	r26, 0x00	; 0
    57ca:	b0 e0       	ldi	r27, 0x00	; 0
        night_gain = BACKLIGHT_NIGHT_GAIN;
        pwm_index = signal_ptr->backlight_brightness;
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
    57cc:	24 e6       	ldi	r18, 0x64	; 100
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	40 e0       	ldi	r20, 0x00	; 0
    57d2:	50 e0       	ldi	r21, 0x00	; 0
        pwm_index = 9;
    }

    tmp = g_level[pwm_index] * night_gain * DUTY_MAX / 10000;
    57d4:	88 0f       	add	r24, r24
    57d6:	99 1f       	adc	r25, r25
    57d8:	88 0f       	add	r24, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	fc 01       	movw	r30, r24
    57de:	e0 50       	subi	r30, 0x00	; 0
    57e0:	fd 49       	sbci	r31, 0x9D	; 157
    57e2:	60 81       	ld	r22, Z
    57e4:	71 81       	ldd	r23, Z+1	; 0x01
    57e6:	82 81       	ldd	r24, Z+2	; 0x02
    57e8:	93 81       	ldd	r25, Z+3	; 0x03
    57ea:	0e 94 d1 5e 	call	0xbda2	; 0xbda2 <__mulsi3>
    57ee:	9b 01       	movw	r18, r22
    57f0:	ac 01       	movw	r20, r24
    57f2:	aa e4       	ldi	r26, 0x4A	; 74
    57f4:	b0 e0       	ldi	r27, 0x00	; 0
    57f6:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    57fa:	20 e1       	ldi	r18, 0x10	; 16
    57fc:	37 e2       	ldi	r19, 0x27	; 39
    57fe:	40 e0       	ldi	r20, 0x00	; 0
    5800:	50 e0       	ldi	r21, 0x00	; 0
    5802:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <__udivmodsi4>

    if (g_backlight_cb != NULL)
    5806:	e0 91 9e 60 	lds	r30, 0x609E	; 0x80609e <g_backlight_cb>
    580a:	f0 91 9f 60 	lds	r31, 0x609F	; 0x80609f <g_backlight_cb+0x1>
    580e:	30 97       	sbiw	r30, 0x00	; 0
    5810:	19 f0       	breq	.+6      	; 0x5818 <backlight_task+0x6a>
    {
        g_backlight_cb(tmp);
    5812:	ca 01       	movw	r24, r20
    5814:	b9 01       	movw	r22, r18
    5816:	09 95       	icall
    5818:	08 95       	ret

0000581a <lin_go_to_sleep>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    581a:	81 b1       	in	r24, 0x01	; 1
    581c:	8e 7f       	andi	r24, 0xFE	; 254
    581e:	81 b9       	out	0x01, r24	; 1
{
    /* 使能脚设置低电平 */
    LIN_EN_set_level(0);

    /* 关闭usart模块 */
    Disable_global_interrupt();
    5820:	f8 94       	cli
    USART4.CTRLA &= ~(1 << USART_ABEIE_bp | 1 << USART_RXCIE_bp);
    5822:	e0 e8       	ldi	r30, 0x80	; 128
    5824:	f8 e0       	ldi	r31, 0x08	; 8
    5826:	85 81       	ldd	r24, Z+5	; 0x05
    5828:	8b 77       	andi	r24, 0x7B	; 123
    582a:	85 83       	std	Z+5, r24	; 0x05
    USART4.CTRLB &= ~(1 << USART_TXEN_bp | USART_RXMODE_LINAUTO_gc | 1 << USART_RXEN_bp);
    582c:	86 81       	ldd	r24, Z+6	; 0x06
    582e:	89 73       	andi	r24, 0x39	; 57
    5830:	86 83       	std	Z+6, r24	; 0x06
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    5832:	80 b3       	in	r24, 0x10	; 16
    5834:	81 60       	ori	r24, 0x01	; 1
    5836:	80 bb       	out	0x10, r24	; 16
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    5838:	81 b3       	in	r24, 0x11	; 17
    583a:	8e 7f       	andi	r24, 0xFE	; 254
    583c:	81 bb       	out	0x11, r24	; 17
    583e:	08 95       	ret

00005840 <HC595_Write>:
#define HC595_STCP_RST LED_CS_set_level(false)
#define HC595_SHCP_SET LED_MCLK_set_level(true)
#define HC595_SHCP_RST LED_MCLK_set_level(false)

void HC595_Write(uint8_t *dataPtr, uint8_t icNum, uint8_t bitLen)
{
    5840:	cf 93       	push	r28
    5842:	df 93       	push	r29
    5844:	00 d0       	rcall	.+0      	; 0x5846 <HC595_Write+0x6>
    5846:	cd b7       	in	r28, 0x3d	; 61
    5848:	de b7       	in	r29, 0x3e	; 62
    584a:	dc 01       	movw	r26, r24
    uint8_t _dataArr[HC595_NUM] = {0};
    584c:	19 82       	std	Y+1, r1	; 0x01
    584e:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    5850:	90 e0       	ldi	r25, 0x00	; 0
    5852:	12 c0       	rjmp	.+36     	; 0x5878 <HC595_Write+0x38>
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    5854:	e6 2f       	mov	r30, r22
    5856:	f0 e0       	ldi	r31, 0x00	; 0
    5858:	31 97       	sbiw	r30, 0x01	; 1
    585a:	29 2f       	mov	r18, r25
    585c:	30 e0       	ldi	r19, 0x00	; 0
    585e:	e2 1b       	sub	r30, r18
    5860:	f3 0b       	sbc	r31, r19
    5862:	ea 0f       	add	r30, r26
    5864:	fb 1f       	adc	r31, r27
    5866:	80 81       	ld	r24, Z
    5868:	e1 e0       	ldi	r30, 0x01	; 1
    586a:	f0 e0       	ldi	r31, 0x00	; 0
    586c:	ec 0f       	add	r30, r28
    586e:	fd 1f       	adc	r31, r29
    5870:	e2 0f       	add	r30, r18
    5872:	f3 1f       	adc	r31, r19
    5874:	80 83       	st	Z, r24
{
    uint8_t _dataArr[HC595_NUM] = {0};
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    5876:	9f 5f       	subi	r25, 0xFF	; 255
    5878:	96 17       	cp	r25, r22
    587a:	60 f3       	brcs	.-40     	; 0x5854 <HC595_Write+0x14>
    587c:	20 e0       	ldi	r18, 0x00	; 0
    587e:	28 c0       	rjmp	.+80     	; 0x58d0 <HC595_Write+0x90>

    for (uint8_t i = 0; i < bitLen; i++)
    {
        arrIdx = i / 8;
        bitIdx = i % 8;
        bitVal = _dataArr[arrIdx] & (0x01 << (7 - bitIdx));
    5880:	82 2f       	mov	r24, r18
    5882:	86 95       	lsr	r24
    5884:	86 95       	lsr	r24
    5886:	86 95       	lsr	r24
    5888:	e1 e0       	ldi	r30, 0x01	; 1
    588a:	f0 e0       	ldi	r31, 0x00	; 0
    588c:	ec 0f       	add	r30, r28
    588e:	fd 1f       	adc	r31, r29
    5890:	e8 0f       	add	r30, r24
    5892:	f1 1d       	adc	r31, r1
    5894:	30 81       	ld	r19, Z
    5896:	67 e0       	ldi	r22, 0x07	; 7
    5898:	70 e0       	ldi	r23, 0x00	; 0
    589a:	92 2f       	mov	r25, r18
    589c:	97 70       	andi	r25, 0x07	; 7
    589e:	69 1b       	sub	r22, r25
    58a0:	71 09       	sbc	r23, r1
    58a2:	81 e0       	ldi	r24, 0x01	; 1
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	02 c0       	rjmp	.+4      	; 0x58ac <HC595_Write+0x6c>
    58a8:	88 0f       	add	r24, r24
    58aa:	99 1f       	adc	r25, r25
    58ac:	6a 95       	dec	r22
    58ae:	e2 f7       	brpl	.-8      	; 0x58a8 <HC595_Write+0x68>
    58b0:	83 23       	and	r24, r19

        if (bitVal != 0)
    58b2:	21 f0       	breq	.+8      	; 0x58bc <HC595_Write+0x7c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    58b4:	81 b1       	in	r24, 0x01	; 1
    58b6:	88 60       	ori	r24, 0x08	; 8
    58b8:	81 b9       	out	0x01, r24	; 1
    58ba:	03 c0       	rjmp	.+6      	; 0x58c2 <HC595_Write+0x82>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    58bc:	81 b1       	in	r24, 0x01	; 1
    58be:	87 7f       	andi	r24, 0xF7	; 247
    58c0:	81 b9       	out	0x01, r24	; 1
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    58c2:	89 b1       	in	r24, 0x09	; 9
    58c4:	8f 77       	andi	r24, 0x7F	; 127
    58c6:	89 b9       	out	0x09, r24	; 9
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    58c8:	89 b1       	in	r24, 0x09	; 9
    58ca:	80 68       	ori	r24, 0x80	; 128
    58cc:	89 b9       	out	0x09, r24	; 9
    for (uint8_t i = 0; i < icNum; i++)
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    }

    for (uint8_t i = 0; i < bitLen; i++)
    58ce:	2f 5f       	subi	r18, 0xFF	; 255
    58d0:	24 17       	cp	r18, r20
    58d2:	b0 f2       	brcs	.-84     	; 0x5880 <HC595_Write+0x40>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    58d4:	81 b1       	in	r24, 0x01	; 1
    58d6:	8b 7f       	andi	r24, 0xFB	; 251
    58d8:	81 b9       	out	0x01, r24	; 1
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    58da:	81 b1       	in	r24, 0x01	; 1
    58dc:	84 60       	ori	r24, 0x04	; 4
    58de:	81 b9       	out	0x01, r24	; 1
        HC595_SHCP_RST;
        HC595_SHCP_SET;
    }
    HC595_STCP_RST;
    HC595_STCP_SET;
}
    58e0:	0f 90       	pop	r0
    58e2:	0f 90       	pop	r0
    58e4:	df 91       	pop	r29
    58e6:	cf 91       	pop	r28
    58e8:	08 95       	ret

000058ea <led_set_level>:

void led_set_level(led_Dx_e Dx, uint8_t level)
{
	uint8_t byte = 0;
	uint8_t bit = 0;
	byte = g_led_Dx[Dx].byte;
    58ea:	e8 2f       	mov	r30, r24
    58ec:	f0 e0       	ldi	r31, 0x00	; 0
    58ee:	ee 0f       	add	r30, r30
    58f0:	ff 1f       	adc	r31, r31
    58f2:	e8 5d       	subi	r30, 0xD8	; 216
    58f4:	fc 49       	sbci	r31, 0x9C	; 156
    58f6:	80 81       	ld	r24, Z
	bit = g_led_Dx[Dx].bit;
    58f8:	21 81       	ldd	r18, Z+1	; 0x01
	if (level == 1)
    58fa:	61 30       	cpi	r22, 0x01	; 1
    58fc:	99 f4       	brne	.+38     	; 0x5924 <led_set_level+0x3a>
	{
		bitSet(g_hc595_buffer[byte], bit);
    58fe:	e8 2f       	mov	r30, r24
    5900:	f0 e0       	ldi	r31, 0x00	; 0
    5902:	81 e0       	ldi	r24, 0x01	; 1
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	a0 e0       	ldi	r26, 0x00	; 0
    5908:	b0 e0       	ldi	r27, 0x00	; 0
    590a:	04 c0       	rjmp	.+8      	; 0x5914 <led_set_level+0x2a>
    590c:	88 0f       	add	r24, r24
    590e:	99 1f       	adc	r25, r25
    5910:	aa 1f       	adc	r26, r26
    5912:	bb 1f       	adc	r27, r27
    5914:	2a 95       	dec	r18
    5916:	d2 f7       	brpl	.-12     	; 0x590c <led_set_level+0x22>
    5918:	ef 54       	subi	r30, 0x4F	; 79
    591a:	ff 49       	sbci	r31, 0x9F	; 159
    591c:	20 81       	ld	r18, Z
    591e:	82 2b       	or	r24, r18
    5920:	80 83       	st	Z, r24
    5922:	08 95       	ret
	}
	else
	{
		bitClear(g_hc595_buffer[byte], bit);
    5924:	e8 2f       	mov	r30, r24
    5926:	f0 e0       	ldi	r31, 0x00	; 0
    5928:	81 e0       	ldi	r24, 0x01	; 1
    592a:	90 e0       	ldi	r25, 0x00	; 0
    592c:	a0 e0       	ldi	r26, 0x00	; 0
    592e:	b0 e0       	ldi	r27, 0x00	; 0
    5930:	04 c0       	rjmp	.+8      	; 0x593a <led_set_level+0x50>
    5932:	88 0f       	add	r24, r24
    5934:	99 1f       	adc	r25, r25
    5936:	aa 1f       	adc	r26, r26
    5938:	bb 1f       	adc	r27, r27
    593a:	2a 95       	dec	r18
    593c:	d2 f7       	brpl	.-12     	; 0x5932 <led_set_level+0x48>
    593e:	ef 54       	subi	r30, 0x4F	; 79
    5940:	ff 49       	sbci	r31, 0x9F	; 159
    5942:	80 95       	com	r24
    5944:	90 81       	ld	r25, Z
    5946:	89 23       	and	r24, r25
    5948:	80 83       	st	Z, r24
    594a:	08 95       	ret

0000594c <led_update_buf_task>:
	}
}

void led_update_buf_task(void)
{
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    594c:	40 e1       	ldi	r20, 0x10	; 16
    594e:	62 e0       	ldi	r22, 0x02	; 2
    5950:	81 eb       	ldi	r24, 0xB1	; 177
    5952:	90 e6       	ldi	r25, 0x60	; 96
    5954:	0e 94 20 2c 	call	0x5840	; 0x5840 <HC595_Write>
    5958:	08 95       	ret

0000595a <led_init>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    595a:	89 b1       	in	r24, 0x09	; 9
    595c:	8f 7b       	andi	r24, 0xBF	; 191
    595e:	89 b9       	out	0x09, r24	; 9
{
	/* 亮度控制，目前20KHz，最大0x4a,默认%45亮度 */
	// TCA0.SPLIT.HCMP0 = 33;

	LED_ON_N_set_level(0);
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    5960:	40 e1       	ldi	r20, 0x10	; 16
    5962:	62 e0       	ldi	r22, 0x02	; 2
    5964:	81 eb       	ldi	r24, 0xB1	; 177
    5966:	90 e6       	ldi	r25, 0x60	; 96
    5968:	0e 94 20 2c 	call	0x5840	; 0x5840 <HC595_Write>
    596c:	08 95       	ret

0000596e <main>:
 ********************* MAIN **********************
 ************************************************/
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    596e:	0e 94 be 24 	call	0x497c	; 0x497c <atmel_start_init>
	Enable_global_interrupt();
    5972:	78 94       	sei

	led_init();
    5974:	0e 94 ad 2c 	call	0x595a	; 0x595a <led_init>

	/* REAR按键软件定时器任务 */
	soft_timer_create(20, soft_timer_rear_btn_task);
    5978:	67 ee       	ldi	r22, 0xE7	; 231
    597a:	75 e2       	ldi	r23, 0x25	; 37
    597c:	84 e1       	ldi	r24, 0x14	; 20
    597e:	90 e0       	ldi	r25, 0x00	; 0
    5980:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <soft_timer_create>

	/* WINDOW LOCK按键软件定时器任务 */
	soft_timer_create(20, soft_timer_window_lock_task);
    5984:	6f e1       	ldi	r22, 0x1F	; 31
    5986:	76 e2       	ldi	r23, 0x26	; 38
    5988:	84 e1       	ldi	r24, 0x14	; 20
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <soft_timer_create>

	/* WINDOW 提升软件定时器任务 */
	soft_timer_create(20, soft_timer_window_task);
    5990:	6f eb       	ldi	r22, 0xBF	; 191
    5992:	78 e2       	ldi	r23, 0x28	; 40
    5994:	84 e1       	ldi	r24, 0x14	; 20
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <soft_timer_create>

	/* led灯光更新任务 */
	soft_timer_create(50, led_update_buf_task);
    599c:	66 ea       	ldi	r22, 0xA6	; 166
    599e:	7c e2       	ldi	r23, 0x2C	; 44
    59a0:	82 e3       	ldi	r24, 0x32	; 50
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <soft_timer_create>

	/* lin 接收信号变量更新任务 */
	soft_timer_create(10, soft_timer_lin_signal_update_task);
    59a8:	69 e3       	ldi	r22, 0x39	; 57
    59aa:	76 e2       	ldi	r23, 0x26	; 38
    59ac:	8a e0       	ldi	r24, 0x0A	; 10
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <soft_timer_create>

	/* 背光亮度控制更新任务 */
	soft_timer_create(100, backlight_task);
    59b4:	67 ed       	ldi	r22, 0xD7	; 215
    59b6:	7b e2       	ldi	r23, 0x2B	; 43
    59b8:	84 e6       	ldi	r24, 0x64	; 100
    59ba:	90 e0       	ldi	r25, 0x00	; 0
    59bc:	0e 94 a4 4e 	call	0x9d48	; 0x9d48 <soft_timer_create>

	l_sys_init();
    59c0:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <l_sys_init>
	l_ifc_init(LI0);
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	0e 94 04 2d 	call	0x5a08	; 0x5a08 <l_ifc_init>
	ld_init(LI0);
    59ca:	80 e0       	ldi	r24, 0x00	; 0
    59cc:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <ld_init>

	/* Replace with your application code */
	while (1)
	{
		soft_timer_run();
    59d0:	0e 94 c9 4e 	call	0x9d92	; 0x9d92 <soft_timer_run>
		touch_process();
    59d4:	0e 94 fe 4d 	call	0x9bfc	; 0x9bfc <touch_process>

		if (eeprom_set_boot_flg == 1)
    59d8:	80 91 2f 66 	lds	r24, 0x662F	; 0x80662f <eeprom_set_boot_flg>
    59dc:	81 30       	cpi	r24, 0x01	; 1
    59de:	c1 f7       	brne	.-16     	; 0x59d0 <main+0x62>
		{
			eeprom_set_boot_flg = 0;
    59e0:	10 92 2f 66 	sts	0x662F, r1	; 0x80662f <eeprom_set_boot_flg>
			FLASH_0_write_eeprom_byte(0x00, 0xaa);
    59e4:	6a ea       	ldi	r22, 0xAA	; 170
    59e6:	80 e0       	ldi	r24, 0x00	; 0
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	0e 94 36 50 	call	0xa06c	; 0xa06c <FLASH_0_write_eeprom_byte>
			while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    59ee:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f1002>
    59f2:	83 70       	andi	r24, 0x03	; 3
    59f4:	e1 f7       	brne	.-8      	; 0x59ee <main+0x80>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    59f6:	41 e0       	ldi	r20, 0x01	; 1
    59f8:	68 ed       	ldi	r22, 0xD8	; 216
    59fa:	81 e4       	ldi	r24, 0x41	; 65
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <protected_write_io>
    5a02:	e6 cf       	rjmp	.-52     	; 0x59d0 <main+0x62>

00005a04 <l_sys_init>:
 * Implements    : l_sys_init_Activity
 *END**************************************************************************/
l_bool l_sys_init(void)
{
    return (l_bool)0;
}
    5a04:	80 e0       	ldi	r24, 0x00	; 0
    5a06:	08 95       	ret

00005a08 <l_ifc_init>:
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    static l_u8 lin_schedule_start_entry[LIN_NUM_OF_SCHD_TBL];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    l_bool ret_val;
    prot_state_ptr->diagnostic_mode = DIAG_NONE;
    5a08:	96 e1       	ldi	r25, 0x16	; 22
    5a0a:	89 9f       	mul	r24, r25
    5a0c:	f0 01       	movw	r30, r0
    5a0e:	11 24       	eor	r1, r1
    5a10:	e9 53       	subi	r30, 0x39	; 57
    5a12:	f8 49       	sbci	r31, 0x98	; 152
    5a14:	10 8a       	std	Z+16, r1	; 0x10

    /* Call Low level initialization function */
    ret_val = lin_lld_init(iii);
    5a16:	0e 94 28 42 	call	0x8450	; 0x8450 <lin_lld_init>
        }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }

    return ret_val;
}
    5a1a:	08 95       	ret

00005a1c <lin_update_tx_flags>:
    l_u8 flag_size;
    l_u8 i;
    l_u8 associate_frame_offset;
    const lin_frame_t * lin_frame_ptr;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frm_id]);
    5a1c:	2c e1       	ldi	r18, 0x1C	; 28
    5a1e:	82 9f       	mul	r24, r18
    5a20:	c0 01       	movw	r24, r0
    5a22:	11 24       	eor	r1, r1
    5a24:	fc 01       	movw	r30, r24
    5a26:	e8 5b       	subi	r30, 0xB8	; 184
    5a28:	fc 49       	sbci	r31, 0x9C	; 156
    5a2a:	46 81       	ldd	r20, Z+6	; 0x06
    5a2c:	57 81       	ldd	r21, Z+7	; 0x07
    5a2e:	70 e0       	ldi	r23, 0x00	; 0
    5a30:	fb 01       	movw	r30, r22
    5a32:	ee 0f       	add	r30, r30
    5a34:	ff 1f       	adc	r31, r31
    5a36:	66 0f       	add	r22, r22
    5a38:	77 1f       	adc	r23, r23
    5a3a:	66 0f       	add	r22, r22
    5a3c:	77 1f       	adc	r23, r23
    5a3e:	66 0f       	add	r22, r22
    5a40:	77 1f       	adc	r23, r23
    5a42:	e6 0f       	add	r30, r22
    5a44:	f7 1f       	adc	r31, r23
    5a46:	e4 0f       	add	r30, r20
    5a48:	f5 1f       	adc	r31, r21

    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    5a4a:	80 81       	ld	r24, Z
    5a4c:	81 11       	cpse	r24, r1
    5a4e:	0e c0       	rjmp	.+28     	; 0x5a6c <lin_update_tx_flags+0x50>
    {
        flag_offset = lin_frame_ptr->flag_offset;
    5a50:	25 81       	ldd	r18, Z+5	; 0x05
    5a52:	36 81       	ldd	r19, Z+6	; 0x06
        flag_size = lin_frame_ptr->flag_size;
    5a54:	67 81       	ldd	r22, Z+7	; 0x07
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5a56:	08 c0       	rjmp	.+16     	; 0x5a68 <lin_update_tx_flags+0x4c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU; //在这里更新flag位，整字节更新
    5a58:	d9 01       	movw	r26, r18
    5a5a:	ab 52       	subi	r26, 0x2B	; 43
    5a5c:	bf 49       	sbci	r27, 0x9F	; 159
    5a5e:	9f ef       	ldi	r25, 0xFF	; 255
    5a60:	9c 93       	st	X, r25
            flag_offset++;
    5a62:	2f 5f       	subi	r18, 0xFF	; 255
    5a64:	3f 4f       	sbci	r19, 0xFF	; 255
    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    {
        flag_offset = lin_frame_ptr->flag_offset;
        flag_size = lin_frame_ptr->flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5a66:	8f 5f       	subi	r24, 0xFF	; 255
    5a68:	86 17       	cp	r24, r22
    5a6a:	b0 f3       	brcs	.-20     	; 0x5a58 <lin_update_tx_flags+0x3c>
            flag_offset++;
        }
    }

    /* check event trigger frame and clear flag */
    if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    5a6c:	80 81       	ld	r24, Z
    5a6e:	81 30       	cpi	r24, 0x01	; 1
    5a70:	29 f5       	brne	.+74     	; 0x5abc <lin_update_tx_flags+0xa0>
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    5a72:	00 84       	ldd	r0, Z+8	; 0x08
    5a74:	f1 85       	ldd	r31, Z+9	; 0x09
    5a76:	e0 2d       	mov	r30, r0
    5a78:	01 80       	ldd	r0, Z+1	; 0x01
    5a7a:	f2 81       	ldd	r31, Z+2	; 0x02
    5a7c:	e0 2d       	mov	r30, r0
    5a7e:	80 81       	ld	r24, Z
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	fc 01       	movw	r30, r24
    5a84:	ee 0f       	add	r30, r30
    5a86:	ff 1f       	adc	r31, r31
    5a88:	88 0f       	add	r24, r24
    5a8a:	99 1f       	adc	r25, r25
    5a8c:	88 0f       	add	r24, r24
    5a8e:	99 1f       	adc	r25, r25
    5a90:	88 0f       	add	r24, r24
    5a92:	99 1f       	adc	r25, r25
    5a94:	8e 0f       	add	r24, r30
    5a96:	9f 1f       	adc	r25, r31
    5a98:	fa 01       	movw	r30, r20
    5a9a:	e8 0f       	add	r30, r24
    5a9c:	f9 1f       	adc	r31, r25
    5a9e:	25 81       	ldd	r18, Z+5	; 0x05
    5aa0:	36 81       	ldd	r19, Z+6	; 0x06
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
    5aa2:	47 81       	ldd	r20, Z+7	; 0x07
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5aa4:	80 e0       	ldi	r24, 0x00	; 0
    5aa6:	08 c0       	rjmp	.+16     	; 0x5ab8 <lin_update_tx_flags+0x9c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    5aa8:	f9 01       	movw	r30, r18
    5aaa:	eb 52       	subi	r30, 0x2B	; 43
    5aac:	ff 49       	sbci	r31, 0x9F	; 159
    5aae:	9f ef       	ldi	r25, 0xFF	; 255
    5ab0:	90 83       	st	Z, r25
            flag_offset++;
    5ab2:	2f 5f       	subi	r18, 0xFF	; 255
    5ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    5ab6:	8f 5f       	subi	r24, 0xFF	; 255
    5ab8:	84 17       	cp	r24, r20
    5aba:	b0 f3       	brcs	.-20     	; 0x5aa8 <lin_update_tx_flags+0x8c>
    5abc:	08 95       	ret

00005abe <lin_bus_activity_timeout>:
 * Description   : This function set bus activity timeout
 *
 * Implements    : lin_bus_activity_timeout_Activity
 *END**************************************************************************/
static void lin_bus_activity_timeout(l_ifc_handle iii)
{
    5abe:	cf 93       	push	r28
    5ac0:	c8 2f       	mov	r28, r24
    /* Set goto sleep mode */
#if (1U == SUPPORT_SLAVE_MODE)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5ac2:	90 e0       	ldi	r25, 0x00	; 0

    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5ac4:	2c e1       	ldi	r18, 0x1C	; 28
    5ac6:	28 9f       	mul	r18, r24
    5ac8:	f0 01       	movw	r30, r0
    5aca:	29 9f       	mul	r18, r25
    5acc:	f0 0d       	add	r31, r0
    5ace:	11 24       	eor	r1, r1
    5ad0:	e8 5b       	subi	r30, 0xB8	; 184
    5ad2:	fc 49       	sbci	r31, 0x9C	; 156
    5ad4:	23 81       	ldd	r18, Z+3	; 0x03
    5ad6:	21 11       	cpse	r18, r1
    5ad8:	11 c0       	rjmp	.+34     	; 0x5afc <lin_bus_activity_timeout+0x3e>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    5ada:	2c e1       	ldi	r18, 0x1C	; 28
    5adc:	28 9f       	mul	r18, r24
    5ade:	f0 01       	movw	r30, r0
    5ae0:	29 9f       	mul	r18, r25
    5ae2:	f0 0d       	add	r31, r0
    5ae4:	11 24       	eor	r1, r1
    5ae6:	e8 5b       	subi	r30, 0xB8	; 184
    5ae8:	fc 49       	sbci	r31, 0x9C	; 156
    5aea:	80 81       	ld	r24, Z
    5aec:	88 23       	and	r24, r24
    5aee:	11 f0       	breq	.+4      	; 0x5af4 <lin_bus_activity_timeout+0x36>
    5af0:	83 30       	cpi	r24, 0x03	; 3
    5af2:	21 f4       	brne	.+8      	; 0x5afc <lin_bus_activity_timeout+0x3e>
        {
            lin_update_word_status_lin21(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT);
    5af4:	68 e0       	ldi	r22, 0x08	; 8
    5af6:	8c 2f       	mov	r24, r28
    5af8:	0e 94 34 32 	call	0x6468	; 0x6468 <lin_update_word_status_lin21>
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */

    /* Change to low power mode */
    (void)lin_lld_set_low_power_mode(iii);
    5afc:	8c 2f       	mov	r24, r28
    5afe:	0e 94 88 43 	call	0x8710	; 0x8710 <lin_lld_set_low_power_mode>
}
    5b02:	cf 91       	pop	r28
    5b04:	08 95       	ret

00005b06 <lin_get_frame_index>:
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5b06:	48 2f       	mov	r20, r24
    5b08:	50 e0       	ldi	r21, 0x00	; 0

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    5b0a:	8c e1       	ldi	r24, 0x1C	; 28
    5b0c:	84 9f       	mul	r24, r20
    5b0e:	f0 01       	movw	r30, r0
    5b10:	85 9f       	mul	r24, r21
    5b12:	f0 0d       	add	r31, r0
    5b14:	11 24       	eor	r1, r1
    5b16:	e8 5b       	subi	r30, 0xB8	; 184
    5b18:	fc 49       	sbci	r31, 0x9C	; 156
    5b1a:	94 81       	ldd	r25, Z+4	; 0x04
    5b1c:	1d c0       	rjmp	.+58     	; 0x5b58 <lin_get_frame_index+0x52>
    {
        if (prot_user_config_ptr->list_identifiers_RAM_ptr[i] == id)
    5b1e:	2c e1       	ldi	r18, 0x1C	; 28
    5b20:	24 9f       	mul	r18, r20
    5b22:	f0 01       	movw	r30, r0
    5b24:	25 9f       	mul	r18, r21
    5b26:	f0 0d       	add	r31, r0
    5b28:	11 24       	eor	r1, r1
    5b2a:	e8 5b       	subi	r30, 0xB8	; 184
    5b2c:	fc 49       	sbci	r31, 0x9C	; 156
    5b2e:	02 84       	ldd	r0, Z+10	; 0x0a
    5b30:	f3 85       	ldd	r31, Z+11	; 0x0b
    5b32:	e0 2d       	mov	r30, r0
    5b34:	e9 0f       	add	r30, r25
    5b36:	f1 1d       	adc	r31, r1
    5b38:	20 81       	ld	r18, Z
    5b3a:	26 13       	cpse	r18, r22
    5b3c:	0c c0       	rjmp	.+24     	; 0x5b56 <lin_get_frame_index+0x50>
        {
            retVal = (l_u8)(i + prot_user_config_ptr->frame_start - 1U);
    5b3e:	8c e1       	ldi	r24, 0x1C	; 28
    5b40:	84 9f       	mul	r24, r20
    5b42:	f0 01       	movw	r30, r0
    5b44:	85 9f       	mul	r24, r21
    5b46:	f0 0d       	add	r31, r0
    5b48:	11 24       	eor	r1, r1
    5b4a:	e8 5b       	subi	r30, 0xB8	; 184
    5b4c:	fc 49       	sbci	r31, 0x9C	; 156
    5b4e:	85 81       	ldd	r24, Z+5	; 0x05
    5b50:	89 0f       	add	r24, r25
    5b52:	81 50       	subi	r24, 0x01	; 1
            //找到一个就退出
            break;
    5b54:	08 95       	ret
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    5b56:	91 50       	subi	r25, 0x01	; 1
    5b58:	91 11       	cpse	r25, r1
    5b5a:	e1 cf       	rjmp	.-62     	; 0x5b1e <lin_get_frame_index+0x18>
 *END**************************************************************************/
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    5b5c:	8f ef       	ldi	r24, 0xFF	; 255
            break;
        }
    }

    return retVal;
}
    5b5e:	08 95       	ret

00005b60 <lin_update_tx>:
 *
 * Implements    : lin_update_tx_Activity
 *END**************************************************************************/
static void lin_update_tx(l_ifc_handle iii,
                          l_u8 id)
{
    5b60:	ef 92       	push	r14
    5b62:	ff 92       	push	r15
    5b64:	0f 93       	push	r16
    5b66:	1f 93       	push	r17
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	18 2f       	mov	r17, r24
    5b6e:	06 2f       	mov	r16, r22
    l_u8 frame_index; //index用来获取当前数据的号
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5b70:	c8 2f       	mov	r28, r24
    5b72:	d0 e0       	ldi	r29, 0x00	; 0
    l_u16* byte_offset_temp_ptr;
    const lin_node_attribute_t * node_attr_ptr;
#endif /*((1U == SUPPORT_PROTOCOL_J2602) && (1U == SUPPORT_SLAVE_MODE)) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    5b74:	86 e1       	ldi	r24, 0x16	; 22
    5b76:	8c 9f       	mul	r24, r28
    5b78:	f0 01       	movw	r30, r0
    5b7a:	8d 9f       	mul	r24, r29
    5b7c:	f0 0d       	add	r31, r0
    5b7e:	11 24       	eor	r1, r1
    5b80:	e9 53       	subi	r30, 0x39	; 57
    5b82:	f8 49       	sbci	r31, 0x98	; 152
    5b84:	81 e0       	ldi	r24, 0x01	; 1
    5b86:	85 83       	std	Z+5, r24	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    5b88:	82 85       	ldd	r24, Z+10	; 0x0a
    5b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    5b8c:	51 f0       	breq	.+20     	; 0x5ba2 <lin_update_tx+0x42>
    {
        prot_state_ptr->num_of_processed_frame++;
    5b8e:	96 e1       	ldi	r25, 0x16	; 22
    5b90:	9c 9f       	mul	r25, r28
    5b92:	f0 01       	movw	r30, r0
    5b94:	9d 9f       	mul	r25, r29
    5b96:	f0 0d       	add	r31, r0
    5b98:	11 24       	eor	r1, r1
    5b9a:	e9 53       	subi	r30, 0x39	; 57
    5b9c:	f8 49       	sbci	r31, 0x98	; 152
    5b9e:	8f 5f       	subi	r24, 0xFF	; 255
    5ba0:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    5ba2:	86 e1       	ldi	r24, 0x16	; 22
    5ba4:	8c 9f       	mul	r24, r28
    5ba6:	f0 01       	movw	r30, r0
    5ba8:	8d 9f       	mul	r24, r29
    5baa:	f0 0d       	add	r31, r0
    5bac:	11 24       	eor	r1, r1
    5bae:	e9 53       	subi	r30, 0x39	; 57
    5bb0:	f8 49       	sbci	r31, 0x98	; 152
    5bb2:	82 85       	ldd	r24, Z+10	; 0x0a
    5bb4:	82 30       	cpi	r24, 0x02	; 2
    5bb6:	a8 f0       	brcs	.+42     	; 0x5be2 <lin_update_tx+0x82>
    5bb8:	86 e1       	ldi	r24, 0x16	; 22
    5bba:	8c 9f       	mul	r24, r28
    5bbc:	f0 01       	movw	r30, r0
    5bbe:	8d 9f       	mul	r24, r29
    5bc0:	f0 0d       	add	r31, r0
    5bc2:	11 24       	eor	r1, r1
    5bc4:	e9 53       	subi	r30, 0x39	; 57
    5bc6:	f8 49       	sbci	r31, 0x98	; 152
    5bc8:	83 85       	ldd	r24, Z+11	; 0x0b
    5bca:	81 11       	cpse	r24, r1
    5bcc:	0a c0       	rjmp	.+20     	; 0x5be2 <lin_update_tx+0x82>
    {
        prot_state_ptr->overrun_flg = 1U;
    5bce:	86 e1       	ldi	r24, 0x16	; 22
    5bd0:	8c 9f       	mul	r24, r28
    5bd2:	f0 01       	movw	r30, r0
    5bd4:	8d 9f       	mul	r24, r29
    5bd6:	f0 0d       	add	r31, r0
    5bd8:	11 24       	eor	r1, r1
    5bda:	e9 53       	subi	r30, 0x39	; 57
    5bdc:	f8 49       	sbci	r31, 0x98	; 152
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	83 87       	std	Z+11, r24	; 0x0b
    }

    if ((bool)1U == prot_state_ptr->transmit_error_resp_sig_flg)
    5be2:	86 e1       	ldi	r24, 0x16	; 22
    5be4:	8c 9f       	mul	r24, r28
    5be6:	f0 01       	movw	r30, r0
    5be8:	8d 9f       	mul	r24, r29
    5bea:	f0 0d       	add	r31, r0
    5bec:	11 24       	eor	r1, r1
    5bee:	e9 53       	subi	r30, 0x39	; 57
    5bf0:	f8 49       	sbci	r31, 0x98	; 152
    5bf2:	85 89       	ldd	r24, Z+21	; 0x15
    5bf4:	88 23       	and	r24, r24
    5bf6:	51 f0       	breq	.+20     	; 0x5c0c <lin_update_tx+0xac>
    {
        /* Set no error in response */
        prot_state_ptr->error_in_response = 0U;
    5bf8:	86 e1       	ldi	r24, 0x16	; 22
    5bfa:	8c 9f       	mul	r24, r28
    5bfc:	f0 01       	movw	r30, r0
    5bfe:	8d 9f       	mul	r24, r29
    5c00:	f0 0d       	add	r31, r0
    5c02:	11 24       	eor	r1, r1
    5c04:	e9 53       	subi	r30, 0x39	; 57
    5c06:	f8 49       	sbci	r31, 0x98	; 152
    5c08:	16 82       	std	Z+6, r1	; 0x06
        prot_state_ptr->transmit_error_resp_sig_flg = (bool)0U;
    5c0a:	15 8a       	std	Z+21, r1	; 0x15
            (void)lin_lld_set_low_power_mode(iii);
        }
    }
#endif /* (1U == SUPPORT_MASTER_MODE) */
    /* Find frame index by pid */
    frame_index = lin_get_frame_index(iii, id);
    5c0c:	60 2f       	mov	r22, r16
    5c0e:	81 2f       	mov	r24, r17
    5c10:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <lin_get_frame_index>
    5c14:	e8 2e       	mov	r14, r24
    if ((((bool)LIN_MASTER == prot_user_config_ptr->function) && (0x3CU == id) && (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)) ||
    5c16:	8c e1       	ldi	r24, 0x1C	; 28
    5c18:	8c 9f       	mul	r24, r28
    5c1a:	f0 01       	movw	r30, r0
    5c1c:	8d 9f       	mul	r24, r29
    5c1e:	f0 0d       	add	r31, r0
    5c20:	11 24       	eor	r1, r1
    5c22:	e8 5b       	subi	r30, 0xB8	; 184
    5c24:	fc 49       	sbci	r31, 0x9C	; 156
    5c26:	f3 80       	ldd	r15, Z+3	; 0x03
    5c28:	ff 20       	and	r15, r15
    5c2a:	69 f0       	breq	.+26     	; 0x5c46 <lin_update_tx+0xe6>
    5c2c:	0c 33       	cpi	r16, 0x3C	; 60
    5c2e:	59 f4       	brne	.+22     	; 0x5c46 <lin_update_tx+0xe6>
    5c30:	86 e1       	ldi	r24, 0x16	; 22
    5c32:	8c 9f       	mul	r24, r28
    5c34:	f0 01       	movw	r30, r0
    5c36:	8d 9f       	mul	r24, r29
    5c38:	f0 0d       	add	r31, r0
    5c3a:	11 24       	eor	r1, r1
    5c3c:	e9 53       	subi	r30, 0x39	; 57
    5c3e:	f8 49       	sbci	r31, 0x98	; 152
    5c40:	80 89       	ldd	r24, Z+16	; 0x10
    5c42:	81 30       	cpi	r24, 0x01	; 1
    5c44:	21 f0       	breq	.+8      	; 0x5c4e <lin_update_tx+0xee>
    5c46:	f1 10       	cpse	r15, r1
    5c48:	07 c0       	rjmp	.+14     	; 0x5c58 <lin_update_tx+0xf8>
        (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (0x3DU == id)))
    5c4a:	0d 33       	cpi	r16, 0x3D	; 61
    5c4c:	29 f4       	brne	.+10     	; 0x5c58 <lin_update_tx+0xf8>
    {
        /* Call transport layer callback to process TL_TX_COMPLETED event*/
        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TX_COMPLETED, id);
    5c4e:	40 2f       	mov	r20, r16
    5c50:	62 e0       	ldi	r22, 0x02	; 2
    5c52:	81 2f       	mov	r24, r17
    5c54:	0e 94 80 4c 	call	0x9900	; 0x9900 <lin_tl_callback_handler>
    }
    if (frame_index < LIN_NUM_OF_FRMS)
    5c58:	83 e0       	ldi	r24, 0x03	; 3
    5c5a:	8e 15       	cp	r24, r14
    5c5c:	50 f0       	brcs	.+20     	; 0x5c72 <lin_update_tx+0x112>
    {
        /* Update signal flag */
        lin_update_tx_flags(iii, frame_index);
    5c5e:	6e 2d       	mov	r22, r14
    5c60:	81 2f       	mov	r24, r17
    5c62:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <lin_update_tx_flags>
        /* Update tx frame flag */
        g_lin_frame_flag_handle_tbl[frame_index] = true;
    5c66:	ee 2d       	mov	r30, r14
    5c68:	f0 e0       	ldi	r31, 0x00	; 0
    5c6a:	ec 5c       	subi	r30, 0xCC	; 204
    5c6c:	f9 49       	sbci	r31, 0x99	; 153
    5c6e:	81 e0       	ldi	r24, 0x01	; 1
    5c70:	80 83       	st	Z, r24
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5c72:	f1 10       	cpse	r15, r1
    5c74:	15 c0       	rjmp	.+42     	; 0x5ca0 <lin_update_tx+0x140>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    5c76:	8c e1       	ldi	r24, 0x1C	; 28
    5c78:	8c 9f       	mul	r24, r28
    5c7a:	f0 01       	movw	r30, r0
    5c7c:	8d 9f       	mul	r24, r29
    5c7e:	f0 0d       	add	r31, r0
    5c80:	11 24       	eor	r1, r1
    5c82:	e8 5b       	subi	r30, 0xB8	; 184
    5c84:	fc 49       	sbci	r31, 0x9C	; 156
    5c86:	80 81       	ld	r24, Z
    5c88:	88 23       	and	r24, r24
    5c8a:	11 f0       	breq	.+4      	; 0x5c90 <lin_update_tx+0x130>
    5c8c:	83 30       	cpi	r24, 0x03	; 3
    5c8e:	41 f4       	brne	.+16     	; 0x5ca0 <lin_update_tx+0x140>
        {
            lin_update_err_signal(iii, frame_index);
    5c90:	6e 2d       	mov	r22, r14
    5c92:	81 2f       	mov	r24, r17
    5c94:	0e 94 95 32 	call	0x652a	; 0x652a <lin_update_err_signal>
            lin_update_word_status_lin21(iii, LIN_LLD_TX_COMPLETED);
    5c98:	61 e0       	ldi	r22, 0x01	; 1
    5c9a:	81 2f       	mov	r24, r17
    5c9c:	0e 94 34 32 	call	0x6468	; 0x6468 <lin_update_word_status_lin21>

    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    5ca0:	df 91       	pop	r29
    5ca2:	cf 91       	pop	r28
    5ca4:	1f 91       	pop	r17
    5ca6:	0f 91       	pop	r16
    5ca8:	ff 90       	pop	r15
    5caa:	ef 90       	pop	r14
    5cac:	08 95       	ret

00005cae <lin_handle_error>:
 * Implements    : lin_handle_error_Activity
 *END**************************************************************************/
static void lin_handle_error(l_ifc_handle iii,
                             lin_lld_event_id_t event_id,
                             l_u8 id)
{
    5cae:	ef 92       	push	r14
    5cb0:	ff 92       	push	r15
    5cb2:	0f 93       	push	r16
    5cb4:	1f 93       	push	r17
    5cb6:	cf 93       	push	r28
    5cb8:	df 93       	push	r29
    5cba:	18 2f       	mov	r17, r24
    5cbc:	06 2f       	mov	r16, r22
    5cbe:	e4 2e       	mov	r14, r20
#if ((1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_SLAVE_MODE))
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5cc0:	c8 2f       	mov	r28, r24
    5cc2:	d0 e0       	ldi	r29, 0x00	; 0
    lin_master_data_t * master_data_ptr;
#endif /* ((1U == SUPPORT_MASTER_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))) */

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
    l_u8 frame_index;
    frame_index = lin_get_frame_index(iii, id);
    5cc4:	64 2f       	mov	r22, r20
    5cc6:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <lin_get_frame_index>
    5cca:	f8 2e       	mov	r15, r24
#endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */

    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    5ccc:	86 e1       	ldi	r24, 0x16	; 22
    5cce:	8c 9f       	mul	r24, r28
    5cd0:	f0 01       	movw	r30, r0
    5cd2:	8d 9f       	mul	r24, r29
    5cd4:	f0 0d       	add	r31, r0
    5cd6:	11 24       	eor	r1, r1
    5cd8:	e9 53       	subi	r30, 0x39	; 57
    5cda:	f8 49       	sbci	r31, 0x98	; 152
    5cdc:	82 85       	ldd	r24, Z+10	; 0x0a
    5cde:	8f 3f       	cpi	r24, 0xFF	; 255
    5ce0:	51 f0       	breq	.+20     	; 0x5cf6 <lin_handle_error+0x48>
    {
        prot_state_ptr->num_of_processed_frame++;
    5ce2:	96 e1       	ldi	r25, 0x16	; 22
    5ce4:	9c 9f       	mul	r25, r28
    5ce6:	f0 01       	movw	r30, r0
    5ce8:	9d 9f       	mul	r25, r29
    5cea:	f0 0d       	add	r31, r0
    5cec:	11 24       	eor	r1, r1
    5cee:	e9 53       	subi	r30, 0x39	; 57
    5cf0:	f8 49       	sbci	r31, 0x98	; 152
    5cf2:	8f 5f       	subi	r24, 0xFF	; 255
    5cf4:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    5cf6:	86 e1       	ldi	r24, 0x16	; 22
    5cf8:	8c 9f       	mul	r24, r28
    5cfa:	f0 01       	movw	r30, r0
    5cfc:	8d 9f       	mul	r24, r29
    5cfe:	f0 0d       	add	r31, r0
    5d00:	11 24       	eor	r1, r1
    5d02:	e9 53       	subi	r30, 0x39	; 57
    5d04:	f8 49       	sbci	r31, 0x98	; 152
    5d06:	82 85       	ldd	r24, Z+10	; 0x0a
    5d08:	82 30       	cpi	r24, 0x02	; 2
    5d0a:	a8 f0       	brcs	.+42     	; 0x5d36 <lin_handle_error+0x88>
    5d0c:	86 e1       	ldi	r24, 0x16	; 22
    5d0e:	8c 9f       	mul	r24, r28
    5d10:	f0 01       	movw	r30, r0
    5d12:	8d 9f       	mul	r24, r29
    5d14:	f0 0d       	add	r31, r0
    5d16:	11 24       	eor	r1, r1
    5d18:	e9 53       	subi	r30, 0x39	; 57
    5d1a:	f8 49       	sbci	r31, 0x98	; 152
    5d1c:	83 85       	ldd	r24, Z+11	; 0x0b
    5d1e:	81 11       	cpse	r24, r1
    5d20:	0a c0       	rjmp	.+20     	; 0x5d36 <lin_handle_error+0x88>
    {
        prot_state_ptr->overrun_flg = 1U;
    5d22:	86 e1       	ldi	r24, 0x16	; 22
    5d24:	8c 9f       	mul	r24, r28
    5d26:	f0 01       	movw	r30, r0
    5d28:	8d 9f       	mul	r24, r29
    5d2a:	f0 0d       	add	r31, r0
    5d2c:	11 24       	eor	r1, r1
    5d2e:	e9 53       	subi	r30, 0x39	; 57
    5d30:	f8 49       	sbci	r31, 0x98	; 152
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	83 87       	std	Z+11, r24	; 0x0b
    }

    switch (event_id)
    5d36:	8c ef       	ldi	r24, 0xFC	; 252
    5d38:	80 0f       	add	r24, r16
    5d3a:	84 30       	cpi	r24, 0x04	; 4
    5d3c:	80 f5       	brcc	.+96     	; 0x5d9e <lin_handle_error+0xf0>
        case LIN_LLD_NODATA_TIMEOUT:
        #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
            /* Check if frame type is event trigger */
            /* Find the corresponding frame */

            if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    5d3e:	8c e1       	ldi	r24, 0x1C	; 28
    5d40:	8c 9f       	mul	r24, r28
    5d42:	f0 01       	movw	r30, r0
    5d44:	8d 9f       	mul	r24, r29
    5d46:	f0 0d       	add	r31, r0
    5d48:	11 24       	eor	r1, r1
    5d4a:	e8 5b       	subi	r30, 0xB8	; 184
    5d4c:	fc 49       	sbci	r31, 0x9C	; 156
    5d4e:	26 81       	ldd	r18, Z+6	; 0x06
    5d50:	37 81       	ldd	r19, Z+7	; 0x07
    5d52:	8f 2d       	mov	r24, r15
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	fc 01       	movw	r30, r24
    5d58:	ee 0f       	add	r30, r30
    5d5a:	ff 1f       	adc	r31, r31
    5d5c:	88 0f       	add	r24, r24
    5d5e:	99 1f       	adc	r25, r25
    5d60:	88 0f       	add	r24, r24
    5d62:	99 1f       	adc	r25, r25
    5d64:	88 0f       	add	r24, r24
    5d66:	99 1f       	adc	r25, r25
    5d68:	8e 0f       	add	r24, r30
    5d6a:	9f 1f       	adc	r25, r31
    5d6c:	f9 01       	movw	r30, r18
    5d6e:	e8 0f       	add	r30, r24
    5d70:	f9 1f       	adc	r31, r25
    5d72:	80 81       	ld	r24, Z
    5d74:	81 30       	cpi	r24, 0x01	; 1
    5d76:	99 f0       	breq	.+38     	; 0x5d9e <lin_handle_error+0xf0>
            }
            else
        #endif  /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */
            {
                /* Set response error */
                prot_state_ptr->error_in_response = 1U;
    5d78:	86 e1       	ldi	r24, 0x16	; 22
    5d7a:	8c 9f       	mul	r24, r28
    5d7c:	f0 01       	movw	r30, r0
    5d7e:	8d 9f       	mul	r24, r29
    5d80:	f0 0d       	add	r31, r0
    5d82:	11 24       	eor	r1, r1
    5d84:	e9 53       	subi	r30, 0x39	; 57
    5d86:	f8 49       	sbci	r31, 0x98	; 152
    5d88:	81 e0       	ldi	r24, 0x01	; 1
    5d8a:	86 83       	std	Z+6, r24	; 0x06
                /* TL support */
                if ((0x3CU == id) || (0x3DU == id))
    5d8c:	84 ec       	ldi	r24, 0xC4	; 196
    5d8e:	8e 0d       	add	r24, r14
    5d90:	82 30       	cpi	r24, 0x02	; 2
    5d92:	28 f4       	brcc	.+10     	; 0x5d9e <lin_handle_error+0xf0>
                {
                    /* Call transport layer callback to handle TL_ERROR */
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_ERROR, id);
    5d94:	4e 2d       	mov	r20, r14
    5d96:	64 e0       	ldi	r22, 0x04	; 4
    5d98:	81 2f       	mov	r24, r17
    5d9a:	0e 94 80 4c 	call	0x9900	; 0x9900 <lin_tl_callback_handler>
            break;
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5d9e:	8c e1       	ldi	r24, 0x1C	; 28
    5da0:	8c 9f       	mul	r24, r28
    5da2:	f0 01       	movw	r30, r0
    5da4:	8d 9f       	mul	r24, r29
    5da6:	f0 0d       	add	r31, r0
    5da8:	11 24       	eor	r1, r1
    5daa:	e8 5b       	subi	r30, 0xB8	; 184
    5dac:	fc 49       	sbci	r31, 0x9C	; 156
    5dae:	83 81       	ldd	r24, Z+3	; 0x03
    5db0:	81 11       	cpse	r24, r1
    5db2:	20 c0       	rjmp	.+64     	; 0x5df4 <lin_handle_error+0x146>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    5db4:	8c e1       	ldi	r24, 0x1C	; 28
    5db6:	8c 9f       	mul	r24, r28
    5db8:	f0 01       	movw	r30, r0
    5dba:	8d 9f       	mul	r24, r29
    5dbc:	f0 0d       	add	r31, r0
    5dbe:	11 24       	eor	r1, r1
    5dc0:	e8 5b       	subi	r30, 0xB8	; 184
    5dc2:	fc 49       	sbci	r31, 0x9C	; 156
    5dc4:	80 81       	ld	r24, Z
    5dc6:	88 23       	and	r24, r24
    5dc8:	11 f0       	breq	.+4      	; 0x5dce <lin_handle_error+0x120>
    5dca:	83 30       	cpi	r24, 0x03	; 3
    5dcc:	99 f4       	brne	.+38     	; 0x5df4 <lin_handle_error+0x146>
        {
            if (prot_state_ptr->error_in_response == 1U)
    5dce:	86 e1       	ldi	r24, 0x16	; 22
    5dd0:	8c 9f       	mul	r24, r28
    5dd2:	f0 01       	movw	r30, r0
    5dd4:	8d 9f       	mul	r24, r29
    5dd6:	f0 0d       	add	r31, r0
    5dd8:	11 24       	eor	r1, r1
    5dda:	e9 53       	subi	r30, 0x39	; 57
    5ddc:	f8 49       	sbci	r31, 0x98	; 152
    5dde:	86 81       	ldd	r24, Z+6	; 0x06
    5de0:	81 30       	cpi	r24, 0x01	; 1
    5de2:	21 f4       	brne	.+8      	; 0x5dec <lin_handle_error+0x13e>
            {
                lin_update_err_signal(iii, frame_index);
    5de4:	6f 2d       	mov	r22, r15
    5de6:	81 2f       	mov	r24, r17
    5de8:	0e 94 95 32 	call	0x652a	; 0x652a <lin_update_err_signal>
            }
            lin_update_word_status_lin21(iii, event_id);
    5dec:	60 2f       	mov	r22, r16
    5dee:	81 2f       	mov	r24, r17
    5df0:	0e 94 34 32 	call	0x6468	; 0x6468 <lin_update_word_status_lin21>
            lin_update_word_status_j2602(iii);
        }
    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }
#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    5df4:	df 91       	pop	r29
    5df6:	cf 91       	pop	r28
    5df8:	1f 91       	pop	r17
    5dfa:	0f 91       	pop	r16
    5dfc:	ff 90       	pop	r15
    5dfe:	ef 90       	pop	r14
    5e00:	08 95       	ret

00005e02 <lin_process_uncd_frame>:
 * Implements    : lin_process_uncd_frame_Activity
 *END**************************************************************************/
void lin_process_uncd_frame(l_ifc_handle iii,
                            l_u8 id,
                            l_u8 type)
{
    5e02:	0f 93       	push	r16
    5e04:	1f 93       	push	r17
    5e06:	cf 93       	push	r28
    5e08:	df 93       	push	r29
    5e0a:	16 2f       	mov	r17, r22
    5e0c:	04 2f       	mov	r16, r20
    l_u8 frame_index;
    l_u8 * response_buffer_ptr;
    l_u16 frame_byte_offset;
    l_u8 i;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    5e0e:	c8 2f       	mov	r28, r24
    5e10:	d0 e0       	ldi	r29, 0x00	; 0
    l_u8 flag;
#endif /* (1U == SUPPORT_SLAVE_MODE) */
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */
    frame_index = lin_get_frame_index(iii, id);
    5e12:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <lin_get_frame_index>

    if (0xFFU != frame_index)
    5e16:	8f 3f       	cpi	r24, 0xFF	; 255
    5e18:	09 f4       	brne	.+2      	; 0x5e1c <lin_process_uncd_frame+0x1a>
    5e1a:	bb c0       	rjmp	.+374    	; 0x5f92 <lin_process_uncd_frame+0x190>
    {
        response_buffer_ptr = prot_state_ptr->response_buffer_ptr;
    5e1c:	96 e1       	ldi	r25, 0x16	; 22
    5e1e:	9c 9f       	mul	r25, r28
    5e20:	d0 01       	movw	r26, r0
    5e22:	9d 9f       	mul	r25, r29
    5e24:	b0 0d       	add	r27, r0
    5e26:	11 24       	eor	r1, r1
    5e28:	a9 53       	subi	r26, 0x39	; 57
    5e2a:	b8 49       	sbci	r27, 0x98	; 152
    5e2c:	12 96       	adiw	r26, 0x02	; 2
    5e2e:	4d 91       	ld	r20, X+
    5e30:	5c 91       	ld	r21, X
    5e32:	13 97       	sbiw	r26, 0x03	; 3

        /* Set frame length */
        prot_state_ptr->response_length = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_len;  // 长度参数也需要考虑在内
    5e34:	9c e1       	ldi	r25, 0x1C	; 28
    5e36:	9c 9f       	mul	r25, r28
    5e38:	f0 01       	movw	r30, r0
    5e3a:	9d 9f       	mul	r25, r29
    5e3c:	f0 0d       	add	r31, r0
    5e3e:	11 24       	eor	r1, r1
    5e40:	e8 5b       	subi	r30, 0xB8	; 184
    5e42:	fc 49       	sbci	r31, 0x9C	; 156
    5e44:	66 81       	ldd	r22, Z+6	; 0x06
    5e46:	77 81       	ldd	r23, Z+7	; 0x07
    5e48:	28 2f       	mov	r18, r24
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	f9 01       	movw	r30, r18
    5e4e:	ee 0f       	add	r30, r30
    5e50:	ff 1f       	adc	r31, r31
    5e52:	22 0f       	add	r18, r18
    5e54:	33 1f       	adc	r19, r19
    5e56:	22 0f       	add	r18, r18
    5e58:	33 1f       	adc	r19, r19
    5e5a:	22 0f       	add	r18, r18
    5e5c:	33 1f       	adc	r19, r19
    5e5e:	2e 0f       	add	r18, r30
    5e60:	3f 1f       	adc	r19, r31
    5e62:	fb 01       	movw	r30, r22
    5e64:	e2 0f       	add	r30, r18
    5e66:	f3 1f       	adc	r31, r19
    5e68:	31 81       	ldd	r19, Z+1	; 0x01
    5e6a:	14 96       	adiw	r26, 0x04	; 4
    5e6c:	3c 93       	st	X, r19
        frame_byte_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_offset;             // frm_offset是啥意思
    5e6e:	63 81       	ldd	r22, Z+3	; 0x03
    5e70:	74 81       	ldd	r23, Z+4	; 0x04

        /* Make unconditional frame */                                                               //
        if (MAKE_UNCONDITIONAL_FRAME == type)                                                        
    5e72:	01 11       	cpse	r16, r1
    5e74:	72 c0       	rjmp	.+228    	; 0x5f5a <lin_process_uncd_frame+0x158>
        {
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5e76:	9c 9f       	mul	r25, r28
    5e78:	f0 01       	movw	r30, r0
    5e7a:	9d 9f       	mul	r25, r29
    5e7c:	f0 0d       	add	r31, r0
    5e7e:	11 24       	eor	r1, r1
    5e80:	e8 5b       	subi	r30, 0xB8	; 184
    5e82:	fc 49       	sbci	r31, 0x9C	; 156
    5e84:	93 81       	ldd	r25, Z+3	; 0x03
    5e86:	91 11       	cpse	r25, r1
    5e88:	84 c0       	rjmp	.+264    	; 0x5f92 <lin_process_uncd_frame+0x190>
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    5e8a:	9c e1       	ldi	r25, 0x1C	; 28
    5e8c:	9c 9f       	mul	r25, r28
    5e8e:	f0 01       	movw	r30, r0
    5e90:	9d 9f       	mul	r25, r29
    5e92:	f0 0d       	add	r31, r0
    5e94:	11 24       	eor	r1, r1
    5e96:	e8 5b       	subi	r30, 0xB8	; 184
    5e98:	fc 49       	sbci	r31, 0x9C	; 156
    5e9a:	22 89       	ldd	r18, Z+18	; 0x12
    5e9c:	30 e0       	ldi	r19, 0x00	; 0

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	1c c0       	rjmp	.+56     	; 0x5eda <lin_process_uncd_frame+0xd8>
                {
                    /* Check if frame contain error signal */
                    if (id == node_attr_ptr->resp_err_frm_id_ptr[i])
    5ea2:	a4 e2       	ldi	r26, 0x24	; 36
    5ea4:	a2 9f       	mul	r26, r18
    5ea6:	f0 01       	movw	r30, r0
    5ea8:	a3 9f       	mul	r26, r19
    5eaa:	f0 0d       	add	r31, r0
    5eac:	11 24       	eor	r1, r1
    5eae:	ec 59       	subi	r30, 0x9C	; 156
    5eb0:	fc 49       	sbci	r31, 0x9C	; 156
    5eb2:	04 84       	ldd	r0, Z+12	; 0x0c
    5eb4:	f5 85       	ldd	r31, Z+13	; 0x0d
    5eb6:	e0 2d       	mov	r30, r0
    5eb8:	e9 0f       	add	r30, r25
    5eba:	f1 1d       	adc	r31, r1
    5ebc:	e0 81       	ld	r30, Z
    5ebe:	1e 13       	cpse	r17, r30
    5ec0:	0b c0       	rjmp	.+22     	; 0x5ed8 <lin_process_uncd_frame+0xd6>
                    {
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
    5ec2:	96 e1       	ldi	r25, 0x16	; 22
    5ec4:	9c 9f       	mul	r25, r28
    5ec6:	f0 01       	movw	r30, r0
    5ec8:	9d 9f       	mul	r25, r29
    5eca:	f0 0d       	add	r31, r0
    5ecc:	11 24       	eor	r1, r1
    5ece:	e9 53       	subi	r30, 0x39	; 57
    5ed0:	f8 49       	sbci	r31, 0x98	; 152
    5ed2:	91 e0       	ldi	r25, 0x01	; 1
    5ed4:	95 8b       	std	Z+21, r25	; 0x15
                        break;
    5ed6:	0c c0       	rjmp	.+24     	; 0x5ef0 <lin_process_uncd_frame+0xee>
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    5ed8:	9f 5f       	subi	r25, 0xFF	; 255
    5eda:	a4 e2       	ldi	r26, 0x24	; 36
    5edc:	a2 9f       	mul	r26, r18
    5ede:	f0 01       	movw	r30, r0
    5ee0:	a3 9f       	mul	r26, r19
    5ee2:	f0 0d       	add	r31, r0
    5ee4:	11 24       	eor	r1, r1
    5ee6:	ec 59       	subi	r30, 0x9C	; 156
    5ee8:	fc 49       	sbci	r31, 0x9C	; 156
    5eea:	e6 85       	ldd	r30, Z+14	; 0x0e
    5eec:	9e 17       	cp	r25, r30
    5eee:	c8 f2       	brcs	.-78     	; 0x5ea2 <lin_process_uncd_frame+0xa0>
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
                        break;
                    }
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];
    5ef0:	e8 2f       	mov	r30, r24
    5ef2:	f0 e0       	ldi	r31, 0x00	; 0
    5ef4:	e0 5d       	subi	r30, 0xD0	; 208
    5ef6:	f9 49       	sbci	r31, 0x99	; 153
    5ef8:	a0 81       	ld	r26, Z

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    5efa:	80 e0       	ldi	r24, 0x00	; 0
    5efc:	22 c0       	rjmp	.+68     	; 0x5f42 <lin_process_uncd_frame+0x140>
                {
                    if((flag & (1U << i)) != 0U)
    5efe:	e8 2f       	mov	r30, r24
    5f00:	f0 e0       	ldi	r31, 0x00	; 0
    5f02:	2a 2f       	mov	r18, r26
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	08 2e       	mov	r0, r24
    5f08:	02 c0       	rjmp	.+4      	; 0x5f0e <lin_process_uncd_frame+0x10c>
    5f0a:	36 95       	lsr	r19
    5f0c:	27 95       	ror	r18
    5f0e:	0a 94       	dec	r0
    5f10:	e2 f7       	brpl	.-8      	; 0x5f0a <lin_process_uncd_frame+0x108>
    5f12:	20 ff       	sbrs	r18, 0
    5f14:	08 c0       	rjmp	.+16     	; 0x5f26 <lin_process_uncd_frame+0x124>
                    {
                        response_buffer_ptr[i] = g_buffer_backup_data[i];
    5f16:	e8 5c       	subi	r30, 0xC8	; 200
    5f18:	f9 49       	sbci	r31, 0x99	; 153
    5f1a:	90 81       	ld	r25, Z
    5f1c:	fa 01       	movw	r30, r20
    5f1e:	e8 0f       	add	r30, r24
    5f20:	f1 1d       	adc	r31, r1
    5f22:	90 83       	st	Z, r25
    5f24:	0d c0       	rjmp	.+26     	; 0x5f40 <lin_process_uncd_frame+0x13e>
                    }
                    else
                    {
                        response_buffer_ptr[i] = g_lin_frame_data_buffer[frame_byte_offset + i];
    5f26:	28 2f       	mov	r18, r24
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	8a 01       	movw	r16, r20
    5f2c:	02 0f       	add	r16, r18
    5f2e:	13 1f       	adc	r17, r19
    5f30:	26 0f       	add	r18, r22
    5f32:	37 1f       	adc	r19, r23
    5f34:	f9 01       	movw	r30, r18
    5f36:	e8 52       	subi	r30, 0x28	; 40
    5f38:	ff 49       	sbci	r31, 0x9F	; 159
    5f3a:	90 81       	ld	r25, Z
    5f3c:	f8 01       	movw	r30, r16
    5f3e:	90 83       	st	Z, r25
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    5f40:	8f 5f       	subi	r24, 0xFF	; 255
    5f42:	96 e1       	ldi	r25, 0x16	; 22
    5f44:	9c 9f       	mul	r25, r28
    5f46:	f0 01       	movw	r30, r0
    5f48:	9d 9f       	mul	r25, r29
    5f4a:	f0 0d       	add	r31, r0
    5f4c:	11 24       	eor	r1, r1
    5f4e:	e9 53       	subi	r30, 0x39	; 57
    5f50:	f8 49       	sbci	r31, 0x98	; 152
    5f52:	94 81       	ldd	r25, Z+4	; 0x04
    5f54:	89 17       	cp	r24, r25
    5f56:	98 f2       	brcs	.-90     	; 0x5efe <lin_process_uncd_frame+0xfc>
    5f58:	1c c0       	rjmp	.+56     	; 0x5f92 <lin_process_uncd_frame+0x190>
            }
        }
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    5f5a:	8c e1       	ldi	r24, 0x1C	; 28
    5f5c:	8c 9f       	mul	r24, r28
    5f5e:	f0 01       	movw	r30, r0
    5f60:	8d 9f       	mul	r24, r29
    5f62:	f0 0d       	add	r31, r0
    5f64:	11 24       	eor	r1, r1
    5f66:	e8 5b       	subi	r30, 0xB8	; 184
    5f68:	fc 49       	sbci	r31, 0x9C	; 156
    5f6a:	83 81       	ldd	r24, Z+3	; 0x03
    5f6c:	81 11       	cpse	r24, r1
    5f6e:	11 c0       	rjmp	.+34     	; 0x5f92 <lin_process_uncd_frame+0x190>
    5f70:	20 e0       	ldi	r18, 0x00	; 0
    5f72:	0d c0       	rjmp	.+26     	; 0x5f8e <lin_process_uncd_frame+0x18c>
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
                {
                    g_lin_frame_data_buffer[frame_byte_offset + i] = response_buffer_ptr[i];
    5f74:	82 2f       	mov	r24, r18
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	fb 01       	movw	r30, r22
    5f7a:	e8 0f       	add	r30, r24
    5f7c:	f9 1f       	adc	r31, r25
    5f7e:	da 01       	movw	r26, r20
    5f80:	a8 0f       	add	r26, r24
    5f82:	b9 1f       	adc	r27, r25
    5f84:	8c 91       	ld	r24, X
    5f86:	e8 52       	subi	r30, 0x28	; 40
    5f88:	ff 49       	sbci	r31, 0x9F	; 159
    5f8a:	80 83       	st	Z, r24
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    5f8c:	2f 5f       	subi	r18, 0xFF	; 255
    5f8e:	23 17       	cp	r18, r19
    5f90:	88 f3       	brcs	.-30     	; 0x5f74 <lin_process_uncd_frame+0x172>
                }
            }
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }
    }
}
    5f92:	df 91       	pop	r29
    5f94:	cf 91       	pop	r28
    5f96:	1f 91       	pop	r17
    5f98:	0f 91       	pop	r16
    5f9a:	08 95       	ret

00005f9c <lin_process_id>:
 *
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    5f9c:	af 92       	push	r10
    5f9e:	bf 92       	push	r11
    5fa0:	cf 92       	push	r12
    5fa2:	df 92       	push	r13
    5fa4:	ef 92       	push	r14
    5fa6:	ff 92       	push	r15
    5fa8:	0f 93       	push	r16
    5faa:	1f 93       	push	r17
    5fac:	cf 93       	push	r28
    5fae:	df 93       	push	r29
    5fb0:	1f 92       	push	r1
    5fb2:	cd b7       	in	r28, 0x3d	; 61
    5fb4:	de b7       	in	r29, 0x3e	; 62
    5fb6:	b8 2e       	mov	r11, r24
    5fb8:	a6 2e       	mov	r10, r22
    l_u16 flag_offset;
    l_u8 flag_size;
    l_u8 i;
#endif /* ((1U == SUPPORT_SLAVE_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))) */

    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];                              //获取用户协议配置信息
    5fba:	e8 2e       	mov	r14, r24
    5fbc:	f1 2c       	mov	r15, r1
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];                                                   //获取协议

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    5fbe:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <lin_get_frame_index>
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    5fc2:	9c e1       	ldi	r25, 0x1C	; 28
    5fc4:	9e 9d       	mul	r25, r14
    5fc6:	f0 01       	movw	r30, r0
    5fc8:	9f 9d       	mul	r25, r15
    5fca:	f0 0d       	add	r31, r0
    5fcc:	11 24       	eor	r1, r1
    5fce:	e8 5b       	subi	r30, 0xB8	; 184
    5fd0:	fc 49       	sbci	r31, 0x9C	; 156
    5fd2:	c6 80       	ldd	r12, Z+6	; 0x06
    5fd4:	d7 80       	ldd	r13, Z+7	; 0x07
    5fd6:	28 2f       	mov	r18, r24
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
    5fda:	89 01       	movw	r16, r18
    5fdc:	00 0f       	add	r16, r16
    5fde:	11 1f       	adc	r17, r17
    5fe0:	22 0f       	add	r18, r18
    5fe2:	33 1f       	adc	r19, r19
    5fe4:	22 0f       	add	r18, r18
    5fe6:	33 1f       	adc	r19, r19
    5fe8:	22 0f       	add	r18, r18
    5fea:	33 1f       	adc	r19, r19
    5fec:	02 0f       	add	r16, r18
    5fee:	13 1f       	adc	r17, r19
    5ff0:	0c 0d       	add	r16, r12
    5ff2:	1d 1d       	adc	r17, r13
    if (0xFFU != frame_index)
    5ff4:	8f 3f       	cpi	r24, 0xFF	; 255
    5ff6:	09 f4       	brne	.+2      	; 0x5ffa <lin_process_id+0x5e>
    5ff8:	b9 c0       	rjmp	.+370    	; 0x616c <lin_process_id+0x1d0>
    {
        action = 1U;
        prot_state_ptr->last_pid = lin_process_parity(id,MAKE_PARITY);                      //判断pid校验是否正确
    5ffa:	60 e0       	ldi	r22, 0x00	; 0
    5ffc:	8a 2d       	mov	r24, r10
    5ffe:	0e 94 25 42 	call	0x844a	; 0x844a <lin_process_parity>
    6002:	96 e1       	ldi	r25, 0x16	; 22
    6004:	9e 9d       	mul	r25, r14
    6006:	f0 01       	movw	r30, r0
    6008:	9f 9d       	mul	r25, r15
    600a:	f0 0d       	add	r31, r0
    600c:	11 24       	eor	r1, r1
    600e:	e9 53       	subi	r30, 0x39	; 57
    6010:	f8 49       	sbci	r31, 0x98	; 152
    6012:	81 87       	std	Z+9, r24	; 0x09
        /* PID belongs to this node, then check type of frame */
        switch (lin_frame_ptr->frm_type)                                                
    6014:	d8 01       	movw	r26, r16
    6016:	8c 91       	ld	r24, X
    6018:	81 30       	cpi	r24, 0x01	; 1
    601a:	81 f0       	breq	.+32     	; 0x603c <lin_process_id+0xa0>
    601c:	20 f0       	brcs	.+8      	; 0x6026 <lin_process_id+0x8a>
    601e:	81 31       	cpi	r24, 0x11	; 17
    6020:	09 f4       	brne	.+2      	; 0x6024 <lin_process_id+0x88>
    6022:	70 c0       	rjmp	.+224    	; 0x6104 <lin_process_id+0x168>
    6024:	a5 c0       	rjmp	.+330    	; 0x6170 <lin_process_id+0x1d4>
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    6026:	f8 01       	movw	r30, r16
    6028:	82 81       	ldd	r24, Z+2	; 0x02
    602a:	81 11       	cpse	r24, r1
    602c:	a3 c0       	rjmp	.+326    	; 0x6174 <lin_process_id+0x1d8>
                {
                    lin_process_uncd_frame(iii, id, MAKE_UNCONDITIONAL_FRAME);
    602e:	40 e0       	ldi	r20, 0x00	; 0
    6030:	6a 2d       	mov	r22, r10
    6032:	8b 2d       	mov	r24, r11
    6034:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <lin_process_uncd_frame>
                    /* Set response */
                    action = 2U;
    6038:	82 e0       	ldi	r24, 0x02	; 2
    603a:	a5 c0       	rjmp	.+330    	; 0x6186 <lin_process_id+0x1ea>
                }
                break;
            #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    603c:	8c e1       	ldi	r24, 0x1C	; 28
    603e:	8e 9d       	mul	r24, r14
    6040:	f0 01       	movw	r30, r0
    6042:	8f 9d       	mul	r24, r15
    6044:	f0 0d       	add	r31, r0
    6046:	11 24       	eor	r1, r1
    6048:	e8 5b       	subi	r30, 0xB8	; 184
    604a:	fc 49       	sbci	r31, 0x9C	; 156
    604c:	83 81       	ldd	r24, Z+3	; 0x03
    604e:	81 11       	cpse	r24, r1
    6050:	93 c0       	rjmp	.+294    	; 0x6178 <lin_process_id+0x1dc>
                }
            #if (1U == SUPPORT_SLAVE_MODE)
                else
                {
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    6052:	d8 01       	movw	r26, r16
    6054:	18 96       	adiw	r26, 0x08	; 8
    6056:	ed 91       	ld	r30, X+
    6058:	fc 91       	ld	r31, X
    605a:	19 97       	sbiw	r26, 0x09	; 9
    605c:	01 80       	ldd	r0, Z+1	; 0x01
    605e:	f2 81       	ldd	r31, Z+2	; 0x02
    6060:	e0 2d       	mov	r30, r0
    6062:	80 81       	ld	r24, Z
    6064:	89 83       	std	Y+1, r24	; 0x01
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
    6066:	89 81       	ldd	r24, Y+1	; 0x01
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	fc 01       	movw	r30, r24
    606c:	ee 0f       	add	r30, r30
    606e:	ff 1f       	adc	r31, r31
    6070:	88 0f       	add	r24, r24
    6072:	99 1f       	adc	r25, r25
    6074:	88 0f       	add	r24, r24
    6076:	99 1f       	adc	r25, r25
    6078:	88 0f       	add	r24, r24
    607a:	99 1f       	adc	r25, r25
    607c:	e8 0f       	add	r30, r24
    607e:	f9 1f       	adc	r31, r25
    6080:	ec 0d       	add	r30, r12
    6082:	fd 1d       	adc	r31, r13
    6084:	85 81       	ldd	r24, Z+5	; 0x05
    6086:	96 81       	ldd	r25, Z+6	; 0x06
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
    6088:	29 81       	ldd	r18, Y+1	; 0x01
    608a:	30 e0       	ldi	r19, 0x00	; 0
    608c:	a9 01       	movw	r20, r18
    608e:	44 0f       	add	r20, r20
    6090:	55 1f       	adc	r21, r21
    6092:	22 0f       	add	r18, r18
    6094:	33 1f       	adc	r19, r19
    6096:	22 0f       	add	r18, r18
    6098:	33 1f       	adc	r19, r19
    609a:	22 0f       	add	r18, r18
    609c:	33 1f       	adc	r19, r19
    609e:	24 0f       	add	r18, r20
    60a0:	35 1f       	adc	r19, r21
    60a2:	f6 01       	movw	r30, r12
    60a4:	e2 0f       	add	r30, r18
    60a6:	f3 1f       	adc	r31, r19
    60a8:	37 81       	ldd	r19, Z+7	; 0x07
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    60aa:	20 e0       	ldi	r18, 0x00	; 0
    60ac:	27 c0       	rjmp	.+78     	; 0x60fc <lin_process_id+0x160>
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    60ae:	ac 01       	movw	r20, r24
    60b0:	4f 5f       	subi	r20, 0xFF	; 255
    60b2:	5f 4f       	sbci	r21, 0xFF	; 255
    60b4:	fc 01       	movw	r30, r24
    60b6:	eb 52       	subi	r30, 0x2B	; 43
    60b8:	ff 49       	sbci	r31, 0x9F	; 159
    60ba:	80 81       	ld	r24, Z
    60bc:	8f 3f       	cpi	r24, 0xFF	; 255
    60be:	e1 f0       	breq	.+56     	; 0x60f8 <lin_process_id+0x15c>
                        {
                            /* Frame is updated */
                            lin_make_res_evnt_frame(iii, prot_user_config_ptr->list_identifiers_RAM_ptr[1U + associate_frame - prot_user_config_ptr->frame_start]);
    60c0:	8c e1       	ldi	r24, 0x1C	; 28
    60c2:	8e 9d       	mul	r24, r14
    60c4:	d0 01       	movw	r26, r0
    60c6:	8f 9d       	mul	r24, r15
    60c8:	b0 0d       	add	r27, r0
    60ca:	11 24       	eor	r1, r1
    60cc:	a8 5b       	subi	r26, 0xB8	; 184
    60ce:	bc 49       	sbci	r27, 0x9C	; 156
    60d0:	1a 96       	adiw	r26, 0x0a	; 10
    60d2:	2d 91       	ld	r18, X+
    60d4:	3c 91       	ld	r19, X
    60d6:	1b 97       	sbiw	r26, 0x0b	; 11
    60d8:	89 81       	ldd	r24, Y+1	; 0x01
    60da:	15 96       	adiw	r26, 0x05	; 5
    60dc:	9c 91       	ld	r25, X
    60de:	e8 2f       	mov	r30, r24
    60e0:	f0 e0       	ldi	r31, 0x00	; 0
    60e2:	e9 1b       	sub	r30, r25
    60e4:	f1 09       	sbc	r31, r1
    60e6:	31 96       	adiw	r30, 0x01	; 1
    60e8:	e2 0f       	add	r30, r18
    60ea:	f3 1f       	adc	r31, r19
    60ec:	60 81       	ld	r22, Z
    60ee:	8b 2d       	mov	r24, r11
    60f0:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <lin_make_res_evnt_frame>
                            /* Set response */
                            action = 2U;
    60f4:	82 e0       	ldi	r24, 0x02	; 2
                            break;
    60f6:	47 c0       	rjmp	.+142    	; 0x6186 <lin_process_id+0x1ea>
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    60f8:	2f 5f       	subi	r18, 0xFF	; 255
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    60fa:	ca 01       	movw	r24, r20
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    60fc:	23 17       	cp	r18, r19
    60fe:	b8 f2       	brcs	.-82     	; 0x60ae <lin_process_id+0x112>

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    if (0xFFU != frame_index)
    {
        action = 1U;
    6100:	81 e0       	ldi	r24, 0x01	; 1
    6102:	41 c0       	rjmp	.+130    	; 0x6186 <lin_process_id+0x1ea>
                break;
            #endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13)) */

            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
    6104:	8c e1       	ldi	r24, 0x1C	; 28
    6106:	8e 9d       	mul	r24, r14
    6108:	f0 01       	movw	r30, r0
    610a:	8f 9d       	mul	r24, r15
    610c:	f0 0d       	add	r31, r0
    610e:	11 24       	eor	r1, r1
    6110:	e8 5b       	subi	r30, 0xB8	; 184
    6112:	fc 49       	sbci	r31, 0x9C	; 156
    6114:	80 81       	ld	r24, Z
    6116:	82 30       	cpi	r24, 0x02	; 2
    6118:	89 f1       	breq	.+98     	; 0x617c <lin_process_id+0x1e0>
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    611a:	f8 01       	movw	r30, r16
    611c:	82 81       	ldd	r24, Z+2	; 0x02
    611e:	81 11       	cpse	r24, r1
    6120:	1e c0       	rjmp	.+60     	; 0x615e <lin_process_id+0x1c2>
                    {
                        action = 2U;
                        if (0x3CU == id)
    6122:	fc e3       	ldi	r31, 0x3C	; 60
    6124:	af 12       	cpse	r10, r31
    6126:	12 c0       	rjmp	.+36     	; 0x614c <lin_process_id+0x1b0>
                        {
                            if (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)
    6128:	86 e1       	ldi	r24, 0x16	; 22
    612a:	8e 9d       	mul	r24, r14
    612c:	f0 01       	movw	r30, r0
    612e:	8f 9d       	mul	r24, r15
    6130:	f0 0d       	add	r31, r0
    6132:	11 24       	eor	r1, r1
    6134:	e9 53       	subi	r30, 0x39	; 57
    6136:	f8 49       	sbci	r31, 0x98	; 152
    6138:	80 89       	ldd	r24, Z+16	; 0x10
    613a:	81 30       	cpi	r24, 0x01	; 1
    613c:	09 f5       	brne	.+66     	; 0x6180 <lin_process_id+0x1e4>
                            {
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
    613e:	4a 2d       	mov	r20, r10
    6140:	60 e0       	ldi	r22, 0x00	; 0
    6142:	8b 2d       	mov	r24, r11
    6144:	0e 94 80 4c 	call	0x9900	; 0x9900 <lin_tl_callback_handler>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    6148:	82 e0       	ldi	r24, 0x02	; 2
    614a:	1d c0       	rjmp	.+58     	; 0x6186 <lin_process_id+0x1ea>
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
                            }
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
    614c:	4a 2d       	mov	r20, r10
    614e:	61 e0       	ldi	r22, 0x01	; 1
    6150:	8b 2d       	mov	r24, r11
    6152:	0e 94 80 4c 	call	0x9900	; 0x9900 <lin_tl_callback_handler>
    6156:	81 30       	cpi	r24, 0x01	; 1
    6158:	a9 f0       	breq	.+42     	; 0x6184 <lin_process_id+0x1e8>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    615a:	82 e0       	ldi	r24, 0x02	; 2
    615c:	14 c0       	rjmp	.+40     	; 0x6186 <lin_process_id+0x1ea>
                            }
                        }
                    }
                    else
                    {
                        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RECEIVE_MESSAGE, id);
    615e:	4a 2d       	mov	r20, r10
    6160:	67 e0       	ldi	r22, 0x07	; 7
    6162:	8b 2d       	mov	r24, r11
    6164:	0e 94 80 4c 	call	0x9900	; 0x9900 <lin_tl_callback_handler>
                        /* Rx response */
                        action = 1U;
    6168:	81 e0       	ldi	r24, 0x01	; 1
    616a:	0d c0       	rjmp	.+26     	; 0x6186 <lin_process_id+0x1ea>
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    l_u8 action = 0U;
    616c:	80 e0       	ldi	r24, 0x00	; 0
    616e:	0b c0       	rjmp	.+22     	; 0x6186 <lin_process_id+0x1ea>

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    if (0xFFU != frame_index)
    {
        action = 1U;
    6170:	81 e0       	ldi	r24, 0x01	; 1
    6172:	09 c0       	rjmp	.+18     	; 0x6186 <lin_process_id+0x1ea>
    6174:	81 e0       	ldi	r24, 0x01	; 1
    6176:	07 c0       	rjmp	.+14     	; 0x6186 <lin_process_id+0x1ea>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
                {
                    /* Rx response */
                    action = 1U;
    6178:	81 e0       	ldi	r24, 0x01	; 1
    617a:	05 c0       	rjmp	.+10     	; 0x6186 <lin_process_id+0x1ea>
                        action = 1U;
                    }
                }
                else
                {
                    action = 0U;
    617c:	80 e0       	ldi	r24, 0x00	; 0
    617e:	03 c0       	rjmp	.+6      	; 0x6186 <lin_process_id+0x1ea>
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
                    {
                        action = 2U;
    6180:	82 e0       	ldi	r24, 0x02	; 2
    6182:	01 c0       	rjmp	.+2      	; 0x6186 <lin_process_id+0x1ea>
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
                            {
                                action = 0U;
    6184:	80 e0       	ldi	r24, 0x00	; 0
                /* do nothing */
                break;
        }
    }

    switch (action)
    6186:	81 30       	cpi	r24, 0x01	; 1
    6188:	19 f0       	breq	.+6      	; 0x6190 <lin_process_id+0x1f4>
    618a:	82 30       	cpi	r24, 0x02	; 2
    618c:	41 f0       	breq	.+16     	; 0x619e <lin_process_id+0x202>
    618e:	0d c0       	rjmp	.+26     	; 0x61aa <lin_process_id+0x20e>
    {
        case 1U:
            /* Receive response */
            (void)lin_lld_rx_response(iii, lin_frame_ptr->frm_len);
    6190:	d8 01       	movw	r26, r16
    6192:	11 96       	adiw	r26, 0x01	; 1
    6194:	6c 91       	ld	r22, X
    6196:	8b 2d       	mov	r24, r11
    6198:	0e 94 ec 43 	call	0x87d8	; 0x87d8 <lin_lld_rx_response>
            break;
    619c:	09 c0       	rjmp	.+18     	; 0x61b0 <lin_process_id+0x214>
        case 2U:
            /* Set response */
            (void)lin_lld_set_response(iii, lin_frame_ptr->frm_len);
    619e:	f8 01       	movw	r30, r16
    61a0:	61 81       	ldd	r22, Z+1	; 0x01
    61a2:	8b 2d       	mov	r24, r11
    61a4:	0e 94 9c 43 	call	0x8738	; 0x8738 <lin_lld_set_response>
            break;
    61a8:	03 c0       	rjmp	.+6      	; 0x61b0 <lin_process_id+0x214>
        default:
            /* ignore response */
            (void)lin_lld_ignore_response(iii);
    61aa:	8b 2d       	mov	r24, r11
    61ac:	0e 94 74 43 	call	0x86e8	; 0x86e8 <lin_lld_ignore_response>
            break;
    }
}
    61b0:	0f 90       	pop	r0
    61b2:	df 91       	pop	r29
    61b4:	cf 91       	pop	r28
    61b6:	1f 91       	pop	r17
    61b8:	0f 91       	pop	r16
    61ba:	ff 90       	pop	r15
    61bc:	ef 90       	pop	r14
    61be:	df 90       	pop	r13
    61c0:	cf 90       	pop	r12
    61c2:	bf 90       	pop	r11
    61c4:	af 90       	pop	r10
    61c6:	08 95       	ret

000061c8 <lin_update_rx>:
 *
 * Implements    : lin_update_rx_Activity
 *END**************************************************************************/
static void lin_update_rx(l_ifc_handle iii,
                          l_u8 id)
{
    61c8:	df 92       	push	r13
    61ca:	ef 92       	push	r14
    61cc:	ff 92       	push	r15
    61ce:	0f 93       	push	r16
    61d0:	1f 93       	push	r17
    61d2:	cf 93       	push	r28
    61d4:	df 93       	push	r29
    61d6:	f8 2e       	mov	r15, r24
    61d8:	d6 2e       	mov	r13, r22
    l_u8 frame_index, flag_size, i, associate_id;
    l_u16 flag_offset;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    61da:	c8 2f       	mov	r28, r24
    61dc:	d0 e0       	ldi	r29, 0x00	; 0
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    61de:	86 e1       	ldi	r24, 0x16	; 22
    61e0:	8c 9f       	mul	r24, r28
    61e2:	f0 01       	movw	r30, r0
    61e4:	8d 9f       	mul	r24, r29
    61e6:	f0 0d       	add	r31, r0
    61e8:	11 24       	eor	r1, r1
    61ea:	e9 53       	subi	r30, 0x39	; 57
    61ec:	f8 49       	sbci	r31, 0x98	; 152
    61ee:	81 e0       	ldi	r24, 0x01	; 1
    61f0:	85 83       	std	Z+5, r24	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    61f2:	82 85       	ldd	r24, Z+10	; 0x0a
    61f4:	8f 3f       	cpi	r24, 0xFF	; 255
    61f6:	51 f0       	breq	.+20     	; 0x620c <lin_update_rx+0x44>
    {
        prot_state_ptr->num_of_processed_frame++; 
    61f8:	96 e1       	ldi	r25, 0x16	; 22
    61fa:	9c 9f       	mul	r25, r28
    61fc:	f0 01       	movw	r30, r0
    61fe:	9d 9f       	mul	r25, r29
    6200:	f0 0d       	add	r31, r0
    6202:	11 24       	eor	r1, r1
    6204:	e9 53       	subi	r30, 0x39	; 57
    6206:	f8 49       	sbci	r31, 0x98	; 152
    6208:	8f 5f       	subi	r24, 0xFF	; 255
    620a:	82 87       	std	Z+10, r24	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    620c:	86 e1       	ldi	r24, 0x16	; 22
    620e:	8c 9f       	mul	r24, r28
    6210:	f0 01       	movw	r30, r0
    6212:	8d 9f       	mul	r24, r29
    6214:	f0 0d       	add	r31, r0
    6216:	11 24       	eor	r1, r1
    6218:	e9 53       	subi	r30, 0x39	; 57
    621a:	f8 49       	sbci	r31, 0x98	; 152
    621c:	82 85       	ldd	r24, Z+10	; 0x0a
    621e:	82 30       	cpi	r24, 0x02	; 2
    6220:	a8 f0       	brcs	.+42     	; 0x624c <lin_update_rx+0x84>
    6222:	86 e1       	ldi	r24, 0x16	; 22
    6224:	8c 9f       	mul	r24, r28
    6226:	f0 01       	movw	r30, r0
    6228:	8d 9f       	mul	r24, r29
    622a:	f0 0d       	add	r31, r0
    622c:	11 24       	eor	r1, r1
    622e:	e9 53       	subi	r30, 0x39	; 57
    6230:	f8 49       	sbci	r31, 0x98	; 152
    6232:	83 85       	ldd	r24, Z+11	; 0x0b
    6234:	81 11       	cpse	r24, r1
    6236:	0a c0       	rjmp	.+20     	; 0x624c <lin_update_rx+0x84>
    {
        prot_state_ptr->overrun_flg = 1U;
    6238:	86 e1       	ldi	r24, 0x16	; 22
    623a:	8c 9f       	mul	r24, r28
    623c:	f0 01       	movw	r30, r0
    623e:	8d 9f       	mul	r24, r29
    6240:	f0 0d       	add	r31, r0
    6242:	11 24       	eor	r1, r1
    6244:	e9 53       	subi	r30, 0x39	; 57
    6246:	f8 49       	sbci	r31, 0x98	; 152
    6248:	81 e0       	ldi	r24, 0x01	; 1
    624a:	83 87       	std	Z+11, r24	; 0x0b
    }

    frame_index = lin_get_frame_index(iii, id);
    624c:	6d 2d       	mov	r22, r13
    624e:	8f 2d       	mov	r24, r15
    6250:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <lin_get_frame_index>
    6254:	e8 2e       	mov	r14, r24
    if (frame_index < LIN_NUM_OF_FRMS)
    6256:	83 e0       	ldi	r24, 0x03	; 3
    6258:	8e 15       	cp	r24, r14
    625a:	08 f4       	brcc	.+2      	; 0x625e <lin_update_rx+0x96>
    625c:	b4 c0       	rjmp	.+360    	; 0x63c6 <lin_update_rx+0x1fe>
    {
        /* This PID doesn't belong to this node */
        /* PID belongs to this node, then check type of frame */
        switch (prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    625e:	8c e1       	ldi	r24, 0x1C	; 28
    6260:	8c 9f       	mul	r24, r28
    6262:	f0 01       	movw	r30, r0
    6264:	8d 9f       	mul	r24, r29
    6266:	f0 0d       	add	r31, r0
    6268:	11 24       	eor	r1, r1
    626a:	e8 5b       	subi	r30, 0xB8	; 184
    626c:	fc 49       	sbci	r31, 0x9C	; 156
    626e:	06 81       	ldd	r16, Z+6	; 0x06
    6270:	17 81       	ldd	r17, Z+7	; 0x07
    6272:	8e 2d       	mov	r24, r14
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	fc 01       	movw	r30, r24
    6278:	ee 0f       	add	r30, r30
    627a:	ff 1f       	adc	r31, r31
    627c:	88 0f       	add	r24, r24
    627e:	99 1f       	adc	r25, r25
    6280:	88 0f       	add	r24, r24
    6282:	99 1f       	adc	r25, r25
    6284:	88 0f       	add	r24, r24
    6286:	99 1f       	adc	r25, r25
    6288:	e8 0f       	add	r30, r24
    628a:	f9 1f       	adc	r31, r25
    628c:	e0 0f       	add	r30, r16
    628e:	f1 1f       	adc	r31, r17
    6290:	80 81       	ld	r24, Z
    6292:	81 30       	cpi	r24, 0x01	; 1
    6294:	51 f0       	breq	.+20     	; 0x62aa <lin_update_rx+0xe2>
    6296:	18 f0       	brcs	.+6      	; 0x629e <lin_update_rx+0xd6>
    6298:	81 31       	cpi	r24, 0x11	; 17
    629a:	01 f1       	breq	.+64     	; 0x62dc <lin_update_rx+0x114>
    629c:	40 c0       	rjmp	.+128    	; 0x631e <lin_update_rx+0x156>
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                lin_process_uncd_frame(iii, id, UPDATE_UNCONDITIONAL_FRAME);
    629e:	41 e0       	ldi	r20, 0x01	; 1
    62a0:	6d 2d       	mov	r22, r13
    62a2:	8f 2d       	mov	r24, r15
    62a4:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <lin_process_uncd_frame>
                break;
    62a8:	3a c0       	rjmp	.+116    	; 0x631e <lin_update_rx+0x156>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                lin_update_rx_evnt_frame(iii, id);
    62aa:	6d 2d       	mov	r22, r13
    62ac:	8f 2d       	mov	r24, r15
    62ae:	0e 94 0c 33 	call	0x6618	; 0x6618 <lin_update_rx_evnt_frame>
                /* Recalculate frame_index by updating associate PID */
                associate_id = lin_process_parity(prot_state_ptr->response_buffer_ptr[0], CHECK_PARITY);
    62b2:	86 e1       	ldi	r24, 0x16	; 22
    62b4:	8c 9f       	mul	r24, r28
    62b6:	f0 01       	movw	r30, r0
    62b8:	8d 9f       	mul	r24, r29
    62ba:	f0 0d       	add	r31, r0
    62bc:	11 24       	eor	r1, r1
    62be:	e9 53       	subi	r30, 0x39	; 57
    62c0:	f8 49       	sbci	r31, 0x98	; 152
    62c2:	02 80       	ldd	r0, Z+2	; 0x02
    62c4:	f3 81       	ldd	r31, Z+3	; 0x03
    62c6:	e0 2d       	mov	r30, r0
    62c8:	61 e0       	ldi	r22, 0x01	; 1
    62ca:	80 81       	ld	r24, Z
    62cc:	0e 94 25 42 	call	0x844a	; 0x844a <lin_process_parity>
                frame_index = lin_get_frame_index(iii, associate_id);
    62d0:	68 2f       	mov	r22, r24
    62d2:	8f 2d       	mov	r24, r15
    62d4:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <lin_get_frame_index>
    62d8:	e8 2e       	mov	r14, r24
                break;
    62da:	21 c0       	rjmp	.+66     	; 0x631e <lin_update_rx+0x156>
            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                /* If goto sleep signal */
                if (0U == prot_state_ptr->response_buffer_ptr[0])
    62dc:	86 e1       	ldi	r24, 0x16	; 22
    62de:	8c 9f       	mul	r24, r28
    62e0:	f0 01       	movw	r30, r0
    62e2:	8d 9f       	mul	r24, r29
    62e4:	f0 0d       	add	r31, r0
    62e6:	11 24       	eor	r1, r1
    62e8:	e9 53       	subi	r30, 0x39	; 57
    62ea:	f8 49       	sbci	r31, 0x98	; 152
    62ec:	02 80       	ldd	r0, Z+2	; 0x02
    62ee:	f3 81       	ldd	r31, Z+3	; 0x03
    62f0:	e0 2d       	mov	r30, r0
    62f2:	80 81       	ld	r24, Z
    62f4:	81 11       	cpse	r24, r1
    62f6:	0e c0       	rjmp	.+28     	; 0x6314 <lin_update_rx+0x14c>
                {
                    /* In a slave node, set go to sleep flag in state structure */
                    prot_state_ptr->go_to_sleep_flg = true;
    62f8:	86 e1       	ldi	r24, 0x16	; 22
    62fa:	8c 9f       	mul	r24, r28
    62fc:	f0 01       	movw	r30, r0
    62fe:	8d 9f       	mul	r24, r29
    6300:	f0 0d       	add	r31, r0
    6302:	11 24       	eor	r1, r1
    6304:	e9 53       	subi	r30, 0x39	; 57
    6306:	f8 49       	sbci	r31, 0x98	; 152
    6308:	81 e0       	ldi	r24, 0x01	; 1
    630a:	87 83       	std	Z+7, r24	; 0x07
                    (void)lin_lld_set_low_power_mode(iii);
    630c:	8f 2d       	mov	r24, r15
    630e:	0e 94 88 43 	call	0x8710	; 0x8710 <lin_lld_set_low_power_mode>
    6312:	05 c0       	rjmp	.+10     	; 0x631e <lin_update_rx+0x156>
                }
                else
                {
                    /* Call transport layer callback to process TL_RX_COMPLETED event*/
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RX_COMPLETED, id);
    6314:	4d 2d       	mov	r20, r13
    6316:	63 e0       	ldi	r22, 0x03	; 3
    6318:	8f 2d       	mov	r24, r15
    631a:	0e 94 80 4c 	call	0x9900	; 0x9900 <lin_tl_callback_handler>
            default:
                /* do nothing */
                break;
        }

        if (frame_index < LIN_NUM_OF_FRMS)
    631e:	83 e0       	ldi	r24, 0x03	; 3
    6320:	8e 15       	cp	r24, r14
    6322:	78 f1       	brcs	.+94     	; 0x6382 <lin_update_rx+0x1ba>
        {
            /* Update rx frame flag */
            g_lin_frame_flag_handle_tbl[frame_index] = true;
    6324:	ee 2d       	mov	r30, r14
    6326:	f0 e0       	ldi	r31, 0x00	; 0
    6328:	ec 5c       	subi	r30, 0xCC	; 204
    632a:	f9 49       	sbci	r31, 0x99	; 153
    632c:	81 e0       	ldi	r24, 0x01	; 1
    632e:	80 83       	st	Z, r24

            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6330:	8c e1       	ldi	r24, 0x1C	; 28
    6332:	8c 9f       	mul	r24, r28
    6334:	f0 01       	movw	r30, r0
    6336:	8d 9f       	mul	r24, r29
    6338:	f0 0d       	add	r31, r0
    633a:	11 24       	eor	r1, r1
    633c:	e8 5b       	subi	r30, 0xB8	; 184
    633e:	fc 49       	sbci	r31, 0x9C	; 156
    6340:	83 81       	ldd	r24, Z+3	; 0x03
    6342:	81 11       	cpse	r24, r1
    6344:	1e c0       	rjmp	.+60     	; 0x6382 <lin_update_rx+0x1ba>
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
    6346:	8e 2d       	mov	r24, r14
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	fc 01       	movw	r30, r24
    634c:	ee 0f       	add	r30, r30
    634e:	ff 1f       	adc	r31, r31
    6350:	88 0f       	add	r24, r24
    6352:	99 1f       	adc	r25, r25
    6354:	88 0f       	add	r24, r24
    6356:	99 1f       	adc	r25, r25
    6358:	88 0f       	add	r24, r24
    635a:	99 1f       	adc	r25, r25
    635c:	e8 0f       	add	r30, r24
    635e:	f9 1f       	adc	r31, r25
    6360:	e0 0f       	add	r30, r16
    6362:	f1 1f       	adc	r31, r17
    6364:	25 81       	ldd	r18, Z+5	; 0x05
    6366:	36 81       	ldd	r19, Z+6	; 0x06
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
    6368:	47 81       	ldd	r20, Z+7	; 0x07
                for (i = 0U; i < flag_size; i++)
    636a:	80 e0       	ldi	r24, 0x00	; 0
    636c:	08 c0       	rjmp	.+16     	; 0x637e <lin_update_rx+0x1b6>
                {
                    g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    636e:	f9 01       	movw	r30, r18
    6370:	eb 52       	subi	r30, 0x2B	; 43
    6372:	ff 49       	sbci	r31, 0x9F	; 159
    6374:	9f ef       	ldi	r25, 0xFF	; 255
    6376:	90 83       	st	Z, r25
                    flag_offset++;
    6378:	2f 5f       	subi	r18, 0xFF	; 255
    637a:	3f 4f       	sbci	r19, 0xFF	; 255
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
                for (i = 0U; i < flag_size; i++)
    637c:	8f 5f       	subi	r24, 0xFF	; 255
    637e:	84 17       	cp	r24, r20
    6380:	b0 f3       	brcs	.-20     	; 0x636e <lin_update_rx+0x1a6>
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }

    #if (1U == SUPPORT_SLAVE_MODE)
        /* update word status */
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6382:	8c e1       	ldi	r24, 0x1C	; 28
    6384:	8c 9f       	mul	r24, r28
    6386:	f0 01       	movw	r30, r0
    6388:	8d 9f       	mul	r24, r29
    638a:	f0 0d       	add	r31, r0
    638c:	11 24       	eor	r1, r1
    638e:	e8 5b       	subi	r30, 0xB8	; 184
    6390:	fc 49       	sbci	r31, 0x9C	; 156
    6392:	83 81       	ldd	r24, Z+3	; 0x03
    6394:	81 11       	cpse	r24, r1
    6396:	17 c0       	rjmp	.+46     	; 0x63c6 <lin_update_rx+0x1fe>
        {
            if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    6398:	8c e1       	ldi	r24, 0x1C	; 28
    639a:	8c 9f       	mul	r24, r28
    639c:	f0 01       	movw	r30, r0
    639e:	8d 9f       	mul	r24, r29
    63a0:	f0 0d       	add	r31, r0
    63a2:	11 24       	eor	r1, r1
    63a4:	e8 5b       	subi	r30, 0xB8	; 184
    63a6:	fc 49       	sbci	r31, 0x9C	; 156
    63a8:	80 81       	ld	r24, Z
    63aa:	88 23       	and	r24, r24
    63ac:	11 f0       	breq	.+4      	; 0x63b2 <lin_update_rx+0x1ea>
    63ae:	83 30       	cpi	r24, 0x03	; 3
    63b0:	29 f4       	brne	.+10     	; 0x63bc <lin_update_rx+0x1f4>
            {
                lin_update_word_status_lin21(iii, LIN_LLD_RX_COMPLETED);
    63b2:	62 e0       	ldi	r22, 0x02	; 2
    63b4:	8f 2d       	mov	r24, r15
    63b6:	0e 94 34 32 	call	0x6468	; 0x6468 <lin_update_word_status_lin21>
    63ba:	05 c0       	rjmp	.+10     	; 0x63c6 <lin_update_rx+0x1fe>
            }
            else
            {
                if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_J2602)
    63bc:	81 30       	cpi	r24, 0x01	; 1
    63be:	19 f4       	brne	.+6      	; 0x63c6 <lin_update_rx+0x1fe>
                {
                    lin_update_word_status_j2602(iii);
    63c0:	8f 2d       	mov	r24, r15
    63c2:	0e 94 0a 32 	call	0x6414	; 0x6414 <lin_update_word_status_j2602>
                }
            }
        }
    #endif /* (1U == SUPPORT_SLAVE_MODE) */
    }
}
    63c6:	df 91       	pop	r29
    63c8:	cf 91       	pop	r28
    63ca:	1f 91       	pop	r17
    63cc:	0f 91       	pop	r16
    63ce:	ff 90       	pop	r15
    63d0:	ef 90       	pop	r14
    63d2:	df 90       	pop	r13
    63d4:	08 95       	ret

000063d6 <lin_pid_resp_callback_handler>:
 *END**************************************************************************/
void lin_pid_resp_callback_handler(l_ifc_handle iii,
                                   const lin_lld_event_id_t event_id,
                                   l_u8 id)
{
    switch (event_id)
    63d6:	62 30       	cpi	r22, 0x02	; 2
    63d8:	99 f0       	breq	.+38     	; 0x6400 <lin_pid_resp_callback_handler+0x2a>
    63da:	28 f4       	brcc	.+10     	; 0x63e6 <lin_pid_resp_callback_handler+0x10>
    63dc:	66 23       	and	r22, r22
    63de:	41 f0       	breq	.+16     	; 0x63f0 <lin_pid_resp_callback_handler+0x1a>
    63e0:	61 30       	cpi	r22, 0x01	; 1
    63e2:	51 f0       	breq	.+20     	; 0x63f8 <lin_pid_resp_callback_handler+0x22>
    63e4:	08 95       	ret
    63e6:	68 30       	cpi	r22, 0x08	; 8
    63e8:	90 f0       	brcs	.+36     	; 0x640e <lin_pid_resp_callback_handler+0x38>
    63ea:	68 30       	cpi	r22, 0x08	; 8
    63ec:	69 f0       	breq	.+26     	; 0x6408 <lin_pid_resp_callback_handler+0x32>
    63ee:	08 95       	ret
    {
        case LIN_LLD_PID_OK:
            lin_process_id(iii, id);
    63f0:	64 2f       	mov	r22, r20
    63f2:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <lin_process_id>
            break;
    63f6:	08 95       	ret
        case LIN_LLD_TX_COMPLETED:
            lin_update_tx(iii, id);
    63f8:	64 2f       	mov	r22, r20
    63fa:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <lin_update_tx>
            break;
    63fe:	08 95       	ret
        case LIN_LLD_RX_COMPLETED:
            lin_update_rx(iii, id);
    6400:	64 2f       	mov	r22, r20
    6402:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <lin_update_rx>
            break;
    6406:	08 95       	ret
        case LIN_LLD_BUS_ACTIVITY_TIMEOUT:
            lin_bus_activity_timeout(iii);
    6408:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <lin_bus_activity_timeout>
            break;
    640c:	08 95       	ret
        case LIN_LLD_PID_ERR:
        case LIN_LLD_FRAME_ERR:
        case LIN_LLD_CHECKSUM_ERR:
        case LIN_LLD_READBACK_ERR:
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
    640e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <lin_handle_error>
    6412:	08 95       	ret

00006414 <lin_update_word_status_j2602>:
{
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 overrun_flg;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6414:	28 2f       	mov	r18, r24
    6416:	30 e0       	ldi	r19, 0x00	; 0

    err_in_res = prot_state_ptr->error_in_response;
    6418:	86 e1       	ldi	r24, 0x16	; 22
    641a:	82 9f       	mul	r24, r18
    641c:	d0 01       	movw	r26, r0
    641e:	83 9f       	mul	r24, r19
    6420:	b0 0d       	add	r27, r0
    6422:	11 24       	eor	r1, r1
    6424:	fd 01       	movw	r30, r26
    6426:	e9 53       	subi	r30, 0x39	; 57
    6428:	f8 49       	sbci	r31, 0x98	; 152
    642a:	46 81       	ldd	r20, Z+6	; 0x06
    prot_state_ptr->error_in_response = 0;
    642c:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    642e:	85 81       	ldd	r24, Z+5	; 0x05
    overrun_flg = prot_state_ptr->overrun_flg;
    6430:	53 85       	ldd	r21, Z+11	; 0x0b

    word_status_ptr = &prot_state_ptr->word_status;

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    6432:	ad 52       	subi	r26, 0x2D	; 45
    6434:	b8 49       	sbci	r27, 0x98	; 152
    6436:	9c 91       	ld	r25, X
    6438:	69 2f       	mov	r22, r25
    643a:	61 70       	andi	r22, 0x01	; 1
    643c:	46 2b       	or	r20, r22
    643e:	40 fb       	bst	r20, 0
    6440:	90 f9       	bld	r25, 0
    word_status_ptr->successful_transfer |= suc_in_tras;
    6442:	91 fb       	bst	r25, 1
    6444:	44 27       	eor	r20, r20
    6446:	40 f9       	bld	r20, 0
    6448:	84 2b       	or	r24, r20
    644a:	80 fb       	bst	r24, 0
    644c:	91 f9       	bld	r25, 1


    word_status_ptr->overrun = overrun_flg;
    644e:	50 fb       	bst	r21, 0
    6450:	92 f9       	bld	r25, 2
    6452:	9c 93       	st	X, r25
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    6454:	81 85       	ldd	r24, Z+9	; 0x09
    6456:	85 87       	std	Z+13, r24	; 0x0d

    if(prot_state_ptr->go_to_sleep_flg == true)
    6458:	87 81       	ldd	r24, Z+7	; 0x07
    645a:	88 23       	and	r24, r24
    645c:	21 f0       	breq	.+8      	; 0x6466 <lin_update_word_status_j2602+0x52>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    645e:	fd 01       	movw	r30, r26
    6460:	89 2f       	mov	r24, r25
    6462:	88 60       	ori	r24, 0x08	; 8
    6464:	80 83       	st	Z, r24
    6466:	08 95       	ret

00006468 <lin_update_word_status_lin21>:
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 save_config;
    l_u8 overrun_flag;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6468:	28 2f       	mov	r18, r24
    646a:	30 e0       	ldi	r19, 0x00	; 0
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_master_data_t * master_data_ptr;
    l_u8 active_schedule_id;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    err_in_res = prot_state_ptr->error_in_response;
    646c:	86 e1       	ldi	r24, 0x16	; 22
    646e:	82 9f       	mul	r24, r18
    6470:	f0 01       	movw	r30, r0
    6472:	83 9f       	mul	r24, r19
    6474:	f0 0d       	add	r31, r0
    6476:	11 24       	eor	r1, r1
    6478:	e9 53       	subi	r30, 0x39	; 57
    647a:	f8 49       	sbci	r31, 0x98	; 152
    647c:	46 81       	ldd	r20, Z+6	; 0x06
    prot_state_ptr->error_in_response = 0;
    647e:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    6480:	85 81       	ldd	r24, Z+5	; 0x05
    /* use of ternary operator below is for being MISRA compliant */
    save_config = (l_u8)(prot_state_ptr->save_config_flg ? 1U : 0U);
    6482:	97 85       	ldd	r25, Z+15	; 0x0f
    6484:	99 23       	and	r25, r25
    6486:	11 f0       	breq	.+4      	; 0x648c <lin_update_word_status_lin21+0x24>
    6488:	51 e0       	ldi	r21, 0x01	; 1
    648a:	01 c0       	rjmp	.+2      	; 0x648e <lin_update_word_status_lin21+0x26>
    648c:	50 e0       	ldi	r21, 0x00	; 0
    overrun_flag = prot_state_ptr->overrun_flg;
    648e:	96 e1       	ldi	r25, 0x16	; 22
    6490:	92 9f       	mul	r25, r18
    6492:	f0 01       	movw	r30, r0
    6494:	93 9f       	mul	r25, r19
    6496:	f0 0d       	add	r31, r0
    6498:	11 24       	eor	r1, r1
    649a:	df 01       	movw	r26, r30
    649c:	a9 53       	subi	r26, 0x39	; 57
    649e:	b8 49       	sbci	r27, 0x98	; 152
    64a0:	1b 96       	adiw	r26, 0x0b	; 11
    64a2:	7c 91       	ld	r23, X
    64a4:	1b 97       	sbiw	r26, 0x0b	; 11

    word_status_ptr = &prot_state_ptr->word_status;
    word_status_ptr->overrun = overrun_flag;
    64a6:	ed 52       	subi	r30, 0x2D	; 45
    64a8:	f8 49       	sbci	r31, 0x98	; 152
    64aa:	90 81       	ld	r25, Z
    64ac:	70 fb       	bst	r23, 0
    64ae:	92 f9       	bld	r25, 2

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    64b0:	79 2f       	mov	r23, r25
    64b2:	71 70       	andi	r23, 0x01	; 1
    64b4:	47 2b       	or	r20, r23
    64b6:	40 fb       	bst	r20, 0
    64b8:	90 f9       	bld	r25, 0
    word_status_ptr->successful_transfer |= suc_in_tras;
    64ba:	91 fb       	bst	r25, 1
    64bc:	44 27       	eor	r20, r20
    64be:	40 f9       	bld	r20, 0
    64c0:	84 2b       	or	r24, r20
    64c2:	80 fb       	bst	r24, 0
    64c4:	91 f9       	bld	r25, 1
    64c6:	90 83       	st	Z, r25
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    64c8:	19 96       	adiw	r26, 0x09	; 9
    64ca:	8c 91       	ld	r24, X
    64cc:	19 97       	sbiw	r26, 0x09	; 9
    64ce:	1d 96       	adiw	r26, 0x0d	; 13
    64d0:	8c 93       	st	X, r24
    64d2:	1d 97       	sbiw	r26, 0x0d	; 13

    if(prot_state_ptr->go_to_sleep_flg == true)
    64d4:	17 96       	adiw	r26, 0x07	; 7
    64d6:	8c 91       	ld	r24, X
    64d8:	88 23       	and	r24, r24
    64da:	59 f0       	breq	.+22     	; 0x64f2 <lin_update_word_status_lin21+0x8a>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    64dc:	86 e1       	ldi	r24, 0x16	; 22
    64de:	82 9f       	mul	r24, r18
    64e0:	f0 01       	movw	r30, r0
    64e2:	83 9f       	mul	r24, r19
    64e4:	f0 0d       	add	r31, r0
    64e6:	11 24       	eor	r1, r1
    64e8:	ed 52       	subi	r30, 0x2D	; 45
    64ea:	f8 49       	sbci	r31, 0x98	; 152
    64ec:	89 2f       	mov	r24, r25
    64ee:	88 60       	ori	r24, 0x08	; 8
    64f0:	80 83       	st	Z, r24
    }

    if(LIN_LLD_BUS_ACTIVITY_TIMEOUT != event_id)
    64f2:	68 30       	cpi	r22, 0x08	; 8
    64f4:	59 f0       	breq	.+22     	; 0x650c <lin_update_word_status_lin21+0xa4>
    {
        /* Set bus activity timeout */
        word_status_ptr->bus_activity = 1U;
    64f6:	86 e1       	ldi	r24, 0x16	; 22
    64f8:	82 9f       	mul	r24, r18
    64fa:	f0 01       	movw	r30, r0
    64fc:	83 9f       	mul	r24, r19
    64fe:	f0 0d       	add	r31, r0
    6500:	11 24       	eor	r1, r1
    6502:	ed 52       	subi	r30, 0x2D	; 45
    6504:	f8 49       	sbci	r31, 0x98	; 152
    6506:	80 81       	ld	r24, Z
    6508:	80 61       	ori	r24, 0x10	; 16
    650a:	80 83       	st	Z, r24
    }
    else
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* For Slave node - using ternary operator is a workaround for MISRA */
        word_status_ptr->event_trigger_collision_flg = 0U;
    650c:	86 e1       	ldi	r24, 0x16	; 22
    650e:	82 9f       	mul	r24, r18
    6510:	f0 01       	movw	r30, r0
    6512:	83 9f       	mul	r24, r19
    6514:	f0 0d       	add	r31, r0
    6516:	11 24       	eor	r1, r1
    6518:	ed 52       	subi	r30, 0x2D	; 45
    651a:	f8 49       	sbci	r31, 0x98	; 152
    651c:	80 81       	ld	r24, Z
        /* Updated save configuration value to word status */
        word_status_ptr->save_config_flg = save_config;
    651e:	8f 7d       	andi	r24, 0xDF	; 223
    6520:	50 fb       	bst	r21, 0
    6522:	86 f9       	bld	r24, 6
        word_status_ptr->reserved = 0U;
    6524:	8f 77       	andi	r24, 0x7F	; 127
    6526:	80 83       	st	Z, r24
    6528:	08 95       	ret

0000652a <lin_update_err_signal>:
 *
 * Implements    : lin_update_err_signal_Activity
 *END**************************************************************************/
void lin_update_err_signal(l_ifc_handle iii,
                           l_u8 frm_id)
{
    652a:	1f 93       	push	r17
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
    l_u8 i;
    const l_u16* byte_offset_temp_ptr;
    const l_u8* bit_offset_temp_ptr;
    l_u8 err_in_res = g_lin_protocol_state_array[iii].error_in_response;
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	26 e1       	ldi	r18, 0x16	; 22
    6534:	28 9f       	mul	r18, r24
    6536:	f0 01       	movw	r30, r0
    6538:	29 9f       	mul	r18, r25
    653a:	f0 0d       	add	r31, r0
    653c:	11 24       	eor	r1, r1
    653e:	e9 53       	subi	r30, 0x39	; 57
    6540:	f8 49       	sbci	r31, 0x98	; 152
    6542:	16 81       	ldd	r17, Z+6	; 0x06
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    6544:	2c e1       	ldi	r18, 0x1C	; 28
    6546:	28 9f       	mul	r18, r24
    6548:	f0 01       	movw	r30, r0
    654a:	29 9f       	mul	r18, r25
    654c:	f0 0d       	add	r31, r0
    654e:	11 24       	eor	r1, r1
    6550:	e8 5b       	subi	r30, 0xB8	; 184
    6552:	fc 49       	sbci	r31, 0x9C	; 156
    6554:	42 89       	ldd	r20, Z+18	; 0x12
    6556:	50 e0       	ldi	r21, 0x00	; 0

    if (frm_id < LIN_NUM_OF_FRMS)
    6558:	64 30       	cpi	r22, 0x04	; 4
    655a:	08 f0       	brcs	.+2      	; 0x655e <lin_update_err_signal+0x34>
    655c:	59 c0       	rjmp	.+178    	; 0x6610 <lin_update_err_signal+0xe6>
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    655e:	28 9f       	mul	r18, r24
    6560:	f0 01       	movw	r30, r0
    6562:	29 9f       	mul	r18, r25
    6564:	f0 0d       	add	r31, r0
    6566:	11 24       	eor	r1, r1
    6568:	e8 5b       	subi	r30, 0xB8	; 184
    656a:	fc 49       	sbci	r31, 0x9C	; 156
    656c:	86 81       	ldd	r24, Z+6	; 0x06
    656e:	97 81       	ldd	r25, Z+7	; 0x07
    6570:	70 e0       	ldi	r23, 0x00	; 0
    6572:	fb 01       	movw	r30, r22
    6574:	ee 0f       	add	r30, r30
    6576:	ff 1f       	adc	r31, r31
    6578:	66 0f       	add	r22, r22
    657a:	77 1f       	adc	r23, r23
    657c:	66 0f       	add	r22, r22
    657e:	77 1f       	adc	r23, r23
    6580:	66 0f       	add	r22, r22
    6582:	77 1f       	adc	r23, r23
    6584:	6e 0f       	add	r22, r30
    6586:	7f 1f       	adc	r23, r31
    6588:	fc 01       	movw	r30, r24
    658a:	e6 0f       	add	r30, r22
    658c:	f7 1f       	adc	r31, r23
    658e:	80 81       	ld	r24, Z
    6590:	81 30       	cpi	r24, 0x01	; 1
    6592:	91 f5       	brne	.+100    	; 0x65f8 <lin_update_err_signal+0xce>
    6594:	3d c0       	rjmp	.+122    	; 0x6610 <lin_update_err_signal+0xe6>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
    6596:	84 e2       	ldi	r24, 0x24	; 36
    6598:	84 9f       	mul	r24, r20
    659a:	f0 01       	movw	r30, r0
    659c:	85 9f       	mul	r24, r21
    659e:	f0 0d       	add	r31, r0
    65a0:	11 24       	eor	r1, r1
    65a2:	ec 59       	subi	r30, 0x9C	; 156
    65a4:	fc 49       	sbci	r31, 0x9C	; 156
    65a6:	a0 89       	ldd	r26, Z+16	; 0x10
    65a8:	b1 89       	ldd	r27, Z+17	; 0x11
    65aa:	86 2f       	mov	r24, r22
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	9c 01       	movw	r18, r24
    65b0:	22 0f       	add	r18, r18
    65b2:	33 1f       	adc	r19, r19
    65b4:	2a 0f       	add	r18, r26
    65b6:	3b 1f       	adc	r19, r27
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
    65b8:	a2 89       	ldd	r26, Z+18	; 0x12
    65ba:	b3 89       	ldd	r27, Z+19	; 0x13
    65bc:	a8 0f       	add	r26, r24
    65be:	b9 1f       	adc	r27, r25
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    65c0:	e9 01       	movw	r28, r18
    65c2:	e8 81       	ld	r30, Y
    65c4:	f9 81       	ldd	r31, Y+1	; 0x01
    65c6:	e8 52       	subi	r30, 0x28	; 40
    65c8:	ff 49       	sbci	r31, 0x9F	; 159
    65ca:	70 81       	ld	r23, Z
    65cc:	ac 91       	ld	r26, X
    65ce:	21 e0       	ldi	r18, 0x01	; 1
    65d0:	30 e0       	ldi	r19, 0x00	; 0
    65d2:	0a 2e       	mov	r0, r26
    65d4:	02 c0       	rjmp	.+4      	; 0x65da <lin_update_err_signal+0xb0>
    65d6:	22 0f       	add	r18, r18
    65d8:	33 1f       	adc	r19, r19
    65da:	0a 94       	dec	r0
    65dc:	e2 f7       	brpl	.-8      	; 0x65d6 <lin_update_err_signal+0xac>
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
    65de:	81 2f       	mov	r24, r17
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	02 c0       	rjmp	.+4      	; 0x65e8 <lin_update_err_signal+0xbe>
    65e4:	88 0f       	add	r24, r24
    65e6:	99 1f       	adc	r25, r25
    65e8:	aa 95       	dec	r26
    65ea:	e2 f7       	brpl	.-8      	; 0x65e4 <lin_update_err_signal+0xba>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    65ec:	20 95       	com	r18
    65ee:	27 23       	and	r18, r23
    65f0:	82 2b       	or	r24, r18
    65f2:	80 83       	st	Z, r24
    if (frm_id < LIN_NUM_OF_FRMS)
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
    65f4:	6f 5f       	subi	r22, 0xFF	; 255
    65f6:	01 c0       	rjmp	.+2      	; 0x65fa <lin_update_err_signal+0xd0>
    65f8:	60 e0       	ldi	r22, 0x00	; 0
    65fa:	84 e2       	ldi	r24, 0x24	; 36
    65fc:	84 9f       	mul	r24, r20
    65fe:	f0 01       	movw	r30, r0
    6600:	85 9f       	mul	r24, r21
    6602:	f0 0d       	add	r31, r0
    6604:	11 24       	eor	r1, r1
    6606:	ec 59       	subi	r30, 0x9C	; 156
    6608:	fc 49       	sbci	r31, 0x9C	; 156
    660a:	86 85       	ldd	r24, Z+14	; 0x0e
    660c:	68 17       	cp	r22, r24
    660e:	18 f2       	brcs	.-122    	; 0x6596 <lin_update_err_signal+0x6c>
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
            }
        }
    }
}
    6610:	df 91       	pop	r29
    6612:	cf 91       	pop	r28
    6614:	1f 91       	pop	r17
    6616:	08 95       	ret

00006618 <lin_update_rx_evnt_frame>:
 *
 * Implements    : lin_update_rx_evnt_frame_Activity
 *END**************************************************************************/
void lin_update_rx_evnt_frame(l_ifc_handle iii,
                              l_u8 pid)
{
    6618:	cf 92       	push	r12
    661a:	df 92       	push	r13
    661c:	ef 92       	push	r14
    661e:	ff 92       	push	r15
    6620:	0f 93       	push	r16
    6622:	1f 93       	push	r17
    6624:	cf 93       	push	r28
    6626:	df 93       	push	r29
    6628:	18 2f       	mov	r17, r24
    const lin_associate_frame_t * ptr;
    l_u8 frame_index, i, associate_id;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    662a:	c8 2f       	mov	r28, r24
    662c:	d0 e0       	ldi	r29, 0x00	; 0

    /* Get frame index of the event trigger frame */
    frame_index = lin_get_frame_index(iii, pid);
    662e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <lin_get_frame_index>
    6632:	08 2f       	mov	r16, r24

    if (0xFFU != frame_index) /* This PID doesn't belong to this node */
    6634:	8f 3f       	cpi	r24, 0xFF	; 255
    6636:	09 f4       	brne	.+2      	; 0x663a <lin_update_rx_evnt_frame+0x22>
    6638:	56 c0       	rjmp	.+172    	; 0x66e6 <lin_update_rx_evnt_frame+0xce>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
    663a:	86 e1       	ldi	r24, 0x16	; 22
    663c:	8c 9f       	mul	r24, r28
    663e:	f0 01       	movw	r30, r0
    6640:	8d 9f       	mul	r24, r29
    6642:	f0 0d       	add	r31, r0
    6644:	11 24       	eor	r1, r1
    6646:	e9 53       	subi	r30, 0x39	; 57
    6648:	f8 49       	sbci	r31, 0x98	; 152
    664a:	02 80       	ldd	r0, Z+2	; 0x02
    664c:	f3 81       	ldd	r31, Z+3	; 0x03
    664e:	e0 2d       	mov	r30, r0
    6650:	61 e0       	ldi	r22, 0x01	; 1
    6652:	80 81       	ld	r24, Z
    6654:	0e 94 25 42 	call	0x844a	; 0x844a <lin_process_parity>
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;
    6658:	9c e1       	ldi	r25, 0x1C	; 28
    665a:	9c 9f       	mul	r25, r28
    665c:	f0 01       	movw	r30, r0
    665e:	9d 9f       	mul	r25, r29
    6660:	f0 0d       	add	r31, r0
    6662:	11 24       	eor	r1, r1
    6664:	e8 5b       	subi	r30, 0xB8	; 184
    6666:	fc 49       	sbci	r31, 0x9C	; 156
    6668:	46 81       	ldd	r20, Z+6	; 0x06
    666a:	57 81       	ldd	r21, Z+7	; 0x07
    666c:	20 2f       	mov	r18, r16
    666e:	30 e0       	ldi	r19, 0x00	; 0
    6670:	f9 01       	movw	r30, r18
    6672:	ee 0f       	add	r30, r30
    6674:	ff 1f       	adc	r31, r31
    6676:	22 0f       	add	r18, r18
    6678:	33 1f       	adc	r19, r19
    667a:	22 0f       	add	r18, r18
    667c:	33 1f       	adc	r19, r19
    667e:	22 0f       	add	r18, r18
    6680:	33 1f       	adc	r19, r19
    6682:	2e 0f       	add	r18, r30
    6684:	3f 1f       	adc	r19, r31
    6686:	fa 01       	movw	r30, r20
    6688:	e2 0f       	add	r30, r18
    668a:	f3 1f       	adc	r31, r19
    668c:	e0 84       	ldd	r14, Z+8	; 0x08
    668e:	f1 84       	ldd	r15, Z+9	; 0x09

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    6690:	20 e0       	ldi	r18, 0x00	; 0
    6692:	25 c0       	rjmp	.+74     	; 0x66de <lin_update_rx_evnt_frame+0xc6>
        {
            /* First byte of response for event trigger is the PID of the associate frame */
            if (prot_user_config_ptr->list_identifiers_RAM_ptr[((l_u8)ptr->associated_uncond_frame_ptr[i] - prot_user_config_ptr->frame_start) + 1U] == associate_id)
    6694:	9c e1       	ldi	r25, 0x1C	; 28
    6696:	9c 9f       	mul	r25, r28
    6698:	d0 01       	movw	r26, r0
    669a:	9d 9f       	mul	r25, r29
    669c:	b0 0d       	add	r27, r0
    669e:	11 24       	eor	r1, r1
    66a0:	a8 5b       	subi	r26, 0xB8	; 184
    66a2:	bc 49       	sbci	r27, 0x9C	; 156
    66a4:	1a 96       	adiw	r26, 0x0a	; 10
    66a6:	cd 90       	ld	r12, X+
    66a8:	dc 90       	ld	r13, X
    66aa:	1b 97       	sbiw	r26, 0x0b	; 11
    66ac:	f7 01       	movw	r30, r14
    66ae:	41 81       	ldd	r20, Z+1	; 0x01
    66b0:	52 81       	ldd	r21, Z+2	; 0x02
    66b2:	fa 01       	movw	r30, r20
    66b4:	e2 0f       	add	r30, r18
    66b6:	f1 1d       	adc	r31, r1
    66b8:	90 81       	ld	r25, Z
    66ba:	15 96       	adiw	r26, 0x05	; 5
    66bc:	3c 91       	ld	r19, X
    66be:	e9 2f       	mov	r30, r25
    66c0:	f0 e0       	ldi	r31, 0x00	; 0
    66c2:	e3 1b       	sub	r30, r19
    66c4:	f1 09       	sbc	r31, r1
    66c6:	ec 0d       	add	r30, r12
    66c8:	fd 1d       	adc	r31, r13
    66ca:	91 81       	ldd	r25, Z+1	; 0x01
    66cc:	89 13       	cpse	r24, r25
    66ce:	06 c0       	rjmp	.+12     	; 0x66dc <lin_update_rx_evnt_frame+0xc4>
            {
                /* Update unconditional frame */
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
    66d0:	41 e0       	ldi	r20, 0x01	; 1
    66d2:	68 2f       	mov	r22, r24
    66d4:	81 2f       	mov	r24, r17
    66d6:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <lin_process_uncd_frame>
                break;
    66da:	05 c0       	rjmp	.+10     	; 0x66e6 <lin_update_rx_evnt_frame+0xce>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    66dc:	2f 5f       	subi	r18, 0xFF	; 255
    66de:	f7 01       	movw	r30, r14
    66e0:	90 81       	ld	r25, Z
    66e2:	29 17       	cp	r18, r25
    66e4:	b8 f2       	brcs	.-82     	; 0x6694 <lin_update_rx_evnt_frame+0x7c>
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
                break;
            }
        }
    }
}
    66e6:	df 91       	pop	r29
    66e8:	cf 91       	pop	r28
    66ea:	1f 91       	pop	r17
    66ec:	0f 91       	pop	r16
    66ee:	ff 90       	pop	r15
    66f0:	ef 90       	pop	r14
    66f2:	df 90       	pop	r13
    66f4:	cf 90       	pop	r12
    66f6:	08 95       	ret

000066f8 <lin_make_res_evnt_frame>:
 *
 * Implements    : lin_make_res_evnt_frame_Activity
 *END**************************************************************************/
void lin_make_res_evnt_frame(l_ifc_handle iii,
                             l_u8 pid)
{
    66f8:	0f 93       	push	r16
    66fa:	1f 93       	push	r17
    66fc:	cf 93       	push	r28
    66fe:	df 93       	push	r29
    6700:	c8 2f       	mov	r28, r24
    6702:	d6 2f       	mov	r29, r22
    /* Create response */
    lin_process_uncd_frame(iii, pid, MAKE_UNCONDITIONAL_FRAME);
    6704:	40 e0       	ldi	r20, 0x00	; 0
    6706:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <lin_process_uncd_frame>
    /* Set associate PID */
    g_lin_protocol_state_array[iii].response_buffer_ptr[0] = lin_process_parity(pid, MAKE_PARITY);
    670a:	86 e1       	ldi	r24, 0x16	; 22
    670c:	c8 9f       	mul	r28, r24
    670e:	f0 01       	movw	r30, r0
    6710:	11 24       	eor	r1, r1
    6712:	e9 53       	subi	r30, 0x39	; 57
    6714:	f8 49       	sbci	r31, 0x98	; 152
    6716:	02 81       	ldd	r16, Z+2	; 0x02
    6718:	13 81       	ldd	r17, Z+3	; 0x03
    671a:	60 e0       	ldi	r22, 0x00	; 0
    671c:	8d 2f       	mov	r24, r29
    671e:	0e 94 25 42 	call	0x844a	; 0x844a <lin_process_parity>
    6722:	f8 01       	movw	r30, r16
    6724:	80 83       	st	Z, r24
}
    6726:	df 91       	pop	r29
    6728:	cf 91       	pop	r28
    672a:	1f 91       	pop	r17
    672c:	0f 91       	pop	r16
    672e:	08 95       	ret

00006730 <ld_make_slave_response_pdu>:
        /* Get current configuration */
        service_flag = node_attr_ptr->service_flags_ptr;

        if (flag_order < node_attr_ptr->number_support_sid)
        {
            service_flag[flag_order] = 0U;
    6730:	af 92       	push	r10
    6732:	bf 92       	push	r11
    6734:	cf 92       	push	r12
    6736:	df 92       	push	r13
    6738:	ef 92       	push	r14
    673a:	ff 92       	push	r15
    673c:	0f 93       	push	r16
    673e:	1f 93       	push	r17
    6740:	cf 93       	push	r28
    6742:	df 93       	push	r29
    6744:	cd b7       	in	r28, 0x3d	; 61
    6746:	de b7       	in	r29, 0x3e	; 62
    6748:	2d 97       	sbiw	r28, 0x0d	; 13
    674a:	cd bf       	out	0x3d, r28	; 61
    674c:	de bf       	out	0x3e, r29	; 62
    674e:	08 2f       	mov	r16, r24
    6750:	10 e0       	ldi	r17, 0x00	; 0
    6752:	9c e1       	ldi	r25, 0x1C	; 28
    6754:	90 9f       	mul	r25, r16
    6756:	f0 01       	movw	r30, r0
    6758:	91 9f       	mul	r25, r17
    675a:	f0 0d       	add	r31, r0
    675c:	11 24       	eor	r1, r1
    675e:	e8 5b       	subi	r30, 0xB8	; 184
    6760:	fc 49       	sbci	r31, 0x9C	; 156
    6762:	e2 88       	ldd	r14, Z+18	; 0x12
    6764:	f1 2c       	mov	r15, r1
    6766:	94 e3       	ldi	r25, 0x34	; 52
    6768:	90 9f       	mul	r25, r16
    676a:	d0 01       	movw	r26, r0
    676c:	91 9f       	mul	r25, r17
    676e:	b0 0d       	add	r27, r0
    6770:	11 24       	eor	r1, r1
    6772:	ad 56       	subi	r26, 0x6D	; 109
    6774:	b8 49       	sbci	r27, 0x98	; 152
    6776:	54 96       	adiw	r26, 0x14	; 20
    6778:	cd 90       	ld	r12, X+
    677a:	dc 90       	ld	r13, X
    677c:	55 97       	sbiw	r26, 0x15	; 21
    677e:	1b 96       	adiw	r26, 0x0b	; 11
    6780:	ed 91       	ld	r30, X+
    6782:	fc 91       	ld	r31, X
    6784:	1c 97       	sbiw	r26, 0x0c	; 12
    6786:	ee 0f       	add	r30, r30
    6788:	ff 1f       	adc	r31, r31
    678a:	ee 0f       	add	r30, r30
    678c:	ff 1f       	adc	r31, r31
    678e:	ee 0f       	add	r30, r30
    6790:	ff 1f       	adc	r31, r31
    6792:	ec 0d       	add	r30, r12
    6794:	fd 1d       	adc	r31, r13
    6796:	90 81       	ld	r25, Z
    6798:	9e 37       	cpi	r25, 0x7E	; 126
    679a:	09 f4       	brne	.+2      	; 0x679e <ld_make_slave_response_pdu+0x6e>
    679c:	d8 c0       	rjmp	.+432    	; 0x694e <ld_make_slave_response_pdu+0x21e>
    679e:	d8 2e       	mov	r13, r24
    67a0:	84 e2       	ldi	r24, 0x24	; 36
    67a2:	8e 9d       	mul	r24, r14
    67a4:	d0 01       	movw	r26, r0
    67a6:	8f 9d       	mul	r24, r15
    67a8:	b0 0d       	add	r27, r0
    67aa:	11 24       	eor	r1, r1
    67ac:	ac 59       	subi	r26, 0x9C	; 156
    67ae:	bc 49       	sbci	r27, 0x9C	; 156
    67b0:	ad 90       	ld	r10, X+
    67b2:	bc 90       	ld	r11, X
    67b4:	d5 01       	movw	r26, r10
    67b6:	8c 91       	ld	r24, X
    67b8:	89 83       	std	Y+1, r24	; 0x01
    67ba:	83 e0       	ldi	r24, 0x03	; 3
    67bc:	8a 83       	std	Y+2, r24	; 0x02
    67be:	8f e7       	ldi	r24, 0x7F	; 127
    67c0:	8b 83       	std	Y+3, r24	; 0x03
    67c2:	6c 83       	std	Y+4, r22	; 0x04
    67c4:	2d 83       	std	Y+5, r18	; 0x05
    67c6:	9f ef       	ldi	r25, 0xFF	; 255
    67c8:	9e 83       	std	Y+6, r25	; 0x06
    67ca:	9f 83       	std	Y+7, r25	; 0x07
    67cc:	98 87       	std	Y+8, r25	; 0x08
    67ce:	62 3b       	cpi	r22, 0xB2	; 178
    67d0:	91 f0       	breq	.+36     	; 0x67f6 <ld_make_slave_response_pdu+0xc6>
    67d2:	38 f4       	brcc	.+14     	; 0x67e2 <ld_make_slave_response_pdu+0xb2>
    67d4:	60 3b       	cpi	r22, 0xB0	; 176
    67d6:	09 f4       	brne	.+2      	; 0x67da <ld_make_slave_response_pdu+0xaa>
    67d8:	79 c0       	rjmp	.+242    	; 0x68cc <ld_make_slave_response_pdu+0x19c>
    67da:	61 3b       	cpi	r22, 0xB1	; 177
    67dc:	09 f4       	brne	.+2      	; 0x67e0 <ld_make_slave_response_pdu+0xb0>
    67de:	6b c0       	rjmp	.+214    	; 0x68b6 <ld_make_slave_response_pdu+0x186>
    67e0:	a5 c0       	rjmp	.+330    	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    67e2:	66 3b       	cpi	r22, 0xB6	; 182
    67e4:	09 f4       	brne	.+2      	; 0x67e8 <ld_make_slave_response_pdu+0xb8>
    67e6:	91 c0       	rjmp	.+290    	; 0x690a <ld_make_slave_response_pdu+0x1da>
    67e8:	67 3b       	cpi	r22, 0xB7	; 183
    67ea:	09 f4       	brne	.+2      	; 0x67ee <ld_make_slave_response_pdu+0xbe>
    67ec:	96 c0       	rjmp	.+300    	; 0x691a <ld_make_slave_response_pdu+0x1ea>
    67ee:	63 3b       	cpi	r22, 0xB3	; 179
    67f0:	09 f0       	breq	.+2      	; 0x67f4 <ld_make_slave_response_pdu+0xc4>
    67f2:	9c c0       	rjmp	.+312    	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    67f4:	82 c0       	rjmp	.+260    	; 0x68fa <ld_make_slave_response_pdu+0x1ca>
    67f6:	41 30       	cpi	r20, 0x01	; 1
    67f8:	09 f0       	breq	.+2      	; 0x67fc <ld_make_slave_response_pdu+0xcc>
    67fa:	98 c0       	rjmp	.+304    	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    67fc:	86 e0       	ldi	r24, 0x06	; 6
    67fe:	8a 83       	std	Y+2, r24	; 0x02
    6800:	60 5c       	subi	r22, 0xC0	; 192
    6802:	6b 83       	std	Y+3, r22	; 0x03
    6804:	21 11       	cpse	r18, r1
    6806:	13 c0       	rjmp	.+38     	; 0x682e <ld_make_slave_response_pdu+0xfe>
    6808:	84 e2       	ldi	r24, 0x24	; 36
    680a:	8e 9d       	mul	r24, r14
    680c:	f0 01       	movw	r30, r0
    680e:	8f 9d       	mul	r24, r15
    6810:	f0 0d       	add	r31, r0
    6812:	11 24       	eor	r1, r1
    6814:	ec 59       	subi	r30, 0x9C	; 156
    6816:	fc 49       	sbci	r31, 0x9C	; 156
    6818:	93 81       	ldd	r25, Z+3	; 0x03
    681a:	84 81       	ldd	r24, Z+4	; 0x04
    681c:	9c 83       	std	Y+4, r25	; 0x04
    681e:	8d 83       	std	Y+5, r24	; 0x05
    6820:	95 81       	ldd	r25, Z+5	; 0x05
    6822:	86 81       	ldd	r24, Z+6	; 0x06
    6824:	9e 83       	std	Y+6, r25	; 0x06
    6826:	8f 83       	std	Y+7, r24	; 0x07
    6828:	87 81       	ldd	r24, Z+7	; 0x07
    682a:	88 87       	std	Y+8, r24	; 0x08
    682c:	7f c0       	rjmp	.+254    	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    682e:	21 30       	cpi	r18, 0x01	; 1
    6830:	99 f4       	brne	.+38     	; 0x6858 <ld_make_slave_response_pdu+0x128>
    6832:	84 e2       	ldi	r24, 0x24	; 36
    6834:	8e 9d       	mul	r24, r14
    6836:	f0 01       	movw	r30, r0
    6838:	8f 9d       	mul	r24, r15
    683a:	f0 0d       	add	r31, r0
    683c:	11 24       	eor	r1, r1
    683e:	ec 59       	subi	r30, 0x9C	; 156
    6840:	fc 49       	sbci	r31, 0x9C	; 156
    6842:	80 85       	ldd	r24, Z+8	; 0x08
    6844:	8c 83       	std	Y+4, r24	; 0x04
    6846:	81 85       	ldd	r24, Z+9	; 0x09
    6848:	8d 83       	std	Y+5, r24	; 0x05
    684a:	82 85       	ldd	r24, Z+10	; 0x0a
    684c:	8e 83       	std	Y+6, r24	; 0x06
    684e:	83 85       	ldd	r24, Z+11	; 0x0b
    6850:	8f 83       	std	Y+7, r24	; 0x07
    6852:	85 e0       	ldi	r24, 0x05	; 5
    6854:	8a 83       	std	Y+2, r24	; 0x02
    6856:	6a c0       	rjmp	.+212    	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    6858:	85 e0       	ldi	r24, 0x05	; 5
    685a:	eb ef       	ldi	r30, 0xFB	; 251
    685c:	f2 e6       	ldi	r31, 0x62	; 98
    685e:	de 01       	movw	r26, r28
    6860:	19 96       	adiw	r26, 0x09	; 9
    6862:	01 90       	ld	r0, Z+
    6864:	0d 92       	st	X+, r0
    6866:	8a 95       	dec	r24
    6868:	e1 f7       	brne	.-8      	; 0x6862 <ld_make_slave_response_pdu+0x132>
    686a:	ae 01       	movw	r20, r28
    686c:	47 5f       	subi	r20, 0xF7	; 247
    686e:	5f 4f       	sbci	r21, 0xFF	; 255
    6870:	62 2f       	mov	r22, r18
    6872:	80 2f       	mov	r24, r16
    6874:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <ld_read_by_id_callout>
    6878:	89 85       	ldd	r24, Y+9	; 0x09
    687a:	8c 83       	std	Y+4, r24	; 0x04
    687c:	8a 85       	ldd	r24, Y+10	; 0x0a
    687e:	8d 83       	std	Y+5, r24	; 0x05
    6880:	8b 85       	ldd	r24, Y+11	; 0x0b
    6882:	8e 83       	std	Y+6, r24	; 0x06
    6884:	8c 85       	ldd	r24, Y+12	; 0x0c
    6886:	8f 83       	std	Y+7, r24	; 0x07
    6888:	8d 85       	ldd	r24, Y+13	; 0x0d
    688a:	88 87       	std	Y+8, r24	; 0x08
    688c:	85 e0       	ldi	r24, 0x05	; 5
    688e:	10 c0       	rjmp	.+32     	; 0x68b0 <ld_make_slave_response_pdu+0x180>
    6890:	e8 2f       	mov	r30, r24
    6892:	f0 e0       	ldi	r31, 0x00	; 0
    6894:	31 97       	sbiw	r30, 0x01	; 1
    6896:	29 e0       	ldi	r18, 0x09	; 9
    6898:	30 e0       	ldi	r19, 0x00	; 0
    689a:	2c 0f       	add	r18, r28
    689c:	3d 1f       	adc	r19, r29
    689e:	e2 0f       	add	r30, r18
    68a0:	f3 1f       	adc	r31, r19
    68a2:	90 81       	ld	r25, Z
    68a4:	9f 3f       	cpi	r25, 0xFF	; 255
    68a6:	19 f0       	breq	.+6      	; 0x68ae <ld_make_slave_response_pdu+0x17e>
    68a8:	8f 5f       	subi	r24, 0xFF	; 255
    68aa:	8a 83       	std	Y+2, r24	; 0x02
    68ac:	3f c0       	rjmp	.+126    	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    68ae:	81 50       	subi	r24, 0x01	; 1
    68b0:	81 11       	cpse	r24, r1
    68b2:	ee cf       	rjmp	.-36     	; 0x6890 <ld_make_slave_response_pdu+0x160>
    68b4:	3b c0       	rjmp	.+118    	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    68b6:	d5 01       	movw	r26, r10
    68b8:	8c 91       	ld	r24, X
    68ba:	89 83       	std	Y+1, r24	; 0x01
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	8a 83       	std	Y+2, r24	; 0x02
    68c0:	81 ef       	ldi	r24, 0xF1	; 241
    68c2:	8b 83       	std	Y+3, r24	; 0x03
    68c4:	8f ef       	ldi	r24, 0xFF	; 255
    68c6:	8c 83       	std	Y+4, r24	; 0x04
    68c8:	8d 83       	std	Y+5, r24	; 0x05
    68ca:	30 c0       	rjmp	.+96     	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    68cc:	24 e2       	ldi	r18, 0x24	; 36
    68ce:	2e 9d       	mul	r18, r14
    68d0:	c0 01       	movw	r24, r0
    68d2:	2f 9d       	mul	r18, r15
    68d4:	90 0d       	add	r25, r0
    68d6:	11 24       	eor	r1, r1
    68d8:	8c 59       	subi	r24, 0x9C	; 156
    68da:	9c 49       	sbci	r25, 0x9C	; 156
    68dc:	dc 01       	movw	r26, r24
    68de:	12 96       	adiw	r26, 0x02	; 2
    68e0:	8c 91       	ld	r24, X
    68e2:	89 83       	std	Y+1, r24	; 0x01
    68e4:	87 81       	ldd	r24, Z+7	; 0x07
    68e6:	f5 01       	movw	r30, r10
    68e8:	80 83       	st	Z, r24
    68ea:	81 e0       	ldi	r24, 0x01	; 1
    68ec:	8a 83       	std	Y+2, r24	; 0x02
    68ee:	80 ef       	ldi	r24, 0xF0	; 240
    68f0:	8b 83       	std	Y+3, r24	; 0x03
    68f2:	8f ef       	ldi	r24, 0xFF	; 255
    68f4:	8c 83       	std	Y+4, r24	; 0x04
    68f6:	8d 83       	std	Y+5, r24	; 0x05
    68f8:	19 c0       	rjmp	.+50     	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	8a 83       	std	Y+2, r24	; 0x02
    68fe:	83 ef       	ldi	r24, 0xF3	; 243
    6900:	8b 83       	std	Y+3, r24	; 0x03
    6902:	8f ef       	ldi	r24, 0xFF	; 255
    6904:	8c 83       	std	Y+4, r24	; 0x04
    6906:	8d 83       	std	Y+5, r24	; 0x05
    6908:	11 c0       	rjmp	.+34     	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    690a:	81 e0       	ldi	r24, 0x01	; 1
    690c:	8a 83       	std	Y+2, r24	; 0x02
    690e:	60 5c       	subi	r22, 0xC0	; 192
    6910:	6b 83       	std	Y+3, r22	; 0x03
    6912:	8f ef       	ldi	r24, 0xFF	; 255
    6914:	8c 83       	std	Y+4, r24	; 0x04
    6916:	8d 83       	std	Y+5, r24	; 0x05
    6918:	09 c0       	rjmp	.+18     	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    691a:	41 30       	cpi	r20, 0x01	; 1
    691c:	39 f4       	brne	.+14     	; 0x692c <ld_make_slave_response_pdu+0x1fc>
    691e:	81 e0       	ldi	r24, 0x01	; 1
    6920:	8a 83       	std	Y+2, r24	; 0x02
    6922:	60 5c       	subi	r22, 0xC0	; 192
    6924:	6b 83       	std	Y+3, r22	; 0x03
    6926:	8f ef       	ldi	r24, 0xFF	; 255
    6928:	8c 83       	std	Y+4, r24	; 0x04
    692a:	8d 83       	std	Y+5, r24	; 0x05
    692c:	be 01       	movw	r22, r28
    692e:	6f 5f       	subi	r22, 0xFF	; 255
    6930:	7f 4f       	sbci	r23, 0xFF	; 255
    6932:	8d 2d       	mov	r24, r13
    6934:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    6938:	84 e3       	ldi	r24, 0x34	; 52
    693a:	80 9f       	mul	r24, r16
    693c:	f0 01       	movw	r30, r0
    693e:	81 9f       	mul	r24, r17
    6940:	f0 0d       	add	r31, r0
    6942:	11 24       	eor	r1, r1
    6944:	ed 56       	subi	r30, 0x6D	; 109
    6946:	f8 49       	sbci	r31, 0x98	; 152
    6948:	82 e0       	ldi	r24, 0x02	; 2
    694a:	86 a3       	std	Z+38, r24	; 0x26
    694c:	0a c0       	rjmp	.+20     	; 0x6962 <ld_make_slave_response_pdu+0x232>
    694e:	84 e3       	ldi	r24, 0x34	; 52
    6950:	80 9f       	mul	r24, r16
    6952:	f0 01       	movw	r30, r0
    6954:	81 9f       	mul	r24, r17
    6956:	f0 0d       	add	r31, r0
    6958:	11 24       	eor	r1, r1
    695a:	ed 56       	subi	r30, 0x6D	; 109
    695c:	f8 49       	sbci	r31, 0x98	; 152
    695e:	81 e0       	ldi	r24, 0x01	; 1
    6960:	86 a3       	std	Z+38, r24	; 0x26
    6962:	2d 96       	adiw	r28, 0x0d	; 13
    6964:	cd bf       	out	0x3d, r28	; 61
    6966:	de bf       	out	0x3e, r29	; 62
    6968:	df 91       	pop	r29
    696a:	cf 91       	pop	r28
    696c:	1f 91       	pop	r17
    696e:	0f 91       	pop	r16
    6970:	ff 90       	pop	r15
    6972:	ef 90       	pop	r14
    6974:	df 90       	pop	r13
    6976:	cf 90       	pop	r12
    6978:	bf 90       	pop	r11
    697a:	af 90       	pop	r10
    697c:	08 95       	ret

0000697e <lin_condittional_change_nad>:
    697e:	cf 92       	push	r12
    6980:	df 92       	push	r13
    6982:	ef 92       	push	r14
    6984:	ff 92       	push	r15
    6986:	0f 93       	push	r16
    6988:	1f 93       	push	r17
    698a:	cf 93       	push	r28
    698c:	df 93       	push	r29
    698e:	cd b7       	in	r28, 0x3d	; 61
    6990:	de b7       	in	r29, 0x3e	; 62
    6992:	25 97       	sbiw	r28, 0x05	; 5
    6994:	cd bf       	out	0x3d, r28	; 61
    6996:	de bf       	out	0x3e, r29	; 62
    6998:	e8 2e       	mov	r14, r24
    699a:	f1 2c       	mov	r15, r1
    699c:	9c e1       	ldi	r25, 0x1C	; 28
    699e:	9e 9d       	mul	r25, r14
    69a0:	f0 01       	movw	r30, r0
    69a2:	9f 9d       	mul	r25, r15
    69a4:	f0 0d       	add	r31, r0
    69a6:	11 24       	eor	r1, r1
    69a8:	e8 5b       	subi	r30, 0xB8	; 184
    69aa:	fc 49       	sbci	r31, 0x9C	; 156
    69ac:	02 89       	ldd	r16, Z+18	; 0x12
    69ae:	10 e0       	ldi	r17, 0x00	; 0
    69b0:	94 e2       	ldi	r25, 0x24	; 36
    69b2:	90 9f       	mul	r25, r16
    69b4:	90 01       	movw	r18, r0
    69b6:	91 9f       	mul	r25, r17
    69b8:	30 0d       	add	r19, r0
    69ba:	11 24       	eor	r1, r1
    69bc:	f9 01       	movw	r30, r18
    69be:	e9 59       	subi	r30, 0x99	; 153
    69c0:	fc 49       	sbci	r31, 0x9C	; 156
    69c2:	95 e0       	ldi	r25, 0x05	; 5
    69c4:	de 01       	movw	r26, r28
    69c6:	11 96       	adiw	r26, 0x01	; 1
    69c8:	01 90       	ld	r0, Z+
    69ca:	0d 92       	st	X+, r0
    69cc:	9a 95       	dec	r25
    69ce:	e1 f7       	brne	.-8      	; 0x69c8 <lin_condittional_change_nad+0x4a>
    69d0:	d9 01       	movw	r26, r18
    69d2:	ac 59       	subi	r26, 0x9C	; 156
    69d4:	bc 49       	sbci	r27, 0x9C	; 156
    69d6:	fd 01       	movw	r30, r26
    69d8:	38 96       	adiw	r30, 0x08	; 8
    69da:	18 96       	adiw	r26, 0x08	; 8
    69dc:	cc 90       	ld	r12, X
    69de:	d1 80       	ldd	r13, Z+1	; 0x01
    69e0:	52 81       	ldd	r21, Z+2	; 0x02
    69e2:	43 81       	ldd	r20, Z+3	; 0x03
    69e4:	94 e3       	ldi	r25, 0x34	; 52
    69e6:	9e 9d       	mul	r25, r14
    69e8:	d0 01       	movw	r26, r0
    69ea:	9f 9d       	mul	r25, r15
    69ec:	b0 0d       	add	r27, r0
    69ee:	11 24       	eor	r1, r1
    69f0:	ad 56       	subi	r26, 0x6D	; 109
    69f2:	b8 49       	sbci	r27, 0x98	; 152
    69f4:	54 96       	adiw	r26, 0x14	; 20
    69f6:	2d 91       	ld	r18, X+
    69f8:	3c 91       	ld	r19, X
    69fa:	55 97       	sbiw	r26, 0x15	; 21
    69fc:	1b 96       	adiw	r26, 0x0b	; 11
    69fe:	ed 91       	ld	r30, X+
    6a00:	fc 91       	ld	r31, X
    6a02:	1c 97       	sbiw	r26, 0x0c	; 12
    6a04:	ee 0f       	add	r30, r30
    6a06:	ff 1f       	adc	r31, r31
    6a08:	ee 0f       	add	r30, r30
    6a0a:	ff 1f       	adc	r31, r31
    6a0c:	ee 0f       	add	r30, r30
    6a0e:	ff 1f       	adc	r31, r31
    6a10:	e2 0f       	add	r30, r18
    6a12:	f3 1f       	adc	r31, r19
    6a14:	33 81       	ldd	r19, Z+3	; 0x03
    6a16:	94 81       	ldd	r25, Z+4	; 0x04
    6a18:	75 81       	ldd	r23, Z+5	; 0x05
    6a1a:	66 81       	ldd	r22, Z+6	; 0x06
    6a1c:	33 23       	and	r19, r19
    6a1e:	19 f0       	breq	.+6      	; 0x6a26 <lin_condittional_change_nad+0xa8>
    6a20:	31 30       	cpi	r19, 0x01	; 1
    6a22:	c1 f1       	breq	.+112    	; 0x6a94 <lin_condittional_change_nad+0x116>
    6a24:	54 c0       	rjmp	.+168    	; 0x6ace <lin_condittional_change_nad+0x150>
    6a26:	2f ef       	ldi	r18, 0xFF	; 255
    6a28:	29 0f       	add	r18, r25
    6a2a:	25 30       	cpi	r18, 0x05	; 5
    6a2c:	08 f0       	brcs	.+2      	; 0x6a30 <lin_condittional_change_nad+0xb2>
    6a2e:	51 c0       	rjmp	.+162    	; 0x6ad2 <lin_condittional_change_nad+0x154>
    6a30:	22 30       	cpi	r18, 0x02	; 2
    6a32:	90 f4       	brcc	.+36     	; 0x6a58 <lin_condittional_change_nad+0xda>
    6a34:	49 81       	ldd	r20, Y+1	; 0x01
    6a36:	5a 81       	ldd	r21, Y+2	; 0x02
    6a38:	29 2f       	mov	r18, r25
    6a3a:	30 e0       	ldi	r19, 0x00	; 0
    6a3c:	21 50       	subi	r18, 0x01	; 1
    6a3e:	30 4e       	sbci	r19, 0xE0	; 224
    6a40:	22 0f       	add	r18, r18
    6a42:	33 1f       	adc	r19, r19
    6a44:	22 0f       	add	r18, r18
    6a46:	33 1f       	adc	r19, r19
    6a48:	22 0f       	add	r18, r18
    6a4a:	33 1f       	adc	r19, r19
    6a4c:	02 c0       	rjmp	.+4      	; 0x6a52 <lin_condittional_change_nad+0xd4>
    6a4e:	56 95       	lsr	r21
    6a50:	47 95       	ror	r20
    6a52:	2a 95       	dec	r18
    6a54:	e2 f7       	brpl	.-8      	; 0x6a4e <lin_condittional_change_nad+0xd0>
    6a56:	19 c0       	rjmp	.+50     	; 0x6a8a <lin_condittional_change_nad+0x10c>
    6a58:	2d ef       	ldi	r18, 0xFD	; 253
    6a5a:	29 0f       	add	r18, r25
    6a5c:	22 30       	cpi	r18, 0x02	; 2
    6a5e:	a0 f4       	brcc	.+40     	; 0x6a88 <lin_condittional_change_nad+0x10a>
    6a60:	2b 81       	ldd	r18, Y+3	; 0x03
    6a62:	3c 81       	ldd	r19, Y+4	; 0x04
    6a64:	49 2f       	mov	r20, r25
    6a66:	50 e0       	ldi	r21, 0x00	; 0
    6a68:	43 50       	subi	r20, 0x03	; 3
    6a6a:	50 4e       	sbci	r21, 0xE0	; 224
    6a6c:	44 0f       	add	r20, r20
    6a6e:	55 1f       	adc	r21, r21
    6a70:	44 0f       	add	r20, r20
    6a72:	55 1f       	adc	r21, r21
    6a74:	44 0f       	add	r20, r20
    6a76:	55 1f       	adc	r21, r21
    6a78:	f9 01       	movw	r30, r18
    6a7a:	02 c0       	rjmp	.+4      	; 0x6a80 <lin_condittional_change_nad+0x102>
    6a7c:	f6 95       	lsr	r31
    6a7e:	e7 95       	ror	r30
    6a80:	4a 95       	dec	r20
    6a82:	e2 f7       	brpl	.-8      	; 0x6a7c <lin_condittional_change_nad+0xfe>
    6a84:	af 01       	movw	r20, r30
    6a86:	01 c0       	rjmp	.+2      	; 0x6a8a <lin_condittional_change_nad+0x10c>
    6a88:	4d 81       	ldd	r20, Y+5	; 0x05
    6a8a:	46 27       	eor	r20, r22
    6a8c:	47 23       	and	r20, r23
    6a8e:	19 f1       	breq	.+70     	; 0x6ad6 <lin_condittional_change_nad+0x158>
    6a90:	90 e0       	ldi	r25, 0x00	; 0
    6a92:	26 c0       	rjmp	.+76     	; 0x6ae0 <lin_condittional_change_nad+0x162>
    6a94:	2f ef       	ldi	r18, 0xFF	; 255
    6a96:	29 0f       	add	r18, r25
    6a98:	24 30       	cpi	r18, 0x04	; 4
    6a9a:	f8 f4       	brcc	.+62     	; 0x6ada <lin_condittional_change_nad+0x15c>
    6a9c:	92 30       	cpi	r25, 0x02	; 2
    6a9e:	59 f0       	breq	.+22     	; 0x6ab6 <lin_condittional_change_nad+0x138>
    6aa0:	18 f4       	brcc	.+6      	; 0x6aa8 <lin_condittional_change_nad+0x12a>
    6aa2:	91 30       	cpi	r25, 0x01	; 1
    6aa4:	31 f0       	breq	.+12     	; 0x6ab2 <lin_condittional_change_nad+0x134>
    6aa6:	0c c0       	rjmp	.+24     	; 0x6ac0 <lin_condittional_change_nad+0x142>
    6aa8:	93 30       	cpi	r25, 0x03	; 3
    6aaa:	39 f0       	breq	.+14     	; 0x6aba <lin_condittional_change_nad+0x13c>
    6aac:	94 30       	cpi	r25, 0x04	; 4
    6aae:	39 f0       	breq	.+14     	; 0x6abe <lin_condittional_change_nad+0x140>
    6ab0:	07 c0       	rjmp	.+14     	; 0x6ac0 <lin_condittional_change_nad+0x142>
    6ab2:	9c 2d       	mov	r25, r12
    6ab4:	05 c0       	rjmp	.+10     	; 0x6ac0 <lin_condittional_change_nad+0x142>
    6ab6:	9d 2d       	mov	r25, r13
    6ab8:	03 c0       	rjmp	.+6      	; 0x6ac0 <lin_condittional_change_nad+0x142>
    6aba:	95 2f       	mov	r25, r21
    6abc:	01 c0       	rjmp	.+2      	; 0x6ac0 <lin_condittional_change_nad+0x142>
    6abe:	94 2f       	mov	r25, r20
    6ac0:	29 2f       	mov	r18, r25
    6ac2:	26 27       	eor	r18, r22
    6ac4:	47 2f       	mov	r20, r23
    6ac6:	42 23       	and	r20, r18
    6ac8:	51 f0       	breq	.+20     	; 0x6ade <lin_condittional_change_nad+0x160>
    6aca:	90 e0       	ldi	r25, 0x00	; 0
    6acc:	09 c0       	rjmp	.+18     	; 0x6ae0 <lin_condittional_change_nad+0x162>
    6ace:	90 e0       	ldi	r25, 0x00	; 0
    6ad0:	07 c0       	rjmp	.+14     	; 0x6ae0 <lin_condittional_change_nad+0x162>
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	05 c0       	rjmp	.+10     	; 0x6ae0 <lin_condittional_change_nad+0x162>
    6ad6:	91 e0       	ldi	r25, 0x01	; 1
    6ad8:	03 c0       	rjmp	.+6      	; 0x6ae0 <lin_condittional_change_nad+0x162>
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	01 c0       	rjmp	.+2      	; 0x6ae0 <lin_condittional_change_nad+0x162>
    6ade:	91 e0       	ldi	r25, 0x01	; 1
    6ae0:	99 23       	and	r25, r25
    6ae2:	51 f1       	breq	.+84     	; 0x6b38 <lin_condittional_change_nad+0x1ba>
    6ae4:	20 e0       	ldi	r18, 0x00	; 0
    6ae6:	41 e0       	ldi	r20, 0x01	; 1
    6ae8:	63 eb       	ldi	r22, 0xB3	; 179
    6aea:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6aee:	84 e2       	ldi	r24, 0x24	; 36
    6af0:	80 9f       	mul	r24, r16
    6af2:	f0 01       	movw	r30, r0
    6af4:	81 9f       	mul	r24, r17
    6af6:	f0 0d       	add	r31, r0
    6af8:	11 24       	eor	r1, r1
    6afa:	ec 59       	subi	r30, 0x9C	; 156
    6afc:	fc 49       	sbci	r31, 0x9C	; 156
    6afe:	80 81       	ld	r24, Z
    6b00:	91 81       	ldd	r25, Z+1	; 0x01
    6b02:	24 e3       	ldi	r18, 0x34	; 52
    6b04:	2e 9d       	mul	r18, r14
    6b06:	d0 01       	movw	r26, r0
    6b08:	2f 9d       	mul	r18, r15
    6b0a:	b0 0d       	add	r27, r0
    6b0c:	11 24       	eor	r1, r1
    6b0e:	ad 56       	subi	r26, 0x6D	; 109
    6b10:	b8 49       	sbci	r27, 0x98	; 152
    6b12:	54 96       	adiw	r26, 0x14	; 20
    6b14:	2d 91       	ld	r18, X+
    6b16:	3c 91       	ld	r19, X
    6b18:	55 97       	sbiw	r26, 0x15	; 21
    6b1a:	1b 96       	adiw	r26, 0x0b	; 11
    6b1c:	ed 91       	ld	r30, X+
    6b1e:	fc 91       	ld	r31, X
    6b20:	1c 97       	sbiw	r26, 0x0c	; 12
    6b22:	ee 0f       	add	r30, r30
    6b24:	ff 1f       	adc	r31, r31
    6b26:	ee 0f       	add	r30, r30
    6b28:	ff 1f       	adc	r31, r31
    6b2a:	ee 0f       	add	r30, r30
    6b2c:	ff 1f       	adc	r31, r31
    6b2e:	e2 0f       	add	r30, r18
    6b30:	f3 1f       	adc	r31, r19
    6b32:	27 81       	ldd	r18, Z+7	; 0x07
    6b34:	fc 01       	movw	r30, r24
    6b36:	20 83       	st	Z, r18
    6b38:	25 96       	adiw	r28, 0x05	; 5
    6b3a:	cd bf       	out	0x3d, r28	; 61
    6b3c:	de bf       	out	0x3e, r29	; 62
    6b3e:	df 91       	pop	r29
    6b40:	cf 91       	pop	r28
    6b42:	1f 91       	pop	r17
    6b44:	0f 91       	pop	r16
    6b46:	ff 90       	pop	r15
    6b48:	ef 90       	pop	r14
    6b4a:	df 90       	pop	r13
    6b4c:	cf 90       	pop	r12
    6b4e:	08 95       	ret

00006b50 <lin_assign_nad>:
    6b50:	cf 93       	push	r28
    6b52:	df 93       	push	r29
    6b54:	cd b7       	in	r28, 0x3d	; 61
    6b56:	de b7       	in	r29, 0x3e	; 62
    6b58:	2d 97       	sbiw	r28, 0x0d	; 13
    6b5a:	cd bf       	out	0x3d, r28	; 61
    6b5c:	de bf       	out	0x3e, r29	; 62
    6b5e:	48 2f       	mov	r20, r24
    6b60:	50 e0       	ldi	r21, 0x00	; 0
    6b62:	9c e1       	ldi	r25, 0x1C	; 28
    6b64:	94 9f       	mul	r25, r20
    6b66:	f0 01       	movw	r30, r0
    6b68:	95 9f       	mul	r25, r21
    6b6a:	f0 0d       	add	r31, r0
    6b6c:	11 24       	eor	r1, r1
    6b6e:	e8 5b       	subi	r30, 0xB8	; 184
    6b70:	fc 49       	sbci	r31, 0x9C	; 156
    6b72:	e2 89       	ldd	r30, Z+18	; 0x12
    6b74:	94 e2       	ldi	r25, 0x24	; 36
    6b76:	e9 9f       	mul	r30, r25
    6b78:	f0 01       	movw	r30, r0
    6b7a:	11 24       	eor	r1, r1
    6b7c:	e9 59       	subi	r30, 0x99	; 153
    6b7e:	fc 49       	sbci	r31, 0x9C	; 156
    6b80:	95 e0       	ldi	r25, 0x05	; 5
    6b82:	de 01       	movw	r26, r28
    6b84:	19 96       	adiw	r26, 0x09	; 9
    6b86:	01 90       	ld	r0, Z+
    6b88:	0d 92       	st	X+, r0
    6b8a:	9a 95       	dec	r25
    6b8c:	e1 f7       	brne	.-8      	; 0x6b86 <lin_assign_nad+0x36>
    6b8e:	90 e0       	ldi	r25, 0x00	; 0
    6b90:	25 c0       	rjmp	.+74     	; 0x6bdc <lin_assign_nad+0x8c>
    6b92:	24 e3       	ldi	r18, 0x34	; 52
    6b94:	24 9f       	mul	r18, r20
    6b96:	d0 01       	movw	r26, r0
    6b98:	25 9f       	mul	r18, r21
    6b9a:	b0 0d       	add	r27, r0
    6b9c:	11 24       	eor	r1, r1
    6b9e:	ad 56       	subi	r26, 0x6D	; 109
    6ba0:	b8 49       	sbci	r27, 0x98	; 152
    6ba2:	54 96       	adiw	r26, 0x14	; 20
    6ba4:	2d 91       	ld	r18, X+
    6ba6:	3c 91       	ld	r19, X
    6ba8:	55 97       	sbiw	r26, 0x15	; 21
    6baa:	1b 96       	adiw	r26, 0x0b	; 11
    6bac:	ed 91       	ld	r30, X+
    6bae:	fc 91       	ld	r31, X
    6bb0:	1c 97       	sbiw	r26, 0x0c	; 12
    6bb2:	ee 0f       	add	r30, r30
    6bb4:	ff 1f       	adc	r31, r31
    6bb6:	ee 0f       	add	r30, r30
    6bb8:	ff 1f       	adc	r31, r31
    6bba:	ee 0f       	add	r30, r30
    6bbc:	ff 1f       	adc	r31, r31
    6bbe:	e2 0f       	add	r30, r18
    6bc0:	f3 1f       	adc	r31, r19
    6bc2:	29 2f       	mov	r18, r25
    6bc4:	30 e0       	ldi	r19, 0x00	; 0
    6bc6:	e2 0f       	add	r30, r18
    6bc8:	f3 1f       	adc	r31, r19
    6bca:	60 81       	ld	r22, Z
    6bcc:	e1 e0       	ldi	r30, 0x01	; 1
    6bce:	f0 e0       	ldi	r31, 0x00	; 0
    6bd0:	ec 0f       	add	r30, r28
    6bd2:	fd 1f       	adc	r31, r29
    6bd4:	e2 0f       	add	r30, r18
    6bd6:	f3 1f       	adc	r31, r19
    6bd8:	60 83       	st	Z, r22
    6bda:	9f 5f       	subi	r25, 0xFF	; 255
    6bdc:	98 30       	cpi	r25, 0x08	; 8
    6bde:	c8 f2       	brcs	.-78     	; 0x6b92 <lin_assign_nad+0x42>
    6be0:	2d 81       	ldd	r18, Y+5	; 0x05
    6be2:	30 e0       	ldi	r19, 0x00	; 0
    6be4:	32 2f       	mov	r19, r18
    6be6:	22 27       	eor	r18, r18
    6be8:	9c 81       	ldd	r25, Y+4	; 0x04
    6bea:	29 2b       	or	r18, r25
    6bec:	6f 81       	ldd	r22, Y+7	; 0x07
    6bee:	70 e0       	ldi	r23, 0x00	; 0
    6bf0:	76 2f       	mov	r23, r22
    6bf2:	66 27       	eor	r22, r22
    6bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    6bf6:	69 2b       	or	r22, r25
    6bf8:	e9 85       	ldd	r30, Y+9	; 0x09
    6bfa:	fa 85       	ldd	r31, Y+10	; 0x0a
    6bfc:	2e 17       	cp	r18, r30
    6bfe:	3f 07       	cpc	r19, r31
    6c00:	19 f0       	breq	.+6      	; 0x6c08 <lin_assign_nad+0xb8>
    6c02:	2f 3f       	cpi	r18, 0xFF	; 255
    6c04:	3f 47       	sbci	r19, 0x7F	; 127
    6c06:	41 f4       	brne	.+16     	; 0x6c18 <lin_assign_nad+0xc8>
    6c08:	2b 85       	ldd	r18, Y+11	; 0x0b
    6c0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    6c0c:	62 17       	cp	r22, r18
    6c0e:	73 07       	cpc	r23, r19
    6c10:	69 f0       	breq	.+26     	; 0x6c2c <lin_assign_nad+0xdc>
    6c12:	6f 3f       	cpi	r22, 0xFF	; 255
    6c14:	7f 4f       	sbci	r23, 0xFF	; 255
    6c16:	51 f0       	breq	.+20     	; 0x6c2c <lin_assign_nad+0xdc>
    6c18:	84 e3       	ldi	r24, 0x34	; 52
    6c1a:	84 9f       	mul	r24, r20
    6c1c:	f0 01       	movw	r30, r0
    6c1e:	85 9f       	mul	r24, r21
    6c20:	f0 0d       	add	r31, r0
    6c22:	11 24       	eor	r1, r1
    6c24:	ed 56       	subi	r30, 0x6D	; 109
    6c26:	f8 49       	sbci	r31, 0x98	; 152
    6c28:	12 a6       	std	Z+42, r1	; 0x2a
    6c2a:	05 c0       	rjmp	.+10     	; 0x6c36 <lin_assign_nad+0xe6>
    6c2c:	20 e0       	ldi	r18, 0x00	; 0
    6c2e:	41 e0       	ldi	r20, 0x01	; 1
    6c30:	60 eb       	ldi	r22, 0xB0	; 176
    6c32:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6c36:	2d 96       	adiw	r28, 0x0d	; 13
    6c38:	cd bf       	out	0x3d, r28	; 61
    6c3a:	de bf       	out	0x3e, r29	; 62
    6c3c:	df 91       	pop	r29
    6c3e:	cf 91       	pop	r28
    6c40:	08 95       	ret

00006c42 <lin_diagservice_assign_frame_id_range>:
    6c42:	af 92       	push	r10
    6c44:	bf 92       	push	r11
    6c46:	df 92       	push	r13
    6c48:	ef 92       	push	r14
    6c4a:	ff 92       	push	r15
    6c4c:	0f 93       	push	r16
    6c4e:	1f 93       	push	r17
    6c50:	cf 93       	push	r28
    6c52:	df 93       	push	r29
    6c54:	cd b7       	in	r28, 0x3d	; 61
    6c56:	de b7       	in	r29, 0x3e	; 62
    6c58:	28 97       	sbiw	r28, 0x08	; 8
    6c5a:	cd bf       	out	0x3d, r28	; 61
    6c5c:	de bf       	out	0x3e, r29	; 62
    6c5e:	f8 2e       	mov	r15, r24
    6c60:	08 2f       	mov	r16, r24
    6c62:	10 e0       	ldi	r17, 0x00	; 0
    6c64:	20 e0       	ldi	r18, 0x00	; 0
    6c66:	25 c0       	rjmp	.+74     	; 0x6cb2 <lin_diagservice_assign_frame_id_range+0x70>
    6c68:	84 e3       	ldi	r24, 0x34	; 52
    6c6a:	80 9f       	mul	r24, r16
    6c6c:	d0 01       	movw	r26, r0
    6c6e:	81 9f       	mul	r24, r17
    6c70:	b0 0d       	add	r27, r0
    6c72:	11 24       	eor	r1, r1
    6c74:	ad 56       	subi	r26, 0x6D	; 109
    6c76:	b8 49       	sbci	r27, 0x98	; 152
    6c78:	54 96       	adiw	r26, 0x14	; 20
    6c7a:	8d 91       	ld	r24, X+
    6c7c:	9c 91       	ld	r25, X
    6c7e:	55 97       	sbiw	r26, 0x15	; 21
    6c80:	1b 96       	adiw	r26, 0x0b	; 11
    6c82:	ed 91       	ld	r30, X+
    6c84:	fc 91       	ld	r31, X
    6c86:	1c 97       	sbiw	r26, 0x0c	; 12
    6c88:	ee 0f       	add	r30, r30
    6c8a:	ff 1f       	adc	r31, r31
    6c8c:	ee 0f       	add	r30, r30
    6c8e:	ff 1f       	adc	r31, r31
    6c90:	ee 0f       	add	r30, r30
    6c92:	ff 1f       	adc	r31, r31
    6c94:	e8 0f       	add	r30, r24
    6c96:	f9 1f       	adc	r31, r25
    6c98:	82 2f       	mov	r24, r18
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	e8 0f       	add	r30, r24
    6c9e:	f9 1f       	adc	r31, r25
    6ca0:	30 81       	ld	r19, Z
    6ca2:	e1 e0       	ldi	r30, 0x01	; 1
    6ca4:	f0 e0       	ldi	r31, 0x00	; 0
    6ca6:	ec 0f       	add	r30, r28
    6ca8:	fd 1f       	adc	r31, r29
    6caa:	e8 0f       	add	r30, r24
    6cac:	f9 1f       	adc	r31, r25
    6cae:	30 83       	st	Z, r19
    6cb0:	2f 5f       	subi	r18, 0xFF	; 255
    6cb2:	28 30       	cpi	r18, 0x08	; 8
    6cb4:	c8 f2       	brcs	.-78     	; 0x6c68 <lin_diagservice_assign_frame_id_range+0x26>
    6cb6:	ec 80       	ldd	r14, Y+4	; 0x04
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	81 e0       	ldi	r24, 0x01	; 1
    6cbc:	02 c0       	rjmp	.+4      	; 0x6cc2 <lin_diagservice_assign_frame_id_range+0x80>
    6cbe:	9f 5f       	subi	r25, 0xFF	; 255
    6cc0:	84 2f       	mov	r24, r20
    6cc2:	2c e1       	ldi	r18, 0x1C	; 28
    6cc4:	20 9f       	mul	r18, r16
    6cc6:	f0 01       	movw	r30, r0
    6cc8:	21 9f       	mul	r18, r17
    6cca:	f0 0d       	add	r31, r0
    6ccc:	11 24       	eor	r1, r1
    6cce:	e8 5b       	subi	r30, 0xB8	; 184
    6cd0:	fc 49       	sbci	r31, 0x9C	; 156
    6cd2:	20 85       	ldd	r18, Z+8	; 0x08
    6cd4:	31 85       	ldd	r19, Z+9	; 0x09
    6cd6:	41 e0       	ldi	r20, 0x01	; 1
    6cd8:	48 0f       	add	r20, r24
    6cda:	e8 2f       	mov	r30, r24
    6cdc:	f0 e0       	ldi	r31, 0x00	; 0
    6cde:	ee 0f       	add	r30, r30
    6ce0:	ff 1f       	adc	r31, r31
    6ce2:	e2 0f       	add	r30, r18
    6ce4:	f3 1f       	adc	r31, r19
    6ce6:	20 81       	ld	r18, Z
    6ce8:	31 81       	ldd	r19, Z+1	; 0x01
    6cea:	2f 3f       	cpi	r18, 0xFF	; 255
    6cec:	3f 4f       	sbci	r19, 0xFF	; 255
    6cee:	39 f7       	brne	.-50     	; 0x6cbe <lin_diagservice_assign_frame_id_range+0x7c>
    6cf0:	6d ef       	ldi	r22, 0xFD	; 253
    6cf2:	69 0f       	add	r22, r25
    6cf4:	4e 2d       	mov	r20, r14
    6cf6:	54 e0       	ldi	r21, 0x04	; 4
    6cf8:	17 c0       	rjmp	.+46     	; 0x6d28 <lin_diagservice_assign_frame_id_range+0xe6>
    6cfa:	91 e0       	ldi	r25, 0x01	; 1
    6cfc:	95 0f       	add	r25, r21
    6cfe:	e1 e0       	ldi	r30, 0x01	; 1
    6d00:	f0 e0       	ldi	r31, 0x00	; 0
    6d02:	ec 0f       	add	r30, r28
    6d04:	fd 1f       	adc	r31, r29
    6d06:	e5 0f       	add	r30, r21
    6d08:	f1 1d       	adc	r31, r1
    6d0a:	80 81       	ld	r24, Z
    6d0c:	8f 3f       	cpi	r24, 0xFF	; 255
    6d0e:	51 f0       	breq	.+20     	; 0x6d24 <lin_diagservice_assign_frame_id_range+0xe2>
    6d10:	64 17       	cp	r22, r20
    6d12:	40 f4       	brcc	.+16     	; 0x6d24 <lin_diagservice_assign_frame_id_range+0xe2>
    6d14:	20 e1       	ldi	r18, 0x10	; 16
    6d16:	40 e0       	ldi	r20, 0x00	; 0
    6d18:	67 eb       	ldi	r22, 0xB7	; 183
    6d1a:	8f 2d       	mov	r24, r15
    6d1c:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6d20:	80 e0       	ldi	r24, 0x00	; 0
    6d22:	0b c0       	rjmp	.+22     	; 0x6d3a <lin_diagservice_assign_frame_id_range+0xf8>
    6d24:	4f 5f       	subi	r20, 0xFF	; 255
    6d26:	59 2f       	mov	r21, r25
    6d28:	24 2f       	mov	r18, r20
    6d2a:	30 e0       	ldi	r19, 0x00	; 0
    6d2c:	8e 2d       	mov	r24, r14
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	04 96       	adiw	r24, 0x04	; 4
    6d32:	28 17       	cp	r18, r24
    6d34:	39 07       	cpc	r19, r25
    6d36:	08 f3       	brcs	.-62     	; 0x6cfa <lin_diagservice_assign_frame_id_range+0xb8>
    6d38:	81 e0       	ldi	r24, 0x01	; 1
    6d3a:	81 30       	cpi	r24, 0x01	; 1
    6d3c:	f1 f5       	brne	.+124    	; 0x6dba <lin_diagservice_assign_frame_id_range+0x178>
    6d3e:	31 c0       	rjmp	.+98     	; 0x6da2 <lin_diagservice_assign_frame_id_range+0x160>
    6d40:	e1 e0       	ldi	r30, 0x01	; 1
    6d42:	f0 e0       	ldi	r31, 0x00	; 0
    6d44:	ec 0f       	add	r30, r28
    6d46:	fd 1f       	adc	r31, r29
    6d48:	ed 0d       	add	r30, r13
    6d4a:	f1 1d       	adc	r31, r1
    6d4c:	80 81       	ld	r24, Z
    6d4e:	88 23       	and	r24, r24
    6d50:	19 f0       	breq	.+6      	; 0x6d58 <lin_diagservice_assign_frame_id_range+0x116>
    6d52:	8f 3f       	cpi	r24, 0xFF	; 255
    6d54:	21 f1       	breq	.+72     	; 0x6d9e <lin_diagservice_assign_frame_id_range+0x15c>
    6d56:	11 c0       	rjmp	.+34     	; 0x6d7a <lin_diagservice_assign_frame_id_range+0x138>
    6d58:	e3 94       	inc	r14
    6d5a:	8c e1       	ldi	r24, 0x1C	; 28
    6d5c:	80 9f       	mul	r24, r16
    6d5e:	f0 01       	movw	r30, r0
    6d60:	81 9f       	mul	r24, r17
    6d62:	f0 0d       	add	r31, r0
    6d64:	11 24       	eor	r1, r1
    6d66:	e8 5b       	subi	r30, 0xB8	; 184
    6d68:	fc 49       	sbci	r31, 0x9C	; 156
    6d6a:	02 84       	ldd	r0, Z+10	; 0x0a
    6d6c:	f3 85       	ldd	r31, Z+11	; 0x0b
    6d6e:	e0 2d       	mov	r30, r0
    6d70:	ee 0d       	add	r30, r14
    6d72:	f1 1d       	adc	r31, r1
    6d74:	8f ef       	ldi	r24, 0xFF	; 255
    6d76:	80 83       	st	Z, r24
    6d78:	12 c0       	rjmp	.+36     	; 0x6d9e <lin_diagservice_assign_frame_id_range+0x15c>
    6d7a:	e3 94       	inc	r14
    6d7c:	9c e1       	ldi	r25, 0x1C	; 28
    6d7e:	90 9f       	mul	r25, r16
    6d80:	f0 01       	movw	r30, r0
    6d82:	91 9f       	mul	r25, r17
    6d84:	f0 0d       	add	r31, r0
    6d86:	11 24       	eor	r1, r1
    6d88:	e8 5b       	subi	r30, 0xB8	; 184
    6d8a:	fc 49       	sbci	r31, 0x9C	; 156
    6d8c:	a2 84       	ldd	r10, Z+10	; 0x0a
    6d8e:	b3 84       	ldd	r11, Z+11	; 0x0b
    6d90:	ae 0c       	add	r10, r14
    6d92:	b1 1c       	adc	r11, r1
    6d94:	61 e0       	ldi	r22, 0x01	; 1
    6d96:	0e 94 25 42 	call	0x844a	; 0x844a <lin_process_parity>
    6d9a:	f5 01       	movw	r30, r10
    6d9c:	80 83       	st	Z, r24
    6d9e:	d3 94       	inc	r13
    6da0:	03 c0       	rjmp	.+6      	; 0x6da8 <lin_diagservice_assign_frame_id_range+0x166>
    6da2:	68 94       	set
    6da4:	dd 24       	eor	r13, r13
    6da6:	d2 f8       	bld	r13, 2
    6da8:	f7 e0       	ldi	r31, 0x07	; 7
    6daa:	fd 15       	cp	r31, r13
    6dac:	48 f6       	brcc	.-110    	; 0x6d40 <lin_diagservice_assign_frame_id_range+0xfe>
    6dae:	20 e0       	ldi	r18, 0x00	; 0
    6db0:	41 e0       	ldi	r20, 0x01	; 1
    6db2:	67 eb       	ldi	r22, 0xB7	; 183
    6db4:	8f 2d       	mov	r24, r15
    6db6:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6dba:	28 96       	adiw	r28, 0x08	; 8
    6dbc:	cd bf       	out	0x3d, r28	; 61
    6dbe:	de bf       	out	0x3e, r29	; 62
    6dc0:	df 91       	pop	r29
    6dc2:	cf 91       	pop	r28
    6dc4:	1f 91       	pop	r17
    6dc6:	0f 91       	pop	r16
    6dc8:	ff 90       	pop	r15
    6dca:	ef 90       	pop	r14
    6dcc:	df 90       	pop	r13
    6dce:	bf 90       	pop	r11
    6dd0:	af 90       	pop	r10
    6dd2:	08 95       	ret

00006dd4 <lin_diagservice_read_by_identifier>:
    6dd4:	ef 92       	push	r14
    6dd6:	ff 92       	push	r15
    6dd8:	0f 93       	push	r16
    6dda:	1f 93       	push	r17
    6ddc:	cf 93       	push	r28
    6dde:	df 93       	push	r29
    6de0:	cd b7       	in	r28, 0x3d	; 61
    6de2:	de b7       	in	r29, 0x3e	; 62
    6de4:	62 97       	sbiw	r28, 0x12	; 18
    6de6:	cd bf       	out	0x3d, r28	; 61
    6de8:	de bf       	out	0x3e, r29	; 62
    6dea:	08 2f       	mov	r16, r24
    6dec:	10 e0       	ldi	r17, 0x00	; 0
    6dee:	9c e1       	ldi	r25, 0x1C	; 28
    6df0:	90 9f       	mul	r25, r16
    6df2:	f0 01       	movw	r30, r0
    6df4:	91 9f       	mul	r25, r17
    6df6:	f0 0d       	add	r31, r0
    6df8:	11 24       	eor	r1, r1
    6dfa:	e8 5b       	subi	r30, 0xB8	; 184
    6dfc:	fc 49       	sbci	r31, 0x9C	; 156
    6dfe:	42 89       	ldd	r20, Z+18	; 0x12
    6e00:	50 e0       	ldi	r21, 0x00	; 0
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	25 c0       	rjmp	.+74     	; 0x6e50 <lin_diagservice_read_by_identifier+0x7c>
    6e06:	24 e3       	ldi	r18, 0x34	; 52
    6e08:	20 9f       	mul	r18, r16
    6e0a:	d0 01       	movw	r26, r0
    6e0c:	21 9f       	mul	r18, r17
    6e0e:	b0 0d       	add	r27, r0
    6e10:	11 24       	eor	r1, r1
    6e12:	ad 56       	subi	r26, 0x6D	; 109
    6e14:	b8 49       	sbci	r27, 0x98	; 152
    6e16:	54 96       	adiw	r26, 0x14	; 20
    6e18:	2d 91       	ld	r18, X+
    6e1a:	3c 91       	ld	r19, X
    6e1c:	55 97       	sbiw	r26, 0x15	; 21
    6e1e:	1b 96       	adiw	r26, 0x0b	; 11
    6e20:	ed 91       	ld	r30, X+
    6e22:	fc 91       	ld	r31, X
    6e24:	1c 97       	sbiw	r26, 0x0c	; 12
    6e26:	ee 0f       	add	r30, r30
    6e28:	ff 1f       	adc	r31, r31
    6e2a:	ee 0f       	add	r30, r30
    6e2c:	ff 1f       	adc	r31, r31
    6e2e:	ee 0f       	add	r30, r30
    6e30:	ff 1f       	adc	r31, r31
    6e32:	e2 0f       	add	r30, r18
    6e34:	f3 1f       	adc	r31, r19
    6e36:	29 2f       	mov	r18, r25
    6e38:	30 e0       	ldi	r19, 0x00	; 0
    6e3a:	e2 0f       	add	r30, r18
    6e3c:	f3 1f       	adc	r31, r19
    6e3e:	60 81       	ld	r22, Z
    6e40:	e6 e0       	ldi	r30, 0x06	; 6
    6e42:	f0 e0       	ldi	r31, 0x00	; 0
    6e44:	ec 0f       	add	r30, r28
    6e46:	fd 1f       	adc	r31, r29
    6e48:	e2 0f       	add	r30, r18
    6e4a:	f3 1f       	adc	r31, r19
    6e4c:	60 83       	st	Z, r22
    6e4e:	9f 5f       	subi	r25, 0xFF	; 255
    6e50:	98 30       	cpi	r25, 0x08	; 8
    6e52:	c8 f2       	brcs	.-78     	; 0x6e06 <lin_diagservice_read_by_identifier+0x32>
    6e54:	94 e2       	ldi	r25, 0x24	; 36
    6e56:	94 9f       	mul	r25, r20
    6e58:	f0 01       	movw	r30, r0
    6e5a:	95 9f       	mul	r25, r21
    6e5c:	f0 0d       	add	r31, r0
    6e5e:	11 24       	eor	r1, r1
    6e60:	e9 59       	subi	r30, 0x99	; 153
    6e62:	fc 49       	sbci	r31, 0x9C	; 156
    6e64:	95 e0       	ldi	r25, 0x05	; 5
    6e66:	de 01       	movw	r26, r28
    6e68:	11 96       	adiw	r26, 0x01	; 1
    6e6a:	01 90       	ld	r0, Z+
    6e6c:	0d 92       	st	X+, r0
    6e6e:	9a 95       	dec	r25
    6e70:	e1 f7       	brne	.-8      	; 0x6e6a <lin_diagservice_read_by_identifier+0x96>
    6e72:	2b 85       	ldd	r18, Y+11	; 0x0b
    6e74:	30 e0       	ldi	r19, 0x00	; 0
    6e76:	32 2f       	mov	r19, r18
    6e78:	22 27       	eor	r18, r18
    6e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e7c:	29 2b       	or	r18, r25
    6e7e:	4d 85       	ldd	r20, Y+13	; 0x0d
    6e80:	50 e0       	ldi	r21, 0x00	; 0
    6e82:	54 2f       	mov	r21, r20
    6e84:	44 27       	eor	r20, r20
    6e86:	9c 85       	ldd	r25, Y+12	; 0x0c
    6e88:	49 2b       	or	r20, r25
    6e8a:	69 81       	ldd	r22, Y+1	; 0x01
    6e8c:	7a 81       	ldd	r23, Y+2	; 0x02
    6e8e:	26 17       	cp	r18, r22
    6e90:	37 07       	cpc	r19, r23
    6e92:	19 f0       	breq	.+6      	; 0x6e9a <lin_diagservice_read_by_identifier+0xc6>
    6e94:	2f 3f       	cpi	r18, 0xFF	; 255
    6e96:	3f 47       	sbci	r19, 0x7F	; 127
    6e98:	41 f4       	brne	.+16     	; 0x6eaa <lin_diagservice_read_by_identifier+0xd6>
    6e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    6e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    6e9e:	42 17       	cp	r20, r18
    6ea0:	53 07       	cpc	r21, r19
    6ea2:	69 f0       	breq	.+26     	; 0x6ebe <lin_diagservice_read_by_identifier+0xea>
    6ea4:	4f 3f       	cpi	r20, 0xFF	; 255
    6ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ea8:	51 f0       	breq	.+20     	; 0x6ebe <lin_diagservice_read_by_identifier+0xea>
    6eaa:	84 e3       	ldi	r24, 0x34	; 52
    6eac:	80 9f       	mul	r24, r16
    6eae:	f0 01       	movw	r30, r0
    6eb0:	81 9f       	mul	r24, r17
    6eb2:	f0 0d       	add	r31, r0
    6eb4:	11 24       	eor	r1, r1
    6eb6:	ed 56       	subi	r30, 0x6D	; 109
    6eb8:	f8 49       	sbci	r31, 0x98	; 152
    6eba:	12 a6       	std	Z+42, r1	; 0x2a
    6ebc:	66 c0       	rjmp	.+204    	; 0x6f8a <lin_diagservice_read_by_identifier+0x1b6>
    6ebe:	f8 2e       	mov	r15, r24
    6ec0:	e9 84       	ldd	r14, Y+9	; 0x09
    6ec2:	ee 20       	and	r14, r14
    6ec4:	21 f0       	breq	.+8      	; 0x6ece <lin_diagservice_read_by_identifier+0xfa>
    6ec6:	81 e0       	ldi	r24, 0x01	; 1
    6ec8:	e8 16       	cp	r14, r24
    6eca:	39 f0       	breq	.+14     	; 0x6eda <lin_diagservice_read_by_identifier+0x106>
    6ecc:	0d c0       	rjmp	.+26     	; 0x6ee8 <lin_diagservice_read_by_identifier+0x114>
    6ece:	2e 2d       	mov	r18, r14
    6ed0:	41 e0       	ldi	r20, 0x01	; 1
    6ed2:	62 eb       	ldi	r22, 0xB2	; 178
    6ed4:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6ed8:	58 c0       	rjmp	.+176    	; 0x6f8a <lin_diagservice_read_by_identifier+0x1b6>
    6eda:	2e 2d       	mov	r18, r14
    6edc:	41 e0       	ldi	r20, 0x01	; 1
    6ede:	62 eb       	ldi	r22, 0xB2	; 178
    6ee0:	8f 2d       	mov	r24, r15
    6ee2:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6ee6:	51 c0       	rjmp	.+162    	; 0x6f8a <lin_diagservice_read_by_identifier+0x1b6>
    6ee8:	80 ee       	ldi	r24, 0xE0	; 224
    6eea:	8e 0d       	add	r24, r14
    6eec:	80 32       	cpi	r24, 0x20	; 32
    6eee:	08 f0       	brcs	.+2      	; 0x6ef2 <lin_diagservice_read_by_identifier+0x11e>
    6ef0:	46 c0       	rjmp	.+140    	; 0x6f7e <lin_diagservice_read_by_identifier+0x1aa>
    6ef2:	85 e0       	ldi	r24, 0x05	; 5
    6ef4:	eb ef       	ldi	r30, 0xFB	; 251
    6ef6:	f2 e6       	ldi	r31, 0x62	; 98
    6ef8:	de 01       	movw	r26, r28
    6efa:	1e 96       	adiw	r26, 0x0e	; 14
    6efc:	01 90       	ld	r0, Z+
    6efe:	0d 92       	st	X+, r0
    6f00:	8a 95       	dec	r24
    6f02:	e1 f7       	brne	.-8      	; 0x6efc <lin_diagservice_read_by_identifier+0x128>
    6f04:	ae 01       	movw	r20, r28
    6f06:	42 5f       	subi	r20, 0xF2	; 242
    6f08:	5f 4f       	sbci	r21, 0xFF	; 255
    6f0a:	6e 2d       	mov	r22, r14
    6f0c:	8f 2d       	mov	r24, r15
    6f0e:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <ld_read_by_id_callout>
    6f12:	84 35       	cpi	r24, 0x54	; 84
    6f14:	f9 f4       	brne	.+62     	; 0x6f54 <lin_diagservice_read_by_identifier+0x180>
    6f16:	02 c0       	rjmp	.+4      	; 0x6f1c <lin_diagservice_read_by_identifier+0x148>
    6f18:	8f 5f       	subi	r24, 0xFF	; 255
    6f1a:	01 c0       	rjmp	.+2      	; 0x6f1e <lin_diagservice_read_by_identifier+0x14a>
    6f1c:	80 e0       	ldi	r24, 0x00	; 0
    6f1e:	85 30       	cpi	r24, 0x05	; 5
    6f20:	48 f4       	brcc	.+18     	; 0x6f34 <lin_diagservice_read_by_identifier+0x160>
    6f22:	ee e0       	ldi	r30, 0x0E	; 14
    6f24:	f0 e0       	ldi	r31, 0x00	; 0
    6f26:	ec 0f       	add	r30, r28
    6f28:	fd 1f       	adc	r31, r29
    6f2a:	e8 0f       	add	r30, r24
    6f2c:	f1 1d       	adc	r31, r1
    6f2e:	90 81       	ld	r25, Z
    6f30:	9f 3f       	cpi	r25, 0xFF	; 255
    6f32:	91 f3       	breq	.-28     	; 0x6f18 <lin_diagservice_read_by_identifier+0x144>
    6f34:	85 30       	cpi	r24, 0x05	; 5
    6f36:	38 f4       	brcc	.+14     	; 0x6f46 <lin_diagservice_read_by_identifier+0x172>
    6f38:	2e 2d       	mov	r18, r14
    6f3a:	41 e0       	ldi	r20, 0x01	; 1
    6f3c:	62 eb       	ldi	r22, 0xB2	; 178
    6f3e:	8f 2d       	mov	r24, r15
    6f40:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6f44:	22 c0       	rjmp	.+68     	; 0x6f8a <lin_diagservice_read_by_identifier+0x1b6>
    6f46:	22 e1       	ldi	r18, 0x12	; 18
    6f48:	40 e0       	ldi	r20, 0x00	; 0
    6f4a:	62 eb       	ldi	r22, 0xB2	; 178
    6f4c:	8f 2d       	mov	r24, r15
    6f4e:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6f52:	1b c0       	rjmp	.+54     	; 0x6f8a <lin_diagservice_read_by_identifier+0x1b6>
    6f54:	83 35       	cpi	r24, 0x53	; 83
    6f56:	39 f4       	brne	.+14     	; 0x6f66 <lin_diagservice_read_by_identifier+0x192>
    6f58:	22 e1       	ldi	r18, 0x12	; 18
    6f5a:	40 e0       	ldi	r20, 0x00	; 0
    6f5c:	62 eb       	ldi	r22, 0xB2	; 178
    6f5e:	8f 2d       	mov	r24, r15
    6f60:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6f64:	12 c0       	rjmp	.+36     	; 0x6f8a <lin_diagservice_read_by_identifier+0x1b6>
    6f66:	84 e3       	ldi	r24, 0x34	; 52
    6f68:	80 9f       	mul	r24, r16
    6f6a:	f0 01       	movw	r30, r0
    6f6c:	81 9f       	mul	r24, r17
    6f6e:	f0 0d       	add	r31, r0
    6f70:	11 24       	eor	r1, r1
    6f72:	ed 56       	subi	r30, 0x6D	; 109
    6f74:	f8 49       	sbci	r31, 0x98	; 152
    6f76:	12 a6       	std	Z+42, r1	; 0x2a
    6f78:	82 e0       	ldi	r24, 0x02	; 2
    6f7a:	83 a7       	std	Z+43, r24	; 0x2b
    6f7c:	06 c0       	rjmp	.+12     	; 0x6f8a <lin_diagservice_read_by_identifier+0x1b6>
    6f7e:	22 e1       	ldi	r18, 0x12	; 18
    6f80:	40 e0       	ldi	r20, 0x00	; 0
    6f82:	62 eb       	ldi	r22, 0xB2	; 178
    6f84:	8f 2d       	mov	r24, r15
    6f86:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    6f8a:	62 96       	adiw	r28, 0x12	; 18
    6f8c:	cd bf       	out	0x3d, r28	; 61
    6f8e:	de bf       	out	0x3e, r29	; 62
    6f90:	df 91       	pop	r29
    6f92:	cf 91       	pop	r28
    6f94:	1f 91       	pop	r17
    6f96:	0f 91       	pop	r16
    6f98:	ff 90       	pop	r15
    6f9a:	ef 90       	pop	r14
    6f9c:	08 95       	ret

00006f9e <lin_read_data_by_identify>:
    6f9e:	af 92       	push	r10
    6fa0:	bf 92       	push	r11
    6fa2:	cf 92       	push	r12
    6fa4:	df 92       	push	r13
    6fa6:	ef 92       	push	r14
    6fa8:	ff 92       	push	r15
    6faa:	0f 93       	push	r16
    6fac:	1f 93       	push	r17
    6fae:	cf 93       	push	r28
    6fb0:	df 93       	push	r29
    6fb2:	cd b7       	in	r28, 0x3d	; 61
    6fb4:	de b7       	in	r29, 0x3e	; 62
    6fb6:	28 97       	sbiw	r28, 0x08	; 8
    6fb8:	cd bf       	out	0x3d, r28	; 61
    6fba:	de bf       	out	0x3e, r29	; 62
    6fbc:	f8 2e       	mov	r15, r24
    6fbe:	08 2f       	mov	r16, r24
    6fc0:	10 e0       	ldi	r17, 0x00	; 0
    6fc2:	8c e1       	ldi	r24, 0x1C	; 28
    6fc4:	80 9f       	mul	r24, r16
    6fc6:	f0 01       	movw	r30, r0
    6fc8:	81 9f       	mul	r24, r17
    6fca:	f0 0d       	add	r31, r0
    6fcc:	11 24       	eor	r1, r1
    6fce:	e8 5b       	subi	r30, 0xB8	; 184
    6fd0:	fc 49       	sbci	r31, 0x9C	; 156
    6fd2:	22 89       	ldd	r18, Z+18	; 0x12
    6fd4:	30 e0       	ldi	r19, 0x00	; 0
    6fd6:	40 e0       	ldi	r20, 0x00	; 0
    6fd8:	25 c0       	rjmp	.+74     	; 0x7024 <lin_read_data_by_identify+0x86>
    6fda:	84 e3       	ldi	r24, 0x34	; 52
    6fdc:	80 9f       	mul	r24, r16
    6fde:	d0 01       	movw	r26, r0
    6fe0:	81 9f       	mul	r24, r17
    6fe2:	b0 0d       	add	r27, r0
    6fe4:	11 24       	eor	r1, r1
    6fe6:	ad 56       	subi	r26, 0x6D	; 109
    6fe8:	b8 49       	sbci	r27, 0x98	; 152
    6fea:	54 96       	adiw	r26, 0x14	; 20
    6fec:	8d 91       	ld	r24, X+
    6fee:	9c 91       	ld	r25, X
    6ff0:	55 97       	sbiw	r26, 0x15	; 21
    6ff2:	1b 96       	adiw	r26, 0x0b	; 11
    6ff4:	ed 91       	ld	r30, X+
    6ff6:	fc 91       	ld	r31, X
    6ff8:	1c 97       	sbiw	r26, 0x0c	; 12
    6ffa:	ee 0f       	add	r30, r30
    6ffc:	ff 1f       	adc	r31, r31
    6ffe:	ee 0f       	add	r30, r30
    7000:	ff 1f       	adc	r31, r31
    7002:	ee 0f       	add	r30, r30
    7004:	ff 1f       	adc	r31, r31
    7006:	e8 0f       	add	r30, r24
    7008:	f9 1f       	adc	r31, r25
    700a:	84 2f       	mov	r24, r20
    700c:	90 e0       	ldi	r25, 0x00	; 0
    700e:	e8 0f       	add	r30, r24
    7010:	f9 1f       	adc	r31, r25
    7012:	50 81       	ld	r21, Z
    7014:	e1 e0       	ldi	r30, 0x01	; 1
    7016:	f0 e0       	ldi	r31, 0x00	; 0
    7018:	ec 0f       	add	r30, r28
    701a:	fd 1f       	adc	r31, r29
    701c:	e8 0f       	add	r30, r24
    701e:	f9 1f       	adc	r31, r25
    7020:	50 83       	st	Z, r21
    7022:	4f 5f       	subi	r20, 0xFF	; 255
    7024:	48 30       	cpi	r20, 0x08	; 8
    7026:	c8 f2       	brcs	.-78     	; 0x6fda <lin_read_data_by_identify+0x3c>
    7028:	8c 81       	ldd	r24, Y+4	; 0x04
    702a:	90 e0       	ldi	r25, 0x00	; 0
    702c:	98 2f       	mov	r25, r24
    702e:	88 27       	eor	r24, r24
    7030:	4d 81       	ldd	r20, Y+5	; 0x05
    7032:	84 2b       	or	r24, r20
    7034:	4b 81       	ldd	r20, Y+3	; 0x03
    7036:	81 39       	cpi	r24, 0x91	; 145
    7038:	51 ef       	ldi	r21, 0xF1	; 241
    703a:	95 07       	cpc	r25, r21
    703c:	09 f4       	brne	.+2      	; 0x7040 <lin_read_data_by_identify+0xa2>
    703e:	db c0       	rjmp	.+438    	; 0x71f6 <lin_read_data_by_identify+0x258>
    7040:	48 f4       	brcc	.+18     	; 0x7054 <lin_read_data_by_identify+0xb6>
    7042:	80 38       	cpi	r24, 0x80	; 128
    7044:	f1 ef       	ldi	r31, 0xF1	; 241
    7046:	9f 07       	cpc	r25, r31
    7048:	09 f4       	brne	.+2      	; 0x704c <lin_read_data_by_identify+0xae>
    704a:	91 c0       	rjmp	.+290    	; 0x716e <lin_read_data_by_identify+0x1d0>
    704c:	88 38       	cpi	r24, 0x88	; 136
    704e:	91 4f       	sbci	r25, 0xF1	; 241
    7050:	59 f0       	breq	.+22     	; 0x7068 <lin_read_data_by_identify+0xca>
    7052:	14 c1       	rjmp	.+552    	; 0x727c <lin_read_data_by_identify+0x2de>
    7054:	88 39       	cpi	r24, 0x98	; 152
    7056:	e1 ef       	ldi	r30, 0xF1	; 241
    7058:	9e 07       	cpc	r25, r30
    705a:	09 f4       	brne	.+2      	; 0x705e <lin_read_data_by_identify+0xc0>
    705c:	15 c1       	rjmp	.+554    	; 0x7288 <lin_read_data_by_identify+0x2ea>
    705e:	89 39       	cpi	r24, 0x99	; 153
    7060:	91 4f       	sbci	r25, 0xF1	; 241
    7062:	09 f4       	brne	.+2      	; 0x7066 <lin_read_data_by_identify+0xc8>
    7064:	45 c0       	rjmp	.+138    	; 0x70f0 <lin_read_data_by_identify+0x152>
    7066:	0a c1       	rjmp	.+532    	; 0x727c <lin_read_data_by_identify+0x2de>
    7068:	84 e2       	ldi	r24, 0x24	; 36
    706a:	82 9f       	mul	r24, r18
    706c:	f0 01       	movw	r30, r0
    706e:	83 9f       	mul	r24, r19
    7070:	f0 0d       	add	r31, r0
    7072:	11 24       	eor	r1, r1
    7074:	ec 59       	subi	r30, 0x9C	; 156
    7076:	fc 49       	sbci	r31, 0x9C	; 156
    7078:	a0 80       	ld	r10, Z
    707a:	b1 80       	ldd	r11, Z+1	; 0x01
    707c:	f5 01       	movw	r30, r10
    707e:	80 81       	ld	r24, Z
    7080:	89 83       	std	Y+1, r24	; 0x01
    7082:	80 e1       	ldi	r24, 0x10	; 16
    7084:	8a 83       	std	Y+2, r24	; 0x02
    7086:	8a e0       	ldi	r24, 0x0A	; 10
    7088:	8b 83       	std	Y+3, r24	; 0x03
    708a:	40 5c       	subi	r20, 0xC0	; 192
    708c:	4c 83       	std	Y+4, r20	; 0x04
    708e:	81 ef       	ldi	r24, 0xF1	; 241
    7090:	8d 83       	std	Y+5, r24	; 0x05
    7092:	88 e8       	ldi	r24, 0x88	; 136
    7094:	8e 83       	std	Y+6, r24	; 0x06
    7096:	0f 2e       	mov	r0, r31
    7098:	f0 e3       	ldi	r31, 0x30	; 48
    709a:	ef 2e       	mov	r14, r31
    709c:	f0 2d       	mov	r31, r0
    709e:	ef 82       	std	Y+7, r14	; 0x07
    70a0:	0f 2e       	mov	r0, r31
    70a2:	f2 e3       	ldi	r31, 0x32	; 50
    70a4:	df 2e       	mov	r13, r31
    70a6:	f0 2d       	mov	r31, r0
    70a8:	d8 86       	std	Y+8, r13	; 0x08
    70aa:	be 01       	movw	r22, r28
    70ac:	6f 5f       	subi	r22, 0xFF	; 255
    70ae:	7f 4f       	sbci	r23, 0xFF	; 255
    70b0:	8f 2d       	mov	r24, r15
    70b2:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    70b6:	f5 01       	movw	r30, r10
    70b8:	80 81       	ld	r24, Z
    70ba:	89 83       	std	Y+1, r24	; 0x01
    70bc:	81 e2       	ldi	r24, 0x21	; 33
    70be:	8a 83       	std	Y+2, r24	; 0x02
    70c0:	8e e2       	ldi	r24, 0x2E	; 46
    70c2:	8b 83       	std	Y+3, r24	; 0x03
    70c4:	ec 82       	std	Y+4, r14	; 0x04
    70c6:	dd 82       	std	Y+5, r13	; 0x05
    70c8:	8e 83       	std	Y+6, r24	; 0x06
    70ca:	ef 82       	std	Y+7, r14	; 0x07
    70cc:	e8 86       	std	Y+8, r14	; 0x08
    70ce:	be 01       	movw	r22, r28
    70d0:	6f 5f       	subi	r22, 0xFF	; 255
    70d2:	7f 4f       	sbci	r23, 0xFF	; 255
    70d4:	8f 2d       	mov	r24, r15
    70d6:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    70da:	84 e3       	ldi	r24, 0x34	; 52
    70dc:	80 9f       	mul	r24, r16
    70de:	f0 01       	movw	r30, r0
    70e0:	81 9f       	mul	r24, r17
    70e2:	f0 0d       	add	r31, r0
    70e4:	11 24       	eor	r1, r1
    70e6:	ed 56       	subi	r30, 0x6D	; 109
    70e8:	f8 49       	sbci	r31, 0x98	; 152
    70ea:	82 e0       	ldi	r24, 0x02	; 2
    70ec:	86 a3       	std	Z+38, r24	; 0x26
    70ee:	cc c0       	rjmp	.+408    	; 0x7288 <lin_read_data_by_identify+0x2ea>
    70f0:	84 e2       	ldi	r24, 0x24	; 36
    70f2:	82 9f       	mul	r24, r18
    70f4:	f0 01       	movw	r30, r0
    70f6:	83 9f       	mul	r24, r19
    70f8:	f0 0d       	add	r31, r0
    70fa:	11 24       	eor	r1, r1
    70fc:	ec 59       	subi	r30, 0x9C	; 156
    70fe:	fc 49       	sbci	r31, 0x9C	; 156
    7100:	c0 80       	ld	r12, Z
    7102:	d1 80       	ldd	r13, Z+1	; 0x01
    7104:	f6 01       	movw	r30, r12
    7106:	80 81       	ld	r24, Z
    7108:	89 83       	std	Y+1, r24	; 0x01
    710a:	80 e1       	ldi	r24, 0x10	; 16
    710c:	8a 83       	std	Y+2, r24	; 0x02
    710e:	96 e0       	ldi	r25, 0x06	; 6
    7110:	9b 83       	std	Y+3, r25	; 0x03
    7112:	40 5c       	subi	r20, 0xC0	; 192
    7114:	4c 83       	std	Y+4, r20	; 0x04
    7116:	91 ef       	ldi	r25, 0xF1	; 241
    7118:	9d 83       	std	Y+5, r25	; 0x05
    711a:	99 e9       	ldi	r25, 0x99	; 153
    711c:	9e 83       	std	Y+6, r25	; 0x06
    711e:	94 e1       	ldi	r25, 0x14	; 20
    7120:	9f 83       	std	Y+7, r25	; 0x07
    7122:	88 87       	std	Y+8, r24	; 0x08
    7124:	be 01       	movw	r22, r28
    7126:	6f 5f       	subi	r22, 0xFF	; 255
    7128:	7f 4f       	sbci	r23, 0xFF	; 255
    712a:	8f 2d       	mov	r24, r15
    712c:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    7130:	f6 01       	movw	r30, r12
    7132:	80 81       	ld	r24, Z
    7134:	89 83       	std	Y+1, r24	; 0x01
    7136:	81 e2       	ldi	r24, 0x21	; 33
    7138:	8a 83       	std	Y+2, r24	; 0x02
    713a:	8b e0       	ldi	r24, 0x0B	; 11
    713c:	8b 83       	std	Y+3, r24	; 0x03
    713e:	8c e0       	ldi	r24, 0x0C	; 12
    7140:	8c 83       	std	Y+4, r24	; 0x04
    7142:	8f ef       	ldi	r24, 0xFF	; 255
    7144:	8d 83       	std	Y+5, r24	; 0x05
    7146:	8e 83       	std	Y+6, r24	; 0x06
    7148:	8f 83       	std	Y+7, r24	; 0x07
    714a:	88 87       	std	Y+8, r24	; 0x08
    714c:	be 01       	movw	r22, r28
    714e:	6f 5f       	subi	r22, 0xFF	; 255
    7150:	7f 4f       	sbci	r23, 0xFF	; 255
    7152:	8f 2d       	mov	r24, r15
    7154:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    7158:	84 e3       	ldi	r24, 0x34	; 52
    715a:	80 9f       	mul	r24, r16
    715c:	f0 01       	movw	r30, r0
    715e:	81 9f       	mul	r24, r17
    7160:	f0 0d       	add	r31, r0
    7162:	11 24       	eor	r1, r1
    7164:	ed 56       	subi	r30, 0x6D	; 109
    7166:	f8 49       	sbci	r31, 0x98	; 152
    7168:	82 e0       	ldi	r24, 0x02	; 2
    716a:	86 a3       	std	Z+38, r24	; 0x26
    716c:	8d c0       	rjmp	.+282    	; 0x7288 <lin_read_data_by_identify+0x2ea>
    716e:	84 e2       	ldi	r24, 0x24	; 36
    7170:	82 9f       	mul	r24, r18
    7172:	f0 01       	movw	r30, r0
    7174:	83 9f       	mul	r24, r19
    7176:	f0 0d       	add	r31, r0
    7178:	11 24       	eor	r1, r1
    717a:	ec 59       	subi	r30, 0x9C	; 156
    717c:	fc 49       	sbci	r31, 0x9C	; 156
    717e:	a0 80       	ld	r10, Z
    7180:	b1 80       	ldd	r11, Z+1	; 0x01
    7182:	f5 01       	movw	r30, r10
    7184:	80 81       	ld	r24, Z
    7186:	89 83       	std	Y+1, r24	; 0x01
    7188:	80 e1       	ldi	r24, 0x10	; 16
    718a:	8a 83       	std	Y+2, r24	; 0x02
    718c:	8a e0       	ldi	r24, 0x0A	; 10
    718e:	8b 83       	std	Y+3, r24	; 0x03
    7190:	40 5c       	subi	r20, 0xC0	; 192
    7192:	4c 83       	std	Y+4, r20	; 0x04
    7194:	81 ef       	ldi	r24, 0xF1	; 241
    7196:	8d 83       	std	Y+5, r24	; 0x05
    7198:	80 e8       	ldi	r24, 0x80	; 128
    719a:	8e 83       	std	Y+6, r24	; 0x06
    719c:	0f 2e       	mov	r0, r31
    719e:	f0 e3       	ldi	r31, 0x30	; 48
    71a0:	ef 2e       	mov	r14, r31
    71a2:	f0 2d       	mov	r31, r0
    71a4:	ef 82       	std	Y+7, r14	; 0x07
    71a6:	0f 2e       	mov	r0, r31
    71a8:	f2 e3       	ldi	r31, 0x32	; 50
    71aa:	df 2e       	mov	r13, r31
    71ac:	f0 2d       	mov	r31, r0
    71ae:	d8 86       	std	Y+8, r13	; 0x08
    71b0:	be 01       	movw	r22, r28
    71b2:	6f 5f       	subi	r22, 0xFF	; 255
    71b4:	7f 4f       	sbci	r23, 0xFF	; 255
    71b6:	8f 2d       	mov	r24, r15
    71b8:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    71bc:	f5 01       	movw	r30, r10
    71be:	80 81       	ld	r24, Z
    71c0:	89 83       	std	Y+1, r24	; 0x01
    71c2:	81 e2       	ldi	r24, 0x21	; 33
    71c4:	8a 83       	std	Y+2, r24	; 0x02
    71c6:	8e e2       	ldi	r24, 0x2E	; 46
    71c8:	8b 83       	std	Y+3, r24	; 0x03
    71ca:	ec 82       	std	Y+4, r14	; 0x04
    71cc:	dd 82       	std	Y+5, r13	; 0x05
    71ce:	8e 83       	std	Y+6, r24	; 0x06
    71d0:	ef 82       	std	Y+7, r14	; 0x07
    71d2:	e8 86       	std	Y+8, r14	; 0x08
    71d4:	be 01       	movw	r22, r28
    71d6:	6f 5f       	subi	r22, 0xFF	; 255
    71d8:	7f 4f       	sbci	r23, 0xFF	; 255
    71da:	8f 2d       	mov	r24, r15
    71dc:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    71e0:	84 e3       	ldi	r24, 0x34	; 52
    71e2:	80 9f       	mul	r24, r16
    71e4:	f0 01       	movw	r30, r0
    71e6:	81 9f       	mul	r24, r17
    71e8:	f0 0d       	add	r31, r0
    71ea:	11 24       	eor	r1, r1
    71ec:	ed 56       	subi	r30, 0x6D	; 109
    71ee:	f8 49       	sbci	r31, 0x98	; 152
    71f0:	82 e0       	ldi	r24, 0x02	; 2
    71f2:	86 a3       	std	Z+38, r24	; 0x26
    71f4:	49 c0       	rjmp	.+146    	; 0x7288 <lin_read_data_by_identify+0x2ea>
    71f6:	84 e2       	ldi	r24, 0x24	; 36
    71f8:	82 9f       	mul	r24, r18
    71fa:	f0 01       	movw	r30, r0
    71fc:	83 9f       	mul	r24, r19
    71fe:	f0 0d       	add	r31, r0
    7200:	11 24       	eor	r1, r1
    7202:	ec 59       	subi	r30, 0x9C	; 156
    7204:	fc 49       	sbci	r31, 0x9C	; 156
    7206:	c0 80       	ld	r12, Z
    7208:	d1 80       	ldd	r13, Z+1	; 0x01
    720a:	f6 01       	movw	r30, r12
    720c:	80 81       	ld	r24, Z
    720e:	89 83       	std	Y+1, r24	; 0x01
    7210:	80 e1       	ldi	r24, 0x10	; 16
    7212:	8a 83       	std	Y+2, r24	; 0x02
    7214:	87 e0       	ldi	r24, 0x07	; 7
    7216:	8b 83       	std	Y+3, r24	; 0x03
    7218:	40 5c       	subi	r20, 0xC0	; 192
    721a:	4c 83       	std	Y+4, r20	; 0x04
    721c:	81 ef       	ldi	r24, 0xF1	; 241
    721e:	8d 83       	std	Y+5, r24	; 0x05
    7220:	81 e9       	ldi	r24, 0x91	; 145
    7222:	8e 83       	std	Y+6, r24	; 0x06
    7224:	88 e4       	ldi	r24, 0x48	; 72
    7226:	8f 83       	std	Y+7, r24	; 0x07
    7228:	0f 2e       	mov	r0, r31
    722a:	f1 e2       	ldi	r31, 0x21	; 33
    722c:	ef 2e       	mov	r14, r31
    722e:	f0 2d       	mov	r31, r0
    7230:	e8 86       	std	Y+8, r14	; 0x08
    7232:	be 01       	movw	r22, r28
    7234:	6f 5f       	subi	r22, 0xFF	; 255
    7236:	7f 4f       	sbci	r23, 0xFF	; 255
    7238:	8f 2d       	mov	r24, r15
    723a:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    723e:	f6 01       	movw	r30, r12
    7240:	80 81       	ld	r24, Z
    7242:	89 83       	std	Y+1, r24	; 0x01
    7244:	ea 82       	std	Y+2, r14	; 0x02
    7246:	8e e2       	ldi	r24, 0x2E	; 46
    7248:	8b 83       	std	Y+3, r24	; 0x03
    724a:	80 e3       	ldi	r24, 0x30	; 48
    724c:	8c 83       	std	Y+4, r24	; 0x04
    724e:	81 e3       	ldi	r24, 0x31	; 49
    7250:	8d 83       	std	Y+5, r24	; 0x05
    7252:	8f ef       	ldi	r24, 0xFF	; 255
    7254:	8e 83       	std	Y+6, r24	; 0x06
    7256:	8f 83       	std	Y+7, r24	; 0x07
    7258:	88 87       	std	Y+8, r24	; 0x08
    725a:	be 01       	movw	r22, r28
    725c:	6f 5f       	subi	r22, 0xFF	; 255
    725e:	7f 4f       	sbci	r23, 0xFF	; 255
    7260:	8f 2d       	mov	r24, r15
    7262:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    7266:	84 e3       	ldi	r24, 0x34	; 52
    7268:	80 9f       	mul	r24, r16
    726a:	f0 01       	movw	r30, r0
    726c:	81 9f       	mul	r24, r17
    726e:	f0 0d       	add	r31, r0
    7270:	11 24       	eor	r1, r1
    7272:	ed 56       	subi	r30, 0x6D	; 109
    7274:	f8 49       	sbci	r31, 0x98	; 152
    7276:	82 e0       	ldi	r24, 0x02	; 2
    7278:	86 a3       	std	Z+38, r24	; 0x26
    727a:	06 c0       	rjmp	.+12     	; 0x7288 <lin_read_data_by_identify+0x2ea>
    727c:	20 e0       	ldi	r18, 0x00	; 0
    727e:	40 e0       	ldi	r20, 0x00	; 0
    7280:	62 e2       	ldi	r22, 0x22	; 34
    7282:	8f 2d       	mov	r24, r15
    7284:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    7288:	28 96       	adiw	r28, 0x08	; 8
    728a:	cd bf       	out	0x3d, r28	; 61
    728c:	de bf       	out	0x3e, r29	; 62
    728e:	df 91       	pop	r29
    7290:	cf 91       	pop	r28
    7292:	1f 91       	pop	r17
    7294:	0f 91       	pop	r16
    7296:	ff 90       	pop	r15
    7298:	ef 90       	pop	r14
    729a:	df 90       	pop	r13
    729c:	cf 90       	pop	r12
    729e:	bf 90       	pop	r11
    72a0:	af 90       	pop	r10
    72a2:	08 95       	ret

000072a4 <lin_slave_session_ctr>:
    72a4:	ff 92       	push	r15
    72a6:	0f 93       	push	r16
    72a8:	1f 93       	push	r17
    72aa:	cf 93       	push	r28
    72ac:	df 93       	push	r29
    72ae:	cd b7       	in	r28, 0x3d	; 61
    72b0:	de b7       	in	r29, 0x3e	; 62
    72b2:	28 97       	sbiw	r28, 0x08	; 8
    72b4:	cd bf       	out	0x3d, r28	; 61
    72b6:	de bf       	out	0x3e, r29	; 62
    72b8:	08 2f       	mov	r16, r24
    72ba:	10 e0       	ldi	r17, 0x00	; 0
    72bc:	9c e1       	ldi	r25, 0x1C	; 28
    72be:	90 9f       	mul	r25, r16
    72c0:	f0 01       	movw	r30, r0
    72c2:	91 9f       	mul	r25, r17
    72c4:	f0 0d       	add	r31, r0
    72c6:	11 24       	eor	r1, r1
    72c8:	e8 5b       	subi	r30, 0xB8	; 184
    72ca:	fc 49       	sbci	r31, 0x9C	; 156
    72cc:	22 89       	ldd	r18, Z+18	; 0x12
    72ce:	30 e0       	ldi	r19, 0x00	; 0
    72d0:	94 e3       	ldi	r25, 0x34	; 52
    72d2:	90 9f       	mul	r25, r16
    72d4:	d0 01       	movw	r26, r0
    72d6:	91 9f       	mul	r25, r17
    72d8:	b0 0d       	add	r27, r0
    72da:	11 24       	eor	r1, r1
    72dc:	ad 56       	subi	r26, 0x6D	; 109
    72de:	b8 49       	sbci	r27, 0x98	; 152
    72e0:	54 96       	adiw	r26, 0x14	; 20
    72e2:	4d 91       	ld	r20, X+
    72e4:	5c 91       	ld	r21, X
    72e6:	55 97       	sbiw	r26, 0x15	; 21
    72e8:	1b 96       	adiw	r26, 0x0b	; 11
    72ea:	ed 91       	ld	r30, X+
    72ec:	fc 91       	ld	r31, X
    72ee:	1c 97       	sbiw	r26, 0x0c	; 12
    72f0:	ee 0f       	add	r30, r30
    72f2:	ff 1f       	adc	r31, r31
    72f4:	ee 0f       	add	r30, r30
    72f6:	ff 1f       	adc	r31, r31
    72f8:	ee 0f       	add	r30, r30
    72fa:	ff 1f       	adc	r31, r31
    72fc:	e4 0f       	add	r30, r20
    72fe:	f5 1f       	adc	r31, r21
    7300:	43 81       	ldd	r20, Z+3	; 0x03
    7302:	91 81       	ldd	r25, Z+1	; 0x01
    7304:	9f 70       	andi	r25, 0x0F	; 15
    7306:	92 30       	cpi	r25, 0x02	; 2
    7308:	09 f0       	breq	.+2      	; 0x730c <lin_slave_session_ctr+0x68>
    730a:	85 c0       	rjmp	.+266    	; 0x7416 <lin_slave_session_ctr+0x172>
    730c:	41 30       	cpi	r20, 0x01	; 1
    730e:	69 f1       	breq	.+90     	; 0x736a <lin_slave_session_ctr+0xc6>
    7310:	20 f0       	brcs	.+8      	; 0x731a <lin_slave_session_ctr+0x76>
    7312:	42 30       	cpi	r20, 0x02	; 2
    7314:	09 f4       	brne	.+2      	; 0x7318 <lin_slave_session_ctr+0x74>
    7316:	51 c0       	rjmp	.+162    	; 0x73ba <lin_slave_session_ctr+0x116>
    7318:	78 c0       	rjmp	.+240    	; 0x740a <lin_slave_session_ctr+0x166>
    731a:	94 e2       	ldi	r25, 0x24	; 36
    731c:	92 9f       	mul	r25, r18
    731e:	f0 01       	movw	r30, r0
    7320:	93 9f       	mul	r25, r19
    7322:	f0 0d       	add	r31, r0
    7324:	11 24       	eor	r1, r1
    7326:	ec 59       	subi	r30, 0x9C	; 156
    7328:	fc 49       	sbci	r31, 0x9C	; 156
    732a:	01 90       	ld	r0, Z+
    732c:	f0 81       	ld	r31, Z
    732e:	e0 2d       	mov	r30, r0
    7330:	90 81       	ld	r25, Z
    7332:	99 83       	std	Y+1, r25	; 0x01
    7334:	68 94       	set
    7336:	ff 24       	eor	r15, r15
    7338:	f1 f8       	bld	r15, 1
    733a:	fa 82       	std	Y+2, r15	; 0x02
    733c:	90 e5       	ldi	r25, 0x50	; 80
    733e:	9b 83       	std	Y+3, r25	; 0x03
    7340:	4c 83       	std	Y+4, r20	; 0x04
    7342:	9f ef       	ldi	r25, 0xFF	; 255
    7344:	9d 83       	std	Y+5, r25	; 0x05
    7346:	9e 83       	std	Y+6, r25	; 0x06
    7348:	9f 83       	std	Y+7, r25	; 0x07
    734a:	98 87       	std	Y+8, r25	; 0x08
    734c:	be 01       	movw	r22, r28
    734e:	6f 5f       	subi	r22, 0xFF	; 255
    7350:	7f 4f       	sbci	r23, 0xFF	; 255
    7352:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    7356:	84 e3       	ldi	r24, 0x34	; 52
    7358:	80 9f       	mul	r24, r16
    735a:	f0 01       	movw	r30, r0
    735c:	81 9f       	mul	r24, r17
    735e:	f0 0d       	add	r31, r0
    7360:	11 24       	eor	r1, r1
    7362:	ed 56       	subi	r30, 0x6D	; 109
    7364:	f8 49       	sbci	r31, 0x98	; 152
    7366:	f6 a2       	std	Z+38, r15	; 0x26
    7368:	5b c0       	rjmp	.+182    	; 0x7420 <lin_slave_session_ctr+0x17c>
    736a:	94 e2       	ldi	r25, 0x24	; 36
    736c:	92 9f       	mul	r25, r18
    736e:	f0 01       	movw	r30, r0
    7370:	93 9f       	mul	r25, r19
    7372:	f0 0d       	add	r31, r0
    7374:	11 24       	eor	r1, r1
    7376:	ec 59       	subi	r30, 0x9C	; 156
    7378:	fc 49       	sbci	r31, 0x9C	; 156
    737a:	01 90       	ld	r0, Z+
    737c:	f0 81       	ld	r31, Z
    737e:	e0 2d       	mov	r30, r0
    7380:	90 81       	ld	r25, Z
    7382:	99 83       	std	Y+1, r25	; 0x01
    7384:	68 94       	set
    7386:	ff 24       	eor	r15, r15
    7388:	f1 f8       	bld	r15, 1
    738a:	fa 82       	std	Y+2, r15	; 0x02
    738c:	90 e5       	ldi	r25, 0x50	; 80
    738e:	9b 83       	std	Y+3, r25	; 0x03
    7390:	4c 83       	std	Y+4, r20	; 0x04
    7392:	9f ef       	ldi	r25, 0xFF	; 255
    7394:	9d 83       	std	Y+5, r25	; 0x05
    7396:	9e 83       	std	Y+6, r25	; 0x06
    7398:	9f 83       	std	Y+7, r25	; 0x07
    739a:	98 87       	std	Y+8, r25	; 0x08
    739c:	be 01       	movw	r22, r28
    739e:	6f 5f       	subi	r22, 0xFF	; 255
    73a0:	7f 4f       	sbci	r23, 0xFF	; 255
    73a2:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    73a6:	84 e3       	ldi	r24, 0x34	; 52
    73a8:	80 9f       	mul	r24, r16
    73aa:	f0 01       	movw	r30, r0
    73ac:	81 9f       	mul	r24, r17
    73ae:	f0 0d       	add	r31, r0
    73b0:	11 24       	eor	r1, r1
    73b2:	ed 56       	subi	r30, 0x6D	; 109
    73b4:	f8 49       	sbci	r31, 0x98	; 152
    73b6:	f6 a2       	std	Z+38, r15	; 0x26
    73b8:	33 c0       	rjmp	.+102    	; 0x7420 <lin_slave_session_ctr+0x17c>
    73ba:	94 e2       	ldi	r25, 0x24	; 36
    73bc:	92 9f       	mul	r25, r18
    73be:	f0 01       	movw	r30, r0
    73c0:	93 9f       	mul	r25, r19
    73c2:	f0 0d       	add	r31, r0
    73c4:	11 24       	eor	r1, r1
    73c6:	ec 59       	subi	r30, 0x9C	; 156
    73c8:	fc 49       	sbci	r31, 0x9C	; 156
    73ca:	01 90       	ld	r0, Z+
    73cc:	f0 81       	ld	r31, Z
    73ce:	e0 2d       	mov	r30, r0
    73d0:	90 81       	ld	r25, Z
    73d2:	99 83       	std	Y+1, r25	; 0x01
    73d4:	68 94       	set
    73d6:	ff 24       	eor	r15, r15
    73d8:	f1 f8       	bld	r15, 1
    73da:	fa 82       	std	Y+2, r15	; 0x02
    73dc:	90 e5       	ldi	r25, 0x50	; 80
    73de:	9b 83       	std	Y+3, r25	; 0x03
    73e0:	4c 83       	std	Y+4, r20	; 0x04
    73e2:	9f ef       	ldi	r25, 0xFF	; 255
    73e4:	9d 83       	std	Y+5, r25	; 0x05
    73e6:	9e 83       	std	Y+6, r25	; 0x06
    73e8:	9f 83       	std	Y+7, r25	; 0x07
    73ea:	98 87       	std	Y+8, r25	; 0x08
    73ec:	be 01       	movw	r22, r28
    73ee:	6f 5f       	subi	r22, 0xFF	; 255
    73f0:	7f 4f       	sbci	r23, 0xFF	; 255
    73f2:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    73f6:	84 e3       	ldi	r24, 0x34	; 52
    73f8:	80 9f       	mul	r24, r16
    73fa:	f0 01       	movw	r30, r0
    73fc:	81 9f       	mul	r24, r17
    73fe:	f0 0d       	add	r31, r0
    7400:	11 24       	eor	r1, r1
    7402:	ed 56       	subi	r30, 0x6D	; 109
    7404:	f8 49       	sbci	r31, 0x98	; 152
    7406:	f6 a2       	std	Z+38, r15	; 0x26
    7408:	0b c0       	rjmp	.+22     	; 0x7420 <lin_slave_session_ctr+0x17c>
    740a:	22 e1       	ldi	r18, 0x12	; 18
    740c:	40 e0       	ldi	r20, 0x00	; 0
    740e:	60 e1       	ldi	r22, 0x10	; 16
    7410:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    7414:	05 c0       	rjmp	.+10     	; 0x7420 <lin_slave_session_ctr+0x17c>
    7416:	23 e1       	ldi	r18, 0x13	; 19
    7418:	40 e0       	ldi	r20, 0x00	; 0
    741a:	60 e1       	ldi	r22, 0x10	; 16
    741c:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
    7420:	28 96       	adiw	r28, 0x08	; 8
    7422:	cd bf       	out	0x3d, r28	; 61
    7424:	de bf       	out	0x3e, r29	; 62
    7426:	df 91       	pop	r29
    7428:	cf 91       	pop	r28
    742a:	1f 91       	pop	r17
    742c:	0f 91       	pop	r16
    742e:	ff 90       	pop	r15
    7430:	08 95       	ret

00007432 <lin_routine_control>:
    7432:	0f 93       	push	r16
    7434:	1f 93       	push	r17
    7436:	cf 93       	push	r28
    7438:	df 93       	push	r29
    743a:	cd b7       	in	r28, 0x3d	; 61
    743c:	de b7       	in	r29, 0x3e	; 62
    743e:	28 97       	sbiw	r28, 0x08	; 8
    7440:	cd bf       	out	0x3d, r28	; 61
    7442:	de bf       	out	0x3e, r29	; 62
    7444:	08 2f       	mov	r16, r24
    7446:	10 e0       	ldi	r17, 0x00	; 0
    7448:	9c e1       	ldi	r25, 0x1C	; 28
    744a:	90 9f       	mul	r25, r16
    744c:	f0 01       	movw	r30, r0
    744e:	91 9f       	mul	r25, r17
    7450:	f0 0d       	add	r31, r0
    7452:	11 24       	eor	r1, r1
    7454:	e8 5b       	subi	r30, 0xB8	; 184
    7456:	fc 49       	sbci	r31, 0x9C	; 156
    7458:	42 89       	ldd	r20, Z+18	; 0x12
    745a:	50 e0       	ldi	r21, 0x00	; 0
    745c:	94 e3       	ldi	r25, 0x34	; 52
    745e:	90 9f       	mul	r25, r16
    7460:	d0 01       	movw	r26, r0
    7462:	91 9f       	mul	r25, r17
    7464:	b0 0d       	add	r27, r0
    7466:	11 24       	eor	r1, r1
    7468:	ad 56       	subi	r26, 0x6D	; 109
    746a:	b8 49       	sbci	r27, 0x98	; 152
    746c:	54 96       	adiw	r26, 0x14	; 20
    746e:	2d 91       	ld	r18, X+
    7470:	3c 91       	ld	r19, X
    7472:	55 97       	sbiw	r26, 0x15	; 21
    7474:	1b 96       	adiw	r26, 0x0b	; 11
    7476:	ed 91       	ld	r30, X+
    7478:	fc 91       	ld	r31, X
    747a:	1c 97       	sbiw	r26, 0x0c	; 12
    747c:	ee 0f       	add	r30, r30
    747e:	ff 1f       	adc	r31, r31
    7480:	ee 0f       	add	r30, r30
    7482:	ff 1f       	adc	r31, r31
    7484:	ee 0f       	add	r30, r30
    7486:	ff 1f       	adc	r31, r31
    7488:	e2 0f       	add	r30, r18
    748a:	f3 1f       	adc	r31, r19
    748c:	91 81       	ldd	r25, Z+1	; 0x01
    748e:	92 95       	swap	r25
    7490:	9f 70       	andi	r25, 0x0F	; 15
    7492:	09 f0       	breq	.+2      	; 0x7496 <lin_routine_control+0x64>
    7494:	4c c0       	rjmp	.+152    	; 0x752e <lin_routine_control+0xfc>
    7496:	24 81       	ldd	r18, Z+4	; 0x04
    7498:	30 e0       	ldi	r19, 0x00	; 0
    749a:	32 2f       	mov	r19, r18
    749c:	22 27       	eor	r18, r18
    749e:	95 81       	ldd	r25, Z+5	; 0x05
    74a0:	29 2b       	or	r18, r25
    74a2:	93 81       	ldd	r25, Z+3	; 0x03
    74a4:	91 30       	cpi	r25, 0x01	; 1
    74a6:	f9 f4       	brne	.+62     	; 0x74e6 <lin_routine_control+0xb4>
    74a8:	23 30       	cpi	r18, 0x03	; 3
    74aa:	62 e0       	ldi	r22, 0x02	; 2
    74ac:	36 07       	cpc	r19, r22
    74ae:	d9 f4       	brne	.+54     	; 0x74e6 <lin_routine_control+0xb4>
    74b0:	94 e2       	ldi	r25, 0x24	; 36
    74b2:	94 9f       	mul	r25, r20
    74b4:	f0 01       	movw	r30, r0
    74b6:	95 9f       	mul	r25, r21
    74b8:	f0 0d       	add	r31, r0
    74ba:	11 24       	eor	r1, r1
    74bc:	ec 59       	subi	r30, 0x9C	; 156
    74be:	fc 49       	sbci	r31, 0x9C	; 156
    74c0:	01 90       	ld	r0, Z+
    74c2:	f0 81       	ld	r31, Z
    74c4:	e0 2d       	mov	r30, r0
    74c6:	90 81       	ld	r25, Z
    74c8:	99 83       	std	Y+1, r25	; 0x01
    74ca:	95 e0       	ldi	r25, 0x05	; 5
    74cc:	9a 83       	std	Y+2, r25	; 0x02
    74ce:	91 e7       	ldi	r25, 0x71	; 113
    74d0:	9b 83       	std	Y+3, r25	; 0x03
    74d2:	91 e0       	ldi	r25, 0x01	; 1
    74d4:	9c 83       	std	Y+4, r25	; 0x04
    74d6:	92 e0       	ldi	r25, 0x02	; 2
    74d8:	9d 83       	std	Y+5, r25	; 0x05
    74da:	23 e0       	ldi	r18, 0x03	; 3
    74dc:	2e 83       	std	Y+6, r18	; 0x06
    74de:	9f 83       	std	Y+7, r25	; 0x07
    74e0:	9f ef       	ldi	r25, 0xFF	; 255
    74e2:	98 87       	std	Y+8, r25	; 0x08
    74e4:	4f c0       	rjmp	.+158    	; 0x7584 <lin_routine_control+0x152>
    74e6:	93 30       	cpi	r25, 0x03	; 3
    74e8:	09 f0       	breq	.+2      	; 0x74ec <lin_routine_control+0xba>
    74ea:	4c c0       	rjmp	.+152    	; 0x7584 <lin_routine_control+0x152>
    74ec:	23 30       	cpi	r18, 0x03	; 3
    74ee:	32 40       	sbci	r19, 0x02	; 2
    74f0:	09 f0       	breq	.+2      	; 0x74f4 <lin_routine_control+0xc2>
    74f2:	48 c0       	rjmp	.+144    	; 0x7584 <lin_routine_control+0x152>
    74f4:	94 e2       	ldi	r25, 0x24	; 36
    74f6:	94 9f       	mul	r25, r20
    74f8:	f0 01       	movw	r30, r0
    74fa:	95 9f       	mul	r25, r21
    74fc:	f0 0d       	add	r31, r0
    74fe:	11 24       	eor	r1, r1
    7500:	ec 59       	subi	r30, 0x9C	; 156
    7502:	fc 49       	sbci	r31, 0x9C	; 156
    7504:	01 90       	ld	r0, Z+
    7506:	f0 81       	ld	r31, Z
    7508:	e0 2d       	mov	r30, r0
    750a:	90 81       	ld	r25, Z
    750c:	99 83       	std	Y+1, r25	; 0x01
    750e:	95 e0       	ldi	r25, 0x05	; 5
    7510:	9a 83       	std	Y+2, r25	; 0x02
    7512:	91 e7       	ldi	r25, 0x71	; 113
    7514:	9b 83       	std	Y+3, r25	; 0x03
    7516:	23 e0       	ldi	r18, 0x03	; 3
    7518:	2c 83       	std	Y+4, r18	; 0x04
    751a:	92 e0       	ldi	r25, 0x02	; 2
    751c:	9d 83       	std	Y+5, r25	; 0x05
    751e:	2e 83       	std	Y+6, r18	; 0x06
    7520:	9f 83       	std	Y+7, r25	; 0x07
    7522:	9f ef       	ldi	r25, 0xFF	; 255
    7524:	98 87       	std	Y+8, r25	; 0x08
    7526:	91 e0       	ldi	r25, 0x01	; 1
    7528:	90 93 2f 66 	sts	0x662F, r25	; 0x80662f <eeprom_set_boot_flg>
    752c:	2b c0       	rjmp	.+86     	; 0x7584 <lin_routine_control+0x152>
    752e:	25 81       	ldd	r18, Z+5	; 0x05
    7530:	30 e0       	ldi	r19, 0x00	; 0
    7532:	32 2f       	mov	r19, r18
    7534:	22 27       	eor	r18, r18
    7536:	96 81       	ldd	r25, Z+6	; 0x06
    7538:	29 2b       	or	r18, r25
    753a:	94 81       	ldd	r25, Z+4	; 0x04
    753c:	91 30       	cpi	r25, 0x01	; 1
    753e:	11 f5       	brne	.+68     	; 0x7584 <lin_routine_control+0x152>
    7540:	21 15       	cp	r18, r1
    7542:	3f 4f       	sbci	r19, 0xFF	; 255
    7544:	f9 f4       	brne	.+62     	; 0x7584 <lin_routine_control+0x152>
    7546:	21 e0       	ldi	r18, 0x01	; 1
    7548:	30 e0       	ldi	r19, 0x00	; 0
    754a:	20 93 2d 66 	sts	0x662D, r18	; 0x80662d <erase_flag>
    754e:	30 93 2e 66 	sts	0x662E, r19	; 0x80662e <erase_flag+0x1>
    7552:	94 e2       	ldi	r25, 0x24	; 36
    7554:	94 9f       	mul	r25, r20
    7556:	f0 01       	movw	r30, r0
    7558:	95 9f       	mul	r25, r21
    755a:	f0 0d       	add	r31, r0
    755c:	11 24       	eor	r1, r1
    755e:	ec 59       	subi	r30, 0x9C	; 156
    7560:	fc 49       	sbci	r31, 0x9C	; 156
    7562:	01 90       	ld	r0, Z+
    7564:	f0 81       	ld	r31, Z
    7566:	e0 2d       	mov	r30, r0
    7568:	90 81       	ld	r25, Z
    756a:	99 83       	std	Y+1, r25	; 0x01
    756c:	95 e0       	ldi	r25, 0x05	; 5
    756e:	9a 83       	std	Y+2, r25	; 0x02
    7570:	91 e7       	ldi	r25, 0x71	; 113
    7572:	9b 83       	std	Y+3, r25	; 0x03
    7574:	91 e0       	ldi	r25, 0x01	; 1
    7576:	9c 83       	std	Y+4, r25	; 0x04
    7578:	9f ef       	ldi	r25, 0xFF	; 255
    757a:	9d 83       	std	Y+5, r25	; 0x05
    757c:	1e 82       	std	Y+6, r1	; 0x06
    757e:	22 e0       	ldi	r18, 0x02	; 2
    7580:	2f 83       	std	Y+7, r18	; 0x07
    7582:	98 87       	std	Y+8, r25	; 0x08
    7584:	be 01       	movw	r22, r28
    7586:	6f 5f       	subi	r22, 0xFF	; 255
    7588:	7f 4f       	sbci	r23, 0xFF	; 255
    758a:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    758e:	84 e3       	ldi	r24, 0x34	; 52
    7590:	80 9f       	mul	r24, r16
    7592:	f0 01       	movw	r30, r0
    7594:	81 9f       	mul	r24, r17
    7596:	f0 0d       	add	r31, r0
    7598:	11 24       	eor	r1, r1
    759a:	ed 56       	subi	r30, 0x6D	; 109
    759c:	f8 49       	sbci	r31, 0x98	; 152
    759e:	82 e0       	ldi	r24, 0x02	; 2
    75a0:	86 a3       	std	Z+38, r24	; 0x26
    75a2:	28 96       	adiw	r28, 0x08	; 8
    75a4:	cd bf       	out	0x3d, r28	; 61
    75a6:	de bf       	out	0x3e, r29	; 62
    75a8:	df 91       	pop	r29
    75aa:	cf 91       	pop	r28
    75ac:	1f 91       	pop	r17
    75ae:	0f 91       	pop	r16
    75b0:	08 95       	ret

000075b2 <control_dtc_setting>:
    75b2:	ff 92       	push	r15
    75b4:	0f 93       	push	r16
    75b6:	1f 93       	push	r17
    75b8:	cf 93       	push	r28
    75ba:	df 93       	push	r29
    75bc:	cd b7       	in	r28, 0x3d	; 61
    75be:	de b7       	in	r29, 0x3e	; 62
    75c0:	28 97       	sbiw	r28, 0x08	; 8
    75c2:	cd bf       	out	0x3d, r28	; 61
    75c4:	de bf       	out	0x3e, r29	; 62
    75c6:	08 2f       	mov	r16, r24
    75c8:	10 e0       	ldi	r17, 0x00	; 0
    75ca:	9c e1       	ldi	r25, 0x1C	; 28
    75cc:	90 9f       	mul	r25, r16
    75ce:	f0 01       	movw	r30, r0
    75d0:	91 9f       	mul	r25, r17
    75d2:	f0 0d       	add	r31, r0
    75d4:	11 24       	eor	r1, r1
    75d6:	e8 5b       	subi	r30, 0xB8	; 184
    75d8:	fc 49       	sbci	r31, 0x9C	; 156
    75da:	22 89       	ldd	r18, Z+18	; 0x12
    75dc:	30 e0       	ldi	r19, 0x00	; 0
    75de:	94 e3       	ldi	r25, 0x34	; 52
    75e0:	90 9f       	mul	r25, r16
    75e2:	d0 01       	movw	r26, r0
    75e4:	91 9f       	mul	r25, r17
    75e6:	b0 0d       	add	r27, r0
    75e8:	11 24       	eor	r1, r1
    75ea:	ad 56       	subi	r26, 0x6D	; 109
    75ec:	b8 49       	sbci	r27, 0x98	; 152
    75ee:	54 96       	adiw	r26, 0x14	; 20
    75f0:	4d 91       	ld	r20, X+
    75f2:	5c 91       	ld	r21, X
    75f4:	55 97       	sbiw	r26, 0x15	; 21
    75f6:	1b 96       	adiw	r26, 0x0b	; 11
    75f8:	ed 91       	ld	r30, X+
    75fa:	fc 91       	ld	r31, X
    75fc:	1c 97       	sbiw	r26, 0x0c	; 12
    75fe:	ee 0f       	add	r30, r30
    7600:	ff 1f       	adc	r31, r31
    7602:	ee 0f       	add	r30, r30
    7604:	ff 1f       	adc	r31, r31
    7606:	ee 0f       	add	r30, r30
    7608:	ff 1f       	adc	r31, r31
    760a:	e4 0f       	add	r30, r20
    760c:	f5 1f       	adc	r31, r21
    760e:	93 81       	ldd	r25, Z+3	; 0x03
    7610:	91 30       	cpi	r25, 0x01	; 1
    7612:	49 f5       	brne	.+82     	; 0x7666 <control_dtc_setting+0xb4>
    7614:	94 e2       	ldi	r25, 0x24	; 36
    7616:	92 9f       	mul	r25, r18
    7618:	f0 01       	movw	r30, r0
    761a:	93 9f       	mul	r25, r19
    761c:	f0 0d       	add	r31, r0
    761e:	11 24       	eor	r1, r1
    7620:	ec 59       	subi	r30, 0x9C	; 156
    7622:	fc 49       	sbci	r31, 0x9C	; 156
    7624:	01 90       	ld	r0, Z+
    7626:	f0 81       	ld	r31, Z
    7628:	e0 2d       	mov	r30, r0
    762a:	90 81       	ld	r25, Z
    762c:	99 83       	std	Y+1, r25	; 0x01
    762e:	68 94       	set
    7630:	ff 24       	eor	r15, r15
    7632:	f1 f8       	bld	r15, 1
    7634:	fa 82       	std	Y+2, r15	; 0x02
    7636:	95 ec       	ldi	r25, 0xC5	; 197
    7638:	9b 83       	std	Y+3, r25	; 0x03
    763a:	91 e0       	ldi	r25, 0x01	; 1
    763c:	9c 83       	std	Y+4, r25	; 0x04
    763e:	9f ef       	ldi	r25, 0xFF	; 255
    7640:	9d 83       	std	Y+5, r25	; 0x05
    7642:	9e 83       	std	Y+6, r25	; 0x06
    7644:	9f 83       	std	Y+7, r25	; 0x07
    7646:	98 87       	std	Y+8, r25	; 0x08
    7648:	be 01       	movw	r22, r28
    764a:	6f 5f       	subi	r22, 0xFF	; 255
    764c:	7f 4f       	sbci	r23, 0xFF	; 255
    764e:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    7652:	84 e3       	ldi	r24, 0x34	; 52
    7654:	80 9f       	mul	r24, r16
    7656:	f0 01       	movw	r30, r0
    7658:	81 9f       	mul	r24, r17
    765a:	f0 0d       	add	r31, r0
    765c:	11 24       	eor	r1, r1
    765e:	ed 56       	subi	r30, 0x6D	; 109
    7660:	f8 49       	sbci	r31, 0x98	; 152
    7662:	f6 a2       	std	Z+38, r15	; 0x26
    7664:	29 c0       	rjmp	.+82     	; 0x76b8 <control_dtc_setting+0x106>
    7666:	92 30       	cpi	r25, 0x02	; 2
    7668:	39 f5       	brne	.+78     	; 0x76b8 <control_dtc_setting+0x106>
    766a:	94 e2       	ldi	r25, 0x24	; 36
    766c:	92 9f       	mul	r25, r18
    766e:	f0 01       	movw	r30, r0
    7670:	93 9f       	mul	r25, r19
    7672:	f0 0d       	add	r31, r0
    7674:	11 24       	eor	r1, r1
    7676:	ec 59       	subi	r30, 0x9C	; 156
    7678:	fc 49       	sbci	r31, 0x9C	; 156
    767a:	01 90       	ld	r0, Z+
    767c:	f0 81       	ld	r31, Z
    767e:	e0 2d       	mov	r30, r0
    7680:	90 81       	ld	r25, Z
    7682:	99 83       	std	Y+1, r25	; 0x01
    7684:	68 94       	set
    7686:	ff 24       	eor	r15, r15
    7688:	f1 f8       	bld	r15, 1
    768a:	fa 82       	std	Y+2, r15	; 0x02
    768c:	95 ec       	ldi	r25, 0xC5	; 197
    768e:	9b 83       	std	Y+3, r25	; 0x03
    7690:	fc 82       	std	Y+4, r15	; 0x04
    7692:	9f ef       	ldi	r25, 0xFF	; 255
    7694:	9d 83       	std	Y+5, r25	; 0x05
    7696:	9e 83       	std	Y+6, r25	; 0x06
    7698:	9f 83       	std	Y+7, r25	; 0x07
    769a:	98 87       	std	Y+8, r25	; 0x08
    769c:	be 01       	movw	r22, r28
    769e:	6f 5f       	subi	r22, 0xFF	; 255
    76a0:	7f 4f       	sbci	r23, 0xFF	; 255
    76a2:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    76a6:	84 e3       	ldi	r24, 0x34	; 52
    76a8:	80 9f       	mul	r24, r16
    76aa:	f0 01       	movw	r30, r0
    76ac:	81 9f       	mul	r24, r17
    76ae:	f0 0d       	add	r31, r0
    76b0:	11 24       	eor	r1, r1
    76b2:	ed 56       	subi	r30, 0x6D	; 109
    76b4:	f8 49       	sbci	r31, 0x98	; 152
    76b6:	f6 a2       	std	Z+38, r15	; 0x26
    76b8:	28 96       	adiw	r28, 0x08	; 8
    76ba:	cd bf       	out	0x3d, r28	; 61
    76bc:	de bf       	out	0x3e, r29	; 62
    76be:	df 91       	pop	r29
    76c0:	cf 91       	pop	r28
    76c2:	1f 91       	pop	r17
    76c4:	0f 91       	pop	r16
    76c6:	ff 90       	pop	r15
    76c8:	08 95       	ret

000076ca <lin_transfer_data>:
    76ca:	9f 92       	push	r9
    76cc:	af 92       	push	r10
    76ce:	bf 92       	push	r11
    76d0:	cf 92       	push	r12
    76d2:	df 92       	push	r13
    76d4:	ef 92       	push	r14
    76d6:	ff 92       	push	r15
    76d8:	0f 93       	push	r16
    76da:	1f 93       	push	r17
    76dc:	cf 93       	push	r28
    76de:	df 93       	push	r29
    76e0:	cd b7       	in	r28, 0x3d	; 61
    76e2:	de b7       	in	r29, 0x3e	; 62
    76e4:	28 97       	sbiw	r28, 0x08	; 8
    76e6:	cd bf       	out	0x3d, r28	; 61
    76e8:	de bf       	out	0x3e, r29	; 62
    76ea:	c0 90 27 64 	lds	r12, 0x6427	; 0x806427 <update_cnt>
    76ee:	d0 90 28 64 	lds	r13, 0x6428	; 0x806428 <update_cnt+0x1>
    76f2:	08 2f       	mov	r16, r24
    76f4:	10 e0       	ldi	r17, 0x00	; 0
    76f6:	9c e1       	ldi	r25, 0x1C	; 28
    76f8:	90 9f       	mul	r25, r16
    76fa:	f0 01       	movw	r30, r0
    76fc:	91 9f       	mul	r25, r17
    76fe:	f0 0d       	add	r31, r0
    7700:	11 24       	eor	r1, r1
    7702:	e8 5b       	subi	r30, 0xB8	; 184
    7704:	fc 49       	sbci	r31, 0x9C	; 156
    7706:	e2 88       	ldd	r14, Z+18	; 0x12
    7708:	f1 2c       	mov	r15, r1
    770a:	94 e3       	ldi	r25, 0x34	; 52
    770c:	90 9f       	mul	r25, r16
    770e:	f0 01       	movw	r30, r0
    7710:	91 9f       	mul	r25, r17
    7712:	f0 0d       	add	r31, r0
    7714:	11 24       	eor	r1, r1
    7716:	ed 56       	subi	r30, 0x6D	; 109
    7718:	f8 49       	sbci	r31, 0x98	; 152
    771a:	a4 89       	ldd	r26, Z+20	; 0x14
    771c:	b5 89       	ldd	r27, Z+21	; 0x15
    771e:	03 84       	ldd	r0, Z+11	; 0x0b
    7720:	f4 85       	ldd	r31, Z+12	; 0x0c
    7722:	e0 2d       	mov	r30, r0
    7724:	ee 0f       	add	r30, r30
    7726:	ff 1f       	adc	r31, r31
    7728:	ee 0f       	add	r30, r30
    772a:	ff 1f       	adc	r31, r31
    772c:	ee 0f       	add	r30, r30
    772e:	ff 1f       	adc	r31, r31
    7730:	bf 01       	movw	r22, r30
    7732:	6a 0f       	add	r22, r26
    7734:	7b 1f       	adc	r23, r27
    7736:	fb 01       	movw	r30, r22
    7738:	91 81       	ldd	r25, Z+1	; 0x01
    773a:	92 95       	swap	r25
    773c:	9f 70       	andi	r25, 0x0F	; 15
    773e:	09 f4       	brne	.+2      	; 0x7742 <lin_transfer_data+0x78>
    7740:	f0 c0       	rjmp	.+480    	; 0x7922 <lin_transfer_data+0x258>
    7742:	94 80       	ldd	r9, Z+4	; 0x04
    7744:	42 81       	ldd	r20, Z+2	; 0x02
    7746:	42 50       	subi	r20, 0x02	; 2
    7748:	b0 90 92 67 	lds	r11, 0x6792	; 0x806792 <history_blcok_count>
    774c:	9b 10       	cpse	r9, r11
    774e:	d2 c0       	rjmp	.+420    	; 0x78f4 <lin_transfer_data+0x22a>
    7750:	95 81       	ldd	r25, Z+5	; 0x05
    7752:	96 01       	movw	r18, r12
    7754:	27 5d       	subi	r18, 0xD7	; 215
    7756:	3b 49       	sbci	r19, 0x9B	; 155
    7758:	f9 01       	movw	r30, r18
    775a:	90 83       	st	Z, r25
    775c:	fb 01       	movw	r30, r22
    775e:	96 81       	ldd	r25, Z+6	; 0x06
    7760:	96 01       	movw	r18, r12
    7762:	26 5d       	subi	r18, 0xD6	; 214
    7764:	3b 49       	sbci	r19, 0x9B	; 155
    7766:	f9 01       	movw	r30, r18
    7768:	90 83       	st	Z, r25
    776a:	96 01       	movw	r18, r12
    776c:	2d 5f       	subi	r18, 0xFD	; 253
    776e:	3f 4f       	sbci	r19, 0xFF	; 255
    7770:	fb 01       	movw	r30, r22
    7772:	97 81       	ldd	r25, Z+7	; 0x07
    7774:	f6 01       	movw	r30, r12
    7776:	e5 5d       	subi	r30, 0xD5	; 213
    7778:	fb 49       	sbci	r31, 0x9B	; 155
    777a:	90 83       	st	Z, r25
    777c:	61 e0       	ldi	r22, 0x01	; 1
    777e:	70 e0       	ldi	r23, 0x00	; 0
    7780:	90 e0       	ldi	r25, 0x00	; 0
    7782:	74 c0       	rjmp	.+232    	; 0x786c <lin_transfer_data+0x1a2>
    7784:	94 17       	cp	r25, r20
    7786:	88 f4       	brcc	.+34     	; 0x77aa <lin_transfer_data+0xe0>
    7788:	9f 5f       	subi	r25, 0xFF	; 255
    778a:	fb 01       	movw	r30, r22
    778c:	ee 0f       	add	r30, r30
    778e:	ff 1f       	adc	r31, r31
    7790:	ee 0f       	add	r30, r30
    7792:	ff 1f       	adc	r31, r31
    7794:	ee 0f       	add	r30, r30
    7796:	ff 1f       	adc	r31, r31
    7798:	ea 0f       	add	r30, r26
    779a:	fb 1f       	adc	r31, r27
    779c:	a2 80       	ldd	r10, Z+2	; 0x02
    779e:	f9 01       	movw	r30, r18
    77a0:	e7 5d       	subi	r30, 0xD7	; 215
    77a2:	fb 49       	sbci	r31, 0x9B	; 155
    77a4:	a0 82       	st	Z, r10
    77a6:	2f 5f       	subi	r18, 0xFF	; 255
    77a8:	3f 4f       	sbci	r19, 0xFF	; 255
    77aa:	94 17       	cp	r25, r20
    77ac:	88 f4       	brcc	.+34     	; 0x77d0 <lin_transfer_data+0x106>
    77ae:	9f 5f       	subi	r25, 0xFF	; 255
    77b0:	fb 01       	movw	r30, r22
    77b2:	ee 0f       	add	r30, r30
    77b4:	ff 1f       	adc	r31, r31
    77b6:	ee 0f       	add	r30, r30
    77b8:	ff 1f       	adc	r31, r31
    77ba:	ee 0f       	add	r30, r30
    77bc:	ff 1f       	adc	r31, r31
    77be:	ea 0f       	add	r30, r26
    77c0:	fb 1f       	adc	r31, r27
    77c2:	a3 80       	ldd	r10, Z+3	; 0x03
    77c4:	f9 01       	movw	r30, r18
    77c6:	e7 5d       	subi	r30, 0xD7	; 215
    77c8:	fb 49       	sbci	r31, 0x9B	; 155
    77ca:	a0 82       	st	Z, r10
    77cc:	2f 5f       	subi	r18, 0xFF	; 255
    77ce:	3f 4f       	sbci	r19, 0xFF	; 255
    77d0:	94 17       	cp	r25, r20
    77d2:	88 f4       	brcc	.+34     	; 0x77f6 <lin_transfer_data+0x12c>
    77d4:	9f 5f       	subi	r25, 0xFF	; 255
    77d6:	fb 01       	movw	r30, r22
    77d8:	ee 0f       	add	r30, r30
    77da:	ff 1f       	adc	r31, r31
    77dc:	ee 0f       	add	r30, r30
    77de:	ff 1f       	adc	r31, r31
    77e0:	ee 0f       	add	r30, r30
    77e2:	ff 1f       	adc	r31, r31
    77e4:	ea 0f       	add	r30, r26
    77e6:	fb 1f       	adc	r31, r27
    77e8:	a4 80       	ldd	r10, Z+4	; 0x04
    77ea:	f9 01       	movw	r30, r18
    77ec:	e7 5d       	subi	r30, 0xD7	; 215
    77ee:	fb 49       	sbci	r31, 0x9B	; 155
    77f0:	a0 82       	st	Z, r10
    77f2:	2f 5f       	subi	r18, 0xFF	; 255
    77f4:	3f 4f       	sbci	r19, 0xFF	; 255
    77f6:	94 17       	cp	r25, r20
    77f8:	88 f4       	brcc	.+34     	; 0x781c <lin_transfer_data+0x152>
    77fa:	9f 5f       	subi	r25, 0xFF	; 255
    77fc:	fb 01       	movw	r30, r22
    77fe:	ee 0f       	add	r30, r30
    7800:	ff 1f       	adc	r31, r31
    7802:	ee 0f       	add	r30, r30
    7804:	ff 1f       	adc	r31, r31
    7806:	ee 0f       	add	r30, r30
    7808:	ff 1f       	adc	r31, r31
    780a:	ea 0f       	add	r30, r26
    780c:	fb 1f       	adc	r31, r27
    780e:	a5 80       	ldd	r10, Z+5	; 0x05
    7810:	f9 01       	movw	r30, r18
    7812:	e7 5d       	subi	r30, 0xD7	; 215
    7814:	fb 49       	sbci	r31, 0x9B	; 155
    7816:	a0 82       	st	Z, r10
    7818:	2f 5f       	subi	r18, 0xFF	; 255
    781a:	3f 4f       	sbci	r19, 0xFF	; 255
    781c:	94 17       	cp	r25, r20
    781e:	88 f4       	brcc	.+34     	; 0x7842 <lin_transfer_data+0x178>
    7820:	9f 5f       	subi	r25, 0xFF	; 255
    7822:	fb 01       	movw	r30, r22
    7824:	ee 0f       	add	r30, r30
    7826:	ff 1f       	adc	r31, r31
    7828:	ee 0f       	add	r30, r30
    782a:	ff 1f       	adc	r31, r31
    782c:	ee 0f       	add	r30, r30
    782e:	ff 1f       	adc	r31, r31
    7830:	ea 0f       	add	r30, r26
    7832:	fb 1f       	adc	r31, r27
    7834:	a6 80       	ldd	r10, Z+6	; 0x06
    7836:	f9 01       	movw	r30, r18
    7838:	e7 5d       	subi	r30, 0xD7	; 215
    783a:	fb 49       	sbci	r31, 0x9B	; 155
    783c:	a0 82       	st	Z, r10
    783e:	2f 5f       	subi	r18, 0xFF	; 255
    7840:	3f 4f       	sbci	r19, 0xFF	; 255
    7842:	94 17       	cp	r25, r20
    7844:	88 f4       	brcc	.+34     	; 0x7868 <lin_transfer_data+0x19e>
    7846:	9f 5f       	subi	r25, 0xFF	; 255
    7848:	fb 01       	movw	r30, r22
    784a:	ee 0f       	add	r30, r30
    784c:	ff 1f       	adc	r31, r31
    784e:	ee 0f       	add	r30, r30
    7850:	ff 1f       	adc	r31, r31
    7852:	ee 0f       	add	r30, r30
    7854:	ff 1f       	adc	r31, r31
    7856:	ea 0f       	add	r30, r26
    7858:	fb 1f       	adc	r31, r27
    785a:	a7 80       	ldd	r10, Z+7	; 0x07
    785c:	f9 01       	movw	r30, r18
    785e:	e7 5d       	subi	r30, 0xD7	; 215
    7860:	fb 49       	sbci	r31, 0x9B	; 155
    7862:	a0 82       	st	Z, r10
    7864:	2f 5f       	subi	r18, 0xFF	; 255
    7866:	3f 4f       	sbci	r19, 0xFF	; 255
    7868:	6f 5f       	subi	r22, 0xFF	; 255
    786a:	7f 4f       	sbci	r23, 0xFF	; 255
    786c:	54 e3       	ldi	r21, 0x34	; 52
    786e:	50 9f       	mul	r21, r16
    7870:	f0 01       	movw	r30, r0
    7872:	51 9f       	mul	r21, r17
    7874:	f0 0d       	add	r31, r0
    7876:	11 24       	eor	r1, r1
    7878:	ed 56       	subi	r30, 0x6D	; 109
    787a:	f8 49       	sbci	r31, 0x98	; 152
    787c:	05 84       	ldd	r0, Z+13	; 0x0d
    787e:	f6 85       	ldd	r31, Z+14	; 0x0e
    7880:	e0 2d       	mov	r30, r0
    7882:	e6 17       	cp	r30, r22
    7884:	f7 07       	cpc	r31, r23
    7886:	08 f0       	brcs	.+2      	; 0x788a <lin_transfer_data+0x1c0>
    7888:	7d cf       	rjmp	.-262    	; 0x7784 <lin_transfer_data+0xba>
    788a:	b3 94       	inc	r11
    788c:	b0 92 92 67 	sts	0x6792, r11	; 0x806792 <history_blcok_count>
    7890:	24 2f       	mov	r18, r20
    7892:	30 e0       	ldi	r19, 0x00	; 0
    7894:	c2 0e       	add	r12, r18
    7896:	d3 1e       	adc	r13, r19
    7898:	c0 92 27 64 	sts	0x6427, r12	; 0x806427 <update_cnt>
    789c:	d0 92 28 64 	sts	0x6428, r13	; 0x806428 <update_cnt+0x1>
    78a0:	60 91 25 64 	lds	r22, 0x6425	; 0x806425 <bin_size_cnt>
    78a4:	70 91 26 64 	lds	r23, 0x6426	; 0x806426 <bin_size_cnt+0x1>
    78a8:	26 0f       	add	r18, r22
    78aa:	37 1f       	adc	r19, r23
    78ac:	20 93 25 64 	sts	0x6425, r18	; 0x806425 <bin_size_cnt>
    78b0:	30 93 26 64 	sts	0x6426, r19	; 0x806426 <bin_size_cnt+0x1>
    78b4:	c1 14       	cp	r12, r1
    78b6:	f2 e0       	ldi	r31, 0x02	; 2
    78b8:	df 06       	cpc	r13, r31
    78ba:	58 f0       	brcs	.+22     	; 0x78d2 <lin_transfer_data+0x208>
    78bc:	10 92 27 64 	sts	0x6427, r1	; 0x806427 <update_cnt>
    78c0:	10 92 28 64 	sts	0x6428, r1	; 0x806428 <update_cnt+0x1>
    78c4:	21 e0       	ldi	r18, 0x01	; 1
    78c6:	30 e0       	ldi	r19, 0x00	; 0
    78c8:	20 93 2b 66 	sts	0x662B, r18	; 0x80662b <flash_flag>
    78cc:	30 93 2c 66 	sts	0x662C, r19	; 0x80662c <flash_flag+0x1>
    78d0:	11 c0       	rjmp	.+34     	; 0x78f4 <lin_transfer_data+0x22a>
    78d2:	20 3d       	cpi	r18, 0xD0	; 208
    78d4:	34 45       	sbci	r19, 0x54	; 84
    78d6:	70 f0       	brcs	.+28     	; 0x78f4 <lin_transfer_data+0x22a>
    78d8:	10 92 27 64 	sts	0x6427, r1	; 0x806427 <update_cnt>
    78dc:	10 92 28 64 	sts	0x6428, r1	; 0x806428 <update_cnt+0x1>
    78e0:	21 e0       	ldi	r18, 0x01	; 1
    78e2:	30 e0       	ldi	r19, 0x00	; 0
    78e4:	20 93 2b 66 	sts	0x662B, r18	; 0x80662b <flash_flag>
    78e8:	30 93 2c 66 	sts	0x662C, r19	; 0x80662c <flash_flag+0x1>
    78ec:	20 93 29 66 	sts	0x6629, r18	; 0x806629 <jump_flag>
    78f0:	30 93 2a 66 	sts	0x662A, r19	; 0x80662a <jump_flag+0x1>
    78f4:	94 e2       	ldi	r25, 0x24	; 36
    78f6:	9e 9d       	mul	r25, r14
    78f8:	f0 01       	movw	r30, r0
    78fa:	9f 9d       	mul	r25, r15
    78fc:	f0 0d       	add	r31, r0
    78fe:	11 24       	eor	r1, r1
    7900:	ec 59       	subi	r30, 0x9C	; 156
    7902:	fc 49       	sbci	r31, 0x9C	; 156
    7904:	01 90       	ld	r0, Z+
    7906:	f0 81       	ld	r31, Z
    7908:	e0 2d       	mov	r30, r0
    790a:	90 81       	ld	r25, Z
    790c:	99 83       	std	Y+1, r25	; 0x01
    790e:	92 e0       	ldi	r25, 0x02	; 2
    7910:	9a 83       	std	Y+2, r25	; 0x02
    7912:	96 e7       	ldi	r25, 0x76	; 118
    7914:	9b 83       	std	Y+3, r25	; 0x03
    7916:	9c 82       	std	Y+4, r9	; 0x04
    7918:	9f ef       	ldi	r25, 0xFF	; 255
    791a:	9d 83       	std	Y+5, r25	; 0x05
    791c:	9e 83       	std	Y+6, r25	; 0x06
    791e:	9f 83       	std	Y+7, r25	; 0x07
    7920:	98 87       	std	Y+8, r25	; 0x08
    7922:	be 01       	movw	r22, r28
    7924:	6f 5f       	subi	r22, 0xFF	; 255
    7926:	7f 4f       	sbci	r23, 0xFF	; 255
    7928:	0e 94 0f 46 	call	0x8c1e	; 0x8c1e <ld_put_raw>
    792c:	84 e3       	ldi	r24, 0x34	; 52
    792e:	80 9f       	mul	r24, r16
    7930:	f0 01       	movw	r30, r0
    7932:	81 9f       	mul	r24, r17
    7934:	f0 0d       	add	r31, r0
    7936:	11 24       	eor	r1, r1
    7938:	ed 56       	subi	r30, 0x6D	; 109
    793a:	f8 49       	sbci	r31, 0x98	; 152
    793c:	82 e0       	ldi	r24, 0x02	; 2
    793e:	86 a3       	std	Z+38, r24	; 0x26
    7940:	28 96       	adiw	r28, 0x08	; 8
    7942:	cd bf       	out	0x3d, r28	; 61
    7944:	de bf       	out	0x3e, r29	; 62
    7946:	df 91       	pop	r29
    7948:	cf 91       	pop	r28
    794a:	1f 91       	pop	r17
    794c:	0f 91       	pop	r16
    794e:	ff 90       	pop	r15
    7950:	ef 90       	pop	r14
    7952:	df 90       	pop	r13
    7954:	cf 90       	pop	r12
    7956:	bf 90       	pop	r11
    7958:	af 90       	pop	r10
    795a:	9f 90       	pop	r9
    795c:	08 95       	ret

0000795e <lin_diag_service_callback>:
 *
 * Implements    : lin_diag_service_callback_Activity
 *END**************************************************************************/
void lin_diag_service_callback(l_ifc_handle iii,
                               l_u8 sid)
{
    795e:	ef 92       	push	r14
    7960:	ff 92       	push	r15
    7962:	0f 93       	push	r16
    7964:	1f 93       	push	r17
    7966:	cf 93       	push	r28
    7968:	df 93       	push	r29
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    796a:	c8 2f       	mov	r28, r24
    796c:	d0 e0       	ldi	r29, 0x00	; 0
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    796e:	9c e1       	ldi	r25, 0x1C	; 28
    7970:	9c 9f       	mul	r25, r28
    7972:	f0 01       	movw	r30, r0
    7974:	9d 9f       	mul	r25, r29
    7976:	f0 0d       	add	r31, r0
    7978:	11 24       	eor	r1, r1
    797a:	e8 5b       	subi	r30, 0xB8	; 184
    797c:	fc 49       	sbci	r31, 0x9C	; 156
    797e:	a2 89       	ldd	r26, Z+18	; 0x12
    7980:	b0 e0       	ldi	r27, 0x00	; 0
    l_bool sid_supported_flg = (bool)0U;
    l_u8 i;
    const l_u8 *service_supported_ptr;
    l_u8 *service_flag_ptr;
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    7982:	94 e2       	ldi	r25, 0x24	; 36
    7984:	9a 9f       	mul	r25, r26
    7986:	f0 01       	movw	r30, r0
    7988:	9b 9f       	mul	r25, r27
    798a:	f0 0d       	add	r31, r0
    798c:	11 24       	eor	r1, r1
    798e:	ec 59       	subi	r30, 0x9C	; 156
    7990:	fc 49       	sbci	r31, 0x9C	; 156
    7992:	00 a1       	ldd	r16, Z+32	; 0x20
    7994:	11 a1       	ldd	r17, Z+33	; 0x21
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;
    7996:	e2 a0       	ldd	r14, Z+34	; 0x22
    7998:	f3 a0       	ldd	r15, Z+35	; 0x23

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    799a:	90 e0       	ldi	r25, 0x00	; 0
    799c:	0f c0       	rjmp	.+30     	; 0x79bc <lin_diag_service_callback+0x5e>
    {
        if (service_supported_ptr[i] == sid)
    799e:	29 2f       	mov	r18, r25
    79a0:	30 e0       	ldi	r19, 0x00	; 0
    79a2:	f8 01       	movw	r30, r16
    79a4:	e2 0f       	add	r30, r18
    79a6:	f3 1f       	adc	r31, r19
    79a8:	40 81       	ld	r20, Z
    79aa:	46 13       	cpse	r20, r22
    79ac:	06 c0       	rjmp	.+12     	; 0x79ba <lin_diag_service_callback+0x5c>
        {
            service_flag_ptr[i] = 1U;
    79ae:	f7 01       	movw	r30, r14
    79b0:	e2 0f       	add	r30, r18
    79b2:	f3 1f       	adc	r31, r19
    79b4:	91 e0       	ldi	r25, 0x01	; 1
    79b6:	90 83       	st	Z, r25
            sid_supported_flg = (bool)1U;
            break;
    79b8:	0d c0       	rjmp	.+26     	; 0x79d4 <lin_diag_service_callback+0x76>
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    79ba:	9f 5f       	subi	r25, 0xFF	; 255
    79bc:	34 e2       	ldi	r19, 0x24	; 36
    79be:	3a 9f       	mul	r19, r26
    79c0:	f0 01       	movw	r30, r0
    79c2:	3b 9f       	mul	r19, r27
    79c4:	f0 0d       	add	r31, r0
    79c6:	11 24       	eor	r1, r1
    79c8:	ec 59       	subi	r30, 0x9C	; 156
    79ca:	fc 49       	sbci	r31, 0x9C	; 156
    79cc:	37 8d       	ldd	r19, Z+31	; 0x1f
    79ce:	93 17       	cp	r25, r19
    79d0:	30 f3       	brcs	.-52     	; 0x799e <lin_diag_service_callback+0x40>
{
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    l_bool sid_supported_flg = (bool)0U;
    79d2:	90 e0       	ldi	r25, 0x00	; 0
            sid_supported_flg = (bool)1U;
            break;
        }
    }

    if (sid_supported_flg == (bool)1U)
    79d4:	99 23       	and	r25, r25
    79d6:	09 f4       	brne	.+2      	; 0x79da <lin_diag_service_callback+0x7c>
    79d8:	72 c0       	rjmp	.+228    	; 0x7abe <lin_diag_service_callback+0x160>
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    79da:	65 38       	cpi	r22, 0x85	; 133
    79dc:	09 f4       	brne	.+2      	; 0x79e0 <lin_diag_service_callback+0x82>
    79de:	69 c0       	rjmp	.+210    	; 0x7ab2 <lin_diag_service_callback+0x154>
    79e0:	78 f4       	brcc	.+30     	; 0x7a00 <lin_diag_service_callback+0xa2>
    79e2:	62 32       	cpi	r22, 0x22	; 34
    79e4:	09 f4       	brne	.+2      	; 0x79e8 <lin_diag_service_callback+0x8a>
    79e6:	5f c0       	rjmp	.+190    	; 0x7aa6 <lin_diag_service_callback+0x148>
    79e8:	20 f4       	brcc	.+8      	; 0x79f2 <lin_diag_service_callback+0x94>
    79ea:	60 31       	cpi	r22, 0x10	; 16
    79ec:	09 f4       	brne	.+2      	; 0x79f0 <lin_diag_service_callback+0x92>
    79ee:	58 c0       	rjmp	.+176    	; 0x7aa0 <lin_diag_service_callback+0x142>
    79f0:	79 c0       	rjmp	.+242    	; 0x7ae4 <lin_diag_service_callback+0x186>
    79f2:	61 33       	cpi	r22, 0x31	; 49
    79f4:	09 f4       	brne	.+2      	; 0x79f8 <lin_diag_service_callback+0x9a>
    79f6:	5a c0       	rjmp	.+180    	; 0x7aac <lin_diag_service_callback+0x14e>
    79f8:	66 33       	cpi	r22, 0x36	; 54
    79fa:	09 f4       	brne	.+2      	; 0x79fe <lin_diag_service_callback+0xa0>
    79fc:	5d c0       	rjmp	.+186    	; 0x7ab8 <lin_diag_service_callback+0x15a>
    79fe:	72 c0       	rjmp	.+228    	; 0x7ae4 <lin_diag_service_callback+0x186>
    7a00:	63 3b       	cpi	r22, 0xB3	; 179
    7a02:	71 f0       	breq	.+28     	; 0x7a20 <lin_diag_service_callback+0xc2>
    7a04:	28 f4       	brcc	.+10     	; 0x7a10 <lin_diag_service_callback+0xb2>
    7a06:	60 3b       	cpi	r22, 0xB0	; 176
    7a08:	e1 f0       	breq	.+56     	; 0x7a42 <lin_diag_service_callback+0xe4>
    7a0a:	62 3b       	cpi	r22, 0xB2	; 178
    7a0c:	31 f0       	breq	.+12     	; 0x7a1a <lin_diag_service_callback+0xbc>
    7a0e:	6a c0       	rjmp	.+212    	; 0x7ae4 <lin_diag_service_callback+0x186>
    7a10:	66 3b       	cpi	r22, 0xB6	; 182
    7a12:	b1 f1       	breq	.+108    	; 0x7a80 <lin_diag_service_callback+0x122>
    7a14:	67 3b       	cpi	r22, 0xB7	; 183
    7a16:	31 f1       	breq	.+76     	; 0x7a64 <lin_diag_service_callback+0x106>
    7a18:	65 c0       	rjmp	.+202    	; 0x7ae4 <lin_diag_service_callback+0x186>
        {
        case SERVICE_READ_BY_IDENTIFY: /* Mandatory for TL LIN 2.1 & 2.0, Optional for J2602 */
            lin_diagservice_read_by_identifier(iii);
    7a1a:	0e 94 ea 36 	call	0x6dd4	; 0x6dd4 <lin_diagservice_read_by_identifier>
            break;
    7a1e:	62 c0       	rjmp	.+196    	; 0x7ae4 <lin_diag_service_callback+0x186>

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    7a20:	9c e1       	ldi	r25, 0x1C	; 28
    7a22:	9c 9f       	mul	r25, r28
    7a24:	f0 01       	movw	r30, r0
    7a26:	9d 9f       	mul	r25, r29
    7a28:	f0 0d       	add	r31, r0
    7a2a:	11 24       	eor	r1, r1
    7a2c:	e8 5b       	subi	r30, 0xB8	; 184
    7a2e:	fc 49       	sbci	r31, 0x9C	; 156
    7a30:	90 81       	ld	r25, Z
    7a32:	99 23       	and	r25, r25
    7a34:	19 f0       	breq	.+6      	; 0x7a3c <lin_diag_service_callback+0xde>
    7a36:	93 30       	cpi	r25, 0x03	; 3
    7a38:	09 f0       	breq	.+2      	; 0x7a3c <lin_diag_service_callback+0xde>
    7a3a:	54 c0       	rjmp	.+168    	; 0x7ae4 <lin_diag_service_callback+0x186>
            {
                lin_condittional_change_nad(iii);
    7a3c:	0e 94 bf 34 	call	0x697e	; 0x697e <lin_condittional_change_nad>
    7a40:	51 c0       	rjmp	.+162    	; 0x7ae4 <lin_diag_service_callback+0x186>
            }
            break;
        case SERVICE_ASSIGN_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    7a42:	9c e1       	ldi	r25, 0x1C	; 28
    7a44:	9c 9f       	mul	r25, r28
    7a46:	f0 01       	movw	r30, r0
    7a48:	9d 9f       	mul	r25, r29
    7a4a:	f0 0d       	add	r31, r0
    7a4c:	11 24       	eor	r1, r1
    7a4e:	e8 5b       	subi	r30, 0xB8	; 184
    7a50:	fc 49       	sbci	r31, 0x9C	; 156
    7a52:	90 81       	ld	r25, Z
    7a54:	99 23       	and	r25, r25
    7a56:	19 f0       	breq	.+6      	; 0x7a5e <lin_diag_service_callback+0x100>
    7a58:	93 30       	cpi	r25, 0x03	; 3
    7a5a:	09 f0       	breq	.+2      	; 0x7a5e <lin_diag_service_callback+0x100>
    7a5c:	43 c0       	rjmp	.+134    	; 0x7ae4 <lin_diag_service_callback+0x186>
            {
                lin_assign_nad(iii);
    7a5e:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <lin_assign_nad>
    7a62:	40 c0       	rjmp	.+128    	; 0x7ae4 <lin_diag_service_callback+0x186>
            }
            break;

#if (1U == SUPPORT_PROTOCOL_21)
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version)
    7a64:	9c e1       	ldi	r25, 0x1C	; 28
    7a66:	9c 9f       	mul	r25, r28
    7a68:	f0 01       	movw	r30, r0
    7a6a:	9d 9f       	mul	r25, r29
    7a6c:	f0 0d       	add	r31, r0
    7a6e:	11 24       	eor	r1, r1
    7a70:	e8 5b       	subi	r30, 0xB8	; 184
    7a72:	fc 49       	sbci	r31, 0x9C	; 156
    7a74:	90 81       	ld	r25, Z
    7a76:	91 11       	cpse	r25, r1
    7a78:	35 c0       	rjmp	.+106    	; 0x7ae4 <lin_diag_service_callback+0x186>
            {
                lin_diagservice_assign_frame_id_range(iii);
    7a7a:	0e 94 21 36 	call	0x6c42	; 0x6c42 <lin_diagservice_assign_frame_id_range>
    7a7e:	32 c0       	rjmp	.+100    	; 0x7ae4 <lin_diag_service_callback+0x186>
            }
            break;
        case SERVICE_SAVE_CONFIGURATION:
            /* Set save configuration flag */
            g_lin_protocol_state_array[iii].save_config_flg = (l_bool)1U;
    7a80:	96 e1       	ldi	r25, 0x16	; 22
    7a82:	9c 9f       	mul	r25, r28
    7a84:	f0 01       	movw	r30, r0
    7a86:	9d 9f       	mul	r25, r29
    7a88:	f0 0d       	add	r31, r0
    7a8a:	11 24       	eor	r1, r1
    7a8c:	e9 53       	subi	r30, 0x39	; 57
    7a8e:	f8 49       	sbci	r31, 0x98	; 152
    7a90:	91 e0       	ldi	r25, 0x01	; 1
    7a92:	97 87       	std	Z+15, r25	; 0x0f
            /* Response to master - RSID */
            ld_make_slave_response_pdu(iii, SERVICE_SAVE_CONFIGURATION, POSITIVE, 0U);
    7a94:	20 e0       	ldi	r18, 0x00	; 0
    7a96:	41 e0       	ldi	r20, 0x01	; 1
    7a98:	66 eb       	ldi	r22, 0xB6	; 182
    7a9a:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
            break;
    7a9e:	22 c0       	rjmp	.+68     	; 0x7ae4 <lin_diag_service_callback+0x186>
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

#endif                                /* ((1U == SUPPORT_PROTOCOL_J2602) || (1U == SUPPORT_PROTOCOL_20)) */
        case SERVICE_SESSION_CONTROL: //诊断会话控制
            //诊断会话控制切换会话
            lin_slave_session_ctr(iii);
    7aa0:	0e 94 52 39 	call	0x72a4	; 0x72a4 <lin_slave_session_ctr>
            break;
    7aa4:	1f c0       	rjmp	.+62     	; 0x7ae4 <lin_diag_service_callback+0x186>
        case SERVICE_READ_DATA_BY_IDENTIFY:
            //根据id读取数据信息
            lin_read_data_by_identify(iii);
    7aa6:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <lin_read_data_by_identify>
            break;
    7aaa:	1c c0       	rjmp	.+56     	; 0x7ae4 <lin_diag_service_callback+0x186>
        case SERIVCE_ROUTINE_CONTROL:
            //路由控制,支持在扩展模式下
            lin_routine_control(iii);
    7aac:	0e 94 19 3a 	call	0x7432	; 0x7432 <lin_routine_control>
            break;
    7ab0:	19 c0       	rjmp	.+50     	; 0x7ae4 <lin_diag_service_callback+0x186>
        case 0x85:
            control_dtc_setting(iii);
    7ab2:	0e 94 d9 3a 	call	0x75b2	; 0x75b2 <control_dtc_setting>
            break;
    7ab6:	16 c0       	rjmp	.+44     	; 0x7ae4 <lin_diag_service_callback+0x186>
        case 0x36:
            lin_transfer_data(iii);
    7ab8:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lin_transfer_data>
            break;
    7abc:	13 c0       	rjmp	.+38     	; 0x7ae4 <lin_diag_service_callback+0x186>
            break;
        } /* end of switch */
    }
    else
    {
        ld_make_slave_response_pdu(iii, sid, NEGATIVE, SERVICE_NOT_SUPPORTED);
    7abe:	21 e1       	ldi	r18, 0x11	; 17
    7ac0:	40 e0       	ldi	r20, 0x00	; 0
    7ac2:	0e 94 98 33 	call	0x6730	; 0x6730 <ld_make_slave_response_pdu>
        /* clear queue */
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    7ac6:	84 e3       	ldi	r24, 0x34	; 52
    7ac8:	8c 9f       	mul	r24, r28
    7aca:	f0 01       	movw	r30, r0
    7acc:	8d 9f       	mul	r24, r29
    7ace:	f0 0d       	add	r31, r0
    7ad0:	11 24       	eor	r1, r1
    7ad2:	ed 56       	subi	r30, 0x6D	; 109
    7ad4:	f8 49       	sbci	r31, 0x98	; 152
    7ad6:	17 86       	std	Z+15, r1	; 0x0f
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0U;
    7ad8:	10 8a       	std	Z+16, r1	; 0x10
    7ada:	11 8a       	std	Z+17, r1	; 0x11
        tl_desc_ptr->tl_rx_queue.queue_header = tl_desc_ptr->tl_rx_queue.queue_tail;
    7adc:	85 85       	ldd	r24, Z+13	; 0x0d
    7ade:	96 85       	ldd	r25, Z+14	; 0x0e
    7ae0:	83 87       	std	Z+11, r24	; 0x0b
    7ae2:	94 87       	std	Z+12, r25	; 0x0c
    }
}
    7ae4:	df 91       	pop	r29
    7ae6:	cf 91       	pop	r28
    7ae8:	1f 91       	pop	r17
    7aea:	0f 91       	pop	r16
    7aec:	ff 90       	pop	r15
    7aee:	ef 90       	pop	r14
    7af0:	08 95       	ret

00007af2 <ld_read_by_id_callout>:
    l_u8 retval = LD_NEGATIVE_RESPONSE;

    /* Get the current configuration */
    const lin_protocol_user_config_t  *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    7af2:	2c e1       	ldi	r18, 0x1C	; 28
    7af4:	82 9f       	mul	r24, r18
    7af6:	c0 01       	movw	r24, r0
    7af8:	11 24       	eor	r1, r1
    7afa:	fc 01       	movw	r30, r24
    7afc:	e8 5b       	subi	r30, 0xB8	; 184
    7afe:	fc 49       	sbci	r31, 0x9C	; 156
    7b00:	83 81       	ldd	r24, Z+3	; 0x03
    7b02:	81 11       	cpse	r24, r1
    7b04:	13 c0       	rjmp	.+38     	; 0x7b2c <ld_read_by_id_callout+0x3a>
    {
        /* Following code is an example - Real implementation is application-dependent */
        /* the handling does essentially depend on the id of the requested item */
        /* This example implement with ID = 32 - LIN_READ_USR_DEF_MIN */
        if (id == LIN_READ_USR_DEF_MIN)
    7b06:	60 32       	cpi	r22, 0x20	; 32
    7b08:	99 f4       	brne	.+38     	; 0x7b30 <ld_read_by_id_callout+0x3e>
        {
            /*
            * id received is user defined 32
            */
            /* A positive response is ready to be sent to the user defined request */
            data[0] = (l_u8) (id + 1U);    /* Data user define */
    7b0a:	81 e0       	ldi	r24, 0x01	; 1
    7b0c:	86 0f       	add	r24, r22
    7b0e:	fa 01       	movw	r30, r20
    7b10:	80 83       	st	Z, r24
            data[1] = (l_u8) (id + 2U);    /* Data user define */
    7b12:	82 e0       	ldi	r24, 0x02	; 2
    7b14:	86 0f       	add	r24, r22
    7b16:	81 83       	std	Z+1, r24	; 0x01
            data[2] = (l_u8) (id + 3U);    /* Data user define */
    7b18:	83 e0       	ldi	r24, 0x03	; 3
    7b1a:	86 0f       	add	r24, r22
    7b1c:	82 83       	std	Z+2, r24	; 0x02
            data[3] = (l_u8) (id + 4U);    /* Data user define */
    7b1e:	84 e0       	ldi	r24, 0x04	; 4
    7b20:	86 0f       	add	r24, r22
    7b22:	83 83       	std	Z+3, r24	; 0x03
            data[4] = (l_u8) (id + 5U);    /* Data user define */
    7b24:	6b 5f       	subi	r22, 0xFB	; 251
    7b26:	64 83       	std	Z+4, r22	; 0x04
            retval = LD_POSITIVE_RESPONSE;
    7b28:	84 e5       	ldi	r24, 0x54	; 84
    7b2a:	08 95       	ret
 * Implements    : ld_read_by_id_callout_Activity
 *END**************************************************************************/

l_u8 ld_read_by_id_callout(l_ifc_handle iii, l_u8 id, l_u8 *data)
{
    l_u8 retval = LD_NEGATIVE_RESPONSE;
    7b2c:	83 e5       	ldi	r24, 0x53	; 83
    7b2e:	08 95       	ret
    7b30:	83 e5       	ldi	r24, 0x53	; 83
            * id received is user defined 63 - no response
            */
        }
    } /* End (conf->function == _SLAVE_) */
   return retval;
}
    7b32:	08 95       	ret

00007b34 <LIN_DRV_ProcessParity>:
 *
 * Implements    : LIN_DRV_ProcessParity_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_ProcessParity(uint8_t PID,
                              uint8_t typeAction)
{
    7b34:	cf 93       	push	r28
    7b36:	df 93       	push	r29
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    return (uint8_t)((A >> B) & 0x01U);
    7b38:	28 2f       	mov	r18, r24
    7b3a:	30 e0       	ldi	r19, 0x00	; 0
    7b3c:	e9 01       	movw	r28, r18
    7b3e:	d5 95       	asr	r29
    7b40:	c7 95       	ror	r28
    7b42:	a9 01       	movw	r20, r18
    7b44:	55 95       	asr	r21
    7b46:	47 95       	ror	r20
    7b48:	55 95       	asr	r21
    7b4a:	47 95       	ror	r20
    7b4c:	f9 01       	movw	r30, r18
    7b4e:	f5 95       	asr	r31
    7b50:	e7 95       	ror	r30
    7b52:	f5 95       	asr	r31
    7b54:	e7 95       	ror	r30
    7b56:	f5 95       	asr	r31
    7b58:	e7 95       	ror	r30
    7b5a:	f5 95       	asr	r31
    7b5c:	e7 95       	ror	r30
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    7b5e:	9c 2f       	mov	r25, r28
    7b60:	98 27       	eor	r25, r24
    7b62:	49 27       	eor	r20, r25
    7b64:	4e 27       	eor	r20, r30
    7b66:	41 70       	andi	r20, 0x01	; 1
    7b68:	42 95       	swap	r20
    7b6a:	44 0f       	add	r20, r20
    7b6c:	44 0f       	add	r20, r20
    7b6e:	40 7c       	andi	r20, 0xC0	; 192
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    return (uint8_t)((A >> B) & 0x01U);
    7b70:	d9 01       	movw	r26, r18
    7b72:	b5 95       	asr	r27
    7b74:	a7 95       	ror	r26
    7b76:	b5 95       	asr	r27
    7b78:	a7 95       	ror	r26
    7b7a:	b5 95       	asr	r27
    7b7c:	a7 95       	ror	r26
    7b7e:	35 95       	asr	r19
    7b80:	27 95       	ror	r18
    7b82:	35 95       	asr	r19
    7b84:	27 95       	ror	r18
    7b86:	35 95       	asr	r19
    7b88:	27 95       	ror	r18
    7b8a:	35 95       	asr	r19
    7b8c:	27 95       	ror	r18
    7b8e:	35 95       	asr	r19
    7b90:	27 95       	ror	r18
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    7b92:	9c 2f       	mov	r25, r28
    7b94:	9a 27       	eor	r25, r26
    7b96:	9e 27       	eor	r25, r30
    7b98:	92 27       	eor	r25, r18
    7b9a:	91 70       	andi	r25, 0x01	; 1
    7b9c:	90 95       	com	r25
    7b9e:	97 95       	ror	r25
    7ba0:	99 27       	eor	r25, r25
    7ba2:	97 95       	ror	r25
    7ba4:	24 2f       	mov	r18, r20
    7ba6:	29 2b       	or	r18, r25
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));

    /* Check if action is checking parity bits */
    if (CHECK_PARITY == typeAction)
    7ba8:	61 30       	cpi	r22, 0x01	; 1
    7baa:	31 f4       	brne	.+12     	; 0x7bb8 <LIN_DRV_ProcessParity+0x84>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
    7bac:	98 2f       	mov	r25, r24
    7bae:	90 7c       	andi	r25, 0xC0	; 192
    7bb0:	92 13       	cpse	r25, r18
    7bb2:	04 c0       	rjmp	.+8      	; 0x7bbc <LIN_DRV_ProcessParity+0x88>
        }
        /* If parity bits are correct */
        else
        {
            /* Return ID if parity bits are correct */
            retVal = (uint8_t)(PID & 0x3FU);
    7bb4:	8f 73       	andi	r24, 0x3F	; 63
    7bb6:	03 c0       	rjmp	.+6      	; 0x7bbe <LIN_DRV_ProcessParity+0x8a>
    }
    /* If action is making parity bits */
    else
    {
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    7bb8:	82 2b       	or	r24, r18
    7bba:	01 c0       	rjmp	.+2      	; 0x7bbe <LIN_DRV_ProcessParity+0x8a>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
        {
            /* Return 0xFF if parity bits are incorrect */
            retVal = 0xFFU;
    7bbc:	8f ef       	ldi	r24, 0xFF	; 255
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    }

    return retVal;
}
    7bbe:	df 91       	pop	r29
    7bc0:	cf 91       	pop	r28
    7bc2:	08 95       	ret

00007bc4 <LIN_DRV_MakeChecksumByte>:
 * 计算经典型校验方式，传入参数PID应该为0
 *
 * Implements    : LIN_DRV_MakeChecksumByte_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_MakeChecksumByte(const uint8_t * buffer, uint8_t sizeBuffer, uint8_t PID)
{
    7bc4:	fc 01       	movw	r30, r24
    uint8_t length;
    uint16_t checksum = 0U;

    /* For PID is 0x3C (ID 0x3C) or 0x7D (ID 0x3D) or 0xFE (ID 0x3E) or 0xBF (ID 0x3F)
     * apply classic checksum and apply enhanced checksum for other PID */
    if ((0x3CU != PID) && (0x7DU != PID) && (0xFEU != PID) && (0xBFU != PID))
    7bc6:	4c 33       	cpi	r20, 0x3C	; 60
    7bc8:	41 f0       	breq	.+16     	; 0x7bda <LIN_DRV_MakeChecksumByte+0x16>
    7bca:	4d 37       	cpi	r20, 0x7D	; 125
    7bcc:	49 f0       	breq	.+18     	; 0x7be0 <LIN_DRV_MakeChecksumByte+0x1c>
    7bce:	4e 3f       	cpi	r20, 0xFE	; 254
    7bd0:	51 f0       	breq	.+20     	; 0x7be6 <LIN_DRV_MakeChecksumByte+0x22>
    7bd2:	4f 3b       	cpi	r20, 0xBF	; 191
    7bd4:	59 f0       	breq	.+22     	; 0x7bec <LIN_DRV_MakeChecksumByte+0x28>
    {
        /* For PID other than 0x3C, 0x7D, 0xFE and 0xBF: Add PID in checksum calculation */
        checksum = PID;
    7bd6:	50 e0       	ldi	r21, 0x00	; 0
    7bd8:	16 c0       	rjmp	.+44     	; 0x7c06 <LIN_DRV_MakeChecksumByte+0x42>
    }
    else
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    7bda:	40 e0       	ldi	r20, 0x00	; 0
    7bdc:	50 e0       	ldi	r21, 0x00	; 0
    7bde:	13 c0       	rjmp	.+38     	; 0x7c06 <LIN_DRV_MakeChecksumByte+0x42>
    7be0:	40 e0       	ldi	r20, 0x00	; 0
    7be2:	50 e0       	ldi	r21, 0x00	; 0
    7be4:	10 c0       	rjmp	.+32     	; 0x7c06 <LIN_DRV_MakeChecksumByte+0x42>
    7be6:	40 e0       	ldi	r20, 0x00	; 0
    7be8:	50 e0       	ldi	r21, 0x00	; 0
    7bea:	0d c0       	rjmp	.+26     	; 0x7c06 <LIN_DRV_MakeChecksumByte+0x42>
    7bec:	40 e0       	ldi	r20, 0x00	; 0
    7bee:	50 e0       	ldi	r21, 0x00	; 0
    7bf0:	0a c0       	rjmp	.+20     	; 0x7c06 <LIN_DRV_MakeChecksumByte+0x42>
    }

    for (length = sizeBuffer; 0U < length; length--)
    {
        checksum += *buffer;
    7bf2:	81 91       	ld	r24, Z+
    7bf4:	48 0f       	add	r20, r24
    7bf6:	51 1d       	adc	r21, r1
        buffer++;
        /* Deal with the carry */
        if (checksum > 0xFFU)
    7bf8:	4f 3f       	cpi	r20, 0xFF	; 255
    7bfa:	51 05       	cpc	r21, r1
    7bfc:	19 f0       	breq	.+6      	; 0x7c04 <LIN_DRV_MakeChecksumByte+0x40>
    7bfe:	10 f0       	brcs	.+4      	; 0x7c04 <LIN_DRV_MakeChecksumByte+0x40>
        {
            checksum -= 0xFFU;
    7c00:	4f 5f       	subi	r20, 0xFF	; 255
    7c02:	51 09       	sbc	r21, r1
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    }

    for (length = sizeBuffer; 0U < length; length--)
    7c04:	61 50       	subi	r22, 0x01	; 1
    7c06:	61 11       	cpse	r22, r1
    7c08:	f4 cf       	rjmp	.-24     	; 0x7bf2 <LIN_DRV_MakeChecksumByte+0x2e>
        }
    }

    /* Return reversed checksum */
    return (uint8_t)(~checksum);
}
    7c0a:	84 2f       	mov	r24, r20
    7c0c:	80 95       	com	r24
    7c0e:	08 95       	ret

00007c10 <LIN_DRV_ProcessFrameHeader>:

    /* Disable LPUART interrupts. */
    //TODO:
    
    return retVal;
}
    7c10:	cf 92       	push	r12
    7c12:	df 92       	push	r13
    7c14:	ef 92       	push	r14
    7c16:	ff 92       	push	r15
    7c18:	1f 93       	push	r17
    7c1a:	cf 93       	push	r28
    7c1c:	df 93       	push	r29
    7c1e:	9b 01       	movw	r18, r22
    7c20:	22 0f       	add	r18, r18
    7c22:	33 1f       	adc	r19, r19
    7c24:	f9 01       	movw	r30, r18
    7c26:	e4 5f       	subi	r30, 0xF4	; 244
    7c28:	f8 49       	sbci	r31, 0x98	; 152
    7c2a:	01 90       	ld	r0, Z+
    7c2c:	f0 81       	ld	r31, Z
    7c2e:	e0 2d       	mov	r30, r0
    7c30:	d9 01       	movw	r26, r18
    7c32:	a2 5f       	subi	r26, 0xF2	; 242
    7c34:	b8 49       	sbci	r27, 0x98	; 152
    7c36:	cd 91       	ld	r28, X+
    7c38:	dc 91       	ld	r29, X
    7c3a:	2a 89       	ldd	r18, Y+18	; 0x12
    7c3c:	26 30       	cpi	r18, 0x06	; 6
    7c3e:	59 f5       	brne	.+86     	; 0x7c96 <LIN_DRV_ProcessFrameHeader+0x86>
    7c40:	24 81       	ldd	r18, Z+4	; 0x04
    7c42:	21 11       	cpse	r18, r1
    7c44:	28 c0       	rjmp	.+80     	; 0x7c96 <LIN_DRV_ProcessFrameHeader+0x86>
    7c46:	14 2f       	mov	r17, r20
    7c48:	6b 01       	movw	r12, r22
    7c4a:	7c 01       	movw	r14, r24
    7c4c:	61 e0       	ldi	r22, 0x01	; 1
    7c4e:	84 2f       	mov	r24, r20
    7c50:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <LIN_DRV_ProcessParity>
    7c54:	8f 87       	std	Y+15, r24	; 0x0f
    7c56:	18 8b       	std	Y+16, r17	; 0x10
    7c58:	8f 3f       	cpi	r24, 0xFF	; 255
    7c5a:	a9 f0       	breq	.+42     	; 0x7c86 <LIN_DRV_ProcessFrameHeader+0x76>
    7c5c:	86 e0       	ldi	r24, 0x06	; 6
    7c5e:	89 8b       	std	Y+17, r24	; 0x11
    7c60:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c62:	88 23       	and	r24, r24
    7c64:	31 f0       	breq	.+12     	; 0x7c72 <LIN_DRV_ProcessFrameHeader+0x62>
    7c66:	87 e0       	ldi	r24, 0x07	; 7
    7c68:	8a 8b       	std	Y+18, r24	; 0x12
    7c6a:	81 e0       	ldi	r24, 0x01	; 1
    7c6c:	8a 87       	std	Y+10, r24	; 0x0a
    7c6e:	89 87       	std	Y+9, r24	; 0x09
    7c70:	12 c0       	rjmp	.+36     	; 0x7c96 <LIN_DRV_ProcessFrameHeader+0x86>
    7c72:	1a 86       	std	Y+10, r1	; 0x0a
    7c74:	ed 85       	ldd	r30, Y+13	; 0x0d
    7c76:	fe 85       	ldd	r31, Y+14	; 0x0e
    7c78:	30 97       	sbiw	r30, 0x00	; 0
    7c7a:	69 f0       	breq	.+26     	; 0x7c96 <LIN_DRV_ProcessFrameHeader+0x86>
    7c7c:	ae 01       	movw	r20, r28
    7c7e:	c7 01       	movw	r24, r14
    7c80:	b6 01       	movw	r22, r12
    7c82:	09 95       	icall
    7c84:	08 c0       	rjmp	.+16     	; 0x7c96 <LIN_DRV_ProcessFrameHeader+0x86>
    7c86:	87 e0       	ldi	r24, 0x07	; 7
    7c88:	89 8b       	std	Y+17, r24	; 0x11
    7c8a:	ed 85       	ldd	r30, Y+13	; 0x0d
    7c8c:	fe 85       	ldd	r31, Y+14	; 0x0e
    7c8e:	ae 01       	movw	r20, r28
    7c90:	c7 01       	movw	r24, r14
    7c92:	b6 01       	movw	r22, r12
    7c94:	09 95       	icall
    7c96:	df 91       	pop	r29
    7c98:	cf 91       	pop	r28
    7c9a:	1f 91       	pop	r17
    7c9c:	ff 90       	pop	r15
    7c9e:	ef 90       	pop	r14
    7ca0:	df 90       	pop	r13
    7ca2:	cf 90       	pop	r12
    7ca4:	08 95       	ret

00007ca6 <LIN_COM_DRV_MakeChecksumByte>:
    7ca6:	0f 93       	push	r16
    7ca8:	cf 93       	push	r28
    7caa:	df 93       	push	r29
    7cac:	ea 01       	movw	r28, r20
    7cae:	40 2f       	mov	r20, r16
    7cb0:	66 0f       	add	r22, r22
    7cb2:	77 1f       	adc	r23, r23
    7cb4:	fb 01       	movw	r30, r22
    7cb6:	e4 5f       	subi	r30, 0xF4	; 244
    7cb8:	f8 49       	sbci	r31, 0x98	; 152
    7cba:	01 90       	ld	r0, Z+
    7cbc:	f0 81       	ld	r31, Z
    7cbe:	e0 2d       	mov	r30, r0
    7cc0:	a0 85       	ldd	r26, Z+8	; 0x08
    7cc2:	b1 85       	ldd	r27, Z+9	; 0x09
    7cc4:	52 85       	ldd	r21, Z+10	; 0x0a
    7cc6:	5f 3f       	cpi	r21, 0xFF	; 255
    7cc8:	79 f0       	breq	.+30     	; 0x7ce8 <LIN_COM_DRV_MakeChecksumByte+0x42>
    7cca:	10 97       	sbiw	r26, 0x00	; 0
    7ccc:	49 f4       	brne	.+18     	; 0x7ce0 <LIN_COM_DRV_MakeChecksumByte+0x3a>
    7cce:	0f c0       	rjmp	.+30     	; 0x7cee <LIN_COM_DRV_MakeChecksumByte+0x48>
    7cd0:	fd 01       	movw	r30, r26
    7cd2:	e9 0f       	add	r30, r25
    7cd4:	f1 1d       	adc	r31, r1
    7cd6:	30 81       	ld	r19, Z
    7cd8:	43 17       	cp	r20, r19
    7cda:	41 f0       	breq	.+16     	; 0x7cec <LIN_COM_DRV_MakeChecksumByte+0x46>
    7cdc:	9f 5f       	subi	r25, 0xFF	; 255
    7cde:	01 c0       	rjmp	.+2      	; 0x7ce2 <LIN_COM_DRV_MakeChecksumByte+0x3c>
    7ce0:	90 e0       	ldi	r25, 0x00	; 0
    7ce2:	95 17       	cp	r25, r21
    7ce4:	a8 f3       	brcs	.-22     	; 0x7cd0 <LIN_COM_DRV_MakeChecksumByte+0x2a>
    7ce6:	03 c0       	rjmp	.+6      	; 0x7cee <LIN_COM_DRV_MakeChecksumByte+0x48>
    7ce8:	40 e0       	ldi	r20, 0x00	; 0
    7cea:	01 c0       	rjmp	.+2      	; 0x7cee <LIN_COM_DRV_MakeChecksumByte+0x48>
    7cec:	40 e0       	ldi	r20, 0x00	; 0
    7cee:	62 2f       	mov	r22, r18
    7cf0:	ce 01       	movw	r24, r28
    7cf2:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <LIN_DRV_MakeChecksumByte>
    7cf6:	df 91       	pop	r29
    7cf8:	cf 91       	pop	r28
    7cfa:	0f 91       	pop	r16
    7cfc:	08 95       	ret

00007cfe <LIN_DRV_ProcessSendFrameData>:
    7cfe:	1f 93       	push	r17
    7d00:	cf 93       	push	r28
    7d02:	df 93       	push	r29
    7d04:	9b 01       	movw	r18, r22
    7d06:	22 0f       	add	r18, r18
    7d08:	33 1f       	adc	r19, r19
    7d0a:	f9 01       	movw	r30, r18
    7d0c:	e2 5f       	subi	r30, 0xF2	; 242
    7d0e:	f8 49       	sbci	r31, 0x98	; 152
    7d10:	c0 81       	ld	r28, Z
    7d12:	d1 81       	ldd	r29, Z+1	; 0x01
    7d14:	f9 01       	movw	r30, r18
    7d16:	e6 5f       	subi	r30, 0xF6	; 246
    7d18:	f8 49       	sbci	r31, 0x98	; 152
    7d1a:	01 90       	ld	r0, Z+
    7d1c:	f0 81       	ld	r31, Z
    7d1e:	e0 2d       	mov	r30, r0
    7d20:	2d 81       	ldd	r18, Y+5	; 0x05
    7d22:	5c 81       	ldd	r21, Y+4	; 0x04
    7d24:	32 2f       	mov	r19, r18
    7d26:	35 1b       	sub	r19, r21
    7d28:	31 30       	cpi	r19, 0x01	; 1
    7d2a:	29 f4       	brne	.+10     	; 0x7d36 <LIN_DRV_ProcessSendFrameData+0x38>
    7d2c:	2f 81       	ldd	r18, Y+7	; 0x07
    7d2e:	24 13       	cpse	r18, r20
    7d30:	04 c0       	rjmp	.+8      	; 0x7d3a <LIN_DRV_ProcessSendFrameData+0x3c>
    7d32:	a0 e0       	ldi	r26, 0x00	; 0
    7d34:	03 c0       	rjmp	.+6      	; 0x7d3c <LIN_DRV_ProcessSendFrameData+0x3e>
    7d36:	a0 e0       	ldi	r26, 0x00	; 0
    7d38:	01 c0       	rjmp	.+2      	; 0x7d3c <LIN_DRV_ProcessSendFrameData+0x3e>
    7d3a:	a1 e0       	ldi	r26, 0x01	; 1
    7d3c:	2a 2f       	mov	r18, r26
    7d3e:	21 70       	andi	r18, 0x01	; 1
    7d40:	a8 81       	ld	r26, Y
    7d42:	b9 81       	ldd	r27, Y+1	; 0x01
    7d44:	1c 91       	ld	r17, X
    7d46:	41 17       	cp	r20, r17
    7d48:	21 f0       	breq	.+8      	; 0x7d52 <LIN_DRV_ProcessSendFrameData+0x54>
    7d4a:	31 30       	cpi	r19, 0x01	; 1
    7d4c:	21 f4       	brne	.+8      	; 0x7d56 <LIN_DRV_ProcessSendFrameData+0x58>
    7d4e:	40 e0       	ldi	r20, 0x00	; 0
    7d50:	03 c0       	rjmp	.+6      	; 0x7d58 <LIN_DRV_ProcessSendFrameData+0x5a>
    7d52:	40 e0       	ldi	r20, 0x00	; 0
    7d54:	01 c0       	rjmp	.+2      	; 0x7d58 <LIN_DRV_ProcessSendFrameData+0x5a>
    7d56:	41 e0       	ldi	r20, 0x01	; 1
    7d58:	34 2f       	mov	r19, r20
    7d5a:	31 70       	andi	r19, 0x01	; 1
    7d5c:	11 f4       	brne	.+4      	; 0x7d62 <LIN_DRV_ProcessSendFrameData+0x64>
    7d5e:	22 23       	and	r18, r18
    7d60:	39 f0       	breq	.+14     	; 0x7d70 <LIN_DRV_ProcessSendFrameData+0x72>
    7d62:	29 e0       	ldi	r18, 0x09	; 9
    7d64:	29 8b       	std	Y+17, r18	; 0x11
    7d66:	2b 85       	ldd	r18, Y+11	; 0x0b
    7d68:	21 11       	cpse	r18, r1
    7d6a:	09 c0       	rjmp	.+18     	; 0x7d7e <LIN_DRV_ProcessSendFrameData+0x80>
    7d6c:	18 86       	std	Y+8, r1	; 0x08
    7d6e:	08 c0       	rjmp	.+16     	; 0x7d80 <LIN_DRV_ProcessSendFrameData+0x82>
    7d70:	11 96       	adiw	r26, 0x01	; 1
    7d72:	a8 83       	st	Y, r26
    7d74:	b9 83       	std	Y+1, r27	; 0x01
    7d76:	5f 5f       	subi	r21, 0xFF	; 255
    7d78:	5c 83       	std	Y+4, r21	; 0x04
    7d7a:	21 e0       	ldi	r18, 0x01	; 1
    7d7c:	01 c0       	rjmp	.+2      	; 0x7d80 <LIN_DRV_ProcessSendFrameData+0x82>
    7d7e:	20 e0       	ldi	r18, 0x00	; 0
    7d80:	22 23       	and	r18, r18
    7d82:	61 f1       	breq	.+88     	; 0x7ddc <LIN_DRV_ProcessSendFrameData+0xde>
    7d84:	2c 81       	ldd	r18, Y+4	; 0x04
    7d86:	3d 81       	ldd	r19, Y+5	; 0x05
    7d88:	23 17       	cp	r18, r19
    7d8a:	a0 f4       	brcc	.+40     	; 0x7db4 <LIN_DRV_ProcessSendFrameData+0xb6>
    7d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    7d8e:	90 e0       	ldi	r25, 0x00	; 0
    7d90:	82 1b       	sub	r24, r18
    7d92:	91 09       	sbc	r25, r1
    7d94:	01 97       	sbiw	r24, 0x01	; 1
    7d96:	39 f4       	brne	.+14     	; 0x7da6 <LIN_DRV_ProcessSendFrameData+0xa8>
    7d98:	02 80       	ldd	r0, Z+2	; 0x02
    7d9a:	f3 81       	ldd	r31, Z+3	; 0x03
    7d9c:	e0 2d       	mov	r30, r0
    7d9e:	ce 01       	movw	r24, r28
    7da0:	07 96       	adiw	r24, 0x07	; 7
    7da2:	09 95       	icall
    7da4:	1b c0       	rjmp	.+54     	; 0x7ddc <LIN_DRV_ProcessSendFrameData+0xde>
    7da6:	02 80       	ldd	r0, Z+2	; 0x02
    7da8:	f3 81       	ldd	r31, Z+3	; 0x03
    7daa:	e0 2d       	mov	r30, r0
    7dac:	88 81       	ld	r24, Y
    7dae:	99 81       	ldd	r25, Y+1	; 0x01
    7db0:	09 95       	icall
    7db2:	14 c0       	rjmp	.+40     	; 0x7ddc <LIN_DRV_ProcessSendFrameData+0xde>
    7db4:	2b e0       	ldi	r18, 0x0B	; 11
    7db6:	29 8b       	std	Y+17, r18	; 0x11
    7db8:	2a e0       	ldi	r18, 0x0A	; 10
    7dba:	2a 8b       	std	Y+18, r18	; 0x12
    7dbc:	ed 85       	ldd	r30, Y+13	; 0x0d
    7dbe:	fe 85       	ldd	r31, Y+14	; 0x0e
    7dc0:	30 97       	sbiw	r30, 0x00	; 0
    7dc2:	11 f0       	breq	.+4      	; 0x7dc8 <LIN_DRV_ProcessSendFrameData+0xca>
    7dc4:	ae 01       	movw	r20, r28
    7dc6:	09 95       	icall
    7dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    7dca:	81 11       	cpse	r24, r1
    7dcc:	05 c0       	rjmp	.+10     	; 0x7dd8 <LIN_DRV_ProcessSendFrameData+0xda>
    7dce:	18 86       	std	Y+8, r1	; 0x08
    7dd0:	19 8a       	std	Y+17, r1	; 0x11
    7dd2:	82 e0       	ldi	r24, 0x02	; 2
    7dd4:	8a 8b       	std	Y+18, r24	; 0x12
    7dd6:	1a 86       	std	Y+10, r1	; 0x0a
    7dd8:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <ep40_lin_signal_update_while_task>
    7ddc:	df 91       	pop	r29
    7dde:	cf 91       	pop	r28
    7de0:	1f 91       	pop	r17
    7de2:	08 95       	ret

00007de4 <LIN_DRV_Init>:
    7de4:	f9 01       	movw	r30, r18
    7de6:	66 0f       	add	r22, r22
    7de8:	77 1f       	adc	r23, r23
    7dea:	db 01       	movw	r26, r22
    7dec:	a2 5f       	subi	r26, 0xF2	; 242
    7dee:	b8 49       	sbci	r27, 0x98	; 152
    7df0:	2d 93       	st	X+, r18
    7df2:	3c 93       	st	X, r19
    7df4:	db 01       	movw	r26, r22
    7df6:	a4 5f       	subi	r26, 0xF4	; 244
    7df8:	b8 49       	sbci	r27, 0x98	; 152
    7dfa:	4d 93       	st	X+, r20
    7dfc:	5c 93       	st	X, r21
    7dfe:	db 01       	movw	r26, r22
    7e00:	a6 5f       	subi	r26, 0xF6	; 246
    7e02:	b8 49       	sbci	r27, 0x98	; 152
    7e04:	83 eb       	ldi	r24, 0xB3	; 179
    7e06:	90 e6       	ldi	r25, 0x60	; 96
    7e08:	8d 93       	st	X+, r24
    7e0a:	9c 93       	st	X, r25
    7e0c:	82 e0       	ldi	r24, 0x02	; 2
    7e0e:	82 8b       	std	Z+18, r24	; 0x12
    7e10:	10 86       	std	Z+8, r1	; 0x08
    7e12:	11 86       	std	Z+9, r1	; 0x09
    7e14:	12 86       	std	Z+10, r1	; 0x0a
    7e16:	14 86       	std	Z+12, r1	; 0x0c
    7e18:	13 86       	std	Z+11, r1	; 0x0b
    7e1a:	17 8a       	std	Z+23, r1	; 0x17
    7e1c:	13 8a       	std	Z+19, r1	; 0x13
    7e1e:	14 8a       	std	Z+20, r1	; 0x14
    7e20:	15 8a       	std	Z+21, r1	; 0x15
    7e22:	16 8a       	std	Z+22, r1	; 0x16
    7e24:	80 e0       	ldi	r24, 0x00	; 0
    7e26:	90 e0       	ldi	r25, 0x00	; 0
    7e28:	08 95       	ret

00007e2a <LIN_DRV_GotoIdleState>:
    7e2a:	66 0f       	add	r22, r22
    7e2c:	77 1f       	adc	r23, r23
    7e2e:	fb 01       	movw	r30, r22
    7e30:	e2 5f       	subi	r30, 0xF2	; 242
    7e32:	f8 49       	sbci	r31, 0x98	; 152
    7e34:	01 90       	ld	r0, Z+
    7e36:	f0 81       	ld	r31, Z
    7e38:	e0 2d       	mov	r30, r0
    7e3a:	11 8a       	std	Z+17, r1	; 0x11
    7e3c:	82 e0       	ldi	r24, 0x02	; 2
    7e3e:	82 8b       	std	Z+18, r24	; 0x12
    7e40:	12 86       	std	Z+10, r1	; 0x0a
    7e42:	80 e0       	ldi	r24, 0x00	; 0
    7e44:	90 e0       	ldi	r25, 0x00	; 0
    7e46:	08 95       	ret

00007e48 <LIN_DRV_ProcessReceiveFrameData>:
    7e48:	cf 92       	push	r12
    7e4a:	df 92       	push	r13
    7e4c:	ef 92       	push	r14
    7e4e:	ff 92       	push	r15
    7e50:	0f 93       	push	r16
    7e52:	cf 93       	push	r28
    7e54:	df 93       	push	r29
    7e56:	fb 01       	movw	r30, r22
    7e58:	ee 0f       	add	r30, r30
    7e5a:	ff 1f       	adc	r31, r31
    7e5c:	e2 5f       	subi	r30, 0xF2	; 242
    7e5e:	f8 49       	sbci	r31, 0x98	; 152
    7e60:	c0 81       	ld	r28, Z
    7e62:	d1 81       	ldd	r29, Z+1	; 0x01
    7e64:	2e 81       	ldd	r18, Y+6	; 0x06
    7e66:	30 e0       	ldi	r19, 0x00	; 0
    7e68:	5c 81       	ldd	r21, Y+4	; 0x04
    7e6a:	e5 2f       	mov	r30, r21
    7e6c:	f0 e0       	ldi	r31, 0x00	; 0
    7e6e:	31 96       	adiw	r30, 0x01	; 1
    7e70:	e2 17       	cp	r30, r18
    7e72:	f3 07       	cpc	r31, r19
    7e74:	50 f4       	brcc	.+20     	; 0x7e8a <LIN_DRV_ProcessReceiveFrameData+0x42>
    7e76:	ea 81       	ldd	r30, Y+2	; 0x02
    7e78:	fb 81       	ldd	r31, Y+3	; 0x03
    7e7a:	40 83       	st	Z, r20
    7e7c:	2a 81       	ldd	r18, Y+2	; 0x02
    7e7e:	3b 81       	ldd	r19, Y+3	; 0x03
    7e80:	2f 5f       	subi	r18, 0xFF	; 255
    7e82:	3f 4f       	sbci	r19, 0xFF	; 255
    7e84:	2a 83       	std	Y+2, r18	; 0x02
    7e86:	3b 83       	std	Y+3, r19	; 0x03
    7e88:	08 c0       	rjmp	.+16     	; 0x7e9a <LIN_DRV_ProcessReceiveFrameData+0x52>
    7e8a:	2e 81       	ldd	r18, Y+6	; 0x06
    7e8c:	30 e0       	ldi	r19, 0x00	; 0
    7e8e:	25 1b       	sub	r18, r21
    7e90:	31 09       	sbc	r19, r1
    7e92:	21 30       	cpi	r18, 0x01	; 1
    7e94:	31 05       	cpc	r19, r1
    7e96:	09 f4       	brne	.+2      	; 0x7e9a <LIN_DRV_ProcessReceiveFrameData+0x52>
    7e98:	4f 83       	std	Y+7, r20	; 0x07
    7e9a:	2c 81       	ldd	r18, Y+4	; 0x04
    7e9c:	31 e0       	ldi	r19, 0x01	; 1
    7e9e:	32 0f       	add	r19, r18
    7ea0:	3c 83       	std	Y+4, r19	; 0x04
    7ea2:	2e 81       	ldd	r18, Y+6	; 0x06
    7ea4:	32 13       	cpse	r19, r18
    7ea6:	3d c0       	rjmp	.+122    	; 0x7f22 <LIN_DRV_ProcessReceiveFrameData+0xda>
    7ea8:	6b 01       	movw	r12, r22
    7eaa:	7c 01       	movw	r14, r24
    7eac:	8e 81       	ldd	r24, Y+6	; 0x06
    7eae:	90 e0       	ldi	r25, 0x00	; 0
    7eb0:	01 97       	sbiw	r24, 0x01	; 1
    7eb2:	4a 81       	ldd	r20, Y+2	; 0x02
    7eb4:	5b 81       	ldd	r21, Y+3	; 0x03
    7eb6:	48 1b       	sub	r20, r24
    7eb8:	59 0b       	sbc	r21, r25
    7eba:	4a 83       	std	Y+2, r20	; 0x02
    7ebc:	5b 83       	std	Y+3, r21	; 0x03
    7ebe:	2e 81       	ldd	r18, Y+6	; 0x06
    7ec0:	21 50       	subi	r18, 0x01	; 1
    7ec2:	08 89       	ldd	r16, Y+16	; 0x10
    7ec4:	c7 01       	movw	r24, r14
    7ec6:	b6 01       	movw	r22, r12
    7ec8:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <LIN_COM_DRV_MakeChecksumByte>
    7ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    7ece:	89 13       	cpse	r24, r25
    7ed0:	19 c0       	rjmp	.+50     	; 0x7f04 <LIN_DRV_ProcessReceiveFrameData+0xbc>
    7ed2:	8c e0       	ldi	r24, 0x0C	; 12
    7ed4:	89 8b       	std	Y+17, r24	; 0x11
    7ed6:	88 e0       	ldi	r24, 0x08	; 8
    7ed8:	8a 8b       	std	Y+18, r24	; 0x12
    7eda:	ed 85       	ldd	r30, Y+13	; 0x0d
    7edc:	fe 85       	ldd	r31, Y+14	; 0x0e
    7ede:	30 97       	sbiw	r30, 0x00	; 0
    7ee0:	21 f0       	breq	.+8      	; 0x7eea <LIN_DRV_ProcessReceiveFrameData+0xa2>
    7ee2:	ae 01       	movw	r20, r28
    7ee4:	c7 01       	movw	r24, r14
    7ee6:	b6 01       	movw	r22, r12
    7ee8:	09 95       	icall
    7eea:	8c 85       	ldd	r24, Y+12	; 0x0c
    7eec:	81 11       	cpse	r24, r1
    7eee:	19 c0       	rjmp	.+50     	; 0x7f22 <LIN_DRV_ProcessReceiveFrameData+0xda>
    7ef0:	1a 86       	std	Y+10, r1	; 0x0a
    7ef2:	19 86       	std	Y+9, r1	; 0x09
    7ef4:	8a 89       	ldd	r24, Y+18	; 0x12
    7ef6:	81 30       	cpi	r24, 0x01	; 1
    7ef8:	a1 f0       	breq	.+40     	; 0x7f22 <LIN_DRV_ProcessReceiveFrameData+0xda>
    7efa:	c7 01       	movw	r24, r14
    7efc:	b6 01       	movw	r22, r12
    7efe:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <LIN_DRV_GotoIdleState>
    7f02:	0f c0       	rjmp	.+30     	; 0x7f22 <LIN_DRV_ProcessReceiveFrameData+0xda>
    7f04:	8a e0       	ldi	r24, 0x0A	; 10
    7f06:	89 8b       	std	Y+17, r24	; 0x11
    7f08:	ed 85       	ldd	r30, Y+13	; 0x0d
    7f0a:	fe 85       	ldd	r31, Y+14	; 0x0e
    7f0c:	30 97       	sbiw	r30, 0x00	; 0
    7f0e:	21 f0       	breq	.+8      	; 0x7f18 <LIN_DRV_ProcessReceiveFrameData+0xd0>
    7f10:	ae 01       	movw	r20, r28
    7f12:	c7 01       	movw	r24, r14
    7f14:	b6 01       	movw	r22, r12
    7f16:	09 95       	icall
    7f18:	19 86       	std	Y+9, r1	; 0x09
    7f1a:	c7 01       	movw	r24, r14
    7f1c:	b6 01       	movw	r22, r12
    7f1e:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <LIN_DRV_GotoIdleState>
    7f22:	df 91       	pop	r29
    7f24:	cf 91       	pop	r28
    7f26:	0f 91       	pop	r16
    7f28:	ff 90       	pop	r15
    7f2a:	ef 90       	pop	r14
    7f2c:	df 90       	pop	r13
    7f2e:	cf 90       	pop	r12
    7f30:	08 95       	ret

00007f32 <LIN_DRV_GoToSleepMode>:
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    7f32:	66 0f       	add	r22, r22
    7f34:	77 1f       	adc	r23, r23
    7f36:	fb 01       	movw	r30, r22
    7f38:	e2 5f       	subi	r30, 0xF2	; 242
    7f3a:	f8 49       	sbci	r31, 0x98	; 152
    7f3c:	01 90       	ld	r0, Z+
    7f3e:	f0 81       	ld	r31, Z
    7f40:	e0 2d       	mov	r30, r0

    /* Update node's current state to SLEEP_MODE. */
    linCurrentState->currentNodeState = LIN_NODE_STATE_SLEEP_MODE;
    7f42:	81 e0       	ldi	r24, 0x01	; 1
    7f44:	82 8b       	std	Z+18, r24	; 0x12

    lin_go_to_sleep();
    7f46:	0e 94 0d 2c 	call	0x581a	; 0x581a <lin_go_to_sleep>

    return STATUS_SUCCESS;
}
    7f4a:	80 e0       	ldi	r24, 0x00	; 0
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	08 95       	ret

00007f50 <LIN_DRV_AbortTransferData>:
 * function to terminate immediately the transferring.
 *
 * Implements    : LIN_DRV_AbortTransferData_Activity
 *END**************************************************************************/
status_t LIN_DRV_AbortTransferData(uint32_t instance)
{
    7f50:	cf 93       	push	r28
    7f52:	df 93       	push	r29
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    7f54:	fb 01       	movw	r30, r22
    7f56:	ee 0f       	add	r30, r30
    7f58:	ff 1f       	adc	r31, r31
    7f5a:	e2 5f       	subi	r30, 0xF2	; 242
    7f5c:	f8 49       	sbci	r31, 0x98	; 152
    7f5e:	c0 81       	ld	r28, Z
    7f60:	d1 81       	ldd	r29, Z+1	; 0x01

    /* Change node's current state to IDLE */
    (void)LIN_DRV_GotoIdleState(instance);
    7f62:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <LIN_DRV_GotoIdleState>

    /* Clear LIN Tx and Rx Busy flag */
    linCurrentState->isTxBusy = false;
    7f66:	18 86       	std	Y+8, r1	; 0x08
    linCurrentState->isRxBusy = false;
    7f68:	19 86       	std	Y+9, r1	; 0x09

    return retVal;
}
    7f6a:	80 e0       	ldi	r24, 0x00	; 0
    7f6c:	90 e0       	ldi	r25, 0x00	; 0
    7f6e:	df 91       	pop	r29
    7f70:	cf 91       	pop	r28
    7f72:	08 95       	ret

00007f74 <LIN_DRV_InstallCallback>:
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    7f74:	66 0f       	add	r22, r22
    7f76:	77 1f       	adc	r23, r23
    7f78:	fb 01       	movw	r30, r22
    7f7a:	e2 5f       	subi	r30, 0xF2	; 242
    7f7c:	f8 49       	sbci	r31, 0x98	; 152
    7f7e:	01 90       	ld	r0, Z+
    7f80:	f0 81       	ld	r31, Z
    7f82:	e0 2d       	mov	r30, r0

    /* Get the current callback function. */
    lin_callback_t currentCallback = linCurrentState->Callback;
    7f84:	85 85       	ldd	r24, Z+13	; 0x0d
    7f86:	96 85       	ldd	r25, Z+14	; 0x0e

    /* Install new callback function. */
    linCurrentState->Callback = function;
    7f88:	45 87       	std	Z+13, r20	; 0x0d
    7f8a:	56 87       	std	Z+14, r21	; 0x0e

    return currentCallback;
}
    7f8c:	08 95       	ret

00007f8e <LIN_DRV_IRQHandler>:

/*  参数instance为串口标号，取决于配置的顺序
*/

void LIN_DRV_IRQHandler(uint32_t instance, int8_t event)
{
    7f8e:	cf 92       	push	r12
    7f90:	df 92       	push	r13
    7f92:	ef 92       	push	r14
    7f94:	ff 92       	push	r15
    7f96:	cf 93       	push	r28
    7f98:	df 93       	push	r29
    7f9a:	1f 92       	push	r1
    7f9c:	cd b7       	in	r28, 0x3d	; 61
    7f9e:	de b7       	in	r29, 0x3e	; 62
    7fa0:	6b 01       	movw	r12, r22
    7fa2:	7c 01       	movw	r14, r24
    /* 一下功能实现只针对AVRxxDA系列8位单片机 */
    uint8_t temp_buf; 
    /************/
    const lin_user_config_t * linUserConfig = g_linUserconfigPtr[instance];
    7fa4:	cb 01       	movw	r24, r22
    7fa6:	88 0f       	add	r24, r24
    7fa8:	99 1f       	adc	r25, r25
    7faa:	fc 01       	movw	r30, r24
    7fac:	e4 5f       	subi	r30, 0xF4	; 244
    7fae:	f8 49       	sbci	r31, 0x98	; 152
    7fb0:	20 81       	ld	r18, Z
    7fb2:	31 81       	ldd	r19, Z+1	; 0x01
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    7fb4:	fc 01       	movw	r30, r24
    7fb6:	e2 5f       	subi	r30, 0xF2	; 242
    7fb8:	f8 49       	sbci	r31, 0x98	; 152
    7fba:	a0 81       	ld	r26, Z
    7fbc:	b1 81       	ldd	r27, Z+1	; 0x01
    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    7fbe:	fc 01       	movw	r30, r24
    7fc0:	e6 5f       	subi	r30, 0xF6	; 246
    7fc2:	f8 49       	sbci	r31, 0x98	; 152
    7fc4:	60 81       	ld	r22, Z
    7fc6:	71 81       	ldd	r23, Z+1	; 0x01

    if(event == 1) // 检测到PID
    7fc8:	41 30       	cpi	r20, 0x01	; 1
    7fca:	d9 f4       	brne	.+54     	; 0x8002 <__RODATA_PM_OFFSET__+0x2>
    {
        //AVR系列单片机特殊的地方 BREAK SYNC PID 一起识别触发
        if(linUserConfig->nodeFunction == (bool)MASTER)
    7fcc:	f9 01       	movw	r30, r18
    7fce:	84 81       	ldd	r24, Z+4	; 0x04
    7fd0:	81 11       	cpse	r24, r1
    7fd2:	57 c0       	rjmp	.+174    	; 0x8082 <__RODATA_PM_OFFSET__+0x82>
        {
            //TODO:主机模式后续更新，AVR 8位机无法实现主机模式
        }else
        {
            /* Set flag LIN bus busy */
            linCurrentState->isBusBusy = true;
    7fd4:	81 e0       	ldi	r24, 0x01	; 1
    7fd6:	1a 96       	adiw	r26, 0x0a	; 10
    7fd8:	8c 93       	st	X, r24
    7fda:	1a 97       	sbiw	r26, 0x0a	; 10
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentEventId = LIN_SYNC_OK;
    7fdc:	84 e0       	ldi	r24, 0x04	; 4
    7fde:	51 96       	adiw	r26, 0x11	; 17
    7fe0:	8c 93       	st	X, r24
    7fe2:	51 97       	sbiw	r26, 0x11	; 17
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_PID;
    7fe4:	86 e0       	ldi	r24, 0x06	; 6
    7fe6:	52 96       	adiw	r26, 0x12	; 18
    7fe8:	8c 93       	st	X, r24
            /* 直接读取data缓冲区数据，存放得当前PID */
            linFuncCallback->ReadByte(&temp_buf);
    7fea:	db 01       	movw	r26, r22
    7fec:	ed 91       	ld	r30, X+
    7fee:	fc 91       	ld	r31, X
    7ff0:	ce 01       	movw	r24, r28
    7ff2:	01 96       	adiw	r24, 0x01	; 1
    7ff4:	09 95       	icall
            /* 判断PID是否合理，有错误 */
            LIN_DRV_ProcessFrameHeader(instance, temp_buf);
    7ff6:	49 81       	ldd	r20, Y+1	; 0x01
    7ff8:	c7 01       	movw	r24, r14
    7ffa:	b6 01       	movw	r22, r12
    7ffc:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <LIN_DRV_ProcessFrameHeader>
    8000:	40 c0       	rjmp	.+128    	; 0x8082 <__RODATA_PM_OFFSET__+0x82>
            // {
            //     linCurrentState->Callback(instance, linCurrentState);
            // }
        }
    }
    else if(event == 0) //处理帧数据
    8002:	41 11       	cpse	r20, r1
    8004:	2a c0       	rjmp	.+84     	; 0x805a <__RODATA_PM_OFFSET__+0x5a>
    {
        /* Check node's current state */
        switch (linCurrentState->currentNodeState)
    8006:	52 96       	adiw	r26, 0x12	; 18
    8008:	8c 91       	ld	r24, X
    800a:	87 30       	cpi	r24, 0x07	; 7
    800c:	39 f0       	breq	.+14     	; 0x801c <__RODATA_PM_OFFSET__+0x1c>
    800e:	18 f4       	brcc	.+6      	; 0x8016 <__RODATA_PM_OFFSET__+0x16>
    8010:	84 30       	cpi	r24, 0x04	; 4
    8012:	b8 f5       	brcc	.+110    	; 0x8082 <__RODATA_PM_OFFSET__+0x82>
    8014:	1b c0       	rjmp	.+54     	; 0x804c <__RODATA_PM_OFFSET__+0x4c>
    8016:	89 30       	cpi	r24, 0x09	; 9
    8018:	69 f0       	breq	.+26     	; 0x8034 <__RODATA_PM_OFFSET__+0x34>
    801a:	18 c0       	rjmp	.+48     	; 0x804c <__RODATA_PM_OFFSET__+0x4c>
            /* if current state is RECEIVE PID */
            case LIN_NODE_STATE_RECV_PID:
                break;
            /* if current state is RECEIVE DATA */
            case LIN_NODE_STATE_RECV_DATA:
                linFuncCallback->ReadByte(&temp_buf);
    801c:	db 01       	movw	r26, r22
    801e:	ed 91       	ld	r30, X+
    8020:	fc 91       	ld	r31, X
    8022:	ce 01       	movw	r24, r28
    8024:	01 96       	adiw	r24, 0x01	; 1
    8026:	09 95       	icall
                LIN_DRV_ProcessReceiveFrameData(instance, temp_buf);
    8028:	49 81       	ldd	r20, Y+1	; 0x01
    802a:	c7 01       	movw	r24, r14
    802c:	b6 01       	movw	r22, r12
    802e:	0e 94 24 3f 	call	0x7e48	; 0x7e48 <LIN_DRV_ProcessReceiveFrameData>
                break;
    8032:	27 c0       	rjmp	.+78     	; 0x8082 <__RODATA_PM_OFFSET__+0x82>
            /* if current state is SENDING DATA */
            case LIN_NODE_STATE_SEND_DATA:
                /* 发送时会回显数据 读上次发送的回显数据 */
                linFuncCallback->ReadByte(&temp_buf);
    8034:	db 01       	movw	r26, r22
    8036:	ed 91       	ld	r30, X+
    8038:	fc 91       	ld	r31, X
    803a:	ce 01       	movw	r24, r28
    803c:	01 96       	adiw	r24, 0x01	; 1
    803e:	09 95       	icall
                LIN_DRV_ProcessSendFrameData(instance, temp_buf);
    8040:	49 81       	ldd	r20, Y+1	; 0x01
    8042:	c7 01       	movw	r24, r14
    8044:	b6 01       	movw	r22, r12
    8046:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <LIN_DRV_ProcessSendFrameData>
                break;
    804a:	1b c0       	rjmp	.+54     	; 0x8082 <__RODATA_PM_OFFSET__+0x82>

            default:
                /* Other node state */
				linFuncCallback->ReadByte(&temp_buf);
    804c:	db 01       	movw	r26, r22
    804e:	ed 91       	ld	r30, X+
    8050:	fc 91       	ld	r31, X
    8052:	ce 01       	movw	r24, r28
    8054:	01 96       	adiw	r24, 0x01	; 1
    8056:	09 95       	icall
                break;
    8058:	14 c0       	rjmp	.+40     	; 0x8082 <__RODATA_PM_OFFSET__+0x82>
        }
    }
    else if(event == -1) //报错
    805a:	4f 3f       	cpi	r20, 0xFF	; 255
    805c:	91 f4       	brne	.+36     	; 0x8082 <__RODATA_PM_OFFSET__+0x82>
        // else if(err == USART_ERROR_FRAMING)
        // {

        // }
        // AVRXXDA系列的型号
        linCurrentState->currentEventId = LIN_SYNC_ERROR;
    805e:	85 e0       	ldi	r24, 0x05	; 5
    8060:	51 96       	adiw	r26, 0x11	; 17
    8062:	8c 93       	st	X, r24
    8064:	51 97       	sbiw	r26, 0x11	; 17
        if(linCurrentState->Callback != NULL)
    8066:	1d 96       	adiw	r26, 0x0d	; 13
    8068:	ed 91       	ld	r30, X+
    806a:	fc 91       	ld	r31, X
    806c:	1e 97       	sbiw	r26, 0x0e	; 14
    806e:	30 97       	sbiw	r30, 0x00	; 0
    8070:	21 f0       	breq	.+8      	; 0x807a <__RODATA_PM_OFFSET__+0x7a>
        {
            linCurrentState->Callback(instance, linCurrentState);
    8072:	ad 01       	movw	r20, r26
    8074:	c7 01       	movw	r24, r14
    8076:	b6 01       	movw	r22, r12
    8078:	09 95       	icall
        }
        (void)LIN_DRV_GotoIdleState(instance);
    807a:	c7 01       	movw	r24, r14
    807c:	b6 01       	movw	r22, r12
    807e:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <LIN_DRV_GotoIdleState>
    }
}
    8082:	0f 90       	pop	r0
    8084:	df 91       	pop	r29
    8086:	cf 91       	pop	r28
    8088:	ff 90       	pop	r15
    808a:	ef 90       	pop	r14
    808c:	df 90       	pop	r13
    808e:	cf 90       	pop	r12
    8090:	08 95       	ret

00008092 <LIN_DRV_SendFrameData>:
 * isBusBusy is currently true then the function will return STATUS_BUSY.
 * 非阻塞模式下发送数据,该函数会计算校验字节，并发送帧数据，立即返回
 * Implements    : LIN_LPUART_DRV_SendFrameData_Activity
 * */
status_t LIN_DRV_SendFrameData(uint32_t instance, const uint8_t * txBuff, uint8_t txSize)
{
    8092:	cf 92       	push	r12
    8094:	df 92       	push	r13
    8096:	ef 92       	push	r14
    8098:	ff 92       	push	r15
    809a:	0f 93       	push	r16
    809c:	1f 93       	push	r17
    809e:	cf 93       	push	r28
    80a0:	df 93       	push	r29
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    80a2:	fb 01       	movw	r30, r22
    80a4:	ee 0f       	add	r30, r30
    80a6:	ff 1f       	adc	r31, r31
    80a8:	df 01       	movw	r26, r30
    80aa:	a2 5f       	subi	r26, 0xF2	; 242
    80ac:	b8 49       	sbci	r27, 0x98	; 152
    80ae:	cd 91       	ld	r28, X+
    80b0:	dc 91       	ld	r29, X

    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    80b2:	e6 5f       	subi	r30, 0xF6	; 246
    80b4:	f8 49       	sbci	r31, 0x98	; 152
    80b6:	c0 80       	ld	r12, Z
    80b8:	d1 80       	ldd	r13, Z+1	; 0x01

    /* 判断节点是否处于睡眠状态 */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    80ba:	ea 89       	ldd	r30, Y+18	; 0x12

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    80bc:	3f ef       	ldi	r19, 0xFF	; 255
    80be:	32 0f       	add	r19, r18
    80c0:	38 30       	cpi	r19, 0x08	; 8
    80c2:	08 f5       	brcc	.+66     	; 0x8106 <LIN_DRV_SendFrameData+0x74>
    80c4:	e1 30       	cpi	r30, 0x01	; 1
    80c6:	11 f1       	breq	.+68     	; 0x810c <LIN_DRV_SendFrameData+0x7a>
        retVal = STATUS_ERROR;
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    80c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    80ca:	31 11       	cpse	r19, r1
    80cc:	22 c0       	rjmp	.+68     	; 0x8112 <LIN_DRV_SendFrameData+0x80>
    80ce:	12 2f       	mov	r17, r18
    80d0:	7a 01       	movw	r14, r20
            retVal = STATUS_BUSY;
        }
        else
        {
            /* Make the checksum byte. */           
            linCurrentState->checkSum = LIN_COM_DRV_MakeChecksumByte(instance, txBuff, txSize, linCurrentState->currentPid);
    80d2:	08 89       	ldd	r16, Y+16	; 0x10
    80d4:	0e 94 53 3e 	call	0x7ca6	; 0x7ca6 <LIN_COM_DRV_MakeChecksumByte>
    80d8:	8f 83       	std	Y+7, r24	; 0x07

            /* Update the LIN state structure. */
            linCurrentState->txBuff = txBuff;
    80da:	e8 82       	st	Y, r14
    80dc:	f9 82       	std	Y+1, r15	; 0x01
            /* Add a place for checksum byte */
            linCurrentState->txSize = (uint8_t)(txSize + 1U);
    80de:	21 e0       	ldi	r18, 0x01	; 1
    80e0:	21 0f       	add	r18, r17
    80e2:	2d 83       	std	Y+5, r18	; 0x05
            linCurrentState->cntByte = 0U;
    80e4:	1c 82       	std	Y+4, r1	; 0x04
            linCurrentState->currentNodeState = LIN_NODE_STATE_SEND_DATA;
    80e6:	89 e0       	ldi	r24, 0x09	; 9
    80e8:	8a 8b       	std	Y+18, r24	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    80ea:	19 8a       	std	Y+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    80ec:	81 e0       	ldi	r24, 0x01	; 1
    80ee:	8a 87       	std	Y+10, r24	; 0x0a
            linCurrentState->isTxBusy = true;
    80f0:	88 87       	std	Y+8, r24	; 0x08

            /* Set Break char detect length as 10 bits minimum */
            //LPUART_SetBreakCharDetectLength(base, LPUART_BREAK_CHAR_10_BIT_MINIMUM);  

            /* Start sending data */
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
    80f2:	d6 01       	movw	r26, r12
    80f4:	12 96       	adiw	r26, 0x02	; 2
    80f6:	ed 91       	ld	r30, X+
    80f8:	fc 91       	ld	r31, X
    80fa:	13 97       	sbiw	r26, 0x03	; 3
    80fc:	c7 01       	movw	r24, r14
    80fe:	09 95       	icall
{
    /* Assert parameters. */
    DEV_ASSERT(txBuff != NULL);
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;
    8100:	80 e0       	ldi	r24, 0x00	; 0
    8102:	90 e0       	ldi	r25, 0x00	; 0
    8104:	08 c0       	rjmp	.+16     	; 0x8116 <LIN_DRV_SendFrameData+0x84>

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    {
        retVal = STATUS_ERROR;
    8106:	81 e0       	ldi	r24, 0x01	; 1
    8108:	90 e0       	ldi	r25, 0x00	; 0
    810a:	05 c0       	rjmp	.+10     	; 0x8116 <LIN_DRV_SendFrameData+0x84>
    810c:	81 e0       	ldi	r24, 0x01	; 1
    810e:	90 e0       	ldi	r25, 0x00	; 0
    8110:	02 c0       	rjmp	.+4      	; 0x8116 <LIN_DRV_SendFrameData+0x84>
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
        {
            retVal = STATUS_BUSY;
    8112:	82 e0       	ldi	r24, 0x02	; 2
    8114:	90 e0       	ldi	r25, 0x00	; 0
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
        }
    }

    return retVal;
}
    8116:	df 91       	pop	r29
    8118:	cf 91       	pop	r28
    811a:	1f 91       	pop	r17
    811c:	0f 91       	pop	r16
    811e:	ff 90       	pop	r15
    8120:	ef 90       	pop	r14
    8122:	df 90       	pop	r13
    8124:	cf 90       	pop	r12
    8126:	08 95       	ret

00008128 <LIN_DRV_ReceiveFrameData>:
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    8128:	66 0f       	add	r22, r22
    812a:	77 1f       	adc	r23, r23
    812c:	fb 01       	movw	r30, r22
    812e:	e2 5f       	subi	r30, 0xF2	; 242
    8130:	f8 49       	sbci	r31, 0x98	; 152
    8132:	01 90       	ld	r0, Z+
    8134:	f0 81       	ld	r31, Z
    8136:	e0 2d       	mov	r30, r0

    /* Check whether current mode is sleep mode */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    8138:	92 89       	ldd	r25, Z+18	; 0x12

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    813a:	8f ef       	ldi	r24, 0xFF	; 255
    813c:	82 0f       	add	r24, r18
    813e:	88 30       	cpi	r24, 0x08	; 8
    8140:	a0 f4       	brcc	.+40     	; 0x816a <LIN_DRV_ReceiveFrameData+0x42>
    8142:	91 30       	cpi	r25, 0x01	; 1
    8144:	a9 f0       	breq	.+42     	; 0x8170 <LIN_DRV_ReceiveFrameData+0x48>
        retVal = STATUS_ERROR;
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    8146:	82 85       	ldd	r24, Z+10	; 0x0a
    8148:	81 11       	cpse	r24, r1
    814a:	15 c0       	rjmp	.+42     	; 0x8176 <LIN_DRV_ReceiveFrameData+0x4e>
            retVal = STATUS_BUSY;
        }
        else
        {
            /* Update the LIN state structure. */
            linCurrentState->rxBuff = rxBuff;
    814c:	42 83       	std	Z+2, r20	; 0x02
    814e:	53 83       	std	Z+3, r21	; 0x03
            /* Add a place for checksum byte */
            linCurrentState->rxSize = (uint8_t)(rxSize + 1U);
    8150:	2f 5f       	subi	r18, 0xFF	; 255
    8152:	26 83       	std	Z+6, r18	; 0x06
            linCurrentState->cntByte = 0U;
    8154:	14 82       	std	Z+4, r1	; 0x04

            /* Start receiving data */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA;
    8156:	87 e0       	ldi	r24, 0x07	; 7
    8158:	82 8b       	std	Z+18, r24	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    815a:	11 8a       	std	Z+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    815c:	81 e0       	ldi	r24, 0x01	; 1
    815e:	82 87       	std	Z+10, r24	; 0x0a
            linCurrentState->isRxBusy = true;
    8160:	81 87       	std	Z+9, r24	; 0x09
            linCurrentState->isRxBlocking = false;
    8162:	14 86       	std	Z+12, r1	; 0x0c
{
    /* Assert parameters. */
    DEV_ASSERT(rxBuff != NULL);
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    8164:	80 e0       	ldi	r24, 0x00	; 0
    8166:	90 e0       	ldi	r25, 0x00	; 0
    8168:	08 95       	ret

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    {
        retVal = STATUS_ERROR;
    816a:	81 e0       	ldi	r24, 0x01	; 1
    816c:	90 e0       	ldi	r25, 0x00	; 0
    816e:	08 95       	ret
    8170:	81 e0       	ldi	r24, 0x01	; 1
    8172:	90 e0       	ldi	r25, 0x00	; 0
    8174:	08 95       	ret
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
        {
            retVal = STATUS_BUSY;
    8176:	82 e0       	ldi	r24, 0x02	; 2
    8178:	90 e0       	ldi	r25, 0x00	; 0
            linCurrentState->isRxBlocking = false;
        }
    }

    return retVal;
}
    817a:	08 95       	ret

0000817c <LIN_DRV_TimeoutService>:
 * Implements    : LIN_DRV_TimeoutService_Activity
 * 
 * 需要初始化一个定时器,每0.5ms需要回调一次该函数,计数没有实现,AVR单片机容易导致卡死
 *END**************************************************************************/
void LIN_DRV_TimeoutService(uint32_t instance)
{
    817c:	cf 92       	push	r12
    817e:	df 92       	push	r13
    8180:	ef 92       	push	r14
    8182:	ff 92       	push	r15
    8184:	cf 93       	push	r28
    8186:	df 93       	push	r29
    8188:	6b 01       	movw	r12, r22
    818a:	7c 01       	movw	r14, r24
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    818c:	fb 01       	movw	r30, r22
    818e:	ee 0f       	add	r30, r30
    8190:	ff 1f       	adc	r31, r31
    8192:	e2 5f       	subi	r30, 0xF2	; 242
    8194:	f8 49       	sbci	r31, 0x98	; 152
    8196:	c0 81       	ld	r28, Z
    8198:	d1 81       	ldd	r29, Z+1	; 0x01

    /* Get LIN node's current state */
    lin_node_state_t state = linCurrentState->currentNodeState;
    819a:	8a 89       	ldd	r24, Y+18	; 0x12

    switch (state)
    819c:	87 30       	cpi	r24, 0x07	; 7
    819e:	51 f1       	breq	.+84     	; 0x81f4 <LIN_DRV_TimeoutService+0x78>
    81a0:	89 30       	cpi	r24, 0x09	; 9
    81a2:	09 f0       	breq	.+2      	; 0x81a6 <LIN_DRV_TimeoutService+0x2a>
    81a4:	4d c0       	rjmp	.+154    	; 0x8240 <LIN_DRV_TimeoutService+0xc4>
    {
        /* If the node is SENDING DATA */
        case LIN_NODE_STATE_SEND_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    81a6:	8b 89       	ldd	r24, Y+19	; 0x13
    81a8:	9c 89       	ldd	r25, Y+20	; 0x14
    81aa:	ad 89       	ldd	r26, Y+21	; 0x15
    81ac:	be 89       	ldd	r27, Y+22	; 0x16
    81ae:	89 2b       	or	r24, r25
    81b0:	8a 2b       	or	r24, r26
    81b2:	8b 2b       	or	r24, r27
    81b4:	99 f4       	brne	.+38     	; 0x81dc <LIN_DRV_TimeoutService+0x60>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    81b6:	81 e0       	ldi	r24, 0x01	; 1
    81b8:	8f 8b       	std	Y+23, r24	; 0x17

                if (linCurrentState->isTxBlocking == false)
    81ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    81bc:	81 11       	cpse	r24, r1
    81be:	40 c0       	rjmp	.+128    	; 0x8240 <LIN_DRV_TimeoutService+0xc4>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    81c0:	ed 85       	ldd	r30, Y+13	; 0x0d
    81c2:	fe 85       	ldd	r31, Y+14	; 0x0e
    81c4:	30 97       	sbiw	r30, 0x00	; 0
    81c6:	21 f0       	breq	.+8      	; 0x81d0 <LIN_DRV_TimeoutService+0x54>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    81c8:	ae 01       	movw	r20, r28
    81ca:	c7 01       	movw	r24, r14
    81cc:	b6 01       	movw	r22, r12
    81ce:	09 95       	icall
                    }

                    /* Clear Tx busy flag */
                    linCurrentState->isTxBusy = false;
    81d0:	18 86       	std	Y+8, r1	; 0x08

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    81d2:	c7 01       	movw	r24, r14
    81d4:	b6 01       	movw	r22, r12
    81d6:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <LIN_DRV_GotoIdleState>
    81da:	32 c0       	rjmp	.+100    	; 0x8240 <LIN_DRV_TimeoutService+0xc4>
                }
            }
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
    81dc:	8b 89       	ldd	r24, Y+19	; 0x13
    81de:	9c 89       	ldd	r25, Y+20	; 0x14
    81e0:	ad 89       	ldd	r26, Y+21	; 0x15
    81e2:	be 89       	ldd	r27, Y+22	; 0x16
    81e4:	01 97       	sbiw	r24, 0x01	; 1
    81e6:	a1 09       	sbc	r26, r1
    81e8:	b1 09       	sbc	r27, r1
    81ea:	8b 8b       	std	Y+19, r24	; 0x13
    81ec:	9c 8b       	std	Y+20, r25	; 0x14
    81ee:	ad 8b       	std	Y+21, r26	; 0x15
    81f0:	be 8b       	std	Y+22, r27	; 0x16
    81f2:	26 c0       	rjmp	.+76     	; 0x8240 <LIN_DRV_TimeoutService+0xc4>

            break;
        /* If the node is RECEIVING DATA */
        case LIN_NODE_STATE_RECV_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    81f4:	8b 89       	ldd	r24, Y+19	; 0x13
    81f6:	9c 89       	ldd	r25, Y+20	; 0x14
    81f8:	ad 89       	ldd	r26, Y+21	; 0x15
    81fa:	be 89       	ldd	r27, Y+22	; 0x16
    81fc:	89 2b       	or	r24, r25
    81fe:	8a 2b       	or	r24, r26
    8200:	8b 2b       	or	r24, r27
    8202:	99 f4       	brne	.+38     	; 0x822a <LIN_DRV_TimeoutService+0xae>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    8204:	81 e0       	ldi	r24, 0x01	; 1
    8206:	8f 8b       	std	Y+23, r24	; 0x17

                /* Check if the reception is non-blocking */
                if (linCurrentState->isRxBlocking == false)
    8208:	8c 85       	ldd	r24, Y+12	; 0x0c
    820a:	81 11       	cpse	r24, r1
    820c:	19 c0       	rjmp	.+50     	; 0x8240 <LIN_DRV_TimeoutService+0xc4>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    820e:	ed 85       	ldd	r30, Y+13	; 0x0d
    8210:	fe 85       	ldd	r31, Y+14	; 0x0e
    8212:	30 97       	sbiw	r30, 0x00	; 0
    8214:	21 f0       	breq	.+8      	; 0x821e <LIN_DRV_TimeoutService+0xa2>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    8216:	ae 01       	movw	r20, r28
    8218:	c7 01       	movw	r24, r14
    821a:	b6 01       	movw	r22, r12
    821c:	09 95       	icall
                    }

                    /* Clear Rx busy flag */
                    linCurrentState->isRxBusy = false;
    821e:	19 86       	std	Y+9, r1	; 0x09

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    8220:	c7 01       	movw	r24, r14
    8222:	b6 01       	movw	r22, r12
    8224:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <LIN_DRV_GotoIdleState>
    8228:	0b c0       	rjmp	.+22     	; 0x8240 <LIN_DRV_TimeoutService+0xc4>
                }
            }
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
    822a:	8b 89       	ldd	r24, Y+19	; 0x13
    822c:	9c 89       	ldd	r25, Y+20	; 0x14
    822e:	ad 89       	ldd	r26, Y+21	; 0x15
    8230:	be 89       	ldd	r27, Y+22	; 0x16
    8232:	01 97       	sbiw	r24, 0x01	; 1
    8234:	a1 09       	sbc	r26, r1
    8236:	b1 09       	sbc	r27, r1
    8238:	8b 8b       	std	Y+19, r24	; 0x13
    823a:	9c 8b       	std	Y+20, r25	; 0x14
    823c:	ad 8b       	std	Y+21, r26	; 0x15
    823e:	be 8b       	std	Y+22, r27	; 0x16
            break;
        default:
            /* The node state is not SENDING nor RECEIVING data */
            break;
    }
}
    8240:	df 91       	pop	r29
    8242:	cf 91       	pop	r28
    8244:	ff 90       	pop	r15
    8246:	ef 90       	pop	r14
    8248:	df 90       	pop	r13
    824a:	cf 90       	pop	r12
    824c:	08 95       	ret

0000824e <LIN_DRV_SetTimeoutCounter>:
{
    /* Assert parameters. */
    //DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    824e:	66 0f       	add	r22, r22
    8250:	77 1f       	adc	r23, r23
    8252:	fb 01       	movw	r30, r22
    8254:	e2 5f       	subi	r30, 0xF2	; 242
    8256:	f8 49       	sbci	r31, 0x98	; 152
    8258:	01 90       	ld	r0, Z+
    825a:	f0 81       	ld	r31, Z
    825c:	e0 2d       	mov	r30, r0

    /* Clear Timeout Counter Flag */
    linCurrentState->timeoutCounterFlag = false;
    825e:	17 8a       	std	Z+23, r1	; 0x17

    /* Set new value for Timeout Counter */
    linCurrentState->timeoutCounter = timeoutValue;
    8260:	23 8b       	std	Z+19, r18	; 0x13
    8262:	34 8b       	std	Z+20, r19	; 0x14
    8264:	45 8b       	std	Z+21, r20	; 0x15
    8266:	56 8b       	std	Z+22, r21	; 0x16
    8268:	08 95       	ret

0000826a <LIN_DRV_GetReceiveStatus>:
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;

    /* Get the current LIN state of this LPUART instance. */
    const lin_state_t * linCurrentState = g_linStatePtr[instance];
    826a:	66 0f       	add	r22, r22
    826c:	77 1f       	adc	r23, r23
    826e:	fb 01       	movw	r30, r22
    8270:	e2 5f       	subi	r30, 0xF2	; 242
    8272:	f8 49       	sbci	r31, 0x98	; 152
    8274:	01 90       	ld	r0, Z+
    8276:	f0 81       	ld	r31, Z
    8278:	e0 2d       	mov	r30, r0

    /* Get the number of bytes that is still needed to receive */
    *bytesRemaining = (uint8_t)(linCurrentState->rxSize - linCurrentState->cntByte);
    827a:	86 81       	ldd	r24, Z+6	; 0x06
    827c:	94 81       	ldd	r25, Z+4	; 0x04
    827e:	89 1b       	sub	r24, r25
    8280:	da 01       	movw	r26, r20
    8282:	8c 93       	st	X, r24

    /* Return status of the on-going reception */
    if ((linCurrentState->currentEventId == LIN_NO_EVENT) && (*bytesRemaining != 0U))
    8284:	91 89       	ldd	r25, Z+17	; 0x11
    8286:	91 11       	cpse	r25, r1
    8288:	08 c0       	rjmp	.+16     	; 0x829a <LIN_DRV_GetReceiveStatus+0x30>
    828a:	88 23       	and	r24, r24
    828c:	49 f0       	breq	.+18     	; 0x82a0 <LIN_DRV_GetReceiveStatus+0x36>
    {
        if (linCurrentState->timeoutCounterFlag == false)
    828e:	87 89       	ldd	r24, Z+23	; 0x17
    8290:	81 11       	cpse	r24, r1
    8292:	09 c0       	rjmp	.+18     	; 0x82a6 <LIN_DRV_GetReceiveStatus+0x3c>
        {
            retVal = STATUS_BUSY;
    8294:	82 e0       	ldi	r24, 0x02	; 2
    8296:	90 e0       	ldi	r25, 0x00	; 0
    8298:	08 95       	ret
status_t LIN_DRV_GetReceiveStatus(uint32_t instance, uint8_t * bytesRemaining)
{
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    829a:	80 e0       	ldi	r24, 0x00	; 0
    829c:	90 e0       	ldi	r25, 0x00	; 0
    829e:	08 95       	ret
    82a0:	80 e0       	ldi	r24, 0x00	; 0
    82a2:	90 e0       	ldi	r25, 0x00	; 0
    82a4:	08 95       	ret
        {
            retVal = STATUS_BUSY;
        }
        else
        {
            retVal = STATUS_TIMEOUT;
    82a6:	83 e0       	ldi	r24, 0x03	; 3
    82a8:	90 e0       	ldi	r25, 0x00	; 0
        }
    }

    return retVal;
    82aa:	08 95       	ret

000082ac <CallbackHandler>:

    /* Call function LIN_DRV_DisableIRQ to disable interrupts */
    retVal = LIN_DRV_DisableIRQ(lin_hardware_instance);

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
}
    82ac:	4f 92       	push	r4
    82ae:	5f 92       	push	r5
    82b0:	6f 92       	push	r6
    82b2:	7f 92       	push	r7
    82b4:	8f 92       	push	r8
    82b6:	9f 92       	push	r9
    82b8:	af 92       	push	r10
    82ba:	bf 92       	push	r11
    82bc:	cf 92       	push	r12
    82be:	df 92       	push	r13
    82c0:	ef 92       	push	r14
    82c2:	ff 92       	push	r15
    82c4:	0f 93       	push	r16
    82c6:	1f 93       	push	r17
    82c8:	cf 93       	push	r28
    82ca:	df 93       	push	r29
    82cc:	1f 92       	push	r1
    82ce:	cd b7       	in	r28, 0x3d	; 61
    82d0:	de b7       	in	r29, 0x3e	; 62
    82d2:	da 01       	movw	r26, r20
    82d4:	1f 96       	adiw	r26, 0x0f	; 15
    82d6:	cc 90       	ld	r12, X
    82d8:	1f 97       	sbiw	r26, 0x0f	; 15
    82da:	19 82       	std	Y+1, r1	; 0x01
    82dc:	fb 01       	movw	r30, r22
    82de:	ec 53       	subi	r30, 0x3C	; 60
    82e0:	fc 49       	sbci	r31, 0x9C	; 156
    82e2:	d0 80       	ld	r13, Z
    82e4:	ed 2c       	mov	r14, r13
    82e6:	f1 2c       	mov	r15, r1
    82e8:	51 96       	adiw	r26, 0x11	; 17
    82ea:	ec 91       	ld	r30, X
    82ec:	4e 2e       	mov	r4, r30
    82ee:	51 2c       	mov	r5, r1
    82f0:	bd e0       	ldi	r27, 0x0D	; 13
    82f2:	4b 16       	cp	r4, r27
    82f4:	51 04       	cpc	r5, r1
    82f6:	08 f0       	brcs	.+2      	; 0x82fa <CallbackHandler+0x4e>
    82f8:	82 c0       	rjmp	.+260    	; 0x83fe <CallbackHandler+0x152>
    82fa:	8a 01       	movw	r16, r20
    82fc:	4b 01       	movw	r8, r22
    82fe:	5c 01       	movw	r10, r24
    8300:	f2 01       	movw	r30, r4
    8302:	e6 57       	subi	r30, 0x76	; 118
    8304:	fb 4d       	sbci	r31, 0xDB	; 219
    8306:	0c 94 03 5f 	jmp	0xbe06	; 0xbe06 <__tablejump2__>
    830a:	4c 2d       	mov	r20, r12
    830c:	60 e0       	ldi	r22, 0x00	; 0
    830e:	8d 2d       	mov	r24, r13
    8310:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    8314:	f7 01       	movw	r30, r14
    8316:	e2 95       	swap	r30
    8318:	f2 95       	swap	r31
    831a:	f0 7f       	andi	r31, 0xF0	; 240
    831c:	fe 27       	eor	r31, r30
    831e:	e0 7f       	andi	r30, 0xF0	; 240
    8320:	fe 27       	eor	r31, r30
    8322:	e5 5e       	subi	r30, 0xE5	; 229
    8324:	f8 49       	sbci	r31, 0x98	; 152
    8326:	26 85       	ldd	r18, Z+14	; 0x0e
    8328:	37 85       	ldd	r19, Z+15	; 0x0f
    832a:	f7 01       	movw	r30, r14
    832c:	ee 0f       	add	r30, r30
    832e:	ff 1f       	adc	r31, r31
    8330:	e5 5d       	subi	r30, 0xD5	; 213
    8332:	f8 49       	sbci	r31, 0x98	; 152
    8334:	80 81       	ld	r24, Z
    8336:	91 81       	ldd	r25, Z+1	; 0x01
    8338:	82 0f       	add	r24, r18
    833a:	93 1f       	adc	r25, r19
    833c:	26 e1       	ldi	r18, 0x16	; 22
    833e:	2e 9d       	mul	r18, r14
    8340:	f0 01       	movw	r30, r0
    8342:	2f 9d       	mul	r18, r15
    8344:	f0 0d       	add	r31, r0
    8346:	11 24       	eor	r1, r1
    8348:	e9 53       	subi	r30, 0x39	; 57
    834a:	f8 49       	sbci	r31, 0x98	; 152
    834c:	81 8b       	std	Z+17, r24	; 0x11
    834e:	92 8b       	std	Z+18, r25	; 0x12
    8350:	56 c0       	rjmp	.+172    	; 0x83fe <CallbackHandler+0x152>
    8352:	4c 2d       	mov	r20, r12
    8354:	63 e0       	ldi	r22, 0x03	; 3
    8356:	8d 2d       	mov	r24, r13
    8358:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    835c:	50 c0       	rjmp	.+160    	; 0x83fe <CallbackHandler+0x152>
    835e:	4c 2d       	mov	r20, r12
    8360:	61 e0       	ldi	r22, 0x01	; 1
    8362:	8d 2d       	mov	r24, r13
    8364:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    8368:	4a c0       	rjmp	.+148    	; 0x83fe <CallbackHandler+0x152>
    836a:	4c 2d       	mov	r20, r12
    836c:	62 e0       	ldi	r22, 0x02	; 2
    836e:	8d 2d       	mov	r24, r13
    8370:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    8374:	44 c0       	rjmp	.+136    	; 0x83fe <CallbackHandler+0x152>
    8376:	4c 2d       	mov	r20, r12
    8378:	65 e0       	ldi	r22, 0x05	; 5
    837a:	8d 2d       	mov	r24, r13
    837c:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    8380:	3e c0       	rjmp	.+124    	; 0x83fe <CallbackHandler+0x152>
    8382:	4c 2d       	mov	r20, r12
    8384:	66 e0       	ldi	r22, 0x06	; 6
    8386:	8d 2d       	mov	r24, r13
    8388:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    838c:	38 c0       	rjmp	.+112    	; 0x83fe <CallbackHandler+0x152>
    838e:	4c 2d       	mov	r20, r12
    8390:	64 e0       	ldi	r22, 0x04	; 4
    8392:	8d 2d       	mov	r24, r13
    8394:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    8398:	32 c0       	rjmp	.+100    	; 0x83fe <CallbackHandler+0x152>
    839a:	f7 01       	movw	r30, r14
    839c:	e2 95       	swap	r30
    839e:	f2 95       	swap	r31
    83a0:	f0 7f       	andi	r31, 0xF0	; 240
    83a2:	fe 27       	eor	r31, r30
    83a4:	e0 7f       	andi	r30, 0xF0	; 240
    83a6:	fe 27       	eor	r31, r30
    83a8:	e5 5e       	subi	r30, 0xE5	; 229
    83aa:	f8 49       	sbci	r31, 0x98	; 152
    83ac:	86 85       	ldd	r24, Z+14	; 0x0e
    83ae:	97 85       	ldd	r25, Z+15	; 0x0f
    83b0:	26 e1       	ldi	r18, 0x16	; 22
    83b2:	2e 9d       	mul	r18, r14
    83b4:	f0 01       	movw	r30, r0
    83b6:	2f 9d       	mul	r18, r15
    83b8:	f0 0d       	add	r31, r0
    83ba:	11 24       	eor	r1, r1
    83bc:	e9 53       	subi	r30, 0x39	; 57
    83be:	f8 49       	sbci	r31, 0x98	; 152
    83c0:	81 8b       	std	Z+17, r24	; 0x11
    83c2:	92 8b       	std	Z+18, r25	; 0x12
    83c4:	1c c0       	rjmp	.+56     	; 0x83fe <CallbackHandler+0x152>
    83c6:	81 e0       	ldi	r24, 0x01	; 1
    83c8:	f7 01       	movw	r30, r14
    83ca:	e6 5e       	subi	r30, 0xE6	; 230
    83cc:	f8 49       	sbci	r31, 0x98	; 152
    83ce:	80 83       	st	Z, r24
    83d0:	16 c0       	rjmp	.+44     	; 0x83fe <CallbackHandler+0x152>
    83d2:	fa 01       	movw	r30, r20
    83d4:	87 89       	ldd	r24, Z+23	; 0x17
    83d6:	88 23       	and	r24, r24
    83d8:	91 f0       	breq	.+36     	; 0x83fe <CallbackHandler+0x152>
    83da:	ae 01       	movw	r20, r28
    83dc:	4f 5f       	subi	r20, 0xFF	; 255
    83de:	5f 4f       	sbci	r21, 0xFF	; 255
    83e0:	c5 01       	movw	r24, r10
    83e2:	b4 01       	movw	r22, r8
    83e4:	0e 94 35 41 	call	0x826a	; 0x826a <LIN_DRV_GetReceiveStatus>
    83e8:	d8 01       	movw	r26, r16
    83ea:	16 96       	adiw	r26, 0x06	; 6
    83ec:	9c 91       	ld	r25, X
    83ee:	89 81       	ldd	r24, Y+1	; 0x01
    83f0:	89 17       	cp	r24, r25
    83f2:	28 f4       	brcc	.+10     	; 0x83fe <CallbackHandler+0x152>
    83f4:	4c 2d       	mov	r20, r12
    83f6:	67 e0       	ldi	r22, 0x07	; 7
    83f8:	8d 2d       	mov	r24, r13
    83fa:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>
    83fe:	8c e1       	ldi	r24, 0x1C	; 28
    8400:	8e 9d       	mul	r24, r14
    8402:	f0 01       	movw	r30, r0
    8404:	8f 9d       	mul	r24, r15
    8406:	f0 0d       	add	r31, r0
    8408:	11 24       	eor	r1, r1
    840a:	e8 5b       	subi	r30, 0xB8	; 184
    840c:	fc 49       	sbci	r31, 0x9C	; 156
    840e:	84 85       	ldd	r24, Z+12	; 0x0c
    8410:	95 85       	ldd	r25, Z+13	; 0x0d
    8412:	26 e1       	ldi	r18, 0x16	; 22
    8414:	2e 9d       	mul	r18, r14
    8416:	f0 01       	movw	r30, r0
    8418:	2f 9d       	mul	r18, r15
    841a:	f0 0d       	add	r31, r0
    841c:	11 24       	eor	r1, r1
    841e:	e9 53       	subi	r30, 0x39	; 57
    8420:	f8 49       	sbci	r31, 0x98	; 152
    8422:	83 8b       	std	Z+19, r24	; 0x13
    8424:	94 8b       	std	Z+20, r25	; 0x14
    8426:	0f 90       	pop	r0
    8428:	df 91       	pop	r29
    842a:	cf 91       	pop	r28
    842c:	1f 91       	pop	r17
    842e:	0f 91       	pop	r16
    8430:	ff 90       	pop	r15
    8432:	ef 90       	pop	r14
    8434:	df 90       	pop	r13
    8436:	cf 90       	pop	r12
    8438:	bf 90       	pop	r11
    843a:	af 90       	pop	r10
    843c:	9f 90       	pop	r9
    843e:	8f 90       	pop	r8
    8440:	7f 90       	pop	r7
    8442:	6f 90       	pop	r6
    8444:	5f 90       	pop	r5
    8446:	4f 90       	pop	r4
    8448:	08 95       	ret

0000844a <lin_process_parity>:
    844a:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <LIN_DRV_ProcessParity>
    844e:	08 95       	ret

00008450 <lin_lld_init>:
    8450:	3f 92       	push	r3
    8452:	4f 92       	push	r4
    8454:	5f 92       	push	r5
    8456:	6f 92       	push	r6
    8458:	7f 92       	push	r7
    845a:	8f 92       	push	r8
    845c:	9f 92       	push	r9
    845e:	af 92       	push	r10
    8460:	bf 92       	push	r11
    8462:	ef 92       	push	r14
    8464:	ff 92       	push	r15
    8466:	0f 93       	push	r16
    8468:	1f 93       	push	r17
    846a:	cf 93       	push	r28
    846c:	df 93       	push	r29
    846e:	cd b7       	in	r28, 0x3d	; 61
    8470:	de b7       	in	r29, 0x3e	; 62
    8472:	26 97       	sbiw	r28, 0x06	; 6
    8474:	cd bf       	out	0x3d, r28	; 61
    8476:	de bf       	out	0x3e, r29	; 62
    8478:	08 2f       	mov	r16, r24
    847a:	10 e0       	ldi	r17, 0x00	; 0
    847c:	98 01       	movw	r18, r16
    847e:	22 0f       	add	r18, r18
    8480:	33 1f       	adc	r19, r19
    8482:	c8 01       	movw	r24, r16
    8484:	88 0f       	add	r24, r24
    8486:	99 1f       	adc	r25, r25
    8488:	88 0f       	add	r24, r24
    848a:	99 1f       	adc	r25, r25
    848c:	88 0f       	add	r24, r24
    848e:	99 1f       	adc	r25, r25
    8490:	82 0f       	add	r24, r18
    8492:	93 1f       	adc	r25, r19
    8494:	80 5f       	subi	r24, 0xF0	; 240
    8496:	98 49       	sbci	r25, 0x98	; 152
    8498:	26 e1       	ldi	r18, 0x16	; 22
    849a:	20 9f       	mul	r18, r16
    849c:	f0 01       	movw	r30, r0
    849e:	21 9f       	mul	r18, r17
    84a0:	f0 0d       	add	r31, r0
    84a2:	11 24       	eor	r1, r1
    84a4:	e9 53       	subi	r30, 0x39	; 57
    84a6:	f8 49       	sbci	r31, 0x98	; 152
    84a8:	82 83       	std	Z+2, r24	; 0x02
    84aa:	93 83       	std	Z+3, r25	; 0x03
    84ac:	f8 01       	movw	r30, r16
    84ae:	ee 0f       	add	r30, r30
    84b0:	ff 1f       	adc	r31, r31
    84b2:	ee 0f       	add	r30, r30
    84b4:	ff 1f       	adc	r31, r31
    84b6:	e0 54       	subi	r30, 0x40	; 64
    84b8:	fc 49       	sbci	r31, 0x9C	; 156
    84ba:	80 80       	ld	r8, Z
    84bc:	91 80       	ldd	r9, Z+1	; 0x01
    84be:	a2 80       	ldd	r10, Z+2	; 0x02
    84c0:	b3 80       	ldd	r11, Z+3	; 0x03
    84c2:	8c e1       	ldi	r24, 0x1C	; 28
    84c4:	80 9f       	mul	r24, r16
    84c6:	f0 01       	movw	r30, r0
    84c8:	81 9f       	mul	r24, r17
    84ca:	f0 0d       	add	r31, r0
    84cc:	11 24       	eor	r1, r1
    84ce:	e8 5b       	subi	r30, 0xB8	; 184
    84d0:	fc 49       	sbci	r31, 0x9C	; 156
    84d2:	e4 88       	ldd	r14, Z+20	; 0x14
    84d4:	f5 88       	ldd	r15, Z+21	; 0x15
    84d6:	f7 01       	movw	r30, r14
    84d8:	85 81       	ldd	r24, Z+5	; 0x05
    84da:	88 23       	and	r24, r24
    84dc:	09 f4       	brne	.+2      	; 0x84e0 <lin_lld_init+0x90>
    84de:	44 c0       	rjmp	.+136    	; 0x8568 <lin_lld_init+0x118>
    84e0:	f8 01       	movw	r30, r16
    84e2:	ee 0f       	add	r30, r30
    84e4:	ff 1f       	adc	r31, r31
    84e6:	e5 5d       	subi	r30, 0xD5	; 213
    84e8:	f8 49       	sbci	r31, 0x98	; 152
    84ea:	84 e1       	ldi	r24, 0x14	; 20
    84ec:	90 e0       	ldi	r25, 0x00	; 0
    84ee:	80 83       	st	Z, r24
    84f0:	91 83       	std	Z+1, r25	; 0x01
    84f2:	ff 24       	eor	r15, r15
    84f4:	f3 94       	inc	r15
    84f6:	34 c0       	rjmp	.+104    	; 0x8560 <lin_lld_init+0x110>
    84f8:	8f 2d       	mov	r24, r15
    84fa:	90 e0       	ldi	r25, 0x00	; 0
    84fc:	9c 01       	movw	r18, r24
    84fe:	21 50       	subi	r18, 0x01	; 1
    8500:	31 09       	sbc	r19, r1
    8502:	29 83       	std	Y+1, r18	; 0x01
    8504:	3a 83       	std	Y+2, r19	; 0x02
    8506:	01 96       	adiw	r24, 0x01	; 1
    8508:	88 0f       	add	r24, r24
    850a:	99 1f       	adc	r25, r25
    850c:	dc 01       	movw	r26, r24
    850e:	aa 0f       	add	r26, r26
    8510:	bb 1f       	adc	r27, r27
    8512:	aa 0f       	add	r26, r26
    8514:	bb 1f       	adc	r27, r27
    8516:	aa 0f       	add	r26, r26
    8518:	bb 1f       	adc	r27, r27
    851a:	a8 1b       	sub	r26, r24
    851c:	b9 0b       	sbc	r27, r25
    851e:	20 e4       	ldi	r18, 0x40	; 64
    8520:	32 e4       	ldi	r19, 0x42	; 66
    8522:	4f e0       	ldi	r20, 0x0F	; 15
    8524:	50 e0       	ldi	r21, 0x00	; 0
    8526:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    852a:	20 e0       	ldi	r18, 0x00	; 0
    852c:	3f e9       	ldi	r19, 0x9F	; 159
    852e:	44 e2       	ldi	r20, 0x24	; 36
    8530:	50 e0       	ldi	r21, 0x00	; 0
    8532:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <__udivmodsi4>
    8536:	2f 5f       	subi	r18, 0xFF	; 255
    8538:	3f 4f       	sbci	r19, 0xFF	; 255
    853a:	c8 01       	movw	r24, r16
    853c:	88 0f       	add	r24, r24
    853e:	99 1f       	adc	r25, r25
    8540:	88 0f       	add	r24, r24
    8542:	99 1f       	adc	r25, r25
    8544:	88 0f       	add	r24, r24
    8546:	99 1f       	adc	r25, r25
    8548:	49 81       	ldd	r20, Y+1	; 0x01
    854a:	5a 81       	ldd	r21, Y+2	; 0x02
    854c:	48 0f       	add	r20, r24
    854e:	59 1f       	adc	r21, r25
    8550:	44 0f       	add	r20, r20
    8552:	55 1f       	adc	r21, r21
    8554:	45 5e       	subi	r20, 0xE5	; 229
    8556:	58 49       	sbci	r21, 0x98	; 152
    8558:	fa 01       	movw	r30, r20
    855a:	20 83       	st	Z, r18
    855c:	31 83       	std	Z+1, r19	; 0x01
    855e:	f3 94       	inc	r15
    8560:	f8 e0       	ldi	r31, 0x08	; 8
    8562:	ff 15       	cp	r31, r15
    8564:	48 f6       	brcc	.-110    	; 0x84f8 <lin_lld_init+0xa8>
    8566:	66 c0       	rjmp	.+204    	; 0x8634 <lin_lld_init+0x1e4>
    8568:	f7 01       	movw	r30, r14
    856a:	20 81       	ld	r18, Z
    856c:	31 81       	ldd	r19, Z+1	; 0x01
    856e:	42 81       	ldd	r20, Z+2	; 0x02
    8570:	53 81       	ldd	r21, Z+3	; 0x03
    8572:	a8 ee       	ldi	r26, 0xE8	; 232
    8574:	b3 e0       	ldi	r27, 0x03	; 3
    8576:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    857a:	9b 01       	movw	r18, r22
    857c:	ac 01       	movw	r20, r24
    857e:	60 e8       	ldi	r22, 0x80	; 128
    8580:	71 e5       	ldi	r23, 0x51	; 81
    8582:	86 ed       	ldi	r24, 0xD6	; 214
    8584:	92 e0       	ldi	r25, 0x02	; 2
    8586:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <__udivmodsi4>
    858a:	2f 5f       	subi	r18, 0xFF	; 255
    858c:	3f 4f       	sbci	r19, 0xFF	; 255
    858e:	f8 01       	movw	r30, r16
    8590:	ee 0f       	add	r30, r30
    8592:	ff 1f       	adc	r31, r31
    8594:	e5 5d       	subi	r30, 0xD5	; 213
    8596:	f8 49       	sbci	r31, 0x98	; 152
    8598:	20 83       	st	Z, r18
    859a:	31 83       	std	Z+1, r19	; 0x01
    859c:	33 24       	eor	r3, r3
    859e:	33 94       	inc	r3
    85a0:	45 c0       	rjmp	.+138    	; 0x862c <lin_lld_init+0x1dc>
    85a2:	83 2d       	mov	r24, r3
    85a4:	90 e0       	ldi	r25, 0x00	; 0
    85a6:	9c 01       	movw	r18, r24
    85a8:	21 50       	subi	r18, 0x01	; 1
    85aa:	31 09       	sbc	r19, r1
    85ac:	2d 83       	std	Y+5, r18	; 0x05
    85ae:	3e 83       	std	Y+6, r19	; 0x06
    85b0:	f7 01       	movw	r30, r14
    85b2:	40 80       	ld	r4, Z
    85b4:	51 80       	ldd	r5, Z+1	; 0x01
    85b6:	62 80       	ldd	r6, Z+2	; 0x02
    85b8:	73 80       	ldd	r7, Z+3	; 0x03
    85ba:	01 96       	adiw	r24, 0x01	; 1
    85bc:	88 0f       	add	r24, r24
    85be:	99 1f       	adc	r25, r25
    85c0:	dc 01       	movw	r26, r24
    85c2:	aa 0f       	add	r26, r26
    85c4:	bb 1f       	adc	r27, r27
    85c6:	aa 0f       	add	r26, r26
    85c8:	bb 1f       	adc	r27, r27
    85ca:	aa 0f       	add	r26, r26
    85cc:	bb 1f       	adc	r27, r27
    85ce:	a8 1b       	sub	r26, r24
    85d0:	b9 0b       	sbc	r27, r25
    85d2:	20 e4       	ldi	r18, 0x40	; 64
    85d4:	32 e4       	ldi	r19, 0x42	; 66
    85d6:	4f e0       	ldi	r20, 0x0F	; 15
    85d8:	50 e0       	ldi	r21, 0x00	; 0
    85da:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    85de:	69 83       	std	Y+1, r22	; 0x01
    85e0:	7a 83       	std	Y+2, r23	; 0x02
    85e2:	8b 83       	std	Y+3, r24	; 0x03
    85e4:	9c 83       	std	Y+4, r25	; 0x04
    85e6:	a8 ee       	ldi	r26, 0xE8	; 232
    85e8:	b3 e0       	ldi	r27, 0x03	; 3
    85ea:	a3 01       	movw	r20, r6
    85ec:	92 01       	movw	r18, r4
    85ee:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    85f2:	9b 01       	movw	r18, r22
    85f4:	ac 01       	movw	r20, r24
    85f6:	69 81       	ldd	r22, Y+1	; 0x01
    85f8:	7a 81       	ldd	r23, Y+2	; 0x02
    85fa:	8b 81       	ldd	r24, Y+3	; 0x03
    85fc:	9c 81       	ldd	r25, Y+4	; 0x04
    85fe:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <__udivmodsi4>
    8602:	2f 5f       	subi	r18, 0xFF	; 255
    8604:	3f 4f       	sbci	r19, 0xFF	; 255
    8606:	c8 01       	movw	r24, r16
    8608:	88 0f       	add	r24, r24
    860a:	99 1f       	adc	r25, r25
    860c:	88 0f       	add	r24, r24
    860e:	99 1f       	adc	r25, r25
    8610:	88 0f       	add	r24, r24
    8612:	99 1f       	adc	r25, r25
    8614:	4d 81       	ldd	r20, Y+5	; 0x05
    8616:	5e 81       	ldd	r21, Y+6	; 0x06
    8618:	48 0f       	add	r20, r24
    861a:	59 1f       	adc	r21, r25
    861c:	44 0f       	add	r20, r20
    861e:	55 1f       	adc	r21, r21
    8620:	45 5e       	subi	r20, 0xE5	; 229
    8622:	58 49       	sbci	r21, 0x98	; 152
    8624:	fa 01       	movw	r30, r20
    8626:	20 83       	st	Z, r18
    8628:	31 83       	std	Z+1, r19	; 0x01
    862a:	33 94       	inc	r3
    862c:	f8 e0       	ldi	r31, 0x08	; 8
    862e:	f3 15       	cp	r31, r3
    8630:	08 f0       	brcs	.+2      	; 0x8634 <lin_lld_init+0x1e4>
    8632:	b7 cf       	rjmp	.-146    	; 0x85a2 <lin_lld_init+0x152>
    8634:	f8 01       	movw	r30, r16
    8636:	e2 95       	swap	r30
    8638:	f2 95       	swap	r31
    863a:	f0 7f       	andi	r31, 0xF0	; 240
    863c:	fe 27       	eor	r31, r30
    863e:	e0 7f       	andi	r30, 0xF0	; 240
    8640:	fe 27       	eor	r31, r30
    8642:	e5 5e       	subi	r30, 0xE5	; 229
    8644:	f8 49       	sbci	r31, 0x98	; 152
    8646:	86 85       	ldd	r24, Z+14	; 0x0e
    8648:	97 85       	ldd	r25, Z+15	; 0x0f
    864a:	26 e1       	ldi	r18, 0x16	; 22
    864c:	20 9f       	mul	r18, r16
    864e:	d0 01       	movw	r26, r0
    8650:	21 9f       	mul	r18, r17
    8652:	b0 0d       	add	r27, r0
    8654:	11 24       	eor	r1, r1
    8656:	a9 53       	subi	r26, 0x39	; 57
    8658:	b8 49       	sbci	r27, 0x98	; 152
    865a:	51 96       	adiw	r26, 0x11	; 17
    865c:	8d 93       	st	X+, r24
    865e:	9c 93       	st	X, r25
    8660:	52 97       	sbiw	r26, 0x12	; 18
    8662:	8c e1       	ldi	r24, 0x1C	; 28
    8664:	80 9f       	mul	r24, r16
    8666:	f0 01       	movw	r30, r0
    8668:	81 9f       	mul	r24, r17
    866a:	f0 0d       	add	r31, r0
    866c:	11 24       	eor	r1, r1
    866e:	e8 5b       	subi	r30, 0xB8	; 184
    8670:	fc 49       	sbci	r31, 0x9C	; 156
    8672:	84 85       	ldd	r24, Z+12	; 0x0c
    8674:	95 85       	ldd	r25, Z+13	; 0x0d
    8676:	53 96       	adiw	r26, 0x13	; 19
    8678:	8d 93       	st	X+, r24
    867a:	9c 93       	st	X, r25
    867c:	54 97       	sbiw	r26, 0x14	; 20
    867e:	8e e1       	ldi	r24, 0x1E	; 30
    8680:	80 9f       	mul	r24, r16
    8682:	90 01       	movw	r18, r0
    8684:	81 9f       	mul	r24, r17
    8686:	30 0d       	add	r19, r0
    8688:	11 24       	eor	r1, r1
    868a:	23 5d       	subi	r18, 0xD3	; 211
    868c:	38 49       	sbci	r19, 0x98	; 152
    868e:	44 89       	ldd	r20, Z+20	; 0x14
    8690:	55 89       	ldd	r21, Z+21	; 0x15
    8692:	c5 01       	movw	r24, r10
    8694:	b4 01       	movw	r22, r8
    8696:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <LIN_DRV_Init>
    869a:	89 83       	std	Y+1, r24	; 0x01
    869c:	9a 83       	std	Y+2, r25	; 0x02
    869e:	89 2b       	or	r24, r25
    86a0:	51 f4       	brne	.+20     	; 0x86b6 <lin_lld_init+0x266>
    86a2:	46 e5       	ldi	r20, 0x56	; 86
    86a4:	51 e4       	ldi	r21, 0x41	; 65
    86a6:	c5 01       	movw	r24, r10
    86a8:	b4 01       	movw	r22, r8
    86aa:	0e 94 ba 3f 	call	0x7f74	; 0x7f74 <LIN_DRV_InstallCallback>
    86ae:	f8 01       	movw	r30, r16
    86b0:	e6 5e       	subi	r30, 0xE6	; 230
    86b2:	f8 49       	sbci	r31, 0x98	; 152
    86b4:	10 82       	st	Z, r1
    86b6:	81 e0       	ldi	r24, 0x01	; 1
    86b8:	29 81       	ldd	r18, Y+1	; 0x01
    86ba:	3a 81       	ldd	r19, Y+2	; 0x02
    86bc:	23 2b       	or	r18, r19
    86be:	09 f4       	brne	.+2      	; 0x86c2 <lin_lld_init+0x272>
    86c0:	80 e0       	ldi	r24, 0x00	; 0
    86c2:	26 96       	adiw	r28, 0x06	; 6
    86c4:	cd bf       	out	0x3d, r28	; 61
    86c6:	de bf       	out	0x3e, r29	; 62
    86c8:	df 91       	pop	r29
    86ca:	cf 91       	pop	r28
    86cc:	1f 91       	pop	r17
    86ce:	0f 91       	pop	r16
    86d0:	ff 90       	pop	r15
    86d2:	ef 90       	pop	r14
    86d4:	bf 90       	pop	r11
    86d6:	af 90       	pop	r10
    86d8:	9f 90       	pop	r9
    86da:	8f 90       	pop	r8
    86dc:	7f 90       	pop	r7
    86de:	6f 90       	pop	r6
    86e0:	5f 90       	pop	r5
    86e2:	4f 90       	pop	r4
    86e4:	3f 90       	pop	r3
    86e6:	08 95       	ret

000086e8 <lin_lld_ignore_response>:

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    86e8:	e8 2f       	mov	r30, r24
    86ea:	f0 e0       	ldi	r31, 0x00	; 0
    86ec:	ee 0f       	add	r30, r30
    86ee:	ff 1f       	adc	r31, r31
    86f0:	ee 0f       	add	r30, r30
    86f2:	ff 1f       	adc	r31, r31
    86f4:	e0 54       	subi	r30, 0x40	; 64
    86f6:	fc 49       	sbci	r31, 0x9C	; 156
    86f8:	60 81       	ld	r22, Z
    86fa:	71 81       	ldd	r23, Z+1	; 0x01
    86fc:	82 81       	ldd	r24, Z+2	; 0x02
    86fe:	93 81       	ldd	r25, Z+3	; 0x03

    /* Abort frame data transferring */
    retVal = LIN_DRV_AbortTransferData(lin_hardware_instance);
    8700:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <LIN_DRV_AbortTransferData>

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    8704:	89 2b       	or	r24, r25
    8706:	11 f4       	brne	.+4      	; 0x870c <lin_lld_ignore_response+0x24>
    8708:	80 e0       	ldi	r24, 0x00	; 0
    870a:	08 95       	ret
    870c:	8f ef       	ldi	r24, 0xFF	; 255
}
    870e:	08 95       	ret

00008710 <lin_lld_set_low_power_mode>:

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    8710:	e8 2f       	mov	r30, r24
    8712:	f0 e0       	ldi	r31, 0x00	; 0
    8714:	ee 0f       	add	r30, r30
    8716:	ff 1f       	adc	r31, r31
    8718:	ee 0f       	add	r30, r30
    871a:	ff 1f       	adc	r31, r31
    871c:	e0 54       	subi	r30, 0x40	; 64
    871e:	fc 49       	sbci	r31, 0x9C	; 156
    8720:	60 81       	ld	r22, Z
    8722:	71 81       	ldd	r23, Z+1	; 0x01
    8724:	82 81       	ldd	r24, Z+2	; 0x02
    8726:	93 81       	ldd	r25, Z+3	; 0x03

    /* Put current node to sleep mode */
    retVal = LIN_DRV_GoToSleepMode(lin_hardware_instance);
    8728:	0e 94 99 3f 	call	0x7f32	; 0x7f32 <LIN_DRV_GoToSleepMode>

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    872c:	89 2b       	or	r24, r25
    872e:	11 f4       	brne	.+4      	; 0x8734 <lin_lld_set_low_power_mode+0x24>
    8730:	80 e0       	ldi	r24, 0x00	; 0
    8732:	08 95       	ret
    8734:	8f ef       	ldi	r24, 0xFF	; 255
}
    8736:	08 95       	ret

00008738 <lin_lld_set_response>:
 *
 * Implements    : lin_lld_set_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_set_response(l_ifc_handle iii,
                          l_u8 response_length)
{
    8738:	cf 92       	push	r12
    873a:	df 92       	push	r13
    873c:	ef 92       	push	r14
    873e:	ff 92       	push	r15
    8740:	0f 93       	push	r16
    8742:	1f 93       	push	r17
    8744:	cf 93       	push	r28
    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    const l_u8 * buffer;

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    8746:	9f ef       	ldi	r25, 0xFF	; 255
    8748:	96 0f       	add	r25, r22
    874a:	98 30       	cpi	r25, 0x08	; 8
    874c:	b0 f5       	brcc	.+108    	; 0x87ba <lin_lld_set_response+0x82>
    874e:	c6 2f       	mov	r28, r22
    {
        buffer = g_lin_protocol_state_array[iii].response_buffer_ptr;
    8750:	90 e0       	ldi	r25, 0x00	; 0
    8752:	26 e1       	ldi	r18, 0x16	; 22
    8754:	28 9f       	mul	r18, r24
    8756:	f0 01       	movw	r30, r0
    8758:	29 9f       	mul	r18, r25
    875a:	f0 0d       	add	r31, r0
    875c:	11 24       	eor	r1, r1
    875e:	e9 53       	subi	r30, 0x39	; 57
    8760:	f8 49       	sbci	r31, 0x98	; 152
    8762:	02 81       	ldd	r16, Z+2	; 0x02
    8764:	13 81       	ldd	r17, Z+3	; 0x03
        /* Get the LIN hardware instance number */
        lin_hardware_instance = g_lin_virtual_ifc[iii];
    8766:	dc 01       	movw	r26, r24
    8768:	aa 0f       	add	r26, r26
    876a:	bb 1f       	adc	r27, r27
    876c:	aa 0f       	add	r26, r26
    876e:	bb 1f       	adc	r27, r27
    8770:	a0 54       	subi	r26, 0x40	; 64
    8772:	bc 49       	sbci	r27, 0x9C	; 156
    8774:	cd 90       	ld	r12, X+
    8776:	dd 90       	ld	r13, X+
    8778:	ed 90       	ld	r14, X+
    877a:	fc 90       	ld	r15, X

        /* Put response length into buffer */
        g_lin_protocol_state_array[iii].response_length = response_length;
    877c:	64 83       	std	Z+4, r22	; 0x04

        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    877e:	e6 2f       	mov	r30, r22
    8780:	f0 e0       	ldi	r31, 0x00	; 0
    8782:	31 97       	sbiw	r30, 0x01	; 1
    8784:	88 0f       	add	r24, r24
    8786:	99 1f       	adc	r25, r25
    8788:	88 0f       	add	r24, r24
    878a:	99 1f       	adc	r25, r25
    878c:	88 0f       	add	r24, r24
    878e:	99 1f       	adc	r25, r25
    8790:	e8 0f       	add	r30, r24
    8792:	f9 1f       	adc	r31, r25
    8794:	ee 0f       	add	r30, r30
    8796:	ff 1f       	adc	r31, r31
    8798:	e5 5e       	subi	r30, 0xE5	; 229
    879a:	f8 49       	sbci	r31, 0x98	; 152
    879c:	20 81       	ld	r18, Z
    879e:	31 81       	ldd	r19, Z+1	; 0x01
    87a0:	40 e0       	ldi	r20, 0x00	; 0
    87a2:	50 e0       	ldi	r21, 0x00	; 0
    87a4:	c7 01       	movw	r24, r14
    87a6:	b6 01       	movw	r22, r12
    87a8:	0e 94 27 41 	call	0x824e	; 0x824e <LIN_DRV_SetTimeoutCounter>

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    87ac:	2c 2f       	mov	r18, r28
    87ae:	a8 01       	movw	r20, r16
    87b0:	c7 01       	movw	r24, r14
    87b2:	b6 01       	movw	r22, r12
    87b4:	0e 94 49 40 	call	0x8092	; 0x8092 <LIN_DRV_SendFrameData>
    87b8:	02 c0       	rjmp	.+4      	; 0x87be <lin_lld_set_response+0x86>
                          l_u8 response_length)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    87ba:	81 e0       	ldi	r24, 0x01	; 1
    87bc:	90 e0       	ldi	r25, 0x00	; 0

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    87be:	89 2b       	or	r24, r25
    87c0:	11 f4       	brne	.+4      	; 0x87c6 <lin_lld_set_response+0x8e>
    87c2:	80 e0       	ldi	r24, 0x00	; 0
    87c4:	01 c0       	rjmp	.+2      	; 0x87c8 <lin_lld_set_response+0x90>
    87c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    87c8:	cf 91       	pop	r28
    87ca:	1f 91       	pop	r17
    87cc:	0f 91       	pop	r16
    87ce:	ff 90       	pop	r15
    87d0:	ef 90       	pop	r14
    87d2:	df 90       	pop	r13
    87d4:	cf 90       	pop	r12
    87d6:	08 95       	ret

000087d8 <lin_lld_rx_response>:
 *
 * Implements    : lin_lld_rx_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_rx_response(l_ifc_handle iii,
                         l_u8 response_length)
{
    87d8:	cf 92       	push	r12
    87da:	df 92       	push	r13
    87dc:	ef 92       	push	r14
    87de:	ff 92       	push	r15
    87e0:	1f 93       	push	r17
    87e2:	cf 93       	push	r28
    87e4:	df 93       	push	r29

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    87e6:	c8 2f       	mov	r28, r24
    87e8:	d0 e0       	ldi	r29, 0x00	; 0
    87ea:	fe 01       	movw	r30, r28
    87ec:	ee 0f       	add	r30, r30
    87ee:	ff 1f       	adc	r31, r31
    87f0:	ee 0f       	add	r30, r30
    87f2:	ff 1f       	adc	r31, r31
    87f4:	e0 54       	subi	r30, 0x40	; 64
    87f6:	fc 49       	sbci	r31, 0x9C	; 156
    87f8:	c0 80       	ld	r12, Z
    87fa:	d1 80       	ldd	r13, Z+1	; 0x01
    87fc:	e2 80       	ldd	r14, Z+2	; 0x02
    87fe:	f3 80       	ldd	r15, Z+3	; 0x03

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    8800:	8f ef       	ldi	r24, 0xFF	; 255
    8802:	86 0f       	add	r24, r22
    8804:	88 30       	cpi	r24, 0x08	; 8
    8806:	48 f5       	brcc	.+82     	; 0x885a <lin_lld_rx_response+0x82>
    8808:	16 2f       	mov	r17, r22
    {
        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    880a:	e6 2f       	mov	r30, r22
    880c:	f0 e0       	ldi	r31, 0x00	; 0
    880e:	31 97       	sbiw	r30, 0x01	; 1
    8810:	ce 01       	movw	r24, r28
    8812:	88 0f       	add	r24, r24
    8814:	99 1f       	adc	r25, r25
    8816:	88 0f       	add	r24, r24
    8818:	99 1f       	adc	r25, r25
    881a:	88 0f       	add	r24, r24
    881c:	99 1f       	adc	r25, r25
    881e:	e8 0f       	add	r30, r24
    8820:	f9 1f       	adc	r31, r25
    8822:	ee 0f       	add	r30, r30
    8824:	ff 1f       	adc	r31, r31
    8826:	e5 5e       	subi	r30, 0xE5	; 229
    8828:	f8 49       	sbci	r31, 0x98	; 152
    882a:	20 81       	ld	r18, Z
    882c:	31 81       	ldd	r19, Z+1	; 0x01
    882e:	40 e0       	ldi	r20, 0x00	; 0
    8830:	50 e0       	ldi	r21, 0x00	; 0
    8832:	c7 01       	movw	r24, r14
    8834:	b6 01       	movw	r22, r12
    8836:	0e 94 27 41 	call	0x824e	; 0x824e <LIN_DRV_SetTimeoutCounter>

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    883a:	86 e1       	ldi	r24, 0x16	; 22
    883c:	8c 9f       	mul	r24, r28
    883e:	f0 01       	movw	r30, r0
    8840:	8d 9f       	mul	r24, r29
    8842:	f0 0d       	add	r31, r0
    8844:	11 24       	eor	r1, r1
    8846:	e9 53       	subi	r30, 0x39	; 57
    8848:	f8 49       	sbci	r31, 0x98	; 152
    884a:	42 81       	ldd	r20, Z+2	; 0x02
    884c:	53 81       	ldd	r21, Z+3	; 0x03
    884e:	21 2f       	mov	r18, r17
    8850:	c7 01       	movw	r24, r14
    8852:	b6 01       	movw	r22, r12
    8854:	0e 94 94 40 	call	0x8128	; 0x8128 <LIN_DRV_ReceiveFrameData>
    8858:	02 c0       	rjmp	.+4      	; 0x885e <lin_lld_rx_response+0x86>
                         l_u8 response_length)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    885a:	81 e0       	ldi	r24, 0x01	; 1
    885c:	90 e0       	ldi	r25, 0x00	; 0

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    885e:	89 2b       	or	r24, r25
    8860:	11 f4       	brne	.+4      	; 0x8866 <lin_lld_rx_response+0x8e>
    8862:	80 e0       	ldi	r24, 0x00	; 0
    8864:	01 c0       	rjmp	.+2      	; 0x8868 <lin_lld_rx_response+0x90>
    8866:	8f ef       	ldi	r24, 0xFF	; 255
}
    8868:	df 91       	pop	r29
    886a:	cf 91       	pop	r28
    886c:	1f 91       	pop	r17
    886e:	ff 90       	pop	r15
    8870:	ef 90       	pop	r14
    8872:	df 90       	pop	r13
    8874:	cf 90       	pop	r12
    8876:	08 95       	ret

00008878 <lin_lld_timeout_service>:
 * Description   : This is a part of Timer Interrupt Handler.
 *
 * Implements    : lin_lld_timeout_service_Activity
 *END**************************************************************************/
void lin_lld_timeout_service(l_ifc_handle iii)
{
    8878:	4f 92       	push	r4
    887a:	5f 92       	push	r5
    887c:	6f 92       	push	r6
    887e:	7f 92       	push	r7
    8880:	bf 92       	push	r11
    8882:	cf 92       	push	r12
    8884:	df 92       	push	r13
    8886:	ef 92       	push	r14
    8888:	ff 92       	push	r15
    888a:	0f 93       	push	r16
    888c:	1f 93       	push	r17
    888e:	cf 93       	push	r28
    8890:	df 93       	push	r29
    8892:	cd b7       	in	r28, 0x3d	; 61
    8894:	de b7       	in	r29, 0x3e	; 62
    8896:	a2 97       	sbiw	r28, 0x22	; 34
    8898:	cd bf       	out	0x3d, r28	; 61
    889a:	de bf       	out	0x3e, r29	; 62
    889c:	18 2f       	mov	r17, r24
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);
    l_u32 lin_hardware_instance = g_lin_virtual_ifc[iii];
    889e:	e8 2e       	mov	r14, r24
    88a0:	f1 2c       	mov	r15, r1
    88a2:	f7 01       	movw	r30, r14
    88a4:	ee 0f       	add	r30, r30
    88a6:	ff 1f       	adc	r31, r31
    88a8:	ee 0f       	add	r30, r30
    88aa:	ff 1f       	adc	r31, r31
    88ac:	e0 54       	subi	r30, 0x40	; 64
    88ae:	fc 49       	sbci	r31, 0x9C	; 156
    88b0:	40 80       	ld	r4, Z
    88b2:	51 80       	ldd	r5, Z+1	; 0x01
    88b4:	62 80       	ldd	r6, Z+2	; 0x02
    88b6:	73 80       	ldd	r7, Z+3	; 0x03
    lin_state_t linState = s_lin_state_array[iii];
    88b8:	8e e1       	ldi	r24, 0x1E	; 30
    88ba:	8e 9d       	mul	r24, r14
    88bc:	f0 01       	movw	r30, r0
    88be:	8f 9d       	mul	r24, r15
    88c0:	f0 0d       	add	r31, r0
    88c2:	11 24       	eor	r1, r1
    88c4:	e3 5d       	subi	r30, 0xD3	; 211
    88c6:	f8 49       	sbci	r31, 0x98	; 152
    88c8:	de 01       	movw	r26, r28
    88ca:	11 96       	adiw	r26, 0x01	; 1
    88cc:	01 90       	ld	r0, Z+
    88ce:	0d 92       	st	X+, r0
    88d0:	8a 95       	dec	r24
    88d2:	e1 f7       	brne	.-8      	; 0x88cc <lin_lld_timeout_service+0x54>
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    l_u8 index;

    LIN_DRV_TimeoutService(lin_hardware_instance);
    88d4:	c3 01       	movw	r24, r6
    88d6:	b2 01       	movw	r22, r4
    88d8:	0e 94 be 40 	call	0x817c	; 0x817c <LIN_DRV_TimeoutService>
#if (SUPPORT_PROTOCOL_21 == 1U)
    /* Callback to transport layer to handle N_As and N_Cr timeout for LIN 2.1 and above*/
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
    88dc:	40 e0       	ldi	r20, 0x00	; 0
    88de:	65 e0       	ldi	r22, 0x05	; 5
    88e0:	81 2f       	mov	r24, r17
    88e2:	0e 94 80 4c 	call	0x9900	; 0x9900 <lin_tl_callback_handler>
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    88e6:	8b 89       	ldd	r24, Y+19	; 0x13
    88e8:	87 30       	cpi	r24, 0x07	; 7
    88ea:	30 f4       	brcc	.+12     	; 0x88f8 <lin_lld_timeout_service+0x80>
    88ec:	83 30       	cpi	r24, 0x03	; 3
    88ee:	08 f0       	brcs	.+2      	; 0x88f2 <lin_lld_timeout_service+0x7a>
    88f0:	a6 c0       	rjmp	.+332    	; 0x8a3e <lin_lld_timeout_service+0x1c6>
    88f2:	82 30       	cpi	r24, 0x02	; 2
    88f4:	29 f0       	breq	.+10     	; 0x8900 <lin_lld_timeout_service+0x88>
    88f6:	f9 c0       	rjmp	.+498    	; 0x8aea <lin_lld_timeout_service+0x272>
    88f8:	89 30       	cpi	r24, 0x09	; 9
    88fa:	09 f4       	brne	.+2      	; 0x88fe <lin_lld_timeout_service+0x86>
    88fc:	cc c0       	rjmp	.+408    	; 0x8a96 <lin_lld_timeout_service+0x21e>
    88fe:	f5 c0       	rjmp	.+490    	; 0x8aea <lin_lld_timeout_service+0x272>
    {
        case LIN_NODE_STATE_IDLE:
            if (!(prot_state_ptr->idle_timeout_cnt-- > 0U))
    8900:	86 e1       	ldi	r24, 0x16	; 22
    8902:	8e 9d       	mul	r24, r14
    8904:	f0 01       	movw	r30, r0
    8906:	8f 9d       	mul	r24, r15
    8908:	f0 0d       	add	r31, r0
    890a:	11 24       	eor	r1, r1
    890c:	e9 53       	subi	r30, 0x39	; 57
    890e:	f8 49       	sbci	r31, 0x98	; 152
    8910:	83 89       	ldd	r24, Z+19	; 0x13
    8912:	94 89       	ldd	r25, Z+20	; 0x14
    8914:	9c 01       	movw	r18, r24
    8916:	21 50       	subi	r18, 0x01	; 1
    8918:	31 09       	sbc	r19, r1
    891a:	23 8b       	std	Z+19, r18	; 0x13
    891c:	34 8b       	std	Z+20, r19	; 0x14
    891e:	89 2b       	or	r24, r25
    8920:	e9 f4       	brne	.+58     	; 0x895c <lin_lld_timeout_service+0xe4>
            {
                /* Callback to handle timeout */
                CALLBACK_HANDLER(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT, 0xFFU);
    8922:	4f ef       	ldi	r20, 0xFF	; 255
    8924:	68 e0       	ldi	r22, 0x08	; 8
    8926:	81 2f       	mov	r24, r17
    8928:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <lin_pid_resp_callback_handler>

                /* Put current node to Idle state, reset idle timeout count */
                prot_state_ptr->idle_timeout_cnt = g_lin_protocol_user_cfg_array[iii].max_idle_timeout_cnt;
    892c:	8c e1       	ldi	r24, 0x1C	; 28
    892e:	8e 9d       	mul	r24, r14
    8930:	f0 01       	movw	r30, r0
    8932:	8f 9d       	mul	r24, r15
    8934:	f0 0d       	add	r31, r0
    8936:	11 24       	eor	r1, r1
    8938:	e8 5b       	subi	r30, 0xB8	; 184
    893a:	fc 49       	sbci	r31, 0x9C	; 156
    893c:	84 85       	ldd	r24, Z+12	; 0x0c
    893e:	95 85       	ldd	r25, Z+13	; 0x0d
    8940:	26 e1       	ldi	r18, 0x16	; 22
    8942:	2e 9d       	mul	r18, r14
    8944:	f0 01       	movw	r30, r0
    8946:	2f 9d       	mul	r18, r15
    8948:	f0 0d       	add	r31, r0
    894a:	11 24       	eor	r1, r1
    894c:	e9 53       	subi	r30, 0x39	; 57
    894e:	f8 49       	sbci	r31, 0x98	; 152
    8950:	83 8b       	std	Z+19, r24	; 0x13
    8952:	94 8b       	std	Z+20, r25	; 0x14

                /* Put current node to sleep mode */
                (void)LIN_DRV_GoToSleepMode(lin_hardware_instance);
    8954:	c3 01       	movw	r24, r6
    8956:	b2 01       	movw	r22, r4
    8958:	0e 94 99 3f 	call	0x7f32	; 0x7f32 <LIN_DRV_GoToSleepMode>
            }
            /* Re-calculate s_lin_max_header_timeout and s_lin_max_frame_res_timeout_val */
            if (s_baudrate_adjusted_flg[iii])
    895c:	f7 01       	movw	r30, r14
    895e:	e6 5e       	subi	r30, 0xE6	; 230
    8960:	f8 49       	sbci	r31, 0x98	; 152
    8962:	80 81       	ld	r24, Z
    8964:	88 23       	and	r24, r24
    8966:	09 f4       	brne	.+2      	; 0x896a <lin_lld_timeout_service+0xf2>
    8968:	c0 c0       	rjmp	.+384    	; 0x8aea <lin_lld_timeout_service+0x272>
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
    896a:	f7 01       	movw	r30, r14
    896c:	e6 5e       	subi	r30, 0xE6	; 230
    896e:	f8 49       	sbci	r31, 0x98	; 152
    8970:	10 82       	st	Z, r1
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
    8972:	c0 90 5c 63 	lds	r12, 0x635C	; 0x80635c <g_lin_protocol_user_cfg_array+0x14>
    8976:	d0 90 5d 63 	lds	r13, 0x635D	; 0x80635d <g_lin_protocol_user_cfg_array+0x15>
    897a:	f6 01       	movw	r30, r12
    897c:	20 81       	ld	r18, Z
    897e:	31 81       	ldd	r19, Z+1	; 0x01
    8980:	42 81       	ldd	r20, Z+2	; 0x02
    8982:	53 81       	ldd	r21, Z+3	; 0x03
 *
 * Implements : lin_calc_max_header_timeout_cnt_Activity
 */
static inline l_u16 lin_calc_max_header_timeout_cnt(l_u32 baudRate)
{
    return (l_u16)((14U * 34U * 100000U / (TIME_OUT_UNIT_US * baudRate)) + 1U);
    8984:	a8 ee       	ldi	r26, 0xE8	; 232
    8986:	b3 e0       	ldi	r27, 0x03	; 3
    8988:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    898c:	9b 01       	movw	r18, r22
    898e:	ac 01       	movw	r20, r24
    8990:	60 e8       	ldi	r22, 0x80	; 128
    8992:	71 e5       	ldi	r23, 0x51	; 81
    8994:	86 ed       	ldi	r24, 0xD6	; 214
    8996:	92 e0       	ldi	r25, 0x02	; 2
    8998:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <__udivmodsi4>
    899c:	2f 5f       	subi	r18, 0xFF	; 255
    899e:	3f 4f       	sbci	r19, 0xFF	; 255
    89a0:	f7 01       	movw	r30, r14
    89a2:	ee 0f       	add	r30, r30
    89a4:	ff 1f       	adc	r31, r31
    89a6:	e5 5d       	subi	r30, 0xD5	; 213
    89a8:	f8 49       	sbci	r31, 0x98	; 152
    89aa:	20 83       	st	Z, r18
    89ac:	31 83       	std	Z+1, r19	; 0x01
                for (index = 1U; index < 9U; index++)
    89ae:	bb 24       	eor	r11, r11
    89b0:	b3 94       	inc	r11
    89b2:	40 c0       	rjmp	.+128    	; 0x8a34 <lin_lld_timeout_service+0x1bc>
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
    89b4:	8b 2d       	mov	r24, r11
    89b6:	90 e0       	ldi	r25, 0x00	; 0
    89b8:	8c 01       	movw	r16, r24
    89ba:	01 50       	subi	r16, 0x01	; 1
    89bc:	11 09       	sbc	r17, r1
    89be:	f6 01       	movw	r30, r12
    89c0:	40 80       	ld	r4, Z
    89c2:	51 80       	ldd	r5, Z+1	; 0x01
    89c4:	62 80       	ldd	r6, Z+2	; 0x02
    89c6:	73 80       	ldd	r7, Z+3	; 0x03
 * Implements : lin_calc_max_res_timeout_cnt_Activity
 */
static inline l_u16 lin_calc_max_res_timeout_cnt(l_u32 baudRate,
                                                 l_u8 size)
{
    l_u16 a = (l_u16)(14U * (1U + (l_u16)size));
    89c8:	01 96       	adiw	r24, 0x01	; 1
    89ca:	88 0f       	add	r24, r24
    89cc:	99 1f       	adc	r25, r25
    89ce:	dc 01       	movw	r26, r24
    89d0:	aa 0f       	add	r26, r26
    89d2:	bb 1f       	adc	r27, r27
    89d4:	aa 0f       	add	r26, r26
    89d6:	bb 1f       	adc	r27, r27
    89d8:	aa 0f       	add	r26, r26
    89da:	bb 1f       	adc	r27, r27
    89dc:	a8 1b       	sub	r26, r24
    89de:	b9 0b       	sbc	r27, r25

    return (l_u16)((a * 1000000U / (TIME_OUT_UNIT_US * baudRate)) + 1U);
    89e0:	20 e4       	ldi	r18, 0x40	; 64
    89e2:	32 e4       	ldi	r19, 0x42	; 66
    89e4:	4f e0       	ldi	r20, 0x0F	; 15
    89e6:	50 e0       	ldi	r21, 0x00	; 0
    89e8:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    89ec:	6f 8f       	std	Y+31, r22	; 0x1f
    89ee:	78 a3       	std	Y+32, r23	; 0x20
    89f0:	89 a3       	std	Y+33, r24	; 0x21
    89f2:	9a a3       	std	Y+34, r25	; 0x22
    89f4:	a8 ee       	ldi	r26, 0xE8	; 232
    89f6:	b3 e0       	ldi	r27, 0x03	; 3
    89f8:	a3 01       	movw	r20, r6
    89fa:	92 01       	movw	r18, r4
    89fc:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    8a00:	9b 01       	movw	r18, r22
    8a02:	ac 01       	movw	r20, r24
    8a04:	6f 8d       	ldd	r22, Y+31	; 0x1f
    8a06:	78 a1       	ldd	r23, Y+32	; 0x20
    8a08:	89 a1       	ldd	r24, Y+33	; 0x21
    8a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    8a0c:	0e 94 e1 5e 	call	0xbdc2	; 0xbdc2 <__udivmodsi4>
    8a10:	2f 5f       	subi	r18, 0xFF	; 255
    8a12:	3f 4f       	sbci	r19, 0xFF	; 255
    8a14:	f7 01       	movw	r30, r14
    8a16:	ee 0f       	add	r30, r30
    8a18:	ff 1f       	adc	r31, r31
    8a1a:	ee 0f       	add	r30, r30
    8a1c:	ff 1f       	adc	r31, r31
    8a1e:	ee 0f       	add	r30, r30
    8a20:	ff 1f       	adc	r31, r31
    8a22:	e0 0f       	add	r30, r16
    8a24:	f1 1f       	adc	r31, r17
    8a26:	ee 0f       	add	r30, r30
    8a28:	ff 1f       	adc	r31, r31
    8a2a:	e5 5e       	subi	r30, 0xE5	; 229
    8a2c:	f8 49       	sbci	r31, 0x98	; 152
    8a2e:	20 83       	st	Z, r18
    8a30:	31 83       	std	Z+1, r19	; 0x01
            if (s_baudrate_adjusted_flg[iii])
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
                for (index = 1U; index < 9U; index++)
    8a32:	b3 94       	inc	r11
    8a34:	f8 e0       	ldi	r31, 0x08	; 8
    8a36:	fb 15       	cp	r31, r11
    8a38:	08 f0       	brcs	.+2      	; 0x8a3c <lin_lld_timeout_service+0x1c4>
    8a3a:	bc cf       	rjmp	.-136    	; 0x89b4 <lin_lld_timeout_service+0x13c>
    8a3c:	56 c0       	rjmp	.+172    	; 0x8aea <lin_lld_timeout_service+0x272>
        case LIN_NODE_STATE_SEND_BREAK_FIELD:
        case LIN_NODE_STATE_RECV_SYNC:
        case LIN_NODE_STATE_RECV_PID:
        case LIN_NODE_STATE_SEND_PID:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    8a3e:	86 e1       	ldi	r24, 0x16	; 22
    8a40:	8e 9d       	mul	r24, r14
    8a42:	f0 01       	movw	r30, r0
    8a44:	8f 9d       	mul	r24, r15
    8a46:	f0 0d       	add	r31, r0
    8a48:	11 24       	eor	r1, r1
    8a4a:	e9 53       	subi	r30, 0x39	; 57
    8a4c:	f8 49       	sbci	r31, 0x98	; 152
    8a4e:	81 89       	ldd	r24, Z+17	; 0x11
    8a50:	92 89       	ldd	r25, Z+18	; 0x12
    8a52:	9c 01       	movw	r18, r24
    8a54:	21 50       	subi	r18, 0x01	; 1
    8a56:	31 09       	sbc	r19, r1
    8a58:	21 8b       	std	Z+17, r18	; 0x11
    8a5a:	32 8b       	std	Z+18, r19	; 0x12
    8a5c:	89 2b       	or	r24, r25
    8a5e:	09 f0       	breq	.+2      	; 0x8a62 <lin_lld_timeout_service+0x1ea>
    8a60:	44 c0       	rjmp	.+136    	; 0x8aea <lin_lld_timeout_service+0x272>
            {
                /* Go to idle state */
                (void)LIN_DRV_GotoIdleState(lin_hardware_instance);
    8a62:	c3 01       	movw	r24, r6
    8a64:	b2 01       	movw	r22, r4
    8a66:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <LIN_DRV_GotoIdleState>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    8a6a:	f7 01       	movw	r30, r14
    8a6c:	e2 95       	swap	r30
    8a6e:	f2 95       	swap	r31
    8a70:	f0 7f       	andi	r31, 0xF0	; 240
    8a72:	fe 27       	eor	r31, r30
    8a74:	e0 7f       	andi	r30, 0xF0	; 240
    8a76:	fe 27       	eor	r31, r30
    8a78:	e5 5e       	subi	r30, 0xE5	; 229
    8a7a:	f8 49       	sbci	r31, 0x98	; 152
    8a7c:	86 85       	ldd	r24, Z+14	; 0x0e
    8a7e:	97 85       	ldd	r25, Z+15	; 0x0f
    8a80:	26 e1       	ldi	r18, 0x16	; 22
    8a82:	2e 9d       	mul	r18, r14
    8a84:	f0 01       	movw	r30, r0
    8a86:	2f 9d       	mul	r18, r15
    8a88:	f0 0d       	add	r31, r0
    8a8a:	11 24       	eor	r1, r1
    8a8c:	e9 53       	subi	r30, 0x39	; 57
    8a8e:	f8 49       	sbci	r31, 0x98	; 152
    8a90:	81 8b       	std	Z+17, r24	; 0x11
    8a92:	92 8b       	std	Z+18, r25	; 0x12
    8a94:	2a c0       	rjmp	.+84     	; 0x8aea <lin_lld_timeout_service+0x272>
            }
            break;
        case LIN_NODE_STATE_SEND_DATA:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    8a96:	86 e1       	ldi	r24, 0x16	; 22
    8a98:	8e 9d       	mul	r24, r14
    8a9a:	f0 01       	movw	r30, r0
    8a9c:	8f 9d       	mul	r24, r15
    8a9e:	f0 0d       	add	r31, r0
    8aa0:	11 24       	eor	r1, r1
    8aa2:	e9 53       	subi	r30, 0x39	; 57
    8aa4:	f8 49       	sbci	r31, 0x98	; 152
    8aa6:	81 89       	ldd	r24, Z+17	; 0x11
    8aa8:	92 89       	ldd	r25, Z+18	; 0x12
    8aaa:	9c 01       	movw	r18, r24
    8aac:	21 50       	subi	r18, 0x01	; 1
    8aae:	31 09       	sbc	r19, r1
    8ab0:	21 8b       	std	Z+17, r18	; 0x11
    8ab2:	32 8b       	std	Z+18, r19	; 0x12
    8ab4:	89 2b       	or	r24, r25
    8ab6:	c9 f4       	brne	.+50     	; 0x8aea <lin_lld_timeout_service+0x272>
            {
                /* Abort frame data transferring */
                (void)LIN_DRV_AbortTransferData(lin_hardware_instance);
    8ab8:	c3 01       	movw	r24, r6
    8aba:	b2 01       	movw	r22, r4
    8abc:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <LIN_DRV_AbortTransferData>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    8ac0:	f7 01       	movw	r30, r14
    8ac2:	e2 95       	swap	r30
    8ac4:	f2 95       	swap	r31
    8ac6:	f0 7f       	andi	r31, 0xF0	; 240
    8ac8:	fe 27       	eor	r31, r30
    8aca:	e0 7f       	andi	r30, 0xF0	; 240
    8acc:	fe 27       	eor	r31, r30
    8ace:	e5 5e       	subi	r30, 0xE5	; 229
    8ad0:	f8 49       	sbci	r31, 0x98	; 152
    8ad2:	86 85       	ldd	r24, Z+14	; 0x0e
    8ad4:	97 85       	ldd	r25, Z+15	; 0x0f
    8ad6:	26 e1       	ldi	r18, 0x16	; 22
    8ad8:	2e 9d       	mul	r18, r14
    8ada:	f0 01       	movw	r30, r0
    8adc:	2f 9d       	mul	r18, r15
    8ade:	f0 0d       	add	r31, r0
    8ae0:	11 24       	eor	r1, r1
    8ae2:	e9 53       	subi	r30, 0x39	; 57
    8ae4:	f8 49       	sbci	r31, 0x98	; 152
    8ae6:	81 8b       	std	Z+17, r24	; 0x11
    8ae8:	92 8b       	std	Z+18, r25	; 0x12
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    }
}
    8aea:	a2 96       	adiw	r28, 0x22	; 34
    8aec:	cd bf       	out	0x3d, r28	; 61
    8aee:	de bf       	out	0x3e, r29	; 62
    8af0:	df 91       	pop	r29
    8af2:	cf 91       	pop	r28
    8af4:	1f 91       	pop	r17
    8af6:	0f 91       	pop	r16
    8af8:	ff 90       	pop	r15
    8afa:	ef 90       	pop	r14
    8afc:	df 90       	pop	r13
    8afe:	cf 90       	pop	r12
    8b00:	bf 90       	pop	r11
    8b02:	7f 90       	pop	r7
    8b04:	6f 90       	pop	r6
    8b06:	5f 90       	pop	r5
    8b08:	4f 90       	pop	r4
    8b0a:	08 95       	ret

00008b0c <ld_init>:
{

    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_tx_queue.queue_status);
}
    8b0c:	48 2f       	mov	r20, r24
    8b0e:	50 e0       	ldi	r21, 0x00	; 0
    8b10:	8c e1       	ldi	r24, 0x1C	; 28
    8b12:	84 9f       	mul	r24, r20
    8b14:	f0 01       	movw	r30, r0
    8b16:	85 9f       	mul	r24, r21
    8b18:	f0 0d       	add	r31, r0
    8b1a:	11 24       	eor	r1, r1
    8b1c:	e8 5b       	subi	r30, 0xB8	; 184
    8b1e:	fc 49       	sbci	r31, 0x9C	; 156
    8b20:	22 8d       	ldd	r18, Z+26	; 0x1a
    8b22:	33 8d       	ldd	r19, Z+27	; 0x1b
    8b24:	27 30       	cpi	r18, 0x07	; 7
    8b26:	31 05       	cpc	r19, r1
    8b28:	48 f1       	brcs	.+82     	; 0x8b7c <ld_init+0x70>
    8b2a:	f9 01       	movw	r30, r18
    8b2c:	35 97       	sbiw	r30, 0x05	; 5
    8b2e:	9f 01       	movw	r18, r30
    8b30:	ab ea       	ldi	r26, 0xAB	; 171
    8b32:	ba ea       	ldi	r27, 0xAA	; 170
    8b34:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <__umulhisi3>
    8b38:	96 95       	lsr	r25
    8b3a:	87 95       	ror	r24
    8b3c:	96 95       	lsr	r25
    8b3e:	87 95       	ror	r24
    8b40:	9c 01       	movw	r18, r24
    8b42:	22 0f       	add	r18, r18
    8b44:	33 1f       	adc	r19, r19
    8b46:	82 0f       	add	r24, r18
    8b48:	93 1f       	adc	r25, r19
    8b4a:	88 0f       	add	r24, r24
    8b4c:	99 1f       	adc	r25, r25
    8b4e:	e8 17       	cp	r30, r24
    8b50:	f9 07       	cpc	r31, r25
    8b52:	49 f4       	brne	.+18     	; 0x8b66 <ld_init+0x5a>
    8b54:	9f 01       	movw	r18, r30
    8b56:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <__umulhisi3>
    8b5a:	96 95       	lsr	r25
    8b5c:	87 95       	ror	r24
    8b5e:	96 95       	lsr	r25
    8b60:	87 95       	ror	r24
    8b62:	01 96       	adiw	r24, 0x01	; 1
    8b64:	0d c0       	rjmp	.+26     	; 0x8b80 <ld_init+0x74>
    8b66:	9f 01       	movw	r18, r30
    8b68:	ab ea       	ldi	r26, 0xAB	; 171
    8b6a:	ba ea       	ldi	r27, 0xAA	; 170
    8b6c:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <__umulhisi3>
    8b70:	96 95       	lsr	r25
    8b72:	87 95       	ror	r24
    8b74:	96 95       	lsr	r25
    8b76:	87 95       	ror	r24
    8b78:	02 96       	adiw	r24, 0x02	; 2
    8b7a:	02 c0       	rjmp	.+4      	; 0x8b80 <ld_init+0x74>
    8b7c:	81 e0       	ldi	r24, 0x01	; 1
    8b7e:	90 e0       	ldi	r25, 0x00	; 0
    8b80:	2c e1       	ldi	r18, 0x1C	; 28
    8b82:	24 9f       	mul	r18, r20
    8b84:	d0 01       	movw	r26, r0
    8b86:	25 9f       	mul	r18, r21
    8b88:	b0 0d       	add	r27, r0
    8b8a:	11 24       	eor	r1, r1
    8b8c:	a8 5b       	subi	r26, 0xB8	; 184
    8b8e:	bc 49       	sbci	r27, 0x9C	; 156
    8b90:	56 96       	adiw	r26, 0x16	; 22
    8b92:	2d 91       	ld	r18, X+
    8b94:	3c 91       	ld	r19, X
    8b96:	57 97       	sbiw	r26, 0x17	; 23
    8b98:	64 e3       	ldi	r22, 0x34	; 52
    8b9a:	64 9f       	mul	r22, r20
    8b9c:	f0 01       	movw	r30, r0
    8b9e:	65 9f       	mul	r22, r21
    8ba0:	f0 0d       	add	r31, r0
    8ba2:	11 24       	eor	r1, r1
    8ba4:	ed 56       	subi	r30, 0x6D	; 109
    8ba6:	f8 49       	sbci	r31, 0x98	; 152
    8ba8:	21 87       	std	Z+9, r18	; 0x09
    8baa:	32 87       	std	Z+10, r19	; 0x0a
    8bac:	58 96       	adiw	r26, 0x18	; 24
    8bae:	2d 91       	ld	r18, X+
    8bb0:	3c 91       	ld	r19, X
    8bb2:	59 97       	sbiw	r26, 0x19	; 25
    8bb4:	24 8b       	std	Z+20, r18	; 0x14
    8bb6:	35 8b       	std	Z+21, r19	; 0x15
    8bb8:	9a 01       	movw	r18, r20
    8bba:	22 0f       	add	r18, r18
    8bbc:	33 1f       	adc	r19, r19
    8bbe:	22 0f       	add	r18, r18
    8bc0:	33 1f       	adc	r19, r19
    8bc2:	42 0f       	add	r20, r18
    8bc4:	53 1f       	adc	r21, r19
    8bc6:	45 5b       	subi	r20, 0xB5	; 181
    8bc8:	58 49       	sbci	r21, 0x98	; 152
    8bca:	42 a3       	std	Z+34, r20	; 0x22
    8bcc:	53 a3       	std	Z+35, r21	; 0x23
    8bce:	87 83       	std	Z+7, r24	; 0x07
    8bd0:	90 87       	std	Z+8, r25	; 0x08
    8bd2:	82 8b       	std	Z+18, r24	; 0x12
    8bd4:	93 8b       	std	Z+19, r25	; 0x13
    8bd6:	10 82       	st	Z, r1
    8bd8:	11 82       	std	Z+1, r1	; 0x01
    8bda:	12 82       	std	Z+2, r1	; 0x02
    8bdc:	13 82       	std	Z+3, r1	; 0x03
    8bde:	85 e0       	ldi	r24, 0x05	; 5
    8be0:	84 83       	std	Z+4, r24	; 0x04
    8be2:	15 82       	std	Z+5, r1	; 0x05
    8be4:	16 82       	std	Z+6, r1	; 0x06
    8be6:	13 86       	std	Z+11, r1	; 0x0b
    8be8:	14 86       	std	Z+12, r1	; 0x0c
    8bea:	15 86       	std	Z+13, r1	; 0x0d
    8bec:	16 86       	std	Z+14, r1	; 0x0e
    8bee:	17 86       	std	Z+15, r1	; 0x0f
    8bf0:	10 8a       	std	Z+16, r1	; 0x10
    8bf2:	11 8a       	std	Z+17, r1	; 0x11
    8bf4:	82 e0       	ldi	r24, 0x02	; 2
    8bf6:	86 8b       	std	Z+22, r24	; 0x16
    8bf8:	81 8f       	std	Z+25, r24	; 0x19
    8bfa:	14 8e       	std	Z+28, r1	; 0x1c
    8bfc:	15 8e       	std	Z+29, r1	; 0x1d
    8bfe:	16 8e       	std	Z+30, r1	; 0x1e
    8c00:	15 a2       	std	Z+37, r1	; 0x25
    8c02:	14 a2       	std	Z+36, r1	; 0x24
    8c04:	12 a6       	std	Z+42, r1	; 0x2a
    8c06:	17 8e       	std	Z+31, r1	; 0x1f
    8c08:	10 a2       	std	Z+32, r1	; 0x20
    8c0a:	11 a2       	std	Z+33, r1	; 0x21
    8c0c:	91 e0       	ldi	r25, 0x01	; 1
    8c0e:	96 a3       	std	Z+38, r25	; 0x26
    8c10:	83 a7       	std	Z+43, r24	; 0x2b
    8c12:	17 a2       	std	Z+39, r1	; 0x27
    8c14:	10 a6       	std	Z+40, r1	; 0x28
    8c16:	11 a6       	std	Z+41, r1	; 0x29
    8c18:	15 a6       	std	Z+45, r1	; 0x2d
    8c1a:	14 a6       	std	Z+44, r1	; 0x2c
    8c1c:	08 95       	ret

00008c1e <ld_put_raw>:
    8c1e:	28 2f       	mov	r18, r24
    8c20:	30 e0       	ldi	r19, 0x00	; 0
    8c22:	9c e1       	ldi	r25, 0x1C	; 28
    8c24:	92 9f       	mul	r25, r18
    8c26:	f0 01       	movw	r30, r0
    8c28:	93 9f       	mul	r25, r19
    8c2a:	f0 0d       	add	r31, r0
    8c2c:	11 24       	eor	r1, r1
    8c2e:	e8 5b       	subi	r30, 0xB8	; 184
    8c30:	fc 49       	sbci	r31, 0x9C	; 156
    8c32:	93 81       	ldd	r25, Z+3	; 0x03
    8c34:	91 11       	cpse	r25, r1
    8c36:	28 c0       	rjmp	.+80     	; 0x8c88 <ld_put_raw+0x6a>
    8c38:	9c e1       	ldi	r25, 0x1C	; 28
    8c3a:	92 9f       	mul	r25, r18
    8c3c:	f0 01       	movw	r30, r0
    8c3e:	93 9f       	mul	r25, r19
    8c40:	f0 0d       	add	r31, r0
    8c42:	11 24       	eor	r1, r1
    8c44:	e8 5b       	subi	r30, 0xB8	; 184
    8c46:	fc 49       	sbci	r31, 0x9C	; 156
    8c48:	90 81       	ld	r25, Z
    8c4a:	91 11       	cpse	r25, r1
    8c4c:	1d c0       	rjmp	.+58     	; 0x8c88 <ld_put_raw+0x6a>
    8c4e:	9c e1       	ldi	r25, 0x1C	; 28
    8c50:	92 9f       	mul	r25, r18
    8c52:	f0 01       	movw	r30, r0
    8c54:	93 9f       	mul	r25, r19
    8c56:	f0 0d       	add	r31, r0
    8c58:	11 24       	eor	r1, r1
    8c5a:	e8 5b       	subi	r30, 0xB8	; 184
    8c5c:	fc 49       	sbci	r31, 0x9C	; 156
    8c5e:	e2 89       	ldd	r30, Z+18	; 0x12
    8c60:	94 e2       	ldi	r25, 0x24	; 36
    8c62:	e9 9f       	mul	r30, r25
    8c64:	f0 01       	movw	r30, r0
    8c66:	11 24       	eor	r1, r1
    8c68:	ec 59       	subi	r30, 0x9C	; 156
    8c6a:	fc 49       	sbci	r31, 0x9C	; 156
    8c6c:	43 8d       	ldd	r20, Z+27	; 0x1b
    8c6e:	54 8d       	ldd	r21, Z+28	; 0x1c
    8c70:	94 e3       	ldi	r25, 0x34	; 52
    8c72:	92 9f       	mul	r25, r18
    8c74:	f0 01       	movw	r30, r0
    8c76:	93 9f       	mul	r25, r19
    8c78:	f0 0d       	add	r31, r0
    8c7a:	11 24       	eor	r1, r1
    8c7c:	ed 56       	subi	r30, 0x6D	; 109
    8c7e:	f8 49       	sbci	r31, 0x98	; 152
    8c80:	40 a3       	std	Z+32, r20	; 0x20
    8c82:	51 a3       	std	Z+33, r21	; 0x21
    8c84:	91 e0       	ldi	r25, 0x01	; 1
    8c86:	97 8f       	std	Z+31, r25	; 0x1f
    8c88:	94 e3       	ldi	r25, 0x34	; 52
    8c8a:	92 9f       	mul	r25, r18
    8c8c:	a0 01       	movw	r20, r0
    8c8e:	93 9f       	mul	r25, r19
    8c90:	50 0d       	add	r21, r0
    8c92:	11 24       	eor	r1, r1
    8c94:	4d 56       	subi	r20, 0x6D	; 109
    8c96:	58 49       	sbci	r21, 0x98	; 152
    8c98:	fa 01       	movw	r30, r20
    8c9a:	92 a5       	ldd	r25, Z+42	; 0x2a
    8c9c:	9f 5f       	subi	r25, 0xFF	; 255
    8c9e:	92 a7       	std	Z+42, r25	; 0x2a
    8ca0:	20 e0       	ldi	r18, 0x00	; 0
    8ca2:	0e 94 ce 48 	call	0x919c	; 0x919c <tl_put_raw>
    8ca6:	08 95       	ret

00008ca8 <ld_get_raw>:
    8ca8:	94 e3       	ldi	r25, 0x34	; 52
    8caa:	89 9f       	mul	r24, r25
    8cac:	a0 01       	movw	r20, r0
    8cae:	11 24       	eor	r1, r1
    8cb0:	42 56       	subi	r20, 0x62	; 98
    8cb2:	58 49       	sbci	r21, 0x98	; 152
    8cb4:	21 e0       	ldi	r18, 0x01	; 1
    8cb6:	0e 94 00 4c 	call	0x9800	; 0x9800 <tl_get_raw>
    8cba:	08 95       	ret

00008cbc <ld_raw_rx_status>:
 *END**************************************************************************/
l_u8 ld_raw_rx_status(l_ifc_handle iii)
{
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_rx_queue.queue_status);
    8cbc:	24 e3       	ldi	r18, 0x34	; 52
    8cbe:	82 9f       	mul	r24, r18
    8cc0:	c0 01       	movw	r24, r0
    8cc2:	11 24       	eor	r1, r1
    8cc4:	fc 01       	movw	r30, r24
    8cc6:	ed 56       	subi	r30, 0x6D	; 109
    8cc8:	f8 49       	sbci	r31, 0x98	; 152
}
    8cca:	87 85       	ldd	r24, Z+15	; 0x0f
    8ccc:	08 95       	ret

00008cce <lin_tl_handle_timeout>:
 *
 * Implements    : lin_tl_handle_timeout_Activity
 *END**************************************************************************/
static void lin_tl_handle_timeout(l_ifc_handle iii)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8cce:	90 e0       	ldi	r25, 0x00	; 0
    #if (SUPPORT_MASTER_MODE == 1U)
    const lin_master_data_t * master_data_ptr;
    const lin_schedule_t * active_schedule_struct_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    if (LD_CHECK_N_CR_TIMEOUT == tl_desc_ptr->check_timeout_type)
    8cd0:	24 e3       	ldi	r18, 0x34	; 52
    8cd2:	28 9f       	mul	r18, r24
    8cd4:	f0 01       	movw	r30, r0
    8cd6:	29 9f       	mul	r18, r25
    8cd8:	f0 0d       	add	r31, r0
    8cda:	11 24       	eor	r1, r1
    8cdc:	ed 56       	subi	r30, 0x6D	; 109
    8cde:	f8 49       	sbci	r31, 0x98	; 152
    8ce0:	27 8d       	ldd	r18, Z+31	; 0x1f
    8ce2:	22 30       	cpi	r18, 0x02	; 2
    8ce4:	59 f5       	brne	.+86     	; 0x8d3c <lin_tl_handle_timeout+0x6e>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    8ce6:	24 e3       	ldi	r18, 0x34	; 52
    8ce8:	28 9f       	mul	r18, r24
    8cea:	f0 01       	movw	r30, r0
    8cec:	29 9f       	mul	r18, r25
    8cee:	f0 0d       	add	r31, r0
    8cf0:	11 24       	eor	r1, r1
    8cf2:	ed 56       	subi	r30, 0x6D	; 109
    8cf4:	f8 49       	sbci	r31, 0x98	; 152
    8cf6:	20 a1       	ldd	r18, Z+32	; 0x20
    8cf8:	31 a1       	ldd	r19, Z+33	; 0x21
    8cfa:	a9 01       	movw	r20, r18
    8cfc:	41 50       	subi	r20, 0x01	; 1
    8cfe:	51 09       	sbc	r21, r1
    8d00:	40 a3       	std	Z+32, r20	; 0x20
    8d02:	51 a3       	std	Z+33, r21	; 0x21
    8d04:	23 2b       	or	r18, r19
    8d06:	d1 f4       	brne	.+52     	; 0x8d3c <lin_tl_handle_timeout+0x6e>
        {
            /* Update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    8d08:	26 e1       	ldi	r18, 0x16	; 22
    8d0a:	28 9f       	mul	r18, r24
    8d0c:	f0 01       	movw	r30, r0
    8d0e:	29 9f       	mul	r18, r25
    8d10:	f0 0d       	add	r31, r0
    8d12:	11 24       	eor	r1, r1
    8d14:	e9 53       	subi	r30, 0x39	; 57
    8d16:	f8 49       	sbci	r31, 0x98	; 152
    8d18:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    8d1a:	24 e3       	ldi	r18, 0x34	; 52
    8d1c:	28 9f       	mul	r18, r24
    8d1e:	f0 01       	movw	r30, r0
    8d20:	29 9f       	mul	r18, r25
    8d22:	f0 0d       	add	r31, r0
    8d24:	11 24       	eor	r1, r1
    8d26:	ed 56       	subi	r30, 0x6D	; 109
    8d28:	f8 49       	sbci	r31, 0x98	; 152
    8d2a:	23 e0       	ldi	r18, 0x03	; 3
    8d2c:	23 a7       	std	Z+43, r18	; 0x2b
            tl_desc_ptr->rx_msg_status = LD_N_CR_TIMEOUT;
    8d2e:	25 e0       	ldi	r18, 0x05	; 5
    8d30:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->ld_return_data = false;
    8d32:	14 a6       	std	Z+44, r1	; 0x2c
            tl_desc_ptr->FF_pdu_received = false;
    8d34:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8d36:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    8d38:	21 e0       	ldi	r18, 0x01	; 1
    8d3a:	26 a3       	std	Z+38, r18	; 0x26
        }
    }

    if (LD_CHECK_N_AS_TIMEOUT == tl_desc_ptr->check_timeout_type)
    8d3c:	24 e3       	ldi	r18, 0x34	; 52
    8d3e:	28 9f       	mul	r18, r24
    8d40:	f0 01       	movw	r30, r0
    8d42:	29 9f       	mul	r18, r25
    8d44:	f0 0d       	add	r31, r0
    8d46:	11 24       	eor	r1, r1
    8d48:	ed 56       	subi	r30, 0x6D	; 109
    8d4a:	f8 49       	sbci	r31, 0x98	; 152
    8d4c:	27 8d       	ldd	r18, Z+31	; 0x1f
    8d4e:	21 30       	cpi	r18, 0x01	; 1
    8d50:	49 f5       	brne	.+82     	; 0x8da4 <lin_tl_handle_timeout+0xd6>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    8d52:	24 e3       	ldi	r18, 0x34	; 52
    8d54:	28 9f       	mul	r18, r24
    8d56:	f0 01       	movw	r30, r0
    8d58:	29 9f       	mul	r18, r25
    8d5a:	f0 0d       	add	r31, r0
    8d5c:	11 24       	eor	r1, r1
    8d5e:	ed 56       	subi	r30, 0x6D	; 109
    8d60:	f8 49       	sbci	r31, 0x98	; 152
    8d62:	20 a1       	ldd	r18, Z+32	; 0x20
    8d64:	31 a1       	ldd	r19, Z+33	; 0x21
    8d66:	a9 01       	movw	r20, r18
    8d68:	41 50       	subi	r20, 0x01	; 1
    8d6a:	51 09       	sbc	r21, r1
    8d6c:	40 a3       	std	Z+32, r20	; 0x20
    8d6e:	51 a3       	std	Z+33, r21	; 0x21
    8d70:	23 2b       	or	r18, r19
    8d72:	c1 f4       	brne	.+48     	; 0x8da4 <lin_tl_handle_timeout+0xd6>
        {
            /* update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    8d74:	26 e1       	ldi	r18, 0x16	; 22
    8d76:	28 9f       	mul	r18, r24
    8d78:	f0 01       	movw	r30, r0
    8d7a:	29 9f       	mul	r18, r25
    8d7c:	f0 0d       	add	r31, r0
    8d7e:	11 24       	eor	r1, r1
    8d80:	e9 53       	subi	r30, 0x39	; 57
    8d82:	f8 49       	sbci	r31, 0x98	; 152
    8d84:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    8d86:	24 e3       	ldi	r18, 0x34	; 52
    8d88:	28 9f       	mul	r18, r24
    8d8a:	f0 01       	movw	r30, r0
    8d8c:	29 9f       	mul	r18, r25
    8d8e:	f0 0d       	add	r31, r0
    8d90:	11 24       	eor	r1, r1
    8d92:	ed 56       	subi	r30, 0x6D	; 109
    8d94:	f8 49       	sbci	r31, 0x98	; 152
    8d96:	83 e0       	ldi	r24, 0x03	; 3
    8d98:	83 a7       	std	Z+43, r24	; 0x2b
            tl_desc_ptr->tx_msg_status = LD_N_AS_TIMEOUT;
    8d9a:	84 e0       	ldi	r24, 0x04	; 4
    8d9c:	81 8f       	std	Z+25, r24	; 0x19
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8d9e:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    8da0:	81 e0       	ldi	r24, 0x01	; 1
    8da2:	86 a3       	std	Z+38, r24	; 0x26
    8da4:	08 95       	ret

00008da6 <lin_tl_handler_error>:
 * Implements    : lin_tl_handler_error_Activity
 *END**************************************************************************/
static void lin_tl_handler_error(l_ifc_handle iii,
                                 l_u8 pid)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8da6:	90 e0       	ldi	r25, 0x00	; 0
    else
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* for slave */
        /* Master request */
        if (0x3CU == pid)
    8da8:	6c 33       	cpi	r22, 0x3C	; 60
    8daa:	61 f5       	brne	.+88     	; 0x8e04 <lin_tl_handler_error+0x5e>
        {
            /* update status of message and queue */
            tl_desc_ptr->rx_msg_status = LD_FAILED;
    8dac:	24 e3       	ldi	r18, 0x34	; 52
    8dae:	28 9f       	mul	r18, r24
    8db0:	f0 01       	movw	r30, r0
    8db2:	29 9f       	mul	r18, r25
    8db4:	f0 0d       	add	r31, r0
    8db6:	11 24       	eor	r1, r1
    8db8:	ed 56       	subi	r30, 0x6D	; 109
    8dba:	f8 49       	sbci	r31, 0x98	; 152
    8dbc:	23 e0       	ldi	r18, 0x03	; 3
    8dbe:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->slave_resp_cnt = 0U;
    8dc0:	12 a6       	std	Z+42, r1	; 0x2a

            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    8dc2:	2c e1       	ldi	r18, 0x1C	; 28
    8dc4:	28 9f       	mul	r18, r24
    8dc6:	f0 01       	movw	r30, r0
    8dc8:	29 9f       	mul	r18, r25
    8dca:	f0 0d       	add	r31, r0
    8dcc:	11 24       	eor	r1, r1
    8dce:	e8 5b       	subi	r30, 0xB8	; 184
    8dd0:	fc 49       	sbci	r31, 0x9C	; 156
    8dd2:	20 81       	ld	r18, Z
    8dd4:	21 11       	cpse	r18, r1
    8dd6:	0b c0       	rjmp	.+22     	; 0x8dee <lin_tl_handler_error+0x48>
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_RECEIVE_ERROR;
    8dd8:	24 e3       	ldi	r18, 0x34	; 52
    8dda:	28 9f       	mul	r18, r24
    8ddc:	f0 01       	movw	r30, r0
    8dde:	29 9f       	mul	r18, r25
    8de0:	f0 0d       	add	r31, r0
    8de2:	11 24       	eor	r1, r1
    8de4:	ed 56       	subi	r30, 0x6D	; 109
    8de6:	f8 49       	sbci	r31, 0x98	; 152
    8de8:	22 e0       	ldi	r18, 0x02	; 2
    8dea:	27 87       	std	Z+15, r18	; 0x0f
    8dec:	35 c0       	rjmp	.+106    	; 0x8e58 <lin_tl_handler_error+0xb2>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_TRANSFER_ERROR;
    8dee:	24 e3       	ldi	r18, 0x34	; 52
    8df0:	28 9f       	mul	r18, r24
    8df2:	f0 01       	movw	r30, r0
    8df4:	29 9f       	mul	r18, r25
    8df6:	f0 0d       	add	r31, r0
    8df8:	11 24       	eor	r1, r1
    8dfa:	ed 56       	subi	r30, 0x6D	; 109
    8dfc:	f8 49       	sbci	r31, 0x98	; 152
    8dfe:	27 e0       	ldi	r18, 0x07	; 7
    8e00:	27 87       	std	Z+15, r18	; 0x0f
    8e02:	2a c0       	rjmp	.+84     	; 0x8e58 <lin_tl_handler_error+0xb2>
        }
        else
        {
            /* Slave Response */
            /* update status of message and queue */
            tl_desc_ptr->tx_msg_status = LD_FAILED;
    8e04:	24 e3       	ldi	r18, 0x34	; 52
    8e06:	28 9f       	mul	r18, r24
    8e08:	f0 01       	movw	r30, r0
    8e0a:	29 9f       	mul	r18, r25
    8e0c:	f0 0d       	add	r31, r0
    8e0e:	11 24       	eor	r1, r1
    8e10:	ed 56       	subi	r30, 0x6D	; 109
    8e12:	f8 49       	sbci	r31, 0x98	; 152
    8e14:	23 e0       	ldi	r18, 0x03	; 3
    8e16:	21 8f       	std	Z+25, r18	; 0x19
            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    8e18:	2c e1       	ldi	r18, 0x1C	; 28
    8e1a:	28 9f       	mul	r18, r24
    8e1c:	f0 01       	movw	r30, r0
    8e1e:	29 9f       	mul	r18, r25
    8e20:	f0 0d       	add	r31, r0
    8e22:	11 24       	eor	r1, r1
    8e24:	e8 5b       	subi	r30, 0xB8	; 184
    8e26:	fc 49       	sbci	r31, 0x9C	; 156
    8e28:	20 81       	ld	r18, Z
    8e2a:	21 11       	cpse	r18, r1
    8e2c:	0b c0       	rjmp	.+22     	; 0x8e44 <lin_tl_handler_error+0x9e>
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSMIT_ERROR;
    8e2e:	24 e3       	ldi	r18, 0x34	; 52
    8e30:	28 9f       	mul	r18, r24
    8e32:	f0 01       	movw	r30, r0
    8e34:	29 9f       	mul	r18, r25
    8e36:	f0 0d       	add	r31, r0
    8e38:	11 24       	eor	r1, r1
    8e3a:	ed 56       	subi	r30, 0x6D	; 109
    8e3c:	f8 49       	sbci	r31, 0x98	; 152
    8e3e:	26 e0       	ldi	r18, 0x06	; 6
    8e40:	24 83       	std	Z+4, r18	; 0x04
    8e42:	0a c0       	rjmp	.+20     	; 0x8e58 <lin_tl_handler_error+0xb2>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSFER_ERROR;
    8e44:	24 e3       	ldi	r18, 0x34	; 52
    8e46:	28 9f       	mul	r18, r24
    8e48:	f0 01       	movw	r30, r0
    8e4a:	29 9f       	mul	r18, r25
    8e4c:	f0 0d       	add	r31, r0
    8e4e:	11 24       	eor	r1, r1
    8e50:	ed 56       	subi	r30, 0x6D	; 109
    8e52:	f8 49       	sbci	r31, 0x98	; 152
    8e54:	27 e0       	ldi	r18, 0x07	; 7
    8e56:	24 83       	std	Z+4, r18	; 0x04
            }
        } /* end of (0x3C == pid) */

        tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    8e58:	24 e3       	ldi	r18, 0x34	; 52
    8e5a:	28 9f       	mul	r18, r24
    8e5c:	f0 01       	movw	r30, r0
    8e5e:	29 9f       	mul	r18, r25
    8e60:	f0 0d       	add	r31, r0
    8e62:	11 24       	eor	r1, r1
    8e64:	ed 56       	subi	r30, 0x6D	; 109
    8e66:	f8 49       	sbci	r31, 0x98	; 152
    8e68:	83 e0       	ldi	r24, 0x03	; 3
    8e6a:	83 a7       	std	Z+43, r24	; 0x2b
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8e6c:	17 8e       	std	Z+31, r1	; 0x1f
    8e6e:	08 95       	ret

00008e70 <lin_tl_handler_tx_completed>:
 *
 * Implements    : lin_tl_handler_tx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_tx_completed(l_ifc_handle iii)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8e70:	90 e0       	ldi	r25, 0x00	; 0
    #if (SUPPORT_MASTER_MODE == 1U)
    lin_master_data_t * master_data_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Reset interleave timeout */
    tl_desc_ptr->interleave_timeout_counter = 0;
    8e72:	24 e3       	ldi	r18, 0x34	; 52
    8e74:	28 9f       	mul	r18, r24
    8e76:	f0 01       	movw	r30, r0
    8e78:	29 9f       	mul	r18, r25
    8e7a:	f0 0d       	add	r31, r0
    8e7c:	11 24       	eor	r1, r1
    8e7e:	ed 56       	subi	r30, 0x6D	; 109
    8e80:	f8 49       	sbci	r31, 0x98	; 152
    8e82:	10 a6       	std	Z+40, r1	; 0x28
    8e84:	11 a6       	std	Z+41, r1	; 0x29
    /* Check message is sent completely */
    if (0U == tl_desc_ptr->tl_tx_queue.queue_current_size)
    8e86:	25 81       	ldd	r18, Z+5	; 0x05
    8e88:	36 81       	ldd	r19, Z+6	; 0x06
    8e8a:	23 2b       	or	r18, r19
    8e8c:	19 f5       	brne	.+70     	; 0x8ed4 <lin_tl_handler_tx_completed+0x64>
    {
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    8e8e:	24 e3       	ldi	r18, 0x34	; 52
    8e90:	28 9f       	mul	r18, r24
    8e92:	f0 01       	movw	r30, r0
    8e94:	29 9f       	mul	r18, r25
    8e96:	f0 0d       	add	r31, r0
    8e98:	11 24       	eor	r1, r1
    8e9a:	ed 56       	subi	r30, 0x6D	; 109
    8e9c:	f8 49       	sbci	r31, 0x98	; 152
    8e9e:	17 8e       	std	Z+31, r1	; 0x1f
        tl_desc_ptr->tx_msg_status = LD_COMPLETED;
    8ea0:	22 e0       	ldi	r18, 0x02	; 2
    8ea2:	21 8f       	std	Z+25, r18	; 0x19
        tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    8ea4:	21 e0       	ldi	r18, 0x01	; 1
    8ea6:	23 a7       	std	Z+43, r18	; 0x2b
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    8ea8:	2c e1       	ldi	r18, 0x1C	; 28
    8eaa:	28 9f       	mul	r18, r24
    8eac:	f0 01       	movw	r30, r0
    8eae:	29 9f       	mul	r18, r25
    8eb0:	f0 0d       	add	r31, r0
    8eb2:	11 24       	eor	r1, r1
    8eb4:	e8 5b       	subi	r30, 0xB8	; 184
    8eb6:	fc 49       	sbci	r31, 0x9C	; 156
    8eb8:	23 81       	ldd	r18, Z+3	; 0x03
    8eba:	21 11       	cpse	r18, r1
    8ebc:	3e c0       	rjmp	.+124    	; 0x8f3a <lin_tl_handler_tx_completed+0xca>
        {
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    8ebe:	24 e3       	ldi	r18, 0x34	; 52
    8ec0:	28 9f       	mul	r18, r24
    8ec2:	f0 01       	movw	r30, r0
    8ec4:	29 9f       	mul	r18, r25
    8ec6:	f0 0d       	add	r31, r0
    8ec8:	11 24       	eor	r1, r1
    8eca:	ed 56       	subi	r30, 0x6D	; 109
    8ecc:	f8 49       	sbci	r31, 0x98	; 152
    8ece:	81 e0       	ldi	r24, 0x01	; 1
    8ed0:	86 a3       	std	Z+38, r24	; 0x26
    8ed2:	08 95       	ret
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }
    else
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    8ed4:	2c e1       	ldi	r18, 0x1C	; 28
    8ed6:	28 9f       	mul	r18, r24
    8ed8:	f0 01       	movw	r30, r0
    8eda:	29 9f       	mul	r18, r25
    8edc:	f0 0d       	add	r31, r0
    8ede:	11 24       	eor	r1, r1
    8ee0:	e8 5b       	subi	r30, 0xB8	; 184
    8ee2:	fc 49       	sbci	r31, 0x9C	; 156
    8ee4:	23 81       	ldd	r18, Z+3	; 0x03
    8ee6:	21 11       	cpse	r18, r1
    8ee8:	28 c0       	rjmp	.+80     	; 0x8f3a <lin_tl_handler_tx_completed+0xca>
        {
            if(prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    8eea:	2c e1       	ldi	r18, 0x1C	; 28
    8eec:	28 9f       	mul	r18, r24
    8eee:	f0 01       	movw	r30, r0
    8ef0:	29 9f       	mul	r18, r25
    8ef2:	f0 0d       	add	r31, r0
    8ef4:	11 24       	eor	r1, r1
    8ef6:	e8 5b       	subi	r30, 0xB8	; 184
    8ef8:	fc 49       	sbci	r31, 0x9C	; 156
    8efa:	20 81       	ld	r18, Z
    8efc:	21 11       	cpse	r18, r1
    8efe:	1d c0       	rjmp	.+58     	; 0x8f3a <lin_tl_handler_tx_completed+0xca>
            {
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_As_timeout;
    8f00:	2c e1       	ldi	r18, 0x1C	; 28
    8f02:	28 9f       	mul	r18, r24
    8f04:	f0 01       	movw	r30, r0
    8f06:	29 9f       	mul	r18, r25
    8f08:	f0 0d       	add	r31, r0
    8f0a:	11 24       	eor	r1, r1
    8f0c:	e8 5b       	subi	r30, 0xB8	; 184
    8f0e:	fc 49       	sbci	r31, 0x9C	; 156
    8f10:	e2 89       	ldd	r30, Z+18	; 0x12
    8f12:	24 e2       	ldi	r18, 0x24	; 36
    8f14:	e2 9f       	mul	r30, r18
    8f16:	f0 01       	movw	r30, r0
    8f18:	11 24       	eor	r1, r1
    8f1a:	ec 59       	subi	r30, 0x9C	; 156
    8f1c:	fc 49       	sbci	r31, 0x9C	; 156
    8f1e:	23 8d       	ldd	r18, Z+27	; 0x1b
    8f20:	34 8d       	ldd	r19, Z+28	; 0x1c
    8f22:	44 e3       	ldi	r20, 0x34	; 52
    8f24:	48 9f       	mul	r20, r24
    8f26:	f0 01       	movw	r30, r0
    8f28:	49 9f       	mul	r20, r25
    8f2a:	f0 0d       	add	r31, r0
    8f2c:	11 24       	eor	r1, r1
    8f2e:	ed 56       	subi	r30, 0x6D	; 109
    8f30:	f8 49       	sbci	r31, 0x98	; 152
    8f32:	20 a3       	std	Z+32, r18	; 0x20
    8f34:	31 a3       	std	Z+33, r19	; 0x21
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_AS_TIMEOUT;
    8f36:	81 e0       	ldi	r24, 0x01	; 1
    8f38:	87 8f       	std	Z+31, r24	; 0x1f
    8f3a:	08 95       	ret

00008f3c <lin_tl_attach_service>:
 * This function is implemented for Slave only.
 *
 * Implements    : lin_tl_attach_service_Activity
 *END**************************************************************************/
static void lin_tl_attach_service(l_ifc_handle iii)
{
    8f3c:	0f 93       	push	r16
    8f3e:	1f 93       	push	r17
    8f40:	cf 93       	push	r28
    8f42:	c8 2f       	mov	r28, r24
    l_u8 sid;
    l_u8 frame_type;
    l_u8 rx_queue_current_status;
    const lin_transport_layer_queue_t * rx_queue;
    lin_transport_layer_queue_t * tx_queue;
    rx_queue = &(g_lin_tl_descriptor_array[iii].tl_rx_queue);
    8f44:	08 2f       	mov	r16, r24
    8f46:	10 e0       	ldi	r17, 0x00	; 0
    tx_queue = &(g_lin_tl_descriptor_array[iii].tl_tx_queue);


    /* prepare tx queue */
    tx_queue->queue_current_size = 0;
    8f48:	84 e3       	ldi	r24, 0x34	; 52
    8f4a:	80 9f       	mul	r24, r16
    8f4c:	f0 01       	movw	r30, r0
    8f4e:	81 9f       	mul	r24, r17
    8f50:	f0 0d       	add	r31, r0
    8f52:	11 24       	eor	r1, r1
    8f54:	ed 56       	subi	r30, 0x6D	; 109
    8f56:	f8 49       	sbci	r31, 0x98	; 152
    8f58:	15 82       	std	Z+5, r1	; 0x05
    8f5a:	16 82       	std	Z+6, r1	; 0x06
    tx_queue->queue_header = 0;
    8f5c:	10 82       	st	Z, r1
    8f5e:	11 82       	std	Z+1, r1	; 0x01
    tx_queue->queue_tail = 0;
    8f60:	12 82       	std	Z+2, r1	; 0x02
    8f62:	13 82       	std	Z+3, r1	; 0x03
    tx_queue->queue_status = LD_QUEUE_EMPTY;
    8f64:	85 e0       	ldi	r24, 0x05	; 5
    8f66:	84 83       	std	Z+4, r24	; 0x04

    /* Get rx queue current status */
    rx_queue_current_status = ld_raw_rx_status(iii);
    8f68:	8c 2f       	mov	r24, r28
    8f6a:	0e 94 5e 46 	call	0x8cbc	; 0x8cbc <ld_raw_rx_status>
    /* Check whether RX Queue contains data */
    if (((l_u8)LD_DATA_AVAILABLE == rx_queue_current_status) || ((l_u8)LD_QUEUE_FULL == rx_queue_current_status))
    8f6e:	81 30       	cpi	r24, 0x01	; 1
    8f70:	11 f0       	breq	.+4      	; 0x8f76 <lin_tl_attach_service+0x3a>
    8f72:	83 30       	cpi	r24, 0x03	; 3
    8f74:	19 f5       	brne	.+70     	; 0x8fbc <lin_tl_attach_service+0x80>
    {
        /* get frame type */
        frame_type = (l_u8)((rx_queue->tl_pdu_ptr[rx_queue->queue_header][1] & 0xF0U) >> 4U);
    8f76:	84 e3       	ldi	r24, 0x34	; 52
    8f78:	80 9f       	mul	r24, r16
    8f7a:	d0 01       	movw	r26, r0
    8f7c:	81 9f       	mul	r24, r17
    8f7e:	b0 0d       	add	r27, r0
    8f80:	11 24       	eor	r1, r1
    8f82:	ad 56       	subi	r26, 0x6D	; 109
    8f84:	b8 49       	sbci	r27, 0x98	; 152
    8f86:	54 96       	adiw	r26, 0x14	; 20
    8f88:	8d 91       	ld	r24, X+
    8f8a:	9c 91       	ld	r25, X
    8f8c:	55 97       	sbiw	r26, 0x15	; 21
    8f8e:	1b 96       	adiw	r26, 0x0b	; 11
    8f90:	ed 91       	ld	r30, X+
    8f92:	fc 91       	ld	r31, X
    8f94:	1c 97       	sbiw	r26, 0x0c	; 12
    8f96:	ee 0f       	add	r30, r30
    8f98:	ff 1f       	adc	r31, r31
    8f9a:	ee 0f       	add	r30, r30
    8f9c:	ff 1f       	adc	r31, r31
    8f9e:	ee 0f       	add	r30, r30
    8fa0:	ff 1f       	adc	r31, r31
    8fa2:	e8 0f       	add	r30, r24
    8fa4:	f9 1f       	adc	r31, r25
    8fa6:	81 81       	ldd	r24, Z+1	; 0x01
    8fa8:	82 95       	swap	r24
    8faa:	8f 70       	andi	r24, 0x0F	; 15
        /* Get SID information */
        if (frame_type == PCI_FF)
    8fac:	81 30       	cpi	r24, 0x01	; 1
    8fae:	11 f4       	brne	.+4      	; 0x8fb4 <lin_tl_attach_service+0x78>
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][3];
    8fb0:	63 81       	ldd	r22, Z+3	; 0x03
    8fb2:	01 c0       	rjmp	.+2      	; 0x8fb6 <lin_tl_attach_service+0x7a>
        }
        else
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][2];
    8fb4:	62 81       	ldd	r22, Z+2	; 0x02
        }

        /* Callback to diagnostic layer to process SID */
        DIAG_SERVICE_CALLBACK_HANDLER(iii, sid);
    8fb6:	8c 2f       	mov	r24, r28
    8fb8:	0e 94 af 3c 	call	0x795e	; 0x795e <lin_diag_service_callback>
    }
}
    8fbc:	cf 91       	pop	r28
    8fbe:	1f 91       	pop	r17
    8fc0:	0f 91       	pop	r16
    8fc2:	08 95       	ret

00008fc4 <tl_receive_message>:
 *                 ld_receive_message() function
 *
 * Implements    : tl_receive_message_Activity
 *END**************************************************************************/
static void tl_receive_message(l_ifc_handle iii)
{
    8fc4:	9f 92       	push	r9
    8fc6:	af 92       	push	r10
    8fc8:	bf 92       	push	r11
    8fca:	cf 92       	push	r12
    8fcc:	df 92       	push	r13
    8fce:	ef 92       	push	r14
    8fd0:	ff 92       	push	r15
    8fd2:	0f 93       	push	r16
    8fd4:	1f 93       	push	r17
    8fd6:	cf 93       	push	r28
    8fd8:	df 93       	push	r29
    8fda:	cd b7       	in	r28, 0x3d	; 61
    8fdc:	de b7       	in	r29, 0x3e	; 62
    8fde:	28 97       	sbiw	r28, 0x08	; 8
    8fe0:	cd bf       	out	0x3d, r28	; 61
    8fe2:	de bf       	out	0x3e, r29	; 62
  lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8fe4:	a8 2e       	mov	r10, r24
    8fe6:	b1 2c       	mov	r11, r1
    lin_tl_pdu_data_t pdu;
    l_u16 i;
    l_u16 data_index = 0U;
    l_u16 tmp_length = 0U;
    l_u8 PCI_type;
    l_u8* data = tl_desc_ptr->receive_message_ptr;
    8fe8:	94 e3       	ldi	r25, 0x34	; 52
    8fea:	9a 9d       	mul	r25, r10
    8fec:	f0 01       	movw	r30, r0
    8fee:	9b 9d       	mul	r25, r11
    8ff0:	f0 0d       	add	r31, r0
    8ff2:	11 24       	eor	r1, r1
    8ff4:	ed 56       	subi	r30, 0x6D	; 109
    8ff6:	f8 49       	sbci	r31, 0x98	; 152
    8ff8:	e6 a4       	ldd	r14, Z+46	; 0x2e
    8ffa:	f7 a4       	ldd	r15, Z+47	; 0x2f
    l_u8* NAD = tl_desc_ptr->receive_NAD_ptr;
    8ffc:	c0 a8       	ldd	r12, Z+48	; 0x30
    8ffe:	d1 a8       	ldd	r13, Z+49	; 0x31
    l_u16* length = tl_desc_ptr->receive_message_length_ptr;
    9000:	02 a9       	ldd	r16, Z+50	; 0x32
    9002:	13 a9       	ldd	r17, Z+51	; 0x33

    if (LD_NO_DATA != tl_desc_ptr->tl_rx_queue.queue_status)
    9004:	97 85       	ldd	r25, Z+15	; 0x0f
    9006:	99 23       	and	r25, r25
    9008:	09 f4       	brne	.+2      	; 0x900c <tl_receive_message+0x48>
    900a:	b9 c0       	rjmp	.+370    	; 0x917e <tl_receive_message+0x1ba>
    900c:	98 2e       	mov	r9, r24
        /* Message is received completely */
        /* get data from receive queue */
        /*
        * @violates MISRA 2012 Required Rule 1.3 Required
        */
        ld_get_raw(iii, pdu);
    900e:	be 01       	movw	r22, r28
    9010:	6f 5f       	subi	r22, 0xFF	; 255
    9012:	7f 4f       	sbci	r23, 0xFF	; 255
    9014:	8a 2d       	mov	r24, r10
    9016:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <ld_get_raw>
        /* Analyze data */
        if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    901a:	8c e1       	ldi	r24, 0x1C	; 28
    901c:	8a 9d       	mul	r24, r10
    901e:	f0 01       	movw	r30, r0
    9020:	8b 9d       	mul	r24, r11
    9022:	f0 0d       	add	r31, r0
    9024:	11 24       	eor	r1, r1
    9026:	e8 5b       	subi	r30, 0xB8	; 184
    9028:	fc 49       	sbci	r31, 0x9C	; 156
    902a:	83 81       	ldd	r24, Z+3	; 0x03
    902c:	88 23       	and	r24, r24
    902e:	19 f0       	breq	.+6      	; 0x9036 <tl_receive_message+0x72>
        {
            *NAD = pdu[0];
    9030:	89 81       	ldd	r24, Y+1	; 0x01
    9032:	f6 01       	movw	r30, r12
    9034:	80 83       	st	Z, r24
        }

        /* Check type of pdu */
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
    9036:	8a 81       	ldd	r24, Y+2	; 0x02
    9038:	98 2f       	mov	r25, r24
    903a:	92 95       	swap	r25
    903c:	9f 70       	andi	r25, 0x0F	; 15
        switch (PCI_type)
    903e:	19 f0       	breq	.+6      	; 0x9046 <tl_receive_message+0x82>
    9040:	91 30       	cpi	r25, 0x01	; 1
    9042:	21 f1       	breq	.+72     	; 0x908c <tl_receive_message+0xc8>
    9044:	91 c0       	rjmp	.+290    	; 0x9168 <tl_receive_message+0x1a4>
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    9046:	8f 70       	andi	r24, 0x0F	; 15
    9048:	90 e0       	ldi	r25, 0x00	; 0
                i = *length;
    904a:	f8 01       	movw	r30, r16
    904c:	40 81       	ld	r20, Z
    904e:	51 81       	ldd	r21, Z+1	; 0x01
                *length = tmp_length;
    9050:	80 83       	st	Z, r24
    9052:	91 83       	std	Z+1, r25	; 0x01
                if (i < tmp_length)
    9054:	48 17       	cp	r20, r24
    9056:	59 07       	cpc	r21, r25
    9058:	08 f0       	brcs	.+2      	; 0x905c <tl_receive_message+0x98>
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
        switch (PCI_type)
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    905a:	ac 01       	movw	r20, r24
                if (i < tmp_length)
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
    905c:	8b 81       	ldd	r24, Y+3	; 0x03
    905e:	f7 01       	movw	r30, r14
    9060:	80 83       	st	Z, r24
                for (i = 1U; i < tmp_length; i++)
    9062:	81 e0       	ldi	r24, 0x01	; 1
    9064:	90 e0       	ldi	r25, 0x00	; 0
    9066:	0e c0       	rjmp	.+28     	; 0x9084 <tl_receive_message+0xc0>
                {
                    data[i] = pdu[i + 2U];
    9068:	d7 01       	movw	r26, r14
    906a:	a8 0f       	add	r26, r24
    906c:	b9 1f       	adc	r27, r25
    906e:	fc 01       	movw	r30, r24
    9070:	32 96       	adiw	r30, 0x02	; 2
    9072:	21 e0       	ldi	r18, 0x01	; 1
    9074:	30 e0       	ldi	r19, 0x00	; 0
    9076:	2c 0f       	add	r18, r28
    9078:	3d 1f       	adc	r19, r29
    907a:	e2 0f       	add	r30, r18
    907c:	f3 1f       	adc	r31, r19
    907e:	20 81       	ld	r18, Z
    9080:	2c 93       	st	X, r18
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
                for (i = 1U; i < tmp_length; i++)
    9082:	01 96       	adiw	r24, 0x01	; 1
    9084:	84 17       	cp	r24, r20
    9086:	95 07       	cpc	r25, r21
    9088:	78 f3       	brcs	.-34     	; 0x9068 <tl_receive_message+0xa4>
    908a:	6e c0       	rjmp	.+220    	; 0x9168 <tl_receive_message+0x1a4>
                }
                break;
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    908c:	8f 70       	andi	r24, 0x0F	; 15
    908e:	90 e0       	ldi	r25, 0x00	; 0
    9090:	98 2f       	mov	r25, r24
    9092:	88 27       	eor	r24, r24
    9094:	2b 81       	ldd	r18, Y+3	; 0x03
    9096:	82 0f       	add	r24, r18
    9098:	91 1d       	adc	r25, r1
                i = *length;
    909a:	f8 01       	movw	r30, r16
    909c:	c0 80       	ld	r12, Z
    909e:	d1 80       	ldd	r13, Z+1	; 0x01
                *length = tmp_length;
    90a0:	80 83       	st	Z, r24
    90a2:	91 83       	std	Z+1, r25	; 0x01
                if (i < tmp_length)
    90a4:	c8 16       	cp	r12, r24
    90a6:	d9 06       	cpc	r13, r25
    90a8:	08 f0       	brcs	.+2      	; 0x90ac <tl_receive_message+0xe8>
                }
                break;
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    90aa:	6c 01       	movw	r12, r24
                *length = tmp_length;
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
    90ac:	8c 81       	ldd	r24, Y+4	; 0x04
    90ae:	f7 01       	movw	r30, r14
    90b0:	80 83       	st	Z, r24
                for (i = 1U; i < 5U; i++)
    90b2:	81 e0       	ldi	r24, 0x01	; 1
    90b4:	90 e0       	ldi	r25, 0x00	; 0
    90b6:	0e c0       	rjmp	.+28     	; 0x90d4 <tl_receive_message+0x110>
                {
                    data[i] = pdu[i + 3U];
    90b8:	d7 01       	movw	r26, r14
    90ba:	a8 0f       	add	r26, r24
    90bc:	b9 1f       	adc	r27, r25
    90be:	fc 01       	movw	r30, r24
    90c0:	33 96       	adiw	r30, 0x03	; 3
    90c2:	21 e0       	ldi	r18, 0x01	; 1
    90c4:	30 e0       	ldi	r19, 0x00	; 0
    90c6:	2c 0f       	add	r18, r28
    90c8:	3d 1f       	adc	r19, r29
    90ca:	e2 0f       	add	r30, r18
    90cc:	f3 1f       	adc	r31, r19
    90ce:	20 81       	ld	r18, Z
    90d0:	2c 93       	st	X, r18
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
                for (i = 1U; i < 5U; i++)
    90d2:	01 96       	adiw	r24, 0x01	; 1
    90d4:	85 30       	cpi	r24, 0x05	; 5
    90d6:	91 05       	cpc	r25, r1
    90d8:	78 f3       	brcs	.-34     	; 0x90b8 <tl_receive_message+0xf4>
                {
                    data[i] = pdu[i + 3U];
                }

                tmp_length -= 5U;
    90da:	35 e0       	ldi	r19, 0x05	; 5
    90dc:	c3 1a       	sub	r12, r19
    90de:	d1 08       	sbc	r13, r1
                data_index += 5U;
    90e0:	05 e0       	ldi	r16, 0x05	; 5
    90e2:	10 e0       	ldi	r17, 0x00	; 0

                /* Consecutive frame */
                while (tmp_length > 6U)
    90e4:	1e c0       	rjmp	.+60     	; 0x9122 <tl_receive_message+0x15e>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    90e6:	be 01       	movw	r22, r28
    90e8:	6f 5f       	subi	r22, 0xFF	; 255
    90ea:	7f 4f       	sbci	r23, 0xFF	; 255
    90ec:	89 2d       	mov	r24, r9
    90ee:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <ld_get_raw>
                    for (i = 2U; i < 8U; i++)
    90f2:	22 e0       	ldi	r18, 0x02	; 2
    90f4:	30 e0       	ldi	r19, 0x00	; 0
    90f6:	0f c0       	rjmp	.+30     	; 0x9116 <tl_receive_message+0x152>
                    {
                        data[data_index] = pdu[i];
    90f8:	d7 01       	movw	r26, r14
    90fa:	a0 0f       	add	r26, r16
    90fc:	b1 1f       	adc	r27, r17
    90fe:	e1 e0       	ldi	r30, 0x01	; 1
    9100:	f0 e0       	ldi	r31, 0x00	; 0
    9102:	ec 0f       	add	r30, r28
    9104:	fd 1f       	adc	r31, r29
    9106:	e2 0f       	add	r30, r18
    9108:	f3 1f       	adc	r31, r19
    910a:	90 81       	ld	r25, Z
    910c:	9c 93       	st	X, r25
                        data_index++;
    910e:	0f 5f       	subi	r16, 0xFF	; 255
    9110:	1f 4f       	sbci	r17, 0xFF	; 255
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 2U; i < 8U; i++)
    9112:	2f 5f       	subi	r18, 0xFF	; 255
    9114:	3f 4f       	sbci	r19, 0xFF	; 255
    9116:	28 30       	cpi	r18, 0x08	; 8
    9118:	31 05       	cpc	r19, r1
    911a:	70 f3       	brcs	.-36     	; 0x90f8 <tl_receive_message+0x134>
                    {
                        data[data_index] = pdu[i];
                        data_index++;
                    }

                    tmp_length -= 6U;
    911c:	86 e0       	ldi	r24, 0x06	; 6
    911e:	c8 1a       	sub	r12, r24
    9120:	d1 08       	sbc	r13, r1

                tmp_length -= 5U;
                data_index += 5U;

                /* Consecutive frame */
                while (tmp_length > 6U)
    9122:	e7 e0       	ldi	r30, 0x07	; 7
    9124:	ce 16       	cp	r12, r30
    9126:	d1 04       	cpc	r13, r1
    9128:	f0 f6       	brcc	.-68     	; 0x90e6 <tl_receive_message+0x122>

                    tmp_length -= 6U;
                }

                /* Last frame */
                if (tmp_length > 0U)
    912a:	c1 14       	cp	r12, r1
    912c:	d1 04       	cpc	r13, r1
    912e:	e1 f0       	breq	.+56     	; 0x9168 <tl_receive_message+0x1a4>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    9130:	be 01       	movw	r22, r28
    9132:	6f 5f       	subi	r22, 0xFF	; 255
    9134:	7f 4f       	sbci	r23, 0xFF	; 255
    9136:	89 2d       	mov	r24, r9
    9138:	0e 94 54 46 	call	0x8ca8	; 0x8ca8 <ld_get_raw>
                    for (i = 0U; i < tmp_length; i++)
    913c:	80 e0       	ldi	r24, 0x00	; 0
    913e:	90 e0       	ldi	r25, 0x00	; 0
    9140:	10 c0       	rjmp	.+32     	; 0x9162 <tl_receive_message+0x19e>
                    {
                        data[data_index] = pdu[i + 2U];
    9142:	d7 01       	movw	r26, r14
    9144:	a0 0f       	add	r26, r16
    9146:	b1 1f       	adc	r27, r17
    9148:	fc 01       	movw	r30, r24
    914a:	32 96       	adiw	r30, 0x02	; 2
    914c:	21 e0       	ldi	r18, 0x01	; 1
    914e:	30 e0       	ldi	r19, 0x00	; 0
    9150:	2c 0f       	add	r18, r28
    9152:	3d 1f       	adc	r19, r29
    9154:	e2 0f       	add	r30, r18
    9156:	f3 1f       	adc	r31, r19
    9158:	20 81       	ld	r18, Z
    915a:	2c 93       	st	X, r18
                        data_index++;
    915c:	0f 5f       	subi	r16, 0xFF	; 255
    915e:	1f 4f       	sbci	r17, 0xFF	; 255
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 0U; i < tmp_length; i++)
    9160:	01 96       	adiw	r24, 0x01	; 1
    9162:	8c 15       	cp	r24, r12
    9164:	9d 05       	cpc	r25, r13
    9166:	68 f3       	brcs	.-38     	; 0x9142 <tl_receive_message+0x17e>
                break;
            default:
                /* do nothing */
                break;
        } /* end of switch */
        tl_desc_ptr->ld_return_data = false;
    9168:	84 e3       	ldi	r24, 0x34	; 52
    916a:	8a 9d       	mul	r24, r10
    916c:	f0 01       	movw	r30, r0
    916e:	8b 9d       	mul	r24, r11
    9170:	f0 0d       	add	r31, r0
    9172:	11 24       	eor	r1, r1
    9174:	ed 56       	subi	r30, 0x6D	; 109
    9176:	f8 49       	sbci	r31, 0x98	; 152
    9178:	14 a6       	std	Z+44, r1	; 0x2c
        tl_desc_ptr->rx_msg_status = LD_COMPLETED;
    917a:	82 e0       	ldi	r24, 0x02	; 2
    917c:	86 8b       	std	Z+22, r24	; 0x16
    }
}
    917e:	28 96       	adiw	r28, 0x08	; 8
    9180:	cd bf       	out	0x3d, r28	; 61
    9182:	de bf       	out	0x3e, r29	; 62
    9184:	df 91       	pop	r29
    9186:	cf 91       	pop	r28
    9188:	1f 91       	pop	r17
    918a:	0f 91       	pop	r16
    918c:	ff 90       	pop	r15
    918e:	ef 90       	pop	r14
    9190:	df 90       	pop	r13
    9192:	cf 90       	pop	r12
    9194:	bf 90       	pop	r11
    9196:	af 90       	pop	r10
    9198:	9f 90       	pop	r9
    919a:	08 95       	ret

0000919c <tl_put_raw>:
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    919c:	cf 93       	push	r28
    919e:	df 93       	push	r29
    91a0:	fa 01       	movw	r30, r20
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Get transmit queue */
    queue_data = queue->tl_pdu_ptr;
    91a2:	c1 85       	ldd	r28, Z+9	; 0x09
    91a4:	d2 85       	ldd	r29, Z+10	; 0x0a

    /* check status of queue */
    if ((queue->queue_current_size < queue->queue_max_size) && ((data[0] != LD_FUNCTIONAL_NAD) || (queue_data[queue->queue_header][0] != LD_FUNCTIONAL_NAD)))
    91a6:	45 81       	ldd	r20, Z+5	; 0x05
    91a8:	56 81       	ldd	r21, Z+6	; 0x06
    91aa:	87 81       	ldd	r24, Z+7	; 0x07
    91ac:	90 85       	ldd	r25, Z+8	; 0x08
    91ae:	48 17       	cp	r20, r24
    91b0:	59 07       	cpc	r21, r25
    91b2:	08 f0       	brcs	.+2      	; 0x91b6 <tl_put_raw+0x1a>
    91b4:	5f c0       	rjmp	.+190    	; 0x9274 <tl_put_raw+0xd8>
    91b6:	db 01       	movw	r26, r22
    91b8:	4c 91       	ld	r20, X
    91ba:	4e 37       	cpi	r20, 0x7E	; 126
    91bc:	71 f4       	brne	.+28     	; 0x91da <tl_put_raw+0x3e>
    91be:	a0 81       	ld	r26, Z
    91c0:	b1 81       	ldd	r27, Z+1	; 0x01
    91c2:	aa 0f       	add	r26, r26
    91c4:	bb 1f       	adc	r27, r27
    91c6:	aa 0f       	add	r26, r26
    91c8:	bb 1f       	adc	r27, r27
    91ca:	aa 0f       	add	r26, r26
    91cc:	bb 1f       	adc	r27, r27
    91ce:	ac 0f       	add	r26, r28
    91d0:	bd 1f       	adc	r27, r29
    91d2:	3c 91       	ld	r19, X
    91d4:	3e 37       	cpi	r19, 0x7E	; 126
    91d6:	09 f4       	brne	.+2      	; 0x91da <tl_put_raw+0x3e>
    91d8:	4d c0       	rjmp	.+154    	; 0x9274 <tl_put_raw+0xd8>
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
    91da:	34 81       	ldd	r19, Z+4	; 0x04
    91dc:	35 30       	cpi	r19, 0x05	; 5
    91de:	11 f0       	breq	.+4      	; 0x91e4 <tl_put_raw+0x48>
    91e0:	31 11       	cpse	r19, r1
    91e2:	08 c0       	rjmp	.+16     	; 0x91f4 <tl_put_raw+0x58>
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    91e4:	21 11       	cpse	r18, r1
    91e6:	03 c0       	rjmp	.+6      	; 0x91ee <tl_put_raw+0x52>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    91e8:	84 e0       	ldi	r24, 0x04	; 4
    91ea:	84 83       	std	Z+4, r24	; 0x04
    91ec:	1e c0       	rjmp	.+60     	; 0x922a <tl_put_raw+0x8e>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    91ee:	81 e0       	ldi	r24, 0x01	; 1
    91f0:	84 83       	std	Z+4, r24	; 0x04
    91f2:	1b c0       	rjmp	.+54     	; 0x922a <tl_put_raw+0x8e>
            }
        }
        else
        {
            if ((data[0] == LD_FUNCTIONAL_NAD) && (TRANSMITTING == direction))
    91f4:	4e 37       	cpi	r20, 0x7E	; 126
    91f6:	71 f4       	brne	.+28     	; 0x9214 <tl_put_raw+0x78>
    91f8:	21 11       	cpse	r18, r1
    91fa:	0c c0       	rjmp	.+24     	; 0x9214 <tl_put_raw+0x78>
            {
                if (0U == queue->queue_header)
    91fc:	20 81       	ld	r18, Z
    91fe:	31 81       	ldd	r19, Z+1	; 0x01
    9200:	23 2b       	or	r18, r19
    9202:	11 f4       	brne	.+4      	; 0x9208 <tl_put_raw+0x6c>
                {
                    queue->queue_header = queue->queue_max_size;
    9204:	80 83       	st	Z, r24
    9206:	91 83       	std	Z+1, r25	; 0x01
                }
                queue->queue_header--;
    9208:	80 81       	ld	r24, Z
    920a:	91 81       	ldd	r25, Z+1	; 0x01
    920c:	01 97       	sbiw	r24, 0x01	; 1
    920e:	80 83       	st	Z, r24
    9210:	91 83       	std	Z+1, r25	; 0x01
    9212:	0b c0       	rjmp	.+22     	; 0x922a <tl_put_raw+0x8e>
            }
            else
            {
                queue->queue_tail++;
    9214:	22 81       	ldd	r18, Z+2	; 0x02
    9216:	33 81       	ldd	r19, Z+3	; 0x03
    9218:	2f 5f       	subi	r18, 0xFF	; 255
    921a:	3f 4f       	sbci	r19, 0xFF	; 255
    921c:	22 83       	std	Z+2, r18	; 0x02
    921e:	33 83       	std	Z+3, r19	; 0x03
                /* Check if queue size equal to queue tail */
                if (queue->queue_max_size == queue->queue_tail)
    9220:	82 17       	cp	r24, r18
    9222:	93 07       	cpc	r25, r19
    9224:	11 f4       	brne	.+4      	; 0x922a <tl_put_raw+0x8e>
                {
                    queue->queue_tail = 0U;
    9226:	12 82       	std	Z+2, r1	; 0x02
    9228:	13 82       	std	Z+3, r1	; 0x03
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    922a:	50 e0       	ldi	r21, 0x00	; 0
    922c:	15 c0       	rjmp	.+42     	; 0x9258 <tl_put_raw+0xbc>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
            {
                queue_data[queue->queue_tail][i] = data[i];
    922e:	82 81       	ldd	r24, Z+2	; 0x02
    9230:	93 81       	ldd	r25, Z+3	; 0x03
    9232:	88 0f       	add	r24, r24
    9234:	99 1f       	adc	r25, r25
    9236:	88 0f       	add	r24, r24
    9238:	99 1f       	adc	r25, r25
    923a:	88 0f       	add	r24, r24
    923c:	99 1f       	adc	r25, r25
    923e:	8c 0f       	add	r24, r28
    9240:	9d 1f       	adc	r25, r29
    9242:	25 2f       	mov	r18, r21
    9244:	30 e0       	ldi	r19, 0x00	; 0
    9246:	db 01       	movw	r26, r22
    9248:	a2 0f       	add	r26, r18
    924a:	b3 1f       	adc	r27, r19
    924c:	4c 91       	ld	r20, X
    924e:	dc 01       	movw	r26, r24
    9250:	a2 0f       	add	r26, r18
    9252:	b3 1f       	adc	r27, r19
    9254:	4c 93       	st	X, r20
        }
        else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
    9256:	5f 5f       	subi	r21, 0xFF	; 255
    9258:	58 30       	cpi	r21, 0x08	; 8
    925a:	48 f3       	brcs	.-46     	; 0x922e <tl_put_raw+0x92>
                queue_data[queue->queue_tail][i] = data[i];
            }
        }

        /* update queue status */
        queue->queue_current_size++;
    925c:	85 81       	ldd	r24, Z+5	; 0x05
    925e:	96 81       	ldd	r25, Z+6	; 0x06
    9260:	01 96       	adiw	r24, 0x01	; 1
    9262:	85 83       	std	Z+5, r24	; 0x05
    9264:	96 83       	std	Z+6, r25	; 0x06
        if (queue->queue_current_size >= queue->queue_max_size)
    9266:	27 81       	ldd	r18, Z+7	; 0x07
    9268:	30 85       	ldd	r19, Z+8	; 0x08
    926a:	82 17       	cp	r24, r18
    926c:	93 07       	cpc	r25, r19
    926e:	10 f0       	brcs	.+4      	; 0x9274 <tl_put_raw+0xd8>
        {
            queue->queue_status = LD_QUEUE_FULL;
    9270:	83 e0       	ldi	r24, 0x03	; 3
    9272:	84 83       	std	Z+4, r24	; 0x04
        }
    }
}
    9274:	df 91       	pop	r29
    9276:	cf 91       	pop	r28
    9278:	08 95       	ret

0000927a <lin_process_single_frame>:
 * Description   : Process single frame.
 *
 * Implements    : lin_process_single_frame_Activity
 *END**************************************************************************/
static void lin_process_single_frame(l_ifc_handle iii)
{
    927a:	ff 92       	push	r15
    927c:	0f 93       	push	r16
    927e:	1f 93       	push	r17
    9280:	cf 93       	push	r28
    9282:	df 93       	push	r29
    l_u8 length;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9284:	08 2f       	mov	r16, r24
    9286:	10 e0       	ldi	r17, 0x00	; 0
    const l_u8 * data = prot_state_ptr->response_buffer_ptr;
    9288:	96 e1       	ldi	r25, 0x16	; 22
    928a:	90 9f       	mul	r25, r16
    928c:	f0 01       	movw	r30, r0
    928e:	91 9f       	mul	r25, r17
    9290:	f0 0d       	add	r31, r0
    9292:	11 24       	eor	r1, r1
    9294:	e9 53       	subi	r30, 0x39	; 57
    9296:	f8 49       	sbci	r31, 0x98	; 152
    9298:	a2 81       	ldd	r26, Z+2	; 0x02
    929a:	b3 81       	ldd	r27, Z+3	; 0x03
    {
        master_data_ptr = &g_lin_master_data_array[g_lin_protocol_user_cfg_array[iii].master_ifc_handle];
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    length = (l_u8)(data[1] & 0x0FU);
    929c:	11 96       	adiw	r26, 0x01	; 1
    929e:	9c 91       	ld	r25, X
    92a0:	11 97       	sbiw	r26, 0x01	; 1
    92a2:	9f 70       	andi	r25, 0x0F	; 15
    /* check length of SF. If not valid, ignore this PDU */
    if (length <= 6U)
    92a4:	97 30       	cpi	r25, 0x07	; 7
    92a6:	08 f0       	brcs	.+2      	; 0x92aa <lin_process_single_frame+0x30>
    92a8:	50 c0       	rjmp	.+160    	; 0x934a <lin_process_single_frame+0xd0>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
        #if (SUPPORT_SLAVE_MODE == 1U)
            /* Slave interface */
            /* put PDU to rx queue */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    92aa:	94 e3       	ldi	r25, 0x34	; 52
    92ac:	90 9f       	mul	r25, r16
    92ae:	f0 01       	movw	r30, r0
    92b0:	91 9f       	mul	r25, r17
    92b2:	f0 0d       	add	r31, r0
    92b4:	11 24       	eor	r1, r1
    92b6:	ed 56       	subi	r30, 0x6D	; 109
    92b8:	f8 49       	sbci	r31, 0x98	; 152
    92ba:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    92bc:	91 e0       	ldi	r25, 0x01	; 1
    92be:	93 a7       	std	Z+43, r25	; 0x2b
            /* reset queue header and queue tail */
            tl_desc_ptr->tl_rx_queue.queue_header = 0;
    92c0:	13 86       	std	Z+11, r1	; 0x0b
    92c2:	14 86       	std	Z+12, r1	; 0x0c
            tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    92c4:	15 86       	std	Z+13, r1	; 0x0d
    92c6:	16 86       	std	Z+14, r1	; 0x0e
            tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    92c8:	10 8a       	std	Z+16, r1	; 0x10
    92ca:	11 8a       	std	Z+17, r1	; 0x11
            tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    92cc:	17 86       	std	Z+15, r1	; 0x0f

            if (data[0] == LD_FUNCTIONAL_NAD)
    92ce:	9c 91       	ld	r25, X
    92d0:	9e 37       	cpi	r25, 0x7E	; 126
    92d2:	59 f4       	brne	.+22     	; 0x92ea <lin_process_single_frame+0x70>
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_FUNCTIONAL;
    92d4:	94 e3       	ldi	r25, 0x34	; 52
    92d6:	90 9f       	mul	r25, r16
    92d8:	f0 01       	movw	r30, r0
    92da:	91 9f       	mul	r25, r17
    92dc:	f0 0d       	add	r31, r0
    92de:	11 24       	eor	r1, r1
    92e0:	ed 56       	subi	r30, 0x6D	; 109
    92e2:	f8 49       	sbci	r31, 0x98	; 152
    92e4:	96 e0       	ldi	r25, 0x06	; 6
    92e6:	96 a3       	std	Z+38, r25	; 0x26
    92e8:	0a c0       	rjmp	.+20     	; 0x92fe <lin_process_single_frame+0x84>
            }
            else
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    92ea:	94 e3       	ldi	r25, 0x34	; 52
    92ec:	90 9f       	mul	r25, r16
    92ee:	f0 01       	movw	r30, r0
    92f0:	91 9f       	mul	r25, r17
    92f2:	f0 0d       	add	r31, r0
    92f4:	11 24       	eor	r1, r1
    92f6:	ed 56       	subi	r30, 0x6D	; 109
    92f8:	f8 49       	sbci	r31, 0x98	; 152
    92fa:	95 e0       	ldi	r25, 0x05	; 5
    92fc:	96 a3       	std	Z+38, r25	; 0x26
    92fe:	f8 2e       	mov	r15, r24
            }

            /* put to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    9300:	84 e3       	ldi	r24, 0x34	; 52
    9302:	80 9f       	mul	r24, r16
    9304:	e0 01       	movw	r28, r0
    9306:	81 9f       	mul	r24, r17
    9308:	d0 0d       	add	r29, r0
    930a:	11 24       	eor	r1, r1
    930c:	ae 01       	movw	r20, r28
    930e:	42 56       	subi	r20, 0x62	; 98
    9310:	58 49       	sbci	r21, 0x98	; 152
    9312:	21 e0       	ldi	r18, 0x01	; 1
    9314:	bd 01       	movw	r22, r26
    9316:	8f 2d       	mov	r24, r15
    9318:	0e 94 ce 48 	call	0x919c	; 0x919c <tl_put_raw>
            tl_desc_ptr->frame_counter = 1;
    931c:	cd 56       	subi	r28, 0x6D	; 109
    931e:	d8 49       	sbci	r29, 0x98	; 152
    9320:	81 e0       	ldi	r24, 0x01	; 1
    9322:	8d a3       	std	Y+37, r24	; 0x25
            tl_desc_ptr->num_of_pdu = 1;
    9324:	8c a3       	std	Y+36, r24	; 0x24
            lin_tl_attach_service(iii);
    9326:	8f 2d       	mov	r24, r15
    9328:	0e 94 9e 47 	call	0x8f3c	; 0x8f3c <lin_tl_attach_service>
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        }

        /* If ld_receive_message() function is called before SF pdu to be sent */
        if(tl_desc_ptr->ld_return_data)
    932c:	8c a5       	ldd	r24, Y+44	; 0x2c
    932e:	88 23       	and	r24, r24
    9330:	19 f0       	breq	.+6      	; 0x9338 <lin_process_single_frame+0xbe>
        {
            tl_receive_message(iii);
    9332:	8f 2d       	mov	r24, r15
    9334:	0e 94 e2 47 	call	0x8fc4	; 0x8fc4 <tl_receive_message>
        }
        tl_desc_ptr->FF_pdu_received = false;
    9338:	84 e3       	ldi	r24, 0x34	; 52
    933a:	80 9f       	mul	r24, r16
    933c:	f0 01       	movw	r30, r0
    933e:	81 9f       	mul	r24, r17
    9340:	f0 0d       	add	r31, r0
    9342:	11 24       	eor	r1, r1
    9344:	ed 56       	subi	r30, 0x6D	; 109
    9346:	f8 49       	sbci	r31, 0x98	; 152
    9348:	15 a6       	std	Z+45, r1	; 0x2d
    }
}
    934a:	df 91       	pop	r29
    934c:	cf 91       	pop	r28
    934e:	1f 91       	pop	r17
    9350:	0f 91       	pop	r16
    9352:	ff 90       	pop	r15
    9354:	08 95       	ret

00009356 <lin_process_first_frame>:
 * Description   : Process first frame.
 *
 * Implements    : lin_process_first_frame_Activity
 *END**************************************************************************/
static void lin_process_first_frame(l_ifc_handle iii)
{
    9356:	0f 93       	push	r16
    9358:	1f 93       	push	r17
    935a:	cf 93       	push	r28
    935c:	df 93       	push	r29
    l_u16 length;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    935e:	08 2f       	mov	r16, r24
    9360:	10 e0       	ldi	r17, 0x00	; 0
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    9362:	96 e1       	ldi	r25, 0x16	; 22
    9364:	90 9f       	mul	r25, r16
    9366:	f0 01       	movw	r30, r0
    9368:	91 9f       	mul	r25, r17
    936a:	f0 0d       	add	r31, r0
    936c:	11 24       	eor	r1, r1
    936e:	e9 53       	subi	r30, 0x39	; 57
    9370:	f8 49       	sbci	r31, 0x98	; 152
    9372:	02 80       	ldd	r0, Z+2	; 0x02
    9374:	f3 81       	ldd	r31, Z+3	; 0x03
    9376:	e0 2d       	mov	r30, r0
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    /* for both MASTER and SLAVE */
    length = (l_u16)((((l_u16)data[1] & 0x0FU) << 8U) + (l_u16)data[2]);
    9378:	c1 81       	ldd	r28, Z+1	; 0x01
    937a:	cf 70       	andi	r28, 0x0F	; 15
    937c:	d0 e0       	ldi	r29, 0x00	; 0
    937e:	dc 2f       	mov	r29, r28
    9380:	cc 27       	eor	r28, r28
    9382:	92 81       	ldd	r25, Z+2	; 0x02
    9384:	c9 0f       	add	r28, r25
    9386:	d1 1d       	adc	r29, r1
    /* check length of FF. If not valid, ignore this PDU */
    if ((length >= 7U) && (length <= prot_user_config_ptr->max_message_length))
    9388:	c7 30       	cpi	r28, 0x07	; 7
    938a:	d1 05       	cpc	r29, r1
    938c:	08 f4       	brcc	.+2      	; 0x9390 <lin_process_first_frame+0x3a>
    938e:	b7 c0       	rjmp	.+366    	; 0x94fe <lin_process_first_frame+0x1a8>
    9390:	9c e1       	ldi	r25, 0x1C	; 28
    9392:	90 9f       	mul	r25, r16
    9394:	d0 01       	movw	r26, r0
    9396:	91 9f       	mul	r25, r17
    9398:	b0 0d       	add	r27, r0
    939a:	11 24       	eor	r1, r1
    939c:	a8 5b       	subi	r26, 0xB8	; 184
    939e:	bc 49       	sbci	r27, 0x9C	; 156
    93a0:	5a 96       	adiw	r26, 0x1a	; 26
    93a2:	2d 91       	ld	r18, X+
    93a4:	3c 91       	ld	r19, X
    93a6:	5b 97       	sbiw	r26, 0x1b	; 27
    93a8:	2c 17       	cp	r18, r28
    93aa:	3d 07       	cpc	r19, r29
    93ac:	08 f4       	brcc	.+2      	; 0x93b0 <lin_process_first_frame+0x5a>
    93ae:	a7 c0       	rjmp	.+334    	; 0x94fe <lin_process_first_frame+0x1a8>
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    93b0:	90 9f       	mul	r25, r16
    93b2:	d0 01       	movw	r26, r0
    93b4:	91 9f       	mul	r25, r17
    93b6:	b0 0d       	add	r27, r0
    93b8:	11 24       	eor	r1, r1
    93ba:	a8 5b       	subi	r26, 0xB8	; 184
    93bc:	bc 49       	sbci	r27, 0x9C	; 156
    93be:	13 96       	adiw	r26, 0x03	; 3
    93c0:	9c 91       	ld	r25, X
    93c2:	91 11       	cpse	r25, r1
    93c4:	39 c0       	rjmp	.+114    	; 0x9438 <lin_process_first_frame+0xe2>
        {
            /* For misra compliant rule 9.1 */
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    93c6:	94 e3       	ldi	r25, 0x34	; 52
    93c8:	90 9f       	mul	r25, r16
    93ca:	d0 01       	movw	r26, r0
    93cc:	91 9f       	mul	r25, r17
    93ce:	b0 0d       	add	r27, r0
    93d0:	11 24       	eor	r1, r1
    93d2:	ad 56       	subi	r26, 0x6D	; 109
    93d4:	b8 49       	sbci	r27, 0x98	; 152
    93d6:	95 e0       	ldi	r25, 0x05	; 5
    93d8:	96 96       	adiw	r26, 0x26	; 38
    93da:	9c 93       	st	X, r25
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    93dc:	9c e1       	ldi	r25, 0x1C	; 28
    93de:	90 9f       	mul	r25, r16
    93e0:	d0 01       	movw	r26, r0
    93e2:	91 9f       	mul	r25, r17
    93e4:	b0 0d       	add	r27, r0
    93e6:	11 24       	eor	r1, r1
    93e8:	a8 5b       	subi	r26, 0xB8	; 184
    93ea:	bc 49       	sbci	r27, 0x9C	; 156
    93ec:	9c 91       	ld	r25, X
    93ee:	91 11       	cpse	r25, r1
    93f0:	23 c0       	rjmp	.+70     	; 0x9438 <lin_process_first_frame+0xe2>
            {
                /* Set check N_Cr timeout */
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    93f2:	9c e1       	ldi	r25, 0x1C	; 28
    93f4:	90 9f       	mul	r25, r16
    93f6:	d0 01       	movw	r26, r0
    93f8:	91 9f       	mul	r25, r17
    93fa:	b0 0d       	add	r27, r0
    93fc:	11 24       	eor	r1, r1
    93fe:	a8 5b       	subi	r26, 0xB8	; 184
    9400:	bc 49       	sbci	r27, 0x9C	; 156
    9402:	52 96       	adiw	r26, 0x12	; 18
    9404:	ac 91       	ld	r26, X
    9406:	94 e2       	ldi	r25, 0x24	; 36
    9408:	a9 9f       	mul	r26, r25
    940a:	d0 01       	movw	r26, r0
    940c:	11 24       	eor	r1, r1
    940e:	ac 59       	subi	r26, 0x9C	; 156
    9410:	bc 49       	sbci	r27, 0x9C	; 156
    9412:	5d 96       	adiw	r26, 0x1d	; 29
    9414:	2d 91       	ld	r18, X+
    9416:	3c 91       	ld	r19, X
    9418:	5e 97       	sbiw	r26, 0x1e	; 30
    941a:	94 e3       	ldi	r25, 0x34	; 52
    941c:	90 9f       	mul	r25, r16
    941e:	d0 01       	movw	r26, r0
    9420:	91 9f       	mul	r25, r17
    9422:	b0 0d       	add	r27, r0
    9424:	11 24       	eor	r1, r1
    9426:	ad 56       	subi	r26, 0x6D	; 109
    9428:	b8 49       	sbci	r27, 0x98	; 152
    942a:	90 96       	adiw	r26, 0x20	; 32
    942c:	2d 93       	st	X+, r18
    942e:	3c 93       	st	X, r19
    9430:	91 97       	sbiw	r26, 0x21	; 33
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    9432:	92 e0       	ldi	r25, 0x02	; 2
    9434:	5f 96       	adiw	r26, 0x1f	; 31
    9436:	9c 93       	st	X, r25
            }
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        /* put PDU to rx queue */
        /* reset queue header and queue tail */
        tl_desc_ptr->tl_rx_queue.queue_header = 0;
    9438:	94 e3       	ldi	r25, 0x34	; 52
    943a:	90 9f       	mul	r25, r16
    943c:	a0 01       	movw	r20, r0
    943e:	91 9f       	mul	r25, r17
    9440:	50 0d       	add	r21, r0
    9442:	11 24       	eor	r1, r1
    9444:	da 01       	movw	r26, r20
    9446:	ad 56       	subi	r26, 0x6D	; 109
    9448:	b8 49       	sbci	r27, 0x98	; 152
    944a:	1b 96       	adiw	r26, 0x0b	; 11
    944c:	1d 92       	st	X+, r1
    944e:	1c 92       	st	X, r1
    9450:	1c 97       	sbiw	r26, 0x0c	; 12
        tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    9452:	1d 96       	adiw	r26, 0x0d	; 13
    9454:	1d 92       	st	X+, r1
    9456:	1c 92       	st	X, r1
    9458:	1e 97       	sbiw	r26, 0x0e	; 14
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    945a:	50 96       	adiw	r26, 0x10	; 16
    945c:	1d 92       	st	X+, r1
    945e:	1c 92       	st	X, r1
    9460:	51 97       	sbiw	r26, 0x11	; 17
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    9462:	1f 96       	adiw	r26, 0x0f	; 15
    9464:	1c 92       	st	X, r1
        tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    9466:	42 56       	subi	r20, 0x62	; 98
    9468:	58 49       	sbci	r21, 0x98	; 152
    946a:	21 e0       	ldi	r18, 0x01	; 1
    946c:	bf 01       	movw	r22, r30
    946e:	0e 94 ce 48 	call	0x919c	; 0x919c <tl_put_raw>

        /* calculate number of PDU for this message */
        if (((length - 5U) % 6U) == 0U)
    9472:	25 97       	sbiw	r28, 0x05	; 5
    9474:	9e 01       	movw	r18, r28
    9476:	ab ea       	ldi	r26, 0xAB	; 171
    9478:	ba ea       	ldi	r27, 0xAA	; 170
    947a:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <__umulhisi3>
    947e:	96 95       	lsr	r25
    9480:	87 95       	ror	r24
    9482:	96 95       	lsr	r25
    9484:	87 95       	ror	r24
    9486:	9c 01       	movw	r18, r24
    9488:	22 0f       	add	r18, r18
    948a:	33 1f       	adc	r19, r19
    948c:	82 0f       	add	r24, r18
    948e:	93 1f       	adc	r25, r19
    9490:	88 0f       	add	r24, r24
    9492:	99 1f       	adc	r25, r25
    9494:	c8 17       	cp	r28, r24
    9496:	d9 07       	cpc	r29, r25
    9498:	89 f4       	brne	.+34     	; 0x94bc <lin_process_first_frame+0x166>
        {
            tl_desc_ptr->num_of_pdu = (l_u8)((length - 5U) / 6U);
    949a:	9e 01       	movw	r18, r28
    949c:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <__umulhisi3>
    94a0:	96 95       	lsr	r25
    94a2:	87 95       	ror	r24
    94a4:	96 95       	lsr	r25
    94a6:	87 95       	ror	r24
    94a8:	94 e3       	ldi	r25, 0x34	; 52
    94aa:	90 9f       	mul	r25, r16
    94ac:	f0 01       	movw	r30, r0
    94ae:	91 9f       	mul	r25, r17
    94b0:	f0 0d       	add	r31, r0
    94b2:	11 24       	eor	r1, r1
    94b4:	ed 56       	subi	r30, 0x6D	; 109
    94b6:	f8 49       	sbci	r31, 0x98	; 152
    94b8:	84 a3       	std	Z+36, r24	; 0x24
    94ba:	13 c0       	rjmp	.+38     	; 0x94e2 <lin_process_first_frame+0x18c>
        }
        else
        {
            tl_desc_ptr->num_of_pdu = (l_u8)(((length - 5U) / 6U) + 1U);
    94bc:	9e 01       	movw	r18, r28
    94be:	ab ea       	ldi	r26, 0xAB	; 171
    94c0:	ba ea       	ldi	r27, 0xAA	; 170
    94c2:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <__umulhisi3>
    94c6:	96 95       	lsr	r25
    94c8:	87 95       	ror	r24
    94ca:	96 95       	lsr	r25
    94cc:	87 95       	ror	r24
    94ce:	8f 5f       	subi	r24, 0xFF	; 255
    94d0:	94 e3       	ldi	r25, 0x34	; 52
    94d2:	90 9f       	mul	r25, r16
    94d4:	f0 01       	movw	r30, r0
    94d6:	91 9f       	mul	r25, r17
    94d8:	f0 0d       	add	r31, r0
    94da:	11 24       	eor	r1, r1
    94dc:	ed 56       	subi	r30, 0x6D	; 109
    94de:	f8 49       	sbci	r31, 0x98	; 152
    94e0:	84 a3       	std	Z+36, r24	; 0x24
        }

        /* set frame counter = 1 */
        tl_desc_ptr->frame_counter = 1U;
    94e2:	84 e3       	ldi	r24, 0x34	; 52
    94e4:	80 9f       	mul	r24, r16
    94e6:	f0 01       	movw	r30, r0
    94e8:	81 9f       	mul	r24, r17
    94ea:	f0 0d       	add	r31, r0
    94ec:	11 24       	eor	r1, r1
    94ee:	ed 56       	subi	r30, 0x6D	; 109
    94f0:	f8 49       	sbci	r31, 0x98	; 152
    94f2:	81 e0       	ldi	r24, 0x01	; 1
    94f4:	85 a3       	std	Z+37, r24	; 0x25
        tl_desc_ptr->service_status = LD_SERVICE_BUSY;
    94f6:	13 a6       	std	Z+43, r1	; 0x2b

        /* Mark FF pdu is sent */
        tl_desc_ptr->FF_pdu_received = true;
    94f8:	85 a7       	std	Z+45, r24	; 0x2d
        tl_desc_ptr->interleave_timeout_counter = 0;
    94fa:	10 a6       	std	Z+40, r1	; 0x28
    94fc:	11 a6       	std	Z+41, r1	; 0x29
    }
}
    94fe:	df 91       	pop	r29
    9500:	cf 91       	pop	r28
    9502:	1f 91       	pop	r17
    9504:	0f 91       	pop	r16
    9506:	08 95       	ret

00009508 <lin_process_consecutive_frame>:
 * Description   : Process consecutive frame.
 *
 * Implements    : lin_process_consecutive_frame_Activity
 *END**************************************************************************/
static void lin_process_consecutive_frame(l_ifc_handle iii)
{
    9508:	ef 92       	push	r14
    950a:	ff 92       	push	r15
    950c:	1f 93       	push	r17
    950e:	cf 93       	push	r28
    9510:	df 93       	push	r29
    9512:	18 2f       	mov	r17, r24
    l_u8 tmp_frame_counter;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9514:	c8 2f       	mov	r28, r24
    9516:	d0 e0       	ldi	r29, 0x00	; 0
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    9518:	86 e1       	ldi	r24, 0x16	; 22
    951a:	8c 9f       	mul	r24, r28
    951c:	f0 01       	movw	r30, r0
    951e:	8d 9f       	mul	r24, r29
    9520:	f0 0d       	add	r31, r0
    9522:	11 24       	eor	r1, r1
    9524:	e9 53       	subi	r30, 0x39	; 57
    9526:	f8 49       	sbci	r31, 0x98	; 152
    9528:	a2 81       	ldd	r26, Z+2	; 0x02
    952a:	b3 81       	ldd	r27, Z+3	; 0x03
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        /* for SLAVE */
        /* For misra compliant rule 9.1 */

        if (g_lin_protocol_user_cfg_array[iii].protocol_version == LIN_PROTOCOL_21)
    952c:	8c e1       	ldi	r24, 0x1C	; 28
    952e:	8c 9f       	mul	r24, r28
    9530:	f0 01       	movw	r30, r0
    9532:	8d 9f       	mul	r24, r29
    9534:	f0 0d       	add	r31, r0
    9536:	11 24       	eor	r1, r1
    9538:	e8 5b       	subi	r30, 0xB8	; 184
    953a:	fc 49       	sbci	r31, 0x9C	; 156
    953c:	80 81       	ld	r24, Z
    953e:	81 11       	cpse	r24, r1
    9540:	1d c0       	rjmp	.+58     	; 0x957c <lin_process_consecutive_frame+0x74>
        {
            /* Set check N_Cr timeout */
            tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    9542:	8c e1       	ldi	r24, 0x1C	; 28
    9544:	8c 9f       	mul	r24, r28
    9546:	f0 01       	movw	r30, r0
    9548:	8d 9f       	mul	r24, r29
    954a:	f0 0d       	add	r31, r0
    954c:	11 24       	eor	r1, r1
    954e:	e8 5b       	subi	r30, 0xB8	; 184
    9550:	fc 49       	sbci	r31, 0x9C	; 156
    9552:	e2 89       	ldd	r30, Z+18	; 0x12
    9554:	24 e2       	ldi	r18, 0x24	; 36
    9556:	e2 9f       	mul	r30, r18
    9558:	f0 01       	movw	r30, r0
    955a:	11 24       	eor	r1, r1
    955c:	ec 59       	subi	r30, 0x9C	; 156
    955e:	fc 49       	sbci	r31, 0x9C	; 156
    9560:	85 8d       	ldd	r24, Z+29	; 0x1d
    9562:	96 8d       	ldd	r25, Z+30	; 0x1e
    9564:	24 e3       	ldi	r18, 0x34	; 52
    9566:	2c 9f       	mul	r18, r28
    9568:	f0 01       	movw	r30, r0
    956a:	2d 9f       	mul	r18, r29
    956c:	f0 0d       	add	r31, r0
    956e:	11 24       	eor	r1, r1
    9570:	ed 56       	subi	r30, 0x6D	; 109
    9572:	f8 49       	sbci	r31, 0x98	; 152
    9574:	80 a3       	std	Z+32, r24	; 0x20
    9576:	91 a3       	std	Z+33, r25	; 0x21
            tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    9578:	82 e0       	ldi	r24, 0x02	; 2
    957a:	87 8f       	std	Z+31, r24	; 0x1f
        }
        /* get frame counter of this PDU */
        tmp_frame_counter = (l_u8)(data[1] & 0x0FU);
    957c:	11 96       	adiw	r26, 0x01	; 1
    957e:	8c 91       	ld	r24, X
    9580:	11 97       	sbiw	r26, 0x01	; 1
    9582:	8f 70       	andi	r24, 0x0F	; 15
        /* Check valid frame counter */
        if (tmp_frame_counter == tl_desc_ptr->frame_counter)
    9584:	94 e3       	ldi	r25, 0x34	; 52
    9586:	9c 9f       	mul	r25, r28
    9588:	f0 01       	movw	r30, r0
    958a:	9d 9f       	mul	r25, r29
    958c:	f0 0d       	add	r31, r0
    958e:	11 24       	eor	r1, r1
    9590:	ed 56       	subi	r30, 0x6D	; 109
    9592:	f8 49       	sbci	r31, 0x98	; 152
    9594:	95 a1       	ldd	r25, Z+37	; 0x25
    9596:	89 13       	cpse	r24, r25
    9598:	2d c0       	rjmp	.+90     	; 0x95f4 <lin_process_consecutive_frame+0xec>
        {
            /* increase frame counter */
            tl_desc_ptr->frame_counter++;
    959a:	9f 5f       	subi	r25, 0xFF	; 255
    959c:	84 e3       	ldi	r24, 0x34	; 52
    959e:	8c 9f       	mul	r24, r28
    95a0:	f0 01       	movw	r30, r0
    95a2:	8d 9f       	mul	r24, r29
    95a4:	f0 0d       	add	r31, r0
    95a6:	11 24       	eor	r1, r1
    95a8:	ed 56       	subi	r30, 0x6D	; 109
    95aa:	f8 49       	sbci	r31, 0x98	; 152
    95ac:	95 a3       	std	Z+37, r25	; 0x25
            if (tl_desc_ptr->frame_counter > 15U)
    95ae:	90 31       	cpi	r25, 0x10	; 16
    95b0:	40 f0       	brcs	.+16     	; 0x95c2 <lin_process_consecutive_frame+0xba>
            {
                tl_desc_ptr->frame_counter = 0U;
    95b2:	8c 9f       	mul	r24, r28
    95b4:	f0 01       	movw	r30, r0
    95b6:	8d 9f       	mul	r24, r29
    95b8:	f0 0d       	add	r31, r0
    95ba:	11 24       	eor	r1, r1
    95bc:	ed 56       	subi	r30, 0x6D	; 109
    95be:	f8 49       	sbci	r31, 0x98	; 152
    95c0:	15 a2       	std	Z+37, r1	; 0x25
            }

            /* decrease number of PDU to check message is complete */
            tl_desc_ptr->num_of_pdu--;
    95c2:	84 e3       	ldi	r24, 0x34	; 52
    95c4:	8c 9f       	mul	r24, r28
    95c6:	a0 01       	movw	r20, r0
    95c8:	8d 9f       	mul	r24, r29
    95ca:	50 0d       	add	r21, r0
    95cc:	11 24       	eor	r1, r1
    95ce:	ca 01       	movw	r24, r20
    95d0:	8d 56       	subi	r24, 0x6D	; 109
    95d2:	98 49       	sbci	r25, 0x98	; 152
    95d4:	7c 01       	movw	r14, r24
    95d6:	fc 01       	movw	r30, r24
    95d8:	84 a1       	ldd	r24, Z+36	; 0x24
    95da:	81 50       	subi	r24, 0x01	; 1
    95dc:	84 a3       	std	Z+36, r24	; 0x24
            /* put PDU to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    95de:	42 56       	subi	r20, 0x62	; 98
    95e0:	58 49       	sbci	r21, 0x98	; 152
    95e2:	21 e0       	ldi	r18, 0x01	; 1
    95e4:	bd 01       	movw	r22, r26
    95e6:	81 2f       	mov	r24, r17
    95e8:	0e 94 ce 48 	call	0x919c	; 0x919c <tl_put_raw>
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    95ec:	85 e0       	ldi	r24, 0x05	; 5
    95ee:	f7 01       	movw	r30, r14
    95f0:	86 a3       	std	Z+38, r24	; 0x26
    95f2:	22 c0       	rjmp	.+68     	; 0x9638 <lin_process_consecutive_frame+0x130>
        }
        else
        {
            /* abort this message */
            if(tl_desc_ptr->ld_return_data)
    95f4:	84 e3       	ldi	r24, 0x34	; 52
    95f6:	8c 9f       	mul	r24, r28
    95f8:	f0 01       	movw	r30, r0
    95fa:	8d 9f       	mul	r24, r29
    95fc:	f0 0d       	add	r31, r0
    95fe:	11 24       	eor	r1, r1
    9600:	ed 56       	subi	r30, 0x6D	; 109
    9602:	f8 49       	sbci	r31, 0x98	; 152
    9604:	84 a5       	ldd	r24, Z+44	; 0x2c
    9606:	88 23       	and	r24, r24
    9608:	49 f0       	breq	.+18     	; 0x961c <lin_process_consecutive_frame+0x114>
            {
               tl_desc_ptr->ld_return_data = false;
    960a:	84 e3       	ldi	r24, 0x34	; 52
    960c:	8c 9f       	mul	r24, r28
    960e:	f0 01       	movw	r30, r0
    9610:	8d 9f       	mul	r24, r29
    9612:	f0 0d       	add	r31, r0
    9614:	11 24       	eor	r1, r1
    9616:	ed 56       	subi	r30, 0x6D	; 109
    9618:	f8 49       	sbci	r31, 0x98	; 152
    961a:	14 a6       	std	Z+44, r1	; 0x2c
            }
            tl_desc_ptr->FF_pdu_received = false;
    961c:	84 e3       	ldi	r24, 0x34	; 52
    961e:	8c 9f       	mul	r24, r28
    9620:	f0 01       	movw	r30, r0
    9622:	8d 9f       	mul	r24, r29
    9624:	f0 0d       	add	r31, r0
    9626:	11 24       	eor	r1, r1
    9628:	ed 56       	subi	r30, 0x6D	; 109
    962a:	f8 49       	sbci	r31, 0x98	; 152
    962c:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->rx_msg_status = LD_WRONG_SN;
    962e:	86 e0       	ldi	r24, 0x06	; 6
    9630:	86 8b       	std	Z+22, r24	; 0x16
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    9632:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state  = LD_DIAG_IDLE;
    9634:	81 e0       	ldi	r24, 0x01	; 1
    9636:	86 a3       	std	Z+38, r24	; 0x26
        }

        if (0U == tl_desc_ptr->num_of_pdu)
    9638:	84 e3       	ldi	r24, 0x34	; 52
    963a:	8c 9f       	mul	r24, r28
    963c:	f0 01       	movw	r30, r0
    963e:	8d 9f       	mul	r24, r29
    9640:	f0 0d       	add	r31, r0
    9642:	11 24       	eor	r1, r1
    9644:	ed 56       	subi	r30, 0x6D	; 109
    9646:	f8 49       	sbci	r31, 0x98	; 152
    9648:	84 a1       	ldd	r24, Z+36	; 0x24
    964a:	81 11       	cpse	r24, r1
    964c:	17 c0       	rjmp	.+46     	; 0x967c <lin_process_consecutive_frame+0x174>
        {
            /* message is received completely */
            /* set status is IDLE to receive new message */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    964e:	7f 01       	movw	r14, r30
    9650:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    9652:	81 e0       	ldi	r24, 0x01	; 1
    9654:	83 a7       	std	Z+43, r24	; 0x2b

            lin_tl_attach_service(iii);
    9656:	81 2f       	mov	r24, r17
    9658:	0e 94 9e 47 	call	0x8f3c	; 0x8f3c <lin_tl_attach_service>
            /* If ld_receive_message() function is called before FF pdu to be sent */
            if(tl_desc_ptr->ld_return_data)
    965c:	f7 01       	movw	r30, r14
    965e:	84 a5       	ldd	r24, Z+44	; 0x2c
    9660:	88 23       	and	r24, r24
    9662:	19 f0       	breq	.+6      	; 0x966a <lin_process_consecutive_frame+0x162>
            {
                tl_receive_message(iii);
    9664:	81 2f       	mov	r24, r17
    9666:	0e 94 e2 47 	call	0x8fc4	; 0x8fc4 <tl_receive_message>
            }
            tl_desc_ptr->FF_pdu_received = false;
    966a:	84 e3       	ldi	r24, 0x34	; 52
    966c:	8c 9f       	mul	r24, r28
    966e:	f0 01       	movw	r30, r0
    9670:	8d 9f       	mul	r24, r29
    9672:	f0 0d       	add	r31, r0
    9674:	11 24       	eor	r1, r1
    9676:	ed 56       	subi	r30, 0x6D	; 109
    9678:	f8 49       	sbci	r31, 0x98	; 152
    967a:	15 a6       	std	Z+45, r1	; 0x2d
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    }
}
    967c:	df 91       	pop	r29
    967e:	cf 91       	pop	r28
    9680:	1f 91       	pop	r17
    9682:	ff 90       	pop	r15
    9684:	ef 90       	pop	r14
    9686:	08 95       	ret

00009688 <lin_process_pdu>:
static void lin_process_pdu(l_ifc_handle iii,
                            const lin_tl_pdu_data_t * pdu)
{
    l_u8 pci_type;
#if (SUPPORT_SLAVE_MODE == 1U)
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9688:	28 2f       	mov	r18, r24
    968a:	30 e0       	ldi	r19, 0x00	; 0
    if ((bool)LIN_SLAVE == g_lin_protocol_user_cfg_array[iii].function)
    968c:	9c e1       	ldi	r25, 0x1C	; 28
    968e:	92 9f       	mul	r25, r18
    9690:	f0 01       	movw	r30, r0
    9692:	93 9f       	mul	r25, r19
    9694:	f0 0d       	add	r31, r0
    9696:	11 24       	eor	r1, r1
    9698:	e8 5b       	subi	r30, 0xB8	; 184
    969a:	fc 49       	sbci	r31, 0x9C	; 156
    969c:	93 81       	ldd	r25, Z+3	; 0x03
    969e:	91 11       	cpse	r25, r1
    96a0:	11 c0       	rjmp	.+34     	; 0x96c4 <lin_process_pdu+0x3c>
    {
        g_lin_tl_descriptor_array[iii].slave_resp_cnt = 0U;
    96a2:	94 e3       	ldi	r25, 0x34	; 52
    96a4:	92 9f       	mul	r25, r18
    96a6:	f0 01       	movw	r30, r0
    96a8:	93 9f       	mul	r25, r19
    96aa:	f0 0d       	add	r31, r0
    96ac:	11 24       	eor	r1, r1
    96ae:	ed 56       	subi	r30, 0x6D	; 109
    96b0:	f8 49       	sbci	r31, 0x98	; 152
    96b2:	12 a6       	std	Z+42, r1	; 0x2a
        /* clear queue */
        tl_desc_ptr->tl_tx_queue.queue_status = LD_QUEUE_EMPTY;
    96b4:	95 e0       	ldi	r25, 0x05	; 5
    96b6:	94 83       	std	Z+4, r25	; 0x04
        tl_desc_ptr->tl_tx_queue.queue_current_size = 0U;
    96b8:	15 82       	std	Z+5, r1	; 0x05
    96ba:	16 82       	std	Z+6, r1	; 0x06
        tl_desc_ptr->tl_tx_queue.queue_header = tl_desc_ptr->tl_tx_queue.queue_tail;
    96bc:	22 81       	ldd	r18, Z+2	; 0x02
    96be:	33 81       	ldd	r19, Z+3	; 0x03
    96c0:	20 83       	st	Z, r18
    96c2:	31 83       	std	Z+1, r19	; 0x01
    }
#endif /* End (SUPPORT_SLAVE_MODE == 1U) */

    /* get PCI type */
    pci_type = (l_u8)(((*pdu)[1] & 0xF0U) >> 4U);
    96c4:	fb 01       	movw	r30, r22
    96c6:	91 81       	ldd	r25, Z+1	; 0x01
    96c8:	92 95       	swap	r25
    96ca:	9f 70       	andi	r25, 0x0F	; 15
    switch (pci_type)
    96cc:	91 30       	cpi	r25, 0x01	; 1
    96ce:	39 f0       	breq	.+14     	; 0x96de <lin_process_pdu+0x56>
    96d0:	18 f0       	brcs	.+6      	; 0x96d8 <lin_process_pdu+0x50>
    96d2:	92 30       	cpi	r25, 0x02	; 2
    96d4:	39 f0       	breq	.+14     	; 0x96e4 <lin_process_pdu+0x5c>
    96d6:	08 95       	ret
    {
        case PCI_SF:
            lin_process_single_frame(iii);
    96d8:	0e 94 3d 49 	call	0x927a	; 0x927a <lin_process_single_frame>
            break;
    96dc:	08 95       	ret
        case PCI_FF:
            lin_process_first_frame(iii);
    96de:	0e 94 ab 49 	call	0x9356	; 0x9356 <lin_process_first_frame>
            break;
    96e2:	08 95       	ret
        case PCI_CF:
            lin_process_consecutive_frame(iii);
    96e4:	0e 94 84 4a 	call	0x9508	; 0x9508 <lin_process_consecutive_frame>
    96e8:	08 95       	ret

000096ea <lin_tl_handler_rx_completed>:
 * Implements    : lin_tl_handler_rx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_rx_completed(l_ifc_handle iii)
{
    l_u8 pci_type;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    96ea:	28 2f       	mov	r18, r24
    96ec:	30 e0       	ldi	r19, 0x00	; 0
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    96ee:	96 e1       	ldi	r25, 0x16	; 22
    96f0:	92 9f       	mul	r25, r18
    96f2:	f0 01       	movw	r30, r0
    96f4:	93 9f       	mul	r25, r19
    96f6:	f0 0d       	add	r31, r0
    96f8:	11 24       	eor	r1, r1
    96fa:	e9 53       	subi	r30, 0x39	; 57
    96fc:	f8 49       	sbci	r31, 0x98	; 152
    96fe:	a2 81       	ldd	r26, Z+2	; 0x02
    9700:	b3 81       	ldd	r27, Z+3	; 0x03
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    9702:	9c e1       	ldi	r25, 0x1C	; 28
    9704:	92 9f       	mul	r25, r18
    9706:	f0 01       	movw	r30, r0
    9708:	93 9f       	mul	r25, r19
    970a:	f0 0d       	add	r31, r0
    970c:	11 24       	eor	r1, r1
    970e:	e8 5b       	subi	r30, 0xB8	; 184
    9710:	fc 49       	sbci	r31, 0x9C	; 156
    9712:	43 81       	ldd	r20, Z+3	; 0x03
    9714:	41 11       	cpse	r20, r1
    9716:	3d c0       	rjmp	.+122    	; 0x9792 <lin_tl_handler_rx_completed+0xa8>
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    9718:	92 9f       	mul	r25, r18
    971a:	f0 01       	movw	r30, r0
    971c:	93 9f       	mul	r25, r19
    971e:	f0 0d       	add	r31, r0
    9720:	11 24       	eor	r1, r1
    9722:	e8 5b       	subi	r30, 0xB8	; 184
    9724:	fc 49       	sbci	r31, 0x9C	; 156
    9726:	62 89       	ldd	r22, Z+18	; 0x12
    9728:	70 e0       	ldi	r23, 0x00	; 0
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    972a:	9c 91       	ld	r25, X
    972c:	52 e8       	ldi	r21, 0x82	; 130
    972e:	59 0f       	add	r21, r25
    9730:	52 30       	cpi	r21, 0x02	; 2
    9732:	28 f1       	brcs	.+74     	; 0x977e <lin_tl_handler_rx_completed+0x94>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    9734:	54 e2       	ldi	r21, 0x24	; 36
    9736:	56 9f       	mul	r21, r22
    9738:	f0 01       	movw	r30, r0
    973a:	57 9f       	mul	r21, r23
    973c:	f0 0d       	add	r31, r0
    973e:	11 24       	eor	r1, r1
    9740:	ec 59       	subi	r30, 0x9C	; 156
    9742:	fc 49       	sbci	r31, 0x9C	; 156
    9744:	01 90       	ld	r0, Z+
    9746:	f0 81       	ld	r31, Z
    9748:	e0 2d       	mov	r30, r0
    974a:	50 81       	ld	r21, Z
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    974c:	95 17       	cp	r25, r21
    974e:	29 f0       	breq	.+10     	; 0x975a <lin_tl_handler_rx_completed+0x70>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    9750:	12 96       	adiw	r26, 0x02	; 2
    9752:	5c 91       	ld	r21, X
    9754:	12 97       	sbiw	r26, 0x02	; 2
    9756:	50 3b       	cpi	r21, 0xB0	; 176
    9758:	a1 f4       	brne	.+40     	; 0x9782 <lin_tl_handler_rx_completed+0x98>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    975a:	54 e2       	ldi	r21, 0x24	; 36
    975c:	56 9f       	mul	r21, r22
    975e:	f0 01       	movw	r30, r0
    9760:	57 9f       	mul	r21, r23
    9762:	f0 0d       	add	r31, r0
    9764:	11 24       	eor	r1, r1
    9766:	ec 59       	subi	r30, 0x9C	; 156
    9768:	fc 49       	sbci	r31, 0x9C	; 156
    976a:	52 81       	ldd	r21, Z+2	; 0x02
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    976c:	95 17       	cp	r25, r21
    976e:	59 f0       	breq	.+22     	; 0x9786 <lin_tl_handler_rx_completed+0x9c>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    9770:	12 96       	adiw	r26, 0x02	; 2
    9772:	9c 91       	ld	r25, X
    9774:	12 97       	sbiw	r26, 0x02	; 2
    9776:	90 3b       	cpi	r25, 0xB0	; 176
    9778:	41 f0       	breq	.+16     	; 0x978a <lin_tl_handler_rx_completed+0xa0>
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    977a:	90 e0       	ldi	r25, 0x00	; 0
    977c:	07 c0       	rjmp	.+14     	; 0x978c <lin_tl_handler_rx_completed+0xa2>
    977e:	90 e0       	ldi	r25, 0x00	; 0
    9780:	05 c0       	rjmp	.+10     	; 0x978c <lin_tl_handler_rx_completed+0xa2>
    9782:	91 e0       	ldi	r25, 0x01	; 1
    9784:	03 c0       	rjmp	.+6      	; 0x978c <lin_tl_handler_rx_completed+0xa2>
    9786:	90 e0       	ldi	r25, 0x00	; 0
    9788:	01 c0       	rjmp	.+2      	; 0x978c <lin_tl_handler_rx_completed+0xa2>
    978a:	91 e0       	ldi	r25, 0x01	; 1
    978c:	59 2f       	mov	r21, r25
    978e:	51 70       	andi	r21, 0x01	; 1
    9790:	01 c0       	rjmp	.+2      	; 0x9794 <lin_tl_handler_rx_completed+0xaa>
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    9792:	50 e0       	ldi	r21, 0x00	; 0
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    }
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    pci_type = (l_u8)(((*lin_tl_pdu)[1] & 0xF0U) >> 4U);
    9794:	11 96       	adiw	r26, 0x01	; 1
    9796:	9c 91       	ld	r25, X
    9798:	11 97       	sbiw	r26, 0x01	; 1
    979a:	92 95       	swap	r25
    979c:	9f 70       	andi	r25, 0x0F	; 15
    /* check NAD whether or not belongs to this slave node */
    #if (SUPPORT_SLAVE_MODE == 1U)
    if (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (invalid_NAD || (pci_type > PCI_CF)))
    979e:	41 11       	cpse	r20, r1
    97a0:	0e c0       	rjmp	.+28     	; 0x97be <lin_tl_handler_rx_completed+0xd4>
    97a2:	51 11       	cpse	r21, r1
    97a4:	02 c0       	rjmp	.+4      	; 0x97aa <lin_tl_handler_rx_completed+0xc0>
    97a6:	93 30       	cpi	r25, 0x03	; 3
    97a8:	50 f0       	brcs	.+20     	; 0x97be <lin_tl_handler_rx_completed+0xd4>
    {
        tl_desc_ptr->slave_resp_cnt = 0;
    97aa:	84 e3       	ldi	r24, 0x34	; 52
    97ac:	82 9f       	mul	r24, r18
    97ae:	f0 01       	movw	r30, r0
    97b0:	83 9f       	mul	r24, r19
    97b2:	f0 0d       	add	r31, r0
    97b4:	11 24       	eor	r1, r1
    97b6:	ed 56       	subi	r30, 0x6D	; 109
    97b8:	f8 49       	sbci	r31, 0x98	; 152
    97ba:	12 a6       	std	Z+42, r1	; 0x2a
    97bc:	08 95       	ret
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    97be:	44 e3       	ldi	r20, 0x34	; 52
    97c0:	42 9f       	mul	r20, r18
    97c2:	f0 01       	movw	r30, r0
    97c4:	43 9f       	mul	r20, r19
    97c6:	f0 0d       	add	r31, r0
    97c8:	11 24       	eor	r1, r1
    97ca:	ed 56       	subi	r30, 0x6D	; 109
    97cc:	f8 49       	sbci	r31, 0x98	; 152
    97ce:	46 a1       	ldd	r20, Z+38	; 0x26
    97d0:	45 30       	cpi	r20, 0x05	; 5
    97d2:	11 f0       	breq	.+4      	; 0x97d8 <lin_tl_handler_rx_completed+0xee>
    97d4:	42 30       	cpi	r20, 0x02	; 2
    97d6:	19 f4       	brne	.+6      	; 0x97de <lin_tl_handler_rx_completed+0xf4>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
    97d8:	4c 91       	ld	r20, X
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    97da:	4e 37       	cpi	r20, 0x7E	; 126
    97dc:	81 f0       	breq	.+32     	; 0x97fe <lin_tl_handler_rx_completed+0x114>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
        {
            /* check error */
            if (!((tl_desc_ptr->service_status == LD_SERVICE_ERROR) && (pci_type == PCI_CF)))
    97de:	44 e3       	ldi	r20, 0x34	; 52
    97e0:	42 9f       	mul	r20, r18
    97e2:	f0 01       	movw	r30, r0
    97e4:	43 9f       	mul	r20, r19
    97e6:	f0 0d       	add	r31, r0
    97e8:	11 24       	eor	r1, r1
    97ea:	ed 56       	subi	r30, 0x6D	; 109
    97ec:	f8 49       	sbci	r31, 0x98	; 152
    97ee:	23 a5       	ldd	r18, Z+43	; 0x2b
    97f0:	23 30       	cpi	r18, 0x03	; 3
    97f2:	11 f4       	brne	.+4      	; 0x97f8 <lin_tl_handler_rx_completed+0x10e>
    97f4:	92 30       	cpi	r25, 0x02	; 2
    97f6:	19 f0       	breq	.+6      	; 0x97fe <lin_tl_handler_rx_completed+0x114>
            {
                /* process received PDU */
                lin_process_pdu(iii, lin_tl_pdu);
    97f8:	bd 01       	movw	r22, r26
    97fa:	0e 94 44 4b 	call	0x9688	; 0x9688 <lin_process_pdu>
    97fe:	08 95       	ret

00009800 <tl_get_raw>:
 *END**************************************************************************/
void tl_get_raw(l_ifc_handle iii,
                l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    9800:	0f 93       	push	r16
    9802:	1f 93       	push	r17
    9804:	cf 93       	push	r28
    9806:	df 93       	push	r29
    9808:	ea 01       	movw	r28, r20
    const lin_tl_pdu_data_t * queue_data;
    l_u8 i;
    l_u16 queue_header;
    tl_queue = queue;
    /* Get queue */
    queue_data = (const lin_tl_pdu_data_t *)tl_queue->tl_pdu_ptr;
    980a:	49 85       	ldd	r20, Y+9	; 0x09
    980c:	5a 85       	ldd	r21, Y+10	; 0x0a

    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    980e:	8d 81       	ldd	r24, Y+5	; 0x05
    9810:	9e 81       	ldd	r25, Y+6	; 0x06
    9812:	89 2b       	or	r24, r25
    9814:	d1 f1       	breq	.+116    	; 0x988a <tl_get_raw+0x8a>
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
    9816:	08 81       	ld	r16, Y
    9818:	19 81       	ldd	r17, Y+1	; 0x01
        for (i = 0U; i < 8U; i++)
    981a:	30 e0       	ldi	r19, 0x00	; 0
    981c:	13 c0       	rjmp	.+38     	; 0x9844 <tl_get_raw+0x44>
        {
            data[i] = queue_data[queue_header][i];
    981e:	83 2f       	mov	r24, r19
    9820:	90 e0       	ldi	r25, 0x00	; 0
    9822:	db 01       	movw	r26, r22
    9824:	a8 0f       	add	r26, r24
    9826:	b9 1f       	adc	r27, r25
    9828:	f8 01       	movw	r30, r16
    982a:	ee 0f       	add	r30, r30
    982c:	ff 1f       	adc	r31, r31
    982e:	ee 0f       	add	r30, r30
    9830:	ff 1f       	adc	r31, r31
    9832:	ee 0f       	add	r30, r30
    9834:	ff 1f       	adc	r31, r31
    9836:	e4 0f       	add	r30, r20
    9838:	f5 1f       	adc	r31, r21
    983a:	e8 0f       	add	r30, r24
    983c:	f9 1f       	adc	r31, r25
    983e:	80 81       	ld	r24, Z
    9840:	8c 93       	st	X, r24
    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
        for (i = 0U; i < 8U; i++)
    9842:	3f 5f       	subi	r19, 0xFF	; 255
    9844:	38 30       	cpi	r19, 0x08	; 8
    9846:	58 f3       	brcs	.-42     	; 0x981e <tl_get_raw+0x1e>
        {
            data[i] = queue_data[queue_header][i];
        }

        /* update queue status */
        if (0U == (--queue->queue_current_size))
    9848:	8d 81       	ldd	r24, Y+5	; 0x05
    984a:	9e 81       	ldd	r25, Y+6	; 0x06
    984c:	01 97       	sbiw	r24, 0x01	; 1
    984e:	8d 83       	std	Y+5, r24	; 0x05
    9850:	9e 83       	std	Y+6, r25	; 0x06
    9852:	89 2b       	or	r24, r25
    9854:	39 f4       	brne	.+14     	; 0x9864 <tl_get_raw+0x64>
        {
            if (TRANSMITTING == direction)
    9856:	21 11       	cpse	r18, r1
    9858:	03 c0       	rjmp	.+6      	; 0x9860 <tl_get_raw+0x60>
            {
                queue->queue_status = LD_QUEUE_EMPTY;
    985a:	85 e0       	ldi	r24, 0x05	; 5
    985c:	8c 83       	std	Y+4, r24	; 0x04
    985e:	15 c0       	rjmp	.+42     	; 0x988a <tl_get_raw+0x8a>
            }
            else
            {
                queue->queue_status = LD_NO_DATA;
    9860:	1c 82       	std	Y+4, r1	; 0x04
    9862:	13 c0       	rjmp	.+38     	; 0x988a <tl_get_raw+0x8a>
            }
        }
        else
        {
            if (TRANSMITTING == direction)
    9864:	21 11       	cpse	r18, r1
    9866:	03 c0       	rjmp	.+6      	; 0x986e <tl_get_raw+0x6e>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    9868:	84 e0       	ldi	r24, 0x04	; 4
    986a:	8c 83       	std	Y+4, r24	; 0x04
    986c:	02 c0       	rjmp	.+4      	; 0x9872 <tl_get_raw+0x72>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    986e:	81 e0       	ldi	r24, 0x01	; 1
    9870:	8c 83       	std	Y+4, r24	; 0x04
            }
            /* change queue header */
            queue->queue_header++;
    9872:	88 81       	ld	r24, Y
    9874:	99 81       	ldd	r25, Y+1	; 0x01
    9876:	01 96       	adiw	r24, 0x01	; 1
    9878:	88 83       	st	Y, r24
    987a:	99 83       	std	Y+1, r25	; 0x01
            if (queue->queue_header == queue->queue_max_size)
    987c:	2f 81       	ldd	r18, Y+7	; 0x07
    987e:	38 85       	ldd	r19, Y+8	; 0x08
    9880:	82 17       	cp	r24, r18
    9882:	93 07       	cpc	r25, r19
    9884:	11 f4       	brne	.+4      	; 0x988a <tl_get_raw+0x8a>
            {
                queue->queue_header = 0U;
    9886:	18 82       	st	Y, r1
    9888:	19 82       	std	Y+1, r1	; 0x01
            }
        }
    }
    (void)iii;
}
    988a:	df 91       	pop	r29
    988c:	cf 91       	pop	r28
    988e:	1f 91       	pop	r17
    9890:	0f 91       	pop	r16
    9892:	08 95       	ret

00009894 <lin_tl_make_master_request_pdu>:
 * This function is implemented for Master
 *
 * Implements    : lin_tl_make_master_request_pdu_Activity
 *END**************************************************************************/
static void lin_tl_make_master_request_pdu(l_ifc_handle iii)
{
    9894:	cf 93       	push	r28
    9896:	df 93       	push	r29
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9898:	28 2f       	mov	r18, r24
    989a:	30 e0       	ldi	r19, 0x00	; 0

    tl_get_raw(iii, prot_state_ptr->response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    989c:	94 e3       	ldi	r25, 0x34	; 52
    989e:	92 9f       	mul	r25, r18
    98a0:	a0 01       	movw	r20, r0
    98a2:	93 9f       	mul	r25, r19
    98a4:	50 0d       	add	r21, r0
    98a6:	11 24       	eor	r1, r1
    98a8:	4d 56       	subi	r20, 0x6D	; 109
    98aa:	58 49       	sbci	r21, 0x98	; 152
    98ac:	96 e1       	ldi	r25, 0x16	; 22
    98ae:	92 9f       	mul	r25, r18
    98b0:	e0 01       	movw	r28, r0
    98b2:	93 9f       	mul	r25, r19
    98b4:	d0 0d       	add	r29, r0
    98b6:	11 24       	eor	r1, r1
    98b8:	c9 53       	subi	r28, 0x39	; 57
    98ba:	d8 49       	sbci	r29, 0x98	; 152
    98bc:	6a 81       	ldd	r22, Y+2	; 0x02
    98be:	7b 81       	ldd	r23, Y+3	; 0x03
    98c0:	20 e0       	ldi	r18, 0x00	; 0
    98c2:	0e 94 00 4c 	call	0x9800	; 0x9800 <tl_get_raw>
    prot_state_ptr->response_length = 8U;
    98c6:	88 e0       	ldi	r24, 0x08	; 8
    98c8:	8c 83       	std	Y+4, r24	; 0x04
}
    98ca:	df 91       	pop	r29
    98cc:	cf 91       	pop	r28
    98ce:	08 95       	ret

000098d0 <lin_tl_get_pdu>:
 * Implements    : lin_tl_get_pdu_Activity
 *END**************************************************************************/
static void lin_tl_get_pdu(l_ifc_handle iii)
{
    /* Get data from tx queue */
    tl_get_raw(iii, g_lin_protocol_state_array[iii].response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    98d0:	28 2f       	mov	r18, r24
    98d2:	30 e0       	ldi	r19, 0x00	; 0
    98d4:	94 e3       	ldi	r25, 0x34	; 52
    98d6:	92 9f       	mul	r25, r18
    98d8:	a0 01       	movw	r20, r0
    98da:	93 9f       	mul	r25, r19
    98dc:	50 0d       	add	r21, r0
    98de:	11 24       	eor	r1, r1
    98e0:	4d 56       	subi	r20, 0x6D	; 109
    98e2:	58 49       	sbci	r21, 0x98	; 152
    98e4:	96 e1       	ldi	r25, 0x16	; 22
    98e6:	92 9f       	mul	r25, r18
    98e8:	f0 01       	movw	r30, r0
    98ea:	93 9f       	mul	r25, r19
    98ec:	f0 0d       	add	r31, r0
    98ee:	11 24       	eor	r1, r1
    98f0:	e9 53       	subi	r30, 0x39	; 57
    98f2:	f8 49       	sbci	r31, 0x98	; 152
    98f4:	62 81       	ldd	r22, Z+2	; 0x02
    98f6:	73 81       	ldd	r23, Z+3	; 0x03
    98f8:	20 e0       	ldi	r18, 0x00	; 0
    98fa:	0e 94 00 4c 	call	0x9800	; 0x9800 <tl_get_raw>
    98fe:	08 95       	ret

00009900 <lin_tl_callback_handler>:
 * Implements    : lin_tl_callback_handler_Activity
 *END**************************************************************************/
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    9900:	0f 93       	push	r16
    9902:	1f 93       	push	r17
    9904:	e6 2f       	mov	r30, r22
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9906:	68 2f       	mov	r22, r24
    9908:	70 e0       	ldi	r23, 0x00	; 0
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;

    switch (tl_event_id)
    990a:	0e 2f       	mov	r16, r30
    990c:	10 e0       	ldi	r17, 0x00	; 0
    990e:	08 30       	cpi	r16, 0x08	; 8
    9910:	11 05       	cpc	r17, r1
    9912:	08 f0       	brcs	.+2      	; 0x9916 <lin_tl_callback_handler+0x16>
    9914:	61 c0       	rjmp	.+194    	; 0x99d8 <lin_tl_callback_handler+0xd8>
    9916:	f8 01       	movw	r30, r16
    9918:	e9 56       	subi	r30, 0x69	; 105
    991a:	fb 4d       	sbci	r31, 0xDB	; 219
    991c:	0c 94 03 5f 	jmp	0xbe06	; 0xbe06 <__tablejump2__>
    {
        case TL_RECEIVE_MESSAGE:
            /* If ld_receive_message is called and first frame in multi PDU is not transmitted */
            if ((tl_desc_ptr->rx_msg_status == LD_IN_PROGRESS) && (tl_desc_ptr->FF_pdu_received == false))
    9920:	84 e3       	ldi	r24, 0x34	; 52
    9922:	86 9f       	mul	r24, r22
    9924:	f0 01       	movw	r30, r0
    9926:	87 9f       	mul	r24, r23
    9928:	f0 0d       	add	r31, r0
    992a:	11 24       	eor	r1, r1
    992c:	ed 56       	subi	r30, 0x6D	; 109
    992e:	f8 49       	sbci	r31, 0x98	; 152
    9930:	86 89       	ldd	r24, Z+22	; 0x16
    9932:	81 30       	cpi	r24, 0x01	; 1
    9934:	09 f0       	breq	.+2      	; 0x9938 <lin_tl_callback_handler+0x38>
    9936:	52 c0       	rjmp	.+164    	; 0x99dc <lin_tl_callback_handler+0xdc>
    9938:	84 e3       	ldi	r24, 0x34	; 52
    993a:	86 9f       	mul	r24, r22
    993c:	f0 01       	movw	r30, r0
    993e:	87 9f       	mul	r24, r23
    9940:	f0 0d       	add	r31, r0
    9942:	11 24       	eor	r1, r1
    9944:	ed 56       	subi	r30, 0x6D	; 109
    9946:	f8 49       	sbci	r31, 0x98	; 152
    9948:	85 a5       	ldd	r24, Z+45	; 0x2d
    994a:	81 11       	cpse	r24, r1
    994c:	49 c0       	rjmp	.+146    	; 0x99e0 <lin_tl_callback_handler+0xe0>
            {
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
    994e:	84 e3       	ldi	r24, 0x34	; 52
    9950:	86 9f       	mul	r24, r22
    9952:	f0 01       	movw	r30, r0
    9954:	87 9f       	mul	r24, r23
    9956:	f0 0d       	add	r31, r0
    9958:	11 24       	eor	r1, r1
    995a:	ed 56       	subi	r30, 0x6D	; 109
    995c:	f8 49       	sbci	r31, 0x98	; 152
    995e:	81 e0       	ldi	r24, 0x01	; 1
    9960:	84 a7       	std	Z+44, r24	; 0x2c
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9962:	80 e0       	ldi	r24, 0x00	; 0
    9964:	42 c0       	rjmp	.+132    	; 0x99ea <lin_tl_callback_handler+0xea>
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
            }
            break;
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
    9966:	0e 94 4a 4c 	call	0x9894	; 0x9894 <lin_tl_make_master_request_pdu>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    996a:	80 e0       	ldi	r24, 0x00	; 0
              tl_desc_ptr->ld_return_data = true;
            }
            break;
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
            break;
    996c:	3e c0       	rjmp	.+124    	; 0x99ea <lin_tl_callback_handler+0xea>
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
    996e:	94 e3       	ldi	r25, 0x34	; 52
    9970:	96 9f       	mul	r25, r22
    9972:	f0 01       	movw	r30, r0
    9974:	97 9f       	mul	r25, r23
    9976:	f0 0d       	add	r31, r0
    9978:	11 24       	eor	r1, r1
    997a:	ed 56       	subi	r30, 0x6D	; 109
    997c:	f8 49       	sbci	r31, 0x98	; 152
    997e:	92 a5       	ldd	r25, Z+42	; 0x2a
    9980:	99 23       	and	r25, r25
    9982:	81 f1       	breq	.+96     	; 0x99e4 <lin_tl_callback_handler+0xe4>
    9984:	24 e3       	ldi	r18, 0x34	; 52
    9986:	26 9f       	mul	r18, r22
    9988:	f0 01       	movw	r30, r0
    998a:	27 9f       	mul	r18, r23
    998c:	f0 0d       	add	r31, r0
    998e:	11 24       	eor	r1, r1
    9990:	ed 56       	subi	r30, 0x6D	; 109
    9992:	f8 49       	sbci	r31, 0x98	; 152
    9994:	23 a5       	ldd	r18, Z+43	; 0x2b
    9996:	23 30       	cpi	r18, 0x03	; 3
    9998:	39 f1       	breq	.+78     	; 0x99e8 <lin_tl_callback_handler+0xe8>
            {
                tl_desc_ptr->slave_resp_cnt--;
    999a:	24 e3       	ldi	r18, 0x34	; 52
    999c:	26 9f       	mul	r18, r22
    999e:	f0 01       	movw	r30, r0
    99a0:	27 9f       	mul	r18, r23
    99a2:	f0 0d       	add	r31, r0
    99a4:	11 24       	eor	r1, r1
    99a6:	ed 56       	subi	r30, 0x6D	; 109
    99a8:	f8 49       	sbci	r31, 0x98	; 152
    99aa:	91 50       	subi	r25, 0x01	; 1
    99ac:	92 a7       	std	Z+42, r25	; 0x2a
                lin_tl_get_pdu(iii);
    99ae:	0e 94 68 4c 	call	0x98d0	; 0x98d0 <lin_tl_get_pdu>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99b2:	80 e0       	ldi	r24, 0x00	; 0
            break;
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
            {
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
    99b4:	1a c0       	rjmp	.+52     	; 0x99ea <lin_tl_callback_handler+0xea>
            {
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
    99b6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <lin_tl_handler_tx_completed>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99ba:	80 e0       	ldi	r24, 0x00	; 0
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
            break;
    99bc:	16 c0       	rjmp	.+44     	; 0x99ea <lin_tl_callback_handler+0xea>
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
    99be:	0e 94 75 4b 	call	0x96ea	; 0x96ea <lin_tl_handler_rx_completed>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99c2:	80 e0       	ldi	r24, 0x00	; 0
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
            break;
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
            break;
    99c4:	12 c0       	rjmp	.+36     	; 0x99ea <lin_tl_callback_handler+0xea>
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
    99c6:	64 2f       	mov	r22, r20
    99c8:	0e 94 d3 46 	call	0x8da6	; 0x8da6 <lin_tl_handler_error>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99cc:	80 e0       	ldi	r24, 0x00	; 0
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
            break;
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
            break;
    99ce:	0d c0       	rjmp	.+26     	; 0x99ea <lin_tl_callback_handler+0xea>
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
    99d0:	0e 94 67 46 	call	0x8cce	; 0x8cce <lin_tl_handle_timeout>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99d4:	80 e0       	ldi	r24, 0x00	; 0
            lin_tl_handler_error(iii, id);
            break;
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
            break;
    99d6:	09 c0       	rjmp	.+18     	; 0x99ea <lin_tl_callback_handler+0xea>
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    99d8:	80 e0       	ldi	r24, 0x00	; 0
    99da:	07 c0       	rjmp	.+14     	; 0x99ea <lin_tl_callback_handler+0xea>
    99dc:	80 e0       	ldi	r24, 0x00	; 0
    99de:	05 c0       	rjmp	.+10     	; 0x99ea <lin_tl_callback_handler+0xea>
    99e0:	80 e0       	ldi	r24, 0x00	; 0
    99e2:	03 c0       	rjmp	.+6      	; 0x99ea <lin_tl_callback_handler+0xea>
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
            }
            else
            {
                ret_val = TL_ACTION_ID_IGNORE;
    99e4:	81 e0       	ldi	r24, 0x01	; 1
    99e6:	01 c0       	rjmp	.+2      	; 0x99ea <lin_tl_callback_handler+0xea>
    99e8:	81 e0       	ldi	r24, 0x01	; 1
            /* Do nothing */
            break;
    }

    return ret_val;
}
    99ea:	1f 91       	pop	r17
    99ec:	0f 91       	pop	r16
    99ee:	08 95       	ret

000099f0 <touch_ptc_pin_config>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
    99f0:	e4 e3       	ldi	r30, 0x34	; 52
    99f2:	f4 e0       	ldi	r31, 0x04	; 4
    99f4:	80 81       	ld	r24, Z
    99f6:	87 7f       	andi	r24, 0xF7	; 247
    99f8:	80 83       	st	Z, r24
    99fa:	80 81       	ld	r24, Z
    99fc:	88 7f       	andi	r24, 0xF8	; 248
    99fe:	84 60       	ori	r24, 0x04	; 4
    9a00:	80 83       	st	Z, r24
    9a02:	e5 e3       	ldi	r30, 0x35	; 53
    9a04:	f4 e0       	ldi	r31, 0x04	; 4
    9a06:	80 81       	ld	r24, Z
    9a08:	87 7f       	andi	r24, 0xF7	; 247
    9a0a:	80 83       	st	Z, r24
    9a0c:	80 81       	ld	r24, Z
    9a0e:	88 7f       	andi	r24, 0xF8	; 248
    9a10:	84 60       	ori	r24, 0x04	; 4
    9a12:	80 83       	st	Z, r24
    9a14:	e7 e1       	ldi	r30, 0x17	; 23
    9a16:	f4 e0       	ldi	r31, 0x04	; 4
    9a18:	80 81       	ld	r24, Z
    9a1a:	87 7f       	andi	r24, 0xF7	; 247
    9a1c:	80 83       	st	Z, r24
    9a1e:	80 81       	ld	r24, Z
    9a20:	88 7f       	andi	r24, 0xF8	; 248
    9a22:	84 60       	ori	r24, 0x04	; 4
    9a24:	80 83       	st	Z, r24
    9a26:	e7 e7       	ldi	r30, 0x77	; 119
    9a28:	f4 e0       	ldi	r31, 0x04	; 4
    9a2a:	80 81       	ld	r24, Z
    9a2c:	87 7f       	andi	r24, 0xF7	; 247
    9a2e:	80 83       	st	Z, r24
    9a30:	80 81       	ld	r24, Z
    9a32:	88 7f       	andi	r24, 0xF8	; 248
    9a34:	84 60       	ori	r24, 0x04	; 4
    9a36:	80 83       	st	Z, r24
    9a38:	e4 e9       	ldi	r30, 0x94	; 148
    9a3a:	f4 e0       	ldi	r31, 0x04	; 4
    9a3c:	80 81       	ld	r24, Z
    9a3e:	87 7f       	andi	r24, 0xF7	; 247
    9a40:	80 83       	st	Z, r24
    9a42:	80 81       	ld	r24, Z
    9a44:	88 7f       	andi	r24, 0xF8	; 248
    9a46:	84 60       	ori	r24, 0x04	; 4
    9a48:	80 83       	st	Z, r24
    9a4a:	e2 e7       	ldi	r30, 0x72	; 114
    9a4c:	f4 e0       	ldi	r31, 0x04	; 4
    9a4e:	80 81       	ld	r24, Z
    9a50:	87 7f       	andi	r24, 0xF7	; 247
    9a52:	80 83       	st	Z, r24
    9a54:	80 81       	ld	r24, Z
    9a56:	88 7f       	andi	r24, 0xF8	; 248
    9a58:	84 60       	ori	r24, 0x04	; 4
    9a5a:	80 83       	st	Z, r24
    9a5c:	e5 e1       	ldi	r30, 0x15	; 21
    9a5e:	f4 e0       	ldi	r31, 0x04	; 4
    9a60:	80 81       	ld	r24, Z
    9a62:	87 7f       	andi	r24, 0xF7	; 247
    9a64:	80 83       	st	Z, r24
    9a66:	80 81       	ld	r24, Z
    9a68:	88 7f       	andi	r24, 0xF8	; 248
    9a6a:	84 60       	ori	r24, 0x04	; 4
    9a6c:	80 83       	st	Z, r24
    9a6e:	e4 e1       	ldi	r30, 0x14	; 20
    9a70:	f4 e0       	ldi	r31, 0x04	; 4
    9a72:	80 81       	ld	r24, Z
    9a74:	87 7f       	andi	r24, 0xF7	; 247
    9a76:	80 83       	st	Z, r24
    9a78:	80 81       	ld	r24, Z
    9a7a:	88 7f       	andi	r24, 0xF8	; 248
    9a7c:	84 60       	ori	r24, 0x04	; 4
    9a7e:	80 83       	st	Z, r24
    9a80:	e0 e3       	ldi	r30, 0x30	; 48
    9a82:	f4 e0       	ldi	r31, 0x04	; 4
    9a84:	80 81       	ld	r24, Z
    9a86:	87 7f       	andi	r24, 0xF7	; 247
    9a88:	80 83       	st	Z, r24
    9a8a:	80 81       	ld	r24, Z
    9a8c:	88 7f       	andi	r24, 0xF8	; 248
    9a8e:	84 60       	ori	r24, 0x04	; 4
    9a90:	80 83       	st	Z, r24
    9a92:	e1 e3       	ldi	r30, 0x31	; 49
    9a94:	f4 e0       	ldi	r31, 0x04	; 4
    9a96:	80 81       	ld	r24, Z
    9a98:	87 7f       	andi	r24, 0xF7	; 247
    9a9a:	80 83       	st	Z, r24
    9a9c:	80 81       	ld	r24, Z
    9a9e:	88 7f       	andi	r24, 0xF8	; 248
    9aa0:	84 60       	ori	r24, 0x04	; 4
    9aa2:	80 83       	st	Z, r24
    9aa4:	e2 e3       	ldi	r30, 0x32	; 50
    9aa6:	f4 e0       	ldi	r31, 0x04	; 4
    9aa8:	80 81       	ld	r24, Z
    9aaa:	87 7f       	andi	r24, 0xF7	; 247
    9aac:	80 83       	st	Z, r24
    9aae:	80 81       	ld	r24, Z
    9ab0:	88 7f       	andi	r24, 0xF8	; 248
    9ab2:	84 60       	ori	r24, 0x04	; 4
    9ab4:	80 83       	st	Z, r24
    9ab6:	e3 e3       	ldi	r30, 0x33	; 51
    9ab8:	f4 e0       	ldi	r31, 0x04	; 4
    9aba:	80 81       	ld	r24, Z
    9abc:	87 7f       	andi	r24, 0xF7	; 247
    9abe:	80 83       	st	Z, r24
    9ac0:	80 81       	ld	r24, Z
    9ac2:	88 7f       	andi	r24, 0xF8	; 248
    9ac4:	84 60       	ori	r24, 0x04	; 4
    9ac6:	80 83       	st	Z, r24
    9ac8:	e6 e1       	ldi	r30, 0x16	; 22
    9aca:	f4 e0       	ldi	r31, 0x04	; 4
    9acc:	80 81       	ld	r24, Z
    9ace:	87 7f       	andi	r24, 0xF7	; 247
    9ad0:	80 83       	st	Z, r24
    9ad2:	80 81       	ld	r24, Z
    9ad4:	88 7f       	andi	r24, 0xF8	; 248
    9ad6:	84 60       	ori	r24, 0x04	; 4
    9ad8:	80 83       	st	Z, r24
    9ada:	e0 e7       	ldi	r30, 0x70	; 112
    9adc:	f4 e0       	ldi	r31, 0x04	; 4
    9ade:	80 81       	ld	r24, Z
    9ae0:	87 7f       	andi	r24, 0xF7	; 247
    9ae2:	80 83       	st	Z, r24
    9ae4:	80 81       	ld	r24, Z
    9ae6:	88 7f       	andi	r24, 0xF8	; 248
    9ae8:	84 60       	ori	r24, 0x04	; 4
    9aea:	80 83       	st	Z, r24
    9aec:	e1 e7       	ldi	r30, 0x71	; 113
    9aee:	f4 e0       	ldi	r31, 0x04	; 4
    9af0:	80 81       	ld	r24, Z
    9af2:	87 7f       	andi	r24, 0xF7	; 247
    9af4:	80 83       	st	Z, r24
    9af6:	80 81       	ld	r24, Z
    9af8:	88 7f       	andi	r24, 0xF8	; 248
    9afa:	84 60       	ori	r24, 0x04	; 4
    9afc:	80 83       	st	Z, r24
    9afe:	e7 e3       	ldi	r30, 0x37	; 55
    9b00:	f4 e0       	ldi	r31, 0x04	; 4
    9b02:	80 81       	ld	r24, Z
    9b04:	87 7f       	andi	r24, 0xF7	; 247
    9b06:	80 83       	st	Z, r24
    9b08:	80 81       	ld	r24, Z
    9b0a:	88 7f       	andi	r24, 0xF8	; 248
    9b0c:	84 60       	ori	r24, 0x04	; 4
    9b0e:	80 83       	st	Z, r24
    9b10:	e6 e3       	ldi	r30, 0x36	; 54
    9b12:	f4 e0       	ldi	r31, 0x04	; 4
    9b14:	80 81       	ld	r24, Z
    9b16:	87 7f       	andi	r24, 0xF7	; 247
    9b18:	80 83       	st	Z, r24
    9b1a:	80 81       	ld	r24, Z
    9b1c:	88 7f       	andi	r24, 0xF8	; 248
    9b1e:	84 60       	ori	r24, 0x04	; 4
    9b20:	80 83       	st	Z, r24
    9b22:	e3 e7       	ldi	r30, 0x73	; 115
    9b24:	f4 e0       	ldi	r31, 0x04	; 4
    9b26:	80 81       	ld	r24, Z
    9b28:	87 7f       	andi	r24, 0xF7	; 247
    9b2a:	80 83       	st	Z, r24
    9b2c:	80 81       	ld	r24, Z
    9b2e:	88 7f       	andi	r24, 0xF8	; 248
    9b30:	84 60       	ori	r24, 0x04	; 4
    9b32:	80 83       	st	Z, r24
    9b34:	e4 e7       	ldi	r30, 0x74	; 116
    9b36:	f4 e0       	ldi	r31, 0x04	; 4
    9b38:	80 81       	ld	r24, Z
    9b3a:	87 7f       	andi	r24, 0xF7	; 247
    9b3c:	80 83       	st	Z, r24
    9b3e:	80 81       	ld	r24, Z
    9b40:	88 7f       	andi	r24, 0xF8	; 248
    9b42:	84 60       	ori	r24, 0x04	; 4
    9b44:	80 83       	st	Z, r24
    9b46:	e5 e7       	ldi	r30, 0x75	; 117
    9b48:	f4 e0       	ldi	r31, 0x04	; 4
    9b4a:	80 81       	ld	r24, Z
    9b4c:	87 7f       	andi	r24, 0xF7	; 247
    9b4e:	80 83       	st	Z, r24
    9b50:	80 81       	ld	r24, Z
    9b52:	88 7f       	andi	r24, 0xF8	; 248
    9b54:	84 60       	ori	r24, 0x04	; 4
    9b56:	80 83       	st	Z, r24
    9b58:	08 95       	ret

00009b5a <qtm_measure_complete_callback>:
    9b5a:	81 e0       	ldi	r24, 0x01	; 1
    9b5c:	80 93 53 67 	sts	0x6753, r24	; 0x806753 <touch_postprocess_request>
    9b60:	08 95       	ret

00009b62 <qtm_error_callback>:
    9b62:	8f 5f       	subi	r24, 0xFF	; 255
    9b64:	80 93 51 67 	sts	0x6751, r24	; 0x806751 <module_error_code>
    9b68:	08 95       	ret

00009b6a <touch_sensors_config>:
    9b6a:	cf 93       	push	r28
    9b6c:	df 93       	push	r29
    9b6e:	81 e5       	ldi	r24, 0x51	; 81
    9b70:	91 e6       	ldi	r25, 0x61	; 97
    9b72:	0e 94 a3 5c 	call	0xb946	; 0xb946 <qtm_ptc_init_acquisition_module>
    9b76:	8a e5       	ldi	r24, 0x5A	; 90
    9b78:	98 e6       	ldi	r25, 0x68	; 104
    9b7a:	0e 94 5a 5d 	call	0xbab4	; 0xbab4 <qtm_ptc_qtlib_assign_signal_memory>
    9b7e:	c0 e0       	ldi	r28, 0x00	; 0
    9b80:	d0 e0       	ldi	r29, 0x00	; 0
    9b82:	0b c0       	rjmp	.+22     	; 0x9b9a <touch_sensors_config+0x30>
    9b84:	be 01       	movw	r22, r28
    9b86:	81 e5       	ldi	r24, 0x51	; 81
    9b88:	91 e6       	ldi	r25, 0x61	; 97
    9b8a:	0e 94 d4 5d 	call	0xbba8	; 0xbba8 <qtm_enable_sensor_node>
    9b8e:	be 01       	movw	r22, r28
    9b90:	81 e5       	ldi	r24, 0x51	; 81
    9b92:	91 e6       	ldi	r25, 0x61	; 97
    9b94:	0e 94 f3 5d 	call	0xbbe6	; 0xbbe6 <qtm_calibrate_sensor_node>
    9b98:	21 96       	adiw	r28, 0x01	; 1
    9b9a:	c4 31       	cpi	r28, 0x14	; 20
    9b9c:	d1 05       	cpc	r29, r1
    9b9e:	90 f3       	brcs	.-28     	; 0x9b84 <touch_sensors_config+0x1a>
    9ba0:	c0 e0       	ldi	r28, 0x00	; 0
    9ba2:	d0 e0       	ldi	r29, 0x00	; 0
    9ba4:	0f c0       	rjmp	.+30     	; 0x9bc4 <touch_sensors_config+0x5a>
    9ba6:	ae 01       	movw	r20, r28
    9ba8:	44 0f       	add	r20, r20
    9baa:	55 1f       	adc	r21, r21
    9bac:	44 0f       	add	r20, r20
    9bae:	55 1f       	adc	r21, r21
    9bb0:	4c 0f       	add	r20, r28
    9bb2:	5d 1f       	adc	r21, r29
    9bb4:	4c 51       	subi	r20, 0x1C	; 28
    9bb6:	58 49       	sbci	r21, 0x98	; 152
    9bb8:	6c 2f       	mov	r22, r28
    9bba:	83 e0       	ldi	r24, 0x03	; 3
    9bbc:	91 e6       	ldi	r25, 0x61	; 97
    9bbe:	0e 94 42 51 	call	0xa284	; 0xa284 <qtm_init_sensor_key>
    9bc2:	21 96       	adiw	r28, 0x01	; 1
    9bc4:	c4 31       	cpi	r28, 0x14	; 20
    9bc6:	d1 05       	cpc	r29, r1
    9bc8:	70 f3       	brcs	.-36     	; 0x9ba6 <touch_sensors_config+0x3c>
    9bca:	88 ee       	ldi	r24, 0xE8	; 232
    9bcc:	90 e6       	ldi	r25, 0x60	; 96
    9bce:	0e 94 30 55 	call	0xaa60	; 0xaa60 <qtm_init_scroller_module>
    9bd2:	df 91       	pop	r29
    9bd4:	cf 91       	pop	r28
    9bd6:	08 95       	ret

00009bd8 <Timer_set_period>:
    9bd8:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    9bdc:	92 fd       	sbrc	r25, 2
    9bde:	fc cf       	rjmp	.-8      	; 0x9bd8 <Timer_set_period>
    9be0:	90 e0       	ldi	r25, 0x00	; 0
    9be2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x7f014a>
    9be6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x7f014b>
    9bea:	08 95       	ret

00009bec <touch_init>:
    9bec:	80 e2       	ldi	r24, 0x20	; 32
    9bee:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Timer_set_period>
    9bf2:	0e 94 f8 4c 	call	0x99f0	; 0x99f0 <touch_ptc_pin_config>
    9bf6:	0e 94 b5 4d 	call	0x9b6a	; 0x9b6a <touch_sensors_config>
    9bfa:	08 95       	ret

00009bfc <touch_process>:
    9bfc:	80 91 54 67 	lds	r24, 0x6754	; 0x806754 <time_to_measure_touch_flag>
    9c00:	81 30       	cpi	r24, 0x01	; 1
    9c02:	51 f4       	brne	.+20     	; 0x9c18 <touch_process+0x1c>
    9c04:	6d ea       	ldi	r22, 0xAD	; 173
    9c06:	7d e4       	ldi	r23, 0x4D	; 77
    9c08:	81 e5       	ldi	r24, 0x51	; 81
    9c0a:	91 e6       	ldi	r25, 0x61	; 97
    9c0c:	0e 94 64 5d 	call	0xbac8	; 0xbac8 <qtm_ptc_start_measurement_seq>
    9c10:	81 11       	cpse	r24, r1
    9c12:	02 c0       	rjmp	.+4      	; 0x9c18 <touch_process+0x1c>
    9c14:	10 92 54 67 	sts	0x6754, r1	; 0x806754 <time_to_measure_touch_flag>
    9c18:	80 91 53 67 	lds	r24, 0x6753	; 0x806753 <touch_postprocess_request>
    9c1c:	81 30       	cpi	r24, 0x01	; 1
    9c1e:	51 f5       	brne	.+84     	; 0x9c74 <touch_process+0x78>
    9c20:	10 92 53 67 	sts	0x6753, r1	; 0x806753 <touch_postprocess_request>
    9c24:	0e 94 21 5a 	call	0xb442	; 0xb442 <qtm_acquisition_process>
    9c28:	81 11       	cpse	r24, r1
    9c2a:	13 c0       	rjmp	.+38     	; 0x9c52 <touch_process+0x56>
    9c2c:	83 e0       	ldi	r24, 0x03	; 3
    9c2e:	91 e6       	ldi	r25, 0x61	; 97
    9c30:	0e 94 61 51 	call	0xa2c2	; 0xa2c2 <qtm_key_sensors_process>
    9c34:	88 23       	and	r24, r24
    9c36:	19 f0       	breq	.+6      	; 0x9c3e <touch_process+0x42>
    9c38:	81 e0       	ldi	r24, 0x01	; 1
    9c3a:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <qtm_error_callback>
    9c3e:	88 ee       	ldi	r24, 0xE8	; 232
    9c40:	90 e6       	ldi	r25, 0x60	; 96
    9c42:	0e 94 70 55 	call	0xaae0	; 0xaae0 <qtm_scroller_process>
    9c46:	88 23       	and	r24, r24
    9c48:	39 f0       	breq	.+14     	; 0x9c58 <touch_process+0x5c>
    9c4a:	82 e0       	ldi	r24, 0x02	; 2
    9c4c:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <qtm_error_callback>
    9c50:	03 c0       	rjmp	.+6      	; 0x9c58 <touch_process+0x5c>
    9c52:	80 e0       	ldi	r24, 0x00	; 0
    9c54:	0e 94 b1 4d 	call	0x9b62	; 0x9b62 <qtm_error_callback>
    9c58:	e0 91 03 61 	lds	r30, 0x6103	; 0x806103 <qtlib_key_set1>
    9c5c:	f0 91 04 61 	lds	r31, 0x6104	; 0x806104 <qtlib_key_set1+0x1>
    9c60:	80 81       	ld	r24, Z
    9c62:	88 23       	and	r24, r24
    9c64:	24 f4       	brge	.+8      	; 0x9c6e <touch_process+0x72>
    9c66:	81 e0       	ldi	r24, 0x01	; 1
    9c68:	80 93 54 67 	sts	0x6754, r24	; 0x806754 <time_to_measure_touch_flag>
    9c6c:	08 95       	ret
    9c6e:	81 e0       	ldi	r24, 0x01	; 1
    9c70:	80 93 52 67 	sts	0x6752, r24	; 0x806752 <measurement_done_touch>
    9c74:	08 95       	ret

00009c76 <touch_timer_handler>:
    9c76:	80 91 e3 67 	lds	r24, 0x67E3	; 0x8067e3 <interrupt_cnt>
    9c7a:	8f 5f       	subi	r24, 0xFF	; 255
    9c7c:	80 93 e3 67 	sts	0x67E3, r24	; 0x8067e3 <interrupt_cnt>
    9c80:	84 31       	cpi	r24, 0x14	; 20
    9c82:	48 f0       	brcs	.+18     	; 0x9c96 <touch_timer_handler+0x20>
    9c84:	10 92 e3 67 	sts	0x67E3, r1	; 0x8067e3 <interrupt_cnt>
    9c88:	81 e0       	ldi	r24, 0x01	; 1
    9c8a:	80 93 54 67 	sts	0x6754, r24	; 0x806754 <time_to_measure_touch_flag>
    9c8e:	84 e1       	ldi	r24, 0x14	; 20
    9c90:	90 e0       	ldi	r25, 0x00	; 0
    9c92:	0e 94 37 51 	call	0xa26e	; 0xa26e <qtm_update_qtlib_timer>
    9c96:	08 95       	ret

00009c98 <get_sensor_state>:
    9c98:	e0 91 07 61 	lds	r30, 0x6107	; 0x806107 <qtlib_key_set1+0x4>
    9c9c:	f0 91 08 61 	lds	r31, 0x6108	; 0x806108 <qtlib_key_set1+0x5>
    9ca0:	9c 01       	movw	r18, r24
    9ca2:	22 0f       	add	r18, r18
    9ca4:	33 1f       	adc	r19, r19
    9ca6:	82 0f       	add	r24, r18
    9ca8:	93 1f       	adc	r25, r19
    9caa:	88 0f       	add	r24, r24
    9cac:	99 1f       	adc	r25, r25
    9cae:	e8 0f       	add	r30, r24
    9cb0:	f9 1f       	adc	r31, r25
    9cb2:	80 81       	ld	r24, Z
    9cb4:	08 95       	ret

00009cb6 <get_scroller_state>:

uint8_t get_scroller_state(uint16_t sensor_node)
{
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].scroller_status);
    9cb6:	20 91 ec 60 	lds	r18, 0x60EC	; 0x8060ec <qtm_scroller_control1+0x4>
    9cba:	30 91 ed 60 	lds	r19, 0x60ED	; 0x8060ed <qtm_scroller_control1+0x5>
    9cbe:	fc 01       	movw	r30, r24
    9cc0:	ee 0f       	add	r30, r30
    9cc2:	ff 1f       	adc	r31, r31
    9cc4:	ee 0f       	add	r30, r30
    9cc6:	ff 1f       	adc	r31, r31
    9cc8:	ee 0f       	add	r30, r30
    9cca:	ff 1f       	adc	r31, r31
    9ccc:	8e 0f       	add	r24, r30
    9cce:	9f 1f       	adc	r25, r31
    9cd0:	f9 01       	movw	r30, r18
    9cd2:	e8 0f       	add	r30, r24
    9cd4:	f9 1f       	adc	r31, r25
}
    9cd6:	80 81       	ld	r24, Z
    9cd8:	08 95       	ret

00009cda <get_scroller_position>:

uint16_t get_scroller_position(uint16_t sensor_node)
{
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].position);
    9cda:	20 91 ec 60 	lds	r18, 0x60EC	; 0x8060ec <qtm_scroller_control1+0x4>
    9cde:	30 91 ed 60 	lds	r19, 0x60ED	; 0x8060ed <qtm_scroller_control1+0x5>
    9ce2:	fc 01       	movw	r30, r24
    9ce4:	ee 0f       	add	r30, r30
    9ce6:	ff 1f       	adc	r31, r31
    9ce8:	ee 0f       	add	r30, r30
    9cea:	ff 1f       	adc	r31, r31
    9cec:	ee 0f       	add	r30, r30
    9cee:	ff 1f       	adc	r31, r31
    9cf0:	8e 0f       	add	r24, r30
    9cf2:	9f 1f       	adc	r25, r31
    9cf4:	f9 01       	movw	r30, r18
    9cf6:	e8 0f       	add	r30, r24
    9cf8:	f9 1f       	adc	r31, r25
}
    9cfa:	85 81       	ldd	r24, Z+5	; 0x05
    9cfc:	96 81       	ldd	r25, Z+6	; 0x06
    9cfe:	08 95       	ret

00009d00 <__vector_27>:
#if defined(__ICCAVR__)
ISR(QTML_PTC_vect_iar)
#else
ISR(QTML_PTC_vect)
#endif
{
    9d00:	1f 92       	push	r1
    9d02:	0f 92       	push	r0
    9d04:	0f b6       	in	r0, 0x3f	; 63
    9d06:	0f 92       	push	r0
    9d08:	11 24       	eor	r1, r1
    9d0a:	2f 93       	push	r18
    9d0c:	3f 93       	push	r19
    9d0e:	4f 93       	push	r20
    9d10:	5f 93       	push	r21
    9d12:	6f 93       	push	r22
    9d14:	7f 93       	push	r23
    9d16:	8f 93       	push	r24
    9d18:	9f 93       	push	r25
    9d1a:	af 93       	push	r26
    9d1c:	bf 93       	push	r27
    9d1e:	ef 93       	push	r30
    9d20:	ff 93       	push	r31
	qtm_avr_da_ptc_handler_eoc();
    9d22:	0e 94 7a 5e 	call	0xbcf4	; 0xbcf4 <qtm_avr_da_ptc_handler_eoc>
}
    9d26:	ff 91       	pop	r31
    9d28:	ef 91       	pop	r30
    9d2a:	bf 91       	pop	r27
    9d2c:	af 91       	pop	r26
    9d2e:	9f 91       	pop	r25
    9d30:	8f 91       	pop	r24
    9d32:	7f 91       	pop	r23
    9d34:	6f 91       	pop	r22
    9d36:	5f 91       	pop	r21
    9d38:	4f 91       	pop	r20
    9d3a:	3f 91       	pop	r19
    9d3c:	2f 91       	pop	r18
    9d3e:	0f 90       	pop	r0
    9d40:	0f be       	out	0x3f, r0	; 63
    9d42:	0f 90       	pop	r0
    9d44:	1f 90       	pop	r1
    9d46:	18 95       	reti

00009d48 <soft_timer_create>:
} soft_timer_obj_t;

soft_timer_obj_t *g_soft_timer_head = NULL;

void soft_timer_create(soft_timer_base_t period, soft_timer_cb cb)
{
    9d48:	0f 93       	push	r16
    9d4a:	1f 93       	push	r17
    9d4c:	cf 93       	push	r28
    9d4e:	df 93       	push	r29
    9d50:	8c 01       	movw	r16, r24
    9d52:	eb 01       	movw	r28, r22
    soft_timer_obj_t *obj = NULL;
    obj = (soft_timer_obj_t *)malloc(sizeof(soft_timer_obj_t));
    9d54:	88 e0       	ldi	r24, 0x08	; 8
    9d56:	90 e0       	ldi	r25, 0x00	; 0
    9d58:	0e 94 4d 5f 	call	0xbe9a	; 0xbe9a <malloc>
    9d5c:	fc 01       	movw	r30, r24
    if (obj == NULL)
    9d5e:	89 2b       	or	r24, r25
    9d60:	99 f0       	breq	.+38     	; 0x9d88 <soft_timer_create+0x40>
    {
        return;
    }
    memset(obj, 0, sizeof(soft_timer_obj_t));
    9d62:	88 e0       	ldi	r24, 0x08	; 8
    9d64:	df 01       	movw	r26, r30
    9d66:	1d 92       	st	X+, r1
    9d68:	8a 95       	dec	r24
    9d6a:	e9 f7       	brne	.-6      	; 0x9d66 <soft_timer_create+0x1e>

    obj->period = period;
    9d6c:	02 83       	std	Z+2, r16	; 0x02
    9d6e:	13 83       	std	Z+3, r17	; 0x03
    obj->cb = cb;
    9d70:	c4 83       	std	Z+4, r28	; 0x04
    9d72:	d5 83       	std	Z+5, r29	; 0x05
    obj->next = g_soft_timer_head;
    9d74:	80 91 55 67 	lds	r24, 0x6755	; 0x806755 <g_soft_timer_head>
    9d78:	90 91 56 67 	lds	r25, 0x6756	; 0x806756 <g_soft_timer_head+0x1>
    9d7c:	86 83       	std	Z+6, r24	; 0x06
    9d7e:	97 83       	std	Z+7, r25	; 0x07
    g_soft_timer_head = obj;
    9d80:	e0 93 55 67 	sts	0x6755, r30	; 0x806755 <g_soft_timer_head>
    9d84:	f0 93 56 67 	sts	0x6756, r31	; 0x806756 <g_soft_timer_head+0x1>
}
    9d88:	df 91       	pop	r29
    9d8a:	cf 91       	pop	r28
    9d8c:	1f 91       	pop	r17
    9d8e:	0f 91       	pop	r16
    9d90:	08 95       	ret

00009d92 <soft_timer_run>:

void soft_timer_run(void)
{
    9d92:	cf 93       	push	r28
    9d94:	df 93       	push	r29
    soft_timer_obj_t *obj = g_soft_timer_head;
    9d96:	c0 91 55 67 	lds	r28, 0x6755	; 0x806755 <g_soft_timer_head>
    9d9a:	d0 91 56 67 	lds	r29, 0x6756	; 0x806756 <g_soft_timer_head+0x1>
    for (; obj != NULL; obj = obj->next)
    9d9e:	16 c0       	rjmp	.+44     	; 0x9dcc <soft_timer_run+0x3a>
    {
        if ((soft_timer_base_t)(g_soft_timer_ticks - obj->cnt) >= obj->period)
    9da0:	80 91 62 67 	lds	r24, 0x6762	; 0x806762 <g_soft_timer_ticks>
    9da4:	90 91 63 67 	lds	r25, 0x6763	; 0x806763 <g_soft_timer_ticks+0x1>
    9da8:	28 81       	ld	r18, Y
    9daa:	39 81       	ldd	r19, Y+1	; 0x01
    9dac:	ac 01       	movw	r20, r24
    9dae:	42 1b       	sub	r20, r18
    9db0:	53 0b       	sbc	r21, r19
    9db2:	2a 81       	ldd	r18, Y+2	; 0x02
    9db4:	3b 81       	ldd	r19, Y+3	; 0x03
    9db6:	42 17       	cp	r20, r18
    9db8:	53 07       	cpc	r21, r19
    9dba:	28 f0       	brcs	.+10     	; 0x9dc6 <soft_timer_run+0x34>
        {
            obj->cnt = g_soft_timer_ticks;
    9dbc:	88 83       	st	Y, r24
    9dbe:	99 83       	std	Y+1, r25	; 0x01
            obj->cb();
    9dc0:	ec 81       	ldd	r30, Y+4	; 0x04
    9dc2:	fd 81       	ldd	r31, Y+5	; 0x05
    9dc4:	09 95       	icall
}

void soft_timer_run(void)
{
    soft_timer_obj_t *obj = g_soft_timer_head;
    for (; obj != NULL; obj = obj->next)
    9dc6:	0e 80       	ldd	r0, Y+6	; 0x06
    9dc8:	df 81       	ldd	r29, Y+7	; 0x07
    9dca:	c0 2d       	mov	r28, r0
    9dcc:	20 97       	sbiw	r28, 0x00	; 0
    9dce:	41 f7       	brne	.-48     	; 0x9da0 <soft_timer_run+0xe>
        {
            obj->cnt = g_soft_timer_ticks;
            obj->cb();
        }
    }
    9dd0:	df 91       	pop	r29
    9dd2:	cf 91       	pop	r28
    9dd4:	08 95       	ret

00009dd6 <ADC_0_init>:
 *
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
    9dd6:	e0 e0       	ldi	r30, 0x00	; 0
    9dd8:	f6 e0       	ldi	r31, 0x06	; 6
    9dda:	87 e0       	ldi	r24, 0x07	; 7
    9ddc:	81 83       	std	Z+1, r24	; 0x01
    9dde:	81 e0       	ldi	r24, 0x01	; 1
    9de0:	84 87       	std	Z+12, r24	; 0x0c
    9de2:	9f e7       	ldi	r25, 0x7F	; 127
    9de4:	95 83       	std	Z+5, r25	; 0x05
    9de6:	80 83       	st	Z, r24
    9de8:	80 e0       	ldi	r24, 0x00	; 0
    9dea:	08 95       	ret

00009dec <__vector_24>:
}

ISR(ADC0_RESRDY_vect)
{
    9dec:	1f 92       	push	r1
    9dee:	0f 92       	push	r0
    9df0:	0f b6       	in	r0, 0x3f	; 63
    9df2:	0f 92       	push	r0
    9df4:	11 24       	eor	r1, r1
    9df6:	2f 93       	push	r18
    9df8:	3f 93       	push	r19
    9dfa:	4f 93       	push	r20
    9dfc:	5f 93       	push	r21
    9dfe:	6f 93       	push	r22
    9e00:	7f 93       	push	r23
    9e02:	8f 93       	push	r24
    9e04:	9f 93       	push	r25
    9e06:	af 93       	push	r26
    9e08:	bf 93       	push	r27
    9e0a:	ef 93       	push	r30
    9e0c:	ff 93       	push	r31
	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
    9e0e:	e0 e0       	ldi	r30, 0x00	; 0
    9e10:	f6 e0       	ldi	r31, 0x06	; 6
    9e12:	85 85       	ldd	r24, Z+13	; 0x0d
    9e14:	81 60       	ori	r24, 0x01	; 1
    9e16:	85 87       	std	Z+13, r24	; 0x0d

	if (ADC_0_cb != NULL) {
    9e18:	e0 91 57 67 	lds	r30, 0x6757	; 0x806757 <ADC_0_cb>
    9e1c:	f0 91 58 67 	lds	r31, 0x6758	; 0x806758 <ADC_0_cb+0x1>
    9e20:	30 97       	sbiw	r30, 0x00	; 0
    9e22:	09 f0       	breq	.+2      	; 0x9e26 <__vector_24+0x3a>
		ADC_0_cb();
    9e24:	09 95       	icall
	}
}
    9e26:	ff 91       	pop	r31
    9e28:	ef 91       	pop	r30
    9e2a:	bf 91       	pop	r27
    9e2c:	af 91       	pop	r26
    9e2e:	9f 91       	pop	r25
    9e30:	8f 91       	pop	r24
    9e32:	7f 91       	pop	r23
    9e34:	6f 91       	pop	r22
    9e36:	5f 91       	pop	r21
    9e38:	4f 91       	pop	r20
    9e3a:	3f 91       	pop	r19
    9e3c:	2f 91       	pop	r18
    9e3e:	0f 90       	pop	r0
    9e40:	0f be       	out	0x3f, r0	; 63
    9e42:	0f 90       	pop	r0
    9e44:	1f 90       	pop	r1
    9e46:	18 95       	reti

00009e48 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    9e48:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    9e4c:	80 e0       	ldi	r24, 0x00	; 0
    9e4e:	08 95       	ret

00009e50 <CLKCTRL_init>:
    9e50:	44 e2       	ldi	r20, 0x24	; 36
    9e52:	68 ed       	ldi	r22, 0xD8	; 216
    9e54:	88 e6       	ldi	r24, 0x68	; 104
    9e56:	90 e0       	ldi	r25, 0x00	; 0
    9e58:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    9e5c:	80 e0       	ldi	r24, 0x00	; 0
    9e5e:	08 95       	ret

00009e60 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    9e60:	78 94       	sei

	return 0;
}
    9e62:	80 e0       	ldi	r24, 0x00	; 0
    9e64:	08 95       	ret

00009e66 <DAC_0_init>:
 *
 * \return Nothing
 */
void DAC_0_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
    9e66:	e0 ea       	ldi	r30, 0xA0	; 160
    9e68:	f6 e0       	ldi	r31, 0x06	; 6
    9e6a:	12 82       	std	Z+2, r1	; 0x02
    9e6c:	13 82       	std	Z+3, r1	; 0x03
    9e6e:	81 e4       	ldi	r24, 0x41	; 65
    9e70:	80 83       	st	Z, r24
    9e72:	80 e0       	ldi	r24, 0x00	; 0
    9e74:	08 95       	ret

00009e76 <DAC_0_set_output>:
 *
 * \return Nothing
 */
void DAC_0_set_output(dac_resolution_t value)
{
	value     = value << DAC_DATA_gp;
    9e76:	00 24       	eor	r0, r0
    9e78:	96 95       	lsr	r25
    9e7a:	87 95       	ror	r24
    9e7c:	07 94       	ror	r0
    9e7e:	96 95       	lsr	r25
    9e80:	87 95       	ror	r24
    9e82:	07 94       	ror	r0
    9e84:	98 2f       	mov	r25, r24
    9e86:	80 2d       	mov	r24, r0
	value     = value & 0xFFC0;
	DAC0.DATA = value;
    9e88:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7f06a2>
    9e8c:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <__TEXT_REGION_LENGTH__+0x7f06a3>
    9e90:	08 95       	ret

00009e92 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    9e92:	80 e0       	ldi	r24, 0x00	; 0
    9e94:	08 c0       	rjmp	.+16     	; 0x9ea6 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    9e96:	e8 2f       	mov	r30, r24
    9e98:	f0 e0       	ldi	r31, 0x00	; 0
    9e9a:	e0 5f       	subi	r30, 0xF0	; 240
    9e9c:	fb 4f       	sbci	r31, 0xFB	; 251
    9e9e:	90 81       	ld	r25, Z
    9ea0:	98 60       	ori	r25, 0x08	; 8
    9ea2:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    9ea4:	8f 5f       	subi	r24, 0xFF	; 255
    9ea6:	88 30       	cpi	r24, 0x08	; 8
    9ea8:	b0 f3       	brcs	.-20     	; 0x9e96 <mcu_init+0x4>
    9eaa:	80 e0       	ldi	r24, 0x00	; 0
    9eac:	08 c0       	rjmp	.+16     	; 0x9ebe <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    9eae:	e8 2f       	mov	r30, r24
    9eb0:	f0 e0       	ldi	r31, 0x00	; 0
    9eb2:	e0 5d       	subi	r30, 0xD0	; 208
    9eb4:	fb 4f       	sbci	r31, 0xFB	; 251
    9eb6:	90 81       	ld	r25, Z
    9eb8:	98 60       	ori	r25, 0x08	; 8
    9eba:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    9ebc:	8f 5f       	subi	r24, 0xFF	; 255
    9ebe:	88 30       	cpi	r24, 0x08	; 8
    9ec0:	b0 f3       	brcs	.-20     	; 0x9eae <mcu_init+0x1c>
    9ec2:	80 e0       	ldi	r24, 0x00	; 0
    9ec4:	08 c0       	rjmp	.+16     	; 0x9ed6 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    9ec6:	e8 2f       	mov	r30, r24
    9ec8:	f0 e0       	ldi	r31, 0x00	; 0
    9eca:	e0 5b       	subi	r30, 0xB0	; 176
    9ecc:	fb 4f       	sbci	r31, 0xFB	; 251
    9ece:	90 81       	ld	r25, Z
    9ed0:	98 60       	ori	r25, 0x08	; 8
    9ed2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    9ed4:	8f 5f       	subi	r24, 0xFF	; 255
    9ed6:	88 30       	cpi	r24, 0x08	; 8
    9ed8:	b0 f3       	brcs	.-20     	; 0x9ec6 <mcu_init+0x34>
    9eda:	80 e0       	ldi	r24, 0x00	; 0
    9edc:	08 c0       	rjmp	.+16     	; 0x9eee <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    9ede:	e8 2f       	mov	r30, r24
    9ee0:	f0 e0       	ldi	r31, 0x00	; 0
    9ee2:	e0 59       	subi	r30, 0x90	; 144
    9ee4:	fb 4f       	sbci	r31, 0xFB	; 251
    9ee6:	90 81       	ld	r25, Z
    9ee8:	98 60       	ori	r25, 0x08	; 8
    9eea:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    9eec:	8f 5f       	subi	r24, 0xFF	; 255
    9eee:	88 30       	cpi	r24, 0x08	; 8
    9ef0:	b0 f3       	brcs	.-20     	; 0x9ede <mcu_init+0x4c>
    9ef2:	80 e0       	ldi	r24, 0x00	; 0
    9ef4:	08 c0       	rjmp	.+16     	; 0x9f06 <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    9ef6:	e8 2f       	mov	r30, r24
    9ef8:	f0 e0       	ldi	r31, 0x00	; 0
    9efa:	e0 57       	subi	r30, 0x70	; 112
    9efc:	fb 4f       	sbci	r31, 0xFB	; 251
    9efe:	90 81       	ld	r25, Z
    9f00:	98 60       	ori	r25, 0x08	; 8
    9f02:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    9f04:	8f 5f       	subi	r24, 0xFF	; 255
    9f06:	88 30       	cpi	r24, 0x08	; 8
    9f08:	b0 f3       	brcs	.-20     	; 0x9ef6 <mcu_init+0x64>
    9f0a:	80 e0       	ldi	r24, 0x00	; 0
    9f0c:	08 c0       	rjmp	.+16     	; 0x9f1e <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    9f0e:	e8 2f       	mov	r30, r24
    9f10:	f0 e0       	ldi	r31, 0x00	; 0
    9f12:	e0 55       	subi	r30, 0x50	; 80
    9f14:	fb 4f       	sbci	r31, 0xFB	; 251
    9f16:	90 81       	ld	r25, Z
    9f18:	98 60       	ori	r25, 0x08	; 8
    9f1a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    9f1c:	8f 5f       	subi	r24, 0xFF	; 255
    9f1e:	88 30       	cpi	r24, 0x08	; 8
    9f20:	b0 f3       	brcs	.-20     	; 0x9f0e <mcu_init+0x7c>
    9f22:	80 e0       	ldi	r24, 0x00	; 0
    9f24:	08 c0       	rjmp	.+16     	; 0x9f36 <mcu_init+0xa4>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    9f26:	e8 2f       	mov	r30, r24
    9f28:	f0 e0       	ldi	r31, 0x00	; 0
    9f2a:	e0 53       	subi	r30, 0x30	; 48
    9f2c:	fb 4f       	sbci	r31, 0xFB	; 251
    9f2e:	90 81       	ld	r25, Z
    9f30:	98 60       	ori	r25, 0x08	; 8
    9f32:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    9f34:	8f 5f       	subi	r24, 0xFF	; 255
    9f36:	88 30       	cpi	r24, 0x08	; 8
    9f38:	b0 f3       	brcs	.-20     	; 0x9f26 <mcu_init+0x94>
		*((uint8_t *)&PORTG + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    9f3a:	08 95       	ret

00009f3c <USART_1_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    9f3c:	84 b3       	in	r24, 0x14	; 20
    9f3e:	8d 7f       	andi	r24, 0xFD	; 253
    9f40:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    9f42:	e1 eb       	ldi	r30, 0xB1	; 177
    9f44:	f4 e0       	ldi	r31, 0x04	; 4
    9f46:	80 81       	ld	r24, Z
    9f48:	87 7f       	andi	r24, 0xF7	; 247
    9f4a:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    9f4c:	85 b3       	in	r24, 0x15	; 21
    9f4e:	8e 7f       	andi	r24, 0xFE	; 254
    9f50:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    9f52:	84 b3       	in	r24, 0x14	; 20
    9f54:	81 60       	ori	r24, 0x01	; 1
    9f56:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	USART_1_init();
    9f58:	0e 94 9d 50 	call	0xa13a	; 0xa13a <USART_1_init>
    9f5c:	08 95       	ret

00009f5e <USART_0_initialization>:
 */
static inline void PORTE_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
    9f5e:	80 b3       	in	r24, 0x10	; 16
    9f60:	8d 7f       	andi	r24, 0xFD	; 253
    9f62:	80 bb       	out	0x10, r24	; 16
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    9f64:	e1 e9       	ldi	r30, 0x91	; 145
    9f66:	f4 e0       	ldi	r31, 0x04	; 4
    9f68:	80 81       	ld	r24, Z
    9f6a:	87 7f       	andi	r24, 0xF7	; 247
    9f6c:	80 83       	st	Z, r24
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    9f6e:	81 b3       	in	r24, 0x11	; 17
    9f70:	8e 7f       	andi	r24, 0xFE	; 254
    9f72:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    9f74:	80 b3       	in	r24, 0x10	; 16
    9f76:	81 60       	ori	r24, 0x01	; 1
    9f78:	80 bb       	out	0x10, r24	; 16
	    // <true"> High
	    false);

	PE0_set_dir(PORT_DIR_OUT);

	USART_0_init();
    9f7a:	0e 94 91 50 	call	0xa122	; 0xa122 <USART_0_init>
    9f7e:	08 95       	ret

00009f80 <DAC_0_initialization>:
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    9f80:	e6 e7       	ldi	r30, 0x76	; 118
    9f82:	f4 e0       	ldi	r31, 0x04	; 4
    9f84:	80 81       	ld	r24, Z
    9f86:	88 7f       	andi	r24, 0xF8	; 248
    9f88:	84 60       	ori	r24, 0x04	; 4
    9f8a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    9f8c:	80 81       	ld	r24, Z
    9f8e:	87 7f       	andi	r24, 0xF7	; 247
    9f90:	80 83       	st	Z, r24
	// Disable digital input buffer
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);

	DAC_0_init();
    9f92:	0e 94 33 4f 	call	0x9e66	; 0x9e66 <DAC_0_init>
    9f96:	08 95       	ret

00009f98 <ADC_0_initialization>:
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    9f98:	e6 e9       	ldi	r30, 0x96	; 150
    9f9a:	f4 e0       	ldi	r31, 0x04	; 4
    9f9c:	80 81       	ld	r24, Z
    9f9e:	88 7f       	andi	r24, 0xF8	; 248
    9fa0:	84 60       	ori	r24, 0x04	; 4
    9fa2:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    9fa4:	80 81       	ld	r24, Z
    9fa6:	87 7f       	andi	r24, 0xF7	; 247
    9fa8:	80 83       	st	Z, r24
 */
static inline void PORTE_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    9faa:	e7 e9       	ldi	r30, 0x97	; 151
    9fac:	f4 e0       	ldi	r31, 0x04	; 4
    9fae:	80 81       	ld	r24, Z
    9fb0:	88 7f       	andi	r24, 0xF8	; 248
    9fb2:	84 60       	ori	r24, 0x04	; 4
    9fb4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTE + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    9fb6:	80 81       	ld	r24, Z
    9fb8:	87 7f       	andi	r24, 0xF7	; 247
    9fba:	80 83       	st	Z, r24
	// Disable digital input buffer
	PE7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	PE7_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
    9fbc:	0e 94 eb 4e 	call	0x9dd6	; 0x9dd6 <ADC_0_init>
    9fc0:	08 95       	ret

00009fc2 <TIMER_1_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    9fc2:	89 b1       	in	r24, 0x09	; 9
    9fc4:	87 7f       	andi	r24, 0xF7	; 247
    9fc6:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    9fc8:	88 b1       	in	r24, 0x08	; 8
    9fca:	88 60       	ori	r24, 0x08	; 8
    9fcc:	88 b9       	out	0x08, r24	; 8

	PC3_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= PORTMUX_TCA01_bm;
    9fce:	e0 ee       	ldi	r30, 0xE0	; 224
    9fd0:	f5 e0       	ldi	r31, 0x05	; 5
    9fd2:	86 81       	ldd	r24, Z+6	; 0x06
    9fd4:	82 60       	ori	r24, 0x02	; 2
    9fd6:	86 83       	std	Z+6, r24	; 0x06

	TIMER_1_init();
    9fd8:	0e 94 66 50 	call	0xa0cc	; 0xa0cc <TIMER_1_init>
    9fdc:	08 95       	ret

00009fde <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
    9fde:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <TIMER_0_init>
    9fe2:	08 95       	ret

00009fe4 <TIMER_2_initialization>:
}

void TIMER_2_initialization(void)
{

	TIMER_2_init();
    9fe4:	0e 94 83 50 	call	0xa106	; 0xa106 <TIMER_2_init>
    9fe8:	08 95       	ret

00009fea <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    9fea:	0e 94 49 4f 	call	0x9e92	; 0x9e92 <mcu_init>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    9fee:	81 b1       	in	r24, 0x01	; 1
    9ff0:	81 60       	ori	r24, 0x01	; 1
    9ff2:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    9ff4:	80 b1       	in	r24, 0x00	; 0
    9ff6:	81 60       	ori	r24, 0x01	; 1
    9ff8:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    9ffa:	81 b1       	in	r24, 0x01	; 1
    9ffc:	8b 7f       	andi	r24, 0xFB	; 251
    9ffe:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    a000:	80 b1       	in	r24, 0x00	; 0
    a002:	84 60       	ori	r24, 0x04	; 4
    a004:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    a006:	81 b1       	in	r24, 0x01	; 1
    a008:	87 7f       	andi	r24, 0xF7	; 247
    a00a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    a00c:	80 b1       	in	r24, 0x00	; 0
    a00e:	88 60       	ori	r24, 0x08	; 8
    a010:	80 b9       	out	0x00, r24	; 0
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    a012:	89 b1       	in	r24, 0x09	; 9
    a014:	8f 7b       	andi	r24, 0xBF	; 191
    a016:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    a018:	88 b1       	in	r24, 0x08	; 8
    a01a:	80 64       	ori	r24, 0x40	; 64
    a01c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    a01e:	89 b1       	in	r24, 0x09	; 9
    a020:	8f 77       	andi	r24, 0x7F	; 127
    a022:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    a024:	88 b1       	in	r24, 0x08	; 8
    a026:	80 68       	ori	r24, 0x80	; 128
    a028:	88 b9       	out	0x08, r24	; 8
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTE.OUT |= (1 << pin);
	} else {
		VPORTE.OUT &= ~(1 << pin);
    a02a:	81 b3       	in	r24, 0x11	; 17
    a02c:	8f 7d       	andi	r24, 0xDF	; 223
    a02e:	81 bb       	out	0x11, r24	; 17
	switch (dir) {
	case PORT_DIR_IN:
		VPORTE.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTE.DIR |= (1 << pin);
    a030:	80 b3       	in	r24, 0x10	; 16
    a032:	80 62       	ori	r24, 0x20	; 32
    a034:	80 bb       	out	0x10, r24	; 16
	    // <true"> High
	    false);

	MOTOR_GATE_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
    a036:	0e 94 28 4f 	call	0x9e50	; 0x9e50 <CLKCTRL_init>

	USART_1_initialization();
    a03a:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <USART_1_initialization>

	USART_0_initialization();
    a03e:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <USART_0_initialization>

	SLPCTRL_init();
    a042:	0e 94 64 50 	call	0xa0c8	; 0xa0c8 <SLPCTRL_init>

	CPUINT_init();
    a046:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <CPUINT_init>

	DAC_0_initialization();
    a04a:	0e 94 c0 4f 	call	0x9f80	; 0x9f80 <DAC_0_initialization>

	ADC_0_initialization();
    a04e:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <ADC_0_initialization>
	
	TIMER_2_initialization();
    a052:	0e 94 f2 4f 	call	0x9fe4	; 0x9fe4 <TIMER_2_initialization>

	TIMER_1_initialization();
    a056:	0e 94 e1 4f 	call	0x9fc2	; 0x9fc2 <TIMER_1_initialization>

	Timer_init();
    a05a:	0e 94 57 50 	call	0xa0ae	; 0xa0ae <Timer_init>

	TIMER_0_initialization();
    a05e:	0e 94 ef 4f 	call	0x9fde	; 0x9fde <TIMER_0_initialization>

	VREF_0_init();
    a062:	0e 94 c7 50 	call	0xa18e	; 0xa18e <VREF_0_init>

	BOD_init();
    a066:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <BOD_init>
    a06a:	08 95       	ret

0000a06c <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
    a06c:	1f 93       	push	r17
    a06e:	cf 93       	push	r28
    a070:	df 93       	push	r29
    a072:	ec 01       	movw	r28, r24
    a074:	16 2f       	mov	r17, r22
	/* Wait for completion of previous operation */
	while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    a076:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7f1002>
    a07a:	83 70       	andi	r24, 0x03	; 3
    a07c:	e1 f7       	brne	.-8      	; 0xa076 <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
    a07e:	43 e1       	ldi	r20, 0x13	; 19
    a080:	6d e9       	ldi	r22, 0x9D	; 157
    a082:	80 e0       	ldi	r24, 0x00	; 0
    a084:	90 e1       	ldi	r25, 0x10	; 16
    a086:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <protected_write_io>

	/* Program the EEPROM with desired value(s) */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);

	/* Write byte to EEPROM */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
    a08a:	dc 5e       	subi	r29, 0xEC	; 236
    a08c:	18 83       	st	Y, r17
    a08e:	40 e0       	ldi	r20, 0x00	; 0
    a090:	6d e9       	ldi	r22, 0x9D	; 157
    a092:	80 e0       	ldi	r24, 0x00	; 0
    a094:	90 e1       	ldi	r25, 0x10	; 16
    a096:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <protected_write_io>

	/* Clear the current command */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);

	return NVM_OK;
}
    a09a:	80 e0       	ldi	r24, 0x00	; 0
    a09c:	df 91       	pop	r29
    a09e:	cf 91       	pop	r28
    a0a0:	1f 91       	pop	r17
    a0a2:	08 95       	ret

0000a0a4 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    a0a4:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    a0a6:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    a0a8:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    a0aa:	40 83       	st	Z, r20
	ret                             // Return to caller
    a0ac:	08 95       	ret

0000a0ae <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    a0ae:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f0141>
    a0b2:	81 11       	cpse	r24, r1
    a0b4:	fc cf       	rjmp	.-8      	; 0xa0ae <Timer_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    a0b6:	e0 e4       	ldi	r30, 0x40	; 64
    a0b8:	f1 e0       	ldi	r31, 0x01	; 1
    a0ba:	81 e8       	ldi	r24, 0x81	; 129
    a0bc:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    a0be:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
    a0c0:	82 e0       	ldi	r24, 0x02	; 2
    a0c2:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
    a0c4:	80 e0       	ldi	r24, 0x00	; 0
    a0c6:	08 95       	ret

0000a0c8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    a0c8:	80 e0       	ldi	r24, 0x00	; 0
    a0ca:	08 95       	ret

0000a0cc <TIMER_1_init>:
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{

	TCA0.SPLIT.CTRLD = 1 << TCA_SPLIT_SPLITM_bp /* Split Mode : enabled */;
    a0cc:	e0 e0       	ldi	r30, 0x00	; 0
    a0ce:	fa e0       	ldi	r31, 0x0A	; 10
    a0d0:	81 e0       	ldi	r24, 0x01	; 1
    a0d2:	83 83       	std	Z+3, r24	; 0x03

	TCA0.SPLIT.CTRLB = 1 << TCA_SPLIT_HCMP0EN_bp    /* High Compare 0 Enable: enabled */
    a0d4:	80 e1       	ldi	r24, 0x10	; 16
    a0d6:	81 83       	std	Z+1, r24	; 0x01
	                   | 0 << TCA_SPLIT_HCMP2EN_bp  /* High Compare 2 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP0EN_bp  /* Low Compare 0 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP1EN_bp  /* Low Compare 1 Enable: disabled */
	                   | 0 << TCA_SPLIT_LCMP2EN_bp; /* Low Compare 2 Enable: disabled */

	TCA0.SPLIT.CTRLC = 1 << TCA_SPLIT_HCMP0OV_bp    /* High Compare 0 Output Value: enabled */
    a0d8:	82 83       	std	Z+2, r24	; 0x02
	                   | 0 << TCA_SPLIT_HCMP2OV_bp  /* High Compare 2 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP0OV_bp  /* Low Compare 0 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP1OV_bp  /* Low Compare 1 Output Value: disabled */
	                   | 0 << TCA_SPLIT_LCMP2OV_bp; /* Low Compare 2 Output Value: disabled */

	TCA0.SPLIT.HCMP0 = 0x4f; /* Compare value of channel 0: 0x4f */
    a0da:	8f e4       	ldi	r24, 0x4F	; 79
    a0dc:	81 a7       	std	Z+41, r24	; 0x29

	// TCA0.SPLIT.HCMP2 = 0x0; /* Compare value of channel 2: 0x0 */

	// TCA0.SPLIT.HCNT = 0x0; /*  High-byte Timer Counter Register: 0x0 */

	TCA0.SPLIT.HPER = 0x4a; /*  High-byte Period Register: 0x4a */
    a0de:	8a e4       	ldi	r24, 0x4A	; 74
    a0e0:	87 a3       	std	Z+39, r24	; 0x27

	// TCA0.SPLIT.LPER = 0xff; /*  Low-byte Timer Period Register: 0xff */

	// TCA0.SPLIT.DBGCTRL = 0 << TCA_SPLIT_DBGRUN_bp; /* Debug Run: disabled */

	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV16_gc /* System Clock / 16 */
    a0e2:	89 e0       	ldi	r24, 0x09	; 9
    a0e4:	80 83       	st	Z, r24
	                   | 1 << TCA_SPLIT_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
    a0e6:	80 e0       	ldi	r24, 0x00	; 0
    a0e8:	08 95       	ret

0000a0ea <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB0.CCMP = 23999; /* Compare or Capture: 0x0 */
    a0ea:	e0 e0       	ldi	r30, 0x00	; 0
    a0ec:	fb e0       	ldi	r31, 0x0B	; 11
    a0ee:	8f eb       	ldi	r24, 0xBF	; 191
    a0f0:	9d e5       	ldi	r25, 0x5D	; 93
    a0f2:	84 87       	std	Z+12, r24	; 0x0c
    a0f4:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0; /* Count: 0x5dbf */
    a0f6:	12 86       	std	Z+10, r1	; 0x0a
    a0f8:	13 86       	std	Z+11, r1	; 0x0b

	TCB0.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    a0fa:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    a0fc:	81 e0       	ldi	r24, 0x01	; 1
    a0fe:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    a100:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
}
    a102:	80 e0       	ldi	r24, 0x00	; 0
    a104:	08 95       	ret

0000a106 <TIMER_2_init>:
 * \return Initialization status.
 */
int8_t TIMER_2_init()
{

	TCB1.CCMP = 12000; /* Compare or Capture: 0x0 */
    a106:	e0 e1       	ldi	r30, 0x10	; 16
    a108:	fb e0       	ldi	r31, 0x0B	; 11
    a10a:	80 ee       	ldi	r24, 0xE0	; 224
    a10c:	9e e2       	ldi	r25, 0x2E	; 46
    a10e:	84 87       	std	Z+12, r24	; 0x0c
    a110:	95 87       	std	Z+13, r25	; 0x0d

	TCB1.CNT = 0; /* Count: 0x5dbf */
    a112:	12 86       	std	Z+10, r1	; 0x0a
    a114:	13 86       	std	Z+11, r1	; 0x0b

	TCB1.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    a116:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: disabled */
    a118:	81 e0       	ldi	r24, 0x01	; 1
    a11a:	85 83       	std	Z+5, r24	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: enabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    a11c:	80 83       	st	Z, r24
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    a11e:	80 e0       	ldi	r24, 0x00	; 0
    a120:	08 95       	ret

0000a122 <USART_0_init>:
 *
 * \return Initialization status.
 */
int8_t USART_0_init()
{
	USART4.BAUD = (uint16_t)(((float)(F_CPU * 64 / (16 * (float)19200)) + 0.5));
    a122:	e0 e8       	ldi	r30, 0x80	; 128
    a124:	f8 e0       	ldi	r31, 0x08	; 8
    a126:	88 e8       	ldi	r24, 0x88	; 136
    a128:	93 e1       	ldi	r25, 0x13	; 19
    a12a:	80 87       	std	Z+8, r24	; 0x08
    a12c:	91 87       	std	Z+9, r25	; 0x09

	USART4.CTRLA = 1 << USART_ABEIE_bp		/* Auto-baud Error Interrupt Enable: enabled */
    a12e:	84 e8       	ldi	r24, 0x84	; 132
    a130:	85 83       	std	Z+5, r24	; 0x05
				   | USART_RS485_DISABLE_gc /* RS485 Mode disabled */
				   | 1 << USART_RXCIE_bp	/* Receive Complete Interrupt Enable: enabled */
				   | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */ 
				   | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART4.CTRLB = 0 << USART_MPCM_bp		 /* Multi-processor Communication Mode: disabled */
    a132:	86 ec       	ldi	r24, 0xC6	; 198
    a134:	86 83       	std	Z+6, r24	; 0x06
	// USART4.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART4.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
    a136:	80 e0       	ldi	r24, 0x00	; 0
    a138:	08 95       	ret

0000a13a <USART_1_init>:
uint8_t USART_1_read()
{
	while (!(USART2.STATUS & USART_RXCIF_bm))
		;
	return USART2.RXDATAL;
}
    a13a:	e0 e4       	ldi	r30, 0x40	; 64
    a13c:	f8 e0       	ldi	r31, 0x08	; 8
    a13e:	81 e4       	ldi	r24, 0x41	; 65
    a140:	93 e0       	ldi	r25, 0x03	; 3
    a142:	80 87       	std	Z+8, r24	; 0x08
    a144:	91 87       	std	Z+9, r25	; 0x09
    a146:	80 ec       	ldi	r24, 0xC0	; 192
    a148:	86 83       	std	Z+6, r24	; 0x06
    a14a:	8c ee       	ldi	r24, 0xEC	; 236
    a14c:	92 e6       	ldi	r25, 0x62	; 98
    a14e:	80 93 04 69 	sts	0x6904, r24	; 0x806904 <__iob+0x2>
    a152:	90 93 05 69 	sts	0x6905, r25	; 0x806905 <__iob+0x3>
    a156:	80 e0       	ldi	r24, 0x00	; 0
    a158:	08 95       	ret

0000a15a <USART_1_write>:
 *
 * \return Nothing
 */
void USART_1_write(const uint8_t data)
{
	while (!(USART2.STATUS & USART_DREIF_bm))
    a15a:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <__TEXT_REGION_LENGTH__+0x7f0844>
    a15e:	95 ff       	sbrs	r25, 5
    a160:	fc cf       	rjmp	.-8      	; 0xa15a <USART_1_write>
		;
	USART2.TXDATAL = data;
    a162:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x7f0842>
    a166:	08 95       	ret

0000a168 <USART_1_printCHAR>:

#if defined(__GNUC__)

int USART_1_printCHAR(char character, FILE *stream)
{
	USART_1_write(character);
    a168:	0e 94 ad 50 	call	0xa15a	; 0xa15a <USART_1_write>
	return 0;
}
    a16c:	80 e0       	ldi	r24, 0x00	; 0
    a16e:	90 e0       	ldi	r25, 0x00	; 0
    a170:	08 95       	ret

0000a172 <USART4_Read>:
	USART2.TXDATAL = data;
}

size_t USART4_Read(uint8_t * rDATA)
{
	*rDATA = USART4.RXDATAL;
    a172:	20 91 80 08 	lds	r18, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7f0880>
    a176:	fc 01       	movw	r30, r24
    a178:	20 83       	st	Z, r18
	return 0;
}
    a17a:	80 e0       	ldi	r24, 0x00	; 0
    a17c:	90 e0       	ldi	r25, 0x00	; 0
    a17e:	08 95       	ret

0000a180 <USART4_Send>:

size_t USART4_Send(uint8_t * tDATA)
{
	USART4.TXDATAL = *tDATA;
    a180:	fc 01       	movw	r30, r24
    a182:	80 81       	ld	r24, Z
    a184:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <__TEXT_REGION_LENGTH__+0x7f0882>
	return 0;
    a188:	80 e0       	ldi	r24, 0x00	; 0
    a18a:	90 e0       	ldi	r25, 0x00	; 0
    a18c:	08 95       	ret

0000a18e <VREF_0_init>:
 * \return Initialization status.
 */
int8_t VREF_0_init()
{

	VREF.ADC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for ADC0: enabled */
    a18e:	e0 ea       	ldi	r30, 0xA0	; 160
    a190:	f0 e0       	ldi	r31, 0x00	; 0
    a192:	85 e8       	ldi	r24, 0x85	; 133
    a194:	80 83       	st	Z, r24
	               | VREF_REFSEL_VDD_gc; /* VDD as reference */

	VREF.DAC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: enabled */
    a196:	82 83       	std	Z+2, r24	; 0x02

	// VREF.ACREF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	return 0;
}
    a198:	80 e0       	ldi	r24, 0x00	; 0
    a19a:	08 95       	ret

0000a19c <check_for_aks_block>:
    a19c:	cf 92       	push	r12
    a19e:	df 92       	push	r13
    a1a0:	ff 92       	push	r15
    a1a2:	0f 93       	push	r16
    a1a4:	1f 93       	push	r17
    a1a6:	cf 93       	push	r28
    a1a8:	df 93       	push	r29
    a1aa:	ec 01       	movw	r28, r24
    a1ac:	ae 81       	ldd	r26, Y+6	; 0x06
    a1ae:	bf 81       	ldd	r27, Y+7	; 0x07
    a1b0:	eb 01       	movw	r28, r22
    a1b2:	cc 0f       	add	r28, r28
    a1b4:	dd 1f       	adc	r29, r29
    a1b6:	c6 0f       	add	r28, r22
    a1b8:	d7 1f       	adc	r29, r23
    a1ba:	ca 0f       	add	r28, r26
    a1bc:	db 1f       	adc	r29, r27
    a1be:	fa 80       	ldd	r15, Y+2	; 0x02
    a1c0:	fc 01       	movw	r30, r24
    a1c2:	44 81       	ldd	r20, Z+4	; 0x04
    a1c4:	55 81       	ldd	r21, Z+5	; 0x05
    a1c6:	e6 e0       	ldi	r30, 0x06	; 6
    a1c8:	e6 9f       	mul	r30, r22
    a1ca:	90 01       	movw	r18, r0
    a1cc:	e7 9f       	mul	r30, r23
    a1ce:	30 0d       	add	r19, r0
    a1d0:	11 24       	eor	r1, r1
    a1d2:	8a 01       	movw	r16, r20
    a1d4:	02 0f       	add	r16, r18
    a1d6:	13 1f       	adc	r17, r19
    a1d8:	f8 01       	movw	r30, r16
    a1da:	22 81       	ldd	r18, Z+2	; 0x02
    a1dc:	33 81       	ldd	r19, Z+3	; 0x03
    a1de:	f9 01       	movw	r30, r18
    a1e0:	21 81       	ldd	r18, Z+1	; 0x01
    a1e2:	32 81       	ldd	r19, Z+2	; 0x02
    a1e4:	f8 01       	movw	r30, r16
    a1e6:	04 81       	ldd	r16, Z+4	; 0x04
    a1e8:	15 81       	ldd	r17, Z+5	; 0x05
    a1ea:	20 1b       	sub	r18, r16
    a1ec:	31 0b       	sbc	r19, r17
    a1ee:	e8 81       	ld	r30, Y
    a1f0:	2e 1b       	sub	r18, r30
    a1f2:	31 09       	sbc	r19, r1
    a1f4:	ec 01       	movw	r28, r24
    a1f6:	ea 81       	ldd	r30, Y+2	; 0x02
    a1f8:	fb 81       	ldd	r31, Y+3	; 0x03
    a1fa:	00 81       	ld	r16, Z
    a1fc:	11 81       	ldd	r17, Z+1	; 0x01
    a1fe:	fa 01       	movw	r30, r20
    a200:	40 e0       	ldi	r20, 0x00	; 0
    a202:	50 e0       	ldi	r21, 0x00	; 0
    a204:	40 17       	cp	r20, r16
    a206:	51 07       	cpc	r21, r17
    a208:	39 f1       	breq	.+78     	; 0xa258 <check_for_aks_block+0xbc>
    a20a:	46 17       	cp	r20, r22
    a20c:	57 07       	cpc	r21, r23
    a20e:	f9 f0       	breq	.+62     	; 0xa24e <check_for_aks_block+0xb2>
    a210:	12 96       	adiw	r26, 0x02	; 2
    a212:	8c 91       	ld	r24, X
    a214:	12 97       	sbiw	r26, 0x02	; 2
    a216:	f8 12       	cpse	r15, r24
    a218:	1a c0       	rjmp	.+52     	; 0xa24e <check_for_aks_block+0xb2>
    a21a:	80 81       	ld	r24, Z
    a21c:	85 58       	subi	r24, 0x85	; 133
    a21e:	82 30       	cpi	r24, 0x02	; 2
    a220:	e8 f0       	brcs	.+58     	; 0xa25c <check_for_aks_block+0xc0>
    a222:	c4 80       	ldd	r12, Z+4	; 0x04
    a224:	d5 80       	ldd	r13, Z+5	; 0x05
    a226:	82 81       	ldd	r24, Z+2	; 0x02
    a228:	93 81       	ldd	r25, Z+3	; 0x03
    a22a:	ec 01       	movw	r28, r24
    a22c:	89 81       	ldd	r24, Y+1	; 0x01
    a22e:	9a 81       	ldd	r25, Y+2	; 0x02
    a230:	c8 16       	cp	r12, r24
    a232:	d9 06       	cpc	r13, r25
    a234:	60 f4       	brcc	.+24     	; 0xa24e <check_for_aks_block+0xb2>
    a236:	8c 19       	sub	r24, r12
    a238:	9d 09       	sbc	r25, r13
    a23a:	cc 91       	ld	r28, X
    a23c:	d0 e0       	ldi	r29, 0x00	; 0
    a23e:	c8 17       	cp	r28, r24
    a240:	d9 07       	cpc	r29, r25
    a242:	28 f4       	brcc	.+10     	; 0xa24e <check_for_aks_block+0xb2>
    a244:	8c 1b       	sub	r24, r28
    a246:	9d 0b       	sbc	r25, r29
    a248:	28 17       	cp	r18, r24
    a24a:	39 07       	cpc	r19, r25
    a24c:	38 f0       	brcs	.+14     	; 0xa25c <check_for_aks_block+0xc0>
    a24e:	4f 5f       	subi	r20, 0xFF	; 255
    a250:	5f 4f       	sbci	r21, 0xFF	; 255
    a252:	13 96       	adiw	r26, 0x03	; 3
    a254:	36 96       	adiw	r30, 0x06	; 6
    a256:	d6 cf       	rjmp	.-84     	; 0xa204 <check_for_aks_block+0x68>
    a258:	80 e0       	ldi	r24, 0x00	; 0
    a25a:	01 c0       	rjmp	.+2      	; 0xa25e <check_for_aks_block+0xc2>
    a25c:	81 e0       	ldi	r24, 0x01	; 1
    a25e:	df 91       	pop	r29
    a260:	cf 91       	pop	r28
    a262:	1f 91       	pop	r17
    a264:	0f 91       	pop	r16
    a266:	ff 90       	pop	r15
    a268:	df 90       	pop	r13
    a26a:	cf 90       	pop	r12
    a26c:	08 95       	ret

0000a26e <qtm_update_qtlib_timer>:
    a26e:	20 91 59 67 	lds	r18, 0x6759	; 0x806759 <qtm_local_ms_timecount>
    a272:	30 91 5a 67 	lds	r19, 0x675A	; 0x80675a <qtm_local_ms_timecount+0x1>
    a276:	82 0f       	add	r24, r18
    a278:	93 1f       	adc	r25, r19
    a27a:	80 93 59 67 	sts	0x6759, r24	; 0x806759 <qtm_local_ms_timecount>
    a27e:	90 93 5a 67 	sts	0x675A, r25	; 0x80675a <qtm_local_ms_timecount+0x1>
    a282:	08 95       	ret

0000a284 <qtm_init_sensor_key>:
    a284:	00 97       	sbiw	r24, 0x00	; 0
    a286:	d9 f0       	breq	.+54     	; 0xa2be <qtm_init_sensor_key+0x3a>
    a288:	41 15       	cp	r20, r1
    a28a:	51 05       	cpc	r21, r1
    a28c:	c1 f0       	breq	.+48     	; 0xa2be <qtm_init_sensor_key+0x3a>
    a28e:	26 e0       	ldi	r18, 0x06	; 6
    a290:	62 9f       	mul	r22, r18
    a292:	b0 01       	movw	r22, r0
    a294:	11 24       	eor	r1, r1
    a296:	dc 01       	movw	r26, r24
    a298:	14 96       	adiw	r26, 0x04	; 4
    a29a:	ed 91       	ld	r30, X+
    a29c:	fc 91       	ld	r31, X
    a29e:	15 97       	sbiw	r26, 0x05	; 5
    a2a0:	e6 0f       	add	r30, r22
    a2a2:	f7 1f       	adc	r31, r23
    a2a4:	21 e0       	ldi	r18, 0x01	; 1
    a2a6:	20 83       	st	Z, r18
    a2a8:	14 96       	adiw	r26, 0x04	; 4
    a2aa:	8d 91       	ld	r24, X+
    a2ac:	9c 91       	ld	r25, X
    a2ae:	15 97       	sbiw	r26, 0x05	; 5
    a2b0:	fc 01       	movw	r30, r24
    a2b2:	e6 0f       	add	r30, r22
    a2b4:	f7 1f       	adc	r31, r23
    a2b6:	42 83       	std	Z+2, r20	; 0x02
    a2b8:	53 83       	std	Z+3, r21	; 0x03
    a2ba:	80 e0       	ldi	r24, 0x00	; 0
    a2bc:	08 95       	ret
    a2be:	8b e0       	ldi	r24, 0x0B	; 11
    a2c0:	08 95       	ret

0000a2c2 <qtm_key_sensors_process>:
    a2c2:	2f 92       	push	r2
    a2c4:	3f 92       	push	r3
    a2c6:	4f 92       	push	r4
    a2c8:	5f 92       	push	r5
    a2ca:	6f 92       	push	r6
    a2cc:	7f 92       	push	r7
    a2ce:	8f 92       	push	r8
    a2d0:	9f 92       	push	r9
    a2d2:	af 92       	push	r10
    a2d4:	bf 92       	push	r11
    a2d6:	cf 92       	push	r12
    a2d8:	df 92       	push	r13
    a2da:	ef 92       	push	r14
    a2dc:	ff 92       	push	r15
    a2de:	0f 93       	push	r16
    a2e0:	1f 93       	push	r17
    a2e2:	cf 93       	push	r28
    a2e4:	df 93       	push	r29
    a2e6:	00 97       	sbiw	r24, 0x00	; 0
    a2e8:	09 f4       	brne	.+2      	; 0xa2ec <qtm_key_sensors_process+0x2a>
    a2ea:	7e c3       	rjmp	.+1788   	; 0xa9e8 <qtm_key_sensors_process+0x726>
    a2ec:	ec 01       	movw	r28, r24
    a2ee:	a1 2c       	mov	r10, r1
    a2f0:	b1 2c       	mov	r11, r1
    a2f2:	81 2c       	mov	r8, r1
    a2f4:	91 2c       	mov	r9, r1
    a2f6:	21 2c       	mov	r2, r1
    a2f8:	d1 2c       	mov	r13, r1
    a2fa:	55 24       	eor	r5, r5
    a2fc:	53 94       	inc	r5
    a2fe:	33 e0       	ldi	r19, 0x03	; 3
    a300:	c3 2e       	mov	r12, r19
    a302:	45 e8       	ldi	r20, 0x85	; 133
    a304:	64 2e       	mov	r6, r20
    a306:	56 e8       	ldi	r21, 0x86	; 134
    a308:	75 2e       	mov	r7, r21
    a30a:	62 e0       	ldi	r22, 0x02	; 2
    a30c:	36 2e       	mov	r3, r22
    a30e:	78 e0       	ldi	r23, 0x08	; 8
    a310:	47 2e       	mov	r4, r23
    a312:	ea 81       	ldd	r30, Y+2	; 0x02
    a314:	fb 81       	ldd	r31, Y+3	; 0x03
    a316:	80 81       	ld	r24, Z
    a318:	91 81       	ldd	r25, Z+1	; 0x01
    a31a:	88 16       	cp	r8, r24
    a31c:	99 06       	cpc	r9, r25
    a31e:	08 f0       	brcs	.+2      	; 0xa322 <qtm_key_sensors_process+0x60>
    a320:	a6 c1       	rjmp	.+844    	; 0xa66e <qtm_key_sensors_process+0x3ac>
    a322:	75 01       	movw	r14, r10
    a324:	ee 0c       	add	r14, r14
    a326:	ff 1c       	adc	r15, r15
    a328:	ec 81       	ldd	r30, Y+4	; 0x04
    a32a:	fd 81       	ldd	r31, Y+5	; 0x05
    a32c:	ee 0d       	add	r30, r14
    a32e:	ff 1d       	adc	r31, r15
    a330:	a2 81       	ldd	r26, Z+2	; 0x02
    a332:	b3 81       	ldd	r27, Z+3	; 0x03
    a334:	9c 91       	ld	r25, X
    a336:	9e 71       	andi	r25, 0x1E	; 30
    a338:	09 f0       	breq	.+2      	; 0xa33c <qtm_key_sensors_process+0x7a>
    a33a:	50 82       	st	Z, r5
    a33c:	0c 81       	ldd	r16, Y+4	; 0x04
    a33e:	1d 81       	ldd	r17, Y+5	; 0x05
    a340:	0e 0d       	add	r16, r14
    a342:	1f 1d       	adc	r17, r15
    a344:	d8 01       	movw	r26, r16
    a346:	8c 91       	ld	r24, X
    a348:	84 30       	cpi	r24, 0x04	; 4
    a34a:	09 f4       	brne	.+2      	; 0xa34e <qtm_key_sensors_process+0x8c>
    a34c:	9e c0       	rjmp	.+316    	; 0xa48a <qtm_key_sensors_process+0x1c8>
    a34e:	38 f4       	brcc	.+14     	; 0xa35e <qtm_key_sensors_process+0x9c>
    a350:	82 30       	cpi	r24, 0x02	; 2
    a352:	d1 f0       	breq	.+52     	; 0xa388 <qtm_key_sensors_process+0xc6>
    a354:	08 f0       	brcs	.+2      	; 0xa358 <qtm_key_sensors_process+0x96>
    a356:	45 c0       	rjmp	.+138    	; 0xa3e2 <qtm_key_sensors_process+0x120>
    a358:	81 30       	cpi	r24, 0x01	; 1
    a35a:	59 f0       	breq	.+22     	; 0xa372 <qtm_key_sensors_process+0xb0>
    a35c:	81 c1       	rjmp	.+770    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a35e:	85 38       	cpi	r24, 0x85	; 133
    a360:	09 f4       	brne	.+2      	; 0xa364 <qtm_key_sensors_process+0xa2>
    a362:	bf c0       	rjmp	.+382    	; 0xa4e2 <qtm_key_sensors_process+0x220>
    a364:	86 38       	cpi	r24, 0x86	; 134
    a366:	09 f4       	brne	.+2      	; 0xa36a <qtm_key_sensors_process+0xa8>
    a368:	f5 c0       	rjmp	.+490    	; 0xa554 <qtm_key_sensors_process+0x292>
    a36a:	87 30       	cpi	r24, 0x07	; 7
    a36c:	09 f0       	breq	.+2      	; 0xa370 <qtm_key_sensors_process+0xae>
    a36e:	78 c1       	rjmp	.+752    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a370:	36 c1       	rjmp	.+620    	; 0xa5de <qtm_key_sensors_process+0x31c>
    a372:	91 11       	cpse	r25, r1
    a374:	67 c1       	rjmp	.+718    	; 0xa644 <qtm_key_sensors_process+0x382>
    a376:	f8 01       	movw	r30, r16
    a378:	30 82       	st	Z, r3
    a37a:	8c 81       	ldd	r24, Y+4	; 0x04
    a37c:	9d 81       	ldd	r25, Y+5	; 0x05
    a37e:	fc 01       	movw	r30, r24
    a380:	ee 0d       	add	r30, r14
    a382:	ff 1d       	adc	r31, r15
    a384:	41 82       	std	Z+1, r4	; 0x01
    a386:	5e c1       	rjmp	.+700    	; 0xa644 <qtm_key_sensors_process+0x382>
    a388:	d8 01       	movw	r26, r16
    a38a:	11 96       	adiw	r26, 0x01	; 1
    a38c:	2c 91       	ld	r18, X
    a38e:	11 97       	sbiw	r26, 0x01	; 1
    a390:	22 23       	and	r18, r18
    a392:	29 f1       	breq	.+74     	; 0xa3de <qtm_key_sensors_process+0x11c>
    a394:	12 96       	adiw	r26, 0x02	; 2
    a396:	ed 91       	ld	r30, X+
    a398:	fc 91       	ld	r31, X
    a39a:	13 97       	sbiw	r26, 0x03	; 3
    a39c:	25 30       	cpi	r18, 0x05	; 5
    a39e:	18 f0       	brcs	.+6      	; 0xa3a6 <qtm_key_sensors_process+0xe4>
    a3a0:	81 81       	ldd	r24, Z+1	; 0x01
    a3a2:	92 81       	ldd	r25, Z+2	; 0x02
    a3a4:	0e c0       	rjmp	.+28     	; 0xa3c2 <qtm_key_sensors_process+0x100>
    a3a6:	d8 01       	movw	r26, r16
    a3a8:	14 96       	adiw	r26, 0x04	; 4
    a3aa:	8d 91       	ld	r24, X+
    a3ac:	9c 91       	ld	r25, X
    a3ae:	15 97       	sbiw	r26, 0x05	; 5
    a3b0:	41 81       	ldd	r20, Z+1	; 0x01
    a3b2:	52 81       	ldd	r21, Z+2	; 0x02
    a3b4:	84 17       	cp	r24, r20
    a3b6:	95 07       	cpc	r25, r21
    a3b8:	69 f0       	breq	.+26     	; 0xa3d4 <qtm_key_sensors_process+0x112>
    a3ba:	48 17       	cp	r20, r24
    a3bc:	59 07       	cpc	r21, r25
    a3be:	30 f4       	brcc	.+12     	; 0xa3cc <qtm_key_sensors_process+0x10a>
    a3c0:	01 97       	sbiw	r24, 0x01	; 1
    a3c2:	14 96       	adiw	r26, 0x04	; 4
    a3c4:	8d 93       	st	X+, r24
    a3c6:	9c 93       	st	X, r25
    a3c8:	15 97       	sbiw	r26, 0x05	; 5
    a3ca:	04 c0       	rjmp	.+8      	; 0xa3d4 <qtm_key_sensors_process+0x112>
    a3cc:	01 96       	adiw	r24, 0x01	; 1
    a3ce:	f8 01       	movw	r30, r16
    a3d0:	84 83       	std	Z+4, r24	; 0x04
    a3d2:	95 83       	std	Z+5, r25	; 0x05
    a3d4:	21 50       	subi	r18, 0x01	; 1
    a3d6:	d8 01       	movw	r26, r16
    a3d8:	11 96       	adiw	r26, 0x01	; 1
    a3da:	2c 93       	st	X, r18
    a3dc:	33 c1       	rjmp	.+614    	; 0xa644 <qtm_key_sensors_process+0x382>
    a3de:	f8 01       	movw	r30, r16
    a3e0:	2d c1       	rjmp	.+602    	; 0xa63c <qtm_key_sensors_process+0x37a>
    a3e2:	d8 01       	movw	r26, r16
    a3e4:	14 96       	adiw	r26, 0x04	; 4
    a3e6:	2d 91       	ld	r18, X+
    a3e8:	3c 91       	ld	r19, X
    a3ea:	15 97       	sbiw	r26, 0x05	; 5
    a3ec:	12 96       	adiw	r26, 0x02	; 2
    a3ee:	ed 91       	ld	r30, X+
    a3f0:	fc 91       	ld	r31, X
    a3f2:	13 97       	sbiw	r26, 0x03	; 3
    a3f4:	41 81       	ldd	r20, Z+1	; 0x01
    a3f6:	52 81       	ldd	r21, Z+2	; 0x02
    a3f8:	24 17       	cp	r18, r20
    a3fa:	35 07       	cpc	r19, r21
    a3fc:	09 f4       	brne	.+2      	; 0xa400 <qtm_key_sensors_process+0x13e>
    a3fe:	30 c1       	rjmp	.+608    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a400:	8e 81       	ldd	r24, Y+6	; 0x06
    a402:	9f 81       	ldd	r25, Y+7	; 0x07
    a404:	42 17       	cp	r20, r18
    a406:	53 07       	cpc	r21, r19
    a408:	f8 f4       	brcc	.+62     	; 0xa448 <qtm_key_sensors_process+0x186>
    a40a:	ea 81       	ldd	r30, Y+2	; 0x02
    a40c:	fb 81       	ldd	r31, Y+3	; 0x03
    a40e:	24 1b       	sub	r18, r20
    a410:	35 0b       	sbc	r19, r21
    a412:	dc 01       	movw	r26, r24
    a414:	aa 0d       	add	r26, r10
    a416:	bb 1d       	adc	r27, r11
    a418:	8c 91       	ld	r24, X
    a41a:	90 e0       	ldi	r25, 0x00	; 0
    a41c:	05 80       	ldd	r0, Z+5	; 0x05
    a41e:	02 c0       	rjmp	.+4      	; 0xa424 <qtm_key_sensors_process+0x162>
    a420:	95 95       	asr	r25
    a422:	87 95       	ror	r24
    a424:	0a 94       	dec	r0
    a426:	e2 f7       	brpl	.-8      	; 0xa420 <qtm_key_sensors_process+0x15e>
    a428:	99 27       	eor	r25, r25
    a42a:	28 17       	cp	r18, r24
    a42c:	39 07       	cpc	r19, r25
    a42e:	08 f4       	brcc	.+2      	; 0xa432 <qtm_key_sensors_process+0x170>
    a430:	17 c1       	rjmp	.+558    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a432:	84 81       	ldd	r24, Z+4	; 0x04
    a434:	88 23       	and	r24, r24
    a436:	09 f4       	brne	.+2      	; 0xa43a <qtm_key_sensors_process+0x178>
    a438:	13 c1       	rjmp	.+550    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a43a:	87 e0       	ldi	r24, 0x07	; 7
    a43c:	f8 01       	movw	r30, r16
    a43e:	80 83       	st	Z, r24
    a440:	ea 81       	ldd	r30, Y+2	; 0x02
    a442:	fb 81       	ldd	r31, Y+3	; 0x03
    a444:	24 81       	ldd	r18, Z+4	; 0x04
    a446:	1a c0       	rjmp	.+52     	; 0xa47c <qtm_key_sensors_process+0x1ba>
    a448:	fc 01       	movw	r30, r24
    a44a:	ea 0d       	add	r30, r10
    a44c:	fb 1d       	adc	r31, r11
    a44e:	42 1b       	sub	r20, r18
    a450:	53 0b       	sbc	r21, r19
    a452:	80 81       	ld	r24, Z
    a454:	90 e0       	ldi	r25, 0x00	; 0
    a456:	48 17       	cp	r20, r24
    a458:	59 07       	cpc	r21, r25
    a45a:	08 f4       	brcc	.+2      	; 0xa45e <qtm_key_sensors_process+0x19c>
    a45c:	01 c1       	rjmp	.+514    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a45e:	82 81       	ldd	r24, Z+2	; 0x02
    a460:	88 23       	and	r24, r24
    a462:	31 f0       	breq	.+12     	; 0xa470 <qtm_key_sensors_process+0x1ae>
    a464:	b4 01       	movw	r22, r8
    a466:	ce 01       	movw	r24, r28
    a468:	0e 94 ce 50 	call	0xa19c	; 0xa19c <check_for_aks_block>
    a46c:	81 11       	cpse	r24, r1
    a46e:	f8 c0       	rjmp	.+496    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a470:	e4 e0       	ldi	r30, 0x04	; 4
    a472:	d8 01       	movw	r26, r16
    a474:	ec 93       	st	X, r30
    a476:	ea 81       	ldd	r30, Y+2	; 0x02
    a478:	fb 81       	ldd	r31, Y+3	; 0x03
    a47a:	22 81       	ldd	r18, Z+2	; 0x02
    a47c:	8c 81       	ldd	r24, Y+4	; 0x04
    a47e:	9d 81       	ldd	r25, Y+5	; 0x05
    a480:	fc 01       	movw	r30, r24
    a482:	ee 0d       	add	r30, r14
    a484:	ff 1d       	adc	r31, r15
    a486:	21 83       	std	Z+1, r18	; 0x01
    a488:	dd c0       	rjmp	.+442    	; 0xa644 <qtm_key_sensors_process+0x382>
    a48a:	d8 01       	movw	r26, r16
    a48c:	14 96       	adiw	r26, 0x04	; 4
    a48e:	2d 91       	ld	r18, X+
    a490:	3c 91       	ld	r19, X
    a492:	15 97       	sbiw	r26, 0x05	; 5
    a494:	12 96       	adiw	r26, 0x02	; 2
    a496:	ed 91       	ld	r30, X+
    a498:	fc 91       	ld	r31, X
    a49a:	13 97       	sbiw	r26, 0x03	; 3
    a49c:	81 81       	ldd	r24, Z+1	; 0x01
    a49e:	92 81       	ldd	r25, Z+2	; 0x02
    a4a0:	82 17       	cp	r24, r18
    a4a2:	93 07       	cpc	r25, r19
    a4a4:	08 f4       	brcc	.+2      	; 0xa4a8 <qtm_key_sensors_process+0x1e6>
    a4a6:	bb c0       	rjmp	.+374    	; 0xa61e <qtm_key_sensors_process+0x35c>
    a4a8:	ee 81       	ldd	r30, Y+6	; 0x06
    a4aa:	ff 81       	ldd	r31, Y+7	; 0x07
    a4ac:	ea 0d       	add	r30, r10
    a4ae:	fb 1d       	adc	r31, r11
    a4b0:	82 1b       	sub	r24, r18
    a4b2:	93 0b       	sbc	r25, r19
    a4b4:	20 81       	ld	r18, Z
    a4b6:	30 e0       	ldi	r19, 0x00	; 0
    a4b8:	28 17       	cp	r18, r24
    a4ba:	39 07       	cpc	r19, r25
    a4bc:	08 f0       	brcs	.+2      	; 0xa4c0 <qtm_key_sensors_process+0x1fe>
    a4be:	c5 c0       	rjmp	.+394    	; 0xa64a <qtm_key_sensors_process+0x388>
    a4c0:	82 81       	ldd	r24, Z+2	; 0x02
    a4c2:	88 23       	and	r24, r24
    a4c4:	31 f0       	breq	.+12     	; 0xa4d2 <qtm_key_sensors_process+0x210>
    a4c6:	b4 01       	movw	r22, r8
    a4c8:	ce 01       	movw	r24, r28
    a4ca:	0e 94 ce 50 	call	0xa19c	; 0xa19c <check_for_aks_block>
    a4ce:	81 11       	cpse	r24, r1
    a4d0:	c7 c0       	rjmp	.+398    	; 0xa660 <qtm_key_sensors_process+0x39e>
    a4d2:	f8 01       	movw	r30, r16
    a4d4:	81 81       	ldd	r24, Z+1	; 0x01
    a4d6:	88 23       	and	r24, r24
    a4d8:	09 f4       	brne	.+2      	; 0xa4dc <qtm_key_sensors_process+0x21a>
    a4da:	6a c0       	rjmp	.+212    	; 0xa5b0 <qtm_key_sensors_process+0x2ee>
    a4dc:	81 50       	subi	r24, 0x01	; 1
    a4de:	81 83       	std	Z+1, r24	; 0x01
    a4e0:	b1 c0       	rjmp	.+354    	; 0xa644 <qtm_key_sensors_process+0x382>
    a4e2:	e8 81       	ld	r30, Y
    a4e4:	f9 81       	ldd	r31, Y+1	; 0x01
    a4e6:	aa 81       	ldd	r26, Y+2	; 0x02
    a4e8:	bb 81       	ldd	r27, Y+3	; 0x03
    a4ea:	18 96       	adiw	r26, 0x08	; 8
    a4ec:	8c 91       	ld	r24, X
    a4ee:	83 83       	std	Z+3, r24	; 0x03
    a4f0:	ec 81       	ldd	r30, Y+4	; 0x04
    a4f2:	fd 81       	ldd	r31, Y+5	; 0x05
    a4f4:	ee 0d       	add	r30, r14
    a4f6:	ff 1d       	adc	r31, r15
    a4f8:	44 81       	ldd	r20, Z+4	; 0x04
    a4fa:	55 81       	ldd	r21, Z+5	; 0x05
    a4fc:	a2 81       	ldd	r26, Z+2	; 0x02
    a4fe:	b3 81       	ldd	r27, Z+3	; 0x03
    a500:	11 96       	adiw	r26, 0x01	; 1
    a502:	8d 91       	ld	r24, X+
    a504:	9c 91       	ld	r25, X
    a506:	12 97       	sbiw	r26, 0x02	; 2
    a508:	84 17       	cp	r24, r20
    a50a:	95 07       	cpc	r25, r21
    a50c:	c0 f0       	brcs	.+48     	; 0xa53e <qtm_key_sensors_process+0x27c>
    a50e:	ae 81       	ldd	r26, Y+6	; 0x06
    a510:	bf 81       	ldd	r27, Y+7	; 0x07
    a512:	aa 0d       	add	r26, r10
    a514:	bb 1d       	adc	r27, r11
    a516:	6c 91       	ld	r22, X
    a518:	26 2f       	mov	r18, r22
    a51a:	30 e0       	ldi	r19, 0x00	; 0
    a51c:	11 96       	adiw	r26, 0x01	; 1
    a51e:	7c 91       	ld	r23, X
    a520:	7f 5f       	subi	r23, 0xFF	; 255
    a522:	02 c0       	rjmp	.+4      	; 0xa528 <qtm_key_sensors_process+0x266>
    a524:	35 95       	asr	r19
    a526:	27 95       	ror	r18
    a528:	7a 95       	dec	r23
    a52a:	e2 f7       	brpl	.-8      	; 0xa524 <qtm_key_sensors_process+0x262>
    a52c:	84 1b       	sub	r24, r20
    a52e:	95 0b       	sbc	r25, r21
    a530:	62 1b       	sub	r22, r18
    a532:	26 2f       	mov	r18, r22
    a534:	30 e0       	ldi	r19, 0x00	; 0
    a536:	28 17       	cp	r18, r24
    a538:	39 07       	cpc	r19, r25
    a53a:	08 f4       	brcc	.+2      	; 0xa53e <qtm_key_sensors_process+0x27c>
    a53c:	8f c0       	rjmp	.+286    	; 0xa65c <qtm_key_sensors_process+0x39a>
    a53e:	70 82       	st	Z, r7
    a540:	ea 81       	ldd	r30, Y+2	; 0x02
    a542:	fb 81       	ldd	r31, Y+3	; 0x03
    a544:	22 81       	ldd	r18, Z+2	; 0x02
    a546:	8c 81       	ldd	r24, Y+4	; 0x04
    a548:	9d 81       	ldd	r25, Y+5	; 0x05
    a54a:	fc 01       	movw	r30, r24
    a54c:	ee 0d       	add	r30, r14
    a54e:	ff 1d       	adc	r31, r15
    a550:	21 83       	std	Z+1, r18	; 0x01
    a552:	42 c0       	rjmp	.+132    	; 0xa5d8 <qtm_key_sensors_process+0x316>
    a554:	d8 01       	movw	r26, r16
    a556:	14 96       	adiw	r26, 0x04	; 4
    a558:	6d 91       	ld	r22, X+
    a55a:	7c 91       	ld	r23, X
    a55c:	15 97       	sbiw	r26, 0x05	; 5
    a55e:	12 96       	adiw	r26, 0x02	; 2
    a560:	ed 91       	ld	r30, X+
    a562:	fc 91       	ld	r31, X
    a564:	13 97       	sbiw	r26, 0x03	; 3
    a566:	21 81       	ldd	r18, Z+1	; 0x01
    a568:	32 81       	ldd	r19, Z+2	; 0x02
    a56a:	26 17       	cp	r18, r22
    a56c:	37 07       	cpc	r19, r23
    a56e:	58 f4       	brcc	.+22     	; 0xa586 <qtm_key_sensors_process+0x2c4>
    a570:	11 96       	adiw	r26, 0x01	; 1
    a572:	8c 91       	ld	r24, X
    a574:	11 97       	sbiw	r26, 0x01	; 1
    a576:	81 11       	cpse	r24, r1
    a578:	02 c0       	rjmp	.+4      	; 0xa57e <qtm_key_sensors_process+0x2bc>
    a57a:	cc 92       	st	X, r12
    a57c:	6f c0       	rjmp	.+222    	; 0xa65c <qtm_key_sensors_process+0x39a>
    a57e:	81 50       	subi	r24, 0x01	; 1
    a580:	f8 01       	movw	r30, r16
    a582:	81 83       	std	Z+1, r24	; 0x01
    a584:	6b c0       	rjmp	.+214    	; 0xa65c <qtm_key_sensors_process+0x39a>
    a586:	ee 81       	ldd	r30, Y+6	; 0x06
    a588:	ff 81       	ldd	r31, Y+7	; 0x07
    a58a:	ea 0d       	add	r30, r10
    a58c:	fb 1d       	adc	r31, r11
    a58e:	80 81       	ld	r24, Z
    a590:	48 2f       	mov	r20, r24
    a592:	50 e0       	ldi	r21, 0x00	; 0
    a594:	91 81       	ldd	r25, Z+1	; 0x01
    a596:	9f 5f       	subi	r25, 0xFF	; 255
    a598:	02 c0       	rjmp	.+4      	; 0xa59e <qtm_key_sensors_process+0x2dc>
    a59a:	55 95       	asr	r21
    a59c:	47 95       	ror	r20
    a59e:	9a 95       	dec	r25
    a5a0:	e2 f7       	brpl	.-8      	; 0xa59a <qtm_key_sensors_process+0x2d8>
    a5a2:	26 1b       	sub	r18, r22
    a5a4:	37 0b       	sbc	r19, r23
    a5a6:	84 1b       	sub	r24, r20
    a5a8:	90 e0       	ldi	r25, 0x00	; 0
    a5aa:	82 17       	cp	r24, r18
    a5ac:	93 07       	cpc	r25, r19
    a5ae:	60 f4       	brcc	.+24     	; 0xa5c8 <qtm_key_sensors_process+0x306>
    a5b0:	d8 01       	movw	r26, r16
    a5b2:	6c 92       	st	X, r6
    a5b4:	ea 81       	ldd	r30, Y+2	; 0x02
    a5b6:	fb 81       	ldd	r31, Y+3	; 0x03
    a5b8:	23 81       	ldd	r18, Z+3	; 0x03
    a5ba:	8c 81       	ldd	r24, Y+4	; 0x04
    a5bc:	9d 81       	ldd	r25, Y+5	; 0x05
    a5be:	fc 01       	movw	r30, r24
    a5c0:	ee 0d       	add	r30, r14
    a5c2:	ff 1d       	adc	r31, r15
    a5c4:	21 83       	std	Z+1, r18	; 0x01
    a5c6:	4a c0       	rjmp	.+148    	; 0xa65c <qtm_key_sensors_process+0x39a>
    a5c8:	f8 01       	movw	r30, r16
    a5ca:	81 81       	ldd	r24, Z+1	; 0x01
    a5cc:	81 11       	cpse	r24, r1
    a5ce:	02 c0       	rjmp	.+4      	; 0xa5d4 <qtm_key_sensors_process+0x312>
    a5d0:	c0 82       	st	Z, r12
    a5d2:	44 c0       	rjmp	.+136    	; 0xa65c <qtm_key_sensors_process+0x39a>
    a5d4:	81 50       	subi	r24, 0x01	; 1
    a5d6:	81 83       	std	Z+1, r24	; 0x01
    a5d8:	22 24       	eor	r2, r2
    a5da:	23 94       	inc	r2
    a5dc:	33 c0       	rjmp	.+102    	; 0xa644 <qtm_key_sensors_process+0x382>
    a5de:	f8 01       	movw	r30, r16
    a5e0:	24 81       	ldd	r18, Z+4	; 0x04
    a5e2:	35 81       	ldd	r19, Z+5	; 0x05
    a5e4:	02 80       	ldd	r0, Z+2	; 0x02
    a5e6:	f3 81       	ldd	r31, Z+3	; 0x03
    a5e8:	e0 2d       	mov	r30, r0
    a5ea:	81 81       	ldd	r24, Z+1	; 0x01
    a5ec:	92 81       	ldd	r25, Z+2	; 0x02
    a5ee:	82 17       	cp	r24, r18
    a5f0:	93 07       	cpc	r25, r19
    a5f2:	58 f5       	brcc	.+86     	; 0xa64a <qtm_key_sensors_process+0x388>
    a5f4:	28 1b       	sub	r18, r24
    a5f6:	39 0b       	sbc	r19, r25
    a5f8:	ee 81       	ldd	r30, Y+6	; 0x06
    a5fa:	ff 81       	ldd	r31, Y+7	; 0x07
    a5fc:	ea 0d       	add	r30, r10
    a5fe:	fb 1d       	adc	r31, r11
    a600:	80 81       	ld	r24, Z
    a602:	90 e0       	ldi	r25, 0x00	; 0
    a604:	ea 81       	ldd	r30, Y+2	; 0x02
    a606:	fb 81       	ldd	r31, Y+3	; 0x03
    a608:	05 80       	ldd	r0, Z+5	; 0x05
    a60a:	02 c0       	rjmp	.+4      	; 0xa610 <qtm_key_sensors_process+0x34e>
    a60c:	95 95       	asr	r25
    a60e:	87 95       	ror	r24
    a610:	0a 94       	dec	r0
    a612:	e2 f7       	brpl	.-8      	; 0xa60c <qtm_key_sensors_process+0x34a>
    a614:	99 27       	eor	r25, r25
    a616:	28 17       	cp	r18, r24
    a618:	39 07       	cpc	r19, r25
    a61a:	18 f4       	brcc	.+6      	; 0xa622 <qtm_key_sensors_process+0x360>
    a61c:	d8 01       	movw	r26, r16
    a61e:	cc 92       	st	X, r12
    a620:	16 c0       	rjmp	.+44     	; 0xa64e <qtm_key_sensors_process+0x38c>
    a622:	f8 01       	movw	r30, r16
    a624:	81 81       	ldd	r24, Z+1	; 0x01
    a626:	81 11       	cpse	r24, r1
    a628:	0b c0       	rjmp	.+22     	; 0xa640 <qtm_key_sensors_process+0x37e>
    a62a:	50 82       	st	Z, r5
    a62c:	8c 81       	ldd	r24, Y+4	; 0x04
    a62e:	9d 81       	ldd	r25, Y+5	; 0x05
    a630:	fc 01       	movw	r30, r24
    a632:	ee 0d       	add	r30, r14
    a634:	ff 1d       	adc	r31, r15
    a636:	02 80       	ldd	r0, Z+2	; 0x02
    a638:	f3 81       	ldd	r31, Z+3	; 0x03
    a63a:	e0 2d       	mov	r30, r0
    a63c:	c0 82       	st	Z, r12
    a63e:	10 c0       	rjmp	.+32     	; 0xa660 <qtm_key_sensors_process+0x39e>
    a640:	81 50       	subi	r24, 0x01	; 1
    a642:	81 83       	std	Z+1, r24	; 0x01
    a644:	dd 24       	eor	r13, r13
    a646:	d3 94       	inc	r13
    a648:	0b c0       	rjmp	.+22     	; 0xa660 <qtm_key_sensors_process+0x39e>
    a64a:	f8 01       	movw	r30, r16
    a64c:	c0 82       	st	Z, r12
    a64e:	8c 81       	ldd	r24, Y+4	; 0x04
    a650:	9d 81       	ldd	r25, Y+5	; 0x05
    a652:	fc 01       	movw	r30, r24
    a654:	ee 0d       	add	r30, r14
    a656:	ff 1d       	adc	r31, r15
    a658:	11 82       	std	Z+1, r1	; 0x01
    a65a:	02 c0       	rjmp	.+4      	; 0xa660 <qtm_key_sensors_process+0x39e>
    a65c:	22 24       	eor	r2, r2
    a65e:	23 94       	inc	r2
    a660:	ff ef       	ldi	r31, 0xFF	; 255
    a662:	8f 1a       	sub	r8, r31
    a664:	9f 0a       	sbc	r9, r31
    a666:	83 e0       	ldi	r24, 0x03	; 3
    a668:	a8 0e       	add	r10, r24
    a66a:	b1 1c       	adc	r11, r1
    a66c:	52 ce       	rjmp	.-860    	; 0xa312 <qtm_key_sensors_process+0x50>
    a66e:	e8 81       	ld	r30, Y
    a670:	f9 81       	ldd	r31, Y+1	; 0x01
    a672:	80 81       	ld	r24, Z
    a674:	87 ff       	sbrs	r24, 7
    a676:	23 c0       	rjmp	.+70     	; 0xa6be <qtm_key_sensors_process+0x3fc>
    a678:	40 e0       	ldi	r20, 0x00	; 0
    a67a:	50 e0       	ldi	r21, 0x00	; 0
    a67c:	20 e0       	ldi	r18, 0x00	; 0
    a67e:	30 e0       	ldi	r19, 0x00	; 0
    a680:	ea 81       	ldd	r30, Y+2	; 0x02
    a682:	fb 81       	ldd	r31, Y+3	; 0x03
    a684:	80 81       	ld	r24, Z
    a686:	91 81       	ldd	r25, Z+1	; 0x01
    a688:	28 17       	cp	r18, r24
    a68a:	39 07       	cpc	r19, r25
    a68c:	98 f4       	brcc	.+38     	; 0xa6b4 <qtm_key_sensors_process+0x3f2>
    a68e:	ec 81       	ldd	r30, Y+4	; 0x04
    a690:	fd 81       	ldd	r31, Y+5	; 0x05
    a692:	e4 0f       	add	r30, r20
    a694:	f5 1f       	adc	r31, r21
    a696:	a2 81       	ldd	r26, Z+2	; 0x02
    a698:	b3 81       	ldd	r27, Z+3	; 0x03
    a69a:	8c 91       	ld	r24, X
    a69c:	80 fd       	sbrc	r24, 0
    a69e:	05 c0       	rjmp	.+10     	; 0xa6aa <qtm_key_sensors_process+0x3e8>
    a6a0:	90 81       	ld	r25, Z
    a6a2:	97 7f       	andi	r25, 0xF7	; 247
    a6a4:	11 f0       	breq	.+4      	; 0xa6aa <qtm_key_sensors_process+0x3e8>
    a6a6:	81 60       	ori	r24, 0x01	; 1
    a6a8:	8c 93       	st	X, r24
    a6aa:	2f 5f       	subi	r18, 0xFF	; 255
    a6ac:	3f 4f       	sbci	r19, 0xFF	; 255
    a6ae:	4a 5f       	subi	r20, 0xFA	; 250
    a6b0:	5f 4f       	sbci	r21, 0xFF	; 255
    a6b2:	e6 cf       	rjmp	.-52     	; 0xa680 <qtm_key_sensors_process+0x3be>
    a6b4:	e8 81       	ld	r30, Y
    a6b6:	f9 81       	ldd	r31, Y+1	; 0x01
    a6b8:	80 81       	ld	r24, Z
    a6ba:	8f 77       	andi	r24, 0x7F	; 127
    a6bc:	80 83       	st	Z, r24
    a6be:	d1 10       	cpse	r13, r1
    a6c0:	07 c0       	rjmp	.+14     	; 0xa6d0 <qtm_key_sensors_process+0x40e>
    a6c2:	e8 81       	ld	r30, Y
    a6c4:	f9 81       	ldd	r31, Y+1	; 0x01
    a6c6:	21 10       	cpse	r2, r1
    a6c8:	6f c0       	rjmp	.+222    	; 0xa7a8 <qtm_key_sensors_process+0x4e6>
    a6ca:	80 81       	ld	r24, Z
    a6cc:	8e 7f       	andi	r24, 0xFE	; 254
    a6ce:	6e c0       	rjmp	.+220    	; 0xa7ac <qtm_key_sensors_process+0x4ea>
    a6d0:	ea 81       	ldd	r30, Y+2	; 0x02
    a6d2:	fb 81       	ldd	r31, Y+3	; 0x03
    a6d4:	81 85       	ldd	r24, Z+9	; 0x09
    a6d6:	88 23       	and	r24, r24
    a6d8:	a1 f3       	breq	.-24     	; 0xa6c2 <qtm_key_sensors_process+0x400>
    a6da:	e8 81       	ld	r30, Y
    a6dc:	f9 81       	ldd	r31, Y+1	; 0x01
    a6de:	80 81       	ld	r24, Z
    a6e0:	80 68       	ori	r24, 0x80	; 128
    a6e2:	80 83       	st	Z, r24
    a6e4:	ea 81       	ldd	r30, Y+2	; 0x02
    a6e6:	fb 81       	ldd	r31, Y+3	; 0x03
    a6e8:	81 85       	ldd	r24, Z+9	; 0x09
    a6ea:	81 30       	cpi	r24, 0x01	; 1
    a6ec:	51 f7       	brne	.-44     	; 0xa6c2 <qtm_key_sensors_process+0x400>
    a6ee:	40 e0       	ldi	r20, 0x00	; 0
    a6f0:	50 e0       	ldi	r21, 0x00	; 0
    a6f2:	20 e0       	ldi	r18, 0x00	; 0
    a6f4:	30 e0       	ldi	r19, 0x00	; 0
    a6f6:	96 e0       	ldi	r25, 0x06	; 6
    a6f8:	d9 2e       	mov	r13, r25
    a6fa:	ea 81       	ldd	r30, Y+2	; 0x02
    a6fc:	fb 81       	ldd	r31, Y+3	; 0x03
    a6fe:	60 81       	ld	r22, Z
    a700:	71 81       	ldd	r23, Z+1	; 0x01
    a702:	26 17       	cp	r18, r22
    a704:	37 07       	cpc	r19, r23
    a706:	e8 f6       	brcc	.-70     	; 0xa6c2 <qtm_key_sensors_process+0x400>
    a708:	0c 81       	ldd	r16, Y+4	; 0x04
    a70a:	1d 81       	ldd	r17, Y+5	; 0x05
    a70c:	fa 01       	movw	r30, r20
    a70e:	ee 0f       	add	r30, r30
    a710:	ff 1f       	adc	r31, r31
    a712:	e0 0f       	add	r30, r16
    a714:	f1 1f       	adc	r31, r17
    a716:	80 81       	ld	r24, Z
    a718:	98 2f       	mov	r25, r24
    a71a:	97 7f       	andi	r25, 0xF7	; 247
    a71c:	a1 f1       	breq	.+104    	; 0xa786 <qtm_key_sensors_process+0x4c4>
    a71e:	85 38       	cpi	r24, 0x85	; 133
    a720:	11 f0       	breq	.+4      	; 0xa726 <qtm_key_sensors_process+0x464>
    a722:	83 30       	cpi	r24, 0x03	; 3
    a724:	b1 f5       	brne	.+108    	; 0xa792 <qtm_key_sensors_process+0x4d0>
    a726:	ee 80       	ldd	r14, Y+6	; 0x06
    a728:	ff 80       	ldd	r15, Y+7	; 0x07
    a72a:	d7 01       	movw	r26, r14
    a72c:	a4 0f       	add	r26, r20
    a72e:	b5 1f       	adc	r27, r21
    a730:	12 96       	adiw	r26, 0x02	; 2
    a732:	bc 90       	ld	r11, X
    a734:	bb 20       	and	r11, r11
    a736:	39 f1       	breq	.+78     	; 0xa786 <qtm_key_sensors_process+0x4c4>
    a738:	80 e0       	ldi	r24, 0x00	; 0
    a73a:	90 e0       	ldi	r25, 0x00	; 0
    a73c:	c1 2c       	mov	r12, r1
    a73e:	86 17       	cp	r24, r22
    a740:	97 07       	cpc	r25, r23
    a742:	f8 f4       	brcc	.+62     	; 0xa782 <qtm_key_sensors_process+0x4c0>
    a744:	28 17       	cp	r18, r24
    a746:	39 07       	cpc	r19, r25
    a748:	d1 f0       	breq	.+52     	; 0xa77e <qtm_key_sensors_process+0x4bc>
    a74a:	d8 9e       	mul	r13, r24
    a74c:	d0 01       	movw	r26, r0
    a74e:	d9 9e       	mul	r13, r25
    a750:	b0 0d       	add	r27, r0
    a752:	11 24       	eor	r1, r1
    a754:	a0 0f       	add	r26, r16
    a756:	b1 1f       	adc	r27, r17
    a758:	ac 91       	ld	r26, X
    a75a:	a4 30       	cpi	r26, 0x04	; 4
    a75c:	11 f0       	breq	.+4      	; 0xa762 <qtm_key_sensors_process+0x4a0>
    a75e:	a6 38       	cpi	r26, 0x86	; 134
    a760:	71 f4       	brne	.+28     	; 0xa77e <qtm_key_sensors_process+0x4bc>
    a762:	dc 01       	movw	r26, r24
    a764:	aa 0f       	add	r26, r26
    a766:	bb 1f       	adc	r27, r27
    a768:	a8 0f       	add	r26, r24
    a76a:	b9 1f       	adc	r27, r25
    a76c:	ae 0d       	add	r26, r14
    a76e:	bf 1d       	adc	r27, r15
    a770:	12 96       	adiw	r26, 0x02	; 2
    a772:	ac 91       	ld	r26, X
    a774:	ba 12       	cpse	r11, r26
    a776:	03 c0       	rjmp	.+6      	; 0xa77e <qtm_key_sensors_process+0x4bc>
    a778:	cb 01       	movw	r24, r22
    a77a:	cc 24       	eor	r12, r12
    a77c:	c3 94       	inc	r12
    a77e:	01 96       	adiw	r24, 0x01	; 1
    a780:	de cf       	rjmp	.-68     	; 0xa73e <qtm_key_sensors_process+0x47c>
    a782:	c1 10       	cpse	r12, r1
    a784:	06 c0       	rjmp	.+12     	; 0xa792 <qtm_key_sensors_process+0x4d0>
    a786:	02 80       	ldd	r0, Z+2	; 0x02
    a788:	f3 81       	ldd	r31, Z+3	; 0x03
    a78a:	e0 2d       	mov	r30, r0
    a78c:	80 81       	ld	r24, Z
    a78e:	8e 7f       	andi	r24, 0xFE	; 254
    a790:	05 c0       	rjmp	.+10     	; 0xa79c <qtm_key_sensors_process+0x4da>
    a792:	02 80       	ldd	r0, Z+2	; 0x02
    a794:	f3 81       	ldd	r31, Z+3	; 0x03
    a796:	e0 2d       	mov	r30, r0
    a798:	80 81       	ld	r24, Z
    a79a:	81 60       	ori	r24, 0x01	; 1
    a79c:	80 83       	st	Z, r24
    a79e:	2f 5f       	subi	r18, 0xFF	; 255
    a7a0:	3f 4f       	sbci	r19, 0xFF	; 255
    a7a2:	4d 5f       	subi	r20, 0xFD	; 253
    a7a4:	5f 4f       	sbci	r21, 0xFF	; 255
    a7a6:	a9 cf       	rjmp	.-174    	; 0xa6fa <qtm_key_sensors_process+0x438>
    a7a8:	80 81       	ld	r24, Z
    a7aa:	81 60       	ori	r24, 0x01	; 1
    a7ac:	80 83       	st	Z, r24
    a7ae:	80 91 59 67 	lds	r24, 0x6759	; 0x806759 <qtm_local_ms_timecount>
    a7b2:	90 91 5a 67 	lds	r25, 0x675A	; 0x80675a <qtm_local_ms_timecount+0x1>
    a7b6:	e8 81       	ld	r30, Y
    a7b8:	f9 81       	ldd	r31, Y+1	; 0x01
    a7ba:	21 81       	ldd	r18, Z+1	; 0x01
    a7bc:	32 81       	ldd	r19, Z+2	; 0x02
    a7be:	a9 01       	movw	r20, r18
    a7c0:	48 53       	subi	r20, 0x38	; 56
    a7c2:	5f 4f       	sbci	r21, 0xFF	; 255
    a7c4:	48 17       	cp	r20, r24
    a7c6:	59 07       	cpc	r21, r25
    a7c8:	38 f4       	brcc	.+14     	; 0xa7d8 <qtm_key_sensors_process+0x516>
    a7ca:	82 1b       	sub	r24, r18
    a7cc:	93 0b       	sbc	r25, r19
    a7ce:	aa 24       	eor	r10, r10
    a7d0:	a3 94       	inc	r10
    a7d2:	a3 e0       	ldi	r26, 0x03	; 3
    a7d4:	ba 2e       	mov	r11, r26
    a7d6:	44 c0       	rjmp	.+136    	; 0xa860 <qtm_key_sensors_process+0x59e>
    a7d8:	82 17       	cp	r24, r18
    a7da:	93 07       	cpc	r25, r19
    a7dc:	10 f0       	brcs	.+4      	; 0xa7e2 <qtm_key_sensors_process+0x520>
    a7de:	80 e0       	ldi	r24, 0x00	; 0
    a7e0:	04 c1       	rjmp	.+520    	; 0xa9ea <qtm_key_sensors_process+0x728>
    a7e2:	82 1b       	sub	r24, r18
    a7e4:	93 0b       	sbc	r25, r19
    a7e6:	01 97       	sbiw	r24, 0x01	; 1
    a7e8:	89 3c       	cpi	r24, 0xC9	; 201
    a7ea:	91 05       	cpc	r25, r1
    a7ec:	c0 f3       	brcs	.-16     	; 0xa7de <qtm_key_sensors_process+0x51c>
    a7ee:	ef cf       	rjmp	.-34     	; 0xa7ce <qtm_key_sensors_process+0x50c>
    a7f0:	88 5c       	subi	r24, 0xC8	; 200
    a7f2:	91 09       	sbc	r25, r1
    a7f4:	e8 81       	ld	r30, Y
    a7f6:	f9 81       	ldd	r31, Y+1	; 0x01
    a7f8:	21 81       	ldd	r18, Z+1	; 0x01
    a7fa:	32 81       	ldd	r19, Z+2	; 0x02
    a7fc:	28 53       	subi	r18, 0x38	; 56
    a7fe:	3f 4f       	sbci	r19, 0xFF	; 255
    a800:	21 83       	std	Z+1, r18	; 0x01
    a802:	32 83       	std	Z+2, r19	; 0x02
    a804:	23 81       	ldd	r18, Z+3	; 0x03
    a806:	21 11       	cpse	r18, r1
    a808:	96 c0       	rjmp	.+300    	; 0xa936 <qtm_key_sensors_process+0x674>
    a80a:	24 81       	ldd	r18, Z+4	; 0x04
    a80c:	22 23       	and	r18, r18
    a80e:	11 f0       	breq	.+4      	; 0xa814 <qtm_key_sensors_process+0x552>
    a810:	21 50       	subi	r18, 0x01	; 1
    a812:	24 83       	std	Z+4, r18	; 0x04
    a814:	e8 81       	ld	r30, Y
    a816:	f9 81       	ldd	r31, Y+1	; 0x01
    a818:	25 81       	ldd	r18, Z+5	; 0x05
    a81a:	22 23       	and	r18, r18
    a81c:	11 f0       	breq	.+4      	; 0xa822 <qtm_key_sensors_process+0x560>
    a81e:	21 50       	subi	r18, 0x01	; 1
    a820:	25 83       	std	Z+5, r18	; 0x05
    a822:	8a 80       	ldd	r8, Y+2	; 0x02
    a824:	9b 80       	ldd	r9, Y+3	; 0x03
    a826:	d4 01       	movw	r26, r8
    a828:	16 96       	adiw	r26, 0x06	; 6
    a82a:	2c 91       	ld	r18, X
    a82c:	16 97       	sbiw	r26, 0x06	; 6
    a82e:	21 11       	cpse	r18, r1
    a830:	1b c0       	rjmp	.+54     	; 0xa868 <qtm_key_sensors_process+0x5a6>
    a832:	8a 80       	ldd	r8, Y+2	; 0x02
    a834:	9b 80       	ldd	r9, Y+3	; 0x03
    a836:	f4 01       	movw	r30, r8
    a838:	27 81       	ldd	r18, Z+7	; 0x07
    a83a:	21 11       	cpse	r18, r1
    a83c:	48 c0       	rjmp	.+144    	; 0xa8ce <qtm_key_sensors_process+0x60c>
    a83e:	ea 81       	ldd	r30, Y+2	; 0x02
    a840:	fb 81       	ldd	r31, Y+3	; 0x03
    a842:	23 81       	ldd	r18, Z+3	; 0x03
    a844:	22 23       	and	r18, r18
    a846:	61 f0       	breq	.+24     	; 0xa860 <qtm_key_sensors_process+0x59e>
    a848:	20 e0       	ldi	r18, 0x00	; 0
    a84a:	30 e0       	ldi	r19, 0x00	; 0
    a84c:	a0 e0       	ldi	r26, 0x00	; 0
    a84e:	b0 e0       	ldi	r27, 0x00	; 0
    a850:	ea 81       	ldd	r30, Y+2	; 0x02
    a852:	fb 81       	ldd	r31, Y+3	; 0x03
    a854:	40 81       	ld	r20, Z
    a856:	51 81       	ldd	r21, Z+1	; 0x01
    a858:	a4 17       	cp	r26, r20
    a85a:	b5 07       	cpc	r27, r21
    a85c:	08 f4       	brcc	.+2      	; 0xa860 <qtm_key_sensors_process+0x59e>
    a85e:	6e c0       	rjmp	.+220    	; 0xa93c <qtm_key_sensors_process+0x67a>
    a860:	89 3c       	cpi	r24, 0xC9	; 201
    a862:	91 05       	cpc	r25, r1
    a864:	28 f6       	brcc	.-118    	; 0xa7f0 <qtm_key_sensors_process+0x52e>
    a866:	bb cf       	rjmp	.-138    	; 0xa7de <qtm_key_sensors_process+0x51c>
    a868:	08 81       	ld	r16, Y
    a86a:	19 81       	ldd	r17, Y+1	; 0x01
    a86c:	f8 01       	movw	r30, r16
    a86e:	24 81       	ldd	r18, Z+4	; 0x04
    a870:	21 11       	cpse	r18, r1
    a872:	df cf       	rjmp	.-66     	; 0xa832 <qtm_key_sensors_process+0x570>
    a874:	ed 90       	ld	r14, X+
    a876:	fc 90       	ld	r15, X
    a878:	60 e0       	ldi	r22, 0x00	; 0
    a87a:	70 e0       	ldi	r23, 0x00	; 0
    a87c:	40 e0       	ldi	r20, 0x00	; 0
    a87e:	50 e0       	ldi	r21, 0x00	; 0
    a880:	4e 15       	cp	r20, r14
    a882:	5f 05       	cpc	r21, r15
    a884:	f1 f0       	breq	.+60     	; 0xa8c2 <qtm_key_sensors_process+0x600>
    a886:	ec 81       	ldd	r30, Y+4	; 0x04
    a888:	fd 81       	ldd	r31, Y+5	; 0x05
    a88a:	e6 0f       	add	r30, r22
    a88c:	f7 1f       	adc	r31, r23
    a88e:	20 81       	ld	r18, Z
    a890:	23 30       	cpi	r18, 0x03	; 3
    a892:	11 f0       	breq	.+4      	; 0xa898 <qtm_key_sensors_process+0x5d6>
    a894:	28 30       	cpi	r18, 0x08	; 8
    a896:	81 f4       	brne	.+32     	; 0xa8b8 <qtm_key_sensors_process+0x5f6>
    a898:	24 81       	ldd	r18, Z+4	; 0x04
    a89a:	35 81       	ldd	r19, Z+5	; 0x05
    a89c:	c2 80       	ldd	r12, Z+2	; 0x02
    a89e:	d3 80       	ldd	r13, Z+3	; 0x03
    a8a0:	d6 01       	movw	r26, r12
    a8a2:	11 96       	adiw	r26, 0x01	; 1
    a8a4:	cd 90       	ld	r12, X+
    a8a6:	dc 90       	ld	r13, X
    a8a8:	12 97       	sbiw	r26, 0x02	; 2
    a8aa:	2c 15       	cp	r18, r12
    a8ac:	3d 05       	cpc	r19, r13
    a8ae:	20 f4       	brcc	.+8      	; 0xa8b8 <qtm_key_sensors_process+0x5f6>
    a8b0:	2f 5f       	subi	r18, 0xFF	; 255
    a8b2:	3f 4f       	sbci	r19, 0xFF	; 255
    a8b4:	24 83       	std	Z+4, r18	; 0x04
    a8b6:	35 83       	std	Z+5, r19	; 0x05
    a8b8:	4f 5f       	subi	r20, 0xFF	; 255
    a8ba:	5f 4f       	sbci	r21, 0xFF	; 255
    a8bc:	6a 5f       	subi	r22, 0xFA	; 250
    a8be:	7f 4f       	sbci	r23, 0xFF	; 255
    a8c0:	df cf       	rjmp	.-66     	; 0xa880 <qtm_key_sensors_process+0x5be>
    a8c2:	f4 01       	movw	r30, r8
    a8c4:	26 81       	ldd	r18, Z+6	; 0x06
    a8c6:	d8 01       	movw	r26, r16
    a8c8:	14 96       	adiw	r26, 0x04	; 4
    a8ca:	2c 93       	st	X, r18
    a8cc:	b2 cf       	rjmp	.-156    	; 0xa832 <qtm_key_sensors_process+0x570>
    a8ce:	08 81       	ld	r16, Y
    a8d0:	19 81       	ldd	r17, Y+1	; 0x01
    a8d2:	d8 01       	movw	r26, r16
    a8d4:	15 96       	adiw	r26, 0x05	; 5
    a8d6:	2c 91       	ld	r18, X
    a8d8:	21 11       	cpse	r18, r1
    a8da:	b1 cf       	rjmp	.-158    	; 0xa83e <qtm_key_sensors_process+0x57c>
    a8dc:	e0 80       	ld	r14, Z
    a8de:	f1 80       	ldd	r15, Z+1	; 0x01
    a8e0:	60 e0       	ldi	r22, 0x00	; 0
    a8e2:	70 e0       	ldi	r23, 0x00	; 0
    a8e4:	40 e0       	ldi	r20, 0x00	; 0
    a8e6:	50 e0       	ldi	r21, 0x00	; 0
    a8e8:	4e 15       	cp	r20, r14
    a8ea:	5f 05       	cpc	r21, r15
    a8ec:	f1 f0       	breq	.+60     	; 0xa92a <qtm_key_sensors_process+0x668>
    a8ee:	ec 81       	ldd	r30, Y+4	; 0x04
    a8f0:	fd 81       	ldd	r31, Y+5	; 0x05
    a8f2:	e6 0f       	add	r30, r22
    a8f4:	f7 1f       	adc	r31, r23
    a8f6:	20 81       	ld	r18, Z
    a8f8:	23 30       	cpi	r18, 0x03	; 3
    a8fa:	11 f0       	breq	.+4      	; 0xa900 <qtm_key_sensors_process+0x63e>
    a8fc:	28 30       	cpi	r18, 0x08	; 8
    a8fe:	81 f4       	brne	.+32     	; 0xa920 <qtm_key_sensors_process+0x65e>
    a900:	24 81       	ldd	r18, Z+4	; 0x04
    a902:	35 81       	ldd	r19, Z+5	; 0x05
    a904:	c2 80       	ldd	r12, Z+2	; 0x02
    a906:	d3 80       	ldd	r13, Z+3	; 0x03
    a908:	d6 01       	movw	r26, r12
    a90a:	11 96       	adiw	r26, 0x01	; 1
    a90c:	cd 90       	ld	r12, X+
    a90e:	dc 90       	ld	r13, X
    a910:	12 97       	sbiw	r26, 0x02	; 2
    a912:	c2 16       	cp	r12, r18
    a914:	d3 06       	cpc	r13, r19
    a916:	20 f4       	brcc	.+8      	; 0xa920 <qtm_key_sensors_process+0x65e>
    a918:	21 50       	subi	r18, 0x01	; 1
    a91a:	31 09       	sbc	r19, r1
    a91c:	24 83       	std	Z+4, r18	; 0x04
    a91e:	35 83       	std	Z+5, r19	; 0x05
    a920:	4f 5f       	subi	r20, 0xFF	; 255
    a922:	5f 4f       	sbci	r21, 0xFF	; 255
    a924:	6a 5f       	subi	r22, 0xFA	; 250
    a926:	7f 4f       	sbci	r23, 0xFF	; 255
    a928:	df cf       	rjmp	.-66     	; 0xa8e8 <qtm_key_sensors_process+0x626>
    a92a:	f4 01       	movw	r30, r8
    a92c:	27 81       	ldd	r18, Z+7	; 0x07
    a92e:	d8 01       	movw	r26, r16
    a930:	15 96       	adiw	r26, 0x05	; 5
    a932:	2c 93       	st	X, r18
    a934:	84 cf       	rjmp	.-248    	; 0xa83e <qtm_key_sensors_process+0x57c>
    a936:	21 50       	subi	r18, 0x01	; 1
    a938:	23 83       	std	Z+3, r18	; 0x03
    a93a:	81 cf       	rjmp	.-254    	; 0xa83e <qtm_key_sensors_process+0x57c>
    a93c:	a9 01       	movw	r20, r18
    a93e:	44 0f       	add	r20, r20
    a940:	55 1f       	adc	r21, r21
    a942:	ec 81       	ldd	r30, Y+4	; 0x04
    a944:	fd 81       	ldd	r31, Y+5	; 0x05
    a946:	e4 0f       	add	r30, r20
    a948:	f5 1f       	adc	r31, r21
    a94a:	60 81       	ld	r22, Z
    a94c:	65 38       	cpi	r22, 0x85	; 133
    a94e:	09 f0       	breq	.+2      	; 0xa952 <qtm_key_sensors_process+0x690>
    a950:	47 c0       	rjmp	.+142    	; 0xa9e0 <qtm_key_sensors_process+0x71e>
    a952:	61 81       	ldd	r22, Z+1	; 0x01
    a954:	66 23       	and	r22, r22
    a956:	19 f0       	breq	.+6      	; 0xa95e <qtm_key_sensors_process+0x69c>
    a958:	61 50       	subi	r22, 0x01	; 1
    a95a:	61 83       	std	Z+1, r22	; 0x01
    a95c:	41 c0       	rjmp	.+130    	; 0xa9e0 <qtm_key_sensors_process+0x71e>
    a95e:	a0 82       	st	Z, r10
    a960:	6c 81       	ldd	r22, Y+4	; 0x04
    a962:	7d 81       	ldd	r23, Y+5	; 0x05
    a964:	fb 01       	movw	r30, r22
    a966:	e4 0f       	add	r30, r20
    a968:	f5 1f       	adc	r31, r21
    a96a:	02 80       	ldd	r0, Z+2	; 0x02
    a96c:	f3 81       	ldd	r31, Z+3	; 0x03
    a96e:	e0 2d       	mov	r30, r0
    a970:	b0 82       	st	Z, r11
    a972:	ee 81       	ldd	r30, Y+6	; 0x06
    a974:	ff 81       	ldd	r31, Y+7	; 0x07
    a976:	e2 0f       	add	r30, r18
    a978:	f3 1f       	adc	r31, r19
    a97a:	d2 80       	ldd	r13, Z+2	; 0x02
    a97c:	dd 20       	and	r13, r13
    a97e:	81 f1       	breq	.+96     	; 0xa9e0 <qtm_key_sensors_process+0x71e>
    a980:	40 e0       	ldi	r20, 0x00	; 0
    a982:	50 e0       	ldi	r21, 0x00	; 0
    a984:	00 e0       	ldi	r16, 0x00	; 0
    a986:	10 e0       	ldi	r17, 0x00	; 0
    a988:	ea 81       	ldd	r30, Y+2	; 0x02
    a98a:	fb 81       	ldd	r31, Y+3	; 0x03
    a98c:	60 81       	ld	r22, Z
    a98e:	71 81       	ldd	r23, Z+1	; 0x01
    a990:	06 17       	cp	r16, r22
    a992:	17 07       	cpc	r17, r23
    a994:	28 f5       	brcc	.+74     	; 0xa9e0 <qtm_key_sensors_process+0x71e>
    a996:	ee 81       	ldd	r30, Y+6	; 0x06
    a998:	ff 81       	ldd	r31, Y+7	; 0x07
    a99a:	e4 0f       	add	r30, r20
    a99c:	f5 1f       	adc	r31, r21
    a99e:	62 81       	ldd	r22, Z+2	; 0x02
    a9a0:	d6 12       	cpse	r13, r22
    a9a2:	19 c0       	rjmp	.+50     	; 0xa9d6 <qtm_key_sensors_process+0x714>
    a9a4:	ba 01       	movw	r22, r20
    a9a6:	66 0f       	add	r22, r22
    a9a8:	77 1f       	adc	r23, r23
    a9aa:	ec 81       	ldd	r30, Y+4	; 0x04
    a9ac:	fd 81       	ldd	r31, Y+5	; 0x05
    a9ae:	4f 01       	movw	r8, r30
    a9b0:	86 0e       	add	r8, r22
    a9b2:	97 1e       	adc	r9, r23
    a9b4:	f4 01       	movw	r30, r8
    a9b6:	e2 80       	ldd	r14, Z+2	; 0x02
    a9b8:	f3 80       	ldd	r15, Z+3	; 0x03
    a9ba:	f7 01       	movw	r30, r14
    a9bc:	f0 80       	ld	r15, Z
    a9be:	f0 fe       	sbrs	r15, 0
    a9c0:	0a c0       	rjmp	.+20     	; 0xa9d6 <qtm_key_sensors_process+0x714>
    a9c2:	f4 01       	movw	r30, r8
    a9c4:	a0 82       	st	Z, r10
    a9c6:	ec 81       	ldd	r30, Y+4	; 0x04
    a9c8:	fd 81       	ldd	r31, Y+5	; 0x05
    a9ca:	e6 0f       	add	r30, r22
    a9cc:	f7 1f       	adc	r31, r23
    a9ce:	02 80       	ldd	r0, Z+2	; 0x02
    a9d0:	f3 81       	ldd	r31, Z+3	; 0x03
    a9d2:	e0 2d       	mov	r30, r0
    a9d4:	b0 82       	st	Z, r11
    a9d6:	0f 5f       	subi	r16, 0xFF	; 255
    a9d8:	1f 4f       	sbci	r17, 0xFF	; 255
    a9da:	4d 5f       	subi	r20, 0xFD	; 253
    a9dc:	5f 4f       	sbci	r21, 0xFF	; 255
    a9de:	d4 cf       	rjmp	.-88     	; 0xa988 <qtm_key_sensors_process+0x6c6>
    a9e0:	11 96       	adiw	r26, 0x01	; 1
    a9e2:	2d 5f       	subi	r18, 0xFD	; 253
    a9e4:	3f 4f       	sbci	r19, 0xFF	; 255
    a9e6:	34 cf       	rjmp	.-408    	; 0xa850 <qtm_key_sensors_process+0x58e>
    a9e8:	8b e0       	ldi	r24, 0x0B	; 11
    a9ea:	df 91       	pop	r29
    a9ec:	cf 91       	pop	r28
    a9ee:	1f 91       	pop	r17
    a9f0:	0f 91       	pop	r16
    a9f2:	ff 90       	pop	r15
    a9f4:	ef 90       	pop	r14
    a9f6:	df 90       	pop	r13
    a9f8:	cf 90       	pop	r12
    a9fa:	bf 90       	pop	r11
    a9fc:	af 90       	pop	r10
    a9fe:	9f 90       	pop	r9
    aa00:	8f 90       	pop	r8
    aa02:	7f 90       	pop	r7
    aa04:	6f 90       	pop	r6
    aa06:	5f 90       	pop	r5
    aa08:	4f 90       	pop	r4
    aa0a:	3f 90       	pop	r3
    aa0c:	2f 90       	pop	r2
    aa0e:	08 95       	ret

0000aa10 <divide>:
    aa10:	9c 01       	movw	r18, r24
    aa12:	61 15       	cp	r22, r1
    aa14:	71 05       	cpc	r23, r1
    aa16:	09 f1       	breq	.+66     	; 0xaa5a <divide+0x4a>
    aa18:	4f 5f       	subi	r20, 0xFF	; 255
    aa1a:	37 fd       	sbrc	r19, 7
    aa1c:	06 c0       	rjmp	.+12     	; 0xaa2a <divide+0x1a>
    aa1e:	44 23       	and	r20, r20
    aa20:	21 f0       	breq	.+8      	; 0xaa2a <divide+0x1a>
    aa22:	41 50       	subi	r20, 0x01	; 1
    aa24:	22 0f       	add	r18, r18
    aa26:	33 1f       	adc	r19, r19
    aa28:	f8 cf       	rjmp	.-16     	; 0xaa1a <divide+0xa>
    aa2a:	77 fd       	sbrc	r23, 7
    aa2c:	04 c0       	rjmp	.+8      	; 0xaa36 <divide+0x26>
    aa2e:	4f 5f       	subi	r20, 0xFF	; 255
    aa30:	66 0f       	add	r22, r22
    aa32:	77 1f       	adc	r23, r23
    aa34:	fa cf       	rjmp	.-12     	; 0xaa2a <divide+0x1a>
    aa36:	80 e0       	ldi	r24, 0x00	; 0
    aa38:	90 e0       	ldi	r25, 0x00	; 0
    aa3a:	44 23       	and	r20, r20
    aa3c:	81 f0       	breq	.+32     	; 0xaa5e <divide+0x4e>
    aa3e:	97 fd       	sbrc	r25, 7
    aa40:	0c c0       	rjmp	.+24     	; 0xaa5a <divide+0x4a>
    aa42:	88 0f       	add	r24, r24
    aa44:	99 1f       	adc	r25, r25
    aa46:	41 50       	subi	r20, 0x01	; 1
    aa48:	26 17       	cp	r18, r22
    aa4a:	37 07       	cpc	r19, r23
    aa4c:	18 f0       	brcs	.+6      	; 0xaa54 <divide+0x44>
    aa4e:	26 1b       	sub	r18, r22
    aa50:	37 0b       	sbc	r19, r23
    aa52:	01 96       	adiw	r24, 0x01	; 1
    aa54:	76 95       	lsr	r23
    aa56:	67 95       	ror	r22
    aa58:	f0 cf       	rjmp	.-32     	; 0xaa3a <divide+0x2a>
    aa5a:	8f ef       	ldi	r24, 0xFF	; 255
    aa5c:	9f ef       	ldi	r25, 0xFF	; 255
    aa5e:	08 95       	ret

0000aa60 <qtm_init_scroller_module>:
    aa60:	cf 93       	push	r28
    aa62:	df 93       	push	r29
    aa64:	fc 01       	movw	r30, r24
    aa66:	89 2b       	or	r24, r25
    aa68:	b9 f1       	breq	.+110    	; 0xaad8 <qtm_init_scroller_module+0x78>
    aa6a:	24 81       	ldd	r18, Z+4	; 0x04
    aa6c:	35 81       	ldd	r19, Z+5	; 0x05
    aa6e:	21 15       	cp	r18, r1
    aa70:	31 05       	cpc	r19, r1
    aa72:	91 f1       	breq	.+100    	; 0xaad8 <qtm_init_scroller_module+0x78>
    aa74:	46 81       	ldd	r20, Z+6	; 0x06
    aa76:	57 81       	ldd	r21, Z+7	; 0x07
    aa78:	41 15       	cp	r20, r1
    aa7a:	51 05       	cpc	r21, r1
    aa7c:	69 f1       	breq	.+90     	; 0xaad8 <qtm_init_scroller_module+0x78>
    aa7e:	a0 81       	ld	r26, Z
    aa80:	b1 81       	ldd	r27, Z+1	; 0x01
    aa82:	1c 92       	st	X, r1
    aa84:	90 e0       	ldi	r25, 0x00	; 0
    aa86:	a2 81       	ldd	r26, Z+2	; 0x02
    aa88:	b3 81       	ldd	r27, Z+3	; 0x03
    aa8a:	12 96       	adiw	r26, 0x02	; 2
    aa8c:	8c 91       	ld	r24, X
    aa8e:	98 17       	cp	r25, r24
    aa90:	08 f5       	brcc	.+66     	; 0xaad4 <qtm_init_scroller_module+0x74>
    aa92:	d9 01       	movw	r26, r18
    aa94:	89 e0       	ldi	r24, 0x09	; 9
    aa96:	98 9f       	mul	r25, r24
    aa98:	a0 0d       	add	r26, r0
    aa9a:	b1 1d       	adc	r27, r1
    aa9c:	11 24       	eor	r1, r1
    aa9e:	11 96       	adiw	r26, 0x01	; 1
    aaa0:	1c 92       	st	X, r1
    aaa2:	11 97       	sbiw	r26, 0x01	; 1
    aaa4:	ea 01       	movw	r28, r20
    aaa6:	88 e0       	ldi	r24, 0x08	; 8
    aaa8:	98 9f       	mul	r25, r24
    aaaa:	c0 0d       	add	r28, r0
    aaac:	d1 1d       	adc	r29, r1
    aaae:	11 24       	eor	r1, r1
    aab0:	8d 81       	ldd	r24, Y+5	; 0x05
    aab2:	12 96       	adiw	r26, 0x02	; 2
    aab4:	8c 93       	st	X, r24
    aab6:	12 97       	sbiw	r26, 0x02	; 2
    aab8:	13 96       	adiw	r26, 0x03	; 3
    aaba:	1d 92       	st	X+, r1
    aabc:	1c 92       	st	X, r1
    aabe:	14 97       	sbiw	r26, 0x04	; 4
    aac0:	15 96       	adiw	r26, 0x05	; 5
    aac2:	1d 92       	st	X+, r1
    aac4:	1c 92       	st	X, r1
    aac6:	16 97       	sbiw	r26, 0x06	; 6
    aac8:	17 96       	adiw	r26, 0x07	; 7
    aaca:	1d 92       	st	X+, r1
    aacc:	1c 92       	st	X, r1
    aace:	18 97       	sbiw	r26, 0x08	; 8
    aad0:	9f 5f       	subi	r25, 0xFF	; 255
    aad2:	d9 cf       	rjmp	.-78     	; 0xaa86 <qtm_init_scroller_module+0x26>
    aad4:	80 e0       	ldi	r24, 0x00	; 0
    aad6:	01 c0       	rjmp	.+2      	; 0xaada <qtm_init_scroller_module+0x7a>
    aad8:	8b e0       	ldi	r24, 0x0B	; 11
    aada:	df 91       	pop	r29
    aadc:	cf 91       	pop	r28
    aade:	08 95       	ret

0000aae0 <qtm_scroller_process>:
    aae0:	2f 92       	push	r2
    aae2:	3f 92       	push	r3
    aae4:	4f 92       	push	r4
    aae6:	5f 92       	push	r5
    aae8:	6f 92       	push	r6
    aaea:	7f 92       	push	r7
    aaec:	8f 92       	push	r8
    aaee:	9f 92       	push	r9
    aaf0:	af 92       	push	r10
    aaf2:	bf 92       	push	r11
    aaf4:	cf 92       	push	r12
    aaf6:	df 92       	push	r13
    aaf8:	ef 92       	push	r14
    aafa:	ff 92       	push	r15
    aafc:	0f 93       	push	r16
    aafe:	1f 93       	push	r17
    ab00:	cf 93       	push	r28
    ab02:	df 93       	push	r29
    ab04:	cd b7       	in	r28, 0x3d	; 61
    ab06:	de b7       	in	r29, 0x3e	; 62
    ab08:	61 97       	sbiw	r28, 0x11	; 17
    ab0a:	cd bf       	out	0x3d, r28	; 61
    ab0c:	de bf       	out	0x3e, r29	; 62
    ab0e:	fc 01       	movw	r30, r24
    ab10:	00 97       	sbiw	r24, 0x00	; 0
    ab12:	09 f4       	brne	.+2      	; 0xab16 <qtm_scroller_process+0x36>
    ab14:	dc c2       	rjmp	.+1464   	; 0xb0ce <qtm_scroller_process+0x5ee>
    ab16:	e4 80       	ldd	r14, Z+4	; 0x04
    ab18:	f5 80       	ldd	r15, Z+5	; 0x05
    ab1a:	ea 86       	std	Y+10, r14	; 0x0a
    ab1c:	fb 86       	std	Y+11, r15	; 0x0b
    ab1e:	ef 28       	or	r14, r15
    ab20:	09 f4       	brne	.+2      	; 0xab24 <qtm_scroller_process+0x44>
    ab22:	d5 c2       	rjmp	.+1450   	; 0xb0ce <qtm_scroller_process+0x5ee>
    ab24:	e6 80       	ldd	r14, Z+6	; 0x06
    ab26:	f7 80       	ldd	r15, Z+7	; 0x07
    ab28:	e8 86       	std	Y+8, r14	; 0x08
    ab2a:	f9 86       	std	Y+9, r15	; 0x09
    ab2c:	ef 28       	or	r14, r15
    ab2e:	09 f4       	brne	.+2      	; 0xab32 <qtm_scroller_process+0x52>
    ab30:	ce c2       	rjmp	.+1436   	; 0xb0ce <qtm_scroller_process+0x5ee>
    ab32:	a2 81       	ldd	r26, Z+2	; 0x02
    ab34:	b3 81       	ldd	r27, Z+3	; 0x03
    ab36:	4d 90       	ld	r4, X+
    ab38:	5c 90       	ld	r5, X
    ab3a:	41 14       	cp	r4, r1
    ab3c:	51 04       	cpc	r5, r1
    ab3e:	09 f4       	brne	.+2      	; 0xab42 <qtm_scroller_process+0x62>
    ab40:	c6 c2       	rjmp	.+1420   	; 0xb0ce <qtm_scroller_process+0x5ee>
    ab42:	8e 83       	std	Y+6, r24	; 0x06
    ab44:	9f 83       	std	Y+7, r25	; 0x07
    ab46:	00 e0       	ldi	r16, 0x00	; 0
    ab48:	1a 82       	std	Y+2, r1	; 0x02
    ab4a:	91 2c       	mov	r9, r1
    ab4c:	16 e0       	ldi	r17, 0x06	; 6
    ab4e:	81 2e       	mov	r8, r17
    ab50:	ae 81       	ldd	r26, Y+6	; 0x06
    ab52:	bf 81       	ldd	r27, Y+7	; 0x07
    ab54:	12 96       	adiw	r26, 0x02	; 2
    ab56:	ed 91       	ld	r30, X+
    ab58:	fc 91       	ld	r31, X
    ab5a:	13 97       	sbiw	r26, 0x03	; 3
    ab5c:	82 81       	ldd	r24, Z+2	; 0x02
    ab5e:	98 16       	cp	r9, r24
    ab60:	08 f0       	brcs	.+2      	; 0xab64 <qtm_scroller_process+0x84>
    ab62:	b0 c2       	rjmp	.+1376   	; 0xb0c4 <qtm_scroller_process+0x5e4>
    ab64:	68 84       	ldd	r6, Y+8	; 0x08
    ab66:	79 84       	ldd	r7, Y+9	; 0x09
    ab68:	28 e0       	ldi	r18, 0x08	; 8
    ab6a:	92 9e       	mul	r9, r18
    ab6c:	60 0c       	add	r6, r0
    ab6e:	71 1c       	adc	r7, r1
    ab70:	11 24       	eor	r1, r1
    ab72:	d3 01       	movw	r26, r6
    ab74:	11 96       	adiw	r26, 0x01	; 1
    ab76:	4d 91       	ld	r20, X+
    ab78:	5c 91       	ld	r21, X
    ab7a:	12 97       	sbiw	r26, 0x02	; 2
    ab7c:	13 96       	adiw	r26, 0x03	; 3
    ab7e:	ac 90       	ld	r10, X
    ab80:	7a 01       	movw	r14, r20
    ab82:	ea 0c       	add	r14, r10
    ab84:	f1 1c       	adc	r15, r1
    ab86:	ca 01       	movw	r24, r20
    ab88:	60 e0       	ldi	r22, 0x00	; 0
    ab8a:	8e 15       	cp	r24, r14
    ab8c:	9f 05       	cpc	r25, r15
    ab8e:	70 f4       	brcc	.+28     	; 0xabac <qtm_scroller_process+0xcc>
    ab90:	88 9e       	mul	r8, r24
    ab92:	f0 01       	movw	r30, r0
    ab94:	89 9e       	mul	r8, r25
    ab96:	f0 0d       	add	r31, r0
    ab98:	11 24       	eor	r1, r1
    ab9a:	e4 0d       	add	r30, r4
    ab9c:	f5 1d       	adc	r31, r5
    ab9e:	20 81       	ld	r18, Z
    aba0:	25 38       	cpi	r18, 0x85	; 133
    aba2:	11 f4       	brne	.+4      	; 0xaba8 <qtm_scroller_process+0xc8>
    aba4:	c7 01       	movw	r24, r14
    aba6:	61 e0       	ldi	r22, 0x01	; 1
    aba8:	01 96       	adiw	r24, 0x01	; 1
    abaa:	ef cf       	rjmp	.-34     	; 0xab8a <qtm_scroller_process+0xaa>
    abac:	84 9e       	mul	r8, r20
    abae:	f0 01       	movw	r30, r0
    abb0:	85 9e       	mul	r8, r21
    abb2:	f0 0d       	add	r31, r0
    abb4:	11 24       	eor	r1, r1
    abb6:	ec 83       	std	Y+4, r30	; 0x04
    abb8:	fd 83       	std	Y+5, r31	; 0x05
    abba:	34 97       	sbiw	r30, 0x04	; 4
    abbc:	e4 0d       	add	r30, r4
    abbe:	f5 1d       	adc	r31, r5
    abc0:	26 e0       	ldi	r18, 0x06	; 6
    abc2:	a2 9e       	mul	r10, r18
    abc4:	50 01       	movw	r10, r0
    abc6:	11 24       	eor	r1, r1
    abc8:	1a 01       	movw	r2, r20
    abca:	70 e0       	ldi	r23, 0x00	; 0
    abcc:	18 8a       	std	Y+16, r1	; 0x10
    abce:	19 8a       	std	Y+17, r1	; 0x11
    abd0:	2e 14       	cp	r2, r14
    abd2:	3f 04       	cpc	r3, r15
    abd4:	08 f0       	brcs	.+2      	; 0xabd8 <qtm_scroller_process+0xf8>
    abd6:	4f c0       	rjmp	.+158    	; 0xac76 <qtm_scroller_process+0x196>
    abd8:	86 81       	ldd	r24, Z+6	; 0x06
    abda:	97 81       	ldd	r25, Z+7	; 0x07
    abdc:	dc 01       	movw	r26, r24
    abde:	11 96       	adiw	r26, 0x01	; 1
    abe0:	2d 91       	ld	r18, X+
    abe2:	3c 91       	ld	r19, X
    abe4:	12 97       	sbiw	r26, 0x02	; 2
    abe6:	80 85       	ldd	r24, Z+8	; 0x08
    abe8:	91 85       	ldd	r25, Z+9	; 0x09
    abea:	28 1b       	sub	r18, r24
    abec:	39 0b       	sbc	r19, r25
    abee:	12 16       	cp	r1, r18
    abf0:	13 06       	cpc	r1, r19
    abf2:	14 f0       	brlt	.+4      	; 0xabf8 <qtm_scroller_process+0x118>
    abf4:	20 e0       	ldi	r18, 0x00	; 0
    abf6:	30 e0       	ldi	r19, 0x00	; 0
    abf8:	24 16       	cp	r2, r20
    abfa:	35 06       	cpc	r3, r21
    abfc:	a9 f4       	brne	.+42     	; 0xac28 <qtm_scroller_process+0x148>
    abfe:	d3 01       	movw	r26, r6
    ac00:	8c 91       	ld	r24, X
    ac02:	81 30       	cpi	r24, 0x01	; 1
    ac04:	f9 f4       	brne	.+62     	; 0xac44 <qtm_scroller_process+0x164>
    ac06:	6f 01       	movw	r12, r30
    ac08:	ca 0c       	add	r12, r10
    ac0a:	db 1c       	adc	r13, r11
    ac0c:	d6 01       	movw	r26, r12
    ac0e:	8d 91       	ld	r24, X+
    ac10:	9c 91       	ld	r25, X
    ac12:	dc 01       	movw	r26, r24
    ac14:	11 96       	adiw	r26, 0x01	; 1
    ac16:	8d 91       	ld	r24, X+
    ac18:	9c 91       	ld	r25, X
    ac1a:	12 97       	sbiw	r26, 0x02	; 2
    ac1c:	d6 01       	movw	r26, r12
    ac1e:	12 96       	adiw	r26, 0x02	; 2
    ac20:	cd 90       	ld	r12, X+
    ac22:	dc 90       	ld	r13, X
    ac24:	13 97       	sbiw	r26, 0x03	; 3
    ac26:	09 c0       	rjmp	.+18     	; 0xac3a <qtm_scroller_process+0x15a>
    ac28:	80 81       	ld	r24, Z
    ac2a:	91 81       	ldd	r25, Z+1	; 0x01
    ac2c:	dc 01       	movw	r26, r24
    ac2e:	11 96       	adiw	r26, 0x01	; 1
    ac30:	8d 91       	ld	r24, X+
    ac32:	9c 91       	ld	r25, X
    ac34:	12 97       	sbiw	r26, 0x02	; 2
    ac36:	c2 80       	ldd	r12, Z+2	; 0x02
    ac38:	d3 80       	ldd	r13, Z+3	; 0x03
    ac3a:	8c 19       	sub	r24, r12
    ac3c:	9d 09       	sbc	r25, r13
    ac3e:	18 16       	cp	r1, r24
    ac40:	19 06       	cpc	r1, r25
    ac42:	14 f0       	brlt	.+4      	; 0xac48 <qtm_scroller_process+0x168>
    ac44:	80 e0       	ldi	r24, 0x00	; 0
    ac46:	90 e0       	ldi	r25, 0x00	; 0
    ac48:	28 0f       	add	r18, r24
    ac4a:	39 1f       	adc	r19, r25
    ac4c:	d3 01       	movw	r26, r6
    ac4e:	16 96       	adiw	r26, 0x06	; 6
    ac50:	8d 91       	ld	r24, X+
    ac52:	9c 91       	ld	r25, X
    ac54:	17 97       	sbiw	r26, 0x07	; 7
    ac56:	28 17       	cp	r18, r24
    ac58:	39 07       	cpc	r19, r25
    ac5a:	40 f0       	brcs	.+16     	; 0xac6c <qtm_scroller_process+0x18c>
    ac5c:	88 89       	ldd	r24, Y+16	; 0x10
    ac5e:	99 89       	ldd	r25, Y+17	; 0x11
    ac60:	82 17       	cp	r24, r18
    ac62:	93 07       	cpc	r25, r19
    ac64:	10 f4       	brcc	.+4      	; 0xac6a <qtm_scroller_process+0x18a>
    ac66:	28 8b       	std	Y+16, r18	; 0x10
    ac68:	39 8b       	std	Y+17, r19	; 0x11
    ac6a:	71 e0       	ldi	r23, 0x01	; 1
    ac6c:	9f ef       	ldi	r25, 0xFF	; 255
    ac6e:	29 1a       	sub	r2, r25
    ac70:	39 0a       	sbc	r3, r25
    ac72:	36 96       	adiw	r30, 0x06	; 6
    ac74:	ad cf       	rjmp	.-166    	; 0xabd0 <qtm_scroller_process+0xf0>
    ac76:	71 11       	cpse	r23, r1
    ac78:	01 c0       	rjmp	.+2      	; 0xac7c <qtm_scroller_process+0x19c>
    ac7a:	60 e0       	ldi	r22, 0x00	; 0
    ac7c:	a9 e0       	ldi	r26, 0x09	; 9
    ac7e:	9a 9e       	mul	r9, r26
    ac80:	90 01       	movw	r18, r0
    ac82:	11 24       	eor	r1, r1
    ac84:	ea 84       	ldd	r14, Y+10	; 0x0a
    ac86:	fb 84       	ldd	r15, Y+11	; 0x0b
    ac88:	e2 0e       	add	r14, r18
    ac8a:	f3 1e       	adc	r15, r19
    ac8c:	ee 86       	std	Y+14, r14	; 0x0e
    ac8e:	ff 86       	std	Y+15, r15	; 0x0f
    ac90:	d7 01       	movw	r26, r14
    ac92:	8c 91       	ld	r24, X
    ac94:	ae 81       	ldd	r26, Y+6	; 0x06
    ac96:	bf 81       	ldd	r27, Y+7	; 0x07
    ac98:	14 96       	adiw	r26, 0x04	; 4
    ac9a:	ed 91       	ld	r30, X+
    ac9c:	fc 91       	ld	r31, X
    ac9e:	15 97       	sbiw	r26, 0x05	; 5
    aca0:	b8 2f       	mov	r27, r24
    aca2:	b1 70       	andi	r27, 0x01	; 1
    aca4:	bd 87       	std	Y+13, r27	; 0x0d
    aca6:	80 ff       	sbrs	r24, 0
    aca8:	1e c0       	rjmp	.+60     	; 0xace6 <qtm_scroller_process+0x206>
    acaa:	7f 01       	movw	r14, r30
    acac:	e2 0e       	add	r14, r18
    acae:	f3 1e       	adc	r15, r19
    acb0:	d7 01       	movw	r26, r14
    acb2:	17 96       	adiw	r26, 0x07	; 7
    acb4:	cd 90       	ld	r12, X+
    acb6:	dc 90       	ld	r13, X
    acb8:	18 97       	sbiw	r26, 0x08	; 8
    acba:	c6 01       	movw	r24, r12
    acbc:	88 0f       	add	r24, r24
    acbe:	99 1f       	adc	r25, r25
    acc0:	8c 0d       	add	r24, r12
    acc2:	9d 1d       	adc	r25, r13
    acc4:	a8 89       	ldd	r26, Y+16	; 0x10
    acc6:	b9 89       	ldd	r27, Y+17	; 0x11
    acc8:	8a 0f       	add	r24, r26
    acca:	9b 1f       	adc	r25, r27
    accc:	96 95       	lsr	r25
    acce:	87 95       	ror	r24
    acd0:	96 95       	lsr	r25
    acd2:	87 95       	ror	r24
    acd4:	d7 01       	movw	r26, r14
    acd6:	17 96       	adiw	r26, 0x07	; 7
    acd8:	8d 93       	st	X+, r24
    acda:	9c 93       	st	X, r25
    acdc:	18 97       	sbiw	r26, 0x08	; 8
    acde:	77 23       	and	r23, r23
    ace0:	61 f0       	breq	.+24     	; 0xacfa <qtm_scroller_process+0x21a>
    ace2:	61 e0       	ldi	r22, 0x01	; 1
    ace4:	0a c0       	rjmp	.+20     	; 0xacfa <qtm_scroller_process+0x21a>
    ace6:	cf 01       	movw	r24, r30
    ace8:	82 0f       	add	r24, r18
    acea:	93 1f       	adc	r25, r19
    acec:	e8 88       	ldd	r14, Y+16	; 0x10
    acee:	f9 88       	ldd	r15, Y+17	; 0x11
    acf0:	dc 01       	movw	r26, r24
    acf2:	17 96       	adiw	r26, 0x07	; 7
    acf4:	ed 92       	st	X+, r14
    acf6:	fc 92       	st	X, r15
    acf8:	18 97       	sbiw	r26, 0x08	; 8
    acfa:	d3 01       	movw	r26, r6
    acfc:	bc 91       	ld	r27, X
    acfe:	b9 83       	std	Y+1, r27	; 0x01
    ad00:	b2 30       	cpi	r27, 0x02	; 2
    ad02:	08 f0       	brcs	.+2      	; 0xad06 <qtm_scroller_process+0x226>
    ad04:	d4 c1       	rjmp	.+936    	; 0xb0ae <qtm_scroller_process+0x5ce>
    ad06:	d3 01       	movw	r26, r6
    ad08:	14 96       	adiw	r26, 0x04	; 4
    ad0a:	1c 91       	ld	r17, X
    ad0c:	10 3d       	cpi	r17, 0xD0	; 208
    ad0e:	08 f0       	brcs	.+2      	; 0xad12 <qtm_scroller_process+0x232>
    ad10:	ce c1       	rjmp	.+924    	; 0xb0ae <qtm_scroller_process+0x5ce>
    ad12:	61 11       	cpse	r22, r1
    ad14:	05 c0       	rjmp	.+10     	; 0xad20 <qtm_scroller_process+0x240>
    ad16:	e2 0f       	add	r30, r18
    ad18:	f3 1f       	adc	r31, r19
    ad1a:	17 82       	std	Z+7, r1	; 0x07
    ad1c:	10 86       	std	Z+8, r1	; 0x08
    ad1e:	c8 c1       	rjmp	.+912    	; 0xb0b0 <qtm_scroller_process+0x5d0>
    ad20:	f3 01       	movw	r30, r6
    ad22:	f3 81       	ldd	r31, Z+3	; 0x03
    ad24:	fb 83       	std	Y+3, r31	; 0x03
    ad26:	e1 2e       	mov	r14, r17
    ad28:	e2 94       	swap	r14
    ad2a:	9f e0       	ldi	r25, 0x0F	; 15
    ad2c:	e9 22       	and	r14, r25
    ad2e:	ec 86       	std	Y+12, r14	; 0x0c
    ad30:	ac 80       	ldd	r10, Y+4	; 0x04
    ad32:	bd 80       	ldd	r11, Y+5	; 0x05
    ad34:	a4 0c       	add	r10, r4
    ad36:	b5 1c       	adc	r11, r5
    ad38:	f5 01       	movw	r30, r10
    ad3a:	ba 01       	movw	r22, r20
    ad3c:	21 2c       	mov	r2, r1
    ad3e:	31 2c       	mov	r3, r1
    ad40:	20 e0       	ldi	r18, 0x00	; 0
    ad42:	30 e0       	ldi	r19, 0x00	; 0
    ad44:	8b 81       	ldd	r24, Y+3	; 0x03
    ad46:	e8 2e       	mov	r14, r24
    ad48:	f1 2c       	mov	r15, r1
    ad4a:	6a 01       	movw	r12, r20
    ad4c:	ce 0c       	add	r12, r14
    ad4e:	df 1c       	adc	r13, r15
    ad50:	6c 15       	cp	r22, r12
    ad52:	7d 05       	cpc	r23, r13
    ad54:	b0 f4       	brcc	.+44     	; 0xad82 <qtm_scroller_process+0x2a2>
    ad56:	a2 81       	ldd	r26, Z+2	; 0x02
    ad58:	b3 81       	ldd	r27, Z+3	; 0x03
    ad5a:	11 96       	adiw	r26, 0x01	; 1
    ad5c:	8d 91       	ld	r24, X+
    ad5e:	9c 91       	ld	r25, X
    ad60:	12 97       	sbiw	r26, 0x02	; 2
    ad62:	a4 81       	ldd	r26, Z+4	; 0x04
    ad64:	b5 81       	ldd	r27, Z+5	; 0x05
    ad66:	8a 1b       	sub	r24, r26
    ad68:	9b 0b       	sbc	r25, r27
    ad6a:	18 16       	cp	r1, r24
    ad6c:	19 06       	cpc	r1, r25
    ad6e:	2c f4       	brge	.+10     	; 0xad7a <qtm_scroller_process+0x29a>
    ad70:	28 16       	cp	r2, r24
    ad72:	39 06       	cpc	r3, r25
    ad74:	14 f4       	brge	.+4      	; 0xad7a <qtm_scroller_process+0x29a>
    ad76:	1c 01       	movw	r2, r24
    ad78:	9b 01       	movw	r18, r22
    ad7a:	6f 5f       	subi	r22, 0xFF	; 255
    ad7c:	7f 4f       	sbci	r23, 0xFF	; 255
    ad7e:	36 96       	adiw	r30, 0x06	; 6
    ad80:	e7 cf       	rjmp	.-50     	; 0xad50 <qtm_scroller_process+0x270>
    ad82:	42 17       	cp	r20, r18
    ad84:	53 07       	cpc	r21, r19
    ad86:	79 f5       	brne	.+94     	; 0xade6 <qtm_scroller_process+0x306>
    ad88:	99 81       	ldd	r25, Y+1	; 0x01
    ad8a:	91 30       	cpi	r25, 0x01	; 1
    ad8c:	09 f0       	breq	.+2      	; 0xad90 <qtm_scroller_process+0x2b0>
    ad8e:	a1 c1       	rjmp	.+834    	; 0xb0d2 <qtm_scroller_process+0x5f2>
    ad90:	8c 9c       	mul	r8, r12
    ad92:	f0 01       	movw	r30, r0
    ad94:	8d 9c       	mul	r8, r13
    ad96:	f0 0d       	add	r31, r0
    ad98:	11 24       	eor	r1, r1
    ad9a:	36 97       	sbiw	r30, 0x06	; 6
    ad9c:	e4 0d       	add	r30, r4
    ad9e:	f5 1d       	adc	r31, r5
    ada0:	a2 81       	ldd	r26, Z+2	; 0x02
    ada2:	b3 81       	ldd	r27, Z+3	; 0x03
    ada4:	11 96       	adiw	r26, 0x01	; 1
    ada6:	6d 91       	ld	r22, X+
    ada8:	7c 91       	ld	r23, X
    adaa:	12 97       	sbiw	r26, 0x02	; 2
    adac:	84 81       	ldd	r24, Z+4	; 0x04
    adae:	95 81       	ldd	r25, Z+5	; 0x05
    adb0:	68 1b       	sub	r22, r24
    adb2:	79 0b       	sbc	r23, r25
    adb4:	ec 81       	ldd	r30, Y+4	; 0x04
    adb6:	fd 81       	ldd	r31, Y+5	; 0x05
    adb8:	36 96       	adiw	r30, 0x06	; 6
    adba:	e4 0d       	add	r30, r4
    adbc:	f5 1d       	adc	r31, r5
    adbe:	a2 81       	ldd	r26, Z+2	; 0x02
    adc0:	b3 81       	ldd	r27, Z+3	; 0x03
    adc2:	11 96       	adiw	r26, 0x01	; 1
    adc4:	8d 91       	ld	r24, X+
    adc6:	9c 91       	ld	r25, X
    adc8:	12 97       	sbiw	r26, 0x02	; 2
    adca:	04 80       	ldd	r0, Z+4	; 0x04
    adcc:	f5 81       	ldd	r31, Z+5	; 0x05
    adce:	e0 2d       	mov	r30, r0
    add0:	8e 1b       	sub	r24, r30
    add2:	9f 0b       	sbc	r25, r31
    add4:	97 ff       	sbrs	r25, 7
    add6:	02 c0       	rjmp	.+4      	; 0xaddc <qtm_scroller_process+0x2fc>
    add8:	80 e0       	ldi	r24, 0x00	; 0
    adda:	90 e0       	ldi	r25, 0x00	; 0
    addc:	86 17       	cp	r24, r22
    adde:	97 07       	cpc	r25, r23
    ade0:	0c f4       	brge	.+2      	; 0xade4 <qtm_scroller_process+0x304>
    ade2:	7b c1       	rjmp	.+758    	; 0xb0da <qtm_scroller_process+0x5fa>
    ade4:	12 c0       	rjmp	.+36     	; 0xae0a <qtm_scroller_process+0x32a>
    ade6:	82 9e       	mul	r8, r18
    ade8:	f0 01       	movw	r30, r0
    adea:	83 9e       	mul	r8, r19
    adec:	f0 0d       	add	r31, r0
    adee:	11 24       	eor	r1, r1
    adf0:	36 97       	sbiw	r30, 0x06	; 6
    adf2:	e4 0d       	add	r30, r4
    adf4:	f5 1d       	adc	r31, r5
    adf6:	a2 81       	ldd	r26, Z+2	; 0x02
    adf8:	b3 81       	ldd	r27, Z+3	; 0x03
    adfa:	11 96       	adiw	r26, 0x01	; 1
    adfc:	6d 91       	ld	r22, X+
    adfe:	7c 91       	ld	r23, X
    ae00:	12 97       	sbiw	r26, 0x02	; 2
    ae02:	84 81       	ldd	r24, Z+4	; 0x04
    ae04:	95 81       	ldd	r25, Z+5	; 0x05
    ae06:	68 1b       	sub	r22, r24
    ae08:	79 0b       	sbc	r23, r25
    ae0a:	90 e0       	ldi	r25, 0x00	; 0
    ae0c:	77 ff       	sbrs	r23, 7
    ae0e:	02 c0       	rjmp	.+4      	; 0xae14 <qtm_scroller_process+0x334>
    ae10:	60 e0       	ldi	r22, 0x00	; 0
    ae12:	70 e0       	ldi	r23, 0x00	; 0
    ae14:	a1 e0       	ldi	r26, 0x01	; 1
    ae16:	ca 1a       	sub	r12, r26
    ae18:	d1 08       	sbc	r13, r1
    ae1a:	2c 15       	cp	r18, r12
    ae1c:	3d 05       	cpc	r19, r13
    ae1e:	81 f4       	brne	.+32     	; 0xae40 <qtm_scroller_process+0x360>
    ae20:	b9 81       	ldd	r27, Y+1	; 0x01
    ae22:	b1 30       	cpi	r27, 0x01	; 1
    ae24:	29 f5       	brne	.+74     	; 0xae70 <qtm_scroller_process+0x390>
    ae26:	d5 01       	movw	r26, r10
    ae28:	12 96       	adiw	r26, 0x02	; 2
    ae2a:	ed 91       	ld	r30, X+
    ae2c:	fc 91       	ld	r31, X
    ae2e:	13 97       	sbiw	r26, 0x03	; 3
    ae30:	c1 80       	ldd	r12, Z+1	; 0x01
    ae32:	d2 80       	ldd	r13, Z+2	; 0x02
    ae34:	14 96       	adiw	r26, 0x04	; 4
    ae36:	0d 90       	ld	r0, X+
    ae38:	bc 91       	ld	r27, X
    ae3a:	a0 2d       	mov	r26, r0
    ae3c:	f6 01       	movw	r30, r12
    ae3e:	14 c0       	rjmp	.+40     	; 0xae68 <qtm_scroller_process+0x388>
    ae40:	f9 01       	movw	r30, r18
    ae42:	31 96       	adiw	r30, 0x01	; 1
    ae44:	8e 9e       	mul	r8, r30
    ae46:	d0 01       	movw	r26, r0
    ae48:	8f 9e       	mul	r8, r31
    ae4a:	b0 0d       	add	r27, r0
    ae4c:	11 24       	eor	r1, r1
    ae4e:	a4 0d       	add	r26, r4
    ae50:	b5 1d       	adc	r27, r5
    ae52:	12 96       	adiw	r26, 0x02	; 2
    ae54:	ed 91       	ld	r30, X+
    ae56:	fc 91       	ld	r31, X
    ae58:	13 97       	sbiw	r26, 0x03	; 3
    ae5a:	01 80       	ldd	r0, Z+1	; 0x01
    ae5c:	f2 81       	ldd	r31, Z+2	; 0x02
    ae5e:	e0 2d       	mov	r30, r0
    ae60:	14 96       	adiw	r26, 0x04	; 4
    ae62:	0d 90       	ld	r0, X+
    ae64:	bc 91       	ld	r27, X
    ae66:	a0 2d       	mov	r26, r0
    ae68:	ea 1b       	sub	r30, r26
    ae6a:	fb 0b       	sbc	r31, r27
    ae6c:	f7 ff       	sbrs	r31, 7
    ae6e:	02 c0       	rjmp	.+4      	; 0xae74 <qtm_scroller_process+0x394>
    ae70:	e0 e0       	ldi	r30, 0x00	; 0
    ae72:	f0 e0       	ldi	r31, 0x00	; 0
    ae74:	bb 81       	ldd	r27, Y+3	; 0x03
    ae76:	b0 31       	cpi	r27, 0x10	; 16
    ae78:	28 f0       	brcs	.+10     	; 0xae84 <qtm_scroller_process+0x3a4>
    ae7a:	b4 e0       	ldi	r27, 0x04	; 4
    ae7c:	ab 2e       	mov	r10, r27
    ae7e:	88 e0       	ldi	r24, 0x08	; 8
    ae80:	b8 2e       	mov	r11, r24
    ae82:	03 c0       	rjmp	.+6      	; 0xae8a <qtm_scroller_process+0x3aa>
    ae84:	a1 2c       	mov	r10, r1
    ae86:	ac e0       	ldi	r26, 0x0C	; 12
    ae88:	ba 2e       	mov	r11, r26
    ae8a:	91 30       	cpi	r25, 0x01	; 1
    ae8c:	11 f4       	brne	.+4      	; 0xae92 <qtm_scroller_process+0x3b2>
    ae8e:	67 01       	movw	r12, r14
    ae90:	03 c0       	rjmp	.+6      	; 0xae98 <qtm_scroller_process+0x3b8>
    ae92:	24 1b       	sub	r18, r20
    ae94:	35 0b       	sbc	r19, r21
    ae96:	69 01       	movw	r12, r18
    ae98:	0b 2c       	mov	r0, r11
    ae9a:	02 c0       	rjmp	.+4      	; 0xaea0 <qtm_scroller_process+0x3c0>
    ae9c:	cc 0c       	add	r12, r12
    ae9e:	dd 1c       	adc	r13, r13
    aea0:	0a 94       	dec	r0
    aea2:	e2 f7       	brpl	.-8      	; 0xae9c <qtm_scroller_process+0x3bc>
    aea4:	6e 17       	cp	r22, r30
    aea6:	7f 07       	cpc	r23, r31
    aea8:	a8 f0       	brcs	.+42     	; 0xaed4 <qtm_scroller_process+0x3f4>
    aeaa:	c1 01       	movw	r24, r2
    aeac:	8e 1b       	sub	r24, r30
    aeae:	9f 0b       	sbc	r25, r31
    aeb0:	9c 01       	movw	r18, r24
    aeb2:	2e 1b       	sub	r18, r30
    aeb4:	3f 0b       	sbc	r19, r31
    aeb6:	62 0f       	add	r22, r18
    aeb8:	73 1f       	adc	r23, r19
    aeba:	4b 2d       	mov	r20, r11
    aebc:	0e 94 08 55 	call	0xaa10	; 0xaa10 <divide>
    aec0:	21 e0       	ldi	r18, 0x01	; 1
    aec2:	30 e0       	ldi	r19, 0x00	; 0
    aec4:	02 c0       	rjmp	.+4      	; 0xaeca <qtm_scroller_process+0x3ea>
    aec6:	22 0f       	add	r18, r18
    aec8:	33 1f       	adc	r19, r19
    aeca:	ba 94       	dec	r11
    aecc:	e2 f7       	brpl	.-8      	; 0xaec6 <qtm_scroller_process+0x3e6>
    aece:	82 1b       	sub	r24, r18
    aed0:	93 0b       	sbc	r25, r19
    aed2:	0c c0       	rjmp	.+24     	; 0xaeec <qtm_scroller_process+0x40c>
    aed4:	cf 01       	movw	r24, r30
    aed6:	86 1b       	sub	r24, r22
    aed8:	97 0b       	sbc	r25, r23
    aeda:	f1 01       	movw	r30, r2
    aedc:	e6 1b       	sub	r30, r22
    aede:	f7 0b       	sbc	r31, r23
    aee0:	bf 01       	movw	r22, r30
    aee2:	68 0f       	add	r22, r24
    aee4:	79 1f       	adc	r23, r25
    aee6:	4b 2d       	mov	r20, r11
    aee8:	0e 94 08 55 	call	0xaa10	; 0xaa10 <divide>
    aeec:	8c 0d       	add	r24, r12
    aeee:	9d 1d       	adc	r25, r13
    aef0:	fb 81       	ldd	r31, Y+3	; 0x03
    aef2:	f3 30       	cpi	r31, 0x03	; 3
    aef4:	60 f0       	brcs	.+24     	; 0xaf0e <qtm_scroller_process+0x42e>
    aef6:	29 81       	ldd	r18, Y+1	; 0x01
    aef8:	21 30       	cpi	r18, 0x01	; 1
    aefa:	19 f4       	brne	.+6      	; 0xaf02 <qtm_scroller_process+0x422>
    aefc:	4a 2d       	mov	r20, r10
    aefe:	b7 01       	movw	r22, r14
    af00:	04 c0       	rjmp	.+8      	; 0xaf0a <qtm_scroller_process+0x42a>
    af02:	b7 01       	movw	r22, r14
    af04:	61 50       	subi	r22, 0x01	; 1
    af06:	71 09       	sbc	r23, r1
    af08:	4a 2d       	mov	r20, r10
    af0a:	0e 94 08 55 	call	0xaa10	; 0xaa10 <divide>
    af0e:	81 30       	cpi	r24, 0x01	; 1
    af10:	30 e1       	ldi	r19, 0x10	; 16
    af12:	93 07       	cpc	r25, r19
    af14:	10 f0       	brcs	.+4      	; 0xaf1a <qtm_scroller_process+0x43a>
    af16:	80 e0       	ldi	r24, 0x00	; 0
    af18:	90 e1       	ldi	r25, 0x10	; 16
    af1a:	e9 80       	ldd	r14, Y+1	; 0x01
    af1c:	e1 10       	cpse	r14, r1
    af1e:	17 c0       	rjmp	.+46     	; 0xaf4e <qtm_scroller_process+0x46e>
    af20:	1f 70       	andi	r17, 0x0F	; 15
    af22:	a9 f0       	breq	.+42     	; 0xaf4e <qtm_scroller_process+0x46e>
    af24:	28 e2       	ldi	r18, 0x28	; 40
    af26:	12 9f       	mul	r17, r18
    af28:	a0 01       	movw	r20, r0
    af2a:	11 24       	eor	r1, r1
    af2c:	84 17       	cp	r24, r20
    af2e:	95 07       	cpc	r25, r21
    af30:	18 f0       	brcs	.+6      	; 0xaf38 <qtm_scroller_process+0x458>
    af32:	84 1b       	sub	r24, r20
    af34:	95 0b       	sbc	r25, r21
    af36:	02 c0       	rjmp	.+4      	; 0xaf3c <qtm_scroller_process+0x45c>
    af38:	80 e0       	ldi	r24, 0x00	; 0
    af3a:	90 e0       	ldi	r25, 0x00	; 0
    af3c:	44 0f       	add	r20, r20
    af3e:	55 1f       	adc	r21, r21
    af40:	60 e0       	ldi	r22, 0x00	; 0
    af42:	70 e1       	ldi	r23, 0x10	; 16
    af44:	64 1b       	sub	r22, r20
    af46:	75 0b       	sbc	r23, r21
    af48:	4c e0       	ldi	r20, 0x0C	; 12
    af4a:	0e 94 08 55 	call	0xaa10	; 0xaa10 <divide>
    af4e:	2c e0       	ldi	r18, 0x0C	; 12
    af50:	30 e0       	ldi	r19, 0x00	; 0
    af52:	ec 84       	ldd	r14, Y+12	; 0x0c
    af54:	2e 19       	sub	r18, r14
    af56:	31 09       	sbc	r19, r1
    af58:	61 e0       	ldi	r22, 0x01	; 1
    af5a:	70 e0       	ldi	r23, 0x00	; 0
    af5c:	02 c0       	rjmp	.+4      	; 0xaf62 <qtm_scroller_process+0x482>
    af5e:	66 0f       	add	r22, r22
    af60:	77 1f       	adc	r23, r23
    af62:	ea 94       	dec	r14
    af64:	e2 f7       	brpl	.-8      	; 0xaf5e <qtm_scroller_process+0x47e>
    af66:	fb 01       	movw	r30, r22
    af68:	31 97       	sbiw	r30, 0x01	; 1
    af6a:	02 c0       	rjmp	.+4      	; 0xaf70 <qtm_scroller_process+0x490>
    af6c:	96 95       	lsr	r25
    af6e:	87 95       	ror	r24
    af70:	2a 95       	dec	r18
    af72:	e2 f7       	brpl	.-8      	; 0xaf6c <qtm_scroller_process+0x48c>
    af74:	e8 17       	cp	r30, r24
    af76:	f9 07       	cpc	r31, r25
    af78:	08 f4       	brcc	.+2      	; 0xaf7c <qtm_scroller_process+0x49c>
    af7a:	cf 01       	movw	r24, r30
    af7c:	fd 84       	ldd	r15, Y+13	; 0x0d
    af7e:	ff 20       	and	r15, r15
    af80:	d9 f1       	breq	.+118    	; 0xaff8 <qtm_scroller_process+0x518>
    af82:	ae 85       	ldd	r26, Y+14	; 0x0e
    af84:	bf 85       	ldd	r27, Y+15	; 0x0f
    af86:	13 96       	adiw	r26, 0x03	; 3
    af88:	4d 91       	ld	r20, X+
    af8a:	5c 91       	ld	r21, X
    af8c:	14 97       	sbiw	r26, 0x04	; 4
    af8e:	9c 01       	movw	r18, r24
    af90:	24 1b       	sub	r18, r20
    af92:	35 0b       	sbc	r19, r21
    af94:	b9 81       	ldd	r27, Y+1	; 0x01
    af96:	b1 30       	cpi	r27, 0x01	; 1
    af98:	a9 f4       	brne	.+42     	; 0xafc4 <qtm_scroller_process+0x4e4>
    af9a:	db 01       	movw	r26, r22
    af9c:	b6 95       	lsr	r27
    af9e:	a7 95       	ror	r26
    afa0:	37 ff       	sbrs	r19, 7
    afa2:	0a c0       	rjmp	.+20     	; 0xafb8 <qtm_scroller_process+0x4d8>
    afa4:	b1 95       	neg	r27
    afa6:	a1 95       	neg	r26
    afa8:	b1 09       	sbc	r27, r1
    afaa:	2a 17       	cp	r18, r26
    afac:	3b 07       	cpc	r19, r27
    afae:	0c f0       	brlt	.+2      	; 0xafb2 <qtm_scroller_process+0x4d2>
    afb0:	96 c0       	rjmp	.+300    	; 0xb0de <qtm_scroller_process+0x5fe>
    afb2:	26 0f       	add	r18, r22
    afb4:	37 1f       	adc	r19, r23
    afb6:	06 c0       	rjmp	.+12     	; 0xafc4 <qtm_scroller_process+0x4e4>
    afb8:	a2 17       	cp	r26, r18
    afba:	b3 07       	cpc	r27, r19
    afbc:	0c f0       	brlt	.+2      	; 0xafc0 <qtm_scroller_process+0x4e0>
    afbe:	95 c0       	rjmp	.+298    	; 0xb0ea <qtm_scroller_process+0x60a>
    afc0:	26 1b       	sub	r18, r22
    afc2:	37 0b       	sbc	r19, r23
    afc4:	21 30       	cpi	r18, 0x01	; 1
    afc6:	31 05       	cpc	r19, r1
    afc8:	c1 f0       	breq	.+48     	; 0xaffa <qtm_scroller_process+0x51a>
    afca:	2f 3f       	cpi	r18, 0xFF	; 255
    afcc:	6f ef       	ldi	r22, 0xFF	; 255
    afce:	36 07       	cpc	r19, r22
    afd0:	a1 f0       	breq	.+40     	; 0xaffa <qtm_scroller_process+0x51a>
    afd2:	37 ff       	sbrs	r19, 7
    afd4:	09 c0       	rjmp	.+18     	; 0xafe8 <qtm_scroller_process+0x508>
    afd6:	31 95       	neg	r19
    afd8:	21 95       	neg	r18
    afda:	31 09       	sbc	r19, r1
    afdc:	36 95       	lsr	r19
    afde:	27 95       	ror	r18
    afe0:	31 95       	neg	r19
    afe2:	21 95       	neg	r18
    afe4:	31 09       	sbc	r19, r1
    afe6:	02 c0       	rjmp	.+4      	; 0xafec <qtm_scroller_process+0x50c>
    afe8:	36 95       	lsr	r19
    afea:	27 95       	ror	r18
    afec:	24 0f       	add	r18, r20
    afee:	35 1f       	adc	r19, r21
    aff0:	af 01       	movw	r20, r30
    aff2:	42 23       	and	r20, r18
    aff4:	53 23       	and	r21, r19
    aff6:	01 c0       	rjmp	.+2      	; 0xaffa <qtm_scroller_process+0x51a>
    aff8:	ac 01       	movw	r20, r24
    affa:	ae 85       	ldd	r26, Y+14	; 0x0e
    affc:	bf 85       	ldd	r27, Y+15	; 0x0f
    affe:	13 96       	adiw	r26, 0x03	; 3
    b000:	8d 93       	st	X+, r24
    b002:	9c 93       	st	X, r25
    b004:	14 97       	sbiw	r26, 0x04	; 4
    b006:	f3 01       	movw	r30, r6
    b008:	a5 81       	ldd	r26, Z+5	; 0x05
    b00a:	ee 85       	ldd	r30, Y+14	; 0x0e
    b00c:	ff 85       	ldd	r31, Y+15	; 0x0f
    b00e:	65 81       	ldd	r22, Z+5	; 0x05
    b010:	76 81       	ldd	r23, Z+6	; 0x06
    b012:	f3 01       	movw	r30, r6
    b014:	24 81       	ldd	r18, Z+4	; 0x04
    b016:	ca 01       	movw	r24, r20
    b018:	86 1b       	sub	r24, r22
    b01a:	97 0b       	sbc	r25, r23
    b01c:	30 81       	ld	r19, Z
    b01e:	31 30       	cpi	r19, 0x01	; 1
    b020:	e1 f4       	brne	.+56     	; 0xb05a <qtm_scroller_process+0x57a>
    b022:	22 95       	swap	r18
    b024:	2f 70       	andi	r18, 0x0F	; 15
    b026:	e1 e0       	ldi	r30, 0x01	; 1
    b028:	f0 e0       	ldi	r31, 0x00	; 0
    b02a:	02 c0       	rjmp	.+4      	; 0xb030 <qtm_scroller_process+0x550>
    b02c:	ee 0f       	add	r30, r30
    b02e:	ff 1f       	adc	r31, r31
    b030:	2a 95       	dec	r18
    b032:	e2 f7       	brpl	.-8      	; 0xb02c <qtm_scroller_process+0x54c>
    b034:	9f 01       	movw	r18, r30
    b036:	36 95       	lsr	r19
    b038:	27 95       	ror	r18
    b03a:	97 ff       	sbrs	r25, 7
    b03c:	09 c0       	rjmp	.+18     	; 0xb050 <qtm_scroller_process+0x570>
    b03e:	31 95       	neg	r19
    b040:	21 95       	neg	r18
    b042:	31 09       	sbc	r19, r1
    b044:	82 17       	cp	r24, r18
    b046:	93 07       	cpc	r25, r19
    b048:	54 f4       	brge	.+20     	; 0xb05e <qtm_scroller_process+0x57e>
    b04a:	8e 0f       	add	r24, r30
    b04c:	9f 1f       	adc	r25, r31
    b04e:	05 c0       	rjmp	.+10     	; 0xb05a <qtm_scroller_process+0x57a>
    b050:	28 17       	cp	r18, r24
    b052:	39 07       	cpc	r19, r25
    b054:	ac f4       	brge	.+42     	; 0xb080 <qtm_scroller_process+0x5a0>
    b056:	8e 1b       	sub	r24, r30
    b058:	9f 0b       	sbc	r25, r31
    b05a:	97 ff       	sbrs	r25, 7
    b05c:	11 c0       	rjmp	.+34     	; 0xb080 <qtm_scroller_process+0x5a0>
    b05e:	91 95       	neg	r25
    b060:	81 95       	neg	r24
    b062:	91 09       	sbc	r25, r1
    b064:	ee 85       	ldd	r30, Y+14	; 0x0e
    b066:	ff 85       	ldd	r31, Y+15	; 0x0f
    b068:	22 81       	ldd	r18, Z+2	; 0x02
    b06a:	30 e0       	ldi	r19, 0x00	; 0
    b06c:	28 17       	cp	r18, r24
    b06e:	39 07       	cpc	r19, r25
    b070:	14 f0       	brlt	.+4      	; 0xb076 <qtm_scroller_process+0x596>
    b072:	80 e0       	ldi	r24, 0x00	; 0
    b074:	1a c0       	rjmp	.+52     	; 0xb0aa <qtm_scroller_process+0x5ca>
    b076:	ee 85       	ldd	r30, Y+14	; 0x0e
    b078:	ff 85       	ldd	r31, Y+15	; 0x0f
    b07a:	a1 83       	std	Z+1, r26	; 0x01
    b07c:	12 82       	std	Z+2, r1	; 0x02
    b07e:	0b c0       	rjmp	.+22     	; 0xb096 <qtm_scroller_process+0x5b6>
    b080:	ee 85       	ldd	r30, Y+14	; 0x0e
    b082:	ff 85       	ldd	r31, Y+15	; 0x0f
    b084:	21 81       	ldd	r18, Z+1	; 0x01
    b086:	30 e0       	ldi	r19, 0x00	; 0
    b088:	28 17       	cp	r18, r24
    b08a:	39 07       	cpc	r19, r25
    b08c:	94 f7       	brge	.-28     	; 0xb072 <qtm_scroller_process+0x592>
    b08e:	ee 85       	ldd	r30, Y+14	; 0x0e
    b090:	ff 85       	ldd	r31, Y+15	; 0x0f
    b092:	11 82       	std	Z+1, r1	; 0x01
    b094:	a2 83       	std	Z+2, r26	; 0x02
    b096:	46 17       	cp	r20, r22
    b098:	57 07       	cpc	r21, r23
    b09a:	59 f3       	breq	.-42     	; 0xb072 <qtm_scroller_process+0x592>
    b09c:	ae 85       	ldd	r26, Y+14	; 0x0e
    b09e:	bf 85       	ldd	r27, Y+15	; 0x0f
    b0a0:	15 96       	adiw	r26, 0x05	; 5
    b0a2:	4d 93       	st	X+, r20
    b0a4:	5c 93       	st	X, r21
    b0a6:	16 97       	sbiw	r26, 0x06	; 6
    b0a8:	82 e0       	ldi	r24, 0x02	; 2
    b0aa:	81 68       	ori	r24, 0x81	; 129
    b0ac:	02 c0       	rjmp	.+4      	; 0xb0b2 <qtm_scroller_process+0x5d2>
    b0ae:	02 e0       	ldi	r16, 0x02	; 2
    b0b0:	80 e0       	ldi	r24, 0x00	; 0
    b0b2:	ee 85       	ldd	r30, Y+14	; 0x0e
    b0b4:	ff 85       	ldd	r31, Y+15	; 0x0f
    b0b6:	80 83       	st	Z, r24
    b0b8:	81 78       	andi	r24, 0x81	; 129
    b0ba:	ea 80       	ldd	r14, Y+2	; 0x02
    b0bc:	e8 2a       	or	r14, r24
    b0be:	ea 82       	std	Y+2, r14	; 0x02
    b0c0:	93 94       	inc	r9
    b0c2:	46 cd       	rjmp	.-1396   	; 0xab50 <qtm_scroller_process+0x70>
    b0c4:	ed 91       	ld	r30, X+
    b0c6:	fc 91       	ld	r31, X
    b0c8:	ea 80       	ldd	r14, Y+2	; 0x02
    b0ca:	e0 82       	st	Z, r14
    b0cc:	13 c0       	rjmp	.+38     	; 0xb0f4 <qtm_scroller_process+0x614>
    b0ce:	0b e0       	ldi	r16, 0x0B	; 11
    b0d0:	11 c0       	rjmp	.+34     	; 0xb0f4 <qtm_scroller_process+0x614>
    b0d2:	60 e0       	ldi	r22, 0x00	; 0
    b0d4:	70 e0       	ldi	r23, 0x00	; 0
    b0d6:	90 e0       	ldi	r25, 0x00	; 0
    b0d8:	9d ce       	rjmp	.-710    	; 0xae14 <qtm_scroller_process+0x334>
    b0da:	91 e0       	ldi	r25, 0x01	; 1
    b0dc:	9b ce       	rjmp	.-714    	; 0xae14 <qtm_scroller_process+0x334>
    b0de:	2f 3f       	cpi	r18, 0xFF	; 255
    b0e0:	6f ef       	ldi	r22, 0xFF	; 255
    b0e2:	36 07       	cpc	r19, r22
    b0e4:	09 f0       	breq	.+2      	; 0xb0e8 <qtm_scroller_process+0x608>
    b0e6:	77 cf       	rjmp	.-274    	; 0xafd6 <qtm_scroller_process+0x4f6>
    b0e8:	88 cf       	rjmp	.-240    	; 0xaffa <qtm_scroller_process+0x51a>
    b0ea:	21 30       	cpi	r18, 0x01	; 1
    b0ec:	31 05       	cpc	r19, r1
    b0ee:	09 f0       	breq	.+2      	; 0xb0f2 <qtm_scroller_process+0x612>
    b0f0:	70 cf       	rjmp	.-288    	; 0xafd2 <qtm_scroller_process+0x4f2>
    b0f2:	83 cf       	rjmp	.-250    	; 0xaffa <qtm_scroller_process+0x51a>
    b0f4:	80 2f       	mov	r24, r16
    b0f6:	61 96       	adiw	r28, 0x11	; 17
    b0f8:	cd bf       	out	0x3d, r28	; 61
    b0fa:	de bf       	out	0x3e, r29	; 62
    b0fc:	df 91       	pop	r29
    b0fe:	cf 91       	pop	r28
    b100:	1f 91       	pop	r17
    b102:	0f 91       	pop	r16
    b104:	ff 90       	pop	r15
    b106:	ef 90       	pop	r14
    b108:	df 90       	pop	r13
    b10a:	cf 90       	pop	r12
    b10c:	bf 90       	pop	r11
    b10e:	af 90       	pop	r10
    b110:	9f 90       	pop	r9
    b112:	8f 90       	pop	r8
    b114:	7f 90       	pop	r7
    b116:	6f 90       	pop	r6
    b118:	5f 90       	pop	r5
    b11a:	4f 90       	pop	r4
    b11c:	3f 90       	pop	r3
    b11e:	2f 90       	pop	r2
    b120:	08 95       	ret

0000b122 <charge_share_test>:
    b122:	a0 91 fa 68 	lds	r26, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    b126:	b0 91 fb 68 	lds	r27, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    b12a:	25 e0       	ldi	r18, 0x05	; 5
    b12c:	ac 01       	movw	r20, r24
    b12e:	24 9f       	mul	r18, r20
    b130:	c0 01       	movw	r24, r0
    b132:	25 9f       	mul	r18, r21
    b134:	90 0d       	add	r25, r0
    b136:	11 24       	eor	r1, r1
    b138:	14 96       	adiw	r26, 0x04	; 4
    b13a:	ed 91       	ld	r30, X+
    b13c:	fc 91       	ld	r31, X
    b13e:	15 97       	sbiw	r26, 0x05	; 5
    b140:	e8 0f       	add	r30, r24
    b142:	f9 1f       	adc	r31, r25
    b144:	81 81       	ldd	r24, Z+1	; 0x01
    b146:	92 81       	ldd	r25, Z+2	; 0x02
    b148:	86 17       	cp	r24, r22
    b14a:	97 07       	cpc	r25, r23
    b14c:	81 f1       	breq	.+96     	; 0xb1ae <charge_share_test+0x8c>
    b14e:	86 17       	cp	r24, r22
    b150:	97 07       	cpc	r25, r23
    b152:	18 f4       	brcc	.+6      	; 0xb15a <charge_share_test+0x38>
    b154:	68 1b       	sub	r22, r24
    b156:	79 0b       	sbc	r23, r25
    b158:	04 c0       	rjmp	.+8      	; 0xb162 <charge_share_test+0x40>
    b15a:	9c 01       	movw	r18, r24
    b15c:	26 1b       	sub	r18, r22
    b15e:	37 0b       	sbc	r19, r23
    b160:	b9 01       	movw	r22, r18
    b162:	ed 91       	ld	r30, X+
    b164:	fc 91       	ld	r31, X
    b166:	82 81       	ldd	r24, Z+2	; 0x02
    b168:	80 34       	cpi	r24, 0x40	; 64
    b16a:	11 f4       	brne	.+4      	; 0xb170 <charge_share_test+0x4e>
    b16c:	76 95       	lsr	r23
    b16e:	67 95       	ror	r22
    b170:	65 38       	cpi	r22, 0x85	; 133
    b172:	71 05       	cpc	r23, r1
    b174:	d0 f4       	brcc	.+52     	; 0xb1aa <charge_share_test+0x88>
    b176:	66 30       	cpi	r22, 0x06	; 6
    b178:	71 05       	cpc	r23, r1
    b17a:	c8 f0       	brcs	.+50     	; 0xb1ae <charge_share_test+0x8c>
    b17c:	e3 81       	ldd	r30, Z+3	; 0x03
    b17e:	e0 73       	andi	r30, 0x30	; 48
    b180:	f0 e0       	ldi	r31, 0x00	; 0
    b182:	83 e0       	ldi	r24, 0x03	; 3
    b184:	f6 95       	lsr	r31
    b186:	e7 95       	ror	r30
    b188:	8a 95       	dec	r24
    b18a:	e1 f7       	brne	.-8      	; 0xb184 <charge_share_test+0x62>
    b18c:	e0 53       	subi	r30, 0x30	; 48
    b18e:	fc 49       	sbci	r31, 0x9C	; 156
    b190:	80 81       	ld	r24, Z
    b192:	91 81       	ldd	r25, Z+1	; 0x01
    b194:	68 9f       	mul	r22, r24
    b196:	90 01       	movw	r18, r0
    b198:	69 9f       	mul	r22, r25
    b19a:	30 0d       	add	r19, r0
    b19c:	78 9f       	mul	r23, r24
    b19e:	30 0d       	add	r19, r0
    b1a0:	11 24       	eor	r1, r1
    b1a2:	81 e0       	ldi	r24, 0x01	; 1
    b1a4:	23 2b       	or	r18, r19
    b1a6:	21 f4       	brne	.+8      	; 0xb1b0 <charge_share_test+0x8e>
    b1a8:	02 c0       	rjmp	.+4      	; 0xb1ae <charge_share_test+0x8c>
    b1aa:	81 e0       	ldi	r24, 0x01	; 1
    b1ac:	08 95       	ret
    b1ae:	80 e0       	ldi	r24, 0x00	; 0
    b1b0:	08 95       	ret

0000b1b2 <select_next_channel_to_measure>:
    b1b2:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    b1b6:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    b1ba:	a0 91 fa 68 	lds	r26, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    b1be:	b0 91 fb 68 	lds	r27, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    b1c2:	ed 91       	ld	r30, X+
    b1c4:	fc 91       	ld	r31, X
    b1c6:	11 97       	sbiw	r26, 0x01	; 1
    b1c8:	40 81       	ld	r20, Z
    b1ca:	51 81       	ldd	r21, Z+1	; 0x01
    b1cc:	25 e0       	ldi	r18, 0x05	; 5
    b1ce:	28 9f       	mul	r18, r24
    b1d0:	b0 01       	movw	r22, r0
    b1d2:	29 9f       	mul	r18, r25
    b1d4:	70 0d       	add	r23, r0
    b1d6:	11 24       	eor	r1, r1
    b1d8:	20 e0       	ldi	r18, 0x00	; 0
    b1da:	30 e0       	ldi	r19, 0x00	; 0
    b1dc:	84 17       	cp	r24, r20
    b1de:	95 07       	cpc	r25, r21
    b1e0:	a8 f4       	brcc	.+42     	; 0xb20c <select_next_channel_to_measure+0x5a>
    b1e2:	14 96       	adiw	r26, 0x04	; 4
    b1e4:	ed 91       	ld	r30, X+
    b1e6:	fc 91       	ld	r31, X
    b1e8:	15 97       	sbiw	r26, 0x05	; 5
    b1ea:	e2 0f       	add	r30, r18
    b1ec:	f3 1f       	adc	r31, r19
    b1ee:	e6 0f       	add	r30, r22
    b1f0:	f7 1f       	adc	r31, r23
    b1f2:	e0 81       	ld	r30, Z
    b1f4:	2b 5f       	subi	r18, 0xFB	; 251
    b1f6:	3f 4f       	sbci	r19, 0xFF	; 255
    b1f8:	e0 fd       	sbrc	r30, 0
    b1fa:	02 c0       	rjmp	.+4      	; 0xb200 <select_next_channel_to_measure+0x4e>
    b1fc:	01 96       	adiw	r24, 0x01	; 1
    b1fe:	ee cf       	rjmp	.-36     	; 0xb1dc <select_next_channel_to_measure+0x2a>
    b200:	80 93 60 67 	sts	0x6760, r24	; 0x806760 <current_measure_channel>
    b204:	90 93 61 67 	sts	0x6761, r25	; 0x806761 <current_measure_channel+0x1>
    b208:	80 e0       	ldi	r24, 0x00	; 0
    b20a:	08 95       	ret
    b20c:	10 92 60 67 	sts	0x6760, r1	; 0x806760 <current_measure_channel>
    b210:	10 92 61 67 	sts	0x6761, r1	; 0x806761 <current_measure_channel+0x1>
    b214:	81 e0       	ldi	r24, 0x01	; 1
    b216:	08 95       	ret

0000b218 <qtm_measure_node>:
    b218:	af 92       	push	r10
    b21a:	bf 92       	push	r11
    b21c:	cf 92       	push	r12
    b21e:	df 92       	push	r13
    b220:	ef 92       	push	r14
    b222:	ff 92       	push	r15
    b224:	0f 93       	push	r16
    b226:	1f 93       	push	r17
    b228:	cf 93       	push	r28
    b22a:	df 93       	push	r29
    b22c:	7c 01       	movw	r14, r24
    b22e:	e0 91 fa 68 	lds	r30, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    b232:	f0 91 fb 68 	lds	r31, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    b236:	84 e1       	ldi	r24, 0x14	; 20
    b238:	8e 9d       	mul	r24, r14
    b23a:	e0 01       	movw	r28, r0
    b23c:	8f 9d       	mul	r24, r15
    b23e:	d0 0d       	add	r29, r0
    b240:	11 24       	eor	r1, r1
    b242:	a2 81       	ldd	r26, Z+2	; 0x02
    b244:	b3 81       	ldd	r27, Z+3	; 0x03
    b246:	ac 0f       	add	r26, r28
    b248:	bd 1f       	adc	r27, r29
    b24a:	18 96       	adiw	r26, 0x08	; 8
    b24c:	2c 91       	ld	r18, X
    b24e:	18 97       	sbiw	r26, 0x08	; 8
    b250:	19 96       	adiw	r26, 0x09	; 9
    b252:	3c 91       	ld	r19, X
    b254:	19 97       	sbiw	r26, 0x09	; 9
    b256:	1a 96       	adiw	r26, 0x0a	; 10
    b258:	4c 91       	ld	r20, X
    b25a:	1a 97       	sbiw	r26, 0x0a	; 10
    b25c:	1b 96       	adiw	r26, 0x0b	; 11
    b25e:	5c 91       	ld	r21, X
    b260:	1b 97       	sbiw	r26, 0x0b	; 11
    b262:	1c 96       	adiw	r26, 0x0c	; 12
    b264:	6c 91       	ld	r22, X
    b266:	1c 97       	sbiw	r26, 0x0c	; 12
    b268:	1d 96       	adiw	r26, 0x0d	; 13
    b26a:	7c 91       	ld	r23, X
    b26c:	1d 97       	sbiw	r26, 0x0d	; 13
    b26e:	1e 96       	adiw	r26, 0x0e	; 14
    b270:	8c 91       	ld	r24, X
    b272:	1e 97       	sbiw	r26, 0x0e	; 14
    b274:	1f 96       	adiw	r26, 0x0f	; 15
    b276:	9c 91       	ld	r25, X
    b278:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7f07f0>
    b27c:	08 e0       	ldi	r16, 0x08	; 8
    b27e:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b282:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7f07f1>
    b286:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b28a:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7f07f2>
    b28e:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b292:	20 93 f3 07 	sts	0x07F3, r18	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7f07f3>
    b296:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b29a:	20 93 f4 07 	sts	0x07F4, r18	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7f07f4>
    b29e:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b2a2:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7f07f5>
    b2a6:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    b2aa:	a0 81       	ld	r26, Z
    b2ac:	b1 81       	ldd	r27, Z+1	; 0x01
    b2ae:	12 96       	adiw	r26, 0x02	; 2
    b2b0:	8c 91       	ld	r24, X
    b2b2:	80 38       	cpi	r24, 0x80	; 128
    b2b4:	09 f4       	brne	.+2      	; 0xb2b8 <qtm_measure_node+0xa0>
    b2b6:	4f c0       	rjmp	.+158    	; 0xb356 <qtm_measure_node+0x13e>
    b2b8:	a2 81       	ldd	r26, Z+2	; 0x02
    b2ba:	b3 81       	ldd	r27, Z+3	; 0x03
    b2bc:	ac 0f       	add	r26, r28
    b2be:	bd 1f       	adc	r27, r29
    b2c0:	cc 90       	ld	r12, X
    b2c2:	11 96       	adiw	r26, 0x01	; 1
    b2c4:	3c 91       	ld	r19, X
    b2c6:	11 97       	sbiw	r26, 0x01	; 1
    b2c8:	12 96       	adiw	r26, 0x02	; 2
    b2ca:	4c 91       	ld	r20, X
    b2cc:	12 97       	sbiw	r26, 0x02	; 2
    b2ce:	13 96       	adiw	r26, 0x03	; 3
    b2d0:	5c 91       	ld	r21, X
    b2d2:	13 97       	sbiw	r26, 0x03	; 3
    b2d4:	14 96       	adiw	r26, 0x04	; 4
    b2d6:	6c 91       	ld	r22, X
    b2d8:	14 97       	sbiw	r26, 0x04	; 4
    b2da:	15 96       	adiw	r26, 0x05	; 5
    b2dc:	7c 91       	ld	r23, X
    b2de:	15 97       	sbiw	r26, 0x05	; 5
    b2e0:	16 96       	adiw	r26, 0x06	; 6
    b2e2:	8c 91       	ld	r24, X
    b2e4:	16 97       	sbiw	r26, 0x06	; 6
    b2e6:	17 96       	adiw	r26, 0x07	; 7
    b2e8:	9c 91       	ld	r25, X
    b2ea:	c0 92 e8 07 	sts	0x07E8, r12	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7f07e8>
    b2ee:	2c 2d       	mov	r18, r12
    b2f0:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b2f4:	d2 2e       	mov	r13, r18
    b2f6:	20 93 e9 07 	sts	0x07E9, r18	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7f07e9>
    b2fa:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b2fe:	12 2f       	mov	r17, r18
    b300:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7f07ea>
    b304:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b308:	a2 2e       	mov	r10, r18
    b30a:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7f07eb>
    b30e:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b312:	b2 2e       	mov	r11, r18
    b314:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7f07ec>
    b318:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    b31c:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7f07ed>
    b320:	80 81       	ld	r24, Z
    b322:	91 81       	ldd	r25, Z+1	; 0x01
    b324:	dc 01       	movw	r26, r24
    b326:	12 96       	adiw	r26, 0x02	; 2
    b328:	8c 91       	ld	r24, X
    b32a:	81 38       	cpi	r24, 0x81	; 129
    b32c:	21 f4       	brne	.+8      	; 0xb336 <qtm_measure_node+0x11e>
    b32e:	81 e0       	ldi	r24, 0x01	; 1
    b330:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    b334:	10 c0       	rjmp	.+32     	; 0xb356 <qtm_measure_node+0x13e>
    b336:	82 38       	cpi	r24, 0x82	; 130
    b338:	71 f4       	brne	.+28     	; 0xb356 <qtm_measure_node+0x13e>
    b33a:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7f07e0>
    b33e:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7f07f8>
    b342:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7f07f9>
    b346:	10 93 fa 07 	sts	0x07FA, r17	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7f07fa>
    b34a:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7f07fb>
    b34e:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7f07fc>
    b352:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7f07fd>
    b356:	25 e0       	ldi	r18, 0x05	; 5
    b358:	2e 9d       	mul	r18, r14
    b35a:	c0 01       	movw	r24, r0
    b35c:	2f 9d       	mul	r18, r15
    b35e:	90 0d       	add	r25, r0
    b360:	11 24       	eor	r1, r1
    b362:	a4 81       	ldd	r26, Z+4	; 0x04
    b364:	b5 81       	ldd	r27, Z+5	; 0x05
    b366:	a8 0f       	add	r26, r24
    b368:	b9 1f       	adc	r27, r25
    b36a:	13 96       	adiw	r26, 0x03	; 3
    b36c:	2d 91       	ld	r18, X+
    b36e:	3c 91       	ld	r19, X
    b370:	14 97       	sbiw	r26, 0x04	; 4
    b372:	a9 01       	movw	r20, r18
    b374:	53 70       	andi	r21, 0x03	; 3
    b376:	40 93 e4 07 	sts	0x07E4, r20	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7f07e4>
    b37a:	50 93 e5 07 	sts	0x07E5, r21	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7f07e5>
    b37e:	37 fd       	sbrc	r19, 7
    b380:	03 c0       	rjmp	.+6      	; 0xb388 <qtm_measure_node+0x170>
    b382:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7f07ca>
    b386:	03 c0       	rjmp	.+6      	; 0xb38e <qtm_measure_node+0x176>
    b388:	21 e0       	ldi	r18, 0x01	; 1
    b38a:	20 93 ca 07 	sts	0x07CA, r18	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7f07ca>
    b38e:	a4 81       	ldd	r26, Z+4	; 0x04
    b390:	b5 81       	ldd	r27, Z+5	; 0x05
    b392:	a8 0f       	add	r26, r24
    b394:	b9 1f       	adc	r27, r25
    b396:	2c 91       	ld	r18, X
    b398:	21 ff       	sbrs	r18, 1
    b39a:	02 c0       	rjmp	.+4      	; 0xb3a0 <qtm_measure_node+0x188>
    b39c:	25 e0       	ldi	r18, 0x05	; 5
    b39e:	2c 93       	st	X, r18
    b3a0:	24 81       	ldd	r18, Z+4	; 0x04
    b3a2:	35 81       	ldd	r19, Z+5	; 0x05
    b3a4:	d9 01       	movw	r26, r18
    b3a6:	a8 0f       	add	r26, r24
    b3a8:	b9 1f       	adc	r27, r25
    b3aa:	8c 91       	ld	r24, X
    b3ac:	8c 71       	andi	r24, 0x1C	; 28
    b3ae:	69 f4       	brne	.+26     	; 0xb3ca <qtm_measure_node+0x1b2>
    b3b0:	a2 81       	ldd	r26, Z+2	; 0x02
    b3b2:	b3 81       	ldd	r27, Z+3	; 0x03
    b3b4:	ac 0f       	add	r26, r28
    b3b6:	bd 1f       	adc	r27, r29
    b3b8:	52 96       	adiw	r26, 0x12	; 18
    b3ba:	ac 91       	ld	r26, X
    b3bc:	a2 95       	swap	r26
    b3be:	af 70       	andi	r26, 0x0F	; 15
    b3c0:	b0 e0       	ldi	r27, 0x00	; 0
    b3c2:	a8 52       	subi	r26, 0x28	; 40
    b3c4:	bc 49       	sbci	r27, 0x9C	; 156
    b3c6:	8c 91       	ld	r24, X
    b3c8:	01 c0       	rjmp	.+2      	; 0xb3cc <qtm_measure_node+0x1b4>
    b3ca:	8f e1       	ldi	r24, 0x1F	; 31
    b3cc:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7f07e6>
    b3d0:	a2 81       	ldd	r26, Z+2	; 0x02
    b3d2:	b3 81       	ldd	r27, Z+3	; 0x03
    b3d4:	ac 0f       	add	r26, r28
    b3d6:	bd 1f       	adc	r27, r29
    b3d8:	50 96       	adiw	r26, 0x10	; 16
    b3da:	8c 91       	ld	r24, X
    b3dc:	8b 37       	cpi	r24, 0x7B	; 123
    b3de:	10 f4       	brcc	.+4      	; 0xb3e4 <qtm_measure_node+0x1cc>
    b3e0:	8c 5f       	subi	r24, 0xFC	; 252
    b3e2:	01 c0       	rjmp	.+2      	; 0xb3e6 <qtm_measure_node+0x1ce>
    b3e4:	8f e7       	ldi	r24, 0x7F	; 127
    b3e6:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7f07c4>
    b3ea:	a2 81       	ldd	r26, Z+2	; 0x02
    b3ec:	b3 81       	ldd	r27, Z+3	; 0x03
    b3ee:	ac 0f       	add	r26, r28
    b3f0:	bd 1f       	adc	r27, r29
    b3f2:	53 96       	adiw	r26, 0x13	; 19
    b3f4:	8c 91       	ld	r24, X
    b3f6:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7f07c7>
    b3fa:	a2 81       	ldd	r26, Z+2	; 0x02
    b3fc:	b3 81       	ldd	r27, Z+3	; 0x03
    b3fe:	ac 0f       	add	r26, r28
    b400:	bd 1f       	adc	r27, r29
    b402:	51 96       	adiw	r26, 0x11	; 17
    b404:	8c 91       	ld	r24, X
    b406:	82 95       	swap	r24
    b408:	8f 70       	andi	r24, 0x0F	; 15
    b40a:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7f07c9>
    b40e:	82 81       	ldd	r24, Z+2	; 0x02
    b410:	93 81       	ldd	r25, Z+3	; 0x03
    b412:	c8 0f       	add	r28, r24
    b414:	d9 1f       	adc	r29, r25
    b416:	89 89       	ldd	r24, Y+17	; 0x11
    b418:	8f 70       	andi	r24, 0x0F	; 15
    b41a:	80 68       	ori	r24, 0x80	; 128
    b41c:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__TEXT_REGION_LENGTH__+0x7f07c2>
    b420:	81 e8       	ldi	r24, 0x81	; 129
    b422:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    b426:	81 e0       	ldi	r24, 0x01	; 1
    b428:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7f07d0>
    b42c:	df 91       	pop	r29
    b42e:	cf 91       	pop	r28
    b430:	1f 91       	pop	r17
    b432:	0f 91       	pop	r16
    b434:	ff 90       	pop	r15
    b436:	ef 90       	pop	r14
    b438:	df 90       	pop	r13
    b43a:	cf 90       	pop	r12
    b43c:	bf 90       	pop	r11
    b43e:	af 90       	pop	r10
    b440:	08 95       	ret

0000b442 <qtm_acquisition_process>:
    b442:	2f 92       	push	r2
    b444:	3f 92       	push	r3
    b446:	4f 92       	push	r4
    b448:	5f 92       	push	r5
    b44a:	6f 92       	push	r6
    b44c:	7f 92       	push	r7
    b44e:	8f 92       	push	r8
    b450:	9f 92       	push	r9
    b452:	af 92       	push	r10
    b454:	bf 92       	push	r11
    b456:	cf 92       	push	r12
    b458:	df 92       	push	r13
    b45a:	ef 92       	push	r14
    b45c:	ff 92       	push	r15
    b45e:	0f 93       	push	r16
    b460:	1f 93       	push	r17
    b462:	cf 93       	push	r28
    b464:	df 93       	push	r29
    b466:	cd b7       	in	r28, 0x3d	; 61
    b468:	de b7       	in	r29, 0x3e	; 62
    b46a:	27 97       	sbiw	r28, 0x07	; 7
    b46c:	cd bf       	out	0x3d, r28	; 61
    b46e:	de bf       	out	0x3e, r29	; 62
    b470:	80 91 5f 67 	lds	r24, 0x675F	; 0x80675f <touch_seq_lib_state>
    b474:	88 23       	and	r24, r24
    b476:	09 f4       	brne	.+2      	; 0xb47a <qtm_acquisition_process+0x38>
    b478:	46 c2       	rjmp	.+1164   	; 0xb906 <qtm_acquisition_process+0x4c4>
    b47a:	00 91 fa 68 	lds	r16, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    b47e:	10 91 fb 68 	lds	r17, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    b482:	20 91 fc 68 	lds	r18, 0x68FC	; 0x8068fc <qtm_raw_data_measurements_ptr>
    b486:	30 91 fd 68 	lds	r19, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    b48a:	2a 83       	std	Y+2, r18	; 0x02
    b48c:	3b 83       	std	Y+3, r19	; 0x03
    b48e:	c1 2c       	mov	r12, r1
    b490:	d1 2c       	mov	r13, r1
    b492:	a1 2c       	mov	r10, r1
    b494:	b1 2c       	mov	r11, r1
    b496:	21 2c       	mov	r2, r1
    b498:	31 2c       	mov	r3, r1
    b49a:	19 82       	std	Y+1, r1	; 0x01
    b49c:	44 24       	eor	r4, r4
    b49e:	4a 94       	dec	r4
    b4a0:	55 24       	eor	r5, r5
    b4a2:	53 94       	inc	r5
    b4a4:	77 24       	eor	r7, r7
    b4a6:	73 94       	inc	r7
    b4a8:	d8 01       	movw	r26, r16
    b4aa:	0d 90       	ld	r0, X+
    b4ac:	bc 91       	ld	r27, X
    b4ae:	a0 2d       	mov	r26, r0
    b4b0:	ae 83       	std	Y+6, r26	; 0x06
    b4b2:	bf 83       	std	Y+7, r27	; 0x07
    b4b4:	8d 91       	ld	r24, X+
    b4b6:	9c 91       	ld	r25, X
    b4b8:	28 16       	cp	r2, r24
    b4ba:	39 06       	cpc	r3, r25
    b4bc:	08 f0       	brcs	.+2      	; 0xb4c0 <qtm_acquisition_process+0x7e>
    b4be:	1f c2       	rjmp	.+1086   	; 0xb8fe <qtm_acquisition_process+0x4bc>
    b4c0:	aa 81       	ldd	r26, Y+2	; 0x02
    b4c2:	bb 81       	ldd	r27, Y+3	; 0x03
    b4c4:	4d 91       	ld	r20, X+
    b4c6:	5d 91       	ld	r21, X+
    b4c8:	aa 83       	std	Y+2, r26	; 0x02
    b4ca:	bb 83       	std	Y+3, r27	; 0x03
    b4cc:	f8 01       	movw	r30, r16
    b4ce:	e4 80       	ldd	r14, Z+4	; 0x04
    b4d0:	f5 80       	ldd	r15, Z+5	; 0x05
    b4d2:	ea 0c       	add	r14, r10
    b4d4:	fb 1c       	adc	r15, r11
    b4d6:	d7 01       	movw	r26, r14
    b4d8:	2c 91       	ld	r18, X
    b4da:	82 2f       	mov	r24, r18
    b4dc:	8c 71       	andi	r24, 0x1C	; 28
    b4de:	90 e0       	ldi	r25, 0x00	; 0
    b4e0:	96 95       	lsr	r25
    b4e2:	87 95       	ror	r24
    b4e4:	96 95       	lsr	r25
    b4e6:	87 95       	ror	r24
    b4e8:	82 30       	cpi	r24, 0x02	; 2
    b4ea:	91 05       	cpc	r25, r1
    b4ec:	09 f4       	brne	.+2      	; 0xb4f0 <qtm_acquisition_process+0xae>
    b4ee:	a0 c1       	rjmp	.+832    	; 0xb830 <qtm_acquisition_process+0x3ee>
    b4f0:	28 f4       	brcc	.+10     	; 0xb4fc <qtm_acquisition_process+0xba>
    b4f2:	00 97       	sbiw	r24, 0x00	; 0
    b4f4:	59 f0       	breq	.+22     	; 0xb50c <qtm_acquisition_process+0xca>
    b4f6:	01 97       	sbiw	r24, 0x01	; 1
    b4f8:	01 f1       	breq	.+64     	; 0xb53a <qtm_acquisition_process+0xf8>
    b4fa:	f7 c1       	rjmp	.+1006   	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b4fc:	83 30       	cpi	r24, 0x03	; 3
    b4fe:	91 05       	cpc	r25, r1
    b500:	09 f4       	brne	.+2      	; 0xb504 <qtm_acquisition_process+0xc2>
    b502:	59 c1       	rjmp	.+690    	; 0xb7b6 <qtm_acquisition_process+0x374>
    b504:	04 97       	sbiw	r24, 0x04	; 4
    b506:	09 f4       	brne	.+2      	; 0xb50a <qtm_acquisition_process+0xc8>
    b508:	e1 c0       	rjmp	.+450    	; 0xb6cc <qtm_acquisition_process+0x28a>
    b50a:	ef c1       	rjmp	.+990    	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b50c:	02 80       	ldd	r0, Z+2	; 0x02
    b50e:	f3 81       	ldd	r31, Z+3	; 0x03
    b510:	e0 2d       	mov	r30, r0
    b512:	ec 0d       	add	r30, r12
    b514:	fd 1d       	adc	r31, r13
    b516:	92 89       	ldd	r25, Z+18	; 0x12
    b518:	9f 70       	andi	r25, 0x0F	; 15
    b51a:	83 89       	ldd	r24, Z+19	; 0x13
    b51c:	98 17       	cp	r25, r24
    b51e:	10 f4       	brcc	.+4      	; 0xb524 <qtm_acquisition_process+0xe2>
    b520:	89 1b       	sub	r24, r25
    b522:	01 c0       	rjmp	.+2      	; 0xb526 <qtm_acquisition_process+0xe4>
    b524:	80 e0       	ldi	r24, 0x00	; 0
    b526:	9a 01       	movw	r18, r20
    b528:	02 c0       	rjmp	.+4      	; 0xb52e <qtm_acquisition_process+0xec>
    b52a:	36 95       	lsr	r19
    b52c:	27 95       	ror	r18
    b52e:	8a 95       	dec	r24
    b530:	e2 f7       	brpl	.-8      	; 0xb52a <qtm_acquisition_process+0xe8>
    b532:	f7 01       	movw	r30, r14
    b534:	21 83       	std	Z+1, r18	; 0x01
    b536:	32 83       	std	Z+2, r19	; 0x02
    b538:	d8 c1       	rjmp	.+944    	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b53a:	82 81       	ldd	r24, Z+2	; 0x02
    b53c:	93 81       	ldd	r25, Z+3	; 0x03
    b53e:	fc 01       	movw	r30, r24
    b540:	ec 0d       	add	r30, r12
    b542:	fd 1d       	adc	r31, r13
    b544:	4a 01       	movw	r8, r20
    b546:	03 88       	ldd	r0, Z+19	; 0x13
    b548:	02 c0       	rjmp	.+4      	; 0xb54e <qtm_acquisition_process+0x10c>
    b54a:	96 94       	lsr	r9
    b54c:	87 94       	ror	r8
    b54e:	0a 94       	dec	r0
    b550:	e2 f7       	brpl	.-8      	; 0xb54a <qtm_acquisition_process+0x108>
    b552:	d7 01       	movw	r26, r14
    b554:	11 96       	adiw	r26, 0x01	; 1
    b556:	8d 92       	st	X+, r8
    b558:	9c 92       	st	X, r9
    b55a:	12 97       	sbiw	r26, 0x02	; 2
    b55c:	13 96       	adiw	r26, 0x03	; 3
    b55e:	8d 91       	ld	r24, X+
    b560:	9c 91       	ld	r25, X
    b562:	14 97       	sbiw	r26, 0x04	; 4
    b564:	69 2f       	mov	r22, r25
    b566:	66 1f       	adc	r22, r22
    b568:	66 27       	eor	r22, r22
    b56a:	66 1f       	adc	r22, r22
    b56c:	81 14       	cp	r8, r1
    b56e:	b2 e0       	ldi	r27, 0x02	; 2
    b570:	9b 06       	cpc	r9, r27
    b572:	30 f0       	brcs	.+12     	; 0xb580 <qtm_acquisition_process+0x13e>
    b574:	3f ef       	ldi	r19, 0xFF	; 255
    b576:	83 1a       	sub	r8, r19
    b578:	31 e0       	ldi	r19, 0x01	; 1
    b57a:	93 0a       	sbc	r9, r19
    b57c:	41 e0       	ldi	r20, 0x01	; 1
    b57e:	05 c0       	rjmp	.+10     	; 0xb58a <qtm_acquisition_process+0x148>
    b580:	a2 01       	movw	r20, r4
    b582:	48 19       	sub	r20, r8
    b584:	59 09       	sbc	r21, r9
    b586:	4a 01       	movw	r8, r20
    b588:	40 e0       	ldi	r20, 0x00	; 0
    b58a:	96 94       	lsr	r9
    b58c:	87 94       	ror	r8
    b58e:	ae 81       	ldd	r26, Y+6	; 0x06
    b590:	bf 81       	ldd	r27, Y+7	; 0x07
    b592:	12 96       	adiw	r26, 0x02	; 2
    b594:	3c 91       	ld	r19, X
    b596:	30 34       	cpi	r19, 0x40	; 64
    b598:	29 f0       	breq	.+10     	; 0xb5a4 <qtm_acquisition_process+0x162>
    b59a:	44 23       	and	r20, r20
    b59c:	09 f4       	brne	.+2      	; 0xb5a0 <qtm_acquisition_process+0x15e>
    b59e:	b6 c1       	rjmp	.+876    	; 0xb90c <qtm_acquisition_process+0x4ca>
    b5a0:	46 2f       	mov	r20, r22
    b5a2:	06 c0       	rjmp	.+12     	; 0xb5b0 <qtm_acquisition_process+0x16e>
    b5a4:	97 ff       	sbrs	r25, 7
    b5a6:	04 c0       	rjmp	.+8      	; 0xb5b0 <qtm_acquisition_process+0x16e>
    b5a8:	31 e0       	ldi	r19, 0x01	; 1
    b5aa:	41 11       	cpse	r20, r1
    b5ac:	30 e0       	ldi	r19, 0x00	; 0
    b5ae:	43 2f       	mov	r20, r19
    b5b0:	ba e0       	ldi	r27, 0x0A	; 10
    b5b2:	8b 16       	cp	r8, r27
    b5b4:	91 04       	cpc	r9, r1
    b5b6:	08 f0       	brcs	.+2      	; 0xb5ba <qtm_acquisition_process+0x178>
    b5b8:	3f c0       	rjmp	.+126    	; 0xb638 <qtm_acquisition_process+0x1f6>
    b5ba:	26 fd       	sbrc	r18, 6
    b5bc:	3a c0       	rjmp	.+116    	; 0xb632 <qtm_acquisition_process+0x1f0>
    b5be:	27 fd       	sbrc	r18, 7
    b5c0:	94 c1       	rjmp	.+808    	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b5c2:	ae 81       	ldd	r26, Y+6	; 0x06
    b5c4:	bf 81       	ldd	r27, Y+7	; 0x07
    b5c6:	13 96       	adiw	r26, 0x03	; 3
    b5c8:	8c 91       	ld	r24, X
    b5ca:	83 70       	andi	r24, 0x03	; 3
    b5cc:	83 30       	cpi	r24, 0x03	; 3
    b5ce:	59 f4       	brne	.+22     	; 0xb5e6 <qtm_acquisition_process+0x1a4>
    b5d0:	bf e7       	ldi	r27, 0x7F	; 127
    b5d2:	b0 8b       	std	Z+16, r27	; 0x10
    b5d4:	d8 01       	movw	r26, r16
    b5d6:	14 96       	adiw	r26, 0x04	; 4
    b5d8:	ed 91       	ld	r30, X+
    b5da:	fc 91       	ld	r31, X
    b5dc:	15 97       	sbiw	r26, 0x05	; 5
    b5de:	ea 0d       	add	r30, r10
    b5e0:	fb 1d       	adc	r31, r11
    b5e2:	b1 e1       	ldi	r27, 0x11	; 17
    b5e4:	0d c0       	rjmp	.+26     	; 0xb600 <qtm_acquisition_process+0x1be>
    b5e6:	82 30       	cpi	r24, 0x02	; 2
    b5e8:	69 f4       	brne	.+26     	; 0xb604 <qtm_acquisition_process+0x1c2>
    b5ea:	81 89       	ldd	r24, Z+17	; 0x11
    b5ec:	80 7f       	andi	r24, 0xF0	; 240
    b5ee:	81 8b       	std	Z+17, r24	; 0x11
    b5f0:	d8 01       	movw	r26, r16
    b5f2:	14 96       	adiw	r26, 0x04	; 4
    b5f4:	ed 91       	ld	r30, X+
    b5f6:	fc 91       	ld	r31, X
    b5f8:	15 97       	sbiw	r26, 0x05	; 5
    b5fa:	ea 0d       	add	r30, r10
    b5fc:	fb 1d       	adc	r31, r11
    b5fe:	b9 e0       	ldi	r27, 0x09	; 9
    b600:	b0 83       	st	Z, r27
    b602:	73 c1       	rjmp	.+742    	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b604:	81 30       	cpi	r24, 0x01	; 1
    b606:	a9 f4       	brne	.+42     	; 0xb632 <qtm_acquisition_process+0x1f0>
    b608:	81 89       	ldd	r24, Z+17	; 0x11
    b60a:	8f 70       	andi	r24, 0x0F	; 15
    b60c:	81 8b       	std	Z+17, r24	; 0x11
    b60e:	d8 01       	movw	r26, r16
    b610:	12 96       	adiw	r26, 0x02	; 2
    b612:	ed 91       	ld	r30, X+
    b614:	fc 91       	ld	r31, X
    b616:	13 97       	sbiw	r26, 0x03	; 3
    b618:	ec 0d       	add	r30, r12
    b61a:	fd 1d       	adc	r31, r13
    b61c:	81 89       	ldd	r24, Z+17	; 0x11
    b61e:	80 67       	ori	r24, 0x70	; 112
    b620:	81 8b       	std	Z+17, r24	; 0x11
    b622:	14 96       	adiw	r26, 0x04	; 4
    b624:	ed 91       	ld	r30, X+
    b626:	fc 91       	ld	r31, X
    b628:	15 97       	sbiw	r26, 0x05	; 5
    b62a:	ea 0d       	add	r30, r10
    b62c:	fb 1d       	adc	r31, r11
    b62e:	bd e0       	ldi	r27, 0x0D	; 13
    b630:	e7 cf       	rjmp	.-50     	; 0xb600 <qtm_acquisition_process+0x1be>
    b632:	f7 01       	movw	r30, r14
    b634:	70 82       	st	Z, r7
    b636:	59 c1       	rjmp	.+690    	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b638:	9c 01       	movw	r18, r24
    b63a:	33 70       	andi	r19, 0x03	; 3
    b63c:	2f 3f       	cpi	r18, 0xFF	; 255
    b63e:	f3 e0       	ldi	r31, 0x03	; 3
    b640:	3f 07       	cpc	r19, r31
    b642:	31 f4       	brne	.+12     	; 0xb650 <qtm_acquisition_process+0x20e>
    b644:	e1 e8       	ldi	r30, 0x81	; 129
    b646:	d7 01       	movw	r26, r14
    b648:	ec 93       	st	X, r30
    b64a:	8f ef       	ldi	r24, 0xFF	; 255
    b64c:	93 e0       	ldi	r25, 0x03	; 3
    b64e:	0b c0       	rjmp	.+22     	; 0xb666 <qtm_acquisition_process+0x224>
    b650:	21 15       	cp	r18, r1
    b652:	31 05       	cpc	r19, r1
    b654:	59 f4       	brne	.+22     	; 0xb66c <qtm_acquisition_process+0x22a>
    b656:	97 ff       	sbrs	r25, 7
    b658:	25 c0       	rjmp	.+74     	; 0xb6a4 <qtm_acquisition_process+0x262>
    b65a:	e1 e8       	ldi	r30, 0x81	; 129
    b65c:	d7 01       	movw	r26, r14
    b65e:	ec 93       	st	X, r30
    b660:	80 e0       	ldi	r24, 0x00	; 0
    b662:	90 e0       	ldi	r25, 0x00	; 0
    b664:	61 e0       	ldi	r22, 0x01	; 1
    b666:	fe e0       	ldi	r31, 0x0E	; 14
    b668:	f9 83       	std	Y+1, r31	; 0x01
    b66a:	1f c0       	rjmp	.+62     	; 0xb6aa <qtm_acquisition_process+0x268>
    b66c:	c9 01       	movw	r24, r18
    b66e:	41 11       	cpse	r20, r1
    b670:	0f c0       	rjmp	.+30     	; 0xb690 <qtm_acquisition_process+0x24e>
    b672:	01 96       	adiw	r24, 0x01	; 1
    b674:	21 e0       	ldi	r18, 0x01	; 1
    b676:	82 1a       	sub	r8, r18
    b678:	91 08       	sbc	r9, r1
    b67a:	31 e0       	ldi	r19, 0x01	; 1
    b67c:	83 16       	cp	r8, r19
    b67e:	91 04       	cpc	r9, r1
    b680:	a1 f0       	breq	.+40     	; 0xb6aa <qtm_acquisition_process+0x268>
    b682:	8f 3f       	cpi	r24, 0xFF	; 255
    b684:	43 e0       	ldi	r20, 0x03	; 3
    b686:	94 07       	cpc	r25, r20
    b688:	a1 f7       	brne	.-24     	; 0xb672 <qtm_acquisition_process+0x230>
    b68a:	0f c0       	rjmp	.+30     	; 0xb6aa <qtm_acquisition_process+0x268>
    b68c:	00 97       	sbiw	r24, 0x00	; 0
    b68e:	69 f0       	breq	.+26     	; 0xb6aa <qtm_acquisition_process+0x268>
    b690:	01 97       	sbiw	r24, 0x01	; 1
    b692:	ac 01       	movw	r20, r24
    b694:	42 1b       	sub	r20, r18
    b696:	53 0b       	sbc	r21, r19
    b698:	48 0d       	add	r20, r8
    b69a:	59 1d       	adc	r21, r9
    b69c:	41 30       	cpi	r20, 0x01	; 1
    b69e:	51 05       	cpc	r21, r1
    b6a0:	a9 f7       	brne	.-22     	; 0xb68c <qtm_acquisition_process+0x24a>
    b6a2:	03 c0       	rjmp	.+6      	; 0xb6aa <qtm_acquisition_process+0x268>
    b6a4:	80 ef       	ldi	r24, 0xF0	; 240
    b6a6:	90 e0       	ldi	r25, 0x00	; 0
    b6a8:	61 e0       	ldi	r22, 0x01	; 1
    b6aa:	d8 01       	movw	r26, r16
    b6ac:	14 96       	adiw	r26, 0x04	; 4
    b6ae:	ed 91       	ld	r30, X+
    b6b0:	fc 91       	ld	r31, X
    b6b2:	15 97       	sbiw	r26, 0x05	; 5
    b6b4:	ea 0d       	add	r30, r10
    b6b6:	fb 1d       	adc	r31, r11
    b6b8:	70 e0       	ldi	r23, 0x00	; 0
    b6ba:	77 27       	eor	r23, r23
    b6bc:	66 95       	lsr	r22
    b6be:	77 95       	ror	r23
    b6c0:	66 27       	eor	r22, r22
    b6c2:	86 2b       	or	r24, r22
    b6c4:	97 2b       	or	r25, r23
    b6c6:	83 83       	std	Z+3, r24	; 0x03
    b6c8:	94 83       	std	Z+4, r25	; 0x04
    b6ca:	0f c1       	rjmp	.+542    	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b6cc:	f8 01       	movw	r30, r16
    b6ce:	82 80       	ldd	r8, Z+2	; 0x02
    b6d0:	93 80       	ldd	r9, Z+3	; 0x03
    b6d2:	8c 0c       	add	r8, r12
    b6d4:	9d 1c       	adc	r9, r13
    b6d6:	fa 01       	movw	r30, r20
    b6d8:	d4 01       	movw	r26, r8
    b6da:	53 96       	adiw	r26, 0x13	; 19
    b6dc:	0c 90       	ld	r0, X
    b6de:	53 97       	sbiw	r26, 0x13	; 19
    b6e0:	02 c0       	rjmp	.+4      	; 0xb6e6 <qtm_acquisition_process+0x2a4>
    b6e2:	f6 95       	lsr	r31
    b6e4:	e7 95       	ror	r30
    b6e6:	0a 94       	dec	r0
    b6e8:	e2 f7       	brpl	.-8      	; 0xb6e2 <qtm_acquisition_process+0x2a0>
    b6ea:	ec 83       	std	Y+4, r30	; 0x04
    b6ec:	fd 83       	std	Y+5, r31	; 0x05
    b6ee:	50 96       	adiw	r26, 0x10	; 16
    b6f0:	6c 90       	ld	r6, X
    b6f2:	ff e7       	ldi	r31, 0x7F	; 127
    b6f4:	6f 12       	cpse	r6, r31
    b6f6:	0f c0       	rjmp	.+30     	; 0xb716 <qtm_acquisition_process+0x2d4>
    b6f8:	ec 81       	ldd	r30, Y+4	; 0x04
    b6fa:	fd 81       	ldd	r31, Y+5	; 0x05
    b6fc:	d7 01       	movw	r26, r14
    b6fe:	11 96       	adiw	r26, 0x01	; 1
    b700:	ed 93       	st	X+, r30
    b702:	fc 93       	st	X, r31
    b704:	12 97       	sbiw	r26, 0x02	; 2
    b706:	d4 01       	movw	r26, r8
    b708:	50 96       	adiw	r26, 0x10	; 16
    b70a:	8c 91       	ld	r24, X
    b70c:	50 97       	sbiw	r26, 0x10	; 16
    b70e:	8f 7b       	andi	r24, 0xBF	; 191
    b710:	50 96       	adiw	r26, 0x10	; 16
    b712:	8c 93       	st	X, r24
    b714:	42 c0       	rjmp	.+132    	; 0xb79a <qtm_acquisition_process+0x358>
    b716:	f1 2c       	mov	r15, r1
    b718:	26 2d       	mov	r18, r6
    b71a:	30 e0       	ldi	r19, 0x00	; 0
    b71c:	c9 01       	movw	r24, r18
    b71e:	0f 2c       	mov	r0, r15
    b720:	02 c0       	rjmp	.+4      	; 0xb726 <qtm_acquisition_process+0x2e4>
    b722:	96 95       	lsr	r25
    b724:	87 95       	ror	r24
    b726:	0a 94       	dec	r0
    b728:	e2 f7       	brpl	.-8      	; 0xb722 <qtm_acquisition_process+0x2e0>
    b72a:	80 ff       	sbrs	r24, 0
    b72c:	03 c0       	rjmp	.+6      	; 0xb734 <qtm_acquisition_process+0x2f2>
    b72e:	8f 2d       	mov	r24, r15
    b730:	f1 2c       	mov	r15, r1
    b732:	01 c0       	rjmp	.+2      	; 0xb736 <qtm_acquisition_process+0x2f4>
    b734:	87 e0       	ldi	r24, 0x07	; 7
    b736:	8f 5f       	subi	r24, 0xFF	; 255
    b738:	87 30       	cpi	r24, 0x07	; 7
    b73a:	10 f4       	brcc	.+4      	; 0xb740 <qtm_acquisition_process+0x2fe>
    b73c:	f8 2e       	mov	r15, r24
    b73e:	ee cf       	rjmp	.-36     	; 0xb71c <qtm_acquisition_process+0x2da>
    b740:	6c 81       	ldd	r22, Y+4	; 0x04
    b742:	7d 81       	ldd	r23, Y+5	; 0x05
    b744:	c1 01       	movw	r24, r2
    b746:	0e 94 91 58 	call	0xb122	; 0xb122 <charge_share_test>
    b74a:	88 23       	and	r24, r24
    b74c:	51 f0       	breq	.+20     	; 0xb762 <qtm_acquisition_process+0x320>
    b74e:	81 e0       	ldi	r24, 0x01	; 1
    b750:	90 e0       	ldi	r25, 0x00	; 0
    b752:	0f 2c       	mov	r0, r15
    b754:	01 c0       	rjmp	.+2      	; 0xb758 <qtm_acquisition_process+0x316>
    b756:	88 0f       	add	r24, r24
    b758:	0a 94       	dec	r0
    b75a:	ea f7       	brpl	.-6      	; 0xb756 <qtm_acquisition_process+0x314>
    b75c:	86 29       	or	r24, r6
    b75e:	f4 01       	movw	r30, r8
    b760:	80 8b       	std	Z+16, r24	; 0x10
    b762:	d8 01       	movw	r26, r16
    b764:	ff 20       	and	r15, r15
    b766:	91 f0       	breq	.+36     	; 0xb78c <qtm_acquisition_process+0x34a>
    b768:	12 96       	adiw	r26, 0x02	; 2
    b76a:	ed 91       	ld	r30, X+
    b76c:	fc 91       	ld	r31, X
    b76e:	13 97       	sbiw	r26, 0x03	; 3
    b770:	ec 0d       	add	r30, r12
    b772:	fd 1d       	adc	r31, r13
    b774:	fa 94       	dec	r15
    b776:	81 e0       	ldi	r24, 0x01	; 1
    b778:	90 e0       	ldi	r25, 0x00	; 0
    b77a:	01 c0       	rjmp	.+2      	; 0xb77e <qtm_acquisition_process+0x33c>
    b77c:	88 0f       	add	r24, r24
    b77e:	fa 94       	dec	r15
    b780:	ea f7       	brpl	.-6      	; 0xb77c <qtm_acquisition_process+0x33a>
    b782:	80 95       	com	r24
    b784:	90 89       	ldd	r25, Z+16	; 0x10
    b786:	89 23       	and	r24, r25
    b788:	80 8b       	std	Z+16, r24	; 0x10
    b78a:	07 c0       	rjmp	.+14     	; 0xb79a <qtm_acquisition_process+0x358>
    b78c:	14 96       	adiw	r26, 0x04	; 4
    b78e:	ed 91       	ld	r30, X+
    b790:	fc 91       	ld	r31, X
    b792:	15 97       	sbiw	r26, 0x05	; 5
    b794:	ea 0d       	add	r30, r10
    b796:	fb 1d       	adc	r31, r11
    b798:	70 82       	st	Z, r7
    b79a:	d8 01       	movw	r26, r16
    b79c:	14 96       	adiw	r26, 0x04	; 4
    b79e:	ed 91       	ld	r30, X+
    b7a0:	fc 91       	ld	r31, X
    b7a2:	15 97       	sbiw	r26, 0x05	; 5
    b7a4:	ea 0d       	add	r30, r10
    b7a6:	fb 1d       	adc	r31, r11
    b7a8:	80 81       	ld	r24, Z
    b7aa:	81 30       	cpi	r24, 0x01	; 1
    b7ac:	09 f0       	breq	.+2      	; 0xb7b0 <qtm_acquisition_process+0x36e>
    b7ae:	9d c0       	rjmp	.+314    	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b7b0:	2c 81       	ldd	r18, Y+4	; 0x04
    b7b2:	3d 81       	ldd	r19, Y+5	; 0x05
    b7b4:	83 c0       	rjmp	.+262    	; 0xb8bc <qtm_acquisition_process+0x47a>
    b7b6:	02 80       	ldd	r0, Z+2	; 0x02
    b7b8:	f3 81       	ldd	r31, Z+3	; 0x03
    b7ba:	e0 2d       	mov	r30, r0
    b7bc:	ec 0d       	add	r30, r12
    b7be:	fd 1d       	adc	r31, r13
    b7c0:	9a 01       	movw	r18, r20
    b7c2:	03 88       	ldd	r0, Z+19	; 0x13
    b7c4:	02 c0       	rjmp	.+4      	; 0xb7ca <qtm_acquisition_process+0x388>
    b7c6:	36 95       	lsr	r19
    b7c8:	27 95       	ror	r18
    b7ca:	0a 94       	dec	r0
    b7cc:	e2 f7       	brpl	.-8      	; 0xb7c6 <qtm_acquisition_process+0x384>
    b7ce:	2c 83       	std	Y+4, r18	; 0x04
    b7d0:	3d 83       	std	Y+5, r19	; 0x05
    b7d2:	91 88       	ldd	r9, Z+17	; 0x11
    b7d4:	92 94       	swap	r9
    b7d6:	2f e0       	ldi	r18, 0x0F	; 15
    b7d8:	92 22       	and	r9, r18
    b7da:	37 e0       	ldi	r19, 0x07	; 7
    b7dc:	93 16       	cp	r9, r19
    b7de:	91 f0       	breq	.+36     	; 0xb804 <qtm_acquisition_process+0x3c2>
    b7e0:	6c 81       	ldd	r22, Y+4	; 0x04
    b7e2:	7d 81       	ldd	r23, Y+5	; 0x05
    b7e4:	c1 01       	movw	r24, r2
    b7e6:	0e 94 91 58 	call	0xb122	; 0xb122 <charge_share_test>
    b7ea:	81 11       	cpse	r24, r1
    b7ec:	04 c0       	rjmp	.+8      	; 0xb7f6 <qtm_acquisition_process+0x3b4>
    b7ee:	93 94       	inc	r9
    b7f0:	d7 01       	movw	r26, r14
    b7f2:	7c 92       	st	X, r7
    b7f4:	09 c0       	rjmp	.+18     	; 0xb808 <qtm_acquisition_process+0x3c6>
    b7f6:	91 10       	cpse	r9, r1
    b7f8:	03 c0       	rjmp	.+6      	; 0xb800 <qtm_acquisition_process+0x3be>
    b7fa:	f7 01       	movw	r30, r14
    b7fc:	70 82       	st	Z, r7
    b7fe:	04 c0       	rjmp	.+8      	; 0xb808 <qtm_acquisition_process+0x3c6>
    b800:	9a 94       	dec	r9
    b802:	02 c0       	rjmp	.+4      	; 0xb808 <qtm_acquisition_process+0x3c6>
    b804:	96 e0       	ldi	r25, 0x06	; 6
    b806:	99 2e       	mov	r9, r25
    b808:	d8 01       	movw	r26, r16
    b80a:	12 96       	adiw	r26, 0x02	; 2
    b80c:	ed 91       	ld	r30, X+
    b80e:	fc 91       	ld	r31, X
    b810:	13 97       	sbiw	r26, 0x03	; 3
    b812:	ec 0d       	add	r30, r12
    b814:	fd 1d       	adc	r31, r13
    b816:	81 89       	ldd	r24, Z+17	; 0x11
    b818:	8f 70       	andi	r24, 0x0F	; 15
    b81a:	81 8b       	std	Z+17, r24	; 0x11
    b81c:	12 96       	adiw	r26, 0x02	; 2
    b81e:	ed 91       	ld	r30, X+
    b820:	fc 91       	ld	r31, X
    b822:	13 97       	sbiw	r26, 0x03	; 3
    b824:	ec 0d       	add	r30, r12
    b826:	fd 1d       	adc	r31, r13
    b828:	92 94       	swap	r9
    b82a:	80 ef       	ldi	r24, 0xF0	; 240
    b82c:	98 22       	and	r9, r24
    b82e:	36 c0       	rjmp	.+108    	; 0xb89c <qtm_acquisition_process+0x45a>
    b830:	02 80       	ldd	r0, Z+2	; 0x02
    b832:	f3 81       	ldd	r31, Z+3	; 0x03
    b834:	e0 2d       	mov	r30, r0
    b836:	ec 0d       	add	r30, r12
    b838:	fd 1d       	adc	r31, r13
    b83a:	9a 01       	movw	r18, r20
    b83c:	03 88       	ldd	r0, Z+19	; 0x13
    b83e:	02 c0       	rjmp	.+4      	; 0xb844 <qtm_acquisition_process+0x402>
    b840:	36 95       	lsr	r19
    b842:	27 95       	ror	r18
    b844:	0a 94       	dec	r0
    b846:	e2 f7       	brpl	.-8      	; 0xb840 <qtm_acquisition_process+0x3fe>
    b848:	2c 83       	std	Y+4, r18	; 0x04
    b84a:	3d 83       	std	Y+5, r19	; 0x05
    b84c:	81 89       	ldd	r24, Z+17	; 0x11
    b84e:	8f 70       	andi	r24, 0x0F	; 15
    b850:	98 2e       	mov	r9, r24
    b852:	91 f0       	breq	.+36     	; 0xb878 <qtm_acquisition_process+0x436>
    b854:	b9 01       	movw	r22, r18
    b856:	c1 01       	movw	r24, r2
    b858:	0e 94 91 58 	call	0xb122	; 0xb122 <charge_share_test>
    b85c:	81 11       	cpse	r24, r1
    b85e:	04 c0       	rjmp	.+8      	; 0xb868 <qtm_acquisition_process+0x426>
    b860:	9a 94       	dec	r9
    b862:	d7 01       	movw	r26, r14
    b864:	7c 92       	st	X, r7
    b866:	0a c0       	rjmp	.+20     	; 0xb87c <qtm_acquisition_process+0x43a>
    b868:	b7 e0       	ldi	r27, 0x07	; 7
    b86a:	9b 12       	cpse	r9, r27
    b86c:	03 c0       	rjmp	.+6      	; 0xb874 <qtm_acquisition_process+0x432>
    b86e:	f7 01       	movw	r30, r14
    b870:	70 82       	st	Z, r7
    b872:	04 c0       	rjmp	.+8      	; 0xb87c <qtm_acquisition_process+0x43a>
    b874:	93 94       	inc	r9
    b876:	02 c0       	rjmp	.+4      	; 0xb87c <qtm_acquisition_process+0x43a>
    b878:	99 24       	eor	r9, r9
    b87a:	93 94       	inc	r9
    b87c:	d8 01       	movw	r26, r16
    b87e:	12 96       	adiw	r26, 0x02	; 2
    b880:	ed 91       	ld	r30, X+
    b882:	fc 91       	ld	r31, X
    b884:	13 97       	sbiw	r26, 0x03	; 3
    b886:	ec 0d       	add	r30, r12
    b888:	fd 1d       	adc	r31, r13
    b88a:	81 89       	ldd	r24, Z+17	; 0x11
    b88c:	80 7f       	andi	r24, 0xF0	; 240
    b88e:	81 8b       	std	Z+17, r24	; 0x11
    b890:	12 96       	adiw	r26, 0x02	; 2
    b892:	ed 91       	ld	r30, X+
    b894:	fc 91       	ld	r31, X
    b896:	13 97       	sbiw	r26, 0x03	; 3
    b898:	ec 0d       	add	r30, r12
    b89a:	fd 1d       	adc	r31, r13
    b89c:	81 89       	ldd	r24, Z+17	; 0x11
    b89e:	98 2a       	or	r9, r24
    b8a0:	91 8a       	std	Z+17, r9	; 0x11
    b8a2:	14 96       	adiw	r26, 0x04	; 4
    b8a4:	ed 91       	ld	r30, X+
    b8a6:	fc 91       	ld	r31, X
    b8a8:	15 97       	sbiw	r26, 0x05	; 5
    b8aa:	ea 0d       	add	r30, r10
    b8ac:	fb 1d       	adc	r31, r11
    b8ae:	2c 81       	ldd	r18, Y+4	; 0x04
    b8b0:	3d 81       	ldd	r19, Y+5	; 0x05
    b8b2:	21 83       	std	Z+1, r18	; 0x01
    b8b4:	32 83       	std	Z+2, r19	; 0x02
    b8b6:	80 81       	ld	r24, Z
    b8b8:	81 30       	cpi	r24, 0x01	; 1
    b8ba:	b9 f4       	brne	.+46     	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b8bc:	21 15       	cp	r18, r1
    b8be:	42 e0       	ldi	r20, 0x02	; 2
    b8c0:	34 07       	cpc	r19, r20
    b8c2:	28 f0       	brcs	.+10     	; 0xb8ce <qtm_acquisition_process+0x48c>
    b8c4:	2f 5f       	subi	r18, 0xFF	; 255
    b8c6:	31 40       	sbci	r19, 0x01	; 1
    b8c8:	2c 83       	std	Y+4, r18	; 0x04
    b8ca:	3d 83       	std	Y+5, r19	; 0x05
    b8cc:	07 c0       	rjmp	.+14     	; 0xb8dc <qtm_acquisition_process+0x49a>
    b8ce:	c2 01       	movw	r24, r4
    b8d0:	ac 81       	ldd	r26, Y+4	; 0x04
    b8d2:	bd 81       	ldd	r27, Y+5	; 0x05
    b8d4:	8a 1b       	sub	r24, r26
    b8d6:	9b 0b       	sbc	r25, r27
    b8d8:	8c 83       	std	Y+4, r24	; 0x04
    b8da:	9d 83       	std	Y+5, r25	; 0x05
    b8dc:	2c 81       	ldd	r18, Y+4	; 0x04
    b8de:	3d 81       	ldd	r19, Y+5	; 0x05
    b8e0:	2b 30       	cpi	r18, 0x0B	; 11
    b8e2:	31 05       	cpc	r19, r1
    b8e4:	10 f0       	brcs	.+4      	; 0xb8ea <qtm_acquisition_process+0x4a8>
    b8e6:	35 e4       	ldi	r19, 0x45	; 69
    b8e8:	30 83       	st	Z, r19
    b8ea:	4f ef       	ldi	r20, 0xFF	; 255
    b8ec:	24 1a       	sub	r2, r20
    b8ee:	34 0a       	sbc	r3, r20
    b8f0:	55 e0       	ldi	r21, 0x05	; 5
    b8f2:	a5 0e       	add	r10, r21
    b8f4:	b1 1c       	adc	r11, r1
    b8f6:	84 e1       	ldi	r24, 0x14	; 20
    b8f8:	c8 0e       	add	r12, r24
    b8fa:	d1 1c       	adc	r13, r1
    b8fc:	d5 cd       	rjmp	.-1110   	; 0xb4a8 <qtm_acquisition_process+0x66>
    b8fe:	82 e0       	ldi	r24, 0x02	; 2
    b900:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    b904:	09 c0       	rjmp	.+18     	; 0xb918 <qtm_acquisition_process+0x4d6>
    b906:	b3 e0       	ldi	r27, 0x03	; 3
    b908:	b9 83       	std	Y+1, r27	; 0x01
    b90a:	06 c0       	rjmp	.+12     	; 0xb918 <qtm_acquisition_process+0x4d6>
    b90c:	49 2f       	mov	r20, r25
    b90e:	40 95       	com	r20
    b910:	44 1f       	adc	r20, r20
    b912:	44 27       	eor	r20, r20
    b914:	44 1f       	adc	r20, r20
    b916:	4c ce       	rjmp	.-872    	; 0xb5b0 <qtm_acquisition_process+0x16e>
    b918:	89 81       	ldd	r24, Y+1	; 0x01
    b91a:	27 96       	adiw	r28, 0x07	; 7
    b91c:	cd bf       	out	0x3d, r28	; 61
    b91e:	de bf       	out	0x3e, r29	; 62
    b920:	df 91       	pop	r29
    b922:	cf 91       	pop	r28
    b924:	1f 91       	pop	r17
    b926:	0f 91       	pop	r16
    b928:	ff 90       	pop	r15
    b92a:	ef 90       	pop	r14
    b92c:	df 90       	pop	r13
    b92e:	cf 90       	pop	r12
    b930:	bf 90       	pop	r11
    b932:	af 90       	pop	r10
    b934:	9f 90       	pop	r9
    b936:	8f 90       	pop	r8
    b938:	7f 90       	pop	r7
    b93a:	6f 90       	pop	r6
    b93c:	5f 90       	pop	r5
    b93e:	4f 90       	pop	r4
    b940:	3f 90       	pop	r3
    b942:	2f 90       	pop	r2
    b944:	08 95       	ret

0000b946 <qtm_ptc_init_acquisition_module>:
    b946:	5f 92       	push	r5
    b948:	6f 92       	push	r6
    b94a:	7f 92       	push	r7
    b94c:	8f 92       	push	r8
    b94e:	9f 92       	push	r9
    b950:	af 92       	push	r10
    b952:	bf 92       	push	r11
    b954:	cf 92       	push	r12
    b956:	df 92       	push	r13
    b958:	ef 92       	push	r14
    b95a:	ff 92       	push	r15
    b95c:	0f 93       	push	r16
    b95e:	1f 93       	push	r17
    b960:	cf 93       	push	r28
    b962:	df 93       	push	r29
    b964:	00 97       	sbiw	r24, 0x00	; 0
    b966:	09 f4       	brne	.+2      	; 0xb96a <qtm_ptc_init_acquisition_module+0x24>
    b968:	92 c0       	rjmp	.+292    	; 0xba8e <qtm_ptc_init_acquisition_module+0x148>
    b96a:	dc 01       	movw	r26, r24
    b96c:	ed 91       	ld	r30, X+
    b96e:	fc 91       	ld	r31, X
    b970:	60 81       	ld	r22, Z
    b972:	71 81       	ldd	r23, Z+1	; 0x01
    b974:	40 e0       	ldi	r20, 0x00	; 0
    b976:	50 e0       	ldi	r21, 0x00	; 0
    b978:	20 e0       	ldi	r18, 0x00	; 0
    b97a:	30 e0       	ldi	r19, 0x00	; 0
    b97c:	b0 e0       	ldi	r27, 0x00	; 0
    b97e:	10 e0       	ldi	r17, 0x00	; 0
    b980:	f1 2c       	mov	r15, r1
    b982:	e1 2c       	mov	r14, r1
    b984:	91 2c       	mov	r9, r1
    b986:	81 2c       	mov	r8, r1
    b988:	71 2c       	mov	r7, r1
    b98a:	61 2c       	mov	r6, r1
    b98c:	26 17       	cp	r18, r22
    b98e:	37 07       	cpc	r19, r23
    b990:	51 f1       	breq	.+84     	; 0xb9e6 <qtm_ptc_init_acquisition_module+0xa0>
    b992:	ec 01       	movw	r28, r24
    b994:	ea 81       	ldd	r30, Y+2	; 0x02
    b996:	fb 81       	ldd	r31, Y+3	; 0x03
    b998:	e4 0f       	add	r30, r20
    b99a:	f5 1f       	adc	r31, r21
    b99c:	a0 80       	ld	r10, Z
    b99e:	a0 85       	ldd	r26, Z+8	; 0x08
    b9a0:	aa 2a       	or	r10, r26
    b9a2:	b1 80       	ldd	r11, Z+1	; 0x01
    b9a4:	a1 85       	ldd	r26, Z+9	; 0x09
    b9a6:	ba 2a       	or	r11, r26
    b9a8:	c2 80       	ldd	r12, Z+2	; 0x02
    b9aa:	a2 85       	ldd	r26, Z+10	; 0x0a
    b9ac:	ca 2a       	or	r12, r26
    b9ae:	d3 80       	ldd	r13, Z+3	; 0x03
    b9b0:	a3 85       	ldd	r26, Z+11	; 0x0b
    b9b2:	da 2a       	or	r13, r26
    b9b4:	d4 81       	ldd	r29, Z+4	; 0x04
    b9b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    b9b8:	da 2b       	or	r29, r26
    b9ba:	c5 81       	ldd	r28, Z+5	; 0x05
    b9bc:	a5 85       	ldd	r26, Z+13	; 0x0d
    b9be:	ca 2b       	or	r28, r26
    b9c0:	56 80       	ldd	r5, Z+6	; 0x06
    b9c2:	a6 85       	ldd	r26, Z+14	; 0x0e
    b9c4:	a5 29       	or	r26, r5
    b9c6:	57 80       	ldd	r5, Z+7	; 0x07
    b9c8:	e7 85       	ldd	r30, Z+15	; 0x0f
    b9ca:	e5 29       	or	r30, r5
    b9cc:	ba 29       	or	r27, r10
    b9ce:	1b 29       	or	r17, r11
    b9d0:	fc 28       	or	r15, r12
    b9d2:	ed 28       	or	r14, r13
    b9d4:	9d 2a       	or	r9, r29
    b9d6:	8c 2a       	or	r8, r28
    b9d8:	7a 2a       	or	r7, r26
    b9da:	6e 2a       	or	r6, r30
    b9dc:	2f 5f       	subi	r18, 0xFF	; 255
    b9de:	3f 4f       	sbci	r19, 0xFF	; 255
    b9e0:	4c 5e       	subi	r20, 0xEC	; 236
    b9e2:	5f 4f       	sbci	r21, 0xFF	; 255
    b9e4:	d3 cf       	rjmp	.-90     	; 0xb98c <qtm_ptc_init_acquisition_module+0x46>
    b9e6:	2b 2f       	mov	r18, r27
    b9e8:	31 2f       	mov	r19, r17
    b9ea:	4f 2d       	mov	r20, r15
    b9ec:	5e 2d       	mov	r21, r14
    b9ee:	69 2d       	mov	r22, r9
    b9f0:	78 2d       	mov	r23, r8
    b9f2:	87 2d       	mov	r24, r7
    b9f4:	96 2d       	mov	r25, r6
    b9f6:	a0 e0       	ldi	r26, 0x00	; 0
    b9f8:	0e 94 41 5f 	call	0xbe82	; 0xbe82 <__cmpdi2_s8>
    b9fc:	09 f4       	brne	.+2      	; 0xba00 <qtm_ptc_init_acquisition_module+0xba>
    b9fe:	49 c0       	rjmp	.+146    	; 0xba92 <qtm_ptc_init_acquisition_module+0x14c>
    ba00:	81 e0       	ldi	r24, 0x01	; 1
    ba02:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    ba06:	2b ee       	ldi	r18, 0xEB	; 235
    ba08:	c2 2e       	mov	r12, r18
    ba0a:	23 e6       	ldi	r18, 0x63	; 99
    ba0c:	d2 2e       	mov	r13, r18
    ba0e:	c0 e0       	ldi	r28, 0x00	; 0
    ba10:	d0 e0       	ldi	r29, 0x00	; 0
    ba12:	aa 24       	eor	r10, r10
    ba14:	a3 94       	inc	r10
    ba16:	b1 2c       	mov	r11, r1
    ba18:	4c e0       	ldi	r20, 0x0C	; 12
    ba1a:	54 2e       	mov	r5, r20
    ba1c:	2b 2f       	mov	r18, r27
    ba1e:	31 2f       	mov	r19, r17
    ba20:	4f 2d       	mov	r20, r15
    ba22:	5e 2d       	mov	r21, r14
    ba24:	69 2d       	mov	r22, r9
    ba26:	78 2d       	mov	r23, r8
    ba28:	87 2d       	mov	r24, r7
    ba2a:	96 2d       	mov	r25, r6
    ba2c:	0c 2f       	mov	r16, r28
    ba2e:	0e 94 25 5f 	call	0xbe4a	; 0xbe4a <__lshrdi3>
    ba32:	21 70       	andi	r18, 0x01	; 1
    ba34:	30 e0       	ldi	r19, 0x00	; 0
    ba36:	40 e0       	ldi	r20, 0x00	; 0
    ba38:	50 e0       	ldi	r21, 0x00	; 0
    ba3a:	60 e0       	ldi	r22, 0x00	; 0
    ba3c:	70 e0       	ldi	r23, 0x00	; 0
    ba3e:	80 e0       	ldi	r24, 0x00	; 0
    ba40:	90 e0       	ldi	r25, 0x00	; 0
    ba42:	a0 e0       	ldi	r26, 0x00	; 0
    ba44:	0e 94 41 5f 	call	0xbe82	; 0xbe82 <__cmpdi2_s8>
    ba48:	c9 f0       	breq	.+50     	; 0xba7c <qtm_ptc_init_acquisition_module+0x136>
    ba4a:	f6 01       	movw	r30, r12
    ba4c:	80 81       	ld	r24, Z
    ba4e:	e8 2f       	mov	r30, r24
    ba50:	e2 95       	swap	r30
    ba52:	e6 95       	lsr	r30
    ba54:	e7 70       	andi	r30, 0x07	; 7
    ba56:	f0 e0       	ldi	r31, 0x00	; 0
    ba58:	ee 0f       	add	r30, r30
    ba5a:	ff 1f       	adc	r31, r31
    ba5c:	e3 52       	subi	r30, 0x23	; 35
    ba5e:	fc 49       	sbci	r31, 0x9C	; 156
    ba60:	01 90       	ld	r0, Z+
    ba62:	f0 81       	ld	r31, Z
    ba64:	e0 2d       	mov	r30, r0
    ba66:	8f 71       	andi	r24, 0x1F	; 31
    ba68:	95 01       	movw	r18, r10
    ba6a:	02 c0       	rjmp	.+4      	; 0xba70 <qtm_ptc_init_acquisition_module+0x12a>
    ba6c:	22 0f       	add	r18, r18
    ba6e:	33 1f       	adc	r19, r19
    ba70:	8a 95       	dec	r24
    ba72:	e2 f7       	brpl	.-8      	; 0xba6c <qtm_ptc_init_acquisition_module+0x126>
    ba74:	22 83       	std	Z+2, r18	; 0x02
    ba76:	26 83       	std	Z+6, r18	; 0x06
    ba78:	53 86       	std	Z+11, r5	; 0x0b
    ba7a:	25 87       	std	Z+13, r18	; 0x0d
    ba7c:	21 96       	adiw	r28, 0x01	; 1
    ba7e:	3f ef       	ldi	r19, 0xFF	; 255
    ba80:	c3 1a       	sub	r12, r19
    ba82:	d3 0a       	sbc	r13, r19
    ba84:	c0 33       	cpi	r28, 0x30	; 48
    ba86:	d1 05       	cpc	r29, r1
    ba88:	49 f6       	brne	.-110    	; 0xba1c <qtm_ptc_init_acquisition_module+0xd6>
    ba8a:	80 e0       	ldi	r24, 0x00	; 0
    ba8c:	03 c0       	rjmp	.+6      	; 0xba94 <qtm_ptc_init_acquisition_module+0x14e>
    ba8e:	8b e0       	ldi	r24, 0x0B	; 11
    ba90:	01 c0       	rjmp	.+2      	; 0xba94 <qtm_ptc_init_acquisition_module+0x14e>
    ba92:	82 e0       	ldi	r24, 0x02	; 2
    ba94:	df 91       	pop	r29
    ba96:	cf 91       	pop	r28
    ba98:	1f 91       	pop	r17
    ba9a:	0f 91       	pop	r16
    ba9c:	ff 90       	pop	r15
    ba9e:	ef 90       	pop	r14
    baa0:	df 90       	pop	r13
    baa2:	cf 90       	pop	r12
    baa4:	bf 90       	pop	r11
    baa6:	af 90       	pop	r10
    baa8:	9f 90       	pop	r9
    baaa:	8f 90       	pop	r8
    baac:	7f 90       	pop	r7
    baae:	6f 90       	pop	r6
    bab0:	5f 90       	pop	r5
    bab2:	08 95       	ret

0000bab4 <qtm_ptc_qtlib_assign_signal_memory>:
    bab4:	00 97       	sbiw	r24, 0x00	; 0
    bab6:	31 f0       	breq	.+12     	; 0xbac4 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    bab8:	80 93 fc 68 	sts	0x68FC, r24	; 0x8068fc <qtm_raw_data_measurements_ptr>
    babc:	90 93 fd 68 	sts	0x68FD, r25	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    bac0:	80 e0       	ldi	r24, 0x00	; 0
    bac2:	08 95       	ret
    bac4:	8b e0       	ldi	r24, 0x0B	; 11
    bac6:	08 95       	ret

0000bac8 <qtm_ptc_start_measurement_seq>:
    bac8:	61 15       	cp	r22, r1
    baca:	71 05       	cpc	r23, r1
    bacc:	61 f1       	breq	.+88     	; 0xbb26 <qtm_ptc_start_measurement_seq+0x5e>
    bace:	00 97       	sbiw	r24, 0x00	; 0
    bad0:	51 f1       	breq	.+84     	; 0xbb26 <qtm_ptc_start_measurement_seq+0x5e>
    bad2:	20 91 5f 67 	lds	r18, 0x675F	; 0x80675f <touch_seq_lib_state>
    bad6:	22 23       	and	r18, r18
    bad8:	41 f1       	breq	.+80     	; 0xbb2a <qtm_ptc_start_measurement_seq+0x62>
    bada:	24 30       	cpi	r18, 0x04	; 4
    badc:	41 f1       	breq	.+80     	; 0xbb2e <qtm_ptc_start_measurement_seq+0x66>
    bade:	80 93 fa 68 	sts	0x68FA, r24	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    bae2:	90 93 fb 68 	sts	0x68FB, r25	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    bae6:	60 93 5d 67 	sts	0x675D, r22	; 0x80675d <ptc_seq_measure_complete_pointer>
    baea:	70 93 5e 67 	sts	0x675E, r23	; 0x80675e <ptc_seq_measure_complete_pointer+0x1>
    baee:	dc 01       	movw	r26, r24
    baf0:	ed 91       	ld	r30, X+
    baf2:	fc 91       	ld	r31, X
    baf4:	22 81       	ldd	r18, Z+2	; 0x02
    baf6:	20 34       	cpi	r18, 0x40	; 64
    baf8:	19 f4       	brne	.+6      	; 0xbb00 <qtm_ptc_start_measurement_seq+0x38>
    bafa:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    bafe:	07 c0       	rjmp	.+14     	; 0xbb0e <qtm_ptc_start_measurement_seq+0x46>
    bb00:	20 38       	cpi	r18, 0x80	; 128
    bb02:	11 f0       	breq	.+4      	; 0xbb08 <qtm_ptc_start_measurement_seq+0x40>
    bb04:	21 38       	cpi	r18, 0x81	; 129
    bb06:	31 f4       	brne	.+12     	; 0xbb14 <qtm_ptc_start_measurement_seq+0x4c>
    bb08:	21 e0       	ldi	r18, 0x01	; 1
    bb0a:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    bb0e:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7f07cb>
    bb12:	11 c0       	rjmp	.+34     	; 0xbb36 <qtm_ptc_start_measurement_seq+0x6e>
    bb14:	22 38       	cpi	r18, 0x82	; 130
    bb16:	69 f4       	brne	.+26     	; 0xbb32 <qtm_ptc_start_measurement_seq+0x6a>
    bb18:	21 e0       	ldi	r18, 0x01	; 1
    bb1a:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7f07c1>
    bb1e:	29 e0       	ldi	r18, 0x09	; 9
    bb20:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7f07cb>
    bb24:	08 c0       	rjmp	.+16     	; 0xbb36 <qtm_ptc_start_measurement_seq+0x6e>
    bb26:	8b e0       	ldi	r24, 0x0B	; 11
    bb28:	08 95       	ret
    bb2a:	83 e0       	ldi	r24, 0x03	; 3
    bb2c:	08 95       	ret
    bb2e:	81 e0       	ldi	r24, 0x01	; 1
    bb30:	08 95       	ret
    bb32:	82 e0       	ldi	r24, 0x02	; 2
    bb34:	08 95       	ret
    bb36:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    bb3a:	dc 01       	movw	r26, r24
    bb3c:	ed 91       	ld	r30, X+
    bb3e:	fc 91       	ld	r31, X
    bb40:	84 81       	ldd	r24, Z+4	; 0x04
    bb42:	92 81       	ldd	r25, Z+2	; 0x02
    bb44:	90 34       	cpi	r25, 0x40	; 64
    bb46:	51 f4       	brne	.+20     	; 0xbb5c <qtm_ptc_start_measurement_seq+0x94>
    bb48:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7f07c5>
    bb4c:	80 31       	cpi	r24, 0x10	; 16
    bb4e:	10 f4       	brcc	.+4      	; 0xbb54 <qtm_ptc_start_measurement_seq+0x8c>
    bb50:	80 62       	ori	r24, 0x20	; 32
    bb52:	01 c0       	rjmp	.+2      	; 0xbb56 <qtm_ptc_start_measurement_seq+0x8e>
    bb54:	8f e2       	ldi	r24, 0x2F	; 47
    bb56:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7f07c3>
    bb5a:	08 c0       	rjmp	.+16     	; 0xbb6c <qtm_ptc_start_measurement_seq+0xa4>
    bb5c:	90 e2       	ldi	r25, 0x20	; 32
    bb5e:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7f07c3>
    bb62:	8f 30       	cpi	r24, 0x0F	; 15
    bb64:	08 f0       	brcs	.+2      	; 0xbb68 <qtm_ptc_start_measurement_seq+0xa0>
    bb66:	8f e0       	ldi	r24, 0x0F	; 15
    bb68:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7f07c5>
    bb6c:	81 e0       	ldi	r24, 0x01	; 1
    bb6e:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <__TEXT_REGION_LENGTH__+0x7f07d3>
    bb72:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <__TEXT_REGION_LENGTH__+0x7f07d2>
    bb76:	80 93 fa 62 	sts	0x62FA, r24	; 0x8062fa <qtm_which_mode_current>
    bb7a:	10 92 60 67 	sts	0x6760, r1	; 0x806760 <current_measure_channel>
    bb7e:	10 92 61 67 	sts	0x6761, r1	; 0x806761 <current_measure_channel+0x1>
    bb82:	0e 94 d9 58 	call	0xb1b2	; 0xb1b2 <select_next_channel_to_measure>
    bb86:	81 11       	cpse	r24, r1
    bb88:	0b c0       	rjmp	.+22     	; 0xbba0 <qtm_ptc_start_measurement_seq+0xd8>
    bb8a:	84 e0       	ldi	r24, 0x04	; 4
    bb8c:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    bb90:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    bb94:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    bb98:	0e 94 0c 59 	call	0xb218	; 0xb218 <qtm_measure_node>
    bb9c:	80 e0       	ldi	r24, 0x00	; 0
    bb9e:	08 95       	ret
    bba0:	82 e0       	ldi	r24, 0x02	; 2
    bba2:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    bba6:	08 95       	ret

0000bba8 <qtm_enable_sensor_node>:
    bba8:	00 97       	sbiw	r24, 0x00	; 0
    bbaa:	c9 f0       	breq	.+50     	; 0xbbde <qtm_enable_sensor_node+0x36>
    bbac:	dc 01       	movw	r26, r24
    bbae:	ed 91       	ld	r30, X+
    bbb0:	fc 91       	ld	r31, X
    bbb2:	11 97       	sbiw	r26, 0x01	; 1
    bbb4:	20 81       	ld	r18, Z
    bbb6:	31 81       	ldd	r19, Z+1	; 0x01
    bbb8:	26 17       	cp	r18, r22
    bbba:	37 07       	cpc	r19, r23
    bbbc:	90 f0       	brcs	.+36     	; 0xbbe2 <qtm_enable_sensor_node+0x3a>
    bbbe:	45 e0       	ldi	r20, 0x05	; 5
    bbc0:	46 9f       	mul	r20, r22
    bbc2:	90 01       	movw	r18, r0
    bbc4:	47 9f       	mul	r20, r23
    bbc6:	30 0d       	add	r19, r0
    bbc8:	11 24       	eor	r1, r1
    bbca:	14 96       	adiw	r26, 0x04	; 4
    bbcc:	ed 91       	ld	r30, X+
    bbce:	fc 91       	ld	r31, X
    bbd0:	15 97       	sbiw	r26, 0x05	; 5
    bbd2:	e2 0f       	add	r30, r18
    bbd4:	f3 1f       	adc	r31, r19
    bbd6:	81 e0       	ldi	r24, 0x01	; 1
    bbd8:	80 83       	st	Z, r24
    bbda:	80 e0       	ldi	r24, 0x00	; 0
    bbdc:	08 95       	ret
    bbde:	8b e0       	ldi	r24, 0x0B	; 11
    bbe0:	08 95       	ret
    bbe2:	82 e0       	ldi	r24, 0x02	; 2
    bbe4:	08 95       	ret

0000bbe6 <qtm_calibrate_sensor_node>:
    bbe6:	fc 01       	movw	r30, r24
    bbe8:	89 2b       	or	r24, r25
    bbea:	d1 f1       	breq	.+116    	; 0xbc60 <qtm_calibrate_sensor_node+0x7a>
    bbec:	a0 81       	ld	r26, Z
    bbee:	b1 81       	ldd	r27, Z+1	; 0x01
    bbf0:	8d 91       	ld	r24, X+
    bbf2:	9c 91       	ld	r25, X
    bbf4:	11 97       	sbiw	r26, 0x01	; 1
    bbf6:	86 17       	cp	r24, r22
    bbf8:	97 07       	cpc	r25, r23
    bbfa:	a0 f1       	brcs	.+104    	; 0xbc64 <qtm_calibrate_sensor_node+0x7e>
    bbfc:	12 96       	adiw	r26, 0x02	; 2
    bbfe:	9c 91       	ld	r25, X
    bc00:	04 80       	ldd	r0, Z+4	; 0x04
    bc02:	f5 81       	ldd	r31, Z+5	; 0x05
    bc04:	e0 2d       	mov	r30, r0
    bc06:	90 34       	cpi	r25, 0x40	; 64
    bc08:	59 f4       	brne	.+22     	; 0xbc20 <qtm_calibrate_sensor_node+0x3a>
    bc0a:	85 e0       	ldi	r24, 0x05	; 5
    bc0c:	86 9f       	mul	r24, r22
    bc0e:	d0 01       	movw	r26, r0
    bc10:	87 9f       	mul	r24, r23
    bc12:	b0 0d       	add	r27, r0
    bc14:	11 24       	eor	r1, r1
    bc16:	ae 0f       	add	r26, r30
    bc18:	bf 1f       	adc	r27, r31
    bc1a:	80 ea       	ldi	r24, 0xA0	; 160
    bc1c:	90 e0       	ldi	r25, 0x00	; 0
    bc1e:	0d c0       	rjmp	.+26     	; 0xbc3a <qtm_calibrate_sensor_node+0x54>
    bc20:	90 58       	subi	r25, 0x80	; 128
    bc22:	93 30       	cpi	r25, 0x03	; 3
    bc24:	80 f4       	brcc	.+32     	; 0xbc46 <qtm_calibrate_sensor_node+0x60>
    bc26:	85 e0       	ldi	r24, 0x05	; 5
    bc28:	86 9f       	mul	r24, r22
    bc2a:	d0 01       	movw	r26, r0
    bc2c:	87 9f       	mul	r24, r23
    bc2e:	b0 0d       	add	r27, r0
    bc30:	11 24       	eor	r1, r1
    bc32:	ae 0f       	add	r26, r30
    bc34:	bf 1f       	adc	r27, r31
    bc36:	80 ef       	ldi	r24, 0xF0	; 240
    bc38:	90 e0       	ldi	r25, 0x00	; 0
    bc3a:	13 96       	adiw	r26, 0x03	; 3
    bc3c:	8d 93       	st	X+, r24
    bc3e:	9c 93       	st	X, r25
    bc40:	14 97       	sbiw	r26, 0x04	; 4
    bc42:	80 e0       	ldi	r24, 0x00	; 0
    bc44:	01 c0       	rjmp	.+2      	; 0xbc48 <qtm_calibrate_sensor_node+0x62>
    bc46:	82 e0       	ldi	r24, 0x02	; 2
    bc48:	95 e0       	ldi	r25, 0x05	; 5
    bc4a:	96 9f       	mul	r25, r22
    bc4c:	90 01       	movw	r18, r0
    bc4e:	97 9f       	mul	r25, r23
    bc50:	30 0d       	add	r19, r0
    bc52:	11 24       	eor	r1, r1
    bc54:	e2 0f       	add	r30, r18
    bc56:	f3 1f       	adc	r31, r19
    bc58:	90 81       	ld	r25, Z
    bc5a:	92 60       	ori	r25, 0x02	; 2
    bc5c:	90 83       	st	Z, r25
    bc5e:	08 95       	ret
    bc60:	8b e0       	ldi	r24, 0x0B	; 11
    bc62:	08 95       	ret
    bc64:	82 e0       	ldi	r24, 0x02	; 2
    bc66:	08 95       	ret

0000bc68 <qtm_avr_da_ptc_handler_wcomp>:
    bc68:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7f07da>
    bc6c:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7f07db>
    bc70:	60 91 60 67 	lds	r22, 0x6760	; 0x806760 <current_measure_channel>
    bc74:	70 91 61 67 	lds	r23, 0x6761	; 0x806761 <current_measure_channel+0x1>
    bc78:	cb 01       	movw	r24, r22
    bc7a:	88 0f       	add	r24, r24
    bc7c:	99 1f       	adc	r25, r25
    bc7e:	e0 91 fc 68 	lds	r30, 0x68FC	; 0x8068fc <qtm_raw_data_measurements_ptr>
    bc82:	f0 91 fd 68 	lds	r31, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    bc86:	e8 0f       	add	r30, r24
    bc88:	f9 1f       	adc	r31, r25
    bc8a:	20 83       	st	Z, r18
    bc8c:	31 83       	std	Z+1, r19	; 0x01
    bc8e:	a0 91 fa 68 	lds	r26, 0x68FA	; 0x8068fa <qtm_acquisition_control_working_set_ptr>
    bc92:	b0 91 fb 68 	lds	r27, 0x68FB	; 0x8068fb <qtm_acquisition_control_working_set_ptr+0x1>
    bc96:	44 e1       	ldi	r20, 0x14	; 20
    bc98:	46 9f       	mul	r20, r22
    bc9a:	c0 01       	movw	r24, r0
    bc9c:	47 9f       	mul	r20, r23
    bc9e:	90 0d       	add	r25, r0
    bca0:	11 24       	eor	r1, r1
    bca2:	12 96       	adiw	r26, 0x02	; 2
    bca4:	ed 91       	ld	r30, X+
    bca6:	fc 91       	ld	r31, X
    bca8:	13 97       	sbiw	r26, 0x03	; 3
    bcaa:	e8 0f       	add	r30, r24
    bcac:	f9 1f       	adc	r31, r25
    bcae:	92 89       	ldd	r25, Z+18	; 0x12
    bcb0:	9f 70       	andi	r25, 0x0F	; 15
    bcb2:	83 89       	ldd	r24, Z+19	; 0x13
    bcb4:	98 17       	cp	r25, r24
    bcb6:	10 f4       	brcc	.+4      	; 0xbcbc <qtm_avr_da_ptc_handler_wcomp+0x54>
    bcb8:	89 1b       	sub	r24, r25
    bcba:	01 c0       	rjmp	.+2      	; 0xbcbe <qtm_avr_da_ptc_handler_wcomp+0x56>
    bcbc:	80 e0       	ldi	r24, 0x00	; 0
    bcbe:	95 e0       	ldi	r25, 0x05	; 5
    bcc0:	96 9f       	mul	r25, r22
    bcc2:	a0 01       	movw	r20, r0
    bcc4:	97 9f       	mul	r25, r23
    bcc6:	50 0d       	add	r21, r0
    bcc8:	11 24       	eor	r1, r1
    bcca:	14 96       	adiw	r26, 0x04	; 4
    bccc:	ed 91       	ld	r30, X+
    bcce:	fc 91       	ld	r31, X
    bcd0:	15 97       	sbiw	r26, 0x05	; 5
    bcd2:	e4 0f       	add	r30, r20
    bcd4:	f5 1f       	adc	r31, r21
    bcd6:	02 c0       	rjmp	.+4      	; 0xbcdc <qtm_avr_da_ptc_handler_wcomp+0x74>
    bcd8:	36 95       	lsr	r19
    bcda:	27 95       	ror	r18
    bcdc:	8a 95       	dec	r24
    bcde:	e2 f7       	brpl	.-8      	; 0xbcd8 <qtm_avr_da_ptc_handler_wcomp+0x70>
    bce0:	21 83       	std	Z+1, r18	; 0x01
    bce2:	32 83       	std	Z+2, r19	; 0x02
    bce4:	82 e0       	ldi	r24, 0x02	; 2
    bce6:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    bcea:	e0 91 5b 67 	lds	r30, 0x675B	; 0x80675b <ptc_wcomp_happened_pointer>
    bcee:	f0 91 5c 67 	lds	r31, 0x675C	; 0x80675c <ptc_wcomp_happened_pointer+0x1>
    bcf2:	09 94       	ijmp

0000bcf4 <qtm_avr_da_ptc_handler_eoc>:
    bcf4:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7f07c0>
    bcf8:	80 91 fa 62 	lds	r24, 0x62FA	; 0x8062fa <qtm_which_mode_current>
    bcfc:	81 30       	cpi	r24, 0x01	; 1
    bcfe:	09 f0       	breq	.+2      	; 0xbd02 <qtm_avr_da_ptc_handler_eoc+0xe>
    bd00:	4e c0       	rjmp	.+156    	; 0xbd9e <qtm_avr_da_ptc_handler_eoc+0xaa>
    bd02:	40 91 da 07 	lds	r20, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7f07da>
    bd06:	50 91 db 07 	lds	r21, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7f07db>
    bd0a:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    bd0e:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    bd12:	9c 01       	movw	r18, r24
    bd14:	22 0f       	add	r18, r18
    bd16:	33 1f       	adc	r19, r19
    bd18:	e0 91 fc 68 	lds	r30, 0x68FC	; 0x8068fc <qtm_raw_data_measurements_ptr>
    bd1c:	f0 91 fd 68 	lds	r31, 0x68FD	; 0x8068fd <qtm_raw_data_measurements_ptr+0x1>
    bd20:	e2 0f       	add	r30, r18
    bd22:	f3 1f       	adc	r31, r19
    bd24:	40 83       	st	Z, r20
    bd26:	51 83       	std	Z+1, r21	; 0x01
    bd28:	01 96       	adiw	r24, 0x01	; 1
    bd2a:	80 93 60 67 	sts	0x6760, r24	; 0x806760 <current_measure_channel>
    bd2e:	90 93 61 67 	sts	0x6761, r25	; 0x806761 <current_measure_channel+0x1>
    bd32:	0e 94 d9 58 	call	0xb1b2	; 0xb1b2 <select_next_channel_to_measure>
    bd36:	81 11       	cpse	r24, r1
    bd38:	09 c0       	rjmp	.+18     	; 0xbd4c <qtm_avr_da_ptc_handler_eoc+0x58>
    bd3a:	84 e0       	ldi	r24, 0x04	; 4
    bd3c:	80 93 5f 67 	sts	0x675F, r24	; 0x80675f <touch_seq_lib_state>
    bd40:	80 91 60 67 	lds	r24, 0x6760	; 0x806760 <current_measure_channel>
    bd44:	90 91 61 67 	lds	r25, 0x6761	; 0x806761 <current_measure_channel+0x1>
    bd48:	0c 94 0c 59 	jmp	0xb218	; 0xb218 <qtm_measure_node>
    bd4c:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7f07e8>
    bd50:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7f07e9>
    bd54:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7f07ea>
    bd58:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7f07eb>
    bd5c:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7f07ec>
    bd60:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7f07ed>
    bd64:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7f07f0>
    bd68:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7f07f1>
    bd6c:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7f07f2>
    bd70:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7f07f3>
    bd74:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7f07f4>
    bd78:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7f07f5>
    bd7c:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7f07f8>
    bd80:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7f07f9>
    bd84:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7f07fa>
    bd88:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7f07fb>
    bd8c:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7f07fc>
    bd90:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7f07fd>
    bd94:	e0 91 5d 67 	lds	r30, 0x675D	; 0x80675d <ptc_seq_measure_complete_pointer>
    bd98:	f0 91 5e 67 	lds	r31, 0x675E	; 0x80675e <ptc_seq_measure_complete_pointer+0x1>
    bd9c:	09 94       	ijmp
    bd9e:	0c 94 34 5e 	jmp	0xbc68	; 0xbc68 <qtm_avr_da_ptc_handler_wcomp>

0000bda2 <__mulsi3>:
    bda2:	db 01       	movw	r26, r22
    bda4:	8f 93       	push	r24
    bda6:	9f 93       	push	r25
    bda8:	0e 94 18 5f 	call	0xbe30	; 0xbe30 <__muluhisi3>
    bdac:	bf 91       	pop	r27
    bdae:	af 91       	pop	r26
    bdb0:	a2 9f       	mul	r26, r18
    bdb2:	80 0d       	add	r24, r0
    bdb4:	91 1d       	adc	r25, r1
    bdb6:	a3 9f       	mul	r26, r19
    bdb8:	90 0d       	add	r25, r0
    bdba:	b2 9f       	mul	r27, r18
    bdbc:	90 0d       	add	r25, r0
    bdbe:	11 24       	eor	r1, r1
    bdc0:	08 95       	ret

0000bdc2 <__udivmodsi4>:
    bdc2:	a1 e2       	ldi	r26, 0x21	; 33
    bdc4:	1a 2e       	mov	r1, r26
    bdc6:	aa 1b       	sub	r26, r26
    bdc8:	bb 1b       	sub	r27, r27
    bdca:	fd 01       	movw	r30, r26
    bdcc:	0d c0       	rjmp	.+26     	; 0xbde8 <__udivmodsi4_ep>

0000bdce <__udivmodsi4_loop>:
    bdce:	aa 1f       	adc	r26, r26
    bdd0:	bb 1f       	adc	r27, r27
    bdd2:	ee 1f       	adc	r30, r30
    bdd4:	ff 1f       	adc	r31, r31
    bdd6:	a2 17       	cp	r26, r18
    bdd8:	b3 07       	cpc	r27, r19
    bdda:	e4 07       	cpc	r30, r20
    bddc:	f5 07       	cpc	r31, r21
    bdde:	20 f0       	brcs	.+8      	; 0xbde8 <__udivmodsi4_ep>
    bde0:	a2 1b       	sub	r26, r18
    bde2:	b3 0b       	sbc	r27, r19
    bde4:	e4 0b       	sbc	r30, r20
    bde6:	f5 0b       	sbc	r31, r21

0000bde8 <__udivmodsi4_ep>:
    bde8:	66 1f       	adc	r22, r22
    bdea:	77 1f       	adc	r23, r23
    bdec:	88 1f       	adc	r24, r24
    bdee:	99 1f       	adc	r25, r25
    bdf0:	1a 94       	dec	r1
    bdf2:	69 f7       	brne	.-38     	; 0xbdce <__udivmodsi4_loop>
    bdf4:	60 95       	com	r22
    bdf6:	70 95       	com	r23
    bdf8:	80 95       	com	r24
    bdfa:	90 95       	com	r25
    bdfc:	9b 01       	movw	r18, r22
    bdfe:	ac 01       	movw	r20, r24
    be00:	bd 01       	movw	r22, r26
    be02:	cf 01       	movw	r24, r30
    be04:	08 95       	ret

0000be06 <__tablejump2__>:
    be06:	ee 0f       	add	r30, r30
    be08:	ff 1f       	adc	r31, r31
    be0a:	05 90       	lpm	r0, Z+
    be0c:	f4 91       	lpm	r31, Z
    be0e:	e0 2d       	mov	r30, r0
    be10:	09 94       	ijmp

0000be12 <__umulhisi3>:
    be12:	a2 9f       	mul	r26, r18
    be14:	b0 01       	movw	r22, r0
    be16:	b3 9f       	mul	r27, r19
    be18:	c0 01       	movw	r24, r0
    be1a:	a3 9f       	mul	r26, r19
    be1c:	70 0d       	add	r23, r0
    be1e:	81 1d       	adc	r24, r1
    be20:	11 24       	eor	r1, r1
    be22:	91 1d       	adc	r25, r1
    be24:	b2 9f       	mul	r27, r18
    be26:	70 0d       	add	r23, r0
    be28:	81 1d       	adc	r24, r1
    be2a:	11 24       	eor	r1, r1
    be2c:	91 1d       	adc	r25, r1
    be2e:	08 95       	ret

0000be30 <__muluhisi3>:
    be30:	0e 94 09 5f 	call	0xbe12	; 0xbe12 <__umulhisi3>
    be34:	a5 9f       	mul	r26, r21
    be36:	90 0d       	add	r25, r0
    be38:	b4 9f       	mul	r27, r20
    be3a:	90 0d       	add	r25, r0
    be3c:	a4 9f       	mul	r26, r20
    be3e:	80 0d       	add	r24, r0
    be40:	91 1d       	adc	r25, r1
    be42:	11 24       	eor	r1, r1
    be44:	08 95       	ret

0000be46 <__ashrdi3>:
    be46:	97 fb       	bst	r25, 7
    be48:	10 f8       	bld	r1, 0

0000be4a <__lshrdi3>:
    be4a:	16 94       	lsr	r1
    be4c:	00 08       	sbc	r0, r0
    be4e:	0f 93       	push	r16
    be50:	08 30       	cpi	r16, 0x08	; 8
    be52:	98 f0       	brcs	.+38     	; 0xbe7a <__lshrdi3+0x30>
    be54:	08 50       	subi	r16, 0x08	; 8
    be56:	23 2f       	mov	r18, r19
    be58:	34 2f       	mov	r19, r20
    be5a:	45 2f       	mov	r20, r21
    be5c:	56 2f       	mov	r21, r22
    be5e:	67 2f       	mov	r22, r23
    be60:	78 2f       	mov	r23, r24
    be62:	89 2f       	mov	r24, r25
    be64:	90 2d       	mov	r25, r0
    be66:	f4 cf       	rjmp	.-24     	; 0xbe50 <__lshrdi3+0x6>
    be68:	05 94       	asr	r0
    be6a:	97 95       	ror	r25
    be6c:	87 95       	ror	r24
    be6e:	77 95       	ror	r23
    be70:	67 95       	ror	r22
    be72:	57 95       	ror	r21
    be74:	47 95       	ror	r20
    be76:	37 95       	ror	r19
    be78:	27 95       	ror	r18
    be7a:	0a 95       	dec	r16
    be7c:	aa f7       	brpl	.-22     	; 0xbe68 <__lshrdi3+0x1e>
    be7e:	0f 91       	pop	r16
    be80:	08 95       	ret

0000be82 <__cmpdi2_s8>:
    be82:	00 24       	eor	r0, r0
    be84:	a7 fd       	sbrc	r26, 7
    be86:	00 94       	com	r0
    be88:	2a 17       	cp	r18, r26
    be8a:	30 05       	cpc	r19, r0
    be8c:	40 05       	cpc	r20, r0
    be8e:	50 05       	cpc	r21, r0
    be90:	60 05       	cpc	r22, r0
    be92:	70 05       	cpc	r23, r0
    be94:	80 05       	cpc	r24, r0
    be96:	90 05       	cpc	r25, r0
    be98:	08 95       	ret

0000be9a <malloc>:
    be9a:	0f 93       	push	r16
    be9c:	1f 93       	push	r17
    be9e:	cf 93       	push	r28
    bea0:	df 93       	push	r29
    bea2:	82 30       	cpi	r24, 0x02	; 2
    bea4:	91 05       	cpc	r25, r1
    bea6:	10 f4       	brcc	.+4      	; 0xbeac <malloc+0x12>
    bea8:	82 e0       	ldi	r24, 0x02	; 2
    beaa:	90 e0       	ldi	r25, 0x00	; 0
    beac:	e0 91 00 69 	lds	r30, 0x6900	; 0x806900 <__flp>
    beb0:	f0 91 01 69 	lds	r31, 0x6901	; 0x806901 <__flp+0x1>
    beb4:	20 e0       	ldi	r18, 0x00	; 0
    beb6:	30 e0       	ldi	r19, 0x00	; 0
    beb8:	a0 e0       	ldi	r26, 0x00	; 0
    beba:	b0 e0       	ldi	r27, 0x00	; 0
    bebc:	30 97       	sbiw	r30, 0x00	; 0
    bebe:	19 f1       	breq	.+70     	; 0xbf06 <malloc+0x6c>
    bec0:	40 81       	ld	r20, Z
    bec2:	51 81       	ldd	r21, Z+1	; 0x01
    bec4:	02 81       	ldd	r16, Z+2	; 0x02
    bec6:	13 81       	ldd	r17, Z+3	; 0x03
    bec8:	48 17       	cp	r20, r24
    beca:	59 07       	cpc	r21, r25
    becc:	c8 f0       	brcs	.+50     	; 0xbf00 <malloc+0x66>
    bece:	84 17       	cp	r24, r20
    bed0:	95 07       	cpc	r25, r21
    bed2:	69 f4       	brne	.+26     	; 0xbeee <malloc+0x54>
    bed4:	10 97       	sbiw	r26, 0x00	; 0
    bed6:	31 f0       	breq	.+12     	; 0xbee4 <malloc+0x4a>
    bed8:	12 96       	adiw	r26, 0x02	; 2
    beda:	0c 93       	st	X, r16
    bedc:	12 97       	sbiw	r26, 0x02	; 2
    bede:	13 96       	adiw	r26, 0x03	; 3
    bee0:	1c 93       	st	X, r17
    bee2:	27 c0       	rjmp	.+78     	; 0xbf32 <malloc+0x98>
    bee4:	00 93 00 69 	sts	0x6900, r16	; 0x806900 <__flp>
    bee8:	10 93 01 69 	sts	0x6901, r17	; 0x806901 <__flp+0x1>
    beec:	22 c0       	rjmp	.+68     	; 0xbf32 <malloc+0x98>
    beee:	21 15       	cp	r18, r1
    bef0:	31 05       	cpc	r19, r1
    bef2:	19 f0       	breq	.+6      	; 0xbefa <malloc+0x60>
    bef4:	42 17       	cp	r20, r18
    bef6:	53 07       	cpc	r21, r19
    bef8:	18 f4       	brcc	.+6      	; 0xbf00 <malloc+0x66>
    befa:	9a 01       	movw	r18, r20
    befc:	bd 01       	movw	r22, r26
    befe:	ef 01       	movw	r28, r30
    bf00:	df 01       	movw	r26, r30
    bf02:	f8 01       	movw	r30, r16
    bf04:	db cf       	rjmp	.-74     	; 0xbebc <malloc+0x22>
    bf06:	21 15       	cp	r18, r1
    bf08:	31 05       	cpc	r19, r1
    bf0a:	f9 f0       	breq	.+62     	; 0xbf4a <malloc+0xb0>
    bf0c:	28 1b       	sub	r18, r24
    bf0e:	39 0b       	sbc	r19, r25
    bf10:	24 30       	cpi	r18, 0x04	; 4
    bf12:	31 05       	cpc	r19, r1
    bf14:	80 f4       	brcc	.+32     	; 0xbf36 <malloc+0x9c>
    bf16:	8a 81       	ldd	r24, Y+2	; 0x02
    bf18:	9b 81       	ldd	r25, Y+3	; 0x03
    bf1a:	61 15       	cp	r22, r1
    bf1c:	71 05       	cpc	r23, r1
    bf1e:	21 f0       	breq	.+8      	; 0xbf28 <malloc+0x8e>
    bf20:	fb 01       	movw	r30, r22
    bf22:	82 83       	std	Z+2, r24	; 0x02
    bf24:	93 83       	std	Z+3, r25	; 0x03
    bf26:	04 c0       	rjmp	.+8      	; 0xbf30 <malloc+0x96>
    bf28:	80 93 00 69 	sts	0x6900, r24	; 0x806900 <__flp>
    bf2c:	90 93 01 69 	sts	0x6901, r25	; 0x806901 <__flp+0x1>
    bf30:	fe 01       	movw	r30, r28
    bf32:	32 96       	adiw	r30, 0x02	; 2
    bf34:	44 c0       	rjmp	.+136    	; 0xbfbe <malloc+0x124>
    bf36:	fe 01       	movw	r30, r28
    bf38:	e2 0f       	add	r30, r18
    bf3a:	f3 1f       	adc	r31, r19
    bf3c:	81 93       	st	Z+, r24
    bf3e:	91 93       	st	Z+, r25
    bf40:	22 50       	subi	r18, 0x02	; 2
    bf42:	31 09       	sbc	r19, r1
    bf44:	28 83       	st	Y, r18
    bf46:	39 83       	std	Y+1, r19	; 0x01
    bf48:	3a c0       	rjmp	.+116    	; 0xbfbe <malloc+0x124>
    bf4a:	20 91 fe 68 	lds	r18, 0x68FE	; 0x8068fe <__brkval>
    bf4e:	30 91 ff 68 	lds	r19, 0x68FF	; 0x8068ff <__brkval+0x1>
    bf52:	23 2b       	or	r18, r19
    bf54:	41 f4       	brne	.+16     	; 0xbf66 <malloc+0xcc>
    bf56:	20 91 02 60 	lds	r18, 0x6002	; 0x806002 <__malloc_heap_start>
    bf5a:	30 91 03 60 	lds	r19, 0x6003	; 0x806003 <__malloc_heap_start+0x1>
    bf5e:	20 93 fe 68 	sts	0x68FE, r18	; 0x8068fe <__brkval>
    bf62:	30 93 ff 68 	sts	0x68FF, r19	; 0x8068ff <__brkval+0x1>
    bf66:	20 91 00 60 	lds	r18, 0x6000	; 0x806000 <__DATA_REGION_ORIGIN__>
    bf6a:	30 91 01 60 	lds	r19, 0x6001	; 0x806001 <__DATA_REGION_ORIGIN__+0x1>
    bf6e:	21 15       	cp	r18, r1
    bf70:	31 05       	cpc	r19, r1
    bf72:	41 f4       	brne	.+16     	; 0xbf84 <malloc+0xea>
    bf74:	2d b7       	in	r18, 0x3d	; 61
    bf76:	3e b7       	in	r19, 0x3e	; 62
    bf78:	40 91 04 60 	lds	r20, 0x6004	; 0x806004 <__malloc_margin>
    bf7c:	50 91 05 60 	lds	r21, 0x6005	; 0x806005 <__malloc_margin+0x1>
    bf80:	24 1b       	sub	r18, r20
    bf82:	35 0b       	sbc	r19, r21
    bf84:	e0 91 fe 68 	lds	r30, 0x68FE	; 0x8068fe <__brkval>
    bf88:	f0 91 ff 68 	lds	r31, 0x68FF	; 0x8068ff <__brkval+0x1>
    bf8c:	e2 17       	cp	r30, r18
    bf8e:	f3 07       	cpc	r31, r19
    bf90:	a0 f4       	brcc	.+40     	; 0xbfba <malloc+0x120>
    bf92:	2e 1b       	sub	r18, r30
    bf94:	3f 0b       	sbc	r19, r31
    bf96:	28 17       	cp	r18, r24
    bf98:	39 07       	cpc	r19, r25
    bf9a:	78 f0       	brcs	.+30     	; 0xbfba <malloc+0x120>
    bf9c:	ac 01       	movw	r20, r24
    bf9e:	4e 5f       	subi	r20, 0xFE	; 254
    bfa0:	5f 4f       	sbci	r21, 0xFF	; 255
    bfa2:	24 17       	cp	r18, r20
    bfa4:	35 07       	cpc	r19, r21
    bfa6:	48 f0       	brcs	.+18     	; 0xbfba <malloc+0x120>
    bfa8:	4e 0f       	add	r20, r30
    bfaa:	5f 1f       	adc	r21, r31
    bfac:	40 93 fe 68 	sts	0x68FE, r20	; 0x8068fe <__brkval>
    bfb0:	50 93 ff 68 	sts	0x68FF, r21	; 0x8068ff <__brkval+0x1>
    bfb4:	81 93       	st	Z+, r24
    bfb6:	91 93       	st	Z+, r25
    bfb8:	02 c0       	rjmp	.+4      	; 0xbfbe <malloc+0x124>
    bfba:	e0 e0       	ldi	r30, 0x00	; 0
    bfbc:	f0 e0       	ldi	r31, 0x00	; 0
    bfbe:	cf 01       	movw	r24, r30
    bfc0:	df 91       	pop	r29
    bfc2:	cf 91       	pop	r28
    bfc4:	1f 91       	pop	r17
    bfc6:	0f 91       	pop	r16
    bfc8:	08 95       	ret

0000bfca <free>:
    bfca:	cf 93       	push	r28
    bfcc:	df 93       	push	r29
    bfce:	00 97       	sbiw	r24, 0x00	; 0
    bfd0:	09 f4       	brne	.+2      	; 0xbfd4 <free+0xa>
    bfd2:	81 c0       	rjmp	.+258    	; 0xc0d6 <free+0x10c>
    bfd4:	fc 01       	movw	r30, r24
    bfd6:	32 97       	sbiw	r30, 0x02	; 2
    bfd8:	12 82       	std	Z+2, r1	; 0x02
    bfda:	13 82       	std	Z+3, r1	; 0x03
    bfdc:	a0 91 00 69 	lds	r26, 0x6900	; 0x806900 <__flp>
    bfe0:	b0 91 01 69 	lds	r27, 0x6901	; 0x806901 <__flp+0x1>
    bfe4:	10 97       	sbiw	r26, 0x00	; 0
    bfe6:	81 f4       	brne	.+32     	; 0xc008 <free+0x3e>
    bfe8:	20 81       	ld	r18, Z
    bfea:	31 81       	ldd	r19, Z+1	; 0x01
    bfec:	82 0f       	add	r24, r18
    bfee:	93 1f       	adc	r25, r19
    bff0:	20 91 fe 68 	lds	r18, 0x68FE	; 0x8068fe <__brkval>
    bff4:	30 91 ff 68 	lds	r19, 0x68FF	; 0x8068ff <__brkval+0x1>
    bff8:	28 17       	cp	r18, r24
    bffa:	39 07       	cpc	r19, r25
    bffc:	51 f5       	brne	.+84     	; 0xc052 <free+0x88>
    bffe:	e0 93 fe 68 	sts	0x68FE, r30	; 0x8068fe <__brkval>
    c002:	f0 93 ff 68 	sts	0x68FF, r31	; 0x8068ff <__brkval+0x1>
    c006:	67 c0       	rjmp	.+206    	; 0xc0d6 <free+0x10c>
    c008:	ed 01       	movw	r28, r26
    c00a:	20 e0       	ldi	r18, 0x00	; 0
    c00c:	30 e0       	ldi	r19, 0x00	; 0
    c00e:	ce 17       	cp	r28, r30
    c010:	df 07       	cpc	r29, r31
    c012:	40 f4       	brcc	.+16     	; 0xc024 <free+0x5a>
    c014:	4a 81       	ldd	r20, Y+2	; 0x02
    c016:	5b 81       	ldd	r21, Y+3	; 0x03
    c018:	9e 01       	movw	r18, r28
    c01a:	41 15       	cp	r20, r1
    c01c:	51 05       	cpc	r21, r1
    c01e:	f1 f0       	breq	.+60     	; 0xc05c <free+0x92>
    c020:	ea 01       	movw	r28, r20
    c022:	f5 cf       	rjmp	.-22     	; 0xc00e <free+0x44>
    c024:	c2 83       	std	Z+2, r28	; 0x02
    c026:	d3 83       	std	Z+3, r29	; 0x03
    c028:	40 81       	ld	r20, Z
    c02a:	51 81       	ldd	r21, Z+1	; 0x01
    c02c:	84 0f       	add	r24, r20
    c02e:	95 1f       	adc	r25, r21
    c030:	c8 17       	cp	r28, r24
    c032:	d9 07       	cpc	r29, r25
    c034:	59 f4       	brne	.+22     	; 0xc04c <free+0x82>
    c036:	88 81       	ld	r24, Y
    c038:	99 81       	ldd	r25, Y+1	; 0x01
    c03a:	84 0f       	add	r24, r20
    c03c:	95 1f       	adc	r25, r21
    c03e:	02 96       	adiw	r24, 0x02	; 2
    c040:	80 83       	st	Z, r24
    c042:	91 83       	std	Z+1, r25	; 0x01
    c044:	8a 81       	ldd	r24, Y+2	; 0x02
    c046:	9b 81       	ldd	r25, Y+3	; 0x03
    c048:	82 83       	std	Z+2, r24	; 0x02
    c04a:	93 83       	std	Z+3, r25	; 0x03
    c04c:	21 15       	cp	r18, r1
    c04e:	31 05       	cpc	r19, r1
    c050:	29 f4       	brne	.+10     	; 0xc05c <free+0x92>
    c052:	e0 93 00 69 	sts	0x6900, r30	; 0x806900 <__flp>
    c056:	f0 93 01 69 	sts	0x6901, r31	; 0x806901 <__flp+0x1>
    c05a:	3d c0       	rjmp	.+122    	; 0xc0d6 <free+0x10c>
    c05c:	e9 01       	movw	r28, r18
    c05e:	ea 83       	std	Y+2, r30	; 0x02
    c060:	fb 83       	std	Y+3, r31	; 0x03
    c062:	49 91       	ld	r20, Y+
    c064:	59 91       	ld	r21, Y+
    c066:	c4 0f       	add	r28, r20
    c068:	d5 1f       	adc	r29, r21
    c06a:	ec 17       	cp	r30, r28
    c06c:	fd 07       	cpc	r31, r29
    c06e:	61 f4       	brne	.+24     	; 0xc088 <free+0xbe>
    c070:	80 81       	ld	r24, Z
    c072:	91 81       	ldd	r25, Z+1	; 0x01
    c074:	84 0f       	add	r24, r20
    c076:	95 1f       	adc	r25, r21
    c078:	02 96       	adiw	r24, 0x02	; 2
    c07a:	e9 01       	movw	r28, r18
    c07c:	88 83       	st	Y, r24
    c07e:	99 83       	std	Y+1, r25	; 0x01
    c080:	82 81       	ldd	r24, Z+2	; 0x02
    c082:	93 81       	ldd	r25, Z+3	; 0x03
    c084:	8a 83       	std	Y+2, r24	; 0x02
    c086:	9b 83       	std	Y+3, r25	; 0x03
    c088:	e0 e0       	ldi	r30, 0x00	; 0
    c08a:	f0 e0       	ldi	r31, 0x00	; 0
    c08c:	12 96       	adiw	r26, 0x02	; 2
    c08e:	8d 91       	ld	r24, X+
    c090:	9c 91       	ld	r25, X
    c092:	13 97       	sbiw	r26, 0x03	; 3
    c094:	00 97       	sbiw	r24, 0x00	; 0
    c096:	19 f0       	breq	.+6      	; 0xc09e <free+0xd4>
    c098:	fd 01       	movw	r30, r26
    c09a:	dc 01       	movw	r26, r24
    c09c:	f7 cf       	rjmp	.-18     	; 0xc08c <free+0xc2>
    c09e:	8d 91       	ld	r24, X+
    c0a0:	9c 91       	ld	r25, X
    c0a2:	11 97       	sbiw	r26, 0x01	; 1
    c0a4:	9d 01       	movw	r18, r26
    c0a6:	2e 5f       	subi	r18, 0xFE	; 254
    c0a8:	3f 4f       	sbci	r19, 0xFF	; 255
    c0aa:	82 0f       	add	r24, r18
    c0ac:	93 1f       	adc	r25, r19
    c0ae:	20 91 fe 68 	lds	r18, 0x68FE	; 0x8068fe <__brkval>
    c0b2:	30 91 ff 68 	lds	r19, 0x68FF	; 0x8068ff <__brkval+0x1>
    c0b6:	28 17       	cp	r18, r24
    c0b8:	39 07       	cpc	r19, r25
    c0ba:	69 f4       	brne	.+26     	; 0xc0d6 <free+0x10c>
    c0bc:	30 97       	sbiw	r30, 0x00	; 0
    c0be:	29 f4       	brne	.+10     	; 0xc0ca <free+0x100>
    c0c0:	10 92 00 69 	sts	0x6900, r1	; 0x806900 <__flp>
    c0c4:	10 92 01 69 	sts	0x6901, r1	; 0x806901 <__flp+0x1>
    c0c8:	02 c0       	rjmp	.+4      	; 0xc0ce <free+0x104>
    c0ca:	12 82       	std	Z+2, r1	; 0x02
    c0cc:	13 82       	std	Z+3, r1	; 0x03
    c0ce:	a0 93 fe 68 	sts	0x68FE, r26	; 0x8068fe <__brkval>
    c0d2:	b0 93 ff 68 	sts	0x68FF, r27	; 0x8068ff <__brkval+0x1>
    c0d6:	df 91       	pop	r29
    c0d8:	cf 91       	pop	r28
    c0da:	08 95       	ret

0000c0dc <_exit>:
    c0dc:	f8 94       	cli

0000c0de <__stop_program>:
    c0de:	ff cf       	rjmp	.-2      	; 0xc0de <__stop_program>
