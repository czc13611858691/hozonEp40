
AVR128DA28_FR_RR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000302  00804000  0000f496  0000ad2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ac96  00004800  00004800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000044e  00804302  00804302  0000b02c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b08c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb8  00000000  00000000  0000b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012f9d  00000000  00000000  0000bc88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005142  00000000  00000000  0001ec25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008645  00000000  00000000  00023d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000266c  00000000  00000000  0002c3ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007152  00000000  00000000  0002ea18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004dc8  00000000  00000000  00035b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  0003a932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004800 <__vectors>:
    4800:	0c 94 6e 24 	jmp	0x48dc	; 0x48dc <__ctors_end>
    4804:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4808:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    480c:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__vector_3>
    4810:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4814:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4818:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    481c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4820:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4824:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4828:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    482c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4830:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <__vector_12>
    4834:	0c 94 c0 25 	jmp	0x4b80	; 0x4b80 <__vector_13>
    4838:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    483c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4840:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4844:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4848:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    484c:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__vector_19>
    4850:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4854:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4858:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    485c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4860:	0c 94 2b 64 	jmp	0xc856	; 0xc856 <__vector_24>
    4864:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4868:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    486c:	0c 94 58 63 	jmp	0xc6b0	; 0xc6b0 <__vector_27>
    4870:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4874:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4878:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    487c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4880:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4884:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4888:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    488c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4890:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4894:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    4898:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    489c:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    48a0:	0c 94 8d 24 	jmp	0x491a	; 0x491a <__bad_interrupt>
    48a4:	a3 26       	eor	r10, r19
    48a6:	ed 26       	eor	r14, r29
    48a8:	3c 27       	eor	r19, r28
    48aa:	8b 27       	eor	r24, r27
    48ac:	da 27       	eor	r29, r26
    48ae:	29 28       	or	r2, r9
    48b0:	78 28       	or	r7, r8
    48b2:	ac 4c       	sbci	r26, 0xCC	; 204
    48b4:	cd 4c       	sbci	r28, 0xCD	; 205
    48b6:	a3 4c       	sbci	r26, 0xC3	; 195
    48b8:	3f 4c       	sbci	r19, 0xCF	; 207
    48ba:	cd 4c       	sbci	r28, 0xCD	; 205
    48bc:	8f 4c       	sbci	r24, 0xCF	; 207
    48be:	39 4c       	sbci	r19, 0xC9	; 201
    48c0:	5f 4c       	sbci	r21, 0xCF	; 207
    48c2:	87 4c       	sbci	r24, 0xC7	; 199
    48c4:	7f 4c       	sbci	r23, 0xCF	; 207
    48c6:	77 4c       	sbci	r23, 0xC7	; 199
    48c8:	67 4c       	sbci	r22, 0xC7	; 199
    48ca:	6f 4c       	sbci	r22, 0xCF	; 207
    48cc:	06 4f       	sbci	r16, 0xF6	; 246
    48ce:	0a 4f       	sbci	r16, 0xFA	; 250
    48d0:	27 4f       	sbci	r18, 0xF7	; 247
    48d2:	2b 4f       	sbci	r18, 0xFB	; 251
    48d4:	2f 4f       	sbci	r18, 0xFF	; 255
    48d6:	34 4f       	sbci	r19, 0xF4	; 244
    48d8:	38 4f       	sbci	r19, 0xF8	; 248
    48da:	f1 4e       	sbci	r31, 0xE1	; 225

000048dc <__ctors_end>:
    48dc:	11 24       	eor	r1, r1
    48de:	1f be       	out	0x3f, r1	; 63
    48e0:	cf ef       	ldi	r28, 0xFF	; 255
    48e2:	cd bf       	out	0x3d, r28	; 61
    48e4:	df e7       	ldi	r29, 0x7F	; 127
    48e6:	de bf       	out	0x3e, r29	; 62

000048e8 <__do_copy_data>:
    48e8:	13 e4       	ldi	r17, 0x43	; 67
    48ea:	a0 e0       	ldi	r26, 0x00	; 0
    48ec:	b0 e4       	ldi	r27, 0x40	; 64
    48ee:	e6 e9       	ldi	r30, 0x96	; 150
    48f0:	f4 ef       	ldi	r31, 0xF4	; 244
    48f2:	00 e0       	ldi	r16, 0x00	; 0
    48f4:	0b bf       	out	0x3b, r16	; 59
    48f6:	02 c0       	rjmp	.+4      	; 0x48fc <__do_copy_data+0x14>
    48f8:	07 90       	elpm	r0, Z+
    48fa:	0d 92       	st	X+, r0
    48fc:	a2 30       	cpi	r26, 0x02	; 2
    48fe:	b1 07       	cpc	r27, r17
    4900:	d9 f7       	brne	.-10     	; 0x48f8 <__do_copy_data+0x10>

00004902 <__do_clear_bss>:
    4902:	27 e4       	ldi	r18, 0x47	; 71
    4904:	a2 e0       	ldi	r26, 0x02	; 2
    4906:	b3 e4       	ldi	r27, 0x43	; 67
    4908:	01 c0       	rjmp	.+2      	; 0x490c <.do_clear_bss_start>

0000490a <.do_clear_bss_loop>:
    490a:	1d 92       	st	X+, r1

0000490c <.do_clear_bss_start>:
    490c:	a0 35       	cpi	r26, 0x50	; 80
    490e:	b2 07       	cpc	r27, r18
    4910:	e1 f7       	brne	.-8      	; 0x490a <.do_clear_bss_loop>
    4912:	0e 94 97 30 	call	0x612e	; 0x612e <main>
    4916:	0c 94 49 7a 	jmp	0xf492	; 0xf492 <_exit>

0000491a <__bad_interrupt>:
    491a:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__vectors>

0000491e <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    491e:	cf 93       	push	r28
    4920:	df 93       	push	r29
    4922:	cd b7       	in	r28, 0x3d	; 61
    4924:	de b7       	in	r29, 0x3e	; 62
	system_init();
    4926:	0e 94 2d 69 	call	0xd25a	; 0xd25a <system_init>

	touch_init();
    492a:	0e 94 84 62 	call	0xc508	; 0xc508 <touch_init>
}
    492e:	00 00       	nop
    4930:	df 91       	pop	r29
    4932:	cf 91       	pop	r28
    4934:	08 95       	ret

00004936 <__vector_19>:
#include "lin_driver.h"
#include "lin.h"

/* lin RX接收到一个完整数据产生的中断 */
ISR(USART0_RXC_vect)
{
    4936:	1f 92       	push	r1
    4938:	0f 92       	push	r0
    493a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    493e:	0f 92       	push	r0
    4940:	11 24       	eor	r1, r1
    4942:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4946:	0f 92       	push	r0
    4948:	2f 93       	push	r18
    494a:	3f 93       	push	r19
    494c:	4f 93       	push	r20
    494e:	5f 93       	push	r21
    4950:	6f 93       	push	r22
    4952:	7f 93       	push	r23
    4954:	8f 93       	push	r24
    4956:	9f 93       	push	r25
    4958:	af 93       	push	r26
    495a:	bf 93       	push	r27
    495c:	ef 93       	push	r30
    495e:	ff 93       	push	r31
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	1f 92       	push	r1
    4966:	cd b7       	in	r28, 0x3d	; 61
    4968:	de b7       	in	r29, 0x3e	; 62
   uint8_t index;
   index = (USART0.STATUS & USART_ISFIF_bm) >> USART_ISFIF_bp;
    496a:	80 e0       	ldi	r24, 0x00	; 0
    496c:	98 e0       	ldi	r25, 0x08	; 8
    496e:	fc 01       	movw	r30, r24
    4970:	84 81       	ldd	r24, Z+4	; 0x04
    4972:	88 2f       	mov	r24, r24
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	88 70       	andi	r24, 0x08	; 8
    4978:	99 27       	eor	r25, r25
    497a:	95 95       	asr	r25
    497c:	87 95       	ror	r24
    497e:	95 95       	asr	r25
    4980:	87 95       	ror	r24
    4982:	95 95       	asr	r25
    4984:	87 95       	ror	r24
    4986:	89 83       	std	Y+1, r24	; 0x01
   if (index == 1)
    4988:	89 81       	ldd	r24, Y+1	; 0x01
    498a:	81 30       	cpi	r24, 0x01	; 1
    498c:	81 f4       	brne	.+32     	; 0x49ae <__vector_19+0x78>
   {
      LIN_DRV_IRQHandler(0, -1);
    498e:	4f ef       	ldi	r20, 0xFF	; 255
    4990:	60 e0       	ldi	r22, 0x00	; 0
    4992:	70 e0       	ldi	r23, 0x00	; 0
    4994:	cb 01       	movw	r24, r22
    4996:	0e 94 72 5a 	call	0xb4e4	; 0xb4e4 <LIN_DRV_IRQHandler>
      USART0.STATUS |= USART_ISFIF_bm;
    499a:	80 e0       	ldi	r24, 0x00	; 0
    499c:	98 e0       	ldi	r25, 0x08	; 8
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	38 e0       	ldi	r19, 0x08	; 8
    49a2:	f9 01       	movw	r30, r18
    49a4:	24 81       	ldd	r18, Z+4	; 0x04
    49a6:	28 60       	ori	r18, 0x08	; 8
    49a8:	fc 01       	movw	r30, r24
    49aa:	24 83       	std	Z+4, r18	; 0x04
      return;
    49ac:	28 c0       	rjmp	.+80     	; 0x49fe <__vector_19+0xc8>
   }

   index = (USART0.RXDATAH & USART_DATA8_bm) >> USART_DATA8_bp;
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	98 e0       	ldi	r25, 0x08	; 8
    49b2:	fc 01       	movw	r30, r24
    49b4:	81 81       	ldd	r24, Z+1	; 0x01
    49b6:	81 70       	andi	r24, 0x01	; 1
    49b8:	89 83       	std	Y+1, r24	; 0x01
   if (index == 0) /* is pid */
    49ba:	89 81       	ldd	r24, Y+1	; 0x01
    49bc:	88 23       	and	r24, r24
    49be:	81 f4       	brne	.+32     	; 0x49e0 <__vector_19+0xaa>
   {
      LIN_DRV_IRQHandler(0, 1);
    49c0:	41 e0       	ldi	r20, 0x01	; 1
    49c2:	60 e0       	ldi	r22, 0x00	; 0
    49c4:	70 e0       	ldi	r23, 0x00	; 0
    49c6:	cb 01       	movw	r24, r22
    49c8:	0e 94 72 5a 	call	0xb4e4	; 0xb4e4 <LIN_DRV_IRQHandler>
      USART0.STATUS |= USART_ISFIF_bm;
    49cc:	80 e0       	ldi	r24, 0x00	; 0
    49ce:	98 e0       	ldi	r25, 0x08	; 8
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	38 e0       	ldi	r19, 0x08	; 8
    49d4:	f9 01       	movw	r30, r18
    49d6:	24 81       	ldd	r18, Z+4	; 0x04
    49d8:	28 60       	ori	r18, 0x08	; 8
    49da:	fc 01       	movw	r30, r24
    49dc:	24 83       	std	Z+4, r18	; 0x04
      return;
    49de:	0f c0       	rjmp	.+30     	; 0x49fe <__vector_19+0xc8>
   }

   LIN_DRV_IRQHandler(0, 0);
    49e0:	40 e0       	ldi	r20, 0x00	; 0
    49e2:	60 e0       	ldi	r22, 0x00	; 0
    49e4:	70 e0       	ldi	r23, 0x00	; 0
    49e6:	cb 01       	movw	r24, r22
    49e8:	0e 94 72 5a 	call	0xb4e4	; 0xb4e4 <LIN_DRV_IRQHandler>
   USART0.STATUS |= USART_ISFIF_bm;
    49ec:	80 e0       	ldi	r24, 0x00	; 0
    49ee:	98 e0       	ldi	r25, 0x08	; 8
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	38 e0       	ldi	r19, 0x08	; 8
    49f4:	f9 01       	movw	r30, r18
    49f6:	24 81       	ldd	r18, Z+4	; 0x04
    49f8:	28 60       	ori	r18, 0x08	; 8
    49fa:	fc 01       	movw	r30, r24
    49fc:	24 83       	std	Z+4, r18	; 0x04
}
    49fe:	0f 90       	pop	r0
    4a00:	df 91       	pop	r29
    4a02:	cf 91       	pop	r28
    4a04:	ff 91       	pop	r31
    4a06:	ef 91       	pop	r30
    4a08:	bf 91       	pop	r27
    4a0a:	af 91       	pop	r26
    4a0c:	9f 91       	pop	r25
    4a0e:	8f 91       	pop	r24
    4a10:	7f 91       	pop	r23
    4a12:	6f 91       	pop	r22
    4a14:	5f 91       	pop	r21
    4a16:	4f 91       	pop	r20
    4a18:	3f 91       	pop	r19
    4a1a:	2f 91       	pop	r18
    4a1c:	0f 90       	pop	r0
    4a1e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4a22:	0f 90       	pop	r0
    4a24:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4a28:	0f 90       	pop	r0
    4a2a:	1f 90       	pop	r1
    4a2c:	18 95       	reti

00004a2e <__vector_3>:

ISR(RTC_CNT_vect)
{
    4a2e:	1f 92       	push	r1
    4a30:	0f 92       	push	r0
    4a32:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4a36:	0f 92       	push	r0
    4a38:	11 24       	eor	r1, r1
    4a3a:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4a3e:	0f 92       	push	r0
    4a40:	2f 93       	push	r18
    4a42:	3f 93       	push	r19
    4a44:	4f 93       	push	r20
    4a46:	5f 93       	push	r21
    4a48:	6f 93       	push	r22
    4a4a:	7f 93       	push	r23
    4a4c:	8f 93       	push	r24
    4a4e:	9f 93       	push	r25
    4a50:	af 93       	push	r26
    4a52:	bf 93       	push	r27
    4a54:	ef 93       	push	r30
    4a56:	ff 93       	push	r31
    4a58:	cf 93       	push	r28
    4a5a:	df 93       	push	r29
    4a5c:	cd b7       	in	r28, 0x3d	; 61
    4a5e:	de b7       	in	r29, 0x3e	; 62

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
    4a60:	0e 94 e2 62 	call	0xc5c4	; 0xc5c4 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
    4a64:	80 e4       	ldi	r24, 0x40	; 64
    4a66:	91 e0       	ldi	r25, 0x01	; 1
    4a68:	22 e0       	ldi	r18, 0x02	; 2
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	23 83       	std	Z+3, r18	; 0x03
}
    4a6e:	00 00       	nop
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	ff 91       	pop	r31
    4a76:	ef 91       	pop	r30
    4a78:	bf 91       	pop	r27
    4a7a:	af 91       	pop	r26
    4a7c:	9f 91       	pop	r25
    4a7e:	8f 91       	pop	r24
    4a80:	7f 91       	pop	r23
    4a82:	6f 91       	pop	r22
    4a84:	5f 91       	pop	r21
    4a86:	4f 91       	pop	r20
    4a88:	3f 91       	pop	r19
    4a8a:	2f 91       	pop	r18
    4a8c:	0f 90       	pop	r0
    4a8e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4a92:	0f 90       	pop	r0
    4a94:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4a98:	0f 90       	pop	r0
    4a9a:	1f 90       	pop	r1
    4a9c:	18 95       	reti

00004a9e <__vector_12>:

ISR(TCB0_INT_vect)
{
    4a9e:	1f 92       	push	r1
    4aa0:	0f 92       	push	r0
    4aa2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4aa6:	0f 92       	push	r0
    4aa8:	11 24       	eor	r1, r1
    4aaa:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4aae:	0f 92       	push	r0
    4ab0:	2f 93       	push	r18
    4ab2:	3f 93       	push	r19
    4ab4:	4f 93       	push	r20
    4ab6:	5f 93       	push	r21
    4ab8:	6f 93       	push	r22
    4aba:	7f 93       	push	r23
    4abc:	8f 93       	push	r24
    4abe:	9f 93       	push	r25
    4ac0:	af 93       	push	r26
    4ac2:	bf 93       	push	r27
    4ac4:	ef 93       	push	r30
    4ac6:	ff 93       	push	r31
    4ac8:	cf 93       	push	r28
    4aca:	df 93       	push	r29
    4acc:	cd b7       	in	r28, 0x3d	; 61
    4ace:	de b7       	in	r29, 0x3e	; 62
	lin_lld_timeout_service(0);
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	0e 94 9a 4a 	call	0x9534	; 0x9534 <lin_lld_timeout_service>
   g_soft_timer_ticks++;
    4ad6:	80 91 47 46 	lds	r24, 0x4647	; 0x804647 <g_soft_timer_ticks>
    4ada:	90 91 48 46 	lds	r25, 0x4648	; 0x804648 <g_soft_timer_ticks+0x1>
    4ade:	01 96       	adiw	r24, 0x01	; 1
    4ae0:	80 93 47 46 	sts	0x4647, r24	; 0x804647 <g_soft_timer_ticks>
    4ae4:	90 93 48 46 	sts	0x4648, r25	; 0x804648 <g_soft_timer_ticks+0x1>
	TCB0.INTFLAGS = TCB_CAPT_bm;
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	9b e0       	ldi	r25, 0x0B	; 11
    4aec:	21 e0       	ldi	r18, 0x01	; 1
    4aee:	fc 01       	movw	r30, r24
    4af0:	26 83       	std	Z+6, r18	; 0x06
}
    4af2:	00 00       	nop
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	ff 91       	pop	r31
    4afa:	ef 91       	pop	r30
    4afc:	bf 91       	pop	r27
    4afe:	af 91       	pop	r26
    4b00:	9f 91       	pop	r25
    4b02:	8f 91       	pop	r24
    4b04:	7f 91       	pop	r23
    4b06:	6f 91       	pop	r22
    4b08:	5f 91       	pop	r21
    4b0a:	4f 91       	pop	r20
    4b0c:	3f 91       	pop	r19
    4b0e:	2f 91       	pop	r18
    4b10:	0f 90       	pop	r0
    4b12:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4b16:	0f 90       	pop	r0
    4b18:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4b1c:	0f 90       	pop	r0
    4b1e:	1f 90       	pop	r1
    4b20:	18 95       	reti

00004b22 <soft_timer_sin_data_task>:
76,113,141,152,145,121,88,54,27,12,14,31,57,87,112,127,129,119,99,75,53,38,34,39,54,72,90,102,108,105,96,83,70,61,56,57,62,70,77,83,86,85,84,81,77,73,71,71,72,73,75,77,78,
};
uint8_t sin_data_out_flg=0;

void soft_timer_sin_data_task(void)
{
    4b22:	cf 93       	push	r28
    4b24:	df 93       	push	r29
    4b26:	cd b7       	in	r28, 0x3d	; 61
    4b28:	de b7       	in	r29, 0x3e	; 62
	if(sin_data_out_flg==1)
    4b2a:	80 91 04 43 	lds	r24, 0x4304	; 0x804304 <sin_data_out_flg>
    4b2e:	81 30       	cpi	r24, 0x01	; 1
    4b30:	19 f5       	brne	.+70     	; 0x4b78 <soft_timer_sin_data_task+0x56>
	{
		if(sin_data_index<(sizeof(sin_data)/sizeof(sin_data[0])))
    4b32:	80 91 02 43 	lds	r24, 0x4302	; 0x804302 <__data_end>
    4b36:	90 91 03 43 	lds	r25, 0x4303	; 0x804303 <__data_end+0x1>
    4b3a:	c5 97       	sbiw	r24, 0x35	; 53
    4b3c:	b8 f4       	brcc	.+46     	; 0x4b6c <soft_timer_sin_data_task+0x4a>
		{
			DAC_0_set_output(sin_data[sin_data_index]);
    4b3e:	80 91 02 43 	lds	r24, 0x4302	; 0x804302 <__data_end>
    4b42:	90 91 03 43 	lds	r25, 0x4303	; 0x804303 <__data_end+0x1>
    4b46:	88 0f       	add	r24, r24
    4b48:	99 1f       	adc	r25, r25
    4b4a:	8a 5f       	subi	r24, 0xFA	; 250
    4b4c:	9f 4b       	sbci	r25, 0xBF	; 191
    4b4e:	fc 01       	movw	r30, r24
    4b50:	80 81       	ld	r24, Z
    4b52:	91 81       	ldd	r25, Z+1	; 0x01
    4b54:	0e 94 bb 64 	call	0xc976	; 0xc976 <DAC_0_set_output>
			sin_data_index++;
    4b58:	80 91 02 43 	lds	r24, 0x4302	; 0x804302 <__data_end>
    4b5c:	90 91 03 43 	lds	r25, 0x4303	; 0x804303 <__data_end+0x1>
    4b60:	01 96       	adiw	r24, 0x01	; 1
    4b62:	80 93 02 43 	sts	0x4302, r24	; 0x804302 <__data_end>
    4b66:	90 93 03 43 	sts	0x4303, r25	; 0x804303 <__data_end+0x1>
		}else{
			sin_data_index=0;
			sin_data_out_flg=0;
		}
	}
}
    4b6a:	06 c0       	rjmp	.+12     	; 0x4b78 <soft_timer_sin_data_task+0x56>
		if(sin_data_index<(sizeof(sin_data)/sizeof(sin_data[0])))
		{
			DAC_0_set_output(sin_data[sin_data_index]);
			sin_data_index++;
		}else{
			sin_data_index=0;
    4b6c:	10 92 02 43 	sts	0x4302, r1	; 0x804302 <__data_end>
    4b70:	10 92 03 43 	sts	0x4303, r1	; 0x804303 <__data_end+0x1>
			sin_data_out_flg=0;
    4b74:	10 92 04 43 	sts	0x4304, r1	; 0x804304 <sin_data_out_flg>
		}
	}
}
    4b78:	00 00       	nop
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	08 95       	ret

00004b80 <__vector_13>:

ISR(TCB1_INT_vect)
{
    4b80:	1f 92       	push	r1
    4b82:	0f 92       	push	r0
    4b84:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4b88:	0f 92       	push	r0
    4b8a:	11 24       	eor	r1, r1
    4b8c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4b90:	0f 92       	push	r0
    4b92:	2f 93       	push	r18
    4b94:	3f 93       	push	r19
    4b96:	4f 93       	push	r20
    4b98:	5f 93       	push	r21
    4b9a:	6f 93       	push	r22
    4b9c:	7f 93       	push	r23
    4b9e:	8f 93       	push	r24
    4ba0:	9f 93       	push	r25
    4ba2:	af 93       	push	r26
    4ba4:	bf 93       	push	r27
    4ba6:	ef 93       	push	r30
    4ba8:	ff 93       	push	r31
    4baa:	cf 93       	push	r28
    4bac:	df 93       	push	r29
    4bae:	cd b7       	in	r28, 0x3d	; 61
    4bb0:	de b7       	in	r29, 0x3e	; 62
   soft_timer_sin_data_task();
    4bb2:	0e 94 91 25 	call	0x4b22	; 0x4b22 <soft_timer_sin_data_task>
	TCB1.INTFLAGS = TCB_CAPT_bm;
    4bb6:	80 e1       	ldi	r24, 0x10	; 16
    4bb8:	9b e0       	ldi	r25, 0x0B	; 11
    4bba:	21 e0       	ldi	r18, 0x01	; 1
    4bbc:	fc 01       	movw	r30, r24
    4bbe:	26 83       	std	Z+6, r18	; 0x06
}
    4bc0:	00 00       	nop
    4bc2:	df 91       	pop	r29
    4bc4:	cf 91       	pop	r28
    4bc6:	ff 91       	pop	r31
    4bc8:	ef 91       	pop	r30
    4bca:	bf 91       	pop	r27
    4bcc:	af 91       	pop	r26
    4bce:	9f 91       	pop	r25
    4bd0:	8f 91       	pop	r24
    4bd2:	7f 91       	pop	r23
    4bd4:	6f 91       	pop	r22
    4bd6:	5f 91       	pop	r21
    4bd8:	4f 91       	pop	r20
    4bda:	3f 91       	pop	r19
    4bdc:	2f 91       	pop	r18
    4bde:	0f 90       	pop	r0
    4be0:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    4be4:	0f 90       	pop	r0
    4be6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    4bea:	0f 90       	pop	r0
    4bec:	1f 90       	pop	r1
    4bee:	18 95       	reti

00004bf0 <window_lock_led_cb>:
    handle->window.slide_2_to_1_flg = 0;
    handle->window.btn_a_status = 0;
    handle->window.btn_b_status = 0;
    handle->window.slide_status = 0;
    handle->window.signal = 0;
}
    4bf0:	cf 93       	push	r28
    4bf2:	df 93       	push	r29
    4bf4:	1f 92       	push	r1
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
    4bfa:	89 83       	std	Y+1, r24	; 0x01
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
    4bfe:	81 30       	cpi	r24, 0x01	; 1
    4c00:	49 f4       	brne	.+18     	; 0x4c14 <window_lock_led_cb+0x24>
    4c02:	61 e0       	ldi	r22, 0x01	; 1
    4c04:	83 e0       	ldi	r24, 0x03	; 3
    4c06:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <led_set_level>
    4c0a:	60 e0       	ldi	r22, 0x00	; 0
    4c0c:	87 e0       	ldi	r24, 0x07	; 7
    4c0e:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <led_set_level>
    4c12:	08 c0       	rjmp	.+16     	; 0x4c24 <window_lock_led_cb+0x34>
    4c14:	60 e0       	ldi	r22, 0x00	; 0
    4c16:	83 e0       	ldi	r24, 0x03	; 3
    4c18:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <led_set_level>
    4c1c:	61 e0       	ldi	r22, 0x01	; 1
    4c1e:	87 e0       	ldi	r24, 0x07	; 7
    4c20:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <led_set_level>
    4c24:	00 00       	nop
    4c26:	0f 90       	pop	r0
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	08 95       	ret

00004c2e <soft_timer_window_lock_task>:
    4c2e:	cf 93       	push	r28
    4c30:	df 93       	push	r29
    4c32:	cd b7       	in	r28, 0x3d	; 61
    4c34:	de b7       	in	r29, 0x3e	; 62
    4c36:	80 91 05 43 	lds	r24, 0x4305	; 0x804305 <btn_status.5549>
    4c3a:	80 93 06 43 	sts	0x4306, r24	; 0x804306 <btn_status_last.5548>
    4c3e:	82 e0       	ldi	r24, 0x02	; 2
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	0e 94 fc 62 	call	0xc5f8	; 0xc5f8 <get_sensor_state>
    4c46:	80 78       	andi	r24, 0x80	; 128
    4c48:	80 93 05 43 	sts	0x4305, r24	; 0x804305 <btn_status.5549>
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	80 93 71 40 	sts	0x4071, r24	; 0x804071 <g_window_lock+0x1>
    4c52:	80 91 05 43 	lds	r24, 0x4305	; 0x804305 <btn_status.5549>
    4c56:	88 23       	and	r24, r24
    4c58:	39 f0       	breq	.+14     	; 0x4c68 <soft_timer_window_lock_task+0x3a>
    4c5a:	80 91 06 43 	lds	r24, 0x4306	; 0x804306 <btn_status_last.5548>
    4c5e:	88 23       	and	r24, r24
    4c60:	19 f4       	brne	.+6      	; 0x4c68 <soft_timer_window_lock_task+0x3a>
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	80 93 70 40 	sts	0x4070, r24	; 0x804070 <g_window_lock>
    4c68:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <window_lock_task>
    4c6c:	00 00       	nop
    4c6e:	df 91       	pop	r29
    4c70:	cf 91       	pop	r28
    4c72:	08 95       	ret

00004c74 <window_lock_signal_cb>:
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	41 e0       	ldi	r20, 0x01	; 1
    4c7e:	63 e0       	ldi	r22, 0x03	; 3
    4c80:	84 e0       	ldi	r24, 0x04	; 4
    4c82:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <lin_signal_send_x_times>
    4c86:	00 00       	nop
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	08 95       	ret

00004c8e <soft_timer_lin_signal_update_task>:
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	cd b7       	in	r28, 0x3d	; 61
    4c94:	de b7       	in	r29, 0x3e	; 62
    4c96:	80 91 c1 40 	lds	r24, 0x40C1	; 0x8040c1 <g_lin_frame_data_buffer+0x4>
    4c9a:	82 95       	swap	r24
    4c9c:	8f 70       	andi	r24, 0x0F	; 15
    4c9e:	88 23       	and	r24, r24
    4ca0:	61 f0       	breq	.+24     	; 0x4cba <soft_timer_lin_signal_update_task+0x2c>
    4ca2:	80 91 c1 40 	lds	r24, 0x40C1	; 0x8040c1 <g_lin_frame_data_buffer+0x4>
    4ca6:	82 95       	swap	r24
    4ca8:	8f 70       	andi	r24, 0x0F	; 15
    4caa:	8f 70       	andi	r24, 0x0F	; 15
    4cac:	8f 70       	andi	r24, 0x0F	; 15
    4cae:	90 91 76 40 	lds	r25, 0x4076	; 0x804076 <g_lin_rx_signal>
    4cb2:	90 7f       	andi	r25, 0xF0	; 240
    4cb4:	89 2b       	or	r24, r25
    4cb6:	80 93 76 40 	sts	0x4076, r24	; 0x804076 <g_lin_rx_signal>
    4cba:	80 91 bd 40 	lds	r24, 0x40BD	; 0x8040bd <g_lin_frame_data_buffer>
    4cbe:	81 70       	andi	r24, 0x01	; 1
    4cc0:	81 70       	andi	r24, 0x01	; 1
    4cc2:	82 95       	swap	r24
    4cc4:	88 0f       	add	r24, r24
    4cc6:	80 7e       	andi	r24, 0xE0	; 224
    4cc8:	90 91 76 40 	lds	r25, 0x4076	; 0x804076 <g_lin_rx_signal>
    4ccc:	9f 7d       	andi	r25, 0xDF	; 223
    4cce:	89 2b       	or	r24, r25
    4cd0:	80 93 76 40 	sts	0x4076, r24	; 0x804076 <g_lin_rx_signal>
    4cd4:	00 00       	nop
    4cd6:	df 91       	pop	r29
    4cd8:	cf 91       	pop	r28
    4cda:	08 95       	ret

00004cdc <backlight_cb>:
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	00 d0       	rcall	.+0      	; 0x4ce2 <backlight_cb+0x6>
    4ce2:	00 d0       	rcall	.+0      	; 0x4ce4 <backlight_cb+0x8>
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
    4ce8:	69 83       	std	Y+1, r22	; 0x01
    4cea:	7a 83       	std	Y+2, r23	; 0x02
    4cec:	8b 83       	std	Y+3, r24	; 0x03
    4cee:	9c 83       	std	Y+4, r25	; 0x04
    4cf0:	80 e0       	ldi	r24, 0x00	; 0
    4cf2:	9a e0       	ldi	r25, 0x0A	; 10
    4cf4:	29 81       	ldd	r18, Y+1	; 0x01
    4cf6:	3a 81       	ldd	r19, Y+2	; 0x02
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	24 a7       	std	Z+44, r18	; 0x2c
    4cfc:	35 a7       	std	Z+45, r19	; 0x2d
    4cfe:	00 00       	nop
    4d00:	24 96       	adiw	r28, 0x04	; 4
    4d02:	cd bf       	out	0x3d, r28	; 61
    4d04:	de bf       	out	0x3e, r29	; 62
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	08 95       	ret

00004d0c <ep40_lin_signal_update_while_task>:
    4d0c:	cf 93       	push	r28
    4d0e:	df 93       	push	r29
    4d10:	1f 92       	push	r1
    4d12:	cd b7       	in	r28, 0x3d	; 61
    4d14:	de b7       	in	r29, 0x3e	; 62
    4d16:	19 82       	std	Y+1, r1	; 0x01
    4d18:	3e c2       	rjmp	.+1148   	; 0x5196 <ep40_lin_signal_update_while_task+0x48a>
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	88 2f       	mov	r24, r24
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	09 2e       	mov	r0, r25
    4d22:	00 0c       	add	r0, r0
    4d24:	aa 0b       	sbc	r26, r26
    4d26:	bb 0b       	sbc	r27, r27
    4d28:	43 e0       	ldi	r20, 0x03	; 3
    4d2a:	50 e0       	ldi	r21, 0x00	; 0
    4d2c:	26 e0       	ldi	r18, 0x06	; 6
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	84 1b       	sub	r24, r20
    4d32:	95 0b       	sbc	r25, r21
    4d34:	28 17       	cp	r18, r24
    4d36:	39 07       	cpc	r19, r25
    4d38:	08 f4       	brcc	.+2      	; 0x4d3c <ep40_lin_signal_update_while_task+0x30>
    4d3a:	29 c2       	rjmp	.+1106   	; 0x518e <ep40_lin_signal_update_while_task+0x482>
    4d3c:	8e 5a       	subi	r24, 0xAE	; 174
    4d3e:	9b 4d       	sbci	r25, 0xDB	; 219
    4d40:	fc 01       	movw	r30, r24
    4d42:	0c 94 d4 78 	jmp	0xf1a8	; 0xf1a8 <__tablejump2__>
    4d46:	89 81       	ldd	r24, Y+1	; 0x01
    4d48:	28 2f       	mov	r18, r24
    4d4a:	30 e0       	ldi	r19, 0x00	; 0
    4d4c:	c9 01       	movw	r24, r18
    4d4e:	88 0f       	add	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	82 0f       	add	r24, r18
    4d54:	93 1f       	adc	r25, r19
    4d56:	86 5b       	subi	r24, 0xB6	; 182
    4d58:	99 4b       	sbci	r25, 0xB9	; 185
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	80 81       	ld	r24, Z
    4d5e:	88 23       	and	r24, r24
    4d60:	89 f1       	breq	.+98     	; 0x4dc4 <ep40_lin_signal_update_while_task+0xb8>
    4d62:	89 81       	ldd	r24, Y+1	; 0x01
    4d64:	28 2f       	mov	r18, r24
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	c9 01       	movw	r24, r18
    4d6a:	88 0f       	add	r24, r24
    4d6c:	99 1f       	adc	r25, r25
    4d6e:	82 0f       	add	r24, r18
    4d70:	93 1f       	adc	r25, r19
    4d72:	86 5b       	subi	r24, 0xB6	; 182
    4d74:	99 4b       	sbci	r25, 0xB9	; 185
    4d76:	fc 01       	movw	r30, r24
    4d78:	80 81       	ld	r24, Z
    4d7a:	4f ef       	ldi	r20, 0xFF	; 255
    4d7c:	48 0f       	add	r20, r24
    4d7e:	c9 01       	movw	r24, r18
    4d80:	88 0f       	add	r24, r24
    4d82:	99 1f       	adc	r25, r25
    4d84:	82 0f       	add	r24, r18
    4d86:	93 1f       	adc	r25, r19
    4d88:	86 5b       	subi	r24, 0xB6	; 182
    4d8a:	99 4b       	sbci	r25, 0xB9	; 185
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	40 83       	st	Z, r20
    4d90:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4d94:	48 2f       	mov	r20, r24
    4d96:	48 7f       	andi	r20, 0xF8	; 248
    4d98:	89 81       	ldd	r24, Y+1	; 0x01
    4d9a:	28 2f       	mov	r18, r24
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	c9 01       	movw	r24, r18
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	82 0f       	add	r24, r18
    4da6:	93 1f       	adc	r25, r19
    4da8:	85 5b       	subi	r24, 0xB5	; 181
    4daa:	99 4b       	sbci	r25, 0xB9	; 185
    4dac:	fc 01       	movw	r30, r24
    4dae:	80 81       	ld	r24, Z
    4db0:	87 70       	andi	r24, 0x07	; 7
    4db2:	84 2b       	or	r24, r20
    4db4:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4db8:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4dbc:	8e 7f       	andi	r24, 0xFE	; 254
    4dbe:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4dc2:	e6 c1       	rjmp	.+972    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4dc4:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4dc8:	88 7f       	andi	r24, 0xF8	; 248
    4dca:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4dce:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4dd2:	8e 7f       	andi	r24, 0xFE	; 254
    4dd4:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4dd8:	db c1       	rjmp	.+950    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	28 2f       	mov	r18, r24
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	c9 01       	movw	r24, r18
    4de2:	88 0f       	add	r24, r24
    4de4:	99 1f       	adc	r25, r25
    4de6:	82 0f       	add	r24, r18
    4de8:	93 1f       	adc	r25, r19
    4dea:	86 5b       	subi	r24, 0xB6	; 182
    4dec:	99 4b       	sbci	r25, 0xB9	; 185
    4dee:	fc 01       	movw	r30, r24
    4df0:	80 81       	ld	r24, Z
    4df2:	88 23       	and	r24, r24
    4df4:	b1 f1       	breq	.+108    	; 0x4e62 <ep40_lin_signal_update_while_task+0x156>
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	28 2f       	mov	r18, r24
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	c9 01       	movw	r24, r18
    4dfe:	88 0f       	add	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	82 0f       	add	r24, r18
    4e04:	93 1f       	adc	r25, r19
    4e06:	86 5b       	subi	r24, 0xB6	; 182
    4e08:	99 4b       	sbci	r25, 0xB9	; 185
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	80 81       	ld	r24, Z
    4e0e:	4f ef       	ldi	r20, 0xFF	; 255
    4e10:	48 0f       	add	r20, r24
    4e12:	c9 01       	movw	r24, r18
    4e14:	88 0f       	add	r24, r24
    4e16:	99 1f       	adc	r25, r25
    4e18:	82 0f       	add	r24, r18
    4e1a:	93 1f       	adc	r25, r19
    4e1c:	86 5b       	subi	r24, 0xB6	; 182
    4e1e:	99 4b       	sbci	r25, 0xB9	; 185
    4e20:	fc 01       	movw	r30, r24
    4e22:	40 83       	st	Z, r20
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	28 2f       	mov	r18, r24
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	c9 01       	movw	r24, r18
    4e2c:	88 0f       	add	r24, r24
    4e2e:	99 1f       	adc	r25, r25
    4e30:	82 0f       	add	r24, r18
    4e32:	93 1f       	adc	r25, r19
    4e34:	85 5b       	subi	r24, 0xB5	; 181
    4e36:	99 4b       	sbci	r25, 0xB9	; 185
    4e38:	fc 01       	movw	r30, r24
    4e3a:	80 81       	ld	r24, Z
    4e3c:	88 23       	and	r24, r24
    4e3e:	31 f0       	breq	.+12     	; 0x4e4c <ep40_lin_signal_update_while_task+0x140>
    4e40:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e44:	88 60       	ori	r24, 0x08	; 8
    4e46:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e4a:	05 c0       	rjmp	.+10     	; 0x4e56 <ep40_lin_signal_update_while_task+0x14a>
    4e4c:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e50:	87 7f       	andi	r24, 0xF7	; 247
    4e52:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e56:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e5a:	8d 7f       	andi	r24, 0xFD	; 253
    4e5c:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e60:	97 c1       	rjmp	.+814    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4e62:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e66:	87 7f       	andi	r24, 0xF7	; 247
    4e68:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4e6c:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e70:	8d 7f       	andi	r24, 0xFD	; 253
    4e72:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4e76:	8c c1       	rjmp	.+792    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4e78:	89 81       	ldd	r24, Y+1	; 0x01
    4e7a:	28 2f       	mov	r18, r24
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	c9 01       	movw	r24, r18
    4e80:	88 0f       	add	r24, r24
    4e82:	99 1f       	adc	r25, r25
    4e84:	82 0f       	add	r24, r18
    4e86:	93 1f       	adc	r25, r19
    4e88:	86 5b       	subi	r24, 0xB6	; 182
    4e8a:	99 4b       	sbci	r25, 0xB9	; 185
    4e8c:	fc 01       	movw	r30, r24
    4e8e:	80 81       	ld	r24, Z
    4e90:	88 23       	and	r24, r24
    4e92:	b1 f1       	breq	.+108    	; 0x4f00 <ep40_lin_signal_update_while_task+0x1f4>
    4e94:	89 81       	ldd	r24, Y+1	; 0x01
    4e96:	28 2f       	mov	r18, r24
    4e98:	30 e0       	ldi	r19, 0x00	; 0
    4e9a:	c9 01       	movw	r24, r18
    4e9c:	88 0f       	add	r24, r24
    4e9e:	99 1f       	adc	r25, r25
    4ea0:	82 0f       	add	r24, r18
    4ea2:	93 1f       	adc	r25, r19
    4ea4:	85 5b       	subi	r24, 0xB5	; 181
    4ea6:	99 4b       	sbci	r25, 0xB9	; 185
    4ea8:	fc 01       	movw	r30, r24
    4eaa:	80 81       	ld	r24, Z
    4eac:	88 23       	and	r24, r24
    4eae:	31 f0       	breq	.+12     	; 0x4ebc <ep40_lin_signal_update_while_task+0x1b0>
    4eb0:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4eb4:	80 61       	ori	r24, 0x10	; 16
    4eb6:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4eba:	05 c0       	rjmp	.+10     	; 0x4ec6 <ep40_lin_signal_update_while_task+0x1ba>
    4ebc:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4ec0:	8f 7e       	andi	r24, 0xEF	; 239
    4ec2:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4ec6:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4eca:	8b 7f       	andi	r24, 0xFB	; 251
    4ecc:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	28 2f       	mov	r18, r24
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	c9 01       	movw	r24, r18
    4ed8:	88 0f       	add	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	82 0f       	add	r24, r18
    4ede:	93 1f       	adc	r25, r19
    4ee0:	86 5b       	subi	r24, 0xB6	; 182
    4ee2:	99 4b       	sbci	r25, 0xB9	; 185
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	80 81       	ld	r24, Z
    4ee8:	4f ef       	ldi	r20, 0xFF	; 255
    4eea:	48 0f       	add	r20, r24
    4eec:	c9 01       	movw	r24, r18
    4eee:	88 0f       	add	r24, r24
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	82 0f       	add	r24, r18
    4ef4:	93 1f       	adc	r25, r19
    4ef6:	86 5b       	subi	r24, 0xB6	; 182
    4ef8:	99 4b       	sbci	r25, 0xB9	; 185
    4efa:	fc 01       	movw	r30, r24
    4efc:	40 83       	st	Z, r20
    4efe:	48 c1       	rjmp	.+656    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4f00:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f04:	8f 7e       	andi	r24, 0xEF	; 239
    4f06:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f0a:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f0e:	8b 7f       	andi	r24, 0xFB	; 251
    4f10:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f14:	3d c1       	rjmp	.+634    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	28 2f       	mov	r18, r24
    4f1a:	30 e0       	ldi	r19, 0x00	; 0
    4f1c:	c9 01       	movw	r24, r18
    4f1e:	88 0f       	add	r24, r24
    4f20:	99 1f       	adc	r25, r25
    4f22:	82 0f       	add	r24, r18
    4f24:	93 1f       	adc	r25, r19
    4f26:	86 5b       	subi	r24, 0xB6	; 182
    4f28:	99 4b       	sbci	r25, 0xB9	; 185
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	80 81       	ld	r24, Z
    4f2e:	88 23       	and	r24, r24
    4f30:	b1 f1       	breq	.+108    	; 0x4f9e <ep40_lin_signal_update_while_task+0x292>
    4f32:	89 81       	ldd	r24, Y+1	; 0x01
    4f34:	28 2f       	mov	r18, r24
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	c9 01       	movw	r24, r18
    4f3a:	88 0f       	add	r24, r24
    4f3c:	99 1f       	adc	r25, r25
    4f3e:	82 0f       	add	r24, r18
    4f40:	93 1f       	adc	r25, r19
    4f42:	86 5b       	subi	r24, 0xB6	; 182
    4f44:	99 4b       	sbci	r25, 0xB9	; 185
    4f46:	fc 01       	movw	r30, r24
    4f48:	80 81       	ld	r24, Z
    4f4a:	4f ef       	ldi	r20, 0xFF	; 255
    4f4c:	48 0f       	add	r20, r24
    4f4e:	c9 01       	movw	r24, r18
    4f50:	88 0f       	add	r24, r24
    4f52:	99 1f       	adc	r25, r25
    4f54:	82 0f       	add	r24, r18
    4f56:	93 1f       	adc	r25, r19
    4f58:	86 5b       	subi	r24, 0xB6	; 182
    4f5a:	99 4b       	sbci	r25, 0xB9	; 185
    4f5c:	fc 01       	movw	r30, r24
    4f5e:	40 83       	st	Z, r20
    4f60:	89 81       	ldd	r24, Y+1	; 0x01
    4f62:	28 2f       	mov	r18, r24
    4f64:	30 e0       	ldi	r19, 0x00	; 0
    4f66:	c9 01       	movw	r24, r18
    4f68:	88 0f       	add	r24, r24
    4f6a:	99 1f       	adc	r25, r25
    4f6c:	82 0f       	add	r24, r18
    4f6e:	93 1f       	adc	r25, r19
    4f70:	85 5b       	subi	r24, 0xB5	; 181
    4f72:	99 4b       	sbci	r25, 0xB9	; 185
    4f74:	fc 01       	movw	r30, r24
    4f76:	80 81       	ld	r24, Z
    4f78:	88 23       	and	r24, r24
    4f7a:	31 f0       	breq	.+12     	; 0x4f88 <ep40_lin_signal_update_while_task+0x27c>
    4f7c:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f80:	80 62       	ori	r24, 0x20	; 32
    4f82:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f86:	05 c0       	rjmp	.+10     	; 0x4f92 <ep40_lin_signal_update_while_task+0x286>
    4f88:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f8c:	8f 7d       	andi	r24, 0xDF	; 223
    4f8e:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4f92:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f96:	87 7f       	andi	r24, 0xF7	; 247
    4f98:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4f9c:	f9 c0       	rjmp	.+498    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4f9e:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4fa2:	8f 7d       	andi	r24, 0xDF	; 223
    4fa4:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <g_lin_frame_data_buffer+0x8>
    4fa8:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4fac:	87 7f       	andi	r24, 0xF7	; 247
    4fae:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    4fb2:	ee c0       	rjmp	.+476    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    4fb4:	89 81       	ldd	r24, Y+1	; 0x01
    4fb6:	28 2f       	mov	r18, r24
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	c9 01       	movw	r24, r18
    4fbc:	88 0f       	add	r24, r24
    4fbe:	99 1f       	adc	r25, r25
    4fc0:	82 0f       	add	r24, r18
    4fc2:	93 1f       	adc	r25, r19
    4fc4:	86 5b       	subi	r24, 0xB6	; 182
    4fc6:	99 4b       	sbci	r25, 0xB9	; 185
    4fc8:	fc 01       	movw	r30, r24
    4fca:	80 81       	ld	r24, Z
    4fcc:	88 23       	and	r24, r24
    4fce:	b1 f1       	breq	.+108    	; 0x503c <ep40_lin_signal_update_while_task+0x330>
    4fd0:	89 81       	ldd	r24, Y+1	; 0x01
    4fd2:	28 2f       	mov	r18, r24
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	c9 01       	movw	r24, r18
    4fd8:	88 0f       	add	r24, r24
    4fda:	99 1f       	adc	r25, r25
    4fdc:	82 0f       	add	r24, r18
    4fde:	93 1f       	adc	r25, r19
    4fe0:	86 5b       	subi	r24, 0xB6	; 182
    4fe2:	99 4b       	sbci	r25, 0xB9	; 185
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	80 81       	ld	r24, Z
    4fe8:	4f ef       	ldi	r20, 0xFF	; 255
    4fea:	48 0f       	add	r20, r24
    4fec:	c9 01       	movw	r24, r18
    4fee:	88 0f       	add	r24, r24
    4ff0:	99 1f       	adc	r25, r25
    4ff2:	82 0f       	add	r24, r18
    4ff4:	93 1f       	adc	r25, r19
    4ff6:	86 5b       	subi	r24, 0xB6	; 182
    4ff8:	99 4b       	sbci	r25, 0xB9	; 185
    4ffa:	fc 01       	movw	r30, r24
    4ffc:	40 83       	st	Z, r20
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	28 2f       	mov	r18, r24
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	c9 01       	movw	r24, r18
    5006:	88 0f       	add	r24, r24
    5008:	99 1f       	adc	r25, r25
    500a:	82 0f       	add	r24, r18
    500c:	93 1f       	adc	r25, r19
    500e:	85 5b       	subi	r24, 0xB5	; 181
    5010:	99 4b       	sbci	r25, 0xB9	; 185
    5012:	fc 01       	movw	r30, r24
    5014:	80 81       	ld	r24, Z
    5016:	88 23       	and	r24, r24
    5018:	31 f0       	breq	.+12     	; 0x5026 <ep40_lin_signal_update_while_task+0x31a>
    501a:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    501e:	81 60       	ori	r24, 0x01	; 1
    5020:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5024:	05 c0       	rjmp	.+10     	; 0x5030 <ep40_lin_signal_update_while_task+0x324>
    5026:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    502a:	8e 7f       	andi	r24, 0xFE	; 254
    502c:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5030:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5034:	8f 7e       	andi	r24, 0xEF	; 239
    5036:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    503a:	aa c0       	rjmp	.+340    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    503c:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5040:	8e 7f       	andi	r24, 0xFE	; 254
    5042:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5046:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    504a:	8f 7e       	andi	r24, 0xEF	; 239
    504c:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5050:	9f c0       	rjmp	.+318    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	28 2f       	mov	r18, r24
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	c9 01       	movw	r24, r18
    505a:	88 0f       	add	r24, r24
    505c:	99 1f       	adc	r25, r25
    505e:	82 0f       	add	r24, r18
    5060:	93 1f       	adc	r25, r19
    5062:	86 5b       	subi	r24, 0xB6	; 182
    5064:	99 4b       	sbci	r25, 0xB9	; 185
    5066:	fc 01       	movw	r30, r24
    5068:	80 81       	ld	r24, Z
    506a:	88 23       	and	r24, r24
    506c:	b1 f1       	breq	.+108    	; 0x50da <ep40_lin_signal_update_while_task+0x3ce>
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	28 2f       	mov	r18, r24
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	c9 01       	movw	r24, r18
    5076:	88 0f       	add	r24, r24
    5078:	99 1f       	adc	r25, r25
    507a:	82 0f       	add	r24, r18
    507c:	93 1f       	adc	r25, r19
    507e:	86 5b       	subi	r24, 0xB6	; 182
    5080:	99 4b       	sbci	r25, 0xB9	; 185
    5082:	fc 01       	movw	r30, r24
    5084:	80 81       	ld	r24, Z
    5086:	4f ef       	ldi	r20, 0xFF	; 255
    5088:	48 0f       	add	r20, r24
    508a:	c9 01       	movw	r24, r18
    508c:	88 0f       	add	r24, r24
    508e:	99 1f       	adc	r25, r25
    5090:	82 0f       	add	r24, r18
    5092:	93 1f       	adc	r25, r19
    5094:	86 5b       	subi	r24, 0xB6	; 182
    5096:	99 4b       	sbci	r25, 0xB9	; 185
    5098:	fc 01       	movw	r30, r24
    509a:	40 83       	st	Z, r20
    509c:	89 81       	ldd	r24, Y+1	; 0x01
    509e:	28 2f       	mov	r18, r24
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	c9 01       	movw	r24, r18
    50a4:	88 0f       	add	r24, r24
    50a6:	99 1f       	adc	r25, r25
    50a8:	82 0f       	add	r24, r18
    50aa:	93 1f       	adc	r25, r19
    50ac:	85 5b       	subi	r24, 0xB5	; 181
    50ae:	99 4b       	sbci	r25, 0xB9	; 185
    50b0:	fc 01       	movw	r30, r24
    50b2:	80 81       	ld	r24, Z
    50b4:	88 23       	and	r24, r24
    50b6:	31 f0       	breq	.+12     	; 0x50c4 <ep40_lin_signal_update_while_task+0x3b8>
    50b8:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50bc:	82 60       	ori	r24, 0x02	; 2
    50be:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50c2:	05 c0       	rjmp	.+10     	; 0x50ce <ep40_lin_signal_update_while_task+0x3c2>
    50c4:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50c8:	8d 7f       	andi	r24, 0xFD	; 253
    50ca:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50ce:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50d2:	8f 7d       	andi	r24, 0xDF	; 223
    50d4:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50d8:	5b c0       	rjmp	.+182    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    50da:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50de:	8d 7f       	andi	r24, 0xFD	; 253
    50e0:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    50e4:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50e8:	8f 7d       	andi	r24, 0xDF	; 223
    50ea:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    50ee:	50 c0       	rjmp	.+160    	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    50f0:	89 81       	ldd	r24, Y+1	; 0x01
    50f2:	28 2f       	mov	r18, r24
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	c9 01       	movw	r24, r18
    50f8:	88 0f       	add	r24, r24
    50fa:	99 1f       	adc	r25, r25
    50fc:	82 0f       	add	r24, r18
    50fe:	93 1f       	adc	r25, r19
    5100:	86 5b       	subi	r24, 0xB6	; 182
    5102:	99 4b       	sbci	r25, 0xB9	; 185
    5104:	fc 01       	movw	r30, r24
    5106:	80 81       	ld	r24, Z
    5108:	88 23       	and	r24, r24
    510a:	b1 f1       	breq	.+108    	; 0x5178 <ep40_lin_signal_update_while_task+0x46c>
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	28 2f       	mov	r18, r24
    5110:	30 e0       	ldi	r19, 0x00	; 0
    5112:	c9 01       	movw	r24, r18
    5114:	88 0f       	add	r24, r24
    5116:	99 1f       	adc	r25, r25
    5118:	82 0f       	add	r24, r18
    511a:	93 1f       	adc	r25, r19
    511c:	86 5b       	subi	r24, 0xB6	; 182
    511e:	99 4b       	sbci	r25, 0xB9	; 185
    5120:	fc 01       	movw	r30, r24
    5122:	80 81       	ld	r24, Z
    5124:	4f ef       	ldi	r20, 0xFF	; 255
    5126:	48 0f       	add	r20, r24
    5128:	c9 01       	movw	r24, r18
    512a:	88 0f       	add	r24, r24
    512c:	99 1f       	adc	r25, r25
    512e:	82 0f       	add	r24, r18
    5130:	93 1f       	adc	r25, r19
    5132:	86 5b       	subi	r24, 0xB6	; 182
    5134:	99 4b       	sbci	r25, 0xB9	; 185
    5136:	fc 01       	movw	r30, r24
    5138:	40 83       	st	Z, r20
    513a:	89 81       	ldd	r24, Y+1	; 0x01
    513c:	28 2f       	mov	r18, r24
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	c9 01       	movw	r24, r18
    5142:	88 0f       	add	r24, r24
    5144:	99 1f       	adc	r25, r25
    5146:	82 0f       	add	r24, r18
    5148:	93 1f       	adc	r25, r19
    514a:	85 5b       	subi	r24, 0xB5	; 181
    514c:	99 4b       	sbci	r25, 0xB9	; 185
    514e:	fc 01       	movw	r30, r24
    5150:	80 81       	ld	r24, Z
    5152:	88 23       	and	r24, r24
    5154:	31 f0       	breq	.+12     	; 0x5162 <ep40_lin_signal_update_while_task+0x456>
    5156:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    515a:	84 60       	ori	r24, 0x04	; 4
    515c:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5160:	05 c0       	rjmp	.+10     	; 0x516c <ep40_lin_signal_update_while_task+0x460>
    5162:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5166:	8b 7f       	andi	r24, 0xFB	; 251
    5168:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    516c:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5170:	8f 7b       	andi	r24, 0xBF	; 191
    5172:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5176:	0c c0       	rjmp	.+24     	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    5178:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    517c:	8b 7f       	andi	r24, 0xFB	; 251
    517e:	80 93 c7 40 	sts	0x40C7, r24	; 0x8040c7 <g_lin_frame_data_buffer+0xa>
    5182:	80 91 25 46 	lds	r24, 0x4625	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    5186:	8f 7b       	andi	r24, 0xBF	; 191
    5188:	80 93 25 46 	sts	0x4625, r24	; 0x804625 <g_lin_flag_handle_tbl+0x1>
    518c:	01 c0       	rjmp	.+2      	; 0x5190 <ep40_lin_signal_update_while_task+0x484>
    518e:	00 00       	nop
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	8f 5f       	subi	r24, 0xFF	; 255
    5194:	89 83       	std	Y+1, r24	; 0x01
    5196:	89 81       	ldd	r24, Y+1	; 0x01
    5198:	8a 30       	cpi	r24, 0x0A	; 10
    519a:	08 f4       	brcc	.+2      	; 0x519e <ep40_lin_signal_update_while_task+0x492>
    519c:	be cd       	rjmp	.-1156   	; 0x4d1a <ep40_lin_signal_update_while_task+0xe>
    519e:	00 00       	nop
    51a0:	0f 90       	pop	r0
    51a2:	df 91       	pop	r29
    51a4:	cf 91       	pop	r28
    51a6:	08 95       	ret

000051a8 <lin_signal_send_x_times>:
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	00 d0       	rcall	.+0      	; 0x51ae <lin_signal_send_x_times+0x6>
    51ae:	1f 92       	push	r1
    51b0:	cd b7       	in	r28, 0x3d	; 61
    51b2:	de b7       	in	r29, 0x3e	; 62
    51b4:	89 83       	std	Y+1, r24	; 0x01
    51b6:	6a 83       	std	Y+2, r22	; 0x02
    51b8:	4b 83       	std	Y+3, r20	; 0x03
    51ba:	89 81       	ldd	r24, Y+1	; 0x01
    51bc:	28 2f       	mov	r18, r24
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	c9 01       	movw	r24, r18
    51c2:	88 0f       	add	r24, r24
    51c4:	99 1f       	adc	r25, r25
    51c6:	82 0f       	add	r24, r18
    51c8:	93 1f       	adc	r25, r19
    51ca:	86 5b       	subi	r24, 0xB6	; 182
    51cc:	99 4b       	sbci	r25, 0xB9	; 185
    51ce:	2a 81       	ldd	r18, Y+2	; 0x02
    51d0:	fc 01       	movw	r30, r24
    51d2:	20 83       	st	Z, r18
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
    51d6:	28 2f       	mov	r18, r24
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	c9 01       	movw	r24, r18
    51dc:	88 0f       	add	r24, r24
    51de:	99 1f       	adc	r25, r25
    51e0:	82 0f       	add	r24, r18
    51e2:	93 1f       	adc	r25, r19
    51e4:	85 5b       	subi	r24, 0xB5	; 181
    51e6:	99 4b       	sbci	r25, 0xB9	; 185
    51e8:	2b 81       	ldd	r18, Y+3	; 0x03
    51ea:	fc 01       	movw	r30, r24
    51ec:	20 83       	st	Z, r18
    51ee:	00 00       	nop
    51f0:	23 96       	adiw	r28, 0x03	; 3
    51f2:	cd bf       	out	0x3d, r28	; 61
    51f4:	de bf       	out	0x3e, r29	; 62
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	08 95       	ret

000051fc <left_window_signal_out_cb>:

/* 左边窗提升信号输出回调函数 */
void left_window_signal_out_cb(uint8_t signal)
{
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	1f 92       	push	r1
    5202:	cd b7       	in	r28, 0x3d	; 61
    5204:	de b7       	in	r29, 0x3e	; 62
    5206:	89 83       	std	Y+1, r24	; 0x01
    // }
    // else
    // {
    //     lin_signal_x_shot_wr(PFGLS_0X21_RL_WINDOW_CONTROL, signal, 3);
    // }
}
    5208:	00 00       	nop
    520a:	0f 90       	pop	r0
    520c:	df 91       	pop	r29
    520e:	cf 91       	pop	r28
    5210:	08 95       	ret

00005212 <right_window_signal_out_cb>:

/* 右边窗提升信号输出回调函数 */
void right_window_signal_out_cb(uint8_t signal)
{
    5212:	cf 93       	push	r28
    5214:	df 93       	push	r29
    5216:	1f 92       	push	r1
    5218:	cd b7       	in	r28, 0x3d	; 61
    521a:	de b7       	in	r29, 0x3e	; 62
    521c:	89 83       	std	Y+1, r24	; 0x01
    lin_signal_send_x_times(LI0_PFGLS_RLWindowControl, 3, signal);
    521e:	49 81       	ldd	r20, Y+1	; 0x01
    5220:	63 e0       	ldi	r22, 0x03	; 3
    5222:	83 e0       	ldi	r24, 0x03	; 3
    5224:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <lin_signal_send_x_times>
}
    5228:	00 00       	nop
    522a:	0f 90       	pop	r0
    522c:	df 91       	pop	r29
    522e:	cf 91       	pop	r28
    5230:	08 95       	ret

00005232 <soft_timer_window_task>:

/* 窗提升滑条呵呵按键软件定时器任务 */
void soft_timer_window_task(void)
{
    5232:	cf 93       	push	r28
    5234:	df 93       	push	r29
    5236:	00 d0       	rcall	.+0      	; 0x5238 <soft_timer_window_task+0x6>
    5238:	00 d0       	rcall	.+0      	; 0x523a <soft_timer_window_task+0x8>
    523a:	cd b7       	in	r28, 0x3d	; 61
    523c:	de b7       	in	r29, 0x3e	; 62
    window_obj_t *window_obj_ptr = &g_left_window_obj;
    523e:	89 e7       	ldi	r24, 0x79	; 121
    5240:	90 e4       	ldi	r25, 0x40	; 64
    5242:	89 83       	std	Y+1, r24	; 0x01
    5244:	9a 83       	std	Y+2, r25	; 0x02
    window_t *window_ptr = &g_left_window_obj.window;
    5246:	84 e8       	ldi	r24, 0x84	; 132
    5248:	90 e4       	ldi	r25, 0x40	; 64
    524a:	8b 83       	std	Y+3, r24	; 0x03
    524c:	9c 83       	std	Y+4, r25	; 0x04
    //rear_status = g_btn_rear.status;

    /*************************************LEFT************************************************/

    /*************************************RIGHT************************************************/
    window_obj_ptr = &g_right_window_obj;
    524e:	80 e9       	ldi	r24, 0x90	; 144
    5250:	90 e4       	ldi	r25, 0x40	; 64
    5252:	89 83       	std	Y+1, r24	; 0x01
    5254:	9a 83       	std	Y+2, r25	; 0x02
    window_ptr = &g_right_window_obj.window;
    5256:	8b e9       	ldi	r24, 0x9B	; 155
    5258:	90 e4       	ldi	r25, 0x40	; 64
    525a:	8b 83       	std	Y+3, r24	; 0x03
    525c:	9c 83       	std	Y+4, r25	; 0x04

    window_obj_ptr->btn_a_status_last = window_obj_ptr->btn_a_status;
    525e:	89 81       	ldd	r24, Y+1	; 0x01
    5260:	9a 81       	ldd	r25, Y+2	; 0x02
    5262:	fc 01       	movw	r30, r24
    5264:	24 81       	ldd	r18, Z+4	; 0x04
    5266:	89 81       	ldd	r24, Y+1	; 0x01
    5268:	9a 81       	ldd	r25, Y+2	; 0x02
    526a:	fc 01       	movw	r30, r24
    526c:	23 83       	std	Z+3, r18	; 0x03
    window_obj_ptr->btn_a_status = get_sensor_state(0) & 0x80;
    526e:	80 e0       	ldi	r24, 0x00	; 0
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	0e 94 fc 62 	call	0xc5f8	; 0xc5f8 <get_sensor_state>
    5276:	28 2f       	mov	r18, r24
    5278:	20 78       	andi	r18, 0x80	; 128
    527a:	89 81       	ldd	r24, Y+1	; 0x01
    527c:	9a 81       	ldd	r25, Y+2	; 0x02
    527e:	fc 01       	movw	r30, r24
    5280:	24 83       	std	Z+4, r18	; 0x04

    window_obj_ptr->btn_b_status_last = window_obj_ptr->btn_b_status;
    5282:	89 81       	ldd	r24, Y+1	; 0x01
    5284:	9a 81       	ldd	r25, Y+2	; 0x02
    5286:	fc 01       	movw	r30, r24
    5288:	26 81       	ldd	r18, Z+6	; 0x06
    528a:	89 81       	ldd	r24, Y+1	; 0x01
    528c:	9a 81       	ldd	r25, Y+2	; 0x02
    528e:	fc 01       	movw	r30, r24
    5290:	25 83       	std	Z+5, r18	; 0x05
    window_obj_ptr->btn_b_status = get_sensor_state(1) & 0x80;
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	0e 94 fc 62 	call	0xc5f8	; 0xc5f8 <get_sensor_state>
    529a:	28 2f       	mov	r18, r24
    529c:	20 78       	andi	r18, 0x80	; 128
    529e:	89 81       	ldd	r24, Y+1	; 0x01
    52a0:	9a 81       	ldd	r25, Y+2	; 0x02
    52a2:	fc 01       	movw	r30, r24
    52a4:	26 83       	std	Z+6, r18	; 0x06

    window_ptr->btn_a_status = window_obj_ptr->btn_a_status;
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	9a 81       	ldd	r25, Y+2	; 0x02
    52aa:	fc 01       	movw	r30, r24
    52ac:	24 81       	ldd	r18, Z+4	; 0x04
    52ae:	8b 81       	ldd	r24, Y+3	; 0x03
    52b0:	9c 81       	ldd	r25, Y+4	; 0x04
    52b2:	fc 01       	movw	r30, r24
    52b4:	26 83       	std	Z+6, r18	; 0x06
    window_ptr->btn_b_status = window_obj_ptr->btn_b_status;
    52b6:	89 81       	ldd	r24, Y+1	; 0x01
    52b8:	9a 81       	ldd	r25, Y+2	; 0x02
    52ba:	fc 01       	movw	r30, r24
    52bc:	26 81       	ldd	r18, Z+6	; 0x06
    52be:	8b 81       	ldd	r24, Y+3	; 0x03
    52c0:	9c 81       	ldd	r25, Y+4	; 0x04
    52c2:	fc 01       	movw	r30, r24
    52c4:	27 83       	std	Z+7, r18	; 0x07

    if ((window_obj_ptr->btn_a_status != 0) && (window_obj_ptr->btn_a_status_last == 0))
    52c6:	89 81       	ldd	r24, Y+1	; 0x01
    52c8:	9a 81       	ldd	r25, Y+2	; 0x02
    52ca:	fc 01       	movw	r30, r24
    52cc:	84 81       	ldd	r24, Z+4	; 0x04
    52ce:	88 23       	and	r24, r24
    52d0:	81 f0       	breq	.+32     	; 0x52f2 <soft_timer_window_task+0xc0>
    52d2:	89 81       	ldd	r24, Y+1	; 0x01
    52d4:	9a 81       	ldd	r25, Y+2	; 0x02
    52d6:	fc 01       	movw	r30, r24
    52d8:	83 81       	ldd	r24, Z+3	; 0x03
    52da:	88 23       	and	r24, r24
    52dc:	51 f4       	brne	.+20     	; 0x52f2 <soft_timer_window_task+0xc0>
    {
        window_obj_ptr->ticks = 0;
    52de:	89 81       	ldd	r24, Y+1	; 0x01
    52e0:	9a 81       	ldd	r25, Y+2	; 0x02
    52e2:	fc 01       	movw	r30, r24
    52e4:	11 82       	std	Z+1, r1	; 0x01
    52e6:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 2;
    52e8:	89 81       	ldd	r24, Y+1	; 0x01
    52ea:	9a 81       	ldd	r25, Y+2	; 0x02
    52ec:	22 e0       	ldi	r18, 0x02	; 2
    52ee:	fc 01       	movw	r30, r24
    52f0:	20 83       	st	Z, r18
    }

    if (window_obj_ptr->status == 2)
    52f2:	89 81       	ldd	r24, Y+1	; 0x01
    52f4:	9a 81       	ldd	r25, Y+2	; 0x02
    52f6:	fc 01       	movw	r30, r24
    52f8:	80 81       	ld	r24, Z
    52fa:	82 30       	cpi	r24, 0x02	; 2
    52fc:	09 f0       	breq	.+2      	; 0x5300 <soft_timer_window_task+0xce>
    52fe:	3f c0       	rjmp	.+126    	; 0x537e <soft_timer_window_task+0x14c>
    {
        window_obj_ptr->ticks++;
    5300:	89 81       	ldd	r24, Y+1	; 0x01
    5302:	9a 81       	ldd	r25, Y+2	; 0x02
    5304:	fc 01       	movw	r30, r24
    5306:	81 81       	ldd	r24, Z+1	; 0x01
    5308:	92 81       	ldd	r25, Z+2	; 0x02
    530a:	9c 01       	movw	r18, r24
    530c:	2f 5f       	subi	r18, 0xFF	; 255
    530e:	3f 4f       	sbci	r19, 0xFF	; 255
    5310:	89 81       	ldd	r24, Y+1	; 0x01
    5312:	9a 81       	ldd	r25, Y+2	; 0x02
    5314:	fc 01       	movw	r30, r24
    5316:	21 83       	std	Z+1, r18	; 0x01
    5318:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    531a:	8b 81       	ldd	r24, Y+3	; 0x03
    531c:	9c 81       	ldd	r25, Y+4	; 0x04
    531e:	21 e0       	ldi	r18, 0x01	; 1
    5320:	fc 01       	movw	r30, r24
    5322:	21 83       	std	Z+1, r18	; 0x01
        window_ptr->btn_a_cap_trig_flg = 1;
    5324:	8b 81       	ldd	r24, Y+3	; 0x03
    5326:	9c 81       	ldd	r25, Y+4	; 0x04
    5328:	21 e0       	ldi	r18, 0x01	; 1
    532a:	fc 01       	movw	r30, r24
    532c:	23 83       	std	Z+3, r18	; 0x03
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    532e:	89 81       	ldd	r24, Y+1	; 0x01
    5330:	9a 81       	ldd	r25, Y+2	; 0x02
    5332:	fc 01       	movw	r30, r24
    5334:	81 81       	ldd	r24, Z+1	; 0x01
    5336:	92 81       	ldd	r25, Z+2	; 0x02
    5338:	c2 97       	sbiw	r24, 0x32	; 50
    533a:	70 f0       	brcs	.+28     	; 0x5358 <soft_timer_window_task+0x126>
        {
            window_obj_ptr->status = 0;
    533c:	89 81       	ldd	r24, Y+1	; 0x01
    533e:	9a 81       	ldd	r25, Y+2	; 0x02
    5340:	fc 01       	movw	r30, r24
    5342:	10 82       	st	Z, r1
            window_ptr->long_flg = 1;
    5344:	8b 81       	ldd	r24, Y+3	; 0x03
    5346:	9c 81       	ldd	r25, Y+4	; 0x04
    5348:	21 e0       	ldi	r18, 0x01	; 1
    534a:	fc 01       	movw	r30, r24
    534c:	21 83       	std	Z+1, r18	; 0x01
            window_ptr->btn_a_cap_trig_flg = 1;
    534e:	8b 81       	ldd	r24, Y+3	; 0x03
    5350:	9c 81       	ldd	r25, Y+4	; 0x04
    5352:	21 e0       	ldi	r18, 0x01	; 1
    5354:	fc 01       	movw	r30, r24
    5356:	23 83       	std	Z+3, r18	; 0x03
        }
        if (window_obj_ptr->btn_a_status == 0)
    5358:	89 81       	ldd	r24, Y+1	; 0x01
    535a:	9a 81       	ldd	r25, Y+2	; 0x02
    535c:	fc 01       	movw	r30, r24
    535e:	84 81       	ldd	r24, Z+4	; 0x04
    5360:	88 23       	and	r24, r24
    5362:	69 f4       	brne	.+26     	; 0x537e <soft_timer_window_task+0x14c>
        {
            window_obj_ptr->status = 0;
    5364:	89 81       	ldd	r24, Y+1	; 0x01
    5366:	9a 81       	ldd	r25, Y+2	; 0x02
    5368:	fc 01       	movw	r30, r24
    536a:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    536c:	8b 81       	ldd	r24, Y+3	; 0x03
    536e:	9c 81       	ldd	r25, Y+4	; 0x04
    5370:	fc 01       	movw	r30, r24
    5372:	11 82       	std	Z+1, r1	; 0x01
            window_ptr->btn_a_cap_trig_flg = 1;
    5374:	8b 81       	ldd	r24, Y+3	; 0x03
    5376:	9c 81       	ldd	r25, Y+4	; 0x04
    5378:	21 e0       	ldi	r18, 0x01	; 1
    537a:	fc 01       	movw	r30, r24
    537c:	23 83       	std	Z+3, r18	; 0x03
        }
    }

    if ((window_obj_ptr->btn_b_status != 0) && (window_obj_ptr->btn_b_status_last == 0))
    537e:	89 81       	ldd	r24, Y+1	; 0x01
    5380:	9a 81       	ldd	r25, Y+2	; 0x02
    5382:	fc 01       	movw	r30, r24
    5384:	86 81       	ldd	r24, Z+6	; 0x06
    5386:	88 23       	and	r24, r24
    5388:	81 f0       	breq	.+32     	; 0x53aa <soft_timer_window_task+0x178>
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	9a 81       	ldd	r25, Y+2	; 0x02
    538e:	fc 01       	movw	r30, r24
    5390:	85 81       	ldd	r24, Z+5	; 0x05
    5392:	88 23       	and	r24, r24
    5394:	51 f4       	brne	.+20     	; 0x53aa <soft_timer_window_task+0x178>
    {
        window_obj_ptr->ticks = 0;
    5396:	89 81       	ldd	r24, Y+1	; 0x01
    5398:	9a 81       	ldd	r25, Y+2	; 0x02
    539a:	fc 01       	movw	r30, r24
    539c:	11 82       	std	Z+1, r1	; 0x01
    539e:	12 82       	std	Z+2, r1	; 0x02
        window_obj_ptr->status = 3;
    53a0:	89 81       	ldd	r24, Y+1	; 0x01
    53a2:	9a 81       	ldd	r25, Y+2	; 0x02
    53a4:	23 e0       	ldi	r18, 0x03	; 3
    53a6:	fc 01       	movw	r30, r24
    53a8:	20 83       	st	Z, r18
    }

    if (window_obj_ptr->status == 3)
    53aa:	89 81       	ldd	r24, Y+1	; 0x01
    53ac:	9a 81       	ldd	r25, Y+2	; 0x02
    53ae:	fc 01       	movw	r30, r24
    53b0:	80 81       	ld	r24, Z
    53b2:	83 30       	cpi	r24, 0x03	; 3
    53b4:	09 f0       	breq	.+2      	; 0x53b8 <soft_timer_window_task+0x186>
    53b6:	3f c0       	rjmp	.+126    	; 0x5436 <soft_timer_window_task+0x204>
    {
        window_obj_ptr->ticks++;
    53b8:	89 81       	ldd	r24, Y+1	; 0x01
    53ba:	9a 81       	ldd	r25, Y+2	; 0x02
    53bc:	fc 01       	movw	r30, r24
    53be:	81 81       	ldd	r24, Z+1	; 0x01
    53c0:	92 81       	ldd	r25, Z+2	; 0x02
    53c2:	9c 01       	movw	r18, r24
    53c4:	2f 5f       	subi	r18, 0xFF	; 255
    53c6:	3f 4f       	sbci	r19, 0xFF	; 255
    53c8:	89 81       	ldd	r24, Y+1	; 0x01
    53ca:	9a 81       	ldd	r25, Y+2	; 0x02
    53cc:	fc 01       	movw	r30, r24
    53ce:	21 83       	std	Z+1, r18	; 0x01
    53d0:	32 83       	std	Z+2, r19	; 0x02
        window_ptr->long_flg = 1;
    53d2:	8b 81       	ldd	r24, Y+3	; 0x03
    53d4:	9c 81       	ldd	r25, Y+4	; 0x04
    53d6:	21 e0       	ldi	r18, 0x01	; 1
    53d8:	fc 01       	movw	r30, r24
    53da:	21 83       	std	Z+1, r18	; 0x01
        window_ptr->btn_b_cap_trig_flg = 1;
    53dc:	8b 81       	ldd	r24, Y+3	; 0x03
    53de:	9c 81       	ldd	r25, Y+4	; 0x04
    53e0:	21 e0       	ldi	r18, 0x01	; 1
    53e2:	fc 01       	movw	r30, r24
    53e4:	22 83       	std	Z+2, r18	; 0x02
        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    53e6:	89 81       	ldd	r24, Y+1	; 0x01
    53e8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ea:	fc 01       	movw	r30, r24
    53ec:	81 81       	ldd	r24, Z+1	; 0x01
    53ee:	92 81       	ldd	r25, Z+2	; 0x02
    53f0:	c2 97       	sbiw	r24, 0x32	; 50
    53f2:	70 f0       	brcs	.+28     	; 0x5410 <soft_timer_window_task+0x1de>
        {
            window_obj_ptr->status = 0;
    53f4:	89 81       	ldd	r24, Y+1	; 0x01
    53f6:	9a 81       	ldd	r25, Y+2	; 0x02
    53f8:	fc 01       	movw	r30, r24
    53fa:	10 82       	st	Z, r1
            window_ptr->long_flg = 1;
    53fc:	8b 81       	ldd	r24, Y+3	; 0x03
    53fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5400:	21 e0       	ldi	r18, 0x01	; 1
    5402:	fc 01       	movw	r30, r24
    5404:	21 83       	std	Z+1, r18	; 0x01
            window_ptr->btn_b_cap_trig_flg = 1;
    5406:	8b 81       	ldd	r24, Y+3	; 0x03
    5408:	9c 81       	ldd	r25, Y+4	; 0x04
    540a:	21 e0       	ldi	r18, 0x01	; 1
    540c:	fc 01       	movw	r30, r24
    540e:	22 83       	std	Z+2, r18	; 0x02
        }
        if (window_obj_ptr->btn_b_status == 0)
    5410:	89 81       	ldd	r24, Y+1	; 0x01
    5412:	9a 81       	ldd	r25, Y+2	; 0x02
    5414:	fc 01       	movw	r30, r24
    5416:	86 81       	ldd	r24, Z+6	; 0x06
    5418:	88 23       	and	r24, r24
    541a:	69 f4       	brne	.+26     	; 0x5436 <soft_timer_window_task+0x204>
        {
            window_obj_ptr->status = 0;
    541c:	89 81       	ldd	r24, Y+1	; 0x01
    541e:	9a 81       	ldd	r25, Y+2	; 0x02
    5420:	fc 01       	movw	r30, r24
    5422:	10 82       	st	Z, r1
            window_ptr->long_flg = 0;
    5424:	8b 81       	ldd	r24, Y+3	; 0x03
    5426:	9c 81       	ldd	r25, Y+4	; 0x04
    5428:	fc 01       	movw	r30, r24
    542a:	11 82       	std	Z+1, r1	; 0x01
            window_ptr->btn_b_cap_trig_flg = 1;
    542c:	8b 81       	ldd	r24, Y+3	; 0x03
    542e:	9c 81       	ldd	r25, Y+4	; 0x04
    5430:	21 e0       	ldi	r18, 0x01	; 1
    5432:	fc 01       	movw	r30, r24
    5434:	22 83       	std	Z+2, r18	; 0x02
        }
    }

    window_obj_ptr->slide_status_last = window_obj_ptr->slide_status;
    5436:	89 81       	ldd	r24, Y+1	; 0x01
    5438:	9a 81       	ldd	r25, Y+2	; 0x02
    543a:	fc 01       	movw	r30, r24
    543c:	20 85       	ldd	r18, Z+8	; 0x08
    543e:	89 81       	ldd	r24, Y+1	; 0x01
    5440:	9a 81       	ldd	r25, Y+2	; 0x02
    5442:	fc 01       	movw	r30, r24
    5444:	27 83       	std	Z+7, r18	; 0x07
    window_obj_ptr->slide_status = get_scroller_state(0);
    5446:	80 e0       	ldi	r24, 0x00	; 0
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	0e 94 19 63 	call	0xc632	; 0xc632 <get_scroller_state>
    544e:	28 2f       	mov	r18, r24
    5450:	89 81       	ldd	r24, Y+1	; 0x01
    5452:	9a 81       	ldd	r25, Y+2	; 0x02
    5454:	fc 01       	movw	r30, r24
    5456:	20 87       	std	Z+8, r18	; 0x08
    window_ptr->slide_status = window_obj_ptr->slide_status;
    5458:	89 81       	ldd	r24, Y+1	; 0x01
    545a:	9a 81       	ldd	r25, Y+2	; 0x02
    545c:	fc 01       	movw	r30, r24
    545e:	20 85       	ldd	r18, Z+8	; 0x08
    5460:	8b 81       	ldd	r24, Y+3	; 0x03
    5462:	9c 81       	ldd	r25, Y+4	; 0x04
    5464:	fc 01       	movw	r30, r24
    5466:	20 87       	std	Z+8, r18	; 0x08

    window_obj_ptr->slide_pos = get_scroller_position(0);
    5468:	80 e0       	ldi	r24, 0x00	; 0
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	0e 94 38 63 	call	0xc670	; 0xc670 <get_scroller_position>
    5470:	28 2f       	mov	r18, r24
    5472:	89 81       	ldd	r24, Y+1	; 0x01
    5474:	9a 81       	ldd	r25, Y+2	; 0x02
    5476:	fc 01       	movw	r30, r24
    5478:	22 87       	std	Z+10, r18	; 0x0a

    if (window_obj_ptr->status == 0)
    547a:	89 81       	ldd	r24, Y+1	; 0x01
    547c:	9a 81       	ldd	r25, Y+2	; 0x02
    547e:	fc 01       	movw	r30, r24
    5480:	80 81       	ld	r24, Z
    5482:	88 23       	and	r24, r24
    5484:	09 f5       	brne	.+66     	; 0x54c8 <soft_timer_window_task+0x296>
    {
        if ((window_obj_ptr->slide_status != 0) && (window_obj_ptr->slide_status_last == 0))
    5486:	89 81       	ldd	r24, Y+1	; 0x01
    5488:	9a 81       	ldd	r25, Y+2	; 0x02
    548a:	fc 01       	movw	r30, r24
    548c:	80 85       	ldd	r24, Z+8	; 0x08
    548e:	88 23       	and	r24, r24
    5490:	09 f4       	brne	.+2      	; 0x5494 <soft_timer_window_task+0x262>
    5492:	db c0       	rjmp	.+438    	; 0x564a <soft_timer_window_task+0x418>
    5494:	89 81       	ldd	r24, Y+1	; 0x01
    5496:	9a 81       	ldd	r25, Y+2	; 0x02
    5498:	fc 01       	movw	r30, r24
    549a:	87 81       	ldd	r24, Z+7	; 0x07
    549c:	88 23       	and	r24, r24
    549e:	09 f0       	breq	.+2      	; 0x54a2 <soft_timer_window_task+0x270>
    54a0:	d4 c0       	rjmp	.+424    	; 0x564a <soft_timer_window_task+0x418>
        {
            window_obj_ptr->ticks = 0;
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	9a 81       	ldd	r25, Y+2	; 0x02
    54a6:	fc 01       	movw	r30, r24
    54a8:	11 82       	std	Z+1, r1	; 0x01
    54aa:	12 82       	std	Z+2, r1	; 0x02
            window_obj_ptr->status = 4;
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	9a 81       	ldd	r25, Y+2	; 0x02
    54b0:	24 e0       	ldi	r18, 0x04	; 4
    54b2:	fc 01       	movw	r30, r24
    54b4:	20 83       	st	Z, r18
            window_obj_ptr->slide_pos_first = window_obj_ptr->slide_pos;
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ba:	fc 01       	movw	r30, r24
    54bc:	22 85       	ldd	r18, Z+10	; 0x0a
    54be:	89 81       	ldd	r24, Y+1	; 0x01
    54c0:	9a 81       	ldd	r25, Y+2	; 0x02
    54c2:	fc 01       	movw	r30, r24
    54c4:	21 87       	std	Z+9, r18	; 0x09
    54c6:	c1 c0       	rjmp	.+386    	; 0x564a <soft_timer_window_task+0x418>
        }
    }
    else if (window_obj_ptr->status == 4)
    54c8:	89 81       	ldd	r24, Y+1	; 0x01
    54ca:	9a 81       	ldd	r25, Y+2	; 0x02
    54cc:	fc 01       	movw	r30, r24
    54ce:	80 81       	ld	r24, Z
    54d0:	84 30       	cpi	r24, 0x04	; 4
    54d2:	09 f0       	breq	.+2      	; 0x54d6 <soft_timer_window_task+0x2a4>
    54d4:	aa c0       	rjmp	.+340    	; 0x562a <soft_timer_window_task+0x3f8>
    {
        if (window_obj_ptr->slide_status == 0)
    54d6:	89 81       	ldd	r24, Y+1	; 0x01
    54d8:	9a 81       	ldd	r25, Y+2	; 0x02
    54da:	fc 01       	movw	r30, r24
    54dc:	80 85       	ldd	r24, Z+8	; 0x08
    54de:	88 23       	and	r24, r24
    54e0:	99 f5       	brne	.+102    	; 0x5548 <soft_timer_window_task+0x316>
        {
            window_obj_ptr->status = 0;
    54e2:	89 81       	ldd	r24, Y+1	; 0x01
    54e4:	9a 81       	ldd	r25, Y+2	; 0x02
    54e6:	fc 01       	movw	r30, r24
    54e8:	10 82       	st	Z, r1
            if (window_obj_ptr->slide_pos_first < 100)
    54ea:	89 81       	ldd	r24, Y+1	; 0x01
    54ec:	9a 81       	ldd	r25, Y+2	; 0x02
    54ee:	fc 01       	movw	r30, r24
    54f0:	81 85       	ldd	r24, Z+9	; 0x09
    54f2:	84 36       	cpi	r24, 0x64	; 100
    54f4:	88 f4       	brcc	.+34     	; 0x5518 <soft_timer_window_task+0x2e6>
            {
                if (window_obj_ptr->slide_pos > 150)
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	9a 81       	ldd	r25, Y+2	; 0x02
    54fa:	fc 01       	movw	r30, r24
    54fc:	82 85       	ldd	r24, Z+10	; 0x0a
    54fe:	87 39       	cpi	r24, 0x97	; 151
    5500:	08 f4       	brcc	.+2      	; 0x5504 <soft_timer_window_task+0x2d2>
    5502:	a3 c0       	rjmp	.+326    	; 0x564a <soft_timer_window_task+0x418>
                {
                    window_ptr->long_flg = 0;
    5504:	8b 81       	ldd	r24, Y+3	; 0x03
    5506:	9c 81       	ldd	r25, Y+4	; 0x04
    5508:	fc 01       	movw	r30, r24
    550a:	11 82       	std	Z+1, r1	; 0x01
                    window_ptr->slide_1_to_2_flg = 1;
    550c:	8b 81       	ldd	r24, Y+3	; 0x03
    550e:	9c 81       	ldd	r25, Y+4	; 0x04
    5510:	21 e0       	ldi	r18, 0x01	; 1
    5512:	fc 01       	movw	r30, r24
    5514:	24 83       	std	Z+4, r18	; 0x04
    5516:	99 c0       	rjmp	.+306    	; 0x564a <soft_timer_window_task+0x418>
                }
            }
            else if (window_obj_ptr->slide_pos_first > 150)
    5518:	89 81       	ldd	r24, Y+1	; 0x01
    551a:	9a 81       	ldd	r25, Y+2	; 0x02
    551c:	fc 01       	movw	r30, r24
    551e:	81 85       	ldd	r24, Z+9	; 0x09
    5520:	87 39       	cpi	r24, 0x97	; 151
    5522:	08 f4       	brcc	.+2      	; 0x5526 <soft_timer_window_task+0x2f4>
    5524:	92 c0       	rjmp	.+292    	; 0x564a <soft_timer_window_task+0x418>
            {
                if (window_obj_ptr->slide_pos < 100)
    5526:	89 81       	ldd	r24, Y+1	; 0x01
    5528:	9a 81       	ldd	r25, Y+2	; 0x02
    552a:	fc 01       	movw	r30, r24
    552c:	82 85       	ldd	r24, Z+10	; 0x0a
    552e:	84 36       	cpi	r24, 0x64	; 100
    5530:	08 f0       	brcs	.+2      	; 0x5534 <soft_timer_window_task+0x302>
    5532:	8b c0       	rjmp	.+278    	; 0x564a <soft_timer_window_task+0x418>
                {
                    window_ptr->long_flg = 0;
    5534:	8b 81       	ldd	r24, Y+3	; 0x03
    5536:	9c 81       	ldd	r25, Y+4	; 0x04
    5538:	fc 01       	movw	r30, r24
    553a:	11 82       	std	Z+1, r1	; 0x01
                    window_ptr->slide_2_to_1_flg = 1;
    553c:	8b 81       	ldd	r24, Y+3	; 0x03
    553e:	9c 81       	ldd	r25, Y+4	; 0x04
    5540:	21 e0       	ldi	r18, 0x01	; 1
    5542:	fc 01       	movw	r30, r24
    5544:	25 83       	std	Z+5, r18	; 0x05
    5546:	81 c0       	rjmp	.+258    	; 0x564a <soft_timer_window_task+0x418>
                }
            }
        }
        else
        {
            window_obj_ptr->ticks++;
    5548:	89 81       	ldd	r24, Y+1	; 0x01
    554a:	9a 81       	ldd	r25, Y+2	; 0x02
    554c:	fc 01       	movw	r30, r24
    554e:	81 81       	ldd	r24, Z+1	; 0x01
    5550:	92 81       	ldd	r25, Z+2	; 0x02
    5552:	9c 01       	movw	r18, r24
    5554:	2f 5f       	subi	r18, 0xFF	; 255
    5556:	3f 4f       	sbci	r19, 0xFF	; 255
    5558:	89 81       	ldd	r24, Y+1	; 0x01
    555a:	9a 81       	ldd	r25, Y+2	; 0x02
    555c:	fc 01       	movw	r30, r24
    555e:	21 83       	std	Z+1, r18	; 0x01
    5560:	32 83       	std	Z+2, r19	; 0x02
            if (window_obj_ptr->slide_status != 0)
    5562:	89 81       	ldd	r24, Y+1	; 0x01
    5564:	9a 81       	ldd	r25, Y+2	; 0x02
    5566:	fc 01       	movw	r30, r24
    5568:	80 85       	ldd	r24, Z+8	; 0x08
    556a:	88 23       	and	r24, r24
    556c:	09 f4       	brne	.+2      	; 0x5570 <soft_timer_window_task+0x33e>
    556e:	6d c0       	rjmp	.+218    	; 0x564a <soft_timer_window_task+0x418>
            {
                if (window_obj_ptr->slide_pos_first < 100)
    5570:	89 81       	ldd	r24, Y+1	; 0x01
    5572:	9a 81       	ldd	r25, Y+2	; 0x02
    5574:	fc 01       	movw	r30, r24
    5576:	81 85       	ldd	r24, Z+9	; 0x09
    5578:	84 36       	cpi	r24, 0x64	; 100
    557a:	48 f5       	brcc	.+82     	; 0x55ce <soft_timer_window_task+0x39c>
                {
                    if (window_obj_ptr->slide_pos > 150)
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	9a 81       	ldd	r25, Y+2	; 0x02
    5580:	fc 01       	movw	r30, r24
    5582:	82 85       	ldd	r24, Z+10	; 0x0a
    5584:	87 39       	cpi	r24, 0x97	; 151
    5586:	08 f4       	brcc	.+2      	; 0x558a <soft_timer_window_task+0x358>
    5588:	60 c0       	rjmp	.+192    	; 0x564a <soft_timer_window_task+0x418>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    558a:	89 81       	ldd	r24, Y+1	; 0x01
    558c:	9a 81       	ldd	r25, Y+2	; 0x02
    558e:	fc 01       	movw	r30, r24
    5590:	81 81       	ldd	r24, Z+1	; 0x01
    5592:	92 81       	ldd	r25, Z+2	; 0x02
    5594:	c2 97       	sbiw	r24, 0x32	; 50
    5596:	80 f0       	brcs	.+32     	; 0x55b8 <soft_timer_window_task+0x386>
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    5598:	8b 81       	ldd	r24, Y+3	; 0x03
    559a:	9c 81       	ldd	r25, Y+4	; 0x04
    559c:	21 e0       	ldi	r18, 0x01	; 1
    559e:	fc 01       	movw	r30, r24
    55a0:	24 83       	std	Z+4, r18	; 0x04
                            window_obj_ptr->status = 5;
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
    55a4:	9a 81       	ldd	r25, Y+2	; 0x02
    55a6:	25 e0       	ldi	r18, 0x05	; 5
    55a8:	fc 01       	movw	r30, r24
    55aa:	20 83       	st	Z, r18
                            window_ptr->long_flg = 1;
    55ac:	8b 81       	ldd	r24, Y+3	; 0x03
    55ae:	9c 81       	ldd	r25, Y+4	; 0x04
    55b0:	21 e0       	ldi	r18, 0x01	; 1
    55b2:	fc 01       	movw	r30, r24
    55b4:	21 83       	std	Z+1, r18	; 0x01
    55b6:	49 c0       	rjmp	.+146    	; 0x564a <soft_timer_window_task+0x418>
                        }
                        else
                        {
                            window_ptr->slide_1_to_2_flg = 1;
    55b8:	8b 81       	ldd	r24, Y+3	; 0x03
    55ba:	9c 81       	ldd	r25, Y+4	; 0x04
    55bc:	21 e0       	ldi	r18, 0x01	; 1
    55be:	fc 01       	movw	r30, r24
    55c0:	24 83       	std	Z+4, r18	; 0x04
                            window_ptr->long_flg = 1;
    55c2:	8b 81       	ldd	r24, Y+3	; 0x03
    55c4:	9c 81       	ldd	r25, Y+4	; 0x04
    55c6:	21 e0       	ldi	r18, 0x01	; 1
    55c8:	fc 01       	movw	r30, r24
    55ca:	21 83       	std	Z+1, r18	; 0x01
    55cc:	3e c0       	rjmp	.+124    	; 0x564a <soft_timer_window_task+0x418>
                        }
                    }
                }
                else if (window_obj_ptr->slide_pos_first > 150)
    55ce:	89 81       	ldd	r24, Y+1	; 0x01
    55d0:	9a 81       	ldd	r25, Y+2	; 0x02
    55d2:	fc 01       	movw	r30, r24
    55d4:	81 85       	ldd	r24, Z+9	; 0x09
    55d6:	87 39       	cpi	r24, 0x97	; 151
    55d8:	c0 f1       	brcs	.+112    	; 0x564a <soft_timer_window_task+0x418>
                {
                    if (window_obj_ptr->slide_pos < 100)
    55da:	89 81       	ldd	r24, Y+1	; 0x01
    55dc:	9a 81       	ldd	r25, Y+2	; 0x02
    55de:	fc 01       	movw	r30, r24
    55e0:	82 85       	ldd	r24, Z+10	; 0x0a
    55e2:	84 36       	cpi	r24, 0x64	; 100
    55e4:	90 f5       	brcc	.+100    	; 0x564a <soft_timer_window_task+0x418>
                    {
                        if (window_obj_ptr->ticks >= (LONG_PRESS_DELTA / WINDOW_TICK_UNIT_MS))
    55e6:	89 81       	ldd	r24, Y+1	; 0x01
    55e8:	9a 81       	ldd	r25, Y+2	; 0x02
    55ea:	fc 01       	movw	r30, r24
    55ec:	81 81       	ldd	r24, Z+1	; 0x01
    55ee:	92 81       	ldd	r25, Z+2	; 0x02
    55f0:	c2 97       	sbiw	r24, 0x32	; 50
    55f2:	80 f0       	brcs	.+32     	; 0x5614 <soft_timer_window_task+0x3e2>
                        {
                            window_obj_ptr->status = 5;
    55f4:	89 81       	ldd	r24, Y+1	; 0x01
    55f6:	9a 81       	ldd	r25, Y+2	; 0x02
    55f8:	25 e0       	ldi	r18, 0x05	; 5
    55fa:	fc 01       	movw	r30, r24
    55fc:	20 83       	st	Z, r18
                            window_ptr->long_flg = 1;
    55fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5600:	9c 81       	ldd	r25, Y+4	; 0x04
    5602:	21 e0       	ldi	r18, 0x01	; 1
    5604:	fc 01       	movw	r30, r24
    5606:	21 83       	std	Z+1, r18	; 0x01
                            window_ptr->slide_2_to_1_flg = 1;
    5608:	8b 81       	ldd	r24, Y+3	; 0x03
    560a:	9c 81       	ldd	r25, Y+4	; 0x04
    560c:	21 e0       	ldi	r18, 0x01	; 1
    560e:	fc 01       	movw	r30, r24
    5610:	25 83       	std	Z+5, r18	; 0x05
    5612:	1b c0       	rjmp	.+54     	; 0x564a <soft_timer_window_task+0x418>
                        }
                        else
                        {
                            window_ptr->long_flg = 1;
    5614:	8b 81       	ldd	r24, Y+3	; 0x03
    5616:	9c 81       	ldd	r25, Y+4	; 0x04
    5618:	21 e0       	ldi	r18, 0x01	; 1
    561a:	fc 01       	movw	r30, r24
    561c:	21 83       	std	Z+1, r18	; 0x01
                            window_ptr->slide_2_to_1_flg = 1;
    561e:	8b 81       	ldd	r24, Y+3	; 0x03
    5620:	9c 81       	ldd	r25, Y+4	; 0x04
    5622:	21 e0       	ldi	r18, 0x01	; 1
    5624:	fc 01       	movw	r30, r24
    5626:	25 83       	std	Z+5, r18	; 0x05
    5628:	10 c0       	rjmp	.+32     	; 0x564a <soft_timer_window_task+0x418>
                    }
                }
            }
        }
    }
    else if (window_obj_ptr->status == 5)
    562a:	89 81       	ldd	r24, Y+1	; 0x01
    562c:	9a 81       	ldd	r25, Y+2	; 0x02
    562e:	fc 01       	movw	r30, r24
    5630:	80 81       	ld	r24, Z
    5632:	85 30       	cpi	r24, 0x05	; 5
    5634:	51 f4       	brne	.+20     	; 0x564a <soft_timer_window_task+0x418>
    {
        if (window_obj_ptr->slide_status == 0)
    5636:	89 81       	ldd	r24, Y+1	; 0x01
    5638:	9a 81       	ldd	r25, Y+2	; 0x02
    563a:	fc 01       	movw	r30, r24
    563c:	80 85       	ldd	r24, Z+8	; 0x08
    563e:	88 23       	and	r24, r24
    5640:	21 f4       	brne	.+8      	; 0x564a <soft_timer_window_task+0x418>
        {
            window_obj_ptr->status = 0;
    5642:	89 81       	ldd	r24, Y+1	; 0x01
    5644:	9a 81       	ldd	r25, Y+2	; 0x02
    5646:	fc 01       	movw	r30, r24
    5648:	10 82       	st	Z, r1
        }
    }
    window_task(window_ptr);
    564a:	8b 81       	ldd	r24, Y+3	; 0x03
    564c:	9c 81       	ldd	r25, Y+4	; 0x04
    564e:	0e 94 25 2c 	call	0x584a	; 0x584a <window_task>
}
    5652:	00 00       	nop
    5654:	24 96       	adiw	r28, 0x04	; 4
    5656:	cd bf       	out	0x3d, r28	; 61
    5658:	de bf       	out	0x3e, r29	; 62
    565a:	df 91       	pop	r29
    565c:	cf 91       	pop	r28
    565e:	08 95       	ret

00005660 <PORTA_set_pin_dir>:
        break;

    default:
        break;
    }
}
    5660:	cf 93       	push	r28
    5662:	df 93       	push	r29
    5664:	00 d0       	rcall	.+0      	; 0x5666 <PORTA_set_pin_dir+0x6>
    5666:	cd b7       	in	r28, 0x3d	; 61
    5668:	de b7       	in	r29, 0x3e	; 62
    566a:	89 83       	std	Y+1, r24	; 0x01
    566c:	6a 83       	std	Y+2, r22	; 0x02
    566e:	8a 81       	ldd	r24, Y+2	; 0x02
    5670:	88 2f       	mov	r24, r24
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	81 30       	cpi	r24, 0x01	; 1
    5676:	91 05       	cpc	r25, r1
    5678:	e1 f0       	breq	.+56     	; 0x56b2 <PORTA_set_pin_dir+0x52>
    567a:	82 30       	cpi	r24, 0x02	; 2
    567c:	91 05       	cpc	r25, r1
    567e:	71 f1       	breq	.+92     	; 0x56dc <PORTA_set_pin_dir+0x7c>
    5680:	89 2b       	or	r24, r25
    5682:	09 f0       	breq	.+2      	; 0x5686 <PORTA_set_pin_dir+0x26>
    5684:	3b c0       	rjmp	.+118    	; 0x56fc <PORTA_set_pin_dir+0x9c>
    5686:	20 e0       	ldi	r18, 0x00	; 0
    5688:	30 e0       	ldi	r19, 0x00	; 0
    568a:	80 e0       	ldi	r24, 0x00	; 0
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	fc 01       	movw	r30, r24
    5690:	80 81       	ld	r24, Z
    5692:	68 2f       	mov	r22, r24
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	48 2f       	mov	r20, r24
    5698:	50 e0       	ldi	r21, 0x00	; 0
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	02 c0       	rjmp	.+4      	; 0x56a4 <PORTA_set_pin_dir+0x44>
    56a0:	88 0f       	add	r24, r24
    56a2:	99 1f       	adc	r25, r25
    56a4:	4a 95       	dec	r20
    56a6:	e2 f7       	brpl	.-8      	; 0x56a0 <PORTA_set_pin_dir+0x40>
    56a8:	80 95       	com	r24
    56aa:	86 23       	and	r24, r22
    56ac:	f9 01       	movw	r30, r18
    56ae:	80 83       	st	Z, r24
    56b0:	25 c0       	rjmp	.+74     	; 0x56fc <PORTA_set_pin_dir+0x9c>
    56b2:	20 e0       	ldi	r18, 0x00	; 0
    56b4:	30 e0       	ldi	r19, 0x00	; 0
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	fc 01       	movw	r30, r24
    56bc:	80 81       	ld	r24, Z
    56be:	68 2f       	mov	r22, r24
    56c0:	89 81       	ldd	r24, Y+1	; 0x01
    56c2:	48 2f       	mov	r20, r24
    56c4:	50 e0       	ldi	r21, 0x00	; 0
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	90 e0       	ldi	r25, 0x00	; 0
    56ca:	02 c0       	rjmp	.+4      	; 0x56d0 <PORTA_set_pin_dir+0x70>
    56cc:	88 0f       	add	r24, r24
    56ce:	99 1f       	adc	r25, r25
    56d0:	4a 95       	dec	r20
    56d2:	e2 f7       	brpl	.-8      	; 0x56cc <PORTA_set_pin_dir+0x6c>
    56d4:	86 2b       	or	r24, r22
    56d6:	f9 01       	movw	r30, r18
    56d8:	80 83       	st	Z, r24
    56da:	10 c0       	rjmp	.+32     	; 0x56fc <PORTA_set_pin_dir+0x9c>
    56dc:	89 81       	ldd	r24, Y+1	; 0x01
    56de:	88 2f       	mov	r24, r24
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	80 5f       	subi	r24, 0xF0	; 240
    56e4:	9b 4f       	sbci	r25, 0xFB	; 251
    56e6:	29 81       	ldd	r18, Y+1	; 0x01
    56e8:	22 2f       	mov	r18, r18
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	20 5f       	subi	r18, 0xF0	; 240
    56ee:	3b 4f       	sbci	r19, 0xFB	; 251
    56f0:	f9 01       	movw	r30, r18
    56f2:	20 81       	ld	r18, Z
    56f4:	28 60       	ori	r18, 0x08	; 8
    56f6:	fc 01       	movw	r30, r24
    56f8:	20 83       	st	Z, r18
    56fa:	00 00       	nop
    56fc:	00 00       	nop
    56fe:	0f 90       	pop	r0
    5700:	0f 90       	pop	r0
    5702:	df 91       	pop	r29
    5704:	cf 91       	pop	r28
    5706:	08 95       	ret

00005708 <PORTA_set_pin_level>:
    5708:	cf 93       	push	r28
    570a:	df 93       	push	r29
    570c:	00 d0       	rcall	.+0      	; 0x570e <PORTA_set_pin_level+0x6>
    570e:	cd b7       	in	r28, 0x3d	; 61
    5710:	de b7       	in	r29, 0x3e	; 62
    5712:	89 83       	std	Y+1, r24	; 0x01
    5714:	6a 83       	std	Y+2, r22	; 0x02
    5716:	8a 81       	ldd	r24, Y+2	; 0x02
    5718:	88 23       	and	r24, r24
    571a:	a9 f0       	breq	.+42     	; 0x5746 <PORTA_set_pin_level+0x3e>
    571c:	20 e0       	ldi	r18, 0x00	; 0
    571e:	30 e0       	ldi	r19, 0x00	; 0
    5720:	80 e0       	ldi	r24, 0x00	; 0
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	fc 01       	movw	r30, r24
    5726:	81 81       	ldd	r24, Z+1	; 0x01
    5728:	68 2f       	mov	r22, r24
    572a:	89 81       	ldd	r24, Y+1	; 0x01
    572c:	48 2f       	mov	r20, r24
    572e:	50 e0       	ldi	r21, 0x00	; 0
    5730:	81 e0       	ldi	r24, 0x01	; 1
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	02 c0       	rjmp	.+4      	; 0x573a <PORTA_set_pin_level+0x32>
    5736:	88 0f       	add	r24, r24
    5738:	99 1f       	adc	r25, r25
    573a:	4a 95       	dec	r20
    573c:	e2 f7       	brpl	.-8      	; 0x5736 <PORTA_set_pin_level+0x2e>
    573e:	86 2b       	or	r24, r22
    5740:	f9 01       	movw	r30, r18
    5742:	81 83       	std	Z+1, r24	; 0x01
    5744:	15 c0       	rjmp	.+42     	; 0x5770 <PORTA_set_pin_level+0x68>
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	80 e0       	ldi	r24, 0x00	; 0
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	fc 01       	movw	r30, r24
    5750:	81 81       	ldd	r24, Z+1	; 0x01
    5752:	68 2f       	mov	r22, r24
    5754:	89 81       	ldd	r24, Y+1	; 0x01
    5756:	48 2f       	mov	r20, r24
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	02 c0       	rjmp	.+4      	; 0x5764 <PORTA_set_pin_level+0x5c>
    5760:	88 0f       	add	r24, r24
    5762:	99 1f       	adc	r25, r25
    5764:	4a 95       	dec	r20
    5766:	e2 f7       	brpl	.-8      	; 0x5760 <PORTA_set_pin_level+0x58>
    5768:	80 95       	com	r24
    576a:	86 23       	and	r24, r22
    576c:	f9 01       	movw	r30, r18
    576e:	81 83       	std	Z+1, r24	; 0x01
    5770:	00 00       	nop
    5772:	0f 90       	pop	r0
    5774:	0f 90       	pop	r0
    5776:	df 91       	pop	r29
    5778:	cf 91       	pop	r28
    577a:	08 95       	ret

0000577c <PORTF_set_pin_level>:
    577c:	cf 93       	push	r28
    577e:	df 93       	push	r29
    5780:	00 d0       	rcall	.+0      	; 0x5782 <PORTF_set_pin_level+0x6>
    5782:	cd b7       	in	r28, 0x3d	; 61
    5784:	de b7       	in	r29, 0x3e	; 62
    5786:	89 83       	std	Y+1, r24	; 0x01
    5788:	6a 83       	std	Y+2, r22	; 0x02
    578a:	8a 81       	ldd	r24, Y+2	; 0x02
    578c:	88 23       	and	r24, r24
    578e:	a9 f0       	breq	.+42     	; 0x57ba <PORTF_set_pin_level+0x3e>
    5790:	84 e1       	ldi	r24, 0x14	; 20
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	24 e1       	ldi	r18, 0x14	; 20
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	f9 01       	movw	r30, r18
    579a:	21 81       	ldd	r18, Z+1	; 0x01
    579c:	62 2f       	mov	r22, r18
    579e:	29 81       	ldd	r18, Y+1	; 0x01
    57a0:	42 2f       	mov	r20, r18
    57a2:	50 e0       	ldi	r21, 0x00	; 0
    57a4:	21 e0       	ldi	r18, 0x01	; 1
    57a6:	30 e0       	ldi	r19, 0x00	; 0
    57a8:	02 c0       	rjmp	.+4      	; 0x57ae <PORTF_set_pin_level+0x32>
    57aa:	22 0f       	add	r18, r18
    57ac:	33 1f       	adc	r19, r19
    57ae:	4a 95       	dec	r20
    57b0:	e2 f7       	brpl	.-8      	; 0x57aa <PORTF_set_pin_level+0x2e>
    57b2:	26 2b       	or	r18, r22
    57b4:	fc 01       	movw	r30, r24
    57b6:	21 83       	std	Z+1, r18	; 0x01
    57b8:	15 c0       	rjmp	.+42     	; 0x57e4 <PORTF_set_pin_level+0x68>
    57ba:	84 e1       	ldi	r24, 0x14	; 20
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	24 e1       	ldi	r18, 0x14	; 20
    57c0:	30 e0       	ldi	r19, 0x00	; 0
    57c2:	f9 01       	movw	r30, r18
    57c4:	21 81       	ldd	r18, Z+1	; 0x01
    57c6:	62 2f       	mov	r22, r18
    57c8:	29 81       	ldd	r18, Y+1	; 0x01
    57ca:	42 2f       	mov	r20, r18
    57cc:	50 e0       	ldi	r21, 0x00	; 0
    57ce:	21 e0       	ldi	r18, 0x01	; 1
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	02 c0       	rjmp	.+4      	; 0x57d8 <PORTF_set_pin_level+0x5c>
    57d4:	22 0f       	add	r18, r18
    57d6:	33 1f       	adc	r19, r19
    57d8:	4a 95       	dec	r20
    57da:	e2 f7       	brpl	.-8      	; 0x57d4 <PORTF_set_pin_level+0x58>
    57dc:	20 95       	com	r18
    57de:	26 23       	and	r18, r22
    57e0:	fc 01       	movw	r30, r24
    57e2:	21 83       	std	Z+1, r18	; 0x01
    57e4:	00 00       	nop
    57e6:	0f 90       	pop	r0
    57e8:	0f 90       	pop	r0
    57ea:	df 91       	pop	r29
    57ec:	cf 91       	pop	r28
    57ee:	08 95       	ret

000057f0 <PA0_set_dir>:
    57f0:	cf 93       	push	r28
    57f2:	df 93       	push	r29
    57f4:	1f 92       	push	r1
    57f6:	cd b7       	in	r28, 0x3d	; 61
    57f8:	de b7       	in	r29, 0x3e	; 62
    57fa:	89 83       	std	Y+1, r24	; 0x01
    57fc:	69 81       	ldd	r22, Y+1	; 0x01
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	0e 94 30 2b 	call	0x5660	; 0x5660 <PORTA_set_pin_dir>
    5804:	00 00       	nop
    5806:	0f 90       	pop	r0
    5808:	df 91       	pop	r29
    580a:	cf 91       	pop	r28
    580c:	08 95       	ret

0000580e <PA0_set_level>:
    580e:	cf 93       	push	r28
    5810:	df 93       	push	r29
    5812:	1f 92       	push	r1
    5814:	cd b7       	in	r28, 0x3d	; 61
    5816:	de b7       	in	r29, 0x3e	; 62
    5818:	89 83       	std	Y+1, r24	; 0x01
    581a:	69 81       	ldd	r22, Y+1	; 0x01
    581c:	80 e0       	ldi	r24, 0x00	; 0
    581e:	0e 94 84 2b 	call	0x5708	; 0x5708 <PORTA_set_pin_level>
    5822:	00 00       	nop
    5824:	0f 90       	pop	r0
    5826:	df 91       	pop	r29
    5828:	cf 91       	pop	r28
    582a:	08 95       	ret

0000582c <LIN_EN_set_level>:
    582c:	cf 93       	push	r28
    582e:	df 93       	push	r29
    5830:	1f 92       	push	r1
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
    5836:	89 83       	std	Y+1, r24	; 0x01
    5838:	69 81       	ldd	r22, Y+1	; 0x01
    583a:	81 e0       	ldi	r24, 0x01	; 1
    583c:	0e 94 be 2b 	call	0x577c	; 0x577c <PORTF_set_pin_level>
    5840:	00 00       	nop
    5842:	0f 90       	pop	r0
    5844:	df 91       	pop	r29
    5846:	cf 91       	pop	r28
    5848:	08 95       	ret

0000584a <window_task>:

void window_task(window_t *window_ptr)
{
    584a:	cf 93       	push	r28
    584c:	df 93       	push	r29
    584e:	00 d0       	rcall	.+0      	; 0x5850 <window_task+0x6>
    5850:	cd b7       	in	r28, 0x3d	; 61
    5852:	de b7       	in	r29, 0x3e	; 62
    5854:	89 83       	std	Y+1, r24	; 0x01
    5856:	9a 83       	std	Y+2, r25	; 0x02
    switch (window_ptr->status)
    5858:	89 81       	ldd	r24, Y+1	; 0x01
    585a:	9a 81       	ldd	r25, Y+2	; 0x02
    585c:	fc 01       	movw	r30, r24
    585e:	80 81       	ld	r24, Z
    5860:	88 2f       	mov	r24, r24
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	81 30       	cpi	r24, 0x01	; 1
    5866:	91 05       	cpc	r25, r1
    5868:	09 f4       	brne	.+2      	; 0x586c <window_task+0x22>
    586a:	27 c1       	rjmp	.+590    	; 0x5aba <window_task+0x270>
    586c:	82 30       	cpi	r24, 0x02	; 2
    586e:	91 05       	cpc	r25, r1
    5870:	09 f4       	brne	.+2      	; 0x5874 <window_task+0x2a>
    5872:	92 c1       	rjmp	.+804    	; 0x5b98 <window_task+0x34e>
    5874:	89 2b       	or	r24, r25
    5876:	09 f0       	breq	.+2      	; 0x587a <window_task+0x30>
            window_ptr->status = 0;
        }
    }
    break;
    default:
        break;
    5878:	c4 c1       	rjmp	.+904    	; 0x5c02 <window_task+0x3b8>
{
    switch (window_ptr->status)
    {
    case 0:
    {
        window_ptr->signal = SIGNAL_VAL_NO_REQUEST;
    587a:	89 81       	ldd	r24, Y+1	; 0x01
    587c:	9a 81       	ldd	r25, Y+2	; 0x02
    587e:	fc 01       	movw	r30, r24
    5880:	11 86       	std	Z+9, r1	; 0x09
        if (window_ptr->btn_a_cap_trig_flg == 1)
    5882:	89 81       	ldd	r24, Y+1	; 0x01
    5884:	9a 81       	ldd	r25, Y+2	; 0x02
    5886:	fc 01       	movw	r30, r24
    5888:	83 81       	ldd	r24, Z+3	; 0x03
    588a:	81 30       	cpi	r24, 0x01	; 1
    588c:	09 f0       	breq	.+2      	; 0x5890 <window_task+0x46>
    588e:	40 c0       	rjmp	.+128    	; 0x5910 <window_task+0xc6>
        {
            window_ptr->btn_a_cap_trig_flg = 0;
    5890:	89 81       	ldd	r24, Y+1	; 0x01
    5892:	9a 81       	ldd	r25, Y+2	; 0x02
    5894:	fc 01       	movw	r30, r24
    5896:	13 82       	std	Z+3, r1	; 0x03

            if (window_ptr->long_flg == 1)
    5898:	89 81       	ldd	r24, Y+1	; 0x01
    589a:	9a 81       	ldd	r25, Y+2	; 0x02
    589c:	fc 01       	movw	r30, r24
    589e:	81 81       	ldd	r24, Z+1	; 0x01
    58a0:	81 30       	cpi	r24, 0x01	; 1
    58a2:	e9 f4       	brne	.+58     	; 0x58de <window_task+0x94>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    58a4:	89 81       	ldd	r24, Y+1	; 0x01
    58a6:	9a 81       	ldd	r25, Y+2	; 0x02
    58a8:	21 e0       	ldi	r18, 0x01	; 1
    58aa:	fc 01       	movw	r30, r24
    58ac:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    58ae:	89 81       	ldd	r24, Y+1	; 0x01
    58b0:	9a 81       	ldd	r25, Y+2	; 0x02
    58b2:	fc 01       	movw	r30, r24
    58b4:	82 85       	ldd	r24, Z+10	; 0x0a
    58b6:	93 85       	ldd	r25, Z+11	; 0x0b
    58b8:	89 2b       	or	r24, r25
    58ba:	59 f0       	breq	.+22     	; 0x58d2 <window_task+0x88>
                {
                    window_ptr->cb(window_ptr->signal);
    58bc:	89 81       	ldd	r24, Y+1	; 0x01
    58be:	9a 81       	ldd	r25, Y+2	; 0x02
    58c0:	fc 01       	movw	r30, r24
    58c2:	22 85       	ldd	r18, Z+10	; 0x0a
    58c4:	33 85       	ldd	r19, Z+11	; 0x0b
    58c6:	89 81       	ldd	r24, Y+1	; 0x01
    58c8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ca:	fc 01       	movw	r30, r24
    58cc:	81 85       	ldd	r24, Z+9	; 0x09
    58ce:	f9 01       	movw	r30, r18
    58d0:	09 95       	icall
                }
                window_ptr->status = 1;
    58d2:	89 81       	ldd	r24, Y+1	; 0x01
    58d4:	9a 81       	ldd	r25, Y+2	; 0x02
    58d6:	21 e0       	ldi	r18, 0x01	; 1
    58d8:	fc 01       	movw	r30, r24
    58da:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    58dc:	8d c1       	rjmp	.+794    	; 0x5bf8 <window_task+0x3ae>
                }
                window_ptr->status = 1;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    58de:	89 81       	ldd	r24, Y+1	; 0x01
    58e0:	9a 81       	ldd	r25, Y+2	; 0x02
    58e2:	23 e0       	ldi	r18, 0x03	; 3
    58e4:	fc 01       	movw	r30, r24
    58e6:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	9a 81       	ldd	r25, Y+2	; 0x02
    58ec:	fc 01       	movw	r30, r24
    58ee:	82 85       	ldd	r24, Z+10	; 0x0a
    58f0:	93 85       	ldd	r25, Z+11	; 0x0b
    58f2:	89 2b       	or	r24, r25
    58f4:	09 f4       	brne	.+2      	; 0x58f8 <window_task+0xae>
    58f6:	80 c1       	rjmp	.+768    	; 0x5bf8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    58f8:	89 81       	ldd	r24, Y+1	; 0x01
    58fa:	9a 81       	ldd	r25, Y+2	; 0x02
    58fc:	fc 01       	movw	r30, r24
    58fe:	22 85       	ldd	r18, Z+10	; 0x0a
    5900:	33 85       	ldd	r19, Z+11	; 0x0b
    5902:	89 81       	ldd	r24, Y+1	; 0x01
    5904:	9a 81       	ldd	r25, Y+2	; 0x02
    5906:	fc 01       	movw	r30, r24
    5908:	81 85       	ldd	r24, Z+9	; 0x09
    590a:	f9 01       	movw	r30, r18
    590c:	09 95       	icall
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    590e:	74 c1       	rjmp	.+744    	; 0x5bf8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
        else if (window_ptr->btn_b_cap_trig_flg == 1)
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	9a 81       	ldd	r25, Y+2	; 0x02
    5914:	fc 01       	movw	r30, r24
    5916:	82 81       	ldd	r24, Z+2	; 0x02
    5918:	81 30       	cpi	r24, 0x01	; 1
    591a:	09 f0       	breq	.+2      	; 0x591e <window_task+0xd4>
    591c:	40 c0       	rjmp	.+128    	; 0x599e <window_task+0x154>
        {
            window_ptr->btn_b_cap_trig_flg = 0;
    591e:	89 81       	ldd	r24, Y+1	; 0x01
    5920:	9a 81       	ldd	r25, Y+2	; 0x02
    5922:	fc 01       	movw	r30, r24
    5924:	12 82       	std	Z+2, r1	; 0x02

            if (window_ptr->long_flg == 1)
    5926:	89 81       	ldd	r24, Y+1	; 0x01
    5928:	9a 81       	ldd	r25, Y+2	; 0x02
    592a:	fc 01       	movw	r30, r24
    592c:	81 81       	ldd	r24, Z+1	; 0x01
    592e:	81 30       	cpi	r24, 0x01	; 1
    5930:	e9 f4       	brne	.+58     	; 0x596c <window_task+0x122>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    5932:	89 81       	ldd	r24, Y+1	; 0x01
    5934:	9a 81       	ldd	r25, Y+2	; 0x02
    5936:	22 e0       	ldi	r18, 0x02	; 2
    5938:	fc 01       	movw	r30, r24
    593a:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    593c:	89 81       	ldd	r24, Y+1	; 0x01
    593e:	9a 81       	ldd	r25, Y+2	; 0x02
    5940:	fc 01       	movw	r30, r24
    5942:	82 85       	ldd	r24, Z+10	; 0x0a
    5944:	93 85       	ldd	r25, Z+11	; 0x0b
    5946:	89 2b       	or	r24, r25
    5948:	59 f0       	breq	.+22     	; 0x5960 <window_task+0x116>
                {
                    window_ptr->cb(window_ptr->signal);
    594a:	89 81       	ldd	r24, Y+1	; 0x01
    594c:	9a 81       	ldd	r25, Y+2	; 0x02
    594e:	fc 01       	movw	r30, r24
    5950:	22 85       	ldd	r18, Z+10	; 0x0a
    5952:	33 85       	ldd	r19, Z+11	; 0x0b
    5954:	89 81       	ldd	r24, Y+1	; 0x01
    5956:	9a 81       	ldd	r25, Y+2	; 0x02
    5958:	fc 01       	movw	r30, r24
    595a:	81 85       	ldd	r24, Z+9	; 0x09
    595c:	f9 01       	movw	r30, r18
    595e:	09 95       	icall
                }
                window_ptr->status = 1;
    5960:	89 81       	ldd	r24, Y+1	; 0x01
    5962:	9a 81       	ldd	r25, Y+2	; 0x02
    5964:	21 e0       	ldi	r18, 0x01	; 1
    5966:	fc 01       	movw	r30, r24
    5968:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    596a:	46 c1       	rjmp	.+652    	; 0x5bf8 <window_task+0x3ae>
                }
                window_ptr->status = 1;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    596c:	89 81       	ldd	r24, Y+1	; 0x01
    596e:	9a 81       	ldd	r25, Y+2	; 0x02
    5970:	24 e0       	ldi	r18, 0x04	; 4
    5972:	fc 01       	movw	r30, r24
    5974:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5976:	89 81       	ldd	r24, Y+1	; 0x01
    5978:	9a 81       	ldd	r25, Y+2	; 0x02
    597a:	fc 01       	movw	r30, r24
    597c:	82 85       	ldd	r24, Z+10	; 0x0a
    597e:	93 85       	ldd	r25, Z+11	; 0x0b
    5980:	89 2b       	or	r24, r25
    5982:	09 f4       	brne	.+2      	; 0x5986 <window_task+0x13c>
    5984:	39 c1       	rjmp	.+626    	; 0x5bf8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    5986:	89 81       	ldd	r24, Y+1	; 0x01
    5988:	9a 81       	ldd	r25, Y+2	; 0x02
    598a:	fc 01       	movw	r30, r24
    598c:	22 85       	ldd	r18, Z+10	; 0x0a
    598e:	33 85       	ldd	r19, Z+11	; 0x0b
    5990:	89 81       	ldd	r24, Y+1	; 0x01
    5992:	9a 81       	ldd	r25, Y+2	; 0x02
    5994:	fc 01       	movw	r30, r24
    5996:	81 85       	ldd	r24, Z+9	; 0x09
    5998:	f9 01       	movw	r30, r18
    599a:	09 95       	icall
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    599c:	2d c1       	rjmp	.+602    	; 0x5bf8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
        else if (window_ptr->slide_1_to_2_flg == 1)
    599e:	89 81       	ldd	r24, Y+1	; 0x01
    59a0:	9a 81       	ldd	r25, Y+2	; 0x02
    59a2:	fc 01       	movw	r30, r24
    59a4:	84 81       	ldd	r24, Z+4	; 0x04
    59a6:	81 30       	cpi	r24, 0x01	; 1
    59a8:	09 f0       	breq	.+2      	; 0x59ac <window_task+0x162>
    59aa:	40 c0       	rjmp	.+128    	; 0x5a2c <window_task+0x1e2>
        {
            window_ptr->slide_1_to_2_flg = 0;
    59ac:	89 81       	ldd	r24, Y+1	; 0x01
    59ae:	9a 81       	ldd	r25, Y+2	; 0x02
    59b0:	fc 01       	movw	r30, r24
    59b2:	14 82       	std	Z+4, r1	; 0x04
            if (window_ptr->long_flg == 1)
    59b4:	89 81       	ldd	r24, Y+1	; 0x01
    59b6:	9a 81       	ldd	r25, Y+2	; 0x02
    59b8:	fc 01       	movw	r30, r24
    59ba:	81 81       	ldd	r24, Z+1	; 0x01
    59bc:	81 30       	cpi	r24, 0x01	; 1
    59be:	e9 f4       	brne	.+58     	; 0x59fa <window_task+0x1b0>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_UP;
    59c0:	89 81       	ldd	r24, Y+1	; 0x01
    59c2:	9a 81       	ldd	r25, Y+2	; 0x02
    59c4:	21 e0       	ldi	r18, 0x01	; 1
    59c6:	fc 01       	movw	r30, r24
    59c8:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    59ca:	89 81       	ldd	r24, Y+1	; 0x01
    59cc:	9a 81       	ldd	r25, Y+2	; 0x02
    59ce:	fc 01       	movw	r30, r24
    59d0:	82 85       	ldd	r24, Z+10	; 0x0a
    59d2:	93 85       	ldd	r25, Z+11	; 0x0b
    59d4:	89 2b       	or	r24, r25
    59d6:	59 f0       	breq	.+22     	; 0x59ee <window_task+0x1a4>
                {
                    window_ptr->cb(window_ptr->signal);
    59d8:	89 81       	ldd	r24, Y+1	; 0x01
    59da:	9a 81       	ldd	r25, Y+2	; 0x02
    59dc:	fc 01       	movw	r30, r24
    59de:	22 85       	ldd	r18, Z+10	; 0x0a
    59e0:	33 85       	ldd	r19, Z+11	; 0x0b
    59e2:	89 81       	ldd	r24, Y+1	; 0x01
    59e4:	9a 81       	ldd	r25, Y+2	; 0x02
    59e6:	fc 01       	movw	r30, r24
    59e8:	81 85       	ldd	r24, Z+9	; 0x09
    59ea:	f9 01       	movw	r30, r18
    59ec:	09 95       	icall
                }
                window_ptr->status = 2;
    59ee:	89 81       	ldd	r24, Y+1	; 0x01
    59f0:	9a 81       	ldd	r25, Y+2	; 0x02
    59f2:	22 e0       	ldi	r18, 0x02	; 2
    59f4:	fc 01       	movw	r30, r24
    59f6:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    59f8:	ff c0       	rjmp	.+510    	; 0x5bf8 <window_task+0x3ae>
                }
                window_ptr->status = 2;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_UP;
    59fa:	89 81       	ldd	r24, Y+1	; 0x01
    59fc:	9a 81       	ldd	r25, Y+2	; 0x02
    59fe:	23 e0       	ldi	r18, 0x03	; 3
    5a00:	fc 01       	movw	r30, r24
    5a02:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5a04:	89 81       	ldd	r24, Y+1	; 0x01
    5a06:	9a 81       	ldd	r25, Y+2	; 0x02
    5a08:	fc 01       	movw	r30, r24
    5a0a:	82 85       	ldd	r24, Z+10	; 0x0a
    5a0c:	93 85       	ldd	r25, Z+11	; 0x0b
    5a0e:	89 2b       	or	r24, r25
    5a10:	09 f4       	brne	.+2      	; 0x5a14 <window_task+0x1ca>
    5a12:	f2 c0       	rjmp	.+484    	; 0x5bf8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    5a14:	89 81       	ldd	r24, Y+1	; 0x01
    5a16:	9a 81       	ldd	r25, Y+2	; 0x02
    5a18:	fc 01       	movw	r30, r24
    5a1a:	22 85       	ldd	r18, Z+10	; 0x0a
    5a1c:	33 85       	ldd	r19, Z+11	; 0x0b
    5a1e:	89 81       	ldd	r24, Y+1	; 0x01
    5a20:	9a 81       	ldd	r25, Y+2	; 0x02
    5a22:	fc 01       	movw	r30, r24
    5a24:	81 85       	ldd	r24, Z+9	; 0x09
    5a26:	f9 01       	movw	r30, r18
    5a28:	09 95       	icall
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5a2a:	e6 c0       	rjmp	.+460    	; 0x5bf8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
        else if (window_ptr->slide_2_to_1_flg == 1)
    5a2c:	89 81       	ldd	r24, Y+1	; 0x01
    5a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a30:	fc 01       	movw	r30, r24
    5a32:	85 81       	ldd	r24, Z+5	; 0x05
    5a34:	81 30       	cpi	r24, 0x01	; 1
    5a36:	09 f0       	breq	.+2      	; 0x5a3a <window_task+0x1f0>
    5a38:	df c0       	rjmp	.+446    	; 0x5bf8 <window_task+0x3ae>
        {
            window_ptr->slide_2_to_1_flg = 0;
    5a3a:	89 81       	ldd	r24, Y+1	; 0x01
    5a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a3e:	fc 01       	movw	r30, r24
    5a40:	15 82       	std	Z+5, r1	; 0x05
            if (window_ptr->long_flg == 1)
    5a42:	89 81       	ldd	r24, Y+1	; 0x01
    5a44:	9a 81       	ldd	r25, Y+2	; 0x02
    5a46:	fc 01       	movw	r30, r24
    5a48:	81 81       	ldd	r24, Z+1	; 0x01
    5a4a:	81 30       	cpi	r24, 0x01	; 1
    5a4c:	e9 f4       	brne	.+58     	; 0x5a88 <window_task+0x23e>
            {
                window_ptr->signal = SIGNAL_VAL_MANUAL_DOWN;
    5a4e:	89 81       	ldd	r24, Y+1	; 0x01
    5a50:	9a 81       	ldd	r25, Y+2	; 0x02
    5a52:	22 e0       	ldi	r18, 0x02	; 2
    5a54:	fc 01       	movw	r30, r24
    5a56:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5a58:	89 81       	ldd	r24, Y+1	; 0x01
    5a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	82 85       	ldd	r24, Z+10	; 0x0a
    5a60:	93 85       	ldd	r25, Z+11	; 0x0b
    5a62:	89 2b       	or	r24, r25
    5a64:	59 f0       	breq	.+22     	; 0x5a7c <window_task+0x232>
                {
                    window_ptr->cb(window_ptr->signal);
    5a66:	89 81       	ldd	r24, Y+1	; 0x01
    5a68:	9a 81       	ldd	r25, Y+2	; 0x02
    5a6a:	fc 01       	movw	r30, r24
    5a6c:	22 85       	ldd	r18, Z+10	; 0x0a
    5a6e:	33 85       	ldd	r19, Z+11	; 0x0b
    5a70:	89 81       	ldd	r24, Y+1	; 0x01
    5a72:	9a 81       	ldd	r25, Y+2	; 0x02
    5a74:	fc 01       	movw	r30, r24
    5a76:	81 85       	ldd	r24, Z+9	; 0x09
    5a78:	f9 01       	movw	r30, r18
    5a7a:	09 95       	icall
                }
                window_ptr->status = 2;
    5a7c:	89 81       	ldd	r24, Y+1	; 0x01
    5a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a80:	22 e0       	ldi	r18, 0x02	; 2
    5a82:	fc 01       	movw	r30, r24
    5a84:	20 83       	st	Z, r18
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5a86:	b8 c0       	rjmp	.+368    	; 0x5bf8 <window_task+0x3ae>
                }
                window_ptr->status = 2;
            }
            else
            {
                window_ptr->signal = SIGNAL_VAL_AUTO_DOWN;
    5a88:	89 81       	ldd	r24, Y+1	; 0x01
    5a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    5a8c:	24 e0       	ldi	r18, 0x04	; 4
    5a8e:	fc 01       	movw	r30, r24
    5a90:	21 87       	std	Z+9, r18	; 0x09
                if (window_ptr->cb != NULL)
    5a92:	89 81       	ldd	r24, Y+1	; 0x01
    5a94:	9a 81       	ldd	r25, Y+2	; 0x02
    5a96:	fc 01       	movw	r30, r24
    5a98:	82 85       	ldd	r24, Z+10	; 0x0a
    5a9a:	93 85       	ldd	r25, Z+11	; 0x0b
    5a9c:	89 2b       	or	r24, r25
    5a9e:	09 f4       	brne	.+2      	; 0x5aa2 <window_task+0x258>
    5aa0:	ab c0       	rjmp	.+342    	; 0x5bf8 <window_task+0x3ae>
                {
                    window_ptr->cb(window_ptr->signal);
    5aa2:	89 81       	ldd	r24, Y+1	; 0x01
    5aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    5aa6:	fc 01       	movw	r30, r24
    5aa8:	22 85       	ldd	r18, Z+10	; 0x0a
    5aaa:	33 85       	ldd	r19, Z+11	; 0x0b
    5aac:	89 81       	ldd	r24, Y+1	; 0x01
    5aae:	9a 81       	ldd	r25, Y+2	; 0x02
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	81 85       	ldd	r24, Z+9	; 0x09
    5ab4:	f9 01       	movw	r30, r18
    5ab6:	09 95       	icall
                }
            }
        }
    }
    break;
    5ab8:	9f c0       	rjmp	.+318    	; 0x5bf8 <window_task+0x3ae>
    case 1:
    {
        if (window_ptr->signal == SIGNAL_VAL_MANUAL_DOWN)
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	9a 81       	ldd	r25, Y+2	; 0x02
    5abe:	fc 01       	movw	r30, r24
    5ac0:	81 85       	ldd	r24, Z+9	; 0x09
    5ac2:	82 30       	cpi	r24, 0x02	; 2
    5ac4:	89 f5       	brne	.+98     	; 0x5b28 <window_task+0x2de>
        {
            if (window_ptr->btn_b_status != 0)
    5ac6:	89 81       	ldd	r24, Y+1	; 0x01
    5ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    5aca:	fc 01       	movw	r30, r24
    5acc:	87 81       	ldd	r24, Z+7	; 0x07
    5ace:	88 23       	and	r24, r24
    5ad0:	a1 f0       	breq	.+40     	; 0x5afa <window_task+0x2b0>
            {
                if (window_ptr->cb != NULL)
    5ad2:	89 81       	ldd	r24, Y+1	; 0x01
    5ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	82 85       	ldd	r24, Z+10	; 0x0a
    5ada:	93 85       	ldd	r25, Z+11	; 0x0b
    5adc:	89 2b       	or	r24, r25
    5ade:	09 f4       	brne	.+2      	; 0x5ae2 <window_task+0x298>
    5ae0:	8d c0       	rjmp	.+282    	; 0x5bfc <window_task+0x3b2>
                {
                    window_ptr->cb(window_ptr->signal);
    5ae2:	89 81       	ldd	r24, Y+1	; 0x01
    5ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ae6:	fc 01       	movw	r30, r24
    5ae8:	22 85       	ldd	r18, Z+10	; 0x0a
    5aea:	33 85       	ldd	r19, Z+11	; 0x0b
    5aec:	89 81       	ldd	r24, Y+1	; 0x01
    5aee:	9a 81       	ldd	r25, Y+2	; 0x02
    5af0:	fc 01       	movw	r30, r24
    5af2:	81 85       	ldd	r24, Z+9	; 0x09
    5af4:	f9 01       	movw	r30, r18
    5af6:	09 95       	icall
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5af8:	81 c0       	rjmp	.+258    	; 0x5bfc <window_task+0x3b2>
                    window_ptr->cb(window_ptr->signal);
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    5afa:	89 81       	ldd	r24, Y+1	; 0x01
    5afc:	9a 81       	ldd	r25, Y+2	; 0x02
    5afe:	fc 01       	movw	r30, r24
    5b00:	82 85       	ldd	r24, Z+10	; 0x0a
    5b02:	93 85       	ldd	r25, Z+11	; 0x0b
    5b04:	89 2b       	or	r24, r25
    5b06:	59 f0       	breq	.+22     	; 0x5b1e <window_task+0x2d4>
                {
                    window_ptr->cb(window_ptr->signal);
    5b08:	89 81       	ldd	r24, Y+1	; 0x01
    5b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	22 85       	ldd	r18, Z+10	; 0x0a
    5b10:	33 85       	ldd	r19, Z+11	; 0x0b
    5b12:	89 81       	ldd	r24, Y+1	; 0x01
    5b14:	9a 81       	ldd	r25, Y+2	; 0x02
    5b16:	fc 01       	movw	r30, r24
    5b18:	81 85       	ldd	r24, Z+9	; 0x09
    5b1a:	f9 01       	movw	r30, r18
    5b1c:	09 95       	icall
                }
                window_ptr->status = 0;
    5b1e:	89 81       	ldd	r24, Y+1	; 0x01
    5b20:	9a 81       	ldd	r25, Y+2	; 0x02
    5b22:	fc 01       	movw	r30, r24
    5b24:	10 82       	st	Z, r1
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5b26:	6a c0       	rjmp	.+212    	; 0x5bfc <window_task+0x3b2>
                    window_ptr->cb(window_ptr->signal);
                }
                window_ptr->status = 0;
            }
        }
        else if (window_ptr->signal == SIGNAL_VAL_MANUAL_UP)
    5b28:	89 81       	ldd	r24, Y+1	; 0x01
    5b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b2c:	fc 01       	movw	r30, r24
    5b2e:	81 85       	ldd	r24, Z+9	; 0x09
    5b30:	81 30       	cpi	r24, 0x01	; 1
    5b32:	09 f0       	breq	.+2      	; 0x5b36 <window_task+0x2ec>
    5b34:	63 c0       	rjmp	.+198    	; 0x5bfc <window_task+0x3b2>
        {
            if (window_ptr->btn_a_status != 0)
    5b36:	89 81       	ldd	r24, Y+1	; 0x01
    5b38:	9a 81       	ldd	r25, Y+2	; 0x02
    5b3a:	fc 01       	movw	r30, r24
    5b3c:	86 81       	ldd	r24, Z+6	; 0x06
    5b3e:	88 23       	and	r24, r24
    5b40:	a1 f0       	breq	.+40     	; 0x5b6a <window_task+0x320>
            {
                if (window_ptr->cb != NULL)
    5b42:	89 81       	ldd	r24, Y+1	; 0x01
    5b44:	9a 81       	ldd	r25, Y+2	; 0x02
    5b46:	fc 01       	movw	r30, r24
    5b48:	82 85       	ldd	r24, Z+10	; 0x0a
    5b4a:	93 85       	ldd	r25, Z+11	; 0x0b
    5b4c:	89 2b       	or	r24, r25
    5b4e:	09 f4       	brne	.+2      	; 0x5b52 <window_task+0x308>
    5b50:	55 c0       	rjmp	.+170    	; 0x5bfc <window_task+0x3b2>
                {
                    window_ptr->cb(window_ptr->signal);
    5b52:	89 81       	ldd	r24, Y+1	; 0x01
    5b54:	9a 81       	ldd	r25, Y+2	; 0x02
    5b56:	fc 01       	movw	r30, r24
    5b58:	22 85       	ldd	r18, Z+10	; 0x0a
    5b5a:	33 85       	ldd	r19, Z+11	; 0x0b
    5b5c:	89 81       	ldd	r24, Y+1	; 0x01
    5b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b60:	fc 01       	movw	r30, r24
    5b62:	81 85       	ldd	r24, Z+9	; 0x09
    5b64:	f9 01       	movw	r30, r18
    5b66:	09 95       	icall
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5b68:	49 c0       	rjmp	.+146    	; 0x5bfc <window_task+0x3b2>
                    window_ptr->cb(window_ptr->signal);
                }
            }
            else
            {
                if (window_ptr->cb != NULL)
    5b6a:	89 81       	ldd	r24, Y+1	; 0x01
    5b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b6e:	fc 01       	movw	r30, r24
    5b70:	82 85       	ldd	r24, Z+10	; 0x0a
    5b72:	93 85       	ldd	r25, Z+11	; 0x0b
    5b74:	89 2b       	or	r24, r25
    5b76:	59 f0       	breq	.+22     	; 0x5b8e <window_task+0x344>
                {
                    window_ptr->cb(window_ptr->signal);
    5b78:	89 81       	ldd	r24, Y+1	; 0x01
    5b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b7c:	fc 01       	movw	r30, r24
    5b7e:	22 85       	ldd	r18, Z+10	; 0x0a
    5b80:	33 85       	ldd	r19, Z+11	; 0x0b
    5b82:	89 81       	ldd	r24, Y+1	; 0x01
    5b84:	9a 81       	ldd	r25, Y+2	; 0x02
    5b86:	fc 01       	movw	r30, r24
    5b88:	81 85       	ldd	r24, Z+9	; 0x09
    5b8a:	f9 01       	movw	r30, r18
    5b8c:	09 95       	icall
                }
                window_ptr->status = 0;
    5b8e:	89 81       	ldd	r24, Y+1	; 0x01
    5b90:	9a 81       	ldd	r25, Y+2	; 0x02
    5b92:	fc 01       	movw	r30, r24
    5b94:	10 82       	st	Z, r1
            }
        }
    }
    break;
    5b96:	32 c0       	rjmp	.+100    	; 0x5bfc <window_task+0x3b2>
    case 2:
    {
        if (window_ptr->slide_status != 0)
    5b98:	89 81       	ldd	r24, Y+1	; 0x01
    5b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b9c:	fc 01       	movw	r30, r24
    5b9e:	80 85       	ldd	r24, Z+8	; 0x08
    5ba0:	88 23       	and	r24, r24
    5ba2:	99 f0       	breq	.+38     	; 0x5bca <window_task+0x380>
        {
            if (window_ptr->cb != NULL)
    5ba4:	89 81       	ldd	r24, Y+1	; 0x01
    5ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ba8:	fc 01       	movw	r30, r24
    5baa:	82 85       	ldd	r24, Z+10	; 0x0a
    5bac:	93 85       	ldd	r25, Z+11	; 0x0b
    5bae:	89 2b       	or	r24, r25
    5bb0:	39 f1       	breq	.+78     	; 0x5c00 <window_task+0x3b6>
            {
                window_ptr->cb(window_ptr->signal);
    5bb2:	89 81       	ldd	r24, Y+1	; 0x01
    5bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    5bb6:	fc 01       	movw	r30, r24
    5bb8:	22 85       	ldd	r18, Z+10	; 0x0a
    5bba:	33 85       	ldd	r19, Z+11	; 0x0b
    5bbc:	89 81       	ldd	r24, Y+1	; 0x01
    5bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    5bc0:	fc 01       	movw	r30, r24
    5bc2:	81 85       	ldd	r24, Z+9	; 0x09
    5bc4:	f9 01       	movw	r30, r18
    5bc6:	09 95       	icall
                window_ptr->cb(window_ptr->signal);
            }
            window_ptr->status = 0;
        }
    }
    break;
    5bc8:	1b c0       	rjmp	.+54     	; 0x5c00 <window_task+0x3b6>
                window_ptr->cb(window_ptr->signal);
            }
        }
        else
        {
            if (window_ptr->cb != NULL)
    5bca:	89 81       	ldd	r24, Y+1	; 0x01
    5bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    5bce:	fc 01       	movw	r30, r24
    5bd0:	82 85       	ldd	r24, Z+10	; 0x0a
    5bd2:	93 85       	ldd	r25, Z+11	; 0x0b
    5bd4:	89 2b       	or	r24, r25
    5bd6:	59 f0       	breq	.+22     	; 0x5bee <window_task+0x3a4>
            {
                window_ptr->cb(window_ptr->signal);
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
    5bda:	9a 81       	ldd	r25, Y+2	; 0x02
    5bdc:	fc 01       	movw	r30, r24
    5bde:	22 85       	ldd	r18, Z+10	; 0x0a
    5be0:	33 85       	ldd	r19, Z+11	; 0x0b
    5be2:	89 81       	ldd	r24, Y+1	; 0x01
    5be4:	9a 81       	ldd	r25, Y+2	; 0x02
    5be6:	fc 01       	movw	r30, r24
    5be8:	81 85       	ldd	r24, Z+9	; 0x09
    5bea:	f9 01       	movw	r30, r18
    5bec:	09 95       	icall
            }
            window_ptr->status = 0;
    5bee:	89 81       	ldd	r24, Y+1	; 0x01
    5bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    5bf2:	fc 01       	movw	r30, r24
    5bf4:	10 82       	st	Z, r1
        }
    }
    break;
    5bf6:	04 c0       	rjmp	.+8      	; 0x5c00 <window_task+0x3b6>
                    window_ptr->cb(window_ptr->signal);
                }
            }
        }
    }
    break;
    5bf8:	00 00       	nop
    5bfa:	03 c0       	rjmp	.+6      	; 0x5c02 <window_task+0x3b8>
                }
                window_ptr->status = 0;
            }
        }
    }
    break;
    5bfc:	00 00       	nop
    5bfe:	01 c0       	rjmp	.+2      	; 0x5c02 <window_task+0x3b8>
                window_ptr->cb(window_ptr->signal);
            }
            window_ptr->status = 0;
        }
    }
    break;
    5c00:	00 00       	nop
    default:
        break;
    }
}
    5c02:	00 00       	nop
    5c04:	0f 90       	pop	r0
    5c06:	0f 90       	pop	r0
    5c08:	df 91       	pop	r29
    5c0a:	cf 91       	pop	r28
    5c0c:	08 95       	ret

00005c0e <window_lock_task>:

/* V01-3.1.5.6 */
void window_lock_task(void)
{
    5c0e:	cf 93       	push	r28
    5c10:	df 93       	push	r29
    5c12:	00 d0       	rcall	.+0      	; 0x5c14 <window_lock_task+0x6>
    5c14:	00 d0       	rcall	.+0      	; 0x5c16 <window_lock_task+0x8>
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
    window_lock_t *window_lock_ptr = &g_window_lock;
    5c1a:	80 e7       	ldi	r24, 0x70	; 112
    5c1c:	90 e4       	ldi	r25, 0x40	; 64
    5c1e:	89 83       	std	Y+1, r24	; 0x01
    5c20:	9a 83       	std	Y+2, r25	; 0x02
    LIN_RX_signal_t *signal_ptr = &g_lin_rx_signal;
    5c22:	86 e7       	ldi	r24, 0x76	; 118
    5c24:	90 e4       	ldi	r25, 0x40	; 64
    5c26:	8b 83       	std	Y+3, r24	; 0x03
    5c28:	9c 83       	std	Y+4, r25	; 0x04

    if (window_lock_ptr->capsense_flg == 1)
    5c2a:	89 81       	ldd	r24, Y+1	; 0x01
    5c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c2e:	fc 01       	movw	r30, r24
    5c30:	80 81       	ld	r24, Z
    5c32:	81 30       	cpi	r24, 0x01	; 1
    5c34:	e1 f4       	brne	.+56     	; 0x5c6e <window_lock_task+0x60>
    {
        window_lock_ptr->capsense_flg = 0;
    5c36:	89 81       	ldd	r24, Y+1	; 0x01
    5c38:	9a 81       	ldd	r25, Y+2	; 0x02
    5c3a:	fc 01       	movw	r30, r24
    5c3c:	10 82       	st	Z, r1

        if (window_lock_ptr->press_flg == 1)
    5c3e:	89 81       	ldd	r24, Y+1	; 0x01
    5c40:	9a 81       	ldd	r25, Y+2	; 0x02
    5c42:	fc 01       	movw	r30, r24
    5c44:	81 81       	ldd	r24, Z+1	; 0x01
    5c46:	81 30       	cpi	r24, 0x01	; 1
    5c48:	91 f4       	brne	.+36     	; 0x5c6e <window_lock_task+0x60>
        {
            window_lock_ptr->press_flg = 0;
    5c4a:	89 81       	ldd	r24, Y+1	; 0x01
    5c4c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c4e:	fc 01       	movw	r30, r24
    5c50:	11 82       	std	Z+1, r1	; 0x01

            if (window_lock_ptr->signal_cb != NULL)
    5c52:	89 81       	ldd	r24, Y+1	; 0x01
    5c54:	9a 81       	ldd	r25, Y+2	; 0x02
    5c56:	fc 01       	movw	r30, r24
    5c58:	84 81       	ldd	r24, Z+4	; 0x04
    5c5a:	95 81       	ldd	r25, Z+5	; 0x05
    5c5c:	89 2b       	or	r24, r25
    5c5e:	39 f0       	breq	.+14     	; 0x5c6e <window_lock_task+0x60>
            {
                window_lock_ptr->signal_cb();
    5c60:	89 81       	ldd	r24, Y+1	; 0x01
    5c62:	9a 81       	ldd	r25, Y+2	; 0x02
    5c64:	fc 01       	movw	r30, r24
    5c66:	84 81       	ldd	r24, Z+4	; 0x04
    5c68:	95 81       	ldd	r25, Z+5	; 0x05
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	09 95       	icall
            }
        }
    }

    if (window_lock_ptr->led_cb != NULL)
    5c6e:	89 81       	ldd	r24, Y+1	; 0x01
    5c70:	9a 81       	ldd	r25, Y+2	; 0x02
    5c72:	fc 01       	movw	r30, r24
    5c74:	82 81       	ldd	r24, Z+2	; 0x02
    5c76:	93 81       	ldd	r25, Z+3	; 0x03
    5c78:	89 2b       	or	r24, r25
    5c7a:	69 f0       	breq	.+26     	; 0x5c96 <window_lock_task+0x88>
    {
        window_lock_ptr->led_cb(signal_ptr->ctrl_window_lock);
    5c7c:	89 81       	ldd	r24, Y+1	; 0x01
    5c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c80:	fc 01       	movw	r30, r24
    5c82:	22 81       	ldd	r18, Z+2	; 0x02
    5c84:	33 81       	ldd	r19, Z+3	; 0x03
    5c86:	8b 81       	ldd	r24, Y+3	; 0x03
    5c88:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	80 81       	ld	r24, Z
    5c8e:	82 95       	swap	r24
    5c90:	81 70       	andi	r24, 0x01	; 1
    5c92:	f9 01       	movw	r30, r18
    5c94:	09 95       	icall
    }
}
    5c96:	00 00       	nop
    5c98:	24 96       	adiw	r28, 0x04	; 4
    5c9a:	cd bf       	out	0x3d, r28	; 61
    5c9c:	de bf       	out	0x3e, r29	; 62
    5c9e:	df 91       	pop	r29
    5ca0:	cf 91       	pop	r28
    5ca2:	08 95       	ret

00005ca4 <backlight_task>:
 * 输入:LIN信号更新到变量
 * 输出:背光亮度控制回调函数
 * 
 */
void backlight_task(void)
{
    5ca4:	cf 93       	push	r28
    5ca6:	df 93       	push	r29
    5ca8:	cd b7       	in	r28, 0x3d	; 61
    5caa:	de b7       	in	r29, 0x3e	; 62
    5cac:	2e 97       	sbiw	r28, 0x0e	; 14
    5cae:	cd bf       	out	0x3d, r28	; 61
    5cb0:	de bf       	out	0x3e, r29	; 62
    LIN_RX_signal_t *signal_ptr = &g_lin_rx_signal;
    5cb2:	86 e7       	ldi	r24, 0x76	; 118
    5cb4:	90 e4       	ldi	r25, 0x40	; 64
    5cb6:	89 87       	std	Y+9, r24	; 0x09
    5cb8:	9a 87       	std	Y+10, r25	; 0x0a

    uint32_t tmp = 0;
    5cba:	1b 86       	std	Y+11, r1	; 0x0b
    5cbc:	1c 86       	std	Y+12, r1	; 0x0c
    5cbe:	1d 86       	std	Y+13, r1	; 0x0d
    5cc0:	1e 86       	std	Y+14, r1	; 0x0e
    uint32_t night_gain = 0;
    5cc2:	19 82       	std	Y+1, r1	; 0x01
    5cc4:	1a 82       	std	Y+2, r1	; 0x02
    5cc6:	1b 82       	std	Y+3, r1	; 0x03
    5cc8:	1c 82       	std	Y+4, r1	; 0x04
    uint32_t pwm_index = 0;
    5cca:	1d 82       	std	Y+5, r1	; 0x05
    5ccc:	1e 82       	std	Y+6, r1	; 0x06
    5cce:	1f 82       	std	Y+7, r1	; 0x07
    5cd0:	18 86       	std	Y+8, r1	; 0x08

    if (signal_ptr->backlight_status == SIGNAL_VAL_ACTIVE)
    5cd2:	89 85       	ldd	r24, Y+9	; 0x09
    5cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cd6:	fc 01       	movw	r30, r24
    5cd8:	80 81       	ld	r24, Z
    5cda:	80 72       	andi	r24, 0x20	; 32
    5cdc:	88 23       	and	r24, r24
    5cde:	b1 f0       	breq	.+44     	; 0x5d0c <backlight_task+0x68>
    {
        night_gain = BACKLIGHT_NIGHT_GAIN;
    5ce0:	82 e3       	ldi	r24, 0x32	; 50
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	a0 e0       	ldi	r26, 0x00	; 0
    5ce6:	b0 e0       	ldi	r27, 0x00	; 0
    5ce8:	89 83       	std	Y+1, r24	; 0x01
    5cea:	9a 83       	std	Y+2, r25	; 0x02
    5cec:	ab 83       	std	Y+3, r26	; 0x03
    5cee:	bc 83       	std	Y+4, r27	; 0x04
        pwm_index = signal_ptr->backlight_brightness;
    5cf0:	89 85       	ldd	r24, Y+9	; 0x09
    5cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf4:	fc 01       	movw	r30, r24
    5cf6:	80 81       	ld	r24, Z
    5cf8:	8f 70       	andi	r24, 0x0F	; 15
    5cfa:	88 2f       	mov	r24, r24
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	a0 e0       	ldi	r26, 0x00	; 0
    5d00:	b0 e0       	ldi	r27, 0x00	; 0
    5d02:	8d 83       	std	Y+5, r24	; 0x05
    5d04:	9e 83       	std	Y+6, r25	; 0x06
    5d06:	af 83       	std	Y+7, r26	; 0x07
    5d08:	b8 87       	std	Y+8, r27	; 0x08
    5d0a:	10 c0       	rjmp	.+32     	; 0x5d2c <backlight_task+0x88>
    }
    else
    {
        night_gain = BACKLIGHT_DAYTIME_GAIN;
    5d0c:	84 e6       	ldi	r24, 0x64	; 100
    5d0e:	90 e0       	ldi	r25, 0x00	; 0
    5d10:	a0 e0       	ldi	r26, 0x00	; 0
    5d12:	b0 e0       	ldi	r27, 0x00	; 0
    5d14:	89 83       	std	Y+1, r24	; 0x01
    5d16:	9a 83       	std	Y+2, r25	; 0x02
    5d18:	ab 83       	std	Y+3, r26	; 0x03
    5d1a:	bc 83       	std	Y+4, r27	; 0x04
        pwm_index = 9;
    5d1c:	89 e0       	ldi	r24, 0x09	; 9
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	a0 e0       	ldi	r26, 0x00	; 0
    5d22:	b0 e0       	ldi	r27, 0x00	; 0
    5d24:	8d 83       	std	Y+5, r24	; 0x05
    5d26:	9e 83       	std	Y+6, r25	; 0x06
    5d28:	af 83       	std	Y+7, r26	; 0x07
    5d2a:	b8 87       	std	Y+8, r27	; 0x08
    }

    tmp = g_level[pwm_index] * night_gain * DUTY_MAX / 10000;
    5d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d30:	88 0f       	add	r24, r24
    5d32:	99 1f       	adc	r25, r25
    5d34:	88 0f       	add	r24, r24
    5d36:	99 1f       	adc	r25, r25
    5d38:	8a 50       	subi	r24, 0x0A	; 10
    5d3a:	9e 4b       	sbci	r25, 0xBE	; 190
    5d3c:	fc 01       	movw	r30, r24
    5d3e:	20 81       	ld	r18, Z
    5d40:	31 81       	ldd	r19, Z+1	; 0x01
    5d42:	42 81       	ldd	r20, Z+2	; 0x02
    5d44:	53 81       	ldd	r21, Z+3	; 0x03
    5d46:	89 81       	ldd	r24, Y+1	; 0x01
    5d48:	9a 81       	ldd	r25, Y+2	; 0x02
    5d4a:	ab 81       	ldd	r26, Y+3	; 0x03
    5d4c:	bc 81       	ldd	r27, Y+4	; 0x04
    5d4e:	bc 01       	movw	r22, r24
    5d50:	cd 01       	movw	r24, r26
    5d52:	0e 94 a2 78 	call	0xf144	; 0xf144 <__mulsi3>
    5d56:	9b 01       	movw	r18, r22
    5d58:	ac 01       	movw	r20, r24
    5d5a:	8f ea       	ldi	r24, 0xAF	; 175
    5d5c:	94 e0       	ldi	r25, 0x04	; 4
    5d5e:	dc 01       	movw	r26, r24
    5d60:	0e 94 ec 78 	call	0xf1d8	; 0xf1d8 <__muluhisi3>
    5d64:	dc 01       	movw	r26, r24
    5d66:	cb 01       	movw	r24, r22
    5d68:	20 e1       	ldi	r18, 0x10	; 16
    5d6a:	37 e2       	ldi	r19, 0x27	; 39
    5d6c:	40 e0       	ldi	r20, 0x00	; 0
    5d6e:	50 e0       	ldi	r21, 0x00	; 0
    5d70:	bc 01       	movw	r22, r24
    5d72:	cd 01       	movw	r24, r26
    5d74:	0e 94 b2 78 	call	0xf164	; 0xf164 <__udivmodsi4>
    5d78:	da 01       	movw	r26, r20
    5d7a:	c9 01       	movw	r24, r18
    5d7c:	8b 87       	std	Y+11, r24	; 0x0b
    5d7e:	9c 87       	std	Y+12, r25	; 0x0c
    5d80:	ad 87       	std	Y+13, r26	; 0x0d
    5d82:	be 87       	std	Y+14, r27	; 0x0e

    if (g_backlight_cb != NULL)
    5d84:	80 91 77 40 	lds	r24, 0x4077	; 0x804077 <g_backlight_cb>
    5d88:	90 91 78 40 	lds	r25, 0x4078	; 0x804078 <g_backlight_cb+0x1>
    5d8c:	89 2b       	or	r24, r25
    5d8e:	61 f0       	breq	.+24     	; 0x5da8 <backlight_task+0x104>
    {
        g_backlight_cb(tmp);
    5d90:	20 91 77 40 	lds	r18, 0x4077	; 0x804077 <g_backlight_cb>
    5d94:	30 91 78 40 	lds	r19, 0x4078	; 0x804078 <g_backlight_cb+0x1>
    5d98:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d9c:	ad 85       	ldd	r26, Y+13	; 0x0d
    5d9e:	be 85       	ldd	r27, Y+14	; 0x0e
    5da0:	bc 01       	movw	r22, r24
    5da2:	cd 01       	movw	r24, r26
    5da4:	f9 01       	movw	r30, r18
    5da6:	09 95       	icall
    }
}
    5da8:	00 00       	nop
    5daa:	2e 96       	adiw	r28, 0x0e	; 14
    5dac:	cd bf       	out	0x3d, r28	; 61
    5dae:	de bf       	out	0x3e, r29	; 62
    5db0:	df 91       	pop	r29
    5db2:	cf 91       	pop	r28
    5db4:	08 95       	ret

00005db6 <lin_go_to_sleep>:

void lin_go_to_sleep(void)
{
    5db6:	cf 93       	push	r28
    5db8:	df 93       	push	r29
    5dba:	cd b7       	in	r28, 0x3d	; 61
    5dbc:	de b7       	in	r29, 0x3e	; 62
    /* 使能脚设置低电平 */
    LIN_EN_set_level(0);
    5dbe:	80 e0       	ldi	r24, 0x00	; 0
    5dc0:	0e 94 16 2c 	call	0x582c	; 0x582c <LIN_EN_set_level>

    /* 关闭usart模块 */
    Disable_global_interrupt();
    5dc4:	f8 94       	cli
    USART0.CTRLA &= ~(1 << USART_ABEIE_bp | 1 << USART_RXCIE_bp);
    5dc6:	80 e0       	ldi	r24, 0x00	; 0
    5dc8:	98 e0       	ldi	r25, 0x08	; 8
    5dca:	20 e0       	ldi	r18, 0x00	; 0
    5dcc:	38 e0       	ldi	r19, 0x08	; 8
    5dce:	f9 01       	movw	r30, r18
    5dd0:	25 81       	ldd	r18, Z+5	; 0x05
    5dd2:	2b 77       	andi	r18, 0x7B	; 123
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	25 83       	std	Z+5, r18	; 0x05
    USART0.CTRLB &= ~(1 << USART_TXEN_bp | USART_RXMODE_LINAUTO_gc | 1 << USART_RXEN_bp);
    5dd8:	80 e0       	ldi	r24, 0x00	; 0
    5dda:	98 e0       	ldi	r25, 0x08	; 8
    5ddc:	20 e0       	ldi	r18, 0x00	; 0
    5dde:	38 e0       	ldi	r19, 0x08	; 8
    5de0:	f9 01       	movw	r30, r18
    5de2:	26 81       	ldd	r18, Z+6	; 0x06
    5de4:	29 73       	andi	r18, 0x39	; 57
    5de6:	fc 01       	movw	r30, r24
    5de8:	26 83       	std	Z+6, r18	; 0x06

    /* LIN TX设置低电平 */
    PA0_set_dir(PORT_DIR_OUT);
    5dea:	81 e0       	ldi	r24, 0x01	; 1
    5dec:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <PA0_set_dir>
    PA0_set_level(
    5df0:	80 e0       	ldi	r24, 0x00	; 0
    5df2:	0e 94 07 2c 	call	0x580e	; 0x580e <PA0_set_level>
        // <y> Initial level
        // <id> pad_initial_level
        // <false"> Low
        // <true"> High
        false);
    5df6:	00 00       	nop
    5df8:	df 91       	pop	r29
    5dfa:	cf 91       	pop	r28
    5dfc:	08 95       	ret

00005dfe <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    5dfe:	cf 93       	push	r28
    5e00:	df 93       	push	r29
    5e02:	00 d0       	rcall	.+0      	; 0x5e04 <PORTC_set_pin_level+0x6>
    5e04:	cd b7       	in	r28, 0x3d	; 61
    5e06:	de b7       	in	r29, 0x3e	; 62
    5e08:	89 83       	std	Y+1, r24	; 0x01
    5e0a:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    5e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e0e:	88 23       	and	r24, r24
    5e10:	a9 f0       	breq	.+42     	; 0x5e3c <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    5e12:	88 e0       	ldi	r24, 0x08	; 8
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	28 e0       	ldi	r18, 0x08	; 8
    5e18:	30 e0       	ldi	r19, 0x00	; 0
    5e1a:	f9 01       	movw	r30, r18
    5e1c:	21 81       	ldd	r18, Z+1	; 0x01
    5e1e:	62 2f       	mov	r22, r18
    5e20:	29 81       	ldd	r18, Y+1	; 0x01
    5e22:	42 2f       	mov	r20, r18
    5e24:	50 e0       	ldi	r21, 0x00	; 0
    5e26:	21 e0       	ldi	r18, 0x01	; 1
    5e28:	30 e0       	ldi	r19, 0x00	; 0
    5e2a:	02 c0       	rjmp	.+4      	; 0x5e30 <PORTC_set_pin_level+0x32>
    5e2c:	22 0f       	add	r18, r18
    5e2e:	33 1f       	adc	r19, r19
    5e30:	4a 95       	dec	r20
    5e32:	e2 f7       	brpl	.-8      	; 0x5e2c <PORTC_set_pin_level+0x2e>
    5e34:	26 2b       	or	r18, r22
    5e36:	fc 01       	movw	r30, r24
    5e38:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    5e3a:	15 c0       	rjmp	.+42     	; 0x5e66 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    5e3c:	88 e0       	ldi	r24, 0x08	; 8
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	28 e0       	ldi	r18, 0x08	; 8
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	f9 01       	movw	r30, r18
    5e46:	21 81       	ldd	r18, Z+1	; 0x01
    5e48:	62 2f       	mov	r22, r18
    5e4a:	29 81       	ldd	r18, Y+1	; 0x01
    5e4c:	42 2f       	mov	r20, r18
    5e4e:	50 e0       	ldi	r21, 0x00	; 0
    5e50:	21 e0       	ldi	r18, 0x01	; 1
    5e52:	30 e0       	ldi	r19, 0x00	; 0
    5e54:	02 c0       	rjmp	.+4      	; 0x5e5a <PORTC_set_pin_level+0x5c>
    5e56:	22 0f       	add	r18, r18
    5e58:	33 1f       	adc	r19, r19
    5e5a:	4a 95       	dec	r20
    5e5c:	e2 f7       	brpl	.-8      	; 0x5e56 <PORTC_set_pin_level+0x58>
    5e5e:	20 95       	com	r18
    5e60:	26 23       	and	r18, r22
    5e62:	fc 01       	movw	r30, r24
    5e64:	21 83       	std	Z+1, r18	; 0x01
	}
}
    5e66:	00 00       	nop
    5e68:	0f 90       	pop	r0
    5e6a:	0f 90       	pop	r0
    5e6c:	df 91       	pop	r29
    5e6e:	cf 91       	pop	r28
    5e70:	08 95       	ret

00005e72 <LED_MCLK_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_MCLK_set_level(const bool level)
{
    5e72:	cf 93       	push	r28
    5e74:	df 93       	push	r29
    5e76:	1f 92       	push	r1
    5e78:	cd b7       	in	r28, 0x3d	; 61
    5e7a:	de b7       	in	r29, 0x3e	; 62
    5e7c:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(1, level);
    5e7e:	69 81       	ldd	r22, Y+1	; 0x01
    5e80:	81 e0       	ldi	r24, 0x01	; 1
    5e82:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <PORTC_set_pin_level>
}
    5e86:	00 00       	nop
    5e88:	0f 90       	pop	r0
    5e8a:	df 91       	pop	r29
    5e8c:	cf 91       	pop	r28
    5e8e:	08 95       	ret

00005e90 <LED_CS_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_CS_set_level(const bool level)
{
    5e90:	cf 93       	push	r28
    5e92:	df 93       	push	r29
    5e94:	1f 92       	push	r1
    5e96:	cd b7       	in	r28, 0x3d	; 61
    5e98:	de b7       	in	r29, 0x3e	; 62
    5e9a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(2, level);
    5e9c:	69 81       	ldd	r22, Y+1	; 0x01
    5e9e:	82 e0       	ldi	r24, 0x02	; 2
    5ea0:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <PORTC_set_pin_level>
}
    5ea4:	00 00       	nop
    5ea6:	0f 90       	pop	r0
    5ea8:	df 91       	pop	r29
    5eaa:	cf 91       	pop	r28
    5eac:	08 95       	ret

00005eae <LED_OUT_DAT_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_OUT_DAT_set_level(const bool level)
{
    5eae:	cf 93       	push	r28
    5eb0:	df 93       	push	r29
    5eb2:	1f 92       	push	r1
    5eb4:	cd b7       	in	r28, 0x3d	; 61
    5eb6:	de b7       	in	r29, 0x3e	; 62
    5eb8:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(3, level);
    5eba:	69 81       	ldd	r22, Y+1	; 0x01
    5ebc:	83 e0       	ldi	r24, 0x03	; 3
    5ebe:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <PORTC_set_pin_level>
}
    5ec2:	00 00       	nop
    5ec4:	0f 90       	pop	r0
    5ec6:	df 91       	pop	r29
    5ec8:	cf 91       	pop	r28
    5eca:	08 95       	ret

00005ecc <HC595_Write>:
#define HC595_STCP_RST LED_CS_set_level(false)
#define HC595_SHCP_SET LED_MCLK_set_level(true)
#define HC595_SHCP_RST LED_MCLK_set_level(false)

void HC595_Write(uint8_t *dataPtr, uint8_t icNum, uint8_t bitLen)
{
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	2a 97       	sbiw	r28, 0x0a	; 10
    5ed6:	cd bf       	out	0x3d, r28	; 61
    5ed8:	de bf       	out	0x3e, r29	; 62
    5eda:	8f 83       	std	Y+7, r24	; 0x07
    5edc:	98 87       	std	Y+8, r25	; 0x08
    5ede:	69 87       	std	Y+9, r22	; 0x09
    5ee0:	4a 87       	std	Y+10, r20	; 0x0a
    uint8_t _dataArr[HC595_NUM] = {0};
    5ee2:	1e 82       	std	Y+6, r1	; 0x06
    uint8_t arrIdx = 0;
    5ee4:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t bitIdx = 0;
    5ee6:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t bitVal = 0;
    5ee8:	1d 82       	std	Y+5, r1	; 0x05
    for (uint8_t i = 0; i < icNum; i++)
    5eea:	19 82       	std	Y+1, r1	; 0x01
    5eec:	21 c0       	rjmp	.+66     	; 0x5f30 <HC595_Write+0x64>
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    5eee:	89 81       	ldd	r24, Y+1	; 0x01
    5ef0:	88 2f       	mov	r24, r24
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	29 85       	ldd	r18, Y+9	; 0x09
    5ef6:	22 2f       	mov	r18, r18
    5ef8:	30 e0       	ldi	r19, 0x00	; 0
    5efa:	a9 01       	movw	r20, r18
    5efc:	41 50       	subi	r20, 0x01	; 1
    5efe:	51 09       	sbc	r21, r1
    5f00:	29 81       	ldd	r18, Y+1	; 0x01
    5f02:	22 2f       	mov	r18, r18
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	ba 01       	movw	r22, r20
    5f08:	62 1b       	sub	r22, r18
    5f0a:	73 0b       	sbc	r23, r19
    5f0c:	9b 01       	movw	r18, r22
    5f0e:	a9 01       	movw	r20, r18
    5f10:	2f 81       	ldd	r18, Y+7	; 0x07
    5f12:	38 85       	ldd	r19, Y+8	; 0x08
    5f14:	24 0f       	add	r18, r20
    5f16:	35 1f       	adc	r19, r21
    5f18:	f9 01       	movw	r30, r18
    5f1a:	40 81       	ld	r20, Z
    5f1c:	9e 01       	movw	r18, r28
    5f1e:	2a 5f       	subi	r18, 0xFA	; 250
    5f20:	3f 4f       	sbci	r19, 0xFF	; 255
    5f22:	82 0f       	add	r24, r18
    5f24:	93 1f       	adc	r25, r19
    5f26:	fc 01       	movw	r30, r24
    5f28:	40 83       	st	Z, r20
{
    uint8_t _dataArr[HC595_NUM] = {0};
    uint8_t arrIdx = 0;
    uint8_t bitIdx = 0;
    uint8_t bitVal = 0;
    for (uint8_t i = 0; i < icNum; i++)
    5f2a:	89 81       	ldd	r24, Y+1	; 0x01
    5f2c:	8f 5f       	subi	r24, 0xFF	; 255
    5f2e:	89 83       	std	Y+1, r24	; 0x01
    5f30:	99 81       	ldd	r25, Y+1	; 0x01
    5f32:	89 85       	ldd	r24, Y+9	; 0x09
    5f34:	98 17       	cp	r25, r24
    5f36:	d8 f2       	brcs	.-74     	; 0x5eee <HC595_Write+0x22>
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    }

    for (uint8_t i = 0; i < bitLen; i++)
    5f38:	1a 82       	std	Y+2, r1	; 0x02
    5f3a:	36 c0       	rjmp	.+108    	; 0x5fa8 <HC595_Write+0xdc>
    {
        arrIdx = i / 8;
    5f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f3e:	86 95       	lsr	r24
    5f40:	86 95       	lsr	r24
    5f42:	86 95       	lsr	r24
    5f44:	8b 83       	std	Y+3, r24	; 0x03
        bitIdx = i % 8;
    5f46:	8a 81       	ldd	r24, Y+2	; 0x02
    5f48:	87 70       	andi	r24, 0x07	; 7
    5f4a:	8c 83       	std	Y+4, r24	; 0x04
        bitVal = _dataArr[arrIdx] & (0x01 << (7 - bitIdx));
    5f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5f4e:	88 2f       	mov	r24, r24
    5f50:	90 e0       	ldi	r25, 0x00	; 0
    5f52:	9e 01       	movw	r18, r28
    5f54:	2a 5f       	subi	r18, 0xFA	; 250
    5f56:	3f 4f       	sbci	r19, 0xFF	; 255
    5f58:	82 0f       	add	r24, r18
    5f5a:	93 1f       	adc	r25, r19
    5f5c:	fc 01       	movw	r30, r24
    5f5e:	80 81       	ld	r24, Z
    5f60:	48 2f       	mov	r20, r24
    5f62:	8c 81       	ldd	r24, Y+4	; 0x04
    5f64:	88 2f       	mov	r24, r24
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	27 e0       	ldi	r18, 0x07	; 7
    5f6a:	30 e0       	ldi	r19, 0x00	; 0
    5f6c:	28 1b       	sub	r18, r24
    5f6e:	39 0b       	sbc	r19, r25
    5f70:	81 e0       	ldi	r24, 0x01	; 1
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	02 c0       	rjmp	.+4      	; 0x5f7a <HC595_Write+0xae>
    5f76:	88 0f       	add	r24, r24
    5f78:	99 1f       	adc	r25, r25
    5f7a:	2a 95       	dec	r18
    5f7c:	e2 f7       	brpl	.-8      	; 0x5f76 <HC595_Write+0xaa>
    5f7e:	84 23       	and	r24, r20
    5f80:	8d 83       	std	Y+5, r24	; 0x05

        if (bitVal != 0)
    5f82:	8d 81       	ldd	r24, Y+5	; 0x05
    5f84:	88 23       	and	r24, r24
    5f86:	21 f0       	breq	.+8      	; 0x5f90 <HC595_Write+0xc4>
        {
            HC595_DS_SET;
    5f88:	81 e0       	ldi	r24, 0x01	; 1
    5f8a:	0e 94 57 2f 	call	0x5eae	; 0x5eae <LED_OUT_DAT_set_level>
    5f8e:	03 c0       	rjmp	.+6      	; 0x5f96 <HC595_Write+0xca>
        }
        else
        {
            HC595_DS_RST;
    5f90:	80 e0       	ldi	r24, 0x00	; 0
    5f92:	0e 94 57 2f 	call	0x5eae	; 0x5eae <LED_OUT_DAT_set_level>
        }
        HC595_SHCP_RST;
    5f96:	80 e0       	ldi	r24, 0x00	; 0
    5f98:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <LED_MCLK_set_level>
        HC595_SHCP_SET;
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
    5f9e:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <LED_MCLK_set_level>
    for (uint8_t i = 0; i < icNum; i++)
    {
        _dataArr[i] = dataPtr[icNum - 1 - i];
    }

    for (uint8_t i = 0; i < bitLen; i++)
    5fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa4:	8f 5f       	subi	r24, 0xFF	; 255
    5fa6:	8a 83       	std	Y+2, r24	; 0x02
    5fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    5faa:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fac:	98 17       	cp	r25, r24
    5fae:	30 f2       	brcs	.-116    	; 0x5f3c <HC595_Write+0x70>
            HC595_DS_RST;
        }
        HC595_SHCP_RST;
        HC595_SHCP_SET;
    }
    HC595_STCP_RST;
    5fb0:	80 e0       	ldi	r24, 0x00	; 0
    5fb2:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <LED_CS_set_level>
    HC595_STCP_SET;
    5fb6:	81 e0       	ldi	r24, 0x01	; 1
    5fb8:	0e 94 48 2f 	call	0x5e90	; 0x5e90 <LED_CS_set_level>
}
    5fbc:	00 00       	nop
    5fbe:	2a 96       	adiw	r28, 0x0a	; 10
    5fc0:	cd bf       	out	0x3d, r28	; 61
    5fc2:	de bf       	out	0x3e, r29	; 62
    5fc4:	df 91       	pop	r29
    5fc6:	cf 91       	pop	r28
    5fc8:	08 95       	ret

00005fca <led_set_level>:
// 	{0, 6}, /* LED3 D8 */
// 	{0, 7}, /* LED6 D7  */
// };

void led_set_level(led_Dx_e Dx, uint8_t level)
{
    5fca:	cf 93       	push	r28
    5fcc:	df 93       	push	r29
    5fce:	00 d0       	rcall	.+0      	; 0x5fd0 <led_set_level+0x6>
    5fd0:	00 d0       	rcall	.+0      	; 0x5fd2 <led_set_level+0x8>
    5fd2:	cd b7       	in	r28, 0x3d	; 61
    5fd4:	de b7       	in	r29, 0x3e	; 62
    5fd6:	8b 83       	std	Y+3, r24	; 0x03
    5fd8:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t byte = 0;
    5fda:	19 82       	std	Y+1, r1	; 0x01
	uint8_t bit = 0;
    5fdc:	1a 82       	std	Y+2, r1	; 0x02
	byte = g_led_Dx[Dx].byte;
    5fde:	8b 81       	ldd	r24, Y+3	; 0x03
    5fe0:	88 2f       	mov	r24, r24
    5fe2:	90 e0       	ldi	r25, 0x00	; 0
    5fe4:	88 0f       	add	r24, r24
    5fe6:	99 1f       	adc	r25, r25
    5fe8:	82 5e       	subi	r24, 0xE2	; 226
    5fea:	9d 4b       	sbci	r25, 0xBD	; 189
    5fec:	fc 01       	movw	r30, r24
    5fee:	80 81       	ld	r24, Z
    5ff0:	89 83       	std	Y+1, r24	; 0x01
	bit = g_led_Dx[Dx].bit;
    5ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ff4:	88 2f       	mov	r24, r24
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	88 0f       	add	r24, r24
    5ffa:	99 1f       	adc	r25, r25
    5ffc:	81 5e       	subi	r24, 0xE1	; 225
    5ffe:	9d 4b       	sbci	r25, 0xBD	; 189
    6000:	fc 01       	movw	r30, r24
    6002:	80 81       	ld	r24, Z
    6004:	8a 83       	std	Y+2, r24	; 0x02
	if (level == 1)
    6006:	8c 81       	ldd	r24, Y+4	; 0x04
    6008:	81 30       	cpi	r24, 0x01	; 1
    600a:	01 f5       	brne	.+64     	; 0x604c <led_set_level+0x82>
	{
		bitSet(g_hc595_buffer[byte], bit);
    600c:	89 81       	ldd	r24, Y+1	; 0x01
    600e:	28 2f       	mov	r18, r24
    6010:	30 e0       	ldi	r19, 0x00	; 0
    6012:	89 81       	ldd	r24, Y+1	; 0x01
    6014:	88 2f       	mov	r24, r24
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	89 55       	subi	r24, 0x59	; 89
    601a:	9f 4b       	sbci	r25, 0xBF	; 191
    601c:	fc 01       	movw	r30, r24
    601e:	60 81       	ld	r22, Z
    6020:	8a 81       	ldd	r24, Y+2	; 0x02
    6022:	48 2f       	mov	r20, r24
    6024:	50 e0       	ldi	r21, 0x00	; 0
    6026:	81 e0       	ldi	r24, 0x01	; 1
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	a0 e0       	ldi	r26, 0x00	; 0
    602c:	b0 e0       	ldi	r27, 0x00	; 0
    602e:	04 c0       	rjmp	.+8      	; 0x6038 <led_set_level+0x6e>
    6030:	88 0f       	add	r24, r24
    6032:	99 1f       	adc	r25, r25
    6034:	aa 1f       	adc	r26, r26
    6036:	bb 1f       	adc	r27, r27
    6038:	4a 95       	dec	r20
    603a:	d2 f7       	brpl	.-12     	; 0x6030 <led_set_level+0x66>
    603c:	46 2f       	mov	r20, r22
    603e:	48 2b       	or	r20, r24
    6040:	c9 01       	movw	r24, r18
    6042:	89 55       	subi	r24, 0x59	; 89
    6044:	9f 4b       	sbci	r25, 0xBF	; 191
    6046:	fc 01       	movw	r30, r24
    6048:	40 83       	st	Z, r20
	}
	else
	{
		bitClear(g_hc595_buffer[byte], bit);
	}
}
    604a:	20 c0       	rjmp	.+64     	; 0x608c <led_set_level+0xc2>
	{
		bitSet(g_hc595_buffer[byte], bit);
	}
	else
	{
		bitClear(g_hc595_buffer[byte], bit);
    604c:	89 81       	ldd	r24, Y+1	; 0x01
    604e:	28 2f       	mov	r18, r24
    6050:	30 e0       	ldi	r19, 0x00	; 0
    6052:	89 81       	ldd	r24, Y+1	; 0x01
    6054:	88 2f       	mov	r24, r24
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	89 55       	subi	r24, 0x59	; 89
    605a:	9f 4b       	sbci	r25, 0xBF	; 191
    605c:	fc 01       	movw	r30, r24
    605e:	60 81       	ld	r22, Z
    6060:	8a 81       	ldd	r24, Y+2	; 0x02
    6062:	48 2f       	mov	r20, r24
    6064:	50 e0       	ldi	r21, 0x00	; 0
    6066:	81 e0       	ldi	r24, 0x01	; 1
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	a0 e0       	ldi	r26, 0x00	; 0
    606c:	b0 e0       	ldi	r27, 0x00	; 0
    606e:	04 c0       	rjmp	.+8      	; 0x6078 <led_set_level+0xae>
    6070:	88 0f       	add	r24, r24
    6072:	99 1f       	adc	r25, r25
    6074:	aa 1f       	adc	r26, r26
    6076:	bb 1f       	adc	r27, r27
    6078:	4a 95       	dec	r20
    607a:	d2 f7       	brpl	.-12     	; 0x6070 <led_set_level+0xa6>
    607c:	80 95       	com	r24
    607e:	46 2f       	mov	r20, r22
    6080:	48 23       	and	r20, r24
    6082:	c9 01       	movw	r24, r18
    6084:	89 55       	subi	r24, 0x59	; 89
    6086:	9f 4b       	sbci	r25, 0xBF	; 191
    6088:	fc 01       	movw	r30, r24
    608a:	40 83       	st	Z, r20
	}
}
    608c:	00 00       	nop
    608e:	24 96       	adiw	r28, 0x04	; 4
    6090:	cd bf       	out	0x3d, r28	; 61
    6092:	de bf       	out	0x3e, r29	; 62
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	08 95       	ret

0000609a <led_update_buf_task>:

void led_update_buf_task(void)
{
    609a:	cf 93       	push	r28
    609c:	df 93       	push	r29
    609e:	cd b7       	in	r28, 0x3d	; 61
    60a0:	de b7       	in	r29, 0x3e	; 62
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    60a2:	48 e0       	ldi	r20, 0x08	; 8
    60a4:	61 e0       	ldi	r22, 0x01	; 1
    60a6:	87 ea       	ldi	r24, 0xA7	; 167
    60a8:	90 e4       	ldi	r25, 0x40	; 64
    60aa:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <HC595_Write>
}
    60ae:	00 00       	nop
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <led_init>:

void led_init(void)
{
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
    60ba:	cd b7       	in	r28, 0x3d	; 61
    60bc:	de b7       	in	r29, 0x3e	; 62
	/* 亮度控制，目前20KHz，最大1199,默认%45亮度 */
	TCA0.SINGLE.CMP2 = 540;
    60be:	80 e0       	ldi	r24, 0x00	; 0
    60c0:	9a e0       	ldi	r25, 0x0A	; 10
    60c2:	2c e1       	ldi	r18, 0x1C	; 28
    60c4:	32 e0       	ldi	r19, 0x02	; 2
    60c6:	fc 01       	movw	r30, r24
    60c8:	24 a7       	std	Z+44, r18	; 0x2c
    60ca:	35 a7       	std	Z+45, r19	; 0x2d

	// LED_ON_N_set_level(0);
	led_set_level(led_d10, 0);
    60cc:	60 e0       	ldi	r22, 0x00	; 0
    60ce:	82 e0       	ldi	r24, 0x02	; 2
    60d0:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <led_set_level>
	// led_set_level(led_d8, 0);
	// led_set_level(led_d7, 0);
	// led_set_level(led_d5, 0);
	// led_set_level(led_d6, 0);
	// led_set_level(led_d4, 0);
	HC595_Write(g_hc595_buffer, HC595_NUM, HC595_OUT_PIN);
    60d4:	48 e0       	ldi	r20, 0x08	; 8
    60d6:	61 e0       	ldi	r22, 0x01	; 1
    60d8:	87 ea       	ldi	r24, 0xA7	; 167
    60da:	90 e4       	ldi	r25, 0x40	; 64
    60dc:	0e 94 66 2f 	call	0x5ecc	; 0x5ecc <HC595_Write>
    60e0:	00 00       	nop
    60e2:	df 91       	pop	r29
    60e4:	cf 91       	pop	r28
    60e6:	08 95       	ret

000060e8 <ccp_write_io>:
		led_set_level(led_d8, false);
		led_set_level(led_d7, false);
		led_set_level(led_d6, false);
		led_set_level(led_d5, false);
	}
}
    60e8:	cf 93       	push	r28
    60ea:	df 93       	push	r29
    60ec:	00 d0       	rcall	.+0      	; 0x60ee <ccp_write_io+0x6>
    60ee:	1f 92       	push	r1
    60f0:	cd b7       	in	r28, 0x3d	; 61
    60f2:	de b7       	in	r29, 0x3e	; 62
    60f4:	89 83       	std	Y+1, r24	; 0x01
    60f6:	9a 83       	std	Y+2, r25	; 0x02
    60f8:	6b 83       	std	Y+3, r22	; 0x03
    60fa:	89 81       	ldd	r24, Y+1	; 0x01
    60fc:	9a 81       	ldd	r25, Y+2	; 0x02
    60fe:	4b 81       	ldd	r20, Y+3	; 0x03
    6100:	68 ed       	ldi	r22, 0xD8	; 216
    6102:	0e 94 b8 69 	call	0xd370	; 0xd370 <protected_write_io>
    6106:	00 00       	nop
    6108:	23 96       	adiw	r28, 0x03	; 3
    610a:	cd bf       	out	0x3d, r28	; 61
    610c:	de bf       	out	0x3e, r29	; 62
    610e:	df 91       	pop	r29
    6110:	cf 91       	pop	r28
    6112:	08 95       	ret

00006114 <RSTCTRL_reset>:
    6114:	cf 93       	push	r28
    6116:	df 93       	push	r29
    6118:	cd b7       	in	r28, 0x3d	; 61
    611a:	de b7       	in	r29, 0x3e	; 62
    611c:	61 e0       	ldi	r22, 0x01	; 1
    611e:	81 e4       	ldi	r24, 0x41	; 65
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	0e 94 74 30 	call	0x60e8	; 0x60e8 <ccp_write_io>
    6126:	00 00       	nop
    6128:	df 91       	pop	r29
    612a:	cf 91       	pop	r28
    612c:	08 95       	ret

0000612e <main>:

int main(void)
{
    612e:	cf 93       	push	r28
    6130:	df 93       	push	r29
    6132:	cd b7       	in	r28, 0x3d	; 61
    6134:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    6136:	0e 94 8f 24 	call	0x491e	; 0x491e <atmel_start_init>
	Enable_global_interrupt();
    613a:	78 94       	sei

	// adc_init();
	led_init();
    613c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <led_init>
	/* 初始化电机:设置dac初始化电平，使能tpa驱动芯片 */
	// DAC_0_set_output(sin_data[0]);
	// MOTOR_GATE_set_level(true);

	/* led灯光更新任务 */
	soft_timer_create(100, led_update_buf_task);
    6140:	6d e4       	ldi	r22, 0x4D	; 77
    6142:	70 e3       	ldi	r23, 0x30	; 48
    6144:	84 e6       	ldi	r24, 0x64	; 100
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	0e 94 8b 63 	call	0xc716	; 0xc716 <soft_timer_create>
	// soft_timer_create(50, soft_timer_touch_led_task);

	// soft_timer_create(20, soft_timer_touch_press_motor_task);

	/* WINDOW LOCK按键软件定时器任务 */
	soft_timer_create(20, soft_timer_window_lock_task);
    614c:	67 e1       	ldi	r22, 0x17	; 23
    614e:	76 e2       	ldi	r23, 0x26	; 38
    6150:	84 e1       	ldi	r24, 0x14	; 20
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	0e 94 8b 63 	call	0xc716	; 0xc716 <soft_timer_create>

	/* WINDOW 提升软件定时器任务 */
	soft_timer_create(20, soft_timer_window_task);
    6158:	69 e1       	ldi	r22, 0x19	; 25
    615a:	79 e2       	ldi	r23, 0x29	; 41
    615c:	84 e1       	ldi	r24, 0x14	; 20
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	0e 94 8b 63 	call	0xc716	; 0xc716 <soft_timer_create>

	/* lin 接收信号变量更新任务 */
	soft_timer_create(10, soft_timer_lin_signal_update_task);
    6164:	67 e4       	ldi	r22, 0x47	; 71
    6166:	76 e2       	ldi	r23, 0x26	; 38
    6168:	8a e0       	ldi	r24, 0x0A	; 10
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	0e 94 8b 63 	call	0xc716	; 0xc716 <soft_timer_create>

	/* 背光亮度控制更新任务 */
	soft_timer_create(100, backlight_task);
    6170:	62 e5       	ldi	r22, 0x52	; 82
    6172:	7e e2       	ldi	r23, 0x2E	; 46
    6174:	84 e6       	ldi	r24, 0x64	; 100
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	0e 94 8b 63 	call	0xc716	; 0xc716 <soft_timer_create>

	l_sys_init();
    617c:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <l_sys_init>
	l_ifc_init(LI0);
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <l_ifc_init>
	ld_init(LI0);
    6186:	80 e0       	ldi	r24, 0x00	; 0
    6188:	0e 94 e1 4c 	call	0x99c2	; 0x99c2 <ld_init>

	FLASH_0_write_eeprom_byte(0x01, 0x60);
    618c:	60 e6       	ldi	r22, 0x60	; 96
    618e:	81 e0       	ldi	r24, 0x01	; 1
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	0e 94 8d 69 	call	0xd31a	; 0xd31a <FLASH_0_write_eeprom_byte>

	/* Replace with your application code */
	while (1)
	{
		soft_timer_run();
    6196:	0e 94 cf 63 	call	0xc79e	; 0xc79e <soft_timer_run>
		touch_process();
    619a:	0e 94 93 62 	call	0xc526	; 0xc526 <touch_process>
		if (eeprom_set_boot_flg == 1)
    619e:	80 91 07 43 	lds	r24, 0x4307	; 0x804307 <eeprom_set_boot_flg>
    61a2:	81 30       	cpi	r24, 0x01	; 1
    61a4:	c1 f7       	brne	.-16     	; 0x6196 <main+0x68>
		{
			eeprom_set_boot_flg = 0;
    61a6:	10 92 07 43 	sts	0x4307, r1	; 0x804307 <eeprom_set_boot_flg>
			FLASH_0_write_eeprom_byte(0x00, 0xaa);
    61aa:	6a ea       	ldi	r22, 0xAA	; 170
    61ac:	80 e0       	ldi	r24, 0x00	; 0
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	0e 94 8d 69 	call	0xd31a	; 0xd31a <FLASH_0_write_eeprom_byte>
			while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    61b4:	00 00       	nop
    61b6:	80 e0       	ldi	r24, 0x00	; 0
    61b8:	90 e1       	ldi	r25, 0x10	; 16
    61ba:	fc 01       	movw	r30, r24
    61bc:	82 81       	ldd	r24, Z+2	; 0x02
    61be:	88 2f       	mov	r24, r24
    61c0:	90 e0       	ldi	r25, 0x00	; 0
    61c2:	83 70       	andi	r24, 0x03	; 3
    61c4:	99 27       	eor	r25, r25
    61c6:	89 2b       	or	r24, r25
    61c8:	b1 f7       	brne	.-20     	; 0x61b6 <main+0x88>
				;
			RSTCTRL_reset();
    61ca:	0e 94 8a 30 	call	0x6114	; 0x6114 <RSTCTRL_reset>
		}
	}
    61ce:	e3 cf       	rjmp	.-58     	; 0x6196 <main+0x68>

000061d0 <l_sys_init>:
 * The implementation of this function can be replaced by user if needed.
 *
 * Implements    : l_sys_init_Activity
 *END**************************************************************************/
l_bool l_sys_init(void)
{
    61d0:	cf 93       	push	r28
    61d2:	df 93       	push	r29
    61d4:	cd b7       	in	r28, 0x3d	; 61
    61d6:	de b7       	in	r29, 0x3e	; 62
    return (l_bool)0;
    61d8:	80 e0       	ldi	r24, 0x00	; 0
}
    61da:	df 91       	pop	r29
    61dc:	cf 91       	pop	r28
    61de:	08 95       	ret

000061e0 <l_ifc_init>:
 * functions such as the baud rate
 *
 * Implements    : l_ifc_init_Activity
 *END**************************************************************************/
l_bool l_ifc_init(l_ifc_handle iii)
{
    61e0:	cf 93       	push	r28
    61e2:	df 93       	push	r29
    61e4:	00 d0       	rcall	.+0      	; 0x61e6 <l_ifc_init+0x6>
    61e6:	00 d0       	rcall	.+0      	; 0x61e8 <l_ifc_init+0x8>
    61e8:	cd b7       	in	r28, 0x3d	; 61
    61ea:	de b7       	in	r29, 0x3e	; 62
    61ec:	8c 83       	std	Y+4, r24	; 0x04
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    61ee:	8c 81       	ldd	r24, Y+4	; 0x04
    61f0:	28 2f       	mov	r18, r24
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	46 e1       	ldi	r20, 0x16	; 22
    61f6:	42 9f       	mul	r20, r18
    61f8:	c0 01       	movw	r24, r0
    61fa:	43 9f       	mul	r20, r19
    61fc:	90 0d       	add	r25, r0
    61fe:	11 24       	eor	r1, r1
    6200:	80 56       	subi	r24, 0x60	; 96
    6202:	99 4b       	sbci	r25, 0xB9	; 185
    6204:	89 83       	std	Y+1, r24	; 0x01
    6206:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    static l_u8 lin_schedule_start_entry[LIN_NUM_OF_SCHD_TBL];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    l_bool ret_val;
    prot_state_ptr->diagnostic_mode = DIAG_NONE;
    6208:	89 81       	ldd	r24, Y+1	; 0x01
    620a:	9a 81       	ldd	r25, Y+2	; 0x02
    620c:	fc 01       	movw	r30, r24
    620e:	10 8a       	std	Z+16, r1	; 0x10

    /* Call Low level initialization function */
    ret_val = lin_lld_init(iii);
    6210:	8c 81       	ldd	r24, Y+4	; 0x04
    6212:	0e 94 04 48 	call	0x9008	; 0x9008 <lin_lld_init>
    6216:	8b 83       	std	Y+3, r24	; 0x03
            master_data_ptr->schedule_start_entry_ptr[prot_user_config_ptr->schedule_start] = 0;
        }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }

    return ret_val;
    6218:	8b 81       	ldd	r24, Y+3	; 0x03
}
    621a:	24 96       	adiw	r28, 0x04	; 4
    621c:	cd bf       	out	0x3d, r28	; 61
    621e:	de bf       	out	0x3e, r29	; 62
    6220:	df 91       	pop	r29
    6222:	cf 91       	pop	r28
    6224:	08 95       	ret

00006226 <lin_pid_resp_callback_handler>:
 * Implements    : lin_pid_resp_callback_handler_Activity
 *END**************************************************************************/
void lin_pid_resp_callback_handler(l_ifc_handle iii,
                                   const lin_lld_event_id_t event_id,
                                   l_u8 id)
{
    6226:	cf 93       	push	r28
    6228:	df 93       	push	r29
    622a:	00 d0       	rcall	.+0      	; 0x622c <lin_pid_resp_callback_handler+0x6>
    622c:	1f 92       	push	r1
    622e:	cd b7       	in	r28, 0x3d	; 61
    6230:	de b7       	in	r29, 0x3e	; 62
    6232:	89 83       	std	Y+1, r24	; 0x01
    6234:	6a 83       	std	Y+2, r22	; 0x02
    6236:	4b 83       	std	Y+3, r20	; 0x03
    switch (event_id)
    6238:	8a 81       	ldd	r24, Y+2	; 0x02
    623a:	88 2f       	mov	r24, r24
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	82 30       	cpi	r24, 0x02	; 2
    6240:	91 05       	cpc	r25, r1
    6242:	c1 f0       	breq	.+48     	; 0x6274 <lin_pid_resp_callback_handler+0x4e>
    6244:	83 30       	cpi	r24, 0x03	; 3
    6246:	91 05       	cpc	r25, r1
    6248:	2c f4       	brge	.+10     	; 0x6254 <lin_pid_resp_callback_handler+0x2e>
    624a:	00 97       	sbiw	r24, 0x00	; 0
    624c:	49 f0       	breq	.+18     	; 0x6260 <lin_pid_resp_callback_handler+0x3a>
    624e:	01 97       	sbiw	r24, 0x01	; 1
    6250:	61 f0       	breq	.+24     	; 0x626a <lin_pid_resp_callback_handler+0x44>
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
            break;
        default:
            /* do nothing */
            break;
    6252:	1f c0       	rjmp	.+62     	; 0x6292 <lin_pid_resp_callback_handler+0x6c>
 *END**************************************************************************/
void lin_pid_resp_callback_handler(l_ifc_handle iii,
                                   const lin_lld_event_id_t event_id,
                                   l_u8 id)
{
    switch (event_id)
    6254:	88 30       	cpi	r24, 0x08	; 8
    6256:	91 05       	cpc	r25, r1
    6258:	b4 f0       	brlt	.+44     	; 0x6286 <lin_pid_resp_callback_handler+0x60>
    625a:	08 97       	sbiw	r24, 0x08	; 8
    625c:	81 f0       	breq	.+32     	; 0x627e <lin_pid_resp_callback_handler+0x58>
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
            break;
        default:
            /* do nothing */
            break;
    625e:	19 c0       	rjmp	.+50     	; 0x6292 <lin_pid_resp_callback_handler+0x6c>
                                   l_u8 id)
{
    switch (event_id)
    {
        case LIN_LLD_PID_OK:
            lin_process_id(iii, id);
    6260:	6b 81       	ldd	r22, Y+3	; 0x03
    6262:	89 81       	ldd	r24, Y+1	; 0x01
    6264:	0e 94 50 31 	call	0x62a0	; 0x62a0 <lin_process_id>
            break;
    6268:	14 c0       	rjmp	.+40     	; 0x6292 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_TX_COMPLETED:
            lin_update_tx(iii, id);
    626a:	6b 81       	ldd	r22, Y+3	; 0x03
    626c:	89 81       	ldd	r24, Y+1	; 0x01
    626e:	0e 94 b3 33 	call	0x6766	; 0x6766 <lin_update_tx>
            break;
    6272:	0f c0       	rjmp	.+30     	; 0x6292 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_RX_COMPLETED:
            lin_update_rx(iii, id);
    6274:	6b 81       	ldd	r22, Y+3	; 0x03
    6276:	89 81       	ldd	r24, Y+1	; 0x01
    6278:	0e 94 8d 32 	call	0x651a	; 0x651a <lin_update_rx>
            break;
    627c:	0a c0       	rjmp	.+20     	; 0x6292 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_BUS_ACTIVITY_TIMEOUT:
            lin_bus_activity_timeout(iii);
    627e:	89 81       	ldd	r24, Y+1	; 0x01
    6280:	0e 94 0b 35 	call	0x6a16	; 0x6a16 <lin_bus_activity_timeout>
            break;
    6284:	06 c0       	rjmp	.+12     	; 0x6292 <lin_pid_resp_callback_handler+0x6c>
        case LIN_LLD_PID_ERR:
        case LIN_LLD_FRAME_ERR:
        case LIN_LLD_CHECKSUM_ERR:
        case LIN_LLD_READBACK_ERR:
        case LIN_LLD_NODATA_TIMEOUT:
            lin_handle_error(iii, event_id, id);
    6286:	4b 81       	ldd	r20, Y+3	; 0x03
    6288:	6a 81       	ldd	r22, Y+2	; 0x02
    628a:	89 81       	ldd	r24, Y+1	; 0x01
    628c:	0e 94 60 34 	call	0x68c0	; 0x68c0 <lin_handle_error>
            break;
    6290:	00 00       	nop
        default:
            /* do nothing */
            break;
    }
}
    6292:	00 00       	nop
    6294:	23 96       	adiw	r28, 0x03	; 3
    6296:	cd bf       	out	0x3d, r28	; 61
    6298:	de bf       	out	0x3e, r29	; 62
    629a:	df 91       	pop	r29
    629c:	cf 91       	pop	r28
    629e:	08 95       	ret

000062a0 <lin_process_id>:
 *
 * Implements    : lin_process_id_Activity
 *END**************************************************************************/
static void lin_process_id(l_ifc_handle iii,
                           l_u8 id)
{
    62a0:	cf 93       	push	r28
    62a2:	df 93       	push	r29
    62a4:	cd b7       	in	r28, 0x3d	; 61
    62a6:	de b7       	in	r29, 0x3e	; 62
    62a8:	2f 97       	sbiw	r28, 0x0f	; 15
    62aa:	cd bf       	out	0x3d, r28	; 61
    62ac:	de bf       	out	0x3e, r29	; 62
    62ae:	8e 87       	std	Y+14, r24	; 0x0e
    62b0:	6f 87       	std	Y+15, r22	; 0x0f
    l_u8 action = 0U;
    62b2:	19 82       	std	Y+1, r1	; 0x01
    l_u16 flag_offset;
    l_u8 flag_size;
    l_u8 i;
#endif /* ((1U == SUPPORT_SLAVE_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))) */

    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];                              //获取用户协议配置信息
    62b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    62b6:	28 2f       	mov	r18, r24
    62b8:	30 e0       	ldi	r19, 0x00	; 0
    62ba:	4c e1       	ldi	r20, 0x1C	; 28
    62bc:	42 9f       	mul	r20, r18
    62be:	c0 01       	movw	r24, r0
    62c0:	43 9f       	mul	r20, r19
    62c2:	90 0d       	add	r25, r0
    62c4:	11 24       	eor	r1, r1
    62c6:	86 56       	subi	r24, 0x66	; 102
    62c8:	9d 4b       	sbci	r25, 0xBD	; 189
    62ca:	8d 83       	std	Y+5, r24	; 0x05
    62cc:	9e 83       	std	Y+6, r25	; 0x06
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];                                                   //获取协议
    62ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    62d0:	28 2f       	mov	r18, r24
    62d2:	30 e0       	ldi	r19, 0x00	; 0
    62d4:	46 e1       	ldi	r20, 0x16	; 22
    62d6:	42 9f       	mul	r20, r18
    62d8:	c0 01       	movw	r24, r0
    62da:	43 9f       	mul	r20, r19
    62dc:	90 0d       	add	r25, r0
    62de:	11 24       	eor	r1, r1
    62e0:	80 56       	subi	r24, 0x60	; 96
    62e2:	99 4b       	sbci	r25, 0xB9	; 185
    62e4:	8f 83       	std	Y+7, r24	; 0x07
    62e6:	98 87       	std	Y+8, r25	; 0x08

    frame_index = lin_get_frame_index(iii, id);                                             //判断id在调度表中的位置  如果不存在返回0xFF
    62e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    62ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    62ec:	0e 94 00 36 	call	0x6c00	; 0x6c00 <lin_get_frame_index>
    62f0:	89 87       	std	Y+9, r24	; 0x09
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frame_index]);
    62f2:	8d 81       	ldd	r24, Y+5	; 0x05
    62f4:	9e 81       	ldd	r25, Y+6	; 0x06
    62f6:	fc 01       	movw	r30, r24
    62f8:	26 81       	ldd	r18, Z+6	; 0x06
    62fa:	37 81       	ldd	r19, Z+7	; 0x07
    62fc:	89 85       	ldd	r24, Y+9	; 0x09
    62fe:	88 2f       	mov	r24, r24
    6300:	90 e0       	ldi	r25, 0x00	; 0
    6302:	88 0f       	add	r24, r24
    6304:	99 1f       	adc	r25, r25
    6306:	ac 01       	movw	r20, r24
    6308:	44 0f       	add	r20, r20
    630a:	55 1f       	adc	r21, r21
    630c:	44 0f       	add	r20, r20
    630e:	55 1f       	adc	r21, r21
    6310:	84 0f       	add	r24, r20
    6312:	95 1f       	adc	r25, r21
    6314:	82 0f       	add	r24, r18
    6316:	93 1f       	adc	r25, r19
    6318:	8a 87       	std	Y+10, r24	; 0x0a
    631a:	9b 87       	std	Y+11, r25	; 0x0b
    if (0xFFU != frame_index)
    631c:	89 85       	ldd	r24, Y+9	; 0x09
    631e:	8f 3f       	cpi	r24, 0xFF	; 255
    6320:	09 f4       	brne	.+2      	; 0x6324 <lin_process_id+0x84>
    6322:	d5 c0       	rjmp	.+426    	; 0x64ce <lin_process_id+0x22e>
    {
        action = 1U;
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	89 83       	std	Y+1, r24	; 0x01
        prot_state_ptr->last_pid = lin_process_parity(id,MAKE_PARITY);                      //判断pid校验是否正确
    6328:	60 e0       	ldi	r22, 0x00	; 0
    632a:	8f 85       	ldd	r24, Y+15	; 0x0f
    632c:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <lin_process_parity>
    6330:	28 2f       	mov	r18, r24
    6332:	8f 81       	ldd	r24, Y+7	; 0x07
    6334:	98 85       	ldd	r25, Y+8	; 0x08
    6336:	fc 01       	movw	r30, r24
    6338:	21 87       	std	Z+9, r18	; 0x09
        /* PID belongs to this node, then check type of frame */
        switch (lin_frame_ptr->frm_type)                                                
    633a:	8a 85       	ldd	r24, Y+10	; 0x0a
    633c:	9b 85       	ldd	r25, Y+11	; 0x0b
    633e:	fc 01       	movw	r30, r24
    6340:	80 81       	ld	r24, Z
    6342:	88 2f       	mov	r24, r24
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	81 30       	cpi	r24, 0x01	; 1
    6348:	91 05       	cpc	r25, r1
    634a:	b1 f0       	breq	.+44     	; 0x6378 <lin_process_id+0xd8>
    634c:	81 31       	cpi	r24, 0x11	; 17
    634e:	91 05       	cpc	r25, r1
    6350:	09 f4       	brne	.+2      	; 0x6354 <lin_process_id+0xb4>
    6352:	8a c0       	rjmp	.+276    	; 0x6468 <lin_process_id+0x1c8>
    6354:	89 2b       	or	r24, r25
    6356:	09 f0       	breq	.+2      	; 0x635a <lin_process_id+0xba>
                }

                break;
            default:
                /* do nothing */
                break;
    6358:	ba c0       	rjmp	.+372    	; 0x64ce <lin_process_id+0x22e>
        /* PID belongs to this node, then check type of frame */
        switch (lin_frame_ptr->frm_type)                                                
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    635a:	8a 85       	ldd	r24, Y+10	; 0x0a
    635c:	9b 85       	ldd	r25, Y+11	; 0x0b
    635e:	fc 01       	movw	r30, r24
    6360:	82 81       	ldd	r24, Z+2	; 0x02
    6362:	88 23       	and	r24, r24
    6364:	09 f0       	breq	.+2      	; 0x6368 <lin_process_id+0xc8>
    6366:	b0 c0       	rjmp	.+352    	; 0x64c8 <lin_process_id+0x228>
                {
                    lin_process_uncd_frame(iii, id, MAKE_UNCONDITIONAL_FRAME);
    6368:	40 e0       	ldi	r20, 0x00	; 0
    636a:	6f 85       	ldd	r22, Y+15	; 0x0f
    636c:	8e 85       	ldd	r24, Y+14	; 0x0e
    636e:	0e 94 43 36 	call	0x6c86	; 0x6c86 <lin_process_uncd_frame>
                    /* Set response */
                    action = 2U;
    6372:	82 e0       	ldi	r24, 0x02	; 2
    6374:	89 83       	std	Y+1, r24	; 0x01
                }
                break;
    6376:	a8 c0       	rjmp	.+336    	; 0x64c8 <lin_process_id+0x228>
            #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13))
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    6378:	8d 81       	ldd	r24, Y+5	; 0x05
    637a:	9e 81       	ldd	r25, Y+6	; 0x06
    637c:	fc 01       	movw	r30, r24
    637e:	83 81       	ldd	r24, Z+3	; 0x03
    6380:	88 23       	and	r24, r24
    6382:	19 f0       	breq	.+6      	; 0x638a <lin_process_id+0xea>
                {
                    /* Rx response */
                    action = 1U;
    6384:	81 e0       	ldi	r24, 0x01	; 1
    6386:	89 83       	std	Y+1, r24	; 0x01
                            break;
                        }
                    }
                }
            #endif /* (1U == SUPPORT_SLAVE_MODE) */
                break;
    6388:	a2 c0       	rjmp	.+324    	; 0x64ce <lin_process_id+0x22e>
                }
            #if (1U == SUPPORT_SLAVE_MODE)
                else
                {
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    638a:	8a 85       	ldd	r24, Y+10	; 0x0a
    638c:	9b 85       	ldd	r25, Y+11	; 0x0b
    638e:	fc 01       	movw	r30, r24
    6390:	80 85       	ldd	r24, Z+8	; 0x08
    6392:	91 85       	ldd	r25, Z+9	; 0x09
    6394:	fc 01       	movw	r30, r24
    6396:	81 81       	ldd	r24, Z+1	; 0x01
    6398:	92 81       	ldd	r25, Z+2	; 0x02
    639a:	fc 01       	movw	r30, r24
    639c:	80 81       	ld	r24, Z
    639e:	8d 87       	std	Y+13, r24	; 0x0d
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
    63a0:	8d 81       	ldd	r24, Y+5	; 0x05
    63a2:	9e 81       	ldd	r25, Y+6	; 0x06
    63a4:	fc 01       	movw	r30, r24
    63a6:	26 81       	ldd	r18, Z+6	; 0x06
    63a8:	37 81       	ldd	r19, Z+7	; 0x07
    63aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    63ac:	88 2f       	mov	r24, r24
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	88 0f       	add	r24, r24
    63b2:	99 1f       	adc	r25, r25
    63b4:	ac 01       	movw	r20, r24
    63b6:	44 0f       	add	r20, r20
    63b8:	55 1f       	adc	r21, r21
    63ba:	44 0f       	add	r20, r20
    63bc:	55 1f       	adc	r21, r21
    63be:	84 0f       	add	r24, r20
    63c0:	95 1f       	adc	r25, r21
    63c2:	82 0f       	add	r24, r18
    63c4:	93 1f       	adc	r25, r19
    63c6:	fc 01       	movw	r30, r24
    63c8:	85 81       	ldd	r24, Z+5	; 0x05
    63ca:	96 81       	ldd	r25, Z+6	; 0x06
    63cc:	8a 83       	std	Y+2, r24	; 0x02
    63ce:	9b 83       	std	Y+3, r25	; 0x03
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
    63d0:	8d 81       	ldd	r24, Y+5	; 0x05
    63d2:	9e 81       	ldd	r25, Y+6	; 0x06
    63d4:	fc 01       	movw	r30, r24
    63d6:	26 81       	ldd	r18, Z+6	; 0x06
    63d8:	37 81       	ldd	r19, Z+7	; 0x07
    63da:	8d 85       	ldd	r24, Y+13	; 0x0d
    63dc:	88 2f       	mov	r24, r24
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	88 0f       	add	r24, r24
    63e2:	99 1f       	adc	r25, r25
    63e4:	ac 01       	movw	r20, r24
    63e6:	44 0f       	add	r20, r20
    63e8:	55 1f       	adc	r21, r21
    63ea:	44 0f       	add	r20, r20
    63ec:	55 1f       	adc	r21, r21
    63ee:	84 0f       	add	r24, r20
    63f0:	95 1f       	adc	r25, r21
    63f2:	82 0f       	add	r24, r18
    63f4:	93 1f       	adc	r25, r19
    63f6:	fc 01       	movw	r30, r24
    63f8:	87 81       	ldd	r24, Z+7	; 0x07
    63fa:	8c 87       	std	Y+12, r24	; 0x0c
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    63fc:	1c 82       	std	Y+4, r1	; 0x04
    63fe:	2f c0       	rjmp	.+94     	; 0x645e <lin_process_id+0x1be>
                    {
                        if (g_lin_flag_handle_tbl[flag_offset++] != 0xFFU)
    6400:	8a 81       	ldd	r24, Y+2	; 0x02
    6402:	9b 81       	ldd	r25, Y+3	; 0x03
    6404:	9c 01       	movw	r18, r24
    6406:	2f 5f       	subi	r18, 0xFF	; 255
    6408:	3f 4f       	sbci	r19, 0xFF	; 255
    640a:	2a 83       	std	Y+2, r18	; 0x02
    640c:	3b 83       	std	Y+3, r19	; 0x03
    640e:	8c 5d       	subi	r24, 0xDC	; 220
    6410:	99 4b       	sbci	r25, 0xB9	; 185
    6412:	fc 01       	movw	r30, r24
    6414:	80 81       	ld	r24, Z
    6416:	8f 3f       	cpi	r24, 0xFF	; 255
    6418:	f9 f0       	breq	.+62     	; 0x6458 <lin_process_id+0x1b8>
                        {
                            /* Frame is updated */
                            lin_make_res_evnt_frame(iii, prot_user_config_ptr->list_identifiers_RAM_ptr[1U + associate_frame - prot_user_config_ptr->frame_start]);
    641a:	8d 81       	ldd	r24, Y+5	; 0x05
    641c:	9e 81       	ldd	r25, Y+6	; 0x06
    641e:	fc 01       	movw	r30, r24
    6420:	22 85       	ldd	r18, Z+10	; 0x0a
    6422:	33 85       	ldd	r19, Z+11	; 0x0b
    6424:	8d 85       	ldd	r24, Y+13	; 0x0d
    6426:	48 2f       	mov	r20, r24
    6428:	50 e0       	ldi	r21, 0x00	; 0
    642a:	8d 81       	ldd	r24, Y+5	; 0x05
    642c:	9e 81       	ldd	r25, Y+6	; 0x06
    642e:	fc 01       	movw	r30, r24
    6430:	85 81       	ldd	r24, Z+5	; 0x05
    6432:	88 2f       	mov	r24, r24
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	ba 01       	movw	r22, r20
    6438:	68 1b       	sub	r22, r24
    643a:	79 0b       	sbc	r23, r25
    643c:	cb 01       	movw	r24, r22
    643e:	01 96       	adiw	r24, 0x01	; 1
    6440:	82 0f       	add	r24, r18
    6442:	93 1f       	adc	r25, r19
    6444:	fc 01       	movw	r30, r24
    6446:	80 81       	ld	r24, Z
    6448:	68 2f       	mov	r22, r24
    644a:	8e 85       	ldd	r24, Y+14	; 0x0e
    644c:	0e 94 c7 39 	call	0x738e	; 0x738e <lin_make_res_evnt_frame>
                            /* Set response */
                            action = 2U;
    6450:	82 e0       	ldi	r24, 0x02	; 2
    6452:	89 83       	std	Y+1, r24	; 0x01
                            break;
    6454:	00 00       	nop
                        }
                    }
                }
            #endif /* (1U == SUPPORT_SLAVE_MODE) */
                break;
    6456:	3b c0       	rjmp	.+118    	; 0x64ce <lin_process_id+0x22e>
                    /* For each slave node, get the only one associated unconditional frame */
                    associate_frame = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
                    flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_offset;
                    flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame].flag_size;
                    /* Update transmit flags */
                    for (i = 0U; i < flag_size; i++)
    6458:	8c 81       	ldd	r24, Y+4	; 0x04
    645a:	8f 5f       	subi	r24, 0xFF	; 255
    645c:	8c 83       	std	Y+4, r24	; 0x04
    645e:	9c 81       	ldd	r25, Y+4	; 0x04
    6460:	8c 85       	ldd	r24, Y+12	; 0x0c
    6462:	98 17       	cp	r25, r24
    6464:	68 f2       	brcs	.-102    	; 0x6400 <lin_process_id+0x160>
                            break;
                        }
                    }
                }
            #endif /* (1U == SUPPORT_SLAVE_MODE) */
                break;
    6466:	33 c0       	rjmp	.+102    	; 0x64ce <lin_process_id+0x22e>
            #endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_13)) */

            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                if(LIN_PROTOCOL_13 != prot_user_config_ptr->protocol_version)
    6468:	8d 81       	ldd	r24, Y+5	; 0x05
    646a:	9e 81       	ldd	r25, Y+6	; 0x06
    646c:	fc 01       	movw	r30, r24
    646e:	80 81       	ld	r24, Z
    6470:	82 30       	cpi	r24, 0x02	; 2
    6472:	41 f1       	breq	.+80     	; 0x64c4 <lin_process_id+0x224>
                {
                    if (LIN_RES_PUB == lin_frame_ptr->frm_response)
    6474:	8a 85       	ldd	r24, Y+10	; 0x0a
    6476:	9b 85       	ldd	r25, Y+11	; 0x0b
    6478:	fc 01       	movw	r30, r24
    647a:	82 81       	ldd	r24, Z+2	; 0x02
    647c:	88 23       	and	r24, r24
    647e:	d1 f4       	brne	.+52     	; 0x64b4 <lin_process_id+0x214>
                    {
                        action = 2U;
    6480:	82 e0       	ldi	r24, 0x02	; 2
    6482:	89 83       	std	Y+1, r24	; 0x01
                        if (0x3CU == id)
    6484:	8f 85       	ldd	r24, Y+15	; 0x0f
    6486:	8c 33       	cpi	r24, 0x3C	; 60
    6488:	61 f4       	brne	.+24     	; 0x64a2 <lin_process_id+0x202>
                        {
                            if (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)
    648a:	8f 81       	ldd	r24, Y+7	; 0x07
    648c:	98 85       	ldd	r25, Y+8	; 0x08
    648e:	fc 01       	movw	r30, r24
    6490:	80 89       	ldd	r24, Z+16	; 0x10
    6492:	81 30       	cpi	r24, 0x01	; 1
    6494:	d9 f4       	brne	.+54     	; 0x64cc <lin_process_id+0x22c>
                            {
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
    6496:	4f 85       	ldd	r20, Y+15	; 0x0f
    6498:	60 e0       	ldi	r22, 0x00	; 0
    649a:	8e 85       	ldd	r24, Y+14	; 0x0e
    649c:	0e 94 c3 4e 	call	0x9d86	; 0x9d86 <lin_tl_callback_handler>
                else
                {
                    action = 0U;
                }

                break;
    64a0:	15 c0       	rjmp	.+42     	; 0x64cc <lin_process_id+0x22c>
                                (void)LIN_TL_CALLBACK_HANDLER(iii, TL_MAKE_RES_DATA, id);
                            }
                        }
                        else
                        {
                            if (LIN_TL_CALLBACK_HANDLER(iii, TL_SLAVE_GET_ACTION, id) == TL_ACTION_ID_IGNORE)
    64a2:	4f 85       	ldd	r20, Y+15	; 0x0f
    64a4:	61 e0       	ldi	r22, 0x01	; 1
    64a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    64a8:	0e 94 c3 4e 	call	0x9d86	; 0x9d86 <lin_tl_callback_handler>
    64ac:	81 30       	cpi	r24, 0x01	; 1
    64ae:	71 f4       	brne	.+28     	; 0x64cc <lin_process_id+0x22c>
                            {
                                action = 0U;
    64b0:	19 82       	std	Y+1, r1	; 0x01
                else
                {
                    action = 0U;
                }

                break;
    64b2:	0c c0       	rjmp	.+24     	; 0x64cc <lin_process_id+0x22c>
                            }
                        }
                    }
                    else
                    {
                        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RECEIVE_MESSAGE, id);
    64b4:	4f 85       	ldd	r20, Y+15	; 0x0f
    64b6:	67 e0       	ldi	r22, 0x07	; 7
    64b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    64ba:	0e 94 c3 4e 	call	0x9d86	; 0x9d86 <lin_tl_callback_handler>
                        /* Rx response */
                        action = 1U;
    64be:	81 e0       	ldi	r24, 0x01	; 1
    64c0:	89 83       	std	Y+1, r24	; 0x01
                else
                {
                    action = 0U;
                }

                break;
    64c2:	04 c0       	rjmp	.+8      	; 0x64cc <lin_process_id+0x22c>
                        action = 1U;
                    }
                }
                else
                {
                    action = 0U;
    64c4:	19 82       	std	Y+1, r1	; 0x01
                }

                break;
    64c6:	02 c0       	rjmp	.+4      	; 0x64cc <lin_process_id+0x22c>
                {
                    lin_process_uncd_frame(iii, id, MAKE_UNCONDITIONAL_FRAME);
                    /* Set response */
                    action = 2U;
                }
                break;
    64c8:	00 00       	nop
    64ca:	01 c0       	rjmp	.+2      	; 0x64ce <lin_process_id+0x22e>
                else
                {
                    action = 0U;
                }

                break;
    64cc:	00 00       	nop
                /* do nothing */
                break;
        }
    }

    switch (action)
    64ce:	89 81       	ldd	r24, Y+1	; 0x01
    64d0:	88 2f       	mov	r24, r24
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	81 30       	cpi	r24, 0x01	; 1
    64d6:	91 05       	cpc	r25, r1
    64d8:	19 f0       	breq	.+6      	; 0x64e0 <lin_process_id+0x240>
    64da:	02 97       	sbiw	r24, 0x02	; 2
    64dc:	51 f0       	breq	.+20     	; 0x64f2 <lin_process_id+0x252>
    64de:	12 c0       	rjmp	.+36     	; 0x6504 <lin_process_id+0x264>
    {
        case 1U:
            /* Receive response */
            (void)lin_lld_rx_response(iii, lin_frame_ptr->frm_len);
    64e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    64e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    64e4:	fc 01       	movw	r30, r24
    64e6:	81 81       	ldd	r24, Z+1	; 0x01
    64e8:	68 2f       	mov	r22, r24
    64ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    64ec:	0e 94 2e 4a 	call	0x945c	; 0x945c <lin_lld_rx_response>
            break;
    64f0:	0d c0       	rjmp	.+26     	; 0x650c <lin_process_id+0x26c>
        case 2U:
            /* Set response */
            (void)lin_lld_set_response(iii, lin_frame_ptr->frm_len);
    64f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    64f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    64f6:	fc 01       	movw	r30, r24
    64f8:	81 81       	ldd	r24, Z+1	; 0x01
    64fa:	68 2f       	mov	r22, r24
    64fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    64fe:	0e 94 ae 49 	call	0x935c	; 0x935c <lin_lld_set_response>
            break;
    6502:	04 c0       	rjmp	.+8      	; 0x650c <lin_process_id+0x26c>
        default:
            /* ignore response */
            (void)lin_lld_ignore_response(iii);
    6504:	8e 85       	ldd	r24, Y+14	; 0x0e
    6506:	0e 94 44 49 	call	0x9288	; 0x9288 <lin_lld_ignore_response>
            break;
    650a:	00 00       	nop
    }
}
    650c:	00 00       	nop
    650e:	2f 96       	adiw	r28, 0x0f	; 15
    6510:	cd bf       	out	0x3d, r28	; 61
    6512:	de bf       	out	0x3e, r29	; 62
    6514:	df 91       	pop	r29
    6516:	cf 91       	pop	r28
    6518:	08 95       	ret

0000651a <lin_update_rx>:
 *
 * Implements    : lin_update_rx_Activity
 *END**************************************************************************/
static void lin_update_rx(l_ifc_handle iii,
                          l_u8 id)
{
    651a:	cf 93       	push	r28
    651c:	df 93       	push	r29
    651e:	cd b7       	in	r28, 0x3d	; 61
    6520:	de b7       	in	r29, 0x3e	; 62
    6522:	2c 97       	sbiw	r28, 0x0c	; 12
    6524:	cd bf       	out	0x3d, r28	; 61
    6526:	de bf       	out	0x3e, r29	; 62
    6528:	8b 87       	std	Y+11, r24	; 0x0b
    652a:	6c 87       	std	Y+12, r22	; 0x0c
    l_u8 frame_index, flag_size, i, associate_id;
    l_u16 flag_offset;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    652c:	8b 85       	ldd	r24, Y+11	; 0x0b
    652e:	28 2f       	mov	r18, r24
    6530:	30 e0       	ldi	r19, 0x00	; 0
    6532:	4c e1       	ldi	r20, 0x1C	; 28
    6534:	42 9f       	mul	r20, r18
    6536:	c0 01       	movw	r24, r0
    6538:	43 9f       	mul	r20, r19
    653a:	90 0d       	add	r25, r0
    653c:	11 24       	eor	r1, r1
    653e:	86 56       	subi	r24, 0x66	; 102
    6540:	9d 4b       	sbci	r25, 0xBD	; 189
    6542:	8d 83       	std	Y+5, r24	; 0x05
    6544:	9e 83       	std	Y+6, r25	; 0x06
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6546:	8b 85       	ldd	r24, Y+11	; 0x0b
    6548:	28 2f       	mov	r18, r24
    654a:	30 e0       	ldi	r19, 0x00	; 0
    654c:	46 e1       	ldi	r20, 0x16	; 22
    654e:	42 9f       	mul	r20, r18
    6550:	c0 01       	movw	r24, r0
    6552:	43 9f       	mul	r20, r19
    6554:	90 0d       	add	r25, r0
    6556:	11 24       	eor	r1, r1
    6558:	80 56       	subi	r24, 0x60	; 96
    655a:	99 4b       	sbci	r25, 0xB9	; 185
    655c:	8f 83       	std	Y+7, r24	; 0x07
    655e:	98 87       	std	Y+8, r25	; 0x08
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    6560:	8f 81       	ldd	r24, Y+7	; 0x07
    6562:	98 85       	ldd	r25, Y+8	; 0x08
    6564:	21 e0       	ldi	r18, 0x01	; 1
    6566:	fc 01       	movw	r30, r24
    6568:	25 83       	std	Z+5, r18	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    656a:	8f 81       	ldd	r24, Y+7	; 0x07
    656c:	98 85       	ldd	r25, Y+8	; 0x08
    656e:	fc 01       	movw	r30, r24
    6570:	82 85       	ldd	r24, Z+10	; 0x0a
    6572:	8f 3f       	cpi	r24, 0xFF	; 255
    6574:	51 f0       	breq	.+20     	; 0x658a <lin_update_rx+0x70>
    {
        prot_state_ptr->num_of_processed_frame++; 
    6576:	8f 81       	ldd	r24, Y+7	; 0x07
    6578:	98 85       	ldd	r25, Y+8	; 0x08
    657a:	fc 01       	movw	r30, r24
    657c:	82 85       	ldd	r24, Z+10	; 0x0a
    657e:	21 e0       	ldi	r18, 0x01	; 1
    6580:	28 0f       	add	r18, r24
    6582:	8f 81       	ldd	r24, Y+7	; 0x07
    6584:	98 85       	ldd	r25, Y+8	; 0x08
    6586:	fc 01       	movw	r30, r24
    6588:	22 87       	std	Z+10, r18	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    658a:	8f 81       	ldd	r24, Y+7	; 0x07
    658c:	98 85       	ldd	r25, Y+8	; 0x08
    658e:	fc 01       	movw	r30, r24
    6590:	82 85       	ldd	r24, Z+10	; 0x0a
    6592:	82 30       	cpi	r24, 0x02	; 2
    6594:	58 f0       	brcs	.+22     	; 0x65ac <lin_update_rx+0x92>
    6596:	8f 81       	ldd	r24, Y+7	; 0x07
    6598:	98 85       	ldd	r25, Y+8	; 0x08
    659a:	fc 01       	movw	r30, r24
    659c:	83 85       	ldd	r24, Z+11	; 0x0b
    659e:	88 23       	and	r24, r24
    65a0:	29 f4       	brne	.+10     	; 0x65ac <lin_update_rx+0x92>
    {
        prot_state_ptr->overrun_flg = 1U;
    65a2:	8f 81       	ldd	r24, Y+7	; 0x07
    65a4:	98 85       	ldd	r25, Y+8	; 0x08
    65a6:	21 e0       	ldi	r18, 0x01	; 1
    65a8:	fc 01       	movw	r30, r24
    65aa:	23 87       	std	Z+11, r18	; 0x0b
    }

    frame_index = lin_get_frame_index(iii, id);
    65ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    65ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    65b0:	0e 94 00 36 	call	0x6c00	; 0x6c00 <lin_get_frame_index>
    65b4:	89 83       	std	Y+1, r24	; 0x01
    if (frame_index < LIN_NUM_OF_FRMS)
    65b6:	89 81       	ldd	r24, Y+1	; 0x01
    65b8:	84 30       	cpi	r24, 0x04	; 4
    65ba:	08 f0       	brcs	.+2      	; 0x65be <lin_update_rx+0xa4>
    65bc:	cd c0       	rjmp	.+410    	; 0x6758 <lin_update_rx+0x23e>
    {
        /* This PID doesn't belong to this node */
        /* PID belongs to this node, then check type of frame */
        switch (prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    65be:	8d 81       	ldd	r24, Y+5	; 0x05
    65c0:	9e 81       	ldd	r25, Y+6	; 0x06
    65c2:	fc 01       	movw	r30, r24
    65c4:	26 81       	ldd	r18, Z+6	; 0x06
    65c6:	37 81       	ldd	r19, Z+7	; 0x07
    65c8:	89 81       	ldd	r24, Y+1	; 0x01
    65ca:	88 2f       	mov	r24, r24
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	88 0f       	add	r24, r24
    65d0:	99 1f       	adc	r25, r25
    65d2:	ac 01       	movw	r20, r24
    65d4:	44 0f       	add	r20, r20
    65d6:	55 1f       	adc	r21, r21
    65d8:	44 0f       	add	r20, r20
    65da:	55 1f       	adc	r21, r21
    65dc:	84 0f       	add	r24, r20
    65de:	95 1f       	adc	r25, r21
    65e0:	82 0f       	add	r24, r18
    65e2:	93 1f       	adc	r25, r19
    65e4:	fc 01       	movw	r30, r24
    65e6:	80 81       	ld	r24, Z
    65e8:	88 2f       	mov	r24, r24
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	81 30       	cpi	r24, 0x01	; 1
    65ee:	91 05       	cpc	r25, r1
    65f0:	61 f0       	breq	.+24     	; 0x660a <lin_update_rx+0xf0>
    65f2:	81 31       	cpi	r24, 0x11	; 17
    65f4:	91 05       	cpc	r25, r1
    65f6:	f1 f0       	breq	.+60     	; 0x6634 <lin_update_rx+0x11a>
    65f8:	89 2b       	or	r24, r25
    65fa:	09 f0       	breq	.+2      	; 0x65fe <lin_update_rx+0xe4>
                }

                break;
            default:
                /* do nothing */
                break;
    65fc:	33 c0       	rjmp	.+102    	; 0x6664 <lin_update_rx+0x14a>
        /* PID belongs to this node, then check type of frame */
        switch (prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
        {
            /* Unconditional frame */
            case LIN_FRM_UNCD:
                lin_process_uncd_frame(iii, id, UPDATE_UNCONDITIONAL_FRAME);
    65fe:	41 e0       	ldi	r20, 0x01	; 1
    6600:	6c 85       	ldd	r22, Y+12	; 0x0c
    6602:	8b 85       	ldd	r24, Y+11	; 0x0b
    6604:	0e 94 43 36 	call	0x6c86	; 0x6c86 <lin_process_uncd_frame>
                break;
    6608:	2d c0       	rjmp	.+90     	; 0x6664 <lin_update_rx+0x14a>
            /* Event trigger frame */
            case LIN_FRM_EVNT:
                lin_update_rx_evnt_frame(iii, id);
    660a:	6c 85       	ldd	r22, Y+12	; 0x0c
    660c:	8b 85       	ldd	r24, Y+11	; 0x0b
    660e:	0e 94 3d 39 	call	0x727a	; 0x727a <lin_update_rx_evnt_frame>
                /* Recalculate frame_index by updating associate PID */
                associate_id = lin_process_parity(prot_state_ptr->response_buffer_ptr[0], CHECK_PARITY);
    6612:	8f 81       	ldd	r24, Y+7	; 0x07
    6614:	98 85       	ldd	r25, Y+8	; 0x08
    6616:	fc 01       	movw	r30, r24
    6618:	82 81       	ldd	r24, Z+2	; 0x02
    661a:	93 81       	ldd	r25, Z+3	; 0x03
    661c:	fc 01       	movw	r30, r24
    661e:	80 81       	ld	r24, Z
    6620:	61 e0       	ldi	r22, 0x01	; 1
    6622:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <lin_process_parity>
    6626:	89 87       	std	Y+9, r24	; 0x09
                frame_index = lin_get_frame_index(iii, associate_id);
    6628:	69 85       	ldd	r22, Y+9	; 0x09
    662a:	8b 85       	ldd	r24, Y+11	; 0x0b
    662c:	0e 94 00 36 	call	0x6c00	; 0x6c00 <lin_get_frame_index>
    6630:	89 83       	std	Y+1, r24	; 0x01
                break;
    6632:	18 c0       	rjmp	.+48     	; 0x6664 <lin_update_rx+0x14a>
            /* Diagnostic frame */
            case LIN_FRM_DIAG:
                /* If goto sleep signal */
                if (0U == prot_state_ptr->response_buffer_ptr[0])
    6634:	8f 81       	ldd	r24, Y+7	; 0x07
    6636:	98 85       	ldd	r25, Y+8	; 0x08
    6638:	fc 01       	movw	r30, r24
    663a:	82 81       	ldd	r24, Z+2	; 0x02
    663c:	93 81       	ldd	r25, Z+3	; 0x03
    663e:	fc 01       	movw	r30, r24
    6640:	80 81       	ld	r24, Z
    6642:	88 23       	and	r24, r24
    6644:	49 f4       	brne	.+18     	; 0x6658 <lin_update_rx+0x13e>
                {
                    /* In a slave node, set go to sleep flag in state structure */
                    prot_state_ptr->go_to_sleep_flg = true;
    6646:	8f 81       	ldd	r24, Y+7	; 0x07
    6648:	98 85       	ldd	r25, Y+8	; 0x08
    664a:	21 e0       	ldi	r18, 0x01	; 1
    664c:	fc 01       	movw	r30, r24
    664e:	27 83       	std	Z+7, r18	; 0x07
                    (void)lin_lld_set_low_power_mode(iii);
    6650:	8b 85       	ldd	r24, Y+11	; 0x0b
    6652:	0e 94 79 49 	call	0x92f2	; 0x92f2 <lin_lld_set_low_power_mode>
                {
                    /* Call transport layer callback to process TL_RX_COMPLETED event*/
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RX_COMPLETED, id);
                }

                break;
    6656:	05 c0       	rjmp	.+10     	; 0x6662 <lin_update_rx+0x148>
                    (void)lin_lld_set_low_power_mode(iii);
                }
                else
                {
                    /* Call transport layer callback to process TL_RX_COMPLETED event*/
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_RX_COMPLETED, id);
    6658:	4c 85       	ldd	r20, Y+12	; 0x0c
    665a:	63 e0       	ldi	r22, 0x03	; 3
    665c:	8b 85       	ldd	r24, Y+11	; 0x0b
    665e:	0e 94 c3 4e 	call	0x9d86	; 0x9d86 <lin_tl_callback_handler>
                }

                break;
    6662:	00 00       	nop
            default:
                /* do nothing */
                break;
        }

        if (frame_index < LIN_NUM_OF_FRMS)
    6664:	89 81       	ldd	r24, Y+1	; 0x01
    6666:	84 30       	cpi	r24, 0x04	; 4
    6668:	08 f0       	brcs	.+2      	; 0x666c <lin_update_rx+0x152>
    666a:	54 c0       	rjmp	.+168    	; 0x6714 <lin_update_rx+0x1fa>
        {
            /* Update rx frame flag */
            g_lin_frame_flag_handle_tbl[frame_index] = true;
    666c:	89 81       	ldd	r24, Y+1	; 0x01
    666e:	88 2f       	mov	r24, r24
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	89 5d       	subi	r24, 0xD9	; 217
    6674:	99 4b       	sbci	r25, 0xB9	; 185
    6676:	21 e0       	ldi	r18, 0x01	; 1
    6678:	fc 01       	movw	r30, r24
    667a:	20 83       	st	Z, r18

            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    667c:	8d 81       	ldd	r24, Y+5	; 0x05
    667e:	9e 81       	ldd	r25, Y+6	; 0x06
    6680:	fc 01       	movw	r30, r24
    6682:	93 81       	ldd	r25, Z+3	; 0x03
    6684:	81 e0       	ldi	r24, 0x01	; 1
    6686:	89 27       	eor	r24, r25
    6688:	88 23       	and	r24, r24
    668a:	09 f4       	brne	.+2      	; 0x668e <lin_update_rx+0x174>
    668c:	43 c0       	rjmp	.+134    	; 0x6714 <lin_update_rx+0x1fa>
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
    668e:	8d 81       	ldd	r24, Y+5	; 0x05
    6690:	9e 81       	ldd	r25, Y+6	; 0x06
    6692:	fc 01       	movw	r30, r24
    6694:	26 81       	ldd	r18, Z+6	; 0x06
    6696:	37 81       	ldd	r19, Z+7	; 0x07
    6698:	89 81       	ldd	r24, Y+1	; 0x01
    669a:	88 2f       	mov	r24, r24
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	88 0f       	add	r24, r24
    66a0:	99 1f       	adc	r25, r25
    66a2:	ac 01       	movw	r20, r24
    66a4:	44 0f       	add	r20, r20
    66a6:	55 1f       	adc	r21, r21
    66a8:	44 0f       	add	r20, r20
    66aa:	55 1f       	adc	r21, r21
    66ac:	84 0f       	add	r24, r20
    66ae:	95 1f       	adc	r25, r21
    66b0:	82 0f       	add	r24, r18
    66b2:	93 1f       	adc	r25, r19
    66b4:	fc 01       	movw	r30, r24
    66b6:	85 81       	ldd	r24, Z+5	; 0x05
    66b8:	96 81       	ldd	r25, Z+6	; 0x06
    66ba:	8b 83       	std	Y+3, r24	; 0x03
    66bc:	9c 83       	std	Y+4, r25	; 0x04
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
    66be:	8d 81       	ldd	r24, Y+5	; 0x05
    66c0:	9e 81       	ldd	r25, Y+6	; 0x06
    66c2:	fc 01       	movw	r30, r24
    66c4:	26 81       	ldd	r18, Z+6	; 0x06
    66c6:	37 81       	ldd	r19, Z+7	; 0x07
    66c8:	89 81       	ldd	r24, Y+1	; 0x01
    66ca:	88 2f       	mov	r24, r24
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	88 0f       	add	r24, r24
    66d0:	99 1f       	adc	r25, r25
    66d2:	ac 01       	movw	r20, r24
    66d4:	44 0f       	add	r20, r20
    66d6:	55 1f       	adc	r21, r21
    66d8:	44 0f       	add	r20, r20
    66da:	55 1f       	adc	r21, r21
    66dc:	84 0f       	add	r24, r20
    66de:	95 1f       	adc	r25, r21
    66e0:	82 0f       	add	r24, r18
    66e2:	93 1f       	adc	r25, r19
    66e4:	fc 01       	movw	r30, r24
    66e6:	87 81       	ldd	r24, Z+7	; 0x07
    66e8:	8a 87       	std	Y+10, r24	; 0x0a
                for (i = 0U; i < flag_size; i++)
    66ea:	1a 82       	std	Y+2, r1	; 0x02
    66ec:	0f c0       	rjmp	.+30     	; 0x670c <lin_update_rx+0x1f2>
                {
                    g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    66ee:	8b 81       	ldd	r24, Y+3	; 0x03
    66f0:	9c 81       	ldd	r25, Y+4	; 0x04
    66f2:	8c 5d       	subi	r24, 0xDC	; 220
    66f4:	99 4b       	sbci	r25, 0xB9	; 185
    66f6:	2f ef       	ldi	r18, 0xFF	; 255
    66f8:	fc 01       	movw	r30, r24
    66fa:	20 83       	st	Z, r18
                    flag_offset++;
    66fc:	8b 81       	ldd	r24, Y+3	; 0x03
    66fe:	9c 81       	ldd	r25, Y+4	; 0x04
    6700:	01 96       	adiw	r24, 0x01	; 1
    6702:	8b 83       	std	Y+3, r24	; 0x03
    6704:	9c 83       	std	Y+4, r25	; 0x04
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                /* Update rx signal flags */
                flag_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_offset;
                flag_size = prot_user_config_ptr->frame_tbl_ptr[frame_index].flag_size;
                for (i = 0U; i < flag_size; i++)
    6706:	8a 81       	ldd	r24, Y+2	; 0x02
    6708:	8f 5f       	subi	r24, 0xFF	; 255
    670a:	8a 83       	std	Y+2, r24	; 0x02
    670c:	9a 81       	ldd	r25, Y+2	; 0x02
    670e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6710:	98 17       	cp	r25, r24
    6712:	68 f3       	brcs	.-38     	; 0x66ee <lin_update_rx+0x1d4>
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }

    #if (1U == SUPPORT_SLAVE_MODE)
        /* update word status */
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6714:	8d 81       	ldd	r24, Y+5	; 0x05
    6716:	9e 81       	ldd	r25, Y+6	; 0x06
    6718:	fc 01       	movw	r30, r24
    671a:	93 81       	ldd	r25, Z+3	; 0x03
    671c:	81 e0       	ldi	r24, 0x01	; 1
    671e:	89 27       	eor	r24, r25
    6720:	88 23       	and	r24, r24
    6722:	d1 f0       	breq	.+52     	; 0x6758 <lin_update_rx+0x23e>
        {
            if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    6724:	8d 81       	ldd	r24, Y+5	; 0x05
    6726:	9e 81       	ldd	r25, Y+6	; 0x06
    6728:	fc 01       	movw	r30, r24
    672a:	80 81       	ld	r24, Z
    672c:	88 23       	and	r24, r24
    672e:	31 f0       	breq	.+12     	; 0x673c <lin_update_rx+0x222>
    6730:	8d 81       	ldd	r24, Y+5	; 0x05
    6732:	9e 81       	ldd	r25, Y+6	; 0x06
    6734:	fc 01       	movw	r30, r24
    6736:	80 81       	ld	r24, Z
    6738:	83 30       	cpi	r24, 0x03	; 3
    673a:	29 f4       	brne	.+10     	; 0x6746 <lin_update_rx+0x22c>
            {
                lin_update_word_status_lin21(iii, LIN_LLD_RX_COMPLETED);
    673c:	62 e0       	ldi	r22, 0x02	; 2
    673e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6740:	0e 94 dd 37 	call	0x6fba	; 0x6fba <lin_update_word_status_lin21>
                }
            }
        }
    #endif /* (1U == SUPPORT_SLAVE_MODE) */
    }
}
    6744:	09 c0       	rjmp	.+18     	; 0x6758 <lin_update_rx+0x23e>
            {
                lin_update_word_status_lin21(iii, LIN_LLD_RX_COMPLETED);
            }
            else
            {
                if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_J2602)
    6746:	8d 81       	ldd	r24, Y+5	; 0x05
    6748:	9e 81       	ldd	r25, Y+6	; 0x06
    674a:	fc 01       	movw	r30, r24
    674c:	80 81       	ld	r24, Z
    674e:	81 30       	cpi	r24, 0x01	; 1
    6750:	19 f4       	brne	.+6      	; 0x6758 <lin_update_rx+0x23e>
                {
                    lin_update_word_status_j2602(iii);
    6752:	8b 85       	ldd	r24, Y+11	; 0x0b
    6754:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <lin_update_word_status_j2602>
                }
            }
        }
    #endif /* (1U == SUPPORT_SLAVE_MODE) */
    }
}
    6758:	00 00       	nop
    675a:	2c 96       	adiw	r28, 0x0c	; 12
    675c:	cd bf       	out	0x3d, r28	; 61
    675e:	de bf       	out	0x3e, r29	; 62
    6760:	df 91       	pop	r29
    6762:	cf 91       	pop	r28
    6764:	08 95       	ret

00006766 <lin_update_tx>:
 *
 * Implements    : lin_update_tx_Activity
 *END**************************************************************************/
static void lin_update_tx(l_ifc_handle iii,
                          l_u8 id)
{
    6766:	cf 93       	push	r28
    6768:	df 93       	push	r29
    676a:	cd b7       	in	r28, 0x3d	; 61
    676c:	de b7       	in	r29, 0x3e	; 62
    676e:	27 97       	sbiw	r28, 0x07	; 7
    6770:	cd bf       	out	0x3d, r28	; 61
    6772:	de bf       	out	0x3e, r29	; 62
    6774:	8e 83       	std	Y+6, r24	; 0x06
    6776:	6f 83       	std	Y+7, r22	; 0x07
    l_u8 frame_index; //index用来获取当前数据的号
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6778:	8e 81       	ldd	r24, Y+6	; 0x06
    677a:	28 2f       	mov	r18, r24
    677c:	30 e0       	ldi	r19, 0x00	; 0
    677e:	4c e1       	ldi	r20, 0x1C	; 28
    6780:	42 9f       	mul	r20, r18
    6782:	c0 01       	movw	r24, r0
    6784:	43 9f       	mul	r20, r19
    6786:	90 0d       	add	r25, r0
    6788:	11 24       	eor	r1, r1
    678a:	86 56       	subi	r24, 0x66	; 102
    678c:	9d 4b       	sbci	r25, 0xBD	; 189
    678e:	89 83       	std	Y+1, r24	; 0x01
    6790:	9a 83       	std	Y+2, r25	; 0x02
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6792:	8e 81       	ldd	r24, Y+6	; 0x06
    6794:	28 2f       	mov	r18, r24
    6796:	30 e0       	ldi	r19, 0x00	; 0
    6798:	46 e1       	ldi	r20, 0x16	; 22
    679a:	42 9f       	mul	r20, r18
    679c:	c0 01       	movw	r24, r0
    679e:	43 9f       	mul	r20, r19
    67a0:	90 0d       	add	r25, r0
    67a2:	11 24       	eor	r1, r1
    67a4:	80 56       	subi	r24, 0x60	; 96
    67a6:	99 4b       	sbci	r25, 0xB9	; 185
    67a8:	8b 83       	std	Y+3, r24	; 0x03
    67aa:	9c 83       	std	Y+4, r25	; 0x04
    l_u16* byte_offset_temp_ptr;
    const lin_node_attribute_t * node_attr_ptr;
#endif /*((1U == SUPPORT_PROTOCOL_J2602) && (1U == SUPPORT_SLAVE_MODE)) */

    /* Set successful transfer */
    prot_state_ptr->successful_transfer = 1U;
    67ac:	8b 81       	ldd	r24, Y+3	; 0x03
    67ae:	9c 81       	ldd	r25, Y+4	; 0x04
    67b0:	21 e0       	ldi	r18, 0x01	; 1
    67b2:	fc 01       	movw	r30, r24
    67b4:	25 83       	std	Z+5, r18	; 0x05
    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    67b6:	8b 81       	ldd	r24, Y+3	; 0x03
    67b8:	9c 81       	ldd	r25, Y+4	; 0x04
    67ba:	fc 01       	movw	r30, r24
    67bc:	82 85       	ldd	r24, Z+10	; 0x0a
    67be:	8f 3f       	cpi	r24, 0xFF	; 255
    67c0:	51 f0       	breq	.+20     	; 0x67d6 <lin_update_tx+0x70>
    {
        prot_state_ptr->num_of_processed_frame++;
    67c2:	8b 81       	ldd	r24, Y+3	; 0x03
    67c4:	9c 81       	ldd	r25, Y+4	; 0x04
    67c6:	fc 01       	movw	r30, r24
    67c8:	82 85       	ldd	r24, Z+10	; 0x0a
    67ca:	21 e0       	ldi	r18, 0x01	; 1
    67cc:	28 0f       	add	r18, r24
    67ce:	8b 81       	ldd	r24, Y+3	; 0x03
    67d0:	9c 81       	ldd	r25, Y+4	; 0x04
    67d2:	fc 01       	movw	r30, r24
    67d4:	22 87       	std	Z+10, r18	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    67d6:	8b 81       	ldd	r24, Y+3	; 0x03
    67d8:	9c 81       	ldd	r25, Y+4	; 0x04
    67da:	fc 01       	movw	r30, r24
    67dc:	82 85       	ldd	r24, Z+10	; 0x0a
    67de:	82 30       	cpi	r24, 0x02	; 2
    67e0:	58 f0       	brcs	.+22     	; 0x67f8 <lin_update_tx+0x92>
    67e2:	8b 81       	ldd	r24, Y+3	; 0x03
    67e4:	9c 81       	ldd	r25, Y+4	; 0x04
    67e6:	fc 01       	movw	r30, r24
    67e8:	83 85       	ldd	r24, Z+11	; 0x0b
    67ea:	88 23       	and	r24, r24
    67ec:	29 f4       	brne	.+10     	; 0x67f8 <lin_update_tx+0x92>
    {
        prot_state_ptr->overrun_flg = 1U;
    67ee:	8b 81       	ldd	r24, Y+3	; 0x03
    67f0:	9c 81       	ldd	r25, Y+4	; 0x04
    67f2:	21 e0       	ldi	r18, 0x01	; 1
    67f4:	fc 01       	movw	r30, r24
    67f6:	23 87       	std	Z+11, r18	; 0x0b
    }

    if ((bool)1U == prot_state_ptr->transmit_error_resp_sig_flg)
    67f8:	8b 81       	ldd	r24, Y+3	; 0x03
    67fa:	9c 81       	ldd	r25, Y+4	; 0x04
    67fc:	fc 01       	movw	r30, r24
    67fe:	85 89       	ldd	r24, Z+21	; 0x15
    6800:	88 23       	and	r24, r24
    6802:	41 f0       	breq	.+16     	; 0x6814 <lin_update_tx+0xae>
    {
        /* Set no error in response */
        prot_state_ptr->error_in_response = 0U;
    6804:	8b 81       	ldd	r24, Y+3	; 0x03
    6806:	9c 81       	ldd	r25, Y+4	; 0x04
    6808:	fc 01       	movw	r30, r24
    680a:	16 82       	std	Z+6, r1	; 0x06
        prot_state_ptr->transmit_error_resp_sig_flg = (bool)0U;
    680c:	8b 81       	ldd	r24, Y+3	; 0x03
    680e:	9c 81       	ldd	r25, Y+4	; 0x04
    6810:	fc 01       	movw	r30, r24
    6812:	15 8a       	std	Z+21, r1	; 0x15
            (void)lin_lld_set_low_power_mode(iii);
        }
    }
#endif /* (1U == SUPPORT_MASTER_MODE) */
    /* Find frame index by pid */
    frame_index = lin_get_frame_index(iii, id);
    6814:	6f 81       	ldd	r22, Y+7	; 0x07
    6816:	8e 81       	ldd	r24, Y+6	; 0x06
    6818:	0e 94 00 36 	call	0x6c00	; 0x6c00 <lin_get_frame_index>
    681c:	8d 83       	std	Y+5, r24	; 0x05
    if ((((bool)LIN_MASTER == prot_user_config_ptr->function) && (0x3CU == id) && (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)) ||
    681e:	89 81       	ldd	r24, Y+1	; 0x01
    6820:	9a 81       	ldd	r25, Y+2	; 0x02
    6822:	fc 01       	movw	r30, r24
    6824:	83 81       	ldd	r24, Z+3	; 0x03
    6826:	88 23       	and	r24, r24
    6828:	49 f0       	breq	.+18     	; 0x683c <lin_update_tx+0xd6>
    682a:	8f 81       	ldd	r24, Y+7	; 0x07
    682c:	8c 33       	cpi	r24, 0x3C	; 60
    682e:	31 f4       	brne	.+12     	; 0x683c <lin_update_tx+0xd6>
    6830:	8b 81       	ldd	r24, Y+3	; 0x03
    6832:	9c 81       	ldd	r25, Y+4	; 0x04
    6834:	fc 01       	movw	r30, r24
    6836:	80 89       	ldd	r24, Z+16	; 0x10
    6838:	81 30       	cpi	r24, 0x01	; 1
    683a:	59 f0       	breq	.+22     	; 0x6852 <lin_update_tx+0xec>
        (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (0x3DU == id)))
    683c:	89 81       	ldd	r24, Y+1	; 0x01
    683e:	9a 81       	ldd	r25, Y+2	; 0x02
    6840:	fc 01       	movw	r30, r24
    6842:	93 81       	ldd	r25, Z+3	; 0x03
    6844:	81 e0       	ldi	r24, 0x01	; 1
    6846:	89 27       	eor	r24, r25
        }
    }
#endif /* (1U == SUPPORT_MASTER_MODE) */
    /* Find frame index by pid */
    frame_index = lin_get_frame_index(iii, id);
    if ((((bool)LIN_MASTER == prot_user_config_ptr->function) && (0x3CU == id) && (DIAG_INTERLEAVE_MODE == prot_state_ptr->diagnostic_mode)) ||
    6848:	88 23       	and	r24, r24
    684a:	41 f0       	breq	.+16     	; 0x685c <lin_update_tx+0xf6>
        (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (0x3DU == id)))
    684c:	8f 81       	ldd	r24, Y+7	; 0x07
    684e:	8d 33       	cpi	r24, 0x3D	; 61
    6850:	29 f4       	brne	.+10     	; 0x685c <lin_update_tx+0xf6>
    {
        /* Call transport layer callback to process TL_TX_COMPLETED event*/
        (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TX_COMPLETED, id);
    6852:	4f 81       	ldd	r20, Y+7	; 0x07
    6854:	62 e0       	ldi	r22, 0x02	; 2
    6856:	8e 81       	ldd	r24, Y+6	; 0x06
    6858:	0e 94 c3 4e 	call	0x9d86	; 0x9d86 <lin_tl_callback_handler>
    }
    if (frame_index < LIN_NUM_OF_FRMS)
    685c:	8d 81       	ldd	r24, Y+5	; 0x05
    685e:	84 30       	cpi	r24, 0x04	; 4
    6860:	60 f4       	brcc	.+24     	; 0x687a <lin_update_tx+0x114>
    {
        /* Update signal flag */
        lin_update_tx_flags(iii, frame_index);
    6862:	6d 81       	ldd	r22, Y+5	; 0x05
    6864:	8e 81       	ldd	r24, Y+6	; 0x06
    6866:	0e 94 41 35 	call	0x6a82	; 0x6a82 <lin_update_tx_flags>
        /* Update tx frame flag */
        g_lin_frame_flag_handle_tbl[frame_index] = true;
    686a:	8d 81       	ldd	r24, Y+5	; 0x05
    686c:	88 2f       	mov	r24, r24
    686e:	90 e0       	ldi	r25, 0x00	; 0
    6870:	89 5d       	subi	r24, 0xD9	; 217
    6872:	99 4b       	sbci	r25, 0xB9	; 185
    6874:	21 e0       	ldi	r18, 0x01	; 1
    6876:	fc 01       	movw	r30, r24
    6878:	20 83       	st	Z, r18
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    687a:	89 81       	ldd	r24, Y+1	; 0x01
    687c:	9a 81       	ldd	r25, Y+2	; 0x02
    687e:	fc 01       	movw	r30, r24
    6880:	93 81       	ldd	r25, Z+3	; 0x03
    6882:	81 e0       	ldi	r24, 0x01	; 1
    6884:	89 27       	eor	r24, r25
    6886:	88 23       	and	r24, r24
    6888:	a1 f0       	breq	.+40     	; 0x68b2 <lin_update_tx+0x14c>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    688a:	89 81       	ldd	r24, Y+1	; 0x01
    688c:	9a 81       	ldd	r25, Y+2	; 0x02
    688e:	fc 01       	movw	r30, r24
    6890:	80 81       	ld	r24, Z
    6892:	88 23       	and	r24, r24
    6894:	31 f0       	breq	.+12     	; 0x68a2 <lin_update_tx+0x13c>
    6896:	89 81       	ldd	r24, Y+1	; 0x01
    6898:	9a 81       	ldd	r25, Y+2	; 0x02
    689a:	fc 01       	movw	r30, r24
    689c:	80 81       	ld	r24, Z
    689e:	83 30       	cpi	r24, 0x03	; 3
    68a0:	41 f4       	brne	.+16     	; 0x68b2 <lin_update_tx+0x14c>
        {
            lin_update_err_signal(iii, frame_index);
    68a2:	6d 81       	ldd	r22, Y+5	; 0x05
    68a4:	8e 81       	ldd	r24, Y+6	; 0x06
    68a6:	0e 94 8f 38 	call	0x711e	; 0x711e <lin_update_err_signal>
            lin_update_word_status_lin21(iii, LIN_LLD_TX_COMPLETED);
    68aa:	61 e0       	ldi	r22, 0x01	; 1
    68ac:	8e 81       	ldd	r24, Y+6	; 0x06
    68ae:	0e 94 dd 37 	call	0x6fba	; 0x6fba <lin_update_word_status_lin21>

    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    68b2:	00 00       	nop
    68b4:	27 96       	adiw	r28, 0x07	; 7
    68b6:	cd bf       	out	0x3d, r28	; 61
    68b8:	de bf       	out	0x3e, r29	; 62
    68ba:	df 91       	pop	r29
    68bc:	cf 91       	pop	r28
    68be:	08 95       	ret

000068c0 <lin_handle_error>:
 * Implements    : lin_handle_error_Activity
 *END**************************************************************************/
static void lin_handle_error(l_ifc_handle iii,
                             lin_lld_event_id_t event_id,
                             l_u8 id)
{
    68c0:	cf 93       	push	r28
    68c2:	df 93       	push	r29
    68c4:	cd b7       	in	r28, 0x3d	; 61
    68c6:	de b7       	in	r29, 0x3e	; 62
    68c8:	28 97       	sbiw	r28, 0x08	; 8
    68ca:	cd bf       	out	0x3d, r28	; 61
    68cc:	de bf       	out	0x3e, r29	; 62
    68ce:	8e 83       	std	Y+6, r24	; 0x06
    68d0:	6f 83       	std	Y+7, r22	; 0x07
    68d2:	48 87       	std	Y+8, r20	; 0x08
#if ((1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_SLAVE_MODE))
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    68d4:	8e 81       	ldd	r24, Y+6	; 0x06
    68d6:	28 2f       	mov	r18, r24
    68d8:	30 e0       	ldi	r19, 0x00	; 0
    68da:	4c e1       	ldi	r20, 0x1C	; 28
    68dc:	42 9f       	mul	r20, r18
    68de:	c0 01       	movw	r24, r0
    68e0:	43 9f       	mul	r20, r19
    68e2:	90 0d       	add	r25, r0
    68e4:	11 24       	eor	r1, r1
    68e6:	86 56       	subi	r24, 0x66	; 102
    68e8:	9d 4b       	sbci	r25, 0xBD	; 189
    68ea:	89 83       	std	Y+1, r24	; 0x01
    68ec:	9a 83       	std	Y+2, r25	; 0x02
#endif /* ((1U == SUPPORT_PROTOCOL_20) || (1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_SLAVE_MODE)) */
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    68ee:	8e 81       	ldd	r24, Y+6	; 0x06
    68f0:	28 2f       	mov	r18, r24
    68f2:	30 e0       	ldi	r19, 0x00	; 0
    68f4:	46 e1       	ldi	r20, 0x16	; 22
    68f6:	42 9f       	mul	r20, r18
    68f8:	c0 01       	movw	r24, r0
    68fa:	43 9f       	mul	r20, r19
    68fc:	90 0d       	add	r25, r0
    68fe:	11 24       	eor	r1, r1
    6900:	80 56       	subi	r24, 0x60	; 96
    6902:	99 4b       	sbci	r25, 0xB9	; 185
    6904:	8b 83       	std	Y+3, r24	; 0x03
    6906:	9c 83       	std	Y+4, r25	; 0x04
    lin_master_data_t * master_data_ptr;
#endif /* ((1U == SUPPORT_MASTER_MODE) && ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))) */

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
    l_u8 frame_index;
    frame_index = lin_get_frame_index(iii, id);
    6908:	68 85       	ldd	r22, Y+8	; 0x08
    690a:	8e 81       	ldd	r24, Y+6	; 0x06
    690c:	0e 94 00 36 	call	0x6c00	; 0x6c00 <lin_get_frame_index>
    6910:	8d 83       	std	Y+5, r24	; 0x05
#endif /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */

    /* if two or more frames are processed since the previous call to l_ifc_read_status, set overrun flag to 1 */
    if (prot_state_ptr->num_of_processed_frame < 0xFFU)
    6912:	8b 81       	ldd	r24, Y+3	; 0x03
    6914:	9c 81       	ldd	r25, Y+4	; 0x04
    6916:	fc 01       	movw	r30, r24
    6918:	82 85       	ldd	r24, Z+10	; 0x0a
    691a:	8f 3f       	cpi	r24, 0xFF	; 255
    691c:	51 f0       	breq	.+20     	; 0x6932 <lin_handle_error+0x72>
    {
        prot_state_ptr->num_of_processed_frame++;
    691e:	8b 81       	ldd	r24, Y+3	; 0x03
    6920:	9c 81       	ldd	r25, Y+4	; 0x04
    6922:	fc 01       	movw	r30, r24
    6924:	82 85       	ldd	r24, Z+10	; 0x0a
    6926:	21 e0       	ldi	r18, 0x01	; 1
    6928:	28 0f       	add	r18, r24
    692a:	8b 81       	ldd	r24, Y+3	; 0x03
    692c:	9c 81       	ldd	r25, Y+4	; 0x04
    692e:	fc 01       	movw	r30, r24
    6930:	22 87       	std	Z+10, r18	; 0x0a
    }

    if ((prot_state_ptr->num_of_processed_frame > 1U) && (prot_state_ptr->overrun_flg == 0U))
    6932:	8b 81       	ldd	r24, Y+3	; 0x03
    6934:	9c 81       	ldd	r25, Y+4	; 0x04
    6936:	fc 01       	movw	r30, r24
    6938:	82 85       	ldd	r24, Z+10	; 0x0a
    693a:	82 30       	cpi	r24, 0x02	; 2
    693c:	58 f0       	brcs	.+22     	; 0x6954 <lin_handle_error+0x94>
    693e:	8b 81       	ldd	r24, Y+3	; 0x03
    6940:	9c 81       	ldd	r25, Y+4	; 0x04
    6942:	fc 01       	movw	r30, r24
    6944:	83 85       	ldd	r24, Z+11	; 0x0b
    6946:	88 23       	and	r24, r24
    6948:	29 f4       	brne	.+10     	; 0x6954 <lin_handle_error+0x94>
    {
        prot_state_ptr->overrun_flg = 1U;
    694a:	8b 81       	ldd	r24, Y+3	; 0x03
    694c:	9c 81       	ldd	r25, Y+4	; 0x04
    694e:	21 e0       	ldi	r18, 0x01	; 1
    6950:	fc 01       	movw	r30, r24
    6952:	23 87       	std	Z+11, r18	; 0x0b
    }

    switch (event_id)
    6954:	8f 81       	ldd	r24, Y+7	; 0x07
    6956:	88 2f       	mov	r24, r24
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	83 30       	cpi	r24, 0x03	; 3
    695c:	91 05       	cpc	r25, r1
    695e:	69 f1       	breq	.+90     	; 0x69ba <lin_handle_error+0xfa>
    6960:	83 30       	cpi	r24, 0x03	; 3
    6962:	91 05       	cpc	r25, r1
    6964:	64 f1       	brlt	.+88     	; 0x69be <lin_handle_error+0xfe>
    6966:	08 97       	sbiw	r24, 0x08	; 8
    6968:	54 f5       	brge	.+84     	; 0x69be <lin_handle_error+0xfe>
        case LIN_LLD_NODATA_TIMEOUT:
        #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
            /* Check if frame type is event trigger */
            /* Find the corresponding frame */

            if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_type)
    696a:	89 81       	ldd	r24, Y+1	; 0x01
    696c:	9a 81       	ldd	r25, Y+2	; 0x02
    696e:	fc 01       	movw	r30, r24
    6970:	26 81       	ldd	r18, Z+6	; 0x06
    6972:	37 81       	ldd	r19, Z+7	; 0x07
    6974:	8d 81       	ldd	r24, Y+5	; 0x05
    6976:	88 2f       	mov	r24, r24
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	88 0f       	add	r24, r24
    697c:	99 1f       	adc	r25, r25
    697e:	ac 01       	movw	r20, r24
    6980:	44 0f       	add	r20, r20
    6982:	55 1f       	adc	r21, r21
    6984:	44 0f       	add	r20, r20
    6986:	55 1f       	adc	r21, r21
    6988:	84 0f       	add	r24, r20
    698a:	95 1f       	adc	r25, r21
    698c:	82 0f       	add	r24, r18
    698e:	93 1f       	adc	r25, r19
    6990:	fc 01       	movw	r30, r24
    6992:	80 81       	ld	r24, Z
    6994:	81 30       	cpi	r24, 0x01	; 1
    6996:	a9 f0       	breq	.+42     	; 0x69c2 <lin_handle_error+0x102>
            }
            else
        #endif  /* ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20)) */
            {
                /* Set response error */
                prot_state_ptr->error_in_response = 1U;
    6998:	8b 81       	ldd	r24, Y+3	; 0x03
    699a:	9c 81       	ldd	r25, Y+4	; 0x04
    699c:	21 e0       	ldi	r18, 0x01	; 1
    699e:	fc 01       	movw	r30, r24
    69a0:	26 83       	std	Z+6, r18	; 0x06
                /* TL support */
                if ((0x3CU == id) || (0x3DU == id))
    69a2:	88 85       	ldd	r24, Y+8	; 0x08
    69a4:	8c 33       	cpi	r24, 0x3C	; 60
    69a6:	19 f0       	breq	.+6      	; 0x69ae <lin_handle_error+0xee>
    69a8:	88 85       	ldd	r24, Y+8	; 0x08
    69aa:	8d 33       	cpi	r24, 0x3D	; 61
    69ac:	51 f4       	brne	.+20     	; 0x69c2 <lin_handle_error+0x102>
                {
                    /* Call transport layer callback to handle TL_ERROR */
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_ERROR, id);
    69ae:	48 85       	ldd	r20, Y+8	; 0x08
    69b0:	64 e0       	ldi	r22, 0x04	; 4
    69b2:	8e 81       	ldd	r24, Y+6	; 0x06
    69b4:	0e 94 c3 4e 	call	0x9d86	; 0x9d86 <lin_tl_callback_handler>
                }
            }
            break;
    69b8:	04 c0       	rjmp	.+8      	; 0x69c2 <lin_handle_error+0x102>
    switch (event_id)
    {
        /* PID error */
        case LIN_LLD_PID_ERR:
            /* do nothing here */
            break;
    69ba:	00 00       	nop
    69bc:	03 c0       	rjmp	.+6      	; 0x69c4 <lin_handle_error+0x104>
                }
            }
            break;
        default:
            /* do nothing */
            break;
    69be:	00 00       	nop
    69c0:	01 c0       	rjmp	.+2      	; 0x69c4 <lin_handle_error+0x104>
                {
                    /* Call transport layer callback to handle TL_ERROR */
                    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_ERROR, id);
                }
            }
            break;
    69c2:	00 00       	nop
            break;
    }

#if (1U == SUPPORT_SLAVE_MODE)
    /* Update word status */
    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    69c4:	89 81       	ldd	r24, Y+1	; 0x01
    69c6:	9a 81       	ldd	r25, Y+2	; 0x02
    69c8:	fc 01       	movw	r30, r24
    69ca:	93 81       	ldd	r25, Z+3	; 0x03
    69cc:	81 e0       	ldi	r24, 0x01	; 1
    69ce:	89 27       	eor	r24, r25
    69d0:	88 23       	and	r24, r24
    69d2:	d1 f0       	breq	.+52     	; 0x6a08 <lin_handle_error+0x148>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    69d4:	89 81       	ldd	r24, Y+1	; 0x01
    69d6:	9a 81       	ldd	r25, Y+2	; 0x02
    69d8:	fc 01       	movw	r30, r24
    69da:	80 81       	ld	r24, Z
    69dc:	88 23       	and	r24, r24
    69de:	31 f0       	breq	.+12     	; 0x69ec <lin_handle_error+0x12c>
    69e0:	89 81       	ldd	r24, Y+1	; 0x01
    69e2:	9a 81       	ldd	r25, Y+2	; 0x02
    69e4:	fc 01       	movw	r30, r24
    69e6:	80 81       	ld	r24, Z
    69e8:	83 30       	cpi	r24, 0x03	; 3
    69ea:	71 f4       	brne	.+28     	; 0x6a08 <lin_handle_error+0x148>
        {
            if (prot_state_ptr->error_in_response == 1U)
    69ec:	8b 81       	ldd	r24, Y+3	; 0x03
    69ee:	9c 81       	ldd	r25, Y+4	; 0x04
    69f0:	fc 01       	movw	r30, r24
    69f2:	86 81       	ldd	r24, Z+6	; 0x06
    69f4:	81 30       	cpi	r24, 0x01	; 1
    69f6:	21 f4       	brne	.+8      	; 0x6a00 <lin_handle_error+0x140>
            {
                lin_update_err_signal(iii, frame_index);
    69f8:	6d 81       	ldd	r22, Y+5	; 0x05
    69fa:	8e 81       	ldd	r24, Y+6	; 0x06
    69fc:	0e 94 8f 38 	call	0x711e	; 0x711e <lin_update_err_signal>
            }
            lin_update_word_status_lin21(iii, event_id);
    6a00:	6f 81       	ldd	r22, Y+7	; 0x07
    6a02:	8e 81       	ldd	r24, Y+6	; 0x06
    6a04:	0e 94 dd 37 	call	0x6fba	; 0x6fba <lin_update_word_status_lin21>
            lin_update_word_status_j2602(iii);
        }
    #endif /* (1U == SUPPORT_PROTOCOL_J2602) */
    }
#endif /* (1U == SUPPORT_SLAVE_MODE) */
}
    6a08:	00 00       	nop
    6a0a:	28 96       	adiw	r28, 0x08	; 8
    6a0c:	cd bf       	out	0x3d, r28	; 61
    6a0e:	de bf       	out	0x3e, r29	; 62
    6a10:	df 91       	pop	r29
    6a12:	cf 91       	pop	r28
    6a14:	08 95       	ret

00006a16 <lin_bus_activity_timeout>:
 * Description   : This function set bus activity timeout
 *
 * Implements    : lin_bus_activity_timeout_Activity
 *END**************************************************************************/
static void lin_bus_activity_timeout(l_ifc_handle iii)
{
    6a16:	cf 93       	push	r28
    6a18:	df 93       	push	r29
    6a1a:	00 d0       	rcall	.+0      	; 0x6a1c <lin_bus_activity_timeout+0x6>
    6a1c:	1f 92       	push	r1
    6a1e:	cd b7       	in	r28, 0x3d	; 61
    6a20:	de b7       	in	r29, 0x3e	; 62
    6a22:	8b 83       	std	Y+3, r24	; 0x03
    /* Set goto sleep mode */
#if (1U == SUPPORT_SLAVE_MODE)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6a24:	8b 81       	ldd	r24, Y+3	; 0x03
    6a26:	28 2f       	mov	r18, r24
    6a28:	30 e0       	ldi	r19, 0x00	; 0
    6a2a:	4c e1       	ldi	r20, 0x1C	; 28
    6a2c:	42 9f       	mul	r20, r18
    6a2e:	c0 01       	movw	r24, r0
    6a30:	43 9f       	mul	r20, r19
    6a32:	90 0d       	add	r25, r0
    6a34:	11 24       	eor	r1, r1
    6a36:	86 56       	subi	r24, 0x66	; 102
    6a38:	9d 4b       	sbci	r25, 0xBD	; 189
    6a3a:	89 83       	std	Y+1, r24	; 0x01
    6a3c:	9a 83       	std	Y+2, r25	; 0x02

    if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6a3e:	89 81       	ldd	r24, Y+1	; 0x01
    6a40:	9a 81       	ldd	r25, Y+2	; 0x02
    6a42:	fc 01       	movw	r30, r24
    6a44:	93 81       	ldd	r25, Z+3	; 0x03
    6a46:	81 e0       	ldi	r24, 0x01	; 1
    6a48:	89 27       	eor	r24, r25
    6a4a:	88 23       	and	r24, r24
    6a4c:	81 f0       	breq	.+32     	; 0x6a6e <lin_bus_activity_timeout+0x58>
    {
    #if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        if ((prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21) || (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_20))
    6a4e:	89 81       	ldd	r24, Y+1	; 0x01
    6a50:	9a 81       	ldd	r25, Y+2	; 0x02
    6a52:	fc 01       	movw	r30, r24
    6a54:	80 81       	ld	r24, Z
    6a56:	88 23       	and	r24, r24
    6a58:	31 f0       	breq	.+12     	; 0x6a66 <lin_bus_activity_timeout+0x50>
    6a5a:	89 81       	ldd	r24, Y+1	; 0x01
    6a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a5e:	fc 01       	movw	r30, r24
    6a60:	80 81       	ld	r24, Z
    6a62:	83 30       	cpi	r24, 0x03	; 3
    6a64:	21 f4       	brne	.+8      	; 0x6a6e <lin_bus_activity_timeout+0x58>
        {
            lin_update_word_status_lin21(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT);
    6a66:	68 e0       	ldi	r22, 0x08	; 8
    6a68:	8b 81       	ldd	r24, Y+3	; 0x03
    6a6a:	0e 94 dd 37 	call	0x6fba	; 0x6fba <lin_update_word_status_lin21>
    }

#endif /* (1U == SUPPORT_SLAVE_MODE) */

    /* Change to low power mode */
    (void)lin_lld_set_low_power_mode(iii);
    6a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a70:	0e 94 79 49 	call	0x92f2	; 0x92f2 <lin_lld_set_low_power_mode>
}
    6a74:	00 00       	nop
    6a76:	23 96       	adiw	r28, 0x03	; 3
    6a78:	cd bf       	out	0x3d, r28	; 61
    6a7a:	de bf       	out	0x3e, r29	; 62
    6a7c:	df 91       	pop	r29
    6a7e:	cf 91       	pop	r28
    6a80:	08 95       	ret

00006a82 <lin_update_tx_flags>:
 *
 * Implements    : lin_update_tx_flags_Activity
 *END**************************************************************************/
static void lin_update_tx_flags(l_ifc_handle iii,
                                l_u8 frm_id)
{
    6a82:	cf 93       	push	r28
    6a84:	df 93       	push	r29
    6a86:	cd b7       	in	r28, 0x3d	; 61
    6a88:	de b7       	in	r29, 0x3e	; 62
    6a8a:	2b 97       	sbiw	r28, 0x0b	; 11
    6a8c:	cd bf       	out	0x3d, r28	; 61
    6a8e:	de bf       	out	0x3e, r29	; 62
    6a90:	8a 87       	std	Y+10, r24	; 0x0a
    6a92:	6b 87       	std	Y+11, r22	; 0x0b
    l_u16 flag_offset;
    l_u8 flag_size;
    l_u8 i;
    l_u8 associate_frame_offset;
    const lin_frame_t * lin_frame_ptr;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6a94:	8a 85       	ldd	r24, Y+10	; 0x0a
    6a96:	28 2f       	mov	r18, r24
    6a98:	30 e0       	ldi	r19, 0x00	; 0
    6a9a:	4c e1       	ldi	r20, 0x1C	; 28
    6a9c:	42 9f       	mul	r20, r18
    6a9e:	c0 01       	movw	r24, r0
    6aa0:	43 9f       	mul	r20, r19
    6aa2:	90 0d       	add	r25, r0
    6aa4:	11 24       	eor	r1, r1
    6aa6:	86 56       	subi	r24, 0x66	; 102
    6aa8:	9d 4b       	sbci	r25, 0xBD	; 189
    6aaa:	8c 83       	std	Y+4, r24	; 0x04
    6aac:	9d 83       	std	Y+5, r25	; 0x05
    lin_frame_ptr = &(prot_user_config_ptr->frame_tbl_ptr[frm_id]);
    6aae:	8c 81       	ldd	r24, Y+4	; 0x04
    6ab0:	9d 81       	ldd	r25, Y+5	; 0x05
    6ab2:	fc 01       	movw	r30, r24
    6ab4:	26 81       	ldd	r18, Z+6	; 0x06
    6ab6:	37 81       	ldd	r19, Z+7	; 0x07
    6ab8:	8b 85       	ldd	r24, Y+11	; 0x0b
    6aba:	88 2f       	mov	r24, r24
    6abc:	90 e0       	ldi	r25, 0x00	; 0
    6abe:	88 0f       	add	r24, r24
    6ac0:	99 1f       	adc	r25, r25
    6ac2:	ac 01       	movw	r20, r24
    6ac4:	44 0f       	add	r20, r20
    6ac6:	55 1f       	adc	r21, r21
    6ac8:	44 0f       	add	r20, r20
    6aca:	55 1f       	adc	r21, r21
    6acc:	84 0f       	add	r24, r20
    6ace:	95 1f       	adc	r25, r21
    6ad0:	82 0f       	add	r24, r18
    6ad2:	93 1f       	adc	r25, r19
    6ad4:	8e 83       	std	Y+6, r24	; 0x06
    6ad6:	9f 83       	std	Y+7, r25	; 0x07

    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    6ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    6ada:	9f 81       	ldd	r25, Y+7	; 0x07
    6adc:	fc 01       	movw	r30, r24
    6ade:	80 81       	ld	r24, Z
    6ae0:	88 23       	and	r24, r24
    6ae2:	09 f5       	brne	.+66     	; 0x6b26 <lin_update_tx_flags+0xa4>
    {
        flag_offset = lin_frame_ptr->flag_offset;
    6ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    6ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    6ae8:	fc 01       	movw	r30, r24
    6aea:	85 81       	ldd	r24, Z+5	; 0x05
    6aec:	96 81       	ldd	r25, Z+6	; 0x06
    6aee:	89 83       	std	Y+1, r24	; 0x01
    6af0:	9a 83       	std	Y+2, r25	; 0x02
        flag_size = lin_frame_ptr->flag_size;
    6af2:	8e 81       	ldd	r24, Y+6	; 0x06
    6af4:	9f 81       	ldd	r25, Y+7	; 0x07
    6af6:	fc 01       	movw	r30, r24
    6af8:	87 81       	ldd	r24, Z+7	; 0x07
    6afa:	88 87       	std	Y+8, r24	; 0x08
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6afc:	1b 82       	std	Y+3, r1	; 0x03
    6afe:	0f c0       	rjmp	.+30     	; 0x6b1e <lin_update_tx_flags+0x9c>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU; //在这里更新flag位，整字节更新
    6b00:	89 81       	ldd	r24, Y+1	; 0x01
    6b02:	9a 81       	ldd	r25, Y+2	; 0x02
    6b04:	8c 5d       	subi	r24, 0xDC	; 220
    6b06:	99 4b       	sbci	r25, 0xB9	; 185
    6b08:	2f ef       	ldi	r18, 0xFF	; 255
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	20 83       	st	Z, r18
            flag_offset++;
    6b0e:	89 81       	ldd	r24, Y+1	; 0x01
    6b10:	9a 81       	ldd	r25, Y+2	; 0x02
    6b12:	01 96       	adiw	r24, 0x01	; 1
    6b14:	89 83       	std	Y+1, r24	; 0x01
    6b16:	9a 83       	std	Y+2, r25	; 0x02
    if (LIN_FRM_UNCD == lin_frame_ptr->frm_type)
    {
        flag_offset = lin_frame_ptr->flag_offset;
        flag_size = lin_frame_ptr->flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6b18:	8b 81       	ldd	r24, Y+3	; 0x03
    6b1a:	8f 5f       	subi	r24, 0xFF	; 255
    6b1c:	8b 83       	std	Y+3, r24	; 0x03
    6b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    6b20:	88 85       	ldd	r24, Y+8	; 0x08
    6b22:	98 17       	cp	r25, r24
    6b24:	68 f3       	brcs	.-38     	; 0x6b00 <lin_update_tx_flags+0x7e>
            flag_offset++;
        }
    }

    /* check event trigger frame and clear flag */
    if (LIN_FRM_EVNT == prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    6b26:	8c 81       	ldd	r24, Y+4	; 0x04
    6b28:	9d 81       	ldd	r25, Y+5	; 0x05
    6b2a:	fc 01       	movw	r30, r24
    6b2c:	26 81       	ldd	r18, Z+6	; 0x06
    6b2e:	37 81       	ldd	r19, Z+7	; 0x07
    6b30:	8b 85       	ldd	r24, Y+11	; 0x0b
    6b32:	88 2f       	mov	r24, r24
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	88 0f       	add	r24, r24
    6b38:	99 1f       	adc	r25, r25
    6b3a:	ac 01       	movw	r20, r24
    6b3c:	44 0f       	add	r20, r20
    6b3e:	55 1f       	adc	r21, r21
    6b40:	44 0f       	add	r20, r20
    6b42:	55 1f       	adc	r21, r21
    6b44:	84 0f       	add	r24, r20
    6b46:	95 1f       	adc	r25, r21
    6b48:	82 0f       	add	r24, r18
    6b4a:	93 1f       	adc	r25, r19
    6b4c:	fc 01       	movw	r30, r24
    6b4e:	80 81       	ld	r24, Z
    6b50:	81 30       	cpi	r24, 0x01	; 1
    6b52:	09 f0       	breq	.+2      	; 0x6b56 <lin_update_tx_flags+0xd4>
    6b54:	4e c0       	rjmp	.+156    	; 0x6bf2 <lin_update_tx_flags+0x170>
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
    6b56:	8e 81       	ldd	r24, Y+6	; 0x06
    6b58:	9f 81       	ldd	r25, Y+7	; 0x07
    6b5a:	fc 01       	movw	r30, r24
    6b5c:	80 85       	ldd	r24, Z+8	; 0x08
    6b5e:	91 85       	ldd	r25, Z+9	; 0x09
    6b60:	fc 01       	movw	r30, r24
    6b62:	81 81       	ldd	r24, Z+1	; 0x01
    6b64:	92 81       	ldd	r25, Z+2	; 0x02
    6b66:	fc 01       	movw	r30, r24
    6b68:	80 81       	ld	r24, Z
    6b6a:	89 87       	std	Y+9, r24	; 0x09
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
    6b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    6b70:	fc 01       	movw	r30, r24
    6b72:	26 81       	ldd	r18, Z+6	; 0x06
    6b74:	37 81       	ldd	r19, Z+7	; 0x07
    6b76:	89 85       	ldd	r24, Y+9	; 0x09
    6b78:	88 2f       	mov	r24, r24
    6b7a:	90 e0       	ldi	r25, 0x00	; 0
    6b7c:	88 0f       	add	r24, r24
    6b7e:	99 1f       	adc	r25, r25
    6b80:	ac 01       	movw	r20, r24
    6b82:	44 0f       	add	r20, r20
    6b84:	55 1f       	adc	r21, r21
    6b86:	44 0f       	add	r20, r20
    6b88:	55 1f       	adc	r21, r21
    6b8a:	84 0f       	add	r24, r20
    6b8c:	95 1f       	adc	r25, r21
    6b8e:	82 0f       	add	r24, r18
    6b90:	93 1f       	adc	r25, r19
    6b92:	fc 01       	movw	r30, r24
    6b94:	85 81       	ldd	r24, Z+5	; 0x05
    6b96:	96 81       	ldd	r25, Z+6	; 0x06
    6b98:	89 83       	std	Y+1, r24	; 0x01
    6b9a:	9a 83       	std	Y+2, r25	; 0x02
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
    6b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    6ba0:	fc 01       	movw	r30, r24
    6ba2:	26 81       	ldd	r18, Z+6	; 0x06
    6ba4:	37 81       	ldd	r19, Z+7	; 0x07
    6ba6:	89 85       	ldd	r24, Y+9	; 0x09
    6ba8:	88 2f       	mov	r24, r24
    6baa:	90 e0       	ldi	r25, 0x00	; 0
    6bac:	88 0f       	add	r24, r24
    6bae:	99 1f       	adc	r25, r25
    6bb0:	ac 01       	movw	r20, r24
    6bb2:	44 0f       	add	r20, r20
    6bb4:	55 1f       	adc	r21, r21
    6bb6:	44 0f       	add	r20, r20
    6bb8:	55 1f       	adc	r21, r21
    6bba:	84 0f       	add	r24, r20
    6bbc:	95 1f       	adc	r25, r21
    6bbe:	82 0f       	add	r24, r18
    6bc0:	93 1f       	adc	r25, r19
    6bc2:	fc 01       	movw	r30, r24
    6bc4:	87 81       	ldd	r24, Z+7	; 0x07
    6bc6:	88 87       	std	Y+8, r24	; 0x08
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6bc8:	1b 82       	std	Y+3, r1	; 0x03
    6bca:	0f c0       	rjmp	.+30     	; 0x6bea <lin_update_tx_flags+0x168>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
    6bcc:	89 81       	ldd	r24, Y+1	; 0x01
    6bce:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd0:	8c 5d       	subi	r24, 0xDC	; 220
    6bd2:	99 4b       	sbci	r25, 0xB9	; 185
    6bd4:	2f ef       	ldi	r18, 0xFF	; 255
    6bd6:	fc 01       	movw	r30, r24
    6bd8:	20 83       	st	Z, r18
            flag_offset++;
    6bda:	89 81       	ldd	r24, Y+1	; 0x01
    6bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    6bde:	01 96       	adiw	r24, 0x01	; 1
    6be0:	89 83       	std	Y+1, r24	; 0x01
    6be2:	9a 83       	std	Y+2, r25	; 0x02
    {
        associate_frame_offset = (l_u8)(*((lin_frame_ptr->frame_data_ptr)->associated_uncond_frame_ptr));
        flag_offset = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_offset;
        flag_size = prot_user_config_ptr->frame_tbl_ptr[associate_frame_offset].flag_size;
        /* Update transmit flags */
        for (i = 0U; i < flag_size; i++)
    6be4:	8b 81       	ldd	r24, Y+3	; 0x03
    6be6:	8f 5f       	subi	r24, 0xFF	; 255
    6be8:	8b 83       	std	Y+3, r24	; 0x03
    6bea:	9b 81       	ldd	r25, Y+3	; 0x03
    6bec:	88 85       	ldd	r24, Y+8	; 0x08
    6bee:	98 17       	cp	r25, r24
    6bf0:	68 f3       	brcs	.-38     	; 0x6bcc <lin_update_tx_flags+0x14a>
        {
            g_lin_flag_handle_tbl[flag_offset] = 0xFFU;
            flag_offset++;
        }
    }
}
    6bf2:	00 00       	nop
    6bf4:	2b 96       	adiw	r28, 0x0b	; 11
    6bf6:	cd bf       	out	0x3d, r28	; 61
    6bf8:	de bf       	out	0x3e, r29	; 62
    6bfa:	df 91       	pop	r29
    6bfc:	cf 91       	pop	r28
    6bfe:	08 95       	ret

00006c00 <lin_get_frame_index>:
 *
 * Implements    : lin_get_frame_index_Activity
 *END**************************************************************************/
l_u8 lin_get_frame_index(l_ifc_handle iii,
                         l_u8 id)
{
    6c00:	cf 93       	push	r28
    6c02:	df 93       	push	r29
    6c04:	cd b7       	in	r28, 0x3d	; 61
    6c06:	de b7       	in	r29, 0x3e	; 62
    6c08:	26 97       	sbiw	r28, 0x06	; 6
    6c0a:	cd bf       	out	0x3d, r28	; 61
    6c0c:	de bf       	out	0x3e, r29	; 62
    6c0e:	8d 83       	std	Y+5, r24	; 0x05
    6c10:	6e 83       	std	Y+6, r22	; 0x06
    l_u8 i;
    l_u8 retVal = 0xFFU;
    6c12:	8f ef       	ldi	r24, 0xFF	; 255
    6c14:	8a 83       	std	Y+2, r24	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6c16:	8d 81       	ldd	r24, Y+5	; 0x05
    6c18:	28 2f       	mov	r18, r24
    6c1a:	30 e0       	ldi	r19, 0x00	; 0
    6c1c:	4c e1       	ldi	r20, 0x1C	; 28
    6c1e:	42 9f       	mul	r20, r18
    6c20:	c0 01       	movw	r24, r0
    6c22:	43 9f       	mul	r20, r19
    6c24:	90 0d       	add	r25, r0
    6c26:	11 24       	eor	r1, r1
    6c28:	86 56       	subi	r24, 0x66	; 102
    6c2a:	9d 4b       	sbci	r25, 0xBD	; 189
    6c2c:	8b 83       	std	Y+3, r24	; 0x03
    6c2e:	9c 83       	std	Y+4, r25	; 0x04

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    6c30:	8b 81       	ldd	r24, Y+3	; 0x03
    6c32:	9c 81       	ldd	r25, Y+4	; 0x04
    6c34:	fc 01       	movw	r30, r24
    6c36:	84 81       	ldd	r24, Z+4	; 0x04
    6c38:	89 83       	std	Y+1, r24	; 0x01
    6c3a:	1b c0       	rjmp	.+54     	; 0x6c72 <lin_get_frame_index+0x72>
    {
        if (prot_user_config_ptr->list_identifiers_RAM_ptr[i] == id)
    6c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    6c40:	fc 01       	movw	r30, r24
    6c42:	22 85       	ldd	r18, Z+10	; 0x0a
    6c44:	33 85       	ldd	r19, Z+11	; 0x0b
    6c46:	89 81       	ldd	r24, Y+1	; 0x01
    6c48:	88 2f       	mov	r24, r24
    6c4a:	90 e0       	ldi	r25, 0x00	; 0
    6c4c:	82 0f       	add	r24, r18
    6c4e:	93 1f       	adc	r25, r19
    6c50:	fc 01       	movw	r30, r24
    6c52:	90 81       	ld	r25, Z
    6c54:	8e 81       	ldd	r24, Y+6	; 0x06
    6c56:	98 17       	cp	r25, r24
    6c58:	49 f4       	brne	.+18     	; 0x6c6c <lin_get_frame_index+0x6c>
        {
            retVal = (l_u8)(i + prot_user_config_ptr->frame_start - 1U);
    6c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    6c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    6c5e:	fc 01       	movw	r30, r24
    6c60:	95 81       	ldd	r25, Z+5	; 0x05
    6c62:	89 81       	ldd	r24, Y+1	; 0x01
    6c64:	89 0f       	add	r24, r25
    6c66:	81 50       	subi	r24, 0x01	; 1
    6c68:	8a 83       	std	Y+2, r24	; 0x02
            //找到一个就退出
            break;
    6c6a:	06 c0       	rjmp	.+12     	; 0x6c78 <lin_get_frame_index+0x78>
{
    l_u8 i;
    l_u8 retVal = 0xFFU;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];

    for (i = prot_user_config_ptr->number_of_configurable_frames; i > 0U; i--)
    6c6c:	89 81       	ldd	r24, Y+1	; 0x01
    6c6e:	81 50       	subi	r24, 0x01	; 1
    6c70:	89 83       	std	Y+1, r24	; 0x01
    6c72:	89 81       	ldd	r24, Y+1	; 0x01
    6c74:	88 23       	and	r24, r24
    6c76:	11 f7       	brne	.-60     	; 0x6c3c <lin_get_frame_index+0x3c>
            //找到一个就退出
            break;
        }
    }

    return retVal;
    6c78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6c7a:	26 96       	adiw	r28, 0x06	; 6
    6c7c:	cd bf       	out	0x3d, r28	; 61
    6c7e:	de bf       	out	0x3e, r29	; 62
    6c80:	df 91       	pop	r29
    6c82:	cf 91       	pop	r28
    6c84:	08 95       	ret

00006c86 <lin_process_uncd_frame>:
 * Implements    : lin_process_uncd_frame_Activity
 *END**************************************************************************/
void lin_process_uncd_frame(l_ifc_handle iii,
                            l_u8 id,
                            l_u8 type)
{
    6c86:	cf 93       	push	r28
    6c88:	df 93       	push	r29
    6c8a:	cd b7       	in	r28, 0x3d	; 61
    6c8c:	de b7       	in	r29, 0x3e	; 62
    6c8e:	60 97       	sbiw	r28, 0x10	; 16
    6c90:	cd bf       	out	0x3d, r28	; 61
    6c92:	de bf       	out	0x3e, r29	; 62
    6c94:	8e 87       	std	Y+14, r24	; 0x0e
    6c96:	6f 87       	std	Y+15, r22	; 0x0f
    6c98:	48 8b       	std	Y+16, r20	; 0x10
    l_u8 frame_index;
    l_u8 * response_buffer_ptr;
    l_u16 frame_byte_offset;
    l_u8 i;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    6c9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    6c9c:	28 2f       	mov	r18, r24
    6c9e:	30 e0       	ldi	r19, 0x00	; 0
    6ca0:	4c e1       	ldi	r20, 0x1C	; 28
    6ca2:	42 9f       	mul	r20, r18
    6ca4:	c0 01       	movw	r24, r0
    6ca6:	43 9f       	mul	r20, r19
    6ca8:	90 0d       	add	r25, r0
    6caa:	11 24       	eor	r1, r1
    6cac:	86 56       	subi	r24, 0x66	; 102
    6cae:	9d 4b       	sbci	r25, 0xBD	; 189
    6cb0:	8a 83       	std	Y+2, r24	; 0x02
    6cb2:	9b 83       	std	Y+3, r25	; 0x03
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6cb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    6cb6:	28 2f       	mov	r18, r24
    6cb8:	30 e0       	ldi	r19, 0x00	; 0
    6cba:	46 e1       	ldi	r20, 0x16	; 22
    6cbc:	42 9f       	mul	r20, r18
    6cbe:	c0 01       	movw	r24, r0
    6cc0:	43 9f       	mul	r20, r19
    6cc2:	90 0d       	add	r25, r0
    6cc4:	11 24       	eor	r1, r1
    6cc6:	80 56       	subi	r24, 0x60	; 96
    6cc8:	99 4b       	sbci	r25, 0xB9	; 185
    6cca:	8c 83       	std	Y+4, r24	; 0x04
    6ccc:	9d 83       	std	Y+5, r25	; 0x05
    l_u8 flag;
#endif /* (1U == SUPPORT_SLAVE_MODE) */
#if (1U == SUPPORT_MASTER_MODE)
    lin_master_data_t * master_data_ptr;
#endif /* (1U == SUPPORT_MASTER_MODE) */
    frame_index = lin_get_frame_index(iii, id);
    6cce:	6f 85       	ldd	r22, Y+15	; 0x0f
    6cd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    6cd2:	0e 94 00 36 	call	0x6c00	; 0x6c00 <lin_get_frame_index>
    6cd6:	8e 83       	std	Y+6, r24	; 0x06

    if (0xFFU != frame_index)
    6cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    6cda:	8f 3f       	cpi	r24, 0xFF	; 255
    6cdc:	09 f4       	brne	.+2      	; 0x6ce0 <lin_process_uncd_frame+0x5a>
    6cde:	e7 c0       	rjmp	.+462    	; 0x6eae <lin_process_uncd_frame+0x228>
    {
        response_buffer_ptr = prot_state_ptr->response_buffer_ptr;
    6ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    6ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    6ce4:	fc 01       	movw	r30, r24
    6ce6:	82 81       	ldd	r24, Z+2	; 0x02
    6ce8:	93 81       	ldd	r25, Z+3	; 0x03
    6cea:	8f 83       	std	Y+7, r24	; 0x07
    6cec:	98 87       	std	Y+8, r25	; 0x08

        /* Set frame length */
        prot_state_ptr->response_length = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_len;  // 长度参数也需要考虑在内
    6cee:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    6cf2:	fc 01       	movw	r30, r24
    6cf4:	26 81       	ldd	r18, Z+6	; 0x06
    6cf6:	37 81       	ldd	r19, Z+7	; 0x07
    6cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    6cfa:	88 2f       	mov	r24, r24
    6cfc:	90 e0       	ldi	r25, 0x00	; 0
    6cfe:	88 0f       	add	r24, r24
    6d00:	99 1f       	adc	r25, r25
    6d02:	ac 01       	movw	r20, r24
    6d04:	44 0f       	add	r20, r20
    6d06:	55 1f       	adc	r21, r21
    6d08:	44 0f       	add	r20, r20
    6d0a:	55 1f       	adc	r21, r21
    6d0c:	84 0f       	add	r24, r20
    6d0e:	95 1f       	adc	r25, r21
    6d10:	82 0f       	add	r24, r18
    6d12:	93 1f       	adc	r25, r19
    6d14:	fc 01       	movw	r30, r24
    6d16:	21 81       	ldd	r18, Z+1	; 0x01
    6d18:	8c 81       	ldd	r24, Y+4	; 0x04
    6d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    6d1c:	fc 01       	movw	r30, r24
    6d1e:	24 83       	std	Z+4, r18	; 0x04
        frame_byte_offset = prot_user_config_ptr->frame_tbl_ptr[frame_index].frm_offset;             // frm_offset是啥意思
    6d20:	8a 81       	ldd	r24, Y+2	; 0x02
    6d22:	9b 81       	ldd	r25, Y+3	; 0x03
    6d24:	fc 01       	movw	r30, r24
    6d26:	26 81       	ldd	r18, Z+6	; 0x06
    6d28:	37 81       	ldd	r19, Z+7	; 0x07
    6d2a:	8e 81       	ldd	r24, Y+6	; 0x06
    6d2c:	88 2f       	mov	r24, r24
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	88 0f       	add	r24, r24
    6d32:	99 1f       	adc	r25, r25
    6d34:	ac 01       	movw	r20, r24
    6d36:	44 0f       	add	r20, r20
    6d38:	55 1f       	adc	r21, r21
    6d3a:	44 0f       	add	r20, r20
    6d3c:	55 1f       	adc	r21, r21
    6d3e:	84 0f       	add	r24, r20
    6d40:	95 1f       	adc	r25, r21
    6d42:	82 0f       	add	r24, r18
    6d44:	93 1f       	adc	r25, r19
    6d46:	fc 01       	movw	r30, r24
    6d48:	83 81       	ldd	r24, Z+3	; 0x03
    6d4a:	94 81       	ldd	r25, Z+4	; 0x04
    6d4c:	89 87       	std	Y+9, r24	; 0x09
    6d4e:	9a 87       	std	Y+10, r25	; 0x0a

        /* Make unconditional frame */                                                               //
        if (MAKE_UNCONDITIONAL_FRAME == type)                                                        
    6d50:	88 89       	ldd	r24, Y+16	; 0x10
    6d52:	88 23       	and	r24, r24
    6d54:	09 f0       	breq	.+2      	; 0x6d58 <lin_process_uncd_frame+0xd2>
    6d56:	83 c0       	rjmp	.+262    	; 0x6e5e <lin_process_uncd_frame+0x1d8>
        {
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6d58:	8a 81       	ldd	r24, Y+2	; 0x02
    6d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    6d5c:	fc 01       	movw	r30, r24
    6d5e:	93 81       	ldd	r25, Z+3	; 0x03
    6d60:	81 e0       	ldi	r24, 0x01	; 1
    6d62:	89 27       	eor	r24, r25
    6d64:	88 23       	and	r24, r24
    6d66:	09 f4       	brne	.+2      	; 0x6d6a <lin_process_uncd_frame+0xe4>
    6d68:	a2 c0       	rjmp	.+324    	; 0x6eae <lin_process_uncd_frame+0x228>
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    6d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    6d6e:	fc 01       	movw	r30, r24
    6d70:	82 89       	ldd	r24, Z+18	; 0x12
    6d72:	28 2f       	mov	r18, r24
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	44 e2       	ldi	r20, 0x24	; 36
    6d78:	42 9f       	mul	r20, r18
    6d7a:	c0 01       	movw	r24, r0
    6d7c:	43 9f       	mul	r20, r19
    6d7e:	90 0d       	add	r25, r0
    6d80:	11 24       	eor	r1, r1
    6d82:	8a 58       	subi	r24, 0x8A	; 138
    6d84:	9d 4b       	sbci	r25, 0xBD	; 189
    6d86:	8b 87       	std	Y+11, r24	; 0x0b
    6d88:	9c 87       	std	Y+12, r25	; 0x0c

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    6d8a:	19 82       	std	Y+1, r1	; 0x01
    6d8c:	18 c0       	rjmp	.+48     	; 0x6dbe <lin_process_uncd_frame+0x138>
                {
                    /* Check if frame contain error signal */
                    if (id == node_attr_ptr->resp_err_frm_id_ptr[i])
    6d8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d90:	9c 85       	ldd	r25, Y+12	; 0x0c
    6d92:	fc 01       	movw	r30, r24
    6d94:	24 85       	ldd	r18, Z+12	; 0x0c
    6d96:	35 85       	ldd	r19, Z+13	; 0x0d
    6d98:	89 81       	ldd	r24, Y+1	; 0x01
    6d9a:	88 2f       	mov	r24, r24
    6d9c:	90 e0       	ldi	r25, 0x00	; 0
    6d9e:	82 0f       	add	r24, r18
    6da0:	93 1f       	adc	r25, r19
    6da2:	fc 01       	movw	r30, r24
    6da4:	90 81       	ld	r25, Z
    6da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6da8:	98 17       	cp	r25, r24
    6daa:	31 f4       	brne	.+12     	; 0x6db8 <lin_process_uncd_frame+0x132>
                    {
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
    6dac:	8c 81       	ldd	r24, Y+4	; 0x04
    6dae:	9d 81       	ldd	r25, Y+5	; 0x05
    6db0:	21 e0       	ldi	r18, 0x01	; 1
    6db2:	fc 01       	movw	r30, r24
    6db4:	25 8b       	std	Z+21, r18	; 0x15
                        break;
    6db6:	0a c0       	rjmp	.+20     	; 0x6dcc <lin_process_uncd_frame+0x146>
        #if (1U == SUPPORT_SLAVE_MODE)
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];

                for (i = 0U; i < node_attr_ptr->num_frame_have_esignal; i++)
    6db8:	89 81       	ldd	r24, Y+1	; 0x01
    6dba:	8f 5f       	subi	r24, 0xFF	; 255
    6dbc:	89 83       	std	Y+1, r24	; 0x01
    6dbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    6dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    6dc2:	fc 01       	movw	r30, r24
    6dc4:	96 85       	ldd	r25, Z+14	; 0x0e
    6dc6:	89 81       	ldd	r24, Y+1	; 0x01
    6dc8:	89 17       	cp	r24, r25
    6dca:	08 f3       	brcs	.-62     	; 0x6d8e <lin_process_uncd_frame+0x108>
                        prot_state_ptr->transmit_error_resp_sig_flg = (bool)1U;
                        break;
                    }
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];
    6dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    6dce:	88 2f       	mov	r24, r24
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	85 5d       	subi	r24, 0xD5	; 213
    6dd4:	99 4b       	sbci	r25, 0xB9	; 185
    6dd6:	fc 01       	movw	r30, r24
    6dd8:	80 81       	ld	r24, Z
    6dda:	8d 87       	std	Y+13, r24	; 0x0d

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6ddc:	19 82       	std	Y+1, r1	; 0x01
    6dde:	37 c0       	rjmp	.+110    	; 0x6e4e <lin_process_uncd_frame+0x1c8>
                {
                    if((flag & (1U << i)) != 0U)
    6de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6de2:	88 2f       	mov	r24, r24
    6de4:	90 e0       	ldi	r25, 0x00	; 0
    6de6:	29 81       	ldd	r18, Y+1	; 0x01
    6de8:	22 2f       	mov	r18, r18
    6dea:	30 e0       	ldi	r19, 0x00	; 0
    6dec:	02 c0       	rjmp	.+4      	; 0x6df2 <lin_process_uncd_frame+0x16c>
    6dee:	96 95       	lsr	r25
    6df0:	87 95       	ror	r24
    6df2:	2a 95       	dec	r18
    6df4:	e2 f7       	brpl	.-8      	; 0x6dee <lin_process_uncd_frame+0x168>
    6df6:	81 70       	andi	r24, 0x01	; 1
    6df8:	99 27       	eor	r25, r25
    6dfa:	89 2b       	or	r24, r25
    6dfc:	89 f0       	breq	.+34     	; 0x6e20 <lin_process_uncd_frame+0x19a>
                    {
                        response_buffer_ptr[i] = g_buffer_backup_data[i];
    6dfe:	89 81       	ldd	r24, Y+1	; 0x01
    6e00:	88 2f       	mov	r24, r24
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	2f 81       	ldd	r18, Y+7	; 0x07
    6e06:	38 85       	ldd	r19, Y+8	; 0x08
    6e08:	82 0f       	add	r24, r18
    6e0a:	93 1f       	adc	r25, r19
    6e0c:	29 81       	ldd	r18, Y+1	; 0x01
    6e0e:	22 2f       	mov	r18, r18
    6e10:	30 e0       	ldi	r19, 0x00	; 0
    6e12:	24 5e       	subi	r18, 0xE4	; 228
    6e14:	39 4b       	sbci	r19, 0xB9	; 185
    6e16:	f9 01       	movw	r30, r18
    6e18:	20 81       	ld	r18, Z
    6e1a:	fc 01       	movw	r30, r24
    6e1c:	20 83       	st	Z, r18
    6e1e:	14 c0       	rjmp	.+40     	; 0x6e48 <lin_process_uncd_frame+0x1c2>
                    }
                    else
                    {
                        response_buffer_ptr[i] = g_lin_frame_data_buffer[frame_byte_offset + i];
    6e20:	89 81       	ldd	r24, Y+1	; 0x01
    6e22:	88 2f       	mov	r24, r24
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	2f 81       	ldd	r18, Y+7	; 0x07
    6e28:	38 85       	ldd	r19, Y+8	; 0x08
    6e2a:	82 0f       	add	r24, r18
    6e2c:	93 1f       	adc	r25, r19
    6e2e:	29 81       	ldd	r18, Y+1	; 0x01
    6e30:	42 2f       	mov	r20, r18
    6e32:	50 e0       	ldi	r21, 0x00	; 0
    6e34:	29 85       	ldd	r18, Y+9	; 0x09
    6e36:	3a 85       	ldd	r19, Y+10	; 0x0a
    6e38:	24 0f       	add	r18, r20
    6e3a:	35 1f       	adc	r19, r21
    6e3c:	23 54       	subi	r18, 0x43	; 67
    6e3e:	3f 4b       	sbci	r19, 0xBF	; 191
    6e40:	f9 01       	movw	r30, r18
    6e42:	20 81       	ld	r18, Z
    6e44:	fc 01       	movw	r30, r24
    6e46:	20 83       	st	Z, r18
                }

                flag = g_lin_frame_updating_flag_tbl[frame_index];

                /* Get data from LIN frame buffer */
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6e48:	89 81       	ldd	r24, Y+1	; 0x01
    6e4a:	8f 5f       	subi	r24, 0xFF	; 255
    6e4c:	89 83       	std	Y+1, r24	; 0x01
    6e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    6e50:	9d 81       	ldd	r25, Y+5	; 0x05
    6e52:	fc 01       	movw	r30, r24
    6e54:	94 81       	ldd	r25, Z+4	; 0x04
    6e56:	89 81       	ldd	r24, Y+1	; 0x01
    6e58:	89 17       	cp	r24, r25
    6e5a:	10 f2       	brcs	.-124    	; 0x6de0 <lin_process_uncd_frame+0x15a>
                }
            }
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }
    }
}
    6e5c:	28 c0       	rjmp	.+80     	; 0x6eae <lin_process_uncd_frame+0x228>
            }
        }
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    6e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6e60:	9b 81       	ldd	r25, Y+3	; 0x03
    6e62:	fc 01       	movw	r30, r24
    6e64:	93 81       	ldd	r25, Z+3	; 0x03
    6e66:	81 e0       	ldi	r24, 0x01	; 1
    6e68:	89 27       	eor	r24, r25
    6e6a:	88 23       	and	r24, r24
    6e6c:	01 f1       	breq	.+64     	; 0x6eae <lin_process_uncd_frame+0x228>
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6e6e:	19 82       	std	Y+1, r1	; 0x01
    6e70:	17 c0       	rjmp	.+46     	; 0x6ea0 <lin_process_uncd_frame+0x21a>
                {
                    g_lin_frame_data_buffer[frame_byte_offset + i] = response_buffer_ptr[i];
    6e72:	89 81       	ldd	r24, Y+1	; 0x01
    6e74:	28 2f       	mov	r18, r24
    6e76:	30 e0       	ldi	r19, 0x00	; 0
    6e78:	89 85       	ldd	r24, Y+9	; 0x09
    6e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e7c:	82 0f       	add	r24, r18
    6e7e:	93 1f       	adc	r25, r19
    6e80:	29 81       	ldd	r18, Y+1	; 0x01
    6e82:	22 2f       	mov	r18, r18
    6e84:	30 e0       	ldi	r19, 0x00	; 0
    6e86:	4f 81       	ldd	r20, Y+7	; 0x07
    6e88:	58 85       	ldd	r21, Y+8	; 0x08
    6e8a:	24 0f       	add	r18, r20
    6e8c:	35 1f       	adc	r19, r21
    6e8e:	f9 01       	movw	r30, r18
    6e90:	20 81       	ld	r18, Z
    6e92:	83 54       	subi	r24, 0x43	; 67
    6e94:	9f 4b       	sbci	r25, 0xBF	; 191
    6e96:	fc 01       	movw	r30, r24
    6e98:	20 83       	st	Z, r18
        /* Update unconditional frame */
        else
        {
            if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
            {
                for (i = 0U; i < prot_state_ptr->response_length; i++)
    6e9a:	89 81       	ldd	r24, Y+1	; 0x01
    6e9c:	8f 5f       	subi	r24, 0xFF	; 255
    6e9e:	89 83       	std	Y+1, r24	; 0x01
    6ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    6ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    6ea4:	fc 01       	movw	r30, r24
    6ea6:	94 81       	ldd	r25, Z+4	; 0x04
    6ea8:	89 81       	ldd	r24, Y+1	; 0x01
    6eaa:	89 17       	cp	r24, r25
    6eac:	10 f3       	brcs	.-60     	; 0x6e72 <lin_process_uncd_frame+0x1ec>
                }
            }
        #endif /* (1U == SUPPORT_MASTER_MODE) */
        }
    }
}
    6eae:	00 00       	nop
    6eb0:	60 96       	adiw	r28, 0x10	; 16
    6eb2:	cd bf       	out	0x3d, r28	; 61
    6eb4:	de bf       	out	0x3e, r29	; 62
    6eb6:	df 91       	pop	r29
    6eb8:	cf 91       	pop	r28
    6eba:	08 95       	ret

00006ebc <lin_update_word_status_j2602>:
 * Description   : Update date word status.
 *
 * Implements    : lin_update_word_status_j2602_Activity
 *END**************************************************************************/
void lin_update_word_status_j2602(l_ifc_handle iii)
{
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	cd b7       	in	r28, 0x3d	; 61
    6ec2:	de b7       	in	r29, 0x3e	; 62
    6ec4:	28 97       	sbiw	r28, 0x08	; 8
    6ec6:	cd bf       	out	0x3d, r28	; 61
    6ec8:	de bf       	out	0x3e, r29	; 62
    6eca:	88 87       	std	Y+8, r24	; 0x08
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 overrun_flg;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6ecc:	88 85       	ldd	r24, Y+8	; 0x08
    6ece:	28 2f       	mov	r18, r24
    6ed0:	30 e0       	ldi	r19, 0x00	; 0
    6ed2:	46 e1       	ldi	r20, 0x16	; 22
    6ed4:	42 9f       	mul	r20, r18
    6ed6:	c0 01       	movw	r24, r0
    6ed8:	43 9f       	mul	r20, r19
    6eda:	90 0d       	add	r25, r0
    6edc:	11 24       	eor	r1, r1
    6ede:	80 56       	subi	r24, 0x60	; 96
    6ee0:	99 4b       	sbci	r25, 0xB9	; 185
    6ee2:	89 83       	std	Y+1, r24	; 0x01
    6ee4:	9a 83       	std	Y+2, r25	; 0x02

    err_in_res = prot_state_ptr->error_in_response;
    6ee6:	89 81       	ldd	r24, Y+1	; 0x01
    6ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    6eea:	fc 01       	movw	r30, r24
    6eec:	86 81       	ldd	r24, Z+6	; 0x06
    6eee:	8b 83       	std	Y+3, r24	; 0x03
    prot_state_ptr->error_in_response = 0;
    6ef0:	89 81       	ldd	r24, Y+1	; 0x01
    6ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ef4:	fc 01       	movw	r30, r24
    6ef6:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    6ef8:	89 81       	ldd	r24, Y+1	; 0x01
    6efa:	9a 81       	ldd	r25, Y+2	; 0x02
    6efc:	fc 01       	movw	r30, r24
    6efe:	85 81       	ldd	r24, Z+5	; 0x05
    6f00:	8c 83       	std	Y+4, r24	; 0x04
    overrun_flg = prot_state_ptr->overrun_flg;
    6f02:	89 81       	ldd	r24, Y+1	; 0x01
    6f04:	9a 81       	ldd	r25, Y+2	; 0x02
    6f06:	fc 01       	movw	r30, r24
    6f08:	83 85       	ldd	r24, Z+11	; 0x0b
    6f0a:	8d 83       	std	Y+5, r24	; 0x05

    word_status_ptr = &prot_state_ptr->word_status;
    6f0c:	89 81       	ldd	r24, Y+1	; 0x01
    6f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    6f10:	0c 96       	adiw	r24, 0x0c	; 12
    6f12:	8e 83       	std	Y+6, r24	; 0x06
    6f14:	9f 83       	std	Y+7, r25	; 0x07

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    6f16:	8e 81       	ldd	r24, Y+6	; 0x06
    6f18:	9f 81       	ldd	r25, Y+7	; 0x07
    6f1a:	fc 01       	movw	r30, r24
    6f1c:	80 81       	ld	r24, Z
    6f1e:	81 70       	andi	r24, 0x01	; 1
    6f20:	98 2f       	mov	r25, r24
    6f22:	8b 81       	ldd	r24, Y+3	; 0x03
    6f24:	89 2b       	or	r24, r25
    6f26:	28 2f       	mov	r18, r24
    6f28:	21 70       	andi	r18, 0x01	; 1
    6f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    6f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    6f2e:	21 70       	andi	r18, 0x01	; 1
    6f30:	fc 01       	movw	r30, r24
    6f32:	30 81       	ld	r19, Z
    6f34:	3e 7f       	andi	r19, 0xFE	; 254
    6f36:	23 2b       	or	r18, r19
    6f38:	fc 01       	movw	r30, r24
    6f3a:	20 83       	st	Z, r18
    word_status_ptr->successful_transfer |= suc_in_tras;
    6f3c:	8e 81       	ldd	r24, Y+6	; 0x06
    6f3e:	9f 81       	ldd	r25, Y+7	; 0x07
    6f40:	fc 01       	movw	r30, r24
    6f42:	80 81       	ld	r24, Z
    6f44:	86 95       	lsr	r24
    6f46:	81 70       	andi	r24, 0x01	; 1
    6f48:	98 2f       	mov	r25, r24
    6f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    6f4c:	89 2b       	or	r24, r25
    6f4e:	28 2f       	mov	r18, r24
    6f50:	21 70       	andi	r18, 0x01	; 1
    6f52:	8e 81       	ldd	r24, Y+6	; 0x06
    6f54:	9f 81       	ldd	r25, Y+7	; 0x07
    6f56:	21 70       	andi	r18, 0x01	; 1
    6f58:	22 0f       	add	r18, r18
    6f5a:	fc 01       	movw	r30, r24
    6f5c:	30 81       	ld	r19, Z
    6f5e:	3d 7f       	andi	r19, 0xFD	; 253
    6f60:	23 2b       	or	r18, r19
    6f62:	fc 01       	movw	r30, r24
    6f64:	20 83       	st	Z, r18


    word_status_ptr->overrun = overrun_flg;
    6f66:	8d 81       	ldd	r24, Y+5	; 0x05
    6f68:	28 2f       	mov	r18, r24
    6f6a:	21 70       	andi	r18, 0x01	; 1
    6f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    6f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    6f70:	21 70       	andi	r18, 0x01	; 1
    6f72:	22 0f       	add	r18, r18
    6f74:	22 0f       	add	r18, r18
    6f76:	fc 01       	movw	r30, r24
    6f78:	30 81       	ld	r19, Z
    6f7a:	3b 7f       	andi	r19, 0xFB	; 251
    6f7c:	23 2b       	or	r18, r19
    6f7e:	fc 01       	movw	r30, r24
    6f80:	20 83       	st	Z, r18
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    6f82:	89 81       	ldd	r24, Y+1	; 0x01
    6f84:	9a 81       	ldd	r25, Y+2	; 0x02
    6f86:	fc 01       	movw	r30, r24
    6f88:	21 85       	ldd	r18, Z+9	; 0x09
    6f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    6f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    6f8e:	fc 01       	movw	r30, r24
    6f90:	21 83       	std	Z+1, r18	; 0x01

    if(prot_state_ptr->go_to_sleep_flg == true)
    6f92:	89 81       	ldd	r24, Y+1	; 0x01
    6f94:	9a 81       	ldd	r25, Y+2	; 0x02
    6f96:	fc 01       	movw	r30, r24
    6f98:	87 81       	ldd	r24, Z+7	; 0x07
    6f9a:	88 23       	and	r24, r24
    6f9c:	39 f0       	breq	.+14     	; 0x6fac <lin_update_word_status_j2602+0xf0>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    6f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    6fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    6fa2:	fc 01       	movw	r30, r24
    6fa4:	20 81       	ld	r18, Z
    6fa6:	28 60       	ori	r18, 0x08	; 8
    6fa8:	fc 01       	movw	r30, r24
    6faa:	20 83       	st	Z, r18
    }
}
    6fac:	00 00       	nop
    6fae:	28 96       	adiw	r28, 0x08	; 8
    6fb0:	cd bf       	out	0x3d, r28	; 61
    6fb2:	de bf       	out	0x3e, r29	; 62
    6fb4:	df 91       	pop	r29
    6fb6:	cf 91       	pop	r28
    6fb8:	08 95       	ret

00006fba <lin_update_word_status_lin21>:
 *
 * Implements    : lin_update_word_status_lin21_Activity
 *END**************************************************************************/
void lin_update_word_status_lin21(l_ifc_handle iii,
                                  lin_lld_event_id_t event_id)
{
    6fba:	cf 93       	push	r28
    6fbc:	df 93       	push	r29
    6fbe:	cd b7       	in	r28, 0x3d	; 61
    6fc0:	de b7       	in	r29, 0x3e	; 62
    6fc2:	2a 97       	sbiw	r28, 0x0a	; 10
    6fc4:	cd bf       	out	0x3d, r28	; 61
    6fc6:	de bf       	out	0x3e, r29	; 62
    6fc8:	89 87       	std	Y+9, r24	; 0x09
    6fca:	6a 87       	std	Y+10, r22	; 0x0a
    l_u8 err_in_res;
    l_u8 suc_in_tras;
    l_u8 save_config;
    l_u8 overrun_flag;
    lin_word_status_str_t * word_status_ptr;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    6fcc:	89 85       	ldd	r24, Y+9	; 0x09
    6fce:	28 2f       	mov	r18, r24
    6fd0:	30 e0       	ldi	r19, 0x00	; 0
    6fd2:	46 e1       	ldi	r20, 0x16	; 22
    6fd4:	42 9f       	mul	r20, r18
    6fd6:	c0 01       	movw	r24, r0
    6fd8:	43 9f       	mul	r20, r19
    6fda:	90 0d       	add	r25, r0
    6fdc:	11 24       	eor	r1, r1
    6fde:	80 56       	subi	r24, 0x60	; 96
    6fe0:	99 4b       	sbci	r25, 0xB9	; 185
    6fe2:	89 83       	std	Y+1, r24	; 0x01
    6fe4:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    const lin_master_data_t * master_data_ptr;
    l_u8 active_schedule_id;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    err_in_res = prot_state_ptr->error_in_response;
    6fe6:	89 81       	ldd	r24, Y+1	; 0x01
    6fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    6fea:	fc 01       	movw	r30, r24
    6fec:	86 81       	ldd	r24, Z+6	; 0x06
    6fee:	8b 83       	std	Y+3, r24	; 0x03
    prot_state_ptr->error_in_response = 0;
    6ff0:	89 81       	ldd	r24, Y+1	; 0x01
    6ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ff4:	fc 01       	movw	r30, r24
    6ff6:	16 82       	std	Z+6, r1	; 0x06
    suc_in_tras = prot_state_ptr->successful_transfer;
    6ff8:	89 81       	ldd	r24, Y+1	; 0x01
    6ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    6ffc:	fc 01       	movw	r30, r24
    6ffe:	85 81       	ldd	r24, Z+5	; 0x05
    7000:	8c 83       	std	Y+4, r24	; 0x04
    /* use of ternary operator below is for being MISRA compliant */
    save_config = (l_u8)(prot_state_ptr->save_config_flg ? 1U : 0U);
    7002:	89 81       	ldd	r24, Y+1	; 0x01
    7004:	9a 81       	ldd	r25, Y+2	; 0x02
    7006:	fc 01       	movw	r30, r24
    7008:	87 85       	ldd	r24, Z+15	; 0x0f
    700a:	88 23       	and	r24, r24
    700c:	11 f0       	breq	.+4      	; 0x7012 <lin_update_word_status_lin21+0x58>
    700e:	81 e0       	ldi	r24, 0x01	; 1
    7010:	01 c0       	rjmp	.+2      	; 0x7014 <lin_update_word_status_lin21+0x5a>
    7012:	80 e0       	ldi	r24, 0x00	; 0
    7014:	8d 83       	std	Y+5, r24	; 0x05
    overrun_flag = prot_state_ptr->overrun_flg;
    7016:	89 81       	ldd	r24, Y+1	; 0x01
    7018:	9a 81       	ldd	r25, Y+2	; 0x02
    701a:	fc 01       	movw	r30, r24
    701c:	83 85       	ldd	r24, Z+11	; 0x0b
    701e:	8e 83       	std	Y+6, r24	; 0x06

    word_status_ptr = &prot_state_ptr->word_status;
    7020:	89 81       	ldd	r24, Y+1	; 0x01
    7022:	9a 81       	ldd	r25, Y+2	; 0x02
    7024:	0c 96       	adiw	r24, 0x0c	; 12
    7026:	8f 83       	std	Y+7, r24	; 0x07
    7028:	98 87       	std	Y+8, r25	; 0x08
    word_status_ptr->overrun = overrun_flag;
    702a:	8e 81       	ldd	r24, Y+6	; 0x06
    702c:	28 2f       	mov	r18, r24
    702e:	21 70       	andi	r18, 0x01	; 1
    7030:	8f 81       	ldd	r24, Y+7	; 0x07
    7032:	98 85       	ldd	r25, Y+8	; 0x08
    7034:	21 70       	andi	r18, 0x01	; 1
    7036:	22 0f       	add	r18, r18
    7038:	22 0f       	add	r18, r18
    703a:	fc 01       	movw	r30, r24
    703c:	30 81       	ld	r19, Z
    703e:	3b 7f       	andi	r19, 0xFB	; 251
    7040:	23 2b       	or	r18, r19
    7042:	fc 01       	movw	r30, r24
    7044:	20 83       	st	Z, r18

    /* values for all processed frames */
    word_status_ptr->error_in_res |= err_in_res;
    7046:	8f 81       	ldd	r24, Y+7	; 0x07
    7048:	98 85       	ldd	r25, Y+8	; 0x08
    704a:	fc 01       	movw	r30, r24
    704c:	80 81       	ld	r24, Z
    704e:	81 70       	andi	r24, 0x01	; 1
    7050:	98 2f       	mov	r25, r24
    7052:	8b 81       	ldd	r24, Y+3	; 0x03
    7054:	89 2b       	or	r24, r25
    7056:	28 2f       	mov	r18, r24
    7058:	21 70       	andi	r18, 0x01	; 1
    705a:	8f 81       	ldd	r24, Y+7	; 0x07
    705c:	98 85       	ldd	r25, Y+8	; 0x08
    705e:	21 70       	andi	r18, 0x01	; 1
    7060:	fc 01       	movw	r30, r24
    7062:	30 81       	ld	r19, Z
    7064:	3e 7f       	andi	r19, 0xFE	; 254
    7066:	23 2b       	or	r18, r19
    7068:	fc 01       	movw	r30, r24
    706a:	20 83       	st	Z, r18
    word_status_ptr->successful_transfer |= suc_in_tras;
    706c:	8f 81       	ldd	r24, Y+7	; 0x07
    706e:	98 85       	ldd	r25, Y+8	; 0x08
    7070:	fc 01       	movw	r30, r24
    7072:	80 81       	ld	r24, Z
    7074:	86 95       	lsr	r24
    7076:	81 70       	andi	r24, 0x01	; 1
    7078:	98 2f       	mov	r25, r24
    707a:	8c 81       	ldd	r24, Y+4	; 0x04
    707c:	89 2b       	or	r24, r25
    707e:	28 2f       	mov	r18, r24
    7080:	21 70       	andi	r18, 0x01	; 1
    7082:	8f 81       	ldd	r24, Y+7	; 0x07
    7084:	98 85       	ldd	r25, Y+8	; 0x08
    7086:	21 70       	andi	r18, 0x01	; 1
    7088:	22 0f       	add	r18, r18
    708a:	fc 01       	movw	r30, r24
    708c:	30 81       	ld	r19, Z
    708e:	3d 7f       	andi	r19, 0xFD	; 253
    7090:	23 2b       	or	r18, r19
    7092:	fc 01       	movw	r30, r24
    7094:	20 83       	st	Z, r18
    word_status_ptr->last_pid = prot_state_ptr->last_pid;
    7096:	89 81       	ldd	r24, Y+1	; 0x01
    7098:	9a 81       	ldd	r25, Y+2	; 0x02
    709a:	fc 01       	movw	r30, r24
    709c:	21 85       	ldd	r18, Z+9	; 0x09
    709e:	8f 81       	ldd	r24, Y+7	; 0x07
    70a0:	98 85       	ldd	r25, Y+8	; 0x08
    70a2:	fc 01       	movw	r30, r24
    70a4:	21 83       	std	Z+1, r18	; 0x01

    if(prot_state_ptr->go_to_sleep_flg == true)
    70a6:	89 81       	ldd	r24, Y+1	; 0x01
    70a8:	9a 81       	ldd	r25, Y+2	; 0x02
    70aa:	fc 01       	movw	r30, r24
    70ac:	87 81       	ldd	r24, Z+7	; 0x07
    70ae:	88 23       	and	r24, r24
    70b0:	39 f0       	breq	.+14     	; 0x70c0 <lin_update_word_status_lin21+0x106>
    {
        /* Set go to sleep flag for word status*/
        word_status_ptr->go_to_sleep_flg = 1;
    70b2:	8f 81       	ldd	r24, Y+7	; 0x07
    70b4:	98 85       	ldd	r25, Y+8	; 0x08
    70b6:	fc 01       	movw	r30, r24
    70b8:	20 81       	ld	r18, Z
    70ba:	28 60       	ori	r18, 0x08	; 8
    70bc:	fc 01       	movw	r30, r24
    70be:	20 83       	st	Z, r18
    }

    if(LIN_LLD_BUS_ACTIVITY_TIMEOUT != event_id)
    70c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    70c2:	88 30       	cpi	r24, 0x08	; 8
    70c4:	39 f0       	breq	.+14     	; 0x70d4 <lin_update_word_status_lin21+0x11a>
    {
        /* Set bus activity timeout */
        word_status_ptr->bus_activity = 1U;
    70c6:	8f 81       	ldd	r24, Y+7	; 0x07
    70c8:	98 85       	ldd	r25, Y+8	; 0x08
    70ca:	fc 01       	movw	r30, r24
    70cc:	20 81       	ld	r18, Z
    70ce:	20 61       	ori	r18, 0x10	; 16
    70d0:	fc 01       	movw	r30, r24
    70d2:	20 83       	st	Z, r18
    }
    else
#endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* For Slave node - using ternary operator is a workaround for MISRA */
        word_status_ptr->event_trigger_collision_flg = 0U;
    70d4:	8f 81       	ldd	r24, Y+7	; 0x07
    70d6:	98 85       	ldd	r25, Y+8	; 0x08
    70d8:	fc 01       	movw	r30, r24
    70da:	20 81       	ld	r18, Z
    70dc:	2f 7d       	andi	r18, 0xDF	; 223
    70de:	fc 01       	movw	r30, r24
    70e0:	20 83       	st	Z, r18
        /* Updated save configuration value to word status */
        word_status_ptr->save_config_flg = save_config;
    70e2:	8d 81       	ldd	r24, Y+5	; 0x05
    70e4:	28 2f       	mov	r18, r24
    70e6:	21 70       	andi	r18, 0x01	; 1
    70e8:	8f 81       	ldd	r24, Y+7	; 0x07
    70ea:	98 85       	ldd	r25, Y+8	; 0x08
    70ec:	21 70       	andi	r18, 0x01	; 1
    70ee:	22 95       	swap	r18
    70f0:	22 0f       	add	r18, r18
    70f2:	22 0f       	add	r18, r18
    70f4:	20 7c       	andi	r18, 0xC0	; 192
    70f6:	fc 01       	movw	r30, r24
    70f8:	30 81       	ld	r19, Z
    70fa:	3f 7b       	andi	r19, 0xBF	; 191
    70fc:	23 2b       	or	r18, r19
    70fe:	fc 01       	movw	r30, r24
    7100:	20 83       	st	Z, r18
        word_status_ptr->reserved = 0U;
    7102:	8f 81       	ldd	r24, Y+7	; 0x07
    7104:	98 85       	ldd	r25, Y+8	; 0x08
    7106:	fc 01       	movw	r30, r24
    7108:	20 81       	ld	r18, Z
    710a:	2f 77       	andi	r18, 0x7F	; 127
    710c:	fc 01       	movw	r30, r24
    710e:	20 83       	st	Z, r18
    }
}
    7110:	00 00       	nop
    7112:	2a 96       	adiw	r28, 0x0a	; 10
    7114:	cd bf       	out	0x3d, r28	; 61
    7116:	de bf       	out	0x3e, r29	; 62
    7118:	df 91       	pop	r29
    711a:	cf 91       	pop	r28
    711c:	08 95       	ret

0000711e <lin_update_err_signal>:
 *
 * Implements    : lin_update_err_signal_Activity
 *END**************************************************************************/
void lin_update_err_signal(l_ifc_handle iii,
                           l_u8 frm_id)
{
    711e:	cf 93       	push	r28
    7120:	df 93       	push	r29
    7122:	cd b7       	in	r28, 0x3d	; 61
    7124:	de b7       	in	r29, 0x3e	; 62
    7126:	2c 97       	sbiw	r28, 0x0c	; 12
    7128:	cd bf       	out	0x3d, r28	; 61
    712a:	de bf       	out	0x3e, r29	; 62
    712c:	8b 87       	std	Y+11, r24	; 0x0b
    712e:	6c 87       	std	Y+12, r22	; 0x0c
    l_u8 i;
    const l_u16* byte_offset_temp_ptr;
    const l_u8* bit_offset_temp_ptr;
    l_u8 err_in_res = g_lin_protocol_state_array[iii].error_in_response;
    7130:	8b 85       	ldd	r24, Y+11	; 0x0b
    7132:	28 2f       	mov	r18, r24
    7134:	30 e0       	ldi	r19, 0x00	; 0
    7136:	46 e1       	ldi	r20, 0x16	; 22
    7138:	42 9f       	mul	r20, r18
    713a:	c0 01       	movw	r24, r0
    713c:	43 9f       	mul	r20, r19
    713e:	90 0d       	add	r25, r0
    7140:	11 24       	eor	r1, r1
    7142:	8a 55       	subi	r24, 0x5A	; 90
    7144:	99 4b       	sbci	r25, 0xB9	; 185
    7146:	fc 01       	movw	r30, r24
    7148:	80 81       	ld	r24, Z
    714a:	8a 83       	std	Y+2, r24	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    714c:	8b 85       	ldd	r24, Y+11	; 0x0b
    714e:	28 2f       	mov	r18, r24
    7150:	30 e0       	ldi	r19, 0x00	; 0
    7152:	4c e1       	ldi	r20, 0x1C	; 28
    7154:	42 9f       	mul	r20, r18
    7156:	c0 01       	movw	r24, r0
    7158:	43 9f       	mul	r20, r19
    715a:	90 0d       	add	r25, r0
    715c:	11 24       	eor	r1, r1
    715e:	86 56       	subi	r24, 0x66	; 102
    7160:	9d 4b       	sbci	r25, 0xBD	; 189
    7162:	8b 83       	std	Y+3, r24	; 0x03
    7164:	9c 83       	std	Y+4, r25	; 0x04
    const lin_node_attribute_t * node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    7166:	8b 81       	ldd	r24, Y+3	; 0x03
    7168:	9c 81       	ldd	r25, Y+4	; 0x04
    716a:	fc 01       	movw	r30, r24
    716c:	82 89       	ldd	r24, Z+18	; 0x12
    716e:	28 2f       	mov	r18, r24
    7170:	30 e0       	ldi	r19, 0x00	; 0
    7172:	44 e2       	ldi	r20, 0x24	; 36
    7174:	42 9f       	mul	r20, r18
    7176:	c0 01       	movw	r24, r0
    7178:	43 9f       	mul	r20, r19
    717a:	90 0d       	add	r25, r0
    717c:	11 24       	eor	r1, r1
    717e:	8a 58       	subi	r24, 0x8A	; 138
    7180:	9d 4b       	sbci	r25, 0xBD	; 189
    7182:	8d 83       	std	Y+5, r24	; 0x05
    7184:	9e 83       	std	Y+6, r25	; 0x06

    if (frm_id < LIN_NUM_OF_FRMS)
    7186:	8c 85       	ldd	r24, Y+12	; 0x0c
    7188:	84 30       	cpi	r24, 0x04	; 4
    718a:	08 f0       	brcs	.+2      	; 0x718e <lin_update_err_signal+0x70>
    718c:	6f c0       	rjmp	.+222    	; 0x726c <lin_update_err_signal+0x14e>
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
    718e:	8b 81       	ldd	r24, Y+3	; 0x03
    7190:	9c 81       	ldd	r25, Y+4	; 0x04
    7192:	fc 01       	movw	r30, r24
    7194:	26 81       	ldd	r18, Z+6	; 0x06
    7196:	37 81       	ldd	r19, Z+7	; 0x07
    7198:	8c 85       	ldd	r24, Y+12	; 0x0c
    719a:	88 2f       	mov	r24, r24
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	88 0f       	add	r24, r24
    71a0:	99 1f       	adc	r25, r25
    71a2:	ac 01       	movw	r20, r24
    71a4:	44 0f       	add	r20, r20
    71a6:	55 1f       	adc	r21, r21
    71a8:	44 0f       	add	r20, r20
    71aa:	55 1f       	adc	r21, r21
    71ac:	84 0f       	add	r24, r20
    71ae:	95 1f       	adc	r25, r21
    71b0:	82 0f       	add	r24, r18
    71b2:	93 1f       	adc	r25, r19
    71b4:	fc 01       	movw	r30, r24
    71b6:	80 81       	ld	r24, Z
    71b8:	81 30       	cpi	r24, 0x01	; 1
    71ba:	09 f4       	brne	.+2      	; 0x71be <lin_update_err_signal+0xa0>
    71bc:	57 c0       	rjmp	.+174    	; 0x726c <lin_update_err_signal+0x14e>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
    71be:	19 82       	std	Y+1, r1	; 0x01
    71c0:	4d c0       	rjmp	.+154    	; 0x725c <lin_update_err_signal+0x13e>
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
    71c2:	8d 81       	ldd	r24, Y+5	; 0x05
    71c4:	9e 81       	ldd	r25, Y+6	; 0x06
    71c6:	fc 01       	movw	r30, r24
    71c8:	20 89       	ldd	r18, Z+16	; 0x10
    71ca:	31 89       	ldd	r19, Z+17	; 0x11
    71cc:	89 81       	ldd	r24, Y+1	; 0x01
    71ce:	88 2f       	mov	r24, r24
    71d0:	90 e0       	ldi	r25, 0x00	; 0
    71d2:	88 0f       	add	r24, r24
    71d4:	99 1f       	adc	r25, r25
    71d6:	82 0f       	add	r24, r18
    71d8:	93 1f       	adc	r25, r19
    71da:	8f 83       	std	Y+7, r24	; 0x07
    71dc:	98 87       	std	Y+8, r25	; 0x08
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
    71de:	8d 81       	ldd	r24, Y+5	; 0x05
    71e0:	9e 81       	ldd	r25, Y+6	; 0x06
    71e2:	fc 01       	movw	r30, r24
    71e4:	22 89       	ldd	r18, Z+18	; 0x12
    71e6:	33 89       	ldd	r19, Z+19	; 0x13
    71e8:	89 81       	ldd	r24, Y+1	; 0x01
    71ea:	88 2f       	mov	r24, r24
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	82 0f       	add	r24, r18
    71f0:	93 1f       	adc	r25, r19
    71f2:	89 87       	std	Y+9, r24	; 0x09
    71f4:	9a 87       	std	Y+10, r25	; 0x0a
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    71f6:	8f 81       	ldd	r24, Y+7	; 0x07
    71f8:	98 85       	ldd	r25, Y+8	; 0x08
    71fa:	fc 01       	movw	r30, r24
    71fc:	80 81       	ld	r24, Z
    71fe:	91 81       	ldd	r25, Z+1	; 0x01
    7200:	2f 81       	ldd	r18, Y+7	; 0x07
    7202:	38 85       	ldd	r19, Y+8	; 0x08
    7204:	f9 01       	movw	r30, r18
    7206:	20 81       	ld	r18, Z
    7208:	31 81       	ldd	r19, Z+1	; 0x01
    720a:	23 54       	subi	r18, 0x43	; 67
    720c:	3f 4b       	sbci	r19, 0xBF	; 191
    720e:	f9 01       	movw	r30, r18
    7210:	60 81       	ld	r22, Z
    7212:	29 85       	ldd	r18, Y+9	; 0x09
    7214:	3a 85       	ldd	r19, Y+10	; 0x0a
    7216:	f9 01       	movw	r30, r18
    7218:	20 81       	ld	r18, Z
    721a:	42 2f       	mov	r20, r18
    721c:	50 e0       	ldi	r21, 0x00	; 0
    721e:	21 e0       	ldi	r18, 0x01	; 1
    7220:	30 e0       	ldi	r19, 0x00	; 0
    7222:	02 c0       	rjmp	.+4      	; 0x7228 <lin_update_err_signal+0x10a>
    7224:	22 0f       	add	r18, r18
    7226:	33 1f       	adc	r19, r19
    7228:	4a 95       	dec	r20
    722a:	e2 f7       	brpl	.-8      	; 0x7224 <lin_update_err_signal+0x106>
    722c:	20 95       	com	r18
    722e:	62 23       	and	r22, r18
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
    7230:	2a 81       	ldd	r18, Y+2	; 0x02
    7232:	22 2f       	mov	r18, r18
    7234:	30 e0       	ldi	r19, 0x00	; 0
    7236:	49 85       	ldd	r20, Y+9	; 0x09
    7238:	5a 85       	ldd	r21, Y+10	; 0x0a
    723a:	fa 01       	movw	r30, r20
    723c:	40 81       	ld	r20, Z
    723e:	44 2f       	mov	r20, r20
    7240:	50 e0       	ldi	r21, 0x00	; 0
    7242:	02 c0       	rjmp	.+4      	; 0x7248 <lin_update_err_signal+0x12a>
    7244:	22 0f       	add	r18, r18
    7246:	33 1f       	adc	r19, r19
    7248:	4a 95       	dec	r20
    724a:	e2 f7       	brpl	.-8      	; 0x7244 <lin_update_err_signal+0x126>
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
            {
                byte_offset_temp_ptr = &node_attr_ptr->response_error_byte_offset_ptr[i];
                bit_offset_temp_ptr = &node_attr_ptr->response_error_bit_offset_ptr[i];
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
    724c:	26 2b       	or	r18, r22
    724e:	83 54       	subi	r24, 0x43	; 67
    7250:	9f 4b       	sbci	r25, 0xBF	; 191
    7252:	fc 01       	movw	r30, r24
    7254:	20 83       	st	Z, r18
    if (frm_id < LIN_NUM_OF_FRMS)
    {
        /* Set error signal equal to error in response */
        if (LIN_FRM_EVNT != prot_user_config_ptr->frame_tbl_ptr[frm_id].frm_type)
        {
            for (i = 0; i < node_attr_ptr->num_frame_have_esignal; i++)
    7256:	89 81       	ldd	r24, Y+1	; 0x01
    7258:	8f 5f       	subi	r24, 0xFF	; 255
    725a:	89 83       	std	Y+1, r24	; 0x01
    725c:	8d 81       	ldd	r24, Y+5	; 0x05
    725e:	9e 81       	ldd	r25, Y+6	; 0x06
    7260:	fc 01       	movw	r30, r24
    7262:	96 85       	ldd	r25, Z+14	; 0x0e
    7264:	89 81       	ldd	r24, Y+1	; 0x01
    7266:	89 17       	cp	r24, r25
    7268:	08 f4       	brcc	.+2      	; 0x726c <lin_update_err_signal+0x14e>
    726a:	ab cf       	rjmp	.-170    	; 0x71c2 <lin_update_err_signal+0xa4>
                g_lin_frame_data_buffer[*byte_offset_temp_ptr] = (l_u8)((g_lin_frame_data_buffer[*byte_offset_temp_ptr] & (~(1U << (*bit_offset_temp_ptr)))) |
                                                        ((l_u8)(err_in_res << (*bit_offset_temp_ptr))));
            }
        }
    }
}
    726c:	00 00       	nop
    726e:	2c 96       	adiw	r28, 0x0c	; 12
    7270:	cd bf       	out	0x3d, r28	; 61
    7272:	de bf       	out	0x3e, r29	; 62
    7274:	df 91       	pop	r29
    7276:	cf 91       	pop	r28
    7278:	08 95       	ret

0000727a <lin_update_rx_evnt_frame>:
 *
 * Implements    : lin_update_rx_evnt_frame_Activity
 *END**************************************************************************/
void lin_update_rx_evnt_frame(l_ifc_handle iii,
                              l_u8 pid)
{
    727a:	cf 93       	push	r28
    727c:	df 93       	push	r29
    727e:	cd b7       	in	r28, 0x3d	; 61
    7280:	de b7       	in	r29, 0x3e	; 62
    7282:	29 97       	sbiw	r28, 0x09	; 9
    7284:	cd bf       	out	0x3d, r28	; 61
    7286:	de bf       	out	0x3e, r29	; 62
    7288:	88 87       	std	Y+8, r24	; 0x08
    728a:	69 87       	std	Y+9, r22	; 0x09
    const lin_associate_frame_t * ptr;
    l_u8 frame_index, i, associate_id;
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    728c:	88 85       	ldd	r24, Y+8	; 0x08
    728e:	28 2f       	mov	r18, r24
    7290:	30 e0       	ldi	r19, 0x00	; 0
    7292:	4c e1       	ldi	r20, 0x1C	; 28
    7294:	42 9f       	mul	r20, r18
    7296:	c0 01       	movw	r24, r0
    7298:	43 9f       	mul	r20, r19
    729a:	90 0d       	add	r25, r0
    729c:	11 24       	eor	r1, r1
    729e:	86 56       	subi	r24, 0x66	; 102
    72a0:	9d 4b       	sbci	r25, 0xBD	; 189
    72a2:	8a 83       	std	Y+2, r24	; 0x02
    72a4:	9b 83       	std	Y+3, r25	; 0x03

    /* Get frame index of the event trigger frame */
    frame_index = lin_get_frame_index(iii, pid);
    72a6:	69 85       	ldd	r22, Y+9	; 0x09
    72a8:	88 85       	ldd	r24, Y+8	; 0x08
    72aa:	0e 94 00 36 	call	0x6c00	; 0x6c00 <lin_get_frame_index>
    72ae:	8c 83       	std	Y+4, r24	; 0x04

    if (0xFFU != frame_index) /* This PID doesn't belong to this node */
    72b0:	8c 81       	ldd	r24, Y+4	; 0x04
    72b2:	8f 3f       	cpi	r24, 0xFF	; 255
    72b4:	09 f4       	brne	.+2      	; 0x72b8 <lin_update_rx_evnt_frame+0x3e>
    72b6:	64 c0       	rjmp	.+200    	; 0x7380 <lin_update_rx_evnt_frame+0x106>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
    72b8:	88 85       	ldd	r24, Y+8	; 0x08
    72ba:	28 2f       	mov	r18, r24
    72bc:	30 e0       	ldi	r19, 0x00	; 0
    72be:	46 e1       	ldi	r20, 0x16	; 22
    72c0:	42 9f       	mul	r20, r18
    72c2:	c0 01       	movw	r24, r0
    72c4:	43 9f       	mul	r20, r19
    72c6:	90 0d       	add	r25, r0
    72c8:	11 24       	eor	r1, r1
    72ca:	8e 55       	subi	r24, 0x5E	; 94
    72cc:	99 4b       	sbci	r25, 0xB9	; 185
    72ce:	fc 01       	movw	r30, r24
    72d0:	80 81       	ld	r24, Z
    72d2:	91 81       	ldd	r25, Z+1	; 0x01
    72d4:	fc 01       	movw	r30, r24
    72d6:	80 81       	ld	r24, Z
    72d8:	61 e0       	ldi	r22, 0x01	; 1
    72da:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <lin_process_parity>
    72de:	8d 83       	std	Y+5, r24	; 0x05
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;
    72e0:	8a 81       	ldd	r24, Y+2	; 0x02
    72e2:	9b 81       	ldd	r25, Y+3	; 0x03
    72e4:	fc 01       	movw	r30, r24
    72e6:	26 81       	ldd	r18, Z+6	; 0x06
    72e8:	37 81       	ldd	r19, Z+7	; 0x07
    72ea:	8c 81       	ldd	r24, Y+4	; 0x04
    72ec:	88 2f       	mov	r24, r24
    72ee:	90 e0       	ldi	r25, 0x00	; 0
    72f0:	88 0f       	add	r24, r24
    72f2:	99 1f       	adc	r25, r25
    72f4:	ac 01       	movw	r20, r24
    72f6:	44 0f       	add	r20, r20
    72f8:	55 1f       	adc	r21, r21
    72fa:	44 0f       	add	r20, r20
    72fc:	55 1f       	adc	r21, r21
    72fe:	84 0f       	add	r24, r20
    7300:	95 1f       	adc	r25, r21
    7302:	82 0f       	add	r24, r18
    7304:	93 1f       	adc	r25, r19
    7306:	fc 01       	movw	r30, r24
    7308:	80 85       	ldd	r24, Z+8	; 0x08
    730a:	91 85       	ldd	r25, Z+9	; 0x09
    730c:	8e 83       	std	Y+6, r24	; 0x06
    730e:	9f 83       	std	Y+7, r25	; 0x07

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    7310:	19 82       	std	Y+1, r1	; 0x01
    7312:	2f c0       	rjmp	.+94     	; 0x7372 <lin_update_rx_evnt_frame+0xf8>
        {
            /* First byte of response for event trigger is the PID of the associate frame */
            if (prot_user_config_ptr->list_identifiers_RAM_ptr[((l_u8)ptr->associated_uncond_frame_ptr[i] - prot_user_config_ptr->frame_start) + 1U] == associate_id)
    7314:	8a 81       	ldd	r24, Y+2	; 0x02
    7316:	9b 81       	ldd	r25, Y+3	; 0x03
    7318:	fc 01       	movw	r30, r24
    731a:	22 85       	ldd	r18, Z+10	; 0x0a
    731c:	33 85       	ldd	r19, Z+11	; 0x0b
    731e:	8e 81       	ldd	r24, Y+6	; 0x06
    7320:	9f 81       	ldd	r25, Y+7	; 0x07
    7322:	fc 01       	movw	r30, r24
    7324:	41 81       	ldd	r20, Z+1	; 0x01
    7326:	52 81       	ldd	r21, Z+2	; 0x02
    7328:	89 81       	ldd	r24, Y+1	; 0x01
    732a:	88 2f       	mov	r24, r24
    732c:	90 e0       	ldi	r25, 0x00	; 0
    732e:	84 0f       	add	r24, r20
    7330:	95 1f       	adc	r25, r21
    7332:	fc 01       	movw	r30, r24
    7334:	80 81       	ld	r24, Z
    7336:	48 2f       	mov	r20, r24
    7338:	50 e0       	ldi	r21, 0x00	; 0
    733a:	8a 81       	ldd	r24, Y+2	; 0x02
    733c:	9b 81       	ldd	r25, Y+3	; 0x03
    733e:	fc 01       	movw	r30, r24
    7340:	85 81       	ldd	r24, Z+5	; 0x05
    7342:	88 2f       	mov	r24, r24
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	ba 01       	movw	r22, r20
    7348:	68 1b       	sub	r22, r24
    734a:	79 0b       	sbc	r23, r25
    734c:	cb 01       	movw	r24, r22
    734e:	01 96       	adiw	r24, 0x01	; 1
    7350:	82 0f       	add	r24, r18
    7352:	93 1f       	adc	r25, r19
    7354:	fc 01       	movw	r30, r24
    7356:	90 81       	ld	r25, Z
    7358:	8d 81       	ldd	r24, Y+5	; 0x05
    735a:	98 17       	cp	r25, r24
    735c:	39 f4       	brne	.+14     	; 0x736c <lin_update_rx_evnt_frame+0xf2>
            {
                /* Update unconditional frame */
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
    735e:	41 e0       	ldi	r20, 0x01	; 1
    7360:	6d 81       	ldd	r22, Y+5	; 0x05
    7362:	88 85       	ldd	r24, Y+8	; 0x08
    7364:	0e 94 43 36 	call	0x6c86	; 0x6c86 <lin_process_uncd_frame>
                break;
    7368:	00 00       	nop
            }
        }
    }
}
    736a:	0a c0       	rjmp	.+20     	; 0x7380 <lin_update_rx_evnt_frame+0x106>
    {
        /* calculate PID that associated with ETF */
        associate_id = lin_process_parity(g_lin_protocol_state_array[iii].response_buffer_ptr[0], CHECK_PARITY);
        ptr = prot_user_config_ptr->frame_tbl_ptr[frame_index].frame_data_ptr;

        for (i = 0U; i < ptr->num_of_associated_uncond_frames; i++)
    736c:	89 81       	ldd	r24, Y+1	; 0x01
    736e:	8f 5f       	subi	r24, 0xFF	; 255
    7370:	89 83       	std	Y+1, r24	; 0x01
    7372:	8e 81       	ldd	r24, Y+6	; 0x06
    7374:	9f 81       	ldd	r25, Y+7	; 0x07
    7376:	fc 01       	movw	r30, r24
    7378:	90 81       	ld	r25, Z
    737a:	89 81       	ldd	r24, Y+1	; 0x01
    737c:	89 17       	cp	r24, r25
    737e:	50 f2       	brcs	.-108    	; 0x7314 <lin_update_rx_evnt_frame+0x9a>
                lin_process_uncd_frame(iii, associate_id, UPDATE_UNCONDITIONAL_FRAME);
                break;
            }
        }
    }
}
    7380:	00 00       	nop
    7382:	29 96       	adiw	r28, 0x09	; 9
    7384:	cd bf       	out	0x3d, r28	; 61
    7386:	de bf       	out	0x3e, r29	; 62
    7388:	df 91       	pop	r29
    738a:	cf 91       	pop	r28
    738c:	08 95       	ret

0000738e <lin_make_res_evnt_frame>:
 *
 * Implements    : lin_make_res_evnt_frame_Activity
 *END**************************************************************************/
void lin_make_res_evnt_frame(l_ifc_handle iii,
                             l_u8 pid)
{
    738e:	0f 93       	push	r16
    7390:	1f 93       	push	r17
    7392:	cf 93       	push	r28
    7394:	df 93       	push	r29
    7396:	00 d0       	rcall	.+0      	; 0x7398 <lin_make_res_evnt_frame+0xa>
    7398:	cd b7       	in	r28, 0x3d	; 61
    739a:	de b7       	in	r29, 0x3e	; 62
    739c:	89 83       	std	Y+1, r24	; 0x01
    739e:	6a 83       	std	Y+2, r22	; 0x02
    /* Create response */
    lin_process_uncd_frame(iii, pid, MAKE_UNCONDITIONAL_FRAME);
    73a0:	40 e0       	ldi	r20, 0x00	; 0
    73a2:	6a 81       	ldd	r22, Y+2	; 0x02
    73a4:	89 81       	ldd	r24, Y+1	; 0x01
    73a6:	0e 94 43 36 	call	0x6c86	; 0x6c86 <lin_process_uncd_frame>
    /* Set associate PID */
    g_lin_protocol_state_array[iii].response_buffer_ptr[0] = lin_process_parity(pid, MAKE_PARITY);
    73aa:	89 81       	ldd	r24, Y+1	; 0x01
    73ac:	28 2f       	mov	r18, r24
    73ae:	30 e0       	ldi	r19, 0x00	; 0
    73b0:	46 e1       	ldi	r20, 0x16	; 22
    73b2:	42 9f       	mul	r20, r18
    73b4:	c0 01       	movw	r24, r0
    73b6:	43 9f       	mul	r20, r19
    73b8:	90 0d       	add	r25, r0
    73ba:	11 24       	eor	r1, r1
    73bc:	8e 55       	subi	r24, 0x5E	; 94
    73be:	99 4b       	sbci	r25, 0xB9	; 185
    73c0:	fc 01       	movw	r30, r24
    73c2:	00 81       	ld	r16, Z
    73c4:	11 81       	ldd	r17, Z+1	; 0x01
    73c6:	60 e0       	ldi	r22, 0x00	; 0
    73c8:	8a 81       	ldd	r24, Y+2	; 0x02
    73ca:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <lin_process_parity>
    73ce:	f8 01       	movw	r30, r16
    73d0:	80 83       	st	Z, r24
}
    73d2:	00 00       	nop
    73d4:	0f 90       	pop	r0
    73d6:	0f 90       	pop	r0
    73d8:	df 91       	pop	r29
    73da:	cf 91       	pop	r28
    73dc:	1f 91       	pop	r17
    73de:	0f 91       	pop	r16
    73e0:	08 95       	ret

000073e2 <lin_condittional_change_nad>:
        if (flag_order < node_attr_ptr->number_support_sid)
        {
            service_flag[flag_order] = 0U;
        }
    }
}
    73e2:	cf 93       	push	r28
    73e4:	df 93       	push	r29
    73e6:	cd b7       	in	r28, 0x3d	; 61
    73e8:	de b7       	in	r29, 0x3e	; 62
    73ea:	63 97       	sbiw	r28, 0x13	; 19
    73ec:	cd bf       	out	0x3d, r28	; 61
    73ee:	de bf       	out	0x3e, r29	; 62
    73f0:	8b 8b       	std	Y+19, r24	; 0x13
    73f2:	1a 82       	std	Y+2, r1	; 0x02
    73f4:	8b 89       	ldd	r24, Y+19	; 0x13
    73f6:	28 2f       	mov	r18, r24
    73f8:	30 e0       	ldi	r19, 0x00	; 0
    73fa:	4c e1       	ldi	r20, 0x1C	; 28
    73fc:	42 9f       	mul	r20, r18
    73fe:	c0 01       	movw	r24, r0
    7400:	43 9f       	mul	r20, r19
    7402:	90 0d       	add	r25, r0
    7404:	11 24       	eor	r1, r1
    7406:	84 55       	subi	r24, 0x54	; 84
    7408:	9d 4b       	sbci	r25, 0xBD	; 189
    740a:	fc 01       	movw	r30, r24
    740c:	80 81       	ld	r24, Z
    740e:	28 2f       	mov	r18, r24
    7410:	30 e0       	ldi	r19, 0x00	; 0
    7412:	44 e2       	ldi	r20, 0x24	; 36
    7414:	42 9f       	mul	r20, r18
    7416:	c0 01       	movw	r24, r0
    7418:	43 9f       	mul	r20, r19
    741a:	90 0d       	add	r25, r0
    741c:	11 24       	eor	r1, r1
    741e:	8a 58       	subi	r24, 0x8A	; 138
    7420:	9d 4b       	sbci	r25, 0xBD	; 189
    7422:	8b 83       	std	Y+3, r24	; 0x03
    7424:	9c 83       	std	Y+4, r25	; 0x04
    7426:	8b 81       	ldd	r24, Y+3	; 0x03
    7428:	9c 81       	ldd	r25, Y+4	; 0x04
    742a:	25 e0       	ldi	r18, 0x05	; 5
    742c:	fc 01       	movw	r30, r24
    742e:	33 96       	adiw	r30, 0x03	; 3
    7430:	de 01       	movw	r26, r28
    7432:	1a 96       	adiw	r26, 0x0a	; 10
    7434:	01 90       	ld	r0, Z+
    7436:	0d 92       	st	X+, r0
    7438:	2a 95       	dec	r18
    743a:	e1 f7       	brne	.-8      	; 0x7434 <lin_condittional_change_nad+0x52>
    743c:	8b 81       	ldd	r24, Y+3	; 0x03
    743e:	9c 81       	ldd	r25, Y+4	; 0x04
    7440:	fc 01       	movw	r30, r24
    7442:	80 85       	ldd	r24, Z+8	; 0x08
    7444:	91 85       	ldd	r25, Z+9	; 0x09
    7446:	a2 85       	ldd	r26, Z+10	; 0x0a
    7448:	b3 85       	ldd	r27, Z+11	; 0x0b
    744a:	8f 87       	std	Y+15, r24	; 0x0f
    744c:	98 8b       	std	Y+16, r25	; 0x10
    744e:	a9 8b       	std	Y+17, r26	; 0x11
    7450:	ba 8b       	std	Y+18, r27	; 0x12
    7452:	8b 89       	ldd	r24, Y+19	; 0x13
    7454:	28 2f       	mov	r18, r24
    7456:	30 e0       	ldi	r19, 0x00	; 0
    7458:	44 e3       	ldi	r20, 0x34	; 52
    745a:	42 9f       	mul	r20, r18
    745c:	c0 01       	movw	r24, r0
    745e:	43 9f       	mul	r20, r19
    7460:	90 0d       	add	r25, r0
    7462:	11 24       	eor	r1, r1
    7464:	0b 96       	adiw	r24, 0x0b	; 11
    7466:	84 59       	subi	r24, 0x94	; 148
    7468:	99 4b       	sbci	r25, 0xB9	; 185
    746a:	8d 83       	std	Y+5, r24	; 0x05
    746c:	9e 83       	std	Y+6, r25	; 0x06
    746e:	8d 81       	ldd	r24, Y+5	; 0x05
    7470:	9e 81       	ldd	r25, Y+6	; 0x06
    7472:	fc 01       	movw	r30, r24
    7474:	21 85       	ldd	r18, Z+9	; 0x09
    7476:	32 85       	ldd	r19, Z+10	; 0x0a
    7478:	8d 81       	ldd	r24, Y+5	; 0x05
    747a:	9e 81       	ldd	r25, Y+6	; 0x06
    747c:	fc 01       	movw	r30, r24
    747e:	80 81       	ld	r24, Z
    7480:	91 81       	ldd	r25, Z+1	; 0x01
    7482:	88 0f       	add	r24, r24
    7484:	99 1f       	adc	r25, r25
    7486:	88 0f       	add	r24, r24
    7488:	99 1f       	adc	r25, r25
    748a:	88 0f       	add	r24, r24
    748c:	99 1f       	adc	r25, r25
    748e:	82 0f       	add	r24, r18
    7490:	93 1f       	adc	r25, r19
    7492:	fc 01       	movw	r30, r24
    7494:	83 81       	ldd	r24, Z+3	; 0x03
    7496:	8f 83       	std	Y+7, r24	; 0x07
    7498:	8d 81       	ldd	r24, Y+5	; 0x05
    749a:	9e 81       	ldd	r25, Y+6	; 0x06
    749c:	fc 01       	movw	r30, r24
    749e:	21 85       	ldd	r18, Z+9	; 0x09
    74a0:	32 85       	ldd	r19, Z+10	; 0x0a
    74a2:	8d 81       	ldd	r24, Y+5	; 0x05
    74a4:	9e 81       	ldd	r25, Y+6	; 0x06
    74a6:	fc 01       	movw	r30, r24
    74a8:	80 81       	ld	r24, Z
    74aa:	91 81       	ldd	r25, Z+1	; 0x01
    74ac:	88 0f       	add	r24, r24
    74ae:	99 1f       	adc	r25, r25
    74b0:	88 0f       	add	r24, r24
    74b2:	99 1f       	adc	r25, r25
    74b4:	88 0f       	add	r24, r24
    74b6:	99 1f       	adc	r25, r25
    74b8:	82 0f       	add	r24, r18
    74ba:	93 1f       	adc	r25, r19
    74bc:	fc 01       	movw	r30, r24
    74be:	84 81       	ldd	r24, Z+4	; 0x04
    74c0:	89 83       	std	Y+1, r24	; 0x01
    74c2:	8d 81       	ldd	r24, Y+5	; 0x05
    74c4:	9e 81       	ldd	r25, Y+6	; 0x06
    74c6:	fc 01       	movw	r30, r24
    74c8:	21 85       	ldd	r18, Z+9	; 0x09
    74ca:	32 85       	ldd	r19, Z+10	; 0x0a
    74cc:	8d 81       	ldd	r24, Y+5	; 0x05
    74ce:	9e 81       	ldd	r25, Y+6	; 0x06
    74d0:	fc 01       	movw	r30, r24
    74d2:	80 81       	ld	r24, Z
    74d4:	91 81       	ldd	r25, Z+1	; 0x01
    74d6:	88 0f       	add	r24, r24
    74d8:	99 1f       	adc	r25, r25
    74da:	88 0f       	add	r24, r24
    74dc:	99 1f       	adc	r25, r25
    74de:	88 0f       	add	r24, r24
    74e0:	99 1f       	adc	r25, r25
    74e2:	82 0f       	add	r24, r18
    74e4:	93 1f       	adc	r25, r19
    74e6:	fc 01       	movw	r30, r24
    74e8:	85 81       	ldd	r24, Z+5	; 0x05
    74ea:	88 87       	std	Y+8, r24	; 0x08
    74ec:	8d 81       	ldd	r24, Y+5	; 0x05
    74ee:	9e 81       	ldd	r25, Y+6	; 0x06
    74f0:	fc 01       	movw	r30, r24
    74f2:	21 85       	ldd	r18, Z+9	; 0x09
    74f4:	32 85       	ldd	r19, Z+10	; 0x0a
    74f6:	8d 81       	ldd	r24, Y+5	; 0x05
    74f8:	9e 81       	ldd	r25, Y+6	; 0x06
    74fa:	fc 01       	movw	r30, r24
    74fc:	80 81       	ld	r24, Z
    74fe:	91 81       	ldd	r25, Z+1	; 0x01
    7500:	88 0f       	add	r24, r24
    7502:	99 1f       	adc	r25, r25
    7504:	88 0f       	add	r24, r24
    7506:	99 1f       	adc	r25, r25
    7508:	88 0f       	add	r24, r24
    750a:	99 1f       	adc	r25, r25
    750c:	82 0f       	add	r24, r18
    750e:	93 1f       	adc	r25, r19
    7510:	fc 01       	movw	r30, r24
    7512:	86 81       	ldd	r24, Z+6	; 0x06
    7514:	89 87       	std	Y+9, r24	; 0x09
    7516:	8f 81       	ldd	r24, Y+7	; 0x07
    7518:	88 2f       	mov	r24, r24
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	00 97       	sbiw	r24, 0x00	; 0
    751e:	21 f0       	breq	.+8      	; 0x7528 <lin_condittional_change_nad+0x146>
    7520:	01 97       	sbiw	r24, 0x01	; 1
    7522:	09 f4       	brne	.+2      	; 0x7526 <lin_condittional_change_nad+0x144>
    7524:	4b c0       	rjmp	.+150    	; 0x75bc <lin_condittional_change_nad+0x1da>
    7526:	7d c0       	rjmp	.+250    	; 0x7622 <lin_condittional_change_nad+0x240>
    7528:	89 81       	ldd	r24, Y+1	; 0x01
    752a:	88 23       	and	r24, r24
    752c:	09 f4       	brne	.+2      	; 0x7530 <lin_condittional_change_nad+0x14e>
    752e:	76 c0       	rjmp	.+236    	; 0x761c <lin_condittional_change_nad+0x23a>
    7530:	89 81       	ldd	r24, Y+1	; 0x01
    7532:	86 30       	cpi	r24, 0x06	; 6
    7534:	08 f0       	brcs	.+2      	; 0x7538 <lin_condittional_change_nad+0x156>
    7536:	72 c0       	rjmp	.+228    	; 0x761c <lin_condittional_change_nad+0x23a>
    7538:	89 81       	ldd	r24, Y+1	; 0x01
    753a:	88 23       	and	r24, r24
    753c:	b9 f0       	breq	.+46     	; 0x756c <lin_condittional_change_nad+0x18a>
    753e:	89 81       	ldd	r24, Y+1	; 0x01
    7540:	83 30       	cpi	r24, 0x03	; 3
    7542:	a0 f4       	brcc	.+40     	; 0x756c <lin_condittional_change_nad+0x18a>
    7544:	8a 85       	ldd	r24, Y+10	; 0x0a
    7546:	9b 85       	ldd	r25, Y+11	; 0x0b
    7548:	29 81       	ldd	r18, Y+1	; 0x01
    754a:	22 2f       	mov	r18, r18
    754c:	30 e0       	ldi	r19, 0x00	; 0
    754e:	21 50       	subi	r18, 0x01	; 1
    7550:	30 4e       	sbci	r19, 0xE0	; 224
    7552:	22 0f       	add	r18, r18
    7554:	33 1f       	adc	r19, r19
    7556:	22 0f       	add	r18, r18
    7558:	33 1f       	adc	r19, r19
    755a:	22 0f       	add	r18, r18
    755c:	33 1f       	adc	r19, r19
    755e:	02 c0       	rjmp	.+4      	; 0x7564 <lin_condittional_change_nad+0x182>
    7560:	96 95       	lsr	r25
    7562:	87 95       	ror	r24
    7564:	2a 95       	dec	r18
    7566:	e2 f7       	brpl	.-8      	; 0x7560 <lin_condittional_change_nad+0x17e>
    7568:	89 83       	std	Y+1, r24	; 0x01
    756a:	1c c0       	rjmp	.+56     	; 0x75a4 <lin_condittional_change_nad+0x1c2>
    756c:	89 81       	ldd	r24, Y+1	; 0x01
    756e:	83 30       	cpi	r24, 0x03	; 3
    7570:	b8 f0       	brcs	.+46     	; 0x75a0 <lin_condittional_change_nad+0x1be>
    7572:	89 81       	ldd	r24, Y+1	; 0x01
    7574:	85 30       	cpi	r24, 0x05	; 5
    7576:	a0 f4       	brcc	.+40     	; 0x75a0 <lin_condittional_change_nad+0x1be>
    7578:	8c 85       	ldd	r24, Y+12	; 0x0c
    757a:	9d 85       	ldd	r25, Y+13	; 0x0d
    757c:	29 81       	ldd	r18, Y+1	; 0x01
    757e:	22 2f       	mov	r18, r18
    7580:	30 e0       	ldi	r19, 0x00	; 0
    7582:	23 50       	subi	r18, 0x03	; 3
    7584:	30 4e       	sbci	r19, 0xE0	; 224
    7586:	22 0f       	add	r18, r18
    7588:	33 1f       	adc	r19, r19
    758a:	22 0f       	add	r18, r18
    758c:	33 1f       	adc	r19, r19
    758e:	22 0f       	add	r18, r18
    7590:	33 1f       	adc	r19, r19
    7592:	02 c0       	rjmp	.+4      	; 0x7598 <lin_condittional_change_nad+0x1b6>
    7594:	96 95       	lsr	r25
    7596:	87 95       	ror	r24
    7598:	2a 95       	dec	r18
    759a:	e2 f7       	brpl	.-8      	; 0x7594 <lin_condittional_change_nad+0x1b2>
    759c:	89 83       	std	Y+1, r24	; 0x01
    759e:	02 c0       	rjmp	.+4      	; 0x75a4 <lin_condittional_change_nad+0x1c2>
    75a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    75a2:	89 83       	std	Y+1, r24	; 0x01
    75a4:	99 81       	ldd	r25, Y+1	; 0x01
    75a6:	89 85       	ldd	r24, Y+9	; 0x09
    75a8:	98 27       	eor	r25, r24
    75aa:	88 85       	ldd	r24, Y+8	; 0x08
    75ac:	89 23       	and	r24, r25
    75ae:	89 83       	std	Y+1, r24	; 0x01
    75b0:	89 81       	ldd	r24, Y+1	; 0x01
    75b2:	88 23       	and	r24, r24
    75b4:	99 f5       	brne	.+102    	; 0x761c <lin_condittional_change_nad+0x23a>
    75b6:	81 e0       	ldi	r24, 0x01	; 1
    75b8:	8a 83       	std	Y+2, r24	; 0x02
    75ba:	30 c0       	rjmp	.+96     	; 0x761c <lin_condittional_change_nad+0x23a>
    75bc:	89 81       	ldd	r24, Y+1	; 0x01
    75be:	88 23       	and	r24, r24
    75c0:	79 f1       	breq	.+94     	; 0x7620 <lin_condittional_change_nad+0x23e>
    75c2:	89 81       	ldd	r24, Y+1	; 0x01
    75c4:	85 30       	cpi	r24, 0x05	; 5
    75c6:	60 f5       	brcc	.+88     	; 0x7620 <lin_condittional_change_nad+0x23e>
    75c8:	89 81       	ldd	r24, Y+1	; 0x01
    75ca:	88 2f       	mov	r24, r24
    75cc:	90 e0       	ldi	r25, 0x00	; 0
    75ce:	82 30       	cpi	r24, 0x02	; 2
    75d0:	91 05       	cpc	r25, r1
    75d2:	79 f0       	breq	.+30     	; 0x75f2 <lin_condittional_change_nad+0x210>
    75d4:	83 30       	cpi	r24, 0x03	; 3
    75d6:	91 05       	cpc	r25, r1
    75d8:	1c f4       	brge	.+6      	; 0x75e0 <lin_condittional_change_nad+0x1fe>
    75da:	01 97       	sbiw	r24, 0x01	; 1
    75dc:	39 f0       	breq	.+14     	; 0x75ec <lin_condittional_change_nad+0x20a>
    75de:	12 c0       	rjmp	.+36     	; 0x7604 <lin_condittional_change_nad+0x222>
    75e0:	83 30       	cpi	r24, 0x03	; 3
    75e2:	91 05       	cpc	r25, r1
    75e4:	49 f0       	breq	.+18     	; 0x75f8 <lin_condittional_change_nad+0x216>
    75e6:	04 97       	sbiw	r24, 0x04	; 4
    75e8:	51 f0       	breq	.+20     	; 0x75fe <lin_condittional_change_nad+0x21c>
    75ea:	0c c0       	rjmp	.+24     	; 0x7604 <lin_condittional_change_nad+0x222>
    75ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    75ee:	89 83       	std	Y+1, r24	; 0x01
    75f0:	09 c0       	rjmp	.+18     	; 0x7604 <lin_condittional_change_nad+0x222>
    75f2:	88 89       	ldd	r24, Y+16	; 0x10
    75f4:	89 83       	std	Y+1, r24	; 0x01
    75f6:	06 c0       	rjmp	.+12     	; 0x7604 <lin_condittional_change_nad+0x222>
    75f8:	89 89       	ldd	r24, Y+17	; 0x11
    75fa:	89 83       	std	Y+1, r24	; 0x01
    75fc:	03 c0       	rjmp	.+6      	; 0x7604 <lin_condittional_change_nad+0x222>
    75fe:	8a 89       	ldd	r24, Y+18	; 0x12
    7600:	89 83       	std	Y+1, r24	; 0x01
    7602:	00 00       	nop
    7604:	99 81       	ldd	r25, Y+1	; 0x01
    7606:	89 85       	ldd	r24, Y+9	; 0x09
    7608:	98 27       	eor	r25, r24
    760a:	88 85       	ldd	r24, Y+8	; 0x08
    760c:	89 23       	and	r24, r25
    760e:	89 83       	std	Y+1, r24	; 0x01
    7610:	89 81       	ldd	r24, Y+1	; 0x01
    7612:	88 23       	and	r24, r24
    7614:	29 f4       	brne	.+10     	; 0x7620 <lin_condittional_change_nad+0x23e>
    7616:	81 e0       	ldi	r24, 0x01	; 1
    7618:	8a 83       	std	Y+2, r24	; 0x02
    761a:	02 c0       	rjmp	.+4      	; 0x7620 <lin_condittional_change_nad+0x23e>
    761c:	00 00       	nop
    761e:	01 c0       	rjmp	.+2      	; 0x7622 <lin_condittional_change_nad+0x240>
    7620:	00 00       	nop
    7622:	8a 81       	ldd	r24, Y+2	; 0x02
    7624:	88 23       	and	r24, r24
    7626:	09 f1       	breq	.+66     	; 0x766a <lin_condittional_change_nad+0x288>
    7628:	20 e0       	ldi	r18, 0x00	; 0
    762a:	41 e0       	ldi	r20, 0x01	; 1
    762c:	63 eb       	ldi	r22, 0xB3	; 179
    762e:	8b 89       	ldd	r24, Y+19	; 0x13
    7630:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
    7634:	8b 81       	ldd	r24, Y+3	; 0x03
    7636:	9c 81       	ldd	r25, Y+4	; 0x04
    7638:	fc 01       	movw	r30, r24
    763a:	80 81       	ld	r24, Z
    763c:	91 81       	ldd	r25, Z+1	; 0x01
    763e:	2d 81       	ldd	r18, Y+5	; 0x05
    7640:	3e 81       	ldd	r19, Y+6	; 0x06
    7642:	f9 01       	movw	r30, r18
    7644:	41 85       	ldd	r20, Z+9	; 0x09
    7646:	52 85       	ldd	r21, Z+10	; 0x0a
    7648:	2d 81       	ldd	r18, Y+5	; 0x05
    764a:	3e 81       	ldd	r19, Y+6	; 0x06
    764c:	f9 01       	movw	r30, r18
    764e:	20 81       	ld	r18, Z
    7650:	31 81       	ldd	r19, Z+1	; 0x01
    7652:	22 0f       	add	r18, r18
    7654:	33 1f       	adc	r19, r19
    7656:	22 0f       	add	r18, r18
    7658:	33 1f       	adc	r19, r19
    765a:	22 0f       	add	r18, r18
    765c:	33 1f       	adc	r19, r19
    765e:	24 0f       	add	r18, r20
    7660:	35 1f       	adc	r19, r21
    7662:	f9 01       	movw	r30, r18
    7664:	27 81       	ldd	r18, Z+7	; 0x07
    7666:	fc 01       	movw	r30, r24
    7668:	20 83       	st	Z, r18
    766a:	00 00       	nop
    766c:	63 96       	adiw	r28, 0x13	; 19
    766e:	cd bf       	out	0x3d, r28	; 61
    7670:	de bf       	out	0x3e, r29	; 62
    7672:	df 91       	pop	r29
    7674:	cf 91       	pop	r28
    7676:	08 95       	ret

00007678 <lin_assign_nad>:
    7678:	cf 93       	push	r28
    767a:	df 93       	push	r29
    767c:	cd b7       	in	r28, 0x3d	; 61
    767e:	de b7       	in	r29, 0x3e	; 62
    7680:	69 97       	sbiw	r28, 0x19	; 25
    7682:	cd bf       	out	0x3d, r28	; 61
    7684:	de bf       	out	0x3e, r29	; 62
    7686:	89 8f       	std	Y+25, r24	; 0x19
    7688:	89 8d       	ldd	r24, Y+25	; 0x19
    768a:	28 2f       	mov	r18, r24
    768c:	30 e0       	ldi	r19, 0x00	; 0
    768e:	44 e3       	ldi	r20, 0x34	; 52
    7690:	42 9f       	mul	r20, r18
    7692:	c0 01       	movw	r24, r0
    7694:	43 9f       	mul	r20, r19
    7696:	90 0d       	add	r25, r0
    7698:	11 24       	eor	r1, r1
    769a:	84 59       	subi	r24, 0x94	; 148
    769c:	99 4b       	sbci	r25, 0xB9	; 185
    769e:	8a 83       	std	Y+2, r24	; 0x02
    76a0:	9b 83       	std	Y+3, r25	; 0x03
    76a2:	89 8d       	ldd	r24, Y+25	; 0x19
    76a4:	28 2f       	mov	r18, r24
    76a6:	30 e0       	ldi	r19, 0x00	; 0
    76a8:	4c e1       	ldi	r20, 0x1C	; 28
    76aa:	42 9f       	mul	r20, r18
    76ac:	c0 01       	movw	r24, r0
    76ae:	43 9f       	mul	r20, r19
    76b0:	90 0d       	add	r25, r0
    76b2:	11 24       	eor	r1, r1
    76b4:	86 56       	subi	r24, 0x66	; 102
    76b6:	9d 4b       	sbci	r25, 0xBD	; 189
    76b8:	8c 83       	std	Y+4, r24	; 0x04
    76ba:	9d 83       	std	Y+5, r25	; 0x05
    76bc:	8c 81       	ldd	r24, Y+4	; 0x04
    76be:	9d 81       	ldd	r25, Y+5	; 0x05
    76c0:	fc 01       	movw	r30, r24
    76c2:	82 89       	ldd	r24, Z+18	; 0x12
    76c4:	28 2f       	mov	r18, r24
    76c6:	30 e0       	ldi	r19, 0x00	; 0
    76c8:	44 e2       	ldi	r20, 0x24	; 36
    76ca:	42 9f       	mul	r20, r18
    76cc:	c0 01       	movw	r24, r0
    76ce:	43 9f       	mul	r20, r19
    76d0:	90 0d       	add	r25, r0
    76d2:	11 24       	eor	r1, r1
    76d4:	87 58       	subi	r24, 0x87	; 135
    76d6:	9d 4b       	sbci	r25, 0xBD	; 189
    76d8:	25 e0       	ldi	r18, 0x05	; 5
    76da:	fc 01       	movw	r30, r24
    76dc:	de 01       	movw	r26, r28
    76de:	54 96       	adiw	r26, 0x14	; 20
    76e0:	01 90       	ld	r0, Z+
    76e2:	0d 92       	st	X+, r0
    76e4:	2a 95       	dec	r18
    76e6:	e1 f7       	brne	.-8      	; 0x76e0 <lin_assign_nad+0x68>
    76e8:	8a 81       	ldd	r24, Y+2	; 0x02
    76ea:	9b 81       	ldd	r25, Y+3	; 0x03
    76ec:	0b 96       	adiw	r24, 0x0b	; 11
    76ee:	8e 83       	std	Y+6, r24	; 0x06
    76f0:	9f 83       	std	Y+7, r25	; 0x07
    76f2:	19 82       	std	Y+1, r1	; 0x01
    76f4:	26 c0       	rjmp	.+76     	; 0x7742 <lin_assign_nad+0xca>
    76f6:	89 81       	ldd	r24, Y+1	; 0x01
    76f8:	88 2f       	mov	r24, r24
    76fa:	90 e0       	ldi	r25, 0x00	; 0
    76fc:	2e 81       	ldd	r18, Y+6	; 0x06
    76fe:	3f 81       	ldd	r19, Y+7	; 0x07
    7700:	f9 01       	movw	r30, r18
    7702:	41 85       	ldd	r20, Z+9	; 0x09
    7704:	52 85       	ldd	r21, Z+10	; 0x0a
    7706:	2e 81       	ldd	r18, Y+6	; 0x06
    7708:	3f 81       	ldd	r19, Y+7	; 0x07
    770a:	f9 01       	movw	r30, r18
    770c:	20 81       	ld	r18, Z
    770e:	31 81       	ldd	r19, Z+1	; 0x01
    7710:	22 0f       	add	r18, r18
    7712:	33 1f       	adc	r19, r19
    7714:	22 0f       	add	r18, r18
    7716:	33 1f       	adc	r19, r19
    7718:	22 0f       	add	r18, r18
    771a:	33 1f       	adc	r19, r19
    771c:	42 0f       	add	r20, r18
    771e:	53 1f       	adc	r21, r19
    7720:	29 81       	ldd	r18, Y+1	; 0x01
    7722:	22 2f       	mov	r18, r18
    7724:	30 e0       	ldi	r19, 0x00	; 0
    7726:	24 0f       	add	r18, r20
    7728:	35 1f       	adc	r19, r21
    772a:	f9 01       	movw	r30, r18
    772c:	40 81       	ld	r20, Z
    772e:	9e 01       	movw	r18, r28
    7730:	24 5f       	subi	r18, 0xF4	; 244
    7732:	3f 4f       	sbci	r19, 0xFF	; 255
    7734:	82 0f       	add	r24, r18
    7736:	93 1f       	adc	r25, r19
    7738:	fc 01       	movw	r30, r24
    773a:	40 83       	st	Z, r20
    773c:	89 81       	ldd	r24, Y+1	; 0x01
    773e:	8f 5f       	subi	r24, 0xFF	; 255
    7740:	89 83       	std	Y+1, r24	; 0x01
    7742:	89 81       	ldd	r24, Y+1	; 0x01
    7744:	88 30       	cpi	r24, 0x08	; 8
    7746:	b8 f2       	brcs	.-82     	; 0x76f6 <lin_assign_nad+0x7e>
    7748:	88 89       	ldd	r24, Y+16	; 0x10
    774a:	88 2f       	mov	r24, r24
    774c:	90 e0       	ldi	r25, 0x00	; 0
    774e:	98 2f       	mov	r25, r24
    7750:	88 27       	eor	r24, r24
    7752:	88 87       	std	Y+8, r24	; 0x08
    7754:	99 87       	std	Y+9, r25	; 0x09
    7756:	8f 85       	ldd	r24, Y+15	; 0x0f
    7758:	88 2f       	mov	r24, r24
    775a:	90 e0       	ldi	r25, 0x00	; 0
    775c:	28 85       	ldd	r18, Y+8	; 0x08
    775e:	39 85       	ldd	r19, Y+9	; 0x09
    7760:	82 2b       	or	r24, r18
    7762:	93 2b       	or	r25, r19
    7764:	88 87       	std	Y+8, r24	; 0x08
    7766:	99 87       	std	Y+9, r25	; 0x09
    7768:	8a 89       	ldd	r24, Y+18	; 0x12
    776a:	88 2f       	mov	r24, r24
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	98 2f       	mov	r25, r24
    7770:	88 27       	eor	r24, r24
    7772:	8a 87       	std	Y+10, r24	; 0x0a
    7774:	9b 87       	std	Y+11, r25	; 0x0b
    7776:	89 89       	ldd	r24, Y+17	; 0x11
    7778:	88 2f       	mov	r24, r24
    777a:	90 e0       	ldi	r25, 0x00	; 0
    777c:	2a 85       	ldd	r18, Y+10	; 0x0a
    777e:	3b 85       	ldd	r19, Y+11	; 0x0b
    7780:	82 2b       	or	r24, r18
    7782:	93 2b       	or	r25, r19
    7784:	8a 87       	std	Y+10, r24	; 0x0a
    7786:	9b 87       	std	Y+11, r25	; 0x0b
    7788:	2c 89       	ldd	r18, Y+20	; 0x14
    778a:	3d 89       	ldd	r19, Y+21	; 0x15
    778c:	88 85       	ldd	r24, Y+8	; 0x08
    778e:	99 85       	ldd	r25, Y+9	; 0x09
    7790:	28 17       	cp	r18, r24
    7792:	39 07       	cpc	r19, r25
    7794:	29 f0       	breq	.+10     	; 0x77a0 <lin_assign_nad+0x128>
    7796:	88 85       	ldd	r24, Y+8	; 0x08
    7798:	99 85       	ldd	r25, Y+9	; 0x09
    779a:	8f 3f       	cpi	r24, 0xFF	; 255
    779c:	9f 47       	sbci	r25, 0x7F	; 127
    779e:	59 f4       	brne	.+22     	; 0x77b6 <lin_assign_nad+0x13e>
    77a0:	2e 89       	ldd	r18, Y+22	; 0x16
    77a2:	3f 89       	ldd	r19, Y+23	; 0x17
    77a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    77a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    77a8:	28 17       	cp	r18, r24
    77aa:	39 07       	cpc	r19, r25
    77ac:	49 f0       	breq	.+18     	; 0x77c0 <lin_assign_nad+0x148>
    77ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    77b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    77b2:	01 96       	adiw	r24, 0x01	; 1
    77b4:	29 f0       	breq	.+10     	; 0x77c0 <lin_assign_nad+0x148>
    77b6:	8a 81       	ldd	r24, Y+2	; 0x02
    77b8:	9b 81       	ldd	r25, Y+3	; 0x03
    77ba:	fc 01       	movw	r30, r24
    77bc:	12 a6       	std	Z+42, r1	; 0x2a
    77be:	06 c0       	rjmp	.+12     	; 0x77cc <lin_assign_nad+0x154>
    77c0:	20 e0       	ldi	r18, 0x00	; 0
    77c2:	41 e0       	ldi	r20, 0x01	; 1
    77c4:	60 eb       	ldi	r22, 0xB0	; 176
    77c6:	89 8d       	ldd	r24, Y+25	; 0x19
    77c8:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
    77cc:	00 00       	nop
    77ce:	69 96       	adiw	r28, 0x19	; 25
    77d0:	cd bf       	out	0x3d, r28	; 61
    77d2:	de bf       	out	0x3e, r29	; 62
    77d4:	df 91       	pop	r29
    77d6:	cf 91       	pop	r28
    77d8:	08 95       	ret

000077da <lin_diagservice_assign_frame_id_range>:
    77da:	0f 93       	push	r16
    77dc:	1f 93       	push	r17
    77de:	cf 93       	push	r28
    77e0:	df 93       	push	r29
    77e2:	cd b7       	in	r28, 0x3d	; 61
    77e4:	de b7       	in	r29, 0x3e	; 62
    77e6:	62 97       	sbiw	r28, 0x12	; 18
    77e8:	cd bf       	out	0x3d, r28	; 61
    77ea:	de bf       	out	0x3e, r29	; 62
    77ec:	8a 8b       	std	Y+18, r24	; 0x12
    77ee:	1c 82       	std	Y+4, r1	; 0x04
    77f0:	8a 89       	ldd	r24, Y+18	; 0x12
    77f2:	28 2f       	mov	r18, r24
    77f4:	30 e0       	ldi	r19, 0x00	; 0
    77f6:	4c e1       	ldi	r20, 0x1C	; 28
    77f8:	42 9f       	mul	r20, r18
    77fa:	c0 01       	movw	r24, r0
    77fc:	43 9f       	mul	r20, r19
    77fe:	90 0d       	add	r25, r0
    7800:	11 24       	eor	r1, r1
    7802:	86 56       	subi	r24, 0x66	; 102
    7804:	9d 4b       	sbci	r25, 0xBD	; 189
    7806:	8e 83       	std	Y+6, r24	; 0x06
    7808:	9f 83       	std	Y+7, r25	; 0x07
    780a:	8a 89       	ldd	r24, Y+18	; 0x12
    780c:	28 2f       	mov	r18, r24
    780e:	30 e0       	ldi	r19, 0x00	; 0
    7810:	44 e3       	ldi	r20, 0x34	; 52
    7812:	42 9f       	mul	r20, r18
    7814:	c0 01       	movw	r24, r0
    7816:	43 9f       	mul	r20, r19
    7818:	90 0d       	add	r25, r0
    781a:	11 24       	eor	r1, r1
    781c:	0b 96       	adiw	r24, 0x0b	; 11
    781e:	84 59       	subi	r24, 0x94	; 148
    7820:	99 4b       	sbci	r25, 0xB9	; 185
    7822:	88 87       	std	Y+8, r24	; 0x08
    7824:	99 87       	std	Y+9, r25	; 0x09
    7826:	81 e0       	ldi	r24, 0x01	; 1
    7828:	8d 83       	std	Y+5, r24	; 0x05
    782a:	1a 82       	std	Y+2, r1	; 0x02
    782c:	26 c0       	rjmp	.+76     	; 0x787a <lin_diagservice_assign_frame_id_range+0xa0>
    782e:	8a 81       	ldd	r24, Y+2	; 0x02
    7830:	88 2f       	mov	r24, r24
    7832:	90 e0       	ldi	r25, 0x00	; 0
    7834:	28 85       	ldd	r18, Y+8	; 0x08
    7836:	39 85       	ldd	r19, Y+9	; 0x09
    7838:	f9 01       	movw	r30, r18
    783a:	41 85       	ldd	r20, Z+9	; 0x09
    783c:	52 85       	ldd	r21, Z+10	; 0x0a
    783e:	28 85       	ldd	r18, Y+8	; 0x08
    7840:	39 85       	ldd	r19, Y+9	; 0x09
    7842:	f9 01       	movw	r30, r18
    7844:	20 81       	ld	r18, Z
    7846:	31 81       	ldd	r19, Z+1	; 0x01
    7848:	22 0f       	add	r18, r18
    784a:	33 1f       	adc	r19, r19
    784c:	22 0f       	add	r18, r18
    784e:	33 1f       	adc	r19, r19
    7850:	22 0f       	add	r18, r18
    7852:	33 1f       	adc	r19, r19
    7854:	42 0f       	add	r20, r18
    7856:	53 1f       	adc	r21, r19
    7858:	2a 81       	ldd	r18, Y+2	; 0x02
    785a:	22 2f       	mov	r18, r18
    785c:	30 e0       	ldi	r19, 0x00	; 0
    785e:	24 0f       	add	r18, r20
    7860:	35 1f       	adc	r19, r21
    7862:	f9 01       	movw	r30, r18
    7864:	40 81       	ld	r20, Z
    7866:	9e 01       	movw	r18, r28
    7868:	26 5f       	subi	r18, 0xF6	; 246
    786a:	3f 4f       	sbci	r19, 0xFF	; 255
    786c:	82 0f       	add	r24, r18
    786e:	93 1f       	adc	r25, r19
    7870:	fc 01       	movw	r30, r24
    7872:	40 83       	st	Z, r20
    7874:	8a 81       	ldd	r24, Y+2	; 0x02
    7876:	8f 5f       	subi	r24, 0xFF	; 255
    7878:	8a 83       	std	Y+2, r24	; 0x02
    787a:	8a 81       	ldd	r24, Y+2	; 0x02
    787c:	88 30       	cpi	r24, 0x08	; 8
    787e:	b8 f2       	brcs	.-82     	; 0x782e <lin_diagservice_assign_frame_id_range+0x54>
    7880:	8d 85       	ldd	r24, Y+13	; 0x0d
    7882:	8b 83       	std	Y+3, r24	; 0x03
    7884:	81 e0       	ldi	r24, 0x01	; 1
    7886:	8a 83       	std	Y+2, r24	; 0x02
    7888:	03 c0       	rjmp	.+6      	; 0x7890 <lin_diagservice_assign_frame_id_range+0xb6>
    788a:	8c 81       	ldd	r24, Y+4	; 0x04
    788c:	8f 5f       	subi	r24, 0xFF	; 255
    788e:	8c 83       	std	Y+4, r24	; 0x04
    7890:	8e 81       	ldd	r24, Y+6	; 0x06
    7892:	9f 81       	ldd	r25, Y+7	; 0x07
    7894:	fc 01       	movw	r30, r24
    7896:	20 85       	ldd	r18, Z+8	; 0x08
    7898:	31 85       	ldd	r19, Z+9	; 0x09
    789a:	8a 81       	ldd	r24, Y+2	; 0x02
    789c:	91 e0       	ldi	r25, 0x01	; 1
    789e:	98 0f       	add	r25, r24
    78a0:	9a 83       	std	Y+2, r25	; 0x02
    78a2:	88 2f       	mov	r24, r24
    78a4:	90 e0       	ldi	r25, 0x00	; 0
    78a6:	88 0f       	add	r24, r24
    78a8:	99 1f       	adc	r25, r25
    78aa:	82 0f       	add	r24, r18
    78ac:	93 1f       	adc	r25, r19
    78ae:	fc 01       	movw	r30, r24
    78b0:	80 81       	ld	r24, Z
    78b2:	91 81       	ldd	r25, Z+1	; 0x01
    78b4:	01 96       	adiw	r24, 0x01	; 1
    78b6:	49 f7       	brne	.-46     	; 0x788a <lin_diagservice_assign_frame_id_range+0xb0>
    78b8:	8c 81       	ldd	r24, Y+4	; 0x04
    78ba:	83 50       	subi	r24, 0x03	; 3
    78bc:	8c 83       	std	Y+4, r24	; 0x04
    78be:	84 e0       	ldi	r24, 0x04	; 4
    78c0:	8a 83       	std	Y+2, r24	; 0x02
    78c2:	8b 81       	ldd	r24, Y+3	; 0x03
    78c4:	89 83       	std	Y+1, r24	; 0x01
    78c6:	1e c0       	rjmp	.+60     	; 0x7904 <lin_diagservice_assign_frame_id_range+0x12a>
    78c8:	8a 81       	ldd	r24, Y+2	; 0x02
    78ca:	91 e0       	ldi	r25, 0x01	; 1
    78cc:	98 0f       	add	r25, r24
    78ce:	9a 83       	std	Y+2, r25	; 0x02
    78d0:	88 2f       	mov	r24, r24
    78d2:	90 e0       	ldi	r25, 0x00	; 0
    78d4:	9e 01       	movw	r18, r28
    78d6:	26 5f       	subi	r18, 0xF6	; 246
    78d8:	3f 4f       	sbci	r19, 0xFF	; 255
    78da:	82 0f       	add	r24, r18
    78dc:	93 1f       	adc	r25, r19
    78de:	fc 01       	movw	r30, r24
    78e0:	80 81       	ld	r24, Z
    78e2:	8f 3f       	cpi	r24, 0xFF	; 255
    78e4:	61 f0       	breq	.+24     	; 0x78fe <lin_diagservice_assign_frame_id_range+0x124>
    78e6:	99 81       	ldd	r25, Y+1	; 0x01
    78e8:	8c 81       	ldd	r24, Y+4	; 0x04
    78ea:	89 17       	cp	r24, r25
    78ec:	40 f4       	brcc	.+16     	; 0x78fe <lin_diagservice_assign_frame_id_range+0x124>
    78ee:	20 e1       	ldi	r18, 0x10	; 16
    78f0:	40 e0       	ldi	r20, 0x00	; 0
    78f2:	67 eb       	ldi	r22, 0xB7	; 183
    78f4:	8a 89       	ldd	r24, Y+18	; 0x12
    78f6:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
    78fa:	1d 82       	std	Y+5, r1	; 0x05
    78fc:	0d c0       	rjmp	.+26     	; 0x7918 <lin_diagservice_assign_frame_id_range+0x13e>
    78fe:	89 81       	ldd	r24, Y+1	; 0x01
    7900:	8f 5f       	subi	r24, 0xFF	; 255
    7902:	89 83       	std	Y+1, r24	; 0x01
    7904:	89 81       	ldd	r24, Y+1	; 0x01
    7906:	28 2f       	mov	r18, r24
    7908:	30 e0       	ldi	r19, 0x00	; 0
    790a:	8b 81       	ldd	r24, Y+3	; 0x03
    790c:	88 2f       	mov	r24, r24
    790e:	90 e0       	ldi	r25, 0x00	; 0
    7910:	04 96       	adiw	r24, 0x04	; 4
    7912:	28 17       	cp	r18, r24
    7914:	39 07       	cpc	r19, r25
    7916:	c0 f2       	brcs	.-80     	; 0x78c8 <lin_diagservice_assign_frame_id_range+0xee>
    7918:	8d 81       	ldd	r24, Y+5	; 0x05
    791a:	81 30       	cpi	r24, 0x01	; 1
    791c:	09 f0       	breq	.+2      	; 0x7920 <lin_diagservice_assign_frame_id_range+0x146>
    791e:	52 c0       	rjmp	.+164    	; 0x79c4 <lin_diagservice_assign_frame_id_range+0x1ea>
    7920:	84 e0       	ldi	r24, 0x04	; 4
    7922:	8a 83       	std	Y+2, r24	; 0x02
    7924:	45 c0       	rjmp	.+138    	; 0x79b0 <lin_diagservice_assign_frame_id_range+0x1d6>
    7926:	8a 81       	ldd	r24, Y+2	; 0x02
    7928:	88 2f       	mov	r24, r24
    792a:	90 e0       	ldi	r25, 0x00	; 0
    792c:	9e 01       	movw	r18, r28
    792e:	26 5f       	subi	r18, 0xF6	; 246
    7930:	3f 4f       	sbci	r19, 0xFF	; 255
    7932:	82 0f       	add	r24, r18
    7934:	93 1f       	adc	r25, r19
    7936:	fc 01       	movw	r30, r24
    7938:	80 81       	ld	r24, Z
    793a:	88 2f       	mov	r24, r24
    793c:	90 e0       	ldi	r25, 0x00	; 0
    793e:	00 97       	sbiw	r24, 0x00	; 0
    7940:	21 f0       	breq	.+8      	; 0x794a <lin_diagservice_assign_frame_id_range+0x170>
    7942:	8f 3f       	cpi	r24, 0xFF	; 255
    7944:	91 05       	cpc	r25, r1
    7946:	81 f1       	breq	.+96     	; 0x79a8 <lin_diagservice_assign_frame_id_range+0x1ce>
    7948:	11 c0       	rjmp	.+34     	; 0x796c <lin_diagservice_assign_frame_id_range+0x192>
    794a:	8b 81       	ldd	r24, Y+3	; 0x03
    794c:	8f 5f       	subi	r24, 0xFF	; 255
    794e:	8b 83       	std	Y+3, r24	; 0x03
    7950:	8e 81       	ldd	r24, Y+6	; 0x06
    7952:	9f 81       	ldd	r25, Y+7	; 0x07
    7954:	fc 01       	movw	r30, r24
    7956:	22 85       	ldd	r18, Z+10	; 0x0a
    7958:	33 85       	ldd	r19, Z+11	; 0x0b
    795a:	8b 81       	ldd	r24, Y+3	; 0x03
    795c:	88 2f       	mov	r24, r24
    795e:	90 e0       	ldi	r25, 0x00	; 0
    7960:	82 0f       	add	r24, r18
    7962:	93 1f       	adc	r25, r19
    7964:	2f ef       	ldi	r18, 0xFF	; 255
    7966:	fc 01       	movw	r30, r24
    7968:	20 83       	st	Z, r18
    796a:	1f c0       	rjmp	.+62     	; 0x79aa <lin_diagservice_assign_frame_id_range+0x1d0>
    796c:	8b 81       	ldd	r24, Y+3	; 0x03
    796e:	8f 5f       	subi	r24, 0xFF	; 255
    7970:	8b 83       	std	Y+3, r24	; 0x03
    7972:	8e 81       	ldd	r24, Y+6	; 0x06
    7974:	9f 81       	ldd	r25, Y+7	; 0x07
    7976:	fc 01       	movw	r30, r24
    7978:	22 85       	ldd	r18, Z+10	; 0x0a
    797a:	33 85       	ldd	r19, Z+11	; 0x0b
    797c:	8b 81       	ldd	r24, Y+3	; 0x03
    797e:	88 2f       	mov	r24, r24
    7980:	90 e0       	ldi	r25, 0x00	; 0
    7982:	89 01       	movw	r16, r18
    7984:	08 0f       	add	r16, r24
    7986:	19 1f       	adc	r17, r25
    7988:	8a 81       	ldd	r24, Y+2	; 0x02
    798a:	88 2f       	mov	r24, r24
    798c:	90 e0       	ldi	r25, 0x00	; 0
    798e:	9e 01       	movw	r18, r28
    7990:	26 5f       	subi	r18, 0xF6	; 246
    7992:	3f 4f       	sbci	r19, 0xFF	; 255
    7994:	82 0f       	add	r24, r18
    7996:	93 1f       	adc	r25, r19
    7998:	fc 01       	movw	r30, r24
    799a:	80 81       	ld	r24, Z
    799c:	61 e0       	ldi	r22, 0x01	; 1
    799e:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <lin_process_parity>
    79a2:	f8 01       	movw	r30, r16
    79a4:	80 83       	st	Z, r24
    79a6:	01 c0       	rjmp	.+2      	; 0x79aa <lin_diagservice_assign_frame_id_range+0x1d0>
    79a8:	00 00       	nop
    79aa:	8a 81       	ldd	r24, Y+2	; 0x02
    79ac:	8f 5f       	subi	r24, 0xFF	; 255
    79ae:	8a 83       	std	Y+2, r24	; 0x02
    79b0:	8a 81       	ldd	r24, Y+2	; 0x02
    79b2:	88 30       	cpi	r24, 0x08	; 8
    79b4:	08 f4       	brcc	.+2      	; 0x79b8 <lin_diagservice_assign_frame_id_range+0x1de>
    79b6:	b7 cf       	rjmp	.-146    	; 0x7926 <lin_diagservice_assign_frame_id_range+0x14c>
    79b8:	20 e0       	ldi	r18, 0x00	; 0
    79ba:	41 e0       	ldi	r20, 0x01	; 1
    79bc:	67 eb       	ldi	r22, 0xB7	; 183
    79be:	8a 89       	ldd	r24, Y+18	; 0x12
    79c0:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
    79c4:	00 00       	nop
    79c6:	62 96       	adiw	r28, 0x12	; 18
    79c8:	cd bf       	out	0x3d, r28	; 61
    79ca:	de bf       	out	0x3e, r29	; 62
    79cc:	df 91       	pop	r29
    79ce:	cf 91       	pop	r28
    79d0:	1f 91       	pop	r17
    79d2:	0f 91       	pop	r16
    79d4:	08 95       	ret

000079d6 <lin_read_data_by_identify>:
    79d6:	cf 93       	push	r28
    79d8:	df 93       	push	r29
    79da:	cd b7       	in	r28, 0x3d	; 61
    79dc:	de b7       	in	r29, 0x3e	; 62
    79de:	65 97       	sbiw	r28, 0x15	; 21
    79e0:	cd bf       	out	0x3d, r28	; 61
    79e2:	de bf       	out	0x3e, r29	; 62
    79e4:	8d 8b       	std	Y+21, r24	; 0x15
    79e6:	8d 89       	ldd	r24, Y+21	; 0x15
    79e8:	28 2f       	mov	r18, r24
    79ea:	30 e0       	ldi	r19, 0x00	; 0
    79ec:	44 e3       	ldi	r20, 0x34	; 52
    79ee:	42 9f       	mul	r20, r18
    79f0:	c0 01       	movw	r24, r0
    79f2:	43 9f       	mul	r20, r19
    79f4:	90 0d       	add	r25, r0
    79f6:	11 24       	eor	r1, r1
    79f8:	84 59       	subi	r24, 0x94	; 148
    79fa:	99 4b       	sbci	r25, 0xB9	; 185
    79fc:	8a 83       	std	Y+2, r24	; 0x02
    79fe:	9b 83       	std	Y+3, r25	; 0x03
    7a00:	8d 89       	ldd	r24, Y+21	; 0x15
    7a02:	28 2f       	mov	r18, r24
    7a04:	30 e0       	ldi	r19, 0x00	; 0
    7a06:	4c e1       	ldi	r20, 0x1C	; 28
    7a08:	42 9f       	mul	r20, r18
    7a0a:	c0 01       	movw	r24, r0
    7a0c:	43 9f       	mul	r20, r19
    7a0e:	90 0d       	add	r25, r0
    7a10:	11 24       	eor	r1, r1
    7a12:	86 56       	subi	r24, 0x66	; 102
    7a14:	9d 4b       	sbci	r25, 0xBD	; 189
    7a16:	8c 83       	std	Y+4, r24	; 0x04
    7a18:	9d 83       	std	Y+5, r25	; 0x05
    7a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    7a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    7a1e:	fc 01       	movw	r30, r24
    7a20:	82 89       	ldd	r24, Z+18	; 0x12
    7a22:	28 2f       	mov	r18, r24
    7a24:	30 e0       	ldi	r19, 0x00	; 0
    7a26:	44 e2       	ldi	r20, 0x24	; 36
    7a28:	42 9f       	mul	r20, r18
    7a2a:	c0 01       	movw	r24, r0
    7a2c:	43 9f       	mul	r20, r19
    7a2e:	90 0d       	add	r25, r0
    7a30:	11 24       	eor	r1, r1
    7a32:	8a 58       	subi	r24, 0x8A	; 138
    7a34:	9d 4b       	sbci	r25, 0xBD	; 189
    7a36:	8e 83       	std	Y+6, r24	; 0x06
    7a38:	9f 83       	std	Y+7, r25	; 0x07
    7a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    7a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    7a3e:	0b 96       	adiw	r24, 0x0b	; 11
    7a40:	88 87       	std	Y+8, r24	; 0x08
    7a42:	99 87       	std	Y+9, r25	; 0x09
    7a44:	19 82       	std	Y+1, r1	; 0x01
    7a46:	26 c0       	rjmp	.+76     	; 0x7a94 <lin_read_data_by_identify+0xbe>
    7a48:	89 81       	ldd	r24, Y+1	; 0x01
    7a4a:	88 2f       	mov	r24, r24
    7a4c:	90 e0       	ldi	r25, 0x00	; 0
    7a4e:	28 85       	ldd	r18, Y+8	; 0x08
    7a50:	39 85       	ldd	r19, Y+9	; 0x09
    7a52:	f9 01       	movw	r30, r18
    7a54:	41 85       	ldd	r20, Z+9	; 0x09
    7a56:	52 85       	ldd	r21, Z+10	; 0x0a
    7a58:	28 85       	ldd	r18, Y+8	; 0x08
    7a5a:	39 85       	ldd	r19, Y+9	; 0x09
    7a5c:	f9 01       	movw	r30, r18
    7a5e:	20 81       	ld	r18, Z
    7a60:	31 81       	ldd	r19, Z+1	; 0x01
    7a62:	22 0f       	add	r18, r18
    7a64:	33 1f       	adc	r19, r19
    7a66:	22 0f       	add	r18, r18
    7a68:	33 1f       	adc	r19, r19
    7a6a:	22 0f       	add	r18, r18
    7a6c:	33 1f       	adc	r19, r19
    7a6e:	42 0f       	add	r20, r18
    7a70:	53 1f       	adc	r21, r19
    7a72:	29 81       	ldd	r18, Y+1	; 0x01
    7a74:	22 2f       	mov	r18, r18
    7a76:	30 e0       	ldi	r19, 0x00	; 0
    7a78:	24 0f       	add	r18, r20
    7a7a:	35 1f       	adc	r19, r21
    7a7c:	f9 01       	movw	r30, r18
    7a7e:	40 81       	ld	r20, Z
    7a80:	9e 01       	movw	r18, r28
    7a82:	23 5f       	subi	r18, 0xF3	; 243
    7a84:	3f 4f       	sbci	r19, 0xFF	; 255
    7a86:	82 0f       	add	r24, r18
    7a88:	93 1f       	adc	r25, r19
    7a8a:	fc 01       	movw	r30, r24
    7a8c:	40 83       	st	Z, r20
    7a8e:	89 81       	ldd	r24, Y+1	; 0x01
    7a90:	8f 5f       	subi	r24, 0xFF	; 255
    7a92:	89 83       	std	Y+1, r24	; 0x01
    7a94:	89 81       	ldd	r24, Y+1	; 0x01
    7a96:	88 30       	cpi	r24, 0x08	; 8
    7a98:	b8 f2       	brcs	.-82     	; 0x7a48 <lin_read_data_by_identify+0x72>
    7a9a:	88 89       	ldd	r24, Y+16	; 0x10
    7a9c:	88 2f       	mov	r24, r24
    7a9e:	90 e0       	ldi	r25, 0x00	; 0
    7aa0:	98 2f       	mov	r25, r24
    7aa2:	88 27       	eor	r24, r24
    7aa4:	8a 87       	std	Y+10, r24	; 0x0a
    7aa6:	9b 87       	std	Y+11, r25	; 0x0b
    7aa8:	89 89       	ldd	r24, Y+17	; 0x11
    7aaa:	88 2f       	mov	r24, r24
    7aac:	90 e0       	ldi	r25, 0x00	; 0
    7aae:	2a 85       	ldd	r18, Y+10	; 0x0a
    7ab0:	3b 85       	ldd	r19, Y+11	; 0x0b
    7ab2:	82 2b       	or	r24, r18
    7ab4:	93 2b       	or	r25, r19
    7ab6:	8a 87       	std	Y+10, r24	; 0x0a
    7ab8:	9b 87       	std	Y+11, r25	; 0x0b
    7aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    7abc:	8c 87       	std	Y+12, r24	; 0x0c
    7abe:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ac0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ac2:	81 39       	cpi	r24, 0x91	; 145
    7ac4:	f1 ef       	ldi	r31, 0xF1	; 241
    7ac6:	9f 07       	cpc	r25, r31
    7ac8:	09 f4       	brne	.+2      	; 0x7acc <lin_read_data_by_identify+0xf6>
    7aca:	d4 c0       	rjmp	.+424    	; 0x7c74 <lin_read_data_by_identify+0x29e>
    7acc:	82 39       	cpi	r24, 0x92	; 146
    7ace:	21 ef       	ldi	r18, 0xF1	; 241
    7ad0:	92 07       	cpc	r25, r18
    7ad2:	48 f4       	brcc	.+18     	; 0x7ae6 <lin_read_data_by_identify+0x110>
    7ad4:	80 38       	cpi	r24, 0x80	; 128
    7ad6:	e1 ef       	ldi	r30, 0xF1	; 241
    7ad8:	9e 07       	cpc	r25, r30
    7ada:	09 f4       	brne	.+2      	; 0x7ade <lin_read_data_by_identify+0x108>
    7adc:	8c c0       	rjmp	.+280    	; 0x7bf6 <lin_read_data_by_identify+0x220>
    7ade:	88 38       	cpi	r24, 0x88	; 136
    7ae0:	91 4f       	sbci	r25, 0xF1	; 241
    7ae2:	59 f0       	breq	.+22     	; 0x7afa <lin_read_data_by_identify+0x124>
    7ae4:	06 c1       	rjmp	.+524    	; 0x7cf2 <lin_read_data_by_identify+0x31c>
    7ae6:	88 39       	cpi	r24, 0x98	; 152
    7ae8:	21 ef       	ldi	r18, 0xF1	; 241
    7aea:	92 07       	cpc	r25, r18
    7aec:	09 f4       	brne	.+2      	; 0x7af0 <lin_read_data_by_identify+0x11a>
    7aee:	08 c1       	rjmp	.+528    	; 0x7d00 <lin_read_data_by_identify+0x32a>
    7af0:	89 39       	cpi	r24, 0x99	; 153
    7af2:	91 4f       	sbci	r25, 0xF1	; 241
    7af4:	09 f4       	brne	.+2      	; 0x7af8 <lin_read_data_by_identify+0x122>
    7af6:	40 c0       	rjmp	.+128    	; 0x7b78 <lin_read_data_by_identify+0x1a2>
    7af8:	fc c0       	rjmp	.+504    	; 0x7cf2 <lin_read_data_by_identify+0x31c>
    7afa:	8e 81       	ldd	r24, Y+6	; 0x06
    7afc:	9f 81       	ldd	r25, Y+7	; 0x07
    7afe:	fc 01       	movw	r30, r24
    7b00:	80 81       	ld	r24, Z
    7b02:	91 81       	ldd	r25, Z+1	; 0x01
    7b04:	fc 01       	movw	r30, r24
    7b06:	80 81       	ld	r24, Z
    7b08:	8d 87       	std	Y+13, r24	; 0x0d
    7b0a:	80 e1       	ldi	r24, 0x10	; 16
    7b0c:	8e 87       	std	Y+14, r24	; 0x0e
    7b0e:	8a e0       	ldi	r24, 0x0A	; 10
    7b10:	8f 87       	std	Y+15, r24	; 0x0f
    7b12:	8c 85       	ldd	r24, Y+12	; 0x0c
    7b14:	80 5c       	subi	r24, 0xC0	; 192
    7b16:	88 8b       	std	Y+16, r24	; 0x10
    7b18:	81 ef       	ldi	r24, 0xF1	; 241
    7b1a:	89 8b       	std	Y+17, r24	; 0x11
    7b1c:	88 e8       	ldi	r24, 0x88	; 136
    7b1e:	8a 8b       	std	Y+18, r24	; 0x12
    7b20:	80 e3       	ldi	r24, 0x30	; 48
    7b22:	8b 8b       	std	Y+19, r24	; 0x13
    7b24:	82 e3       	ldi	r24, 0x32	; 50
    7b26:	8c 8b       	std	Y+20, r24	; 0x14
    7b28:	ce 01       	movw	r24, r28
    7b2a:	0d 96       	adiw	r24, 0x0d	; 13
    7b2c:	bc 01       	movw	r22, r24
    7b2e:	8d 89       	ldd	r24, Y+21	; 0x15
    7b30:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7b34:	8e 81       	ldd	r24, Y+6	; 0x06
    7b36:	9f 81       	ldd	r25, Y+7	; 0x07
    7b38:	fc 01       	movw	r30, r24
    7b3a:	80 81       	ld	r24, Z
    7b3c:	91 81       	ldd	r25, Z+1	; 0x01
    7b3e:	fc 01       	movw	r30, r24
    7b40:	80 81       	ld	r24, Z
    7b42:	8d 87       	std	Y+13, r24	; 0x0d
    7b44:	81 e2       	ldi	r24, 0x21	; 33
    7b46:	8e 87       	std	Y+14, r24	; 0x0e
    7b48:	8e e2       	ldi	r24, 0x2E	; 46
    7b4a:	8f 87       	std	Y+15, r24	; 0x0f
    7b4c:	80 e3       	ldi	r24, 0x30	; 48
    7b4e:	88 8b       	std	Y+16, r24	; 0x10
    7b50:	82 e3       	ldi	r24, 0x32	; 50
    7b52:	89 8b       	std	Y+17, r24	; 0x11
    7b54:	8e e2       	ldi	r24, 0x2E	; 46
    7b56:	8a 8b       	std	Y+18, r24	; 0x12
    7b58:	80 e3       	ldi	r24, 0x30	; 48
    7b5a:	8b 8b       	std	Y+19, r24	; 0x13
    7b5c:	80 e3       	ldi	r24, 0x30	; 48
    7b5e:	8c 8b       	std	Y+20, r24	; 0x14
    7b60:	ce 01       	movw	r24, r28
    7b62:	0d 96       	adiw	r24, 0x0d	; 13
    7b64:	bc 01       	movw	r22, r24
    7b66:	8d 89       	ldd	r24, Y+21	; 0x15
    7b68:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    7b70:	22 e0       	ldi	r18, 0x02	; 2
    7b72:	fc 01       	movw	r30, r24
    7b74:	26 a3       	std	Z+38, r18	; 0x26
    7b76:	c5 c0       	rjmp	.+394    	; 0x7d02 <lin_read_data_by_identify+0x32c>
    7b78:	8e 81       	ldd	r24, Y+6	; 0x06
    7b7a:	9f 81       	ldd	r25, Y+7	; 0x07
    7b7c:	fc 01       	movw	r30, r24
    7b7e:	80 81       	ld	r24, Z
    7b80:	91 81       	ldd	r25, Z+1	; 0x01
    7b82:	fc 01       	movw	r30, r24
    7b84:	80 81       	ld	r24, Z
    7b86:	8d 87       	std	Y+13, r24	; 0x0d
    7b88:	80 e1       	ldi	r24, 0x10	; 16
    7b8a:	8e 87       	std	Y+14, r24	; 0x0e
    7b8c:	86 e0       	ldi	r24, 0x06	; 6
    7b8e:	8f 87       	std	Y+15, r24	; 0x0f
    7b90:	8c 85       	ldd	r24, Y+12	; 0x0c
    7b92:	80 5c       	subi	r24, 0xC0	; 192
    7b94:	88 8b       	std	Y+16, r24	; 0x10
    7b96:	81 ef       	ldi	r24, 0xF1	; 241
    7b98:	89 8b       	std	Y+17, r24	; 0x11
    7b9a:	89 e9       	ldi	r24, 0x99	; 153
    7b9c:	8a 8b       	std	Y+18, r24	; 0x12
    7b9e:	84 e1       	ldi	r24, 0x14	; 20
    7ba0:	8b 8b       	std	Y+19, r24	; 0x13
    7ba2:	80 e1       	ldi	r24, 0x10	; 16
    7ba4:	8c 8b       	std	Y+20, r24	; 0x14
    7ba6:	ce 01       	movw	r24, r28
    7ba8:	0d 96       	adiw	r24, 0x0d	; 13
    7baa:	bc 01       	movw	r22, r24
    7bac:	8d 89       	ldd	r24, Y+21	; 0x15
    7bae:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    7bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    7bb6:	fc 01       	movw	r30, r24
    7bb8:	80 81       	ld	r24, Z
    7bba:	91 81       	ldd	r25, Z+1	; 0x01
    7bbc:	fc 01       	movw	r30, r24
    7bbe:	80 81       	ld	r24, Z
    7bc0:	8d 87       	std	Y+13, r24	; 0x0d
    7bc2:	81 e2       	ldi	r24, 0x21	; 33
    7bc4:	8e 87       	std	Y+14, r24	; 0x0e
    7bc6:	8b e0       	ldi	r24, 0x0B	; 11
    7bc8:	8f 87       	std	Y+15, r24	; 0x0f
    7bca:	8c e0       	ldi	r24, 0x0C	; 12
    7bcc:	88 8b       	std	Y+16, r24	; 0x10
    7bce:	8f ef       	ldi	r24, 0xFF	; 255
    7bd0:	89 8b       	std	Y+17, r24	; 0x11
    7bd2:	8f ef       	ldi	r24, 0xFF	; 255
    7bd4:	8a 8b       	std	Y+18, r24	; 0x12
    7bd6:	8f ef       	ldi	r24, 0xFF	; 255
    7bd8:	8b 8b       	std	Y+19, r24	; 0x13
    7bda:	8f ef       	ldi	r24, 0xFF	; 255
    7bdc:	8c 8b       	std	Y+20, r24	; 0x14
    7bde:	ce 01       	movw	r24, r28
    7be0:	0d 96       	adiw	r24, 0x0d	; 13
    7be2:	bc 01       	movw	r22, r24
    7be4:	8d 89       	ldd	r24, Y+21	; 0x15
    7be6:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7bea:	8a 81       	ldd	r24, Y+2	; 0x02
    7bec:	9b 81       	ldd	r25, Y+3	; 0x03
    7bee:	22 e0       	ldi	r18, 0x02	; 2
    7bf0:	fc 01       	movw	r30, r24
    7bf2:	26 a3       	std	Z+38, r18	; 0x26
    7bf4:	86 c0       	rjmp	.+268    	; 0x7d02 <lin_read_data_by_identify+0x32c>
    7bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    7bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    7bfa:	fc 01       	movw	r30, r24
    7bfc:	80 81       	ld	r24, Z
    7bfe:	91 81       	ldd	r25, Z+1	; 0x01
    7c00:	fc 01       	movw	r30, r24
    7c02:	80 81       	ld	r24, Z
    7c04:	8d 87       	std	Y+13, r24	; 0x0d
    7c06:	80 e1       	ldi	r24, 0x10	; 16
    7c08:	8e 87       	std	Y+14, r24	; 0x0e
    7c0a:	8a e0       	ldi	r24, 0x0A	; 10
    7c0c:	8f 87       	std	Y+15, r24	; 0x0f
    7c0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c10:	80 5c       	subi	r24, 0xC0	; 192
    7c12:	88 8b       	std	Y+16, r24	; 0x10
    7c14:	81 ef       	ldi	r24, 0xF1	; 241
    7c16:	89 8b       	std	Y+17, r24	; 0x11
    7c18:	80 e8       	ldi	r24, 0x80	; 128
    7c1a:	8a 8b       	std	Y+18, r24	; 0x12
    7c1c:	80 e3       	ldi	r24, 0x30	; 48
    7c1e:	8b 8b       	std	Y+19, r24	; 0x13
    7c20:	82 e3       	ldi	r24, 0x32	; 50
    7c22:	8c 8b       	std	Y+20, r24	; 0x14
    7c24:	ce 01       	movw	r24, r28
    7c26:	0d 96       	adiw	r24, 0x0d	; 13
    7c28:	bc 01       	movw	r22, r24
    7c2a:	8d 89       	ldd	r24, Y+21	; 0x15
    7c2c:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7c30:	8e 81       	ldd	r24, Y+6	; 0x06
    7c32:	9f 81       	ldd	r25, Y+7	; 0x07
    7c34:	fc 01       	movw	r30, r24
    7c36:	80 81       	ld	r24, Z
    7c38:	91 81       	ldd	r25, Z+1	; 0x01
    7c3a:	fc 01       	movw	r30, r24
    7c3c:	80 81       	ld	r24, Z
    7c3e:	8d 87       	std	Y+13, r24	; 0x0d
    7c40:	81 e2       	ldi	r24, 0x21	; 33
    7c42:	8e 87       	std	Y+14, r24	; 0x0e
    7c44:	8e e2       	ldi	r24, 0x2E	; 46
    7c46:	8f 87       	std	Y+15, r24	; 0x0f
    7c48:	80 e3       	ldi	r24, 0x30	; 48
    7c4a:	88 8b       	std	Y+16, r24	; 0x10
    7c4c:	82 e3       	ldi	r24, 0x32	; 50
    7c4e:	89 8b       	std	Y+17, r24	; 0x11
    7c50:	8e e2       	ldi	r24, 0x2E	; 46
    7c52:	8a 8b       	std	Y+18, r24	; 0x12
    7c54:	80 e3       	ldi	r24, 0x30	; 48
    7c56:	8b 8b       	std	Y+19, r24	; 0x13
    7c58:	80 e3       	ldi	r24, 0x30	; 48
    7c5a:	8c 8b       	std	Y+20, r24	; 0x14
    7c5c:	ce 01       	movw	r24, r28
    7c5e:	0d 96       	adiw	r24, 0x0d	; 13
    7c60:	bc 01       	movw	r22, r24
    7c62:	8d 89       	ldd	r24, Y+21	; 0x15
    7c64:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7c68:	8a 81       	ldd	r24, Y+2	; 0x02
    7c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    7c6c:	22 e0       	ldi	r18, 0x02	; 2
    7c6e:	fc 01       	movw	r30, r24
    7c70:	26 a3       	std	Z+38, r18	; 0x26
    7c72:	47 c0       	rjmp	.+142    	; 0x7d02 <lin_read_data_by_identify+0x32c>
    7c74:	8e 81       	ldd	r24, Y+6	; 0x06
    7c76:	9f 81       	ldd	r25, Y+7	; 0x07
    7c78:	fc 01       	movw	r30, r24
    7c7a:	80 81       	ld	r24, Z
    7c7c:	91 81       	ldd	r25, Z+1	; 0x01
    7c7e:	fc 01       	movw	r30, r24
    7c80:	80 81       	ld	r24, Z
    7c82:	8d 87       	std	Y+13, r24	; 0x0d
    7c84:	80 e1       	ldi	r24, 0x10	; 16
    7c86:	8e 87       	std	Y+14, r24	; 0x0e
    7c88:	87 e0       	ldi	r24, 0x07	; 7
    7c8a:	8f 87       	std	Y+15, r24	; 0x0f
    7c8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    7c8e:	80 5c       	subi	r24, 0xC0	; 192
    7c90:	88 8b       	std	Y+16, r24	; 0x10
    7c92:	81 ef       	ldi	r24, 0xF1	; 241
    7c94:	89 8b       	std	Y+17, r24	; 0x11
    7c96:	81 e9       	ldi	r24, 0x91	; 145
    7c98:	8a 8b       	std	Y+18, r24	; 0x12
    7c9a:	88 e4       	ldi	r24, 0x48	; 72
    7c9c:	8b 8b       	std	Y+19, r24	; 0x13
    7c9e:	81 e2       	ldi	r24, 0x21	; 33
    7ca0:	8c 8b       	std	Y+20, r24	; 0x14
    7ca2:	ce 01       	movw	r24, r28
    7ca4:	0d 96       	adiw	r24, 0x0d	; 13
    7ca6:	bc 01       	movw	r22, r24
    7ca8:	8d 89       	ldd	r24, Y+21	; 0x15
    7caa:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7cae:	8e 81       	ldd	r24, Y+6	; 0x06
    7cb0:	9f 81       	ldd	r25, Y+7	; 0x07
    7cb2:	fc 01       	movw	r30, r24
    7cb4:	80 81       	ld	r24, Z
    7cb6:	91 81       	ldd	r25, Z+1	; 0x01
    7cb8:	fc 01       	movw	r30, r24
    7cba:	80 81       	ld	r24, Z
    7cbc:	8d 87       	std	Y+13, r24	; 0x0d
    7cbe:	81 e2       	ldi	r24, 0x21	; 33
    7cc0:	8e 87       	std	Y+14, r24	; 0x0e
    7cc2:	8e e2       	ldi	r24, 0x2E	; 46
    7cc4:	8f 87       	std	Y+15, r24	; 0x0f
    7cc6:	80 e3       	ldi	r24, 0x30	; 48
    7cc8:	88 8b       	std	Y+16, r24	; 0x10
    7cca:	81 e3       	ldi	r24, 0x31	; 49
    7ccc:	89 8b       	std	Y+17, r24	; 0x11
    7cce:	8f ef       	ldi	r24, 0xFF	; 255
    7cd0:	8a 8b       	std	Y+18, r24	; 0x12
    7cd2:	8f ef       	ldi	r24, 0xFF	; 255
    7cd4:	8b 8b       	std	Y+19, r24	; 0x13
    7cd6:	8f ef       	ldi	r24, 0xFF	; 255
    7cd8:	8c 8b       	std	Y+20, r24	; 0x14
    7cda:	ce 01       	movw	r24, r28
    7cdc:	0d 96       	adiw	r24, 0x0d	; 13
    7cde:	bc 01       	movw	r22, r24
    7ce0:	8d 89       	ldd	r24, Y+21	; 0x15
    7ce2:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    7ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    7cea:	22 e0       	ldi	r18, 0x02	; 2
    7cec:	fc 01       	movw	r30, r24
    7cee:	26 a3       	std	Z+38, r18	; 0x26
    7cf0:	08 c0       	rjmp	.+16     	; 0x7d02 <lin_read_data_by_identify+0x32c>
    7cf2:	20 e0       	ldi	r18, 0x00	; 0
    7cf4:	40 e0       	ldi	r20, 0x00	; 0
    7cf6:	62 e2       	ldi	r22, 0x22	; 34
    7cf8:	8d 89       	ldd	r24, Y+21	; 0x15
    7cfa:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
    7cfe:	01 c0       	rjmp	.+2      	; 0x7d02 <lin_read_data_by_identify+0x32c>
    7d00:	00 00       	nop
    7d02:	00 00       	nop
    7d04:	65 96       	adiw	r28, 0x15	; 21
    7d06:	cd bf       	out	0x3d, r28	; 61
    7d08:	de bf       	out	0x3e, r29	; 62
    7d0a:	df 91       	pop	r29
    7d0c:	cf 91       	pop	r28
    7d0e:	08 95       	ret

00007d10 <lin_slave_session_ctr>:
    7d10:	cf 93       	push	r28
    7d12:	df 93       	push	r29
    7d14:	cd b7       	in	r28, 0x3d	; 61
    7d16:	de b7       	in	r29, 0x3e	; 62
    7d18:	63 97       	sbiw	r28, 0x13	; 19
    7d1a:	cd bf       	out	0x3d, r28	; 61
    7d1c:	de bf       	out	0x3e, r29	; 62
    7d1e:	8b 8b       	std	Y+19, r24	; 0x13
    7d20:	8b 89       	ldd	r24, Y+19	; 0x13
    7d22:	28 2f       	mov	r18, r24
    7d24:	30 e0       	ldi	r19, 0x00	; 0
    7d26:	44 e3       	ldi	r20, 0x34	; 52
    7d28:	42 9f       	mul	r20, r18
    7d2a:	c0 01       	movw	r24, r0
    7d2c:	43 9f       	mul	r20, r19
    7d2e:	90 0d       	add	r25, r0
    7d30:	11 24       	eor	r1, r1
    7d32:	84 59       	subi	r24, 0x94	; 148
    7d34:	99 4b       	sbci	r25, 0xB9	; 185
    7d36:	89 83       	std	Y+1, r24	; 0x01
    7d38:	9a 83       	std	Y+2, r25	; 0x02
    7d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    7d3c:	28 2f       	mov	r18, r24
    7d3e:	30 e0       	ldi	r19, 0x00	; 0
    7d40:	4c e1       	ldi	r20, 0x1C	; 28
    7d42:	42 9f       	mul	r20, r18
    7d44:	c0 01       	movw	r24, r0
    7d46:	43 9f       	mul	r20, r19
    7d48:	90 0d       	add	r25, r0
    7d4a:	11 24       	eor	r1, r1
    7d4c:	86 56       	subi	r24, 0x66	; 102
    7d4e:	9d 4b       	sbci	r25, 0xBD	; 189
    7d50:	8b 83       	std	Y+3, r24	; 0x03
    7d52:	9c 83       	std	Y+4, r25	; 0x04
    7d54:	8b 81       	ldd	r24, Y+3	; 0x03
    7d56:	9c 81       	ldd	r25, Y+4	; 0x04
    7d58:	fc 01       	movw	r30, r24
    7d5a:	82 89       	ldd	r24, Z+18	; 0x12
    7d5c:	28 2f       	mov	r18, r24
    7d5e:	30 e0       	ldi	r19, 0x00	; 0
    7d60:	44 e2       	ldi	r20, 0x24	; 36
    7d62:	42 9f       	mul	r20, r18
    7d64:	c0 01       	movw	r24, r0
    7d66:	43 9f       	mul	r20, r19
    7d68:	90 0d       	add	r25, r0
    7d6a:	11 24       	eor	r1, r1
    7d6c:	8a 58       	subi	r24, 0x8A	; 138
    7d6e:	9d 4b       	sbci	r25, 0xBD	; 189
    7d70:	8d 83       	std	Y+5, r24	; 0x05
    7d72:	9e 83       	std	Y+6, r25	; 0x06
    7d74:	89 81       	ldd	r24, Y+1	; 0x01
    7d76:	9a 81       	ldd	r25, Y+2	; 0x02
    7d78:	0b 96       	adiw	r24, 0x0b	; 11
    7d7a:	8f 83       	std	Y+7, r24	; 0x07
    7d7c:	98 87       	std	Y+8, r25	; 0x08
    7d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    7d80:	98 85       	ldd	r25, Y+8	; 0x08
    7d82:	fc 01       	movw	r30, r24
    7d84:	21 85       	ldd	r18, Z+9	; 0x09
    7d86:	32 85       	ldd	r19, Z+10	; 0x0a
    7d88:	8f 81       	ldd	r24, Y+7	; 0x07
    7d8a:	98 85       	ldd	r25, Y+8	; 0x08
    7d8c:	fc 01       	movw	r30, r24
    7d8e:	80 81       	ld	r24, Z
    7d90:	91 81       	ldd	r25, Z+1	; 0x01
    7d92:	88 0f       	add	r24, r24
    7d94:	99 1f       	adc	r25, r25
    7d96:	88 0f       	add	r24, r24
    7d98:	99 1f       	adc	r25, r25
    7d9a:	88 0f       	add	r24, r24
    7d9c:	99 1f       	adc	r25, r25
    7d9e:	82 0f       	add	r24, r18
    7da0:	93 1f       	adc	r25, r19
    7da2:	fc 01       	movw	r30, r24
    7da4:	83 81       	ldd	r24, Z+3	; 0x03
    7da6:	89 87       	std	Y+9, r24	; 0x09
    7da8:	8f 81       	ldd	r24, Y+7	; 0x07
    7daa:	98 85       	ldd	r25, Y+8	; 0x08
    7dac:	fc 01       	movw	r30, r24
    7dae:	21 85       	ldd	r18, Z+9	; 0x09
    7db0:	32 85       	ldd	r19, Z+10	; 0x0a
    7db2:	8f 81       	ldd	r24, Y+7	; 0x07
    7db4:	98 85       	ldd	r25, Y+8	; 0x08
    7db6:	fc 01       	movw	r30, r24
    7db8:	80 81       	ld	r24, Z
    7dba:	91 81       	ldd	r25, Z+1	; 0x01
    7dbc:	88 0f       	add	r24, r24
    7dbe:	99 1f       	adc	r25, r25
    7dc0:	88 0f       	add	r24, r24
    7dc2:	99 1f       	adc	r25, r25
    7dc4:	88 0f       	add	r24, r24
    7dc6:	99 1f       	adc	r25, r25
    7dc8:	82 0f       	add	r24, r18
    7dca:	93 1f       	adc	r25, r19
    7dcc:	fc 01       	movw	r30, r24
    7dce:	81 81       	ldd	r24, Z+1	; 0x01
    7dd0:	8f 70       	andi	r24, 0x0F	; 15
    7dd2:	8a 87       	std	Y+10, r24	; 0x0a
    7dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    7dd6:	82 30       	cpi	r24, 0x02	; 2
    7dd8:	09 f0       	breq	.+2      	; 0x7ddc <lin_slave_session_ctr+0xcc>
    7dda:	7b c0       	rjmp	.+246    	; 0x7ed2 <lin_slave_session_ctr+0x1c2>
    7ddc:	89 85       	ldd	r24, Y+9	; 0x09
    7dde:	88 2f       	mov	r24, r24
    7de0:	90 e0       	ldi	r25, 0x00	; 0
    7de2:	81 30       	cpi	r24, 0x01	; 1
    7de4:	91 05       	cpc	r25, r1
    7de6:	49 f1       	breq	.+82     	; 0x7e3a <lin_slave_session_ctr+0x12a>
    7de8:	82 30       	cpi	r24, 0x02	; 2
    7dea:	91 05       	cpc	r25, r1
    7dec:	09 f4       	brne	.+2      	; 0x7df0 <lin_slave_session_ctr+0xe0>
    7dee:	47 c0       	rjmp	.+142    	; 0x7e7e <lin_slave_session_ctr+0x16e>
    7df0:	89 2b       	or	r24, r25
    7df2:	09 f0       	breq	.+2      	; 0x7df6 <lin_slave_session_ctr+0xe6>
    7df4:	66 c0       	rjmp	.+204    	; 0x7ec2 <lin_slave_session_ctr+0x1b2>
    7df6:	8d 81       	ldd	r24, Y+5	; 0x05
    7df8:	9e 81       	ldd	r25, Y+6	; 0x06
    7dfa:	fc 01       	movw	r30, r24
    7dfc:	80 81       	ld	r24, Z
    7dfe:	91 81       	ldd	r25, Z+1	; 0x01
    7e00:	fc 01       	movw	r30, r24
    7e02:	80 81       	ld	r24, Z
    7e04:	8b 87       	std	Y+11, r24	; 0x0b
    7e06:	82 e0       	ldi	r24, 0x02	; 2
    7e08:	8c 87       	std	Y+12, r24	; 0x0c
    7e0a:	80 e5       	ldi	r24, 0x50	; 80
    7e0c:	8d 87       	std	Y+13, r24	; 0x0d
    7e0e:	89 85       	ldd	r24, Y+9	; 0x09
    7e10:	8e 87       	std	Y+14, r24	; 0x0e
    7e12:	8f ef       	ldi	r24, 0xFF	; 255
    7e14:	8f 87       	std	Y+15, r24	; 0x0f
    7e16:	8f ef       	ldi	r24, 0xFF	; 255
    7e18:	88 8b       	std	Y+16, r24	; 0x10
    7e1a:	8f ef       	ldi	r24, 0xFF	; 255
    7e1c:	89 8b       	std	Y+17, r24	; 0x11
    7e1e:	8f ef       	ldi	r24, 0xFF	; 255
    7e20:	8a 8b       	std	Y+18, r24	; 0x12
    7e22:	ce 01       	movw	r24, r28
    7e24:	0b 96       	adiw	r24, 0x0b	; 11
    7e26:	bc 01       	movw	r22, r24
    7e28:	8b 89       	ldd	r24, Y+19	; 0x13
    7e2a:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7e2e:	89 81       	ldd	r24, Y+1	; 0x01
    7e30:	9a 81       	ldd	r25, Y+2	; 0x02
    7e32:	22 e0       	ldi	r18, 0x02	; 2
    7e34:	fc 01       	movw	r30, r24
    7e36:	26 a3       	std	Z+38, r18	; 0x26
    7e38:	52 c0       	rjmp	.+164    	; 0x7ede <lin_slave_session_ctr+0x1ce>
    7e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    7e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    7e3e:	fc 01       	movw	r30, r24
    7e40:	80 81       	ld	r24, Z
    7e42:	91 81       	ldd	r25, Z+1	; 0x01
    7e44:	fc 01       	movw	r30, r24
    7e46:	80 81       	ld	r24, Z
    7e48:	8b 87       	std	Y+11, r24	; 0x0b
    7e4a:	82 e0       	ldi	r24, 0x02	; 2
    7e4c:	8c 87       	std	Y+12, r24	; 0x0c
    7e4e:	80 e5       	ldi	r24, 0x50	; 80
    7e50:	8d 87       	std	Y+13, r24	; 0x0d
    7e52:	89 85       	ldd	r24, Y+9	; 0x09
    7e54:	8e 87       	std	Y+14, r24	; 0x0e
    7e56:	8f ef       	ldi	r24, 0xFF	; 255
    7e58:	8f 87       	std	Y+15, r24	; 0x0f
    7e5a:	8f ef       	ldi	r24, 0xFF	; 255
    7e5c:	88 8b       	std	Y+16, r24	; 0x10
    7e5e:	8f ef       	ldi	r24, 0xFF	; 255
    7e60:	89 8b       	std	Y+17, r24	; 0x11
    7e62:	8f ef       	ldi	r24, 0xFF	; 255
    7e64:	8a 8b       	std	Y+18, r24	; 0x12
    7e66:	ce 01       	movw	r24, r28
    7e68:	0b 96       	adiw	r24, 0x0b	; 11
    7e6a:	bc 01       	movw	r22, r24
    7e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    7e6e:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7e72:	89 81       	ldd	r24, Y+1	; 0x01
    7e74:	9a 81       	ldd	r25, Y+2	; 0x02
    7e76:	22 e0       	ldi	r18, 0x02	; 2
    7e78:	fc 01       	movw	r30, r24
    7e7a:	26 a3       	std	Z+38, r18	; 0x26
    7e7c:	30 c0       	rjmp	.+96     	; 0x7ede <lin_slave_session_ctr+0x1ce>
    7e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    7e80:	9e 81       	ldd	r25, Y+6	; 0x06
    7e82:	fc 01       	movw	r30, r24
    7e84:	80 81       	ld	r24, Z
    7e86:	91 81       	ldd	r25, Z+1	; 0x01
    7e88:	fc 01       	movw	r30, r24
    7e8a:	80 81       	ld	r24, Z
    7e8c:	8b 87       	std	Y+11, r24	; 0x0b
    7e8e:	82 e0       	ldi	r24, 0x02	; 2
    7e90:	8c 87       	std	Y+12, r24	; 0x0c
    7e92:	80 e5       	ldi	r24, 0x50	; 80
    7e94:	8d 87       	std	Y+13, r24	; 0x0d
    7e96:	89 85       	ldd	r24, Y+9	; 0x09
    7e98:	8e 87       	std	Y+14, r24	; 0x0e
    7e9a:	8f ef       	ldi	r24, 0xFF	; 255
    7e9c:	8f 87       	std	Y+15, r24	; 0x0f
    7e9e:	8f ef       	ldi	r24, 0xFF	; 255
    7ea0:	88 8b       	std	Y+16, r24	; 0x10
    7ea2:	8f ef       	ldi	r24, 0xFF	; 255
    7ea4:	89 8b       	std	Y+17, r24	; 0x11
    7ea6:	8f ef       	ldi	r24, 0xFF	; 255
    7ea8:	8a 8b       	std	Y+18, r24	; 0x12
    7eaa:	ce 01       	movw	r24, r28
    7eac:	0b 96       	adiw	r24, 0x0b	; 11
    7eae:	bc 01       	movw	r22, r24
    7eb0:	8b 89       	ldd	r24, Y+19	; 0x13
    7eb2:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    7eb6:	89 81       	ldd	r24, Y+1	; 0x01
    7eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    7eba:	22 e0       	ldi	r18, 0x02	; 2
    7ebc:	fc 01       	movw	r30, r24
    7ebe:	26 a3       	std	Z+38, r18	; 0x26
    7ec0:	0e c0       	rjmp	.+28     	; 0x7ede <lin_slave_session_ctr+0x1ce>
    7ec2:	22 e1       	ldi	r18, 0x12	; 18
    7ec4:	40 e0       	ldi	r20, 0x00	; 0
    7ec6:	60 e1       	ldi	r22, 0x10	; 16
    7ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    7eca:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
    7ece:	00 00       	nop
    7ed0:	06 c0       	rjmp	.+12     	; 0x7ede <lin_slave_session_ctr+0x1ce>
    7ed2:	23 e1       	ldi	r18, 0x13	; 19
    7ed4:	40 e0       	ldi	r20, 0x00	; 0
    7ed6:	60 e1       	ldi	r22, 0x10	; 16
    7ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    7eda:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
    7ede:	00 00       	nop
    7ee0:	63 96       	adiw	r28, 0x13	; 19
    7ee2:	cd bf       	out	0x3d, r28	; 61
    7ee4:	de bf       	out	0x3e, r29	; 62
    7ee6:	df 91       	pop	r29
    7ee8:	cf 91       	pop	r28
    7eea:	08 95       	ret

00007eec <lin_routine_control>:
    7eec:	cf 93       	push	r28
    7eee:	df 93       	push	r29
    7ef0:	cd b7       	in	r28, 0x3d	; 61
    7ef2:	de b7       	in	r29, 0x3e	; 62
    7ef4:	65 97       	sbiw	r28, 0x15	; 21
    7ef6:	cd bf       	out	0x3d, r28	; 61
    7ef8:	de bf       	out	0x3e, r29	; 62
    7efa:	8d 8b       	std	Y+21, r24	; 0x15
    7efc:	8d 89       	ldd	r24, Y+21	; 0x15
    7efe:	28 2f       	mov	r18, r24
    7f00:	30 e0       	ldi	r19, 0x00	; 0
    7f02:	44 e3       	ldi	r20, 0x34	; 52
    7f04:	42 9f       	mul	r20, r18
    7f06:	c0 01       	movw	r24, r0
    7f08:	43 9f       	mul	r20, r19
    7f0a:	90 0d       	add	r25, r0
    7f0c:	11 24       	eor	r1, r1
    7f0e:	84 59       	subi	r24, 0x94	; 148
    7f10:	99 4b       	sbci	r25, 0xB9	; 185
    7f12:	89 83       	std	Y+1, r24	; 0x01
    7f14:	9a 83       	std	Y+2, r25	; 0x02
    7f16:	8d 89       	ldd	r24, Y+21	; 0x15
    7f18:	28 2f       	mov	r18, r24
    7f1a:	30 e0       	ldi	r19, 0x00	; 0
    7f1c:	4c e1       	ldi	r20, 0x1C	; 28
    7f1e:	42 9f       	mul	r20, r18
    7f20:	c0 01       	movw	r24, r0
    7f22:	43 9f       	mul	r20, r19
    7f24:	90 0d       	add	r25, r0
    7f26:	11 24       	eor	r1, r1
    7f28:	86 56       	subi	r24, 0x66	; 102
    7f2a:	9d 4b       	sbci	r25, 0xBD	; 189
    7f2c:	8b 83       	std	Y+3, r24	; 0x03
    7f2e:	9c 83       	std	Y+4, r25	; 0x04
    7f30:	8b 81       	ldd	r24, Y+3	; 0x03
    7f32:	9c 81       	ldd	r25, Y+4	; 0x04
    7f34:	fc 01       	movw	r30, r24
    7f36:	82 89       	ldd	r24, Z+18	; 0x12
    7f38:	28 2f       	mov	r18, r24
    7f3a:	30 e0       	ldi	r19, 0x00	; 0
    7f3c:	44 e2       	ldi	r20, 0x24	; 36
    7f3e:	42 9f       	mul	r20, r18
    7f40:	c0 01       	movw	r24, r0
    7f42:	43 9f       	mul	r20, r19
    7f44:	90 0d       	add	r25, r0
    7f46:	11 24       	eor	r1, r1
    7f48:	8a 58       	subi	r24, 0x8A	; 138
    7f4a:	9d 4b       	sbci	r25, 0xBD	; 189
    7f4c:	8d 83       	std	Y+5, r24	; 0x05
    7f4e:	9e 83       	std	Y+6, r25	; 0x06
    7f50:	89 81       	ldd	r24, Y+1	; 0x01
    7f52:	9a 81       	ldd	r25, Y+2	; 0x02
    7f54:	0b 96       	adiw	r24, 0x0b	; 11
    7f56:	8f 83       	std	Y+7, r24	; 0x07
    7f58:	98 87       	std	Y+8, r25	; 0x08
    7f5a:	8f 81       	ldd	r24, Y+7	; 0x07
    7f5c:	98 85       	ldd	r25, Y+8	; 0x08
    7f5e:	fc 01       	movw	r30, r24
    7f60:	21 85       	ldd	r18, Z+9	; 0x09
    7f62:	32 85       	ldd	r19, Z+10	; 0x0a
    7f64:	8f 81       	ldd	r24, Y+7	; 0x07
    7f66:	98 85       	ldd	r25, Y+8	; 0x08
    7f68:	fc 01       	movw	r30, r24
    7f6a:	80 81       	ld	r24, Z
    7f6c:	91 81       	ldd	r25, Z+1	; 0x01
    7f6e:	88 0f       	add	r24, r24
    7f70:	99 1f       	adc	r25, r25
    7f72:	88 0f       	add	r24, r24
    7f74:	99 1f       	adc	r25, r25
    7f76:	88 0f       	add	r24, r24
    7f78:	99 1f       	adc	r25, r25
    7f7a:	82 0f       	add	r24, r18
    7f7c:	93 1f       	adc	r25, r19
    7f7e:	fc 01       	movw	r30, r24
    7f80:	81 81       	ldd	r24, Z+1	; 0x01
    7f82:	82 95       	swap	r24
    7f84:	8f 70       	andi	r24, 0x0F	; 15
    7f86:	89 87       	std	Y+9, r24	; 0x09
    7f88:	89 85       	ldd	r24, Y+9	; 0x09
    7f8a:	88 23       	and	r24, r24
    7f8c:	09 f0       	breq	.+2      	; 0x7f90 <lin_routine_control+0xa4>
    7f8e:	8e c0       	rjmp	.+284    	; 0x80ac <__RODATA_PM_OFFSET__+0xac>
    7f90:	8f 81       	ldd	r24, Y+7	; 0x07
    7f92:	98 85       	ldd	r25, Y+8	; 0x08
    7f94:	fc 01       	movw	r30, r24
    7f96:	21 85       	ldd	r18, Z+9	; 0x09
    7f98:	32 85       	ldd	r19, Z+10	; 0x0a
    7f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    7f9c:	98 85       	ldd	r25, Y+8	; 0x08
    7f9e:	fc 01       	movw	r30, r24
    7fa0:	80 81       	ld	r24, Z
    7fa2:	91 81       	ldd	r25, Z+1	; 0x01
    7fa4:	88 0f       	add	r24, r24
    7fa6:	99 1f       	adc	r25, r25
    7fa8:	88 0f       	add	r24, r24
    7faa:	99 1f       	adc	r25, r25
    7fac:	88 0f       	add	r24, r24
    7fae:	99 1f       	adc	r25, r25
    7fb0:	82 0f       	add	r24, r18
    7fb2:	93 1f       	adc	r25, r19
    7fb4:	fc 01       	movw	r30, r24
    7fb6:	84 81       	ldd	r24, Z+4	; 0x04
    7fb8:	88 2f       	mov	r24, r24
    7fba:	90 e0       	ldi	r25, 0x00	; 0
    7fbc:	98 2f       	mov	r25, r24
    7fbe:	88 27       	eor	r24, r24
    7fc0:	8a 87       	std	Y+10, r24	; 0x0a
    7fc2:	9b 87       	std	Y+11, r25	; 0x0b
    7fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    7fc6:	98 85       	ldd	r25, Y+8	; 0x08
    7fc8:	fc 01       	movw	r30, r24
    7fca:	21 85       	ldd	r18, Z+9	; 0x09
    7fcc:	32 85       	ldd	r19, Z+10	; 0x0a
    7fce:	8f 81       	ldd	r24, Y+7	; 0x07
    7fd0:	98 85       	ldd	r25, Y+8	; 0x08
    7fd2:	fc 01       	movw	r30, r24
    7fd4:	80 81       	ld	r24, Z
    7fd6:	91 81       	ldd	r25, Z+1	; 0x01
    7fd8:	88 0f       	add	r24, r24
    7fda:	99 1f       	adc	r25, r25
    7fdc:	88 0f       	add	r24, r24
    7fde:	99 1f       	adc	r25, r25
    7fe0:	88 0f       	add	r24, r24
    7fe2:	99 1f       	adc	r25, r25
    7fe4:	82 0f       	add	r24, r18
    7fe6:	93 1f       	adc	r25, r19
    7fe8:	fc 01       	movw	r30, r24
    7fea:	85 81       	ldd	r24, Z+5	; 0x05
    7fec:	88 2f       	mov	r24, r24
    7fee:	90 e0       	ldi	r25, 0x00	; 0
    7ff0:	2a 85       	ldd	r18, Y+10	; 0x0a
    7ff2:	3b 85       	ldd	r19, Y+11	; 0x0b
    7ff4:	82 2b       	or	r24, r18
    7ff6:	93 2b       	or	r25, r19
    7ff8:	8a 87       	std	Y+10, r24	; 0x0a
    7ffa:	9b 87       	std	Y+11, r25	; 0x0b
    7ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    7ffe:	98 85       	ldd	r25, Y+8	; 0x08
    8000:	fc 01       	movw	r30, r24
    8002:	21 85       	ldd	r18, Z+9	; 0x09
    8004:	32 85       	ldd	r19, Z+10	; 0x0a
    8006:	8f 81       	ldd	r24, Y+7	; 0x07
    8008:	98 85       	ldd	r25, Y+8	; 0x08
    800a:	fc 01       	movw	r30, r24
    800c:	80 81       	ld	r24, Z
    800e:	91 81       	ldd	r25, Z+1	; 0x01
    8010:	88 0f       	add	r24, r24
    8012:	99 1f       	adc	r25, r25
    8014:	88 0f       	add	r24, r24
    8016:	99 1f       	adc	r25, r25
    8018:	88 0f       	add	r24, r24
    801a:	99 1f       	adc	r25, r25
    801c:	82 0f       	add	r24, r18
    801e:	93 1f       	adc	r25, r19
    8020:	fc 01       	movw	r30, r24
    8022:	83 81       	ldd	r24, Z+3	; 0x03
    8024:	8c 87       	std	Y+12, r24	; 0x0c
    8026:	8c 85       	ldd	r24, Y+12	; 0x0c
    8028:	81 30       	cpi	r24, 0x01	; 1
    802a:	e1 f4       	brne	.+56     	; 0x8064 <__RODATA_PM_OFFSET__+0x64>
    802c:	8a 85       	ldd	r24, Y+10	; 0x0a
    802e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8030:	83 30       	cpi	r24, 0x03	; 3
    8032:	92 40       	sbci	r25, 0x02	; 2
    8034:	b9 f4       	brne	.+46     	; 0x8064 <__RODATA_PM_OFFSET__+0x64>
    8036:	8d 81       	ldd	r24, Y+5	; 0x05
    8038:	9e 81       	ldd	r25, Y+6	; 0x06
    803a:	fc 01       	movw	r30, r24
    803c:	80 81       	ld	r24, Z
    803e:	91 81       	ldd	r25, Z+1	; 0x01
    8040:	fc 01       	movw	r30, r24
    8042:	80 81       	ld	r24, Z
    8044:	8d 87       	std	Y+13, r24	; 0x0d
    8046:	85 e0       	ldi	r24, 0x05	; 5
    8048:	8e 87       	std	Y+14, r24	; 0x0e
    804a:	81 e7       	ldi	r24, 0x71	; 113
    804c:	8f 87       	std	Y+15, r24	; 0x0f
    804e:	81 e0       	ldi	r24, 0x01	; 1
    8050:	88 8b       	std	Y+16, r24	; 0x10
    8052:	82 e0       	ldi	r24, 0x02	; 2
    8054:	89 8b       	std	Y+17, r24	; 0x11
    8056:	83 e0       	ldi	r24, 0x03	; 3
    8058:	8a 8b       	std	Y+18, r24	; 0x12
    805a:	82 e0       	ldi	r24, 0x02	; 2
    805c:	8b 8b       	std	Y+19, r24	; 0x13
    805e:	8f ef       	ldi	r24, 0xFF	; 255
    8060:	8c 8b       	std	Y+20, r24	; 0x14
    8062:	92 c0       	rjmp	.+292    	; 0x8188 <__RODATA_PM_OFFSET__+0x188>
    8064:	8c 85       	ldd	r24, Y+12	; 0x0c
    8066:	83 30       	cpi	r24, 0x03	; 3
    8068:	09 f0       	breq	.+2      	; 0x806c <__RODATA_PM_OFFSET__+0x6c>
    806a:	8e c0       	rjmp	.+284    	; 0x8188 <__RODATA_PM_OFFSET__+0x188>
    806c:	8a 85       	ldd	r24, Y+10	; 0x0a
    806e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8070:	83 30       	cpi	r24, 0x03	; 3
    8072:	92 40       	sbci	r25, 0x02	; 2
    8074:	09 f0       	breq	.+2      	; 0x8078 <__RODATA_PM_OFFSET__+0x78>
    8076:	88 c0       	rjmp	.+272    	; 0x8188 <__RODATA_PM_OFFSET__+0x188>
    8078:	8d 81       	ldd	r24, Y+5	; 0x05
    807a:	9e 81       	ldd	r25, Y+6	; 0x06
    807c:	fc 01       	movw	r30, r24
    807e:	80 81       	ld	r24, Z
    8080:	91 81       	ldd	r25, Z+1	; 0x01
    8082:	fc 01       	movw	r30, r24
    8084:	80 81       	ld	r24, Z
    8086:	8d 87       	std	Y+13, r24	; 0x0d
    8088:	85 e0       	ldi	r24, 0x05	; 5
    808a:	8e 87       	std	Y+14, r24	; 0x0e
    808c:	81 e7       	ldi	r24, 0x71	; 113
    808e:	8f 87       	std	Y+15, r24	; 0x0f
    8090:	83 e0       	ldi	r24, 0x03	; 3
    8092:	88 8b       	std	Y+16, r24	; 0x10
    8094:	82 e0       	ldi	r24, 0x02	; 2
    8096:	89 8b       	std	Y+17, r24	; 0x11
    8098:	83 e0       	ldi	r24, 0x03	; 3
    809a:	8a 8b       	std	Y+18, r24	; 0x12
    809c:	82 e0       	ldi	r24, 0x02	; 2
    809e:	8b 8b       	std	Y+19, r24	; 0x13
    80a0:	8f ef       	ldi	r24, 0xFF	; 255
    80a2:	8c 8b       	std	Y+20, r24	; 0x14
    80a4:	81 e0       	ldi	r24, 0x01	; 1
    80a6:	80 93 07 43 	sts	0x4307, r24	; 0x804307 <eeprom_set_boot_flg>
    80aa:	6e c0       	rjmp	.+220    	; 0x8188 <__RODATA_PM_OFFSET__+0x188>
    80ac:	8f 81       	ldd	r24, Y+7	; 0x07
    80ae:	98 85       	ldd	r25, Y+8	; 0x08
    80b0:	fc 01       	movw	r30, r24
    80b2:	21 85       	ldd	r18, Z+9	; 0x09
    80b4:	32 85       	ldd	r19, Z+10	; 0x0a
    80b6:	8f 81       	ldd	r24, Y+7	; 0x07
    80b8:	98 85       	ldd	r25, Y+8	; 0x08
    80ba:	fc 01       	movw	r30, r24
    80bc:	80 81       	ld	r24, Z
    80be:	91 81       	ldd	r25, Z+1	; 0x01
    80c0:	88 0f       	add	r24, r24
    80c2:	99 1f       	adc	r25, r25
    80c4:	88 0f       	add	r24, r24
    80c6:	99 1f       	adc	r25, r25
    80c8:	88 0f       	add	r24, r24
    80ca:	99 1f       	adc	r25, r25
    80cc:	82 0f       	add	r24, r18
    80ce:	93 1f       	adc	r25, r19
    80d0:	fc 01       	movw	r30, r24
    80d2:	85 81       	ldd	r24, Z+5	; 0x05
    80d4:	88 2f       	mov	r24, r24
    80d6:	90 e0       	ldi	r25, 0x00	; 0
    80d8:	98 2f       	mov	r25, r24
    80da:	88 27       	eor	r24, r24
    80dc:	8a 87       	std	Y+10, r24	; 0x0a
    80de:	9b 87       	std	Y+11, r25	; 0x0b
    80e0:	8f 81       	ldd	r24, Y+7	; 0x07
    80e2:	98 85       	ldd	r25, Y+8	; 0x08
    80e4:	fc 01       	movw	r30, r24
    80e6:	21 85       	ldd	r18, Z+9	; 0x09
    80e8:	32 85       	ldd	r19, Z+10	; 0x0a
    80ea:	8f 81       	ldd	r24, Y+7	; 0x07
    80ec:	98 85       	ldd	r25, Y+8	; 0x08
    80ee:	fc 01       	movw	r30, r24
    80f0:	80 81       	ld	r24, Z
    80f2:	91 81       	ldd	r25, Z+1	; 0x01
    80f4:	88 0f       	add	r24, r24
    80f6:	99 1f       	adc	r25, r25
    80f8:	88 0f       	add	r24, r24
    80fa:	99 1f       	adc	r25, r25
    80fc:	88 0f       	add	r24, r24
    80fe:	99 1f       	adc	r25, r25
    8100:	82 0f       	add	r24, r18
    8102:	93 1f       	adc	r25, r19
    8104:	fc 01       	movw	r30, r24
    8106:	86 81       	ldd	r24, Z+6	; 0x06
    8108:	88 2f       	mov	r24, r24
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	2a 85       	ldd	r18, Y+10	; 0x0a
    810e:	3b 85       	ldd	r19, Y+11	; 0x0b
    8110:	82 2b       	or	r24, r18
    8112:	93 2b       	or	r25, r19
    8114:	8a 87       	std	Y+10, r24	; 0x0a
    8116:	9b 87       	std	Y+11, r25	; 0x0b
    8118:	8f 81       	ldd	r24, Y+7	; 0x07
    811a:	98 85       	ldd	r25, Y+8	; 0x08
    811c:	fc 01       	movw	r30, r24
    811e:	21 85       	ldd	r18, Z+9	; 0x09
    8120:	32 85       	ldd	r19, Z+10	; 0x0a
    8122:	8f 81       	ldd	r24, Y+7	; 0x07
    8124:	98 85       	ldd	r25, Y+8	; 0x08
    8126:	fc 01       	movw	r30, r24
    8128:	80 81       	ld	r24, Z
    812a:	91 81       	ldd	r25, Z+1	; 0x01
    812c:	88 0f       	add	r24, r24
    812e:	99 1f       	adc	r25, r25
    8130:	88 0f       	add	r24, r24
    8132:	99 1f       	adc	r25, r25
    8134:	88 0f       	add	r24, r24
    8136:	99 1f       	adc	r25, r25
    8138:	82 0f       	add	r24, r18
    813a:	93 1f       	adc	r25, r19
    813c:	fc 01       	movw	r30, r24
    813e:	84 81       	ldd	r24, Z+4	; 0x04
    8140:	8c 87       	std	Y+12, r24	; 0x0c
    8142:	8c 85       	ldd	r24, Y+12	; 0x0c
    8144:	81 30       	cpi	r24, 0x01	; 1
    8146:	01 f5       	brne	.+64     	; 0x8188 <__RODATA_PM_OFFSET__+0x188>
    8148:	8a 85       	ldd	r24, Y+10	; 0x0a
    814a:	9b 85       	ldd	r25, Y+11	; 0x0b
    814c:	81 15       	cp	r24, r1
    814e:	9f 4f       	sbci	r25, 0xFF	; 255
    8150:	d9 f4       	brne	.+54     	; 0x8188 <__RODATA_PM_OFFSET__+0x188>
    8152:	81 e0       	ldi	r24, 0x01	; 1
    8154:	90 e0       	ldi	r25, 0x00	; 0
    8156:	80 93 08 43 	sts	0x4308, r24	; 0x804308 <erase_flag>
    815a:	90 93 09 43 	sts	0x4309, r25	; 0x804309 <erase_flag+0x1>
    815e:	8d 81       	ldd	r24, Y+5	; 0x05
    8160:	9e 81       	ldd	r25, Y+6	; 0x06
    8162:	fc 01       	movw	r30, r24
    8164:	80 81       	ld	r24, Z
    8166:	91 81       	ldd	r25, Z+1	; 0x01
    8168:	fc 01       	movw	r30, r24
    816a:	80 81       	ld	r24, Z
    816c:	8d 87       	std	Y+13, r24	; 0x0d
    816e:	85 e0       	ldi	r24, 0x05	; 5
    8170:	8e 87       	std	Y+14, r24	; 0x0e
    8172:	81 e7       	ldi	r24, 0x71	; 113
    8174:	8f 87       	std	Y+15, r24	; 0x0f
    8176:	81 e0       	ldi	r24, 0x01	; 1
    8178:	88 8b       	std	Y+16, r24	; 0x10
    817a:	8f ef       	ldi	r24, 0xFF	; 255
    817c:	89 8b       	std	Y+17, r24	; 0x11
    817e:	1a 8a       	std	Y+18, r1	; 0x12
    8180:	82 e0       	ldi	r24, 0x02	; 2
    8182:	8b 8b       	std	Y+19, r24	; 0x13
    8184:	8f ef       	ldi	r24, 0xFF	; 255
    8186:	8c 8b       	std	Y+20, r24	; 0x14
    8188:	ce 01       	movw	r24, r28
    818a:	0d 96       	adiw	r24, 0x0d	; 13
    818c:	bc 01       	movw	r22, r24
    818e:	8d 89       	ldd	r24, Y+21	; 0x15
    8190:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    8194:	89 81       	ldd	r24, Y+1	; 0x01
    8196:	9a 81       	ldd	r25, Y+2	; 0x02
    8198:	22 e0       	ldi	r18, 0x02	; 2
    819a:	fc 01       	movw	r30, r24
    819c:	26 a3       	std	Z+38, r18	; 0x26
    819e:	00 00       	nop
    81a0:	65 96       	adiw	r28, 0x15	; 21
    81a2:	cd bf       	out	0x3d, r28	; 61
    81a4:	de bf       	out	0x3e, r29	; 62
    81a6:	df 91       	pop	r29
    81a8:	cf 91       	pop	r28
    81aa:	08 95       	ret

000081ac <control_dtc_setting>:
    81ac:	cf 93       	push	r28
    81ae:	df 93       	push	r29
    81b0:	cd b7       	in	r28, 0x3d	; 61
    81b2:	de b7       	in	r29, 0x3e	; 62
    81b4:	62 97       	sbiw	r28, 0x12	; 18
    81b6:	cd bf       	out	0x3d, r28	; 61
    81b8:	de bf       	out	0x3e, r29	; 62
    81ba:	8a 8b       	std	Y+18, r24	; 0x12
    81bc:	8a 89       	ldd	r24, Y+18	; 0x12
    81be:	28 2f       	mov	r18, r24
    81c0:	30 e0       	ldi	r19, 0x00	; 0
    81c2:	44 e3       	ldi	r20, 0x34	; 52
    81c4:	42 9f       	mul	r20, r18
    81c6:	c0 01       	movw	r24, r0
    81c8:	43 9f       	mul	r20, r19
    81ca:	90 0d       	add	r25, r0
    81cc:	11 24       	eor	r1, r1
    81ce:	84 59       	subi	r24, 0x94	; 148
    81d0:	99 4b       	sbci	r25, 0xB9	; 185
    81d2:	89 83       	std	Y+1, r24	; 0x01
    81d4:	9a 83       	std	Y+2, r25	; 0x02
    81d6:	8a 89       	ldd	r24, Y+18	; 0x12
    81d8:	28 2f       	mov	r18, r24
    81da:	30 e0       	ldi	r19, 0x00	; 0
    81dc:	4c e1       	ldi	r20, 0x1C	; 28
    81de:	42 9f       	mul	r20, r18
    81e0:	c0 01       	movw	r24, r0
    81e2:	43 9f       	mul	r20, r19
    81e4:	90 0d       	add	r25, r0
    81e6:	11 24       	eor	r1, r1
    81e8:	86 56       	subi	r24, 0x66	; 102
    81ea:	9d 4b       	sbci	r25, 0xBD	; 189
    81ec:	8b 83       	std	Y+3, r24	; 0x03
    81ee:	9c 83       	std	Y+4, r25	; 0x04
    81f0:	8b 81       	ldd	r24, Y+3	; 0x03
    81f2:	9c 81       	ldd	r25, Y+4	; 0x04
    81f4:	fc 01       	movw	r30, r24
    81f6:	82 89       	ldd	r24, Z+18	; 0x12
    81f8:	28 2f       	mov	r18, r24
    81fa:	30 e0       	ldi	r19, 0x00	; 0
    81fc:	44 e2       	ldi	r20, 0x24	; 36
    81fe:	42 9f       	mul	r20, r18
    8200:	c0 01       	movw	r24, r0
    8202:	43 9f       	mul	r20, r19
    8204:	90 0d       	add	r25, r0
    8206:	11 24       	eor	r1, r1
    8208:	8a 58       	subi	r24, 0x8A	; 138
    820a:	9d 4b       	sbci	r25, 0xBD	; 189
    820c:	8d 83       	std	Y+5, r24	; 0x05
    820e:	9e 83       	std	Y+6, r25	; 0x06
    8210:	89 81       	ldd	r24, Y+1	; 0x01
    8212:	9a 81       	ldd	r25, Y+2	; 0x02
    8214:	0b 96       	adiw	r24, 0x0b	; 11
    8216:	8f 83       	std	Y+7, r24	; 0x07
    8218:	98 87       	std	Y+8, r25	; 0x08
    821a:	8f 81       	ldd	r24, Y+7	; 0x07
    821c:	98 85       	ldd	r25, Y+8	; 0x08
    821e:	fc 01       	movw	r30, r24
    8220:	21 85       	ldd	r18, Z+9	; 0x09
    8222:	32 85       	ldd	r19, Z+10	; 0x0a
    8224:	8f 81       	ldd	r24, Y+7	; 0x07
    8226:	98 85       	ldd	r25, Y+8	; 0x08
    8228:	fc 01       	movw	r30, r24
    822a:	80 81       	ld	r24, Z
    822c:	91 81       	ldd	r25, Z+1	; 0x01
    822e:	88 0f       	add	r24, r24
    8230:	99 1f       	adc	r25, r25
    8232:	88 0f       	add	r24, r24
    8234:	99 1f       	adc	r25, r25
    8236:	88 0f       	add	r24, r24
    8238:	99 1f       	adc	r25, r25
    823a:	82 0f       	add	r24, r18
    823c:	93 1f       	adc	r25, r19
    823e:	fc 01       	movw	r30, r24
    8240:	83 81       	ldd	r24, Z+3	; 0x03
    8242:	89 87       	std	Y+9, r24	; 0x09
    8244:	89 85       	ldd	r24, Y+9	; 0x09
    8246:	81 30       	cpi	r24, 0x01	; 1
    8248:	11 f5       	brne	.+68     	; 0x828e <control_dtc_setting+0xe2>
    824a:	8d 81       	ldd	r24, Y+5	; 0x05
    824c:	9e 81       	ldd	r25, Y+6	; 0x06
    824e:	fc 01       	movw	r30, r24
    8250:	80 81       	ld	r24, Z
    8252:	91 81       	ldd	r25, Z+1	; 0x01
    8254:	fc 01       	movw	r30, r24
    8256:	80 81       	ld	r24, Z
    8258:	8a 87       	std	Y+10, r24	; 0x0a
    825a:	82 e0       	ldi	r24, 0x02	; 2
    825c:	8b 87       	std	Y+11, r24	; 0x0b
    825e:	85 ec       	ldi	r24, 0xC5	; 197
    8260:	8c 87       	std	Y+12, r24	; 0x0c
    8262:	81 e0       	ldi	r24, 0x01	; 1
    8264:	8d 87       	std	Y+13, r24	; 0x0d
    8266:	8f ef       	ldi	r24, 0xFF	; 255
    8268:	8e 87       	std	Y+14, r24	; 0x0e
    826a:	8f ef       	ldi	r24, 0xFF	; 255
    826c:	8f 87       	std	Y+15, r24	; 0x0f
    826e:	8f ef       	ldi	r24, 0xFF	; 255
    8270:	88 8b       	std	Y+16, r24	; 0x10
    8272:	8f ef       	ldi	r24, 0xFF	; 255
    8274:	89 8b       	std	Y+17, r24	; 0x11
    8276:	ce 01       	movw	r24, r28
    8278:	0a 96       	adiw	r24, 0x0a	; 10
    827a:	bc 01       	movw	r22, r24
    827c:	8a 89       	ldd	r24, Y+18	; 0x12
    827e:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    8282:	89 81       	ldd	r24, Y+1	; 0x01
    8284:	9a 81       	ldd	r25, Y+2	; 0x02
    8286:	22 e0       	ldi	r18, 0x02	; 2
    8288:	fc 01       	movw	r30, r24
    828a:	26 a3       	std	Z+38, r18	; 0x26
    828c:	24 c0       	rjmp	.+72     	; 0x82d6 <control_dtc_setting+0x12a>
    828e:	89 85       	ldd	r24, Y+9	; 0x09
    8290:	82 30       	cpi	r24, 0x02	; 2
    8292:	09 f5       	brne	.+66     	; 0x82d6 <control_dtc_setting+0x12a>
    8294:	8d 81       	ldd	r24, Y+5	; 0x05
    8296:	9e 81       	ldd	r25, Y+6	; 0x06
    8298:	fc 01       	movw	r30, r24
    829a:	80 81       	ld	r24, Z
    829c:	91 81       	ldd	r25, Z+1	; 0x01
    829e:	fc 01       	movw	r30, r24
    82a0:	80 81       	ld	r24, Z
    82a2:	8a 87       	std	Y+10, r24	; 0x0a
    82a4:	82 e0       	ldi	r24, 0x02	; 2
    82a6:	8b 87       	std	Y+11, r24	; 0x0b
    82a8:	85 ec       	ldi	r24, 0xC5	; 197
    82aa:	8c 87       	std	Y+12, r24	; 0x0c
    82ac:	82 e0       	ldi	r24, 0x02	; 2
    82ae:	8d 87       	std	Y+13, r24	; 0x0d
    82b0:	8f ef       	ldi	r24, 0xFF	; 255
    82b2:	8e 87       	std	Y+14, r24	; 0x0e
    82b4:	8f ef       	ldi	r24, 0xFF	; 255
    82b6:	8f 87       	std	Y+15, r24	; 0x0f
    82b8:	8f ef       	ldi	r24, 0xFF	; 255
    82ba:	88 8b       	std	Y+16, r24	; 0x10
    82bc:	8f ef       	ldi	r24, 0xFF	; 255
    82be:	89 8b       	std	Y+17, r24	; 0x11
    82c0:	ce 01       	movw	r24, r28
    82c2:	0a 96       	adiw	r24, 0x0a	; 10
    82c4:	bc 01       	movw	r22, r24
    82c6:	8a 89       	ldd	r24, Y+18	; 0x12
    82c8:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    82cc:	89 81       	ldd	r24, Y+1	; 0x01
    82ce:	9a 81       	ldd	r25, Y+2	; 0x02
    82d0:	22 e0       	ldi	r18, 0x02	; 2
    82d2:	fc 01       	movw	r30, r24
    82d4:	26 a3       	std	Z+38, r18	; 0x26
    82d6:	00 00       	nop
    82d8:	62 96       	adiw	r28, 0x12	; 18
    82da:	cd bf       	out	0x3d, r28	; 61
    82dc:	de bf       	out	0x3e, r29	; 62
    82de:	df 91       	pop	r29
    82e0:	cf 91       	pop	r28
    82e2:	08 95       	ret

000082e4 <lin_transfer_data>:
    82e4:	cf 93       	push	r28
    82e6:	df 93       	push	r29
    82e8:	cd b7       	in	r28, 0x3d	; 61
    82ea:	de b7       	in	r29, 0x3e	; 62
    82ec:	69 97       	sbiw	r28, 0x19	; 25
    82ee:	cd bf       	out	0x3d, r28	; 61
    82f0:	de bf       	out	0x3e, r29	; 62
    82f2:	89 8f       	std	Y+25, r24	; 0x19
    82f4:	19 82       	std	Y+1, r1	; 0x01
    82f6:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <update_cnt>
    82fa:	90 91 0f 45 	lds	r25, 0x450F	; 0x80450f <update_cnt+0x1>
    82fe:	8a 83       	std	Y+2, r24	; 0x02
    8300:	9b 83       	std	Y+3, r25	; 0x03
    8302:	1c 82       	std	Y+4, r1	; 0x04
    8304:	1d 82       	std	Y+5, r1	; 0x05
    8306:	89 8d       	ldd	r24, Y+25	; 0x19
    8308:	28 2f       	mov	r18, r24
    830a:	30 e0       	ldi	r19, 0x00	; 0
    830c:	44 e3       	ldi	r20, 0x34	; 52
    830e:	42 9f       	mul	r20, r18
    8310:	c0 01       	movw	r24, r0
    8312:	43 9f       	mul	r20, r19
    8314:	90 0d       	add	r25, r0
    8316:	11 24       	eor	r1, r1
    8318:	84 59       	subi	r24, 0x94	; 148
    831a:	99 4b       	sbci	r25, 0xB9	; 185
    831c:	8e 83       	std	Y+6, r24	; 0x06
    831e:	9f 83       	std	Y+7, r25	; 0x07
    8320:	89 8d       	ldd	r24, Y+25	; 0x19
    8322:	28 2f       	mov	r18, r24
    8324:	30 e0       	ldi	r19, 0x00	; 0
    8326:	4c e1       	ldi	r20, 0x1C	; 28
    8328:	42 9f       	mul	r20, r18
    832a:	c0 01       	movw	r24, r0
    832c:	43 9f       	mul	r20, r19
    832e:	90 0d       	add	r25, r0
    8330:	11 24       	eor	r1, r1
    8332:	86 56       	subi	r24, 0x66	; 102
    8334:	9d 4b       	sbci	r25, 0xBD	; 189
    8336:	88 87       	std	Y+8, r24	; 0x08
    8338:	99 87       	std	Y+9, r25	; 0x09
    833a:	88 85       	ldd	r24, Y+8	; 0x08
    833c:	99 85       	ldd	r25, Y+9	; 0x09
    833e:	fc 01       	movw	r30, r24
    8340:	82 89       	ldd	r24, Z+18	; 0x12
    8342:	28 2f       	mov	r18, r24
    8344:	30 e0       	ldi	r19, 0x00	; 0
    8346:	44 e2       	ldi	r20, 0x24	; 36
    8348:	42 9f       	mul	r20, r18
    834a:	c0 01       	movw	r24, r0
    834c:	43 9f       	mul	r20, r19
    834e:	90 0d       	add	r25, r0
    8350:	11 24       	eor	r1, r1
    8352:	8a 58       	subi	r24, 0x8A	; 138
    8354:	9d 4b       	sbci	r25, 0xBD	; 189
    8356:	8a 87       	std	Y+10, r24	; 0x0a
    8358:	9b 87       	std	Y+11, r25	; 0x0b
    835a:	8e 81       	ldd	r24, Y+6	; 0x06
    835c:	9f 81       	ldd	r25, Y+7	; 0x07
    835e:	0b 96       	adiw	r24, 0x0b	; 11
    8360:	8c 87       	std	Y+12, r24	; 0x0c
    8362:	9d 87       	std	Y+13, r25	; 0x0d
    8364:	8c 85       	ldd	r24, Y+12	; 0x0c
    8366:	9d 85       	ldd	r25, Y+13	; 0x0d
    8368:	fc 01       	movw	r30, r24
    836a:	21 85       	ldd	r18, Z+9	; 0x09
    836c:	32 85       	ldd	r19, Z+10	; 0x0a
    836e:	8c 85       	ldd	r24, Y+12	; 0x0c
    8370:	9d 85       	ldd	r25, Y+13	; 0x0d
    8372:	fc 01       	movw	r30, r24
    8374:	80 81       	ld	r24, Z
    8376:	91 81       	ldd	r25, Z+1	; 0x01
    8378:	88 0f       	add	r24, r24
    837a:	99 1f       	adc	r25, r25
    837c:	88 0f       	add	r24, r24
    837e:	99 1f       	adc	r25, r25
    8380:	88 0f       	add	r24, r24
    8382:	99 1f       	adc	r25, r25
    8384:	82 0f       	add	r24, r18
    8386:	93 1f       	adc	r25, r19
    8388:	fc 01       	movw	r30, r24
    838a:	81 81       	ldd	r24, Z+1	; 0x01
    838c:	82 95       	swap	r24
    838e:	8f 70       	andi	r24, 0x0F	; 15
    8390:	8e 87       	std	Y+14, r24	; 0x0e
    8392:	8e 85       	ldd	r24, Y+14	; 0x0e
    8394:	88 23       	and	r24, r24
    8396:	09 f4       	brne	.+2      	; 0x839a <lin_transfer_data+0xb6>
    8398:	da c1       	rjmp	.+948    	; 0x874e <lin_transfer_data+0x46a>
    839a:	8c 85       	ldd	r24, Y+12	; 0x0c
    839c:	9d 85       	ldd	r25, Y+13	; 0x0d
    839e:	fc 01       	movw	r30, r24
    83a0:	21 85       	ldd	r18, Z+9	; 0x09
    83a2:	32 85       	ldd	r19, Z+10	; 0x0a
    83a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    83a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    83a8:	fc 01       	movw	r30, r24
    83aa:	80 81       	ld	r24, Z
    83ac:	91 81       	ldd	r25, Z+1	; 0x01
    83ae:	88 0f       	add	r24, r24
    83b0:	99 1f       	adc	r25, r25
    83b2:	88 0f       	add	r24, r24
    83b4:	99 1f       	adc	r25, r25
    83b6:	88 0f       	add	r24, r24
    83b8:	99 1f       	adc	r25, r25
    83ba:	82 0f       	add	r24, r18
    83bc:	93 1f       	adc	r25, r19
    83be:	fc 01       	movw	r30, r24
    83c0:	84 81       	ldd	r24, Z+4	; 0x04
    83c2:	8f 87       	std	Y+15, r24	; 0x0f
    83c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    83c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    83c8:	fc 01       	movw	r30, r24
    83ca:	21 85       	ldd	r18, Z+9	; 0x09
    83cc:	32 85       	ldd	r19, Z+10	; 0x0a
    83ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    83d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    83d2:	fc 01       	movw	r30, r24
    83d4:	80 81       	ld	r24, Z
    83d6:	91 81       	ldd	r25, Z+1	; 0x01
    83d8:	88 0f       	add	r24, r24
    83da:	99 1f       	adc	r25, r25
    83dc:	88 0f       	add	r24, r24
    83de:	99 1f       	adc	r25, r25
    83e0:	88 0f       	add	r24, r24
    83e2:	99 1f       	adc	r25, r25
    83e4:	82 0f       	add	r24, r18
    83e6:	93 1f       	adc	r25, r19
    83e8:	fc 01       	movw	r30, r24
    83ea:	82 81       	ldd	r24, Z+2	; 0x02
    83ec:	82 50       	subi	r24, 0x02	; 2
    83ee:	88 8b       	std	Y+16, r24	; 0x10
    83f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    83f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    83f4:	fc 01       	movw	r30, r24
    83f6:	80 81       	ld	r24, Z
    83f8:	91 81       	ldd	r25, Z+1	; 0x01
    83fa:	8c 83       	std	Y+4, r24	; 0x04
    83fc:	9d 83       	std	Y+5, r25	; 0x05
    83fe:	90 91 6b 46 	lds	r25, 0x466B	; 0x80466b <history_blcok_count>
    8402:	8f 85       	ldd	r24, Y+15	; 0x0f
    8404:	98 17       	cp	r25, r24
    8406:	09 f0       	breq	.+2      	; 0x840a <lin_transfer_data+0x126>
    8408:	8c c1       	rjmp	.+792    	; 0x8722 <lin_transfer_data+0x43e>
    840a:	8a 81       	ldd	r24, Y+2	; 0x02
    840c:	9b 81       	ldd	r25, Y+3	; 0x03
    840e:	9c 01       	movw	r18, r24
    8410:	2f 5f       	subi	r18, 0xFF	; 255
    8412:	3f 4f       	sbci	r19, 0xFF	; 255
    8414:	2a 83       	std	Y+2, r18	; 0x02
    8416:	3b 83       	std	Y+3, r19	; 0x03
    8418:	2c 85       	ldd	r18, Y+12	; 0x0c
    841a:	3d 85       	ldd	r19, Y+13	; 0x0d
    841c:	f9 01       	movw	r30, r18
    841e:	41 85       	ldd	r20, Z+9	; 0x09
    8420:	52 85       	ldd	r21, Z+10	; 0x0a
    8422:	2c 85       	ldd	r18, Y+12	; 0x0c
    8424:	3d 85       	ldd	r19, Y+13	; 0x0d
    8426:	f9 01       	movw	r30, r18
    8428:	20 81       	ld	r18, Z
    842a:	31 81       	ldd	r19, Z+1	; 0x01
    842c:	22 0f       	add	r18, r18
    842e:	33 1f       	adc	r19, r19
    8430:	22 0f       	add	r18, r18
    8432:	33 1f       	adc	r19, r19
    8434:	22 0f       	add	r18, r18
    8436:	33 1f       	adc	r19, r19
    8438:	24 0f       	add	r18, r20
    843a:	35 1f       	adc	r19, r21
    843c:	f9 01       	movw	r30, r18
    843e:	25 81       	ldd	r18, Z+5	; 0x05
    8440:	82 5f       	subi	r24, 0xF2	; 242
    8442:	9c 4b       	sbci	r25, 0xBC	; 188
    8444:	fc 01       	movw	r30, r24
    8446:	20 83       	st	Z, r18
    8448:	8a 81       	ldd	r24, Y+2	; 0x02
    844a:	9b 81       	ldd	r25, Y+3	; 0x03
    844c:	9c 01       	movw	r18, r24
    844e:	2f 5f       	subi	r18, 0xFF	; 255
    8450:	3f 4f       	sbci	r19, 0xFF	; 255
    8452:	2a 83       	std	Y+2, r18	; 0x02
    8454:	3b 83       	std	Y+3, r19	; 0x03
    8456:	2c 85       	ldd	r18, Y+12	; 0x0c
    8458:	3d 85       	ldd	r19, Y+13	; 0x0d
    845a:	f9 01       	movw	r30, r18
    845c:	41 85       	ldd	r20, Z+9	; 0x09
    845e:	52 85       	ldd	r21, Z+10	; 0x0a
    8460:	2c 85       	ldd	r18, Y+12	; 0x0c
    8462:	3d 85       	ldd	r19, Y+13	; 0x0d
    8464:	f9 01       	movw	r30, r18
    8466:	20 81       	ld	r18, Z
    8468:	31 81       	ldd	r19, Z+1	; 0x01
    846a:	22 0f       	add	r18, r18
    846c:	33 1f       	adc	r19, r19
    846e:	22 0f       	add	r18, r18
    8470:	33 1f       	adc	r19, r19
    8472:	22 0f       	add	r18, r18
    8474:	33 1f       	adc	r19, r19
    8476:	24 0f       	add	r18, r20
    8478:	35 1f       	adc	r19, r21
    847a:	f9 01       	movw	r30, r18
    847c:	26 81       	ldd	r18, Z+6	; 0x06
    847e:	82 5f       	subi	r24, 0xF2	; 242
    8480:	9c 4b       	sbci	r25, 0xBC	; 188
    8482:	fc 01       	movw	r30, r24
    8484:	20 83       	st	Z, r18
    8486:	8a 81       	ldd	r24, Y+2	; 0x02
    8488:	9b 81       	ldd	r25, Y+3	; 0x03
    848a:	9c 01       	movw	r18, r24
    848c:	2f 5f       	subi	r18, 0xFF	; 255
    848e:	3f 4f       	sbci	r19, 0xFF	; 255
    8490:	2a 83       	std	Y+2, r18	; 0x02
    8492:	3b 83       	std	Y+3, r19	; 0x03
    8494:	2c 85       	ldd	r18, Y+12	; 0x0c
    8496:	3d 85       	ldd	r19, Y+13	; 0x0d
    8498:	f9 01       	movw	r30, r18
    849a:	41 85       	ldd	r20, Z+9	; 0x09
    849c:	52 85       	ldd	r21, Z+10	; 0x0a
    849e:	2c 85       	ldd	r18, Y+12	; 0x0c
    84a0:	3d 85       	ldd	r19, Y+13	; 0x0d
    84a2:	f9 01       	movw	r30, r18
    84a4:	20 81       	ld	r18, Z
    84a6:	31 81       	ldd	r19, Z+1	; 0x01
    84a8:	22 0f       	add	r18, r18
    84aa:	33 1f       	adc	r19, r19
    84ac:	22 0f       	add	r18, r18
    84ae:	33 1f       	adc	r19, r19
    84b0:	22 0f       	add	r18, r18
    84b2:	33 1f       	adc	r19, r19
    84b4:	24 0f       	add	r18, r20
    84b6:	35 1f       	adc	r19, r21
    84b8:	f9 01       	movw	r30, r18
    84ba:	27 81       	ldd	r18, Z+7	; 0x07
    84bc:	82 5f       	subi	r24, 0xF2	; 242
    84be:	9c 4b       	sbci	r25, 0xBC	; 188
    84c0:	fc 01       	movw	r30, r24
    84c2:	20 83       	st	Z, r18
    84c4:	81 e0       	ldi	r24, 0x01	; 1
    84c6:	90 e0       	ldi	r25, 0x00	; 0
    84c8:	8c 83       	std	Y+4, r24	; 0x04
    84ca:	9d 83       	std	Y+5, r25	; 0x05
    84cc:	d7 c0       	rjmp	.+430    	; 0x867c <lin_transfer_data+0x398>
    84ce:	99 81       	ldd	r25, Y+1	; 0x01
    84d0:	88 89       	ldd	r24, Y+16	; 0x10
    84d2:	98 17       	cp	r25, r24
    84d4:	f8 f4       	brcc	.+62     	; 0x8514 <lin_transfer_data+0x230>
    84d6:	89 81       	ldd	r24, Y+1	; 0x01
    84d8:	8f 5f       	subi	r24, 0xFF	; 255
    84da:	89 83       	std	Y+1, r24	; 0x01
    84dc:	8a 81       	ldd	r24, Y+2	; 0x02
    84de:	9b 81       	ldd	r25, Y+3	; 0x03
    84e0:	9c 01       	movw	r18, r24
    84e2:	2f 5f       	subi	r18, 0xFF	; 255
    84e4:	3f 4f       	sbci	r19, 0xFF	; 255
    84e6:	2a 83       	std	Y+2, r18	; 0x02
    84e8:	3b 83       	std	Y+3, r19	; 0x03
    84ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    84ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    84ee:	f9 01       	movw	r30, r18
    84f0:	41 85       	ldd	r20, Z+9	; 0x09
    84f2:	52 85       	ldd	r21, Z+10	; 0x0a
    84f4:	2c 81       	ldd	r18, Y+4	; 0x04
    84f6:	3d 81       	ldd	r19, Y+5	; 0x05
    84f8:	22 0f       	add	r18, r18
    84fa:	33 1f       	adc	r19, r19
    84fc:	22 0f       	add	r18, r18
    84fe:	33 1f       	adc	r19, r19
    8500:	22 0f       	add	r18, r18
    8502:	33 1f       	adc	r19, r19
    8504:	24 0f       	add	r18, r20
    8506:	35 1f       	adc	r19, r21
    8508:	f9 01       	movw	r30, r18
    850a:	22 81       	ldd	r18, Z+2	; 0x02
    850c:	82 5f       	subi	r24, 0xF2	; 242
    850e:	9c 4b       	sbci	r25, 0xBC	; 188
    8510:	fc 01       	movw	r30, r24
    8512:	20 83       	st	Z, r18
    8514:	99 81       	ldd	r25, Y+1	; 0x01
    8516:	88 89       	ldd	r24, Y+16	; 0x10
    8518:	98 17       	cp	r25, r24
    851a:	f8 f4       	brcc	.+62     	; 0x855a <lin_transfer_data+0x276>
    851c:	89 81       	ldd	r24, Y+1	; 0x01
    851e:	8f 5f       	subi	r24, 0xFF	; 255
    8520:	89 83       	std	Y+1, r24	; 0x01
    8522:	8a 81       	ldd	r24, Y+2	; 0x02
    8524:	9b 81       	ldd	r25, Y+3	; 0x03
    8526:	9c 01       	movw	r18, r24
    8528:	2f 5f       	subi	r18, 0xFF	; 255
    852a:	3f 4f       	sbci	r19, 0xFF	; 255
    852c:	2a 83       	std	Y+2, r18	; 0x02
    852e:	3b 83       	std	Y+3, r19	; 0x03
    8530:	2c 85       	ldd	r18, Y+12	; 0x0c
    8532:	3d 85       	ldd	r19, Y+13	; 0x0d
    8534:	f9 01       	movw	r30, r18
    8536:	41 85       	ldd	r20, Z+9	; 0x09
    8538:	52 85       	ldd	r21, Z+10	; 0x0a
    853a:	2c 81       	ldd	r18, Y+4	; 0x04
    853c:	3d 81       	ldd	r19, Y+5	; 0x05
    853e:	22 0f       	add	r18, r18
    8540:	33 1f       	adc	r19, r19
    8542:	22 0f       	add	r18, r18
    8544:	33 1f       	adc	r19, r19
    8546:	22 0f       	add	r18, r18
    8548:	33 1f       	adc	r19, r19
    854a:	24 0f       	add	r18, r20
    854c:	35 1f       	adc	r19, r21
    854e:	f9 01       	movw	r30, r18
    8550:	23 81       	ldd	r18, Z+3	; 0x03
    8552:	82 5f       	subi	r24, 0xF2	; 242
    8554:	9c 4b       	sbci	r25, 0xBC	; 188
    8556:	fc 01       	movw	r30, r24
    8558:	20 83       	st	Z, r18
    855a:	99 81       	ldd	r25, Y+1	; 0x01
    855c:	88 89       	ldd	r24, Y+16	; 0x10
    855e:	98 17       	cp	r25, r24
    8560:	f8 f4       	brcc	.+62     	; 0x85a0 <lin_transfer_data+0x2bc>
    8562:	89 81       	ldd	r24, Y+1	; 0x01
    8564:	8f 5f       	subi	r24, 0xFF	; 255
    8566:	89 83       	std	Y+1, r24	; 0x01
    8568:	8a 81       	ldd	r24, Y+2	; 0x02
    856a:	9b 81       	ldd	r25, Y+3	; 0x03
    856c:	9c 01       	movw	r18, r24
    856e:	2f 5f       	subi	r18, 0xFF	; 255
    8570:	3f 4f       	sbci	r19, 0xFF	; 255
    8572:	2a 83       	std	Y+2, r18	; 0x02
    8574:	3b 83       	std	Y+3, r19	; 0x03
    8576:	2c 85       	ldd	r18, Y+12	; 0x0c
    8578:	3d 85       	ldd	r19, Y+13	; 0x0d
    857a:	f9 01       	movw	r30, r18
    857c:	41 85       	ldd	r20, Z+9	; 0x09
    857e:	52 85       	ldd	r21, Z+10	; 0x0a
    8580:	2c 81       	ldd	r18, Y+4	; 0x04
    8582:	3d 81       	ldd	r19, Y+5	; 0x05
    8584:	22 0f       	add	r18, r18
    8586:	33 1f       	adc	r19, r19
    8588:	22 0f       	add	r18, r18
    858a:	33 1f       	adc	r19, r19
    858c:	22 0f       	add	r18, r18
    858e:	33 1f       	adc	r19, r19
    8590:	24 0f       	add	r18, r20
    8592:	35 1f       	adc	r19, r21
    8594:	f9 01       	movw	r30, r18
    8596:	24 81       	ldd	r18, Z+4	; 0x04
    8598:	82 5f       	subi	r24, 0xF2	; 242
    859a:	9c 4b       	sbci	r25, 0xBC	; 188
    859c:	fc 01       	movw	r30, r24
    859e:	20 83       	st	Z, r18
    85a0:	99 81       	ldd	r25, Y+1	; 0x01
    85a2:	88 89       	ldd	r24, Y+16	; 0x10
    85a4:	98 17       	cp	r25, r24
    85a6:	f8 f4       	brcc	.+62     	; 0x85e6 <lin_transfer_data+0x302>
    85a8:	89 81       	ldd	r24, Y+1	; 0x01
    85aa:	8f 5f       	subi	r24, 0xFF	; 255
    85ac:	89 83       	std	Y+1, r24	; 0x01
    85ae:	8a 81       	ldd	r24, Y+2	; 0x02
    85b0:	9b 81       	ldd	r25, Y+3	; 0x03
    85b2:	9c 01       	movw	r18, r24
    85b4:	2f 5f       	subi	r18, 0xFF	; 255
    85b6:	3f 4f       	sbci	r19, 0xFF	; 255
    85b8:	2a 83       	std	Y+2, r18	; 0x02
    85ba:	3b 83       	std	Y+3, r19	; 0x03
    85bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    85be:	3d 85       	ldd	r19, Y+13	; 0x0d
    85c0:	f9 01       	movw	r30, r18
    85c2:	41 85       	ldd	r20, Z+9	; 0x09
    85c4:	52 85       	ldd	r21, Z+10	; 0x0a
    85c6:	2c 81       	ldd	r18, Y+4	; 0x04
    85c8:	3d 81       	ldd	r19, Y+5	; 0x05
    85ca:	22 0f       	add	r18, r18
    85cc:	33 1f       	adc	r19, r19
    85ce:	22 0f       	add	r18, r18
    85d0:	33 1f       	adc	r19, r19
    85d2:	22 0f       	add	r18, r18
    85d4:	33 1f       	adc	r19, r19
    85d6:	24 0f       	add	r18, r20
    85d8:	35 1f       	adc	r19, r21
    85da:	f9 01       	movw	r30, r18
    85dc:	25 81       	ldd	r18, Z+5	; 0x05
    85de:	82 5f       	subi	r24, 0xF2	; 242
    85e0:	9c 4b       	sbci	r25, 0xBC	; 188
    85e2:	fc 01       	movw	r30, r24
    85e4:	20 83       	st	Z, r18
    85e6:	99 81       	ldd	r25, Y+1	; 0x01
    85e8:	88 89       	ldd	r24, Y+16	; 0x10
    85ea:	98 17       	cp	r25, r24
    85ec:	f8 f4       	brcc	.+62     	; 0x862c <lin_transfer_data+0x348>
    85ee:	89 81       	ldd	r24, Y+1	; 0x01
    85f0:	8f 5f       	subi	r24, 0xFF	; 255
    85f2:	89 83       	std	Y+1, r24	; 0x01
    85f4:	8a 81       	ldd	r24, Y+2	; 0x02
    85f6:	9b 81       	ldd	r25, Y+3	; 0x03
    85f8:	9c 01       	movw	r18, r24
    85fa:	2f 5f       	subi	r18, 0xFF	; 255
    85fc:	3f 4f       	sbci	r19, 0xFF	; 255
    85fe:	2a 83       	std	Y+2, r18	; 0x02
    8600:	3b 83       	std	Y+3, r19	; 0x03
    8602:	2c 85       	ldd	r18, Y+12	; 0x0c
    8604:	3d 85       	ldd	r19, Y+13	; 0x0d
    8606:	f9 01       	movw	r30, r18
    8608:	41 85       	ldd	r20, Z+9	; 0x09
    860a:	52 85       	ldd	r21, Z+10	; 0x0a
    860c:	2c 81       	ldd	r18, Y+4	; 0x04
    860e:	3d 81       	ldd	r19, Y+5	; 0x05
    8610:	22 0f       	add	r18, r18
    8612:	33 1f       	adc	r19, r19
    8614:	22 0f       	add	r18, r18
    8616:	33 1f       	adc	r19, r19
    8618:	22 0f       	add	r18, r18
    861a:	33 1f       	adc	r19, r19
    861c:	24 0f       	add	r18, r20
    861e:	35 1f       	adc	r19, r21
    8620:	f9 01       	movw	r30, r18
    8622:	26 81       	ldd	r18, Z+6	; 0x06
    8624:	82 5f       	subi	r24, 0xF2	; 242
    8626:	9c 4b       	sbci	r25, 0xBC	; 188
    8628:	fc 01       	movw	r30, r24
    862a:	20 83       	st	Z, r18
    862c:	99 81       	ldd	r25, Y+1	; 0x01
    862e:	88 89       	ldd	r24, Y+16	; 0x10
    8630:	98 17       	cp	r25, r24
    8632:	f8 f4       	brcc	.+62     	; 0x8672 <lin_transfer_data+0x38e>
    8634:	89 81       	ldd	r24, Y+1	; 0x01
    8636:	8f 5f       	subi	r24, 0xFF	; 255
    8638:	89 83       	std	Y+1, r24	; 0x01
    863a:	8a 81       	ldd	r24, Y+2	; 0x02
    863c:	9b 81       	ldd	r25, Y+3	; 0x03
    863e:	9c 01       	movw	r18, r24
    8640:	2f 5f       	subi	r18, 0xFF	; 255
    8642:	3f 4f       	sbci	r19, 0xFF	; 255
    8644:	2a 83       	std	Y+2, r18	; 0x02
    8646:	3b 83       	std	Y+3, r19	; 0x03
    8648:	2c 85       	ldd	r18, Y+12	; 0x0c
    864a:	3d 85       	ldd	r19, Y+13	; 0x0d
    864c:	f9 01       	movw	r30, r18
    864e:	41 85       	ldd	r20, Z+9	; 0x09
    8650:	52 85       	ldd	r21, Z+10	; 0x0a
    8652:	2c 81       	ldd	r18, Y+4	; 0x04
    8654:	3d 81       	ldd	r19, Y+5	; 0x05
    8656:	22 0f       	add	r18, r18
    8658:	33 1f       	adc	r19, r19
    865a:	22 0f       	add	r18, r18
    865c:	33 1f       	adc	r19, r19
    865e:	22 0f       	add	r18, r18
    8660:	33 1f       	adc	r19, r19
    8662:	24 0f       	add	r18, r20
    8664:	35 1f       	adc	r19, r21
    8666:	f9 01       	movw	r30, r18
    8668:	27 81       	ldd	r18, Z+7	; 0x07
    866a:	82 5f       	subi	r24, 0xF2	; 242
    866c:	9c 4b       	sbci	r25, 0xBC	; 188
    866e:	fc 01       	movw	r30, r24
    8670:	20 83       	st	Z, r18
    8672:	8c 81       	ldd	r24, Y+4	; 0x04
    8674:	9d 81       	ldd	r25, Y+5	; 0x05
    8676:	01 96       	adiw	r24, 0x01	; 1
    8678:	8c 83       	std	Y+4, r24	; 0x04
    867a:	9d 83       	std	Y+5, r25	; 0x05
    867c:	8c 85       	ldd	r24, Y+12	; 0x0c
    867e:	9d 85       	ldd	r25, Y+13	; 0x0d
    8680:	fc 01       	movw	r30, r24
    8682:	22 81       	ldd	r18, Z+2	; 0x02
    8684:	33 81       	ldd	r19, Z+3	; 0x03
    8686:	8c 81       	ldd	r24, Y+4	; 0x04
    8688:	9d 81       	ldd	r25, Y+5	; 0x05
    868a:	28 17       	cp	r18, r24
    868c:	39 07       	cpc	r19, r25
    868e:	08 f0       	brcs	.+2      	; 0x8692 <lin_transfer_data+0x3ae>
    8690:	1e cf       	rjmp	.-452    	; 0x84ce <lin_transfer_data+0x1ea>
    8692:	80 91 6b 46 	lds	r24, 0x466B	; 0x80466b <history_blcok_count>
    8696:	8f 5f       	subi	r24, 0xFF	; 255
    8698:	80 93 6b 46 	sts	0x466B, r24	; 0x80466b <history_blcok_count>
    869c:	88 89       	ldd	r24, Y+16	; 0x10
    869e:	28 2f       	mov	r18, r24
    86a0:	30 e0       	ldi	r19, 0x00	; 0
    86a2:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <update_cnt>
    86a6:	90 91 0f 45 	lds	r25, 0x450F	; 0x80450f <update_cnt+0x1>
    86aa:	82 0f       	add	r24, r18
    86ac:	93 1f       	adc	r25, r19
    86ae:	80 93 0e 45 	sts	0x450E, r24	; 0x80450e <update_cnt>
    86b2:	90 93 0f 45 	sts	0x450F, r25	; 0x80450f <update_cnt+0x1>
    86b6:	88 89       	ldd	r24, Y+16	; 0x10
    86b8:	28 2f       	mov	r18, r24
    86ba:	30 e0       	ldi	r19, 0x00	; 0
    86bc:	80 91 10 45 	lds	r24, 0x4510	; 0x804510 <bin_size_cnt>
    86c0:	90 91 11 45 	lds	r25, 0x4511	; 0x804511 <bin_size_cnt+0x1>
    86c4:	82 0f       	add	r24, r18
    86c6:	93 1f       	adc	r25, r19
    86c8:	80 93 10 45 	sts	0x4510, r24	; 0x804510 <bin_size_cnt>
    86cc:	90 93 11 45 	sts	0x4511, r25	; 0x804511 <bin_size_cnt+0x1>
    86d0:	80 91 0e 45 	lds	r24, 0x450E	; 0x80450e <update_cnt>
    86d4:	90 91 0f 45 	lds	r25, 0x450F	; 0x80450f <update_cnt+0x1>
    86d8:	81 15       	cp	r24, r1
    86da:	92 40       	sbci	r25, 0x02	; 2
    86dc:	58 f0       	brcs	.+22     	; 0x86f4 <lin_transfer_data+0x410>
    86de:	10 92 0e 45 	sts	0x450E, r1	; 0x80450e <update_cnt>
    86e2:	10 92 0f 45 	sts	0x450F, r1	; 0x80450f <update_cnt+0x1>
    86e6:	81 e0       	ldi	r24, 0x01	; 1
    86e8:	90 e0       	ldi	r25, 0x00	; 0
    86ea:	80 93 0a 43 	sts	0x430A, r24	; 0x80430a <flash_flag>
    86ee:	90 93 0b 43 	sts	0x430B, r25	; 0x80430b <flash_flag+0x1>
    86f2:	17 c0       	rjmp	.+46     	; 0x8722 <lin_transfer_data+0x43e>
    86f4:	80 91 10 45 	lds	r24, 0x4510	; 0x804510 <bin_size_cnt>
    86f8:	90 91 11 45 	lds	r25, 0x4511	; 0x804511 <bin_size_cnt+0x1>
    86fc:	80 3d       	cpi	r24, 0xD0	; 208
    86fe:	94 45       	sbci	r25, 0x54	; 84
    8700:	80 f0       	brcs	.+32     	; 0x8722 <lin_transfer_data+0x43e>
    8702:	10 92 0e 45 	sts	0x450E, r1	; 0x80450e <update_cnt>
    8706:	10 92 0f 45 	sts	0x450F, r1	; 0x80450f <update_cnt+0x1>
    870a:	81 e0       	ldi	r24, 0x01	; 1
    870c:	90 e0       	ldi	r25, 0x00	; 0
    870e:	80 93 0a 43 	sts	0x430A, r24	; 0x80430a <flash_flag>
    8712:	90 93 0b 43 	sts	0x430B, r25	; 0x80430b <flash_flag+0x1>
    8716:	81 e0       	ldi	r24, 0x01	; 1
    8718:	90 e0       	ldi	r25, 0x00	; 0
    871a:	80 93 0c 43 	sts	0x430C, r24	; 0x80430c <jump_flag>
    871e:	90 93 0d 43 	sts	0x430D, r25	; 0x80430d <jump_flag+0x1>
    8722:	8a 85       	ldd	r24, Y+10	; 0x0a
    8724:	9b 85       	ldd	r25, Y+11	; 0x0b
    8726:	fc 01       	movw	r30, r24
    8728:	80 81       	ld	r24, Z
    872a:	91 81       	ldd	r25, Z+1	; 0x01
    872c:	fc 01       	movw	r30, r24
    872e:	80 81       	ld	r24, Z
    8730:	89 8b       	std	Y+17, r24	; 0x11
    8732:	82 e0       	ldi	r24, 0x02	; 2
    8734:	8a 8b       	std	Y+18, r24	; 0x12
    8736:	86 e7       	ldi	r24, 0x76	; 118
    8738:	8b 8b       	std	Y+19, r24	; 0x13
    873a:	8f 85       	ldd	r24, Y+15	; 0x0f
    873c:	8c 8b       	std	Y+20, r24	; 0x14
    873e:	8f ef       	ldi	r24, 0xFF	; 255
    8740:	8d 8b       	std	Y+21, r24	; 0x15
    8742:	8f ef       	ldi	r24, 0xFF	; 255
    8744:	8e 8b       	std	Y+22, r24	; 0x16
    8746:	8f ef       	ldi	r24, 0xFF	; 255
    8748:	8f 8b       	std	Y+23, r24	; 0x17
    874a:	8f ef       	ldi	r24, 0xFF	; 255
    874c:	88 8f       	std	Y+24, r24	; 0x18
    874e:	ce 01       	movw	r24, r28
    8750:	41 96       	adiw	r24, 0x11	; 17
    8752:	bc 01       	movw	r22, r24
    8754:	89 8d       	ldd	r24, Y+25	; 0x19
    8756:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
    875a:	8e 81       	ldd	r24, Y+6	; 0x06
    875c:	9f 81       	ldd	r25, Y+7	; 0x07
    875e:	22 e0       	ldi	r18, 0x02	; 2
    8760:	fc 01       	movw	r30, r24
    8762:	26 a3       	std	Z+38, r18	; 0x26
    8764:	00 00       	nop
    8766:	69 96       	adiw	r28, 0x19	; 25
    8768:	cd bf       	out	0x3d, r28	; 61
    876a:	de bf       	out	0x3e, r29	; 62
    876c:	df 91       	pop	r29
    876e:	cf 91       	pop	r28
    8770:	08 95       	ret

00008772 <lin_diag_service_callback>:
 *
 * Implements    : lin_diag_service_callback_Activity
 *END**************************************************************************/
void lin_diag_service_callback(l_ifc_handle iii,
                               l_u8 sid)
{
    8772:	cf 93       	push	r28
    8774:	df 93       	push	r29
    8776:	cd b7       	in	r28, 0x3d	; 61
    8778:	de b7       	in	r29, 0x3e	; 62
    877a:	2e 97       	sbiw	r28, 0x0e	; 14
    877c:	cd bf       	out	0x3d, r28	; 61
    877e:	de bf       	out	0x3e, r29	; 62
    8780:	8d 87       	std	Y+13, r24	; 0x0d
    8782:	6e 87       	std	Y+14, r22	; 0x0e
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    8784:	8d 85       	ldd	r24, Y+13	; 0x0d
    8786:	28 2f       	mov	r18, r24
    8788:	30 e0       	ldi	r19, 0x00	; 0
    878a:	4c e1       	ldi	r20, 0x1C	; 28
    878c:	42 9f       	mul	r20, r18
    878e:	c0 01       	movw	r24, r0
    8790:	43 9f       	mul	r20, r19
    8792:	90 0d       	add	r25, r0
    8794:	11 24       	eor	r1, r1
    8796:	86 56       	subi	r24, 0x66	; 102
    8798:	9d 4b       	sbci	r25, 0xBD	; 189
    879a:	8b 83       	std	Y+3, r24	; 0x03
    879c:	9c 83       	std	Y+4, r25	; 0x04
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    879e:	8d 85       	ldd	r24, Y+13	; 0x0d
    87a0:	28 2f       	mov	r18, r24
    87a2:	30 e0       	ldi	r19, 0x00	; 0
    87a4:	44 e3       	ldi	r20, 0x34	; 52
    87a6:	42 9f       	mul	r20, r18
    87a8:	c0 01       	movw	r24, r0
    87aa:	43 9f       	mul	r20, r19
    87ac:	90 0d       	add	r25, r0
    87ae:	11 24       	eor	r1, r1
    87b0:	84 59       	subi	r24, 0x94	; 148
    87b2:	99 4b       	sbci	r25, 0xB9	; 185
    87b4:	8d 83       	std	Y+5, r24	; 0x05
    87b6:	9e 83       	std	Y+6, r25	; 0x06
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    87b8:	8b 81       	ldd	r24, Y+3	; 0x03
    87ba:	9c 81       	ldd	r25, Y+4	; 0x04
    87bc:	fc 01       	movw	r30, r24
    87be:	82 89       	ldd	r24, Z+18	; 0x12
    87c0:	28 2f       	mov	r18, r24
    87c2:	30 e0       	ldi	r19, 0x00	; 0
    87c4:	44 e2       	ldi	r20, 0x24	; 36
    87c6:	42 9f       	mul	r20, r18
    87c8:	c0 01       	movw	r24, r0
    87ca:	43 9f       	mul	r20, r19
    87cc:	90 0d       	add	r25, r0
    87ce:	11 24       	eor	r1, r1
    87d0:	8a 58       	subi	r24, 0x8A	; 138
    87d2:	9d 4b       	sbci	r25, 0xBD	; 189
    87d4:	8f 83       	std	Y+7, r24	; 0x07
    87d6:	98 87       	std	Y+8, r25	; 0x08
    l_bool sid_supported_flg = (bool)0U;
    87d8:	19 82       	std	Y+1, r1	; 0x01
    l_u8 i;
    const l_u8 *service_supported_ptr;
    l_u8 *service_flag_ptr;
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    87da:	8f 81       	ldd	r24, Y+7	; 0x07
    87dc:	98 85       	ldd	r25, Y+8	; 0x08
    87de:	fc 01       	movw	r30, r24
    87e0:	80 a1       	ldd	r24, Z+32	; 0x20
    87e2:	91 a1       	ldd	r25, Z+33	; 0x21
    87e4:	89 87       	std	Y+9, r24	; 0x09
    87e6:	9a 87       	std	Y+10, r25	; 0x0a
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;
    87e8:	8f 81       	ldd	r24, Y+7	; 0x07
    87ea:	98 85       	ldd	r25, Y+8	; 0x08
    87ec:	fc 01       	movw	r30, r24
    87ee:	82 a1       	ldd	r24, Z+34	; 0x22
    87f0:	93 a1       	ldd	r25, Z+35	; 0x23
    87f2:	8b 87       	std	Y+11, r24	; 0x0b
    87f4:	9c 87       	std	Y+12, r25	; 0x0c

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    87f6:	1a 82       	std	Y+2, r1	; 0x02
    87f8:	1c c0       	rjmp	.+56     	; 0x8832 <lin_diag_service_callback+0xc0>
    {
        if (service_supported_ptr[i] == sid)
    87fa:	8a 81       	ldd	r24, Y+2	; 0x02
    87fc:	88 2f       	mov	r24, r24
    87fe:	90 e0       	ldi	r25, 0x00	; 0
    8800:	29 85       	ldd	r18, Y+9	; 0x09
    8802:	3a 85       	ldd	r19, Y+10	; 0x0a
    8804:	82 0f       	add	r24, r18
    8806:	93 1f       	adc	r25, r19
    8808:	fc 01       	movw	r30, r24
    880a:	90 81       	ld	r25, Z
    880c:	8e 85       	ldd	r24, Y+14	; 0x0e
    880e:	98 17       	cp	r25, r24
    8810:	69 f4       	brne	.+26     	; 0x882c <lin_diag_service_callback+0xba>
        {
            service_flag_ptr[i] = 1U;
    8812:	8a 81       	ldd	r24, Y+2	; 0x02
    8814:	88 2f       	mov	r24, r24
    8816:	90 e0       	ldi	r25, 0x00	; 0
    8818:	2b 85       	ldd	r18, Y+11	; 0x0b
    881a:	3c 85       	ldd	r19, Y+12	; 0x0c
    881c:	82 0f       	add	r24, r18
    881e:	93 1f       	adc	r25, r19
    8820:	21 e0       	ldi	r18, 0x01	; 1
    8822:	fc 01       	movw	r30, r24
    8824:	20 83       	st	Z, r18
            sid_supported_flg = (bool)1U;
    8826:	81 e0       	ldi	r24, 0x01	; 1
    8828:	89 83       	std	Y+1, r24	; 0x01
            break;
    882a:	0a c0       	rjmp	.+20     	; 0x8840 <lin_diag_service_callback+0xce>
    /* Get support sid */
    service_supported_ptr = node_attr_ptr->service_supported_ptr;
    /* Get service flag */
    service_flag_ptr = node_attr_ptr->service_flags_ptr;

    for (i = 0U; i < node_attr_ptr->number_support_sid; i++)
    882c:	8a 81       	ldd	r24, Y+2	; 0x02
    882e:	8f 5f       	subi	r24, 0xFF	; 255
    8830:	8a 83       	std	Y+2, r24	; 0x02
    8832:	8f 81       	ldd	r24, Y+7	; 0x07
    8834:	98 85       	ldd	r25, Y+8	; 0x08
    8836:	fc 01       	movw	r30, r24
    8838:	97 8d       	ldd	r25, Z+31	; 0x1f
    883a:	8a 81       	ldd	r24, Y+2	; 0x02
    883c:	89 17       	cp	r24, r25
    883e:	e8 f2       	brcs	.-70     	; 0x87fa <lin_diag_service_callback+0x88>
            sid_supported_flg = (bool)1U;
            break;
        }
    }

    if (sid_supported_flg == (bool)1U)
    8840:	89 81       	ldd	r24, Y+1	; 0x01
    8842:	88 23       	and	r24, r24
    8844:	09 f4       	brne	.+2      	; 0x8848 <lin_diag_service_callback+0xd6>
    8846:	8b c0       	rjmp	.+278    	; 0x895e <lin_diag_service_callback+0x1ec>
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    8848:	8e 85       	ldd	r24, Y+14	; 0x0e
    884a:	88 2f       	mov	r24, r24
    884c:	90 e0       	ldi	r25, 0x00	; 0
    884e:	85 38       	cpi	r24, 0x85	; 133
    8850:	91 05       	cpc	r25, r1
    8852:	09 f4       	brne	.+2      	; 0x8856 <lin_diag_service_callback+0xe4>
    8854:	7c c0       	rjmp	.+248    	; 0x894e <lin_diag_service_callback+0x1dc>
    8856:	86 38       	cpi	r24, 0x86	; 134
    8858:	91 05       	cpc	r25, r1
    885a:	9c f4       	brge	.+38     	; 0x8882 <lin_diag_service_callback+0x110>
    885c:	82 32       	cpi	r24, 0x22	; 34
    885e:	91 05       	cpc	r25, r1
    8860:	09 f4       	brne	.+2      	; 0x8864 <lin_diag_service_callback+0xf2>
    8862:	6d c0       	rjmp	.+218    	; 0x893e <lin_diag_service_callback+0x1cc>
    8864:	83 32       	cpi	r24, 0x23	; 35
    8866:	91 05       	cpc	r25, r1
    8868:	24 f4       	brge	.+8      	; 0x8872 <lin_diag_service_callback+0x100>
    886a:	40 97       	sbiw	r24, 0x10	; 16
    886c:	09 f4       	brne	.+2      	; 0x8870 <lin_diag_service_callback+0xfe>
    886e:	63 c0       	rjmp	.+198    	; 0x8936 <lin_diag_service_callback+0x1c4>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    8870:	95 c0       	rjmp	.+298    	; 0x899c <lin_diag_service_callback+0x22a>
    }

    if (sid_supported_flg == (bool)1U)
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    8872:	81 33       	cpi	r24, 0x31	; 49
    8874:	91 05       	cpc	r25, r1
    8876:	09 f4       	brne	.+2      	; 0x887a <lin_diag_service_callback+0x108>
    8878:	66 c0       	rjmp	.+204    	; 0x8946 <lin_diag_service_callback+0x1d4>
    887a:	c6 97       	sbiw	r24, 0x36	; 54
    887c:	09 f4       	brne	.+2      	; 0x8880 <lin_diag_service_callback+0x10e>
    887e:	6b c0       	rjmp	.+214    	; 0x8956 <lin_diag_service_callback+0x1e4>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    8880:	8d c0       	rjmp	.+282    	; 0x899c <lin_diag_service_callback+0x22a>
    }

    if (sid_supported_flg == (bool)1U)
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    8882:	83 3b       	cpi	r24, 0xB3	; 179
    8884:	91 05       	cpc	r25, r1
    8886:	a9 f0       	breq	.+42     	; 0x88b2 <lin_diag_service_callback+0x140>
    8888:	84 3b       	cpi	r24, 0xB4	; 180
    888a:	91 05       	cpc	r25, r1
    888c:	3c f4       	brge	.+14     	; 0x889c <lin_diag_service_callback+0x12a>
    888e:	80 3b       	cpi	r24, 0xB0	; 176
    8890:	91 05       	cpc	r25, r1
    8892:	01 f1       	breq	.+64     	; 0x88d4 <lin_diag_service_callback+0x162>
    8894:	82 3b       	cpi	r24, 0xB2	; 178
    8896:	91 05       	cpc	r25, r1
    8898:	41 f0       	breq	.+16     	; 0x88aa <lin_diag_service_callback+0x138>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    889a:	80 c0       	rjmp	.+256    	; 0x899c <lin_diag_service_callback+0x22a>
    }

    if (sid_supported_flg == (bool)1U)
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
    889c:	86 3b       	cpi	r24, 0xB6	; 182
    889e:	91 05       	cpc	r25, r1
    88a0:	a9 f1       	breq	.+106    	; 0x890c <lin_diag_service_callback+0x19a>
    88a2:	87 3b       	cpi	r24, 0xB7	; 183
    88a4:	91 05       	cpc	r25, r1
    88a6:	39 f1       	breq	.+78     	; 0x88f6 <lin_diag_service_callback+0x184>
        case 0x36:
            lin_transfer_data(iii);
            break;
        default:
            /* do nothing */
            break;
    88a8:	79 c0       	rjmp	.+242    	; 0x899c <lin_diag_service_callback+0x22a>
    {
        /* Check whether or not the Service is supported by the Slave node */
        switch (sid)
        {
        case SERVICE_READ_BY_IDENTIFY: /* Mandatory for TL LIN 2.1 & 2.0, Optional for J2602 */
            lin_diagservice_read_by_identifier(iii);
    88aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    88ac:	0e 94 d5 44 	call	0x89aa	; 0x89aa <lin_diagservice_read_by_identifier>
            break;
    88b0:	75 c0       	rjmp	.+234    	; 0x899c <lin_diag_service_callback+0x22a>

#if ((1U == SUPPORT_PROTOCOL_21) || (1U == SUPPORT_PROTOCOL_20))
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    88b2:	8b 81       	ldd	r24, Y+3	; 0x03
    88b4:	9c 81       	ldd	r25, Y+4	; 0x04
    88b6:	fc 01       	movw	r30, r24
    88b8:	80 81       	ld	r24, Z
    88ba:	88 23       	and	r24, r24
    88bc:	39 f0       	breq	.+14     	; 0x88cc <lin_diag_service_callback+0x15a>
    88be:	8b 81       	ldd	r24, Y+3	; 0x03
    88c0:	9c 81       	ldd	r25, Y+4	; 0x04
    88c2:	fc 01       	movw	r30, r24
    88c4:	80 81       	ld	r24, Z
    88c6:	83 30       	cpi	r24, 0x03	; 3
    88c8:	09 f0       	breq	.+2      	; 0x88cc <lin_diag_service_callback+0x15a>
    88ca:	63 c0       	rjmp	.+198    	; 0x8992 <lin_diag_service_callback+0x220>
            {
                lin_condittional_change_nad(iii);
    88cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    88ce:	0e 94 f1 39 	call	0x73e2	; 0x73e2 <lin_condittional_change_nad>
            }
            break;
    88d2:	5f c0       	rjmp	.+190    	; 0x8992 <lin_diag_service_callback+0x220>
        case SERVICE_ASSIGN_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
    88d4:	8b 81       	ldd	r24, Y+3	; 0x03
    88d6:	9c 81       	ldd	r25, Y+4	; 0x04
    88d8:	fc 01       	movw	r30, r24
    88da:	80 81       	ld	r24, Z
    88dc:	88 23       	and	r24, r24
    88de:	39 f0       	breq	.+14     	; 0x88ee <lin_diag_service_callback+0x17c>
    88e0:	8b 81       	ldd	r24, Y+3	; 0x03
    88e2:	9c 81       	ldd	r25, Y+4	; 0x04
    88e4:	fc 01       	movw	r30, r24
    88e6:	80 81       	ld	r24, Z
    88e8:	83 30       	cpi	r24, 0x03	; 3
    88ea:	09 f0       	breq	.+2      	; 0x88ee <lin_diag_service_callback+0x17c>
    88ec:	54 c0       	rjmp	.+168    	; 0x8996 <lin_diag_service_callback+0x224>
            {
                lin_assign_nad(iii);
    88ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    88f0:	0e 94 3c 3b 	call	0x7678	; 0x7678 <lin_assign_nad>
            }
            break;
    88f4:	50 c0       	rjmp	.+160    	; 0x8996 <lin_diag_service_callback+0x224>

#if (1U == SUPPORT_PROTOCOL_21)
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version)
    88f6:	8b 81       	ldd	r24, Y+3	; 0x03
    88f8:	9c 81       	ldd	r25, Y+4	; 0x04
    88fa:	fc 01       	movw	r30, r24
    88fc:	80 81       	ld	r24, Z
    88fe:	88 23       	and	r24, r24
    8900:	09 f0       	breq	.+2      	; 0x8904 <lin_diag_service_callback+0x192>
    8902:	4b c0       	rjmp	.+150    	; 0x899a <lin_diag_service_callback+0x228>
            {
                lin_diagservice_assign_frame_id_range(iii);
    8904:	8d 85       	ldd	r24, Y+13	; 0x0d
    8906:	0e 94 ed 3b 	call	0x77da	; 0x77da <lin_diagservice_assign_frame_id_range>
            }
            break;
    890a:	47 c0       	rjmp	.+142    	; 0x899a <lin_diag_service_callback+0x228>
        case SERVICE_SAVE_CONFIGURATION:
            /* Set save configuration flag */
            g_lin_protocol_state_array[iii].save_config_flg = (l_bool)1U;
    890c:	8d 85       	ldd	r24, Y+13	; 0x0d
    890e:	28 2f       	mov	r18, r24
    8910:	30 e0       	ldi	r19, 0x00	; 0
    8912:	46 e1       	ldi	r20, 0x16	; 22
    8914:	42 9f       	mul	r20, r18
    8916:	c0 01       	movw	r24, r0
    8918:	43 9f       	mul	r20, r19
    891a:	90 0d       	add	r25, r0
    891c:	11 24       	eor	r1, r1
    891e:	81 55       	subi	r24, 0x51	; 81
    8920:	99 4b       	sbci	r25, 0xB9	; 185
    8922:	21 e0       	ldi	r18, 0x01	; 1
    8924:	fc 01       	movw	r30, r24
    8926:	20 83       	st	Z, r18
            /* Response to master - RSID */
            ld_make_slave_response_pdu(iii, SERVICE_SAVE_CONFIGURATION, POSITIVE, 0U);
    8928:	20 e0       	ldi	r18, 0x00	; 0
    892a:	41 e0       	ldi	r20, 0x01	; 1
    892c:	66 eb       	ldi	r22, 0xB6	; 182
    892e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8930:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
            break;
    8934:	33 c0       	rjmp	.+102    	; 0x899c <lin_diag_service_callback+0x22a>
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

#endif                                /* ((1U == SUPPORT_PROTOCOL_J2602) || (1U == SUPPORT_PROTOCOL_20)) */
        case SERVICE_SESSION_CONTROL: //诊断会话控制
            //诊断会话控制切换会话
            lin_slave_session_ctr(iii);
    8936:	8d 85       	ldd	r24, Y+13	; 0x0d
    8938:	0e 94 88 3e 	call	0x7d10	; 0x7d10 <lin_slave_session_ctr>
            break;
    893c:	2f c0       	rjmp	.+94     	; 0x899c <lin_diag_service_callback+0x22a>
        case SERVICE_READ_DATA_BY_IDENTIFY:
            //根据id读取数据信息
            lin_read_data_by_identify(iii);
    893e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8940:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <lin_read_data_by_identify>
            break;
    8944:	2b c0       	rjmp	.+86     	; 0x899c <lin_diag_service_callback+0x22a>
        case SERIVCE_ROUTINE_CONTROL:
            //路由控制,支持在扩展模式下
            lin_routine_control(iii);
    8946:	8d 85       	ldd	r24, Y+13	; 0x0d
    8948:	0e 94 76 3f 	call	0x7eec	; 0x7eec <lin_routine_control>
            break;
    894c:	27 c0       	rjmp	.+78     	; 0x899c <lin_diag_service_callback+0x22a>
        case 0x85:
            control_dtc_setting(iii);
    894e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8950:	0e 94 d6 40 	call	0x81ac	; 0x81ac <control_dtc_setting>
            break;
    8954:	23 c0       	rjmp	.+70     	; 0x899c <lin_diag_service_callback+0x22a>
        case 0x36:
            lin_transfer_data(iii);
    8956:	8d 85       	ldd	r24, Y+13	; 0x0d
    8958:	0e 94 72 41 	call	0x82e4	; 0x82e4 <lin_transfer_data>
            break;
    895c:	1f c0       	rjmp	.+62     	; 0x899c <lin_diag_service_callback+0x22a>
            break;
        } /* end of switch */
    }
    else
    {
        ld_make_slave_response_pdu(iii, sid, NEGATIVE, SERVICE_NOT_SUPPORTED);
    895e:	21 e1       	ldi	r18, 0x11	; 17
    8960:	40 e0       	ldi	r20, 0x00	; 0
    8962:	6e 85       	ldd	r22, Y+14	; 0x0e
    8964:	8d 85       	ldd	r24, Y+13	; 0x0d
    8966:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
        /* clear queue */
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    896a:	8d 81       	ldd	r24, Y+5	; 0x05
    896c:	9e 81       	ldd	r25, Y+6	; 0x06
    896e:	fc 01       	movw	r30, r24
    8970:	17 86       	std	Z+15, r1	; 0x0f
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0U;
    8972:	8d 81       	ldd	r24, Y+5	; 0x05
    8974:	9e 81       	ldd	r25, Y+6	; 0x06
    8976:	fc 01       	movw	r30, r24
    8978:	10 8a       	std	Z+16, r1	; 0x10
    897a:	11 8a       	std	Z+17, r1	; 0x11
        tl_desc_ptr->tl_rx_queue.queue_header = tl_desc_ptr->tl_rx_queue.queue_tail;
    897c:	8d 81       	ldd	r24, Y+5	; 0x05
    897e:	9e 81       	ldd	r25, Y+6	; 0x06
    8980:	fc 01       	movw	r30, r24
    8982:	25 85       	ldd	r18, Z+13	; 0x0d
    8984:	36 85       	ldd	r19, Z+14	; 0x0e
    8986:	8d 81       	ldd	r24, Y+5	; 0x05
    8988:	9e 81       	ldd	r25, Y+6	; 0x06
    898a:	fc 01       	movw	r30, r24
    898c:	23 87       	std	Z+11, r18	; 0x0b
    898e:	34 87       	std	Z+12, r19	; 0x0c
    }
}
    8990:	05 c0       	rjmp	.+10     	; 0x899c <lin_diag_service_callback+0x22a>
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
            {
                lin_condittional_change_nad(iii);
            }
            break;
    8992:	00 00       	nop
    8994:	03 c0       	rjmp	.+6      	; 0x899c <lin_diag_service_callback+0x22a>
        case SERVICE_ASSIGN_NAD:
            if ((LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version) || (LIN_PROTOCOL_20 == prot_user_config_ptr->protocol_version))
            {
                lin_assign_nad(iii);
            }
            break;
    8996:	00 00       	nop
    8998:	01 c0       	rjmp	.+2      	; 0x899c <lin_diag_service_callback+0x22a>
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (LIN_PROTOCOL_21 == prot_user_config_ptr->protocol_version)
            {
                lin_diagservice_assign_frame_id_range(iii);
            }
            break;
    899a:	00 00       	nop
        /* clear queue */
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0U;
        tl_desc_ptr->tl_rx_queue.queue_header = tl_desc_ptr->tl_rx_queue.queue_tail;
    }
}
    899c:	00 00       	nop
    899e:	2e 96       	adiw	r28, 0x0e	; 14
    89a0:	cd bf       	out	0x3d, r28	; 61
    89a2:	de bf       	out	0x3e, r29	; 62
    89a4:	df 91       	pop	r29
    89a6:	cf 91       	pop	r28
    89a8:	08 95       	ret

000089aa <lin_diagservice_read_by_identifier>:
 *                 Only for Slave Nodes.
 *
 * Implements    : lin_diagservice_read_by_identifier_Activity
 *END**************************************************************************/
static void lin_diagservice_read_by_identifier(l_ifc_handle iii)
{
    89aa:	cf 93       	push	r28
    89ac:	df 93       	push	r29
    89ae:	cd b7       	in	r28, 0x3d	; 61
    89b0:	de b7       	in	r29, 0x3e	; 62
    89b2:	a2 97       	sbiw	r28, 0x22	; 34
    89b4:	cd bf       	out	0x3d, r28	; 61
    89b6:	de bf       	out	0x3e, r29	; 62
    89b8:	8a a3       	std	Y+34, r24	; 0x22
    lin_tl_pdu_data_t lin_tl_pdu;
    l_u8 id;
    l_u16 supid;
    l_u16 fid;
    const lin_node_attribute_t *node_attr_ptr;
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    89ba:	8a a1       	ldd	r24, Y+34	; 0x22
    89bc:	28 2f       	mov	r18, r24
    89be:	30 e0       	ldi	r19, 0x00	; 0
    89c0:	44 e3       	ldi	r20, 0x34	; 52
    89c2:	42 9f       	mul	r20, r18
    89c4:	c0 01       	movw	r24, r0
    89c6:	43 9f       	mul	r20, r19
    89c8:	90 0d       	add	r25, r0
    89ca:	11 24       	eor	r1, r1
    89cc:	84 59       	subi	r24, 0x94	; 148
    89ce:	99 4b       	sbci	r25, 0xB9	; 185
    89d0:	8a 83       	std	Y+2, r24	; 0x02
    89d2:	9b 83       	std	Y+3, r25	; 0x03
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    89d4:	8a a1       	ldd	r24, Y+34	; 0x22
    89d6:	28 2f       	mov	r18, r24
    89d8:	30 e0       	ldi	r19, 0x00	; 0
    89da:	4c e1       	ldi	r20, 0x1C	; 28
    89dc:	42 9f       	mul	r20, r18
    89de:	c0 01       	movw	r24, r0
    89e0:	43 9f       	mul	r20, r19
    89e2:	90 0d       	add	r25, r0
    89e4:	11 24       	eor	r1, r1
    89e6:	86 56       	subi	r24, 0x66	; 102
    89e8:	9d 4b       	sbci	r25, 0xBD	; 189
    89ea:	8c 83       	std	Y+4, r24	; 0x04
    89ec:	9d 83       	std	Y+5, r25	; 0x05
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    89ee:	8c 81       	ldd	r24, Y+4	; 0x04
    89f0:	9d 81       	ldd	r25, Y+5	; 0x05
    89f2:	fc 01       	movw	r30, r24
    89f4:	82 89       	ldd	r24, Z+18	; 0x12
    89f6:	28 2f       	mov	r18, r24
    89f8:	30 e0       	ldi	r19, 0x00	; 0
    89fa:	44 e2       	ldi	r20, 0x24	; 36
    89fc:	42 9f       	mul	r20, r18
    89fe:	c0 01       	movw	r24, r0
    8a00:	43 9f       	mul	r20, r19
    8a02:	90 0d       	add	r25, r0
    8a04:	11 24       	eor	r1, r1
    8a06:	8a 58       	subi	r24, 0x8A	; 138
    8a08:	9d 4b       	sbci	r25, 0xBD	; 189
    8a0a:	8e 83       	std	Y+6, r24	; 0x06
    8a0c:	9f 83       	std	Y+7, r25	; 0x07
    const lin_transport_layer_queue_t *rx_queue = &(tl_desc_ptr->tl_rx_queue);
    8a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    8a10:	9b 81       	ldd	r25, Y+3	; 0x03
    8a12:	0b 96       	adiw	r24, 0x0b	; 11
    8a14:	88 87       	std	Y+8, r24	; 0x08
    8a16:	99 87       	std	Y+9, r25	; 0x09
    l_u8 i;
    for (i = 0; i < 8U; i++)
    8a18:	19 82       	std	Y+1, r1	; 0x01
    8a1a:	26 c0       	rjmp	.+76     	; 0x8a68 <lin_diagservice_read_by_identifier+0xbe>
    {
        lin_tl_pdu[i] = rx_queue->tl_pdu_ptr[rx_queue->queue_header][i];
    8a1c:	89 81       	ldd	r24, Y+1	; 0x01
    8a1e:	88 2f       	mov	r24, r24
    8a20:	90 e0       	ldi	r25, 0x00	; 0
    8a22:	28 85       	ldd	r18, Y+8	; 0x08
    8a24:	39 85       	ldd	r19, Y+9	; 0x09
    8a26:	f9 01       	movw	r30, r18
    8a28:	41 85       	ldd	r20, Z+9	; 0x09
    8a2a:	52 85       	ldd	r21, Z+10	; 0x0a
    8a2c:	28 85       	ldd	r18, Y+8	; 0x08
    8a2e:	39 85       	ldd	r19, Y+9	; 0x09
    8a30:	f9 01       	movw	r30, r18
    8a32:	20 81       	ld	r18, Z
    8a34:	31 81       	ldd	r19, Z+1	; 0x01
    8a36:	22 0f       	add	r18, r18
    8a38:	33 1f       	adc	r19, r19
    8a3a:	22 0f       	add	r18, r18
    8a3c:	33 1f       	adc	r19, r19
    8a3e:	22 0f       	add	r18, r18
    8a40:	33 1f       	adc	r19, r19
    8a42:	42 0f       	add	r20, r18
    8a44:	53 1f       	adc	r21, r19
    8a46:	29 81       	ldd	r18, Y+1	; 0x01
    8a48:	22 2f       	mov	r18, r18
    8a4a:	30 e0       	ldi	r19, 0x00	; 0
    8a4c:	24 0f       	add	r18, r20
    8a4e:	35 1f       	adc	r19, r21
    8a50:	f9 01       	movw	r30, r18
    8a52:	40 81       	ld	r20, Z
    8a54:	9e 01       	movw	r18, r28
    8a56:	2b 5e       	subi	r18, 0xEB	; 235
    8a58:	3f 4f       	sbci	r19, 0xFF	; 255
    8a5a:	82 0f       	add	r24, r18
    8a5c:	93 1f       	adc	r25, r19
    8a5e:	fc 01       	movw	r30, r24
    8a60:	40 83       	st	Z, r20
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    const lin_transport_layer_queue_t *rx_queue = &(tl_desc_ptr->tl_rx_queue);
    l_u8 i;
    for (i = 0; i < 8U; i++)
    8a62:	89 81       	ldd	r24, Y+1	; 0x01
    8a64:	8f 5f       	subi	r24, 0xFF	; 255
    8a66:	89 83       	std	Y+1, r24	; 0x01
    8a68:	89 81       	ldd	r24, Y+1	; 0x01
    8a6a:	88 30       	cpi	r24, 0x08	; 8
    8a6c:	b8 f2       	brcs	.-82     	; 0x8a1c <lin_diagservice_read_by_identifier+0x72>
    {
        lin_tl_pdu[i] = rx_queue->tl_pdu_ptr[rx_queue->queue_header][i];
    }

    /* Get the product identification */
    product_id = node_attr_ptr->product_id;
    8a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    8a70:	9f 81       	ldd	r25, Y+7	; 0x07
    8a72:	25 e0       	ldi	r18, 0x05	; 5
    8a74:	fc 01       	movw	r30, r24
    8a76:	33 96       	adiw	r30, 0x03	; 3
    8a78:	de 01       	movw	r26, r28
    8a7a:	50 96       	adiw	r26, 0x10	; 16
    8a7c:	01 90       	ld	r0, Z+
    8a7e:	0d 92       	st	X+, r0
    8a80:	2a 95       	dec	r18
    8a82:	e1 f7       	brne	.-8      	; 0x8a7c <lin_diagservice_read_by_identifier+0xd2>

    /* Get supplier and function identification in request */
    supid = (l_u16)(((l_u16)(lin_tl_pdu[5])) << 8U);
    8a84:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8a86:	88 2f       	mov	r24, r24
    8a88:	90 e0       	ldi	r25, 0x00	; 0
    8a8a:	98 2f       	mov	r25, r24
    8a8c:	88 27       	eor	r24, r24
    8a8e:	8a 87       	std	Y+10, r24	; 0x0a
    8a90:	9b 87       	std	Y+11, r25	; 0x0b
    supid = (l_u16)(supid | (l_u16)(lin_tl_pdu[4]));
    8a92:	89 8d       	ldd	r24, Y+25	; 0x19
    8a94:	88 2f       	mov	r24, r24
    8a96:	90 e0       	ldi	r25, 0x00	; 0
    8a98:	2a 85       	ldd	r18, Y+10	; 0x0a
    8a9a:	3b 85       	ldd	r19, Y+11	; 0x0b
    8a9c:	82 2b       	or	r24, r18
    8a9e:	93 2b       	or	r25, r19
    8aa0:	8a 87       	std	Y+10, r24	; 0x0a
    8aa2:	9b 87       	std	Y+11, r25	; 0x0b

    fid = (l_u16)(((l_u16)(lin_tl_pdu[7])) << 8U);
    8aa4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8aa6:	88 2f       	mov	r24, r24
    8aa8:	90 e0       	ldi	r25, 0x00	; 0
    8aaa:	98 2f       	mov	r25, r24
    8aac:	88 27       	eor	r24, r24
    8aae:	8c 87       	std	Y+12, r24	; 0x0c
    8ab0:	9d 87       	std	Y+13, r25	; 0x0d
    fid = (l_u16)(fid | (l_u16)(lin_tl_pdu[6]));
    8ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8ab4:	88 2f       	mov	r24, r24
    8ab6:	90 e0       	ldi	r25, 0x00	; 0
    8ab8:	2c 85       	ldd	r18, Y+12	; 0x0c
    8aba:	3d 85       	ldd	r19, Y+13	; 0x0d
    8abc:	82 2b       	or	r24, r18
    8abe:	93 2b       	or	r25, r19
    8ac0:	8c 87       	std	Y+12, r24	; 0x0c
    8ac2:	9d 87       	std	Y+13, r25	; 0x0d

    /* Check Supplier ID and Function ID */
    if (((supid != product_id.supplier_id) && (supid != LD_ANY_SUPPLIER)) ||
    8ac4:	28 89       	ldd	r18, Y+16	; 0x10
    8ac6:	39 89       	ldd	r19, Y+17	; 0x11
    8ac8:	8a 85       	ldd	r24, Y+10	; 0x0a
    8aca:	9b 85       	ldd	r25, Y+11	; 0x0b
    8acc:	28 17       	cp	r18, r24
    8ace:	39 07       	cpc	r19, r25
    8ad0:	29 f0       	breq	.+10     	; 0x8adc <lin_diagservice_read_by_identifier+0x132>
    8ad2:	8a 85       	ldd	r24, Y+10	; 0x0a
    8ad4:	9b 85       	ldd	r25, Y+11	; 0x0b
    8ad6:	8f 3f       	cpi	r24, 0xFF	; 255
    8ad8:	9f 47       	sbci	r25, 0x7F	; 127
    8ada:	59 f4       	brne	.+22     	; 0x8af2 <lin_diagservice_read_by_identifier+0x148>
        ((fid != product_id.function_id) && (fid != LD_ANY_FUNCTION)))
    8adc:	2a 89       	ldd	r18, Y+18	; 0x12
    8ade:	3b 89       	ldd	r19, Y+19	; 0x13

    fid = (l_u16)(((l_u16)(lin_tl_pdu[7])) << 8U);
    fid = (l_u16)(fid | (l_u16)(lin_tl_pdu[6]));

    /* Check Supplier ID and Function ID */
    if (((supid != product_id.supplier_id) && (supid != LD_ANY_SUPPLIER)) ||
    8ae0:	8c 85       	ldd	r24, Y+12	; 0x0c
    8ae2:	9d 85       	ldd	r25, Y+13	; 0x0d
    8ae4:	28 17       	cp	r18, r24
    8ae6:	39 07       	cpc	r19, r25
    8ae8:	49 f0       	breq	.+18     	; 0x8afc <lin_diagservice_read_by_identifier+0x152>
        ((fid != product_id.function_id) && (fid != LD_ANY_FUNCTION)))
    8aea:	8c 85       	ldd	r24, Y+12	; 0x0c
    8aec:	9d 85       	ldd	r25, Y+13	; 0x0d
    8aee:	01 96       	adiw	r24, 0x01	; 1
    8af0:	29 f0       	breq	.+10     	; 0x8afc <lin_diagservice_read_by_identifier+0x152>
    {
        tl_desc_ptr->slave_resp_cnt = 0U;
    8af2:	8a 81       	ldd	r24, Y+2	; 0x02
    8af4:	9b 81       	ldd	r25, Y+3	; 0x03
    8af6:	fc 01       	movw	r30, r24
    8af8:	12 a6       	std	Z+42, r1	; 0x2a
    8afa:	75 c0       	rjmp	.+234    	; 0x8be6 <lin_diagservice_read_by_identifier+0x23c>
    }
    else
    {
        /* Get the identifier of request */
        id = lin_tl_pdu[3];
    8afc:	88 8d       	ldd	r24, Y+24	; 0x18
    8afe:	8e 87       	std	Y+14, r24	; 0x0e

        switch (id)
    8b00:	8e 85       	ldd	r24, Y+14	; 0x0e
    8b02:	88 2f       	mov	r24, r24
    8b04:	90 e0       	ldi	r25, 0x00	; 0
    8b06:	00 97       	sbiw	r24, 0x00	; 0
    8b08:	19 f0       	breq	.+6      	; 0x8b10 <lin_diagservice_read_by_identifier+0x166>
    8b0a:	01 97       	sbiw	r24, 0x01	; 1
    8b0c:	41 f0       	breq	.+16     	; 0x8b1e <lin_diagservice_read_by_identifier+0x174>
    8b0e:	0e c0       	rjmp	.+28     	; 0x8b2c <lin_diagservice_read_by_identifier+0x182>
        {
        case LIN_PRODUCT_ID:
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
    8b10:	2e 85       	ldd	r18, Y+14	; 0x0e
    8b12:	41 e0       	ldi	r20, 0x01	; 1
    8b14:	62 eb       	ldi	r22, 0xB2	; 178
    8b16:	8a a1       	ldd	r24, Y+34	; 0x22
    8b18:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
            break;
    8b1c:	64 c0       	rjmp	.+200    	; 0x8be6 <lin_diagservice_read_by_identifier+0x23c>
        case LIN_SERIAL_NUMBER:
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
    8b1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    8b20:	41 e0       	ldi	r20, 0x01	; 1
    8b22:	62 eb       	ldi	r22, 0xB2	; 178
    8b24:	8a a1       	ldd	r24, Y+34	; 0x22
    8b26:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
            break;
    8b2a:	5d c0       	rjmp	.+186    	; 0x8be6 <lin_diagservice_read_by_identifier+0x23c>
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
    8b2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    8b2e:	80 32       	cpi	r24, 0x20	; 32
    8b30:	08 f4       	brcc	.+2      	; 0x8b34 <lin_diagservice_read_by_identifier+0x18a>
    8b32:	51 c0       	rjmp	.+162    	; 0x8bd6 <lin_diagservice_read_by_identifier+0x22c>
    8b34:	8e 85       	ldd	r24, Y+14	; 0x0e
    8b36:	80 34       	cpi	r24, 0x40	; 64
    8b38:	08 f0       	brcs	.+2      	; 0x8b3c <lin_diagservice_read_by_identifier+0x192>
    8b3a:	4d c0       	rjmp	.+154    	; 0x8bd6 <lin_diagservice_read_by_identifier+0x22c>
            {
                l_u8 data_callout[5] = {0xFFU, 0xFFU, 0xFFU, 0xFFU, 0xFFU};
    8b3c:	85 e0       	ldi	r24, 0x05	; 5
    8b3e:	e1 ef       	ldi	r30, 0xF1	; 241
    8b40:	f1 e4       	ldi	r31, 0x41	; 65
    8b42:	de 01       	movw	r26, r28
    8b44:	5d 96       	adiw	r26, 0x1d	; 29
    8b46:	01 90       	ld	r0, Z+
    8b48:	0d 92       	st	X+, r0
    8b4a:	8a 95       	dec	r24
    8b4c:	e1 f7       	brne	.-8      	; 0x8b46 <lin_diagservice_read_by_identifier+0x19c>
                l_u8 retval = ld_read_by_id_callout(iii, id, data_callout);
    8b4e:	ce 01       	movw	r24, r28
    8b50:	4d 96       	adiw	r24, 0x1d	; 29
    8b52:	ac 01       	movw	r20, r24
    8b54:	6e 85       	ldd	r22, Y+14	; 0x0e
    8b56:	8a a1       	ldd	r24, Y+34	; 0x22
    8b58:	0e 94 50 58 	call	0xb0a0	; 0xb0a0 <ld_read_by_id_callout>
    8b5c:	8f 87       	std	Y+15, r24	; 0x0f
                /*If the User ID is supported, make positive response*/
                if (retval == LD_POSITIVE_RESPONSE)
    8b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    8b60:	84 35       	cpi	r24, 0x54	; 84
    8b62:	29 f5       	brne	.+74     	; 0x8bae <lin_diagservice_read_by_identifier+0x204>
                {
                    i = 0U;
    8b64:	19 82       	std	Y+1, r1	; 0x01
                    while ((i < 5U) && (data_callout[i] == 0xFFU))
    8b66:	03 c0       	rjmp	.+6      	; 0x8b6e <lin_diagservice_read_by_identifier+0x1c4>
                    {
                        i++;
    8b68:	89 81       	ldd	r24, Y+1	; 0x01
    8b6a:	8f 5f       	subi	r24, 0xFF	; 255
    8b6c:	89 83       	std	Y+1, r24	; 0x01
                l_u8 retval = ld_read_by_id_callout(iii, id, data_callout);
                /*If the User ID is supported, make positive response*/
                if (retval == LD_POSITIVE_RESPONSE)
                {
                    i = 0U;
                    while ((i < 5U) && (data_callout[i] == 0xFFU))
    8b6e:	89 81       	ldd	r24, Y+1	; 0x01
    8b70:	85 30       	cpi	r24, 0x05	; 5
    8b72:	60 f4       	brcc	.+24     	; 0x8b8c <lin_diagservice_read_by_identifier+0x1e2>
    8b74:	89 81       	ldd	r24, Y+1	; 0x01
    8b76:	88 2f       	mov	r24, r24
    8b78:	90 e0       	ldi	r25, 0x00	; 0
    8b7a:	9e 01       	movw	r18, r28
    8b7c:	23 5e       	subi	r18, 0xE3	; 227
    8b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b80:	82 0f       	add	r24, r18
    8b82:	93 1f       	adc	r25, r19
    8b84:	fc 01       	movw	r30, r24
    8b86:	80 81       	ld	r24, Z
    8b88:	8f 3f       	cpi	r24, 0xFF	; 255
    8b8a:	71 f3       	breq	.-36     	; 0x8b68 <lin_diagservice_read_by_identifier+0x1be>
                    {
                        i++;
                    }
                    if (i < 5U)
    8b8c:	89 81       	ldd	r24, Y+1	; 0x01
    8b8e:	85 30       	cpi	r24, 0x05	; 5
    8b90:	38 f4       	brcc	.+14     	; 0x8ba0 <lin_diagservice_read_by_identifier+0x1f6>
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
    8b92:	2e 85       	ldd	r18, Y+14	; 0x0e
    8b94:	41 e0       	ldi	r20, 0x01	; 1
    8b96:	62 eb       	ldi	r22, 0xB2	; 178
    8b98:	8a a1       	ldd	r24, Y+34	; 0x22
    8b9a:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    8b9e:	22 c0       	rjmp	.+68     	; 0x8be4 <lin_diagservice_read_by_identifier+0x23a>
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
                    }
                    else
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
    8ba0:	22 e1       	ldi	r18, 0x12	; 18
    8ba2:	40 e0       	ldi	r20, 0x00	; 0
    8ba4:	62 eb       	ldi	r22, 0xB2	; 178
    8ba6:	8a a1       	ldd	r24, Y+34	; 0x22
    8ba8:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    8bac:	1b c0       	rjmp	.+54     	; 0x8be4 <lin_diagservice_read_by_identifier+0x23a>
                    {
                        ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
                    }
                }
                /*If the User ID is not supported, make negative response*/
                else if (retval == LD_NEGATIVE_RESPONSE)
    8bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    8bb0:	83 35       	cpi	r24, 0x53	; 83
    8bb2:	39 f4       	brne	.+14     	; 0x8bc2 <lin_diagservice_read_by_identifier+0x218>
                {
                    /* Make a negative slave response PDU */
                    ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
    8bb4:	22 e1       	ldi	r18, 0x12	; 18
    8bb6:	40 e0       	ldi	r20, 0x00	; 0
    8bb8:	62 eb       	ldi	r22, 0xB2	; 178
    8bba:	8a a1       	ldd	r24, Y+34	; 0x22
    8bbc:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    8bc0:	11 c0       	rjmp	.+34     	; 0x8be4 <lin_diagservice_read_by_identifier+0x23a>
                    ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
                }
                else
                {
                    /*Do not answer*/
                    tl_desc_ptr->slave_resp_cnt = 0;
    8bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    8bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    8bc6:	fc 01       	movw	r30, r24
    8bc8:	12 a6       	std	Z+42, r1	; 0x2a
                    tl_desc_ptr->service_status = LD_SERVICE_IDLE;
    8bca:	8a 81       	ldd	r24, Y+2	; 0x02
    8bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    8bce:	22 e0       	ldi	r18, 0x02	; 2
    8bd0:	fc 01       	movw	r30, r24
    8bd2:	23 a7       	std	Z+43, r18	; 0x2b
            ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, POSITIVE, id);
            break;
        default:
            /* For ID from 32 to 63, call user defined ld_read_by_id_callout */
            if ((id >= LIN_READ_USR_DEF_MIN) && (id <= LIN_READ_USR_DEF_MAX))
            {
    8bd4:	07 c0       	rjmp	.+14     	; 0x8be4 <lin_diagservice_read_by_identifier+0x23a>
            }
            /* For ID from 2 to 31 or 64-255, give negative response */
            else
            {
                /* Make a negative slave response PDU */
                ld_make_slave_response_pdu(iii, SERVICE_READ_BY_IDENTIFY, NEGATIVE, SUBFUNCTION_NOT_SUPPORTED);
    8bd6:	22 e1       	ldi	r18, 0x12	; 18
    8bd8:	40 e0       	ldi	r20, 0x00	; 0
    8bda:	62 eb       	ldi	r22, 0xB2	; 178
    8bdc:	8a a1       	ldd	r24, Y+34	; 0x22
    8bde:	0e 94 fa 45 	call	0x8bf4	; 0x8bf4 <ld_make_slave_response_pdu>
            }

            break;
    8be2:	00 c0       	rjmp	.+0      	; 0x8be4 <lin_diagservice_read_by_identifier+0x23a>
    8be4:	00 00       	nop
        } /* end of switch */
    }
}
    8be6:	00 00       	nop
    8be8:	a2 96       	adiw	r28, 0x22	; 34
    8bea:	cd bf       	out	0x3d, r28	; 61
    8bec:	de bf       	out	0x3e, r29	; 62
    8bee:	df 91       	pop	r29
    8bf0:	cf 91       	pop	r28
    8bf2:	08 95       	ret

00008bf4 <ld_make_slave_response_pdu>:
 *END**************************************************************************/
static void ld_make_slave_response_pdu(l_ifc_handle iii,
                                       l_u8 sid,
                                       l_u8 res_type,
                                       l_u8 error_code)
{
    8bf4:	cf 93       	push	r28
    8bf6:	df 93       	push	r29
    8bf8:	cd b7       	in	r28, 0x3d	; 61
    8bfa:	de b7       	in	r29, 0x3e	; 62
    8bfc:	6f 97       	sbiw	r28, 0x1f	; 31
    8bfe:	cd bf       	out	0x3d, r28	; 61
    8c00:	de bf       	out	0x3e, r29	; 62
    8c02:	8c 8f       	std	Y+28, r24	; 0x1c
    8c04:	6d 8f       	std	Y+29, r22	; 0x1d
    8c06:	4e 8f       	std	Y+30, r20	; 0x1e
    8c08:	2f 8f       	std	Y+31, r18	; 0x1f
    lin_tl_descriptor_t *tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    8c0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c0c:	28 2f       	mov	r18, r24
    8c0e:	30 e0       	ldi	r19, 0x00	; 0
    8c10:	44 e3       	ldi	r20, 0x34	; 52
    8c12:	42 9f       	mul	r20, r18
    8c14:	c0 01       	movw	r24, r0
    8c16:	43 9f       	mul	r20, r19
    8c18:	90 0d       	add	r25, r0
    8c1a:	11 24       	eor	r1, r1
    8c1c:	84 59       	subi	r24, 0x94	; 148
    8c1e:	99 4b       	sbci	r25, 0xB9	; 185
    8c20:	8a 83       	std	Y+2, r24	; 0x02
    8c22:	9b 83       	std	Y+3, r25	; 0x03
    const lin_protocol_user_config_t *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    8c24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8c26:	28 2f       	mov	r18, r24
    8c28:	30 e0       	ldi	r19, 0x00	; 0
    8c2a:	4c e1       	ldi	r20, 0x1C	; 28
    8c2c:	42 9f       	mul	r20, r18
    8c2e:	c0 01       	movw	r24, r0
    8c30:	43 9f       	mul	r20, r19
    8c32:	90 0d       	add	r25, r0
    8c34:	11 24       	eor	r1, r1
    8c36:	86 56       	subi	r24, 0x66	; 102
    8c38:	9d 4b       	sbci	r25, 0xBD	; 189
    8c3a:	8c 83       	std	Y+4, r24	; 0x04
    8c3c:	9d 83       	std	Y+5, r25	; 0x05
    const lin_node_attribute_t *node_attr_ptr;
    node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    8c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    8c40:	9d 81       	ldd	r25, Y+5	; 0x05
    8c42:	fc 01       	movw	r30, r24
    8c44:	82 89       	ldd	r24, Z+18	; 0x12
    8c46:	28 2f       	mov	r18, r24
    8c48:	30 e0       	ldi	r19, 0x00	; 0
    8c4a:	44 e2       	ldi	r20, 0x24	; 36
    8c4c:	42 9f       	mul	r20, r18
    8c4e:	c0 01       	movw	r24, r0
    8c50:	43 9f       	mul	r20, r19
    8c52:	90 0d       	add	r25, r0
    8c54:	11 24       	eor	r1, r1
    8c56:	8a 58       	subi	r24, 0x8A	; 138
    8c58:	9d 4b       	sbci	r25, 0xBD	; 189
    8c5a:	8e 83       	std	Y+6, r24	; 0x06
    8c5c:	9f 83       	std	Y+7, r25	; 0x07
    const lin_product_id_t *ident;
    const lin_serial_number_t *serial_number;
    l_u8 i = 0U;
    8c5e:	19 82       	std	Y+1, r1	; 0x01
    l_u8 NAD;
    lin_tl_pdu_data_t lin_tl_pdu;
    const lin_transport_layer_queue_t *rx_queue;

    /* Get receive queue */
    rx_queue = &(tl_desc_ptr->tl_rx_queue);
    8c60:	8a 81       	ldd	r24, Y+2	; 0x02
    8c62:	9b 81       	ldd	r25, Y+3	; 0x03
    8c64:	0b 96       	adiw	r24, 0x0b	; 11
    8c66:	88 87       	std	Y+8, r24	; 0x08
    8c68:	99 87       	std	Y+9, r25	; 0x09
    NAD = rx_queue->tl_pdu_ptr[rx_queue->queue_header][0];
    8c6a:	88 85       	ldd	r24, Y+8	; 0x08
    8c6c:	99 85       	ldd	r25, Y+9	; 0x09
    8c6e:	fc 01       	movw	r30, r24
    8c70:	21 85       	ldd	r18, Z+9	; 0x09
    8c72:	32 85       	ldd	r19, Z+10	; 0x0a
    8c74:	88 85       	ldd	r24, Y+8	; 0x08
    8c76:	99 85       	ldd	r25, Y+9	; 0x09
    8c78:	fc 01       	movw	r30, r24
    8c7a:	80 81       	ld	r24, Z
    8c7c:	91 81       	ldd	r25, Z+1	; 0x01
    8c7e:	88 0f       	add	r24, r24
    8c80:	99 1f       	adc	r25, r25
    8c82:	88 0f       	add	r24, r24
    8c84:	99 1f       	adc	r25, r25
    8c86:	88 0f       	add	r24, r24
    8c88:	99 1f       	adc	r25, r25
    8c8a:	82 0f       	add	r24, r18
    8c8c:	93 1f       	adc	r25, r19
    8c8e:	fc 01       	movw	r30, r24
    8c90:	80 81       	ld	r24, Z
    8c92:	8a 87       	std	Y+10, r24	; 0x0a
    if (NAD != LD_FUNCTIONAL_NAD)
    8c94:	8a 85       	ldd	r24, Y+10	; 0x0a
    8c96:	8e 37       	cpi	r24, 0x7E	; 126
    8c98:	09 f4       	brne	.+2      	; 0x8c9c <ld_make_slave_response_pdu+0xa8>
    8c9a:	26 c1       	rjmp	.+588    	; 0x8ee8 <ld_make_slave_response_pdu+0x2f4>
    {
        /* Pack data to response PDU */
        lin_tl_pdu[0] = *node_attr_ptr->configured_NAD_ptr;
    8c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    8c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    8ca0:	fc 01       	movw	r30, r24
    8ca2:	80 81       	ld	r24, Z
    8ca4:	91 81       	ldd	r25, Z+1	; 0x01
    8ca6:	fc 01       	movw	r30, r24
    8ca8:	80 81       	ld	r24, Z
    8caa:	8f 87       	std	Y+15, r24	; 0x0f
        lin_tl_pdu[1] = 0x03U;        /* PCI */
    8cac:	83 e0       	ldi	r24, 0x03	; 3
    8cae:	88 8b       	std	Y+16, r24	; 0x10
        lin_tl_pdu[2] = RES_NEGATIVE; /* SID */
    8cb0:	8f e7       	ldi	r24, 0x7F	; 127
    8cb2:	89 8b       	std	Y+17, r24	; 0x11
        lin_tl_pdu[3] = sid;          /* D0 */
    8cb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8cb6:	8a 8b       	std	Y+18, r24	; 0x12
        lin_tl_pdu[4] = error_code;   /* D1 */
    8cb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8cba:	8b 8b       	std	Y+19, r24	; 0x13
        lin_tl_pdu[5] = 0xFFU;        /* D2 */
    8cbc:	8f ef       	ldi	r24, 0xFF	; 255
    8cbe:	8c 8b       	std	Y+20, r24	; 0x14
        lin_tl_pdu[6] = 0xFFU;        /* D3 */
    8cc0:	8f ef       	ldi	r24, 0xFF	; 255
    8cc2:	8d 8b       	std	Y+21, r24	; 0x15
        lin_tl_pdu[7] = 0xFFU;        /* D4 */
    8cc4:	8f ef       	ldi	r24, 0xFF	; 255
    8cc6:	8e 8b       	std	Y+22, r24	; 0x16

        switch (sid)
    8cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8cca:	88 2f       	mov	r24, r24
    8ccc:	90 e0       	ldi	r25, 0x00	; 0
    8cce:	82 3b       	cpi	r24, 0xB2	; 178
    8cd0:	91 05       	cpc	r25, r1
    8cd2:	c9 f0       	breq	.+50     	; 0x8d06 <ld_make_slave_response_pdu+0x112>
    8cd4:	83 3b       	cpi	r24, 0xB3	; 179
    8cd6:	91 05       	cpc	r25, r1
    8cd8:	4c f4       	brge	.+18     	; 0x8cec <ld_make_slave_response_pdu+0xf8>
    8cda:	80 3b       	cpi	r24, 0xB0	; 176
    8cdc:	91 05       	cpc	r25, r1
    8cde:	09 f4       	brne	.+2      	; 0x8ce2 <ld_make_slave_response_pdu+0xee>
    8ce0:	ab c0       	rjmp	.+342    	; 0x8e38 <ld_make_slave_response_pdu+0x244>
    8ce2:	81 3b       	cpi	r24, 0xB1	; 177
    8ce4:	91 05       	cpc	r25, r1
    8ce6:	09 f4       	brne	.+2      	; 0x8cea <ld_make_slave_response_pdu+0xf6>
    8ce8:	96 c0       	rjmp	.+300    	; 0x8e16 <ld_make_slave_response_pdu+0x222>
            break;
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

        default:
            /* do nothing */
            break;
    8cea:	f2 c0       	rjmp	.+484    	; 0x8ed0 <ld_make_slave_response_pdu+0x2dc>
        lin_tl_pdu[4] = error_code;   /* D1 */
        lin_tl_pdu[5] = 0xFFU;        /* D2 */
        lin_tl_pdu[6] = 0xFFU;        /* D3 */
        lin_tl_pdu[7] = 0xFFU;        /* D4 */

        switch (sid)
    8cec:	86 3b       	cpi	r24, 0xB6	; 182
    8cee:	91 05       	cpc	r25, r1
    8cf0:	09 f4       	brne	.+2      	; 0x8cf4 <ld_make_slave_response_pdu+0x100>
    8cf2:	d4 c0       	rjmp	.+424    	; 0x8e9c <ld_make_slave_response_pdu+0x2a8>
    8cf4:	87 3b       	cpi	r24, 0xB7	; 183
    8cf6:	91 05       	cpc	r25, r1
    8cf8:	09 f4       	brne	.+2      	; 0x8cfc <ld_make_slave_response_pdu+0x108>
    8cfa:	da c0       	rjmp	.+436    	; 0x8eb0 <ld_make_slave_response_pdu+0x2bc>
    8cfc:	83 3b       	cpi	r24, 0xB3	; 179
    8cfe:	91 05       	cpc	r25, r1
    8d00:	09 f4       	brne	.+2      	; 0x8d04 <ld_make_slave_response_pdu+0x110>
    8d02:	c3 c0       	rjmp	.+390    	; 0x8e8a <ld_make_slave_response_pdu+0x296>
            break;
#endif /* (1U == SUPPORT_PROTOCOL_J2602) */

        default:
            /* do nothing */
            break;
    8d04:	e5 c0       	rjmp	.+458    	; 0x8ed0 <ld_make_slave_response_pdu+0x2dc>
        lin_tl_pdu[7] = 0xFFU;        /* D4 */

        switch (sid)
        {
        case SERVICE_READ_BY_IDENTIFY:
            if (POSITIVE == res_type)
    8d06:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8d08:	81 30       	cpi	r24, 0x01	; 1
    8d0a:	09 f0       	breq	.+2      	; 0x8d0e <ld_make_slave_response_pdu+0x11a>
    8d0c:	de c0       	rjmp	.+444    	; 0x8eca <ld_make_slave_response_pdu+0x2d6>
            {
                /* PCI type */
                lin_tl_pdu[1] = PCI_RES_READ_BY_IDENTIFY;
    8d0e:	86 e0       	ldi	r24, 0x06	; 6
    8d10:	88 8b       	std	Y+16, r24	; 0x10
                /* SID */
                lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
    8d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8d14:	80 5c       	subi	r24, 0xC0	; 192
    8d16:	89 8b       	std	Y+17, r24	; 0x11

                if (error_code == LIN_PRODUCT_ID)
    8d18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d1a:	88 23       	and	r24, r24
    8d1c:	39 f5       	brne	.+78     	; 0x8d6c <ld_make_slave_response_pdu+0x178>
                {
                    /* Get Identifier info */
                    ident = (const lin_product_id_t *)(&node_attr_ptr->product_id);
    8d1e:	8e 81       	ldd	r24, Y+6	; 0x06
    8d20:	9f 81       	ldd	r25, Y+7	; 0x07
    8d22:	03 96       	adiw	r24, 0x03	; 3
    8d24:	8b 87       	std	Y+11, r24	; 0x0b
    8d26:	9c 87       	std	Y+12, r25	; 0x0c
                    lin_tl_pdu[3] = (l_u8)(ident->supplier_id & 0xFFU);
    8d28:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d2c:	fc 01       	movw	r30, r24
    8d2e:	80 81       	ld	r24, Z
    8d30:	91 81       	ldd	r25, Z+1	; 0x01
    8d32:	8a 8b       	std	Y+18, r24	; 0x12
                    lin_tl_pdu[4] = (l_u8)(ident->supplier_id >> 8);
    8d34:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d36:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d38:	fc 01       	movw	r30, r24
    8d3a:	80 81       	ld	r24, Z
    8d3c:	91 81       	ldd	r25, Z+1	; 0x01
    8d3e:	89 2f       	mov	r24, r25
    8d40:	99 27       	eor	r25, r25
    8d42:	8b 8b       	std	Y+19, r24	; 0x13
                    lin_tl_pdu[5] = (l_u8)(ident->function_id & 0xFFU);
    8d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d46:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d48:	fc 01       	movw	r30, r24
    8d4a:	82 81       	ldd	r24, Z+2	; 0x02
    8d4c:	93 81       	ldd	r25, Z+3	; 0x03
    8d4e:	8c 8b       	std	Y+20, r24	; 0x14
                    lin_tl_pdu[6] = (l_u8)(ident->function_id >> 8);
    8d50:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d52:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d54:	fc 01       	movw	r30, r24
    8d56:	82 81       	ldd	r24, Z+2	; 0x02
    8d58:	93 81       	ldd	r25, Z+3	; 0x03
    8d5a:	89 2f       	mov	r24, r25
    8d5c:	99 27       	eor	r25, r25
    8d5e:	8d 8b       	std	Y+21, r24	; 0x15
                    lin_tl_pdu[7] = ident->variant;
    8d60:	8b 85       	ldd	r24, Y+11	; 0x0b
    8d62:	9c 85       	ldd	r25, Y+12	; 0x0c
    8d64:	fc 01       	movw	r30, r24
    8d66:	84 81       	ldd	r24, Z+4	; 0x04
    8d68:	8e 8b       	std	Y+22, r24	; 0x16
                            break;
                        }
                    }
                }
            }
            break;
    8d6a:	af c0       	rjmp	.+350    	; 0x8eca <ld_make_slave_response_pdu+0x2d6>
                    lin_tl_pdu[4] = (l_u8)(ident->supplier_id >> 8);
                    lin_tl_pdu[5] = (l_u8)(ident->function_id & 0xFFU);
                    lin_tl_pdu[6] = (l_u8)(ident->function_id >> 8);
                    lin_tl_pdu[7] = ident->variant;
                }
                else if (error_code == LIN_SERIAL_NUMBER)
    8d6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d6e:	81 30       	cpi	r24, 0x01	; 1
    8d70:	e1 f4       	brne	.+56     	; 0x8daa <ld_make_slave_response_pdu+0x1b6>
                {
                    serial_number = (const lin_serial_number_t *)(&node_attr_ptr->serial_number);
    8d72:	8e 81       	ldd	r24, Y+6	; 0x06
    8d74:	9f 81       	ldd	r25, Y+7	; 0x07
    8d76:	08 96       	adiw	r24, 0x08	; 8
    8d78:	8d 87       	std	Y+13, r24	; 0x0d
    8d7a:	9e 87       	std	Y+14, r25	; 0x0e
                    lin_tl_pdu[3] = serial_number->serial_0;
    8d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d80:	fc 01       	movw	r30, r24
    8d82:	80 81       	ld	r24, Z
    8d84:	8a 8b       	std	Y+18, r24	; 0x12
                    lin_tl_pdu[4] = serial_number->serial_1;
    8d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d8a:	fc 01       	movw	r30, r24
    8d8c:	81 81       	ldd	r24, Z+1	; 0x01
    8d8e:	8b 8b       	std	Y+19, r24	; 0x13
                    lin_tl_pdu[5] = serial_number->serial_2;
    8d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d94:	fc 01       	movw	r30, r24
    8d96:	82 81       	ldd	r24, Z+2	; 0x02
    8d98:	8c 8b       	std	Y+20, r24	; 0x14
                    lin_tl_pdu[6] = serial_number->serial_3;
    8d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    8d9e:	fc 01       	movw	r30, r24
    8da0:	83 81       	ldd	r24, Z+3	; 0x03
    8da2:	8d 8b       	std	Y+21, r24	; 0x15
                    /* PCI for Serial Number is 0x05 */
                    lin_tl_pdu[1] = 0x05U;
    8da4:	85 e0       	ldi	r24, 0x05	; 5
    8da6:	88 8b       	std	Y+16, r24	; 0x10
                            break;
                        }
                    }
                }
            }
            break;
    8da8:	90 c0       	rjmp	.+288    	; 0x8eca <ld_make_slave_response_pdu+0x2d6>
                    /* PCI for Serial Number is 0x05 */
                    lin_tl_pdu[1] = 0x05U;
                }
                else
                {
                    l_u8 data_callout[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    8daa:	85 e0       	ldi	r24, 0x05	; 5
    8dac:	e1 ef       	ldi	r30, 0xF1	; 241
    8dae:	f1 e4       	ldi	r31, 0x41	; 65
    8db0:	de 01       	movw	r26, r28
    8db2:	57 96       	adiw	r26, 0x17	; 23
    8db4:	01 90       	ld	r0, Z+
    8db6:	0d 92       	st	X+, r0
    8db8:	8a 95       	dec	r24
    8dba:	e1 f7       	brne	.-8      	; 0x8db4 <ld_make_slave_response_pdu+0x1c0>
                    (void)ld_read_by_id_callout(iii, error_code, data_callout);
    8dbc:	ce 01       	movw	r24, r28
    8dbe:	47 96       	adiw	r24, 0x17	; 23
    8dc0:	ac 01       	movw	r20, r24
    8dc2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    8dc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8dc6:	0e 94 50 58 	call	0xb0a0	; 0xb0a0 <ld_read_by_id_callout>
                    /* packing user defined pdu */
                    lin_tl_pdu[3] = data_callout[0];
    8dca:	8f 89       	ldd	r24, Y+23	; 0x17
    8dcc:	8a 8b       	std	Y+18, r24	; 0x12
                    lin_tl_pdu[4] = data_callout[1];
    8dce:	88 8d       	ldd	r24, Y+24	; 0x18
    8dd0:	8b 8b       	std	Y+19, r24	; 0x13
                    lin_tl_pdu[5] = data_callout[2];
    8dd2:	89 8d       	ldd	r24, Y+25	; 0x19
    8dd4:	8c 8b       	std	Y+20, r24	; 0x14
                    lin_tl_pdu[6] = data_callout[3];
    8dd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    8dd8:	8d 8b       	std	Y+21, r24	; 0x15
                    lin_tl_pdu[7] = data_callout[4];
    8dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8ddc:	8e 8b       	std	Y+22, r24	; 0x16
                    /* Check for data values*/
                    for (i = 5U; i > 0U; i--)
    8dde:	85 e0       	ldi	r24, 0x05	; 5
    8de0:	89 83       	std	Y+1, r24	; 0x01
    8de2:	15 c0       	rjmp	.+42     	; 0x8e0e <ld_make_slave_response_pdu+0x21a>
                    {
                        if (data_callout[i - 1U] != 0xFFU)
    8de4:	89 81       	ldd	r24, Y+1	; 0x01
    8de6:	88 2f       	mov	r24, r24
    8de8:	90 e0       	ldi	r25, 0x00	; 0
    8dea:	01 97       	sbiw	r24, 0x01	; 1
    8dec:	9e 01       	movw	r18, r28
    8dee:	29 5e       	subi	r18, 0xE9	; 233
    8df0:	3f 4f       	sbci	r19, 0xFF	; 255
    8df2:	82 0f       	add	r24, r18
    8df4:	93 1f       	adc	r25, r19
    8df6:	fc 01       	movw	r30, r24
    8df8:	80 81       	ld	r24, Z
    8dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    8dfc:	29 f0       	breq	.+10     	; 0x8e08 <ld_make_slave_response_pdu+0x214>
                        {
                            /* PCI: Data length is 1 (RSID) + all data exclude 0xFF */
                            lin_tl_pdu[1] = (l_u8)(i + 1U);
    8dfe:	89 81       	ldd	r24, Y+1	; 0x01
    8e00:	8f 5f       	subi	r24, 0xFF	; 255
    8e02:	88 8b       	std	Y+16, r24	; 0x10
                            break;
    8e04:	00 00       	nop
                        }
                    }
                }
            }
            break;
    8e06:	61 c0       	rjmp	.+194    	; 0x8eca <ld_make_slave_response_pdu+0x2d6>
                    lin_tl_pdu[4] = data_callout[1];
                    lin_tl_pdu[5] = data_callout[2];
                    lin_tl_pdu[6] = data_callout[3];
                    lin_tl_pdu[7] = data_callout[4];
                    /* Check for data values*/
                    for (i = 5U; i > 0U; i--)
    8e08:	89 81       	ldd	r24, Y+1	; 0x01
    8e0a:	81 50       	subi	r24, 0x01	; 1
    8e0c:	89 83       	std	Y+1, r24	; 0x01
    8e0e:	89 81       	ldd	r24, Y+1	; 0x01
    8e10:	88 23       	and	r24, r24
    8e12:	41 f7       	brne	.-48     	; 0x8de4 <ld_make_slave_response_pdu+0x1f0>
                            break;
                        }
                    }
                }
            }
            break;
    8e14:	5a c0       	rjmp	.+180    	; 0x8eca <ld_make_slave_response_pdu+0x2d6>
        case SERVICE_ASSIGN_FRAME_ID:
            lin_tl_pdu[0] = *node_attr_ptr->configured_NAD_ptr;
    8e16:	8e 81       	ldd	r24, Y+6	; 0x06
    8e18:	9f 81       	ldd	r25, Y+7	; 0x07
    8e1a:	fc 01       	movw	r30, r24
    8e1c:	80 81       	ld	r24, Z
    8e1e:	91 81       	ldd	r25, Z+1	; 0x01
    8e20:	fc 01       	movw	r30, r24
    8e22:	80 81       	ld	r24, Z
    8e24:	8f 87       	std	Y+15, r24	; 0x0f
            lin_tl_pdu[1] = 0x01U; /* PCI */
    8e26:	81 e0       	ldi	r24, 0x01	; 1
    8e28:	88 8b       	std	Y+16, r24	; 0x10
            lin_tl_pdu[2] = 0xF1U; /* SID */
    8e2a:	81 ef       	ldi	r24, 0xF1	; 241
    8e2c:	89 8b       	std	Y+17, r24	; 0x11
            lin_tl_pdu[3] = 0xFFU; /* D0 */
    8e2e:	8f ef       	ldi	r24, 0xFF	; 255
    8e30:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU; /* D1 */
    8e32:	8f ef       	ldi	r24, 0xFF	; 255
    8e34:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    8e36:	4c c0       	rjmp	.+152    	; 0x8ed0 <ld_make_slave_response_pdu+0x2dc>
        case SERVICE_ASSIGN_NAD:
            lin_tl_pdu[0] = node_attr_ptr->initial_NAD;
    8e38:	8e 81       	ldd	r24, Y+6	; 0x06
    8e3a:	9f 81       	ldd	r25, Y+7	; 0x07
    8e3c:	fc 01       	movw	r30, r24
    8e3e:	82 81       	ldd	r24, Z+2	; 0x02
    8e40:	8f 87       	std	Y+15, r24	; 0x0f
            *node_attr_ptr->configured_NAD_ptr = rx_queue->tl_pdu_ptr[rx_queue->queue_header][7];
    8e42:	8e 81       	ldd	r24, Y+6	; 0x06
    8e44:	9f 81       	ldd	r25, Y+7	; 0x07
    8e46:	fc 01       	movw	r30, r24
    8e48:	80 81       	ld	r24, Z
    8e4a:	91 81       	ldd	r25, Z+1	; 0x01
    8e4c:	28 85       	ldd	r18, Y+8	; 0x08
    8e4e:	39 85       	ldd	r19, Y+9	; 0x09
    8e50:	f9 01       	movw	r30, r18
    8e52:	41 85       	ldd	r20, Z+9	; 0x09
    8e54:	52 85       	ldd	r21, Z+10	; 0x0a
    8e56:	28 85       	ldd	r18, Y+8	; 0x08
    8e58:	39 85       	ldd	r19, Y+9	; 0x09
    8e5a:	f9 01       	movw	r30, r18
    8e5c:	20 81       	ld	r18, Z
    8e5e:	31 81       	ldd	r19, Z+1	; 0x01
    8e60:	22 0f       	add	r18, r18
    8e62:	33 1f       	adc	r19, r19
    8e64:	22 0f       	add	r18, r18
    8e66:	33 1f       	adc	r19, r19
    8e68:	22 0f       	add	r18, r18
    8e6a:	33 1f       	adc	r19, r19
    8e6c:	24 0f       	add	r18, r20
    8e6e:	35 1f       	adc	r19, r21
    8e70:	f9 01       	movw	r30, r18
    8e72:	27 81       	ldd	r18, Z+7	; 0x07
    8e74:	fc 01       	movw	r30, r24
    8e76:	20 83       	st	Z, r18
            /* PCI */
            lin_tl_pdu[1] = 0x01U;
    8e78:	81 e0       	ldi	r24, 0x01	; 1
    8e7a:	88 8b       	std	Y+16, r24	; 0x10
            /* RSID */
            lin_tl_pdu[2] = 0xF0U;
    8e7c:	80 ef       	ldi	r24, 0xF0	; 240
    8e7e:	89 8b       	std	Y+17, r24	; 0x11
            lin_tl_pdu[3] = 0xFFU;
    8e80:	8f ef       	ldi	r24, 0xFF	; 255
    8e82:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU;
    8e84:	8f ef       	ldi	r24, 0xFF	; 255
    8e86:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    8e88:	23 c0       	rjmp	.+70     	; 0x8ed0 <ld_make_slave_response_pdu+0x2dc>
        case SERVICE_CONDITIONAL_CHANGE_NAD:
            /* PCI */
            lin_tl_pdu[1] = 0x01U;
    8e8a:	81 e0       	ldi	r24, 0x01	; 1
    8e8c:	88 8b       	std	Y+16, r24	; 0x10
            /* RSID */
            lin_tl_pdu[2] = 0xF3U;
    8e8e:	83 ef       	ldi	r24, 0xF3	; 243
    8e90:	89 8b       	std	Y+17, r24	; 0x11
            lin_tl_pdu[3] = 0xFFU;
    8e92:	8f ef       	ldi	r24, 0xFF	; 255
    8e94:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU;
    8e96:	8f ef       	ldi	r24, 0xFF	; 255
    8e98:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    8e9a:	1a c0       	rjmp	.+52     	; 0x8ed0 <ld_make_slave_response_pdu+0x2dc>

#if (1U == SUPPORT_PROTOCOL_21)
        case SERVICE_SAVE_CONFIGURATION:
            /* PCI type */
            lin_tl_pdu[1] = PCI_RES_SAVE_CONFIGURATION;
    8e9c:	81 e0       	ldi	r24, 0x01	; 1
    8e9e:	88 8b       	std	Y+16, r24	; 0x10
            /* SID */
            lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
    8ea0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8ea2:	80 5c       	subi	r24, 0xC0	; 192
    8ea4:	89 8b       	std	Y+17, r24	; 0x11
            /* Data unused */
            lin_tl_pdu[3] = 0xFFU;
    8ea6:	8f ef       	ldi	r24, 0xFF	; 255
    8ea8:	8a 8b       	std	Y+18, r24	; 0x12
            lin_tl_pdu[4] = 0xFFU;
    8eaa:	8f ef       	ldi	r24, 0xFF	; 255
    8eac:	8b 8b       	std	Y+19, r24	; 0x13
            break;
    8eae:	10 c0       	rjmp	.+32     	; 0x8ed0 <ld_make_slave_response_pdu+0x2dc>
        case SERVICE_ASSIGN_FRAME_ID_RANGE: /* Mandatory for TL LIN 2.1 */
            if (POSITIVE == res_type)
    8eb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8eb2:	81 30       	cpi	r24, 0x01	; 1
    8eb4:	61 f4       	brne	.+24     	; 0x8ece <ld_make_slave_response_pdu+0x2da>
            {
                lin_tl_pdu[1] = PCI_RES_ASSIGN_FRAME_ID_RANGE;
    8eb6:	81 e0       	ldi	r24, 0x01	; 1
    8eb8:	88 8b       	std	Y+16, r24	; 0x10
                lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
    8eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8ebc:	80 5c       	subi	r24, 0xC0	; 192
    8ebe:	89 8b       	std	Y+17, r24	; 0x11
                lin_tl_pdu[3] = 0xFFU;
    8ec0:	8f ef       	ldi	r24, 0xFF	; 255
    8ec2:	8a 8b       	std	Y+18, r24	; 0x12
                lin_tl_pdu[4] = 0xFFU;
    8ec4:	8f ef       	ldi	r24, 0xFF	; 255
    8ec6:	8b 8b       	std	Y+19, r24	; 0x13
            }
            break;
    8ec8:	02 c0       	rjmp	.+4      	; 0x8ece <ld_make_slave_response_pdu+0x2da>
                            break;
                        }
                    }
                }
            }
            break;
    8eca:	00 00       	nop
    8ecc:	01 c0       	rjmp	.+2      	; 0x8ed0 <ld_make_slave_response_pdu+0x2dc>
                lin_tl_pdu[1] = PCI_RES_ASSIGN_FRAME_ID_RANGE;
                lin_tl_pdu[2] = (l_u8)(RES_POSITIVE + sid);
                lin_tl_pdu[3] = 0xFFU;
                lin_tl_pdu[4] = 0xFFU;
            }
            break;
    8ece:	00 00       	nop
            /* do nothing */
            break;
        } /* end of switch statement */

        /* Put lin_tl_pdu data into transmit queue*/
        ld_put_raw(iii, lin_tl_pdu);
    8ed0:	ce 01       	movw	r24, r28
    8ed2:	0f 96       	adiw	r24, 0x0f	; 15
    8ed4:	bc 01       	movw	r22, r24
    8ed6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8ed8:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <ld_put_raw>
        tl_desc_ptr->diag_state = LD_DIAG_TX_PHY;
    8edc:	8a 81       	ldd	r24, Y+2	; 0x02
    8ede:	9b 81       	ldd	r25, Y+3	; 0x03
    8ee0:	22 e0       	ldi	r18, 0x02	; 2
    8ee2:	fc 01       	movw	r30, r24
    8ee4:	26 a3       	std	Z+38, r18	; 0x26
    }
    else
    {
        tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    }
}
    8ee6:	05 c0       	rjmp	.+10     	; 0x8ef2 <ld_make_slave_response_pdu+0x2fe>
        ld_put_raw(iii, lin_tl_pdu);
        tl_desc_ptr->diag_state = LD_DIAG_TX_PHY;
    }
    else
    {
        tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    8ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    8eea:	9b 81       	ldd	r25, Y+3	; 0x03
    8eec:	21 e0       	ldi	r18, 0x01	; 1
    8eee:	fc 01       	movw	r30, r24
    8ef0:	26 a3       	std	Z+38, r18	; 0x26
    }
}
    8ef2:	00 00       	nop
    8ef4:	6f 96       	adiw	r28, 0x1f	; 31
    8ef6:	cd bf       	out	0x3d, r28	; 61
    8ef8:	de bf       	out	0x3e, r29	; 62
    8efa:	df 91       	pop	r29
    8efc:	cf 91       	pop	r28
    8efe:	08 95       	ret

00008f00 <lin_calc_max_header_timeout_cnt>:

    /* Call function LIN_DRV_DisableIRQ to disable interrupts */
    retVal = LIN_DRV_DisableIRQ(lin_hardware_instance);

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
}
    8f00:	cf 93       	push	r28
    8f02:	df 93       	push	r29
    8f04:	00 d0       	rcall	.+0      	; 0x8f06 <lin_calc_max_header_timeout_cnt+0x6>
    8f06:	00 d0       	rcall	.+0      	; 0x8f08 <lin_calc_max_header_timeout_cnt+0x8>
    8f08:	cd b7       	in	r28, 0x3d	; 61
    8f0a:	de b7       	in	r29, 0x3e	; 62
    8f0c:	69 83       	std	Y+1, r22	; 0x01
    8f0e:	7a 83       	std	Y+2, r23	; 0x02
    8f10:	8b 83       	std	Y+3, r24	; 0x03
    8f12:	9c 83       	std	Y+4, r25	; 0x04
    8f14:	29 81       	ldd	r18, Y+1	; 0x01
    8f16:	3a 81       	ldd	r19, Y+2	; 0x02
    8f18:	4b 81       	ldd	r20, Y+3	; 0x03
    8f1a:	5c 81       	ldd	r21, Y+4	; 0x04
    8f1c:	88 ee       	ldi	r24, 0xE8	; 232
    8f1e:	93 e0       	ldi	r25, 0x03	; 3
    8f20:	dc 01       	movw	r26, r24
    8f22:	0e 94 ec 78 	call	0xf1d8	; 0xf1d8 <__muluhisi3>
    8f26:	9b 01       	movw	r18, r22
    8f28:	ac 01       	movw	r20, r24
    8f2a:	80 e8       	ldi	r24, 0x80	; 128
    8f2c:	91 e5       	ldi	r25, 0x51	; 81
    8f2e:	a6 ed       	ldi	r26, 0xD6	; 214
    8f30:	b2 e0       	ldi	r27, 0x02	; 2
    8f32:	bc 01       	movw	r22, r24
    8f34:	cd 01       	movw	r24, r26
    8f36:	0e 94 b2 78 	call	0xf164	; 0xf164 <__udivmodsi4>
    8f3a:	da 01       	movw	r26, r20
    8f3c:	c9 01       	movw	r24, r18
    8f3e:	01 96       	adiw	r24, 0x01	; 1
    8f40:	24 96       	adiw	r28, 0x04	; 4
    8f42:	cd bf       	out	0x3d, r28	; 61
    8f44:	de bf       	out	0x3e, r29	; 62
    8f46:	df 91       	pop	r29
    8f48:	cf 91       	pop	r28
    8f4a:	08 95       	ret

00008f4c <lin_calc_max_res_timeout_cnt>:
    8f4c:	ef 92       	push	r14
    8f4e:	ff 92       	push	r15
    8f50:	0f 93       	push	r16
    8f52:	1f 93       	push	r17
    8f54:	cf 93       	push	r28
    8f56:	df 93       	push	r29
    8f58:	cd b7       	in	r28, 0x3d	; 61
    8f5a:	de b7       	in	r29, 0x3e	; 62
    8f5c:	27 97       	sbiw	r28, 0x07	; 7
    8f5e:	cd bf       	out	0x3d, r28	; 61
    8f60:	de bf       	out	0x3e, r29	; 62
    8f62:	6b 83       	std	Y+3, r22	; 0x03
    8f64:	7c 83       	std	Y+4, r23	; 0x04
    8f66:	8d 83       	std	Y+5, r24	; 0x05
    8f68:	9e 83       	std	Y+6, r25	; 0x06
    8f6a:	4f 83       	std	Y+7, r20	; 0x07
    8f6c:	8f 81       	ldd	r24, Y+7	; 0x07
    8f6e:	88 2f       	mov	r24, r24
    8f70:	90 e0       	ldi	r25, 0x00	; 0
    8f72:	01 96       	adiw	r24, 0x01	; 1
    8f74:	88 0f       	add	r24, r24
    8f76:	99 1f       	adc	r25, r25
    8f78:	9c 01       	movw	r18, r24
    8f7a:	22 0f       	add	r18, r18
    8f7c:	33 1f       	adc	r19, r19
    8f7e:	22 0f       	add	r18, r18
    8f80:	33 1f       	adc	r19, r19
    8f82:	22 0f       	add	r18, r18
    8f84:	33 1f       	adc	r19, r19
    8f86:	a9 01       	movw	r20, r18
    8f88:	48 1b       	sub	r20, r24
    8f8a:	59 0b       	sbc	r21, r25
    8f8c:	ca 01       	movw	r24, r20
    8f8e:	89 83       	std	Y+1, r24	; 0x01
    8f90:	9a 83       	std	Y+2, r25	; 0x02
    8f92:	89 81       	ldd	r24, Y+1	; 0x01
    8f94:	9a 81       	ldd	r25, Y+2	; 0x02
    8f96:	cc 01       	movw	r24, r24
    8f98:	a0 e0       	ldi	r26, 0x00	; 0
    8f9a:	b0 e0       	ldi	r27, 0x00	; 0
    8f9c:	9c 01       	movw	r18, r24
    8f9e:	ad 01       	movw	r20, r26
    8fa0:	60 e4       	ldi	r22, 0x40	; 64
    8fa2:	72 e4       	ldi	r23, 0x42	; 66
    8fa4:	8f e0       	ldi	r24, 0x0F	; 15
    8fa6:	90 e0       	ldi	r25, 0x00	; 0
    8fa8:	0e 94 a2 78 	call	0xf144	; 0xf144 <__mulsi3>
    8fac:	7b 01       	movw	r14, r22
    8fae:	8c 01       	movw	r16, r24
    8fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    8fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    8fb4:	4d 81       	ldd	r20, Y+5	; 0x05
    8fb6:	5e 81       	ldd	r21, Y+6	; 0x06
    8fb8:	88 ee       	ldi	r24, 0xE8	; 232
    8fba:	93 e0       	ldi	r25, 0x03	; 3
    8fbc:	dc 01       	movw	r26, r24
    8fbe:	0e 94 ec 78 	call	0xf1d8	; 0xf1d8 <__muluhisi3>
    8fc2:	9b 01       	movw	r18, r22
    8fc4:	ac 01       	movw	r20, r24
    8fc6:	c8 01       	movw	r24, r16
    8fc8:	b7 01       	movw	r22, r14
    8fca:	0e 94 b2 78 	call	0xf164	; 0xf164 <__udivmodsi4>
    8fce:	da 01       	movw	r26, r20
    8fd0:	c9 01       	movw	r24, r18
    8fd2:	01 96       	adiw	r24, 0x01	; 1
    8fd4:	27 96       	adiw	r28, 0x07	; 7
    8fd6:	cd bf       	out	0x3d, r28	; 61
    8fd8:	de bf       	out	0x3e, r29	; 62
    8fda:	df 91       	pop	r29
    8fdc:	cf 91       	pop	r28
    8fde:	1f 91       	pop	r17
    8fe0:	0f 91       	pop	r16
    8fe2:	ff 90       	pop	r15
    8fe4:	ef 90       	pop	r14
    8fe6:	08 95       	ret

00008fe8 <lin_process_parity>:
    8fe8:	cf 93       	push	r28
    8fea:	df 93       	push	r29
    8fec:	00 d0       	rcall	.+0      	; 0x8fee <lin_process_parity+0x6>
    8fee:	cd b7       	in	r28, 0x3d	; 61
    8ff0:	de b7       	in	r29, 0x3e	; 62
    8ff2:	89 83       	std	Y+1, r24	; 0x01
    8ff4:	6a 83       	std	Y+2, r22	; 0x02
    8ff6:	6a 81       	ldd	r22, Y+2	; 0x02
    8ff8:	89 81       	ldd	r24, Y+1	; 0x01
    8ffa:	0e 94 b9 58 	call	0xb172	; 0xb172 <LIN_DRV_ProcessParity>
    8ffe:	0f 90       	pop	r0
    9000:	0f 90       	pop	r0
    9002:	df 91       	pop	r29
    9004:	cf 91       	pop	r28
    9006:	08 95       	ret

00009008 <lin_lld_init>:
    9008:	ef 92       	push	r14
    900a:	ff 92       	push	r15
    900c:	0f 93       	push	r16
    900e:	1f 93       	push	r17
    9010:	cf 93       	push	r28
    9012:	df 93       	push	r29
    9014:	cd b7       	in	r28, 0x3d	; 61
    9016:	de b7       	in	r29, 0x3e	; 62
    9018:	2c 97       	sbiw	r28, 0x0c	; 12
    901a:	cd bf       	out	0x3d, r28	; 61
    901c:	de bf       	out	0x3e, r29	; 62
    901e:	8c 87       	std	Y+12, r24	; 0x0c
    9020:	81 e0       	ldi	r24, 0x01	; 1
    9022:	90 e0       	ldi	r25, 0x00	; 0
    9024:	8a 83       	std	Y+2, r24	; 0x02
    9026:	9b 83       	std	Y+3, r25	; 0x03
    9028:	8c 85       	ldd	r24, Y+12	; 0x0c
    902a:	28 2f       	mov	r18, r24
    902c:	30 e0       	ldi	r19, 0x00	; 0
    902e:	4c e1       	ldi	r20, 0x1C	; 28
    9030:	42 9f       	mul	r20, r18
    9032:	c0 01       	movw	r24, r0
    9034:	43 9f       	mul	r20, r19
    9036:	90 0d       	add	r25, r0
    9038:	11 24       	eor	r1, r1
    903a:	86 56       	subi	r24, 0x66	; 102
    903c:	9d 4b       	sbci	r25, 0xBD	; 189
    903e:	8c 83       	std	Y+4, r24	; 0x04
    9040:	9d 83       	std	Y+5, r25	; 0x05
    9042:	8c 85       	ldd	r24, Y+12	; 0x0c
    9044:	28 2f       	mov	r18, r24
    9046:	30 e0       	ldi	r19, 0x00	; 0
    9048:	46 e1       	ldi	r20, 0x16	; 22
    904a:	42 9f       	mul	r20, r18
    904c:	c0 01       	movw	r24, r0
    904e:	43 9f       	mul	r20, r19
    9050:	90 0d       	add	r25, r0
    9052:	11 24       	eor	r1, r1
    9054:	80 56       	subi	r24, 0x60	; 96
    9056:	99 4b       	sbci	r25, 0xB9	; 185
    9058:	8e 83       	std	Y+6, r24	; 0x06
    905a:	9f 83       	std	Y+7, r25	; 0x07
    905c:	8c 85       	ldd	r24, Y+12	; 0x0c
    905e:	88 2f       	mov	r24, r24
    9060:	90 e0       	ldi	r25, 0x00	; 0
    9062:	88 0f       	add	r24, r24
    9064:	99 1f       	adc	r25, r25
    9066:	9c 01       	movw	r18, r24
    9068:	22 0f       	add	r18, r18
    906a:	33 1f       	adc	r19, r19
    906c:	22 0f       	add	r18, r18
    906e:	33 1f       	adc	r19, r19
    9070:	82 0f       	add	r24, r18
    9072:	93 1f       	adc	r25, r19
    9074:	9c 01       	movw	r18, r24
    9076:	2d 5b       	subi	r18, 0xBD	; 189
    9078:	3a 4b       	sbci	r19, 0xBA	; 186
    907a:	8e 81       	ldd	r24, Y+6	; 0x06
    907c:	9f 81       	ldd	r25, Y+7	; 0x07
    907e:	fc 01       	movw	r30, r24
    9080:	22 83       	std	Z+2, r18	; 0x02
    9082:	33 83       	std	Z+3, r19	; 0x03
    9084:	8c 85       	ldd	r24, Y+12	; 0x0c
    9086:	88 2f       	mov	r24, r24
    9088:	90 e0       	ldi	r25, 0x00	; 0
    908a:	88 0f       	add	r24, r24
    908c:	99 1f       	adc	r25, r25
    908e:	88 0f       	add	r24, r24
    9090:	99 1f       	adc	r25, r25
    9092:	86 5c       	subi	r24, 0xC6	; 198
    9094:	9d 4b       	sbci	r25, 0xBD	; 189
    9096:	fc 01       	movw	r30, r24
    9098:	80 81       	ld	r24, Z
    909a:	91 81       	ldd	r25, Z+1	; 0x01
    909c:	a2 81       	ldd	r26, Z+2	; 0x02
    909e:	b3 81       	ldd	r27, Z+3	; 0x03
    90a0:	88 87       	std	Y+8, r24	; 0x08
    90a2:	99 87       	std	Y+9, r25	; 0x09
    90a4:	aa 87       	std	Y+10, r26	; 0x0a
    90a6:	bb 87       	std	Y+11, r27	; 0x0b
    90a8:	8c 81       	ldd	r24, Y+4	; 0x04
    90aa:	9d 81       	ldd	r25, Y+5	; 0x05
    90ac:	fc 01       	movw	r30, r24
    90ae:	84 89       	ldd	r24, Z+20	; 0x14
    90b0:	95 89       	ldd	r25, Z+21	; 0x15
    90b2:	fc 01       	movw	r30, r24
    90b4:	85 81       	ldd	r24, Z+5	; 0x05
    90b6:	88 23       	and	r24, r24
    90b8:	e9 f1       	breq	.+122    	; 0x9134 <lin_lld_init+0x12c>
    90ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    90bc:	08 2f       	mov	r16, r24
    90be:	10 e0       	ldi	r17, 0x00	; 0
    90c0:	60 e6       	ldi	r22, 0x60	; 96
    90c2:	79 e0       	ldi	r23, 0x09	; 9
    90c4:	80 e0       	ldi	r24, 0x00	; 0
    90c6:	90 e0       	ldi	r25, 0x00	; 0
    90c8:	0e 94 80 47 	call	0x8f00	; 0x8f00 <lin_calc_max_header_timeout_cnt>
    90cc:	9c 01       	movw	r18, r24
    90ce:	c8 01       	movw	r24, r16
    90d0:	88 0f       	add	r24, r24
    90d2:	99 1f       	adc	r25, r25
    90d4:	80 5d       	subi	r24, 0xD0	; 208
    90d6:	9a 4b       	sbci	r25, 0xBA	; 186
    90d8:	fc 01       	movw	r30, r24
    90da:	20 83       	st	Z, r18
    90dc:	31 83       	std	Z+1, r19	; 0x01
    90de:	81 e0       	ldi	r24, 0x01	; 1
    90e0:	89 83       	std	Y+1, r24	; 0x01
    90e2:	24 c0       	rjmp	.+72     	; 0x912c <lin_lld_init+0x124>
    90e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    90e6:	e8 2e       	mov	r14, r24
    90e8:	f1 2c       	mov	r15, r1
    90ea:	89 81       	ldd	r24, Y+1	; 0x01
    90ec:	88 2f       	mov	r24, r24
    90ee:	90 e0       	ldi	r25, 0x00	; 0
    90f0:	8c 01       	movw	r16, r24
    90f2:	01 50       	subi	r16, 0x01	; 1
    90f4:	11 09       	sbc	r17, r1
    90f6:	49 81       	ldd	r20, Y+1	; 0x01
    90f8:	60 e6       	ldi	r22, 0x60	; 96
    90fa:	79 e0       	ldi	r23, 0x09	; 9
    90fc:	80 e0       	ldi	r24, 0x00	; 0
    90fe:	90 e0       	ldi	r25, 0x00	; 0
    9100:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <lin_calc_max_res_timeout_cnt>
    9104:	9c 01       	movw	r18, r24
    9106:	c7 01       	movw	r24, r14
    9108:	88 0f       	add	r24, r24
    910a:	99 1f       	adc	r25, r25
    910c:	88 0f       	add	r24, r24
    910e:	99 1f       	adc	r25, r25
    9110:	88 0f       	add	r24, r24
    9112:	99 1f       	adc	r25, r25
    9114:	80 0f       	add	r24, r16
    9116:	91 1f       	adc	r25, r17
    9118:	88 0f       	add	r24, r24
    911a:	99 1f       	adc	r25, r25
    911c:	8e 5c       	subi	r24, 0xCE	; 206
    911e:	9a 4b       	sbci	r25, 0xBA	; 186
    9120:	fc 01       	movw	r30, r24
    9122:	20 83       	st	Z, r18
    9124:	31 83       	std	Z+1, r19	; 0x01
    9126:	89 81       	ldd	r24, Y+1	; 0x01
    9128:	8f 5f       	subi	r24, 0xFF	; 255
    912a:	89 83       	std	Y+1, r24	; 0x01
    912c:	89 81       	ldd	r24, Y+1	; 0x01
    912e:	89 30       	cpi	r24, 0x09	; 9
    9130:	c8 f2       	brcs	.-78     	; 0x90e4 <lin_lld_init+0xdc>
    9132:	4c c0       	rjmp	.+152    	; 0x91cc <lin_lld_init+0x1c4>
    9134:	8c 85       	ldd	r24, Y+12	; 0x0c
    9136:	08 2f       	mov	r16, r24
    9138:	10 e0       	ldi	r17, 0x00	; 0
    913a:	8c 81       	ldd	r24, Y+4	; 0x04
    913c:	9d 81       	ldd	r25, Y+5	; 0x05
    913e:	fc 01       	movw	r30, r24
    9140:	84 89       	ldd	r24, Z+20	; 0x14
    9142:	95 89       	ldd	r25, Z+21	; 0x15
    9144:	fc 01       	movw	r30, r24
    9146:	80 81       	ld	r24, Z
    9148:	91 81       	ldd	r25, Z+1	; 0x01
    914a:	a2 81       	ldd	r26, Z+2	; 0x02
    914c:	b3 81       	ldd	r27, Z+3	; 0x03
    914e:	bc 01       	movw	r22, r24
    9150:	cd 01       	movw	r24, r26
    9152:	0e 94 80 47 	call	0x8f00	; 0x8f00 <lin_calc_max_header_timeout_cnt>
    9156:	9c 01       	movw	r18, r24
    9158:	c8 01       	movw	r24, r16
    915a:	88 0f       	add	r24, r24
    915c:	99 1f       	adc	r25, r25
    915e:	80 5d       	subi	r24, 0xD0	; 208
    9160:	9a 4b       	sbci	r25, 0xBA	; 186
    9162:	fc 01       	movw	r30, r24
    9164:	20 83       	st	Z, r18
    9166:	31 83       	std	Z+1, r19	; 0x01
    9168:	81 e0       	ldi	r24, 0x01	; 1
    916a:	89 83       	std	Y+1, r24	; 0x01
    916c:	2c c0       	rjmp	.+88     	; 0x91c6 <lin_lld_init+0x1be>
    916e:	8c 85       	ldd	r24, Y+12	; 0x0c
    9170:	e8 2e       	mov	r14, r24
    9172:	f1 2c       	mov	r15, r1
    9174:	89 81       	ldd	r24, Y+1	; 0x01
    9176:	88 2f       	mov	r24, r24
    9178:	90 e0       	ldi	r25, 0x00	; 0
    917a:	8c 01       	movw	r16, r24
    917c:	01 50       	subi	r16, 0x01	; 1
    917e:	11 09       	sbc	r17, r1
    9180:	8c 81       	ldd	r24, Y+4	; 0x04
    9182:	9d 81       	ldd	r25, Y+5	; 0x05
    9184:	fc 01       	movw	r30, r24
    9186:	84 89       	ldd	r24, Z+20	; 0x14
    9188:	95 89       	ldd	r25, Z+21	; 0x15
    918a:	fc 01       	movw	r30, r24
    918c:	80 81       	ld	r24, Z
    918e:	91 81       	ldd	r25, Z+1	; 0x01
    9190:	a2 81       	ldd	r26, Z+2	; 0x02
    9192:	b3 81       	ldd	r27, Z+3	; 0x03
    9194:	49 81       	ldd	r20, Y+1	; 0x01
    9196:	bc 01       	movw	r22, r24
    9198:	cd 01       	movw	r24, r26
    919a:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <lin_calc_max_res_timeout_cnt>
    919e:	9c 01       	movw	r18, r24
    91a0:	c7 01       	movw	r24, r14
    91a2:	88 0f       	add	r24, r24
    91a4:	99 1f       	adc	r25, r25
    91a6:	88 0f       	add	r24, r24
    91a8:	99 1f       	adc	r25, r25
    91aa:	88 0f       	add	r24, r24
    91ac:	99 1f       	adc	r25, r25
    91ae:	80 0f       	add	r24, r16
    91b0:	91 1f       	adc	r25, r17
    91b2:	88 0f       	add	r24, r24
    91b4:	99 1f       	adc	r25, r25
    91b6:	8e 5c       	subi	r24, 0xCE	; 206
    91b8:	9a 4b       	sbci	r25, 0xBA	; 186
    91ba:	fc 01       	movw	r30, r24
    91bc:	20 83       	st	Z, r18
    91be:	31 83       	std	Z+1, r19	; 0x01
    91c0:	89 81       	ldd	r24, Y+1	; 0x01
    91c2:	8f 5f       	subi	r24, 0xFF	; 255
    91c4:	89 83       	std	Y+1, r24	; 0x01
    91c6:	89 81       	ldd	r24, Y+1	; 0x01
    91c8:	89 30       	cpi	r24, 0x09	; 9
    91ca:	88 f2       	brcs	.-94     	; 0x916e <lin_lld_init+0x166>
    91cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    91ce:	88 2f       	mov	r24, r24
    91d0:	90 e0       	ldi	r25, 0x00	; 0
    91d2:	82 95       	swap	r24
    91d4:	92 95       	swap	r25
    91d6:	90 7f       	andi	r25, 0xF0	; 240
    91d8:	98 27       	eor	r25, r24
    91da:	80 7f       	andi	r24, 0xF0	; 240
    91dc:	98 27       	eor	r25, r24
    91de:	80 5c       	subi	r24, 0xC0	; 192
    91e0:	9a 4b       	sbci	r25, 0xBA	; 186
    91e2:	fc 01       	movw	r30, r24
    91e4:	20 81       	ld	r18, Z
    91e6:	31 81       	ldd	r19, Z+1	; 0x01
    91e8:	8e 81       	ldd	r24, Y+6	; 0x06
    91ea:	9f 81       	ldd	r25, Y+7	; 0x07
    91ec:	fc 01       	movw	r30, r24
    91ee:	21 8b       	std	Z+17, r18	; 0x11
    91f0:	32 8b       	std	Z+18, r19	; 0x12
    91f2:	8c 81       	ldd	r24, Y+4	; 0x04
    91f4:	9d 81       	ldd	r25, Y+5	; 0x05
    91f6:	fc 01       	movw	r30, r24
    91f8:	24 85       	ldd	r18, Z+12	; 0x0c
    91fa:	35 85       	ldd	r19, Z+13	; 0x0d
    91fc:	8e 81       	ldd	r24, Y+6	; 0x06
    91fe:	9f 81       	ldd	r25, Y+7	; 0x07
    9200:	fc 01       	movw	r30, r24
    9202:	23 8b       	std	Z+19, r18	; 0x13
    9204:	34 8b       	std	Z+20, r19	; 0x14
    9206:	8c 85       	ldd	r24, Y+12	; 0x0c
    9208:	28 2f       	mov	r18, r24
    920a:	30 e0       	ldi	r19, 0x00	; 0
    920c:	4e e1       	ldi	r20, 0x1E	; 30
    920e:	42 9f       	mul	r20, r18
    9210:	c0 01       	movw	r24, r0
    9212:	43 9f       	mul	r20, r19
    9214:	90 0d       	add	r25, r0
    9216:	11 24       	eor	r1, r1
    9218:	9c 01       	movw	r18, r24
    921a:	2e 5e       	subi	r18, 0xEE	; 238
    921c:	3a 4b       	sbci	r19, 0xBA	; 186
    921e:	8c 81       	ldd	r24, Y+4	; 0x04
    9220:	9d 81       	ldd	r25, Y+5	; 0x05
    9222:	fc 01       	movw	r30, r24
    9224:	44 89       	ldd	r20, Z+20	; 0x14
    9226:	55 89       	ldd	r21, Z+21	; 0x15
    9228:	88 85       	ldd	r24, Y+8	; 0x08
    922a:	99 85       	ldd	r25, Y+9	; 0x09
    922c:	aa 85       	ldd	r26, Y+10	; 0x0a
    922e:	bb 85       	ldd	r27, Y+11	; 0x0b
    9230:	bc 01       	movw	r22, r24
    9232:	cd 01       	movw	r24, r26
    9234:	0e 94 68 59 	call	0xb2d0	; 0xb2d0 <LIN_DRV_Init>
    9238:	8a 83       	std	Y+2, r24	; 0x02
    923a:	9b 83       	std	Y+3, r25	; 0x03
    923c:	8a 81       	ldd	r24, Y+2	; 0x02
    923e:	9b 81       	ldd	r25, Y+3	; 0x03
    9240:	89 2b       	or	r24, r25
    9242:	89 f4       	brne	.+34     	; 0x9266 <lin_lld_init+0x25e>
    9244:	88 85       	ldd	r24, Y+8	; 0x08
    9246:	99 85       	ldd	r25, Y+9	; 0x09
    9248:	aa 85       	ldd	r26, Y+10	; 0x0a
    924a:	bb 85       	ldd	r27, Y+11	; 0x0b
    924c:	48 ee       	ldi	r20, 0xE8	; 232
    924e:	5b e4       	ldi	r21, 0x4B	; 75
    9250:	bc 01       	movw	r22, r24
    9252:	cd 01       	movw	r24, r26
    9254:	0e 94 44 5a 	call	0xb488	; 0xb488 <LIN_DRV_InstallCallback>
    9258:	8c 85       	ldd	r24, Y+12	; 0x0c
    925a:	88 2f       	mov	r24, r24
    925c:	90 e0       	ldi	r25, 0x00	; 0
    925e:	8e 5b       	subi	r24, 0xBE	; 190
    9260:	9a 4b       	sbci	r25, 0xBA	; 186
    9262:	fc 01       	movw	r30, r24
    9264:	10 82       	st	Z, r1
    9266:	21 e0       	ldi	r18, 0x01	; 1
    9268:	8a 81       	ldd	r24, Y+2	; 0x02
    926a:	9b 81       	ldd	r25, Y+3	; 0x03
    926c:	89 2b       	or	r24, r25
    926e:	09 f4       	brne	.+2      	; 0x9272 <lin_lld_init+0x26a>
    9270:	20 e0       	ldi	r18, 0x00	; 0
    9272:	82 2f       	mov	r24, r18
    9274:	2c 96       	adiw	r28, 0x0c	; 12
    9276:	cd bf       	out	0x3d, r28	; 61
    9278:	de bf       	out	0x3e, r29	; 62
    927a:	df 91       	pop	r29
    927c:	cf 91       	pop	r28
    927e:	1f 91       	pop	r17
    9280:	0f 91       	pop	r16
    9282:	ff 90       	pop	r15
    9284:	ef 90       	pop	r14
    9286:	08 95       	ret

00009288 <lin_lld_ignore_response>:
 * Description   : This function terminates an on-going data transmission/reception.
 *
 * Implements    : lin_lld_ignore_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_ignore_response(l_ifc_handle iii)
{
    9288:	cf 93       	push	r28
    928a:	df 93       	push	r29
    928c:	cd b7       	in	r28, 0x3d	; 61
    928e:	de b7       	in	r29, 0x3e	; 62
    9290:	27 97       	sbiw	r28, 0x07	; 7
    9292:	cd bf       	out	0x3d, r28	; 61
    9294:	de bf       	out	0x3e, r29	; 62
    9296:	8f 83       	std	Y+7, r24	; 0x07
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    9298:	81 e0       	ldi	r24, 0x01	; 1
    929a:	90 e0       	ldi	r25, 0x00	; 0
    929c:	89 83       	std	Y+1, r24	; 0x01
    929e:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    92a0:	8f 81       	ldd	r24, Y+7	; 0x07
    92a2:	88 2f       	mov	r24, r24
    92a4:	90 e0       	ldi	r25, 0x00	; 0
    92a6:	88 0f       	add	r24, r24
    92a8:	99 1f       	adc	r25, r25
    92aa:	88 0f       	add	r24, r24
    92ac:	99 1f       	adc	r25, r25
    92ae:	86 5c       	subi	r24, 0xC6	; 198
    92b0:	9d 4b       	sbci	r25, 0xBD	; 189
    92b2:	fc 01       	movw	r30, r24
    92b4:	80 81       	ld	r24, Z
    92b6:	91 81       	ldd	r25, Z+1	; 0x01
    92b8:	a2 81       	ldd	r26, Z+2	; 0x02
    92ba:	b3 81       	ldd	r27, Z+3	; 0x03
    92bc:	8b 83       	std	Y+3, r24	; 0x03
    92be:	9c 83       	std	Y+4, r25	; 0x04
    92c0:	ad 83       	std	Y+5, r26	; 0x05
    92c2:	be 83       	std	Y+6, r27	; 0x06

    /* Abort frame data transferring */
    retVal = LIN_DRV_AbortTransferData(lin_hardware_instance);
    92c4:	8b 81       	ldd	r24, Y+3	; 0x03
    92c6:	9c 81       	ldd	r25, Y+4	; 0x04
    92c8:	ad 81       	ldd	r26, Y+5	; 0x05
    92ca:	be 81       	ldd	r27, Y+6	; 0x06
    92cc:	bc 01       	movw	r22, r24
    92ce:	cd 01       	movw	r24, r26
    92d0:	0e 94 14 5a 	call	0xb428	; 0xb428 <LIN_DRV_AbortTransferData>
    92d4:	89 83       	std	Y+1, r24	; 0x01
    92d6:	9a 83       	std	Y+2, r25	; 0x02

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    92d8:	89 81       	ldd	r24, Y+1	; 0x01
    92da:	9a 81       	ldd	r25, Y+2	; 0x02
    92dc:	89 2b       	or	r24, r25
    92de:	11 f4       	brne	.+4      	; 0x92e4 <lin_lld_ignore_response+0x5c>
    92e0:	80 e0       	ldi	r24, 0x00	; 0
    92e2:	01 c0       	rjmp	.+2      	; 0x92e6 <lin_lld_ignore_response+0x5e>
    92e4:	8f ef       	ldi	r24, 0xFF	; 255
}
    92e6:	27 96       	adiw	r28, 0x07	; 7
    92e8:	cd bf       	out	0x3d, r28	; 61
    92ea:	de bf       	out	0x3e, r29	; 62
    92ec:	df 91       	pop	r29
    92ee:	cf 91       	pop	r28
    92f0:	08 95       	ret

000092f2 <lin_lld_set_low_power_mode>:
 * Description   : This function puts current node to sleep mode.
 *
 * Implements    : lin_lld_set_low_power_mode_Activity
 *END**************************************************************************/
l_u8 lin_lld_set_low_power_mode(l_ifc_handle iii)
{
    92f2:	cf 93       	push	r28
    92f4:	df 93       	push	r29
    92f6:	cd b7       	in	r28, 0x3d	; 61
    92f8:	de b7       	in	r29, 0x3e	; 62
    92fa:	27 97       	sbiw	r28, 0x07	; 7
    92fc:	cd bf       	out	0x3d, r28	; 61
    92fe:	de bf       	out	0x3e, r29	; 62
    9300:	8f 83       	std	Y+7, r24	; 0x07
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    9302:	81 e0       	ldi	r24, 0x01	; 1
    9304:	90 e0       	ldi	r25, 0x00	; 0
    9306:	89 83       	std	Y+1, r24	; 0x01
    9308:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    930a:	8f 81       	ldd	r24, Y+7	; 0x07
    930c:	88 2f       	mov	r24, r24
    930e:	90 e0       	ldi	r25, 0x00	; 0
    9310:	88 0f       	add	r24, r24
    9312:	99 1f       	adc	r25, r25
    9314:	88 0f       	add	r24, r24
    9316:	99 1f       	adc	r25, r25
    9318:	86 5c       	subi	r24, 0xC6	; 198
    931a:	9d 4b       	sbci	r25, 0xBD	; 189
    931c:	fc 01       	movw	r30, r24
    931e:	80 81       	ld	r24, Z
    9320:	91 81       	ldd	r25, Z+1	; 0x01
    9322:	a2 81       	ldd	r26, Z+2	; 0x02
    9324:	b3 81       	ldd	r27, Z+3	; 0x03
    9326:	8b 83       	std	Y+3, r24	; 0x03
    9328:	9c 83       	std	Y+4, r25	; 0x04
    932a:	ad 83       	std	Y+5, r26	; 0x05
    932c:	be 83       	std	Y+6, r27	; 0x06

    /* Put current node to sleep mode */
    retVal = LIN_DRV_GoToSleepMode(lin_hardware_instance);
    932e:	8b 81       	ldd	r24, Y+3	; 0x03
    9330:	9c 81       	ldd	r25, Y+4	; 0x04
    9332:	ad 81       	ldd	r26, Y+5	; 0x05
    9334:	be 81       	ldd	r27, Y+6	; 0x06
    9336:	bc 01       	movw	r22, r24
    9338:	cd 01       	movw	r24, r26
    933a:	0e 94 ef 59 	call	0xb3de	; 0xb3de <LIN_DRV_GoToSleepMode>
    933e:	89 83       	std	Y+1, r24	; 0x01
    9340:	9a 83       	std	Y+2, r25	; 0x02

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    9342:	89 81       	ldd	r24, Y+1	; 0x01
    9344:	9a 81       	ldd	r25, Y+2	; 0x02
    9346:	89 2b       	or	r24, r25
    9348:	11 f4       	brne	.+4      	; 0x934e <lin_lld_set_low_power_mode+0x5c>
    934a:	80 e0       	ldi	r24, 0x00	; 0
    934c:	01 c0       	rjmp	.+2      	; 0x9350 <lin_lld_set_low_power_mode+0x5e>
    934e:	8f ef       	ldi	r24, 0xFF	; 255
}
    9350:	27 96       	adiw	r28, 0x07	; 7
    9352:	cd bf       	out	0x3d, r28	; 61
    9354:	de bf       	out	0x3e, r29	; 62
    9356:	df 91       	pop	r29
    9358:	cf 91       	pop	r28
    935a:	08 95       	ret

0000935c <lin_lld_set_response>:
 *
 * Implements    : lin_lld_set_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_set_response(l_ifc_handle iii,
                          l_u8 response_length)
{
    935c:	cf 93       	push	r28
    935e:	df 93       	push	r29
    9360:	cd b7       	in	r28, 0x3d	; 61
    9362:	de b7       	in	r29, 0x3e	; 62
    9364:	2a 97       	sbiw	r28, 0x0a	; 10
    9366:	cd bf       	out	0x3d, r28	; 61
    9368:	de bf       	out	0x3e, r29	; 62
    936a:	89 87       	std	Y+9, r24	; 0x09
    936c:	6a 87       	std	Y+10, r22	; 0x0a
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    936e:	81 e0       	ldi	r24, 0x01	; 1
    9370:	90 e0       	ldi	r25, 0x00	; 0
    9372:	89 83       	std	Y+1, r24	; 0x01
    9374:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * buffer;

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    9376:	8a 85       	ldd	r24, Y+10	; 0x0a
    9378:	89 30       	cpi	r24, 0x09	; 9
    937a:	08 f0       	brcs	.+2      	; 0x937e <lin_lld_set_response+0x22>
    937c:	62 c0       	rjmp	.+196    	; 0x9442 <lin_lld_set_response+0xe6>
    937e:	8a 85       	ldd	r24, Y+10	; 0x0a
    9380:	88 23       	and	r24, r24
    9382:	09 f4       	brne	.+2      	; 0x9386 <lin_lld_set_response+0x2a>
    9384:	5e c0       	rjmp	.+188    	; 0x9442 <lin_lld_set_response+0xe6>
    {
        buffer = g_lin_protocol_state_array[iii].response_buffer_ptr;
    9386:	89 85       	ldd	r24, Y+9	; 0x09
    9388:	28 2f       	mov	r18, r24
    938a:	30 e0       	ldi	r19, 0x00	; 0
    938c:	46 e1       	ldi	r20, 0x16	; 22
    938e:	42 9f       	mul	r20, r18
    9390:	c0 01       	movw	r24, r0
    9392:	43 9f       	mul	r20, r19
    9394:	90 0d       	add	r25, r0
    9396:	11 24       	eor	r1, r1
    9398:	8e 55       	subi	r24, 0x5E	; 94
    939a:	99 4b       	sbci	r25, 0xB9	; 185
    939c:	fc 01       	movw	r30, r24
    939e:	80 81       	ld	r24, Z
    93a0:	91 81       	ldd	r25, Z+1	; 0x01
    93a2:	8b 83       	std	Y+3, r24	; 0x03
    93a4:	9c 83       	std	Y+4, r25	; 0x04
        /* Get the LIN hardware instance number */
        lin_hardware_instance = g_lin_virtual_ifc[iii];
    93a6:	89 85       	ldd	r24, Y+9	; 0x09
    93a8:	88 2f       	mov	r24, r24
    93aa:	90 e0       	ldi	r25, 0x00	; 0
    93ac:	88 0f       	add	r24, r24
    93ae:	99 1f       	adc	r25, r25
    93b0:	88 0f       	add	r24, r24
    93b2:	99 1f       	adc	r25, r25
    93b4:	86 5c       	subi	r24, 0xC6	; 198
    93b6:	9d 4b       	sbci	r25, 0xBD	; 189
    93b8:	fc 01       	movw	r30, r24
    93ba:	80 81       	ld	r24, Z
    93bc:	91 81       	ldd	r25, Z+1	; 0x01
    93be:	a2 81       	ldd	r26, Z+2	; 0x02
    93c0:	b3 81       	ldd	r27, Z+3	; 0x03
    93c2:	8d 83       	std	Y+5, r24	; 0x05
    93c4:	9e 83       	std	Y+6, r25	; 0x06
    93c6:	af 83       	std	Y+7, r26	; 0x07
    93c8:	b8 87       	std	Y+8, r27	; 0x08

        /* Put response length into buffer */
        g_lin_protocol_state_array[iii].response_length = response_length;
    93ca:	89 85       	ldd	r24, Y+9	; 0x09
    93cc:	28 2f       	mov	r18, r24
    93ce:	30 e0       	ldi	r19, 0x00	; 0
    93d0:	46 e1       	ldi	r20, 0x16	; 22
    93d2:	42 9f       	mul	r20, r18
    93d4:	c0 01       	movw	r24, r0
    93d6:	43 9f       	mul	r20, r19
    93d8:	90 0d       	add	r25, r0
    93da:	11 24       	eor	r1, r1
    93dc:	8c 55       	subi	r24, 0x5C	; 92
    93de:	99 4b       	sbci	r25, 0xB9	; 185
    93e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    93e2:	fc 01       	movw	r30, r24
    93e4:	20 83       	st	Z, r18

        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    93e6:	89 85       	ldd	r24, Y+9	; 0x09
    93e8:	28 2f       	mov	r18, r24
    93ea:	30 e0       	ldi	r19, 0x00	; 0
    93ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    93ee:	88 2f       	mov	r24, r24
    93f0:	90 e0       	ldi	r25, 0x00	; 0
    93f2:	01 97       	sbiw	r24, 0x01	; 1
    93f4:	22 0f       	add	r18, r18
    93f6:	33 1f       	adc	r19, r19
    93f8:	22 0f       	add	r18, r18
    93fa:	33 1f       	adc	r19, r19
    93fc:	22 0f       	add	r18, r18
    93fe:	33 1f       	adc	r19, r19
    9400:	82 0f       	add	r24, r18
    9402:	93 1f       	adc	r25, r19
    9404:	88 0f       	add	r24, r24
    9406:	99 1f       	adc	r25, r25
    9408:	8e 5c       	subi	r24, 0xCE	; 206
    940a:	9a 4b       	sbci	r25, 0xBA	; 186
    940c:	fc 01       	movw	r30, r24
    940e:	80 81       	ld	r24, Z
    9410:	91 81       	ldd	r25, Z+1	; 0x01
    9412:	9c 01       	movw	r18, r24
    9414:	40 e0       	ldi	r20, 0x00	; 0
    9416:	50 e0       	ldi	r21, 0x00	; 0
    9418:	8d 81       	ldd	r24, Y+5	; 0x05
    941a:	9e 81       	ldd	r25, Y+6	; 0x06
    941c:	af 81       	ldd	r26, Y+7	; 0x07
    941e:	b8 85       	ldd	r27, Y+8	; 0x08
    9420:	bc 01       	movw	r22, r24
    9422:	cd 01       	movw	r24, r26
    9424:	0e 94 26 60 	call	0xc04c	; 0xc04c <LIN_DRV_SetTimeoutCounter>

        /* Start sending data from the buffer */
        retVal = LIN_DRV_SendFrameData(lin_hardware_instance, &buffer[0U], response_length);
    9428:	4b 81       	ldd	r20, Y+3	; 0x03
    942a:	5c 81       	ldd	r21, Y+4	; 0x04
    942c:	8d 81       	ldd	r24, Y+5	; 0x05
    942e:	9e 81       	ldd	r25, Y+6	; 0x06
    9430:	af 81       	ldd	r26, Y+7	; 0x07
    9432:	b8 85       	ldd	r27, Y+8	; 0x08
    9434:	2a 85       	ldd	r18, Y+10	; 0x0a
    9436:	bc 01       	movw	r22, r24
    9438:	cd 01       	movw	r24, r26
    943a:	0e 94 44 5c 	call	0xb888	; 0xb888 <LIN_DRV_SendFrameData>
    943e:	89 83       	std	Y+1, r24	; 0x01
    9440:	9a 83       	std	Y+2, r25	; 0x02
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    9442:	89 81       	ldd	r24, Y+1	; 0x01
    9444:	9a 81       	ldd	r25, Y+2	; 0x02
    9446:	89 2b       	or	r24, r25
    9448:	11 f4       	brne	.+4      	; 0x944e <lin_lld_set_response+0xf2>
    944a:	80 e0       	ldi	r24, 0x00	; 0
    944c:	01 c0       	rjmp	.+2      	; 0x9450 <lin_lld_set_response+0xf4>
    944e:	8f ef       	ldi	r24, 0xFF	; 255
}
    9450:	2a 96       	adiw	r28, 0x0a	; 10
    9452:	cd bf       	out	0x3d, r28	; 61
    9454:	de bf       	out	0x3e, r29	; 62
    9456:	df 91       	pop	r29
    9458:	cf 91       	pop	r28
    945a:	08 95       	ret

0000945c <lin_lld_rx_response>:
 *
 * Implements    : lin_lld_rx_response_Activity
 *END**************************************************************************/
l_u8 lin_lld_rx_response(l_ifc_handle iii,
                         l_u8 response_length)
{
    945c:	cf 93       	push	r28
    945e:	df 93       	push	r29
    9460:	cd b7       	in	r28, 0x3d	; 61
    9462:	de b7       	in	r29, 0x3e	; 62
    9464:	28 97       	sbiw	r28, 0x08	; 8
    9466:	cd bf       	out	0x3d, r28	; 61
    9468:	de bf       	out	0x3e, r29	; 62
    946a:	8f 83       	std	Y+7, r24	; 0x07
    946c:	68 87       	std	Y+8, r22	; 0x08
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    l_u32 lin_hardware_instance;
    status_t retVal = STATUS_ERROR;
    946e:	81 e0       	ldi	r24, 0x01	; 1
    9470:	90 e0       	ldi	r25, 0x00	; 0
    9472:	89 83       	std	Y+1, r24	; 0x01
    9474:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the LIN hardware instance number */
    lin_hardware_instance = g_lin_virtual_ifc[iii];
    9476:	8f 81       	ldd	r24, Y+7	; 0x07
    9478:	88 2f       	mov	r24, r24
    947a:	90 e0       	ldi	r25, 0x00	; 0
    947c:	88 0f       	add	r24, r24
    947e:	99 1f       	adc	r25, r25
    9480:	88 0f       	add	r24, r24
    9482:	99 1f       	adc	r25, r25
    9484:	86 5c       	subi	r24, 0xC6	; 198
    9486:	9d 4b       	sbci	r25, 0xBD	; 189
    9488:	fc 01       	movw	r30, r24
    948a:	80 81       	ld	r24, Z
    948c:	91 81       	ldd	r25, Z+1	; 0x01
    948e:	a2 81       	ldd	r26, Z+2	; 0x02
    9490:	b3 81       	ldd	r27, Z+3	; 0x03
    9492:	8b 83       	std	Y+3, r24	; 0x03
    9494:	9c 83       	std	Y+4, r25	; 0x04
    9496:	ad 83       	std	Y+5, r26	; 0x05
    9498:	be 83       	std	Y+6, r27	; 0x06

    /* Check if response_length is from 1 to 8 */
    if ((response_length <= 8U) && (response_length != 0U))
    949a:	88 85       	ldd	r24, Y+8	; 0x08
    949c:	89 30       	cpi	r24, 0x09	; 9
    949e:	e8 f5       	brcc	.+122    	; 0x951a <lin_lld_rx_response+0xbe>
    94a0:	88 85       	ldd	r24, Y+8	; 0x08
    94a2:	88 23       	and	r24, r24
    94a4:	d1 f1       	breq	.+116    	; 0x951a <lin_lld_rx_response+0xbe>
    {
        /* Set correct timeout value */
        LIN_DRV_SetTimeoutCounter(lin_hardware_instance, s_lin_max_frame_res_timeout_val[iii][response_length - 1U]);
    94a6:	8f 81       	ldd	r24, Y+7	; 0x07
    94a8:	28 2f       	mov	r18, r24
    94aa:	30 e0       	ldi	r19, 0x00	; 0
    94ac:	88 85       	ldd	r24, Y+8	; 0x08
    94ae:	88 2f       	mov	r24, r24
    94b0:	90 e0       	ldi	r25, 0x00	; 0
    94b2:	01 97       	sbiw	r24, 0x01	; 1
    94b4:	22 0f       	add	r18, r18
    94b6:	33 1f       	adc	r19, r19
    94b8:	22 0f       	add	r18, r18
    94ba:	33 1f       	adc	r19, r19
    94bc:	22 0f       	add	r18, r18
    94be:	33 1f       	adc	r19, r19
    94c0:	82 0f       	add	r24, r18
    94c2:	93 1f       	adc	r25, r19
    94c4:	88 0f       	add	r24, r24
    94c6:	99 1f       	adc	r25, r25
    94c8:	8e 5c       	subi	r24, 0xCE	; 206
    94ca:	9a 4b       	sbci	r25, 0xBA	; 186
    94cc:	fc 01       	movw	r30, r24
    94ce:	80 81       	ld	r24, Z
    94d0:	91 81       	ldd	r25, Z+1	; 0x01
    94d2:	9c 01       	movw	r18, r24
    94d4:	40 e0       	ldi	r20, 0x00	; 0
    94d6:	50 e0       	ldi	r21, 0x00	; 0
    94d8:	8b 81       	ldd	r24, Y+3	; 0x03
    94da:	9c 81       	ldd	r25, Y+4	; 0x04
    94dc:	ad 81       	ldd	r26, Y+5	; 0x05
    94de:	be 81       	ldd	r27, Y+6	; 0x06
    94e0:	bc 01       	movw	r22, r24
    94e2:	cd 01       	movw	r24, r26
    94e4:	0e 94 26 60 	call	0xc04c	; 0xc04c <LIN_DRV_SetTimeoutCounter>

        /* Start receiving frame data into the buffer */
        retVal = LIN_DRV_ReceiveFrameData(lin_hardware_instance, g_lin_protocol_state_array[iii].response_buffer_ptr, response_length);
    94e8:	8f 81       	ldd	r24, Y+7	; 0x07
    94ea:	28 2f       	mov	r18, r24
    94ec:	30 e0       	ldi	r19, 0x00	; 0
    94ee:	46 e1       	ldi	r20, 0x16	; 22
    94f0:	42 9f       	mul	r20, r18
    94f2:	c0 01       	movw	r24, r0
    94f4:	43 9f       	mul	r20, r19
    94f6:	90 0d       	add	r25, r0
    94f8:	11 24       	eor	r1, r1
    94fa:	8e 55       	subi	r24, 0x5E	; 94
    94fc:	99 4b       	sbci	r25, 0xB9	; 185
    94fe:	fc 01       	movw	r30, r24
    9500:	40 81       	ld	r20, Z
    9502:	51 81       	ldd	r21, Z+1	; 0x01
    9504:	8b 81       	ldd	r24, Y+3	; 0x03
    9506:	9c 81       	ldd	r25, Y+4	; 0x04
    9508:	ad 81       	ldd	r26, Y+5	; 0x05
    950a:	be 81       	ldd	r27, Y+6	; 0x06
    950c:	28 85       	ldd	r18, Y+8	; 0x08
    950e:	bc 01       	movw	r22, r24
    9510:	cd 01       	movw	r24, r26
    9512:	0e 94 df 5d 	call	0xbbbe	; 0xbbbe <LIN_DRV_ReceiveFrameData>
    9516:	89 83       	std	Y+1, r24	; 0x01
    9518:	9a 83       	std	Y+2, r25	; 0x02
    }

    return (retVal == STATUS_SUCCESS) ? LIN_LLD_OK : LIN_LLD_ERROR;
    951a:	89 81       	ldd	r24, Y+1	; 0x01
    951c:	9a 81       	ldd	r25, Y+2	; 0x02
    951e:	89 2b       	or	r24, r25
    9520:	11 f4       	brne	.+4      	; 0x9526 <lin_lld_rx_response+0xca>
    9522:	80 e0       	ldi	r24, 0x00	; 0
    9524:	01 c0       	rjmp	.+2      	; 0x9528 <lin_lld_rx_response+0xcc>
    9526:	8f ef       	ldi	r24, 0xFF	; 255
}
    9528:	28 96       	adiw	r28, 0x08	; 8
    952a:	cd bf       	out	0x3d, r28	; 61
    952c:	de bf       	out	0x3e, r29	; 62
    952e:	df 91       	pop	r29
    9530:	cf 91       	pop	r28
    9532:	08 95       	ret

00009534 <lin_lld_timeout_service>:
 * Description   : This is a part of Timer Interrupt Handler.
 *
 * Implements    : lin_lld_timeout_service_Activity
 *END**************************************************************************/
void lin_lld_timeout_service(l_ifc_handle iii)
{
    9534:	ef 92       	push	r14
    9536:	ff 92       	push	r15
    9538:	0f 93       	push	r16
    953a:	1f 93       	push	r17
    953c:	cf 93       	push	r28
    953e:	df 93       	push	r29
    9540:	cd b7       	in	r28, 0x3d	; 61
    9542:	de b7       	in	r29, 0x3e	; 62
    9544:	a6 97       	sbiw	r28, 0x26	; 38
    9546:	cd bf       	out	0x3d, r28	; 61
    9548:	de bf       	out	0x3e, r29	; 62
    954a:	8e a3       	std	Y+38, r24	; 0x26
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);
    l_u32 lin_hardware_instance = g_lin_virtual_ifc[iii];
    954c:	8e a1       	ldd	r24, Y+38	; 0x26
    954e:	88 2f       	mov	r24, r24
    9550:	90 e0       	ldi	r25, 0x00	; 0
    9552:	88 0f       	add	r24, r24
    9554:	99 1f       	adc	r25, r25
    9556:	88 0f       	add	r24, r24
    9558:	99 1f       	adc	r25, r25
    955a:	86 5c       	subi	r24, 0xC6	; 198
    955c:	9d 4b       	sbci	r25, 0xBD	; 189
    955e:	fc 01       	movw	r30, r24
    9560:	80 81       	ld	r24, Z
    9562:	91 81       	ldd	r25, Z+1	; 0x01
    9564:	a2 81       	ldd	r26, Z+2	; 0x02
    9566:	b3 81       	ldd	r27, Z+3	; 0x03
    9568:	8a 83       	std	Y+2, r24	; 0x02
    956a:	9b 83       	std	Y+3, r25	; 0x03
    956c:	ac 83       	std	Y+4, r26	; 0x04
    956e:	bd 83       	std	Y+5, r27	; 0x05
    lin_state_t linState = s_lin_state_array[iii];
    9570:	8e a1       	ldd	r24, Y+38	; 0x26
    9572:	28 2f       	mov	r18, r24
    9574:	30 e0       	ldi	r19, 0x00	; 0
    9576:	4e e1       	ldi	r20, 0x1E	; 30
    9578:	42 9f       	mul	r20, r18
    957a:	c0 01       	movw	r24, r0
    957c:	43 9f       	mul	r20, r19
    957e:	90 0d       	add	r25, r0
    9580:	11 24       	eor	r1, r1
    9582:	8e 5e       	subi	r24, 0xEE	; 238
    9584:	9a 4b       	sbci	r25, 0xBA	; 186
    9586:	2e e1       	ldi	r18, 0x1E	; 30
    9588:	fc 01       	movw	r30, r24
    958a:	de 01       	movw	r26, r28
    958c:	18 96       	adiw	r26, 0x08	; 8
    958e:	01 90       	ld	r0, Z+
    9590:	0d 92       	st	X+, r0
    9592:	2a 95       	dec	r18
    9594:	e1 f7       	brne	.-8      	; 0x958e <lin_lld_timeout_service+0x5a>
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9596:	8e a1       	ldd	r24, Y+38	; 0x26
    9598:	28 2f       	mov	r18, r24
    959a:	30 e0       	ldi	r19, 0x00	; 0
    959c:	46 e1       	ldi	r20, 0x16	; 22
    959e:	42 9f       	mul	r20, r18
    95a0:	c0 01       	movw	r24, r0
    95a2:	43 9f       	mul	r20, r19
    95a4:	90 0d       	add	r25, r0
    95a6:	11 24       	eor	r1, r1
    95a8:	80 56       	subi	r24, 0x60	; 96
    95aa:	99 4b       	sbci	r25, 0xB9	; 185
    95ac:	8e 83       	std	Y+6, r24	; 0x06
    95ae:	9f 83       	std	Y+7, r25	; 0x07
    l_u8 index;

    LIN_DRV_TimeoutService(lin_hardware_instance);
    95b0:	8a 81       	ldd	r24, Y+2	; 0x02
    95b2:	9b 81       	ldd	r25, Y+3	; 0x03
    95b4:	ac 81       	ldd	r26, Y+4	; 0x04
    95b6:	bd 81       	ldd	r27, Y+5	; 0x05
    95b8:	bc 01       	movw	r22, r24
    95ba:	cd 01       	movw	r24, r26
    95bc:	0e 94 5c 5f 	call	0xbeb8	; 0xbeb8 <LIN_DRV_TimeoutService>
#if (SUPPORT_PROTOCOL_21 == 1U)
    /* Callback to transport layer to handle N_As and N_Cr timeout for LIN 2.1 and above*/
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
    95c0:	40 e0       	ldi	r20, 0x00	; 0
    95c2:	65 e0       	ldi	r22, 0x05	; 5
    95c4:	8e a1       	ldd	r24, Y+38	; 0x26
    95c6:	0e 94 c3 4e 	call	0x9d86	; 0x9d86 <lin_tl_callback_handler>
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    95ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    95cc:	88 2f       	mov	r24, r24
    95ce:	90 e0       	ldi	r25, 0x00	; 0
    95d0:	87 30       	cpi	r24, 0x07	; 7
    95d2:	91 05       	cpc	r25, r1
    95d4:	3c f4       	brge	.+14     	; 0x95e4 <lin_lld_timeout_service+0xb0>
    95d6:	83 30       	cpi	r24, 0x03	; 3
    95d8:	91 05       	cpc	r25, r1
    95da:	0c f0       	brlt	.+2      	; 0x95de <lin_lld_timeout_service+0xaa>
    95dc:	92 c0       	rjmp	.+292    	; 0x9702 <lin_lld_timeout_service+0x1ce>
    95de:	02 97       	sbiw	r24, 0x02	; 2
    95e0:	29 f0       	breq	.+10     	; 0x95ec <lin_lld_timeout_service+0xb8>
        case LIN_NODE_STATE_RECV_DATA:
        case LIN_NODE_STATE_RECV_DATA_COMPLETED:
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    95e2:	eb c0       	rjmp	.+470    	; 0x97ba <lin_lld_timeout_service+0x286>
    LIN_DRV_TimeoutService(lin_hardware_instance);
#if (SUPPORT_PROTOCOL_21 == 1U)
    /* Callback to transport layer to handle N_As and N_Cr timeout for LIN 2.1 and above*/
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    95e4:	09 97       	sbiw	r24, 0x09	; 9
    95e6:	09 f4       	brne	.+2      	; 0x95ea <lin_lld_timeout_service+0xb6>
    95e8:	b8 c0       	rjmp	.+368    	; 0x975a <lin_lld_timeout_service+0x226>
        case LIN_NODE_STATE_RECV_DATA:
        case LIN_NODE_STATE_RECV_DATA_COMPLETED:
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    95ea:	e7 c0       	rjmp	.+462    	; 0x97ba <lin_lld_timeout_service+0x286>
    (void)LIN_TL_CALLBACK_HANDLER(iii, TL_TIMEOUT_SERVICE, 0);
#endif /*(SUPPORT_PROTOCOL_21 == 1)*/
    switch (linState.currentNodeState)
    {
        case LIN_NODE_STATE_IDLE:
            if (!(prot_state_ptr->idle_timeout_cnt-- > 0U))
    95ec:	8e 81       	ldd	r24, Y+6	; 0x06
    95ee:	9f 81       	ldd	r25, Y+7	; 0x07
    95f0:	fc 01       	movw	r30, r24
    95f2:	83 89       	ldd	r24, Z+19	; 0x13
    95f4:	94 89       	ldd	r25, Z+20	; 0x14
    95f6:	ac 01       	movw	r20, r24
    95f8:	41 50       	subi	r20, 0x01	; 1
    95fa:	51 09       	sbc	r21, r1
    95fc:	2e 81       	ldd	r18, Y+6	; 0x06
    95fe:	3f 81       	ldd	r19, Y+7	; 0x07
    9600:	f9 01       	movw	r30, r18
    9602:	43 8b       	std	Z+19, r20	; 0x13
    9604:	54 8b       	std	Z+20, r21	; 0x14
    9606:	89 2b       	or	r24, r25
    9608:	01 f5       	brne	.+64     	; 0x964a <lin_lld_timeout_service+0x116>
            {
                /* Callback to handle timeout */
                CALLBACK_HANDLER(iii, LIN_LLD_BUS_ACTIVITY_TIMEOUT, 0xFFU);
    960a:	4f ef       	ldi	r20, 0xFF	; 255
    960c:	68 e0       	ldi	r22, 0x08	; 8
    960e:	8e a1       	ldd	r24, Y+38	; 0x26
    9610:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>

                /* Put current node to Idle state, reset idle timeout count */
                prot_state_ptr->idle_timeout_cnt = g_lin_protocol_user_cfg_array[iii].max_idle_timeout_cnt;
    9614:	8e a1       	ldd	r24, Y+38	; 0x26
    9616:	28 2f       	mov	r18, r24
    9618:	30 e0       	ldi	r19, 0x00	; 0
    961a:	4c e1       	ldi	r20, 0x1C	; 28
    961c:	42 9f       	mul	r20, r18
    961e:	c0 01       	movw	r24, r0
    9620:	43 9f       	mul	r20, r19
    9622:	90 0d       	add	r25, r0
    9624:	11 24       	eor	r1, r1
    9626:	8a 55       	subi	r24, 0x5A	; 90
    9628:	9d 4b       	sbci	r25, 0xBD	; 189
    962a:	fc 01       	movw	r30, r24
    962c:	20 81       	ld	r18, Z
    962e:	31 81       	ldd	r19, Z+1	; 0x01
    9630:	8e 81       	ldd	r24, Y+6	; 0x06
    9632:	9f 81       	ldd	r25, Y+7	; 0x07
    9634:	fc 01       	movw	r30, r24
    9636:	23 8b       	std	Z+19, r18	; 0x13
    9638:	34 8b       	std	Z+20, r19	; 0x14

                /* Put current node to sleep mode */
                (void)LIN_DRV_GoToSleepMode(lin_hardware_instance);
    963a:	8a 81       	ldd	r24, Y+2	; 0x02
    963c:	9b 81       	ldd	r25, Y+3	; 0x03
    963e:	ac 81       	ldd	r26, Y+4	; 0x04
    9640:	bd 81       	ldd	r27, Y+5	; 0x05
    9642:	bc 01       	movw	r22, r24
    9644:	cd 01       	movw	r24, r26
    9646:	0e 94 ef 59 	call	0xb3de	; 0xb3de <LIN_DRV_GoToSleepMode>
            }
            /* Re-calculate s_lin_max_header_timeout and s_lin_max_frame_res_timeout_val */
            if (s_baudrate_adjusted_flg[iii])
    964a:	8e a1       	ldd	r24, Y+38	; 0x26
    964c:	88 2f       	mov	r24, r24
    964e:	90 e0       	ldi	r25, 0x00	; 0
    9650:	8e 5b       	subi	r24, 0xBE	; 190
    9652:	9a 4b       	sbci	r25, 0xBA	; 186
    9654:	fc 01       	movw	r30, r24
    9656:	80 81       	ld	r24, Z
    9658:	88 23       	and	r24, r24
    965a:	09 f4       	brne	.+2      	; 0x965e <lin_lld_timeout_service+0x12a>
    965c:	a9 c0       	rjmp	.+338    	; 0x97b0 <lin_lld_timeout_service+0x27c>
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
    965e:	8e a1       	ldd	r24, Y+38	; 0x26
    9660:	88 2f       	mov	r24, r24
    9662:	90 e0       	ldi	r25, 0x00	; 0
    9664:	8e 5b       	subi	r24, 0xBE	; 190
    9666:	9a 4b       	sbci	r25, 0xBA	; 186
    9668:	fc 01       	movw	r30, r24
    966a:	10 82       	st	Z, r1
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
    966c:	8e a1       	ldd	r24, Y+38	; 0x26
    966e:	08 2f       	mov	r16, r24
    9670:	10 e0       	ldi	r17, 0x00	; 0
    9672:	80 91 ae 42 	lds	r24, 0x42AE	; 0x8042ae <g_lin_protocol_user_cfg_array+0x14>
    9676:	90 91 af 42 	lds	r25, 0x42AF	; 0x8042af <g_lin_protocol_user_cfg_array+0x15>
    967a:	fc 01       	movw	r30, r24
    967c:	80 81       	ld	r24, Z
    967e:	91 81       	ldd	r25, Z+1	; 0x01
    9680:	a2 81       	ldd	r26, Z+2	; 0x02
    9682:	b3 81       	ldd	r27, Z+3	; 0x03
    9684:	bc 01       	movw	r22, r24
    9686:	cd 01       	movw	r24, r26
    9688:	0e 94 80 47 	call	0x8f00	; 0x8f00 <lin_calc_max_header_timeout_cnt>
    968c:	9c 01       	movw	r18, r24
    968e:	c8 01       	movw	r24, r16
    9690:	88 0f       	add	r24, r24
    9692:	99 1f       	adc	r25, r25
    9694:	80 5d       	subi	r24, 0xD0	; 208
    9696:	9a 4b       	sbci	r25, 0xBA	; 186
    9698:	fc 01       	movw	r30, r24
    969a:	20 83       	st	Z, r18
    969c:	31 83       	std	Z+1, r19	; 0x01
                for (index = 1U; index < 9U; index++)
    969e:	81 e0       	ldi	r24, 0x01	; 1
    96a0:	89 83       	std	Y+1, r24	; 0x01
    96a2:	2b c0       	rjmp	.+86     	; 0x96fa <lin_lld_timeout_service+0x1c6>
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
    96a4:	8e a1       	ldd	r24, Y+38	; 0x26
    96a6:	e8 2e       	mov	r14, r24
    96a8:	f1 2c       	mov	r15, r1
    96aa:	89 81       	ldd	r24, Y+1	; 0x01
    96ac:	88 2f       	mov	r24, r24
    96ae:	90 e0       	ldi	r25, 0x00	; 0
    96b0:	8c 01       	movw	r16, r24
    96b2:	01 50       	subi	r16, 0x01	; 1
    96b4:	11 09       	sbc	r17, r1
    96b6:	80 91 ae 42 	lds	r24, 0x42AE	; 0x8042ae <g_lin_protocol_user_cfg_array+0x14>
    96ba:	90 91 af 42 	lds	r25, 0x42AF	; 0x8042af <g_lin_protocol_user_cfg_array+0x15>
    96be:	fc 01       	movw	r30, r24
    96c0:	80 81       	ld	r24, Z
    96c2:	91 81       	ldd	r25, Z+1	; 0x01
    96c4:	a2 81       	ldd	r26, Z+2	; 0x02
    96c6:	b3 81       	ldd	r27, Z+3	; 0x03
    96c8:	49 81       	ldd	r20, Y+1	; 0x01
    96ca:	bc 01       	movw	r22, r24
    96cc:	cd 01       	movw	r24, r26
    96ce:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <lin_calc_max_res_timeout_cnt>
    96d2:	9c 01       	movw	r18, r24
    96d4:	c7 01       	movw	r24, r14
    96d6:	88 0f       	add	r24, r24
    96d8:	99 1f       	adc	r25, r25
    96da:	88 0f       	add	r24, r24
    96dc:	99 1f       	adc	r25, r25
    96de:	88 0f       	add	r24, r24
    96e0:	99 1f       	adc	r25, r25
    96e2:	80 0f       	add	r24, r16
    96e4:	91 1f       	adc	r25, r17
    96e6:	88 0f       	add	r24, r24
    96e8:	99 1f       	adc	r25, r25
    96ea:	8e 5c       	subi	r24, 0xCE	; 206
    96ec:	9a 4b       	sbci	r25, 0xBA	; 186
    96ee:	fc 01       	movw	r30, r24
    96f0:	20 83       	st	Z, r18
    96f2:	31 83       	std	Z+1, r19	; 0x01
            if (s_baudrate_adjusted_flg[iii])
            {
                /* Clear baudrate adjusted flag */
                s_baudrate_adjusted_flg[iii] = false;
                s_lin_max_header_timeout[iii] = lin_calc_max_header_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate);
                for (index = 1U; index < 9U; index++)
    96f4:	89 81       	ldd	r24, Y+1	; 0x01
    96f6:	8f 5f       	subi	r24, 0xFF	; 255
    96f8:	89 83       	std	Y+1, r24	; 0x01
    96fa:	89 81       	ldd	r24, Y+1	; 0x01
    96fc:	89 30       	cpi	r24, 0x09	; 9
    96fe:	90 f2       	brcs	.-92     	; 0x96a4 <lin_lld_timeout_service+0x170>
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
                }
            }
            break;
    9700:	57 c0       	rjmp	.+174    	; 0x97b0 <lin_lld_timeout_service+0x27c>
        case LIN_NODE_STATE_SEND_BREAK_FIELD:
        case LIN_NODE_STATE_RECV_SYNC:
        case LIN_NODE_STATE_RECV_PID:
        case LIN_NODE_STATE_SEND_PID:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    9702:	8e 81       	ldd	r24, Y+6	; 0x06
    9704:	9f 81       	ldd	r25, Y+7	; 0x07
    9706:	fc 01       	movw	r30, r24
    9708:	81 89       	ldd	r24, Z+17	; 0x11
    970a:	92 89       	ldd	r25, Z+18	; 0x12
    970c:	ac 01       	movw	r20, r24
    970e:	41 50       	subi	r20, 0x01	; 1
    9710:	51 09       	sbc	r21, r1
    9712:	2e 81       	ldd	r18, Y+6	; 0x06
    9714:	3f 81       	ldd	r19, Y+7	; 0x07
    9716:	f9 01       	movw	r30, r18
    9718:	41 8b       	std	Z+17, r20	; 0x11
    971a:	52 8b       	std	Z+18, r21	; 0x12
    971c:	89 2b       	or	r24, r25
    971e:	09 f0       	breq	.+2      	; 0x9722 <lin_lld_timeout_service+0x1ee>
    9720:	49 c0       	rjmp	.+146    	; 0x97b4 <lin_lld_timeout_service+0x280>
            {
                /* Go to idle state */
                (void)LIN_DRV_GotoIdleState(lin_hardware_instance);
    9722:	8a 81       	ldd	r24, Y+2	; 0x02
    9724:	9b 81       	ldd	r25, Y+3	; 0x03
    9726:	ac 81       	ldd	r26, Y+4	; 0x04
    9728:	bd 81       	ldd	r27, Y+5	; 0x05
    972a:	bc 01       	movw	r22, r24
    972c:	cd 01       	movw	r24, r26
    972e:	0e 94 c4 59 	call	0xb388	; 0xb388 <LIN_DRV_GotoIdleState>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    9732:	8e a1       	ldd	r24, Y+38	; 0x26
    9734:	88 2f       	mov	r24, r24
    9736:	90 e0       	ldi	r25, 0x00	; 0
    9738:	82 95       	swap	r24
    973a:	92 95       	swap	r25
    973c:	90 7f       	andi	r25, 0xF0	; 240
    973e:	98 27       	eor	r25, r24
    9740:	80 7f       	andi	r24, 0xF0	; 240
    9742:	98 27       	eor	r25, r24
    9744:	80 5c       	subi	r24, 0xC0	; 192
    9746:	9a 4b       	sbci	r25, 0xBA	; 186
    9748:	fc 01       	movw	r30, r24
    974a:	20 81       	ld	r18, Z
    974c:	31 81       	ldd	r19, Z+1	; 0x01
    974e:	8e 81       	ldd	r24, Y+6	; 0x06
    9750:	9f 81       	ldd	r25, Y+7	; 0x07
    9752:	fc 01       	movw	r30, r24
    9754:	21 8b       	std	Z+17, r18	; 0x11
    9756:	32 8b       	std	Z+18, r19	; 0x12
            }
            break;
    9758:	2d c0       	rjmp	.+90     	; 0x97b4 <lin_lld_timeout_service+0x280>
        case LIN_NODE_STATE_SEND_DATA:
            /* timeout send has occurred - change state of the node and inform core */
            if (!(prot_state_ptr->frame_timeout_cnt-- > 0U))
    975a:	8e 81       	ldd	r24, Y+6	; 0x06
    975c:	9f 81       	ldd	r25, Y+7	; 0x07
    975e:	fc 01       	movw	r30, r24
    9760:	81 89       	ldd	r24, Z+17	; 0x11
    9762:	92 89       	ldd	r25, Z+18	; 0x12
    9764:	ac 01       	movw	r20, r24
    9766:	41 50       	subi	r20, 0x01	; 1
    9768:	51 09       	sbc	r21, r1
    976a:	2e 81       	ldd	r18, Y+6	; 0x06
    976c:	3f 81       	ldd	r19, Y+7	; 0x07
    976e:	f9 01       	movw	r30, r18
    9770:	41 8b       	std	Z+17, r20	; 0x11
    9772:	52 8b       	std	Z+18, r21	; 0x12
    9774:	89 2b       	or	r24, r25
    9776:	01 f5       	brne	.+64     	; 0x97b8 <lin_lld_timeout_service+0x284>
            {
                /* Abort frame data transferring */
                (void)LIN_DRV_AbortTransferData(lin_hardware_instance);
    9778:	8a 81       	ldd	r24, Y+2	; 0x02
    977a:	9b 81       	ldd	r25, Y+3	; 0x03
    977c:	ac 81       	ldd	r26, Y+4	; 0x04
    977e:	bd 81       	ldd	r27, Y+5	; 0x05
    9780:	bc 01       	movw	r22, r24
    9782:	cd 01       	movw	r24, r26
    9784:	0e 94 14 5a 	call	0xb428	; 0xb428 <LIN_DRV_AbortTransferData>

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    9788:	8e a1       	ldd	r24, Y+38	; 0x26
    978a:	88 2f       	mov	r24, r24
    978c:	90 e0       	ldi	r25, 0x00	; 0
    978e:	82 95       	swap	r24
    9790:	92 95       	swap	r25
    9792:	90 7f       	andi	r25, 0xF0	; 240
    9794:	98 27       	eor	r25, r24
    9796:	80 7f       	andi	r24, 0xF0	; 240
    9798:	98 27       	eor	r25, r24
    979a:	80 5c       	subi	r24, 0xC0	; 192
    979c:	9a 4b       	sbci	r25, 0xBA	; 186
    979e:	fc 01       	movw	r30, r24
    97a0:	20 81       	ld	r18, Z
    97a2:	31 81       	ldd	r19, Z+1	; 0x01
    97a4:	8e 81       	ldd	r24, Y+6	; 0x06
    97a6:	9f 81       	ldd	r25, Y+7	; 0x07
    97a8:	fc 01       	movw	r30, r24
    97aa:	21 8b       	std	Z+17, r18	; 0x11
    97ac:	32 8b       	std	Z+18, r19	; 0x12
            }
            break;
    97ae:	04 c0       	rjmp	.+8      	; 0x97b8 <lin_lld_timeout_service+0x284>
                for (index = 1U; index < 9U; index++)
                {
                    s_lin_max_frame_res_timeout_val[iii][index - 1U] = lin_calc_max_res_timeout_cnt(g_lin_protocol_user_cfg_array->lin_user_config_ptr->baudRate, index);
                }
            }
            break;
    97b0:	00 00       	nop
    97b2:	03 c0       	rjmp	.+6      	; 0x97ba <lin_lld_timeout_service+0x286>
                (void)LIN_DRV_GotoIdleState(lin_hardware_instance);

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
            }
            break;
    97b4:	00 00       	nop
    97b6:	01 c0       	rjmp	.+2      	; 0x97ba <lin_lld_timeout_service+0x286>
                (void)LIN_DRV_AbortTransferData(lin_hardware_instance);

                /* Reset frame count timeout */
                prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
            }
            break;
    97b8:	00 00       	nop
        case LIN_NODE_STATE_SEND_DATA_COMPLETED:
        default:
            /* do nothing */
            break;
    }
}
    97ba:	00 00       	nop
    97bc:	a6 96       	adiw	r28, 0x26	; 38
    97be:	cd bf       	out	0x3d, r28	; 61
    97c0:	de bf       	out	0x3e, r29	; 62
    97c2:	df 91       	pop	r29
    97c4:	cf 91       	pop	r28
    97c6:	1f 91       	pop	r17
    97c8:	0f 91       	pop	r16
    97ca:	ff 90       	pop	r15
    97cc:	ef 90       	pop	r14
    97ce:	08 95       	ret

000097d0 <CallbackHandler>:
 *
 * Implements    : CallbackHandler_Activity
 *END**************************************************************************/
static void CallbackHandler(uint32_t instance,
                            void * linState)
{
    97d0:	cf 93       	push	r28
    97d2:	df 93       	push	r29
    97d4:	cd b7       	in	r28, 0x3d	; 61
    97d6:	de b7       	in	r29, 0x3e	; 62
    97d8:	60 97       	sbiw	r28, 0x10	; 16
    97da:	cd bf       	out	0x3d, r28	; 61
    97dc:	de bf       	out	0x3e, r29	; 62
    97de:	6b 87       	std	Y+11, r22	; 0x0b
    97e0:	7c 87       	std	Y+12, r23	; 0x0c
    97e2:	8d 87       	std	Y+13, r24	; 0x0d
    97e4:	9e 87       	std	Y+14, r25	; 0x0e
    97e6:	4f 87       	std	Y+15, r20	; 0x0f
    97e8:	58 8b       	std	Y+16, r21	; 0x10
    const lin_state_t * linCurrentState = linState;
    97ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    97ec:	98 89       	ldd	r25, Y+16	; 0x10
    97ee:	89 83       	std	Y+1, r24	; 0x01
    97f0:	9a 83       	std	Y+2, r25	; 0x02
    lin_lld_event_id_t event_id;
    l_u8 id = linCurrentState->currentId;
    97f2:	89 81       	ldd	r24, Y+1	; 0x01
    97f4:	9a 81       	ldd	r25, Y+2	; 0x02
    97f6:	fc 01       	movw	r30, r24
    97f8:	87 85       	ldd	r24, Z+15	; 0x0f
    97fa:	8b 83       	std	Y+3, r24	; 0x03
    l_u8 bytesRemaining = 0U;
    97fc:	1a 86       	std	Y+10, r1	; 0x0a
    l_ifc_handle iii = g_lin_hardware_ifc[instance];
    97fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    9800:	9c 85       	ldd	r25, Y+12	; 0x0c
    9802:	88 5c       	subi	r24, 0xC8	; 200
    9804:	9d 4b       	sbci	r25, 0xBD	; 189
    9806:	fc 01       	movw	r30, r24
    9808:	80 81       	ld	r24, Z
    980a:	8c 83       	std	Y+4, r24	; 0x04

#if (SUPPORT_PROTOCOL_J2602 == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
#endif
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    980c:	8c 81       	ldd	r24, Y+4	; 0x04
    980e:	28 2f       	mov	r18, r24
    9810:	30 e0       	ldi	r19, 0x00	; 0
    9812:	4c e1       	ldi	r20, 0x1C	; 28
    9814:	42 9f       	mul	r20, r18
    9816:	c0 01       	movw	r24, r0
    9818:	43 9f       	mul	r20, r19
    981a:	90 0d       	add	r25, r0
    981c:	11 24       	eor	r1, r1
    981e:	86 56       	subi	r24, 0x66	; 102
    9820:	9d 4b       	sbci	r25, 0xBD	; 189
    9822:	8d 83       	std	Y+5, r24	; 0x05
    9824:	9e 83       	std	Y+6, r25	; 0x06

    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9826:	8c 81       	ldd	r24, Y+4	; 0x04
    9828:	28 2f       	mov	r18, r24
    982a:	30 e0       	ldi	r19, 0x00	; 0
    982c:	46 e1       	ldi	r20, 0x16	; 22
    982e:	42 9f       	mul	r20, r18
    9830:	c0 01       	movw	r24, r0
    9832:	43 9f       	mul	r20, r19
    9834:	90 0d       	add	r25, r0
    9836:	11 24       	eor	r1, r1
    9838:	80 56       	subi	r24, 0x60	; 96
    983a:	99 4b       	sbci	r25, 0xB9	; 185
    983c:	8f 83       	std	Y+7, r24	; 0x07
    983e:	98 87       	std	Y+8, r25	; 0x08
#if (SUPPORT_MASTER_MODE == 1U)
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    switch (linCurrentState->currentEventId)
    9840:	89 81       	ldd	r24, Y+1	; 0x01
    9842:	9a 81       	ldd	r25, Y+2	; 0x02
    9844:	fc 01       	movw	r30, r24
    9846:	81 89       	ldd	r24, Z+17	; 0x11
    9848:	88 2f       	mov	r24, r24
    984a:	90 e0       	ldi	r25, 0x00	; 0
    984c:	09 2e       	mov	r0, r25
    984e:	00 0c       	add	r0, r0
    9850:	aa 0b       	sbc	r26, r26
    9852:	bb 0b       	sbc	r27, r27
    9854:	40 e0       	ldi	r20, 0x00	; 0
    9856:	50 e0       	ldi	r21, 0x00	; 0
    9858:	2c e0       	ldi	r18, 0x0C	; 12
    985a:	30 e0       	ldi	r19, 0x00	; 0
    985c:	84 1b       	sub	r24, r20
    985e:	95 0b       	sbc	r25, r21
    9860:	28 17       	cp	r18, r24
    9862:	39 07       	cpc	r19, r25
    9864:	08 f4       	brcc	.+2      	; 0x9868 <CallbackHandler+0x98>
    9866:	99 c0       	rjmp	.+306    	; 0x999a <CallbackHandler+0x1ca>
    9868:	87 5a       	subi	r24, 0xA7	; 167
    986a:	9b 4d       	sbci	r25, 0xDB	; 219
    986c:	fc 01       	movw	r30, r24
    986e:	0c 94 d4 78 	jmp	0xf1a8	; 0xf1a8 <__tablejump2__>
    {
        case LIN_PID_OK:
            event_id = LIN_LLD_PID_OK;
    9872:	19 86       	std	Y+9, r1	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    9874:	4b 81       	ldd	r20, Y+3	; 0x03
    9876:	69 85       	ldd	r22, Y+9	; 0x09
    9878:	8c 81       	ldd	r24, Y+4	; 0x04
    987a:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
            // break;
        case LIN_RECV_BREAK_FIELD_OK:
            prot_state_ptr->frame_timeout_cnt = (l_u16)(s_lin_max_frame_res_timeout_val[iii][7U] + s_lin_max_header_timeout[iii]);
    987e:	8c 81       	ldd	r24, Y+4	; 0x04
    9880:	88 2f       	mov	r24, r24
    9882:	90 e0       	ldi	r25, 0x00	; 0
    9884:	82 95       	swap	r24
    9886:	92 95       	swap	r25
    9888:	90 7f       	andi	r25, 0xF0	; 240
    988a:	98 27       	eor	r25, r24
    988c:	80 7f       	andi	r24, 0xF0	; 240
    988e:	98 27       	eor	r25, r24
    9890:	80 5c       	subi	r24, 0xC0	; 192
    9892:	9a 4b       	sbci	r25, 0xBA	; 186
    9894:	fc 01       	movw	r30, r24
    9896:	20 81       	ld	r18, Z
    9898:	31 81       	ldd	r19, Z+1	; 0x01
    989a:	8c 81       	ldd	r24, Y+4	; 0x04
    989c:	88 2f       	mov	r24, r24
    989e:	90 e0       	ldi	r25, 0x00	; 0
    98a0:	88 0f       	add	r24, r24
    98a2:	99 1f       	adc	r25, r25
    98a4:	80 5d       	subi	r24, 0xD0	; 208
    98a6:	9a 4b       	sbci	r25, 0xBA	; 186
    98a8:	fc 01       	movw	r30, r24
    98aa:	80 81       	ld	r24, Z
    98ac:	91 81       	ldd	r25, Z+1	; 0x01
    98ae:	28 0f       	add	r18, r24
    98b0:	39 1f       	adc	r19, r25
    98b2:	8f 81       	ldd	r24, Y+7	; 0x07
    98b4:	98 85       	ldd	r25, Y+8	; 0x08
    98b6:	fc 01       	movw	r30, r24
    98b8:	21 8b       	std	Z+17, r18	; 0x11
    98ba:	32 8b       	std	Z+18, r19	; 0x12
            break;
    98bc:	71 c0       	rjmp	.+226    	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_PID_ERROR:
            event_id = LIN_LLD_PID_ERR;
    98be:	83 e0       	ldi	r24, 0x03	; 3
    98c0:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    98c2:	4b 81       	ldd	r20, Y+3	; 0x03
    98c4:	69 85       	ldd	r22, Y+9	; 0x09
    98c6:	8c 81       	ldd	r24, Y+4	; 0x04
    98c8:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
            break;
    98cc:	69 c0       	rjmp	.+210    	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_TX_COMPLETED:
            event_id = LIN_LLD_TX_COMPLETED;
    98ce:	81 e0       	ldi	r24, 0x01	; 1
    98d0:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    98d2:	4b 81       	ldd	r20, Y+3	; 0x03
    98d4:	69 85       	ldd	r22, Y+9	; 0x09
    98d6:	8c 81       	ldd	r24, Y+4	; 0x04
    98d8:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
            break;
    98dc:	61 c0       	rjmp	.+194    	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_RX_COMPLETED:
            event_id = LIN_LLD_RX_COMPLETED;
    98de:	82 e0       	ldi	r24, 0x02	; 2
    98e0:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    98e2:	4b 81       	ldd	r20, Y+3	; 0x03
    98e4:	69 85       	ldd	r22, Y+9	; 0x09
    98e6:	8c 81       	ldd	r24, Y+4	; 0x04
    98e8:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
            break;
    98ec:	59 c0       	rjmp	.+178    	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_CHECKSUM_ERROR:
            event_id = LIN_LLD_CHECKSUM_ERR;
    98ee:	85 e0       	ldi	r24, 0x05	; 5
    98f0:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    98f2:	4b 81       	ldd	r20, Y+3	; 0x03
    98f4:	69 85       	ldd	r22, Y+9	; 0x09
    98f6:	8c 81       	ldd	r24, Y+4	; 0x04
    98f8:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
            break;
    98fc:	51 c0       	rjmp	.+162    	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_READBACK_ERROR:
            event_id = LIN_LLD_READBACK_ERR;
    98fe:	86 e0       	ldi	r24, 0x06	; 6
    9900:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    9902:	4b 81       	ldd	r20, Y+3	; 0x03
    9904:	69 85       	ldd	r22, Y+9	; 0x09
    9906:	8c 81       	ldd	r24, Y+4	; 0x04
    9908:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
            break;
    990c:	49 c0       	rjmp	.+146    	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_FRAME_ERROR:
            event_id = LIN_LLD_FRAME_ERR;
    990e:	84 e0       	ldi	r24, 0x04	; 4
    9910:	89 87       	std	Y+9, r24	; 0x09
            CALLBACK_HANDLER(iii, (event_id), (id));
    9912:	4b 81       	ldd	r20, Y+3	; 0x03
    9914:	69 85       	ldd	r22, Y+9	; 0x09
    9916:	8c 81       	ldd	r24, Y+4	; 0x04
    9918:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
            break;
    991c:	41 c0       	rjmp	.+130    	; 0x99a0 <CallbackHandler+0x1d0>
                event_id = LIN_LLD_READBACK_ERR;
                CALLBACK_HANDLER(iii, (event_id), (id));
            }
        #endif /* End of (SUPPORT_PROTOCOL_J2602 == 1U) */

            prot_state_ptr->frame_timeout_cnt = s_lin_max_frame_res_timeout_val[iii][7U];
    991e:	8c 81       	ldd	r24, Y+4	; 0x04
    9920:	88 2f       	mov	r24, r24
    9922:	90 e0       	ldi	r25, 0x00	; 0
    9924:	82 95       	swap	r24
    9926:	92 95       	swap	r25
    9928:	90 7f       	andi	r25, 0xF0	; 240
    992a:	98 27       	eor	r25, r24
    992c:	80 7f       	andi	r24, 0xF0	; 240
    992e:	98 27       	eor	r25, r24
    9930:	80 5c       	subi	r24, 0xC0	; 192
    9932:	9a 4b       	sbci	r25, 0xBA	; 186
    9934:	fc 01       	movw	r30, r24
    9936:	20 81       	ld	r18, Z
    9938:	31 81       	ldd	r19, Z+1	; 0x01
    993a:	8f 81       	ldd	r24, Y+7	; 0x07
    993c:	98 85       	ldd	r25, Y+8	; 0x08
    993e:	fc 01       	movw	r30, r24
    9940:	21 8b       	std	Z+17, r18	; 0x11
    9942:	32 8b       	std	Z+18, r19	; 0x12
            break;
    9944:	2d c0       	rjmp	.+90     	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_BAUDRATE_ADJUSTED:
            /* Set s_baudrate_adjusted_flg[iii] */
            s_baudrate_adjusted_flg[iii] = true;
    9946:	8c 81       	ldd	r24, Y+4	; 0x04
    9948:	88 2f       	mov	r24, r24
    994a:	90 e0       	ldi	r25, 0x00	; 0
    994c:	8e 5b       	subi	r24, 0xBE	; 190
    994e:	9a 4b       	sbci	r25, 0xBA	; 186
    9950:	21 e0       	ldi	r18, 0x01	; 1
    9952:	fc 01       	movw	r30, r24
    9954:	20 83       	st	Z, r18
            break;
    9956:	24 c0       	rjmp	.+72     	; 0x99a0 <CallbackHandler+0x1d0>
        case LIN_NO_EVENT:
            if (linCurrentState->timeoutCounterFlag == (bool)1U)
    9958:	89 81       	ldd	r24, Y+1	; 0x01
    995a:	9a 81       	ldd	r25, Y+2	; 0x02
    995c:	fc 01       	movw	r30, r24
    995e:	87 89       	ldd	r24, Z+23	; 0x17
    9960:	88 23       	and	r24, r24
    9962:	e9 f0       	breq	.+58     	; 0x999e <CallbackHandler+0x1ce>
                    master_data_ptr->schedule_start_entry_ptr[master_data_ptr->active_schedule_id] = 0U;
                }
                else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
                {
                   (void)LIN_DRV_GetReceiveStatus(instance, &bytesRemaining);
    9964:	9e 01       	movw	r18, r28
    9966:	26 5f       	subi	r18, 0xF6	; 246
    9968:	3f 4f       	sbci	r19, 0xFF	; 255
    996a:	8b 85       	ldd	r24, Y+11	; 0x0b
    996c:	9c 85       	ldd	r25, Y+12	; 0x0c
    996e:	ad 85       	ldd	r26, Y+13	; 0x0d
    9970:	be 85       	ldd	r27, Y+14	; 0x0e
    9972:	a9 01       	movw	r20, r18
    9974:	bc 01       	movw	r22, r24
    9976:	cd 01       	movw	r24, r26
    9978:	0e 94 56 60 	call	0xc0ac	; 0xc0ac <LIN_DRV_GetReceiveStatus>
                    /* Received part of data but not completed */
                    if (linCurrentState->rxSize > bytesRemaining)
    997c:	89 81       	ldd	r24, Y+1	; 0x01
    997e:	9a 81       	ldd	r25, Y+2	; 0x02
    9980:	fc 01       	movw	r30, r24
    9982:	96 81       	ldd	r25, Z+6	; 0x06
    9984:	8a 85       	ldd	r24, Y+10	; 0x0a
    9986:	89 17       	cp	r24, r25
    9988:	50 f4       	brcc	.+20     	; 0x999e <CallbackHandler+0x1ce>
                    {
                        event_id = LIN_LLD_NODATA_TIMEOUT;
    998a:	87 e0       	ldi	r24, 0x07	; 7
    998c:	89 87       	std	Y+9, r24	; 0x09
                        CALLBACK_HANDLER(iii, (event_id), (id));
    998e:	4b 81       	ldd	r20, Y+3	; 0x03
    9990:	69 85       	ldd	r22, Y+9	; 0x09
    9992:	8c 81       	ldd	r24, Y+4	; 0x04
    9994:	0e 94 13 31 	call	0x6226	; 0x6226 <lin_pid_resp_callback_handler>
                    }
                }
            }
            break;
    9998:	02 c0       	rjmp	.+4      	; 0x999e <CallbackHandler+0x1ce>
        default:
            /* do nothing */
            break;
    999a:	00 00       	nop
    999c:	01 c0       	rjmp	.+2      	; 0x99a0 <CallbackHandler+0x1d0>
                        event_id = LIN_LLD_NODATA_TIMEOUT;
                        CALLBACK_HANDLER(iii, (event_id), (id));
                    }
                }
            }
            break;
    999e:	00 00       	nop
        default:
            /* do nothing */
            break;
    }

    prot_state_ptr->idle_timeout_cnt = prot_user_config_ptr->max_idle_timeout_cnt;
    99a0:	8d 81       	ldd	r24, Y+5	; 0x05
    99a2:	9e 81       	ldd	r25, Y+6	; 0x06
    99a4:	fc 01       	movw	r30, r24
    99a6:	24 85       	ldd	r18, Z+12	; 0x0c
    99a8:	35 85       	ldd	r19, Z+13	; 0x0d
    99aa:	8f 81       	ldd	r24, Y+7	; 0x07
    99ac:	98 85       	ldd	r25, Y+8	; 0x08
    99ae:	fc 01       	movw	r30, r24
    99b0:	23 8b       	std	Z+19, r18	; 0x13
    99b2:	34 8b       	std	Z+20, r19	; 0x14
    /*
    * @violates MISRA 2012 Advisory Rule 8.13 Advisory
    */
}
    99b4:	00 00       	nop
    99b6:	60 96       	adiw	r28, 0x10	; 16
    99b8:	cd bf       	out	0x3d, r28	; 61
    99ba:	de bf       	out	0x3e, r29	; 62
    99bc:	df 91       	pop	r29
    99be:	cf 91       	pop	r28
    99c0:	08 95       	ret

000099c2 <ld_init>:
{

    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_tx_queue.queue_status);
}
    99c2:	cf 93       	push	r28
    99c4:	df 93       	push	r29
    99c6:	cd b7       	in	r28, 0x3d	; 61
    99c8:	de b7       	in	r29, 0x3e	; 62
    99ca:	29 97       	sbiw	r28, 0x09	; 9
    99cc:	cd bf       	out	0x3d, r28	; 61
    99ce:	de bf       	out	0x3e, r29	; 62
    99d0:	89 87       	std	Y+9, r24	; 0x09
    99d2:	89 85       	ldd	r24, Y+9	; 0x09
    99d4:	28 2f       	mov	r18, r24
    99d6:	30 e0       	ldi	r19, 0x00	; 0
    99d8:	44 e3       	ldi	r20, 0x34	; 52
    99da:	42 9f       	mul	r20, r18
    99dc:	c0 01       	movw	r24, r0
    99de:	43 9f       	mul	r20, r19
    99e0:	90 0d       	add	r25, r0
    99e2:	11 24       	eor	r1, r1
    99e4:	84 59       	subi	r24, 0x94	; 148
    99e6:	99 4b       	sbci	r25, 0xB9	; 185
    99e8:	8b 83       	std	Y+3, r24	; 0x03
    99ea:	9c 83       	std	Y+4, r25	; 0x04
    99ec:	89 85       	ldd	r24, Y+9	; 0x09
    99ee:	28 2f       	mov	r18, r24
    99f0:	30 e0       	ldi	r19, 0x00	; 0
    99f2:	4c e1       	ldi	r20, 0x1C	; 28
    99f4:	42 9f       	mul	r20, r18
    99f6:	c0 01       	movw	r24, r0
    99f8:	43 9f       	mul	r20, r19
    99fa:	90 0d       	add	r25, r0
    99fc:	11 24       	eor	r1, r1
    99fe:	8c 54       	subi	r24, 0x4C	; 76
    9a00:	9d 4b       	sbci	r25, 0xBD	; 189
    9a02:	fc 01       	movw	r30, r24
    9a04:	80 81       	ld	r24, Z
    9a06:	91 81       	ldd	r25, Z+1	; 0x01
    9a08:	8d 83       	std	Y+5, r24	; 0x05
    9a0a:	9e 83       	std	Y+6, r25	; 0x06
    9a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    9a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    9a10:	07 97       	sbiw	r24, 0x07	; 7
    9a12:	28 f4       	brcc	.+10     	; 0x9a1e <ld_init+0x5c>
    9a14:	81 e0       	ldi	r24, 0x01	; 1
    9a16:	90 e0       	ldi	r25, 0x00	; 0
    9a18:	89 83       	std	Y+1, r24	; 0x01
    9a1a:	9a 83       	std	Y+2, r25	; 0x02
    9a1c:	3a c0       	rjmp	.+116    	; 0x9a92 <ld_init+0xd0>
    9a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    9a20:	9e 81       	ldd	r25, Y+6	; 0x06
    9a22:	ac 01       	movw	r20, r24
    9a24:	45 50       	subi	r20, 0x05	; 5
    9a26:	51 09       	sbc	r21, r1
    9a28:	9a 01       	movw	r18, r20
    9a2a:	ab ea       	ldi	r26, 0xAB	; 171
    9a2c:	ba ea       	ldi	r27, 0xAA	; 170
    9a2e:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__umulhisi3>
    9a32:	9c 01       	movw	r18, r24
    9a34:	36 95       	lsr	r19
    9a36:	27 95       	ror	r18
    9a38:	36 95       	lsr	r19
    9a3a:	27 95       	ror	r18
    9a3c:	c9 01       	movw	r24, r18
    9a3e:	88 0f       	add	r24, r24
    9a40:	99 1f       	adc	r25, r25
    9a42:	82 0f       	add	r24, r18
    9a44:	93 1f       	adc	r25, r19
    9a46:	88 0f       	add	r24, r24
    9a48:	99 1f       	adc	r25, r25
    9a4a:	9a 01       	movw	r18, r20
    9a4c:	28 1b       	sub	r18, r24
    9a4e:	39 0b       	sbc	r19, r25
    9a50:	23 2b       	or	r18, r19
    9a52:	81 f4       	brne	.+32     	; 0x9a74 <ld_init+0xb2>
    9a54:	8d 81       	ldd	r24, Y+5	; 0x05
    9a56:	9e 81       	ldd	r25, Y+6	; 0x06
    9a58:	05 97       	sbiw	r24, 0x05	; 5
    9a5a:	9c 01       	movw	r18, r24
    9a5c:	ab ea       	ldi	r26, 0xAB	; 171
    9a5e:	ba ea       	ldi	r27, 0xAA	; 170
    9a60:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__umulhisi3>
    9a64:	96 95       	lsr	r25
    9a66:	87 95       	ror	r24
    9a68:	96 95       	lsr	r25
    9a6a:	87 95       	ror	r24
    9a6c:	01 96       	adiw	r24, 0x01	; 1
    9a6e:	89 83       	std	Y+1, r24	; 0x01
    9a70:	9a 83       	std	Y+2, r25	; 0x02
    9a72:	0f c0       	rjmp	.+30     	; 0x9a92 <ld_init+0xd0>
    9a74:	8d 81       	ldd	r24, Y+5	; 0x05
    9a76:	9e 81       	ldd	r25, Y+6	; 0x06
    9a78:	05 97       	sbiw	r24, 0x05	; 5
    9a7a:	9c 01       	movw	r18, r24
    9a7c:	ab ea       	ldi	r26, 0xAB	; 171
    9a7e:	ba ea       	ldi	r27, 0xAA	; 170
    9a80:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__umulhisi3>
    9a84:	96 95       	lsr	r25
    9a86:	87 95       	ror	r24
    9a88:	96 95       	lsr	r25
    9a8a:	87 95       	ror	r24
    9a8c:	02 96       	adiw	r24, 0x02	; 2
    9a8e:	89 83       	std	Y+1, r24	; 0x01
    9a90:	9a 83       	std	Y+2, r25	; 0x02
    9a92:	89 85       	ldd	r24, Y+9	; 0x09
    9a94:	28 2f       	mov	r18, r24
    9a96:	30 e0       	ldi	r19, 0x00	; 0
    9a98:	4c e1       	ldi	r20, 0x1C	; 28
    9a9a:	42 9f       	mul	r20, r18
    9a9c:	c0 01       	movw	r24, r0
    9a9e:	43 9f       	mul	r20, r19
    9aa0:	90 0d       	add	r25, r0
    9aa2:	11 24       	eor	r1, r1
    9aa4:	80 55       	subi	r24, 0x50	; 80
    9aa6:	9d 4b       	sbci	r25, 0xBD	; 189
    9aa8:	fc 01       	movw	r30, r24
    9aaa:	20 81       	ld	r18, Z
    9aac:	31 81       	ldd	r19, Z+1	; 0x01
    9aae:	8b 81       	ldd	r24, Y+3	; 0x03
    9ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    9ab2:	fc 01       	movw	r30, r24
    9ab4:	21 87       	std	Z+9, r18	; 0x09
    9ab6:	32 87       	std	Z+10, r19	; 0x0a
    9ab8:	89 85       	ldd	r24, Y+9	; 0x09
    9aba:	28 2f       	mov	r18, r24
    9abc:	30 e0       	ldi	r19, 0x00	; 0
    9abe:	4c e1       	ldi	r20, 0x1C	; 28
    9ac0:	42 9f       	mul	r20, r18
    9ac2:	c0 01       	movw	r24, r0
    9ac4:	43 9f       	mul	r20, r19
    9ac6:	90 0d       	add	r25, r0
    9ac8:	11 24       	eor	r1, r1
    9aca:	8e 54       	subi	r24, 0x4E	; 78
    9acc:	9d 4b       	sbci	r25, 0xBD	; 189
    9ace:	fc 01       	movw	r30, r24
    9ad0:	20 81       	ld	r18, Z
    9ad2:	31 81       	ldd	r19, Z+1	; 0x01
    9ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    9ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    9ad8:	fc 01       	movw	r30, r24
    9ada:	24 8b       	std	Z+20, r18	; 0x14
    9adc:	35 8b       	std	Z+21, r19	; 0x15
    9ade:	89 85       	ldd	r24, Y+9	; 0x09
    9ae0:	28 2f       	mov	r18, r24
    9ae2:	30 e0       	ldi	r19, 0x00	; 0
    9ae4:	c9 01       	movw	r24, r18
    9ae6:	88 0f       	add	r24, r24
    9ae8:	99 1f       	adc	r25, r25
    9aea:	88 0f       	add	r24, r24
    9aec:	99 1f       	adc	r25, r25
    9aee:	82 0f       	add	r24, r18
    9af0:	93 1f       	adc	r25, r19
    9af2:	9c 01       	movw	r18, r24
    9af4:	23 5b       	subi	r18, 0xB3	; 179
    9af6:	3a 4b       	sbci	r19, 0xBA	; 186
    9af8:	8b 81       	ldd	r24, Y+3	; 0x03
    9afa:	9c 81       	ldd	r25, Y+4	; 0x04
    9afc:	fc 01       	movw	r30, r24
    9afe:	22 a3       	std	Z+34, r18	; 0x22
    9b00:	33 a3       	std	Z+35, r19	; 0x23
    9b02:	8b 81       	ldd	r24, Y+3	; 0x03
    9b04:	9c 81       	ldd	r25, Y+4	; 0x04
    9b06:	29 81       	ldd	r18, Y+1	; 0x01
    9b08:	3a 81       	ldd	r19, Y+2	; 0x02
    9b0a:	fc 01       	movw	r30, r24
    9b0c:	27 83       	std	Z+7, r18	; 0x07
    9b0e:	30 87       	std	Z+8, r19	; 0x08
    9b10:	8b 81       	ldd	r24, Y+3	; 0x03
    9b12:	9c 81       	ldd	r25, Y+4	; 0x04
    9b14:	29 81       	ldd	r18, Y+1	; 0x01
    9b16:	3a 81       	ldd	r19, Y+2	; 0x02
    9b18:	fc 01       	movw	r30, r24
    9b1a:	22 8b       	std	Z+18, r18	; 0x12
    9b1c:	33 8b       	std	Z+19, r19	; 0x13
    9b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    9b20:	9c 81       	ldd	r25, Y+4	; 0x04
    9b22:	8f 83       	std	Y+7, r24	; 0x07
    9b24:	98 87       	std	Y+8, r25	; 0x08
    9b26:	8f 81       	ldd	r24, Y+7	; 0x07
    9b28:	98 85       	ldd	r25, Y+8	; 0x08
    9b2a:	fc 01       	movw	r30, r24
    9b2c:	10 82       	st	Z, r1
    9b2e:	11 82       	std	Z+1, r1	; 0x01
    9b30:	8f 81       	ldd	r24, Y+7	; 0x07
    9b32:	98 85       	ldd	r25, Y+8	; 0x08
    9b34:	fc 01       	movw	r30, r24
    9b36:	12 82       	std	Z+2, r1	; 0x02
    9b38:	13 82       	std	Z+3, r1	; 0x03
    9b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    9b3c:	98 85       	ldd	r25, Y+8	; 0x08
    9b3e:	25 e0       	ldi	r18, 0x05	; 5
    9b40:	fc 01       	movw	r30, r24
    9b42:	24 83       	std	Z+4, r18	; 0x04
    9b44:	8f 81       	ldd	r24, Y+7	; 0x07
    9b46:	98 85       	ldd	r25, Y+8	; 0x08
    9b48:	fc 01       	movw	r30, r24
    9b4a:	15 82       	std	Z+5, r1	; 0x05
    9b4c:	16 82       	std	Z+6, r1	; 0x06
    9b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    9b50:	9c 81       	ldd	r25, Y+4	; 0x04
    9b52:	0b 96       	adiw	r24, 0x0b	; 11
    9b54:	8f 83       	std	Y+7, r24	; 0x07
    9b56:	98 87       	std	Y+8, r25	; 0x08
    9b58:	8f 81       	ldd	r24, Y+7	; 0x07
    9b5a:	98 85       	ldd	r25, Y+8	; 0x08
    9b5c:	fc 01       	movw	r30, r24
    9b5e:	10 82       	st	Z, r1
    9b60:	11 82       	std	Z+1, r1	; 0x01
    9b62:	8f 81       	ldd	r24, Y+7	; 0x07
    9b64:	98 85       	ldd	r25, Y+8	; 0x08
    9b66:	fc 01       	movw	r30, r24
    9b68:	12 82       	std	Z+2, r1	; 0x02
    9b6a:	13 82       	std	Z+3, r1	; 0x03
    9b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    9b6e:	98 85       	ldd	r25, Y+8	; 0x08
    9b70:	fc 01       	movw	r30, r24
    9b72:	14 82       	std	Z+4, r1	; 0x04
    9b74:	8f 81       	ldd	r24, Y+7	; 0x07
    9b76:	98 85       	ldd	r25, Y+8	; 0x08
    9b78:	fc 01       	movw	r30, r24
    9b7a:	15 82       	std	Z+5, r1	; 0x05
    9b7c:	16 82       	std	Z+6, r1	; 0x06
    9b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    9b80:	9c 81       	ldd	r25, Y+4	; 0x04
    9b82:	22 e0       	ldi	r18, 0x02	; 2
    9b84:	fc 01       	movw	r30, r24
    9b86:	26 8b       	std	Z+22, r18	; 0x16
    9b88:	8b 81       	ldd	r24, Y+3	; 0x03
    9b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    9b8c:	22 e0       	ldi	r18, 0x02	; 2
    9b8e:	fc 01       	movw	r30, r24
    9b90:	21 8f       	std	Z+25, r18	; 0x19
    9b92:	8b 81       	ldd	r24, Y+3	; 0x03
    9b94:	9c 81       	ldd	r25, Y+4	; 0x04
    9b96:	fc 01       	movw	r30, r24
    9b98:	14 8e       	std	Z+28, r1	; 0x1c
    9b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    9b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    9b9e:	fc 01       	movw	r30, r24
    9ba0:	15 8e       	std	Z+29, r1	; 0x1d
    9ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    9ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    9ba6:	fc 01       	movw	r30, r24
    9ba8:	16 8e       	std	Z+30, r1	; 0x1e
    9baa:	8b 81       	ldd	r24, Y+3	; 0x03
    9bac:	9c 81       	ldd	r25, Y+4	; 0x04
    9bae:	fc 01       	movw	r30, r24
    9bb0:	15 a2       	std	Z+37, r1	; 0x25
    9bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    9bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    9bb6:	fc 01       	movw	r30, r24
    9bb8:	14 a2       	std	Z+36, r1	; 0x24
    9bba:	8b 81       	ldd	r24, Y+3	; 0x03
    9bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    9bbe:	fc 01       	movw	r30, r24
    9bc0:	12 a6       	std	Z+42, r1	; 0x2a
    9bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    9bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    9bc6:	fc 01       	movw	r30, r24
    9bc8:	17 8e       	std	Z+31, r1	; 0x1f
    9bca:	8b 81       	ldd	r24, Y+3	; 0x03
    9bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    9bce:	fc 01       	movw	r30, r24
    9bd0:	10 a2       	std	Z+32, r1	; 0x20
    9bd2:	11 a2       	std	Z+33, r1	; 0x21
    9bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    9bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    9bd8:	21 e0       	ldi	r18, 0x01	; 1
    9bda:	fc 01       	movw	r30, r24
    9bdc:	26 a3       	std	Z+38, r18	; 0x26
    9bde:	8b 81       	ldd	r24, Y+3	; 0x03
    9be0:	9c 81       	ldd	r25, Y+4	; 0x04
    9be2:	22 e0       	ldi	r18, 0x02	; 2
    9be4:	fc 01       	movw	r30, r24
    9be6:	23 a7       	std	Z+43, r18	; 0x2b
    9be8:	8b 81       	ldd	r24, Y+3	; 0x03
    9bea:	9c 81       	ldd	r25, Y+4	; 0x04
    9bec:	fc 01       	movw	r30, r24
    9bee:	17 a2       	std	Z+39, r1	; 0x27
    9bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    9bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    9bf4:	fc 01       	movw	r30, r24
    9bf6:	10 a6       	std	Z+40, r1	; 0x28
    9bf8:	11 a6       	std	Z+41, r1	; 0x29
    9bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    9bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    9bfe:	fc 01       	movw	r30, r24
    9c00:	15 a6       	std	Z+45, r1	; 0x2d
    9c02:	8b 81       	ldd	r24, Y+3	; 0x03
    9c04:	9c 81       	ldd	r25, Y+4	; 0x04
    9c06:	fc 01       	movw	r30, r24
    9c08:	14 a6       	std	Z+44, r1	; 0x2c
    9c0a:	00 00       	nop
    9c0c:	29 96       	adiw	r28, 0x09	; 9
    9c0e:	cd bf       	out	0x3d, r28	; 61
    9c10:	de bf       	out	0x3e, r29	; 62
    9c12:	df 91       	pop	r29
    9c14:	cf 91       	pop	r28
    9c16:	08 95       	ret

00009c18 <ld_put_raw>:
    9c18:	cf 93       	push	r28
    9c1a:	df 93       	push	r29
    9c1c:	cd b7       	in	r28, 0x3d	; 61
    9c1e:	de b7       	in	r29, 0x3e	; 62
    9c20:	2b 97       	sbiw	r28, 0x0b	; 11
    9c22:	cd bf       	out	0x3d, r28	; 61
    9c24:	de bf       	out	0x3e, r29	; 62
    9c26:	89 87       	std	Y+9, r24	; 0x09
    9c28:	6a 87       	std	Y+10, r22	; 0x0a
    9c2a:	7b 87       	std	Y+11, r23	; 0x0b
    9c2c:	89 85       	ldd	r24, Y+9	; 0x09
    9c2e:	28 2f       	mov	r18, r24
    9c30:	30 e0       	ldi	r19, 0x00	; 0
    9c32:	44 e3       	ldi	r20, 0x34	; 52
    9c34:	42 9f       	mul	r20, r18
    9c36:	c0 01       	movw	r24, r0
    9c38:	43 9f       	mul	r20, r19
    9c3a:	90 0d       	add	r25, r0
    9c3c:	11 24       	eor	r1, r1
    9c3e:	84 59       	subi	r24, 0x94	; 148
    9c40:	99 4b       	sbci	r25, 0xB9	; 185
    9c42:	89 83       	std	Y+1, r24	; 0x01
    9c44:	9a 83       	std	Y+2, r25	; 0x02
    9c46:	89 85       	ldd	r24, Y+9	; 0x09
    9c48:	28 2f       	mov	r18, r24
    9c4a:	30 e0       	ldi	r19, 0x00	; 0
    9c4c:	4c e1       	ldi	r20, 0x1C	; 28
    9c4e:	42 9f       	mul	r20, r18
    9c50:	c0 01       	movw	r24, r0
    9c52:	43 9f       	mul	r20, r19
    9c54:	90 0d       	add	r25, r0
    9c56:	11 24       	eor	r1, r1
    9c58:	86 56       	subi	r24, 0x66	; 102
    9c5a:	9d 4b       	sbci	r25, 0xBD	; 189
    9c5c:	8b 83       	std	Y+3, r24	; 0x03
    9c5e:	9c 83       	std	Y+4, r25	; 0x04
    9c60:	8b 81       	ldd	r24, Y+3	; 0x03
    9c62:	9c 81       	ldd	r25, Y+4	; 0x04
    9c64:	fc 01       	movw	r30, r24
    9c66:	93 81       	ldd	r25, Z+3	; 0x03
    9c68:	81 e0       	ldi	r24, 0x01	; 1
    9c6a:	89 27       	eor	r24, r25
    9c6c:	88 23       	and	r24, r24
    9c6e:	71 f1       	breq	.+92     	; 0x9ccc <ld_put_raw+0xb4>
    9c70:	8b 81       	ldd	r24, Y+3	; 0x03
    9c72:	9c 81       	ldd	r25, Y+4	; 0x04
    9c74:	fc 01       	movw	r30, r24
    9c76:	80 81       	ld	r24, Z
    9c78:	88 23       	and	r24, r24
    9c7a:	41 f5       	brne	.+80     	; 0x9ccc <ld_put_raw+0xb4>
    9c7c:	89 85       	ldd	r24, Y+9	; 0x09
    9c7e:	28 2f       	mov	r18, r24
    9c80:	30 e0       	ldi	r19, 0x00	; 0
    9c82:	4c e1       	ldi	r20, 0x1C	; 28
    9c84:	42 9f       	mul	r20, r18
    9c86:	c0 01       	movw	r24, r0
    9c88:	43 9f       	mul	r20, r19
    9c8a:	90 0d       	add	r25, r0
    9c8c:	11 24       	eor	r1, r1
    9c8e:	84 55       	subi	r24, 0x54	; 84
    9c90:	9d 4b       	sbci	r25, 0xBD	; 189
    9c92:	fc 01       	movw	r30, r24
    9c94:	80 81       	ld	r24, Z
    9c96:	28 2f       	mov	r18, r24
    9c98:	30 e0       	ldi	r19, 0x00	; 0
    9c9a:	44 e2       	ldi	r20, 0x24	; 36
    9c9c:	42 9f       	mul	r20, r18
    9c9e:	c0 01       	movw	r24, r0
    9ca0:	43 9f       	mul	r20, r19
    9ca2:	90 0d       	add	r25, r0
    9ca4:	11 24       	eor	r1, r1
    9ca6:	8a 58       	subi	r24, 0x8A	; 138
    9ca8:	9d 4b       	sbci	r25, 0xBD	; 189
    9caa:	8d 83       	std	Y+5, r24	; 0x05
    9cac:	9e 83       	std	Y+6, r25	; 0x06
    9cae:	8d 81       	ldd	r24, Y+5	; 0x05
    9cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    9cb2:	fc 01       	movw	r30, r24
    9cb4:	23 8d       	ldd	r18, Z+27	; 0x1b
    9cb6:	34 8d       	ldd	r19, Z+28	; 0x1c
    9cb8:	89 81       	ldd	r24, Y+1	; 0x01
    9cba:	9a 81       	ldd	r25, Y+2	; 0x02
    9cbc:	fc 01       	movw	r30, r24
    9cbe:	20 a3       	std	Z+32, r18	; 0x20
    9cc0:	31 a3       	std	Z+33, r19	; 0x21
    9cc2:	89 81       	ldd	r24, Y+1	; 0x01
    9cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    9cc6:	21 e0       	ldi	r18, 0x01	; 1
    9cc8:	fc 01       	movw	r30, r24
    9cca:	27 8f       	std	Z+31, r18	; 0x1f
    9ccc:	89 81       	ldd	r24, Y+1	; 0x01
    9cce:	9a 81       	ldd	r25, Y+2	; 0x02
    9cd0:	8f 83       	std	Y+7, r24	; 0x07
    9cd2:	98 87       	std	Y+8, r25	; 0x08
    9cd4:	89 81       	ldd	r24, Y+1	; 0x01
    9cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    9cd8:	fc 01       	movw	r30, r24
    9cda:	82 a5       	ldd	r24, Z+42	; 0x2a
    9cdc:	21 e0       	ldi	r18, 0x01	; 1
    9cde:	28 0f       	add	r18, r24
    9ce0:	89 81       	ldd	r24, Y+1	; 0x01
    9ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    9ce4:	fc 01       	movw	r30, r24
    9ce6:	22 a7       	std	Z+42, r18	; 0x2a
    9ce8:	4f 81       	ldd	r20, Y+7	; 0x07
    9cea:	58 85       	ldd	r21, Y+8	; 0x08
    9cec:	8a 85       	ldd	r24, Y+10	; 0x0a
    9cee:	9b 85       	ldd	r25, Y+11	; 0x0b
    9cf0:	20 e0       	ldi	r18, 0x00	; 0
    9cf2:	bc 01       	movw	r22, r24
    9cf4:	89 85       	ldd	r24, Y+9	; 0x09
    9cf6:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <tl_put_raw>
    9cfa:	00 00       	nop
    9cfc:	2b 96       	adiw	r28, 0x0b	; 11
    9cfe:	cd bf       	out	0x3d, r28	; 61
    9d00:	de bf       	out	0x3e, r29	; 62
    9d02:	df 91       	pop	r29
    9d04:	cf 91       	pop	r28
    9d06:	08 95       	ret

00009d08 <ld_get_raw>:
    9d08:	cf 93       	push	r28
    9d0a:	df 93       	push	r29
    9d0c:	cd b7       	in	r28, 0x3d	; 61
    9d0e:	de b7       	in	r29, 0x3e	; 62
    9d10:	25 97       	sbiw	r28, 0x05	; 5
    9d12:	cd bf       	out	0x3d, r28	; 61
    9d14:	de bf       	out	0x3e, r29	; 62
    9d16:	8b 83       	std	Y+3, r24	; 0x03
    9d18:	6c 83       	std	Y+4, r22	; 0x04
    9d1a:	7d 83       	std	Y+5, r23	; 0x05
    9d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    9d1e:	28 2f       	mov	r18, r24
    9d20:	30 e0       	ldi	r19, 0x00	; 0
    9d22:	44 e3       	ldi	r20, 0x34	; 52
    9d24:	42 9f       	mul	r20, r18
    9d26:	c0 01       	movw	r24, r0
    9d28:	43 9f       	mul	r20, r19
    9d2a:	90 0d       	add	r25, r0
    9d2c:	11 24       	eor	r1, r1
    9d2e:	0b 96       	adiw	r24, 0x0b	; 11
    9d30:	84 59       	subi	r24, 0x94	; 148
    9d32:	99 4b       	sbci	r25, 0xB9	; 185
    9d34:	89 83       	std	Y+1, r24	; 0x01
    9d36:	9a 83       	std	Y+2, r25	; 0x02
    9d38:	49 81       	ldd	r20, Y+1	; 0x01
    9d3a:	5a 81       	ldd	r21, Y+2	; 0x02
    9d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    9d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    9d40:	21 e0       	ldi	r18, 0x01	; 1
    9d42:	bc 01       	movw	r22, r24
    9d44:	8b 81       	ldd	r24, Y+3	; 0x03
    9d46:	0e 94 38 56 	call	0xac70	; 0xac70 <tl_get_raw>
    9d4a:	00 00       	nop
    9d4c:	25 96       	adiw	r28, 0x05	; 5
    9d4e:	cd bf       	out	0x3d, r28	; 61
    9d50:	de bf       	out	0x3e, r29	; 62
    9d52:	df 91       	pop	r29
    9d54:	cf 91       	pop	r28
    9d56:	08 95       	ret

00009d58 <ld_raw_rx_status>:
 * Description   : Get the status of the raw frame receive function.
 *
 * Implements    : ld_raw_rx_status_Activity
 *END**************************************************************************/
l_u8 ld_raw_rx_status(l_ifc_handle iii)
{
    9d58:	cf 93       	push	r28
    9d5a:	df 93       	push	r29
    9d5c:	1f 92       	push	r1
    9d5e:	cd b7       	in	r28, 0x3d	; 61
    9d60:	de b7       	in	r29, 0x3e	; 62
    9d62:	89 83       	std	Y+1, r24	; 0x01
    DEV_ASSERT((l_u8)iii < LIN_NUM_OF_IFCS);

    return (l_u8)(g_lin_tl_descriptor_array[iii].tl_rx_queue.queue_status);
    9d64:	89 81       	ldd	r24, Y+1	; 0x01
    9d66:	28 2f       	mov	r18, r24
    9d68:	30 e0       	ldi	r19, 0x00	; 0
    9d6a:	44 e3       	ldi	r20, 0x34	; 52
    9d6c:	42 9f       	mul	r20, r18
    9d6e:	c0 01       	movw	r24, r0
    9d70:	43 9f       	mul	r20, r19
    9d72:	90 0d       	add	r25, r0
    9d74:	11 24       	eor	r1, r1
    9d76:	85 58       	subi	r24, 0x85	; 133
    9d78:	99 4b       	sbci	r25, 0xB9	; 185
    9d7a:	fc 01       	movw	r30, r24
    9d7c:	80 81       	ld	r24, Z
}
    9d7e:	0f 90       	pop	r0
    9d80:	df 91       	pop	r29
    9d82:	cf 91       	pop	r28
    9d84:	08 95       	ret

00009d86 <lin_tl_callback_handler>:
 * Implements    : lin_tl_callback_handler_Activity
 *END**************************************************************************/
lin_tl_callback_return_t lin_tl_callback_handler(l_ifc_handle iii,
                                                 lin_tl_event_id_t tl_event_id,
                                                 l_u8 id)
{
    9d86:	cf 93       	push	r28
    9d88:	df 93       	push	r29
    9d8a:	cd b7       	in	r28, 0x3d	; 61
    9d8c:	de b7       	in	r29, 0x3e	; 62
    9d8e:	26 97       	sbiw	r28, 0x06	; 6
    9d90:	cd bf       	out	0x3d, r28	; 61
    9d92:	de bf       	out	0x3e, r29	; 62
    9d94:	8c 83       	std	Y+4, r24	; 0x04
    9d96:	6d 83       	std	Y+5, r22	; 0x05
    9d98:	4e 83       	std	Y+6, r20	; 0x06
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    9d9c:	28 2f       	mov	r18, r24
    9d9e:	30 e0       	ldi	r19, 0x00	; 0
    9da0:	44 e3       	ldi	r20, 0x34	; 52
    9da2:	42 9f       	mul	r20, r18
    9da4:	c0 01       	movw	r24, r0
    9da6:	43 9f       	mul	r20, r19
    9da8:	90 0d       	add	r25, r0
    9daa:	11 24       	eor	r1, r1
    9dac:	84 59       	subi	r24, 0x94	; 148
    9dae:	99 4b       	sbci	r25, 0xB9	; 185
    9db0:	8a 83       	std	Y+2, r24	; 0x02
    9db2:	9b 83       	std	Y+3, r25	; 0x03
    lin_tl_callback_return_t ret_val = TL_ACTION_NONE;
    9db4:	19 82       	std	Y+1, r1	; 0x01

    switch (tl_event_id)
    9db6:	8d 81       	ldd	r24, Y+5	; 0x05
    9db8:	88 2f       	mov	r24, r24
    9dba:	90 e0       	ldi	r25, 0x00	; 0
    9dbc:	09 2e       	mov	r0, r25
    9dbe:	00 0c       	add	r0, r0
    9dc0:	aa 0b       	sbc	r26, r26
    9dc2:	bb 0b       	sbc	r27, r27
    9dc4:	40 e0       	ldi	r20, 0x00	; 0
    9dc6:	50 e0       	ldi	r21, 0x00	; 0
    9dc8:	27 e0       	ldi	r18, 0x07	; 7
    9dca:	30 e0       	ldi	r19, 0x00	; 0
    9dcc:	84 1b       	sub	r24, r20
    9dce:	95 0b       	sbc	r25, r21
    9dd0:	28 17       	cp	r18, r24
    9dd2:	39 07       	cpc	r19, r25
    9dd4:	08 f4       	brcc	.+2      	; 0x9dd8 <lin_tl_callback_handler+0x52>
    9dd6:	4c c0       	rjmp	.+152    	; 0x9e70 <lin_tl_callback_handler+0xea>
    9dd8:	8a 59       	subi	r24, 0x9A	; 154
    9dda:	9b 4d       	sbci	r25, 0xDB	; 219
    9ddc:	fc 01       	movw	r30, r24
    9dde:	0c 94 d4 78 	jmp	0xf1a8	; 0xf1a8 <__tablejump2__>
    {
        case TL_RECEIVE_MESSAGE:
            /* If ld_receive_message is called and first frame in multi PDU is not transmitted */
            if ((tl_desc_ptr->rx_msg_status == LD_IN_PROGRESS) && (tl_desc_ptr->FF_pdu_received == false))
    9de2:	8a 81       	ldd	r24, Y+2	; 0x02
    9de4:	9b 81       	ldd	r25, Y+3	; 0x03
    9de6:	fc 01       	movw	r30, r24
    9de8:	86 89       	ldd	r24, Z+22	; 0x16
    9dea:	81 30       	cpi	r24, 0x01	; 1
    9dec:	09 f0       	breq	.+2      	; 0x9df0 <lin_tl_callback_handler+0x6a>
    9dee:	42 c0       	rjmp	.+132    	; 0x9e74 <lin_tl_callback_handler+0xee>
    9df0:	8a 81       	ldd	r24, Y+2	; 0x02
    9df2:	9b 81       	ldd	r25, Y+3	; 0x03
    9df4:	fc 01       	movw	r30, r24
    9df6:	95 a5       	ldd	r25, Z+45	; 0x2d
    9df8:	81 e0       	ldi	r24, 0x01	; 1
    9dfa:	89 27       	eor	r24, r25
    9dfc:	88 23       	and	r24, r24
    9dfe:	d1 f1       	breq	.+116    	; 0x9e74 <lin_tl_callback_handler+0xee>
            {
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
    9e00:	8a 81       	ldd	r24, Y+2	; 0x02
    9e02:	9b 81       	ldd	r25, Y+3	; 0x03
    9e04:	21 e0       	ldi	r18, 0x01	; 1
    9e06:	fc 01       	movw	r30, r24
    9e08:	24 a7       	std	Z+44, r18	; 0x2c
            }
            break;
    9e0a:	34 c0       	rjmp	.+104    	; 0x9e74 <lin_tl_callback_handler+0xee>
        case TL_MAKE_RES_DATA:
            lin_tl_make_master_request_pdu(iii);
    9e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    9e0e:	0e 94 0e 53 	call	0xa61c	; 0xa61c <lin_tl_make_master_request_pdu>
            break;
    9e12:	31 c0       	rjmp	.+98     	; 0x9e76 <lin_tl_callback_handler+0xf0>
        case TL_SLAVE_GET_ACTION:
            if ((tl_desc_ptr->slave_resp_cnt > 0U) && (tl_desc_ptr->service_status != LD_SERVICE_ERROR))
    9e14:	8a 81       	ldd	r24, Y+2	; 0x02
    9e16:	9b 81       	ldd	r25, Y+3	; 0x03
    9e18:	fc 01       	movw	r30, r24
    9e1a:	82 a5       	ldd	r24, Z+42	; 0x2a
    9e1c:	88 23       	and	r24, r24
    9e1e:	a1 f0       	breq	.+40     	; 0x9e48 <lin_tl_callback_handler+0xc2>
    9e20:	8a 81       	ldd	r24, Y+2	; 0x02
    9e22:	9b 81       	ldd	r25, Y+3	; 0x03
    9e24:	fc 01       	movw	r30, r24
    9e26:	83 a5       	ldd	r24, Z+43	; 0x2b
    9e28:	83 30       	cpi	r24, 0x03	; 3
    9e2a:	71 f0       	breq	.+28     	; 0x9e48 <lin_tl_callback_handler+0xc2>
            {
                tl_desc_ptr->slave_resp_cnt--;
    9e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e30:	fc 01       	movw	r30, r24
    9e32:	82 a5       	ldd	r24, Z+42	; 0x2a
    9e34:	2f ef       	ldi	r18, 0xFF	; 255
    9e36:	28 0f       	add	r18, r24
    9e38:	8a 81       	ldd	r24, Y+2	; 0x02
    9e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    9e3c:	fc 01       	movw	r30, r24
    9e3e:	22 a7       	std	Z+42, r18	; 0x2a
                lin_tl_get_pdu(iii);
    9e40:	8c 81       	ldd	r24, Y+4	; 0x04
    9e42:	0e 94 44 53 	call	0xa688	; 0xa688 <lin_tl_get_pdu>
            }
            else
            {
                ret_val = TL_ACTION_ID_IGNORE;
            }
            break;
    9e46:	17 c0       	rjmp	.+46     	; 0x9e76 <lin_tl_callback_handler+0xf0>
                tl_desc_ptr->slave_resp_cnt--;
                lin_tl_get_pdu(iii);
            }
            else
            {
                ret_val = TL_ACTION_ID_IGNORE;
    9e48:	81 e0       	ldi	r24, 0x01	; 1
    9e4a:	89 83       	std	Y+1, r24	; 0x01
            }
            break;
    9e4c:	14 c0       	rjmp	.+40     	; 0x9e76 <lin_tl_callback_handler+0xf0>
        case TL_TX_COMPLETED:
            lin_tl_handler_tx_completed(iii);
    9e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    9e50:	0e 94 38 54 	call	0xa870	; 0xa870 <lin_tl_handler_tx_completed>
            break;
    9e54:	10 c0       	rjmp	.+32     	; 0x9e76 <lin_tl_callback_handler+0xf0>
        case TL_RX_COMPLETED:
            lin_tl_handler_rx_completed(iii);
    9e56:	8c 81       	ldd	r24, Y+4	; 0x04
    9e58:	0e 94 6e 53 	call	0xa6dc	; 0xa6dc <lin_tl_handler_rx_completed>
            break;
    9e5c:	0c c0       	rjmp	.+24     	; 0x9e76 <lin_tl_callback_handler+0xf0>
        case TL_ERROR:
            lin_tl_handler_error(iii, id);
    9e5e:	6e 81       	ldd	r22, Y+6	; 0x06
    9e60:	8c 81       	ldd	r24, Y+4	; 0x04
    9e62:	0e 94 a7 52 	call	0xa54e	; 0xa54e <lin_tl_handler_error>
            break;
    9e66:	07 c0       	rjmp	.+14     	; 0x9e76 <lin_tl_callback_handler+0xf0>
        #if (SUPPORT_PROTOCOL_21 == 1U)
        case TL_TIMEOUT_SERVICE:
            lin_tl_handle_timeout(iii);
    9e68:	8c 81       	ldd	r24, Y+4	; 0x04
    9e6a:	0e 94 42 4f 	call	0x9e84	; 0x9e84 <lin_tl_handle_timeout>
            break;
    9e6e:	03 c0       	rjmp	.+6      	; 0x9e76 <lin_tl_callback_handler+0xf0>
            lin_tl_handle_interleave_mode(iii);
            break;
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        default:
            /* Do nothing */
            break;
    9e70:	00 00       	nop
    9e72:	01 c0       	rjmp	.+2      	; 0x9e76 <lin_tl_callback_handler+0xf0>
            if ((tl_desc_ptr->rx_msg_status == LD_IN_PROGRESS) && (tl_desc_ptr->FF_pdu_received == false))
            {
              /* Activate function tl_receive_message() in process_pdu() function to return data to data pointer of ld_receive_message function */
              tl_desc_ptr->ld_return_data = true;
            }
            break;
    9e74:	00 00       	nop
        default:
            /* Do nothing */
            break;
    }

    return ret_val;
    9e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    9e78:	26 96       	adiw	r28, 0x06	; 6
    9e7a:	cd bf       	out	0x3d, r28	; 61
    9e7c:	de bf       	out	0x3e, r29	; 62
    9e7e:	df 91       	pop	r29
    9e80:	cf 91       	pop	r28
    9e82:	08 95       	ret

00009e84 <lin_tl_handle_timeout>:
 * Description   : This function handle when N_CR, N_AS or DIAGNOSTIC INTERLEAVE time out occur
 *
 * Implements    : lin_tl_handle_timeout_Activity
 *END**************************************************************************/
static void lin_tl_handle_timeout(l_ifc_handle iii)
{
    9e84:	cf 93       	push	r28
    9e86:	df 93       	push	r29
    9e88:	cd b7       	in	r28, 0x3d	; 61
    9e8a:	de b7       	in	r29, 0x3e	; 62
    9e8c:	25 97       	sbiw	r28, 0x05	; 5
    9e8e:	cd bf       	out	0x3d, r28	; 61
    9e90:	de bf       	out	0x3e, r29	; 62
    9e92:	8d 83       	std	Y+5, r24	; 0x05
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9e94:	8d 81       	ldd	r24, Y+5	; 0x05
    9e96:	28 2f       	mov	r18, r24
    9e98:	30 e0       	ldi	r19, 0x00	; 0
    9e9a:	44 e3       	ldi	r20, 0x34	; 52
    9e9c:	42 9f       	mul	r20, r18
    9e9e:	c0 01       	movw	r24, r0
    9ea0:	43 9f       	mul	r20, r19
    9ea2:	90 0d       	add	r25, r0
    9ea4:	11 24       	eor	r1, r1
    9ea6:	84 59       	subi	r24, 0x94	; 148
    9ea8:	99 4b       	sbci	r25, 0xB9	; 185
    9eaa:	89 83       	std	Y+1, r24	; 0x01
    9eac:	9a 83       	std	Y+2, r25	; 0x02
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9eae:	8d 81       	ldd	r24, Y+5	; 0x05
    9eb0:	28 2f       	mov	r18, r24
    9eb2:	30 e0       	ldi	r19, 0x00	; 0
    9eb4:	46 e1       	ldi	r20, 0x16	; 22
    9eb6:	42 9f       	mul	r20, r18
    9eb8:	c0 01       	movw	r24, r0
    9eba:	43 9f       	mul	r20, r19
    9ebc:	90 0d       	add	r25, r0
    9ebe:	11 24       	eor	r1, r1
    9ec0:	80 56       	subi	r24, 0x60	; 96
    9ec2:	99 4b       	sbci	r25, 0xB9	; 185
    9ec4:	8b 83       	std	Y+3, r24	; 0x03
    9ec6:	9c 83       	std	Y+4, r25	; 0x04
    #if (SUPPORT_MASTER_MODE == 1U)
    const lin_master_data_t * master_data_ptr;
    const lin_schedule_t * active_schedule_struct_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    if (LD_CHECK_N_CR_TIMEOUT == tl_desc_ptr->check_timeout_type)
    9ec8:	89 81       	ldd	r24, Y+1	; 0x01
    9eca:	9a 81       	ldd	r25, Y+2	; 0x02
    9ecc:	fc 01       	movw	r30, r24
    9ece:	87 8d       	ldd	r24, Z+31	; 0x1f
    9ed0:	82 30       	cpi	r24, 0x02	; 2
    9ed2:	71 f5       	brne	.+92     	; 0x9f30 <lin_tl_handle_timeout+0xac>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    9ed4:	89 81       	ldd	r24, Y+1	; 0x01
    9ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    9ed8:	fc 01       	movw	r30, r24
    9eda:	80 a1       	ldd	r24, Z+32	; 0x20
    9edc:	91 a1       	ldd	r25, Z+33	; 0x21
    9ede:	ac 01       	movw	r20, r24
    9ee0:	41 50       	subi	r20, 0x01	; 1
    9ee2:	51 09       	sbc	r21, r1
    9ee4:	29 81       	ldd	r18, Y+1	; 0x01
    9ee6:	3a 81       	ldd	r19, Y+2	; 0x02
    9ee8:	f9 01       	movw	r30, r18
    9eea:	40 a3       	std	Z+32, r20	; 0x20
    9eec:	51 a3       	std	Z+33, r21	; 0x21
    9eee:	89 2b       	or	r24, r25
    9ef0:	f9 f4       	brne	.+62     	; 0x9f30 <lin_tl_handle_timeout+0xac>
        {
            /* Update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    9ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    9ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    9ef6:	fc 01       	movw	r30, r24
    9ef8:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    9efa:	89 81       	ldd	r24, Y+1	; 0x01
    9efc:	9a 81       	ldd	r25, Y+2	; 0x02
    9efe:	23 e0       	ldi	r18, 0x03	; 3
    9f00:	fc 01       	movw	r30, r24
    9f02:	23 a7       	std	Z+43, r18	; 0x2b
            tl_desc_ptr->rx_msg_status = LD_N_CR_TIMEOUT;
    9f04:	89 81       	ldd	r24, Y+1	; 0x01
    9f06:	9a 81       	ldd	r25, Y+2	; 0x02
    9f08:	25 e0       	ldi	r18, 0x05	; 5
    9f0a:	fc 01       	movw	r30, r24
    9f0c:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->ld_return_data = false;
    9f0e:	89 81       	ldd	r24, Y+1	; 0x01
    9f10:	9a 81       	ldd	r25, Y+2	; 0x02
    9f12:	fc 01       	movw	r30, r24
    9f14:	14 a6       	std	Z+44, r1	; 0x2c
            tl_desc_ptr->FF_pdu_received = false;
    9f16:	89 81       	ldd	r24, Y+1	; 0x01
    9f18:	9a 81       	ldd	r25, Y+2	; 0x02
    9f1a:	fc 01       	movw	r30, r24
    9f1c:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    9f1e:	89 81       	ldd	r24, Y+1	; 0x01
    9f20:	9a 81       	ldd	r25, Y+2	; 0x02
    9f22:	fc 01       	movw	r30, r24
    9f24:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    9f26:	89 81       	ldd	r24, Y+1	; 0x01
    9f28:	9a 81       	ldd	r25, Y+2	; 0x02
    9f2a:	21 e0       	ldi	r18, 0x01	; 1
    9f2c:	fc 01       	movw	r30, r24
    9f2e:	26 a3       	std	Z+38, r18	; 0x26
        }
    }

    if (LD_CHECK_N_AS_TIMEOUT == tl_desc_ptr->check_timeout_type)
    9f30:	89 81       	ldd	r24, Y+1	; 0x01
    9f32:	9a 81       	ldd	r25, Y+2	; 0x02
    9f34:	fc 01       	movw	r30, r24
    9f36:	87 8d       	ldd	r24, Z+31	; 0x1f
    9f38:	81 30       	cpi	r24, 0x01	; 1
    9f3a:	31 f5       	brne	.+76     	; 0x9f88 <lin_tl_handle_timeout+0x104>
    {
        if (!(tl_desc_ptr->check_timeout-- > 0U))
    9f3c:	89 81       	ldd	r24, Y+1	; 0x01
    9f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    9f40:	fc 01       	movw	r30, r24
    9f42:	80 a1       	ldd	r24, Z+32	; 0x20
    9f44:	91 a1       	ldd	r25, Z+33	; 0x21
    9f46:	ac 01       	movw	r20, r24
    9f48:	41 50       	subi	r20, 0x01	; 1
    9f4a:	51 09       	sbc	r21, r1
    9f4c:	29 81       	ldd	r18, Y+1	; 0x01
    9f4e:	3a 81       	ldd	r19, Y+2	; 0x02
    9f50:	f9 01       	movw	r30, r18
    9f52:	40 a3       	std	Z+32, r20	; 0x20
    9f54:	51 a3       	std	Z+33, r21	; 0x21
    9f56:	89 2b       	or	r24, r25
    9f58:	b9 f4       	brne	.+46     	; 0x9f88 <lin_tl_handle_timeout+0x104>
        {
            /* update status of transport layer */
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
    9f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    9f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    9f5e:	fc 01       	movw	r30, r24
    9f60:	10 8a       	std	Z+16, r1	; 0x10
            tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    9f62:	89 81       	ldd	r24, Y+1	; 0x01
    9f64:	9a 81       	ldd	r25, Y+2	; 0x02
    9f66:	23 e0       	ldi	r18, 0x03	; 3
    9f68:	fc 01       	movw	r30, r24
    9f6a:	23 a7       	std	Z+43, r18	; 0x2b
            tl_desc_ptr->tx_msg_status = LD_N_AS_TIMEOUT;
    9f6c:	89 81       	ldd	r24, Y+1	; 0x01
    9f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    9f70:	24 e0       	ldi	r18, 0x04	; 4
    9f72:	fc 01       	movw	r30, r24
    9f74:	21 8f       	std	Z+25, r18	; 0x19
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    9f76:	89 81       	ldd	r24, Y+1	; 0x01
    9f78:	9a 81       	ldd	r25, Y+2	; 0x02
    9f7a:	fc 01       	movw	r30, r24
    9f7c:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    9f7e:	89 81       	ldd	r24, Y+1	; 0x01
    9f80:	9a 81       	ldd	r25, Y+2	; 0x02
    9f82:	21 e0       	ldi	r18, 0x01	; 1
    9f84:	fc 01       	movw	r30, r24
    9f86:	26 a3       	std	Z+38, r18	; 0x26
            prot_state_ptr->diagnostic_mode = DIAG_NONE;
            tl_desc_ptr->interleave_timeout_counter = 0U;
        }
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
}
    9f88:	00 00       	nop
    9f8a:	25 96       	adiw	r28, 0x05	; 5
    9f8c:	cd bf       	out	0x3d, r28	; 61
    9f8e:	de bf       	out	0x3e, r29	; 62
    9f90:	df 91       	pop	r29
    9f92:	cf 91       	pop	r28
    9f94:	08 95       	ret

00009f96 <lin_process_single_frame>:
 * Description   : Process single frame.
 *
 * Implements    : lin_process_single_frame_Activity
 *END**************************************************************************/
static void lin_process_single_frame(l_ifc_handle iii)
{
    9f96:	cf 93       	push	r28
    9f98:	df 93       	push	r29
    9f9a:	cd b7       	in	r28, 0x3d	; 61
    9f9c:	de b7       	in	r29, 0x3e	; 62
    9f9e:	28 97       	sbiw	r28, 0x08	; 8
    9fa0:	cd bf       	out	0x3d, r28	; 61
    9fa2:	de bf       	out	0x3e, r29	; 62
    9fa4:	88 87       	std	Y+8, r24	; 0x08
    l_u8 length;
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    9fa6:	88 85       	ldd	r24, Y+8	; 0x08
    9fa8:	28 2f       	mov	r18, r24
    9faa:	30 e0       	ldi	r19, 0x00	; 0
    9fac:	46 e1       	ldi	r20, 0x16	; 22
    9fae:	42 9f       	mul	r20, r18
    9fb0:	c0 01       	movw	r24, r0
    9fb2:	43 9f       	mul	r20, r19
    9fb4:	90 0d       	add	r25, r0
    9fb6:	11 24       	eor	r1, r1
    9fb8:	80 56       	subi	r24, 0x60	; 96
    9fba:	99 4b       	sbci	r25, 0xB9	; 185
    9fbc:	89 83       	std	Y+1, r24	; 0x01
    9fbe:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * data = prot_state_ptr->response_buffer_ptr;
    9fc0:	89 81       	ldd	r24, Y+1	; 0x01
    9fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    9fc4:	fc 01       	movw	r30, r24
    9fc6:	82 81       	ldd	r24, Z+2	; 0x02
    9fc8:	93 81       	ldd	r25, Z+3	; 0x03
    9fca:	8b 83       	std	Y+3, r24	; 0x03
    9fcc:	9c 83       	std	Y+4, r25	; 0x04
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    9fce:	88 85       	ldd	r24, Y+8	; 0x08
    9fd0:	28 2f       	mov	r18, r24
    9fd2:	30 e0       	ldi	r19, 0x00	; 0
    9fd4:	44 e3       	ldi	r20, 0x34	; 52
    9fd6:	42 9f       	mul	r20, r18
    9fd8:	c0 01       	movw	r24, r0
    9fda:	43 9f       	mul	r20, r19
    9fdc:	90 0d       	add	r25, r0
    9fde:	11 24       	eor	r1, r1
    9fe0:	84 59       	subi	r24, 0x94	; 148
    9fe2:	99 4b       	sbci	r25, 0xB9	; 185
    9fe4:	8d 83       	std	Y+5, r24	; 0x05
    9fe6:	9e 83       	std	Y+6, r25	; 0x06
    {
        master_data_ptr = &g_lin_master_data_array[g_lin_protocol_user_cfg_array[iii].master_ifc_handle];
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    length = (l_u8)(data[1] & 0x0FU);
    9fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    9fea:	9c 81       	ldd	r25, Y+4	; 0x04
    9fec:	01 96       	adiw	r24, 0x01	; 1
    9fee:	fc 01       	movw	r30, r24
    9ff0:	80 81       	ld	r24, Z
    9ff2:	8f 70       	andi	r24, 0x0F	; 15
    9ff4:	8f 83       	std	Y+7, r24	; 0x07
    /* check length of SF. If not valid, ignore this PDU */
    if (length <= 6U)
    9ff6:	8f 81       	ldd	r24, Y+7	; 0x07
    9ff8:	87 30       	cpi	r24, 0x07	; 7
    9ffa:	08 f0       	brcs	.+2      	; 0x9ffe <lin_process_single_frame+0x68>
    9ffc:	53 c0       	rjmp	.+166    	; 0xa0a4 <lin_process_single_frame+0x10e>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
        #if (SUPPORT_SLAVE_MODE == 1U)
            /* Slave interface */
            /* put PDU to rx queue */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    9ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    a000:	9e 81       	ldd	r25, Y+6	; 0x06
    a002:	fc 01       	movw	r30, r24
    a004:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    a006:	8d 81       	ldd	r24, Y+5	; 0x05
    a008:	9e 81       	ldd	r25, Y+6	; 0x06
    a00a:	21 e0       	ldi	r18, 0x01	; 1
    a00c:	fc 01       	movw	r30, r24
    a00e:	23 a7       	std	Z+43, r18	; 0x2b
            /* reset queue header and queue tail */
            tl_desc_ptr->tl_rx_queue.queue_header = 0;
    a010:	8d 81       	ldd	r24, Y+5	; 0x05
    a012:	9e 81       	ldd	r25, Y+6	; 0x06
    a014:	fc 01       	movw	r30, r24
    a016:	13 86       	std	Z+11, r1	; 0x0b
    a018:	14 86       	std	Z+12, r1	; 0x0c
            tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    a01a:	8d 81       	ldd	r24, Y+5	; 0x05
    a01c:	9e 81       	ldd	r25, Y+6	; 0x06
    a01e:	fc 01       	movw	r30, r24
    a020:	15 86       	std	Z+13, r1	; 0x0d
    a022:	16 86       	std	Z+14, r1	; 0x0e
            tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    a024:	8d 81       	ldd	r24, Y+5	; 0x05
    a026:	9e 81       	ldd	r25, Y+6	; 0x06
    a028:	fc 01       	movw	r30, r24
    a02a:	10 8a       	std	Z+16, r1	; 0x10
    a02c:	11 8a       	std	Z+17, r1	; 0x11
            tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    a02e:	8d 81       	ldd	r24, Y+5	; 0x05
    a030:	9e 81       	ldd	r25, Y+6	; 0x06
    a032:	fc 01       	movw	r30, r24
    a034:	17 86       	std	Z+15, r1	; 0x0f

            if (data[0] == LD_FUNCTIONAL_NAD)
    a036:	8b 81       	ldd	r24, Y+3	; 0x03
    a038:	9c 81       	ldd	r25, Y+4	; 0x04
    a03a:	fc 01       	movw	r30, r24
    a03c:	80 81       	ld	r24, Z
    a03e:	8e 37       	cpi	r24, 0x7E	; 126
    a040:	31 f4       	brne	.+12     	; 0xa04e <lin_process_single_frame+0xb8>
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_FUNCTIONAL;
    a042:	8d 81       	ldd	r24, Y+5	; 0x05
    a044:	9e 81       	ldd	r25, Y+6	; 0x06
    a046:	26 e0       	ldi	r18, 0x06	; 6
    a048:	fc 01       	movw	r30, r24
    a04a:	26 a3       	std	Z+38, r18	; 0x26
    a04c:	05 c0       	rjmp	.+10     	; 0xa058 <lin_process_single_frame+0xc2>
            }
            else
            {
                tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    a04e:	8d 81       	ldd	r24, Y+5	; 0x05
    a050:	9e 81       	ldd	r25, Y+6	; 0x06
    a052:	25 e0       	ldi	r18, 0x05	; 5
    a054:	fc 01       	movw	r30, r24
    a056:	26 a3       	std	Z+38, r18	; 0x26
            }

            /* put to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    a058:	8d 81       	ldd	r24, Y+5	; 0x05
    a05a:	9e 81       	ldd	r25, Y+6	; 0x06
    a05c:	ac 01       	movw	r20, r24
    a05e:	45 5f       	subi	r20, 0xF5	; 245
    a060:	5f 4f       	sbci	r21, 0xFF	; 255
    a062:	8b 81       	ldd	r24, Y+3	; 0x03
    a064:	9c 81       	ldd	r25, Y+4	; 0x04
    a066:	21 e0       	ldi	r18, 0x01	; 1
    a068:	bc 01       	movw	r22, r24
    a06a:	88 85       	ldd	r24, Y+8	; 0x08
    a06c:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <tl_put_raw>
            tl_desc_ptr->frame_counter = 1;
    a070:	8d 81       	ldd	r24, Y+5	; 0x05
    a072:	9e 81       	ldd	r25, Y+6	; 0x06
    a074:	21 e0       	ldi	r18, 0x01	; 1
    a076:	fc 01       	movw	r30, r24
    a078:	25 a3       	std	Z+37, r18	; 0x25
            tl_desc_ptr->num_of_pdu = 1;
    a07a:	8d 81       	ldd	r24, Y+5	; 0x05
    a07c:	9e 81       	ldd	r25, Y+6	; 0x06
    a07e:	21 e0       	ldi	r18, 0x01	; 1
    a080:	fc 01       	movw	r30, r24
    a082:	24 a3       	std	Z+36, r18	; 0x24
            lin_tl_attach_service(iii);
    a084:	88 85       	ldd	r24, Y+8	; 0x08
    a086:	0e 94 bb 54 	call	0xa976	; 0xa976 <lin_tl_attach_service>
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        }

        /* If ld_receive_message() function is called before SF pdu to be sent */
        if(tl_desc_ptr->ld_return_data)
    a08a:	8d 81       	ldd	r24, Y+5	; 0x05
    a08c:	9e 81       	ldd	r25, Y+6	; 0x06
    a08e:	fc 01       	movw	r30, r24
    a090:	84 a5       	ldd	r24, Z+44	; 0x2c
    a092:	88 23       	and	r24, r24
    a094:	19 f0       	breq	.+6      	; 0xa09c <lin_process_single_frame+0x106>
        {
            tl_receive_message(iii);
    a096:	88 85       	ldd	r24, Y+8	; 0x08
    a098:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <tl_receive_message>
        }
        tl_desc_ptr->FF_pdu_received = false;
    a09c:	8d 81       	ldd	r24, Y+5	; 0x05
    a09e:	9e 81       	ldd	r25, Y+6	; 0x06
    a0a0:	fc 01       	movw	r30, r24
    a0a2:	15 a6       	std	Z+45, r1	; 0x2d
    }
}
    a0a4:	00 00       	nop
    a0a6:	28 96       	adiw	r28, 0x08	; 8
    a0a8:	cd bf       	out	0x3d, r28	; 61
    a0aa:	de bf       	out	0x3e, r29	; 62
    a0ac:	df 91       	pop	r29
    a0ae:	cf 91       	pop	r28
    a0b0:	08 95       	ret

0000a0b2 <lin_process_first_frame>:
 * Description   : Process first frame.
 *
 * Implements    : lin_process_first_frame_Activity
 *END**************************************************************************/
static void lin_process_first_frame(l_ifc_handle iii)
{
    a0b2:	cf 93       	push	r28
    a0b4:	df 93       	push	r29
    a0b6:	cd b7       	in	r28, 0x3d	; 61
    a0b8:	de b7       	in	r29, 0x3e	; 62
    a0ba:	29 97       	sbiw	r28, 0x09	; 9
    a0bc:	cd bf       	out	0x3d, r28	; 61
    a0be:	de bf       	out	0x3e, r29	; 62
    a0c0:	89 87       	std	Y+9, r24	; 0x09
    l_u16 length;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a0c2:	89 85       	ldd	r24, Y+9	; 0x09
    a0c4:	28 2f       	mov	r18, r24
    a0c6:	30 e0       	ldi	r19, 0x00	; 0
    a0c8:	44 e3       	ldi	r20, 0x34	; 52
    a0ca:	42 9f       	mul	r20, r18
    a0cc:	c0 01       	movw	r24, r0
    a0ce:	43 9f       	mul	r20, r19
    a0d0:	90 0d       	add	r25, r0
    a0d2:	11 24       	eor	r1, r1
    a0d4:	84 59       	subi	r24, 0x94	; 148
    a0d6:	99 4b       	sbci	r25, 0xB9	; 185
    a0d8:	89 83       	std	Y+1, r24	; 0x01
    a0da:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    a0dc:	89 85       	ldd	r24, Y+9	; 0x09
    a0de:	28 2f       	mov	r18, r24
    a0e0:	30 e0       	ldi	r19, 0x00	; 0
    a0e2:	46 e1       	ldi	r20, 0x16	; 22
    a0e4:	42 9f       	mul	r20, r18
    a0e6:	c0 01       	movw	r24, r0
    a0e8:	43 9f       	mul	r20, r19
    a0ea:	90 0d       	add	r25, r0
    a0ec:	11 24       	eor	r1, r1
    a0ee:	8e 55       	subi	r24, 0x5E	; 94
    a0f0:	99 4b       	sbci	r25, 0xB9	; 185
    a0f2:	fc 01       	movw	r30, r24
    a0f4:	80 81       	ld	r24, Z
    a0f6:	91 81       	ldd	r25, Z+1	; 0x01
    a0f8:	8b 83       	std	Y+3, r24	; 0x03
    a0fa:	9c 83       	std	Y+4, r25	; 0x04
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    a0fc:	89 85       	ldd	r24, Y+9	; 0x09
    a0fe:	28 2f       	mov	r18, r24
    a100:	30 e0       	ldi	r19, 0x00	; 0
    a102:	4c e1       	ldi	r20, 0x1C	; 28
    a104:	42 9f       	mul	r20, r18
    a106:	c0 01       	movw	r24, r0
    a108:	43 9f       	mul	r20, r19
    a10a:	90 0d       	add	r25, r0
    a10c:	11 24       	eor	r1, r1
    a10e:	86 56       	subi	r24, 0x66	; 102
    a110:	9d 4b       	sbci	r25, 0xBD	; 189
    a112:	8d 83       	std	Y+5, r24	; 0x05
    a114:	9e 83       	std	Y+6, r25	; 0x06

    /* for both MASTER and SLAVE */
    length = (l_u16)((((l_u16)data[1] & 0x0FU) << 8U) + (l_u16)data[2]);
    a116:	8b 81       	ldd	r24, Y+3	; 0x03
    a118:	9c 81       	ldd	r25, Y+4	; 0x04
    a11a:	01 96       	adiw	r24, 0x01	; 1
    a11c:	fc 01       	movw	r30, r24
    a11e:	80 81       	ld	r24, Z
    a120:	88 2f       	mov	r24, r24
    a122:	90 e0       	ldi	r25, 0x00	; 0
    a124:	8f 70       	andi	r24, 0x0F	; 15
    a126:	99 27       	eor	r25, r25
    a128:	38 2f       	mov	r19, r24
    a12a:	22 27       	eor	r18, r18
    a12c:	8b 81       	ldd	r24, Y+3	; 0x03
    a12e:	9c 81       	ldd	r25, Y+4	; 0x04
    a130:	02 96       	adiw	r24, 0x02	; 2
    a132:	fc 01       	movw	r30, r24
    a134:	80 81       	ld	r24, Z
    a136:	88 2f       	mov	r24, r24
    a138:	90 e0       	ldi	r25, 0x00	; 0
    a13a:	82 0f       	add	r24, r18
    a13c:	93 1f       	adc	r25, r19
    a13e:	8f 83       	std	Y+7, r24	; 0x07
    a140:	98 87       	std	Y+8, r25	; 0x08
    /* check length of FF. If not valid, ignore this PDU */
    if ((length >= 7U) && (length <= prot_user_config_ptr->max_message_length))
    a142:	8f 81       	ldd	r24, Y+7	; 0x07
    a144:	98 85       	ldd	r25, Y+8	; 0x08
    a146:	07 97       	sbiw	r24, 0x07	; 7
    a148:	08 f4       	brcc	.+2      	; 0xa14c <lin_process_first_frame+0x9a>
    a14a:	b3 c0       	rjmp	.+358    	; 0xa2b2 <lin_process_first_frame+0x200>
    a14c:	8d 81       	ldd	r24, Y+5	; 0x05
    a14e:	9e 81       	ldd	r25, Y+6	; 0x06
    a150:	fc 01       	movw	r30, r24
    a152:	22 8d       	ldd	r18, Z+26	; 0x1a
    a154:	33 8d       	ldd	r19, Z+27	; 0x1b
    a156:	8f 81       	ldd	r24, Y+7	; 0x07
    a158:	98 85       	ldd	r25, Y+8	; 0x08
    a15a:	28 17       	cp	r18, r24
    a15c:	39 07       	cpc	r19, r25
    a15e:	08 f4       	brcc	.+2      	; 0xa162 <lin_process_first_frame+0xb0>
    a160:	a8 c0       	rjmp	.+336    	; 0xa2b2 <lin_process_first_frame+0x200>
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if ((bool)LIN_SLAVE == prot_user_config_ptr->function)
    a162:	8d 81       	ldd	r24, Y+5	; 0x05
    a164:	9e 81       	ldd	r25, Y+6	; 0x06
    a166:	fc 01       	movw	r30, r24
    a168:	93 81       	ldd	r25, Z+3	; 0x03
    a16a:	81 e0       	ldi	r24, 0x01	; 1
    a16c:	89 27       	eor	r24, r25
    a16e:	88 23       	and	r24, r24
    a170:	79 f1       	breq	.+94     	; 0xa1d0 <lin_process_first_frame+0x11e>
        {
            /* For misra compliant rule 9.1 */
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    a172:	89 81       	ldd	r24, Y+1	; 0x01
    a174:	9a 81       	ldd	r25, Y+2	; 0x02
    a176:	25 e0       	ldi	r18, 0x05	; 5
    a178:	fc 01       	movw	r30, r24
    a17a:	26 a3       	std	Z+38, r18	; 0x26
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    a17c:	8d 81       	ldd	r24, Y+5	; 0x05
    a17e:	9e 81       	ldd	r25, Y+6	; 0x06
    a180:	fc 01       	movw	r30, r24
    a182:	80 81       	ld	r24, Z
    a184:	88 23       	and	r24, r24
    a186:	21 f5       	brne	.+72     	; 0xa1d0 <lin_process_first_frame+0x11e>
            {
                /* Set check N_Cr timeout */
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    a188:	89 85       	ldd	r24, Y+9	; 0x09
    a18a:	28 2f       	mov	r18, r24
    a18c:	30 e0       	ldi	r19, 0x00	; 0
    a18e:	4c e1       	ldi	r20, 0x1C	; 28
    a190:	42 9f       	mul	r20, r18
    a192:	c0 01       	movw	r24, r0
    a194:	43 9f       	mul	r20, r19
    a196:	90 0d       	add	r25, r0
    a198:	11 24       	eor	r1, r1
    a19a:	84 55       	subi	r24, 0x54	; 84
    a19c:	9d 4b       	sbci	r25, 0xBD	; 189
    a19e:	fc 01       	movw	r30, r24
    a1a0:	80 81       	ld	r24, Z
    a1a2:	28 2f       	mov	r18, r24
    a1a4:	30 e0       	ldi	r19, 0x00	; 0
    a1a6:	44 e2       	ldi	r20, 0x24	; 36
    a1a8:	42 9f       	mul	r20, r18
    a1aa:	c0 01       	movw	r24, r0
    a1ac:	43 9f       	mul	r20, r19
    a1ae:	90 0d       	add	r25, r0
    a1b0:	11 24       	eor	r1, r1
    a1b2:	8d 56       	subi	r24, 0x6D	; 109
    a1b4:	9d 4b       	sbci	r25, 0xBD	; 189
    a1b6:	fc 01       	movw	r30, r24
    a1b8:	20 81       	ld	r18, Z
    a1ba:	31 81       	ldd	r19, Z+1	; 0x01
    a1bc:	89 81       	ldd	r24, Y+1	; 0x01
    a1be:	9a 81       	ldd	r25, Y+2	; 0x02
    a1c0:	fc 01       	movw	r30, r24
    a1c2:	20 a3       	std	Z+32, r18	; 0x20
    a1c4:	31 a3       	std	Z+33, r19	; 0x21
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    a1c6:	89 81       	ldd	r24, Y+1	; 0x01
    a1c8:	9a 81       	ldd	r25, Y+2	; 0x02
    a1ca:	22 e0       	ldi	r18, 0x02	; 2
    a1cc:	fc 01       	movw	r30, r24
    a1ce:	27 8f       	std	Z+31, r18	; 0x1f
            }
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
        /* put PDU to rx queue */
        /* reset queue header and queue tail */
        tl_desc_ptr->tl_rx_queue.queue_header = 0;
    a1d0:	89 81       	ldd	r24, Y+1	; 0x01
    a1d2:	9a 81       	ldd	r25, Y+2	; 0x02
    a1d4:	fc 01       	movw	r30, r24
    a1d6:	13 86       	std	Z+11, r1	; 0x0b
    a1d8:	14 86       	std	Z+12, r1	; 0x0c
        tl_desc_ptr->tl_rx_queue.queue_tail = 0;
    a1da:	89 81       	ldd	r24, Y+1	; 0x01
    a1dc:	9a 81       	ldd	r25, Y+2	; 0x02
    a1de:	fc 01       	movw	r30, r24
    a1e0:	15 86       	std	Z+13, r1	; 0x0d
    a1e2:	16 86       	std	Z+14, r1	; 0x0e
        tl_desc_ptr->tl_rx_queue.queue_current_size = 0;
    a1e4:	89 81       	ldd	r24, Y+1	; 0x01
    a1e6:	9a 81       	ldd	r25, Y+2	; 0x02
    a1e8:	fc 01       	movw	r30, r24
    a1ea:	10 8a       	std	Z+16, r1	; 0x10
    a1ec:	11 8a       	std	Z+17, r1	; 0x11
        tl_desc_ptr->tl_rx_queue.queue_status = LD_NO_DATA;
    a1ee:	89 81       	ldd	r24, Y+1	; 0x01
    a1f0:	9a 81       	ldd	r25, Y+2	; 0x02
    a1f2:	fc 01       	movw	r30, r24
    a1f4:	17 86       	std	Z+15, r1	; 0x0f
        tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    a1f6:	89 81       	ldd	r24, Y+1	; 0x01
    a1f8:	9a 81       	ldd	r25, Y+2	; 0x02
    a1fa:	ac 01       	movw	r20, r24
    a1fc:	45 5f       	subi	r20, 0xF5	; 245
    a1fe:	5f 4f       	sbci	r21, 0xFF	; 255
    a200:	8b 81       	ldd	r24, Y+3	; 0x03
    a202:	9c 81       	ldd	r25, Y+4	; 0x04
    a204:	21 e0       	ldi	r18, 0x01	; 1
    a206:	bc 01       	movw	r22, r24
    a208:	89 85       	ldd	r24, Y+9	; 0x09
    a20a:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <tl_put_raw>

        /* calculate number of PDU for this message */
        if (((length - 5U) % 6U) == 0U)
    a20e:	8f 81       	ldd	r24, Y+7	; 0x07
    a210:	98 85       	ldd	r25, Y+8	; 0x08
    a212:	ac 01       	movw	r20, r24
    a214:	45 50       	subi	r20, 0x05	; 5
    a216:	51 09       	sbc	r21, r1
    a218:	9a 01       	movw	r18, r20
    a21a:	ab ea       	ldi	r26, 0xAB	; 171
    a21c:	ba ea       	ldi	r27, 0xAA	; 170
    a21e:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__umulhisi3>
    a222:	9c 01       	movw	r18, r24
    a224:	36 95       	lsr	r19
    a226:	27 95       	ror	r18
    a228:	36 95       	lsr	r19
    a22a:	27 95       	ror	r18
    a22c:	c9 01       	movw	r24, r18
    a22e:	88 0f       	add	r24, r24
    a230:	99 1f       	adc	r25, r25
    a232:	82 0f       	add	r24, r18
    a234:	93 1f       	adc	r25, r19
    a236:	88 0f       	add	r24, r24
    a238:	99 1f       	adc	r25, r25
    a23a:	9a 01       	movw	r18, r20
    a23c:	28 1b       	sub	r18, r24
    a23e:	39 0b       	sbc	r19, r25
    a240:	23 2b       	or	r18, r19
    a242:	91 f4       	brne	.+36     	; 0xa268 <lin_process_first_frame+0x1b6>
        {
            tl_desc_ptr->num_of_pdu = (l_u8)((length - 5U) / 6U);
    a244:	8f 81       	ldd	r24, Y+7	; 0x07
    a246:	98 85       	ldd	r25, Y+8	; 0x08
    a248:	05 97       	sbiw	r24, 0x05	; 5
    a24a:	9c 01       	movw	r18, r24
    a24c:	ab ea       	ldi	r26, 0xAB	; 171
    a24e:	ba ea       	ldi	r27, 0xAA	; 170
    a250:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__umulhisi3>
    a254:	96 95       	lsr	r25
    a256:	87 95       	ror	r24
    a258:	96 95       	lsr	r25
    a25a:	87 95       	ror	r24
    a25c:	28 2f       	mov	r18, r24
    a25e:	89 81       	ldd	r24, Y+1	; 0x01
    a260:	9a 81       	ldd	r25, Y+2	; 0x02
    a262:	fc 01       	movw	r30, r24
    a264:	24 a3       	std	Z+36, r18	; 0x24
    a266:	12 c0       	rjmp	.+36     	; 0xa28c <lin_process_first_frame+0x1da>
        }
        else
        {
            tl_desc_ptr->num_of_pdu = (l_u8)(((length - 5U) / 6U) + 1U);
    a268:	8f 81       	ldd	r24, Y+7	; 0x07
    a26a:	98 85       	ldd	r25, Y+8	; 0x08
    a26c:	05 97       	sbiw	r24, 0x05	; 5
    a26e:	9c 01       	movw	r18, r24
    a270:	ab ea       	ldi	r26, 0xAB	; 171
    a272:	ba ea       	ldi	r27, 0xAA	; 170
    a274:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__umulhisi3>
    a278:	96 95       	lsr	r25
    a27a:	87 95       	ror	r24
    a27c:	96 95       	lsr	r25
    a27e:	87 95       	ror	r24
    a280:	21 e0       	ldi	r18, 0x01	; 1
    a282:	28 0f       	add	r18, r24
    a284:	89 81       	ldd	r24, Y+1	; 0x01
    a286:	9a 81       	ldd	r25, Y+2	; 0x02
    a288:	fc 01       	movw	r30, r24
    a28a:	24 a3       	std	Z+36, r18	; 0x24
        }

        /* set frame counter = 1 */
        tl_desc_ptr->frame_counter = 1U;
    a28c:	89 81       	ldd	r24, Y+1	; 0x01
    a28e:	9a 81       	ldd	r25, Y+2	; 0x02
    a290:	21 e0       	ldi	r18, 0x01	; 1
    a292:	fc 01       	movw	r30, r24
    a294:	25 a3       	std	Z+37, r18	; 0x25
        tl_desc_ptr->service_status = LD_SERVICE_BUSY;
    a296:	89 81       	ldd	r24, Y+1	; 0x01
    a298:	9a 81       	ldd	r25, Y+2	; 0x02
    a29a:	fc 01       	movw	r30, r24
    a29c:	13 a6       	std	Z+43, r1	; 0x2b

        /* Mark FF pdu is sent */
        tl_desc_ptr->FF_pdu_received = true;
    a29e:	89 81       	ldd	r24, Y+1	; 0x01
    a2a0:	9a 81       	ldd	r25, Y+2	; 0x02
    a2a2:	21 e0       	ldi	r18, 0x01	; 1
    a2a4:	fc 01       	movw	r30, r24
    a2a6:	25 a7       	std	Z+45, r18	; 0x2d
        tl_desc_ptr->interleave_timeout_counter = 0;
    a2a8:	89 81       	ldd	r24, Y+1	; 0x01
    a2aa:	9a 81       	ldd	r25, Y+2	; 0x02
    a2ac:	fc 01       	movw	r30, r24
    a2ae:	10 a6       	std	Z+40, r1	; 0x28
    a2b0:	11 a6       	std	Z+41, r1	; 0x29
    }
}
    a2b2:	00 00       	nop
    a2b4:	29 96       	adiw	r28, 0x09	; 9
    a2b6:	cd bf       	out	0x3d, r28	; 61
    a2b8:	de bf       	out	0x3e, r29	; 62
    a2ba:	df 91       	pop	r29
    a2bc:	cf 91       	pop	r28
    a2be:	08 95       	ret

0000a2c0 <lin_process_consecutive_frame>:
 * Description   : Process consecutive frame.
 *
 * Implements    : lin_process_consecutive_frame_Activity
 *END**************************************************************************/
static void lin_process_consecutive_frame(l_ifc_handle iii)
{
    a2c0:	cf 93       	push	r28
    a2c2:	df 93       	push	r29
    a2c4:	cd b7       	in	r28, 0x3d	; 61
    a2c6:	de b7       	in	r29, 0x3e	; 62
    a2c8:	26 97       	sbiw	r28, 0x06	; 6
    a2ca:	cd bf       	out	0x3d, r28	; 61
    a2cc:	de bf       	out	0x3e, r29	; 62
    a2ce:	8e 83       	std	Y+6, r24	; 0x06
    l_u8 tmp_frame_counter;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a2d0:	8e 81       	ldd	r24, Y+6	; 0x06
    a2d2:	28 2f       	mov	r18, r24
    a2d4:	30 e0       	ldi	r19, 0x00	; 0
    a2d6:	44 e3       	ldi	r20, 0x34	; 52
    a2d8:	42 9f       	mul	r20, r18
    a2da:	c0 01       	movw	r24, r0
    a2dc:	43 9f       	mul	r20, r19
    a2de:	90 0d       	add	r25, r0
    a2e0:	11 24       	eor	r1, r1
    a2e2:	84 59       	subi	r24, 0x94	; 148
    a2e4:	99 4b       	sbci	r25, 0xB9	; 185
    a2e6:	89 83       	std	Y+1, r24	; 0x01
    a2e8:	9a 83       	std	Y+2, r25	; 0x02
    const l_u8 * data = g_lin_protocol_state_array[iii].response_buffer_ptr;
    a2ea:	8e 81       	ldd	r24, Y+6	; 0x06
    a2ec:	28 2f       	mov	r18, r24
    a2ee:	30 e0       	ldi	r19, 0x00	; 0
    a2f0:	46 e1       	ldi	r20, 0x16	; 22
    a2f2:	42 9f       	mul	r20, r18
    a2f4:	c0 01       	movw	r24, r0
    a2f6:	43 9f       	mul	r20, r19
    a2f8:	90 0d       	add	r25, r0
    a2fa:	11 24       	eor	r1, r1
    a2fc:	8e 55       	subi	r24, 0x5E	; 94
    a2fe:	99 4b       	sbci	r25, 0xB9	; 185
    a300:	fc 01       	movw	r30, r24
    a302:	80 81       	ld	r24, Z
    a304:	91 81       	ldd	r25, Z+1	; 0x01
    a306:	8b 83       	std	Y+3, r24	; 0x03
    a308:	9c 83       	std	Y+4, r25	; 0x04
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        /* for SLAVE */
        /* For misra compliant rule 9.1 */

        if (g_lin_protocol_user_cfg_array[iii].protocol_version == LIN_PROTOCOL_21)
    a30a:	8e 81       	ldd	r24, Y+6	; 0x06
    a30c:	28 2f       	mov	r18, r24
    a30e:	30 e0       	ldi	r19, 0x00	; 0
    a310:	4c e1       	ldi	r20, 0x1C	; 28
    a312:	42 9f       	mul	r20, r18
    a314:	c0 01       	movw	r24, r0
    a316:	43 9f       	mul	r20, r19
    a318:	90 0d       	add	r25, r0
    a31a:	11 24       	eor	r1, r1
    a31c:	86 56       	subi	r24, 0x66	; 102
    a31e:	9d 4b       	sbci	r25, 0xBD	; 189
    a320:	fc 01       	movw	r30, r24
    a322:	80 81       	ld	r24, Z
    a324:	88 23       	and	r24, r24
    a326:	21 f5       	brne	.+72     	; 0xa370 <lin_process_consecutive_frame+0xb0>
        {
            /* Set check N_Cr timeout */
            tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_Cr_timeout;
    a328:	8e 81       	ldd	r24, Y+6	; 0x06
    a32a:	28 2f       	mov	r18, r24
    a32c:	30 e0       	ldi	r19, 0x00	; 0
    a32e:	4c e1       	ldi	r20, 0x1C	; 28
    a330:	42 9f       	mul	r20, r18
    a332:	c0 01       	movw	r24, r0
    a334:	43 9f       	mul	r20, r19
    a336:	90 0d       	add	r25, r0
    a338:	11 24       	eor	r1, r1
    a33a:	84 55       	subi	r24, 0x54	; 84
    a33c:	9d 4b       	sbci	r25, 0xBD	; 189
    a33e:	fc 01       	movw	r30, r24
    a340:	80 81       	ld	r24, Z
    a342:	28 2f       	mov	r18, r24
    a344:	30 e0       	ldi	r19, 0x00	; 0
    a346:	44 e2       	ldi	r20, 0x24	; 36
    a348:	42 9f       	mul	r20, r18
    a34a:	c0 01       	movw	r24, r0
    a34c:	43 9f       	mul	r20, r19
    a34e:	90 0d       	add	r25, r0
    a350:	11 24       	eor	r1, r1
    a352:	8d 56       	subi	r24, 0x6D	; 109
    a354:	9d 4b       	sbci	r25, 0xBD	; 189
    a356:	fc 01       	movw	r30, r24
    a358:	20 81       	ld	r18, Z
    a35a:	31 81       	ldd	r19, Z+1	; 0x01
    a35c:	89 81       	ldd	r24, Y+1	; 0x01
    a35e:	9a 81       	ldd	r25, Y+2	; 0x02
    a360:	fc 01       	movw	r30, r24
    a362:	20 a3       	std	Z+32, r18	; 0x20
    a364:	31 a3       	std	Z+33, r19	; 0x21
            tl_desc_ptr->check_timeout_type = LD_CHECK_N_CR_TIMEOUT;
    a366:	89 81       	ldd	r24, Y+1	; 0x01
    a368:	9a 81       	ldd	r25, Y+2	; 0x02
    a36a:	22 e0       	ldi	r18, 0x02	; 2
    a36c:	fc 01       	movw	r30, r24
    a36e:	27 8f       	std	Z+31, r18	; 0x1f
        }
        /* get frame counter of this PDU */
        tmp_frame_counter = (l_u8)(data[1] & 0x0FU);
    a370:	8b 81       	ldd	r24, Y+3	; 0x03
    a372:	9c 81       	ldd	r25, Y+4	; 0x04
    a374:	01 96       	adiw	r24, 0x01	; 1
    a376:	fc 01       	movw	r30, r24
    a378:	80 81       	ld	r24, Z
    a37a:	8f 70       	andi	r24, 0x0F	; 15
    a37c:	8d 83       	std	Y+5, r24	; 0x05
        /* Check valid frame counter */
        if (tmp_frame_counter == tl_desc_ptr->frame_counter)
    a37e:	89 81       	ldd	r24, Y+1	; 0x01
    a380:	9a 81       	ldd	r25, Y+2	; 0x02
    a382:	fc 01       	movw	r30, r24
    a384:	95 a1       	ldd	r25, Z+37	; 0x25
    a386:	8d 81       	ldd	r24, Y+5	; 0x05
    a388:	98 17       	cp	r25, r24
    a38a:	81 f5       	brne	.+96     	; 0xa3ec <lin_process_consecutive_frame+0x12c>
        {
            /* increase frame counter */
            tl_desc_ptr->frame_counter++;
    a38c:	89 81       	ldd	r24, Y+1	; 0x01
    a38e:	9a 81       	ldd	r25, Y+2	; 0x02
    a390:	fc 01       	movw	r30, r24
    a392:	85 a1       	ldd	r24, Z+37	; 0x25
    a394:	21 e0       	ldi	r18, 0x01	; 1
    a396:	28 0f       	add	r18, r24
    a398:	89 81       	ldd	r24, Y+1	; 0x01
    a39a:	9a 81       	ldd	r25, Y+2	; 0x02
    a39c:	fc 01       	movw	r30, r24
    a39e:	25 a3       	std	Z+37, r18	; 0x25
            if (tl_desc_ptr->frame_counter > 15U)
    a3a0:	89 81       	ldd	r24, Y+1	; 0x01
    a3a2:	9a 81       	ldd	r25, Y+2	; 0x02
    a3a4:	fc 01       	movw	r30, r24
    a3a6:	85 a1       	ldd	r24, Z+37	; 0x25
    a3a8:	80 31       	cpi	r24, 0x10	; 16
    a3aa:	20 f0       	brcs	.+8      	; 0xa3b4 <lin_process_consecutive_frame+0xf4>
            {
                tl_desc_ptr->frame_counter = 0U;
    a3ac:	89 81       	ldd	r24, Y+1	; 0x01
    a3ae:	9a 81       	ldd	r25, Y+2	; 0x02
    a3b0:	fc 01       	movw	r30, r24
    a3b2:	15 a2       	std	Z+37, r1	; 0x25
            }

            /* decrease number of PDU to check message is complete */
            tl_desc_ptr->num_of_pdu--;
    a3b4:	89 81       	ldd	r24, Y+1	; 0x01
    a3b6:	9a 81       	ldd	r25, Y+2	; 0x02
    a3b8:	fc 01       	movw	r30, r24
    a3ba:	84 a1       	ldd	r24, Z+36	; 0x24
    a3bc:	2f ef       	ldi	r18, 0xFF	; 255
    a3be:	28 0f       	add	r18, r24
    a3c0:	89 81       	ldd	r24, Y+1	; 0x01
    a3c2:	9a 81       	ldd	r25, Y+2	; 0x02
    a3c4:	fc 01       	movw	r30, r24
    a3c6:	24 a3       	std	Z+36, r18	; 0x24
            /* put PDU to rx queue */
            tl_put_raw(iii, data, &(tl_desc_ptr->tl_rx_queue), RECEIVING);
    a3c8:	89 81       	ldd	r24, Y+1	; 0x01
    a3ca:	9a 81       	ldd	r25, Y+2	; 0x02
    a3cc:	ac 01       	movw	r20, r24
    a3ce:	45 5f       	subi	r20, 0xF5	; 245
    a3d0:	5f 4f       	sbci	r21, 0xFF	; 255
    a3d2:	8b 81       	ldd	r24, Y+3	; 0x03
    a3d4:	9c 81       	ldd	r25, Y+4	; 0x04
    a3d6:	21 e0       	ldi	r18, 0x01	; 1
    a3d8:	bc 01       	movw	r22, r24
    a3da:	8e 81       	ldd	r24, Y+6	; 0x06
    a3dc:	0e 94 4d 55 	call	0xaa9a	; 0xaa9a <tl_put_raw>
            tl_desc_ptr->diag_state  = LD_DIAG_RX_PHY;
    a3e0:	89 81       	ldd	r24, Y+1	; 0x01
    a3e2:	9a 81       	ldd	r25, Y+2	; 0x02
    a3e4:	25 e0       	ldi	r18, 0x05	; 5
    a3e6:	fc 01       	movw	r30, r24
    a3e8:	26 a3       	std	Z+38, r18	; 0x26
    a3ea:	1c c0       	rjmp	.+56     	; 0xa424 <lin_process_consecutive_frame+0x164>
        }
        else
        {
            /* abort this message */
            if(tl_desc_ptr->ld_return_data)
    a3ec:	89 81       	ldd	r24, Y+1	; 0x01
    a3ee:	9a 81       	ldd	r25, Y+2	; 0x02
    a3f0:	fc 01       	movw	r30, r24
    a3f2:	84 a5       	ldd	r24, Z+44	; 0x2c
    a3f4:	88 23       	and	r24, r24
    a3f6:	21 f0       	breq	.+8      	; 0xa400 <lin_process_consecutive_frame+0x140>
            {
               tl_desc_ptr->ld_return_data = false;
    a3f8:	89 81       	ldd	r24, Y+1	; 0x01
    a3fa:	9a 81       	ldd	r25, Y+2	; 0x02
    a3fc:	fc 01       	movw	r30, r24
    a3fe:	14 a6       	std	Z+44, r1	; 0x2c
            }
            tl_desc_ptr->FF_pdu_received = false;
    a400:	89 81       	ldd	r24, Y+1	; 0x01
    a402:	9a 81       	ldd	r25, Y+2	; 0x02
    a404:	fc 01       	movw	r30, r24
    a406:	15 a6       	std	Z+45, r1	; 0x2d
            tl_desc_ptr->rx_msg_status = LD_WRONG_SN;
    a408:	89 81       	ldd	r24, Y+1	; 0x01
    a40a:	9a 81       	ldd	r25, Y+2	; 0x02
    a40c:	26 e0       	ldi	r18, 0x06	; 6
    a40e:	fc 01       	movw	r30, r24
    a410:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    a412:	89 81       	ldd	r24, Y+1	; 0x01
    a414:	9a 81       	ldd	r25, Y+2	; 0x02
    a416:	fc 01       	movw	r30, r24
    a418:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->diag_state  = LD_DIAG_IDLE;
    a41a:	89 81       	ldd	r24, Y+1	; 0x01
    a41c:	9a 81       	ldd	r25, Y+2	; 0x02
    a41e:	21 e0       	ldi	r18, 0x01	; 1
    a420:	fc 01       	movw	r30, r24
    a422:	26 a3       	std	Z+38, r18	; 0x26
        }

        if (0U == tl_desc_ptr->num_of_pdu)
    a424:	89 81       	ldd	r24, Y+1	; 0x01
    a426:	9a 81       	ldd	r25, Y+2	; 0x02
    a428:	fc 01       	movw	r30, r24
    a42a:	84 a1       	ldd	r24, Z+36	; 0x24
    a42c:	88 23       	and	r24, r24
    a42e:	c9 f4       	brne	.+50     	; 0xa462 <lin_process_consecutive_frame+0x1a2>
        {
            /* message is received completely */
            /* set status is IDLE to receive new message */
            tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    a430:	89 81       	ldd	r24, Y+1	; 0x01
    a432:	9a 81       	ldd	r25, Y+2	; 0x02
    a434:	fc 01       	movw	r30, r24
    a436:	17 8e       	std	Z+31, r1	; 0x1f
            tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    a438:	89 81       	ldd	r24, Y+1	; 0x01
    a43a:	9a 81       	ldd	r25, Y+2	; 0x02
    a43c:	21 e0       	ldi	r18, 0x01	; 1
    a43e:	fc 01       	movw	r30, r24
    a440:	23 a7       	std	Z+43, r18	; 0x2b

            lin_tl_attach_service(iii);
    a442:	8e 81       	ldd	r24, Y+6	; 0x06
    a444:	0e 94 bb 54 	call	0xa976	; 0xa976 <lin_tl_attach_service>
            /* If ld_receive_message() function is called before FF pdu to be sent */
            if(tl_desc_ptr->ld_return_data)
    a448:	89 81       	ldd	r24, Y+1	; 0x01
    a44a:	9a 81       	ldd	r25, Y+2	; 0x02
    a44c:	fc 01       	movw	r30, r24
    a44e:	84 a5       	ldd	r24, Z+44	; 0x2c
    a450:	88 23       	and	r24, r24
    a452:	19 f0       	breq	.+6      	; 0xa45a <lin_process_consecutive_frame+0x19a>
            {
                tl_receive_message(iii);
    a454:	8e 81       	ldd	r24, Y+6	; 0x06
    a456:	0e 94 d9 56 	call	0xadb2	; 0xadb2 <tl_receive_message>
            }
            tl_desc_ptr->FF_pdu_received = false;
    a45a:	89 81       	ldd	r24, Y+1	; 0x01
    a45c:	9a 81       	ldd	r25, Y+2	; 0x02
    a45e:	fc 01       	movw	r30, r24
    a460:	15 a6       	std	Z+45, r1	; 0x2d
        }
        #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    }
}
    a462:	00 00       	nop
    a464:	26 96       	adiw	r28, 0x06	; 6
    a466:	cd bf       	out	0x3d, r28	; 61
    a468:	de bf       	out	0x3e, r29	; 62
    a46a:	df 91       	pop	r29
    a46c:	cf 91       	pop	r28
    a46e:	08 95       	ret

0000a470 <lin_process_pdu>:
 *
 * Implements    : lin_process_pdu_Activity
 *END**************************************************************************/
static void lin_process_pdu(l_ifc_handle iii,
                            const lin_tl_pdu_data_t * pdu)
{
    a470:	cf 93       	push	r28
    a472:	df 93       	push	r29
    a474:	cd b7       	in	r28, 0x3d	; 61
    a476:	de b7       	in	r29, 0x3e	; 62
    a478:	26 97       	sbiw	r28, 0x06	; 6
    a47a:	cd bf       	out	0x3d, r28	; 61
    a47c:	de bf       	out	0x3e, r29	; 62
    a47e:	8c 83       	std	Y+4, r24	; 0x04
    a480:	6d 83       	std	Y+5, r22	; 0x05
    a482:	7e 83       	std	Y+6, r23	; 0x06
    l_u8 pci_type;
#if (SUPPORT_SLAVE_MODE == 1U)
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a484:	8c 81       	ldd	r24, Y+4	; 0x04
    a486:	28 2f       	mov	r18, r24
    a488:	30 e0       	ldi	r19, 0x00	; 0
    a48a:	44 e3       	ldi	r20, 0x34	; 52
    a48c:	42 9f       	mul	r20, r18
    a48e:	c0 01       	movw	r24, r0
    a490:	43 9f       	mul	r20, r19
    a492:	90 0d       	add	r25, r0
    a494:	11 24       	eor	r1, r1
    a496:	84 59       	subi	r24, 0x94	; 148
    a498:	99 4b       	sbci	r25, 0xB9	; 185
    a49a:	89 83       	std	Y+1, r24	; 0x01
    a49c:	9a 83       	std	Y+2, r25	; 0x02
    if ((bool)LIN_SLAVE == g_lin_protocol_user_cfg_array[iii].function)
    a49e:	8c 81       	ldd	r24, Y+4	; 0x04
    a4a0:	28 2f       	mov	r18, r24
    a4a2:	30 e0       	ldi	r19, 0x00	; 0
    a4a4:	4c e1       	ldi	r20, 0x1C	; 28
    a4a6:	42 9f       	mul	r20, r18
    a4a8:	c0 01       	movw	r24, r0
    a4aa:	43 9f       	mul	r20, r19
    a4ac:	90 0d       	add	r25, r0
    a4ae:	11 24       	eor	r1, r1
    a4b0:	83 56       	subi	r24, 0x63	; 99
    a4b2:	9d 4b       	sbci	r25, 0xBD	; 189
    a4b4:	fc 01       	movw	r30, r24
    a4b6:	90 81       	ld	r25, Z
    a4b8:	81 e0       	ldi	r24, 0x01	; 1
    a4ba:	89 27       	eor	r24, r25
    a4bc:	88 23       	and	r24, r24
    a4be:	09 f1       	breq	.+66     	; 0xa502 <lin_process_pdu+0x92>
    {
        g_lin_tl_descriptor_array[iii].slave_resp_cnt = 0U;
    a4c0:	8c 81       	ldd	r24, Y+4	; 0x04
    a4c2:	28 2f       	mov	r18, r24
    a4c4:	30 e0       	ldi	r19, 0x00	; 0
    a4c6:	44 e3       	ldi	r20, 0x34	; 52
    a4c8:	42 9f       	mul	r20, r18
    a4ca:	c0 01       	movw	r24, r0
    a4cc:	43 9f       	mul	r20, r19
    a4ce:	90 0d       	add	r25, r0
    a4d0:	11 24       	eor	r1, r1
    a4d2:	8a 56       	subi	r24, 0x6A	; 106
    a4d4:	99 4b       	sbci	r25, 0xB9	; 185
    a4d6:	fc 01       	movw	r30, r24
    a4d8:	10 82       	st	Z, r1
        /* clear queue */
        tl_desc_ptr->tl_tx_queue.queue_status = LD_QUEUE_EMPTY;
    a4da:	89 81       	ldd	r24, Y+1	; 0x01
    a4dc:	9a 81       	ldd	r25, Y+2	; 0x02
    a4de:	25 e0       	ldi	r18, 0x05	; 5
    a4e0:	fc 01       	movw	r30, r24
    a4e2:	24 83       	std	Z+4, r18	; 0x04
        tl_desc_ptr->tl_tx_queue.queue_current_size = 0U;
    a4e4:	89 81       	ldd	r24, Y+1	; 0x01
    a4e6:	9a 81       	ldd	r25, Y+2	; 0x02
    a4e8:	fc 01       	movw	r30, r24
    a4ea:	15 82       	std	Z+5, r1	; 0x05
    a4ec:	16 82       	std	Z+6, r1	; 0x06
        tl_desc_ptr->tl_tx_queue.queue_header = tl_desc_ptr->tl_tx_queue.queue_tail;
    a4ee:	89 81       	ldd	r24, Y+1	; 0x01
    a4f0:	9a 81       	ldd	r25, Y+2	; 0x02
    a4f2:	fc 01       	movw	r30, r24
    a4f4:	22 81       	ldd	r18, Z+2	; 0x02
    a4f6:	33 81       	ldd	r19, Z+3	; 0x03
    a4f8:	89 81       	ldd	r24, Y+1	; 0x01
    a4fa:	9a 81       	ldd	r25, Y+2	; 0x02
    a4fc:	fc 01       	movw	r30, r24
    a4fe:	20 83       	st	Z, r18
    a500:	31 83       	std	Z+1, r19	; 0x01
    }
#endif /* End (SUPPORT_SLAVE_MODE == 1U) */

    /* get PCI type */
    pci_type = (l_u8)(((*pdu)[1] & 0xF0U) >> 4U);
    a502:	8d 81       	ldd	r24, Y+5	; 0x05
    a504:	9e 81       	ldd	r25, Y+6	; 0x06
    a506:	fc 01       	movw	r30, r24
    a508:	81 81       	ldd	r24, Z+1	; 0x01
    a50a:	82 95       	swap	r24
    a50c:	8f 70       	andi	r24, 0x0F	; 15
    a50e:	8b 83       	std	Y+3, r24	; 0x03
    switch (pci_type)
    a510:	8b 81       	ldd	r24, Y+3	; 0x03
    a512:	88 2f       	mov	r24, r24
    a514:	90 e0       	ldi	r25, 0x00	; 0
    a516:	81 30       	cpi	r24, 0x01	; 1
    a518:	91 05       	cpc	r25, r1
    a51a:	51 f0       	breq	.+20     	; 0xa530 <lin_process_pdu+0xc0>
    a51c:	82 30       	cpi	r24, 0x02	; 2
    a51e:	91 05       	cpc	r25, r1
    a520:	59 f0       	breq	.+22     	; 0xa538 <lin_process_pdu+0xc8>
    a522:	89 2b       	or	r24, r25
    a524:	09 f0       	breq	.+2      	; 0xa528 <lin_process_pdu+0xb8>
        case PCI_CF:
            lin_process_consecutive_frame(iii);
            break;
        default:
            /* ignore this PDU */
            break;
    a526:	0c c0       	rjmp	.+24     	; 0xa540 <lin_process_pdu+0xd0>
    /* get PCI type */
    pci_type = (l_u8)(((*pdu)[1] & 0xF0U) >> 4U);
    switch (pci_type)
    {
        case PCI_SF:
            lin_process_single_frame(iii);
    a528:	8c 81       	ldd	r24, Y+4	; 0x04
    a52a:	0e 94 cb 4f 	call	0x9f96	; 0x9f96 <lin_process_single_frame>
            break;
    a52e:	08 c0       	rjmp	.+16     	; 0xa540 <lin_process_pdu+0xd0>
        case PCI_FF:
            lin_process_first_frame(iii);
    a530:	8c 81       	ldd	r24, Y+4	; 0x04
    a532:	0e 94 59 50 	call	0xa0b2	; 0xa0b2 <lin_process_first_frame>
            break;
    a536:	04 c0       	rjmp	.+8      	; 0xa540 <lin_process_pdu+0xd0>
        case PCI_CF:
            lin_process_consecutive_frame(iii);
    a538:	8c 81       	ldd	r24, Y+4	; 0x04
    a53a:	0e 94 60 51 	call	0xa2c0	; 0xa2c0 <lin_process_consecutive_frame>
            break;
    a53e:	00 00       	nop
        default:
            /* ignore this PDU */
            break;
    }
}
    a540:	00 00       	nop
    a542:	26 96       	adiw	r28, 0x06	; 6
    a544:	cd bf       	out	0x3d, r28	; 61
    a546:	de bf       	out	0x3e, r29	; 62
    a548:	df 91       	pop	r29
    a54a:	cf 91       	pop	r28
    a54c:	08 95       	ret

0000a54e <lin_tl_handler_error>:
 *
 * Implements    : lin_tl_handler_error_Activity
 *END**************************************************************************/
static void lin_tl_handler_error(l_ifc_handle iii,
                                 l_u8 pid)
{
    a54e:	cf 93       	push	r28
    a550:	df 93       	push	r29
    a552:	cd b7       	in	r28, 0x3d	; 61
    a554:	de b7       	in	r29, 0x3e	; 62
    a556:	26 97       	sbiw	r28, 0x06	; 6
    a558:	cd bf       	out	0x3d, r28	; 61
    a55a:	de bf       	out	0x3e, r29	; 62
    a55c:	8d 83       	std	Y+5, r24	; 0x05
    a55e:	6e 83       	std	Y+6, r22	; 0x06
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a560:	8d 81       	ldd	r24, Y+5	; 0x05
    a562:	28 2f       	mov	r18, r24
    a564:	30 e0       	ldi	r19, 0x00	; 0
    a566:	44 e3       	ldi	r20, 0x34	; 52
    a568:	42 9f       	mul	r20, r18
    a56a:	c0 01       	movw	r24, r0
    a56c:	43 9f       	mul	r20, r19
    a56e:	90 0d       	add	r25, r0
    a570:	11 24       	eor	r1, r1
    a572:	84 59       	subi	r24, 0x94	; 148
    a574:	99 4b       	sbci	r25, 0xB9	; 185
    a576:	89 83       	std	Y+1, r24	; 0x01
    a578:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    a57a:	8d 81       	ldd	r24, Y+5	; 0x05
    a57c:	28 2f       	mov	r18, r24
    a57e:	30 e0       	ldi	r19, 0x00	; 0
    a580:	4c e1       	ldi	r20, 0x1C	; 28
    a582:	42 9f       	mul	r20, r18
    a584:	c0 01       	movw	r24, r0
    a586:	43 9f       	mul	r20, r19
    a588:	90 0d       	add	r25, r0
    a58a:	11 24       	eor	r1, r1
    a58c:	86 56       	subi	r24, 0x66	; 102
    a58e:	9d 4b       	sbci	r25, 0xBD	; 189
    a590:	8b 83       	std	Y+3, r24	; 0x03
    a592:	9c 83       	std	Y+4, r25	; 0x04
    else
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    {
        /* for slave */
        /* Master request */
        if (0x3CU == pid)
    a594:	8e 81       	ldd	r24, Y+6	; 0x06
    a596:	8c 33       	cpi	r24, 0x3C	; 60
    a598:	d9 f4       	brne	.+54     	; 0xa5d0 <lin_tl_handler_error+0x82>
        {
            /* update status of message and queue */
            tl_desc_ptr->rx_msg_status = LD_FAILED;
    a59a:	89 81       	ldd	r24, Y+1	; 0x01
    a59c:	9a 81       	ldd	r25, Y+2	; 0x02
    a59e:	23 e0       	ldi	r18, 0x03	; 3
    a5a0:	fc 01       	movw	r30, r24
    a5a2:	26 8b       	std	Z+22, r18	; 0x16
            tl_desc_ptr->slave_resp_cnt = 0U;
    a5a4:	89 81       	ldd	r24, Y+1	; 0x01
    a5a6:	9a 81       	ldd	r25, Y+2	; 0x02
    a5a8:	fc 01       	movw	r30, r24
    a5aa:	12 a6       	std	Z+42, r1	; 0x2a

            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    a5ac:	8b 81       	ldd	r24, Y+3	; 0x03
    a5ae:	9c 81       	ldd	r25, Y+4	; 0x04
    a5b0:	fc 01       	movw	r30, r24
    a5b2:	80 81       	ld	r24, Z
    a5b4:	88 23       	and	r24, r24
    a5b6:	31 f4       	brne	.+12     	; 0xa5c4 <lin_tl_handler_error+0x76>
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_RECEIVE_ERROR;
    a5b8:	89 81       	ldd	r24, Y+1	; 0x01
    a5ba:	9a 81       	ldd	r25, Y+2	; 0x02
    a5bc:	22 e0       	ldi	r18, 0x02	; 2
    a5be:	fc 01       	movw	r30, r24
    a5c0:	27 87       	std	Z+15, r18	; 0x0f
    a5c2:	1c c0       	rjmp	.+56     	; 0xa5fc <lin_tl_handler_error+0xae>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_rx_queue.queue_status = LD_TRANSFER_ERROR;
    a5c4:	89 81       	ldd	r24, Y+1	; 0x01
    a5c6:	9a 81       	ldd	r25, Y+2	; 0x02
    a5c8:	27 e0       	ldi	r18, 0x07	; 7
    a5ca:	fc 01       	movw	r30, r24
    a5cc:	27 87       	std	Z+15, r18	; 0x0f
    a5ce:	16 c0       	rjmp	.+44     	; 0xa5fc <lin_tl_handler_error+0xae>
        }
        else
        {
            /* Slave Response */
            /* update status of message and queue */
            tl_desc_ptr->tx_msg_status = LD_FAILED;
    a5d0:	89 81       	ldd	r24, Y+1	; 0x01
    a5d2:	9a 81       	ldd	r25, Y+2	; 0x02
    a5d4:	23 e0       	ldi	r18, 0x03	; 3
    a5d6:	fc 01       	movw	r30, r24
    a5d8:	21 8f       	std	Z+25, r18	; 0x19
            /* For LIN 2.1 and above*/
            if (prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    a5da:	8b 81       	ldd	r24, Y+3	; 0x03
    a5dc:	9c 81       	ldd	r25, Y+4	; 0x04
    a5de:	fc 01       	movw	r30, r24
    a5e0:	80 81       	ld	r24, Z
    a5e2:	88 23       	and	r24, r24
    a5e4:	31 f4       	brne	.+12     	; 0xa5f2 <lin_tl_handler_error+0xa4>
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSMIT_ERROR;
    a5e6:	89 81       	ldd	r24, Y+1	; 0x01
    a5e8:	9a 81       	ldd	r25, Y+2	; 0x02
    a5ea:	26 e0       	ldi	r18, 0x06	; 6
    a5ec:	fc 01       	movw	r30, r24
    a5ee:	24 83       	std	Z+4, r18	; 0x04
    a5f0:	05 c0       	rjmp	.+10     	; 0xa5fc <lin_tl_handler_error+0xae>
            }
            /* For J2602*/
            else
            {
                tl_desc_ptr->tl_tx_queue.queue_status = LD_TRANSFER_ERROR;
    a5f2:	89 81       	ldd	r24, Y+1	; 0x01
    a5f4:	9a 81       	ldd	r25, Y+2	; 0x02
    a5f6:	27 e0       	ldi	r18, 0x07	; 7
    a5f8:	fc 01       	movw	r30, r24
    a5fa:	24 83       	std	Z+4, r18	; 0x04
            }
        } /* end of (0x3C == pid) */

        tl_desc_ptr->service_status = LD_SERVICE_ERROR;
    a5fc:	89 81       	ldd	r24, Y+1	; 0x01
    a5fe:	9a 81       	ldd	r25, Y+2	; 0x02
    a600:	23 e0       	ldi	r18, 0x03	; 3
    a602:	fc 01       	movw	r30, r24
    a604:	23 a7       	std	Z+43, r18	; 0x2b
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    a606:	89 81       	ldd	r24, Y+1	; 0x01
    a608:	9a 81       	ldd	r25, Y+2	; 0x02
    a60a:	fc 01       	movw	r30, r24
    a60c:	17 8e       	std	Z+31, r1	; 0x1f
    }
}
    a60e:	00 00       	nop
    a610:	26 96       	adiw	r28, 0x06	; 6
    a612:	cd bf       	out	0x3d, r28	; 61
    a614:	de bf       	out	0x3e, r29	; 62
    a616:	df 91       	pop	r29
    a618:	cf 91       	pop	r28
    a61a:	08 95       	ret

0000a61c <lin_tl_make_master_request_pdu>:
 * This function is implemented for Master
 *
 * Implements    : lin_tl_make_master_request_pdu_Activity
 *END**************************************************************************/
static void lin_tl_make_master_request_pdu(l_ifc_handle iii)
{
    a61c:	cf 93       	push	r28
    a61e:	df 93       	push	r29
    a620:	00 d0       	rcall	.+0      	; 0xa622 <lin_tl_make_master_request_pdu+0x6>
    a622:	1f 92       	push	r1
    a624:	cd b7       	in	r28, 0x3d	; 61
    a626:	de b7       	in	r29, 0x3e	; 62
    a628:	8b 83       	std	Y+3, r24	; 0x03
    lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    a62a:	8b 81       	ldd	r24, Y+3	; 0x03
    a62c:	28 2f       	mov	r18, r24
    a62e:	30 e0       	ldi	r19, 0x00	; 0
    a630:	46 e1       	ldi	r20, 0x16	; 22
    a632:	42 9f       	mul	r20, r18
    a634:	c0 01       	movw	r24, r0
    a636:	43 9f       	mul	r20, r19
    a638:	90 0d       	add	r25, r0
    a63a:	11 24       	eor	r1, r1
    a63c:	80 56       	subi	r24, 0x60	; 96
    a63e:	99 4b       	sbci	r25, 0xB9	; 185
    a640:	89 83       	std	Y+1, r24	; 0x01
    a642:	9a 83       	std	Y+2, r25	; 0x02

    tl_get_raw(iii, prot_state_ptr->response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    a644:	8b 81       	ldd	r24, Y+3	; 0x03
    a646:	28 2f       	mov	r18, r24
    a648:	30 e0       	ldi	r19, 0x00	; 0
    a64a:	44 e3       	ldi	r20, 0x34	; 52
    a64c:	42 9f       	mul	r20, r18
    a64e:	c0 01       	movw	r24, r0
    a650:	43 9f       	mul	r20, r19
    a652:	90 0d       	add	r25, r0
    a654:	11 24       	eor	r1, r1
    a656:	ac 01       	movw	r20, r24
    a658:	44 59       	subi	r20, 0x94	; 148
    a65a:	59 4b       	sbci	r21, 0xB9	; 185
    a65c:	89 81       	ldd	r24, Y+1	; 0x01
    a65e:	9a 81       	ldd	r25, Y+2	; 0x02
    a660:	fc 01       	movw	r30, r24
    a662:	82 81       	ldd	r24, Z+2	; 0x02
    a664:	93 81       	ldd	r25, Z+3	; 0x03
    a666:	20 e0       	ldi	r18, 0x00	; 0
    a668:	bc 01       	movw	r22, r24
    a66a:	8b 81       	ldd	r24, Y+3	; 0x03
    a66c:	0e 94 38 56 	call	0xac70	; 0xac70 <tl_get_raw>
    prot_state_ptr->response_length = 8U;
    a670:	89 81       	ldd	r24, Y+1	; 0x01
    a672:	9a 81       	ldd	r25, Y+2	; 0x02
    a674:	28 e0       	ldi	r18, 0x08	; 8
    a676:	fc 01       	movw	r30, r24
    a678:	24 83       	std	Z+4, r18	; 0x04
}
    a67a:	00 00       	nop
    a67c:	23 96       	adiw	r28, 0x03	; 3
    a67e:	cd bf       	out	0x3d, r28	; 61
    a680:	de bf       	out	0x3e, r29	; 62
    a682:	df 91       	pop	r29
    a684:	cf 91       	pop	r28
    a686:	08 95       	ret

0000a688 <lin_tl_get_pdu>:
 * This function is implemented for Slave and Master.
 *
 * Implements    : lin_tl_get_pdu_Activity
 *END**************************************************************************/
static void lin_tl_get_pdu(l_ifc_handle iii)
{
    a688:	cf 93       	push	r28
    a68a:	df 93       	push	r29
    a68c:	1f 92       	push	r1
    a68e:	cd b7       	in	r28, 0x3d	; 61
    a690:	de b7       	in	r29, 0x3e	; 62
    a692:	89 83       	std	Y+1, r24	; 0x01
    /* Get data from tx queue */
    tl_get_raw(iii, g_lin_protocol_state_array[iii].response_buffer_ptr, &(g_lin_tl_descriptor_array[iii].tl_tx_queue), TRANSMITTING);
    a694:	89 81       	ldd	r24, Y+1	; 0x01
    a696:	28 2f       	mov	r18, r24
    a698:	30 e0       	ldi	r19, 0x00	; 0
    a69a:	44 e3       	ldi	r20, 0x34	; 52
    a69c:	42 9f       	mul	r20, r18
    a69e:	c0 01       	movw	r24, r0
    a6a0:	43 9f       	mul	r20, r19
    a6a2:	90 0d       	add	r25, r0
    a6a4:	11 24       	eor	r1, r1
    a6a6:	ac 01       	movw	r20, r24
    a6a8:	44 59       	subi	r20, 0x94	; 148
    a6aa:	59 4b       	sbci	r21, 0xB9	; 185
    a6ac:	89 81       	ldd	r24, Y+1	; 0x01
    a6ae:	28 2f       	mov	r18, r24
    a6b0:	30 e0       	ldi	r19, 0x00	; 0
    a6b2:	66 e1       	ldi	r22, 0x16	; 22
    a6b4:	62 9f       	mul	r22, r18
    a6b6:	c0 01       	movw	r24, r0
    a6b8:	63 9f       	mul	r22, r19
    a6ba:	90 0d       	add	r25, r0
    a6bc:	11 24       	eor	r1, r1
    a6be:	8e 55       	subi	r24, 0x5E	; 94
    a6c0:	99 4b       	sbci	r25, 0xB9	; 185
    a6c2:	fc 01       	movw	r30, r24
    a6c4:	80 81       	ld	r24, Z
    a6c6:	91 81       	ldd	r25, Z+1	; 0x01
    a6c8:	20 e0       	ldi	r18, 0x00	; 0
    a6ca:	bc 01       	movw	r22, r24
    a6cc:	89 81       	ldd	r24, Y+1	; 0x01
    a6ce:	0e 94 38 56 	call	0xac70	; 0xac70 <tl_get_raw>
}
    a6d2:	00 00       	nop
    a6d4:	0f 90       	pop	r0
    a6d6:	df 91       	pop	r29
    a6d8:	cf 91       	pop	r28
    a6da:	08 95       	ret

0000a6dc <lin_tl_handler_rx_completed>:
 * This function is implemented for Slave and Master.
 *
 * Implements    : lin_tl_handler_rx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_rx_completed(l_ifc_handle iii)
{
    a6dc:	cf 93       	push	r28
    a6de:	df 93       	push	r29
    a6e0:	cd b7       	in	r28, 0x3d	; 61
    a6e2:	de b7       	in	r29, 0x3e	; 62
    a6e4:	2d 97       	sbiw	r28, 0x0d	; 13
    a6e6:	cd bf       	out	0x3d, r28	; 61
    a6e8:	de bf       	out	0x3e, r29	; 62
    a6ea:	8d 87       	std	Y+13, r24	; 0x0d
    l_u8 pci_type;
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a6ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    a6ee:	28 2f       	mov	r18, r24
    a6f0:	30 e0       	ldi	r19, 0x00	; 0
    a6f2:	44 e3       	ldi	r20, 0x34	; 52
    a6f4:	42 9f       	mul	r20, r18
    a6f6:	c0 01       	movw	r24, r0
    a6f8:	43 9f       	mul	r20, r19
    a6fa:	90 0d       	add	r25, r0
    a6fc:	11 24       	eor	r1, r1
    a6fe:	84 59       	subi	r24, 0x94	; 148
    a700:	99 4b       	sbci	r25, 0xB9	; 185
    a702:	8a 83       	std	Y+2, r24	; 0x02
    a704:	9b 83       	std	Y+3, r25	; 0x03
    const lin_protocol_state_t * prot_state_ptr = &g_lin_protocol_state_array[iii];
    a706:	8d 85       	ldd	r24, Y+13	; 0x0d
    a708:	28 2f       	mov	r18, r24
    a70a:	30 e0       	ldi	r19, 0x00	; 0
    a70c:	46 e1       	ldi	r20, 0x16	; 22
    a70e:	42 9f       	mul	r20, r18
    a710:	c0 01       	movw	r24, r0
    a712:	43 9f       	mul	r20, r19
    a714:	90 0d       	add	r25, r0
    a716:	11 24       	eor	r1, r1
    a718:	80 56       	subi	r24, 0x60	; 96
    a71a:	99 4b       	sbci	r25, 0xB9	; 185
    a71c:	8c 83       	std	Y+4, r24	; 0x04
    a71e:	9d 83       	std	Y+5, r25	; 0x05
    const lin_tl_pdu_data_t * lin_tl_pdu = (const lin_tl_pdu_data_t *)prot_state_ptr->response_buffer_ptr;
    a720:	8c 81       	ldd	r24, Y+4	; 0x04
    a722:	9d 81       	ldd	r25, Y+5	; 0x05
    a724:	fc 01       	movw	r30, r24
    a726:	82 81       	ldd	r24, Z+2	; 0x02
    a728:	93 81       	ldd	r25, Z+3	; 0x03
    a72a:	8e 83       	std	Y+6, r24	; 0x06
    a72c:	9f 83       	std	Y+7, r25	; 0x07
    #if (SUPPORT_SLAVE_MODE == 1U)
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    a72e:	8d 85       	ldd	r24, Y+13	; 0x0d
    a730:	28 2f       	mov	r18, r24
    a732:	30 e0       	ldi	r19, 0x00	; 0
    a734:	4c e1       	ldi	r20, 0x1C	; 28
    a736:	42 9f       	mul	r20, r18
    a738:	c0 01       	movw	r24, r0
    a73a:	43 9f       	mul	r20, r19
    a73c:	90 0d       	add	r25, r0
    a73e:	11 24       	eor	r1, r1
    a740:	86 56       	subi	r24, 0x66	; 102
    a742:	9d 4b       	sbci	r25, 0xBD	; 189
    a744:	88 87       	std	Y+8, r24	; 0x08
    a746:	99 87       	std	Y+9, r25	; 0x09
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    a748:	19 82       	std	Y+1, r1	; 0x01
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    a74a:	88 85       	ldd	r24, Y+8	; 0x08
    a74c:	99 85       	ldd	r25, Y+9	; 0x09
    a74e:	fc 01       	movw	r30, r24
    a750:	93 81       	ldd	r25, Z+3	; 0x03
    a752:	81 e0       	ldi	r24, 0x01	; 1
    a754:	89 27       	eor	r24, r25
    a756:	88 23       	and	r24, r24
    a758:	09 f4       	brne	.+2      	; 0xa75c <lin_tl_handler_rx_completed+0x80>
    a75a:	48 c0       	rjmp	.+144    	; 0xa7ec <lin_tl_handler_rx_completed+0x110>
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
    a75c:	88 85       	ldd	r24, Y+8	; 0x08
    a75e:	99 85       	ldd	r25, Y+9	; 0x09
    a760:	fc 01       	movw	r30, r24
    a762:	82 89       	ldd	r24, Z+18	; 0x12
    a764:	28 2f       	mov	r18, r24
    a766:	30 e0       	ldi	r19, 0x00	; 0
    a768:	44 e2       	ldi	r20, 0x24	; 36
    a76a:	42 9f       	mul	r20, r18
    a76c:	c0 01       	movw	r24, r0
    a76e:	43 9f       	mul	r20, r19
    a770:	90 0d       	add	r25, r0
    a772:	11 24       	eor	r1, r1
    a774:	8a 58       	subi	r24, 0x8A	; 138
    a776:	9d 4b       	sbci	r25, 0xBD	; 189
    a778:	8a 87       	std	Y+10, r24	; 0x0a
    a77a:	9b 87       	std	Y+11, r25	; 0x0b
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    a77c:	8e 81       	ldd	r24, Y+6	; 0x06
    a77e:	9f 81       	ldd	r25, Y+7	; 0x07
    a780:	fc 01       	movw	r30, r24
    a782:	80 81       	ld	r24, Z
    a784:	8f 37       	cpi	r24, 0x7F	; 127
    a786:	61 f1       	breq	.+88     	; 0xa7e0 <lin_tl_handler_rx_completed+0x104>
    a788:	8e 81       	ldd	r24, Y+6	; 0x06
    a78a:	9f 81       	ldd	r25, Y+7	; 0x07
    a78c:	fc 01       	movw	r30, r24
    a78e:	80 81       	ld	r24, Z
    a790:	8e 37       	cpi	r24, 0x7E	; 126
    a792:	31 f1       	breq	.+76     	; 0xa7e0 <lin_tl_handler_rx_completed+0x104>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    a794:	8a 85       	ldd	r24, Y+10	; 0x0a
    a796:	9b 85       	ldd	r25, Y+11	; 0x0b
    a798:	fc 01       	movw	r30, r24
    a79a:	80 81       	ld	r24, Z
    a79c:	91 81       	ldd	r25, Z+1	; 0x01
    a79e:	fc 01       	movw	r30, r24
    a7a0:	20 81       	ld	r18, Z
    a7a2:	8e 81       	ldd	r24, Y+6	; 0x06
    a7a4:	9f 81       	ldd	r25, Y+7	; 0x07
    a7a6:	fc 01       	movw	r30, r24
    a7a8:	80 81       	ld	r24, Z
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    a7aa:	28 17       	cp	r18, r24
    a7ac:	31 f0       	breq	.+12     	; 0xa7ba <lin_tl_handler_rx_completed+0xde>
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    a7ae:	8e 81       	ldd	r24, Y+6	; 0x06
    a7b0:	9f 81       	ldd	r25, Y+7	; 0x07
    a7b2:	fc 01       	movw	r30, r24
    a7b4:	82 81       	ldd	r24, Z+2	; 0x02
    a7b6:	80 3b       	cpi	r24, 0xB0	; 176
    a7b8:	81 f4       	brne	.+32     	; 0xa7da <lin_tl_handler_rx_completed+0xfe>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    a7ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    a7bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    a7be:	fc 01       	movw	r30, r24
    a7c0:	22 81       	ldd	r18, Z+2	; 0x02
    a7c2:	8e 81       	ldd	r24, Y+6	; 0x06
    a7c4:	9f 81       	ldd	r25, Y+7	; 0x07
    a7c6:	fc 01       	movw	r30, r24
    a7c8:	80 81       	ld	r24, Z
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
    a7ca:	28 17       	cp	r18, r24
    a7cc:	49 f0       	breq	.+18     	; 0xa7e0 <lin_tl_handler_rx_completed+0x104>
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    a7ce:	8e 81       	ldd	r24, Y+6	; 0x06
    a7d0:	9f 81       	ldd	r25, Y+7	; 0x07
    a7d2:	fc 01       	movw	r30, r24
    a7d4:	82 81       	ldd	r24, Z+2	; 0x02
    a7d6:	80 3b       	cpi	r24, 0xB0	; 176
    a7d8:	19 f4       	brne	.+6      	; 0xa7e0 <lin_tl_handler_rx_completed+0x104>
    const lin_node_attribute_t * node_attr_ptr;
    bool invalid_NAD = false;
    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    {
        node_attr_ptr = &g_lin_node_attribute_array[prot_user_config_ptr->slave_ifc_handle];
        invalid_NAD = ((LD_BROADCAST != (*lin_tl_pdu)[0]) && (LD_FUNCTIONAL_NAD != (*lin_tl_pdu)[0]) &&
    a7da:	81 e0       	ldi	r24, 0x01	; 1
    a7dc:	90 e0       	ldi	r25, 0x00	; 0
    a7de:	02 c0       	rjmp	.+4      	; 0xa7e4 <lin_tl_handler_rx_completed+0x108>
    a7e0:	80 e0       	ldi	r24, 0x00	; 0
    a7e2:	90 e0       	ldi	r25, 0x00	; 0
    a7e4:	89 83       	std	Y+1, r24	; 0x01
    a7e6:	89 81       	ldd	r24, Y+1	; 0x01
    a7e8:	81 70       	andi	r24, 0x01	; 1
    a7ea:	89 83       	std	Y+1, r24	; 0x01
                       (((*node_attr_ptr->configured_NAD_ptr != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD != (*lin_tl_pdu)[2])) ||
                       ((node_attr_ptr->initial_NAD != (*lin_tl_pdu)[0]) && (SERVICE_ASSIGN_NAD == (*lin_tl_pdu)[2]))));
    }
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    pci_type = (l_u8)(((*lin_tl_pdu)[1] & 0xF0U) >> 4U);
    a7ec:	8e 81       	ldd	r24, Y+6	; 0x06
    a7ee:	9f 81       	ldd	r25, Y+7	; 0x07
    a7f0:	fc 01       	movw	r30, r24
    a7f2:	81 81       	ldd	r24, Z+1	; 0x01
    a7f4:	82 95       	swap	r24
    a7f6:	8f 70       	andi	r24, 0x0F	; 15
    a7f8:	8c 87       	std	Y+12, r24	; 0x0c
    /* check NAD whether or not belongs to this slave node */
    #if (SUPPORT_SLAVE_MODE == 1U)
    if (((bool)LIN_SLAVE == prot_user_config_ptr->function) && (invalid_NAD || (pci_type > PCI_CF)))
    a7fa:	88 85       	ldd	r24, Y+8	; 0x08
    a7fc:	99 85       	ldd	r25, Y+9	; 0x09
    a7fe:	fc 01       	movw	r30, r24
    a800:	93 81       	ldd	r25, Z+3	; 0x03
    a802:	81 e0       	ldi	r24, 0x01	; 1
    a804:	89 27       	eor	r24, r25
    a806:	88 23       	and	r24, r24
    a808:	59 f0       	breq	.+22     	; 0xa820 <lin_tl_handler_rx_completed+0x144>
    a80a:	89 81       	ldd	r24, Y+1	; 0x01
    a80c:	88 23       	and	r24, r24
    a80e:	19 f4       	brne	.+6      	; 0xa816 <lin_tl_handler_rx_completed+0x13a>
    a810:	8c 85       	ldd	r24, Y+12	; 0x0c
    a812:	83 30       	cpi	r24, 0x03	; 3
    a814:	28 f0       	brcs	.+10     	; 0xa820 <lin_tl_handler_rx_completed+0x144>
    {
        tl_desc_ptr->slave_resp_cnt = 0;
    a816:	8a 81       	ldd	r24, Y+2	; 0x02
    a818:	9b 81       	ldd	r25, Y+3	; 0x03
    a81a:	fc 01       	movw	r30, r24
    a81c:	12 a6       	std	Z+42, r1	; 0x2a
                /* process received PDU */
                lin_process_pdu(iii, lin_tl_pdu);
            }
        }
    }
}
    a81e:	21 c0       	rjmp	.+66     	; 0xa862 <lin_tl_handler_rx_completed+0x186>
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    a820:	8a 81       	ldd	r24, Y+2	; 0x02
    a822:	9b 81       	ldd	r25, Y+3	; 0x03
    a824:	fc 01       	movw	r30, r24
    a826:	86 a1       	ldd	r24, Z+38	; 0x26
    a828:	85 30       	cpi	r24, 0x05	; 5
    a82a:	31 f0       	breq	.+12     	; 0xa838 <lin_tl_handler_rx_completed+0x15c>
    a82c:	8a 81       	ldd	r24, Y+2	; 0x02
    a82e:	9b 81       	ldd	r25, Y+3	; 0x03
    a830:	fc 01       	movw	r30, r24
    a832:	86 a1       	ldd	r24, Z+38	; 0x26
    a834:	82 30       	cpi	r24, 0x02	; 2
    a836:	31 f4       	brne	.+12     	; 0xa844 <lin_tl_handler_rx_completed+0x168>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
    a838:	8e 81       	ldd	r24, Y+6	; 0x06
    a83a:	9f 81       	ldd	r25, Y+7	; 0x07
    a83c:	fc 01       	movw	r30, r24
    a83e:	80 81       	ld	r24, Z
    }
    else
    #endif /* End (SUPPORT_SLAVE_MODE == 1U) */
    {
        /* ignore Functional request */
        if (!(((tl_desc_ptr->diag_state  == LD_DIAG_RX_PHY) || (tl_desc_ptr->diag_state  == LD_DIAG_TX_PHY)) &&
    a840:	8e 37       	cpi	r24, 0x7E	; 126
    a842:	79 f0       	breq	.+30     	; 0xa862 <lin_tl_handler_rx_completed+0x186>
              ((*lin_tl_pdu)[0] == LD_FUNCTIONAL_NAD)))
        {
            /* check error */
            if (!((tl_desc_ptr->service_status == LD_SERVICE_ERROR) && (pci_type == PCI_CF)))
    a844:	8a 81       	ldd	r24, Y+2	; 0x02
    a846:	9b 81       	ldd	r25, Y+3	; 0x03
    a848:	fc 01       	movw	r30, r24
    a84a:	83 a5       	ldd	r24, Z+43	; 0x2b
    a84c:	83 30       	cpi	r24, 0x03	; 3
    a84e:	19 f4       	brne	.+6      	; 0xa856 <lin_tl_handler_rx_completed+0x17a>
    a850:	8c 85       	ldd	r24, Y+12	; 0x0c
    a852:	82 30       	cpi	r24, 0x02	; 2
    a854:	31 f0       	breq	.+12     	; 0xa862 <lin_tl_handler_rx_completed+0x186>
            {
                /* process received PDU */
                lin_process_pdu(iii, lin_tl_pdu);
    a856:	8e 81       	ldd	r24, Y+6	; 0x06
    a858:	9f 81       	ldd	r25, Y+7	; 0x07
    a85a:	bc 01       	movw	r22, r24
    a85c:	8d 85       	ldd	r24, Y+13	; 0x0d
    a85e:	0e 94 38 52 	call	0xa470	; 0xa470 <lin_process_pdu>
            }
        }
    }
}
    a862:	00 00       	nop
    a864:	2d 96       	adiw	r28, 0x0d	; 13
    a866:	cd bf       	out	0x3d, r28	; 61
    a868:	de bf       	out	0x3e, r29	; 62
    a86a:	df 91       	pop	r29
    a86c:	cf 91       	pop	r28
    a86e:	08 95       	ret

0000a870 <lin_tl_handler_tx_completed>:
 * Description   : This function process when interface send diagnostic frame successfully
 *
 * Implements    : lin_tl_handler_tx_completed_Activity
 *END**************************************************************************/
static void lin_tl_handler_tx_completed(l_ifc_handle iii)
{
    a870:	cf 93       	push	r28
    a872:	df 93       	push	r29
    a874:	cd b7       	in	r28, 0x3d	; 61
    a876:	de b7       	in	r29, 0x3e	; 62
    a878:	25 97       	sbiw	r28, 0x05	; 5
    a87a:	cd bf       	out	0x3d, r28	; 61
    a87c:	de bf       	out	0x3e, r29	; 62
    a87e:	8d 83       	std	Y+5, r24	; 0x05
    lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    a880:	8d 81       	ldd	r24, Y+5	; 0x05
    a882:	28 2f       	mov	r18, r24
    a884:	30 e0       	ldi	r19, 0x00	; 0
    a886:	44 e3       	ldi	r20, 0x34	; 52
    a888:	42 9f       	mul	r20, r18
    a88a:	c0 01       	movw	r24, r0
    a88c:	43 9f       	mul	r20, r19
    a88e:	90 0d       	add	r25, r0
    a890:	11 24       	eor	r1, r1
    a892:	84 59       	subi	r24, 0x94	; 148
    a894:	99 4b       	sbci	r25, 0xB9	; 185
    a896:	89 83       	std	Y+1, r24	; 0x01
    a898:	9a 83       	std	Y+2, r25	; 0x02
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    a89a:	8d 81       	ldd	r24, Y+5	; 0x05
    a89c:	28 2f       	mov	r18, r24
    a89e:	30 e0       	ldi	r19, 0x00	; 0
    a8a0:	4c e1       	ldi	r20, 0x1C	; 28
    a8a2:	42 9f       	mul	r20, r18
    a8a4:	c0 01       	movw	r24, r0
    a8a6:	43 9f       	mul	r20, r19
    a8a8:	90 0d       	add	r25, r0
    a8aa:	11 24       	eor	r1, r1
    a8ac:	86 56       	subi	r24, 0x66	; 102
    a8ae:	9d 4b       	sbci	r25, 0xBD	; 189
    a8b0:	8b 83       	std	Y+3, r24	; 0x03
    a8b2:	9c 83       	std	Y+4, r25	; 0x04
    #if (SUPPORT_MASTER_MODE == 1U)
    lin_master_data_t * master_data_ptr;
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Reset interleave timeout */
    tl_desc_ptr->interleave_timeout_counter = 0;
    a8b4:	89 81       	ldd	r24, Y+1	; 0x01
    a8b6:	9a 81       	ldd	r25, Y+2	; 0x02
    a8b8:	fc 01       	movw	r30, r24
    a8ba:	10 a6       	std	Z+40, r1	; 0x28
    a8bc:	11 a6       	std	Z+41, r1	; 0x29
    /* Check message is sent completely */
    if (0U == tl_desc_ptr->tl_tx_queue.queue_current_size)
    a8be:	89 81       	ldd	r24, Y+1	; 0x01
    a8c0:	9a 81       	ldd	r25, Y+2	; 0x02
    a8c2:	fc 01       	movw	r30, r24
    a8c4:	85 81       	ldd	r24, Z+5	; 0x05
    a8c6:	96 81       	ldd	r25, Z+6	; 0x06
    a8c8:	89 2b       	or	r24, r25
    a8ca:	e1 f4       	brne	.+56     	; 0xa904 <lin_tl_handler_tx_completed+0x94>
    {
        tl_desc_ptr->check_timeout_type = LD_NO_CHECK_TIMEOUT;
    a8cc:	89 81       	ldd	r24, Y+1	; 0x01
    a8ce:	9a 81       	ldd	r25, Y+2	; 0x02
    a8d0:	fc 01       	movw	r30, r24
    a8d2:	17 8e       	std	Z+31, r1	; 0x1f
        tl_desc_ptr->tx_msg_status = LD_COMPLETED;
    a8d4:	89 81       	ldd	r24, Y+1	; 0x01
    a8d6:	9a 81       	ldd	r25, Y+2	; 0x02
    a8d8:	22 e0       	ldi	r18, 0x02	; 2
    a8da:	fc 01       	movw	r30, r24
    a8dc:	21 8f       	std	Z+25, r18	; 0x19
        tl_desc_ptr->service_status = LD_REQUEST_FINISHED;
    a8de:	89 81       	ldd	r24, Y+1	; 0x01
    a8e0:	9a 81       	ldd	r25, Y+2	; 0x02
    a8e2:	21 e0       	ldi	r18, 0x01	; 1
    a8e4:	fc 01       	movw	r30, r24
    a8e6:	23 a7       	std	Z+43, r18	; 0x2b
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    a8e8:	8b 81       	ldd	r24, Y+3	; 0x03
    a8ea:	9c 81       	ldd	r25, Y+4	; 0x04
    a8ec:	fc 01       	movw	r30, r24
    a8ee:	93 81       	ldd	r25, Z+3	; 0x03
    a8f0:	81 e0       	ldi	r24, 0x01	; 1
    a8f2:	89 27       	eor	r24, r25
    a8f4:	88 23       	and	r24, r24
    a8f6:	c1 f1       	breq	.+112    	; 0xa968 <lin_tl_handler_tx_completed+0xf8>
        {
            tl_desc_ptr->diag_state = LD_DIAG_IDLE;
    a8f8:	89 81       	ldd	r24, Y+1	; 0x01
    a8fa:	9a 81       	ldd	r25, Y+2	; 0x02
    a8fc:	21 e0       	ldi	r18, 0x01	; 1
    a8fe:	fc 01       	movw	r30, r24
    a900:	26 a3       	std	Z+38, r18	; 0x26
    {
        /* Switch to previous normal schedule table*/
        lin_tl_sch_switch(iii);
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
}
    a902:	32 c0       	rjmp	.+100    	; 0xa968 <lin_tl_handler_tx_completed+0xf8>
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
    }
    else
    {
        #if (SUPPORT_SLAVE_MODE == 1U)
        if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    a904:	8b 81       	ldd	r24, Y+3	; 0x03
    a906:	9c 81       	ldd	r25, Y+4	; 0x04
    a908:	fc 01       	movw	r30, r24
    a90a:	93 81       	ldd	r25, Z+3	; 0x03
    a90c:	81 e0       	ldi	r24, 0x01	; 1
    a90e:	89 27       	eor	r24, r25
    a910:	88 23       	and	r24, r24
    a912:	51 f1       	breq	.+84     	; 0xa968 <lin_tl_handler_tx_completed+0xf8>
        {
            if(prot_user_config_ptr->protocol_version == LIN_PROTOCOL_21)
    a914:	8b 81       	ldd	r24, Y+3	; 0x03
    a916:	9c 81       	ldd	r25, Y+4	; 0x04
    a918:	fc 01       	movw	r30, r24
    a91a:	80 81       	ld	r24, Z
    a91c:	88 23       	and	r24, r24
    a91e:	21 f5       	brne	.+72     	; 0xa968 <lin_tl_handler_tx_completed+0xf8>
            {
                tl_desc_ptr->check_timeout = g_lin_node_attribute_array[g_lin_protocol_user_cfg_array[iii].slave_ifc_handle].N_As_timeout;
    a920:	8d 81       	ldd	r24, Y+5	; 0x05
    a922:	28 2f       	mov	r18, r24
    a924:	30 e0       	ldi	r19, 0x00	; 0
    a926:	4c e1       	ldi	r20, 0x1C	; 28
    a928:	42 9f       	mul	r20, r18
    a92a:	c0 01       	movw	r24, r0
    a92c:	43 9f       	mul	r20, r19
    a92e:	90 0d       	add	r25, r0
    a930:	11 24       	eor	r1, r1
    a932:	84 55       	subi	r24, 0x54	; 84
    a934:	9d 4b       	sbci	r25, 0xBD	; 189
    a936:	fc 01       	movw	r30, r24
    a938:	80 81       	ld	r24, Z
    a93a:	28 2f       	mov	r18, r24
    a93c:	30 e0       	ldi	r19, 0x00	; 0
    a93e:	44 e2       	ldi	r20, 0x24	; 36
    a940:	42 9f       	mul	r20, r18
    a942:	c0 01       	movw	r24, r0
    a944:	43 9f       	mul	r20, r19
    a946:	90 0d       	add	r25, r0
    a948:	11 24       	eor	r1, r1
    a94a:	8f 56       	subi	r24, 0x6F	; 111
    a94c:	9d 4b       	sbci	r25, 0xBD	; 189
    a94e:	fc 01       	movw	r30, r24
    a950:	20 81       	ld	r18, Z
    a952:	31 81       	ldd	r19, Z+1	; 0x01
    a954:	89 81       	ldd	r24, Y+1	; 0x01
    a956:	9a 81       	ldd	r25, Y+2	; 0x02
    a958:	fc 01       	movw	r30, r24
    a95a:	20 a3       	std	Z+32, r18	; 0x20
    a95c:	31 a3       	std	Z+33, r19	; 0x21
                tl_desc_ptr->check_timeout_type = LD_CHECK_N_AS_TIMEOUT;
    a95e:	89 81       	ldd	r24, Y+1	; 0x01
    a960:	9a 81       	ldd	r25, Y+2	; 0x02
    a962:	21 e0       	ldi	r18, 0x01	; 1
    a964:	fc 01       	movw	r30, r24
    a966:	27 8f       	std	Z+31, r18	; 0x1f
    {
        /* Switch to previous normal schedule table*/
        lin_tl_sch_switch(iii);
    }
    #endif /* End (SUPPORT_MASTER_MODE == 1U) */
}
    a968:	00 00       	nop
    a96a:	25 96       	adiw	r28, 0x05	; 5
    a96c:	cd bf       	out	0x3d, r28	; 61
    a96e:	de bf       	out	0x3e, r29	; 62
    a970:	df 91       	pop	r29
    a972:	cf 91       	pop	r28
    a974:	08 95       	ret

0000a976 <lin_tl_attach_service>:
 * This function is implemented for Slave only.
 *
 * Implements    : lin_tl_attach_service_Activity
 *END**************************************************************************/
static void lin_tl_attach_service(l_ifc_handle iii)
{
    a976:	cf 93       	push	r28
    a978:	df 93       	push	r29
    a97a:	cd b7       	in	r28, 0x3d	; 61
    a97c:	de b7       	in	r29, 0x3e	; 62
    a97e:	28 97       	sbiw	r28, 0x08	; 8
    a980:	cd bf       	out	0x3d, r28	; 61
    a982:	de bf       	out	0x3e, r29	; 62
    a984:	88 87       	std	Y+8, r24	; 0x08
    l_u8 sid;
    l_u8 frame_type;
    l_u8 rx_queue_current_status;
    const lin_transport_layer_queue_t * rx_queue;
    lin_transport_layer_queue_t * tx_queue;
    rx_queue = &(g_lin_tl_descriptor_array[iii].tl_rx_queue);
    a986:	88 85       	ldd	r24, Y+8	; 0x08
    a988:	28 2f       	mov	r18, r24
    a98a:	30 e0       	ldi	r19, 0x00	; 0
    a98c:	44 e3       	ldi	r20, 0x34	; 52
    a98e:	42 9f       	mul	r20, r18
    a990:	c0 01       	movw	r24, r0
    a992:	43 9f       	mul	r20, r19
    a994:	90 0d       	add	r25, r0
    a996:	11 24       	eor	r1, r1
    a998:	0b 96       	adiw	r24, 0x0b	; 11
    a99a:	84 59       	subi	r24, 0x94	; 148
    a99c:	99 4b       	sbci	r25, 0xB9	; 185
    a99e:	8a 83       	std	Y+2, r24	; 0x02
    a9a0:	9b 83       	std	Y+3, r25	; 0x03
    tx_queue = &(g_lin_tl_descriptor_array[iii].tl_tx_queue);
    a9a2:	88 85       	ldd	r24, Y+8	; 0x08
    a9a4:	28 2f       	mov	r18, r24
    a9a6:	30 e0       	ldi	r19, 0x00	; 0
    a9a8:	44 e3       	ldi	r20, 0x34	; 52
    a9aa:	42 9f       	mul	r20, r18
    a9ac:	c0 01       	movw	r24, r0
    a9ae:	43 9f       	mul	r20, r19
    a9b0:	90 0d       	add	r25, r0
    a9b2:	11 24       	eor	r1, r1
    a9b4:	84 59       	subi	r24, 0x94	; 148
    a9b6:	99 4b       	sbci	r25, 0xB9	; 185
    a9b8:	8c 83       	std	Y+4, r24	; 0x04
    a9ba:	9d 83       	std	Y+5, r25	; 0x05


    /* prepare tx queue */
    tx_queue->queue_current_size = 0;
    a9bc:	8c 81       	ldd	r24, Y+4	; 0x04
    a9be:	9d 81       	ldd	r25, Y+5	; 0x05
    a9c0:	fc 01       	movw	r30, r24
    a9c2:	15 82       	std	Z+5, r1	; 0x05
    a9c4:	16 82       	std	Z+6, r1	; 0x06
    tx_queue->queue_header = 0;
    a9c6:	8c 81       	ldd	r24, Y+4	; 0x04
    a9c8:	9d 81       	ldd	r25, Y+5	; 0x05
    a9ca:	fc 01       	movw	r30, r24
    a9cc:	10 82       	st	Z, r1
    a9ce:	11 82       	std	Z+1, r1	; 0x01
    tx_queue->queue_tail = 0;
    a9d0:	8c 81       	ldd	r24, Y+4	; 0x04
    a9d2:	9d 81       	ldd	r25, Y+5	; 0x05
    a9d4:	fc 01       	movw	r30, r24
    a9d6:	12 82       	std	Z+2, r1	; 0x02
    a9d8:	13 82       	std	Z+3, r1	; 0x03
    tx_queue->queue_status = LD_QUEUE_EMPTY;
    a9da:	8c 81       	ldd	r24, Y+4	; 0x04
    a9dc:	9d 81       	ldd	r25, Y+5	; 0x05
    a9de:	25 e0       	ldi	r18, 0x05	; 5
    a9e0:	fc 01       	movw	r30, r24
    a9e2:	24 83       	std	Z+4, r18	; 0x04

    /* Get rx queue current status */
    rx_queue_current_status = ld_raw_rx_status(iii);
    a9e4:	88 85       	ldd	r24, Y+8	; 0x08
    a9e6:	0e 94 ac 4e 	call	0x9d58	; 0x9d58 <ld_raw_rx_status>
    a9ea:	8e 83       	std	Y+6, r24	; 0x06
    /* Check whether RX Queue contains data */
    if (((l_u8)LD_DATA_AVAILABLE == rx_queue_current_status) || ((l_u8)LD_QUEUE_FULL == rx_queue_current_status))
    a9ec:	8e 81       	ldd	r24, Y+6	; 0x06
    a9ee:	81 30       	cpi	r24, 0x01	; 1
    a9f0:	21 f0       	breq	.+8      	; 0xa9fa <lin_tl_attach_service+0x84>
    a9f2:	8e 81       	ldd	r24, Y+6	; 0x06
    a9f4:	83 30       	cpi	r24, 0x03	; 3
    a9f6:	09 f0       	breq	.+2      	; 0xa9fa <lin_tl_attach_service+0x84>
    a9f8:	49 c0       	rjmp	.+146    	; 0xaa8c <lin_tl_attach_service+0x116>
    {
        /* get frame type */
        frame_type = (l_u8)((rx_queue->tl_pdu_ptr[rx_queue->queue_header][1] & 0xF0U) >> 4U);
    a9fa:	8a 81       	ldd	r24, Y+2	; 0x02
    a9fc:	9b 81       	ldd	r25, Y+3	; 0x03
    a9fe:	fc 01       	movw	r30, r24
    aa00:	21 85       	ldd	r18, Z+9	; 0x09
    aa02:	32 85       	ldd	r19, Z+10	; 0x0a
    aa04:	8a 81       	ldd	r24, Y+2	; 0x02
    aa06:	9b 81       	ldd	r25, Y+3	; 0x03
    aa08:	fc 01       	movw	r30, r24
    aa0a:	80 81       	ld	r24, Z
    aa0c:	91 81       	ldd	r25, Z+1	; 0x01
    aa0e:	88 0f       	add	r24, r24
    aa10:	99 1f       	adc	r25, r25
    aa12:	88 0f       	add	r24, r24
    aa14:	99 1f       	adc	r25, r25
    aa16:	88 0f       	add	r24, r24
    aa18:	99 1f       	adc	r25, r25
    aa1a:	82 0f       	add	r24, r18
    aa1c:	93 1f       	adc	r25, r19
    aa1e:	fc 01       	movw	r30, r24
    aa20:	81 81       	ldd	r24, Z+1	; 0x01
    aa22:	82 95       	swap	r24
    aa24:	8f 70       	andi	r24, 0x0F	; 15
    aa26:	8f 83       	std	Y+7, r24	; 0x07
        /* Get SID information */
        if (frame_type == PCI_FF)
    aa28:	8f 81       	ldd	r24, Y+7	; 0x07
    aa2a:	81 30       	cpi	r24, 0x01	; 1
    aa2c:	b1 f4       	brne	.+44     	; 0xaa5a <lin_tl_attach_service+0xe4>
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][3];
    aa2e:	8a 81       	ldd	r24, Y+2	; 0x02
    aa30:	9b 81       	ldd	r25, Y+3	; 0x03
    aa32:	fc 01       	movw	r30, r24
    aa34:	21 85       	ldd	r18, Z+9	; 0x09
    aa36:	32 85       	ldd	r19, Z+10	; 0x0a
    aa38:	8a 81       	ldd	r24, Y+2	; 0x02
    aa3a:	9b 81       	ldd	r25, Y+3	; 0x03
    aa3c:	fc 01       	movw	r30, r24
    aa3e:	80 81       	ld	r24, Z
    aa40:	91 81       	ldd	r25, Z+1	; 0x01
    aa42:	88 0f       	add	r24, r24
    aa44:	99 1f       	adc	r25, r25
    aa46:	88 0f       	add	r24, r24
    aa48:	99 1f       	adc	r25, r25
    aa4a:	88 0f       	add	r24, r24
    aa4c:	99 1f       	adc	r25, r25
    aa4e:	82 0f       	add	r24, r18
    aa50:	93 1f       	adc	r25, r19
    aa52:	fc 01       	movw	r30, r24
    aa54:	83 81       	ldd	r24, Z+3	; 0x03
    aa56:	89 83       	std	Y+1, r24	; 0x01
    aa58:	15 c0       	rjmp	.+42     	; 0xaa84 <lin_tl_attach_service+0x10e>
        }
        else
        {
            sid = rx_queue->tl_pdu_ptr[rx_queue->queue_header][2];
    aa5a:	8a 81       	ldd	r24, Y+2	; 0x02
    aa5c:	9b 81       	ldd	r25, Y+3	; 0x03
    aa5e:	fc 01       	movw	r30, r24
    aa60:	21 85       	ldd	r18, Z+9	; 0x09
    aa62:	32 85       	ldd	r19, Z+10	; 0x0a
    aa64:	8a 81       	ldd	r24, Y+2	; 0x02
    aa66:	9b 81       	ldd	r25, Y+3	; 0x03
    aa68:	fc 01       	movw	r30, r24
    aa6a:	80 81       	ld	r24, Z
    aa6c:	91 81       	ldd	r25, Z+1	; 0x01
    aa6e:	88 0f       	add	r24, r24
    aa70:	99 1f       	adc	r25, r25
    aa72:	88 0f       	add	r24, r24
    aa74:	99 1f       	adc	r25, r25
    aa76:	88 0f       	add	r24, r24
    aa78:	99 1f       	adc	r25, r25
    aa7a:	82 0f       	add	r24, r18
    aa7c:	93 1f       	adc	r25, r19
    aa7e:	fc 01       	movw	r30, r24
    aa80:	82 81       	ldd	r24, Z+2	; 0x02
    aa82:	89 83       	std	Y+1, r24	; 0x01
        }

        /* Callback to diagnostic layer to process SID */
        DIAG_SERVICE_CALLBACK_HANDLER(iii, sid);
    aa84:	69 81       	ldd	r22, Y+1	; 0x01
    aa86:	88 85       	ldd	r24, Y+8	; 0x08
    aa88:	0e 94 b9 43 	call	0x8772	; 0x8772 <lin_diag_service_callback>
    }
}
    aa8c:	00 00       	nop
    aa8e:	28 96       	adiw	r28, 0x08	; 8
    aa90:	cd bf       	out	0x3d, r28	; 61
    aa92:	de bf       	out	0x3e, r29	; 62
    aa94:	df 91       	pop	r29
    aa96:	cf 91       	pop	r28
    aa98:	08 95       	ret

0000aa9a <tl_put_raw>:
 *END**************************************************************************/
void tl_put_raw(l_ifc_handle iii,
                const l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    aa9a:	cf 93       	push	r28
    aa9c:	df 93       	push	r29
    aa9e:	cd b7       	in	r28, 0x3d	; 61
    aaa0:	de b7       	in	r29, 0x3e	; 62
    aaa2:	29 97       	sbiw	r28, 0x09	; 9
    aaa4:	cd bf       	out	0x3d, r28	; 61
    aaa6:	de bf       	out	0x3e, r29	; 62
    aaa8:	8c 83       	std	Y+4, r24	; 0x04
    aaaa:	6d 83       	std	Y+5, r22	; 0x05
    aaac:	7e 83       	std	Y+6, r23	; 0x06
    aaae:	4f 83       	std	Y+7, r20	; 0x07
    aab0:	58 87       	std	Y+8, r21	; 0x08
    aab2:	29 87       	std	Y+9, r18	; 0x09
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    lin_master_data_t * master_data_ptr;
#endif /* End (SUPPORT_MASTER_MODE == 1U) */

    /* Get transmit queue */
    queue_data = queue->tl_pdu_ptr;
    aab4:	8f 81       	ldd	r24, Y+7	; 0x07
    aab6:	98 85       	ldd	r25, Y+8	; 0x08
    aab8:	fc 01       	movw	r30, r24
    aaba:	81 85       	ldd	r24, Z+9	; 0x09
    aabc:	92 85       	ldd	r25, Z+10	; 0x0a
    aabe:	8a 83       	std	Y+2, r24	; 0x02
    aac0:	9b 83       	std	Y+3, r25	; 0x03

    /* check status of queue */
    if ((queue->queue_current_size < queue->queue_max_size) && ((data[0] != LD_FUNCTIONAL_NAD) || (queue_data[queue->queue_header][0] != LD_FUNCTIONAL_NAD)))
    aac2:	8f 81       	ldd	r24, Y+7	; 0x07
    aac4:	98 85       	ldd	r25, Y+8	; 0x08
    aac6:	fc 01       	movw	r30, r24
    aac8:	25 81       	ldd	r18, Z+5	; 0x05
    aaca:	36 81       	ldd	r19, Z+6	; 0x06
    aacc:	8f 81       	ldd	r24, Y+7	; 0x07
    aace:	98 85       	ldd	r25, Y+8	; 0x08
    aad0:	fc 01       	movw	r30, r24
    aad2:	87 81       	ldd	r24, Z+7	; 0x07
    aad4:	90 85       	ldd	r25, Z+8	; 0x08
    aad6:	28 17       	cp	r18, r24
    aad8:	39 07       	cpc	r19, r25
    aada:	08 f0       	brcs	.+2      	; 0xaade <tl_put_raw+0x44>
    aadc:	c2 c0       	rjmp	.+388    	; 0xac62 <tl_put_raw+0x1c8>
    aade:	8d 81       	ldd	r24, Y+5	; 0x05
    aae0:	9e 81       	ldd	r25, Y+6	; 0x06
    aae2:	fc 01       	movw	r30, r24
    aae4:	80 81       	ld	r24, Z
    aae6:	8e 37       	cpi	r24, 0x7E	; 126
    aae8:	a1 f4       	brne	.+40     	; 0xab12 <tl_put_raw+0x78>
    aaea:	8f 81       	ldd	r24, Y+7	; 0x07
    aaec:	98 85       	ldd	r25, Y+8	; 0x08
    aaee:	fc 01       	movw	r30, r24
    aaf0:	80 81       	ld	r24, Z
    aaf2:	91 81       	ldd	r25, Z+1	; 0x01
    aaf4:	88 0f       	add	r24, r24
    aaf6:	99 1f       	adc	r25, r25
    aaf8:	88 0f       	add	r24, r24
    aafa:	99 1f       	adc	r25, r25
    aafc:	88 0f       	add	r24, r24
    aafe:	99 1f       	adc	r25, r25
    ab00:	2a 81       	ldd	r18, Y+2	; 0x02
    ab02:	3b 81       	ldd	r19, Y+3	; 0x03
    ab04:	82 0f       	add	r24, r18
    ab06:	93 1f       	adc	r25, r19
    ab08:	fc 01       	movw	r30, r24
    ab0a:	80 81       	ld	r24, Z
    ab0c:	8e 37       	cpi	r24, 0x7E	; 126
    ab0e:	09 f4       	brne	.+2      	; 0xab12 <tl_put_raw+0x78>
    ab10:	a8 c0       	rjmp	.+336    	; 0xac62 <tl_put_raw+0x1c8>
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
    ab12:	8f 81       	ldd	r24, Y+7	; 0x07
    ab14:	98 85       	ldd	r25, Y+8	; 0x08
    ab16:	fc 01       	movw	r30, r24
    ab18:	84 81       	ldd	r24, Z+4	; 0x04
    ab1a:	85 30       	cpi	r24, 0x05	; 5
    ab1c:	31 f0       	breq	.+12     	; 0xab2a <tl_put_raw+0x90>
    ab1e:	8f 81       	ldd	r24, Y+7	; 0x07
    ab20:	98 85       	ldd	r25, Y+8	; 0x08
    ab22:	fc 01       	movw	r30, r24
    ab24:	84 81       	ldd	r24, Z+4	; 0x04
    ab26:	88 23       	and	r24, r24
    ab28:	79 f4       	brne	.+30     	; 0xab48 <tl_put_raw+0xae>
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    ab2a:	89 85       	ldd	r24, Y+9	; 0x09
    ab2c:	88 23       	and	r24, r24
    ab2e:	31 f4       	brne	.+12     	; 0xab3c <tl_put_raw+0xa2>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    ab30:	8f 81       	ldd	r24, Y+7	; 0x07
    ab32:	98 85       	ldd	r25, Y+8	; 0x08
    ab34:	24 e0       	ldi	r18, 0x04	; 4
    ab36:	fc 01       	movw	r30, r24
    ab38:	24 83       	std	Z+4, r18	; 0x04
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    ab3a:	4d c0       	rjmp	.+154    	; 0xabd6 <tl_put_raw+0x13c>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    ab3c:	8f 81       	ldd	r24, Y+7	; 0x07
    ab3e:	98 85       	ldd	r25, Y+8	; 0x08
    ab40:	21 e0       	ldi	r18, 0x01	; 1
    ab42:	fc 01       	movw	r30, r24
    ab44:	24 83       	std	Z+4, r18	; 0x04
    {
        /* process queue tail */
        if ((LD_QUEUE_EMPTY == queue->queue_status) || (LD_NO_DATA == queue->queue_status))
        {
            /* Set status of queue */
            if (TRANSMITTING == direction)
    ab46:	47 c0       	rjmp	.+142    	; 0xabd6 <tl_put_raw+0x13c>
                queue->queue_status = LD_DATA_AVAILABLE;
            }
        }
        else
        {
            if ((data[0] == LD_FUNCTIONAL_NAD) && (TRANSMITTING == direction))
    ab48:	8d 81       	ldd	r24, Y+5	; 0x05
    ab4a:	9e 81       	ldd	r25, Y+6	; 0x06
    ab4c:	fc 01       	movw	r30, r24
    ab4e:	80 81       	ld	r24, Z
    ab50:	8e 37       	cpi	r24, 0x7E	; 126
    ab52:	11 f5       	brne	.+68     	; 0xab98 <tl_put_raw+0xfe>
    ab54:	89 85       	ldd	r24, Y+9	; 0x09
    ab56:	88 23       	and	r24, r24
    ab58:	f9 f4       	brne	.+62     	; 0xab98 <tl_put_raw+0xfe>
            {
                if (0U == queue->queue_header)
    ab5a:	8f 81       	ldd	r24, Y+7	; 0x07
    ab5c:	98 85       	ldd	r25, Y+8	; 0x08
    ab5e:	fc 01       	movw	r30, r24
    ab60:	80 81       	ld	r24, Z
    ab62:	91 81       	ldd	r25, Z+1	; 0x01
    ab64:	89 2b       	or	r24, r25
    ab66:	51 f4       	brne	.+20     	; 0xab7c <tl_put_raw+0xe2>
                {
                    queue->queue_header = queue->queue_max_size;
    ab68:	8f 81       	ldd	r24, Y+7	; 0x07
    ab6a:	98 85       	ldd	r25, Y+8	; 0x08
    ab6c:	fc 01       	movw	r30, r24
    ab6e:	27 81       	ldd	r18, Z+7	; 0x07
    ab70:	30 85       	ldd	r19, Z+8	; 0x08
    ab72:	8f 81       	ldd	r24, Y+7	; 0x07
    ab74:	98 85       	ldd	r25, Y+8	; 0x08
    ab76:	fc 01       	movw	r30, r24
    ab78:	20 83       	st	Z, r18
    ab7a:	31 83       	std	Z+1, r19	; 0x01
                }
                queue->queue_header--;
    ab7c:	8f 81       	ldd	r24, Y+7	; 0x07
    ab7e:	98 85       	ldd	r25, Y+8	; 0x08
    ab80:	fc 01       	movw	r30, r24
    ab82:	80 81       	ld	r24, Z
    ab84:	91 81       	ldd	r25, Z+1	; 0x01
    ab86:	9c 01       	movw	r18, r24
    ab88:	21 50       	subi	r18, 0x01	; 1
    ab8a:	31 09       	sbc	r19, r1
    ab8c:	8f 81       	ldd	r24, Y+7	; 0x07
    ab8e:	98 85       	ldd	r25, Y+8	; 0x08
    ab90:	fc 01       	movw	r30, r24
    ab92:	20 83       	st	Z, r18
    ab94:	31 83       	std	Z+1, r19	; 0x01
    ab96:	1f c0       	rjmp	.+62     	; 0xabd6 <tl_put_raw+0x13c>
            }
            else
            {
                queue->queue_tail++;
    ab98:	8f 81       	ldd	r24, Y+7	; 0x07
    ab9a:	98 85       	ldd	r25, Y+8	; 0x08
    ab9c:	fc 01       	movw	r30, r24
    ab9e:	82 81       	ldd	r24, Z+2	; 0x02
    aba0:	93 81       	ldd	r25, Z+3	; 0x03
    aba2:	9c 01       	movw	r18, r24
    aba4:	2f 5f       	subi	r18, 0xFF	; 255
    aba6:	3f 4f       	sbci	r19, 0xFF	; 255
    aba8:	8f 81       	ldd	r24, Y+7	; 0x07
    abaa:	98 85       	ldd	r25, Y+8	; 0x08
    abac:	fc 01       	movw	r30, r24
    abae:	22 83       	std	Z+2, r18	; 0x02
    abb0:	33 83       	std	Z+3, r19	; 0x03
                /* Check if queue size equal to queue tail */
                if (queue->queue_max_size == queue->queue_tail)
    abb2:	8f 81       	ldd	r24, Y+7	; 0x07
    abb4:	98 85       	ldd	r25, Y+8	; 0x08
    abb6:	fc 01       	movw	r30, r24
    abb8:	27 81       	ldd	r18, Z+7	; 0x07
    abba:	30 85       	ldd	r19, Z+8	; 0x08
    abbc:	8f 81       	ldd	r24, Y+7	; 0x07
    abbe:	98 85       	ldd	r25, Y+8	; 0x08
    abc0:	fc 01       	movw	r30, r24
    abc2:	82 81       	ldd	r24, Z+2	; 0x02
    abc4:	93 81       	ldd	r25, Z+3	; 0x03
    abc6:	28 17       	cp	r18, r24
    abc8:	39 07       	cpc	r19, r25
    abca:	29 f4       	brne	.+10     	; 0xabd6 <tl_put_raw+0x13c>
                {
                    queue->queue_tail = 0U;
    abcc:	8f 81       	ldd	r24, Y+7	; 0x07
    abce:	98 85       	ldd	r25, Y+8	; 0x08
    abd0:	fc 01       	movw	r30, r24
    abd2:	12 82       	std	Z+2, r1	; 0x02
    abd4:	13 82       	std	Z+3, r1	; 0x03
        }
        else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
    abd6:	19 82       	std	Y+1, r1	; 0x01
    abd8:	22 c0       	rjmp	.+68     	; 0xac1e <tl_put_raw+0x184>
            {
                queue_data[queue->queue_tail][i] = data[i];
    abda:	8f 81       	ldd	r24, Y+7	; 0x07
    abdc:	98 85       	ldd	r25, Y+8	; 0x08
    abde:	fc 01       	movw	r30, r24
    abe0:	82 81       	ldd	r24, Z+2	; 0x02
    abe2:	93 81       	ldd	r25, Z+3	; 0x03
    abe4:	88 0f       	add	r24, r24
    abe6:	99 1f       	adc	r25, r25
    abe8:	88 0f       	add	r24, r24
    abea:	99 1f       	adc	r25, r25
    abec:	88 0f       	add	r24, r24
    abee:	99 1f       	adc	r25, r25
    abf0:	2a 81       	ldd	r18, Y+2	; 0x02
    abf2:	3b 81       	ldd	r19, Y+3	; 0x03
    abf4:	28 0f       	add	r18, r24
    abf6:	39 1f       	adc	r19, r25
    abf8:	89 81       	ldd	r24, Y+1	; 0x01
    abfa:	88 2f       	mov	r24, r24
    abfc:	90 e0       	ldi	r25, 0x00	; 0
    abfe:	49 81       	ldd	r20, Y+1	; 0x01
    ac00:	44 2f       	mov	r20, r20
    ac02:	50 e0       	ldi	r21, 0x00	; 0
    ac04:	6d 81       	ldd	r22, Y+5	; 0x05
    ac06:	7e 81       	ldd	r23, Y+6	; 0x06
    ac08:	46 0f       	add	r20, r22
    ac0a:	57 1f       	adc	r21, r23
    ac0c:	fa 01       	movw	r30, r20
    ac0e:	40 81       	ld	r20, Z
    ac10:	82 0f       	add	r24, r18
    ac12:	93 1f       	adc	r25, r19
    ac14:	fc 01       	movw	r30, r24
    ac16:	40 83       	st	Z, r20
        }
        else
        #endif /* End (SUPPORT_MASTER_MODE == 1U) */
        {
            /* copy data to queue */
            for (i = 0U; i < 8U; i++)
    ac18:	89 81       	ldd	r24, Y+1	; 0x01
    ac1a:	8f 5f       	subi	r24, 0xFF	; 255
    ac1c:	89 83       	std	Y+1, r24	; 0x01
    ac1e:	89 81       	ldd	r24, Y+1	; 0x01
    ac20:	88 30       	cpi	r24, 0x08	; 8
    ac22:	d8 f2       	brcs	.-74     	; 0xabda <tl_put_raw+0x140>
                queue_data[queue->queue_tail][i] = data[i];
            }
        }

        /* update queue status */
        queue->queue_current_size++;
    ac24:	8f 81       	ldd	r24, Y+7	; 0x07
    ac26:	98 85       	ldd	r25, Y+8	; 0x08
    ac28:	fc 01       	movw	r30, r24
    ac2a:	85 81       	ldd	r24, Z+5	; 0x05
    ac2c:	96 81       	ldd	r25, Z+6	; 0x06
    ac2e:	9c 01       	movw	r18, r24
    ac30:	2f 5f       	subi	r18, 0xFF	; 255
    ac32:	3f 4f       	sbci	r19, 0xFF	; 255
    ac34:	8f 81       	ldd	r24, Y+7	; 0x07
    ac36:	98 85       	ldd	r25, Y+8	; 0x08
    ac38:	fc 01       	movw	r30, r24
    ac3a:	25 83       	std	Z+5, r18	; 0x05
    ac3c:	36 83       	std	Z+6, r19	; 0x06
        if (queue->queue_current_size >= queue->queue_max_size)
    ac3e:	8f 81       	ldd	r24, Y+7	; 0x07
    ac40:	98 85       	ldd	r25, Y+8	; 0x08
    ac42:	fc 01       	movw	r30, r24
    ac44:	25 81       	ldd	r18, Z+5	; 0x05
    ac46:	36 81       	ldd	r19, Z+6	; 0x06
    ac48:	8f 81       	ldd	r24, Y+7	; 0x07
    ac4a:	98 85       	ldd	r25, Y+8	; 0x08
    ac4c:	fc 01       	movw	r30, r24
    ac4e:	87 81       	ldd	r24, Z+7	; 0x07
    ac50:	90 85       	ldd	r25, Z+8	; 0x08
    ac52:	28 17       	cp	r18, r24
    ac54:	39 07       	cpc	r19, r25
    ac56:	28 f0       	brcs	.+10     	; 0xac62 <tl_put_raw+0x1c8>
        {
            queue->queue_status = LD_QUEUE_FULL;
    ac58:	8f 81       	ldd	r24, Y+7	; 0x07
    ac5a:	98 85       	ldd	r25, Y+8	; 0x08
    ac5c:	23 e0       	ldi	r18, 0x03	; 3
    ac5e:	fc 01       	movw	r30, r24
    ac60:	24 83       	std	Z+4, r18	; 0x04
        }
    }
}
    ac62:	00 00       	nop
    ac64:	29 96       	adiw	r28, 0x09	; 9
    ac66:	cd bf       	out	0x3d, r28	; 61
    ac68:	de bf       	out	0x3e, r29	; 62
    ac6a:	df 91       	pop	r29
    ac6c:	cf 91       	pop	r28
    ac6e:	08 95       	ret

0000ac70 <tl_get_raw>:
 *END**************************************************************************/
void tl_get_raw(l_ifc_handle iii,
                l_u8 * const data,
                lin_transport_layer_queue_t * queue,
                l_u8 direction)
{
    ac70:	cf 93       	push	r28
    ac72:	df 93       	push	r29
    ac74:	cd b7       	in	r28, 0x3d	; 61
    ac76:	de b7       	in	r29, 0x3e	; 62
    ac78:	2d 97       	sbiw	r28, 0x0d	; 13
    ac7a:	cd bf       	out	0x3d, r28	; 61
    ac7c:	de bf       	out	0x3e, r29	; 62
    ac7e:	88 87       	std	Y+8, r24	; 0x08
    ac80:	69 87       	std	Y+9, r22	; 0x09
    ac82:	7a 87       	std	Y+10, r23	; 0x0a
    ac84:	4b 87       	std	Y+11, r20	; 0x0b
    ac86:	5c 87       	std	Y+12, r21	; 0x0c
    ac88:	2d 87       	std	Y+13, r18	; 0x0d
    const lin_transport_layer_queue_t * tl_queue;
    const lin_tl_pdu_data_t * queue_data;
    l_u8 i;
    l_u16 queue_header;
    tl_queue = queue;
    ac8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    ac8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    ac8e:	8a 83       	std	Y+2, r24	; 0x02
    ac90:	9b 83       	std	Y+3, r25	; 0x03
    /* Get queue */
    queue_data = (const lin_tl_pdu_data_t *)tl_queue->tl_pdu_ptr;
    ac92:	8a 81       	ldd	r24, Y+2	; 0x02
    ac94:	9b 81       	ldd	r25, Y+3	; 0x03
    ac96:	fc 01       	movw	r30, r24
    ac98:	81 85       	ldd	r24, Z+9	; 0x09
    ac9a:	92 85       	ldd	r25, Z+10	; 0x0a
    ac9c:	8c 83       	std	Y+4, r24	; 0x04
    ac9e:	9d 83       	std	Y+5, r25	; 0x05

    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    aca0:	8b 85       	ldd	r24, Y+11	; 0x0b
    aca2:	9c 85       	ldd	r25, Y+12	; 0x0c
    aca4:	fc 01       	movw	r30, r24
    aca6:	85 81       	ldd	r24, Z+5	; 0x05
    aca8:	96 81       	ldd	r25, Z+6	; 0x06
    acaa:	89 2b       	or	r24, r25
    acac:	09 f4       	brne	.+2      	; 0xacb0 <tl_get_raw+0x40>
    acae:	7a c0       	rjmp	.+244    	; 0xada4 <tl_get_raw+0x134>
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
    acb0:	8a 81       	ldd	r24, Y+2	; 0x02
    acb2:	9b 81       	ldd	r25, Y+3	; 0x03
    acb4:	fc 01       	movw	r30, r24
    acb6:	80 81       	ld	r24, Z
    acb8:	91 81       	ldd	r25, Z+1	; 0x01
    acba:	8e 83       	std	Y+6, r24	; 0x06
    acbc:	9f 83       	std	Y+7, r25	; 0x07
        for (i = 0U; i < 8U; i++)
    acbe:	19 82       	std	Y+1, r1	; 0x01
    acc0:	1f c0       	rjmp	.+62     	; 0xad00 <tl_get_raw+0x90>
        {
            data[i] = queue_data[queue_header][i];
    acc2:	89 81       	ldd	r24, Y+1	; 0x01
    acc4:	88 2f       	mov	r24, r24
    acc6:	90 e0       	ldi	r25, 0x00	; 0
    acc8:	29 85       	ldd	r18, Y+9	; 0x09
    acca:	3a 85       	ldd	r19, Y+10	; 0x0a
    accc:	82 0f       	add	r24, r18
    acce:	93 1f       	adc	r25, r19
    acd0:	2e 81       	ldd	r18, Y+6	; 0x06
    acd2:	3f 81       	ldd	r19, Y+7	; 0x07
    acd4:	22 0f       	add	r18, r18
    acd6:	33 1f       	adc	r19, r19
    acd8:	22 0f       	add	r18, r18
    acda:	33 1f       	adc	r19, r19
    acdc:	22 0f       	add	r18, r18
    acde:	33 1f       	adc	r19, r19
    ace0:	4c 81       	ldd	r20, Y+4	; 0x04
    ace2:	5d 81       	ldd	r21, Y+5	; 0x05
    ace4:	42 0f       	add	r20, r18
    ace6:	53 1f       	adc	r21, r19
    ace8:	29 81       	ldd	r18, Y+1	; 0x01
    acea:	22 2f       	mov	r18, r18
    acec:	30 e0       	ldi	r19, 0x00	; 0
    acee:	24 0f       	add	r18, r20
    acf0:	35 1f       	adc	r19, r21
    acf2:	f9 01       	movw	r30, r18
    acf4:	20 81       	ld	r18, Z
    acf6:	fc 01       	movw	r30, r24
    acf8:	20 83       	st	Z, r18
    /* Check queue status (is the queue contains data? if yes: get data from queue and put them to buffer) */
    if (0U != queue->queue_current_size)
    {
        /* get data from head queue */
        queue_header = tl_queue->queue_header;
        for (i = 0U; i < 8U; i++)
    acfa:	89 81       	ldd	r24, Y+1	; 0x01
    acfc:	8f 5f       	subi	r24, 0xFF	; 255
    acfe:	89 83       	std	Y+1, r24	; 0x01
    ad00:	89 81       	ldd	r24, Y+1	; 0x01
    ad02:	88 30       	cpi	r24, 0x08	; 8
    ad04:	f0 f2       	brcs	.-68     	; 0xacc2 <tl_get_raw+0x52>
        {
            data[i] = queue_data[queue_header][i];
        }

        /* update queue status */
        if (0U == (--queue->queue_current_size))
    ad06:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad08:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad0a:	fc 01       	movw	r30, r24
    ad0c:	85 81       	ldd	r24, Z+5	; 0x05
    ad0e:	96 81       	ldd	r25, Z+6	; 0x06
    ad10:	9c 01       	movw	r18, r24
    ad12:	21 50       	subi	r18, 0x01	; 1
    ad14:	31 09       	sbc	r19, r1
    ad16:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad18:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad1a:	fc 01       	movw	r30, r24
    ad1c:	25 83       	std	Z+5, r18	; 0x05
    ad1e:	36 83       	std	Z+6, r19	; 0x06
    ad20:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad22:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad24:	fc 01       	movw	r30, r24
    ad26:	85 81       	ldd	r24, Z+5	; 0x05
    ad28:	96 81       	ldd	r25, Z+6	; 0x06
    ad2a:	89 2b       	or	r24, r25
    ad2c:	71 f4       	brne	.+28     	; 0xad4a <tl_get_raw+0xda>
        {
            if (TRANSMITTING == direction)
    ad2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    ad30:	88 23       	and	r24, r24
    ad32:	31 f4       	brne	.+12     	; 0xad40 <tl_get_raw+0xd0>
            {
                queue->queue_status = LD_QUEUE_EMPTY;
    ad34:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad36:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad38:	25 e0       	ldi	r18, 0x05	; 5
    ad3a:	fc 01       	movw	r30, r24
    ad3c:	24 83       	std	Z+4, r18	; 0x04
                queue->queue_header = 0U;
            }
        }
    }
    (void)iii;
}
    ad3e:	32 c0       	rjmp	.+100    	; 0xada4 <tl_get_raw+0x134>
            {
                queue->queue_status = LD_QUEUE_EMPTY;
            }
            else
            {
                queue->queue_status = LD_NO_DATA;
    ad40:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad42:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad44:	fc 01       	movw	r30, r24
    ad46:	14 82       	std	Z+4, r1	; 0x04
                queue->queue_header = 0U;
            }
        }
    }
    (void)iii;
}
    ad48:	2d c0       	rjmp	.+90     	; 0xada4 <tl_get_raw+0x134>
                queue->queue_status = LD_NO_DATA;
            }
        }
        else
        {
            if (TRANSMITTING == direction)
    ad4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    ad4c:	88 23       	and	r24, r24
    ad4e:	31 f4       	brne	.+12     	; 0xad5c <tl_get_raw+0xec>
            {
                queue->queue_status = LD_QUEUE_AVAILABLE;
    ad50:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad52:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad54:	24 e0       	ldi	r18, 0x04	; 4
    ad56:	fc 01       	movw	r30, r24
    ad58:	24 83       	std	Z+4, r18	; 0x04
    ad5a:	05 c0       	rjmp	.+10     	; 0xad66 <tl_get_raw+0xf6>
            }
            else
            {
                queue->queue_status = LD_DATA_AVAILABLE;
    ad5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad60:	21 e0       	ldi	r18, 0x01	; 1
    ad62:	fc 01       	movw	r30, r24
    ad64:	24 83       	std	Z+4, r18	; 0x04
            }
            /* change queue header */
            queue->queue_header++;
    ad66:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad68:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad6a:	fc 01       	movw	r30, r24
    ad6c:	80 81       	ld	r24, Z
    ad6e:	91 81       	ldd	r25, Z+1	; 0x01
    ad70:	9c 01       	movw	r18, r24
    ad72:	2f 5f       	subi	r18, 0xFF	; 255
    ad74:	3f 4f       	sbci	r19, 0xFF	; 255
    ad76:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad78:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad7a:	fc 01       	movw	r30, r24
    ad7c:	20 83       	st	Z, r18
    ad7e:	31 83       	std	Z+1, r19	; 0x01
            if (queue->queue_header == queue->queue_max_size)
    ad80:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad82:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad84:	fc 01       	movw	r30, r24
    ad86:	20 81       	ld	r18, Z
    ad88:	31 81       	ldd	r19, Z+1	; 0x01
    ad8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad8e:	fc 01       	movw	r30, r24
    ad90:	87 81       	ldd	r24, Z+7	; 0x07
    ad92:	90 85       	ldd	r25, Z+8	; 0x08
    ad94:	28 17       	cp	r18, r24
    ad96:	39 07       	cpc	r19, r25
    ad98:	29 f4       	brne	.+10     	; 0xada4 <tl_get_raw+0x134>
            {
                queue->queue_header = 0U;
    ad9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad9e:	fc 01       	movw	r30, r24
    ada0:	10 82       	st	Z, r1
    ada2:	11 82       	std	Z+1, r1	; 0x01
            }
        }
    }
    (void)iii;
}
    ada4:	00 00       	nop
    ada6:	2d 96       	adiw	r28, 0x0d	; 13
    ada8:	cd bf       	out	0x3d, r28	; 61
    adaa:	de bf       	out	0x3e, r29	; 62
    adac:	df 91       	pop	r29
    adae:	cf 91       	pop	r28
    adb0:	08 95       	ret

0000adb2 <tl_receive_message>:
 *                 ld_receive_message() function
 *
 * Implements    : tl_receive_message_Activity
 *END**************************************************************************/
static void tl_receive_message(l_ifc_handle iii)
{
    adb2:	cf 93       	push	r28
    adb4:	df 93       	push	r29
    adb6:	cd b7       	in	r28, 0x3d	; 61
    adb8:	de b7       	in	r29, 0x3e	; 62
    adba:	6a 97       	sbiw	r28, 0x1a	; 26
    adbc:	cd bf       	out	0x3d, r28	; 61
    adbe:	de bf       	out	0x3e, r29	; 62
    adc0:	8a 8f       	std	Y+26, r24	; 0x1a
  lin_tl_descriptor_t * tl_desc_ptr = &g_lin_tl_descriptor_array[iii];
    adc2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    adc4:	28 2f       	mov	r18, r24
    adc6:	30 e0       	ldi	r19, 0x00	; 0
    adc8:	44 e3       	ldi	r20, 0x34	; 52
    adca:	42 9f       	mul	r20, r18
    adcc:	c0 01       	movw	r24, r0
    adce:	43 9f       	mul	r20, r19
    add0:	90 0d       	add	r25, r0
    add2:	11 24       	eor	r1, r1
    add4:	84 59       	subi	r24, 0x94	; 148
    add6:	99 4b       	sbci	r25, 0xB9	; 185
    add8:	8f 83       	std	Y+7, r24	; 0x07
    adda:	98 87       	std	Y+8, r25	; 0x08
    const lin_protocol_user_config_t * prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    addc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    adde:	28 2f       	mov	r18, r24
    ade0:	30 e0       	ldi	r19, 0x00	; 0
    ade2:	4c e1       	ldi	r20, 0x1C	; 28
    ade4:	42 9f       	mul	r20, r18
    ade6:	c0 01       	movw	r24, r0
    ade8:	43 9f       	mul	r20, r19
    adea:	90 0d       	add	r25, r0
    adec:	11 24       	eor	r1, r1
    adee:	86 56       	subi	r24, 0x66	; 102
    adf0:	9d 4b       	sbci	r25, 0xBD	; 189
    adf2:	89 87       	std	Y+9, r24	; 0x09
    adf4:	9a 87       	std	Y+10, r25	; 0x0a
    lin_tl_pdu_data_t pdu;
    l_u16 i;
    l_u16 data_index = 0U;
    adf6:	1b 82       	std	Y+3, r1	; 0x03
    adf8:	1c 82       	std	Y+4, r1	; 0x04
    l_u16 tmp_length = 0U;
    adfa:	1d 82       	std	Y+5, r1	; 0x05
    adfc:	1e 82       	std	Y+6, r1	; 0x06
    l_u8 PCI_type;
    l_u8* data = tl_desc_ptr->receive_message_ptr;
    adfe:	8f 81       	ldd	r24, Y+7	; 0x07
    ae00:	98 85       	ldd	r25, Y+8	; 0x08
    ae02:	fc 01       	movw	r30, r24
    ae04:	86 a5       	ldd	r24, Z+46	; 0x2e
    ae06:	97 a5       	ldd	r25, Z+47	; 0x2f
    ae08:	8b 87       	std	Y+11, r24	; 0x0b
    ae0a:	9c 87       	std	Y+12, r25	; 0x0c
    l_u8* NAD = tl_desc_ptr->receive_NAD_ptr;
    ae0c:	8f 81       	ldd	r24, Y+7	; 0x07
    ae0e:	98 85       	ldd	r25, Y+8	; 0x08
    ae10:	fc 01       	movw	r30, r24
    ae12:	80 a9       	ldd	r24, Z+48	; 0x30
    ae14:	91 a9       	ldd	r25, Z+49	; 0x31
    ae16:	8d 87       	std	Y+13, r24	; 0x0d
    ae18:	9e 87       	std	Y+14, r25	; 0x0e
    l_u16* length = tl_desc_ptr->receive_message_length_ptr;
    ae1a:	8f 81       	ldd	r24, Y+7	; 0x07
    ae1c:	98 85       	ldd	r25, Y+8	; 0x08
    ae1e:	fc 01       	movw	r30, r24
    ae20:	82 a9       	ldd	r24, Z+50	; 0x32
    ae22:	93 a9       	ldd	r25, Z+51	; 0x33
    ae24:	8f 87       	std	Y+15, r24	; 0x0f
    ae26:	98 8b       	std	Y+16, r25	; 0x10

    if (LD_NO_DATA != tl_desc_ptr->tl_rx_queue.queue_status)
    ae28:	8f 81       	ldd	r24, Y+7	; 0x07
    ae2a:	98 85       	ldd	r25, Y+8	; 0x08
    ae2c:	fc 01       	movw	r30, r24
    ae2e:	87 85       	ldd	r24, Z+15	; 0x0f
    ae30:	88 23       	and	r24, r24
    ae32:	09 f4       	brne	.+2      	; 0xae36 <tl_receive_message+0x84>
    ae34:	2e c1       	rjmp	.+604    	; 0xb092 <tl_receive_message+0x2e0>
        /* Message is received completely */
        /* get data from receive queue */
        /*
        * @violates MISRA 2012 Required Rule 1.3 Required
        */
        ld_get_raw(iii, pdu);
    ae36:	ce 01       	movw	r24, r28
    ae38:	42 96       	adiw	r24, 0x12	; 18
    ae3a:	bc 01       	movw	r22, r24
    ae3c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ae3e:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <ld_get_raw>
        /* Analyze data */
        if ((bool)LIN_MASTER == prot_user_config_ptr->function)
    ae42:	89 85       	ldd	r24, Y+9	; 0x09
    ae44:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae46:	fc 01       	movw	r30, r24
    ae48:	83 81       	ldd	r24, Z+3	; 0x03
    ae4a:	88 23       	and	r24, r24
    ae4c:	29 f0       	breq	.+10     	; 0xae58 <tl_receive_message+0xa6>
        {
            *NAD = pdu[0];
    ae4e:	2a 89       	ldd	r18, Y+18	; 0x12
    ae50:	8d 85       	ldd	r24, Y+13	; 0x0d
    ae52:	9e 85       	ldd	r25, Y+14	; 0x0e
    ae54:	fc 01       	movw	r30, r24
    ae56:	20 83       	st	Z, r18
        }

        /* Check type of pdu */
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
    ae58:	8b 89       	ldd	r24, Y+19	; 0x13
    ae5a:	82 95       	swap	r24
    ae5c:	8f 70       	andi	r24, 0x0F	; 15
    ae5e:	89 8b       	std	Y+17, r24	; 0x11
        switch (PCI_type)
    ae60:	89 89       	ldd	r24, Y+17	; 0x11
    ae62:	88 2f       	mov	r24, r24
    ae64:	90 e0       	ldi	r25, 0x00	; 0
    ae66:	00 97       	sbiw	r24, 0x00	; 0
    ae68:	21 f0       	breq	.+8      	; 0xae72 <tl_receive_message+0xc0>
    ae6a:	01 97       	sbiw	r24, 0x01	; 1
    ae6c:	09 f4       	brne	.+2      	; 0xae70 <tl_receive_message+0xbe>
    ae6e:	4b c0       	rjmp	.+150    	; 0xaf06 <tl_receive_message+0x154>
                    }
                }
                break;
            default:
                /* do nothing */
                break;
    ae70:	07 c1       	rjmp	.+526    	; 0xb080 <tl_receive_message+0x2ce>
        PCI_type = (l_u8)((pdu[1] & 0xF0U) >> 4U);
        switch (PCI_type)
        {
            /* Single frame */
            case PCI_SF:
                tmp_length = (l_u16)((l_u16)pdu[1] & 0x000FU);
    ae72:	8b 89       	ldd	r24, Y+19	; 0x13
    ae74:	88 2f       	mov	r24, r24
    ae76:	90 e0       	ldi	r25, 0x00	; 0
    ae78:	8f 70       	andi	r24, 0x0F	; 15
    ae7a:	99 27       	eor	r25, r25
    ae7c:	8d 83       	std	Y+5, r24	; 0x05
    ae7e:	9e 83       	std	Y+6, r25	; 0x06
                i = *length;
    ae80:	8f 85       	ldd	r24, Y+15	; 0x0f
    ae82:	98 89       	ldd	r25, Y+16	; 0x10
    ae84:	fc 01       	movw	r30, r24
    ae86:	80 81       	ld	r24, Z
    ae88:	91 81       	ldd	r25, Z+1	; 0x01
    ae8a:	89 83       	std	Y+1, r24	; 0x01
    ae8c:	9a 83       	std	Y+2, r25	; 0x02
                *length = tmp_length;
    ae8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    ae90:	98 89       	ldd	r25, Y+16	; 0x10
    ae92:	2d 81       	ldd	r18, Y+5	; 0x05
    ae94:	3e 81       	ldd	r19, Y+6	; 0x06
    ae96:	fc 01       	movw	r30, r24
    ae98:	20 83       	st	Z, r18
    ae9a:	31 83       	std	Z+1, r19	; 0x01
                if (i < tmp_length)
    ae9c:	29 81       	ldd	r18, Y+1	; 0x01
    ae9e:	3a 81       	ldd	r19, Y+2	; 0x02
    aea0:	8d 81       	ldd	r24, Y+5	; 0x05
    aea2:	9e 81       	ldd	r25, Y+6	; 0x06
    aea4:	28 17       	cp	r18, r24
    aea6:	39 07       	cpc	r19, r25
    aea8:	20 f4       	brcc	.+8      	; 0xaeb2 <tl_receive_message+0x100>
                {
                    tmp_length = i;
    aeaa:	89 81       	ldd	r24, Y+1	; 0x01
    aeac:	9a 81       	ldd	r25, Y+2	; 0x02
    aeae:	8d 83       	std	Y+5, r24	; 0x05
    aeb0:	9e 83       	std	Y+6, r25	; 0x06
                }

                data[0] = pdu[2];
    aeb2:	2c 89       	ldd	r18, Y+20	; 0x14
    aeb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    aeb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    aeb8:	fc 01       	movw	r30, r24
    aeba:	20 83       	st	Z, r18
                for (i = 1U; i < tmp_length; i++)
    aebc:	81 e0       	ldi	r24, 0x01	; 1
    aebe:	90 e0       	ldi	r25, 0x00	; 0
    aec0:	89 83       	std	Y+1, r24	; 0x01
    aec2:	9a 83       	std	Y+2, r25	; 0x02
    aec4:	18 c0       	rjmp	.+48     	; 0xaef6 <tl_receive_message+0x144>
                {
                    data[i] = pdu[i + 2U];
    aec6:	2b 85       	ldd	r18, Y+11	; 0x0b
    aec8:	3c 85       	ldd	r19, Y+12	; 0x0c
    aeca:	89 81       	ldd	r24, Y+1	; 0x01
    aecc:	9a 81       	ldd	r25, Y+2	; 0x02
    aece:	82 0f       	add	r24, r18
    aed0:	93 1f       	adc	r25, r19
    aed2:	29 81       	ldd	r18, Y+1	; 0x01
    aed4:	3a 81       	ldd	r19, Y+2	; 0x02
    aed6:	2e 5f       	subi	r18, 0xFE	; 254
    aed8:	3f 4f       	sbci	r19, 0xFF	; 255
    aeda:	ae 01       	movw	r20, r28
    aedc:	4e 5e       	subi	r20, 0xEE	; 238
    aede:	5f 4f       	sbci	r21, 0xFF	; 255
    aee0:	24 0f       	add	r18, r20
    aee2:	35 1f       	adc	r19, r21
    aee4:	f9 01       	movw	r30, r18
    aee6:	20 81       	ld	r18, Z
    aee8:	fc 01       	movw	r30, r24
    aeea:	20 83       	st	Z, r18
                {
                    tmp_length = i;
                }

                data[0] = pdu[2];
                for (i = 1U; i < tmp_length; i++)
    aeec:	89 81       	ldd	r24, Y+1	; 0x01
    aeee:	9a 81       	ldd	r25, Y+2	; 0x02
    aef0:	01 96       	adiw	r24, 0x01	; 1
    aef2:	89 83       	std	Y+1, r24	; 0x01
    aef4:	9a 83       	std	Y+2, r25	; 0x02
    aef6:	29 81       	ldd	r18, Y+1	; 0x01
    aef8:	3a 81       	ldd	r19, Y+2	; 0x02
    aefa:	8d 81       	ldd	r24, Y+5	; 0x05
    aefc:	9e 81       	ldd	r25, Y+6	; 0x06
    aefe:	28 17       	cp	r18, r24
    af00:	39 07       	cpc	r19, r25
    af02:	08 f3       	brcs	.-62     	; 0xaec6 <tl_receive_message+0x114>
                {
                    data[i] = pdu[i + 2U];
                }
                break;
    af04:	bd c0       	rjmp	.+378    	; 0xb080 <tl_receive_message+0x2ce>
            /* Multi frame */
            case PCI_FF:
                /* First frame */
                tmp_length = (l_u16)((((l_u16)pdu[1] & 0x000FU) << 8) + (l_u16)pdu[2]);
    af06:	8b 89       	ldd	r24, Y+19	; 0x13
    af08:	88 2f       	mov	r24, r24
    af0a:	90 e0       	ldi	r25, 0x00	; 0
    af0c:	8f 70       	andi	r24, 0x0F	; 15
    af0e:	99 27       	eor	r25, r25
    af10:	38 2f       	mov	r19, r24
    af12:	22 27       	eor	r18, r18
    af14:	8c 89       	ldd	r24, Y+20	; 0x14
    af16:	88 2f       	mov	r24, r24
    af18:	90 e0       	ldi	r25, 0x00	; 0
    af1a:	82 0f       	add	r24, r18
    af1c:	93 1f       	adc	r25, r19
    af1e:	8d 83       	std	Y+5, r24	; 0x05
    af20:	9e 83       	std	Y+6, r25	; 0x06
                i = *length;
    af22:	8f 85       	ldd	r24, Y+15	; 0x0f
    af24:	98 89       	ldd	r25, Y+16	; 0x10
    af26:	fc 01       	movw	r30, r24
    af28:	80 81       	ld	r24, Z
    af2a:	91 81       	ldd	r25, Z+1	; 0x01
    af2c:	89 83       	std	Y+1, r24	; 0x01
    af2e:	9a 83       	std	Y+2, r25	; 0x02
                *length = tmp_length;
    af30:	8f 85       	ldd	r24, Y+15	; 0x0f
    af32:	98 89       	ldd	r25, Y+16	; 0x10
    af34:	2d 81       	ldd	r18, Y+5	; 0x05
    af36:	3e 81       	ldd	r19, Y+6	; 0x06
    af38:	fc 01       	movw	r30, r24
    af3a:	20 83       	st	Z, r18
    af3c:	31 83       	std	Z+1, r19	; 0x01
                if (i < tmp_length)
    af3e:	29 81       	ldd	r18, Y+1	; 0x01
    af40:	3a 81       	ldd	r19, Y+2	; 0x02
    af42:	8d 81       	ldd	r24, Y+5	; 0x05
    af44:	9e 81       	ldd	r25, Y+6	; 0x06
    af46:	28 17       	cp	r18, r24
    af48:	39 07       	cpc	r19, r25
    af4a:	20 f4       	brcc	.+8      	; 0xaf54 <tl_receive_message+0x1a2>
                {
                    tmp_length = i;
    af4c:	89 81       	ldd	r24, Y+1	; 0x01
    af4e:	9a 81       	ldd	r25, Y+2	; 0x02
    af50:	8d 83       	std	Y+5, r24	; 0x05
    af52:	9e 83       	std	Y+6, r25	; 0x06
                }
                data[0] = pdu[3];
    af54:	2d 89       	ldd	r18, Y+21	; 0x15
    af56:	8b 85       	ldd	r24, Y+11	; 0x0b
    af58:	9c 85       	ldd	r25, Y+12	; 0x0c
    af5a:	fc 01       	movw	r30, r24
    af5c:	20 83       	st	Z, r18
                for (i = 1U; i < 5U; i++)
    af5e:	81 e0       	ldi	r24, 0x01	; 1
    af60:	90 e0       	ldi	r25, 0x00	; 0
    af62:	89 83       	std	Y+1, r24	; 0x01
    af64:	9a 83       	std	Y+2, r25	; 0x02
    af66:	18 c0       	rjmp	.+48     	; 0xaf98 <tl_receive_message+0x1e6>
                {
                    data[i] = pdu[i + 3U];
    af68:	2b 85       	ldd	r18, Y+11	; 0x0b
    af6a:	3c 85       	ldd	r19, Y+12	; 0x0c
    af6c:	89 81       	ldd	r24, Y+1	; 0x01
    af6e:	9a 81       	ldd	r25, Y+2	; 0x02
    af70:	82 0f       	add	r24, r18
    af72:	93 1f       	adc	r25, r19
    af74:	29 81       	ldd	r18, Y+1	; 0x01
    af76:	3a 81       	ldd	r19, Y+2	; 0x02
    af78:	2d 5f       	subi	r18, 0xFD	; 253
    af7a:	3f 4f       	sbci	r19, 0xFF	; 255
    af7c:	ae 01       	movw	r20, r28
    af7e:	4e 5e       	subi	r20, 0xEE	; 238
    af80:	5f 4f       	sbci	r21, 0xFF	; 255
    af82:	24 0f       	add	r18, r20
    af84:	35 1f       	adc	r19, r21
    af86:	f9 01       	movw	r30, r18
    af88:	20 81       	ld	r18, Z
    af8a:	fc 01       	movw	r30, r24
    af8c:	20 83       	st	Z, r18
                if (i < tmp_length)
                {
                    tmp_length = i;
                }
                data[0] = pdu[3];
                for (i = 1U; i < 5U; i++)
    af8e:	89 81       	ldd	r24, Y+1	; 0x01
    af90:	9a 81       	ldd	r25, Y+2	; 0x02
    af92:	01 96       	adiw	r24, 0x01	; 1
    af94:	89 83       	std	Y+1, r24	; 0x01
    af96:	9a 83       	std	Y+2, r25	; 0x02
    af98:	89 81       	ldd	r24, Y+1	; 0x01
    af9a:	9a 81       	ldd	r25, Y+2	; 0x02
    af9c:	05 97       	sbiw	r24, 0x05	; 5
    af9e:	20 f3       	brcs	.-56     	; 0xaf68 <tl_receive_message+0x1b6>
                {
                    data[i] = pdu[i + 3U];
                }

                tmp_length -= 5U;
    afa0:	8d 81       	ldd	r24, Y+5	; 0x05
    afa2:	9e 81       	ldd	r25, Y+6	; 0x06
    afa4:	05 97       	sbiw	r24, 0x05	; 5
    afa6:	8d 83       	std	Y+5, r24	; 0x05
    afa8:	9e 83       	std	Y+6, r25	; 0x06
                data_index += 5U;
    afaa:	8b 81       	ldd	r24, Y+3	; 0x03
    afac:	9c 81       	ldd	r25, Y+4	; 0x04
    afae:	05 96       	adiw	r24, 0x05	; 5
    afb0:	8b 83       	std	Y+3, r24	; 0x03
    afb2:	9c 83       	std	Y+4, r25	; 0x04

                /* Consecutive frame */
                while (tmp_length > 6U)
    afb4:	2f c0       	rjmp	.+94     	; 0xb014 <tl_receive_message+0x262>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    afb6:	ce 01       	movw	r24, r28
    afb8:	42 96       	adiw	r24, 0x12	; 18
    afba:	bc 01       	movw	r22, r24
    afbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    afbe:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <ld_get_raw>
                    for (i = 2U; i < 8U; i++)
    afc2:	82 e0       	ldi	r24, 0x02	; 2
    afc4:	90 e0       	ldi	r25, 0x00	; 0
    afc6:	89 83       	std	Y+1, r24	; 0x01
    afc8:	9a 83       	std	Y+2, r25	; 0x02
    afca:	1b c0       	rjmp	.+54     	; 0xb002 <tl_receive_message+0x250>
                    {
                        data[data_index] = pdu[i];
    afcc:	2b 85       	ldd	r18, Y+11	; 0x0b
    afce:	3c 85       	ldd	r19, Y+12	; 0x0c
    afd0:	8b 81       	ldd	r24, Y+3	; 0x03
    afd2:	9c 81       	ldd	r25, Y+4	; 0x04
    afd4:	82 0f       	add	r24, r18
    afd6:	93 1f       	adc	r25, r19
    afd8:	ae 01       	movw	r20, r28
    afda:	4e 5e       	subi	r20, 0xEE	; 238
    afdc:	5f 4f       	sbci	r21, 0xFF	; 255
    afde:	29 81       	ldd	r18, Y+1	; 0x01
    afe0:	3a 81       	ldd	r19, Y+2	; 0x02
    afe2:	24 0f       	add	r18, r20
    afe4:	35 1f       	adc	r19, r21
    afe6:	f9 01       	movw	r30, r18
    afe8:	20 81       	ld	r18, Z
    afea:	fc 01       	movw	r30, r24
    afec:	20 83       	st	Z, r18
                        data_index++;
    afee:	8b 81       	ldd	r24, Y+3	; 0x03
    aff0:	9c 81       	ldd	r25, Y+4	; 0x04
    aff2:	01 96       	adiw	r24, 0x01	; 1
    aff4:	8b 83       	std	Y+3, r24	; 0x03
    aff6:	9c 83       	std	Y+4, r25	; 0x04
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 2U; i < 8U; i++)
    aff8:	89 81       	ldd	r24, Y+1	; 0x01
    affa:	9a 81       	ldd	r25, Y+2	; 0x02
    affc:	01 96       	adiw	r24, 0x01	; 1
    affe:	89 83       	std	Y+1, r24	; 0x01
    b000:	9a 83       	std	Y+2, r25	; 0x02
    b002:	89 81       	ldd	r24, Y+1	; 0x01
    b004:	9a 81       	ldd	r25, Y+2	; 0x02
    b006:	08 97       	sbiw	r24, 0x08	; 8
    b008:	08 f3       	brcs	.-62     	; 0xafcc <tl_receive_message+0x21a>
                    {
                        data[data_index] = pdu[i];
                        data_index++;
                    }

                    tmp_length -= 6U;
    b00a:	8d 81       	ldd	r24, Y+5	; 0x05
    b00c:	9e 81       	ldd	r25, Y+6	; 0x06
    b00e:	06 97       	sbiw	r24, 0x06	; 6
    b010:	8d 83       	std	Y+5, r24	; 0x05
    b012:	9e 83       	std	Y+6, r25	; 0x06

                tmp_length -= 5U;
                data_index += 5U;

                /* Consecutive frame */
                while (tmp_length > 6U)
    b014:	8d 81       	ldd	r24, Y+5	; 0x05
    b016:	9e 81       	ldd	r25, Y+6	; 0x06
    b018:	07 97       	sbiw	r24, 0x07	; 7
    b01a:	68 f6       	brcc	.-102    	; 0xafb6 <tl_receive_message+0x204>

                    tmp_length -= 6U;
                }

                /* Last frame */
                if (tmp_length > 0U)
    b01c:	8d 81       	ldd	r24, Y+5	; 0x05
    b01e:	9e 81       	ldd	r25, Y+6	; 0x06
    b020:	89 2b       	or	r24, r25
    b022:	69 f1       	breq	.+90     	; 0xb07e <tl_receive_message+0x2cc>
                {
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
    b024:	ce 01       	movw	r24, r28
    b026:	42 96       	adiw	r24, 0x12	; 18
    b028:	bc 01       	movw	r22, r24
    b02a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b02c:	0e 94 84 4e 	call	0x9d08	; 0x9d08 <ld_get_raw>
                    for (i = 0U; i < tmp_length; i++)
    b030:	19 82       	std	Y+1, r1	; 0x01
    b032:	1a 82       	std	Y+2, r1	; 0x02
    b034:	1d c0       	rjmp	.+58     	; 0xb070 <tl_receive_message+0x2be>
                    {
                        data[data_index] = pdu[i + 2U];
    b036:	2b 85       	ldd	r18, Y+11	; 0x0b
    b038:	3c 85       	ldd	r19, Y+12	; 0x0c
    b03a:	8b 81       	ldd	r24, Y+3	; 0x03
    b03c:	9c 81       	ldd	r25, Y+4	; 0x04
    b03e:	82 0f       	add	r24, r18
    b040:	93 1f       	adc	r25, r19
    b042:	29 81       	ldd	r18, Y+1	; 0x01
    b044:	3a 81       	ldd	r19, Y+2	; 0x02
    b046:	2e 5f       	subi	r18, 0xFE	; 254
    b048:	3f 4f       	sbci	r19, 0xFF	; 255
    b04a:	ae 01       	movw	r20, r28
    b04c:	4e 5e       	subi	r20, 0xEE	; 238
    b04e:	5f 4f       	sbci	r21, 0xFF	; 255
    b050:	24 0f       	add	r18, r20
    b052:	35 1f       	adc	r19, r21
    b054:	f9 01       	movw	r30, r18
    b056:	20 81       	ld	r18, Z
    b058:	fc 01       	movw	r30, r24
    b05a:	20 83       	st	Z, r18
                        data_index++;
    b05c:	8b 81       	ldd	r24, Y+3	; 0x03
    b05e:	9c 81       	ldd	r25, Y+4	; 0x04
    b060:	01 96       	adiw	r24, 0x01	; 1
    b062:	8b 83       	std	Y+3, r24	; 0x03
    b064:	9c 83       	std	Y+4, r25	; 0x04
                    /* get PDU */
                    /*
                    * @violates MISRA 2012 Required Rule 1.3 Required
                    */
                    ld_get_raw(iii, pdu);
                    for (i = 0U; i < tmp_length; i++)
    b066:	89 81       	ldd	r24, Y+1	; 0x01
    b068:	9a 81       	ldd	r25, Y+2	; 0x02
    b06a:	01 96       	adiw	r24, 0x01	; 1
    b06c:	89 83       	std	Y+1, r24	; 0x01
    b06e:	9a 83       	std	Y+2, r25	; 0x02
    b070:	29 81       	ldd	r18, Y+1	; 0x01
    b072:	3a 81       	ldd	r19, Y+2	; 0x02
    b074:	8d 81       	ldd	r24, Y+5	; 0x05
    b076:	9e 81       	ldd	r25, Y+6	; 0x06
    b078:	28 17       	cp	r18, r24
    b07a:	39 07       	cpc	r19, r25
    b07c:	e0 f2       	brcs	.-72     	; 0xb036 <tl_receive_message+0x284>
                    {
                        data[data_index] = pdu[i + 2U];
                        data_index++;
                    }
                }
                break;
    b07e:	00 00       	nop
            default:
                /* do nothing */
                break;
        } /* end of switch */
        tl_desc_ptr->ld_return_data = false;
    b080:	8f 81       	ldd	r24, Y+7	; 0x07
    b082:	98 85       	ldd	r25, Y+8	; 0x08
    b084:	fc 01       	movw	r30, r24
    b086:	14 a6       	std	Z+44, r1	; 0x2c
        tl_desc_ptr->rx_msg_status = LD_COMPLETED;
    b088:	8f 81       	ldd	r24, Y+7	; 0x07
    b08a:	98 85       	ldd	r25, Y+8	; 0x08
    b08c:	22 e0       	ldi	r18, 0x02	; 2
    b08e:	fc 01       	movw	r30, r24
    b090:	26 8b       	std	Z+22, r18	; 0x16
    }
}
    b092:	00 00       	nop
    b094:	6a 96       	adiw	r28, 0x1a	; 26
    b096:	cd bf       	out	0x3d, r28	; 61
    b098:	de bf       	out	0x3e, r29	; 62
    b09a:	df 91       	pop	r29
    b09c:	cf 91       	pop	r28
    b09e:	08 95       	ret

0000b0a0 <ld_read_by_id_callout>:
 *                 this service to the correct value
 * Implements    : ld_read_by_id_callout_Activity
 *END**************************************************************************/

l_u8 ld_read_by_id_callout(l_ifc_handle iii, l_u8 id, l_u8 *data)
{
    b0a0:	cf 93       	push	r28
    b0a2:	df 93       	push	r29
    b0a4:	cd b7       	in	r28, 0x3d	; 61
    b0a6:	de b7       	in	r29, 0x3e	; 62
    b0a8:	27 97       	sbiw	r28, 0x07	; 7
    b0aa:	cd bf       	out	0x3d, r28	; 61
    b0ac:	de bf       	out	0x3e, r29	; 62
    b0ae:	8c 83       	std	Y+4, r24	; 0x04
    b0b0:	6d 83       	std	Y+5, r22	; 0x05
    b0b2:	4e 83       	std	Y+6, r20	; 0x06
    b0b4:	5f 83       	std	Y+7, r21	; 0x07
    l_u8 retval = LD_NEGATIVE_RESPONSE;
    b0b6:	83 e5       	ldi	r24, 0x53	; 83
    b0b8:	89 83       	std	Y+1, r24	; 0x01

    /* Get the current configuration */
    const lin_protocol_user_config_t  *prot_user_config_ptr = &g_lin_protocol_user_cfg_array[iii];
    b0ba:	8c 81       	ldd	r24, Y+4	; 0x04
    b0bc:	28 2f       	mov	r18, r24
    b0be:	30 e0       	ldi	r19, 0x00	; 0
    b0c0:	4c e1       	ldi	r20, 0x1C	; 28
    b0c2:	42 9f       	mul	r20, r18
    b0c4:	c0 01       	movw	r24, r0
    b0c6:	43 9f       	mul	r20, r19
    b0c8:	90 0d       	add	r25, r0
    b0ca:	11 24       	eor	r1, r1
    b0cc:	86 56       	subi	r24, 0x66	; 102
    b0ce:	9d 4b       	sbci	r25, 0xBD	; 189
    b0d0:	8a 83       	std	Y+2, r24	; 0x02
    b0d2:	9b 83       	std	Y+3, r25	; 0x03

    if (prot_user_config_ptr->function == (bool)LIN_SLAVE)
    b0d4:	8a 81       	ldd	r24, Y+2	; 0x02
    b0d6:	9b 81       	ldd	r25, Y+3	; 0x03
    b0d8:	fc 01       	movw	r30, r24
    b0da:	93 81       	ldd	r25, Z+3	; 0x03
    b0dc:	81 e0       	ldi	r24, 0x01	; 1
    b0de:	89 27       	eor	r24, r25
    b0e0:	88 23       	and	r24, r24
    b0e2:	41 f1       	breq	.+80     	; 0xb134 <ld_read_by_id_callout+0x94>
    {
        /* Following code is an example - Real implementation is application-dependent */
        /* the handling does essentially depend on the id of the requested item */
        /* This example implement with ID = 32 - LIN_READ_USR_DEF_MIN */
        if (id == LIN_READ_USR_DEF_MIN)
    b0e4:	8d 81       	ldd	r24, Y+5	; 0x05
    b0e6:	80 32       	cpi	r24, 0x20	; 32
    b0e8:	29 f5       	brne	.+74     	; 0xb134 <ld_read_by_id_callout+0x94>
        {
            /*
            * id received is user defined 32
            */
            /* A positive response is ready to be sent to the user defined request */
            data[0] = (l_u8) (id + 1U);    /* Data user define */
    b0ea:	8d 81       	ldd	r24, Y+5	; 0x05
    b0ec:	21 e0       	ldi	r18, 0x01	; 1
    b0ee:	28 0f       	add	r18, r24
    b0f0:	8e 81       	ldd	r24, Y+6	; 0x06
    b0f2:	9f 81       	ldd	r25, Y+7	; 0x07
    b0f4:	fc 01       	movw	r30, r24
    b0f6:	20 83       	st	Z, r18
            data[1] = (l_u8) (id + 2U);    /* Data user define */
    b0f8:	8e 81       	ldd	r24, Y+6	; 0x06
    b0fa:	9f 81       	ldd	r25, Y+7	; 0x07
    b0fc:	01 96       	adiw	r24, 0x01	; 1
    b0fe:	2d 81       	ldd	r18, Y+5	; 0x05
    b100:	2e 5f       	subi	r18, 0xFE	; 254
    b102:	fc 01       	movw	r30, r24
    b104:	20 83       	st	Z, r18
            data[2] = (l_u8) (id + 3U);    /* Data user define */
    b106:	8e 81       	ldd	r24, Y+6	; 0x06
    b108:	9f 81       	ldd	r25, Y+7	; 0x07
    b10a:	02 96       	adiw	r24, 0x02	; 2
    b10c:	2d 81       	ldd	r18, Y+5	; 0x05
    b10e:	2d 5f       	subi	r18, 0xFD	; 253
    b110:	fc 01       	movw	r30, r24
    b112:	20 83       	st	Z, r18
            data[3] = (l_u8) (id + 4U);    /* Data user define */
    b114:	8e 81       	ldd	r24, Y+6	; 0x06
    b116:	9f 81       	ldd	r25, Y+7	; 0x07
    b118:	03 96       	adiw	r24, 0x03	; 3
    b11a:	2d 81       	ldd	r18, Y+5	; 0x05
    b11c:	2c 5f       	subi	r18, 0xFC	; 252
    b11e:	fc 01       	movw	r30, r24
    b120:	20 83       	st	Z, r18
            data[4] = (l_u8) (id + 5U);    /* Data user define */
    b122:	8e 81       	ldd	r24, Y+6	; 0x06
    b124:	9f 81       	ldd	r25, Y+7	; 0x07
    b126:	04 96       	adiw	r24, 0x04	; 4
    b128:	2d 81       	ldd	r18, Y+5	; 0x05
    b12a:	2b 5f       	subi	r18, 0xFB	; 251
    b12c:	fc 01       	movw	r30, r24
    b12e:	20 83       	st	Z, r18
            retval = LD_POSITIVE_RESPONSE;
    b130:	84 e5       	ldi	r24, 0x54	; 84
    b132:	89 83       	std	Y+1, r24	; 0x01
            /*
            * id received is user defined 63 - no response
            */
        }
    } /* End (conf->function == _SLAVE_) */
   return retval;
    b134:	89 81       	ldd	r24, Y+1	; 0x01
}
    b136:	27 96       	adiw	r28, 0x07	; 7
    b138:	cd bf       	out	0x3d, r28	; 61
    b13a:	de bf       	out	0x3e, r29	; 62
    b13c:	df 91       	pop	r29
    b13e:	cf 91       	pop	r28
    b140:	08 95       	ret

0000b142 <BIT>:
 * 返回字节A中的第B个bit
 *
 *END**************************************************************************/
static inline uint8_t BIT(uint8_t A,
                          uint8_t B)
{
    b142:	cf 93       	push	r28
    b144:	df 93       	push	r29
    b146:	00 d0       	rcall	.+0      	; 0xb148 <BIT+0x6>
    b148:	cd b7       	in	r28, 0x3d	; 61
    b14a:	de b7       	in	r29, 0x3e	; 62
    b14c:	89 83       	std	Y+1, r24	; 0x01
    b14e:	6a 83       	std	Y+2, r22	; 0x02
    return (uint8_t)((A >> B) & 0x01U);
    b150:	89 81       	ldd	r24, Y+1	; 0x01
    b152:	88 2f       	mov	r24, r24
    b154:	90 e0       	ldi	r25, 0x00	; 0
    b156:	2a 81       	ldd	r18, Y+2	; 0x02
    b158:	22 2f       	mov	r18, r18
    b15a:	30 e0       	ldi	r19, 0x00	; 0
    b15c:	02 c0       	rjmp	.+4      	; 0xb162 <BIT+0x20>
    b15e:	95 95       	asr	r25
    b160:	87 95       	ror	r24
    b162:	2a 95       	dec	r18
    b164:	e2 f7       	brpl	.-8      	; 0xb15e <BIT+0x1c>
    b166:	81 70       	andi	r24, 0x01	; 1
}
    b168:	0f 90       	pop	r0
    b16a:	0f 90       	pop	r0
    b16c:	df 91       	pop	r29
    b16e:	cf 91       	pop	r28
    b170:	08 95       	ret

0000b172 <LIN_DRV_ProcessParity>:
 *
 * Implements    : LIN_DRV_ProcessParity_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_ProcessParity(uint8_t PID,
                              uint8_t typeAction)
{
    b172:	0f 93       	push	r16
    b174:	1f 93       	push	r17
    b176:	cf 93       	push	r28
    b178:	df 93       	push	r29
    b17a:	00 d0       	rcall	.+0      	; 0xb17c <LIN_DRV_ProcessParity+0xa>
    b17c:	00 d0       	rcall	.+0      	; 0xb17e <LIN_DRV_ProcessParity+0xc>
    b17e:	cd b7       	in	r28, 0x3d	; 61
    b180:	de b7       	in	r29, 0x3e	; 62
    b182:	8b 83       	std	Y+3, r24	; 0x03
    b184:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    b186:	60 e0       	ldi	r22, 0x00	; 0
    b188:	8b 81       	ldd	r24, Y+3	; 0x03
    b18a:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
    b18e:	18 2f       	mov	r17, r24
    b190:	61 e0       	ldi	r22, 0x01	; 1
    b192:	8b 81       	ldd	r24, Y+3	; 0x03
    b194:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
    b198:	18 27       	eor	r17, r24
    b19a:	62 e0       	ldi	r22, 0x02	; 2
    b19c:	8b 81       	ldd	r24, Y+3	; 0x03
    b19e:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
    b1a2:	18 27       	eor	r17, r24
    b1a4:	64 e0       	ldi	r22, 0x04	; 4
    b1a6:	8b 81       	ldd	r24, Y+3	; 0x03
    b1a8:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
    b1ac:	81 27       	eor	r24, r17
    b1ae:	18 2f       	mov	r17, r24
    b1b0:	12 95       	swap	r17
    b1b2:	11 0f       	add	r17, r17
    b1b4:	11 0f       	add	r17, r17
    b1b6:	10 7c       	andi	r17, 0xC0	; 192
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));
    b1b8:	61 e0       	ldi	r22, 0x01	; 1
    b1ba:	8b 81       	ldd	r24, Y+3	; 0x03
    b1bc:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
    b1c0:	08 2f       	mov	r16, r24
    b1c2:	63 e0       	ldi	r22, 0x03	; 3
    b1c4:	8b 81       	ldd	r24, Y+3	; 0x03
    b1c6:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    b1ca:	08 27       	eor	r16, r24
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));
    b1cc:	64 e0       	ldi	r22, 0x04	; 4
    b1ce:	8b 81       	ldd	r24, Y+3	; 0x03
    b1d0:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    b1d4:	08 27       	eor	r16, r24
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));
    b1d6:	65 e0       	ldi	r22, 0x05	; 5
    b1d8:	8b 81       	ldd	r24, Y+3	; 0x03
    b1da:	0e 94 a1 58 	call	0xb142	; 0xb142 <BIT>
                              uint8_t typeAction)
{
    uint8_t parity;
    uint8_t retVal;

    parity = (uint8_t)(((0xFFU & (BIT(PID, 0U) ^ BIT(PID, 1U) ^ BIT(PID, 2U) ^ BIT(PID, 4U))) << 6U) |
    b1de:	80 27       	eor	r24, r16
    b1e0:	80 95       	com	r24
    b1e2:	87 95       	ror	r24
    b1e4:	88 27       	eor	r24, r24
    b1e6:	87 95       	ror	r24
    b1e8:	81 2b       	or	r24, r17
    b1ea:	8a 83       	std	Y+2, r24	; 0x02
                       ((0xFFU ^ (BIT(PID, 1U) ^ BIT(PID, 3U) ^ BIT(PID, 4U) ^ BIT(PID, 5U))) << 7U));

    /* Check if action is checking parity bits */
    if (CHECK_PARITY == typeAction)
    b1ec:	8c 81       	ldd	r24, Y+4	; 0x04
    b1ee:	81 30       	cpi	r24, 0x01	; 1
    b1f0:	99 f4       	brne	.+38     	; 0xb218 <LIN_DRV_ProcessParity+0xa6>
    {
        /* If parity bits are incorrect */
        if ((PID & 0xC0U) != parity)
    b1f2:	8b 81       	ldd	r24, Y+3	; 0x03
    b1f4:	88 2f       	mov	r24, r24
    b1f6:	90 e0       	ldi	r25, 0x00	; 0
    b1f8:	9c 01       	movw	r18, r24
    b1fa:	20 7c       	andi	r18, 0xC0	; 192
    b1fc:	33 27       	eor	r19, r19
    b1fe:	8a 81       	ldd	r24, Y+2	; 0x02
    b200:	88 2f       	mov	r24, r24
    b202:	90 e0       	ldi	r25, 0x00	; 0
    b204:	28 17       	cp	r18, r24
    b206:	39 07       	cpc	r19, r25
    b208:	19 f0       	breq	.+6      	; 0xb210 <LIN_DRV_ProcessParity+0x9e>
        {
            /* Return 0xFF if parity bits are incorrect */
            retVal = 0xFFU;
    b20a:	8f ef       	ldi	r24, 0xFF	; 255
    b20c:	89 83       	std	Y+1, r24	; 0x01
    b20e:	08 c0       	rjmp	.+16     	; 0xb220 <LIN_DRV_ProcessParity+0xae>
        }
        /* If parity bits are correct */
        else
        {
            /* Return ID if parity bits are correct */
            retVal = (uint8_t)(PID & 0x3FU);
    b210:	8b 81       	ldd	r24, Y+3	; 0x03
    b212:	8f 73       	andi	r24, 0x3F	; 63
    b214:	89 83       	std	Y+1, r24	; 0x01
    b216:	04 c0       	rjmp	.+8      	; 0xb220 <LIN_DRV_ProcessParity+0xae>
    }
    /* If action is making parity bits */
    else
    {
        /* Return PID in case of making parity bits */
        retVal = (uint8_t)(PID | parity);
    b218:	9b 81       	ldd	r25, Y+3	; 0x03
    b21a:	8a 81       	ldd	r24, Y+2	; 0x02
    b21c:	89 2b       	or	r24, r25
    b21e:	89 83       	std	Y+1, r24	; 0x01
    }

    return retVal;
    b220:	89 81       	ldd	r24, Y+1	; 0x01
}
    b222:	24 96       	adiw	r28, 0x04	; 4
    b224:	cd bf       	out	0x3d, r28	; 61
    b226:	de bf       	out	0x3e, r29	; 62
    b228:	df 91       	pop	r29
    b22a:	cf 91       	pop	r28
    b22c:	1f 91       	pop	r17
    b22e:	0f 91       	pop	r16
    b230:	08 95       	ret

0000b232 <LIN_DRV_MakeChecksumByte>:
 * 计算经典型校验方式，传入参数PID应该为0
 *
 * Implements    : LIN_DRV_MakeChecksumByte_Activity
 *END**************************************************************************/
uint8_t LIN_DRV_MakeChecksumByte(const uint8_t * buffer, uint8_t sizeBuffer, uint8_t PID)
{
    b232:	cf 93       	push	r28
    b234:	df 93       	push	r29
    b236:	cd b7       	in	r28, 0x3d	; 61
    b238:	de b7       	in	r29, 0x3e	; 62
    b23a:	27 97       	sbiw	r28, 0x07	; 7
    b23c:	cd bf       	out	0x3d, r28	; 61
    b23e:	de bf       	out	0x3e, r29	; 62
    b240:	8c 83       	std	Y+4, r24	; 0x04
    b242:	9d 83       	std	Y+5, r25	; 0x05
    b244:	6e 83       	std	Y+6, r22	; 0x06
    b246:	4f 83       	std	Y+7, r20	; 0x07
    uint8_t length;
    uint16_t checksum = 0U;
    b248:	1a 82       	std	Y+2, r1	; 0x02
    b24a:	1b 82       	std	Y+3, r1	; 0x03

    /* For PID is 0x3C (ID 0x3C) or 0x7D (ID 0x3D) or 0xFE (ID 0x3E) or 0xBF (ID 0x3F)
     * apply classic checksum and apply enhanced checksum for other PID */
    if ((0x3CU != PID) && (0x7DU != PID) && (0xFEU != PID) && (0xBFU != PID))
    b24c:	8f 81       	ldd	r24, Y+7	; 0x07
    b24e:	8c 33       	cpi	r24, 0x3C	; 60
    b250:	79 f0       	breq	.+30     	; 0xb270 <LIN_DRV_MakeChecksumByte+0x3e>
    b252:	8f 81       	ldd	r24, Y+7	; 0x07
    b254:	8d 37       	cpi	r24, 0x7D	; 125
    b256:	61 f0       	breq	.+24     	; 0xb270 <LIN_DRV_MakeChecksumByte+0x3e>
    b258:	8f 81       	ldd	r24, Y+7	; 0x07
    b25a:	8e 3f       	cpi	r24, 0xFE	; 254
    b25c:	49 f0       	breq	.+18     	; 0xb270 <LIN_DRV_MakeChecksumByte+0x3e>
    b25e:	8f 81       	ldd	r24, Y+7	; 0x07
    b260:	8f 3b       	cpi	r24, 0xBF	; 191
    b262:	31 f0       	breq	.+12     	; 0xb270 <LIN_DRV_MakeChecksumByte+0x3e>
    {
        /* For PID other than 0x3C, 0x7D, 0xFE and 0xBF: Add PID in checksum calculation */
        checksum = PID;
    b264:	8f 81       	ldd	r24, Y+7	; 0x07
    b266:	88 2f       	mov	r24, r24
    b268:	90 e0       	ldi	r25, 0x00	; 0
    b26a:	8a 83       	std	Y+2, r24	; 0x02
    b26c:	9b 83       	std	Y+3, r25	; 0x03
    b26e:	02 c0       	rjmp	.+4      	; 0xb274 <LIN_DRV_MakeChecksumByte+0x42>
    }
    else
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    b270:	1a 82       	std	Y+2, r1	; 0x02
    b272:	1b 82       	std	Y+3, r1	; 0x03
    }

    for (length = sizeBuffer; 0U < length; length--)
    b274:	8e 81       	ldd	r24, Y+6	; 0x06
    b276:	89 83       	std	Y+1, r24	; 0x01
    b278:	20 c0       	rjmp	.+64     	; 0xb2ba <LIN_DRV_MakeChecksumByte+0x88>
    {
        checksum += *buffer;
    b27a:	8c 81       	ldd	r24, Y+4	; 0x04
    b27c:	9d 81       	ldd	r25, Y+5	; 0x05
    b27e:	fc 01       	movw	r30, r24
    b280:	80 81       	ld	r24, Z
    b282:	88 2f       	mov	r24, r24
    b284:	90 e0       	ldi	r25, 0x00	; 0
    b286:	2a 81       	ldd	r18, Y+2	; 0x02
    b288:	3b 81       	ldd	r19, Y+3	; 0x03
    b28a:	82 0f       	add	r24, r18
    b28c:	93 1f       	adc	r25, r19
    b28e:	8a 83       	std	Y+2, r24	; 0x02
    b290:	9b 83       	std	Y+3, r25	; 0x03
        buffer++;
    b292:	8c 81       	ldd	r24, Y+4	; 0x04
    b294:	9d 81       	ldd	r25, Y+5	; 0x05
    b296:	01 96       	adiw	r24, 0x01	; 1
    b298:	8c 83       	std	Y+4, r24	; 0x04
    b29a:	9d 83       	std	Y+5, r25	; 0x05
        /* Deal with the carry */
        if (checksum > 0xFFU)
    b29c:	8a 81       	ldd	r24, Y+2	; 0x02
    b29e:	9b 81       	ldd	r25, Y+3	; 0x03
    b2a0:	8f 3f       	cpi	r24, 0xFF	; 255
    b2a2:	91 05       	cpc	r25, r1
    b2a4:	39 f0       	breq	.+14     	; 0xb2b4 <LIN_DRV_MakeChecksumByte+0x82>
    b2a6:	30 f0       	brcs	.+12     	; 0xb2b4 <LIN_DRV_MakeChecksumByte+0x82>
        {
            checksum -= 0xFFU;
    b2a8:	8a 81       	ldd	r24, Y+2	; 0x02
    b2aa:	9b 81       	ldd	r25, Y+3	; 0x03
    b2ac:	8f 5f       	subi	r24, 0xFF	; 255
    b2ae:	91 09       	sbc	r25, r1
    b2b0:	8a 83       	std	Y+2, r24	; 0x02
    b2b2:	9b 83       	std	Y+3, r25	; 0x03
    {
        /* For 0x3C, 0x7D, 0xFE and 0xBF: Do not add PID in checksum calculation */
        checksum = 0U;
    }

    for (length = sizeBuffer; 0U < length; length--)
    b2b4:	89 81       	ldd	r24, Y+1	; 0x01
    b2b6:	81 50       	subi	r24, 0x01	; 1
    b2b8:	89 83       	std	Y+1, r24	; 0x01
    b2ba:	89 81       	ldd	r24, Y+1	; 0x01
    b2bc:	88 23       	and	r24, r24
    b2be:	e9 f6       	brne	.-70     	; 0xb27a <LIN_DRV_MakeChecksumByte+0x48>
            checksum -= 0xFFU;
        }
    }

    /* Return reversed checksum */
    return (uint8_t)(~checksum);
    b2c0:	8a 81       	ldd	r24, Y+2	; 0x02
    b2c2:	80 95       	com	r24
}
    b2c4:	27 96       	adiw	r28, 0x07	; 7
    b2c6:	cd bf       	out	0x3d, r28	; 61
    b2c8:	de bf       	out	0x3e, r29	; 62
    b2ca:	df 91       	pop	r29
    b2cc:	cf 91       	pop	r28
    b2ce:	08 95       	ret

0000b2d0 <LIN_DRV_Init>:

    /* Disable LPUART interrupts. */
    //TODO:
    
    return retVal;
}
    b2d0:	cf 93       	push	r28
    b2d2:	df 93       	push	r29
    b2d4:	cd b7       	in	r28, 0x3d	; 61
    b2d6:	de b7       	in	r29, 0x3e	; 62
    b2d8:	28 97       	sbiw	r28, 0x08	; 8
    b2da:	cd bf       	out	0x3d, r28	; 61
    b2dc:	de bf       	out	0x3e, r29	; 62
    b2de:	69 83       	std	Y+1, r22	; 0x01
    b2e0:	7a 83       	std	Y+2, r23	; 0x02
    b2e2:	8b 83       	std	Y+3, r24	; 0x03
    b2e4:	9c 83       	std	Y+4, r25	; 0x04
    b2e6:	4d 83       	std	Y+5, r20	; 0x05
    b2e8:	5e 83       	std	Y+6, r21	; 0x06
    b2ea:	2f 83       	std	Y+7, r18	; 0x07
    b2ec:	38 87       	std	Y+8, r19	; 0x08
    b2ee:	89 81       	ldd	r24, Y+1	; 0x01
    b2f0:	9a 81       	ldd	r25, Y+2	; 0x02
    b2f2:	88 0f       	add	r24, r24
    b2f4:	99 1f       	adc	r25, r25
    b2f6:	81 5d       	subi	r24, 0xD1	; 209
    b2f8:	99 4b       	sbci	r25, 0xB9	; 185
    b2fa:	2f 81       	ldd	r18, Y+7	; 0x07
    b2fc:	38 85       	ldd	r19, Y+8	; 0x08
    b2fe:	fc 01       	movw	r30, r24
    b300:	20 83       	st	Z, r18
    b302:	31 83       	std	Z+1, r19	; 0x01
    b304:	89 81       	ldd	r24, Y+1	; 0x01
    b306:	9a 81       	ldd	r25, Y+2	; 0x02
    b308:	88 0f       	add	r24, r24
    b30a:	99 1f       	adc	r25, r25
    b30c:	8f 5c       	subi	r24, 0xCF	; 207
    b30e:	99 4b       	sbci	r25, 0xB9	; 185
    b310:	2d 81       	ldd	r18, Y+5	; 0x05
    b312:	3e 81       	ldd	r19, Y+6	; 0x06
    b314:	fc 01       	movw	r30, r24
    b316:	20 83       	st	Z, r18
    b318:	31 83       	std	Z+1, r19	; 0x01
    b31a:	89 81       	ldd	r24, Y+1	; 0x01
    b31c:	9a 81       	ldd	r25, Y+2	; 0x02
    b31e:	88 0f       	add	r24, r24
    b320:	99 1f       	adc	r25, r25
    b322:	8d 5c       	subi	r24, 0xCD	; 205
    b324:	99 4b       	sbci	r25, 0xB9	; 185
    b326:	23 eb       	ldi	r18, 0xB3	; 179
    b328:	30 e4       	ldi	r19, 0x40	; 64
    b32a:	fc 01       	movw	r30, r24
    b32c:	20 83       	st	Z, r18
    b32e:	31 83       	std	Z+1, r19	; 0x01
    b330:	8f 81       	ldd	r24, Y+7	; 0x07
    b332:	98 85       	ldd	r25, Y+8	; 0x08
    b334:	22 e0       	ldi	r18, 0x02	; 2
    b336:	fc 01       	movw	r30, r24
    b338:	22 8b       	std	Z+18, r18	; 0x12
    b33a:	8f 81       	ldd	r24, Y+7	; 0x07
    b33c:	98 85       	ldd	r25, Y+8	; 0x08
    b33e:	fc 01       	movw	r30, r24
    b340:	10 86       	std	Z+8, r1	; 0x08
    b342:	8f 81       	ldd	r24, Y+7	; 0x07
    b344:	98 85       	ldd	r25, Y+8	; 0x08
    b346:	fc 01       	movw	r30, r24
    b348:	11 86       	std	Z+9, r1	; 0x09
    b34a:	8f 81       	ldd	r24, Y+7	; 0x07
    b34c:	98 85       	ldd	r25, Y+8	; 0x08
    b34e:	fc 01       	movw	r30, r24
    b350:	12 86       	std	Z+10, r1	; 0x0a
    b352:	8f 81       	ldd	r24, Y+7	; 0x07
    b354:	98 85       	ldd	r25, Y+8	; 0x08
    b356:	fc 01       	movw	r30, r24
    b358:	14 86       	std	Z+12, r1	; 0x0c
    b35a:	8f 81       	ldd	r24, Y+7	; 0x07
    b35c:	98 85       	ldd	r25, Y+8	; 0x08
    b35e:	fc 01       	movw	r30, r24
    b360:	13 86       	std	Z+11, r1	; 0x0b
    b362:	8f 81       	ldd	r24, Y+7	; 0x07
    b364:	98 85       	ldd	r25, Y+8	; 0x08
    b366:	fc 01       	movw	r30, r24
    b368:	17 8a       	std	Z+23, r1	; 0x17
    b36a:	8f 81       	ldd	r24, Y+7	; 0x07
    b36c:	98 85       	ldd	r25, Y+8	; 0x08
    b36e:	fc 01       	movw	r30, r24
    b370:	13 8a       	std	Z+19, r1	; 0x13
    b372:	14 8a       	std	Z+20, r1	; 0x14
    b374:	15 8a       	std	Z+21, r1	; 0x15
    b376:	16 8a       	std	Z+22, r1	; 0x16
    b378:	80 e0       	ldi	r24, 0x00	; 0
    b37a:	90 e0       	ldi	r25, 0x00	; 0
    b37c:	28 96       	adiw	r28, 0x08	; 8
    b37e:	cd bf       	out	0x3d, r28	; 61
    b380:	de bf       	out	0x3e, r29	; 62
    b382:	df 91       	pop	r29
    b384:	cf 91       	pop	r28
    b386:	08 95       	ret

0000b388 <LIN_DRV_GotoIdleState>:
    b388:	cf 93       	push	r28
    b38a:	df 93       	push	r29
    b38c:	cd b7       	in	r28, 0x3d	; 61
    b38e:	de b7       	in	r29, 0x3e	; 62
    b390:	26 97       	sbiw	r28, 0x06	; 6
    b392:	cd bf       	out	0x3d, r28	; 61
    b394:	de bf       	out	0x3e, r29	; 62
    b396:	6b 83       	std	Y+3, r22	; 0x03
    b398:	7c 83       	std	Y+4, r23	; 0x04
    b39a:	8d 83       	std	Y+5, r24	; 0x05
    b39c:	9e 83       	std	Y+6, r25	; 0x06
    b39e:	8b 81       	ldd	r24, Y+3	; 0x03
    b3a0:	9c 81       	ldd	r25, Y+4	; 0x04
    b3a2:	88 0f       	add	r24, r24
    b3a4:	99 1f       	adc	r25, r25
    b3a6:	81 5d       	subi	r24, 0xD1	; 209
    b3a8:	99 4b       	sbci	r25, 0xB9	; 185
    b3aa:	fc 01       	movw	r30, r24
    b3ac:	80 81       	ld	r24, Z
    b3ae:	91 81       	ldd	r25, Z+1	; 0x01
    b3b0:	89 83       	std	Y+1, r24	; 0x01
    b3b2:	9a 83       	std	Y+2, r25	; 0x02
    b3b4:	89 81       	ldd	r24, Y+1	; 0x01
    b3b6:	9a 81       	ldd	r25, Y+2	; 0x02
    b3b8:	fc 01       	movw	r30, r24
    b3ba:	11 8a       	std	Z+17, r1	; 0x11
    b3bc:	89 81       	ldd	r24, Y+1	; 0x01
    b3be:	9a 81       	ldd	r25, Y+2	; 0x02
    b3c0:	22 e0       	ldi	r18, 0x02	; 2
    b3c2:	fc 01       	movw	r30, r24
    b3c4:	22 8b       	std	Z+18, r18	; 0x12
    b3c6:	89 81       	ldd	r24, Y+1	; 0x01
    b3c8:	9a 81       	ldd	r25, Y+2	; 0x02
    b3ca:	fc 01       	movw	r30, r24
    b3cc:	12 86       	std	Z+10, r1	; 0x0a
    b3ce:	80 e0       	ldi	r24, 0x00	; 0
    b3d0:	90 e0       	ldi	r25, 0x00	; 0
    b3d2:	26 96       	adiw	r28, 0x06	; 6
    b3d4:	cd bf       	out	0x3d, r28	; 61
    b3d6:	de bf       	out	0x3e, r29	; 62
    b3d8:	df 91       	pop	r29
    b3da:	cf 91       	pop	r28
    b3dc:	08 95       	ret

0000b3de <LIN_DRV_GoToSleepMode>:
 * This function changes current node state to LIN_NODE_STATE_SLEEP_MODE.
 *
 * Implements    : LIN_LPUART_DRV_GoToSleepMode_Activity
 *END**************************************************************************/
status_t LIN_DRV_GoToSleepMode(uint32_t instance)
{
    b3de:	cf 93       	push	r28
    b3e0:	df 93       	push	r29
    b3e2:	cd b7       	in	r28, 0x3d	; 61
    b3e4:	de b7       	in	r29, 0x3e	; 62
    b3e6:	26 97       	sbiw	r28, 0x06	; 6
    b3e8:	cd bf       	out	0x3d, r28	; 61
    b3ea:	de bf       	out	0x3e, r29	; 62
    b3ec:	6b 83       	std	Y+3, r22	; 0x03
    b3ee:	7c 83       	std	Y+4, r23	; 0x04
    b3f0:	8d 83       	std	Y+5, r24	; 0x05
    b3f2:	9e 83       	std	Y+6, r25	; 0x06
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    b3f4:	8b 81       	ldd	r24, Y+3	; 0x03
    b3f6:	9c 81       	ldd	r25, Y+4	; 0x04
    b3f8:	88 0f       	add	r24, r24
    b3fa:	99 1f       	adc	r25, r25
    b3fc:	81 5d       	subi	r24, 0xD1	; 209
    b3fe:	99 4b       	sbci	r25, 0xB9	; 185
    b400:	fc 01       	movw	r30, r24
    b402:	80 81       	ld	r24, Z
    b404:	91 81       	ldd	r25, Z+1	; 0x01
    b406:	89 83       	std	Y+1, r24	; 0x01
    b408:	9a 83       	std	Y+2, r25	; 0x02

    /* Update node's current state to SLEEP_MODE. */
    linCurrentState->currentNodeState = LIN_NODE_STATE_SLEEP_MODE;
    b40a:	89 81       	ldd	r24, Y+1	; 0x01
    b40c:	9a 81       	ldd	r25, Y+2	; 0x02
    b40e:	21 e0       	ldi	r18, 0x01	; 1
    b410:	fc 01       	movw	r30, r24
    b412:	22 8b       	std	Z+18, r18	; 0x12

    lin_go_to_sleep();
    b414:	0e 94 db 2e 	call	0x5db6	; 0x5db6 <lin_go_to_sleep>

    return STATUS_SUCCESS;
    b418:	80 e0       	ldi	r24, 0x00	; 0
    b41a:	90 e0       	ldi	r25, 0x00	; 0
}
    b41c:	26 96       	adiw	r28, 0x06	; 6
    b41e:	cd bf       	out	0x3d, r28	; 61
    b420:	de bf       	out	0x3e, r29	; 62
    b422:	df 91       	pop	r29
    b424:	cf 91       	pop	r28
    b426:	08 95       	ret

0000b428 <LIN_DRV_AbortTransferData>:
 * function to terminate immediately the transferring.
 *
 * Implements    : LIN_DRV_AbortTransferData_Activity
 *END**************************************************************************/
status_t LIN_DRV_AbortTransferData(uint32_t instance)
{
    b428:	cf 93       	push	r28
    b42a:	df 93       	push	r29
    b42c:	cd b7       	in	r28, 0x3d	; 61
    b42e:	de b7       	in	r29, 0x3e	; 62
    b430:	28 97       	sbiw	r28, 0x08	; 8
    b432:	cd bf       	out	0x3d, r28	; 61
    b434:	de bf       	out	0x3e, r29	; 62
    b436:	6d 83       	std	Y+5, r22	; 0x05
    b438:	7e 83       	std	Y+6, r23	; 0x06
    b43a:	8f 83       	std	Y+7, r24	; 0x07
    b43c:	98 87       	std	Y+8, r25	; 0x08
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    b43e:	19 82       	std	Y+1, r1	; 0x01
    b440:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    b442:	8d 81       	ldd	r24, Y+5	; 0x05
    b444:	9e 81       	ldd	r25, Y+6	; 0x06
    b446:	88 0f       	add	r24, r24
    b448:	99 1f       	adc	r25, r25
    b44a:	81 5d       	subi	r24, 0xD1	; 209
    b44c:	99 4b       	sbci	r25, 0xB9	; 185
    b44e:	fc 01       	movw	r30, r24
    b450:	80 81       	ld	r24, Z
    b452:	91 81       	ldd	r25, Z+1	; 0x01
    b454:	8b 83       	std	Y+3, r24	; 0x03
    b456:	9c 83       	std	Y+4, r25	; 0x04

    /* Change node's current state to IDLE */
    (void)LIN_DRV_GotoIdleState(instance);
    b458:	8d 81       	ldd	r24, Y+5	; 0x05
    b45a:	9e 81       	ldd	r25, Y+6	; 0x06
    b45c:	af 81       	ldd	r26, Y+7	; 0x07
    b45e:	b8 85       	ldd	r27, Y+8	; 0x08
    b460:	bc 01       	movw	r22, r24
    b462:	cd 01       	movw	r24, r26
    b464:	0e 94 c4 59 	call	0xb388	; 0xb388 <LIN_DRV_GotoIdleState>

    /* Clear LIN Tx and Rx Busy flag */
    linCurrentState->isTxBusy = false;
    b468:	8b 81       	ldd	r24, Y+3	; 0x03
    b46a:	9c 81       	ldd	r25, Y+4	; 0x04
    b46c:	fc 01       	movw	r30, r24
    b46e:	10 86       	std	Z+8, r1	; 0x08
    linCurrentState->isRxBusy = false;
    b470:	8b 81       	ldd	r24, Y+3	; 0x03
    b472:	9c 81       	ldd	r25, Y+4	; 0x04
    b474:	fc 01       	movw	r30, r24
    b476:	11 86       	std	Z+9, r1	; 0x09

    return retVal;
    b478:	89 81       	ldd	r24, Y+1	; 0x01
    b47a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b47c:	28 96       	adiw	r28, 0x08	; 8
    b47e:	cd bf       	out	0x3d, r28	; 61
    b480:	de bf       	out	0x3e, r29	; 62
    b482:	df 91       	pop	r29
    b484:	cf 91       	pop	r28
    b486:	08 95       	ret

0000b488 <LIN_DRV_InstallCallback>:


lin_callback_t LIN_DRV_InstallCallback(uint32_t instance,
                                              lin_callback_t function)
{
    b488:	cf 93       	push	r28
    b48a:	df 93       	push	r29
    b48c:	cd b7       	in	r28, 0x3d	; 61
    b48e:	de b7       	in	r29, 0x3e	; 62
    b490:	2a 97       	sbiw	r28, 0x0a	; 10
    b492:	cd bf       	out	0x3d, r28	; 61
    b494:	de bf       	out	0x3e, r29	; 62
    b496:	6d 83       	std	Y+5, r22	; 0x05
    b498:	7e 83       	std	Y+6, r23	; 0x06
    b49a:	8f 83       	std	Y+7, r24	; 0x07
    b49c:	98 87       	std	Y+8, r25	; 0x08
    b49e:	49 87       	std	Y+9, r20	; 0x09
    b4a0:	5a 87       	std	Y+10, r21	; 0x0a
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    b4a2:	8d 81       	ldd	r24, Y+5	; 0x05
    b4a4:	9e 81       	ldd	r25, Y+6	; 0x06
    b4a6:	88 0f       	add	r24, r24
    b4a8:	99 1f       	adc	r25, r25
    b4aa:	81 5d       	subi	r24, 0xD1	; 209
    b4ac:	99 4b       	sbci	r25, 0xB9	; 185
    b4ae:	fc 01       	movw	r30, r24
    b4b0:	80 81       	ld	r24, Z
    b4b2:	91 81       	ldd	r25, Z+1	; 0x01
    b4b4:	89 83       	std	Y+1, r24	; 0x01
    b4b6:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the current callback function. */
    lin_callback_t currentCallback = linCurrentState->Callback;
    b4b8:	89 81       	ldd	r24, Y+1	; 0x01
    b4ba:	9a 81       	ldd	r25, Y+2	; 0x02
    b4bc:	fc 01       	movw	r30, r24
    b4be:	85 85       	ldd	r24, Z+13	; 0x0d
    b4c0:	96 85       	ldd	r25, Z+14	; 0x0e
    b4c2:	8b 83       	std	Y+3, r24	; 0x03
    b4c4:	9c 83       	std	Y+4, r25	; 0x04

    /* Install new callback function. */
    linCurrentState->Callback = function;
    b4c6:	89 81       	ldd	r24, Y+1	; 0x01
    b4c8:	9a 81       	ldd	r25, Y+2	; 0x02
    b4ca:	29 85       	ldd	r18, Y+9	; 0x09
    b4cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    b4ce:	fc 01       	movw	r30, r24
    b4d0:	25 87       	std	Z+13, r18	; 0x0d
    b4d2:	36 87       	std	Z+14, r19	; 0x0e

    return currentCallback;
    b4d4:	8b 81       	ldd	r24, Y+3	; 0x03
    b4d6:	9c 81       	ldd	r25, Y+4	; 0x04
}
    b4d8:	2a 96       	adiw	r28, 0x0a	; 10
    b4da:	cd bf       	out	0x3d, r28	; 61
    b4dc:	de bf       	out	0x3e, r29	; 62
    b4de:	df 91       	pop	r29
    b4e0:	cf 91       	pop	r28
    b4e2:	08 95       	ret

0000b4e4 <LIN_DRV_IRQHandler>:

/*  参数instance为串口标号，取决于配置的顺序
*/

void LIN_DRV_IRQHandler(uint32_t instance, int8_t event)
{
    b4e4:	cf 93       	push	r28
    b4e6:	df 93       	push	r29
    b4e8:	cd b7       	in	r28, 0x3d	; 61
    b4ea:	de b7       	in	r29, 0x3e	; 62
    b4ec:	2c 97       	sbiw	r28, 0x0c	; 12
    b4ee:	cd bf       	out	0x3d, r28	; 61
    b4f0:	de bf       	out	0x3e, r29	; 62
    b4f2:	68 87       	std	Y+8, r22	; 0x08
    b4f4:	79 87       	std	Y+9, r23	; 0x09
    b4f6:	8a 87       	std	Y+10, r24	; 0x0a
    b4f8:	9b 87       	std	Y+11, r25	; 0x0b
    b4fa:	4c 87       	std	Y+12, r20	; 0x0c
    /* 一下功能实现只针对AVRxxDA系列8位单片机 */
    uint8_t temp_buf; 
    /************/
    const lin_user_config_t * linUserConfig = g_linUserconfigPtr[instance];
    b4fc:	88 85       	ldd	r24, Y+8	; 0x08
    b4fe:	99 85       	ldd	r25, Y+9	; 0x09
    b500:	88 0f       	add	r24, r24
    b502:	99 1f       	adc	r25, r25
    b504:	8f 5c       	subi	r24, 0xCF	; 207
    b506:	99 4b       	sbci	r25, 0xB9	; 185
    b508:	fc 01       	movw	r30, r24
    b50a:	80 81       	ld	r24, Z
    b50c:	91 81       	ldd	r25, Z+1	; 0x01
    b50e:	89 83       	std	Y+1, r24	; 0x01
    b510:	9a 83       	std	Y+2, r25	; 0x02
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    b512:	88 85       	ldd	r24, Y+8	; 0x08
    b514:	99 85       	ldd	r25, Y+9	; 0x09
    b516:	88 0f       	add	r24, r24
    b518:	99 1f       	adc	r25, r25
    b51a:	81 5d       	subi	r24, 0xD1	; 209
    b51c:	99 4b       	sbci	r25, 0xB9	; 185
    b51e:	fc 01       	movw	r30, r24
    b520:	80 81       	ld	r24, Z
    b522:	91 81       	ldd	r25, Z+1	; 0x01
    b524:	8b 83       	std	Y+3, r24	; 0x03
    b526:	9c 83       	std	Y+4, r25	; 0x04
    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    b528:	88 85       	ldd	r24, Y+8	; 0x08
    b52a:	99 85       	ldd	r25, Y+9	; 0x09
    b52c:	88 0f       	add	r24, r24
    b52e:	99 1f       	adc	r25, r25
    b530:	8d 5c       	subi	r24, 0xCD	; 205
    b532:	99 4b       	sbci	r25, 0xB9	; 185
    b534:	fc 01       	movw	r30, r24
    b536:	80 81       	ld	r24, Z
    b538:	91 81       	ldd	r25, Z+1	; 0x01
    b53a:	8d 83       	std	Y+5, r24	; 0x05
    b53c:	9e 83       	std	Y+6, r25	; 0x06

    if(event == 1) // 检测到PID
    b53e:	8c 85       	ldd	r24, Y+12	; 0x0c
    b540:	81 30       	cpi	r24, 0x01	; 1
    b542:	51 f5       	brne	.+84     	; 0xb598 <LIN_DRV_IRQHandler+0xb4>
    {
        //AVR系列单片机特殊的地方 BREAK SYNC PID 一起识别触发
        if(linUserConfig->nodeFunction == (bool)MASTER)
    b544:	89 81       	ldd	r24, Y+1	; 0x01
    b546:	9a 81       	ldd	r25, Y+2	; 0x02
    b548:	fc 01       	movw	r30, r24
    b54a:	84 81       	ldd	r24, Z+4	; 0x04
    b54c:	88 23       	and	r24, r24
    b54e:	09 f0       	breq	.+2      	; 0xb552 <LIN_DRV_IRQHandler+0x6e>
    b550:	93 c0       	rjmp	.+294    	; 0xb678 <LIN_DRV_IRQHandler+0x194>
        {
            //TODO:主机模式后续更新，AVR 8位机无法实现主机模式
        }else
        {
            /* Set flag LIN bus busy */
            linCurrentState->isBusBusy = true;
    b552:	8b 81       	ldd	r24, Y+3	; 0x03
    b554:	9c 81       	ldd	r25, Y+4	; 0x04
    b556:	21 e0       	ldi	r18, 0x01	; 1
    b558:	fc 01       	movw	r30, r24
    b55a:	22 87       	std	Z+10, r18	; 0x0a
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentEventId = LIN_SYNC_OK;
    b55c:	8b 81       	ldd	r24, Y+3	; 0x03
    b55e:	9c 81       	ldd	r25, Y+4	; 0x04
    b560:	24 e0       	ldi	r18, 0x04	; 4
    b562:	fc 01       	movw	r30, r24
    b564:	21 8b       	std	Z+17, r18	; 0x11
            /* Change the node's current state to RECEIVING PID */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_PID;
    b566:	8b 81       	ldd	r24, Y+3	; 0x03
    b568:	9c 81       	ldd	r25, Y+4	; 0x04
    b56a:	26 e0       	ldi	r18, 0x06	; 6
    b56c:	fc 01       	movw	r30, r24
    b56e:	22 8b       	std	Z+18, r18	; 0x12
            /* 直接读取data缓冲区数据，存放得当前PID */
            linFuncCallback->ReadByte(&temp_buf);
    b570:	8d 81       	ldd	r24, Y+5	; 0x05
    b572:	9e 81       	ldd	r25, Y+6	; 0x06
    b574:	fc 01       	movw	r30, r24
    b576:	20 81       	ld	r18, Z
    b578:	31 81       	ldd	r19, Z+1	; 0x01
    b57a:	ce 01       	movw	r24, r28
    b57c:	07 96       	adiw	r24, 0x07	; 7
    b57e:	f9 01       	movw	r30, r18
    b580:	09 95       	icall
            /* 判断PID是否合理，有错误 */
            LIN_DRV_ProcessFrameHeader(instance, temp_buf);
    b582:	2f 81       	ldd	r18, Y+7	; 0x07
    b584:	88 85       	ldd	r24, Y+8	; 0x08
    b586:	99 85       	ldd	r25, Y+9	; 0x09
    b588:	aa 85       	ldd	r26, Y+10	; 0x0a
    b58a:	bb 85       	ldd	r27, Y+11	; 0x0b
    b58c:	42 2f       	mov	r20, r18
    b58e:	bc 01       	movw	r22, r24
    b590:	cd 01       	movw	r24, r26
    b592:	0e 94 43 5b 	call	0xb686	; 0xb686 <LIN_DRV_ProcessFrameHeader>
        {
            linCurrentState->Callback(instance, linCurrentState);
        }
        (void)LIN_DRV_GotoIdleState(instance);
    }
}
    b596:	70 c0       	rjmp	.+224    	; 0xb678 <LIN_DRV_IRQHandler+0x194>
            // {
            //     linCurrentState->Callback(instance, linCurrentState);
            // }
        }
    }
    else if(event == 0) //处理帧数据
    b598:	8c 85       	ldd	r24, Y+12	; 0x0c
    b59a:	88 23       	and	r24, r24
    b59c:	09 f0       	breq	.+2      	; 0xb5a0 <LIN_DRV_IRQHandler+0xbc>
    b59e:	45 c0       	rjmp	.+138    	; 0xb62a <LIN_DRV_IRQHandler+0x146>
    {
        /* Check node's current state */
        switch (linCurrentState->currentNodeState)
    b5a0:	8b 81       	ldd	r24, Y+3	; 0x03
    b5a2:	9c 81       	ldd	r25, Y+4	; 0x04
    b5a4:	fc 01       	movw	r30, r24
    b5a6:	82 89       	ldd	r24, Z+18	; 0x12
    b5a8:	88 2f       	mov	r24, r24
    b5aa:	90 e0       	ldi	r25, 0x00	; 0
    b5ac:	87 30       	cpi	r24, 0x07	; 7
    b5ae:	91 05       	cpc	r25, r1
    b5b0:	49 f0       	breq	.+18     	; 0xb5c4 <LIN_DRV_IRQHandler+0xe0>
    b5b2:	88 30       	cpi	r24, 0x08	; 8
    b5b4:	91 05       	cpc	r25, r1
    b5b6:	1c f4       	brge	.+6      	; 0xb5be <LIN_DRV_IRQHandler+0xda>
    b5b8:	04 97       	sbiw	r24, 0x04	; 4
    b5ba:	64 f1       	brlt	.+88     	; 0xb614 <LIN_DRV_IRQHandler+0x130>
            /* if current state is MASTER SENDING PID */
            case LIN_NODE_STATE_SEND_PID:

            /* if current state is RECEIVE PID */
            case LIN_NODE_STATE_RECV_PID:
                break;
    b5bc:	5d c0       	rjmp	.+186    	; 0xb678 <LIN_DRV_IRQHandler+0x194>
        }
    }
    else if(event == 0) //处理帧数据
    {
        /* Check node's current state */
        switch (linCurrentState->currentNodeState)
    b5be:	09 97       	sbiw	r24, 0x09	; 9
    b5c0:	a9 f0       	breq	.+42     	; 0xb5ec <LIN_DRV_IRQHandler+0x108>
    b5c2:	28 c0       	rjmp	.+80     	; 0xb614 <LIN_DRV_IRQHandler+0x130>
            /* if current state is RECEIVE PID */
            case LIN_NODE_STATE_RECV_PID:
                break;
            /* if current state is RECEIVE DATA */
            case LIN_NODE_STATE_RECV_DATA:
                linFuncCallback->ReadByte(&temp_buf);
    b5c4:	8d 81       	ldd	r24, Y+5	; 0x05
    b5c6:	9e 81       	ldd	r25, Y+6	; 0x06
    b5c8:	fc 01       	movw	r30, r24
    b5ca:	20 81       	ld	r18, Z
    b5cc:	31 81       	ldd	r19, Z+1	; 0x01
    b5ce:	ce 01       	movw	r24, r28
    b5d0:	07 96       	adiw	r24, 0x07	; 7
    b5d2:	f9 01       	movw	r30, r18
    b5d4:	09 95       	icall
                LIN_DRV_ProcessReceiveFrameData(instance, temp_buf);
    b5d6:	2f 81       	ldd	r18, Y+7	; 0x07
    b5d8:	88 85       	ldd	r24, Y+8	; 0x08
    b5da:	99 85       	ldd	r25, Y+9	; 0x09
    b5dc:	aa 85       	ldd	r26, Y+10	; 0x0a
    b5de:	bb 85       	ldd	r27, Y+11	; 0x0b
    b5e0:	42 2f       	mov	r20, r18
    b5e2:	bc 01       	movw	r22, r24
    b5e4:	cd 01       	movw	r24, r26
    b5e6:	0e 94 4d 5e 	call	0xbc9a	; 0xbc9a <LIN_DRV_ProcessReceiveFrameData>
                break;
    b5ea:	46 c0       	rjmp	.+140    	; 0xb678 <LIN_DRV_IRQHandler+0x194>
            /* if current state is SENDING DATA */
            case LIN_NODE_STATE_SEND_DATA:
                /* 发送时会回显数据 读上次发送的回显数据 */
                linFuncCallback->ReadByte(&temp_buf);
    b5ec:	8d 81       	ldd	r24, Y+5	; 0x05
    b5ee:	9e 81       	ldd	r25, Y+6	; 0x06
    b5f0:	fc 01       	movw	r30, r24
    b5f2:	20 81       	ld	r18, Z
    b5f4:	31 81       	ldd	r19, Z+1	; 0x01
    b5f6:	ce 01       	movw	r24, r28
    b5f8:	07 96       	adiw	r24, 0x07	; 7
    b5fa:	f9 01       	movw	r30, r18
    b5fc:	09 95       	icall
                LIN_DRV_ProcessSendFrameData(instance, temp_buf);
    b5fe:	2f 81       	ldd	r18, Y+7	; 0x07
    b600:	88 85       	ldd	r24, Y+8	; 0x08
    b602:	99 85       	ldd	r25, Y+9	; 0x09
    b604:	aa 85       	ldd	r26, Y+10	; 0x0a
    b606:	bb 85       	ldd	r27, Y+11	; 0x0b
    b608:	42 2f       	mov	r20, r18
    b60a:	bc 01       	movw	r22, r24
    b60c:	cd 01       	movw	r24, r26
    b60e:	0e 94 dc 5c 	call	0xb9b8	; 0xb9b8 <LIN_DRV_ProcessSendFrameData>
                break;
    b612:	32 c0       	rjmp	.+100    	; 0xb678 <LIN_DRV_IRQHandler+0x194>

            default:
                /* Other node state */
				linFuncCallback->ReadByte(&temp_buf);
    b614:	8d 81       	ldd	r24, Y+5	; 0x05
    b616:	9e 81       	ldd	r25, Y+6	; 0x06
    b618:	fc 01       	movw	r30, r24
    b61a:	20 81       	ld	r18, Z
    b61c:	31 81       	ldd	r19, Z+1	; 0x01
    b61e:	ce 01       	movw	r24, r28
    b620:	07 96       	adiw	r24, 0x07	; 7
    b622:	f9 01       	movw	r30, r18
    b624:	09 95       	icall
                break;
    b626:	00 00       	nop
    b628:	27 c0       	rjmp	.+78     	; 0xb678 <LIN_DRV_IRQHandler+0x194>
        }
    }
    else if(event == -1) //报错
    b62a:	8c 85       	ldd	r24, Y+12	; 0x0c
    b62c:	8f 3f       	cpi	r24, 0xFF	; 255
    b62e:	21 f5       	brne	.+72     	; 0xb678 <LIN_DRV_IRQHandler+0x194>
        // else if(err == USART_ERROR_FRAMING)
        // {

        // }
        // AVRXXDA系列的型号
        linCurrentState->currentEventId = LIN_SYNC_ERROR;
    b630:	8b 81       	ldd	r24, Y+3	; 0x03
    b632:	9c 81       	ldd	r25, Y+4	; 0x04
    b634:	25 e0       	ldi	r18, 0x05	; 5
    b636:	fc 01       	movw	r30, r24
    b638:	21 8b       	std	Z+17, r18	; 0x11
        if(linCurrentState->Callback != NULL)
    b63a:	8b 81       	ldd	r24, Y+3	; 0x03
    b63c:	9c 81       	ldd	r25, Y+4	; 0x04
    b63e:	fc 01       	movw	r30, r24
    b640:	85 85       	ldd	r24, Z+13	; 0x0d
    b642:	96 85       	ldd	r25, Z+14	; 0x0e
    b644:	89 2b       	or	r24, r25
    b646:	79 f0       	breq	.+30     	; 0xb666 <LIN_DRV_IRQHandler+0x182>
        {
            linCurrentState->Callback(instance, linCurrentState);
    b648:	8b 81       	ldd	r24, Y+3	; 0x03
    b64a:	9c 81       	ldd	r25, Y+4	; 0x04
    b64c:	fc 01       	movw	r30, r24
    b64e:	25 85       	ldd	r18, Z+13	; 0x0d
    b650:	36 85       	ldd	r19, Z+14	; 0x0e
    b652:	4b 81       	ldd	r20, Y+3	; 0x03
    b654:	5c 81       	ldd	r21, Y+4	; 0x04
    b656:	88 85       	ldd	r24, Y+8	; 0x08
    b658:	99 85       	ldd	r25, Y+9	; 0x09
    b65a:	aa 85       	ldd	r26, Y+10	; 0x0a
    b65c:	bb 85       	ldd	r27, Y+11	; 0x0b
    b65e:	bc 01       	movw	r22, r24
    b660:	cd 01       	movw	r24, r26
    b662:	f9 01       	movw	r30, r18
    b664:	09 95       	icall
        }
        (void)LIN_DRV_GotoIdleState(instance);
    b666:	88 85       	ldd	r24, Y+8	; 0x08
    b668:	99 85       	ldd	r25, Y+9	; 0x09
    b66a:	aa 85       	ldd	r26, Y+10	; 0x0a
    b66c:	bb 85       	ldd	r27, Y+11	; 0x0b
    b66e:	bc 01       	movw	r22, r24
    b670:	cd 01       	movw	r24, r26
    b672:	0e 94 c4 59 	call	0xb388	; 0xb388 <LIN_DRV_GotoIdleState>
    }
}
    b676:	00 c0       	rjmp	.+0      	; 0xb678 <LIN_DRV_IRQHandler+0x194>
    b678:	00 00       	nop
    b67a:	2c 96       	adiw	r28, 0x0c	; 12
    b67c:	cd bf       	out	0x3d, r28	; 61
    b67e:	de bf       	out	0x3e, r29	; 62
    b680:	df 91       	pop	r29
    b682:	cf 91       	pop	r28
    b684:	08 95       	ret

0000b686 <LIN_DRV_ProcessFrameHeader>:

static void LIN_DRV_ProcessFrameHeader(uint32_t instance, uint8_t tmpbyte)
{
    b686:	cf 93       	push	r28
    b688:	df 93       	push	r29
    b68a:	cd b7       	in	r28, 0x3d	; 61
    b68c:	de b7       	in	r29, 0x3e	; 62
    b68e:	29 97       	sbiw	r28, 0x09	; 9
    b690:	cd bf       	out	0x3d, r28	; 61
    b692:	de bf       	out	0x3e, r29	; 62
    b694:	6d 83       	std	Y+5, r22	; 0x05
    b696:	7e 83       	std	Y+6, r23	; 0x06
    b698:	8f 83       	std	Y+7, r24	; 0x07
    b69a:	98 87       	std	Y+8, r25	; 0x08
    b69c:	49 87       	std	Y+9, r20	; 0x09
    /* Get the current LIN user config structure of this LPUART instance. */
    const lin_user_config_t * linUserConfig = g_linUserconfigPtr[instance];
    b69e:	8d 81       	ldd	r24, Y+5	; 0x05
    b6a0:	9e 81       	ldd	r25, Y+6	; 0x06
    b6a2:	88 0f       	add	r24, r24
    b6a4:	99 1f       	adc	r25, r25
    b6a6:	8f 5c       	subi	r24, 0xCF	; 207
    b6a8:	99 4b       	sbci	r25, 0xB9	; 185
    b6aa:	fc 01       	movw	r30, r24
    b6ac:	80 81       	ld	r24, Z
    b6ae:	91 81       	ldd	r25, Z+1	; 0x01
    b6b0:	89 83       	std	Y+1, r24	; 0x01
    b6b2:	9a 83       	std	Y+2, r25	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    b6b4:	8d 81       	ldd	r24, Y+5	; 0x05
    b6b6:	9e 81       	ldd	r25, Y+6	; 0x06
    b6b8:	88 0f       	add	r24, r24
    b6ba:	99 1f       	adc	r25, r25
    b6bc:	81 5d       	subi	r24, 0xD1	; 209
    b6be:	99 4b       	sbci	r25, 0xB9	; 185
    b6c0:	fc 01       	movw	r30, r24
    b6c2:	80 81       	ld	r24, Z
    b6c4:	91 81       	ldd	r25, Z+1	; 0x01
    b6c6:	8b 83       	std	Y+3, r24	; 0x03
    b6c8:	9c 83       	std	Y+4, r25	; 0x04

    switch (linCurrentState->currentNodeState)
    b6ca:	8b 81       	ldd	r24, Y+3	; 0x03
    b6cc:	9c 81       	ldd	r25, Y+4	; 0x04
    b6ce:	fc 01       	movw	r30, r24
    b6d0:	82 89       	ldd	r24, Z+18	; 0x12
    b6d2:	88 2f       	mov	r24, r24
    b6d4:	90 e0       	ldi	r25, 0x00	; 0
    b6d6:	85 30       	cpi	r24, 0x05	; 5
    b6d8:	91 05       	cpc	r25, r1
    b6da:	09 f4       	brne	.+2      	; 0xb6de <LIN_DRV_ProcessFrameHeader+0x58>
    b6dc:	6d c0       	rjmp	.+218    	; 0xb7b8 <LIN_DRV_ProcessFrameHeader+0x132>
    b6de:	86 30       	cpi	r24, 0x06	; 6
    b6e0:	91 05       	cpc	r25, r1
    b6e2:	21 f0       	breq	.+8      	; 0xb6ec <LIN_DRV_ProcessFrameHeader+0x66>
    b6e4:	04 97       	sbiw	r24, 0x04	; 4
    b6e6:	09 f4       	brne	.+2      	; 0xb6ea <LIN_DRV_ProcessFrameHeader+0x64>
    b6e8:	69 c0       	rjmp	.+210    	; 0xb7bc <LIN_DRV_ProcessFrameHeader+0x136>
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    default:
        break;
    b6ea:	6b c0       	rjmp	.+214    	; 0xb7c2 <LIN_DRV_ProcessFrameHeader+0x13c>
        break;
    case LIN_NODE_STATE_SEND_PID:
        break;   
    case LIN_NODE_STATE_RECV_PID:
        /* If the node is MASTER */
        if (linUserConfig->nodeFunction == (bool)MASTER)
    b6ec:	89 81       	ldd	r24, Y+1	; 0x01
    b6ee:	9a 81       	ldd	r25, Y+2	; 0x02
    b6f0:	fc 01       	movw	r30, r24
    b6f2:	84 81       	ldd	r24, Z+4	; 0x04
    b6f4:	88 23       	and	r24, r24
    b6f6:	09 f0       	breq	.+2      	; 0xb6fa <LIN_DRV_ProcessFrameHeader+0x74>
    b6f8:	63 c0       	rjmp	.+198    	; 0xb7c0 <LIN_DRV_ProcessFrameHeader+0x13a>
            //TODO: 实现主机的方法
        }
        /* If the node is SLAVE */
        else
        {
            linCurrentState->currentId = LIN_DRV_ProcessParity(tmpbyte, CHECK_PARITY);
    b6fa:	61 e0       	ldi	r22, 0x01	; 1
    b6fc:	89 85       	ldd	r24, Y+9	; 0x09
    b6fe:	0e 94 b9 58 	call	0xb172	; 0xb172 <LIN_DRV_ProcessParity>
    b702:	28 2f       	mov	r18, r24
    b704:	8b 81       	ldd	r24, Y+3	; 0x03
    b706:	9c 81       	ldd	r25, Y+4	; 0x04
    b708:	fc 01       	movw	r30, r24
    b70a:	27 87       	std	Z+15, r18	; 0x0f
            linCurrentState->currentPid = tmpbyte;
    b70c:	8b 81       	ldd	r24, Y+3	; 0x03
    b70e:	9c 81       	ldd	r25, Y+4	; 0x04
    b710:	29 85       	ldd	r18, Y+9	; 0x09
    b712:	fc 01       	movw	r30, r24
    b714:	20 8b       	std	Z+16, r18	; 0x10
            if(linCurrentState->currentId != 0xFFU)
    b716:	8b 81       	ldd	r24, Y+3	; 0x03
    b718:	9c 81       	ldd	r25, Y+4	; 0x04
    b71a:	fc 01       	movw	r30, r24
    b71c:	87 85       	ldd	r24, Z+15	; 0x0f
    b71e:	8f 3f       	cpi	r24, 0xFF	; 255
    b720:	b1 f1       	breq	.+108    	; 0xb78e <LIN_DRV_ProcessFrameHeader+0x108>
            {
                /* Set current event ID to PID correct */
                linCurrentState->currentEventId = LIN_PID_OK;
    b722:	8b 81       	ldd	r24, Y+3	; 0x03
    b724:	9c 81       	ldd	r25, Y+4	; 0x04
    b726:	26 e0       	ldi	r18, 0x06	; 6
    b728:	fc 01       	movw	r30, r24
    b72a:	21 8b       	std	Z+17, r18	; 0x11
                if(linCurrentState->isRxBlocking == true)
    b72c:	8b 81       	ldd	r24, Y+3	; 0x03
    b72e:	9c 81       	ldd	r25, Y+4	; 0x04
    b730:	fc 01       	movw	r30, r24
    b732:	84 85       	ldd	r24, Z+12	; 0x0c
    b734:	88 23       	and	r24, r24
    b736:	81 f0       	breq	.+32     	; 0xb758 <LIN_DRV_ProcessFrameHeader+0xd2>
                {
                    /* Starting receive data blocking */
                    linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA;             
    b738:	8b 81       	ldd	r24, Y+3	; 0x03
    b73a:	9c 81       	ldd	r25, Y+4	; 0x04
    b73c:	27 e0       	ldi	r18, 0x07	; 7
    b73e:	fc 01       	movw	r30, r24
    b740:	22 8b       	std	Z+18, r18	; 0x12
                    linCurrentState->isBusBusy = true;
    b742:	8b 81       	ldd	r24, Y+3	; 0x03
    b744:	9c 81       	ldd	r25, Y+4	; 0x04
    b746:	21 e0       	ldi	r18, 0x01	; 1
    b748:	fc 01       	movw	r30, r24
    b74a:	22 87       	std	Z+10, r18	; 0x0a
                    linCurrentState->isRxBusy = true;
    b74c:	8b 81       	ldd	r24, Y+3	; 0x03
    b74e:	9c 81       	ldd	r25, Y+4	; 0x04
    b750:	21 e0       	ldi	r18, 0x01	; 1
    b752:	fc 01       	movw	r30, r24
    b754:	21 87       	std	Z+9, r18	; 0x09
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    b756:	34 c0       	rjmp	.+104    	; 0xb7c0 <LIN_DRV_ProcessFrameHeader+0x13a>
                    linCurrentState->isBusBusy = true;
                    linCurrentState->isRxBusy = true;
                }
                else
                {
                    linCurrentState->isBusBusy = false;
    b758:	8b 81       	ldd	r24, Y+3	; 0x03
    b75a:	9c 81       	ldd	r25, Y+4	; 0x04
    b75c:	fc 01       	movw	r30, r24
    b75e:	12 86       	std	Z+10, r1	; 0x0a

                    if(linCurrentState->Callback != NULL)
    b760:	8b 81       	ldd	r24, Y+3	; 0x03
    b762:	9c 81       	ldd	r25, Y+4	; 0x04
    b764:	fc 01       	movw	r30, r24
    b766:	85 85       	ldd	r24, Z+13	; 0x0d
    b768:	96 85       	ldd	r25, Z+14	; 0x0e
    b76a:	89 2b       	or	r24, r25
    b76c:	49 f1       	breq	.+82     	; 0xb7c0 <LIN_DRV_ProcessFrameHeader+0x13a>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    b76e:	8b 81       	ldd	r24, Y+3	; 0x03
    b770:	9c 81       	ldd	r25, Y+4	; 0x04
    b772:	fc 01       	movw	r30, r24
    b774:	25 85       	ldd	r18, Z+13	; 0x0d
    b776:	36 85       	ldd	r19, Z+14	; 0x0e
    b778:	4b 81       	ldd	r20, Y+3	; 0x03
    b77a:	5c 81       	ldd	r21, Y+4	; 0x04
    b77c:	8d 81       	ldd	r24, Y+5	; 0x05
    b77e:	9e 81       	ldd	r25, Y+6	; 0x06
    b780:	af 81       	ldd	r26, Y+7	; 0x07
    b782:	b8 85       	ldd	r27, Y+8	; 0x08
    b784:	bc 01       	movw	r22, r24
    b786:	cd 01       	movw	r24, r26
    b788:	f9 01       	movw	r30, r18
    b78a:	09 95       	icall
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    b78c:	19 c0       	rjmp	.+50     	; 0xb7c0 <LIN_DRV_ProcessFrameHeader+0x13a>
                    }
                }
            }
            else
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
    b78e:	8b 81       	ldd	r24, Y+3	; 0x03
    b790:	9c 81       	ldd	r25, Y+4	; 0x04
    b792:	27 e0       	ldi	r18, 0x07	; 7
    b794:	fc 01       	movw	r30, r24
    b796:	21 8b       	std	Z+17, r18	; 0x11
                linCurrentState->Callback(instance, linCurrentState);
    b798:	8b 81       	ldd	r24, Y+3	; 0x03
    b79a:	9c 81       	ldd	r25, Y+4	; 0x04
    b79c:	fc 01       	movw	r30, r24
    b79e:	25 85       	ldd	r18, Z+13	; 0x0d
    b7a0:	36 85       	ldd	r19, Z+14	; 0x0e
    b7a2:	4b 81       	ldd	r20, Y+3	; 0x03
    b7a4:	5c 81       	ldd	r21, Y+4	; 0x04
    b7a6:	8d 81       	ldd	r24, Y+5	; 0x05
    b7a8:	9e 81       	ldd	r25, Y+6	; 0x06
    b7aa:	af 81       	ldd	r26, Y+7	; 0x07
    b7ac:	b8 85       	ldd	r27, Y+8	; 0x08
    b7ae:	bc 01       	movw	r22, r24
    b7b0:	cd 01       	movw	r24, r26
    b7b2:	f9 01       	movw	r30, r18
    b7b4:	09 95       	icall
            }
        }
        break;
    b7b6:	04 c0       	rjmp	.+8      	; 0xb7c0 <LIN_DRV_ProcessFrameHeader+0x13a>
    switch (linCurrentState->currentNodeState)
    {
    case LIN_NODE_STATE_RECV_SYNC:
        break;
    case LIN_NODE_STATE_SEND_PID:
        break;   
    b7b8:	00 00       	nop
    b7ba:	03 c0       	rjmp	.+6      	; 0xb7c2 <LIN_DRV_ProcessFrameHeader+0x13c>
    lin_state_t * linCurrentState = g_linStatePtr[instance];

    switch (linCurrentState->currentNodeState)
    {
    case LIN_NODE_STATE_RECV_SYNC:
        break;
    b7bc:	00 00       	nop
    b7be:	01 c0       	rjmp	.+2      	; 0xb7c2 <LIN_DRV_ProcessFrameHeader+0x13c>
            {
                linCurrentState->currentEventId = LIN_PID_ERROR;
                linCurrentState->Callback(instance, linCurrentState);
            }
        }
        break;
    b7c0:	00 00       	nop
    default:
        break;
    }
}
    b7c2:	00 00       	nop
    b7c4:	29 96       	adiw	r28, 0x09	; 9
    b7c6:	cd bf       	out	0x3d, r28	; 61
    b7c8:	de bf       	out	0x3e, r29	; 62
    b7ca:	df 91       	pop	r29
    b7cc:	cf 91       	pop	r28
    b7ce:	08 95       	ret

0000b7d0 <LIN_COM_DRV_MakeChecksumByte>:

static uint8_t LIN_COM_DRV_MakeChecksumByte(uint32_t instance,
                                               const uint8_t * buffer,
                                               uint8_t sizeBuffer,
                                               uint8_t PID)
{
    b7d0:	0f 93       	push	r16
    b7d2:	cf 93       	push	r28
    b7d4:	df 93       	push	r29
    b7d6:	cd b7       	in	r28, 0x3d	; 61
    b7d8:	de b7       	in	r29, 0x3e	; 62
    b7da:	2d 97       	sbiw	r28, 0x0d	; 13
    b7dc:	cd bf       	out	0x3d, r28	; 61
    b7de:	de bf       	out	0x3e, r29	; 62
    b7e0:	6e 83       	std	Y+6, r22	; 0x06
    b7e2:	7f 83       	std	Y+7, r23	; 0x07
    b7e4:	88 87       	std	Y+8, r24	; 0x08
    b7e6:	99 87       	std	Y+9, r25	; 0x09
    b7e8:	4a 87       	std	Y+10, r20	; 0x0a
    b7ea:	5b 87       	std	Y+11, r21	; 0x0b
    b7ec:	2c 87       	std	Y+12, r18	; 0x0c
    b7ee:	0d 87       	std	Y+13, r16	; 0x0d
    /* Get list of PIDs use classic checksum. */
    const uint8_t *classicPID = g_linUserconfigPtr[instance]->classicPID;
    b7f0:	8e 81       	ldd	r24, Y+6	; 0x06
    b7f2:	9f 81       	ldd	r25, Y+7	; 0x07
    b7f4:	88 0f       	add	r24, r24
    b7f6:	99 1f       	adc	r25, r25
    b7f8:	8f 5c       	subi	r24, 0xCF	; 207
    b7fa:	99 4b       	sbci	r25, 0xB9	; 185
    b7fc:	fc 01       	movw	r30, r24
    b7fe:	80 81       	ld	r24, Z
    b800:	91 81       	ldd	r25, Z+1	; 0x01
    b802:	fc 01       	movw	r30, r24
    b804:	80 85       	ldd	r24, Z+8	; 0x08
    b806:	91 85       	ldd	r25, Z+9	; 0x09
    b808:	8b 83       	std	Y+3, r24	; 0x03
    b80a:	9c 83       	std	Y+4, r25	; 0x04
    const uint8_t numOfClassicPID = g_linUserconfigPtr[instance]->numOfClassicPID;
    b80c:	8e 81       	ldd	r24, Y+6	; 0x06
    b80e:	9f 81       	ldd	r25, Y+7	; 0x07
    b810:	88 0f       	add	r24, r24
    b812:	99 1f       	adc	r25, r25
    b814:	8f 5c       	subi	r24, 0xCF	; 207
    b816:	99 4b       	sbci	r25, 0xB9	; 185
    b818:	fc 01       	movw	r30, r24
    b81a:	80 81       	ld	r24, Z
    b81c:	91 81       	ldd	r25, Z+1	; 0x01
    b81e:	fc 01       	movw	r30, r24
    b820:	82 85       	ldd	r24, Z+10	; 0x0a
    b822:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t checkSum = PID;
    b824:	8d 85       	ldd	r24, Y+13	; 0x0d
    b826:	89 83       	std	Y+1, r24	; 0x01
    uint8_t retVal = 0U;
    b828:	1a 82       	std	Y+2, r1	; 0x02

    if(numOfClassicPID == 255U)
    b82a:	8d 81       	ldd	r24, Y+5	; 0x05
    b82c:	8f 3f       	cpi	r24, 0xFF	; 255
    b82e:	11 f4       	brne	.+4      	; 0xb834 <LIN_COM_DRV_MakeChecksumByte+0x64>
    {
        /*all frame use enhanced checksum */
        checkSum = 0U;
    b830:	19 82       	std	Y+1, r1	; 0x01
    b832:	1b c0       	rjmp	.+54     	; 0xb86a <LIN_COM_DRV_MakeChecksumByte+0x9a>
    }
    else
    {
        if(classicPID != NULL)
    b834:	8b 81       	ldd	r24, Y+3	; 0x03
    b836:	9c 81       	ldd	r25, Y+4	; 0x04
    b838:	89 2b       	or	r24, r25
    b83a:	b9 f0       	breq	.+46     	; 0xb86a <LIN_COM_DRV_MakeChecksumByte+0x9a>
        {
            for (retVal = 0U; retVal < numOfClassicPID; retVal++)
    b83c:	1a 82       	std	Y+2, r1	; 0x02
    b83e:	11 c0       	rjmp	.+34     	; 0xb862 <LIN_COM_DRV_MakeChecksumByte+0x92>
            {
                if(checkSum == classicPID[retVal])
    b840:	8a 81       	ldd	r24, Y+2	; 0x02
    b842:	88 2f       	mov	r24, r24
    b844:	90 e0       	ldi	r25, 0x00	; 0
    b846:	2b 81       	ldd	r18, Y+3	; 0x03
    b848:	3c 81       	ldd	r19, Y+4	; 0x04
    b84a:	82 0f       	add	r24, r18
    b84c:	93 1f       	adc	r25, r19
    b84e:	fc 01       	movw	r30, r24
    b850:	90 81       	ld	r25, Z
    b852:	89 81       	ldd	r24, Y+1	; 0x01
    b854:	98 17       	cp	r25, r24
    b856:	11 f4       	brne	.+4      	; 0xb85c <LIN_COM_DRV_MakeChecksumByte+0x8c>
                {
                    checkSum = 0U;
    b858:	19 82       	std	Y+1, r1	; 0x01
                    break;
    b85a:	07 c0       	rjmp	.+14     	; 0xb86a <LIN_COM_DRV_MakeChecksumByte+0x9a>
    }
    else
    {
        if(classicPID != NULL)
        {
            for (retVal = 0U; retVal < numOfClassicPID; retVal++)
    b85c:	8a 81       	ldd	r24, Y+2	; 0x02
    b85e:	8f 5f       	subi	r24, 0xFF	; 255
    b860:	8a 83       	std	Y+2, r24	; 0x02
    b862:	9a 81       	ldd	r25, Y+2	; 0x02
    b864:	8d 81       	ldd	r24, Y+5	; 0x05
    b866:	98 17       	cp	r25, r24
    b868:	58 f3       	brcs	.-42     	; 0xb840 <LIN_COM_DRV_MakeChecksumByte+0x70>
                    break;
                }
            }
        }
    }
    retVal = LIN_DRV_MakeChecksumByte(buffer, sizeBuffer, checkSum);
    b86a:	8a 85       	ldd	r24, Y+10	; 0x0a
    b86c:	9b 85       	ldd	r25, Y+11	; 0x0b
    b86e:	49 81       	ldd	r20, Y+1	; 0x01
    b870:	6c 85       	ldd	r22, Y+12	; 0x0c
    b872:	0e 94 19 59 	call	0xb232	; 0xb232 <LIN_DRV_MakeChecksumByte>
    b876:	8a 83       	std	Y+2, r24	; 0x02
    return retVal;
    b878:	8a 81       	ldd	r24, Y+2	; 0x02
}
    b87a:	2d 96       	adiw	r28, 0x0d	; 13
    b87c:	cd bf       	out	0x3d, r28	; 61
    b87e:	de bf       	out	0x3e, r29	; 62
    b880:	df 91       	pop	r29
    b882:	cf 91       	pop	r28
    b884:	0f 91       	pop	r16
    b886:	08 95       	ret

0000b888 <LIN_DRV_SendFrameData>:
 * isBusBusy is currently true then the function will return STATUS_BUSY.
 * 非阻塞模式下发送数据,该函数会计算校验字节，并发送帧数据，立即返回
 * Implements    : LIN_LPUART_DRV_SendFrameData_Activity
 * */
status_t LIN_DRV_SendFrameData(uint32_t instance, const uint8_t * txBuff, uint8_t txSize)
{
    b888:	0f 93       	push	r16
    b88a:	cf 93       	push	r28
    b88c:	df 93       	push	r29
    b88e:	cd b7       	in	r28, 0x3d	; 61
    b890:	de b7       	in	r29, 0x3e	; 62
    b892:	2e 97       	sbiw	r28, 0x0e	; 14
    b894:	cd bf       	out	0x3d, r28	; 61
    b896:	de bf       	out	0x3e, r29	; 62
    b898:	68 87       	std	Y+8, r22	; 0x08
    b89a:	79 87       	std	Y+9, r23	; 0x09
    b89c:	8a 87       	std	Y+10, r24	; 0x0a
    b89e:	9b 87       	std	Y+11, r25	; 0x0b
    b8a0:	4c 87       	std	Y+12, r20	; 0x0c
    b8a2:	5d 87       	std	Y+13, r21	; 0x0d
    b8a4:	2e 87       	std	Y+14, r18	; 0x0e
    /* Assert parameters. */
    DEV_ASSERT(txBuff != NULL);
    DEV_ASSERT(instance < LIN_COM_NUM);

    status_t retVal = STATUS_SUCCESS;
    b8a6:	19 82       	std	Y+1, r1	; 0x01
    b8a8:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    b8aa:	88 85       	ldd	r24, Y+8	; 0x08
    b8ac:	99 85       	ldd	r25, Y+9	; 0x09
    b8ae:	88 0f       	add	r24, r24
    b8b0:	99 1f       	adc	r25, r25
    b8b2:	81 5d       	subi	r24, 0xD1	; 209
    b8b4:	99 4b       	sbci	r25, 0xB9	; 185
    b8b6:	fc 01       	movw	r30, r24
    b8b8:	80 81       	ld	r24, Z
    b8ba:	91 81       	ldd	r25, Z+1	; 0x01
    b8bc:	8b 83       	std	Y+3, r24	; 0x03
    b8be:	9c 83       	std	Y+4, r25	; 0x04

    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    b8c0:	88 85       	ldd	r24, Y+8	; 0x08
    b8c2:	99 85       	ldd	r25, Y+9	; 0x09
    b8c4:	88 0f       	add	r24, r24
    b8c6:	99 1f       	adc	r25, r25
    b8c8:	8d 5c       	subi	r24, 0xCD	; 205
    b8ca:	99 4b       	sbci	r25, 0xB9	; 185
    b8cc:	fc 01       	movw	r30, r24
    b8ce:	80 81       	ld	r24, Z
    b8d0:	91 81       	ldd	r25, Z+1	; 0x01
    b8d2:	8d 83       	std	Y+5, r24	; 0x05
    b8d4:	9e 83       	std	Y+6, r25	; 0x06

    /* 判断节点是否处于睡眠状态 */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    b8d6:	8b 81       	ldd	r24, Y+3	; 0x03
    b8d8:	9c 81       	ldd	r25, Y+4	; 0x04
    b8da:	fc 01       	movw	r30, r24
    b8dc:	92 89       	ldd	r25, Z+18	; 0x12
    b8de:	81 e0       	ldi	r24, 0x01	; 1
    b8e0:	91 30       	cpi	r25, 0x01	; 1
    b8e2:	09 f0       	breq	.+2      	; 0xb8e6 <LIN_DRV_SendFrameData+0x5e>
    b8e4:	80 e0       	ldi	r24, 0x00	; 0
    b8e6:	8f 83       	std	Y+7, r24	; 0x07

    /* Check if txSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < txSize) || (0U == txSize) || checkSleepMode)
    b8e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    b8ea:	89 30       	cpi	r24, 0x09	; 9
    b8ec:	30 f4       	brcc	.+12     	; 0xb8fa <LIN_DRV_SendFrameData+0x72>
    b8ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    b8f0:	88 23       	and	r24, r24
    b8f2:	19 f0       	breq	.+6      	; 0xb8fa <LIN_DRV_SendFrameData+0x72>
    b8f4:	8f 81       	ldd	r24, Y+7	; 0x07
    b8f6:	88 23       	and	r24, r24
    b8f8:	29 f0       	breq	.+10     	; 0xb904 <LIN_DRV_SendFrameData+0x7c>
    {
        retVal = STATUS_ERROR;
    b8fa:	81 e0       	ldi	r24, 0x01	; 1
    b8fc:	90 e0       	ldi	r25, 0x00	; 0
    b8fe:	89 83       	std	Y+1, r24	; 0x01
    b900:	9a 83       	std	Y+2, r25	; 0x02
    b902:	51 c0       	rjmp	.+162    	; 0xb9a6 <LIN_DRV_SendFrameData+0x11e>
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    b904:	8b 81       	ldd	r24, Y+3	; 0x03
    b906:	9c 81       	ldd	r25, Y+4	; 0x04
    b908:	fc 01       	movw	r30, r24
    b90a:	82 85       	ldd	r24, Z+10	; 0x0a
    b90c:	88 23       	and	r24, r24
    b90e:	29 f0       	breq	.+10     	; 0xb91a <LIN_DRV_SendFrameData+0x92>
        {
            retVal = STATUS_BUSY;
    b910:	82 e0       	ldi	r24, 0x02	; 2
    b912:	90 e0       	ldi	r25, 0x00	; 0
    b914:	89 83       	std	Y+1, r24	; 0x01
    b916:	9a 83       	std	Y+2, r25	; 0x02
    b918:	46 c0       	rjmp	.+140    	; 0xb9a6 <LIN_DRV_SendFrameData+0x11e>
        }
        else
        {
            /* Make the checksum byte. */           
            linCurrentState->checkSum = LIN_COM_DRV_MakeChecksumByte(instance, txBuff, txSize, linCurrentState->currentPid);
    b91a:	8b 81       	ldd	r24, Y+3	; 0x03
    b91c:	9c 81       	ldd	r25, Y+4	; 0x04
    b91e:	fc 01       	movw	r30, r24
    b920:	20 89       	ldd	r18, Z+16	; 0x10
    b922:	4c 85       	ldd	r20, Y+12	; 0x0c
    b924:	5d 85       	ldd	r21, Y+13	; 0x0d
    b926:	88 85       	ldd	r24, Y+8	; 0x08
    b928:	99 85       	ldd	r25, Y+9	; 0x09
    b92a:	aa 85       	ldd	r26, Y+10	; 0x0a
    b92c:	bb 85       	ldd	r27, Y+11	; 0x0b
    b92e:	02 2f       	mov	r16, r18
    b930:	2e 85       	ldd	r18, Y+14	; 0x0e
    b932:	bc 01       	movw	r22, r24
    b934:	cd 01       	movw	r24, r26
    b936:	0e 94 e8 5b 	call	0xb7d0	; 0xb7d0 <LIN_COM_DRV_MakeChecksumByte>
    b93a:	28 2f       	mov	r18, r24
    b93c:	8b 81       	ldd	r24, Y+3	; 0x03
    b93e:	9c 81       	ldd	r25, Y+4	; 0x04
    b940:	fc 01       	movw	r30, r24
    b942:	27 83       	std	Z+7, r18	; 0x07

            /* Update the LIN state structure. */
            linCurrentState->txBuff = txBuff;
    b944:	8b 81       	ldd	r24, Y+3	; 0x03
    b946:	9c 81       	ldd	r25, Y+4	; 0x04
    b948:	2c 85       	ldd	r18, Y+12	; 0x0c
    b94a:	3d 85       	ldd	r19, Y+13	; 0x0d
    b94c:	fc 01       	movw	r30, r24
    b94e:	20 83       	st	Z, r18
    b950:	31 83       	std	Z+1, r19	; 0x01
            /* Add a place for checksum byte */
            linCurrentState->txSize = (uint8_t)(txSize + 1U);
    b952:	8e 85       	ldd	r24, Y+14	; 0x0e
    b954:	21 e0       	ldi	r18, 0x01	; 1
    b956:	28 0f       	add	r18, r24
    b958:	8b 81       	ldd	r24, Y+3	; 0x03
    b95a:	9c 81       	ldd	r25, Y+4	; 0x04
    b95c:	fc 01       	movw	r30, r24
    b95e:	25 83       	std	Z+5, r18	; 0x05
            linCurrentState->cntByte = 0U;
    b960:	8b 81       	ldd	r24, Y+3	; 0x03
    b962:	9c 81       	ldd	r25, Y+4	; 0x04
    b964:	fc 01       	movw	r30, r24
    b966:	14 82       	std	Z+4, r1	; 0x04
            linCurrentState->currentNodeState = LIN_NODE_STATE_SEND_DATA;
    b968:	8b 81       	ldd	r24, Y+3	; 0x03
    b96a:	9c 81       	ldd	r25, Y+4	; 0x04
    b96c:	29 e0       	ldi	r18, 0x09	; 9
    b96e:	fc 01       	movw	r30, r24
    b970:	22 8b       	std	Z+18, r18	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    b972:	8b 81       	ldd	r24, Y+3	; 0x03
    b974:	9c 81       	ldd	r25, Y+4	; 0x04
    b976:	fc 01       	movw	r30, r24
    b978:	11 8a       	std	Z+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    b97a:	8b 81       	ldd	r24, Y+3	; 0x03
    b97c:	9c 81       	ldd	r25, Y+4	; 0x04
    b97e:	21 e0       	ldi	r18, 0x01	; 1
    b980:	fc 01       	movw	r30, r24
    b982:	22 87       	std	Z+10, r18	; 0x0a
            linCurrentState->isTxBusy = true;
    b984:	8b 81       	ldd	r24, Y+3	; 0x03
    b986:	9c 81       	ldd	r25, Y+4	; 0x04
    b988:	21 e0       	ldi	r18, 0x01	; 1
    b98a:	fc 01       	movw	r30, r24
    b98c:	20 87       	std	Z+8, r18	; 0x08

            /* Set Break char detect length as 10 bits minimum */
            //LPUART_SetBreakCharDetectLength(base, LPUART_BREAK_CHAR_10_BIT_MINIMUM);  

            /* Start sending data */
            linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
    b98e:	8d 81       	ldd	r24, Y+5	; 0x05
    b990:	9e 81       	ldd	r25, Y+6	; 0x06
    b992:	fc 01       	movw	r30, r24
    b994:	22 81       	ldd	r18, Z+2	; 0x02
    b996:	33 81       	ldd	r19, Z+3	; 0x03
    b998:	8b 81       	ldd	r24, Y+3	; 0x03
    b99a:	9c 81       	ldd	r25, Y+4	; 0x04
    b99c:	fc 01       	movw	r30, r24
    b99e:	80 81       	ld	r24, Z
    b9a0:	91 81       	ldd	r25, Z+1	; 0x01
    b9a2:	f9 01       	movw	r30, r18
    b9a4:	09 95       	icall
        }
    }

    return retVal;
    b9a6:	89 81       	ldd	r24, Y+1	; 0x01
    b9a8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    b9aa:	2e 96       	adiw	r28, 0x0e	; 14
    b9ac:	cd bf       	out	0x3d, r28	; 61
    b9ae:	de bf       	out	0x3e, r29	; 62
    b9b0:	df 91       	pop	r29
    b9b2:	cf 91       	pop	r28
    b9b4:	0f 91       	pop	r16
    b9b6:	08 95       	ret

0000b9b8 <LIN_DRV_ProcessSendFrameData>:
 *
 * Implements    : LIN_LPUART_DRV_ProcessSendFrameData_Activity
 *END**************************************************************************/
static void LIN_DRV_ProcessSendFrameData(uint32_t instance,
                                                uint8_t tmpByte)
{
    b9b8:	cf 93       	push	r28
    b9ba:	df 93       	push	r29
    b9bc:	cd b7       	in	r28, 0x3d	; 61
    b9be:	de b7       	in	r29, 0x3e	; 62
    b9c0:	2d 97       	sbiw	r28, 0x0d	; 13
    b9c2:	cd bf       	out	0x3d, r28	; 61
    b9c4:	de bf       	out	0x3e, r29	; 62
    b9c6:	69 87       	std	Y+9, r22	; 0x09
    b9c8:	7a 87       	std	Y+10, r23	; 0x0a
    b9ca:	8b 87       	std	Y+11, r24	; 0x0b
    b9cc:	9c 87       	std	Y+12, r25	; 0x0c
    b9ce:	4d 87       	std	Y+13, r20	; 0x0d
    bool sendFlag = true;
    b9d0:	81 e0       	ldi	r24, 0x01	; 1
    b9d2:	89 83       	std	Y+1, r24	; 0x01
    uint8_t tmpSize;
    bool tmpCheckSumAndSize;
    bool tmpBuffAndSize;

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    b9d4:	89 85       	ldd	r24, Y+9	; 0x09
    b9d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    b9d8:	88 0f       	add	r24, r24
    b9da:	99 1f       	adc	r25, r25
    b9dc:	81 5d       	subi	r24, 0xD1	; 209
    b9de:	99 4b       	sbci	r25, 0xB9	; 185
    b9e0:	fc 01       	movw	r30, r24
    b9e2:	80 81       	ld	r24, Z
    b9e4:	91 81       	ldd	r25, Z+1	; 0x01
    b9e6:	8a 83       	std	Y+2, r24	; 0x02
    b9e8:	9b 83       	std	Y+3, r25	; 0x03

    const lin_func_callback_t * linFuncCallback = g_linFuncCallbackPtr[instance];
    b9ea:	89 85       	ldd	r24, Y+9	; 0x09
    b9ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    b9ee:	88 0f       	add	r24, r24
    b9f0:	99 1f       	adc	r25, r25
    b9f2:	8d 5c       	subi	r24, 0xCD	; 205
    b9f4:	99 4b       	sbci	r25, 0xB9	; 185
    b9f6:	fc 01       	movw	r30, r24
    b9f8:	80 81       	ld	r24, Z
    b9fa:	91 81       	ldd	r25, Z+1	; 0x01
    b9fc:	8c 83       	std	Y+4, r24	; 0x04
    b9fe:	9d 83       	std	Y+5, r25	; 0x05

    //     sendFlag = false;
    // }
    // else
    // {
        tmpSize = (uint8_t)(linCurrentState->txSize - linCurrentState->cntByte);
    ba00:	8a 81       	ldd	r24, Y+2	; 0x02
    ba02:	9b 81       	ldd	r25, Y+3	; 0x03
    ba04:	fc 01       	movw	r30, r24
    ba06:	25 81       	ldd	r18, Z+5	; 0x05
    ba08:	8a 81       	ldd	r24, Y+2	; 0x02
    ba0a:	9b 81       	ldd	r25, Y+3	; 0x03
    ba0c:	fc 01       	movw	r30, r24
    ba0e:	84 81       	ldd	r24, Z+4	; 0x04
    ba10:	f2 2f       	mov	r31, r18
    ba12:	f8 1b       	sub	r31, r24
    ba14:	8f 2f       	mov	r24, r31
    ba16:	8e 83       	std	Y+6, r24	; 0x06
        tmpCheckSumAndSize = (tmpSize == 1U) && (linCurrentState->checkSum != tmpByte);
    ba18:	8e 81       	ldd	r24, Y+6	; 0x06
    ba1a:	81 30       	cpi	r24, 0x01	; 1
    ba1c:	51 f4       	brne	.+20     	; 0xba32 <LIN_DRV_ProcessSendFrameData+0x7a>
    ba1e:	8a 81       	ldd	r24, Y+2	; 0x02
    ba20:	9b 81       	ldd	r25, Y+3	; 0x03
    ba22:	fc 01       	movw	r30, r24
    ba24:	97 81       	ldd	r25, Z+7	; 0x07
    ba26:	8d 85       	ldd	r24, Y+13	; 0x0d
    ba28:	98 17       	cp	r25, r24
    ba2a:	19 f0       	breq	.+6      	; 0xba32 <LIN_DRV_ProcessSendFrameData+0x7a>
    ba2c:	81 e0       	ldi	r24, 0x01	; 1
    ba2e:	90 e0       	ldi	r25, 0x00	; 0
    ba30:	02 c0       	rjmp	.+4      	; 0xba36 <LIN_DRV_ProcessSendFrameData+0x7e>
    ba32:	80 e0       	ldi	r24, 0x00	; 0
    ba34:	90 e0       	ldi	r25, 0x00	; 0
    ba36:	8f 83       	std	Y+7, r24	; 0x07
    ba38:	8f 81       	ldd	r24, Y+7	; 0x07
    ba3a:	81 70       	andi	r24, 0x01	; 1
    ba3c:	8f 83       	std	Y+7, r24	; 0x07
        tmpBuffAndSize = (*linCurrentState->txBuff != tmpByte) && (tmpSize != 1U);
    ba3e:	8a 81       	ldd	r24, Y+2	; 0x02
    ba40:	9b 81       	ldd	r25, Y+3	; 0x03
    ba42:	fc 01       	movw	r30, r24
    ba44:	80 81       	ld	r24, Z
    ba46:	91 81       	ldd	r25, Z+1	; 0x01
    ba48:	fc 01       	movw	r30, r24
    ba4a:	90 81       	ld	r25, Z
    ba4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    ba4e:	98 17       	cp	r25, r24
    ba50:	31 f0       	breq	.+12     	; 0xba5e <LIN_DRV_ProcessSendFrameData+0xa6>
    ba52:	8e 81       	ldd	r24, Y+6	; 0x06
    ba54:	81 30       	cpi	r24, 0x01	; 1
    ba56:	19 f0       	breq	.+6      	; 0xba5e <LIN_DRV_ProcessSendFrameData+0xa6>
    ba58:	81 e0       	ldi	r24, 0x01	; 1
    ba5a:	90 e0       	ldi	r25, 0x00	; 0
    ba5c:	02 c0       	rjmp	.+4      	; 0xba62 <LIN_DRV_ProcessSendFrameData+0xaa>
    ba5e:	80 e0       	ldi	r24, 0x00	; 0
    ba60:	90 e0       	ldi	r25, 0x00	; 0
    ba62:	88 87       	std	Y+8, r24	; 0x08
    ba64:	88 85       	ldd	r24, Y+8	; 0x08
    ba66:	81 70       	andi	r24, 0x01	; 1
    ba68:	88 87       	std	Y+8, r24	; 0x08
        if (tmpBuffAndSize || tmpCheckSumAndSize)
    ba6a:	88 85       	ldd	r24, Y+8	; 0x08
    ba6c:	88 23       	and	r24, r24
    ba6e:	19 f4       	brne	.+6      	; 0xba76 <LIN_DRV_ProcessSendFrameData+0xbe>
    ba70:	8f 81       	ldd	r24, Y+7	; 0x07
    ba72:	88 23       	and	r24, r24
    ba74:	99 f0       	breq	.+38     	; 0xba9c <LIN_DRV_ProcessSendFrameData+0xe4>
        {
            linCurrentState->currentEventId = LIN_READBACK_ERROR;
    ba76:	8a 81       	ldd	r24, Y+2	; 0x02
    ba78:	9b 81       	ldd	r25, Y+3	; 0x03
    ba7a:	29 e0       	ldi	r18, 0x09	; 9
    ba7c:	fc 01       	movw	r30, r24
    ba7e:	21 8b       	std	Z+17, r18	; 0x11
            {
                //linCurrentState->Callback(instance, linCurrentState);
            }

            /* Check if the transmission is non-blocking */
            if (linCurrentState->isTxBlocking == false)
    ba80:	8a 81       	ldd	r24, Y+2	; 0x02
    ba82:	9b 81       	ldd	r25, Y+3	; 0x03
    ba84:	fc 01       	movw	r30, r24
    ba86:	93 85       	ldd	r25, Z+11	; 0x0b
    ba88:	81 e0       	ldi	r24, 0x01	; 1
    ba8a:	89 27       	eor	r24, r25
    ba8c:	88 23       	and	r24, r24
    ba8e:	21 f0       	breq	.+8      	; 0xba98 <LIN_DRV_ProcessSendFrameData+0xe0>
            {
                /* Clear Tx busy flag */
                linCurrentState->isTxBusy = false;
    ba90:	8a 81       	ldd	r24, Y+2	; 0x02
    ba92:	9b 81       	ldd	r25, Y+3	; 0x03
    ba94:	fc 01       	movw	r30, r24
    ba96:	10 86       	std	Z+8, r1	; 0x08

                /* Change node's current state to IDLE */
                //(void)LIN_LPUART_DRV_GotoIdleState(instance);
            }

            sendFlag = false;
    ba98:	19 82       	std	Y+1, r1	; 0x01
    ba9a:	17 c0       	rjmp	.+46     	; 0xbaca <LIN_DRV_ProcessSendFrameData+0x112>
        }
        else
        {
            linCurrentState->txBuff++;
    ba9c:	8a 81       	ldd	r24, Y+2	; 0x02
    ba9e:	9b 81       	ldd	r25, Y+3	; 0x03
    baa0:	fc 01       	movw	r30, r24
    baa2:	80 81       	ld	r24, Z
    baa4:	91 81       	ldd	r25, Z+1	; 0x01
    baa6:	9c 01       	movw	r18, r24
    baa8:	2f 5f       	subi	r18, 0xFF	; 255
    baaa:	3f 4f       	sbci	r19, 0xFF	; 255
    baac:	8a 81       	ldd	r24, Y+2	; 0x02
    baae:	9b 81       	ldd	r25, Y+3	; 0x03
    bab0:	fc 01       	movw	r30, r24
    bab2:	20 83       	st	Z, r18
    bab4:	31 83       	std	Z+1, r19	; 0x01
            linCurrentState->cntByte++;
    bab6:	8a 81       	ldd	r24, Y+2	; 0x02
    bab8:	9b 81       	ldd	r25, Y+3	; 0x03
    baba:	fc 01       	movw	r30, r24
    babc:	84 81       	ldd	r24, Z+4	; 0x04
    babe:	21 e0       	ldi	r18, 0x01	; 1
    bac0:	28 0f       	add	r18, r24
    bac2:	8a 81       	ldd	r24, Y+2	; 0x02
    bac4:	9b 81       	ldd	r25, Y+3	; 0x03
    bac6:	fc 01       	movw	r30, r24
    bac8:	24 83       	std	Z+4, r18	; 0x04
        }
    // }

    if (sendFlag)
    baca:	89 81       	ldd	r24, Y+1	; 0x01
    bacc:	88 23       	and	r24, r24
    bace:	09 f4       	brne	.+2      	; 0xbad2 <LIN_DRV_ProcessSendFrameData+0x11a>
    bad0:	6f c0       	rjmp	.+222    	; 0xbbb0 <LIN_DRV_ProcessSendFrameData+0x1f8>
    {
        if (linCurrentState->cntByte < linCurrentState->txSize)
    bad2:	8a 81       	ldd	r24, Y+2	; 0x02
    bad4:	9b 81       	ldd	r25, Y+3	; 0x03
    bad6:	fc 01       	movw	r30, r24
    bad8:	24 81       	ldd	r18, Z+4	; 0x04
    bada:	8a 81       	ldd	r24, Y+2	; 0x02
    badc:	9b 81       	ldd	r25, Y+3	; 0x03
    bade:	fc 01       	movw	r30, r24
    bae0:	85 81       	ldd	r24, Z+5	; 0x05
    bae2:	28 17       	cp	r18, r24
    bae4:	50 f5       	brcc	.+84     	; 0xbb3a <LIN_DRV_ProcessSendFrameData+0x182>
        {
            /* Send checksum byte */
            if ((linCurrentState->txSize - linCurrentState->cntByte) == 1U)
    bae6:	8a 81       	ldd	r24, Y+2	; 0x02
    bae8:	9b 81       	ldd	r25, Y+3	; 0x03
    baea:	fc 01       	movw	r30, r24
    baec:	85 81       	ldd	r24, Z+5	; 0x05
    baee:	28 2f       	mov	r18, r24
    baf0:	30 e0       	ldi	r19, 0x00	; 0
    baf2:	8a 81       	ldd	r24, Y+2	; 0x02
    baf4:	9b 81       	ldd	r25, Y+3	; 0x03
    baf6:	fc 01       	movw	r30, r24
    baf8:	84 81       	ldd	r24, Z+4	; 0x04
    bafa:	88 2f       	mov	r24, r24
    bafc:	90 e0       	ldi	r25, 0x00	; 0
    bafe:	a9 01       	movw	r20, r18
    bb00:	48 1b       	sub	r20, r24
    bb02:	59 0b       	sbc	r21, r25
    bb04:	ca 01       	movw	r24, r20
    bb06:	01 97       	sbiw	r24, 0x01	; 1
    bb08:	59 f4       	brne	.+22     	; 0xbb20 <LIN_DRV_ProcessSendFrameData+0x168>
            {
                linFuncCallback->SendByte(&linCurrentState->checkSum);
    bb0a:	8c 81       	ldd	r24, Y+4	; 0x04
    bb0c:	9d 81       	ldd	r25, Y+5	; 0x05
    bb0e:	fc 01       	movw	r30, r24
    bb10:	22 81       	ldd	r18, Z+2	; 0x02
    bb12:	33 81       	ldd	r19, Z+3	; 0x03
    bb14:	8a 81       	ldd	r24, Y+2	; 0x02
    bb16:	9b 81       	ldd	r25, Y+3	; 0x03
    bb18:	07 96       	adiw	r24, 0x07	; 7
    bb1a:	f9 01       	movw	r30, r18
    bb1c:	09 95       	icall
                //(void)OSIF_SemaPost(&linCurrentState->txCompleted);
            }
            ep40_lin_signal_update_while_task();
        }
    }
}
    bb1e:	48 c0       	rjmp	.+144    	; 0xbbb0 <LIN_DRV_ProcessSendFrameData+0x1f8>
                //LPUART_Putchar(base, linCurrentState->checkSum);
            }
            /* Send data bytes */
            else
            {
                linFuncCallback->SendByte((uint8_t *)linCurrentState->txBuff);
    bb20:	8c 81       	ldd	r24, Y+4	; 0x04
    bb22:	9d 81       	ldd	r25, Y+5	; 0x05
    bb24:	fc 01       	movw	r30, r24
    bb26:	22 81       	ldd	r18, Z+2	; 0x02
    bb28:	33 81       	ldd	r19, Z+3	; 0x03
    bb2a:	8a 81       	ldd	r24, Y+2	; 0x02
    bb2c:	9b 81       	ldd	r25, Y+3	; 0x03
    bb2e:	fc 01       	movw	r30, r24
    bb30:	80 81       	ld	r24, Z
    bb32:	91 81       	ldd	r25, Z+1	; 0x01
    bb34:	f9 01       	movw	r30, r18
    bb36:	09 95       	icall
                //(void)OSIF_SemaPost(&linCurrentState->txCompleted);
            }
            ep40_lin_signal_update_while_task();
        }
    }
}
    bb38:	3b c0       	rjmp	.+118    	; 0xbbb0 <LIN_DRV_ProcessSendFrameData+0x1f8>
                //LPUART_Putchar(base, *linCurrentState->txBuff);
            }
        }
        else //发送完成
        {
            linCurrentState->currentEventId = LIN_TX_COMPLETED;
    bb3a:	8a 81       	ldd	r24, Y+2	; 0x02
    bb3c:	9b 81       	ldd	r25, Y+3	; 0x03
    bb3e:	2b e0       	ldi	r18, 0x0B	; 11
    bb40:	fc 01       	movw	r30, r24
    bb42:	21 8b       	std	Z+17, r18	; 0x11
            linCurrentState->currentNodeState = LIN_NODE_STATE_SEND_DATA_COMPLETED;
    bb44:	8a 81       	ldd	r24, Y+2	; 0x02
    bb46:	9b 81       	ldd	r25, Y+3	; 0x03
    bb48:	2a e0       	ldi	r18, 0x0A	; 10
    bb4a:	fc 01       	movw	r30, r24
    bb4c:	22 8b       	std	Z+18, r18	; 0x12

            //LPUART_SetIntMode(base, LPUART_INT_RX_DATA_REG_FULL, false);
            /* callback function to handle event TX COMPLETED */
            if (linCurrentState->Callback != NULL)
    bb4e:	8a 81       	ldd	r24, Y+2	; 0x02
    bb50:	9b 81       	ldd	r25, Y+3	; 0x03
    bb52:	fc 01       	movw	r30, r24
    bb54:	85 85       	ldd	r24, Z+13	; 0x0d
    bb56:	96 85       	ldd	r25, Z+14	; 0x0e
    bb58:	89 2b       	or	r24, r25
    bb5a:	79 f0       	breq	.+30     	; 0xbb7a <LIN_DRV_ProcessSendFrameData+0x1c2>
            {
                linCurrentState->Callback(instance, linCurrentState);
    bb5c:	8a 81       	ldd	r24, Y+2	; 0x02
    bb5e:	9b 81       	ldd	r25, Y+3	; 0x03
    bb60:	fc 01       	movw	r30, r24
    bb62:	25 85       	ldd	r18, Z+13	; 0x0d
    bb64:	36 85       	ldd	r19, Z+14	; 0x0e
    bb66:	4a 81       	ldd	r20, Y+2	; 0x02
    bb68:	5b 81       	ldd	r21, Y+3	; 0x03
    bb6a:	89 85       	ldd	r24, Y+9	; 0x09
    bb6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb6e:	ab 85       	ldd	r26, Y+11	; 0x0b
    bb70:	bc 85       	ldd	r27, Y+12	; 0x0c
    bb72:	bc 01       	movw	r22, r24
    bb74:	cd 01       	movw	r24, r26
    bb76:	f9 01       	movw	r30, r18
    bb78:	09 95       	icall
            }

            /* Check if the transmission is non-blocking */
            if (linCurrentState->isTxBlocking == false)
    bb7a:	8a 81       	ldd	r24, Y+2	; 0x02
    bb7c:	9b 81       	ldd	r25, Y+3	; 0x03
    bb7e:	fc 01       	movw	r30, r24
    bb80:	93 85       	ldd	r25, Z+11	; 0x0b
    bb82:	81 e0       	ldi	r24, 0x01	; 1
    bb84:	89 27       	eor	r24, r25
    bb86:	88 23       	and	r24, r24
    bb88:	89 f0       	breq	.+34     	; 0xbbac <LIN_DRV_ProcessSendFrameData+0x1f4>
            {
                /* Clear Tx busy flag */
                linCurrentState->isTxBusy = false;
    bb8a:	8a 81       	ldd	r24, Y+2	; 0x02
    bb8c:	9b 81       	ldd	r25, Y+3	; 0x03
    bb8e:	fc 01       	movw	r30, r24
    bb90:	10 86       	std	Z+8, r1	; 0x08

                /* Change node's current state to IDLE 更改节点状态为空闲状态*/
                linCurrentState->currentEventId = LIN_NO_EVENT;
    bb92:	8a 81       	ldd	r24, Y+2	; 0x02
    bb94:	9b 81       	ldd	r25, Y+3	; 0x03
    bb96:	fc 01       	movw	r30, r24
    bb98:	11 8a       	std	Z+17, r1	; 0x11
                linCurrentState->currentNodeState = LIN_NODE_STATE_IDLE;
    bb9a:	8a 81       	ldd	r24, Y+2	; 0x02
    bb9c:	9b 81       	ldd	r25, Y+3	; 0x03
    bb9e:	22 e0       	ldi	r18, 0x02	; 2
    bba0:	fc 01       	movw	r30, r24
    bba2:	22 8b       	std	Z+18, r18	; 0x12
                linCurrentState->isBusBusy = false;
    bba4:	8a 81       	ldd	r24, Y+2	; 0x02
    bba6:	9b 81       	ldd	r25, Y+3	; 0x03
    bba8:	fc 01       	movw	r30, r24
    bbaa:	12 86       	std	Z+10, r1	; 0x0a
            {
                //阻塞模式下处理
                /* Post Semaphore to signal Tx Completed*/
                //(void)OSIF_SemaPost(&linCurrentState->txCompleted);
            }
            ep40_lin_signal_update_while_task();
    bbac:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <ep40_lin_signal_update_while_task>
        }
    }
}
    bbb0:	00 00       	nop
    bbb2:	2d 96       	adiw	r28, 0x0d	; 13
    bbb4:	cd bf       	out	0x3d, r28	; 61
    bbb6:	de bf       	out	0x3e, r29	; 62
    bbb8:	df 91       	pop	r29
    bbba:	cf 91       	pop	r28
    bbbc:	08 95       	ret

0000bbbe <LIN_DRV_ReceiveFrameData>:
 * isBusBusy is false, if not it will return STATUS_BUSY.
 *
 * Implements    : LIN_LPUART_DRV_RecvFrmData_Activity
 *END**************************************************************************/
status_t LIN_DRV_ReceiveFrameData(uint32_t instance, uint8_t * rxBuff, uint8_t rxSize)
{
    bbbe:	cf 93       	push	r28
    bbc0:	df 93       	push	r29
    bbc2:	cd b7       	in	r28, 0x3d	; 61
    bbc4:	de b7       	in	r29, 0x3e	; 62
    bbc6:	2c 97       	sbiw	r28, 0x0c	; 12
    bbc8:	cd bf       	out	0x3d, r28	; 61
    bbca:	de bf       	out	0x3e, r29	; 62
    bbcc:	6e 83       	std	Y+6, r22	; 0x06
    bbce:	7f 83       	std	Y+7, r23	; 0x07
    bbd0:	88 87       	std	Y+8, r24	; 0x08
    bbd2:	99 87       	std	Y+9, r25	; 0x09
    bbd4:	4a 87       	std	Y+10, r20	; 0x0a
    bbd6:	5b 87       	std	Y+11, r21	; 0x0b
    bbd8:	2c 87       	std	Y+12, r18	; 0x0c
    /* Assert parameters. */
    DEV_ASSERT(rxBuff != NULL);
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    bbda:	19 82       	std	Y+1, r1	; 0x01
    bbdc:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bbde:	8e 81       	ldd	r24, Y+6	; 0x06
    bbe0:	9f 81       	ldd	r25, Y+7	; 0x07
    bbe2:	88 0f       	add	r24, r24
    bbe4:	99 1f       	adc	r25, r25
    bbe6:	81 5d       	subi	r24, 0xD1	; 209
    bbe8:	99 4b       	sbci	r25, 0xB9	; 185
    bbea:	fc 01       	movw	r30, r24
    bbec:	80 81       	ld	r24, Z
    bbee:	91 81       	ldd	r25, Z+1	; 0x01
    bbf0:	8b 83       	std	Y+3, r24	; 0x03
    bbf2:	9c 83       	std	Y+4, r25	; 0x04

    /* Check whether current mode is sleep mode */
    bool checkSleepMode = (LIN_NODE_STATE_SLEEP_MODE == linCurrentState->currentNodeState);
    bbf4:	8b 81       	ldd	r24, Y+3	; 0x03
    bbf6:	9c 81       	ldd	r25, Y+4	; 0x04
    bbf8:	fc 01       	movw	r30, r24
    bbfa:	92 89       	ldd	r25, Z+18	; 0x12
    bbfc:	81 e0       	ldi	r24, 0x01	; 1
    bbfe:	91 30       	cpi	r25, 0x01	; 1
    bc00:	09 f0       	breq	.+2      	; 0xbc04 <LIN_DRV_ReceiveFrameData+0x46>
    bc02:	80 e0       	ldi	r24, 0x00	; 0
    bc04:	8d 83       	std	Y+5, r24	; 0x05

    /* Check if rxSize > 8 or equal to 0 or node's current state
     * is in SLEEP mode then return STATUS_ERROR */
    if ((8U < rxSize) || (0U == rxSize) || checkSleepMode)
    bc06:	8c 85       	ldd	r24, Y+12	; 0x0c
    bc08:	89 30       	cpi	r24, 0x09	; 9
    bc0a:	30 f4       	brcc	.+12     	; 0xbc18 <LIN_DRV_ReceiveFrameData+0x5a>
    bc0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    bc0e:	88 23       	and	r24, r24
    bc10:	19 f0       	breq	.+6      	; 0xbc18 <LIN_DRV_ReceiveFrameData+0x5a>
    bc12:	8d 81       	ldd	r24, Y+5	; 0x05
    bc14:	88 23       	and	r24, r24
    bc16:	29 f0       	breq	.+10     	; 0xbc22 <LIN_DRV_ReceiveFrameData+0x64>
    {
        retVal = STATUS_ERROR;
    bc18:	81 e0       	ldi	r24, 0x01	; 1
    bc1a:	90 e0       	ldi	r25, 0x00	; 0
    bc1c:	89 83       	std	Y+1, r24	; 0x01
    bc1e:	9a 83       	std	Y+2, r25	; 0x02
    bc20:	34 c0       	rjmp	.+104    	; 0xbc8a <LIN_DRV_ReceiveFrameData+0xcc>
    }
    else
    {
        /* Check if the LIN Bus is busy */
        if (linCurrentState->isBusBusy)
    bc22:	8b 81       	ldd	r24, Y+3	; 0x03
    bc24:	9c 81       	ldd	r25, Y+4	; 0x04
    bc26:	fc 01       	movw	r30, r24
    bc28:	82 85       	ldd	r24, Z+10	; 0x0a
    bc2a:	88 23       	and	r24, r24
    bc2c:	29 f0       	breq	.+10     	; 0xbc38 <LIN_DRV_ReceiveFrameData+0x7a>
        {
            retVal = STATUS_BUSY;
    bc2e:	82 e0       	ldi	r24, 0x02	; 2
    bc30:	90 e0       	ldi	r25, 0x00	; 0
    bc32:	89 83       	std	Y+1, r24	; 0x01
    bc34:	9a 83       	std	Y+2, r25	; 0x02
    bc36:	29 c0       	rjmp	.+82     	; 0xbc8a <LIN_DRV_ReceiveFrameData+0xcc>
        }
        else
        {
            /* Update the LIN state structure. */
            linCurrentState->rxBuff = rxBuff;
    bc38:	8b 81       	ldd	r24, Y+3	; 0x03
    bc3a:	9c 81       	ldd	r25, Y+4	; 0x04
    bc3c:	2a 85       	ldd	r18, Y+10	; 0x0a
    bc3e:	3b 85       	ldd	r19, Y+11	; 0x0b
    bc40:	fc 01       	movw	r30, r24
    bc42:	22 83       	std	Z+2, r18	; 0x02
    bc44:	33 83       	std	Z+3, r19	; 0x03
            /* Add a place for checksum byte */
            linCurrentState->rxSize = (uint8_t)(rxSize + 1U);
    bc46:	8c 85       	ldd	r24, Y+12	; 0x0c
    bc48:	21 e0       	ldi	r18, 0x01	; 1
    bc4a:	28 0f       	add	r18, r24
    bc4c:	8b 81       	ldd	r24, Y+3	; 0x03
    bc4e:	9c 81       	ldd	r25, Y+4	; 0x04
    bc50:	fc 01       	movw	r30, r24
    bc52:	26 83       	std	Z+6, r18	; 0x06
            linCurrentState->cntByte = 0U;
    bc54:	8b 81       	ldd	r24, Y+3	; 0x03
    bc56:	9c 81       	ldd	r25, Y+4	; 0x04
    bc58:	fc 01       	movw	r30, r24
    bc5a:	14 82       	std	Z+4, r1	; 0x04

            /* Start receiving data */
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA;
    bc5c:	8b 81       	ldd	r24, Y+3	; 0x03
    bc5e:	9c 81       	ldd	r25, Y+4	; 0x04
    bc60:	27 e0       	ldi	r18, 0x07	; 7
    bc62:	fc 01       	movw	r30, r24
    bc64:	22 8b       	std	Z+18, r18	; 0x12
            linCurrentState->currentEventId = LIN_NO_EVENT;
    bc66:	8b 81       	ldd	r24, Y+3	; 0x03
    bc68:	9c 81       	ldd	r25, Y+4	; 0x04
    bc6a:	fc 01       	movw	r30, r24
    bc6c:	11 8a       	std	Z+17, r1	; 0x11
            linCurrentState->isBusBusy = true;
    bc6e:	8b 81       	ldd	r24, Y+3	; 0x03
    bc70:	9c 81       	ldd	r25, Y+4	; 0x04
    bc72:	21 e0       	ldi	r18, 0x01	; 1
    bc74:	fc 01       	movw	r30, r24
    bc76:	22 87       	std	Z+10, r18	; 0x0a
            linCurrentState->isRxBusy = true;
    bc78:	8b 81       	ldd	r24, Y+3	; 0x03
    bc7a:	9c 81       	ldd	r25, Y+4	; 0x04
    bc7c:	21 e0       	ldi	r18, 0x01	; 1
    bc7e:	fc 01       	movw	r30, r24
    bc80:	21 87       	std	Z+9, r18	; 0x09
            linCurrentState->isRxBlocking = false;
    bc82:	8b 81       	ldd	r24, Y+3	; 0x03
    bc84:	9c 81       	ldd	r25, Y+4	; 0x04
    bc86:	fc 01       	movw	r30, r24
    bc88:	14 86       	std	Z+12, r1	; 0x0c
        }
    }

    return retVal;
    bc8a:	89 81       	ldd	r24, Y+1	; 0x01
    bc8c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bc8e:	2c 96       	adiw	r28, 0x0c	; 12
    bc90:	cd bf       	out	0x3d, r28	; 61
    bc92:	de bf       	out	0x3e, r29	; 62
    bc94:	df 91       	pop	r29
    bc96:	cf 91       	pop	r28
    bc98:	08 95       	ret

0000bc9a <LIN_DRV_ProcessReceiveFrameData>:
 * Description   : Part of Interrupt handler for receiving.
 *
 * Implements    : LIN_DRV_ProcessReceiveFrameData_Activity
 *END**************************************************************************/
static void LIN_DRV_ProcessReceiveFrameData(uint32_t instance, uint8_t tmpByte)
{
    bc9a:	0f 93       	push	r16
    bc9c:	cf 93       	push	r28
    bc9e:	df 93       	push	r29
    bca0:	cd b7       	in	r28, 0x3d	; 61
    bca2:	de b7       	in	r29, 0x3e	; 62
    bca4:	27 97       	sbiw	r28, 0x07	; 7
    bca6:	cd bf       	out	0x3d, r28	; 61
    bca8:	de bf       	out	0x3e, r29	; 62
    bcaa:	6b 83       	std	Y+3, r22	; 0x03
    bcac:	7c 83       	std	Y+4, r23	; 0x04
    bcae:	8d 83       	std	Y+5, r24	; 0x05
    bcb0:	9e 83       	std	Y+6, r25	; 0x06
    bcb2:	4f 83       	std	Y+7, r20	; 0x07
    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bcb4:	8b 81       	ldd	r24, Y+3	; 0x03
    bcb6:	9c 81       	ldd	r25, Y+4	; 0x04
    bcb8:	88 0f       	add	r24, r24
    bcba:	99 1f       	adc	r25, r25
    bcbc:	81 5d       	subi	r24, 0xD1	; 209
    bcbe:	99 4b       	sbci	r25, 0xB9	; 185
    bcc0:	fc 01       	movw	r30, r24
    bcc2:	80 81       	ld	r24, Z
    bcc4:	91 81       	ldd	r25, Z+1	; 0x01
    bcc6:	89 83       	std	Y+1, r24	; 0x01
    bcc8:	9a 83       	std	Y+2, r25	; 0x02

    if (linCurrentState->rxSize > (linCurrentState->cntByte + 1U))
    bcca:	89 81       	ldd	r24, Y+1	; 0x01
    bccc:	9a 81       	ldd	r25, Y+2	; 0x02
    bcce:	fc 01       	movw	r30, r24
    bcd0:	86 81       	ldd	r24, Z+6	; 0x06
    bcd2:	28 2f       	mov	r18, r24
    bcd4:	30 e0       	ldi	r19, 0x00	; 0
    bcd6:	89 81       	ldd	r24, Y+1	; 0x01
    bcd8:	9a 81       	ldd	r25, Y+2	; 0x02
    bcda:	fc 01       	movw	r30, r24
    bcdc:	84 81       	ldd	r24, Z+4	; 0x04
    bcde:	88 2f       	mov	r24, r24
    bce0:	90 e0       	ldi	r25, 0x00	; 0
    bce2:	01 96       	adiw	r24, 0x01	; 1
    bce4:	82 17       	cp	r24, r18
    bce6:	93 07       	cpc	r25, r19
    bce8:	b0 f4       	brcc	.+44     	; 0xbd16 <LIN_DRV_ProcessReceiveFrameData+0x7c>
    {
        *(linCurrentState->rxBuff) = tmpByte;
    bcea:	89 81       	ldd	r24, Y+1	; 0x01
    bcec:	9a 81       	ldd	r25, Y+2	; 0x02
    bcee:	fc 01       	movw	r30, r24
    bcf0:	82 81       	ldd	r24, Z+2	; 0x02
    bcf2:	93 81       	ldd	r25, Z+3	; 0x03
    bcf4:	2f 81       	ldd	r18, Y+7	; 0x07
    bcf6:	fc 01       	movw	r30, r24
    bcf8:	20 83       	st	Z, r18
        linCurrentState->rxBuff++;
    bcfa:	89 81       	ldd	r24, Y+1	; 0x01
    bcfc:	9a 81       	ldd	r25, Y+2	; 0x02
    bcfe:	fc 01       	movw	r30, r24
    bd00:	82 81       	ldd	r24, Z+2	; 0x02
    bd02:	93 81       	ldd	r25, Z+3	; 0x03
    bd04:	9c 01       	movw	r18, r24
    bd06:	2f 5f       	subi	r18, 0xFF	; 255
    bd08:	3f 4f       	sbci	r19, 0xFF	; 255
    bd0a:	89 81       	ldd	r24, Y+1	; 0x01
    bd0c:	9a 81       	ldd	r25, Y+2	; 0x02
    bd0e:	fc 01       	movw	r30, r24
    bd10:	22 83       	std	Z+2, r18	; 0x02
    bd12:	33 83       	std	Z+3, r19	; 0x03
    bd14:	17 c0       	rjmp	.+46     	; 0xbd44 <LIN_DRV_ProcessReceiveFrameData+0xaa>
    }
    else
    {
        if ((linCurrentState->rxSize - linCurrentState->cntByte) == 1U)
    bd16:	89 81       	ldd	r24, Y+1	; 0x01
    bd18:	9a 81       	ldd	r25, Y+2	; 0x02
    bd1a:	fc 01       	movw	r30, r24
    bd1c:	86 81       	ldd	r24, Z+6	; 0x06
    bd1e:	28 2f       	mov	r18, r24
    bd20:	30 e0       	ldi	r19, 0x00	; 0
    bd22:	89 81       	ldd	r24, Y+1	; 0x01
    bd24:	9a 81       	ldd	r25, Y+2	; 0x02
    bd26:	fc 01       	movw	r30, r24
    bd28:	84 81       	ldd	r24, Z+4	; 0x04
    bd2a:	88 2f       	mov	r24, r24
    bd2c:	90 e0       	ldi	r25, 0x00	; 0
    bd2e:	a9 01       	movw	r20, r18
    bd30:	48 1b       	sub	r20, r24
    bd32:	59 0b       	sbc	r21, r25
    bd34:	ca 01       	movw	r24, r20
    bd36:	01 97       	sbiw	r24, 0x01	; 1
    bd38:	29 f4       	brne	.+10     	; 0xbd44 <LIN_DRV_ProcessReceiveFrameData+0xaa>
        {
            linCurrentState->checkSum = tmpByte;
    bd3a:	89 81       	ldd	r24, Y+1	; 0x01
    bd3c:	9a 81       	ldd	r25, Y+2	; 0x02
    bd3e:	2f 81       	ldd	r18, Y+7	; 0x07
    bd40:	fc 01       	movw	r30, r24
    bd42:	27 83       	std	Z+7, r18	; 0x07
        }
    }

    linCurrentState->cntByte++;
    bd44:	89 81       	ldd	r24, Y+1	; 0x01
    bd46:	9a 81       	ldd	r25, Y+2	; 0x02
    bd48:	fc 01       	movw	r30, r24
    bd4a:	84 81       	ldd	r24, Z+4	; 0x04
    bd4c:	21 e0       	ldi	r18, 0x01	; 1
    bd4e:	28 0f       	add	r18, r24
    bd50:	89 81       	ldd	r24, Y+1	; 0x01
    bd52:	9a 81       	ldd	r25, Y+2	; 0x02
    bd54:	fc 01       	movw	r30, r24
    bd56:	24 83       	std	Z+4, r18	; 0x04
    if (linCurrentState->cntByte == linCurrentState->rxSize)
    bd58:	89 81       	ldd	r24, Y+1	; 0x01
    bd5a:	9a 81       	ldd	r25, Y+2	; 0x02
    bd5c:	fc 01       	movw	r30, r24
    bd5e:	24 81       	ldd	r18, Z+4	; 0x04
    bd60:	89 81       	ldd	r24, Y+1	; 0x01
    bd62:	9a 81       	ldd	r25, Y+2	; 0x02
    bd64:	fc 01       	movw	r30, r24
    bd66:	86 81       	ldd	r24, Z+6	; 0x06
    bd68:	28 17       	cp	r18, r24
    bd6a:	09 f0       	breq	.+2      	; 0xbd6e <LIN_DRV_ProcessReceiveFrameData+0xd4>
    bd6c:	9d c0       	rjmp	.+314    	; 0xbea8 <LIN_DRV_ProcessReceiveFrameData+0x20e>
    {
        /* Restore rxBuffer pointer */
        linCurrentState->rxBuff -= linCurrentState->rxSize - 1U;
    bd6e:	89 81       	ldd	r24, Y+1	; 0x01
    bd70:	9a 81       	ldd	r25, Y+2	; 0x02
    bd72:	fc 01       	movw	r30, r24
    bd74:	86 81       	ldd	r24, Z+6	; 0x06
    bd76:	88 2f       	mov	r24, r24
    bd78:	90 e0       	ldi	r25, 0x00	; 0
    bd7a:	01 97       	sbiw	r24, 0x01	; 1
    bd7c:	29 81       	ldd	r18, Y+1	; 0x01
    bd7e:	3a 81       	ldd	r19, Y+2	; 0x02
    bd80:	f9 01       	movw	r30, r18
    bd82:	22 81       	ldd	r18, Z+2	; 0x02
    bd84:	33 81       	ldd	r19, Z+3	; 0x03
    bd86:	91 95       	neg	r25
    bd88:	81 95       	neg	r24
    bd8a:	91 09       	sbc	r25, r1
    bd8c:	28 0f       	add	r18, r24
    bd8e:	39 1f       	adc	r19, r25
    bd90:	89 81       	ldd	r24, Y+1	; 0x01
    bd92:	9a 81       	ldd	r25, Y+2	; 0x02
    bd94:	fc 01       	movw	r30, r24
    bd96:	22 83       	std	Z+2, r18	; 0x02
    bd98:	33 83       	std	Z+3, r19	; 0x03
        if (LIN_COM_DRV_MakeChecksumByte(instance, linCurrentState->rxBuff, linCurrentState->rxSize - 1U, linCurrentState->currentPid) == linCurrentState->checkSum)
    bd9a:	89 81       	ldd	r24, Y+1	; 0x01
    bd9c:	9a 81       	ldd	r25, Y+2	; 0x02
    bd9e:	fc 01       	movw	r30, r24
    bda0:	30 89       	ldd	r19, Z+16	; 0x10
    bda2:	89 81       	ldd	r24, Y+1	; 0x01
    bda4:	9a 81       	ldd	r25, Y+2	; 0x02
    bda6:	fc 01       	movw	r30, r24
    bda8:	86 81       	ldd	r24, Z+6	; 0x06
    bdaa:	2f ef       	ldi	r18, 0xFF	; 255
    bdac:	28 0f       	add	r18, r24
    bdae:	89 81       	ldd	r24, Y+1	; 0x01
    bdb0:	9a 81       	ldd	r25, Y+2	; 0x02
    bdb2:	fc 01       	movw	r30, r24
    bdb4:	42 81       	ldd	r20, Z+2	; 0x02
    bdb6:	53 81       	ldd	r21, Z+3	; 0x03
    bdb8:	8b 81       	ldd	r24, Y+3	; 0x03
    bdba:	9c 81       	ldd	r25, Y+4	; 0x04
    bdbc:	ad 81       	ldd	r26, Y+5	; 0x05
    bdbe:	be 81       	ldd	r27, Y+6	; 0x06
    bdc0:	03 2f       	mov	r16, r19
    bdc2:	bc 01       	movw	r22, r24
    bdc4:	cd 01       	movw	r24, r26
    bdc6:	0e 94 e8 5b 	call	0xb7d0	; 0xb7d0 <LIN_COM_DRV_MakeChecksumByte>
    bdca:	28 2f       	mov	r18, r24
    bdcc:	89 81       	ldd	r24, Y+1	; 0x01
    bdce:	9a 81       	ldd	r25, Y+2	; 0x02
    bdd0:	fc 01       	movw	r30, r24
    bdd2:	87 81       	ldd	r24, Z+7	; 0x07
    bdd4:	28 17       	cp	r18, r24
    bdd6:	09 f0       	breq	.+2      	; 0xbdda <LIN_DRV_ProcessReceiveFrameData+0x140>
    bdd8:	40 c0       	rjmp	.+128    	; 0xbe5a <LIN_DRV_ProcessReceiveFrameData+0x1c0>
        {
            linCurrentState->currentEventId = LIN_RX_COMPLETED;
    bdda:	89 81       	ldd	r24, Y+1	; 0x01
    bddc:	9a 81       	ldd	r25, Y+2	; 0x02
    bdde:	2c e0       	ldi	r18, 0x0C	; 12
    bde0:	fc 01       	movw	r30, r24
    bde2:	21 8b       	std	Z+17, r18	; 0x11
            linCurrentState->currentNodeState = LIN_NODE_STATE_RECV_DATA_COMPLETED;
    bde4:	89 81       	ldd	r24, Y+1	; 0x01
    bde6:	9a 81       	ldd	r25, Y+2	; 0x02
    bde8:	28 e0       	ldi	r18, 0x08	; 8
    bdea:	fc 01       	movw	r30, r24
    bdec:	22 8b       	std	Z+18, r18	; 0x12

            /* callback function to handle RX COMPLETED */
            if (linCurrentState->Callback != NULL)
    bdee:	89 81       	ldd	r24, Y+1	; 0x01
    bdf0:	9a 81       	ldd	r25, Y+2	; 0x02
    bdf2:	fc 01       	movw	r30, r24
    bdf4:	85 85       	ldd	r24, Z+13	; 0x0d
    bdf6:	96 85       	ldd	r25, Z+14	; 0x0e
    bdf8:	89 2b       	or	r24, r25
    bdfa:	79 f0       	breq	.+30     	; 0xbe1a <LIN_DRV_ProcessReceiveFrameData+0x180>
            {
                linCurrentState->Callback(instance, linCurrentState);
    bdfc:	89 81       	ldd	r24, Y+1	; 0x01
    bdfe:	9a 81       	ldd	r25, Y+2	; 0x02
    be00:	fc 01       	movw	r30, r24
    be02:	25 85       	ldd	r18, Z+13	; 0x0d
    be04:	36 85       	ldd	r19, Z+14	; 0x0e
    be06:	49 81       	ldd	r20, Y+1	; 0x01
    be08:	5a 81       	ldd	r21, Y+2	; 0x02
    be0a:	8b 81       	ldd	r24, Y+3	; 0x03
    be0c:	9c 81       	ldd	r25, Y+4	; 0x04
    be0e:	ad 81       	ldd	r26, Y+5	; 0x05
    be10:	be 81       	ldd	r27, Y+6	; 0x06
    be12:	bc 01       	movw	r22, r24
    be14:	cd 01       	movw	r24, r26
    be16:	f9 01       	movw	r30, r18
    be18:	09 95       	icall
            }

            /* Check if the reception is non-blocking */
            if (linCurrentState->isRxBlocking == false)
    be1a:	89 81       	ldd	r24, Y+1	; 0x01
    be1c:	9a 81       	ldd	r25, Y+2	; 0x02
    be1e:	fc 01       	movw	r30, r24
    be20:	94 85       	ldd	r25, Z+12	; 0x0c
    be22:	81 e0       	ldi	r24, 0x01	; 1
    be24:	89 27       	eor	r24, r25
    be26:	88 23       	and	r24, r24
    be28:	09 f4       	brne	.+2      	; 0xbe2c <LIN_DRV_ProcessReceiveFrameData+0x192>
    be2a:	3e c0       	rjmp	.+124    	; 0xbea8 <LIN_DRV_ProcessReceiveFrameData+0x20e>
            {
                /* Clear Bus busy flag */
                linCurrentState->isBusBusy = false;
    be2c:	89 81       	ldd	r24, Y+1	; 0x01
    be2e:	9a 81       	ldd	r25, Y+2	; 0x02
    be30:	fc 01       	movw	r30, r24
    be32:	12 86       	std	Z+10, r1	; 0x0a

                /* Clear Rx busy flag */
                linCurrentState->isRxBusy = false;
    be34:	89 81       	ldd	r24, Y+1	; 0x01
    be36:	9a 81       	ldd	r25, Y+2	; 0x02
    be38:	fc 01       	movw	r30, r24
    be3a:	11 86       	std	Z+9, r1	; 0x09

                /* In case of receiving a go to sleep request, after callback, node is in SLEEP MODE */
                /* In this case, node is in SLEEP MODE state */
                if (linCurrentState->currentNodeState != LIN_NODE_STATE_SLEEP_MODE)
    be3c:	89 81       	ldd	r24, Y+1	; 0x01
    be3e:	9a 81       	ldd	r25, Y+2	; 0x02
    be40:	fc 01       	movw	r30, r24
    be42:	82 89       	ldd	r24, Z+18	; 0x12
    be44:	81 30       	cpi	r24, 0x01	; 1
    be46:	81 f1       	breq	.+96     	; 0xbea8 <LIN_DRV_ProcessReceiveFrameData+0x20e>
                {
                    (void)LIN_DRV_GotoIdleState(instance);
    be48:	8b 81       	ldd	r24, Y+3	; 0x03
    be4a:	9c 81       	ldd	r25, Y+4	; 0x04
    be4c:	ad 81       	ldd	r26, Y+5	; 0x05
    be4e:	be 81       	ldd	r27, Y+6	; 0x06
    be50:	bc 01       	movw	r22, r24
    be52:	cd 01       	movw	r24, r26
    be54:	0e 94 c4 59 	call	0xb388	; 0xb388 <LIN_DRV_GotoIdleState>

            /* Change node's current state to IDLE */
            (void)LIN_DRV_GotoIdleState(instance);
        }
    }
}
    be58:	27 c0       	rjmp	.+78     	; 0xbea8 <LIN_DRV_ProcessReceiveFrameData+0x20e>
                //(void)OSIF_SemaPost(&linCurrentState->rxCompleted);
            }
        }
        else
        {
            linCurrentState->currentEventId = LIN_CHECKSUM_ERROR;
    be5a:	89 81       	ldd	r24, Y+1	; 0x01
    be5c:	9a 81       	ldd	r25, Y+2	; 0x02
    be5e:	2a e0       	ldi	r18, 0x0A	; 10
    be60:	fc 01       	movw	r30, r24
    be62:	21 8b       	std	Z+17, r18	; 0x11
            /* callback function to handle checksum error */
            if (linCurrentState->Callback != NULL)
    be64:	89 81       	ldd	r24, Y+1	; 0x01
    be66:	9a 81       	ldd	r25, Y+2	; 0x02
    be68:	fc 01       	movw	r30, r24
    be6a:	85 85       	ldd	r24, Z+13	; 0x0d
    be6c:	96 85       	ldd	r25, Z+14	; 0x0e
    be6e:	89 2b       	or	r24, r25
    be70:	79 f0       	breq	.+30     	; 0xbe90 <LIN_DRV_ProcessReceiveFrameData+0x1f6>
            {
                linCurrentState->Callback(instance, linCurrentState);
    be72:	89 81       	ldd	r24, Y+1	; 0x01
    be74:	9a 81       	ldd	r25, Y+2	; 0x02
    be76:	fc 01       	movw	r30, r24
    be78:	25 85       	ldd	r18, Z+13	; 0x0d
    be7a:	36 85       	ldd	r19, Z+14	; 0x0e
    be7c:	49 81       	ldd	r20, Y+1	; 0x01
    be7e:	5a 81       	ldd	r21, Y+2	; 0x02
    be80:	8b 81       	ldd	r24, Y+3	; 0x03
    be82:	9c 81       	ldd	r25, Y+4	; 0x04
    be84:	ad 81       	ldd	r26, Y+5	; 0x05
    be86:	be 81       	ldd	r27, Y+6	; 0x06
    be88:	bc 01       	movw	r22, r24
    be8a:	cd 01       	movw	r24, r26
    be8c:	f9 01       	movw	r30, r18
    be8e:	09 95       	icall
            }

            /* Clear Rx busy flag */
            linCurrentState->isRxBusy = false;
    be90:	89 81       	ldd	r24, Y+1	; 0x01
    be92:	9a 81       	ldd	r25, Y+2	; 0x02
    be94:	fc 01       	movw	r30, r24
    be96:	11 86       	std	Z+9, r1	; 0x09

            /* Change node's current state to IDLE */
            (void)LIN_DRV_GotoIdleState(instance);
    be98:	8b 81       	ldd	r24, Y+3	; 0x03
    be9a:	9c 81       	ldd	r25, Y+4	; 0x04
    be9c:	ad 81       	ldd	r26, Y+5	; 0x05
    be9e:	be 81       	ldd	r27, Y+6	; 0x06
    bea0:	bc 01       	movw	r22, r24
    bea2:	cd 01       	movw	r24, r26
    bea4:	0e 94 c4 59 	call	0xb388	; 0xb388 <LIN_DRV_GotoIdleState>
        }
    }
}
    bea8:	00 00       	nop
    beaa:	27 96       	adiw	r28, 0x07	; 7
    beac:	cd bf       	out	0x3d, r28	; 61
    beae:	de bf       	out	0x3e, r29	; 62
    beb0:	df 91       	pop	r29
    beb2:	cf 91       	pop	r28
    beb4:	0f 91       	pop	r16
    beb6:	08 95       	ret

0000beb8 <LIN_DRV_TimeoutService>:
 * Implements    : LIN_DRV_TimeoutService_Activity
 * 
 * 需要初始化一个定时器,每0.5ms需要回调一次该函数,计数没有实现,AVR单片机容易导致卡死
 *END**************************************************************************/
void LIN_DRV_TimeoutService(uint32_t instance)
{
    beb8:	cf 93       	push	r28
    beba:	df 93       	push	r29
    bebc:	cd b7       	in	r28, 0x3d	; 61
    bebe:	de b7       	in	r29, 0x3e	; 62
    bec0:	27 97       	sbiw	r28, 0x07	; 7
    bec2:	cd bf       	out	0x3d, r28	; 61
    bec4:	de bf       	out	0x3e, r29	; 62
    bec6:	6c 83       	std	Y+4, r22	; 0x04
    bec8:	7d 83       	std	Y+5, r23	; 0x05
    beca:	8e 83       	std	Y+6, r24	; 0x06
    becc:	9f 83       	std	Y+7, r25	; 0x07
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    bece:	8c 81       	ldd	r24, Y+4	; 0x04
    bed0:	9d 81       	ldd	r25, Y+5	; 0x05
    bed2:	88 0f       	add	r24, r24
    bed4:	99 1f       	adc	r25, r25
    bed6:	81 5d       	subi	r24, 0xD1	; 209
    bed8:	99 4b       	sbci	r25, 0xB9	; 185
    beda:	fc 01       	movw	r30, r24
    bedc:	80 81       	ld	r24, Z
    bede:	91 81       	ldd	r25, Z+1	; 0x01
    bee0:	89 83       	std	Y+1, r24	; 0x01
    bee2:	9a 83       	std	Y+2, r25	; 0x02

    /* Get LIN node's current state */
    lin_node_state_t state = linCurrentState->currentNodeState;
    bee4:	89 81       	ldd	r24, Y+1	; 0x01
    bee6:	9a 81       	ldd	r25, Y+2	; 0x02
    bee8:	fc 01       	movw	r30, r24
    beea:	82 89       	ldd	r24, Z+18	; 0x12
    beec:	8b 83       	std	Y+3, r24	; 0x03

    switch (state)
    beee:	8b 81       	ldd	r24, Y+3	; 0x03
    bef0:	88 2f       	mov	r24, r24
    bef2:	90 e0       	ldi	r25, 0x00	; 0
    bef4:	87 30       	cpi	r24, 0x07	; 7
    bef6:	91 05       	cpc	r25, r1
    bef8:	09 f4       	brne	.+2      	; 0xbefc <LIN_DRV_TimeoutService+0x44>
    befa:	51 c0       	rjmp	.+162    	; 0xbf9e <LIN_DRV_TimeoutService+0xe6>
    befc:	09 97       	sbiw	r24, 0x09	; 9
    befe:	09 f0       	breq	.+2      	; 0xbf02 <LIN_DRV_TimeoutService+0x4a>
                linCurrentState->timeoutCounter--;
            }
            break;
        default:
            /* The node state is not SENDING nor RECEIVING data */
            break;
    bf00:	9e c0       	rjmp	.+316    	; 0xc03e <LIN_DRV_TimeoutService+0x186>
    switch (state)
    {
        /* If the node is SENDING DATA */
        case LIN_NODE_STATE_SEND_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    bf02:	89 81       	ldd	r24, Y+1	; 0x01
    bf04:	9a 81       	ldd	r25, Y+2	; 0x02
    bf06:	fc 01       	movw	r30, r24
    bf08:	83 89       	ldd	r24, Z+19	; 0x13
    bf0a:	94 89       	ldd	r25, Z+20	; 0x14
    bf0c:	a5 89       	ldd	r26, Z+21	; 0x15
    bf0e:	b6 89       	ldd	r27, Z+22	; 0x16
    bf10:	89 2b       	or	r24, r25
    bf12:	8a 2b       	or	r24, r26
    bf14:	8b 2b       	or	r24, r27
    bf16:	89 f5       	brne	.+98     	; 0xbf7a <LIN_DRV_TimeoutService+0xc2>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    bf18:	89 81       	ldd	r24, Y+1	; 0x01
    bf1a:	9a 81       	ldd	r25, Y+2	; 0x02
    bf1c:	21 e0       	ldi	r18, 0x01	; 1
    bf1e:	fc 01       	movw	r30, r24
    bf20:	27 8b       	std	Z+23, r18	; 0x17

                if (linCurrentState->isTxBlocking == false)
    bf22:	89 81       	ldd	r24, Y+1	; 0x01
    bf24:	9a 81       	ldd	r25, Y+2	; 0x02
    bf26:	fc 01       	movw	r30, r24
    bf28:	93 85       	ldd	r25, Z+11	; 0x0b
    bf2a:	81 e0       	ldi	r24, 0x01	; 1
    bf2c:	89 27       	eor	r24, r25
    bf2e:	88 23       	and	r24, r24
    bf30:	09 f4       	brne	.+2      	; 0xbf34 <LIN_DRV_TimeoutService+0x7c>
    bf32:	82 c0       	rjmp	.+260    	; 0xc038 <LIN_DRV_TimeoutService+0x180>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    bf34:	89 81       	ldd	r24, Y+1	; 0x01
    bf36:	9a 81       	ldd	r25, Y+2	; 0x02
    bf38:	fc 01       	movw	r30, r24
    bf3a:	85 85       	ldd	r24, Z+13	; 0x0d
    bf3c:	96 85       	ldd	r25, Z+14	; 0x0e
    bf3e:	89 2b       	or	r24, r25
    bf40:	79 f0       	breq	.+30     	; 0xbf60 <LIN_DRV_TimeoutService+0xa8>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    bf42:	89 81       	ldd	r24, Y+1	; 0x01
    bf44:	9a 81       	ldd	r25, Y+2	; 0x02
    bf46:	fc 01       	movw	r30, r24
    bf48:	25 85       	ldd	r18, Z+13	; 0x0d
    bf4a:	36 85       	ldd	r19, Z+14	; 0x0e
    bf4c:	49 81       	ldd	r20, Y+1	; 0x01
    bf4e:	5a 81       	ldd	r21, Y+2	; 0x02
    bf50:	8c 81       	ldd	r24, Y+4	; 0x04
    bf52:	9d 81       	ldd	r25, Y+5	; 0x05
    bf54:	ae 81       	ldd	r26, Y+6	; 0x06
    bf56:	bf 81       	ldd	r27, Y+7	; 0x07
    bf58:	bc 01       	movw	r22, r24
    bf5a:	cd 01       	movw	r24, r26
    bf5c:	f9 01       	movw	r30, r18
    bf5e:	09 95       	icall
                    }

                    /* Clear Tx busy flag */
                    linCurrentState->isTxBusy = false;
    bf60:	89 81       	ldd	r24, Y+1	; 0x01
    bf62:	9a 81       	ldd	r25, Y+2	; 0x02
    bf64:	fc 01       	movw	r30, r24
    bf66:	10 86       	std	Z+8, r1	; 0x08

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    bf68:	8c 81       	ldd	r24, Y+4	; 0x04
    bf6a:	9d 81       	ldd	r25, Y+5	; 0x05
    bf6c:	ae 81       	ldd	r26, Y+6	; 0x06
    bf6e:	bf 81       	ldd	r27, Y+7	; 0x07
    bf70:	bc 01       	movw	r22, r24
    bf72:	cd 01       	movw	r24, r26
    bf74:	0e 94 c4 59 	call	0xb388	; 0xb388 <LIN_DRV_GotoIdleState>
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
            }

            break;
    bf78:	5f c0       	rjmp	.+190    	; 0xc038 <LIN_DRV_TimeoutService+0x180>
                    (void)LIN_DRV_GotoIdleState(instance);
                }
            }
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
    bf7a:	89 81       	ldd	r24, Y+1	; 0x01
    bf7c:	9a 81       	ldd	r25, Y+2	; 0x02
    bf7e:	fc 01       	movw	r30, r24
    bf80:	83 89       	ldd	r24, Z+19	; 0x13
    bf82:	94 89       	ldd	r25, Z+20	; 0x14
    bf84:	a5 89       	ldd	r26, Z+21	; 0x15
    bf86:	b6 89       	ldd	r27, Z+22	; 0x16
    bf88:	01 97       	sbiw	r24, 0x01	; 1
    bf8a:	a1 09       	sbc	r26, r1
    bf8c:	b1 09       	sbc	r27, r1
    bf8e:	29 81       	ldd	r18, Y+1	; 0x01
    bf90:	3a 81       	ldd	r19, Y+2	; 0x02
    bf92:	f9 01       	movw	r30, r18
    bf94:	83 8b       	std	Z+19, r24	; 0x13
    bf96:	94 8b       	std	Z+20, r25	; 0x14
    bf98:	a5 8b       	std	Z+21, r26	; 0x15
    bf9a:	b6 8b       	std	Z+22, r27	; 0x16
            }

            break;
    bf9c:	4d c0       	rjmp	.+154    	; 0xc038 <LIN_DRV_TimeoutService+0x180>
        /* If the node is RECEIVING DATA */
        case LIN_NODE_STATE_RECV_DATA:
            /* Check if timeout Counter is 0 */
            if (linCurrentState->timeoutCounter == 0U)
    bf9e:	89 81       	ldd	r24, Y+1	; 0x01
    bfa0:	9a 81       	ldd	r25, Y+2	; 0x02
    bfa2:	fc 01       	movw	r30, r24
    bfa4:	83 89       	ldd	r24, Z+19	; 0x13
    bfa6:	94 89       	ldd	r25, Z+20	; 0x14
    bfa8:	a5 89       	ldd	r26, Z+21	; 0x15
    bfaa:	b6 89       	ldd	r27, Z+22	; 0x16
    bfac:	89 2b       	or	r24, r25
    bfae:	8a 2b       	or	r24, r26
    bfb0:	8b 2b       	or	r24, r27
    bfb2:	81 f5       	brne	.+96     	; 0xc014 <LIN_DRV_TimeoutService+0x15c>
            {
                /* Set timeout Counter flag */
                linCurrentState->timeoutCounterFlag = true;
    bfb4:	89 81       	ldd	r24, Y+1	; 0x01
    bfb6:	9a 81       	ldd	r25, Y+2	; 0x02
    bfb8:	21 e0       	ldi	r18, 0x01	; 1
    bfba:	fc 01       	movw	r30, r24
    bfbc:	27 8b       	std	Z+23, r18	; 0x17

                /* Check if the reception is non-blocking */
                if (linCurrentState->isRxBlocking == false)
    bfbe:	89 81       	ldd	r24, Y+1	; 0x01
    bfc0:	9a 81       	ldd	r25, Y+2	; 0x02
    bfc2:	fc 01       	movw	r30, r24
    bfc4:	94 85       	ldd	r25, Z+12	; 0x0c
    bfc6:	81 e0       	ldi	r24, 0x01	; 1
    bfc8:	89 27       	eor	r24, r25
    bfca:	88 23       	and	r24, r24
    bfcc:	b9 f1       	breq	.+110    	; 0xc03c <LIN_DRV_TimeoutService+0x184>
                {
                    /* Callback to handle timeout Counter flag */
                    if (linCurrentState->Callback != NULL)
    bfce:	89 81       	ldd	r24, Y+1	; 0x01
    bfd0:	9a 81       	ldd	r25, Y+2	; 0x02
    bfd2:	fc 01       	movw	r30, r24
    bfd4:	85 85       	ldd	r24, Z+13	; 0x0d
    bfd6:	96 85       	ldd	r25, Z+14	; 0x0e
    bfd8:	89 2b       	or	r24, r25
    bfda:	79 f0       	breq	.+30     	; 0xbffa <LIN_DRV_TimeoutService+0x142>
                    {
                        linCurrentState->Callback(instance, linCurrentState);
    bfdc:	89 81       	ldd	r24, Y+1	; 0x01
    bfde:	9a 81       	ldd	r25, Y+2	; 0x02
    bfe0:	fc 01       	movw	r30, r24
    bfe2:	25 85       	ldd	r18, Z+13	; 0x0d
    bfe4:	36 85       	ldd	r19, Z+14	; 0x0e
    bfe6:	49 81       	ldd	r20, Y+1	; 0x01
    bfe8:	5a 81       	ldd	r21, Y+2	; 0x02
    bfea:	8c 81       	ldd	r24, Y+4	; 0x04
    bfec:	9d 81       	ldd	r25, Y+5	; 0x05
    bfee:	ae 81       	ldd	r26, Y+6	; 0x06
    bff0:	bf 81       	ldd	r27, Y+7	; 0x07
    bff2:	bc 01       	movw	r22, r24
    bff4:	cd 01       	movw	r24, r26
    bff6:	f9 01       	movw	r30, r18
    bff8:	09 95       	icall
                    }

                    /* Clear Rx busy flag */
                    linCurrentState->isRxBusy = false;
    bffa:	89 81       	ldd	r24, Y+1	; 0x01
    bffc:	9a 81       	ldd	r25, Y+2	; 0x02
    bffe:	fc 01       	movw	r30, r24
    c000:	11 86       	std	Z+9, r1	; 0x09

                    /* Change the node's current state to IDLE */
                    (void)LIN_DRV_GotoIdleState(instance);
    c002:	8c 81       	ldd	r24, Y+4	; 0x04
    c004:	9d 81       	ldd	r25, Y+5	; 0x05
    c006:	ae 81       	ldd	r26, Y+6	; 0x06
    c008:	bf 81       	ldd	r27, Y+7	; 0x07
    c00a:	bc 01       	movw	r22, r24
    c00c:	cd 01       	movw	r24, r26
    c00e:	0e 94 c4 59 	call	0xb388	; 0xb388 <LIN_DRV_GotoIdleState>
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
            }
            break;
    c012:	14 c0       	rjmp	.+40     	; 0xc03c <LIN_DRV_TimeoutService+0x184>
                }
            }
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
    c014:	89 81       	ldd	r24, Y+1	; 0x01
    c016:	9a 81       	ldd	r25, Y+2	; 0x02
    c018:	fc 01       	movw	r30, r24
    c01a:	83 89       	ldd	r24, Z+19	; 0x13
    c01c:	94 89       	ldd	r25, Z+20	; 0x14
    c01e:	a5 89       	ldd	r26, Z+21	; 0x15
    c020:	b6 89       	ldd	r27, Z+22	; 0x16
    c022:	01 97       	sbiw	r24, 0x01	; 1
    c024:	a1 09       	sbc	r26, r1
    c026:	b1 09       	sbc	r27, r1
    c028:	29 81       	ldd	r18, Y+1	; 0x01
    c02a:	3a 81       	ldd	r19, Y+2	; 0x02
    c02c:	f9 01       	movw	r30, r18
    c02e:	83 8b       	std	Z+19, r24	; 0x13
    c030:	94 8b       	std	Z+20, r25	; 0x14
    c032:	a5 8b       	std	Z+21, r26	; 0x15
    c034:	b6 8b       	std	Z+22, r27	; 0x16
            }
            break;
    c036:	02 c0       	rjmp	.+4      	; 0xc03c <LIN_DRV_TimeoutService+0x184>
            else /* If timeout Counter is not 0, then decrease timeout Counter by one */
            {
                linCurrentState->timeoutCounter--;
            }

            break;
    c038:	00 00       	nop
    c03a:	01 c0       	rjmp	.+2      	; 0xc03e <LIN_DRV_TimeoutService+0x186>
            /* If timeout Counter is not 0, then decrease timeout Counter by one */
            else
            {
                linCurrentState->timeoutCounter--;
            }
            break;
    c03c:	00 00       	nop
        default:
            /* The node state is not SENDING nor RECEIVING data */
            break;
    }
}
    c03e:	00 00       	nop
    c040:	27 96       	adiw	r28, 0x07	; 7
    c042:	cd bf       	out	0x3d, r28	; 61
    c044:	de bf       	out	0x3e, r29	; 62
    c046:	df 91       	pop	r29
    c048:	cf 91       	pop	r28
    c04a:	08 95       	ret

0000c04c <LIN_DRV_SetTimeoutCounter>:
 * LIN_DRV_TimeoutService
 *
 * Implements    : LIN_DRV_SetTimeoutCounter_Activity
 *END**************************************************************************/
void LIN_DRV_SetTimeoutCounter(uint32_t instance, uint32_t timeoutValue)
{
    c04c:	cf 93       	push	r28
    c04e:	df 93       	push	r29
    c050:	cd b7       	in	r28, 0x3d	; 61
    c052:	de b7       	in	r29, 0x3e	; 62
    c054:	2a 97       	sbiw	r28, 0x0a	; 10
    c056:	cd bf       	out	0x3d, r28	; 61
    c058:	de bf       	out	0x3e, r29	; 62
    c05a:	6b 83       	std	Y+3, r22	; 0x03
    c05c:	7c 83       	std	Y+4, r23	; 0x04
    c05e:	8d 83       	std	Y+5, r24	; 0x05
    c060:	9e 83       	std	Y+6, r25	; 0x06
    c062:	2f 83       	std	Y+7, r18	; 0x07
    c064:	38 87       	std	Y+8, r19	; 0x08
    c066:	49 87       	std	Y+9, r20	; 0x09
    c068:	5a 87       	std	Y+10, r21	; 0x0a
    /* Assert parameters. */
    //DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    /* Get the current LIN state of this LPUART instance. */
    lin_state_t * linCurrentState = g_linStatePtr[instance];
    c06a:	8b 81       	ldd	r24, Y+3	; 0x03
    c06c:	9c 81       	ldd	r25, Y+4	; 0x04
    c06e:	88 0f       	add	r24, r24
    c070:	99 1f       	adc	r25, r25
    c072:	81 5d       	subi	r24, 0xD1	; 209
    c074:	99 4b       	sbci	r25, 0xB9	; 185
    c076:	fc 01       	movw	r30, r24
    c078:	80 81       	ld	r24, Z
    c07a:	91 81       	ldd	r25, Z+1	; 0x01
    c07c:	89 83       	std	Y+1, r24	; 0x01
    c07e:	9a 83       	std	Y+2, r25	; 0x02

    /* Clear Timeout Counter Flag */
    linCurrentState->timeoutCounterFlag = false;
    c080:	89 81       	ldd	r24, Y+1	; 0x01
    c082:	9a 81       	ldd	r25, Y+2	; 0x02
    c084:	fc 01       	movw	r30, r24
    c086:	17 8a       	std	Z+23, r1	; 0x17

    /* Set new value for Timeout Counter */
    linCurrentState->timeoutCounter = timeoutValue;
    c088:	29 81       	ldd	r18, Y+1	; 0x01
    c08a:	3a 81       	ldd	r19, Y+2	; 0x02
    c08c:	8f 81       	ldd	r24, Y+7	; 0x07
    c08e:	98 85       	ldd	r25, Y+8	; 0x08
    c090:	a9 85       	ldd	r26, Y+9	; 0x09
    c092:	ba 85       	ldd	r27, Y+10	; 0x0a
    c094:	f9 01       	movw	r30, r18
    c096:	83 8b       	std	Z+19, r24	; 0x13
    c098:	94 8b       	std	Z+20, r25	; 0x14
    c09a:	a5 8b       	std	Z+21, r26	; 0x15
    c09c:	b6 8b       	std	Z+22, r27	; 0x16
}
    c09e:	00 00       	nop
    c0a0:	2a 96       	adiw	r28, 0x0a	; 10
    c0a2:	cd bf       	out	0x3d, r28	; 61
    c0a4:	de bf       	out	0x3e, r29	; 62
    c0a6:	df 91       	pop	r29
    c0a8:	cf 91       	pop	r28
    c0aa:	08 95       	ret

0000c0ac <LIN_DRV_GetReceiveStatus>:
 * obtain the number of words that is still needed to receive.
 *
 * Implements    : LIN_DRV_GetReceiveStatus_Activity
 *END**************************************************************************/
status_t LIN_DRV_GetReceiveStatus(uint32_t instance, uint8_t * bytesRemaining)
{
    c0ac:	cf 93       	push	r28
    c0ae:	df 93       	push	r29
    c0b0:	cd b7       	in	r28, 0x3d	; 61
    c0b2:	de b7       	in	r29, 0x3e	; 62
    c0b4:	2a 97       	sbiw	r28, 0x0a	; 10
    c0b6:	cd bf       	out	0x3d, r28	; 61
    c0b8:	de bf       	out	0x3e, r29	; 62
    c0ba:	6d 83       	std	Y+5, r22	; 0x05
    c0bc:	7e 83       	std	Y+6, r23	; 0x06
    c0be:	8f 83       	std	Y+7, r24	; 0x07
    c0c0:	98 87       	std	Y+8, r25	; 0x08
    c0c2:	49 87       	std	Y+9, r20	; 0x09
    c0c4:	5a 87       	std	Y+10, r21	; 0x0a
    /* Assert parameters. */
    DEV_ASSERT(instance < LPUART_INSTANCE_COUNT);

    status_t retVal = STATUS_SUCCESS;
    c0c6:	19 82       	std	Y+1, r1	; 0x01
    c0c8:	1a 82       	std	Y+2, r1	; 0x02

    /* Get the current LIN state of this LPUART instance. */
    const lin_state_t * linCurrentState = g_linStatePtr[instance];
    c0ca:	8d 81       	ldd	r24, Y+5	; 0x05
    c0cc:	9e 81       	ldd	r25, Y+6	; 0x06
    c0ce:	88 0f       	add	r24, r24
    c0d0:	99 1f       	adc	r25, r25
    c0d2:	81 5d       	subi	r24, 0xD1	; 209
    c0d4:	99 4b       	sbci	r25, 0xB9	; 185
    c0d6:	fc 01       	movw	r30, r24
    c0d8:	80 81       	ld	r24, Z
    c0da:	91 81       	ldd	r25, Z+1	; 0x01
    c0dc:	8b 83       	std	Y+3, r24	; 0x03
    c0de:	9c 83       	std	Y+4, r25	; 0x04

    /* Get the number of bytes that is still needed to receive */
    *bytesRemaining = (uint8_t)(linCurrentState->rxSize - linCurrentState->cntByte);
    c0e0:	8b 81       	ldd	r24, Y+3	; 0x03
    c0e2:	9c 81       	ldd	r25, Y+4	; 0x04
    c0e4:	fc 01       	movw	r30, r24
    c0e6:	26 81       	ldd	r18, Z+6	; 0x06
    c0e8:	8b 81       	ldd	r24, Y+3	; 0x03
    c0ea:	9c 81       	ldd	r25, Y+4	; 0x04
    c0ec:	fc 01       	movw	r30, r24
    c0ee:	84 81       	ldd	r24, Z+4	; 0x04
    c0f0:	28 1b       	sub	r18, r24
    c0f2:	89 85       	ldd	r24, Y+9	; 0x09
    c0f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    c0f6:	fc 01       	movw	r30, r24
    c0f8:	20 83       	st	Z, r18

    /* Return status of the on-going reception */
    if ((linCurrentState->currentEventId == LIN_NO_EVENT) && (*bytesRemaining != 0U))
    c0fa:	8b 81       	ldd	r24, Y+3	; 0x03
    c0fc:	9c 81       	ldd	r25, Y+4	; 0x04
    c0fe:	fc 01       	movw	r30, r24
    c100:	81 89       	ldd	r24, Z+17	; 0x11
    c102:	88 23       	and	r24, r24
    c104:	b9 f4       	brne	.+46     	; 0xc134 <LIN_DRV_GetReceiveStatus+0x88>
    c106:	89 85       	ldd	r24, Y+9	; 0x09
    c108:	9a 85       	ldd	r25, Y+10	; 0x0a
    c10a:	fc 01       	movw	r30, r24
    c10c:	80 81       	ld	r24, Z
    c10e:	88 23       	and	r24, r24
    c110:	89 f0       	breq	.+34     	; 0xc134 <LIN_DRV_GetReceiveStatus+0x88>
    {
        if (linCurrentState->timeoutCounterFlag == false)
    c112:	8b 81       	ldd	r24, Y+3	; 0x03
    c114:	9c 81       	ldd	r25, Y+4	; 0x04
    c116:	fc 01       	movw	r30, r24
    c118:	97 89       	ldd	r25, Z+23	; 0x17
    c11a:	81 e0       	ldi	r24, 0x01	; 1
    c11c:	89 27       	eor	r24, r25
    c11e:	88 23       	and	r24, r24
    c120:	29 f0       	breq	.+10     	; 0xc12c <LIN_DRV_GetReceiveStatus+0x80>
        {
            retVal = STATUS_BUSY;
    c122:	82 e0       	ldi	r24, 0x02	; 2
    c124:	90 e0       	ldi	r25, 0x00	; 0
    c126:	89 83       	std	Y+1, r24	; 0x01
    c128:	9a 83       	std	Y+2, r25	; 0x02
    c12a:	04 c0       	rjmp	.+8      	; 0xc134 <LIN_DRV_GetReceiveStatus+0x88>
        }
        else
        {
            retVal = STATUS_TIMEOUT;
    c12c:	83 e0       	ldi	r24, 0x03	; 3
    c12e:	90 e0       	ldi	r25, 0x00	; 0
    c130:	89 83       	std	Y+1, r24	; 0x01
    c132:	9a 83       	std	Y+2, r25	; 0x02
        }
    }

    return retVal;
    c134:	89 81       	ldd	r24, Y+1	; 0x01
    c136:	9a 81       	ldd	r25, Y+2	; 0x02
    c138:	2a 96       	adiw	r28, 0x0a	; 10
    c13a:	cd bf       	out	0x3d, r28	; 61
    c13c:	de bf       	out	0x3e, r29	; 62
    c13e:	df 91       	pop	r29
    c140:	cf 91       	pop	r28
    c142:	08 95       	ret

0000c144 <PORTA_set_pin_pull_mode>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
    c144:	cf 93       	push	r28
    c146:	df 93       	push	r29
    c148:	00 d0       	rcall	.+0      	; 0xc14a <PORTA_set_pin_pull_mode+0x6>
    c14a:	00 d0       	rcall	.+0      	; 0xc14c <PORTA_set_pin_pull_mode+0x8>
    c14c:	cd b7       	in	r28, 0x3d	; 61
    c14e:	de b7       	in	r29, 0x3e	; 62
    c150:	8b 83       	std	Y+3, r24	; 0x03
    c152:	6c 83       	std	Y+4, r22	; 0x04
    c154:	8b 81       	ldd	r24, Y+3	; 0x03
    c156:	88 2f       	mov	r24, r24
    c158:	90 e0       	ldi	r25, 0x00	; 0
    c15a:	80 5f       	subi	r24, 0xF0	; 240
    c15c:	9b 4f       	sbci	r25, 0xFB	; 251
    c15e:	89 83       	std	Y+1, r24	; 0x01
    c160:	9a 83       	std	Y+2, r25	; 0x02
    c162:	8c 81       	ldd	r24, Y+4	; 0x04
    c164:	81 30       	cpi	r24, 0x01	; 1
    c166:	59 f4       	brne	.+22     	; 0xc17e <PORTA_set_pin_pull_mode+0x3a>
    c168:	89 81       	ldd	r24, Y+1	; 0x01
    c16a:	9a 81       	ldd	r25, Y+2	; 0x02
    c16c:	fc 01       	movw	r30, r24
    c16e:	80 81       	ld	r24, Z
    c170:	28 2f       	mov	r18, r24
    c172:	28 60       	ori	r18, 0x08	; 8
    c174:	89 81       	ldd	r24, Y+1	; 0x01
    c176:	9a 81       	ldd	r25, Y+2	; 0x02
    c178:	fc 01       	movw	r30, r24
    c17a:	20 83       	st	Z, r18
    c17c:	0d c0       	rjmp	.+26     	; 0xc198 <PORTA_set_pin_pull_mode+0x54>
    c17e:	8c 81       	ldd	r24, Y+4	; 0x04
    c180:	88 23       	and	r24, r24
    c182:	51 f4       	brne	.+20     	; 0xc198 <PORTA_set_pin_pull_mode+0x54>
    c184:	89 81       	ldd	r24, Y+1	; 0x01
    c186:	9a 81       	ldd	r25, Y+2	; 0x02
    c188:	fc 01       	movw	r30, r24
    c18a:	80 81       	ld	r24, Z
    c18c:	28 2f       	mov	r18, r24
    c18e:	27 7f       	andi	r18, 0xF7	; 247
    c190:	89 81       	ldd	r24, Y+1	; 0x01
    c192:	9a 81       	ldd	r25, Y+2	; 0x02
    c194:	fc 01       	movw	r30, r24
    c196:	20 83       	st	Z, r18
    c198:	00 00       	nop
    c19a:	24 96       	adiw	r28, 0x04	; 4
    c19c:	cd bf       	out	0x3d, r28	; 61
    c19e:	de bf       	out	0x3e, r29	; 62
    c1a0:	df 91       	pop	r29
    c1a2:	cf 91       	pop	r28
    c1a4:	08 95       	ret

0000c1a6 <PORTA_pin_set_isc>:
    c1a6:	cf 93       	push	r28
    c1a8:	df 93       	push	r29
    c1aa:	00 d0       	rcall	.+0      	; 0xc1ac <PORTA_pin_set_isc+0x6>
    c1ac:	00 d0       	rcall	.+0      	; 0xc1ae <PORTA_pin_set_isc+0x8>
    c1ae:	cd b7       	in	r28, 0x3d	; 61
    c1b0:	de b7       	in	r29, 0x3e	; 62
    c1b2:	8b 83       	std	Y+3, r24	; 0x03
    c1b4:	6c 83       	std	Y+4, r22	; 0x04
    c1b6:	8b 81       	ldd	r24, Y+3	; 0x03
    c1b8:	88 2f       	mov	r24, r24
    c1ba:	90 e0       	ldi	r25, 0x00	; 0
    c1bc:	80 5f       	subi	r24, 0xF0	; 240
    c1be:	9b 4f       	sbci	r25, 0xFB	; 251
    c1c0:	89 83       	std	Y+1, r24	; 0x01
    c1c2:	9a 83       	std	Y+2, r25	; 0x02
    c1c4:	89 81       	ldd	r24, Y+1	; 0x01
    c1c6:	9a 81       	ldd	r25, Y+2	; 0x02
    c1c8:	fc 01       	movw	r30, r24
    c1ca:	80 81       	ld	r24, Z
    c1cc:	98 2f       	mov	r25, r24
    c1ce:	98 7f       	andi	r25, 0xF8	; 248
    c1d0:	8c 81       	ldd	r24, Y+4	; 0x04
    c1d2:	89 2b       	or	r24, r25
    c1d4:	28 2f       	mov	r18, r24
    c1d6:	89 81       	ldd	r24, Y+1	; 0x01
    c1d8:	9a 81       	ldd	r25, Y+2	; 0x02
    c1da:	fc 01       	movw	r30, r24
    c1dc:	20 83       	st	Z, r18
    c1de:	00 00       	nop
    c1e0:	24 96       	adiw	r28, 0x04	; 4
    c1e2:	cd bf       	out	0x3d, r28	; 61
    c1e4:	de bf       	out	0x3e, r29	; 62
    c1e6:	df 91       	pop	r29
    c1e8:	cf 91       	pop	r28
    c1ea:	08 95       	ret

0000c1ec <PORTD_set_pin_pull_mode>:
    c1ec:	cf 93       	push	r28
    c1ee:	df 93       	push	r29
    c1f0:	00 d0       	rcall	.+0      	; 0xc1f2 <PORTD_set_pin_pull_mode+0x6>
    c1f2:	00 d0       	rcall	.+0      	; 0xc1f4 <PORTD_set_pin_pull_mode+0x8>
    c1f4:	cd b7       	in	r28, 0x3d	; 61
    c1f6:	de b7       	in	r29, 0x3e	; 62
    c1f8:	8b 83       	std	Y+3, r24	; 0x03
    c1fa:	6c 83       	std	Y+4, r22	; 0x04
    c1fc:	8b 81       	ldd	r24, Y+3	; 0x03
    c1fe:	88 2f       	mov	r24, r24
    c200:	90 e0       	ldi	r25, 0x00	; 0
    c202:	80 59       	subi	r24, 0x90	; 144
    c204:	9b 4f       	sbci	r25, 0xFB	; 251
    c206:	89 83       	std	Y+1, r24	; 0x01
    c208:	9a 83       	std	Y+2, r25	; 0x02
    c20a:	8c 81       	ldd	r24, Y+4	; 0x04
    c20c:	81 30       	cpi	r24, 0x01	; 1
    c20e:	59 f4       	brne	.+22     	; 0xc226 <PORTD_set_pin_pull_mode+0x3a>
    c210:	89 81       	ldd	r24, Y+1	; 0x01
    c212:	9a 81       	ldd	r25, Y+2	; 0x02
    c214:	fc 01       	movw	r30, r24
    c216:	80 81       	ld	r24, Z
    c218:	28 2f       	mov	r18, r24
    c21a:	28 60       	ori	r18, 0x08	; 8
    c21c:	89 81       	ldd	r24, Y+1	; 0x01
    c21e:	9a 81       	ldd	r25, Y+2	; 0x02
    c220:	fc 01       	movw	r30, r24
    c222:	20 83       	st	Z, r18
    c224:	0d c0       	rjmp	.+26     	; 0xc240 <PORTD_set_pin_pull_mode+0x54>
    c226:	8c 81       	ldd	r24, Y+4	; 0x04
    c228:	88 23       	and	r24, r24
    c22a:	51 f4       	brne	.+20     	; 0xc240 <PORTD_set_pin_pull_mode+0x54>
    c22c:	89 81       	ldd	r24, Y+1	; 0x01
    c22e:	9a 81       	ldd	r25, Y+2	; 0x02
    c230:	fc 01       	movw	r30, r24
    c232:	80 81       	ld	r24, Z
    c234:	28 2f       	mov	r18, r24
    c236:	27 7f       	andi	r18, 0xF7	; 247
    c238:	89 81       	ldd	r24, Y+1	; 0x01
    c23a:	9a 81       	ldd	r25, Y+2	; 0x02
    c23c:	fc 01       	movw	r30, r24
    c23e:	20 83       	st	Z, r18
    c240:	00 00       	nop
    c242:	24 96       	adiw	r28, 0x04	; 4
    c244:	cd bf       	out	0x3d, r28	; 61
    c246:	de bf       	out	0x3e, r29	; 62
    c248:	df 91       	pop	r29
    c24a:	cf 91       	pop	r28
    c24c:	08 95       	ret

0000c24e <PORTD_pin_set_isc>:
    c24e:	cf 93       	push	r28
    c250:	df 93       	push	r29
    c252:	00 d0       	rcall	.+0      	; 0xc254 <PORTD_pin_set_isc+0x6>
    c254:	00 d0       	rcall	.+0      	; 0xc256 <PORTD_pin_set_isc+0x8>
    c256:	cd b7       	in	r28, 0x3d	; 61
    c258:	de b7       	in	r29, 0x3e	; 62
    c25a:	8b 83       	std	Y+3, r24	; 0x03
    c25c:	6c 83       	std	Y+4, r22	; 0x04
    c25e:	8b 81       	ldd	r24, Y+3	; 0x03
    c260:	88 2f       	mov	r24, r24
    c262:	90 e0       	ldi	r25, 0x00	; 0
    c264:	80 59       	subi	r24, 0x90	; 144
    c266:	9b 4f       	sbci	r25, 0xFB	; 251
    c268:	89 83       	std	Y+1, r24	; 0x01
    c26a:	9a 83       	std	Y+2, r25	; 0x02
    c26c:	89 81       	ldd	r24, Y+1	; 0x01
    c26e:	9a 81       	ldd	r25, Y+2	; 0x02
    c270:	fc 01       	movw	r30, r24
    c272:	80 81       	ld	r24, Z
    c274:	98 2f       	mov	r25, r24
    c276:	98 7f       	andi	r25, 0xF8	; 248
    c278:	8c 81       	ldd	r24, Y+4	; 0x04
    c27a:	89 2b       	or	r24, r25
    c27c:	28 2f       	mov	r18, r24
    c27e:	89 81       	ldd	r24, Y+1	; 0x01
    c280:	9a 81       	ldd	r25, Y+2	; 0x02
    c282:	fc 01       	movw	r30, r24
    c284:	20 83       	st	Z, r18
    c286:	00 00       	nop
    c288:	24 96       	adiw	r28, 0x04	; 4
    c28a:	cd bf       	out	0x3d, r28	; 61
    c28c:	de bf       	out	0x3e, r29	; 62
    c28e:	df 91       	pop	r29
    c290:	cf 91       	pop	r28
    c292:	08 95       	ret

0000c294 <PORTF_set_pin_pull_mode>:
    c294:	cf 93       	push	r28
    c296:	df 93       	push	r29
    c298:	00 d0       	rcall	.+0      	; 0xc29a <PORTF_set_pin_pull_mode+0x6>
    c29a:	00 d0       	rcall	.+0      	; 0xc29c <PORTF_set_pin_pull_mode+0x8>
    c29c:	cd b7       	in	r28, 0x3d	; 61
    c29e:	de b7       	in	r29, 0x3e	; 62
    c2a0:	8b 83       	std	Y+3, r24	; 0x03
    c2a2:	6c 83       	std	Y+4, r22	; 0x04
    c2a4:	8b 81       	ldd	r24, Y+3	; 0x03
    c2a6:	88 2f       	mov	r24, r24
    c2a8:	90 e0       	ldi	r25, 0x00	; 0
    c2aa:	80 55       	subi	r24, 0x50	; 80
    c2ac:	9b 4f       	sbci	r25, 0xFB	; 251
    c2ae:	89 83       	std	Y+1, r24	; 0x01
    c2b0:	9a 83       	std	Y+2, r25	; 0x02
    c2b2:	8c 81       	ldd	r24, Y+4	; 0x04
    c2b4:	81 30       	cpi	r24, 0x01	; 1
    c2b6:	59 f4       	brne	.+22     	; 0xc2ce <PORTF_set_pin_pull_mode+0x3a>
    c2b8:	89 81       	ldd	r24, Y+1	; 0x01
    c2ba:	9a 81       	ldd	r25, Y+2	; 0x02
    c2bc:	fc 01       	movw	r30, r24
    c2be:	80 81       	ld	r24, Z
    c2c0:	28 2f       	mov	r18, r24
    c2c2:	28 60       	ori	r18, 0x08	; 8
    c2c4:	89 81       	ldd	r24, Y+1	; 0x01
    c2c6:	9a 81       	ldd	r25, Y+2	; 0x02
    c2c8:	fc 01       	movw	r30, r24
    c2ca:	20 83       	st	Z, r18
    c2cc:	0d c0       	rjmp	.+26     	; 0xc2e8 <PORTF_set_pin_pull_mode+0x54>
    c2ce:	8c 81       	ldd	r24, Y+4	; 0x04
    c2d0:	88 23       	and	r24, r24
    c2d2:	51 f4       	brne	.+20     	; 0xc2e8 <PORTF_set_pin_pull_mode+0x54>
    c2d4:	89 81       	ldd	r24, Y+1	; 0x01
    c2d6:	9a 81       	ldd	r25, Y+2	; 0x02
    c2d8:	fc 01       	movw	r30, r24
    c2da:	80 81       	ld	r24, Z
    c2dc:	28 2f       	mov	r18, r24
    c2de:	27 7f       	andi	r18, 0xF7	; 247
    c2e0:	89 81       	ldd	r24, Y+1	; 0x01
    c2e2:	9a 81       	ldd	r25, Y+2	; 0x02
    c2e4:	fc 01       	movw	r30, r24
    c2e6:	20 83       	st	Z, r18
    c2e8:	00 00       	nop
    c2ea:	24 96       	adiw	r28, 0x04	; 4
    c2ec:	cd bf       	out	0x3d, r28	; 61
    c2ee:	de bf       	out	0x3e, r29	; 62
    c2f0:	df 91       	pop	r29
    c2f2:	cf 91       	pop	r28
    c2f4:	08 95       	ret

0000c2f6 <PORTF_pin_set_isc>:
    c2f6:	cf 93       	push	r28
    c2f8:	df 93       	push	r29
    c2fa:	00 d0       	rcall	.+0      	; 0xc2fc <PORTF_pin_set_isc+0x6>
    c2fc:	00 d0       	rcall	.+0      	; 0xc2fe <PORTF_pin_set_isc+0x8>
    c2fe:	cd b7       	in	r28, 0x3d	; 61
    c300:	de b7       	in	r29, 0x3e	; 62
    c302:	8b 83       	std	Y+3, r24	; 0x03
    c304:	6c 83       	std	Y+4, r22	; 0x04
    c306:	8b 81       	ldd	r24, Y+3	; 0x03
    c308:	88 2f       	mov	r24, r24
    c30a:	90 e0       	ldi	r25, 0x00	; 0
    c30c:	80 55       	subi	r24, 0x50	; 80
    c30e:	9b 4f       	sbci	r25, 0xFB	; 251
    c310:	89 83       	std	Y+1, r24	; 0x01
    c312:	9a 83       	std	Y+2, r25	; 0x02
    c314:	89 81       	ldd	r24, Y+1	; 0x01
    c316:	9a 81       	ldd	r25, Y+2	; 0x02
    c318:	fc 01       	movw	r30, r24
    c31a:	80 81       	ld	r24, Z
    c31c:	98 2f       	mov	r25, r24
    c31e:	98 7f       	andi	r25, 0xF8	; 248
    c320:	8c 81       	ldd	r24, Y+4	; 0x04
    c322:	89 2b       	or	r24, r25
    c324:	28 2f       	mov	r18, r24
    c326:	89 81       	ldd	r24, Y+1	; 0x01
    c328:	9a 81       	ldd	r25, Y+2	; 0x02
    c32a:	fc 01       	movw	r30, r24
    c32c:	20 83       	st	Z, r18
    c32e:	00 00       	nop
    c330:	24 96       	adiw	r28, 0x04	; 4
    c332:	cd bf       	out	0x3d, r28	; 61
    c334:	de bf       	out	0x3e, r29	; 62
    c336:	df 91       	pop	r29
    c338:	cf 91       	pop	r28
    c33a:	08 95       	ret

0000c33c <touch_ptc_pin_config>:
    c33c:	cf 93       	push	r28
    c33e:	df 93       	push	r29
    c340:	cd b7       	in	r28, 0x3d	; 61
    c342:	de b7       	in	r29, 0x3e	; 62
    c344:	60 e0       	ldi	r22, 0x00	; 0
    c346:	86 e0       	ldi	r24, 0x06	; 6
    c348:	0e 94 a2 60 	call	0xc144	; 0xc144 <PORTA_set_pin_pull_mode>
    c34c:	64 e0       	ldi	r22, 0x04	; 4
    c34e:	86 e0       	ldi	r24, 0x06	; 6
    c350:	0e 94 d3 60 	call	0xc1a6	; 0xc1a6 <PORTA_pin_set_isc>
    c354:	60 e0       	ldi	r22, 0x00	; 0
    c356:	84 e0       	ldi	r24, 0x04	; 4
    c358:	0e 94 a2 60 	call	0xc144	; 0xc144 <PORTA_set_pin_pull_mode>
    c35c:	64 e0       	ldi	r22, 0x04	; 4
    c35e:	84 e0       	ldi	r24, 0x04	; 4
    c360:	0e 94 d3 60 	call	0xc1a6	; 0xc1a6 <PORTA_pin_set_isc>
    c364:	60 e0       	ldi	r22, 0x00	; 0
    c366:	85 e0       	ldi	r24, 0x05	; 5
    c368:	0e 94 a2 60 	call	0xc144	; 0xc144 <PORTA_set_pin_pull_mode>
    c36c:	64 e0       	ldi	r22, 0x04	; 4
    c36e:	85 e0       	ldi	r24, 0x05	; 5
    c370:	0e 94 d3 60 	call	0xc1a6	; 0xc1a6 <PORTA_pin_set_isc>
    c374:	60 e0       	ldi	r22, 0x00	; 0
    c376:	80 e0       	ldi	r24, 0x00	; 0
    c378:	0e 94 4a 61 	call	0xc294	; 0xc294 <PORTF_set_pin_pull_mode>
    c37c:	64 e0       	ldi	r22, 0x04	; 4
    c37e:	80 e0       	ldi	r24, 0x00	; 0
    c380:	0e 94 7b 61 	call	0xc2f6	; 0xc2f6 <PORTF_pin_set_isc>
    c384:	60 e0       	ldi	r22, 0x00	; 0
    c386:	82 e0       	ldi	r24, 0x02	; 2
    c388:	0e 94 f6 60 	call	0xc1ec	; 0xc1ec <PORTD_set_pin_pull_mode>
    c38c:	64 e0       	ldi	r22, 0x04	; 4
    c38e:	82 e0       	ldi	r24, 0x02	; 2
    c390:	0e 94 27 61 	call	0xc24e	; 0xc24e <PORTD_pin_set_isc>
    c394:	60 e0       	ldi	r22, 0x00	; 0
    c396:	83 e0       	ldi	r24, 0x03	; 3
    c398:	0e 94 f6 60 	call	0xc1ec	; 0xc1ec <PORTD_set_pin_pull_mode>
    c39c:	64 e0       	ldi	r22, 0x04	; 4
    c39e:	83 e0       	ldi	r24, 0x03	; 3
    c3a0:	0e 94 27 61 	call	0xc24e	; 0xc24e <PORTD_pin_set_isc>
    c3a4:	60 e0       	ldi	r22, 0x00	; 0
    c3a6:	81 e0       	ldi	r24, 0x01	; 1
    c3a8:	0e 94 f6 60 	call	0xc1ec	; 0xc1ec <PORTD_set_pin_pull_mode>
    c3ac:	64 e0       	ldi	r22, 0x04	; 4
    c3ae:	81 e0       	ldi	r24, 0x01	; 1
    c3b0:	0e 94 27 61 	call	0xc24e	; 0xc24e <PORTD_pin_set_isc>
    c3b4:	60 e0       	ldi	r22, 0x00	; 0
    c3b6:	80 e0       	ldi	r24, 0x00	; 0
    c3b8:	0e 94 f6 60 	call	0xc1ec	; 0xc1ec <PORTD_set_pin_pull_mode>
    c3bc:	64 e0       	ldi	r22, 0x04	; 4
    c3be:	80 e0       	ldi	r24, 0x00	; 0
    c3c0:	0e 94 27 61 	call	0xc24e	; 0xc24e <PORTD_pin_set_isc>
    c3c4:	60 e0       	ldi	r22, 0x00	; 0
    c3c6:	87 e0       	ldi	r24, 0x07	; 7
    c3c8:	0e 94 a2 60 	call	0xc144	; 0xc144 <PORTA_set_pin_pull_mode>
    c3cc:	64 e0       	ldi	r22, 0x04	; 4
    c3ce:	87 e0       	ldi	r24, 0x07	; 7
    c3d0:	0e 94 d3 60 	call	0xc1a6	; 0xc1a6 <PORTA_pin_set_isc>
    c3d4:	60 e0       	ldi	r22, 0x00	; 0
    c3d6:	83 e0       	ldi	r24, 0x03	; 3
    c3d8:	0e 94 a2 60 	call	0xc144	; 0xc144 <PORTA_set_pin_pull_mode>
    c3dc:	64 e0       	ldi	r22, 0x04	; 4
    c3de:	83 e0       	ldi	r24, 0x03	; 3
    c3e0:	0e 94 d3 60 	call	0xc1a6	; 0xc1a6 <PORTA_pin_set_isc>
    c3e4:	00 00       	nop
    c3e6:	df 91       	pop	r29
    c3e8:	cf 91       	pop	r28
    c3ea:	08 95       	ret

0000c3ec <touch_sensors_config>:
    c3ec:	cf 93       	push	r28
    c3ee:	df 93       	push	r29
    c3f0:	00 d0       	rcall	.+0      	; 0xc3f2 <touch_sensors_config+0x6>
    c3f2:	1f 92       	push	r1
    c3f4:	cd b7       	in	r28, 0x3d	; 61
    c3f6:	de b7       	in	r29, 0x3e	; 62
    c3f8:	1b 82       	std	Y+3, r1	; 0x03
    c3fa:	87 ea       	ldi	r24, 0xA7	; 167
    c3fc:	91 e4       	ldi	r25, 0x41	; 65
    c3fe:	0e 94 74 76 	call	0xece8	; 0xece8 <qtm_ptc_init_acquisition_module>
    c402:	88 ef       	ldi	r24, 0xF8	; 248
    c404:	96 e4       	ldi	r25, 0x46	; 70
    c406:	0e 94 2b 77 	call	0xee56	; 0xee56 <qtm_ptc_qtlib_assign_signal_memory>
    c40a:	19 82       	std	Y+1, r1	; 0x01
    c40c:	1a 82       	std	Y+2, r1	; 0x02
    c40e:	13 c0       	rjmp	.+38     	; 0xc436 <touch_sensors_config+0x4a>
    c410:	89 81       	ldd	r24, Y+1	; 0x01
    c412:	9a 81       	ldd	r25, Y+2	; 0x02
    c414:	bc 01       	movw	r22, r24
    c416:	87 ea       	ldi	r24, 0xA7	; 167
    c418:	91 e4       	ldi	r25, 0x41	; 65
    c41a:	0e 94 a5 77 	call	0xef4a	; 0xef4a <qtm_enable_sensor_node>
    c41e:	89 81       	ldd	r24, Y+1	; 0x01
    c420:	9a 81       	ldd	r25, Y+2	; 0x02
    c422:	bc 01       	movw	r22, r24
    c424:	87 ea       	ldi	r24, 0xA7	; 167
    c426:	91 e4       	ldi	r25, 0x41	; 65
    c428:	0e 94 c4 77 	call	0xef88	; 0xef88 <qtm_calibrate_sensor_node>
    c42c:	89 81       	ldd	r24, Y+1	; 0x01
    c42e:	9a 81       	ldd	r25, Y+2	; 0x02
    c430:	01 96       	adiw	r24, 0x01	; 1
    c432:	89 83       	std	Y+1, r24	; 0x01
    c434:	9a 83       	std	Y+2, r25	; 0x02
    c436:	89 81       	ldd	r24, Y+1	; 0x01
    c438:	9a 81       	ldd	r25, Y+2	; 0x02
    c43a:	0a 97       	sbiw	r24, 0x0a	; 10
    c43c:	48 f3       	brcs	.-46     	; 0xc410 <touch_sensors_config+0x24>
    c43e:	19 82       	std	Y+1, r1	; 0x01
    c440:	1a 82       	std	Y+2, r1	; 0x02
    c442:	17 c0       	rjmp	.+46     	; 0xc472 <touch_sensors_config+0x86>
    c444:	29 81       	ldd	r18, Y+1	; 0x01
    c446:	3a 81       	ldd	r19, Y+2	; 0x02
    c448:	c9 01       	movw	r24, r18
    c44a:	88 0f       	add	r24, r24
    c44c:	99 1f       	adc	r25, r25
    c44e:	88 0f       	add	r24, r24
    c450:	99 1f       	adc	r25, r25
    c452:	82 0f       	add	r24, r18
    c454:	93 1f       	adc	r25, r19
    c456:	83 54       	subi	r24, 0x43	; 67
    c458:	99 4b       	sbci	r25, 0xB9	; 185
    c45a:	29 81       	ldd	r18, Y+1	; 0x01
    c45c:	ac 01       	movw	r20, r24
    c45e:	62 2f       	mov	r22, r18
    c460:	85 ed       	ldi	r24, 0xD5	; 213
    c462:	91 e4       	ldi	r25, 0x41	; 65
    c464:	0e 94 13 6b 	call	0xd626	; 0xd626 <qtm_init_sensor_key>
    c468:	89 81       	ldd	r24, Y+1	; 0x01
    c46a:	9a 81       	ldd	r25, Y+2	; 0x02
    c46c:	01 96       	adiw	r24, 0x01	; 1
    c46e:	89 83       	std	Y+1, r24	; 0x01
    c470:	9a 83       	std	Y+2, r25	; 0x02
    c472:	89 81       	ldd	r24, Y+1	; 0x01
    c474:	9a 81       	ldd	r25, Y+2	; 0x02
    c476:	0a 97       	sbiw	r24, 0x0a	; 10
    c478:	28 f3       	brcs	.-54     	; 0xc444 <touch_sensors_config+0x58>
    c47a:	88 ee       	ldi	r24, 0xE8	; 232
    c47c:	91 e4       	ldi	r25, 0x41	; 65
    c47e:	0e 94 01 6f 	call	0xde02	; 0xde02 <qtm_init_scroller_module>
    c482:	98 2f       	mov	r25, r24
    c484:	8b 81       	ldd	r24, Y+3	; 0x03
    c486:	89 2b       	or	r24, r25
    c488:	8b 83       	std	Y+3, r24	; 0x03
    c48a:	8b 81       	ldd	r24, Y+3	; 0x03
    c48c:	23 96       	adiw	r28, 0x03	; 3
    c48e:	cd bf       	out	0x3d, r28	; 61
    c490:	de bf       	out	0x3e, r29	; 62
    c492:	df 91       	pop	r29
    c494:	cf 91       	pop	r28
    c496:	08 95       	ret

0000c498 <qtm_measure_complete_callback>:
    c498:	cf 93       	push	r28
    c49a:	df 93       	push	r29
    c49c:	cd b7       	in	r28, 0x3d	; 61
    c49e:	de b7       	in	r29, 0x3e	; 62
    c4a0:	81 e0       	ldi	r24, 0x01	; 1
    c4a2:	80 93 36 46 	sts	0x4636, r24	; 0x804636 <touch_postprocess_request>
    c4a6:	00 00       	nop
    c4a8:	df 91       	pop	r29
    c4aa:	cf 91       	pop	r28
    c4ac:	08 95       	ret

0000c4ae <qtm_error_callback>:
    c4ae:	cf 93       	push	r28
    c4b0:	df 93       	push	r29
    c4b2:	1f 92       	push	r1
    c4b4:	cd b7       	in	r28, 0x3d	; 61
    c4b6:	de b7       	in	r29, 0x3e	; 62
    c4b8:	89 83       	std	Y+1, r24	; 0x01
    c4ba:	89 81       	ldd	r24, Y+1	; 0x01
    c4bc:	8f 5f       	subi	r24, 0xFF	; 255
    c4be:	80 93 38 46 	sts	0x4638, r24	; 0x804638 <module_error_code>
    c4c2:	00 00       	nop
    c4c4:	0f 90       	pop	r0
    c4c6:	df 91       	pop	r29
    c4c8:	cf 91       	pop	r28
    c4ca:	08 95       	ret

0000c4cc <Timer_set_period>:
    c4cc:	cf 93       	push	r28
    c4ce:	df 93       	push	r29
    c4d0:	1f 92       	push	r1
    c4d2:	cd b7       	in	r28, 0x3d	; 61
    c4d4:	de b7       	in	r29, 0x3e	; 62
    c4d6:	89 83       	std	Y+1, r24	; 0x01
    c4d8:	00 00       	nop
    c4da:	80 e4       	ldi	r24, 0x40	; 64
    c4dc:	91 e0       	ldi	r25, 0x01	; 1
    c4de:	fc 01       	movw	r30, r24
    c4e0:	81 81       	ldd	r24, Z+1	; 0x01
    c4e2:	88 2f       	mov	r24, r24
    c4e4:	90 e0       	ldi	r25, 0x00	; 0
    c4e6:	84 70       	andi	r24, 0x04	; 4
    c4e8:	99 27       	eor	r25, r25
    c4ea:	89 2b       	or	r24, r25
    c4ec:	b1 f7       	brne	.-20     	; 0xc4da <Timer_set_period+0xe>
    c4ee:	80 e4       	ldi	r24, 0x40	; 64
    c4f0:	91 e0       	ldi	r25, 0x01	; 1
    c4f2:	29 81       	ldd	r18, Y+1	; 0x01
    c4f4:	22 2f       	mov	r18, r18
    c4f6:	30 e0       	ldi	r19, 0x00	; 0
    c4f8:	fc 01       	movw	r30, r24
    c4fa:	22 87       	std	Z+10, r18	; 0x0a
    c4fc:	33 87       	std	Z+11, r19	; 0x0b
    c4fe:	00 00       	nop
    c500:	0f 90       	pop	r0
    c502:	df 91       	pop	r29
    c504:	cf 91       	pop	r28
    c506:	08 95       	ret

0000c508 <touch_init>:
    c508:	cf 93       	push	r28
    c50a:	df 93       	push	r29
    c50c:	cd b7       	in	r28, 0x3d	; 61
    c50e:	de b7       	in	r29, 0x3e	; 62
    c510:	80 e2       	ldi	r24, 0x20	; 32
    c512:	0e 94 66 62 	call	0xc4cc	; 0xc4cc <Timer_set_period>
    c516:	0e 94 9e 61 	call	0xc33c	; 0xc33c <touch_ptc_pin_config>
    c51a:	0e 94 f6 61 	call	0xc3ec	; 0xc3ec <touch_sensors_config>
    c51e:	00 00       	nop
    c520:	df 91       	pop	r29
    c522:	cf 91       	pop	r28
    c524:	08 95       	ret

0000c526 <touch_process>:
    c526:	cf 93       	push	r28
    c528:	df 93       	push	r29
    c52a:	1f 92       	push	r1
    c52c:	cd b7       	in	r28, 0x3d	; 61
    c52e:	de b7       	in	r29, 0x3e	; 62
    c530:	80 91 35 46 	lds	r24, 0x4635	; 0x804635 <time_to_measure_touch_flag>
    c534:	81 30       	cpi	r24, 0x01	; 1
    c536:	61 f4       	brne	.+24     	; 0xc550 <touch_process+0x2a>
    c538:	6c e4       	ldi	r22, 0x4C	; 76
    c53a:	72 e6       	ldi	r23, 0x62	; 98
    c53c:	87 ea       	ldi	r24, 0xA7	; 167
    c53e:	91 e4       	ldi	r25, 0x41	; 65
    c540:	0e 94 35 77 	call	0xee6a	; 0xee6a <qtm_ptc_start_measurement_seq>
    c544:	89 83       	std	Y+1, r24	; 0x01
    c546:	89 81       	ldd	r24, Y+1	; 0x01
    c548:	88 23       	and	r24, r24
    c54a:	11 f4       	brne	.+4      	; 0xc550 <touch_process+0x2a>
    c54c:	10 92 35 46 	sts	0x4635, r1	; 0x804635 <time_to_measure_touch_flag>
    c550:	80 91 36 46 	lds	r24, 0x4636	; 0x804636 <touch_postprocess_request>
    c554:	81 30       	cpi	r24, 0x01	; 1
    c556:	89 f5       	brne	.+98     	; 0xc5ba <touch_process+0x94>
    c558:	10 92 36 46 	sts	0x4636, r1	; 0x804636 <touch_postprocess_request>
    c55c:	0e 94 f2 73 	call	0xe7e4	; 0xe7e4 <qtm_acquisition_process>
    c560:	89 83       	std	Y+1, r24	; 0x01
    c562:	89 81       	ldd	r24, Y+1	; 0x01
    c564:	88 23       	and	r24, r24
    c566:	b9 f4       	brne	.+46     	; 0xc596 <touch_process+0x70>
    c568:	85 ed       	ldi	r24, 0xD5	; 213
    c56a:	91 e4       	ldi	r25, 0x41	; 65
    c56c:	0e 94 32 6b 	call	0xd664	; 0xd664 <qtm_key_sensors_process>
    c570:	89 83       	std	Y+1, r24	; 0x01
    c572:	89 81       	ldd	r24, Y+1	; 0x01
    c574:	88 23       	and	r24, r24
    c576:	19 f0       	breq	.+6      	; 0xc57e <touch_process+0x58>
    c578:	81 e0       	ldi	r24, 0x01	; 1
    c57a:	0e 94 57 62 	call	0xc4ae	; 0xc4ae <qtm_error_callback>
    c57e:	88 ee       	ldi	r24, 0xE8	; 232
    c580:	91 e4       	ldi	r25, 0x41	; 65
    c582:	0e 94 41 6f 	call	0xde82	; 0xde82 <qtm_scroller_process>
    c586:	89 83       	std	Y+1, r24	; 0x01
    c588:	89 81       	ldd	r24, Y+1	; 0x01
    c58a:	88 23       	and	r24, r24
    c58c:	39 f0       	breq	.+14     	; 0xc59c <touch_process+0x76>
    c58e:	82 e0       	ldi	r24, 0x02	; 2
    c590:	0e 94 57 62 	call	0xc4ae	; 0xc4ae <qtm_error_callback>
    c594:	03 c0       	rjmp	.+6      	; 0xc59c <touch_process+0x76>
    c596:	80 e0       	ldi	r24, 0x00	; 0
    c598:	0e 94 57 62 	call	0xc4ae	; 0xc4ae <qtm_error_callback>
    c59c:	80 91 d5 41 	lds	r24, 0x41D5	; 0x8041d5 <qtlib_key_set1>
    c5a0:	90 91 d6 41 	lds	r25, 0x41D6	; 0x8041d6 <qtlib_key_set1+0x1>
    c5a4:	fc 01       	movw	r30, r24
    c5a6:	80 81       	ld	r24, Z
    c5a8:	88 23       	and	r24, r24
    c5aa:	24 f4       	brge	.+8      	; 0xc5b4 <touch_process+0x8e>
    c5ac:	81 e0       	ldi	r24, 0x01	; 1
    c5ae:	80 93 35 46 	sts	0x4635, r24	; 0x804635 <time_to_measure_touch_flag>
    c5b2:	03 c0       	rjmp	.+6      	; 0xc5ba <touch_process+0x94>
    c5b4:	81 e0       	ldi	r24, 0x01	; 1
    c5b6:	80 93 37 46 	sts	0x4637, r24	; 0x804637 <measurement_done_touch>
    c5ba:	00 00       	nop
    c5bc:	0f 90       	pop	r0
    c5be:	df 91       	pop	r29
    c5c0:	cf 91       	pop	r28
    c5c2:	08 95       	ret

0000c5c4 <touch_timer_handler>:
    c5c4:	cf 93       	push	r28
    c5c6:	df 93       	push	r29
    c5c8:	cd b7       	in	r28, 0x3d	; 61
    c5ca:	de b7       	in	r29, 0x3e	; 62
    c5cc:	80 91 bc 46 	lds	r24, 0x46BC	; 0x8046bc <interrupt_cnt>
    c5d0:	8f 5f       	subi	r24, 0xFF	; 255
    c5d2:	80 93 bc 46 	sts	0x46BC, r24	; 0x8046bc <interrupt_cnt>
    c5d6:	80 91 bc 46 	lds	r24, 0x46BC	; 0x8046bc <interrupt_cnt>
    c5da:	84 31       	cpi	r24, 0x14	; 20
    c5dc:	48 f0       	brcs	.+18     	; 0xc5f0 <touch_timer_handler+0x2c>
    c5de:	10 92 bc 46 	sts	0x46BC, r1	; 0x8046bc <interrupt_cnt>
    c5e2:	81 e0       	ldi	r24, 0x01	; 1
    c5e4:	80 93 35 46 	sts	0x4635, r24	; 0x804635 <time_to_measure_touch_flag>
    c5e8:	84 e1       	ldi	r24, 0x14	; 20
    c5ea:	90 e0       	ldi	r25, 0x00	; 0
    c5ec:	0e 94 08 6b 	call	0xd610	; 0xd610 <qtm_update_qtlib_timer>
    c5f0:	00 00       	nop
    c5f2:	df 91       	pop	r29
    c5f4:	cf 91       	pop	r28
    c5f6:	08 95       	ret

0000c5f8 <get_sensor_state>:
    c5f8:	cf 93       	push	r28
    c5fa:	df 93       	push	r29
    c5fc:	00 d0       	rcall	.+0      	; 0xc5fe <get_sensor_state+0x6>
    c5fe:	cd b7       	in	r28, 0x3d	; 61
    c600:	de b7       	in	r29, 0x3e	; 62
    c602:	89 83       	std	Y+1, r24	; 0x01
    c604:	9a 83       	std	Y+2, r25	; 0x02
    c606:	40 91 d9 41 	lds	r20, 0x41D9	; 0x8041d9 <qtlib_key_set1+0x4>
    c60a:	50 91 da 41 	lds	r21, 0x41DA	; 0x8041da <qtlib_key_set1+0x5>
    c60e:	29 81       	ldd	r18, Y+1	; 0x01
    c610:	3a 81       	ldd	r19, Y+2	; 0x02
    c612:	c9 01       	movw	r24, r18
    c614:	88 0f       	add	r24, r24
    c616:	99 1f       	adc	r25, r25
    c618:	82 0f       	add	r24, r18
    c61a:	93 1f       	adc	r25, r19
    c61c:	88 0f       	add	r24, r24
    c61e:	99 1f       	adc	r25, r25
    c620:	84 0f       	add	r24, r20
    c622:	95 1f       	adc	r25, r21
    c624:	fc 01       	movw	r30, r24
    c626:	80 81       	ld	r24, Z
    c628:	0f 90       	pop	r0
    c62a:	0f 90       	pop	r0
    c62c:	df 91       	pop	r29
    c62e:	cf 91       	pop	r28
    c630:	08 95       	ret

0000c632 <get_scroller_state>:

uint8_t get_scroller_state(uint16_t sensor_node)
{
    c632:	cf 93       	push	r28
    c634:	df 93       	push	r29
    c636:	00 d0       	rcall	.+0      	; 0xc638 <get_scroller_state+0x6>
    c638:	cd b7       	in	r28, 0x3d	; 61
    c63a:	de b7       	in	r29, 0x3e	; 62
    c63c:	89 83       	std	Y+1, r24	; 0x01
    c63e:	9a 83       	std	Y+2, r25	; 0x02
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].scroller_status);
    c640:	40 91 ec 41 	lds	r20, 0x41EC	; 0x8041ec <qtm_scroller_control1+0x4>
    c644:	50 91 ed 41 	lds	r21, 0x41ED	; 0x8041ed <qtm_scroller_control1+0x5>
    c648:	29 81       	ldd	r18, Y+1	; 0x01
    c64a:	3a 81       	ldd	r19, Y+2	; 0x02
    c64c:	c9 01       	movw	r24, r18
    c64e:	88 0f       	add	r24, r24
    c650:	99 1f       	adc	r25, r25
    c652:	88 0f       	add	r24, r24
    c654:	99 1f       	adc	r25, r25
    c656:	88 0f       	add	r24, r24
    c658:	99 1f       	adc	r25, r25
    c65a:	82 0f       	add	r24, r18
    c65c:	93 1f       	adc	r25, r19
    c65e:	84 0f       	add	r24, r20
    c660:	95 1f       	adc	r25, r21
    c662:	fc 01       	movw	r30, r24
    c664:	80 81       	ld	r24, Z
}
    c666:	0f 90       	pop	r0
    c668:	0f 90       	pop	r0
    c66a:	df 91       	pop	r29
    c66c:	cf 91       	pop	r28
    c66e:	08 95       	ret

0000c670 <get_scroller_position>:

uint16_t get_scroller_position(uint16_t sensor_node)
{
    c670:	cf 93       	push	r28
    c672:	df 93       	push	r29
    c674:	00 d0       	rcall	.+0      	; 0xc676 <get_scroller_position+0x6>
    c676:	cd b7       	in	r28, 0x3d	; 61
    c678:	de b7       	in	r29, 0x3e	; 62
    c67a:	89 83       	std	Y+1, r24	; 0x01
    c67c:	9a 83       	std	Y+2, r25	; 0x02
	return (qtm_scroller_control1.qtm_scroller_data[sensor_node].position);
    c67e:	40 91 ec 41 	lds	r20, 0x41EC	; 0x8041ec <qtm_scroller_control1+0x4>
    c682:	50 91 ed 41 	lds	r21, 0x41ED	; 0x8041ed <qtm_scroller_control1+0x5>
    c686:	29 81       	ldd	r18, Y+1	; 0x01
    c688:	3a 81       	ldd	r19, Y+2	; 0x02
    c68a:	c9 01       	movw	r24, r18
    c68c:	88 0f       	add	r24, r24
    c68e:	99 1f       	adc	r25, r25
    c690:	88 0f       	add	r24, r24
    c692:	99 1f       	adc	r25, r25
    c694:	88 0f       	add	r24, r24
    c696:	99 1f       	adc	r25, r25
    c698:	82 0f       	add	r24, r18
    c69a:	93 1f       	adc	r25, r19
    c69c:	84 0f       	add	r24, r20
    c69e:	95 1f       	adc	r25, r21
    c6a0:	fc 01       	movw	r30, r24
    c6a2:	85 81       	ldd	r24, Z+5	; 0x05
    c6a4:	96 81       	ldd	r25, Z+6	; 0x06
}
    c6a6:	0f 90       	pop	r0
    c6a8:	0f 90       	pop	r0
    c6aa:	df 91       	pop	r29
    c6ac:	cf 91       	pop	r28
    c6ae:	08 95       	ret

0000c6b0 <__vector_27>:
#if defined(__ICCAVR__)
ISR(QTML_PTC_vect_iar)
#else
ISR(QTML_PTC_vect)
#endif
{
    c6b0:	1f 92       	push	r1
    c6b2:	0f 92       	push	r0
    c6b4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    c6b8:	0f 92       	push	r0
    c6ba:	11 24       	eor	r1, r1
    c6bc:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    c6c0:	0f 92       	push	r0
    c6c2:	2f 93       	push	r18
    c6c4:	3f 93       	push	r19
    c6c6:	4f 93       	push	r20
    c6c8:	5f 93       	push	r21
    c6ca:	6f 93       	push	r22
    c6cc:	7f 93       	push	r23
    c6ce:	8f 93       	push	r24
    c6d0:	9f 93       	push	r25
    c6d2:	af 93       	push	r26
    c6d4:	bf 93       	push	r27
    c6d6:	ef 93       	push	r30
    c6d8:	ff 93       	push	r31
    c6da:	cf 93       	push	r28
    c6dc:	df 93       	push	r29
    c6de:	cd b7       	in	r28, 0x3d	; 61
    c6e0:	de b7       	in	r29, 0x3e	; 62
	qtm_avr_da_ptc_handler_eoc();
    c6e2:	0e 94 4b 78 	call	0xf096	; 0xf096 <qtm_avr_da_ptc_handler_eoc>
}
    c6e6:	00 00       	nop
    c6e8:	df 91       	pop	r29
    c6ea:	cf 91       	pop	r28
    c6ec:	ff 91       	pop	r31
    c6ee:	ef 91       	pop	r30
    c6f0:	bf 91       	pop	r27
    c6f2:	af 91       	pop	r26
    c6f4:	9f 91       	pop	r25
    c6f6:	8f 91       	pop	r24
    c6f8:	7f 91       	pop	r23
    c6fa:	6f 91       	pop	r22
    c6fc:	5f 91       	pop	r21
    c6fe:	4f 91       	pop	r20
    c700:	3f 91       	pop	r19
    c702:	2f 91       	pop	r18
    c704:	0f 90       	pop	r0
    c706:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    c70a:	0f 90       	pop	r0
    c70c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    c710:	0f 90       	pop	r0
    c712:	1f 90       	pop	r1
    c714:	18 95       	reti

0000c716 <soft_timer_create>:
} soft_timer_obj_t;

soft_timer_obj_t *g_soft_timer_head = NULL;

void soft_timer_create(soft_timer_base_t period, soft_timer_cb cb)
{
    c716:	cf 93       	push	r28
    c718:	df 93       	push	r29
    c71a:	cd b7       	in	r28, 0x3d	; 61
    c71c:	de b7       	in	r29, 0x3e	; 62
    c71e:	26 97       	sbiw	r28, 0x06	; 6
    c720:	cd bf       	out	0x3d, r28	; 61
    c722:	de bf       	out	0x3e, r29	; 62
    c724:	8b 83       	std	Y+3, r24	; 0x03
    c726:	9c 83       	std	Y+4, r25	; 0x04
    c728:	6d 83       	std	Y+5, r22	; 0x05
    c72a:	7e 83       	std	Y+6, r23	; 0x06
    soft_timer_obj_t *obj = NULL;
    c72c:	19 82       	std	Y+1, r1	; 0x01
    c72e:	1a 82       	std	Y+2, r1	; 0x02
    obj = (soft_timer_obj_t *)malloc(sizeof(soft_timer_obj_t));
    c730:	88 e0       	ldi	r24, 0x08	; 8
    c732:	90 e0       	ldi	r25, 0x00	; 0
    c734:	0e 94 21 79 	call	0xf242	; 0xf242 <malloc>
    c738:	89 83       	std	Y+1, r24	; 0x01
    c73a:	9a 83       	std	Y+2, r25	; 0x02
    if (obj == NULL)
    c73c:	89 81       	ldd	r24, Y+1	; 0x01
    c73e:	9a 81       	ldd	r25, Y+2	; 0x02
    c740:	89 2b       	or	r24, r25
    c742:	31 f1       	breq	.+76     	; 0xc790 <soft_timer_create+0x7a>
    {
        return;
    }
    memset(obj, 0, sizeof(soft_timer_obj_t));
    c744:	89 81       	ldd	r24, Y+1	; 0x01
    c746:	9a 81       	ldd	r25, Y+2	; 0x02
    c748:	48 e0       	ldi	r20, 0x08	; 8
    c74a:	50 e0       	ldi	r21, 0x00	; 0
    c74c:	60 e0       	ldi	r22, 0x00	; 0
    c74e:	70 e0       	ldi	r23, 0x00	; 0
    c750:	0e 94 42 7a 	call	0xf484	; 0xf484 <memset>

    obj->period = period;
    c754:	89 81       	ldd	r24, Y+1	; 0x01
    c756:	9a 81       	ldd	r25, Y+2	; 0x02
    c758:	2b 81       	ldd	r18, Y+3	; 0x03
    c75a:	3c 81       	ldd	r19, Y+4	; 0x04
    c75c:	fc 01       	movw	r30, r24
    c75e:	22 83       	std	Z+2, r18	; 0x02
    c760:	33 83       	std	Z+3, r19	; 0x03
    obj->cb = cb;
    c762:	89 81       	ldd	r24, Y+1	; 0x01
    c764:	9a 81       	ldd	r25, Y+2	; 0x02
    c766:	2d 81       	ldd	r18, Y+5	; 0x05
    c768:	3e 81       	ldd	r19, Y+6	; 0x06
    c76a:	fc 01       	movw	r30, r24
    c76c:	24 83       	std	Z+4, r18	; 0x04
    c76e:	35 83       	std	Z+5, r19	; 0x05
    obj->next = g_soft_timer_head;
    c770:	20 91 3a 46 	lds	r18, 0x463A	; 0x80463a <g_soft_timer_head>
    c774:	30 91 3b 46 	lds	r19, 0x463B	; 0x80463b <g_soft_timer_head+0x1>
    c778:	89 81       	ldd	r24, Y+1	; 0x01
    c77a:	9a 81       	ldd	r25, Y+2	; 0x02
    c77c:	fc 01       	movw	r30, r24
    c77e:	26 83       	std	Z+6, r18	; 0x06
    c780:	37 83       	std	Z+7, r19	; 0x07
    g_soft_timer_head = obj;
    c782:	89 81       	ldd	r24, Y+1	; 0x01
    c784:	9a 81       	ldd	r25, Y+2	; 0x02
    c786:	80 93 3a 46 	sts	0x463A, r24	; 0x80463a <g_soft_timer_head>
    c78a:	90 93 3b 46 	sts	0x463B, r25	; 0x80463b <g_soft_timer_head+0x1>
    c78e:	01 c0       	rjmp	.+2      	; 0xc792 <soft_timer_create+0x7c>
{
    soft_timer_obj_t *obj = NULL;
    obj = (soft_timer_obj_t *)malloc(sizeof(soft_timer_obj_t));
    if (obj == NULL)
    {
        return;
    c790:	00 00       	nop

    obj->period = period;
    obj->cb = cb;
    obj->next = g_soft_timer_head;
    g_soft_timer_head = obj;
}
    c792:	26 96       	adiw	r28, 0x06	; 6
    c794:	cd bf       	out	0x3d, r28	; 61
    c796:	de bf       	out	0x3e, r29	; 62
    c798:	df 91       	pop	r29
    c79a:	cf 91       	pop	r28
    c79c:	08 95       	ret

0000c79e <soft_timer_run>:

void soft_timer_run(void)
{
    c79e:	cf 93       	push	r28
    c7a0:	df 93       	push	r29
    c7a2:	00 d0       	rcall	.+0      	; 0xc7a4 <soft_timer_run+0x6>
    c7a4:	cd b7       	in	r28, 0x3d	; 61
    c7a6:	de b7       	in	r29, 0x3e	; 62
    soft_timer_obj_t *obj = g_soft_timer_head;
    c7a8:	80 91 3a 46 	lds	r24, 0x463A	; 0x80463a <g_soft_timer_head>
    c7ac:	90 91 3b 46 	lds	r25, 0x463B	; 0x80463b <g_soft_timer_head+0x1>
    c7b0:	89 83       	std	Y+1, r24	; 0x01
    c7b2:	9a 83       	std	Y+2, r25	; 0x02
    for (; obj != NULL; obj = obj->next)
    c7b4:	2a c0       	rjmp	.+84     	; 0xc80a <soft_timer_run+0x6c>
    {
        if ((soft_timer_base_t)(g_soft_timer_ticks - obj->cnt) >= obj->period)
    c7b6:	20 91 47 46 	lds	r18, 0x4647	; 0x804647 <g_soft_timer_ticks>
    c7ba:	30 91 48 46 	lds	r19, 0x4648	; 0x804648 <g_soft_timer_ticks+0x1>
    c7be:	89 81       	ldd	r24, Y+1	; 0x01
    c7c0:	9a 81       	ldd	r25, Y+2	; 0x02
    c7c2:	fc 01       	movw	r30, r24
    c7c4:	80 81       	ld	r24, Z
    c7c6:	91 81       	ldd	r25, Z+1	; 0x01
    c7c8:	28 1b       	sub	r18, r24
    c7ca:	39 0b       	sbc	r19, r25
    c7cc:	89 81       	ldd	r24, Y+1	; 0x01
    c7ce:	9a 81       	ldd	r25, Y+2	; 0x02
    c7d0:	fc 01       	movw	r30, r24
    c7d2:	82 81       	ldd	r24, Z+2	; 0x02
    c7d4:	93 81       	ldd	r25, Z+3	; 0x03
    c7d6:	28 17       	cp	r18, r24
    c7d8:	39 07       	cpc	r19, r25
    c7da:	80 f0       	brcs	.+32     	; 0xc7fc <soft_timer_run+0x5e>
        {
            obj->cnt = g_soft_timer_ticks;
    c7dc:	20 91 47 46 	lds	r18, 0x4647	; 0x804647 <g_soft_timer_ticks>
    c7e0:	30 91 48 46 	lds	r19, 0x4648	; 0x804648 <g_soft_timer_ticks+0x1>
    c7e4:	89 81       	ldd	r24, Y+1	; 0x01
    c7e6:	9a 81       	ldd	r25, Y+2	; 0x02
    c7e8:	fc 01       	movw	r30, r24
    c7ea:	20 83       	st	Z, r18
    c7ec:	31 83       	std	Z+1, r19	; 0x01
            obj->cb();
    c7ee:	89 81       	ldd	r24, Y+1	; 0x01
    c7f0:	9a 81       	ldd	r25, Y+2	; 0x02
    c7f2:	fc 01       	movw	r30, r24
    c7f4:	84 81       	ldd	r24, Z+4	; 0x04
    c7f6:	95 81       	ldd	r25, Z+5	; 0x05
    c7f8:	fc 01       	movw	r30, r24
    c7fa:	09 95       	icall
}

void soft_timer_run(void)
{
    soft_timer_obj_t *obj = g_soft_timer_head;
    for (; obj != NULL; obj = obj->next)
    c7fc:	89 81       	ldd	r24, Y+1	; 0x01
    c7fe:	9a 81       	ldd	r25, Y+2	; 0x02
    c800:	fc 01       	movw	r30, r24
    c802:	86 81       	ldd	r24, Z+6	; 0x06
    c804:	97 81       	ldd	r25, Z+7	; 0x07
    c806:	89 83       	std	Y+1, r24	; 0x01
    c808:	9a 83       	std	Y+2, r25	; 0x02
    c80a:	89 81       	ldd	r24, Y+1	; 0x01
    c80c:	9a 81       	ldd	r25, Y+2	; 0x02
    c80e:	89 2b       	or	r24, r25
    c810:	91 f6       	brne	.-92     	; 0xc7b6 <soft_timer_run+0x18>
        {
            obj->cnt = g_soft_timer_ticks;
            obj->cb();
        }
    }
    c812:	00 00       	nop
    c814:	0f 90       	pop	r0
    c816:	0f 90       	pop	r0
    c818:	df 91       	pop	r29
    c81a:	cf 91       	pop	r28
    c81c:	08 95       	ret

0000c81e <ADC_0_init>:
 * \return Nothing.
 */
void ADC_0_register_callback(adc_irq_cb_t f)
{
	ADC_0_cb = f;
}
    c81e:	cf 93       	push	r28
    c820:	df 93       	push	r29
    c822:	cd b7       	in	r28, 0x3d	; 61
    c824:	de b7       	in	r29, 0x3e	; 62
    c826:	80 e0       	ldi	r24, 0x00	; 0
    c828:	96 e0       	ldi	r25, 0x06	; 6
    c82a:	27 e0       	ldi	r18, 0x07	; 7
    c82c:	fc 01       	movw	r30, r24
    c82e:	21 83       	std	Z+1, r18	; 0x01
    c830:	80 e0       	ldi	r24, 0x00	; 0
    c832:	96 e0       	ldi	r25, 0x06	; 6
    c834:	21 e0       	ldi	r18, 0x01	; 1
    c836:	fc 01       	movw	r30, r24
    c838:	24 87       	std	Z+12, r18	; 0x0c
    c83a:	80 e0       	ldi	r24, 0x00	; 0
    c83c:	96 e0       	ldi	r25, 0x06	; 6
    c83e:	2f e7       	ldi	r18, 0x7F	; 127
    c840:	fc 01       	movw	r30, r24
    c842:	25 83       	std	Z+5, r18	; 0x05
    c844:	80 e0       	ldi	r24, 0x00	; 0
    c846:	96 e0       	ldi	r25, 0x06	; 6
    c848:	21 e0       	ldi	r18, 0x01	; 1
    c84a:	fc 01       	movw	r30, r24
    c84c:	20 83       	st	Z, r18
    c84e:	80 e0       	ldi	r24, 0x00	; 0
    c850:	df 91       	pop	r29
    c852:	cf 91       	pop	r28
    c854:	08 95       	ret

0000c856 <__vector_24>:

ISR(ADC0_RESRDY_vect)
{
    c856:	1f 92       	push	r1
    c858:	0f 92       	push	r0
    c85a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    c85e:	0f 92       	push	r0
    c860:	11 24       	eor	r1, r1
    c862:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    c866:	0f 92       	push	r0
    c868:	2f 93       	push	r18
    c86a:	3f 93       	push	r19
    c86c:	4f 93       	push	r20
    c86e:	5f 93       	push	r21
    c870:	6f 93       	push	r22
    c872:	7f 93       	push	r23
    c874:	8f 93       	push	r24
    c876:	9f 93       	push	r25
    c878:	af 93       	push	r26
    c87a:	bf 93       	push	r27
    c87c:	ef 93       	push	r30
    c87e:	ff 93       	push	r31
    c880:	cf 93       	push	r28
    c882:	df 93       	push	r29
    c884:	cd b7       	in	r28, 0x3d	; 61
    c886:	de b7       	in	r29, 0x3e	; 62
	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
    c888:	80 e0       	ldi	r24, 0x00	; 0
    c88a:	96 e0       	ldi	r25, 0x06	; 6
    c88c:	20 e0       	ldi	r18, 0x00	; 0
    c88e:	36 e0       	ldi	r19, 0x06	; 6
    c890:	f9 01       	movw	r30, r18
    c892:	25 85       	ldd	r18, Z+13	; 0x0d
    c894:	21 60       	ori	r18, 0x01	; 1
    c896:	fc 01       	movw	r30, r24
    c898:	25 87       	std	Z+13, r18	; 0x0d

	if (ADC_0_cb != NULL) {
    c89a:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <ADC_0_cb>
    c89e:	90 91 3d 46 	lds	r25, 0x463D	; 0x80463d <ADC_0_cb+0x1>
    c8a2:	89 2b       	or	r24, r25
    c8a4:	31 f0       	breq	.+12     	; 0xc8b2 <__vector_24+0x5c>
		ADC_0_cb();
    c8a6:	80 91 3c 46 	lds	r24, 0x463C	; 0x80463c <ADC_0_cb>
    c8aa:	90 91 3d 46 	lds	r25, 0x463D	; 0x80463d <ADC_0_cb+0x1>
    c8ae:	fc 01       	movw	r30, r24
    c8b0:	09 95       	icall
	}
}
    c8b2:	00 00       	nop
    c8b4:	df 91       	pop	r29
    c8b6:	cf 91       	pop	r28
    c8b8:	ff 91       	pop	r31
    c8ba:	ef 91       	pop	r30
    c8bc:	bf 91       	pop	r27
    c8be:	af 91       	pop	r26
    c8c0:	9f 91       	pop	r25
    c8c2:	8f 91       	pop	r24
    c8c4:	7f 91       	pop	r23
    c8c6:	6f 91       	pop	r22
    c8c8:	5f 91       	pop	r21
    c8ca:	4f 91       	pop	r20
    c8cc:	3f 91       	pop	r19
    c8ce:	2f 91       	pop	r18
    c8d0:	0f 90       	pop	r0
    c8d2:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x7e003b>
    c8d6:	0f 90       	pop	r0
    c8d8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7e003f>
    c8dc:	0f 90       	pop	r0
    c8de:	1f 90       	pop	r1
    c8e0:	18 95       	reti

0000c8e2 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
    c8e2:	cf 93       	push	r28
    c8e4:	df 93       	push	r29
    c8e6:	cd b7       	in	r28, 0x3d	; 61
    c8e8:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
    c8ea:	80 e8       	ldi	r24, 0x80	; 128
    c8ec:	90 e0       	ldi	r25, 0x00	; 0
    c8ee:	fc 01       	movw	r30, r24
    c8f0:	11 86       	std	Z+9, r1	; 0x09
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
    c8f2:	80 e0       	ldi	r24, 0x00	; 0
}
    c8f4:	df 91       	pop	r29
    c8f6:	cf 91       	pop	r28
    c8f8:	08 95       	ret

0000c8fa <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
    c8fa:	cf 93       	push	r28
    c8fc:	df 93       	push	r29
    c8fe:	00 d0       	rcall	.+0      	; 0xc900 <ccp_write_io+0x6>
    c900:	1f 92       	push	r1
    c902:	cd b7       	in	r28, 0x3d	; 61
    c904:	de b7       	in	r29, 0x3e	; 62
    c906:	89 83       	std	Y+1, r24	; 0x01
    c908:	9a 83       	std	Y+2, r25	; 0x02
    c90a:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
    c90c:	89 81       	ldd	r24, Y+1	; 0x01
    c90e:	9a 81       	ldd	r25, Y+2	; 0x02
    c910:	4b 81       	ldd	r20, Y+3	; 0x03
    c912:	68 ed       	ldi	r22, 0xD8	; 216
    c914:	0e 94 b8 69 	call	0xd370	; 0xd370 <protected_write_io>
}
    c918:	00 00       	nop
    c91a:	23 96       	adiw	r28, 0x03	; 3
    c91c:	cd bf       	out	0x3d, r28	; 61
    c91e:	de bf       	out	0x3e, r29	; 62
    c920:	df 91       	pop	r29
    c922:	cf 91       	pop	r28
    c924:	08 95       	ret

0000c926 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
    c926:	cf 93       	push	r28
    c928:	df 93       	push	r29
    c92a:	cd b7       	in	r28, 0x3d	; 61
    c92c:	de b7       	in	r29, 0x3e	; 62

	// ccp_write_io((void*)&(CLKCTRL.PLLCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run Standby: disabled */
	//		 | CLKCTRL_MULFAC_DISABLE_gc /* 1 */
	//		 | 0 << CLKCTRL_SOURCE_bp /* Select Source for PLL: disabled */);

	ccp_write_io((void *)&(CLKCTRL.OSCHFCTRLA),
    c92e:	64 e2       	ldi	r22, 0x24	; 36
    c930:	88 e6       	ldi	r24, 0x68	; 104
    c932:	90 e0       	ldi	r25, 0x00	; 0
    c934:	0e 94 7d 64 	call	0xc8fa	; 0xc8fa <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSCHF_gc /* Internal high-frequency oscillator */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
    c938:	80 e0       	ldi	r24, 0x00	; 0
}
    c93a:	df 91       	pop	r29
    c93c:	cf 91       	pop	r28
    c93e:	08 95       	ret

0000c940 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
    c940:	cf 93       	push	r28
    c942:	df 93       	push	r29
    c944:	cd b7       	in	r28, 0x3d	; 61
    c946:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
    c948:	78 94       	sei

	return 0;
    c94a:	80 e0       	ldi	r24, 0x00	; 0
}
    c94c:	df 91       	pop	r29
    c94e:	cf 91       	pop	r28
    c950:	08 95       	ret

0000c952 <DAC_0_init>:
 * \return Nothing
 */
void DAC_0_disable()
{
	DAC0.CTRLA &= ~DAC_ENABLE_bm;
}
    c952:	cf 93       	push	r28
    c954:	df 93       	push	r29
    c956:	cd b7       	in	r28, 0x3d	; 61
    c958:	de b7       	in	r29, 0x3e	; 62
    c95a:	80 ea       	ldi	r24, 0xA0	; 160
    c95c:	96 e0       	ldi	r25, 0x06	; 6
    c95e:	fc 01       	movw	r30, r24
    c960:	12 82       	std	Z+2, r1	; 0x02
    c962:	13 82       	std	Z+3, r1	; 0x03
    c964:	80 ea       	ldi	r24, 0xA0	; 160
    c966:	96 e0       	ldi	r25, 0x06	; 6
    c968:	21 e4       	ldi	r18, 0x41	; 65
    c96a:	fc 01       	movw	r30, r24
    c96c:	20 83       	st	Z, r18
    c96e:	80 e0       	ldi	r24, 0x00	; 0
    c970:	df 91       	pop	r29
    c972:	cf 91       	pop	r28
    c974:	08 95       	ret

0000c976 <DAC_0_set_output>:
 * \param[in] value The digital value to be converted to analogue voltage by the DAC
 *
 * \return Nothing
 */
void DAC_0_set_output(dac_resolution_t value)
{
    c976:	cf 93       	push	r28
    c978:	df 93       	push	r29
    c97a:	00 d0       	rcall	.+0      	; 0xc97c <DAC_0_set_output+0x6>
    c97c:	cd b7       	in	r28, 0x3d	; 61
    c97e:	de b7       	in	r29, 0x3e	; 62
    c980:	89 83       	std	Y+1, r24	; 0x01
    c982:	9a 83       	std	Y+2, r25	; 0x02
	value     = value << DAC_DATA_gp;
    c984:	89 81       	ldd	r24, Y+1	; 0x01
    c986:	9a 81       	ldd	r25, Y+2	; 0x02
    c988:	00 24       	eor	r0, r0
    c98a:	96 95       	lsr	r25
    c98c:	87 95       	ror	r24
    c98e:	07 94       	ror	r0
    c990:	96 95       	lsr	r25
    c992:	87 95       	ror	r24
    c994:	07 94       	ror	r0
    c996:	98 2f       	mov	r25, r24
    c998:	80 2d       	mov	r24, r0
    c99a:	89 83       	std	Y+1, r24	; 0x01
    c99c:	9a 83       	std	Y+2, r25	; 0x02
	value     = value & 0xFFC0;
    c99e:	89 81       	ldd	r24, Y+1	; 0x01
    c9a0:	9a 81       	ldd	r25, Y+2	; 0x02
    c9a2:	80 7c       	andi	r24, 0xC0	; 192
    c9a4:	89 83       	std	Y+1, r24	; 0x01
    c9a6:	9a 83       	std	Y+2, r25	; 0x02
	DAC0.DATA = value;
    c9a8:	80 ea       	ldi	r24, 0xA0	; 160
    c9aa:	96 e0       	ldi	r25, 0x06	; 6
    c9ac:	29 81       	ldd	r18, Y+1	; 0x01
    c9ae:	3a 81       	ldd	r19, Y+2	; 0x02
    c9b0:	fc 01       	movw	r30, r24
    c9b2:	22 83       	std	Z+2, r18	; 0x02
    c9b4:	33 83       	std	Z+3, r19	; 0x03
}
    c9b6:	00 00       	nop
    c9b8:	0f 90       	pop	r0
    c9ba:	0f 90       	pop	r0
    c9bc:	df 91       	pop	r29
    c9be:	cf 91       	pop	r28
    c9c0:	08 95       	ret

0000c9c2 <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    c9c2:	cf 93       	push	r28
    c9c4:	df 93       	push	r29
    c9c6:	00 d0       	rcall	.+0      	; 0xc9c8 <PORTA_set_pin_pull_mode+0x6>
    c9c8:	00 d0       	rcall	.+0      	; 0xc9ca <PORTA_set_pin_pull_mode+0x8>
    c9ca:	cd b7       	in	r28, 0x3d	; 61
    c9cc:	de b7       	in	r29, 0x3e	; 62
    c9ce:	8b 83       	std	Y+3, r24	; 0x03
    c9d0:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
    c9d2:	8b 81       	ldd	r24, Y+3	; 0x03
    c9d4:	88 2f       	mov	r24, r24
    c9d6:	90 e0       	ldi	r25, 0x00	; 0
    c9d8:	80 5f       	subi	r24, 0xF0	; 240
    c9da:	9b 4f       	sbci	r25, 0xFB	; 251
    c9dc:	89 83       	std	Y+1, r24	; 0x01
    c9de:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    c9e0:	8c 81       	ldd	r24, Y+4	; 0x04
    c9e2:	81 30       	cpi	r24, 0x01	; 1
    c9e4:	59 f4       	brne	.+22     	; 0xc9fc <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    c9e6:	89 81       	ldd	r24, Y+1	; 0x01
    c9e8:	9a 81       	ldd	r25, Y+2	; 0x02
    c9ea:	fc 01       	movw	r30, r24
    c9ec:	80 81       	ld	r24, Z
    c9ee:	28 2f       	mov	r18, r24
    c9f0:	28 60       	ori	r18, 0x08	; 8
    c9f2:	89 81       	ldd	r24, Y+1	; 0x01
    c9f4:	9a 81       	ldd	r25, Y+2	; 0x02
    c9f6:	fc 01       	movw	r30, r24
    c9f8:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    c9fa:	0d c0       	rjmp	.+26     	; 0xca16 <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    c9fc:	8c 81       	ldd	r24, Y+4	; 0x04
    c9fe:	88 23       	and	r24, r24
    ca00:	51 f4       	brne	.+20     	; 0xca16 <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    ca02:	89 81       	ldd	r24, Y+1	; 0x01
    ca04:	9a 81       	ldd	r25, Y+2	; 0x02
    ca06:	fc 01       	movw	r30, r24
    ca08:	80 81       	ld	r24, Z
    ca0a:	28 2f       	mov	r18, r24
    ca0c:	27 7f       	andi	r18, 0xF7	; 247
    ca0e:	89 81       	ldd	r24, Y+1	; 0x01
    ca10:	9a 81       	ldd	r25, Y+2	; 0x02
    ca12:	fc 01       	movw	r30, r24
    ca14:	20 83       	st	Z, r18
	}
}
    ca16:	00 00       	nop
    ca18:	24 96       	adiw	r28, 0x04	; 4
    ca1a:	cd bf       	out	0x3d, r28	; 61
    ca1c:	de bf       	out	0x3e, r29	; 62
    ca1e:	df 91       	pop	r29
    ca20:	cf 91       	pop	r28
    ca22:	08 95       	ret

0000ca24 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    ca24:	cf 93       	push	r28
    ca26:	df 93       	push	r29
    ca28:	00 d0       	rcall	.+0      	; 0xca2a <PORTA_set_pin_dir+0x6>
    ca2a:	cd b7       	in	r28, 0x3d	; 61
    ca2c:	de b7       	in	r29, 0x3e	; 62
    ca2e:	89 83       	std	Y+1, r24	; 0x01
    ca30:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    ca32:	8a 81       	ldd	r24, Y+2	; 0x02
    ca34:	88 2f       	mov	r24, r24
    ca36:	90 e0       	ldi	r25, 0x00	; 0
    ca38:	81 30       	cpi	r24, 0x01	; 1
    ca3a:	91 05       	cpc	r25, r1
    ca3c:	e1 f0       	breq	.+56     	; 0xca76 <PORTA_set_pin_dir+0x52>
    ca3e:	82 30       	cpi	r24, 0x02	; 2
    ca40:	91 05       	cpc	r25, r1
    ca42:	71 f1       	breq	.+92     	; 0xcaa0 <PORTA_set_pin_dir+0x7c>
    ca44:	89 2b       	or	r24, r25
    ca46:	09 f0       	breq	.+2      	; 0xca4a <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    ca48:	3b c0       	rjmp	.+118    	; 0xcac0 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    ca4a:	20 e0       	ldi	r18, 0x00	; 0
    ca4c:	30 e0       	ldi	r19, 0x00	; 0
    ca4e:	80 e0       	ldi	r24, 0x00	; 0
    ca50:	90 e0       	ldi	r25, 0x00	; 0
    ca52:	fc 01       	movw	r30, r24
    ca54:	80 81       	ld	r24, Z
    ca56:	68 2f       	mov	r22, r24
    ca58:	89 81       	ldd	r24, Y+1	; 0x01
    ca5a:	48 2f       	mov	r20, r24
    ca5c:	50 e0       	ldi	r21, 0x00	; 0
    ca5e:	81 e0       	ldi	r24, 0x01	; 1
    ca60:	90 e0       	ldi	r25, 0x00	; 0
    ca62:	02 c0       	rjmp	.+4      	; 0xca68 <PORTA_set_pin_dir+0x44>
    ca64:	88 0f       	add	r24, r24
    ca66:	99 1f       	adc	r25, r25
    ca68:	4a 95       	dec	r20
    ca6a:	e2 f7       	brpl	.-8      	; 0xca64 <PORTA_set_pin_dir+0x40>
    ca6c:	80 95       	com	r24
    ca6e:	86 23       	and	r24, r22
    ca70:	f9 01       	movw	r30, r18
    ca72:	80 83       	st	Z, r24
		break;
    ca74:	25 c0       	rjmp	.+74     	; 0xcac0 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    ca76:	20 e0       	ldi	r18, 0x00	; 0
    ca78:	30 e0       	ldi	r19, 0x00	; 0
    ca7a:	80 e0       	ldi	r24, 0x00	; 0
    ca7c:	90 e0       	ldi	r25, 0x00	; 0
    ca7e:	fc 01       	movw	r30, r24
    ca80:	80 81       	ld	r24, Z
    ca82:	68 2f       	mov	r22, r24
    ca84:	89 81       	ldd	r24, Y+1	; 0x01
    ca86:	48 2f       	mov	r20, r24
    ca88:	50 e0       	ldi	r21, 0x00	; 0
    ca8a:	81 e0       	ldi	r24, 0x01	; 1
    ca8c:	90 e0       	ldi	r25, 0x00	; 0
    ca8e:	02 c0       	rjmp	.+4      	; 0xca94 <PORTA_set_pin_dir+0x70>
    ca90:	88 0f       	add	r24, r24
    ca92:	99 1f       	adc	r25, r25
    ca94:	4a 95       	dec	r20
    ca96:	e2 f7       	brpl	.-8      	; 0xca90 <PORTA_set_pin_dir+0x6c>
    ca98:	86 2b       	or	r24, r22
    ca9a:	f9 01       	movw	r30, r18
    ca9c:	80 83       	st	Z, r24
		break;
    ca9e:	10 c0       	rjmp	.+32     	; 0xcac0 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    caa0:	89 81       	ldd	r24, Y+1	; 0x01
    caa2:	88 2f       	mov	r24, r24
    caa4:	90 e0       	ldi	r25, 0x00	; 0
    caa6:	80 5f       	subi	r24, 0xF0	; 240
    caa8:	9b 4f       	sbci	r25, 0xFB	; 251
    caaa:	29 81       	ldd	r18, Y+1	; 0x01
    caac:	22 2f       	mov	r18, r18
    caae:	30 e0       	ldi	r19, 0x00	; 0
    cab0:	20 5f       	subi	r18, 0xF0	; 240
    cab2:	3b 4f       	sbci	r19, 0xFB	; 251
    cab4:	f9 01       	movw	r30, r18
    cab6:	20 81       	ld	r18, Z
    cab8:	28 60       	ori	r18, 0x08	; 8
    caba:	fc 01       	movw	r30, r24
    cabc:	20 83       	st	Z, r18
		break;
    cabe:	00 00       	nop
	default:
		break;
	}
}
    cac0:	00 00       	nop
    cac2:	0f 90       	pop	r0
    cac4:	0f 90       	pop	r0
    cac6:	df 91       	pop	r29
    cac8:	cf 91       	pop	r28
    caca:	08 95       	ret

0000cacc <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
    cacc:	cf 93       	push	r28
    cace:	df 93       	push	r29
    cad0:	00 d0       	rcall	.+0      	; 0xcad2 <PORTA_set_pin_level+0x6>
    cad2:	cd b7       	in	r28, 0x3d	; 61
    cad4:	de b7       	in	r29, 0x3e	; 62
    cad6:	89 83       	std	Y+1, r24	; 0x01
    cad8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    cada:	8a 81       	ldd	r24, Y+2	; 0x02
    cadc:	88 23       	and	r24, r24
    cade:	a9 f0       	breq	.+42     	; 0xcb0a <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
    cae0:	20 e0       	ldi	r18, 0x00	; 0
    cae2:	30 e0       	ldi	r19, 0x00	; 0
    cae4:	80 e0       	ldi	r24, 0x00	; 0
    cae6:	90 e0       	ldi	r25, 0x00	; 0
    cae8:	fc 01       	movw	r30, r24
    caea:	81 81       	ldd	r24, Z+1	; 0x01
    caec:	68 2f       	mov	r22, r24
    caee:	89 81       	ldd	r24, Y+1	; 0x01
    caf0:	48 2f       	mov	r20, r24
    caf2:	50 e0       	ldi	r21, 0x00	; 0
    caf4:	81 e0       	ldi	r24, 0x01	; 1
    caf6:	90 e0       	ldi	r25, 0x00	; 0
    caf8:	02 c0       	rjmp	.+4      	; 0xcafe <PORTA_set_pin_level+0x32>
    cafa:	88 0f       	add	r24, r24
    cafc:	99 1f       	adc	r25, r25
    cafe:	4a 95       	dec	r20
    cb00:	e2 f7       	brpl	.-8      	; 0xcafa <PORTA_set_pin_level+0x2e>
    cb02:	86 2b       	or	r24, r22
    cb04:	f9 01       	movw	r30, r18
    cb06:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
    cb08:	15 c0       	rjmp	.+42     	; 0xcb34 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    cb0a:	20 e0       	ldi	r18, 0x00	; 0
    cb0c:	30 e0       	ldi	r19, 0x00	; 0
    cb0e:	80 e0       	ldi	r24, 0x00	; 0
    cb10:	90 e0       	ldi	r25, 0x00	; 0
    cb12:	fc 01       	movw	r30, r24
    cb14:	81 81       	ldd	r24, Z+1	; 0x01
    cb16:	68 2f       	mov	r22, r24
    cb18:	89 81       	ldd	r24, Y+1	; 0x01
    cb1a:	48 2f       	mov	r20, r24
    cb1c:	50 e0       	ldi	r21, 0x00	; 0
    cb1e:	81 e0       	ldi	r24, 0x01	; 1
    cb20:	90 e0       	ldi	r25, 0x00	; 0
    cb22:	02 c0       	rjmp	.+4      	; 0xcb28 <PORTA_set_pin_level+0x5c>
    cb24:	88 0f       	add	r24, r24
    cb26:	99 1f       	adc	r25, r25
    cb28:	4a 95       	dec	r20
    cb2a:	e2 f7       	brpl	.-8      	; 0xcb24 <PORTA_set_pin_level+0x58>
    cb2c:	80 95       	com	r24
    cb2e:	86 23       	and	r24, r22
    cb30:	f9 01       	movw	r30, r18
    cb32:	81 83       	std	Z+1, r24	; 0x01
	}
}
    cb34:	00 00       	nop
    cb36:	0f 90       	pop	r0
    cb38:	0f 90       	pop	r0
    cb3a:	df 91       	pop	r29
    cb3c:	cf 91       	pop	r28
    cb3e:	08 95       	ret

0000cb40 <PORTC_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    cb40:	cf 93       	push	r28
    cb42:	df 93       	push	r29
    cb44:	00 d0       	rcall	.+0      	; 0xcb46 <PORTC_set_pin_dir+0x6>
    cb46:	cd b7       	in	r28, 0x3d	; 61
    cb48:	de b7       	in	r29, 0x3e	; 62
    cb4a:	89 83       	std	Y+1, r24	; 0x01
    cb4c:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    cb4e:	8a 81       	ldd	r24, Y+2	; 0x02
    cb50:	88 2f       	mov	r24, r24
    cb52:	90 e0       	ldi	r25, 0x00	; 0
    cb54:	81 30       	cpi	r24, 0x01	; 1
    cb56:	91 05       	cpc	r25, r1
    cb58:	e1 f0       	breq	.+56     	; 0xcb92 <PORTC_set_pin_dir+0x52>
    cb5a:	82 30       	cpi	r24, 0x02	; 2
    cb5c:	91 05       	cpc	r25, r1
    cb5e:	71 f1       	breq	.+92     	; 0xcbbc <PORTC_set_pin_dir+0x7c>
    cb60:	89 2b       	or	r24, r25
    cb62:	09 f0       	breq	.+2      	; 0xcb66 <PORTC_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    cb64:	3b c0       	rjmp	.+118    	; 0xcbdc <PORTC_set_pin_dir+0x9c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    cb66:	88 e0       	ldi	r24, 0x08	; 8
    cb68:	90 e0       	ldi	r25, 0x00	; 0
    cb6a:	28 e0       	ldi	r18, 0x08	; 8
    cb6c:	30 e0       	ldi	r19, 0x00	; 0
    cb6e:	f9 01       	movw	r30, r18
    cb70:	20 81       	ld	r18, Z
    cb72:	62 2f       	mov	r22, r18
    cb74:	29 81       	ldd	r18, Y+1	; 0x01
    cb76:	42 2f       	mov	r20, r18
    cb78:	50 e0       	ldi	r21, 0x00	; 0
    cb7a:	21 e0       	ldi	r18, 0x01	; 1
    cb7c:	30 e0       	ldi	r19, 0x00	; 0
    cb7e:	02 c0       	rjmp	.+4      	; 0xcb84 <PORTC_set_pin_dir+0x44>
    cb80:	22 0f       	add	r18, r18
    cb82:	33 1f       	adc	r19, r19
    cb84:	4a 95       	dec	r20
    cb86:	e2 f7       	brpl	.-8      	; 0xcb80 <PORTC_set_pin_dir+0x40>
    cb88:	20 95       	com	r18
    cb8a:	26 23       	and	r18, r22
    cb8c:	fc 01       	movw	r30, r24
    cb8e:	20 83       	st	Z, r18
		break;
    cb90:	25 c0       	rjmp	.+74     	; 0xcbdc <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    cb92:	88 e0       	ldi	r24, 0x08	; 8
    cb94:	90 e0       	ldi	r25, 0x00	; 0
    cb96:	28 e0       	ldi	r18, 0x08	; 8
    cb98:	30 e0       	ldi	r19, 0x00	; 0
    cb9a:	f9 01       	movw	r30, r18
    cb9c:	20 81       	ld	r18, Z
    cb9e:	62 2f       	mov	r22, r18
    cba0:	29 81       	ldd	r18, Y+1	; 0x01
    cba2:	42 2f       	mov	r20, r18
    cba4:	50 e0       	ldi	r21, 0x00	; 0
    cba6:	21 e0       	ldi	r18, 0x01	; 1
    cba8:	30 e0       	ldi	r19, 0x00	; 0
    cbaa:	02 c0       	rjmp	.+4      	; 0xcbb0 <PORTC_set_pin_dir+0x70>
    cbac:	22 0f       	add	r18, r18
    cbae:	33 1f       	adc	r19, r19
    cbb0:	4a 95       	dec	r20
    cbb2:	e2 f7       	brpl	.-8      	; 0xcbac <PORTC_set_pin_dir+0x6c>
    cbb4:	26 2b       	or	r18, r22
    cbb6:	fc 01       	movw	r30, r24
    cbb8:	20 83       	st	Z, r18
		break;
    cbba:	10 c0       	rjmp	.+32     	; 0xcbdc <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    cbbc:	89 81       	ldd	r24, Y+1	; 0x01
    cbbe:	88 2f       	mov	r24, r24
    cbc0:	90 e0       	ldi	r25, 0x00	; 0
    cbc2:	80 5b       	subi	r24, 0xB0	; 176
    cbc4:	9b 4f       	sbci	r25, 0xFB	; 251
    cbc6:	29 81       	ldd	r18, Y+1	; 0x01
    cbc8:	22 2f       	mov	r18, r18
    cbca:	30 e0       	ldi	r19, 0x00	; 0
    cbcc:	20 5b       	subi	r18, 0xB0	; 176
    cbce:	3b 4f       	sbci	r19, 0xFB	; 251
    cbd0:	f9 01       	movw	r30, r18
    cbd2:	20 81       	ld	r18, Z
    cbd4:	28 60       	ori	r18, 0x08	; 8
    cbd6:	fc 01       	movw	r30, r24
    cbd8:	20 83       	st	Z, r18
		break;
    cbda:	00 00       	nop
	default:
		break;
	}
}
    cbdc:	00 00       	nop
    cbde:	0f 90       	pop	r0
    cbe0:	0f 90       	pop	r0
    cbe2:	df 91       	pop	r29
    cbe4:	cf 91       	pop	r28
    cbe6:	08 95       	ret

0000cbe8 <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    cbe8:	cf 93       	push	r28
    cbea:	df 93       	push	r29
    cbec:	00 d0       	rcall	.+0      	; 0xcbee <PORTC_set_pin_level+0x6>
    cbee:	cd b7       	in	r28, 0x3d	; 61
    cbf0:	de b7       	in	r29, 0x3e	; 62
    cbf2:	89 83       	std	Y+1, r24	; 0x01
    cbf4:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    cbf6:	8a 81       	ldd	r24, Y+2	; 0x02
    cbf8:	88 23       	and	r24, r24
    cbfa:	a9 f0       	breq	.+42     	; 0xcc26 <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    cbfc:	88 e0       	ldi	r24, 0x08	; 8
    cbfe:	90 e0       	ldi	r25, 0x00	; 0
    cc00:	28 e0       	ldi	r18, 0x08	; 8
    cc02:	30 e0       	ldi	r19, 0x00	; 0
    cc04:	f9 01       	movw	r30, r18
    cc06:	21 81       	ldd	r18, Z+1	; 0x01
    cc08:	62 2f       	mov	r22, r18
    cc0a:	29 81       	ldd	r18, Y+1	; 0x01
    cc0c:	42 2f       	mov	r20, r18
    cc0e:	50 e0       	ldi	r21, 0x00	; 0
    cc10:	21 e0       	ldi	r18, 0x01	; 1
    cc12:	30 e0       	ldi	r19, 0x00	; 0
    cc14:	02 c0       	rjmp	.+4      	; 0xcc1a <PORTC_set_pin_level+0x32>
    cc16:	22 0f       	add	r18, r18
    cc18:	33 1f       	adc	r19, r19
    cc1a:	4a 95       	dec	r20
    cc1c:	e2 f7       	brpl	.-8      	; 0xcc16 <PORTC_set_pin_level+0x2e>
    cc1e:	26 2b       	or	r18, r22
    cc20:	fc 01       	movw	r30, r24
    cc22:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    cc24:	15 c0       	rjmp	.+42     	; 0xcc50 <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    cc26:	88 e0       	ldi	r24, 0x08	; 8
    cc28:	90 e0       	ldi	r25, 0x00	; 0
    cc2a:	28 e0       	ldi	r18, 0x08	; 8
    cc2c:	30 e0       	ldi	r19, 0x00	; 0
    cc2e:	f9 01       	movw	r30, r18
    cc30:	21 81       	ldd	r18, Z+1	; 0x01
    cc32:	62 2f       	mov	r22, r18
    cc34:	29 81       	ldd	r18, Y+1	; 0x01
    cc36:	42 2f       	mov	r20, r18
    cc38:	50 e0       	ldi	r21, 0x00	; 0
    cc3a:	21 e0       	ldi	r18, 0x01	; 1
    cc3c:	30 e0       	ldi	r19, 0x00	; 0
    cc3e:	02 c0       	rjmp	.+4      	; 0xcc44 <PORTC_set_pin_level+0x5c>
    cc40:	22 0f       	add	r18, r18
    cc42:	33 1f       	adc	r19, r19
    cc44:	4a 95       	dec	r20
    cc46:	e2 f7       	brpl	.-8      	; 0xcc40 <PORTC_set_pin_level+0x58>
    cc48:	20 95       	com	r18
    cc4a:	26 23       	and	r18, r22
    cc4c:	fc 01       	movw	r30, r24
    cc4e:	21 83       	std	Z+1, r18	; 0x01
	}
}
    cc50:	00 00       	nop
    cc52:	0f 90       	pop	r0
    cc54:	0f 90       	pop	r0
    cc56:	df 91       	pop	r29
    cc58:	cf 91       	pop	r28
    cc5a:	08 95       	ret

0000cc5c <PORTD_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTD_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
    cc5c:	cf 93       	push	r28
    cc5e:	df 93       	push	r29
    cc60:	00 d0       	rcall	.+0      	; 0xcc62 <PORTD_set_pin_pull_mode+0x6>
    cc62:	00 d0       	rcall	.+0      	; 0xcc64 <PORTD_set_pin_pull_mode+0x8>
    cc64:	cd b7       	in	r28, 0x3d	; 61
    cc66:	de b7       	in	r29, 0x3e	; 62
    cc68:	8b 83       	std	Y+3, r24	; 0x03
    cc6a:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    cc6c:	8b 81       	ldd	r24, Y+3	; 0x03
    cc6e:	88 2f       	mov	r24, r24
    cc70:	90 e0       	ldi	r25, 0x00	; 0
    cc72:	80 59       	subi	r24, 0x90	; 144
    cc74:	9b 4f       	sbci	r25, 0xFB	; 251
    cc76:	89 83       	std	Y+1, r24	; 0x01
    cc78:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
    cc7a:	8c 81       	ldd	r24, Y+4	; 0x04
    cc7c:	81 30       	cpi	r24, 0x01	; 1
    cc7e:	59 f4       	brne	.+22     	; 0xcc96 <PORTD_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    cc80:	89 81       	ldd	r24, Y+1	; 0x01
    cc82:	9a 81       	ldd	r25, Y+2	; 0x02
    cc84:	fc 01       	movw	r30, r24
    cc86:	80 81       	ld	r24, Z
    cc88:	28 2f       	mov	r18, r24
    cc8a:	28 60       	ori	r18, 0x08	; 8
    cc8c:	89 81       	ldd	r24, Y+1	; 0x01
    cc8e:	9a 81       	ldd	r25, Y+2	; 0x02
    cc90:	fc 01       	movw	r30, r24
    cc92:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
    cc94:	0d c0       	rjmp	.+26     	; 0xccb0 <PORTD_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
    cc96:	8c 81       	ldd	r24, Y+4	; 0x04
    cc98:	88 23       	and	r24, r24
    cc9a:	51 f4       	brne	.+20     	; 0xccb0 <PORTD_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    cc9c:	89 81       	ldd	r24, Y+1	; 0x01
    cc9e:	9a 81       	ldd	r25, Y+2	; 0x02
    cca0:	fc 01       	movw	r30, r24
    cca2:	80 81       	ld	r24, Z
    cca4:	28 2f       	mov	r18, r24
    cca6:	27 7f       	andi	r18, 0xF7	; 247
    cca8:	89 81       	ldd	r24, Y+1	; 0x01
    ccaa:	9a 81       	ldd	r25, Y+2	; 0x02
    ccac:	fc 01       	movw	r30, r24
    ccae:	20 83       	st	Z, r18
	}
}
    ccb0:	00 00       	nop
    ccb2:	24 96       	adiw	r28, 0x04	; 4
    ccb4:	cd bf       	out	0x3d, r28	; 61
    ccb6:	de bf       	out	0x3e, r29	; 62
    ccb8:	df 91       	pop	r29
    ccba:	cf 91       	pop	r28
    ccbc:	08 95       	ret

0000ccbe <PORTD_pin_set_isc>:
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 *
 */
static inline void PORTD_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
    ccbe:	cf 93       	push	r28
    ccc0:	df 93       	push	r29
    ccc2:	00 d0       	rcall	.+0      	; 0xccc4 <PORTD_pin_set_isc+0x6>
    ccc4:	00 d0       	rcall	.+0      	; 0xccc6 <PORTD_pin_set_isc+0x8>
    ccc6:	cd b7       	in	r28, 0x3d	; 61
    ccc8:	de b7       	in	r29, 0x3e	; 62
    ccca:	8b 83       	std	Y+3, r24	; 0x03
    cccc:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTD + 0x10 + pin);
    ccce:	8b 81       	ldd	r24, Y+3	; 0x03
    ccd0:	88 2f       	mov	r24, r24
    ccd2:	90 e0       	ldi	r25, 0x00	; 0
    ccd4:	80 59       	subi	r24, 0x90	; 144
    ccd6:	9b 4f       	sbci	r25, 0xFB	; 251
    ccd8:	89 83       	std	Y+1, r24	; 0x01
    ccda:	9a 83       	std	Y+2, r25	; 0x02

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    ccdc:	89 81       	ldd	r24, Y+1	; 0x01
    ccde:	9a 81       	ldd	r25, Y+2	; 0x02
    cce0:	fc 01       	movw	r30, r24
    cce2:	80 81       	ld	r24, Z
    cce4:	98 2f       	mov	r25, r24
    cce6:	98 7f       	andi	r25, 0xF8	; 248
    cce8:	8c 81       	ldd	r24, Y+4	; 0x04
    ccea:	89 2b       	or	r24, r25
    ccec:	28 2f       	mov	r18, r24
    ccee:	89 81       	ldd	r24, Y+1	; 0x01
    ccf0:	9a 81       	ldd	r25, Y+2	; 0x02
    ccf2:	fc 01       	movw	r30, r24
    ccf4:	20 83       	st	Z, r18
}
    ccf6:	00 00       	nop
    ccf8:	24 96       	adiw	r28, 0x04	; 4
    ccfa:	cd bf       	out	0x3d, r28	; 61
    ccfc:	de bf       	out	0x3e, r29	; 62
    ccfe:	df 91       	pop	r29
    cd00:	cf 91       	pop	r28
    cd02:	08 95       	ret

0000cd04 <PORTF_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
    cd04:	cf 93       	push	r28
    cd06:	df 93       	push	r29
    cd08:	00 d0       	rcall	.+0      	; 0xcd0a <PORTF_set_pin_dir+0x6>
    cd0a:	cd b7       	in	r28, 0x3d	; 61
    cd0c:	de b7       	in	r29, 0x3e	; 62
    cd0e:	89 83       	std	Y+1, r24	; 0x01
    cd10:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
    cd12:	8a 81       	ldd	r24, Y+2	; 0x02
    cd14:	88 2f       	mov	r24, r24
    cd16:	90 e0       	ldi	r25, 0x00	; 0
    cd18:	81 30       	cpi	r24, 0x01	; 1
    cd1a:	91 05       	cpc	r25, r1
    cd1c:	e1 f0       	breq	.+56     	; 0xcd56 <PORTF_set_pin_dir+0x52>
    cd1e:	82 30       	cpi	r24, 0x02	; 2
    cd20:	91 05       	cpc	r25, r1
    cd22:	71 f1       	breq	.+92     	; 0xcd80 <PORTF_set_pin_dir+0x7c>
    cd24:	89 2b       	or	r24, r25
    cd26:	09 f0       	breq	.+2      	; 0xcd2a <PORTF_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
    cd28:	3b c0       	rjmp	.+118    	; 0xcda0 <PORTF_set_pin_dir+0x9c>
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
    cd2a:	84 e1       	ldi	r24, 0x14	; 20
    cd2c:	90 e0       	ldi	r25, 0x00	; 0
    cd2e:	24 e1       	ldi	r18, 0x14	; 20
    cd30:	30 e0       	ldi	r19, 0x00	; 0
    cd32:	f9 01       	movw	r30, r18
    cd34:	20 81       	ld	r18, Z
    cd36:	62 2f       	mov	r22, r18
    cd38:	29 81       	ldd	r18, Y+1	; 0x01
    cd3a:	42 2f       	mov	r20, r18
    cd3c:	50 e0       	ldi	r21, 0x00	; 0
    cd3e:	21 e0       	ldi	r18, 0x01	; 1
    cd40:	30 e0       	ldi	r19, 0x00	; 0
    cd42:	02 c0       	rjmp	.+4      	; 0xcd48 <PORTF_set_pin_dir+0x44>
    cd44:	22 0f       	add	r18, r18
    cd46:	33 1f       	adc	r19, r19
    cd48:	4a 95       	dec	r20
    cd4a:	e2 f7       	brpl	.-8      	; 0xcd44 <PORTF_set_pin_dir+0x40>
    cd4c:	20 95       	com	r18
    cd4e:	26 23       	and	r18, r22
    cd50:	fc 01       	movw	r30, r24
    cd52:	20 83       	st	Z, r18
		break;
    cd54:	25 c0       	rjmp	.+74     	; 0xcda0 <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
    cd56:	84 e1       	ldi	r24, 0x14	; 20
    cd58:	90 e0       	ldi	r25, 0x00	; 0
    cd5a:	24 e1       	ldi	r18, 0x14	; 20
    cd5c:	30 e0       	ldi	r19, 0x00	; 0
    cd5e:	f9 01       	movw	r30, r18
    cd60:	20 81       	ld	r18, Z
    cd62:	62 2f       	mov	r22, r18
    cd64:	29 81       	ldd	r18, Y+1	; 0x01
    cd66:	42 2f       	mov	r20, r18
    cd68:	50 e0       	ldi	r21, 0x00	; 0
    cd6a:	21 e0       	ldi	r18, 0x01	; 1
    cd6c:	30 e0       	ldi	r19, 0x00	; 0
    cd6e:	02 c0       	rjmp	.+4      	; 0xcd74 <PORTF_set_pin_dir+0x70>
    cd70:	22 0f       	add	r18, r18
    cd72:	33 1f       	adc	r19, r19
    cd74:	4a 95       	dec	r20
    cd76:	e2 f7       	brpl	.-8      	; 0xcd70 <PORTF_set_pin_dir+0x6c>
    cd78:	26 2b       	or	r18, r22
    cd7a:	fc 01       	movw	r30, r24
    cd7c:	20 83       	st	Z, r18
		break;
    cd7e:	10 c0       	rjmp	.+32     	; 0xcda0 <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
    cd80:	89 81       	ldd	r24, Y+1	; 0x01
    cd82:	88 2f       	mov	r24, r24
    cd84:	90 e0       	ldi	r25, 0x00	; 0
    cd86:	80 55       	subi	r24, 0x50	; 80
    cd88:	9b 4f       	sbci	r25, 0xFB	; 251
    cd8a:	29 81       	ldd	r18, Y+1	; 0x01
    cd8c:	22 2f       	mov	r18, r18
    cd8e:	30 e0       	ldi	r19, 0x00	; 0
    cd90:	20 55       	subi	r18, 0x50	; 80
    cd92:	3b 4f       	sbci	r19, 0xFB	; 251
    cd94:	f9 01       	movw	r30, r18
    cd96:	20 81       	ld	r18, Z
    cd98:	28 60       	ori	r18, 0x08	; 8
    cd9a:	fc 01       	movw	r30, r24
    cd9c:	20 83       	st	Z, r18
		break;
    cd9e:	00 00       	nop
	default:
		break;
	}
}
    cda0:	00 00       	nop
    cda2:	0f 90       	pop	r0
    cda4:	0f 90       	pop	r0
    cda6:	df 91       	pop	r29
    cda8:	cf 91       	pop	r28
    cdaa:	08 95       	ret

0000cdac <PORTF_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
    cdac:	cf 93       	push	r28
    cdae:	df 93       	push	r29
    cdb0:	00 d0       	rcall	.+0      	; 0xcdb2 <PORTF_set_pin_level+0x6>
    cdb2:	cd b7       	in	r28, 0x3d	; 61
    cdb4:	de b7       	in	r29, 0x3e	; 62
    cdb6:	89 83       	std	Y+1, r24	; 0x01
    cdb8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    cdba:	8a 81       	ldd	r24, Y+2	; 0x02
    cdbc:	88 23       	and	r24, r24
    cdbe:	a9 f0       	breq	.+42     	; 0xcdea <PORTF_set_pin_level+0x3e>
		VPORTF.OUT |= (1 << pin);
    cdc0:	84 e1       	ldi	r24, 0x14	; 20
    cdc2:	90 e0       	ldi	r25, 0x00	; 0
    cdc4:	24 e1       	ldi	r18, 0x14	; 20
    cdc6:	30 e0       	ldi	r19, 0x00	; 0
    cdc8:	f9 01       	movw	r30, r18
    cdca:	21 81       	ldd	r18, Z+1	; 0x01
    cdcc:	62 2f       	mov	r22, r18
    cdce:	29 81       	ldd	r18, Y+1	; 0x01
    cdd0:	42 2f       	mov	r20, r18
    cdd2:	50 e0       	ldi	r21, 0x00	; 0
    cdd4:	21 e0       	ldi	r18, 0x01	; 1
    cdd6:	30 e0       	ldi	r19, 0x00	; 0
    cdd8:	02 c0       	rjmp	.+4      	; 0xcdde <PORTF_set_pin_level+0x32>
    cdda:	22 0f       	add	r18, r18
    cddc:	33 1f       	adc	r19, r19
    cdde:	4a 95       	dec	r20
    cde0:	e2 f7       	brpl	.-8      	; 0xcdda <PORTF_set_pin_level+0x2e>
    cde2:	26 2b       	or	r18, r22
    cde4:	fc 01       	movw	r30, r24
    cde6:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTF.OUT &= ~(1 << pin);
	}
}
    cde8:	15 c0       	rjmp	.+42     	; 0xce14 <PORTF_set_pin_level+0x68>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
    cdea:	84 e1       	ldi	r24, 0x14	; 20
    cdec:	90 e0       	ldi	r25, 0x00	; 0
    cdee:	24 e1       	ldi	r18, 0x14	; 20
    cdf0:	30 e0       	ldi	r19, 0x00	; 0
    cdf2:	f9 01       	movw	r30, r18
    cdf4:	21 81       	ldd	r18, Z+1	; 0x01
    cdf6:	62 2f       	mov	r22, r18
    cdf8:	29 81       	ldd	r18, Y+1	; 0x01
    cdfa:	42 2f       	mov	r20, r18
    cdfc:	50 e0       	ldi	r21, 0x00	; 0
    cdfe:	21 e0       	ldi	r18, 0x01	; 1
    ce00:	30 e0       	ldi	r19, 0x00	; 0
    ce02:	02 c0       	rjmp	.+4      	; 0xce08 <PORTF_set_pin_level+0x5c>
    ce04:	22 0f       	add	r18, r18
    ce06:	33 1f       	adc	r19, r19
    ce08:	4a 95       	dec	r20
    ce0a:	e2 f7       	brpl	.-8      	; 0xce04 <PORTF_set_pin_level+0x58>
    ce0c:	20 95       	com	r18
    ce0e:	26 23       	and	r18, r22
    ce10:	fc 01       	movw	r30, r24
    ce12:	21 83       	std	Z+1, r18	; 0x01
	}
}
    ce14:	00 00       	nop
    ce16:	0f 90       	pop	r0
    ce18:	0f 90       	pop	r0
    ce1a:	df 91       	pop	r29
    ce1c:	cf 91       	pop	r28
    ce1e:	08 95       	ret

0000ce20 <PA0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA0_set_dir(const enum port_dir dir)
{
    ce20:	cf 93       	push	r28
    ce22:	df 93       	push	r29
    ce24:	1f 92       	push	r1
    ce26:	cd b7       	in	r28, 0x3d	; 61
    ce28:	de b7       	in	r29, 0x3e	; 62
    ce2a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(0, dir);
    ce2c:	69 81       	ldd	r22, Y+1	; 0x01
    ce2e:	80 e0       	ldi	r24, 0x00	; 0
    ce30:	0e 94 12 65 	call	0xca24	; 0xca24 <PORTA_set_pin_dir>
}
    ce34:	00 00       	nop
    ce36:	0f 90       	pop	r0
    ce38:	df 91       	pop	r29
    ce3a:	cf 91       	pop	r28
    ce3c:	08 95       	ret

0000ce3e <PA0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA0_set_level(const bool level)
{
    ce3e:	cf 93       	push	r28
    ce40:	df 93       	push	r29
    ce42:	1f 92       	push	r1
    ce44:	cd b7       	in	r28, 0x3d	; 61
    ce46:	de b7       	in	r29, 0x3e	; 62
    ce48:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(0, level);
    ce4a:	69 81       	ldd	r22, Y+1	; 0x01
    ce4c:	80 e0       	ldi	r24, 0x00	; 0
    ce4e:	0e 94 66 65 	call	0xcacc	; 0xcacc <PORTA_set_pin_level>
}
    ce52:	00 00       	nop
    ce54:	0f 90       	pop	r0
    ce56:	df 91       	pop	r29
    ce58:	cf 91       	pop	r28
    ce5a:	08 95       	ret

0000ce5c <PA1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA1_set_pull_mode(const enum port_pull_mode pull_mode)
{
    ce5c:	cf 93       	push	r28
    ce5e:	df 93       	push	r29
    ce60:	1f 92       	push	r1
    ce62:	cd b7       	in	r28, 0x3d	; 61
    ce64:	de b7       	in	r29, 0x3e	; 62
    ce66:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(1, pull_mode);
    ce68:	69 81       	ldd	r22, Y+1	; 0x01
    ce6a:	81 e0       	ldi	r24, 0x01	; 1
    ce6c:	0e 94 e1 64 	call	0xc9c2	; 0xc9c2 <PORTA_set_pin_pull_mode>
}
    ce70:	00 00       	nop
    ce72:	0f 90       	pop	r0
    ce74:	df 91       	pop	r29
    ce76:	cf 91       	pop	r28
    ce78:	08 95       	ret

0000ce7a <PA1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA1_set_dir(const enum port_dir dir)
{
    ce7a:	cf 93       	push	r28
    ce7c:	df 93       	push	r29
    ce7e:	1f 92       	push	r1
    ce80:	cd b7       	in	r28, 0x3d	; 61
    ce82:	de b7       	in	r29, 0x3e	; 62
    ce84:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(1, dir);
    ce86:	69 81       	ldd	r22, Y+1	; 0x01
    ce88:	81 e0       	ldi	r24, 0x01	; 1
    ce8a:	0e 94 12 65 	call	0xca24	; 0xca24 <PORTA_set_pin_dir>
}
    ce8e:	00 00       	nop
    ce90:	0f 90       	pop	r0
    ce92:	df 91       	pop	r29
    ce94:	cf 91       	pop	r28
    ce96:	08 95       	ret

0000ce98 <PA2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA2_set_dir(const enum port_dir dir)
{
    ce98:	cf 93       	push	r28
    ce9a:	df 93       	push	r29
    ce9c:	1f 92       	push	r1
    ce9e:	cd b7       	in	r28, 0x3d	; 61
    cea0:	de b7       	in	r29, 0x3e	; 62
    cea2:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
    cea4:	69 81       	ldd	r22, Y+1	; 0x01
    cea6:	82 e0       	ldi	r24, 0x02	; 2
    cea8:	0e 94 12 65 	call	0xca24	; 0xca24 <PORTA_set_pin_dir>
}
    ceac:	00 00       	nop
    ceae:	0f 90       	pop	r0
    ceb0:	df 91       	pop	r29
    ceb2:	cf 91       	pop	r28
    ceb4:	08 95       	ret

0000ceb6 <PA2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA2_set_level(const bool level)
{
    ceb6:	cf 93       	push	r28
    ceb8:	df 93       	push	r29
    ceba:	1f 92       	push	r1
    cebc:	cd b7       	in	r28, 0x3d	; 61
    cebe:	de b7       	in	r29, 0x3e	; 62
    cec0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(2, level);
    cec2:	69 81       	ldd	r22, Y+1	; 0x01
    cec4:	82 e0       	ldi	r24, 0x02	; 2
    cec6:	0e 94 66 65 	call	0xcacc	; 0xcacc <PORTA_set_pin_level>
}
    ceca:	00 00       	nop
    cecc:	0f 90       	pop	r0
    cece:	df 91       	pop	r29
    ced0:	cf 91       	pop	r28
    ced2:	08 95       	ret

0000ced4 <MOTOR_GATE_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void MOTOR_GATE_set_dir(const enum port_dir dir)
{
    ced4:	cf 93       	push	r28
    ced6:	df 93       	push	r29
    ced8:	1f 92       	push	r1
    ceda:	cd b7       	in	r28, 0x3d	; 61
    cedc:	de b7       	in	r29, 0x3e	; 62
    cede:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(0, dir);
    cee0:	69 81       	ldd	r22, Y+1	; 0x01
    cee2:	80 e0       	ldi	r24, 0x00	; 0
    cee4:	0e 94 a0 65 	call	0xcb40	; 0xcb40 <PORTC_set_pin_dir>
}
    cee8:	00 00       	nop
    ceea:	0f 90       	pop	r0
    ceec:	df 91       	pop	r29
    ceee:	cf 91       	pop	r28
    cef0:	08 95       	ret

0000cef2 <MOTOR_GATE_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void MOTOR_GATE_set_level(const bool level)
{
    cef2:	cf 93       	push	r28
    cef4:	df 93       	push	r29
    cef6:	1f 92       	push	r1
    cef8:	cd b7       	in	r28, 0x3d	; 61
    cefa:	de b7       	in	r29, 0x3e	; 62
    cefc:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(0, level);
    cefe:	69 81       	ldd	r22, Y+1	; 0x01
    cf00:	80 e0       	ldi	r24, 0x00	; 0
    cf02:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <PORTC_set_pin_level>
}
    cf06:	00 00       	nop
    cf08:	0f 90       	pop	r0
    cf0a:	df 91       	pop	r29
    cf0c:	cf 91       	pop	r28
    cf0e:	08 95       	ret

0000cf10 <LED_MCLK_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_MCLK_set_dir(const enum port_dir dir)
{
    cf10:	cf 93       	push	r28
    cf12:	df 93       	push	r29
    cf14:	1f 92       	push	r1
    cf16:	cd b7       	in	r28, 0x3d	; 61
    cf18:	de b7       	in	r29, 0x3e	; 62
    cf1a:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(1, dir);
    cf1c:	69 81       	ldd	r22, Y+1	; 0x01
    cf1e:	81 e0       	ldi	r24, 0x01	; 1
    cf20:	0e 94 a0 65 	call	0xcb40	; 0xcb40 <PORTC_set_pin_dir>
}
    cf24:	00 00       	nop
    cf26:	0f 90       	pop	r0
    cf28:	df 91       	pop	r29
    cf2a:	cf 91       	pop	r28
    cf2c:	08 95       	ret

0000cf2e <LED_MCLK_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_MCLK_set_level(const bool level)
{
    cf2e:	cf 93       	push	r28
    cf30:	df 93       	push	r29
    cf32:	1f 92       	push	r1
    cf34:	cd b7       	in	r28, 0x3d	; 61
    cf36:	de b7       	in	r29, 0x3e	; 62
    cf38:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(1, level);
    cf3a:	69 81       	ldd	r22, Y+1	; 0x01
    cf3c:	81 e0       	ldi	r24, 0x01	; 1
    cf3e:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <PORTC_set_pin_level>
}
    cf42:	00 00       	nop
    cf44:	0f 90       	pop	r0
    cf46:	df 91       	pop	r29
    cf48:	cf 91       	pop	r28
    cf4a:	08 95       	ret

0000cf4c <LED_CS_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_CS_set_dir(const enum port_dir dir)
{
    cf4c:	cf 93       	push	r28
    cf4e:	df 93       	push	r29
    cf50:	1f 92       	push	r1
    cf52:	cd b7       	in	r28, 0x3d	; 61
    cf54:	de b7       	in	r29, 0x3e	; 62
    cf56:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(2, dir);
    cf58:	69 81       	ldd	r22, Y+1	; 0x01
    cf5a:	82 e0       	ldi	r24, 0x02	; 2
    cf5c:	0e 94 a0 65 	call	0xcb40	; 0xcb40 <PORTC_set_pin_dir>
}
    cf60:	00 00       	nop
    cf62:	0f 90       	pop	r0
    cf64:	df 91       	pop	r29
    cf66:	cf 91       	pop	r28
    cf68:	08 95       	ret

0000cf6a <LED_CS_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_CS_set_level(const bool level)
{
    cf6a:	cf 93       	push	r28
    cf6c:	df 93       	push	r29
    cf6e:	1f 92       	push	r1
    cf70:	cd b7       	in	r28, 0x3d	; 61
    cf72:	de b7       	in	r29, 0x3e	; 62
    cf74:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(2, level);
    cf76:	69 81       	ldd	r22, Y+1	; 0x01
    cf78:	82 e0       	ldi	r24, 0x02	; 2
    cf7a:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <PORTC_set_pin_level>
}
    cf7e:	00 00       	nop
    cf80:	0f 90       	pop	r0
    cf82:	df 91       	pop	r29
    cf84:	cf 91       	pop	r28
    cf86:	08 95       	ret

0000cf88 <LED_OUT_DAT_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_OUT_DAT_set_dir(const enum port_dir dir)
{
    cf88:	cf 93       	push	r28
    cf8a:	df 93       	push	r29
    cf8c:	1f 92       	push	r1
    cf8e:	cd b7       	in	r28, 0x3d	; 61
    cf90:	de b7       	in	r29, 0x3e	; 62
    cf92:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(3, dir);
    cf94:	69 81       	ldd	r22, Y+1	; 0x01
    cf96:	83 e0       	ldi	r24, 0x03	; 3
    cf98:	0e 94 a0 65 	call	0xcb40	; 0xcb40 <PORTC_set_pin_dir>
}
    cf9c:	00 00       	nop
    cf9e:	0f 90       	pop	r0
    cfa0:	df 91       	pop	r29
    cfa2:	cf 91       	pop	r28
    cfa4:	08 95       	ret

0000cfa6 <LED_OUT_DAT_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_OUT_DAT_set_level(const bool level)
{
    cfa6:	cf 93       	push	r28
    cfa8:	df 93       	push	r29
    cfaa:	1f 92       	push	r1
    cfac:	cd b7       	in	r28, 0x3d	; 61
    cfae:	de b7       	in	r29, 0x3e	; 62
    cfb0:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(3, level);
    cfb2:	69 81       	ldd	r22, Y+1	; 0x01
    cfb4:	83 e0       	ldi	r24, 0x03	; 3
    cfb6:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <PORTC_set_pin_level>
}
    cfba:	00 00       	nop
    cfbc:	0f 90       	pop	r0
    cfbe:	df 91       	pop	r29
    cfc0:	cf 91       	pop	r28
    cfc2:	08 95       	ret

0000cfc4 <PD5_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD5_set_pull_mode(const enum port_pull_mode pull_mode)
{
    cfc4:	cf 93       	push	r28
    cfc6:	df 93       	push	r29
    cfc8:	1f 92       	push	r1
    cfca:	cd b7       	in	r28, 0x3d	; 61
    cfcc:	de b7       	in	r29, 0x3e	; 62
    cfce:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(5, pull_mode);
    cfd0:	69 81       	ldd	r22, Y+1	; 0x01
    cfd2:	85 e0       	ldi	r24, 0x05	; 5
    cfd4:	0e 94 2e 66 	call	0xcc5c	; 0xcc5c <PORTD_set_pin_pull_mode>
}
    cfd8:	00 00       	nop
    cfda:	0f 90       	pop	r0
    cfdc:	df 91       	pop	r29
    cfde:	cf 91       	pop	r28
    cfe0:	08 95       	ret

0000cfe2 <PD5_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD5_set_isc(const PORT_ISC_t isc)
{
    cfe2:	cf 93       	push	r28
    cfe4:	df 93       	push	r29
    cfe6:	1f 92       	push	r1
    cfe8:	cd b7       	in	r28, 0x3d	; 61
    cfea:	de b7       	in	r29, 0x3e	; 62
    cfec:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(5, isc);
    cfee:	69 81       	ldd	r22, Y+1	; 0x01
    cff0:	85 e0       	ldi	r24, 0x05	; 5
    cff2:	0e 94 5f 66 	call	0xccbe	; 0xccbe <PORTD_pin_set_isc>
}
    cff6:	00 00       	nop
    cff8:	0f 90       	pop	r0
    cffa:	df 91       	pop	r29
    cffc:	cf 91       	pop	r28
    cffe:	08 95       	ret

0000d000 <PD6_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD6_set_pull_mode(const enum port_pull_mode pull_mode)
{
    d000:	cf 93       	push	r28
    d002:	df 93       	push	r29
    d004:	1f 92       	push	r1
    d006:	cd b7       	in	r28, 0x3d	; 61
    d008:	de b7       	in	r29, 0x3e	; 62
    d00a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(6, pull_mode);
    d00c:	69 81       	ldd	r22, Y+1	; 0x01
    d00e:	86 e0       	ldi	r24, 0x06	; 6
    d010:	0e 94 2e 66 	call	0xcc5c	; 0xcc5c <PORTD_set_pin_pull_mode>
}
    d014:	00 00       	nop
    d016:	0f 90       	pop	r0
    d018:	df 91       	pop	r29
    d01a:	cf 91       	pop	r28
    d01c:	08 95       	ret

0000d01e <PD6_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD6_set_isc(const PORT_ISC_t isc)
{
    d01e:	cf 93       	push	r28
    d020:	df 93       	push	r29
    d022:	1f 92       	push	r1
    d024:	cd b7       	in	r28, 0x3d	; 61
    d026:	de b7       	in	r29, 0x3e	; 62
    d028:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(6, isc);
    d02a:	69 81       	ldd	r22, Y+1	; 0x01
    d02c:	86 e0       	ldi	r24, 0x06	; 6
    d02e:	0e 94 5f 66 	call	0xccbe	; 0xccbe <PORTD_pin_set_isc>
}
    d032:	00 00       	nop
    d034:	0f 90       	pop	r0
    d036:	df 91       	pop	r29
    d038:	cf 91       	pop	r28
    d03a:	08 95       	ret

0000d03c <PD7_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PD7_set_pull_mode(const enum port_pull_mode pull_mode)
{
    d03c:	cf 93       	push	r28
    d03e:	df 93       	push	r29
    d040:	1f 92       	push	r1
    d042:	cd b7       	in	r28, 0x3d	; 61
    d044:	de b7       	in	r29, 0x3e	; 62
    d046:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_pull_mode(7, pull_mode);
    d048:	69 81       	ldd	r22, Y+1	; 0x01
    d04a:	87 e0       	ldi	r24, 0x07	; 7
    d04c:	0e 94 2e 66 	call	0xcc5c	; 0xcc5c <PORTD_set_pin_pull_mode>
}
    d050:	00 00       	nop
    d052:	0f 90       	pop	r0
    d054:	df 91       	pop	r29
    d056:	cf 91       	pop	r28
    d058:	08 95       	ret

0000d05a <PD7_set_isc>:
 *                PORT_ISC_FALLING_gc       = Sense Falling Edge
 *                PORT_ISC_INPUT_DISABLE_gc = Digital Input Buffer disabled
 *                PORT_ISC_LEVEL_gc         = Sense low Level
 */
static inline void PD7_set_isc(const PORT_ISC_t isc)
{
    d05a:	cf 93       	push	r28
    d05c:	df 93       	push	r29
    d05e:	1f 92       	push	r1
    d060:	cd b7       	in	r28, 0x3d	; 61
    d062:	de b7       	in	r29, 0x3e	; 62
    d064:	89 83       	std	Y+1, r24	; 0x01
	PORTD_pin_set_isc(7, isc);
    d066:	69 81       	ldd	r22, Y+1	; 0x01
    d068:	87 e0       	ldi	r24, 0x07	; 7
    d06a:	0e 94 5f 66 	call	0xccbe	; 0xccbe <PORTD_pin_set_isc>
}
    d06e:	00 00       	nop
    d070:	0f 90       	pop	r0
    d072:	df 91       	pop	r29
    d074:	cf 91       	pop	r28
    d076:	08 95       	ret

0000d078 <LIN_EN_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LIN_EN_set_dir(const enum port_dir dir)
{
    d078:	cf 93       	push	r28
    d07a:	df 93       	push	r29
    d07c:	1f 92       	push	r1
    d07e:	cd b7       	in	r28, 0x3d	; 61
    d080:	de b7       	in	r29, 0x3e	; 62
    d082:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_dir(1, dir);
    d084:	69 81       	ldd	r22, Y+1	; 0x01
    d086:	81 e0       	ldi	r24, 0x01	; 1
    d088:	0e 94 82 66 	call	0xcd04	; 0xcd04 <PORTF_set_pin_dir>
}
    d08c:	00 00       	nop
    d08e:	0f 90       	pop	r0
    d090:	df 91       	pop	r29
    d092:	cf 91       	pop	r28
    d094:	08 95       	ret

0000d096 <LIN_EN_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LIN_EN_set_level(const bool level)
{
    d096:	cf 93       	push	r28
    d098:	df 93       	push	r29
    d09a:	1f 92       	push	r1
    d09c:	cd b7       	in	r28, 0x3d	; 61
    d09e:	de b7       	in	r29, 0x3e	; 62
    d0a0:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_level(1, level);
    d0a2:	69 81       	ldd	r22, Y+1	; 0x01
    d0a4:	81 e0       	ldi	r24, 0x01	; 1
    d0a6:	0e 94 d6 66 	call	0xcdac	; 0xcdac <PORTF_set_pin_level>
}
    d0aa:	00 00       	nop
    d0ac:	0f 90       	pop	r0
    d0ae:	df 91       	pop	r29
    d0b0:	cf 91       	pop	r28
    d0b2:	08 95       	ret

0000d0b4 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    d0b4:	cf 93       	push	r28
    d0b6:	df 93       	push	r29
    d0b8:	00 d0       	rcall	.+0      	; 0xd0ba <mcu_init+0x6>
    d0ba:	00 d0       	rcall	.+0      	; 0xd0bc <mcu_init+0x8>
    d0bc:	cd b7       	in	r28, 0x3d	; 61
    d0be:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    d0c0:	19 82       	std	Y+1, r1	; 0x01
    d0c2:	12 c0       	rjmp	.+36     	; 0xd0e8 <mcu_init+0x34>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d0c4:	89 81       	ldd	r24, Y+1	; 0x01
    d0c6:	88 2f       	mov	r24, r24
    d0c8:	90 e0       	ldi	r25, 0x00	; 0
    d0ca:	80 5f       	subi	r24, 0xF0	; 240
    d0cc:	9b 4f       	sbci	r25, 0xFB	; 251
    d0ce:	29 81       	ldd	r18, Y+1	; 0x01
    d0d0:	22 2f       	mov	r18, r18
    d0d2:	30 e0       	ldi	r19, 0x00	; 0
    d0d4:	20 5f       	subi	r18, 0xF0	; 240
    d0d6:	3b 4f       	sbci	r19, 0xFB	; 251
    d0d8:	f9 01       	movw	r30, r18
    d0da:	20 81       	ld	r18, Z
    d0dc:	28 60       	ori	r18, 0x08	; 8
    d0de:	fc 01       	movw	r30, r24
    d0e0:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    d0e2:	89 81       	ldd	r24, Y+1	; 0x01
    d0e4:	8f 5f       	subi	r24, 0xFF	; 255
    d0e6:	89 83       	std	Y+1, r24	; 0x01
    d0e8:	89 81       	ldd	r24, Y+1	; 0x01
    d0ea:	88 30       	cpi	r24, 0x08	; 8
    d0ec:	58 f3       	brcs	.-42     	; 0xd0c4 <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d0ee:	1a 82       	std	Y+2, r1	; 0x02
    d0f0:	12 c0       	rjmp	.+36     	; 0xd116 <mcu_init+0x62>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d0f2:	8a 81       	ldd	r24, Y+2	; 0x02
    d0f4:	88 2f       	mov	r24, r24
    d0f6:	90 e0       	ldi	r25, 0x00	; 0
    d0f8:	80 5b       	subi	r24, 0xB0	; 176
    d0fa:	9b 4f       	sbci	r25, 0xFB	; 251
    d0fc:	2a 81       	ldd	r18, Y+2	; 0x02
    d0fe:	22 2f       	mov	r18, r18
    d100:	30 e0       	ldi	r19, 0x00	; 0
    d102:	20 5b       	subi	r18, 0xB0	; 176
    d104:	3b 4f       	sbci	r19, 0xFB	; 251
    d106:	f9 01       	movw	r30, r18
    d108:	20 81       	ld	r18, Z
    d10a:	28 60       	ori	r18, 0x08	; 8
    d10c:	fc 01       	movw	r30, r24
    d10e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d110:	8a 81       	ldd	r24, Y+2	; 0x02
    d112:	8f 5f       	subi	r24, 0xFF	; 255
    d114:	8a 83       	std	Y+2, r24	; 0x02
    d116:	8a 81       	ldd	r24, Y+2	; 0x02
    d118:	88 30       	cpi	r24, 0x08	; 8
    d11a:	58 f3       	brcs	.-42     	; 0xd0f2 <mcu_init+0x3e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d11c:	1b 82       	std	Y+3, r1	; 0x03
    d11e:	12 c0       	rjmp	.+36     	; 0xd144 <mcu_init+0x90>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d120:	8b 81       	ldd	r24, Y+3	; 0x03
    d122:	88 2f       	mov	r24, r24
    d124:	90 e0       	ldi	r25, 0x00	; 0
    d126:	80 59       	subi	r24, 0x90	; 144
    d128:	9b 4f       	sbci	r25, 0xFB	; 251
    d12a:	2b 81       	ldd	r18, Y+3	; 0x03
    d12c:	22 2f       	mov	r18, r18
    d12e:	30 e0       	ldi	r19, 0x00	; 0
    d130:	20 59       	subi	r18, 0x90	; 144
    d132:	3b 4f       	sbci	r19, 0xFB	; 251
    d134:	f9 01       	movw	r30, r18
    d136:	20 81       	ld	r18, Z
    d138:	28 60       	ori	r18, 0x08	; 8
    d13a:	fc 01       	movw	r30, r24
    d13c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d13e:	8b 81       	ldd	r24, Y+3	; 0x03
    d140:	8f 5f       	subi	r24, 0xFF	; 255
    d142:	8b 83       	std	Y+3, r24	; 0x03
    d144:	8b 81       	ldd	r24, Y+3	; 0x03
    d146:	88 30       	cpi	r24, 0x08	; 8
    d148:	58 f3       	brcs	.-42     	; 0xd120 <mcu_init+0x6c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d14a:	1c 82       	std	Y+4, r1	; 0x04
    d14c:	12 c0       	rjmp	.+36     	; 0xd172 <mcu_init+0xbe>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    d14e:	8c 81       	ldd	r24, Y+4	; 0x04
    d150:	88 2f       	mov	r24, r24
    d152:	90 e0       	ldi	r25, 0x00	; 0
    d154:	80 55       	subi	r24, 0x50	; 80
    d156:	9b 4f       	sbci	r25, 0xFB	; 251
    d158:	2c 81       	ldd	r18, Y+4	; 0x04
    d15a:	22 2f       	mov	r18, r18
    d15c:	30 e0       	ldi	r19, 0x00	; 0
    d15e:	20 55       	subi	r18, 0x50	; 80
    d160:	3b 4f       	sbci	r19, 0xFB	; 251
    d162:	f9 01       	movw	r30, r18
    d164:	20 81       	ld	r18, Z
    d166:	28 60       	ori	r18, 0x08	; 8
    d168:	fc 01       	movw	r30, r24
    d16a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    d16c:	8c 81       	ldd	r24, Y+4	; 0x04
    d16e:	8f 5f       	subi	r24, 0xFF	; 255
    d170:	8c 83       	std	Y+4, r24	; 0x04
    d172:	8c 81       	ldd	r24, Y+4	; 0x04
    d174:	88 30       	cpi	r24, 0x08	; 8
    d176:	58 f3       	brcs	.-42     	; 0xd14e <mcu_init+0x9a>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    d178:	00 00       	nop
    d17a:	24 96       	adiw	r28, 0x04	; 4
    d17c:	cd bf       	out	0x3d, r28	; 61
    d17e:	de bf       	out	0x3e, r29	; 62
    d180:	df 91       	pop	r29
    d182:	cf 91       	pop	r28
    d184:	08 95       	ret

0000d186 <USART_initialization>:
#include "driver_init.h"
#include <system.h>

/* configure the pins and initialize the registers */
void USART_initialization(void)
{
    d186:	cf 93       	push	r28
    d188:	df 93       	push	r29
    d18a:	cd b7       	in	r28, 0x3d	; 61
    d18c:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PA1_set_dir(PORT_DIR_IN);
    d18e:	80 e0       	ldi	r24, 0x00	; 0
    d190:	0e 94 3d 67 	call	0xce7a	; 0xce7a <PA1_set_dir>

	PA1_set_pull_mode(
    d194:	80 e0       	ldi	r24, 0x00	; 0
    d196:	0e 94 2e 67 	call	0xce5c	; 0xce5c <PA1_set_pull_mode>
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output

	PA0_set_level(
    d19a:	80 e0       	ldi	r24, 0x00	; 0
    d19c:	0e 94 1f 67 	call	0xce3e	; 0xce3e <PA0_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA0_set_dir(PORT_DIR_OUT);
    d1a0:	81 e0       	ldi	r24, 0x01	; 1
    d1a2:	0e 94 10 67 	call	0xce20	; 0xce20 <PA0_set_dir>

	USART_init();
    d1a6:	0e 94 48 6a 	call	0xd490	; 0xd490 <USART_init>
}
    d1aa:	00 00       	nop
    d1ac:	df 91       	pop	r29
    d1ae:	cf 91       	pop	r28
    d1b0:	08 95       	ret

0000d1b2 <DAC_0_initialization>:

/* configure pins and initialize registers */
void DAC_0_initialization(void)
{
    d1b2:	cf 93       	push	r28
    d1b4:	df 93       	push	r29
    d1b6:	cd b7       	in	r28, 0x3d	; 61
    d1b8:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PD6_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    d1ba:	84 e0       	ldi	r24, 0x04	; 4
    d1bc:	0e 94 0f 68 	call	0xd01e	; 0xd01e <PD6_set_isc>
	// Disable pull-up resistor
	PD6_set_pull_mode(PORT_PULL_OFF);
    d1c0:	80 e0       	ldi	r24, 0x00	; 0
    d1c2:	0e 94 00 68 	call	0xd000	; 0xd000 <PD6_set_pull_mode>

	DAC_0_init();
    d1c6:	0e 94 a9 64 	call	0xc952	; 0xc952 <DAC_0_init>
}
    d1ca:	00 00       	nop
    d1cc:	df 91       	pop	r29
    d1ce:	cf 91       	pop	r28
    d1d0:	08 95       	ret

0000d1d2 <ADC_0_initialization>:

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{
    d1d2:	cf 93       	push	r28
    d1d4:	df 93       	push	r29
    d1d6:	cd b7       	in	r28, 0x3d	; 61
    d1d8:	de b7       	in	r29, 0x3e	; 62

	// Disable digital input buffer
	PD5_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    d1da:	84 e0       	ldi	r24, 0x04	; 4
    d1dc:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <PD5_set_isc>
	// Disable pull-up resistor
	PD5_set_pull_mode(PORT_PULL_OFF);
    d1e0:	80 e0       	ldi	r24, 0x00	; 0
    d1e2:	0e 94 e2 67 	call	0xcfc4	; 0xcfc4 <PD5_set_pull_mode>

	// Disable digital input buffer
	PD7_set_isc(PORT_ISC_INPUT_DISABLE_gc);
    d1e6:	84 e0       	ldi	r24, 0x04	; 4
    d1e8:	0e 94 2d 68 	call	0xd05a	; 0xd05a <PD7_set_isc>
	// Disable pull-up resistor
	PD7_set_pull_mode(PORT_PULL_OFF);
    d1ec:	80 e0       	ldi	r24, 0x00	; 0
    d1ee:	0e 94 1e 68 	call	0xd03c	; 0xd03c <PD7_set_pull_mode>

	ADC_0_init();
    d1f2:	0e 94 0f 64 	call	0xc81e	; 0xc81e <ADC_0_init>
}
    d1f6:	00 00       	nop
    d1f8:	df 91       	pop	r29
    d1fa:	cf 91       	pop	r28
    d1fc:	08 95       	ret

0000d1fe <TIMER_0_initialization>:

void TIMER_0_initialization(void)
{
    d1fe:	cf 93       	push	r28
    d200:	df 93       	push	r29
    d202:	cd b7       	in	r28, 0x3d	; 61
    d204:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to output

	PA2_set_level(
    d206:	80 e0       	ldi	r24, 0x00	; 0
    d208:	0e 94 5b 67 	call	0xceb6	; 0xceb6 <PA2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA2_set_dir(PORT_DIR_OUT);
    d20c:	81 e0       	ldi	r24, 0x01	; 1
    d20e:	0e 94 4c 67 	call	0xce98	; 0xce98 <PA2_set_dir>

	TIMER_0_init();
    d212:	0e 94 e2 69 	call	0xd3c4	; 0xd3c4 <TIMER_0_init>
}
    d216:	00 00       	nop
    d218:	df 91       	pop	r29
    d21a:	cf 91       	pop	r28
    d21c:	08 95       	ret

0000d21e <FLASH_0_initialization>:

/* Initialize registers */
void FLASH_0_initialization(void)
{
    d21e:	cf 93       	push	r28
    d220:	df 93       	push	r29
    d222:	cd b7       	in	r28, 0x3d	; 61
    d224:	de b7       	in	r29, 0x3e	; 62
	FLASH_0_init();
    d226:	0e 94 85 69 	call	0xd30a	; 0xd30a <FLASH_0_init>
}
    d22a:	00 00       	nop
    d22c:	df 91       	pop	r29
    d22e:	cf 91       	pop	r28
    d230:	08 95       	ret

0000d232 <TIMER_2_initialization>:

void TIMER_2_initialization(void)
{
    d232:	cf 93       	push	r28
    d234:	df 93       	push	r29
    d236:	cd b7       	in	r28, 0x3d	; 61
    d238:	de b7       	in	r29, 0x3e	; 62

	TIMER_2_init();
    d23a:	0e 94 04 6a 	call	0xd408	; 0xd408 <TIMER_2_init>
}
    d23e:	00 00       	nop
    d240:	df 91       	pop	r29
    d242:	cf 91       	pop	r28
    d244:	08 95       	ret

0000d246 <TIMER_1_initialization>:

void TIMER_1_initialization(void)
{
    d246:	cf 93       	push	r28
    d248:	df 93       	push	r29
    d24a:	cd b7       	in	r28, 0x3d	; 61
    d24c:	de b7       	in	r29, 0x3e	; 62

	TIMER_1_init();
    d24e:	0e 94 26 6a 	call	0xd44c	; 0xd44c <TIMER_1_init>
}
    d252:	00 00       	nop
    d254:	df 91       	pop	r29
    d256:	cf 91       	pop	r28
    d258:	08 95       	ret

0000d25a <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    d25a:	cf 93       	push	r28
    d25c:	df 93       	push	r29
    d25e:	cd b7       	in	r28, 0x3d	; 61
    d260:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    d262:	0e 94 5a 68 	call	0xd0b4	; 0xd0b4 <mcu_init>

	/* PORT setting on PC0 */

	// Set pin direction to output

	MOTOR_GATE_set_level(
    d266:	80 e0       	ldi	r24, 0x00	; 0
    d268:	0e 94 79 67 	call	0xcef2	; 0xcef2 <MOTOR_GATE_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	MOTOR_GATE_set_dir(PORT_DIR_OUT);
    d26c:	81 e0       	ldi	r24, 0x01	; 1
    d26e:	0e 94 6a 67 	call	0xced4	; 0xced4 <MOTOR_GATE_set_dir>

	/* PORT setting on PC1 */

	// Set pin direction to output

	LED_MCLK_set_level(
    d272:	80 e0       	ldi	r24, 0x00	; 0
    d274:	0e 94 97 67 	call	0xcf2e	; 0xcf2e <LED_MCLK_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_MCLK_set_dir(PORT_DIR_OUT);
    d278:	81 e0       	ldi	r24, 0x01	; 1
    d27a:	0e 94 88 67 	call	0xcf10	; 0xcf10 <LED_MCLK_set_dir>

	/* PORT setting on PC2 */

	// Set pin direction to output

	LED_CS_set_level(
    d27e:	80 e0       	ldi	r24, 0x00	; 0
    d280:	0e 94 b5 67 	call	0xcf6a	; 0xcf6a <LED_CS_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_CS_set_dir(PORT_DIR_OUT);
    d284:	81 e0       	ldi	r24, 0x01	; 1
    d286:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <LED_CS_set_dir>

	/* PORT setting on PC3 */

	// Set pin direction to output

	LED_OUT_DAT_set_level(
    d28a:	80 e0       	ldi	r24, 0x00	; 0
    d28c:	0e 94 d3 67 	call	0xcfa6	; 0xcfa6 <LED_OUT_DAT_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	LED_OUT_DAT_set_dir(PORT_DIR_OUT);
    d290:	81 e0       	ldi	r24, 0x01	; 1
    d292:	0e 94 c4 67 	call	0xcf88	; 0xcf88 <LED_OUT_DAT_set_dir>

	/* PORT setting on PF1 */

	// Set pin direction to output

	LIN_EN_set_level(
    d296:	81 e0       	ldi	r24, 0x01	; 1
    d298:	0e 94 4b 68 	call	0xd096	; 0xd096 <LIN_EN_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	LIN_EN_set_dir(PORT_DIR_OUT);
    d29c:	81 e0       	ldi	r24, 0x01	; 1
    d29e:	0e 94 3c 68 	call	0xd078	; 0xd078 <LIN_EN_set_dir>

	CLKCTRL_init();
    d2a2:	0e 94 93 64 	call	0xc926	; 0xc926 <CLKCTRL_init>

	USART_initialization();
    d2a6:	0e 94 c3 68 	call	0xd186	; 0xd186 <USART_initialization>

	SLPCTRL_init();
    d2aa:	0e 94 da 69 	call	0xd3b4	; 0xd3b4 <SLPCTRL_init>

	CPUINT_init();
    d2ae:	0e 94 a0 64 	call	0xc940	; 0xc940 <CPUINT_init>

	DAC_0_initialization();
    d2b2:	0e 94 d9 68 	call	0xd1b2	; 0xd1b2 <DAC_0_initialization>

	ADC_0_initialization();
    d2b6:	0e 94 e9 68 	call	0xd1d2	; 0xd1d2 <ADC_0_initialization>

	TIMER_0_initialization();
    d2ba:	0e 94 ff 68 	call	0xd1fe	; 0xd1fe <TIMER_0_initialization>

	Timer_init();
    d2be:	0e 94 bd 69 	call	0xd37a	; 0xd37a <Timer_init>

	FLASH_0_initialization();
    d2c2:	0e 94 0f 69 	call	0xd21e	; 0xd21e <FLASH_0_initialization>

	TIMER_2_initialization();
    d2c6:	0e 94 19 69 	call	0xd232	; 0xd232 <TIMER_2_initialization>

	TIMER_1_initialization();
    d2ca:	0e 94 23 69 	call	0xd246	; 0xd246 <TIMER_1_initialization>

	VREF_0_init();
    d2ce:	0e 94 8d 6a 	call	0xd51a	; 0xd51a <VREF_0_init>

	BOD_init();
    d2d2:	0e 94 71 64 	call	0xc8e2	; 0xc8e2 <BOD_init>
}
    d2d6:	00 00       	nop
    d2d8:	df 91       	pop	r29
    d2da:	cf 91       	pop	r28
    d2dc:	08 95       	ret

0000d2de <ccp_write_spm>:
 */
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{
	// Read operation will be stalled by hardware if any write is in progress
	return *(uint8_t *)(EEPROM_START + eeprom_adr);
}
    d2de:	cf 93       	push	r28
    d2e0:	df 93       	push	r29
    d2e2:	00 d0       	rcall	.+0      	; 0xd2e4 <ccp_write_spm+0x6>
    d2e4:	1f 92       	push	r1
    d2e6:	cd b7       	in	r28, 0x3d	; 61
    d2e8:	de b7       	in	r29, 0x3e	; 62
    d2ea:	89 83       	std	Y+1, r24	; 0x01
    d2ec:	9a 83       	std	Y+2, r25	; 0x02
    d2ee:	6b 83       	std	Y+3, r22	; 0x03
    d2f0:	89 81       	ldd	r24, Y+1	; 0x01
    d2f2:	9a 81       	ldd	r25, Y+2	; 0x02
    d2f4:	4b 81       	ldd	r20, Y+3	; 0x03
    d2f6:	6d e9       	ldi	r22, 0x9D	; 157
    d2f8:	0e 94 b8 69 	call	0xd370	; 0xd370 <protected_write_io>
    d2fc:	00 00       	nop
    d2fe:	23 96       	adiw	r28, 0x03	; 3
    d300:	cd bf       	out	0x3d, r28	; 61
    d302:	de bf       	out	0x3e, r29	; 62
    d304:	df 91       	pop	r29
    d306:	cf 91       	pop	r28
    d308:	08 95       	ret

0000d30a <FLASH_0_init>:
    d30a:	cf 93       	push	r28
    d30c:	df 93       	push	r29
    d30e:	cd b7       	in	r28, 0x3d	; 61
    d310:	de b7       	in	r29, 0x3e	; 62
    d312:	80 e0       	ldi	r24, 0x00	; 0
    d314:	df 91       	pop	r29
    d316:	cf 91       	pop	r28
    d318:	08 95       	ret

0000d31a <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
    d31a:	cf 93       	push	r28
    d31c:	df 93       	push	r29
    d31e:	00 d0       	rcall	.+0      	; 0xd320 <FLASH_0_write_eeprom_byte+0x6>
    d320:	1f 92       	push	r1
    d322:	cd b7       	in	r28, 0x3d	; 61
    d324:	de b7       	in	r29, 0x3e	; 62
    d326:	89 83       	std	Y+1, r24	; 0x01
    d328:	9a 83       	std	Y+2, r25	; 0x02
    d32a:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous operation */
	while (NVMCTRL.STATUS & (NVMCTRL_EEBUSY_bm | NVMCTRL_FBUSY_bm))
    d32c:	00 00       	nop
    d32e:	80 e0       	ldi	r24, 0x00	; 0
    d330:	90 e1       	ldi	r25, 0x10	; 16
    d332:	fc 01       	movw	r30, r24
    d334:	82 81       	ldd	r24, Z+2	; 0x02
    d336:	88 2f       	mov	r24, r24
    d338:	90 e0       	ldi	r25, 0x00	; 0
    d33a:	83 70       	andi	r24, 0x03	; 3
    d33c:	99 27       	eor	r25, r25
    d33e:	89 2b       	or	r24, r25
    d340:	b1 f7       	brne	.-20     	; 0xd32e <FLASH_0_write_eeprom_byte+0x14>
		;

	/* Program the EEPROM with desired value(s) */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_EEERWR_gc);
    d342:	63 e1       	ldi	r22, 0x13	; 19
    d344:	80 e0       	ldi	r24, 0x00	; 0
    d346:	90 e1       	ldi	r25, 0x10	; 16
    d348:	0e 94 6f 69 	call	0xd2de	; 0xd2de <ccp_write_spm>

	/* Write byte to EEPROM */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
    d34c:	89 81       	ldd	r24, Y+1	; 0x01
    d34e:	9a 81       	ldd	r25, Y+2	; 0x02
    d350:	9c 5e       	subi	r25, 0xEC	; 236
    d352:	2b 81       	ldd	r18, Y+3	; 0x03
    d354:	fc 01       	movw	r30, r24
    d356:	20 83       	st	Z, r18

	/* Clear the current command */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_NONE_gc);
    d358:	60 e0       	ldi	r22, 0x00	; 0
    d35a:	80 e0       	ldi	r24, 0x00	; 0
    d35c:	90 e1       	ldi	r25, 0x10	; 16
    d35e:	0e 94 6f 69 	call	0xd2de	; 0xd2de <ccp_write_spm>

	return NVM_OK;
    d362:	80 e0       	ldi	r24, 0x00	; 0
}
    d364:	23 96       	adiw	r28, 0x03	; 3
    d366:	cd bf       	out	0x3d, r28	; 61
    d368:	de bf       	out	0x3e, r29	; 62
    d36a:	df 91       	pop	r29
    d36c:	cf 91       	pop	r28
    d36e:	08 95       	ret

0000d370 <protected_write_io>:
	PUBLIC_FUNCTION(protected_write_io)

#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
    d370:	1b be       	out	0x3b, r1	; 59
#endif
	movw    r30, r24                // Load addr into Z
    d372:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    d374:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    d376:	40 83       	st	Z, r20
	ret                             // Return to caller
    d378:	08 95       	ret

0000d37a <Timer_init>:
/**
 * \brief Initialize rtc interface
 * \return Initialization status.
 */
int8_t Timer_init()
{
    d37a:	cf 93       	push	r28
    d37c:	df 93       	push	r29
    d37e:	cd b7       	in	r28, 0x3d	; 61
    d380:	de b7       	in	r29, 0x3e	; 62

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    d382:	00 00       	nop
    d384:	80 e4       	ldi	r24, 0x40	; 64
    d386:	91 e0       	ldi	r25, 0x01	; 1
    d388:	fc 01       	movw	r30, r24
    d38a:	81 81       	ldd	r24, Z+1	; 0x01
    d38c:	88 23       	and	r24, r24
    d38e:	d1 f7       	brne	.-12     	; 0xd384 <Timer_init+0xa>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    d390:	80 e4       	ldi	r24, 0x40	; 64
    d392:	91 e0       	ldi	r25, 0x01	; 1
    d394:	21 e8       	ldi	r18, 0x81	; 129
    d396:	fc 01       	movw	r30, r24
    d398:	20 83       	st	Z, r18
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_OSC32K_gc; /* Internal 32.768 kHz oscillator */
    d39a:	80 e4       	ldi	r24, 0x40	; 64
    d39c:	91 e0       	ldi	r25, 0x01	; 1
    d39e:	fc 01       	movw	r30, r24
    d3a0:	17 82       	std	Z+7, r1	; 0x07

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
    d3a2:	80 e4       	ldi	r24, 0x40	; 64
    d3a4:	91 e0       	ldi	r25, 0x01	; 1
    d3a6:	22 e0       	ldi	r18, 0x02	; 2
    d3a8:	fc 01       	movw	r30, r24
    d3aa:	22 83       	std	Z+2, r18	; 0x02

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
    d3ac:	80 e0       	ldi	r24, 0x00	; 0
}
    d3ae:	df 91       	pop	r29
    d3b0:	cf 91       	pop	r28
    d3b2:	08 95       	ret

0000d3b4 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    d3b4:	cf 93       	push	r28
    d3b6:	df 93       	push	r29
    d3b8:	cd b7       	in	r28, 0x3d	; 61
    d3ba:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    d3bc:	80 e0       	ldi	r24, 0x00	; 0
}
    d3be:	df 91       	pop	r29
    d3c0:	cf 91       	pop	r28
    d3c2:	08 95       	ret

0000d3c4 <TIMER_0_init>:
 * \brief Initialize tca interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    d3c4:	cf 93       	push	r28
    d3c6:	df 93       	push	r29
    d3c8:	cd b7       	in	r28, 0x3d	; 61
    d3ca:	de b7       	in	r29, 0x3e	; 62

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp			/* Auto Lock Update: disabled */
    d3cc:	80 e0       	ldi	r24, 0x00	; 0
    d3ce:	9a e0       	ldi	r25, 0x0A	; 10
    d3d0:	23 e4       	ldi	r18, 0x43	; 67
    d3d2:	fc 01       	movw	r30, r24
    d3d4:	21 83       	std	Z+1, r18	; 0x01
	//		 | 0 << TCA_SINGLE_CMP0EN_bp /* Compare 0 Enable: disabled */
	//		 | 0 << TCA_SINGLE_CMP1EN_bp /* Compare 1 Enable: disabled */
	//		 | 0 << TCA_SINGLE_CMP2EN_bp /* Compare 2 Enable: disabled */
	//		 | TCA_SINGLE_WGMODE_NORMAL_gc; /*  */

	TCA0.SINGLE.CTRLC = 0 << TCA_SINGLE_CMP0OV_bp	 /* Compare 0 Waveform Output Value: disabled */
    d3d6:	80 e0       	ldi	r24, 0x00	; 0
    d3d8:	9a e0       	ldi	r25, 0x0A	; 10
    d3da:	24 e0       	ldi	r18, 0x04	; 4
    d3dc:	fc 01       	movw	r30, r24
    d3de:	22 83       	std	Z+2, r18	; 0x02
	//		 | 0 << TCA_SINGLE_CNTBEI_bp /* Count on Event Input B: disabled */
	//		 | TCA_SINGLE_EVACTA_CNT_POSEDGE_gc /* Count on positive edge event */
	//		 | TCA_SINGLE_EVACTB_UPDOWN_gc; /* Count on prescaled clock. Event controls count direction. Up-count when
	//event line is 0, down-count when event line is 1. */

	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp	/* Compare 0 Interrupt: disabled */
    d3e0:	80 e0       	ldi	r24, 0x00	; 0
    d3e2:	9a e0       	ldi	r25, 0x0A	; 10
    d3e4:	fc 01       	movw	r30, r24
    d3e6:	12 86       	std	Z+10, r1	; 0x0a
						  | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
						  | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: enabled */
						  | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 1199; /* Period: 0x95f */
    d3e8:	80 e0       	ldi	r24, 0x00	; 0
    d3ea:	9a e0       	ldi	r25, 0x0A	; 10
    d3ec:	2f ea       	ldi	r18, 0xAF	; 175
    d3ee:	34 e0       	ldi	r19, 0x04	; 4
    d3f0:	fc 01       	movw	r30, r24
    d3f2:	26 a3       	std	Z+38, r18	; 0x26
    d3f4:	37 a3       	std	Z+39, r19	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc	   /* System Clock */
    d3f6:	80 e0       	ldi	r24, 0x00	; 0
    d3f8:	9a e0       	ldi	r25, 0x0A	; 10
    d3fa:	21 e0       	ldi	r18, 0x01	; 1
    d3fc:	fc 01       	movw	r30, r24
    d3fe:	20 83       	st	Z, r18
						| 1 << TCA_SINGLE_ENABLE_bp	   /* Module Enable: disabled */
						| 0 << TCA_SINGLE_RUNSTDBY_bp; /* RUN STANDBY: disabled */

	return 0;
    d400:	80 e0       	ldi	r24, 0x00	; 0
}
    d402:	df 91       	pop	r29
    d404:	cf 91       	pop	r28
    d406:	08 95       	ret

0000d408 <TIMER_2_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_2_init()
{
    d408:	cf 93       	push	r28
    d40a:	df 93       	push	r29
    d40c:	cd b7       	in	r28, 0x3d	; 61
    d40e:	de b7       	in	r29, 0x3e	; 62

	TCB0.CCMP = 0x2edf; /* Compare or Capture: 0x2edf */
    d410:	80 e0       	ldi	r24, 0x00	; 0
    d412:	9b e0       	ldi	r25, 0x0B	; 11
    d414:	2f ed       	ldi	r18, 0xDF	; 223
    d416:	3e e2       	ldi	r19, 0x2E	; 46
    d418:	fc 01       	movw	r30, r24
    d41a:	24 87       	std	Z+12, r18	; 0x0c
    d41c:	35 87       	std	Z+13, r19	; 0x0d

	TCB0.CNT = 0x0; /* Count: 0x0 */
    d41e:	80 e0       	ldi	r24, 0x00	; 0
    d420:	9b e0       	ldi	r25, 0x0B	; 11
    d422:	fc 01       	movw	r30, r24
    d424:	12 86       	std	Z+10, r1	; 0x0a
    d426:	13 86       	std	Z+11, r1	; 0x0b

	TCB0.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    d428:	80 e0       	ldi	r24, 0x00	; 0
    d42a:	9b e0       	ldi	r25, 0x0B	; 11
    d42c:	fc 01       	movw	r30, r24
    d42e:	11 82       	std	Z+1, r1	; 0x01

	// TCB0.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB0.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    d430:	80 e0       	ldi	r24, 0x00	; 0
    d432:	9b e0       	ldi	r25, 0x0B	; 11
    d434:	21 e0       	ldi	r18, 0x01	; 1
    d436:	fc 01       	movw	r30, r24
    d438:	25 83       	std	Z+5, r18	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB0.CTRLA = TCB_CLKSEL_DIV2_gc /* CLK_PER */
    d43a:	80 e0       	ldi	r24, 0x00	; 0
    d43c:	9b e0       	ldi	r25, 0x0B	; 11
    d43e:	23 e0       	ldi	r18, 0x03	; 3
    d440:	fc 01       	movw	r30, r24
    d442:	20 83       	st	Z, r18
			 | 1 << TCB_ENABLE_bp /* Enable: disabled */
			 | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
			 | 0 << TCB_SYNCUPD_bp /* Synchronize Update: disabled */
			 | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    d444:	80 e0       	ldi	r24, 0x00	; 0
}
    d446:	df 91       	pop	r29
    d448:	cf 91       	pop	r28
    d44a:	08 95       	ret

0000d44c <TIMER_1_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{
    d44c:	cf 93       	push	r28
    d44e:	df 93       	push	r29
    d450:	cd b7       	in	r28, 0x3d	; 61
    d452:	de b7       	in	r29, 0x3e	; 62

	TCB1.CCMP = 8500; /* Compare or Capture: 0x5dbf */
    d454:	80 e1       	ldi	r24, 0x10	; 16
    d456:	9b e0       	ldi	r25, 0x0B	; 11
    d458:	24 e3       	ldi	r18, 0x34	; 52
    d45a:	31 e2       	ldi	r19, 0x21	; 33
    d45c:	fc 01       	movw	r30, r24
    d45e:	24 87       	std	Z+12, r18	; 0x0c
    d460:	35 87       	std	Z+13, r19	; 0x0d

	TCB1.CNT = 0x0; /* Count: 0x0 */
    d462:	80 e1       	ldi	r24, 0x10	; 16
    d464:	9b e0       	ldi	r25, 0x0B	; 11
    d466:	fc 01       	movw	r30, r24
    d468:	12 86       	std	Z+10, r1	; 0x0a
    d46a:	13 86       	std	Z+11, r1	; 0x0b

	TCB1.CTRLB = 0 << TCB_ASYNC_bp /* Asynchronous Enable: disabled */
    d46c:	80 e1       	ldi	r24, 0x10	; 16
    d46e:	9b e0       	ldi	r25, 0x0B	; 11
    d470:	fc 01       	movw	r30, r24
    d472:	11 82       	std	Z+1, r1	; 0x01

	// TCB1.EVCTRL = 0 << TCB_CAPTEI_bp /* Event Input Enable: disabled */
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	TCB1.INTCTRL = 1 << TCB_CAPT_bp   /* Capture or Timeout: enabled */
    d474:	80 e1       	ldi	r24, 0x10	; 16
    d476:	9b e0       	ldi	r25, 0x0B	; 11
    d478:	21 e0       	ldi	r18, 0x01	; 1
    d47a:	fc 01       	movw	r30, r24
    d47c:	25 83       	std	Z+5, r18	; 0x05
	               | 0 << TCB_OVF_bp; /* OverFlow Interrupt: disabled */

	TCB1.CTRLA = TCB_CLKSEL_DIV1_gc     /* CLK_PER */
    d47e:	80 e1       	ldi	r24, 0x10	; 16
    d480:	9b e0       	ldi	r25, 0x0B	; 11
    d482:	21 e0       	ldi	r18, 0x01	; 1
    d484:	fc 01       	movw	r30, r24
    d486:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp  /* Synchronize Update: disabled */
	             | 0 << TCB_CASCADE_bp; /* Cascade Two Timer/Counters: disabled */

	return 0;
    d488:	80 e0       	ldi	r24, 0x00	; 0
}
    d48a:	df 91       	pop	r29
    d48c:	cf 91       	pop	r28
    d48e:	08 95       	ret

0000d490 <USART_init>:
void USART_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
		;
	USART0.TXDATAL = data;
}
    d490:	cf 93       	push	r28
    d492:	df 93       	push	r29
    d494:	cd b7       	in	r28, 0x3d	; 61
    d496:	de b7       	in	r29, 0x3e	; 62
    d498:	80 e0       	ldi	r24, 0x00	; 0
    d49a:	98 e0       	ldi	r25, 0x08	; 8
    d49c:	28 e8       	ldi	r18, 0x88	; 136
    d49e:	33 e1       	ldi	r19, 0x13	; 19
    d4a0:	fc 01       	movw	r30, r24
    d4a2:	20 87       	std	Z+8, r18	; 0x08
    d4a4:	31 87       	std	Z+9, r19	; 0x09
    d4a6:	80 e0       	ldi	r24, 0x00	; 0
    d4a8:	98 e0       	ldi	r25, 0x08	; 8
    d4aa:	24 e8       	ldi	r18, 0x84	; 132
    d4ac:	fc 01       	movw	r30, r24
    d4ae:	25 83       	std	Z+5, r18	; 0x05
    d4b0:	80 e0       	ldi	r24, 0x00	; 0
    d4b2:	98 e0       	ldi	r25, 0x08	; 8
    d4b4:	26 ec       	ldi	r18, 0xC6	; 198
    d4b6:	fc 01       	movw	r30, r24
    d4b8:	26 83       	std	Z+6, r18	; 0x06
    d4ba:	80 e0       	ldi	r24, 0x00	; 0
    d4bc:	df 91       	pop	r29
    d4be:	cf 91       	pop	r28
    d4c0:	08 95       	ret

0000d4c2 <USART0_Read>:

size_t USART0_Read(uint8_t * rDATA)
{
    d4c2:	cf 93       	push	r28
    d4c4:	df 93       	push	r29
    d4c6:	00 d0       	rcall	.+0      	; 0xd4c8 <USART0_Read+0x6>
    d4c8:	cd b7       	in	r28, 0x3d	; 61
    d4ca:	de b7       	in	r29, 0x3e	; 62
    d4cc:	89 83       	std	Y+1, r24	; 0x01
    d4ce:	9a 83       	std	Y+2, r25	; 0x02
	*rDATA = USART0.RXDATAL;
    d4d0:	80 e0       	ldi	r24, 0x00	; 0
    d4d2:	98 e0       	ldi	r25, 0x08	; 8
    d4d4:	fc 01       	movw	r30, r24
    d4d6:	20 81       	ld	r18, Z
    d4d8:	89 81       	ldd	r24, Y+1	; 0x01
    d4da:	9a 81       	ldd	r25, Y+2	; 0x02
    d4dc:	fc 01       	movw	r30, r24
    d4de:	20 83       	st	Z, r18
	return 0;
    d4e0:	80 e0       	ldi	r24, 0x00	; 0
    d4e2:	90 e0       	ldi	r25, 0x00	; 0
}
    d4e4:	0f 90       	pop	r0
    d4e6:	0f 90       	pop	r0
    d4e8:	df 91       	pop	r29
    d4ea:	cf 91       	pop	r28
    d4ec:	08 95       	ret

0000d4ee <USART0_Send>:

size_t USART0_Send(uint8_t * tDATA)
{
    d4ee:	cf 93       	push	r28
    d4f0:	df 93       	push	r29
    d4f2:	00 d0       	rcall	.+0      	; 0xd4f4 <USART0_Send+0x6>
    d4f4:	cd b7       	in	r28, 0x3d	; 61
    d4f6:	de b7       	in	r29, 0x3e	; 62
    d4f8:	89 83       	std	Y+1, r24	; 0x01
    d4fa:	9a 83       	std	Y+2, r25	; 0x02
	USART0.TXDATAL = *tDATA;
    d4fc:	80 e0       	ldi	r24, 0x00	; 0
    d4fe:	98 e0       	ldi	r25, 0x08	; 8
    d500:	29 81       	ldd	r18, Y+1	; 0x01
    d502:	3a 81       	ldd	r19, Y+2	; 0x02
    d504:	f9 01       	movw	r30, r18
    d506:	20 81       	ld	r18, Z
    d508:	fc 01       	movw	r30, r24
    d50a:	22 83       	std	Z+2, r18	; 0x02
	return 0;
    d50c:	80 e0       	ldi	r24, 0x00	; 0
    d50e:	90 e0       	ldi	r25, 0x00	; 0
}
    d510:	0f 90       	pop	r0
    d512:	0f 90       	pop	r0
    d514:	df 91       	pop	r29
    d516:	cf 91       	pop	r28
    d518:	08 95       	ret

0000d51a <VREF_0_init>:
/**
 * \brief Initialize vref interface
 * \return Initialization status.
 */
int8_t VREF_0_init()
{
    d51a:	cf 93       	push	r28
    d51c:	df 93       	push	r29
    d51e:	cd b7       	in	r28, 0x3d	; 61
    d520:	de b7       	in	r29, 0x3e	; 62

	VREF.ADC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for ADC0: enabled */
    d522:	80 ea       	ldi	r24, 0xA0	; 160
    d524:	90 e0       	ldi	r25, 0x00	; 0
    d526:	25 e8       	ldi	r18, 0x85	; 133
    d528:	fc 01       	movw	r30, r24
    d52a:	20 83       	st	Z, r18
	               | VREF_REFSEL_VDD_gc; /* VDD as reference */

	VREF.DAC0REF = 1 << VREF_ALWAYSON_bp /* Enable reference always ON for DAC0: enabled */
    d52c:	80 ea       	ldi	r24, 0xA0	; 160
    d52e:	90 e0       	ldi	r25, 0x00	; 0
    d530:	25 e8       	ldi	r18, 0x85	; 133
    d532:	fc 01       	movw	r30, r24
    d534:	22 83       	std	Z+2, r18	; 0x02
	               | VREF_REFSEL_VDD_gc; /* VDD as reference */

	// VREF.ACREF = 0 << VREF_ALWAYSON_bp /* Enable reference always ON for AC: disabled */
	//		 | VREF_REFSEL_1V024_gc; /* Internal 1.024V reference */

	return 0;
    d536:	80 e0       	ldi	r24, 0x00	; 0
}
    d538:	df 91       	pop	r29
    d53a:	cf 91       	pop	r28
    d53c:	08 95       	ret

0000d53e <check_for_aks_block>:
    d53e:	cf 92       	push	r12
    d540:	df 92       	push	r13
    d542:	ff 92       	push	r15
    d544:	0f 93       	push	r16
    d546:	1f 93       	push	r17
    d548:	cf 93       	push	r28
    d54a:	df 93       	push	r29
    d54c:	ec 01       	movw	r28, r24
    d54e:	ae 81       	ldd	r26, Y+6	; 0x06
    d550:	bf 81       	ldd	r27, Y+7	; 0x07
    d552:	eb 01       	movw	r28, r22
    d554:	cc 0f       	add	r28, r28
    d556:	dd 1f       	adc	r29, r29
    d558:	c6 0f       	add	r28, r22
    d55a:	d7 1f       	adc	r29, r23
    d55c:	ca 0f       	add	r28, r26
    d55e:	db 1f       	adc	r29, r27
    d560:	fa 80       	ldd	r15, Y+2	; 0x02
    d562:	fc 01       	movw	r30, r24
    d564:	44 81       	ldd	r20, Z+4	; 0x04
    d566:	55 81       	ldd	r21, Z+5	; 0x05
    d568:	e6 e0       	ldi	r30, 0x06	; 6
    d56a:	e6 9f       	mul	r30, r22
    d56c:	90 01       	movw	r18, r0
    d56e:	e7 9f       	mul	r30, r23
    d570:	30 0d       	add	r19, r0
    d572:	11 24       	eor	r1, r1
    d574:	8a 01       	movw	r16, r20
    d576:	02 0f       	add	r16, r18
    d578:	13 1f       	adc	r17, r19
    d57a:	f8 01       	movw	r30, r16
    d57c:	22 81       	ldd	r18, Z+2	; 0x02
    d57e:	33 81       	ldd	r19, Z+3	; 0x03
    d580:	f9 01       	movw	r30, r18
    d582:	21 81       	ldd	r18, Z+1	; 0x01
    d584:	32 81       	ldd	r19, Z+2	; 0x02
    d586:	f8 01       	movw	r30, r16
    d588:	04 81       	ldd	r16, Z+4	; 0x04
    d58a:	15 81       	ldd	r17, Z+5	; 0x05
    d58c:	20 1b       	sub	r18, r16
    d58e:	31 0b       	sbc	r19, r17
    d590:	e8 81       	ld	r30, Y
    d592:	2e 1b       	sub	r18, r30
    d594:	31 09       	sbc	r19, r1
    d596:	ec 01       	movw	r28, r24
    d598:	ea 81       	ldd	r30, Y+2	; 0x02
    d59a:	fb 81       	ldd	r31, Y+3	; 0x03
    d59c:	00 81       	ld	r16, Z
    d59e:	11 81       	ldd	r17, Z+1	; 0x01
    d5a0:	fa 01       	movw	r30, r20
    d5a2:	40 e0       	ldi	r20, 0x00	; 0
    d5a4:	50 e0       	ldi	r21, 0x00	; 0
    d5a6:	40 17       	cp	r20, r16
    d5a8:	51 07       	cpc	r21, r17
    d5aa:	39 f1       	breq	.+78     	; 0xd5fa <check_for_aks_block+0xbc>
    d5ac:	46 17       	cp	r20, r22
    d5ae:	57 07       	cpc	r21, r23
    d5b0:	f9 f0       	breq	.+62     	; 0xd5f0 <check_for_aks_block+0xb2>
    d5b2:	12 96       	adiw	r26, 0x02	; 2
    d5b4:	8c 91       	ld	r24, X
    d5b6:	12 97       	sbiw	r26, 0x02	; 2
    d5b8:	f8 12       	cpse	r15, r24
    d5ba:	1a c0       	rjmp	.+52     	; 0xd5f0 <check_for_aks_block+0xb2>
    d5bc:	80 81       	ld	r24, Z
    d5be:	85 58       	subi	r24, 0x85	; 133
    d5c0:	82 30       	cpi	r24, 0x02	; 2
    d5c2:	e8 f0       	brcs	.+58     	; 0xd5fe <check_for_aks_block+0xc0>
    d5c4:	c4 80       	ldd	r12, Z+4	; 0x04
    d5c6:	d5 80       	ldd	r13, Z+5	; 0x05
    d5c8:	82 81       	ldd	r24, Z+2	; 0x02
    d5ca:	93 81       	ldd	r25, Z+3	; 0x03
    d5cc:	ec 01       	movw	r28, r24
    d5ce:	89 81       	ldd	r24, Y+1	; 0x01
    d5d0:	9a 81       	ldd	r25, Y+2	; 0x02
    d5d2:	c8 16       	cp	r12, r24
    d5d4:	d9 06       	cpc	r13, r25
    d5d6:	60 f4       	brcc	.+24     	; 0xd5f0 <check_for_aks_block+0xb2>
    d5d8:	8c 19       	sub	r24, r12
    d5da:	9d 09       	sbc	r25, r13
    d5dc:	cc 91       	ld	r28, X
    d5de:	d0 e0       	ldi	r29, 0x00	; 0
    d5e0:	c8 17       	cp	r28, r24
    d5e2:	d9 07       	cpc	r29, r25
    d5e4:	28 f4       	brcc	.+10     	; 0xd5f0 <check_for_aks_block+0xb2>
    d5e6:	8c 1b       	sub	r24, r28
    d5e8:	9d 0b       	sbc	r25, r29
    d5ea:	28 17       	cp	r18, r24
    d5ec:	39 07       	cpc	r19, r25
    d5ee:	38 f0       	brcs	.+14     	; 0xd5fe <check_for_aks_block+0xc0>
    d5f0:	4f 5f       	subi	r20, 0xFF	; 255
    d5f2:	5f 4f       	sbci	r21, 0xFF	; 255
    d5f4:	13 96       	adiw	r26, 0x03	; 3
    d5f6:	36 96       	adiw	r30, 0x06	; 6
    d5f8:	d6 cf       	rjmp	.-84     	; 0xd5a6 <check_for_aks_block+0x68>
    d5fa:	80 e0       	ldi	r24, 0x00	; 0
    d5fc:	01 c0       	rjmp	.+2      	; 0xd600 <check_for_aks_block+0xc2>
    d5fe:	81 e0       	ldi	r24, 0x01	; 1
    d600:	df 91       	pop	r29
    d602:	cf 91       	pop	r28
    d604:	1f 91       	pop	r17
    d606:	0f 91       	pop	r16
    d608:	ff 90       	pop	r15
    d60a:	df 90       	pop	r13
    d60c:	cf 90       	pop	r12
    d60e:	08 95       	ret

0000d610 <qtm_update_qtlib_timer>:
    d610:	20 91 3e 46 	lds	r18, 0x463E	; 0x80463e <qtm_local_ms_timecount>
    d614:	30 91 3f 46 	lds	r19, 0x463F	; 0x80463f <qtm_local_ms_timecount+0x1>
    d618:	82 0f       	add	r24, r18
    d61a:	93 1f       	adc	r25, r19
    d61c:	80 93 3e 46 	sts	0x463E, r24	; 0x80463e <qtm_local_ms_timecount>
    d620:	90 93 3f 46 	sts	0x463F, r25	; 0x80463f <qtm_local_ms_timecount+0x1>
    d624:	08 95       	ret

0000d626 <qtm_init_sensor_key>:
    d626:	00 97       	sbiw	r24, 0x00	; 0
    d628:	d9 f0       	breq	.+54     	; 0xd660 <qtm_init_sensor_key+0x3a>
    d62a:	41 15       	cp	r20, r1
    d62c:	51 05       	cpc	r21, r1
    d62e:	c1 f0       	breq	.+48     	; 0xd660 <qtm_init_sensor_key+0x3a>
    d630:	26 e0       	ldi	r18, 0x06	; 6
    d632:	62 9f       	mul	r22, r18
    d634:	b0 01       	movw	r22, r0
    d636:	11 24       	eor	r1, r1
    d638:	dc 01       	movw	r26, r24
    d63a:	14 96       	adiw	r26, 0x04	; 4
    d63c:	ed 91       	ld	r30, X+
    d63e:	fc 91       	ld	r31, X
    d640:	15 97       	sbiw	r26, 0x05	; 5
    d642:	e6 0f       	add	r30, r22
    d644:	f7 1f       	adc	r31, r23
    d646:	21 e0       	ldi	r18, 0x01	; 1
    d648:	20 83       	st	Z, r18
    d64a:	14 96       	adiw	r26, 0x04	; 4
    d64c:	8d 91       	ld	r24, X+
    d64e:	9c 91       	ld	r25, X
    d650:	15 97       	sbiw	r26, 0x05	; 5
    d652:	fc 01       	movw	r30, r24
    d654:	e6 0f       	add	r30, r22
    d656:	f7 1f       	adc	r31, r23
    d658:	42 83       	std	Z+2, r20	; 0x02
    d65a:	53 83       	std	Z+3, r21	; 0x03
    d65c:	80 e0       	ldi	r24, 0x00	; 0
    d65e:	08 95       	ret
    d660:	8b e0       	ldi	r24, 0x0B	; 11
    d662:	08 95       	ret

0000d664 <qtm_key_sensors_process>:
    d664:	2f 92       	push	r2
    d666:	3f 92       	push	r3
    d668:	4f 92       	push	r4
    d66a:	5f 92       	push	r5
    d66c:	6f 92       	push	r6
    d66e:	7f 92       	push	r7
    d670:	8f 92       	push	r8
    d672:	9f 92       	push	r9
    d674:	af 92       	push	r10
    d676:	bf 92       	push	r11
    d678:	cf 92       	push	r12
    d67a:	df 92       	push	r13
    d67c:	ef 92       	push	r14
    d67e:	ff 92       	push	r15
    d680:	0f 93       	push	r16
    d682:	1f 93       	push	r17
    d684:	cf 93       	push	r28
    d686:	df 93       	push	r29
    d688:	00 97       	sbiw	r24, 0x00	; 0
    d68a:	09 f4       	brne	.+2      	; 0xd68e <qtm_key_sensors_process+0x2a>
    d68c:	7e c3       	rjmp	.+1788   	; 0xdd8a <qtm_key_sensors_process+0x726>
    d68e:	ec 01       	movw	r28, r24
    d690:	a1 2c       	mov	r10, r1
    d692:	b1 2c       	mov	r11, r1
    d694:	81 2c       	mov	r8, r1
    d696:	91 2c       	mov	r9, r1
    d698:	21 2c       	mov	r2, r1
    d69a:	d1 2c       	mov	r13, r1
    d69c:	55 24       	eor	r5, r5
    d69e:	53 94       	inc	r5
    d6a0:	33 e0       	ldi	r19, 0x03	; 3
    d6a2:	c3 2e       	mov	r12, r19
    d6a4:	45 e8       	ldi	r20, 0x85	; 133
    d6a6:	64 2e       	mov	r6, r20
    d6a8:	56 e8       	ldi	r21, 0x86	; 134
    d6aa:	75 2e       	mov	r7, r21
    d6ac:	62 e0       	ldi	r22, 0x02	; 2
    d6ae:	36 2e       	mov	r3, r22
    d6b0:	78 e0       	ldi	r23, 0x08	; 8
    d6b2:	47 2e       	mov	r4, r23
    d6b4:	ea 81       	ldd	r30, Y+2	; 0x02
    d6b6:	fb 81       	ldd	r31, Y+3	; 0x03
    d6b8:	80 81       	ld	r24, Z
    d6ba:	91 81       	ldd	r25, Z+1	; 0x01
    d6bc:	88 16       	cp	r8, r24
    d6be:	99 06       	cpc	r9, r25
    d6c0:	08 f0       	brcs	.+2      	; 0xd6c4 <qtm_key_sensors_process+0x60>
    d6c2:	a6 c1       	rjmp	.+844    	; 0xda10 <qtm_key_sensors_process+0x3ac>
    d6c4:	75 01       	movw	r14, r10
    d6c6:	ee 0c       	add	r14, r14
    d6c8:	ff 1c       	adc	r15, r15
    d6ca:	ec 81       	ldd	r30, Y+4	; 0x04
    d6cc:	fd 81       	ldd	r31, Y+5	; 0x05
    d6ce:	ee 0d       	add	r30, r14
    d6d0:	ff 1d       	adc	r31, r15
    d6d2:	a2 81       	ldd	r26, Z+2	; 0x02
    d6d4:	b3 81       	ldd	r27, Z+3	; 0x03
    d6d6:	9c 91       	ld	r25, X
    d6d8:	9e 71       	andi	r25, 0x1E	; 30
    d6da:	09 f0       	breq	.+2      	; 0xd6de <qtm_key_sensors_process+0x7a>
    d6dc:	50 82       	st	Z, r5
    d6de:	0c 81       	ldd	r16, Y+4	; 0x04
    d6e0:	1d 81       	ldd	r17, Y+5	; 0x05
    d6e2:	0e 0d       	add	r16, r14
    d6e4:	1f 1d       	adc	r17, r15
    d6e6:	d8 01       	movw	r26, r16
    d6e8:	8c 91       	ld	r24, X
    d6ea:	84 30       	cpi	r24, 0x04	; 4
    d6ec:	09 f4       	brne	.+2      	; 0xd6f0 <qtm_key_sensors_process+0x8c>
    d6ee:	9e c0       	rjmp	.+316    	; 0xd82c <qtm_key_sensors_process+0x1c8>
    d6f0:	38 f4       	brcc	.+14     	; 0xd700 <qtm_key_sensors_process+0x9c>
    d6f2:	82 30       	cpi	r24, 0x02	; 2
    d6f4:	d1 f0       	breq	.+52     	; 0xd72a <qtm_key_sensors_process+0xc6>
    d6f6:	08 f0       	brcs	.+2      	; 0xd6fa <qtm_key_sensors_process+0x96>
    d6f8:	45 c0       	rjmp	.+138    	; 0xd784 <qtm_key_sensors_process+0x120>
    d6fa:	81 30       	cpi	r24, 0x01	; 1
    d6fc:	59 f0       	breq	.+22     	; 0xd714 <qtm_key_sensors_process+0xb0>
    d6fe:	81 c1       	rjmp	.+770    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d700:	85 38       	cpi	r24, 0x85	; 133
    d702:	09 f4       	brne	.+2      	; 0xd706 <qtm_key_sensors_process+0xa2>
    d704:	bf c0       	rjmp	.+382    	; 0xd884 <qtm_key_sensors_process+0x220>
    d706:	86 38       	cpi	r24, 0x86	; 134
    d708:	09 f4       	brne	.+2      	; 0xd70c <qtm_key_sensors_process+0xa8>
    d70a:	f5 c0       	rjmp	.+490    	; 0xd8f6 <qtm_key_sensors_process+0x292>
    d70c:	87 30       	cpi	r24, 0x07	; 7
    d70e:	09 f0       	breq	.+2      	; 0xd712 <qtm_key_sensors_process+0xae>
    d710:	78 c1       	rjmp	.+752    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d712:	36 c1       	rjmp	.+620    	; 0xd980 <qtm_key_sensors_process+0x31c>
    d714:	91 11       	cpse	r25, r1
    d716:	67 c1       	rjmp	.+718    	; 0xd9e6 <qtm_key_sensors_process+0x382>
    d718:	f8 01       	movw	r30, r16
    d71a:	30 82       	st	Z, r3
    d71c:	8c 81       	ldd	r24, Y+4	; 0x04
    d71e:	9d 81       	ldd	r25, Y+5	; 0x05
    d720:	fc 01       	movw	r30, r24
    d722:	ee 0d       	add	r30, r14
    d724:	ff 1d       	adc	r31, r15
    d726:	41 82       	std	Z+1, r4	; 0x01
    d728:	5e c1       	rjmp	.+700    	; 0xd9e6 <qtm_key_sensors_process+0x382>
    d72a:	d8 01       	movw	r26, r16
    d72c:	11 96       	adiw	r26, 0x01	; 1
    d72e:	2c 91       	ld	r18, X
    d730:	11 97       	sbiw	r26, 0x01	; 1
    d732:	22 23       	and	r18, r18
    d734:	29 f1       	breq	.+74     	; 0xd780 <qtm_key_sensors_process+0x11c>
    d736:	12 96       	adiw	r26, 0x02	; 2
    d738:	ed 91       	ld	r30, X+
    d73a:	fc 91       	ld	r31, X
    d73c:	13 97       	sbiw	r26, 0x03	; 3
    d73e:	25 30       	cpi	r18, 0x05	; 5
    d740:	18 f0       	brcs	.+6      	; 0xd748 <qtm_key_sensors_process+0xe4>
    d742:	81 81       	ldd	r24, Z+1	; 0x01
    d744:	92 81       	ldd	r25, Z+2	; 0x02
    d746:	0e c0       	rjmp	.+28     	; 0xd764 <qtm_key_sensors_process+0x100>
    d748:	d8 01       	movw	r26, r16
    d74a:	14 96       	adiw	r26, 0x04	; 4
    d74c:	8d 91       	ld	r24, X+
    d74e:	9c 91       	ld	r25, X
    d750:	15 97       	sbiw	r26, 0x05	; 5
    d752:	41 81       	ldd	r20, Z+1	; 0x01
    d754:	52 81       	ldd	r21, Z+2	; 0x02
    d756:	84 17       	cp	r24, r20
    d758:	95 07       	cpc	r25, r21
    d75a:	69 f0       	breq	.+26     	; 0xd776 <qtm_key_sensors_process+0x112>
    d75c:	48 17       	cp	r20, r24
    d75e:	59 07       	cpc	r21, r25
    d760:	30 f4       	brcc	.+12     	; 0xd76e <qtm_key_sensors_process+0x10a>
    d762:	01 97       	sbiw	r24, 0x01	; 1
    d764:	14 96       	adiw	r26, 0x04	; 4
    d766:	8d 93       	st	X+, r24
    d768:	9c 93       	st	X, r25
    d76a:	15 97       	sbiw	r26, 0x05	; 5
    d76c:	04 c0       	rjmp	.+8      	; 0xd776 <qtm_key_sensors_process+0x112>
    d76e:	01 96       	adiw	r24, 0x01	; 1
    d770:	f8 01       	movw	r30, r16
    d772:	84 83       	std	Z+4, r24	; 0x04
    d774:	95 83       	std	Z+5, r25	; 0x05
    d776:	21 50       	subi	r18, 0x01	; 1
    d778:	d8 01       	movw	r26, r16
    d77a:	11 96       	adiw	r26, 0x01	; 1
    d77c:	2c 93       	st	X, r18
    d77e:	33 c1       	rjmp	.+614    	; 0xd9e6 <qtm_key_sensors_process+0x382>
    d780:	f8 01       	movw	r30, r16
    d782:	2d c1       	rjmp	.+602    	; 0xd9de <qtm_key_sensors_process+0x37a>
    d784:	d8 01       	movw	r26, r16
    d786:	14 96       	adiw	r26, 0x04	; 4
    d788:	2d 91       	ld	r18, X+
    d78a:	3c 91       	ld	r19, X
    d78c:	15 97       	sbiw	r26, 0x05	; 5
    d78e:	12 96       	adiw	r26, 0x02	; 2
    d790:	ed 91       	ld	r30, X+
    d792:	fc 91       	ld	r31, X
    d794:	13 97       	sbiw	r26, 0x03	; 3
    d796:	41 81       	ldd	r20, Z+1	; 0x01
    d798:	52 81       	ldd	r21, Z+2	; 0x02
    d79a:	24 17       	cp	r18, r20
    d79c:	35 07       	cpc	r19, r21
    d79e:	09 f4       	brne	.+2      	; 0xd7a2 <qtm_key_sensors_process+0x13e>
    d7a0:	30 c1       	rjmp	.+608    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d7a2:	8e 81       	ldd	r24, Y+6	; 0x06
    d7a4:	9f 81       	ldd	r25, Y+7	; 0x07
    d7a6:	42 17       	cp	r20, r18
    d7a8:	53 07       	cpc	r21, r19
    d7aa:	f8 f4       	brcc	.+62     	; 0xd7ea <qtm_key_sensors_process+0x186>
    d7ac:	ea 81       	ldd	r30, Y+2	; 0x02
    d7ae:	fb 81       	ldd	r31, Y+3	; 0x03
    d7b0:	24 1b       	sub	r18, r20
    d7b2:	35 0b       	sbc	r19, r21
    d7b4:	dc 01       	movw	r26, r24
    d7b6:	aa 0d       	add	r26, r10
    d7b8:	bb 1d       	adc	r27, r11
    d7ba:	8c 91       	ld	r24, X
    d7bc:	90 e0       	ldi	r25, 0x00	; 0
    d7be:	05 80       	ldd	r0, Z+5	; 0x05
    d7c0:	02 c0       	rjmp	.+4      	; 0xd7c6 <qtm_key_sensors_process+0x162>
    d7c2:	95 95       	asr	r25
    d7c4:	87 95       	ror	r24
    d7c6:	0a 94       	dec	r0
    d7c8:	e2 f7       	brpl	.-8      	; 0xd7c2 <qtm_key_sensors_process+0x15e>
    d7ca:	99 27       	eor	r25, r25
    d7cc:	28 17       	cp	r18, r24
    d7ce:	39 07       	cpc	r19, r25
    d7d0:	08 f4       	brcc	.+2      	; 0xd7d4 <qtm_key_sensors_process+0x170>
    d7d2:	17 c1       	rjmp	.+558    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d7d4:	84 81       	ldd	r24, Z+4	; 0x04
    d7d6:	88 23       	and	r24, r24
    d7d8:	09 f4       	brne	.+2      	; 0xd7dc <qtm_key_sensors_process+0x178>
    d7da:	13 c1       	rjmp	.+550    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d7dc:	87 e0       	ldi	r24, 0x07	; 7
    d7de:	f8 01       	movw	r30, r16
    d7e0:	80 83       	st	Z, r24
    d7e2:	ea 81       	ldd	r30, Y+2	; 0x02
    d7e4:	fb 81       	ldd	r31, Y+3	; 0x03
    d7e6:	24 81       	ldd	r18, Z+4	; 0x04
    d7e8:	1a c0       	rjmp	.+52     	; 0xd81e <qtm_key_sensors_process+0x1ba>
    d7ea:	fc 01       	movw	r30, r24
    d7ec:	ea 0d       	add	r30, r10
    d7ee:	fb 1d       	adc	r31, r11
    d7f0:	42 1b       	sub	r20, r18
    d7f2:	53 0b       	sbc	r21, r19
    d7f4:	80 81       	ld	r24, Z
    d7f6:	90 e0       	ldi	r25, 0x00	; 0
    d7f8:	48 17       	cp	r20, r24
    d7fa:	59 07       	cpc	r21, r25
    d7fc:	08 f4       	brcc	.+2      	; 0xd800 <qtm_key_sensors_process+0x19c>
    d7fe:	01 c1       	rjmp	.+514    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d800:	82 81       	ldd	r24, Z+2	; 0x02
    d802:	88 23       	and	r24, r24
    d804:	31 f0       	breq	.+12     	; 0xd812 <qtm_key_sensors_process+0x1ae>
    d806:	b4 01       	movw	r22, r8
    d808:	ce 01       	movw	r24, r28
    d80a:	0e 94 9f 6a 	call	0xd53e	; 0xd53e <check_for_aks_block>
    d80e:	81 11       	cpse	r24, r1
    d810:	f8 c0       	rjmp	.+496    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d812:	e4 e0       	ldi	r30, 0x04	; 4
    d814:	d8 01       	movw	r26, r16
    d816:	ec 93       	st	X, r30
    d818:	ea 81       	ldd	r30, Y+2	; 0x02
    d81a:	fb 81       	ldd	r31, Y+3	; 0x03
    d81c:	22 81       	ldd	r18, Z+2	; 0x02
    d81e:	8c 81       	ldd	r24, Y+4	; 0x04
    d820:	9d 81       	ldd	r25, Y+5	; 0x05
    d822:	fc 01       	movw	r30, r24
    d824:	ee 0d       	add	r30, r14
    d826:	ff 1d       	adc	r31, r15
    d828:	21 83       	std	Z+1, r18	; 0x01
    d82a:	dd c0       	rjmp	.+442    	; 0xd9e6 <qtm_key_sensors_process+0x382>
    d82c:	d8 01       	movw	r26, r16
    d82e:	14 96       	adiw	r26, 0x04	; 4
    d830:	2d 91       	ld	r18, X+
    d832:	3c 91       	ld	r19, X
    d834:	15 97       	sbiw	r26, 0x05	; 5
    d836:	12 96       	adiw	r26, 0x02	; 2
    d838:	ed 91       	ld	r30, X+
    d83a:	fc 91       	ld	r31, X
    d83c:	13 97       	sbiw	r26, 0x03	; 3
    d83e:	81 81       	ldd	r24, Z+1	; 0x01
    d840:	92 81       	ldd	r25, Z+2	; 0x02
    d842:	82 17       	cp	r24, r18
    d844:	93 07       	cpc	r25, r19
    d846:	08 f4       	brcc	.+2      	; 0xd84a <qtm_key_sensors_process+0x1e6>
    d848:	bb c0       	rjmp	.+374    	; 0xd9c0 <qtm_key_sensors_process+0x35c>
    d84a:	ee 81       	ldd	r30, Y+6	; 0x06
    d84c:	ff 81       	ldd	r31, Y+7	; 0x07
    d84e:	ea 0d       	add	r30, r10
    d850:	fb 1d       	adc	r31, r11
    d852:	82 1b       	sub	r24, r18
    d854:	93 0b       	sbc	r25, r19
    d856:	20 81       	ld	r18, Z
    d858:	30 e0       	ldi	r19, 0x00	; 0
    d85a:	28 17       	cp	r18, r24
    d85c:	39 07       	cpc	r19, r25
    d85e:	08 f0       	brcs	.+2      	; 0xd862 <qtm_key_sensors_process+0x1fe>
    d860:	c5 c0       	rjmp	.+394    	; 0xd9ec <qtm_key_sensors_process+0x388>
    d862:	82 81       	ldd	r24, Z+2	; 0x02
    d864:	88 23       	and	r24, r24
    d866:	31 f0       	breq	.+12     	; 0xd874 <qtm_key_sensors_process+0x210>
    d868:	b4 01       	movw	r22, r8
    d86a:	ce 01       	movw	r24, r28
    d86c:	0e 94 9f 6a 	call	0xd53e	; 0xd53e <check_for_aks_block>
    d870:	81 11       	cpse	r24, r1
    d872:	c7 c0       	rjmp	.+398    	; 0xda02 <qtm_key_sensors_process+0x39e>
    d874:	f8 01       	movw	r30, r16
    d876:	81 81       	ldd	r24, Z+1	; 0x01
    d878:	88 23       	and	r24, r24
    d87a:	09 f4       	brne	.+2      	; 0xd87e <qtm_key_sensors_process+0x21a>
    d87c:	6a c0       	rjmp	.+212    	; 0xd952 <qtm_key_sensors_process+0x2ee>
    d87e:	81 50       	subi	r24, 0x01	; 1
    d880:	81 83       	std	Z+1, r24	; 0x01
    d882:	b1 c0       	rjmp	.+354    	; 0xd9e6 <qtm_key_sensors_process+0x382>
    d884:	e8 81       	ld	r30, Y
    d886:	f9 81       	ldd	r31, Y+1	; 0x01
    d888:	aa 81       	ldd	r26, Y+2	; 0x02
    d88a:	bb 81       	ldd	r27, Y+3	; 0x03
    d88c:	18 96       	adiw	r26, 0x08	; 8
    d88e:	8c 91       	ld	r24, X
    d890:	83 83       	std	Z+3, r24	; 0x03
    d892:	ec 81       	ldd	r30, Y+4	; 0x04
    d894:	fd 81       	ldd	r31, Y+5	; 0x05
    d896:	ee 0d       	add	r30, r14
    d898:	ff 1d       	adc	r31, r15
    d89a:	44 81       	ldd	r20, Z+4	; 0x04
    d89c:	55 81       	ldd	r21, Z+5	; 0x05
    d89e:	a2 81       	ldd	r26, Z+2	; 0x02
    d8a0:	b3 81       	ldd	r27, Z+3	; 0x03
    d8a2:	11 96       	adiw	r26, 0x01	; 1
    d8a4:	8d 91       	ld	r24, X+
    d8a6:	9c 91       	ld	r25, X
    d8a8:	12 97       	sbiw	r26, 0x02	; 2
    d8aa:	84 17       	cp	r24, r20
    d8ac:	95 07       	cpc	r25, r21
    d8ae:	c0 f0       	brcs	.+48     	; 0xd8e0 <qtm_key_sensors_process+0x27c>
    d8b0:	ae 81       	ldd	r26, Y+6	; 0x06
    d8b2:	bf 81       	ldd	r27, Y+7	; 0x07
    d8b4:	aa 0d       	add	r26, r10
    d8b6:	bb 1d       	adc	r27, r11
    d8b8:	6c 91       	ld	r22, X
    d8ba:	26 2f       	mov	r18, r22
    d8bc:	30 e0       	ldi	r19, 0x00	; 0
    d8be:	11 96       	adiw	r26, 0x01	; 1
    d8c0:	7c 91       	ld	r23, X
    d8c2:	7f 5f       	subi	r23, 0xFF	; 255
    d8c4:	02 c0       	rjmp	.+4      	; 0xd8ca <qtm_key_sensors_process+0x266>
    d8c6:	35 95       	asr	r19
    d8c8:	27 95       	ror	r18
    d8ca:	7a 95       	dec	r23
    d8cc:	e2 f7       	brpl	.-8      	; 0xd8c6 <qtm_key_sensors_process+0x262>
    d8ce:	84 1b       	sub	r24, r20
    d8d0:	95 0b       	sbc	r25, r21
    d8d2:	62 1b       	sub	r22, r18
    d8d4:	26 2f       	mov	r18, r22
    d8d6:	30 e0       	ldi	r19, 0x00	; 0
    d8d8:	28 17       	cp	r18, r24
    d8da:	39 07       	cpc	r19, r25
    d8dc:	08 f4       	brcc	.+2      	; 0xd8e0 <qtm_key_sensors_process+0x27c>
    d8de:	8f c0       	rjmp	.+286    	; 0xd9fe <qtm_key_sensors_process+0x39a>
    d8e0:	70 82       	st	Z, r7
    d8e2:	ea 81       	ldd	r30, Y+2	; 0x02
    d8e4:	fb 81       	ldd	r31, Y+3	; 0x03
    d8e6:	22 81       	ldd	r18, Z+2	; 0x02
    d8e8:	8c 81       	ldd	r24, Y+4	; 0x04
    d8ea:	9d 81       	ldd	r25, Y+5	; 0x05
    d8ec:	fc 01       	movw	r30, r24
    d8ee:	ee 0d       	add	r30, r14
    d8f0:	ff 1d       	adc	r31, r15
    d8f2:	21 83       	std	Z+1, r18	; 0x01
    d8f4:	42 c0       	rjmp	.+132    	; 0xd97a <qtm_key_sensors_process+0x316>
    d8f6:	d8 01       	movw	r26, r16
    d8f8:	14 96       	adiw	r26, 0x04	; 4
    d8fa:	6d 91       	ld	r22, X+
    d8fc:	7c 91       	ld	r23, X
    d8fe:	15 97       	sbiw	r26, 0x05	; 5
    d900:	12 96       	adiw	r26, 0x02	; 2
    d902:	ed 91       	ld	r30, X+
    d904:	fc 91       	ld	r31, X
    d906:	13 97       	sbiw	r26, 0x03	; 3
    d908:	21 81       	ldd	r18, Z+1	; 0x01
    d90a:	32 81       	ldd	r19, Z+2	; 0x02
    d90c:	26 17       	cp	r18, r22
    d90e:	37 07       	cpc	r19, r23
    d910:	58 f4       	brcc	.+22     	; 0xd928 <qtm_key_sensors_process+0x2c4>
    d912:	11 96       	adiw	r26, 0x01	; 1
    d914:	8c 91       	ld	r24, X
    d916:	11 97       	sbiw	r26, 0x01	; 1
    d918:	81 11       	cpse	r24, r1
    d91a:	02 c0       	rjmp	.+4      	; 0xd920 <qtm_key_sensors_process+0x2bc>
    d91c:	cc 92       	st	X, r12
    d91e:	6f c0       	rjmp	.+222    	; 0xd9fe <qtm_key_sensors_process+0x39a>
    d920:	81 50       	subi	r24, 0x01	; 1
    d922:	f8 01       	movw	r30, r16
    d924:	81 83       	std	Z+1, r24	; 0x01
    d926:	6b c0       	rjmp	.+214    	; 0xd9fe <qtm_key_sensors_process+0x39a>
    d928:	ee 81       	ldd	r30, Y+6	; 0x06
    d92a:	ff 81       	ldd	r31, Y+7	; 0x07
    d92c:	ea 0d       	add	r30, r10
    d92e:	fb 1d       	adc	r31, r11
    d930:	80 81       	ld	r24, Z
    d932:	48 2f       	mov	r20, r24
    d934:	50 e0       	ldi	r21, 0x00	; 0
    d936:	91 81       	ldd	r25, Z+1	; 0x01
    d938:	9f 5f       	subi	r25, 0xFF	; 255
    d93a:	02 c0       	rjmp	.+4      	; 0xd940 <qtm_key_sensors_process+0x2dc>
    d93c:	55 95       	asr	r21
    d93e:	47 95       	ror	r20
    d940:	9a 95       	dec	r25
    d942:	e2 f7       	brpl	.-8      	; 0xd93c <qtm_key_sensors_process+0x2d8>
    d944:	26 1b       	sub	r18, r22
    d946:	37 0b       	sbc	r19, r23
    d948:	84 1b       	sub	r24, r20
    d94a:	90 e0       	ldi	r25, 0x00	; 0
    d94c:	82 17       	cp	r24, r18
    d94e:	93 07       	cpc	r25, r19
    d950:	60 f4       	brcc	.+24     	; 0xd96a <qtm_key_sensors_process+0x306>
    d952:	d8 01       	movw	r26, r16
    d954:	6c 92       	st	X, r6
    d956:	ea 81       	ldd	r30, Y+2	; 0x02
    d958:	fb 81       	ldd	r31, Y+3	; 0x03
    d95a:	23 81       	ldd	r18, Z+3	; 0x03
    d95c:	8c 81       	ldd	r24, Y+4	; 0x04
    d95e:	9d 81       	ldd	r25, Y+5	; 0x05
    d960:	fc 01       	movw	r30, r24
    d962:	ee 0d       	add	r30, r14
    d964:	ff 1d       	adc	r31, r15
    d966:	21 83       	std	Z+1, r18	; 0x01
    d968:	4a c0       	rjmp	.+148    	; 0xd9fe <qtm_key_sensors_process+0x39a>
    d96a:	f8 01       	movw	r30, r16
    d96c:	81 81       	ldd	r24, Z+1	; 0x01
    d96e:	81 11       	cpse	r24, r1
    d970:	02 c0       	rjmp	.+4      	; 0xd976 <qtm_key_sensors_process+0x312>
    d972:	c0 82       	st	Z, r12
    d974:	44 c0       	rjmp	.+136    	; 0xd9fe <qtm_key_sensors_process+0x39a>
    d976:	81 50       	subi	r24, 0x01	; 1
    d978:	81 83       	std	Z+1, r24	; 0x01
    d97a:	22 24       	eor	r2, r2
    d97c:	23 94       	inc	r2
    d97e:	33 c0       	rjmp	.+102    	; 0xd9e6 <qtm_key_sensors_process+0x382>
    d980:	f8 01       	movw	r30, r16
    d982:	24 81       	ldd	r18, Z+4	; 0x04
    d984:	35 81       	ldd	r19, Z+5	; 0x05
    d986:	02 80       	ldd	r0, Z+2	; 0x02
    d988:	f3 81       	ldd	r31, Z+3	; 0x03
    d98a:	e0 2d       	mov	r30, r0
    d98c:	81 81       	ldd	r24, Z+1	; 0x01
    d98e:	92 81       	ldd	r25, Z+2	; 0x02
    d990:	82 17       	cp	r24, r18
    d992:	93 07       	cpc	r25, r19
    d994:	58 f5       	brcc	.+86     	; 0xd9ec <qtm_key_sensors_process+0x388>
    d996:	28 1b       	sub	r18, r24
    d998:	39 0b       	sbc	r19, r25
    d99a:	ee 81       	ldd	r30, Y+6	; 0x06
    d99c:	ff 81       	ldd	r31, Y+7	; 0x07
    d99e:	ea 0d       	add	r30, r10
    d9a0:	fb 1d       	adc	r31, r11
    d9a2:	80 81       	ld	r24, Z
    d9a4:	90 e0       	ldi	r25, 0x00	; 0
    d9a6:	ea 81       	ldd	r30, Y+2	; 0x02
    d9a8:	fb 81       	ldd	r31, Y+3	; 0x03
    d9aa:	05 80       	ldd	r0, Z+5	; 0x05
    d9ac:	02 c0       	rjmp	.+4      	; 0xd9b2 <qtm_key_sensors_process+0x34e>
    d9ae:	95 95       	asr	r25
    d9b0:	87 95       	ror	r24
    d9b2:	0a 94       	dec	r0
    d9b4:	e2 f7       	brpl	.-8      	; 0xd9ae <qtm_key_sensors_process+0x34a>
    d9b6:	99 27       	eor	r25, r25
    d9b8:	28 17       	cp	r18, r24
    d9ba:	39 07       	cpc	r19, r25
    d9bc:	18 f4       	brcc	.+6      	; 0xd9c4 <qtm_key_sensors_process+0x360>
    d9be:	d8 01       	movw	r26, r16
    d9c0:	cc 92       	st	X, r12
    d9c2:	16 c0       	rjmp	.+44     	; 0xd9f0 <qtm_key_sensors_process+0x38c>
    d9c4:	f8 01       	movw	r30, r16
    d9c6:	81 81       	ldd	r24, Z+1	; 0x01
    d9c8:	81 11       	cpse	r24, r1
    d9ca:	0b c0       	rjmp	.+22     	; 0xd9e2 <qtm_key_sensors_process+0x37e>
    d9cc:	50 82       	st	Z, r5
    d9ce:	8c 81       	ldd	r24, Y+4	; 0x04
    d9d0:	9d 81       	ldd	r25, Y+5	; 0x05
    d9d2:	fc 01       	movw	r30, r24
    d9d4:	ee 0d       	add	r30, r14
    d9d6:	ff 1d       	adc	r31, r15
    d9d8:	02 80       	ldd	r0, Z+2	; 0x02
    d9da:	f3 81       	ldd	r31, Z+3	; 0x03
    d9dc:	e0 2d       	mov	r30, r0
    d9de:	c0 82       	st	Z, r12
    d9e0:	10 c0       	rjmp	.+32     	; 0xda02 <qtm_key_sensors_process+0x39e>
    d9e2:	81 50       	subi	r24, 0x01	; 1
    d9e4:	81 83       	std	Z+1, r24	; 0x01
    d9e6:	dd 24       	eor	r13, r13
    d9e8:	d3 94       	inc	r13
    d9ea:	0b c0       	rjmp	.+22     	; 0xda02 <qtm_key_sensors_process+0x39e>
    d9ec:	f8 01       	movw	r30, r16
    d9ee:	c0 82       	st	Z, r12
    d9f0:	8c 81       	ldd	r24, Y+4	; 0x04
    d9f2:	9d 81       	ldd	r25, Y+5	; 0x05
    d9f4:	fc 01       	movw	r30, r24
    d9f6:	ee 0d       	add	r30, r14
    d9f8:	ff 1d       	adc	r31, r15
    d9fa:	11 82       	std	Z+1, r1	; 0x01
    d9fc:	02 c0       	rjmp	.+4      	; 0xda02 <qtm_key_sensors_process+0x39e>
    d9fe:	22 24       	eor	r2, r2
    da00:	23 94       	inc	r2
    da02:	ff ef       	ldi	r31, 0xFF	; 255
    da04:	8f 1a       	sub	r8, r31
    da06:	9f 0a       	sbc	r9, r31
    da08:	83 e0       	ldi	r24, 0x03	; 3
    da0a:	a8 0e       	add	r10, r24
    da0c:	b1 1c       	adc	r11, r1
    da0e:	52 ce       	rjmp	.-860    	; 0xd6b4 <qtm_key_sensors_process+0x50>
    da10:	e8 81       	ld	r30, Y
    da12:	f9 81       	ldd	r31, Y+1	; 0x01
    da14:	80 81       	ld	r24, Z
    da16:	87 ff       	sbrs	r24, 7
    da18:	23 c0       	rjmp	.+70     	; 0xda60 <qtm_key_sensors_process+0x3fc>
    da1a:	40 e0       	ldi	r20, 0x00	; 0
    da1c:	50 e0       	ldi	r21, 0x00	; 0
    da1e:	20 e0       	ldi	r18, 0x00	; 0
    da20:	30 e0       	ldi	r19, 0x00	; 0
    da22:	ea 81       	ldd	r30, Y+2	; 0x02
    da24:	fb 81       	ldd	r31, Y+3	; 0x03
    da26:	80 81       	ld	r24, Z
    da28:	91 81       	ldd	r25, Z+1	; 0x01
    da2a:	28 17       	cp	r18, r24
    da2c:	39 07       	cpc	r19, r25
    da2e:	98 f4       	brcc	.+38     	; 0xda56 <qtm_key_sensors_process+0x3f2>
    da30:	ec 81       	ldd	r30, Y+4	; 0x04
    da32:	fd 81       	ldd	r31, Y+5	; 0x05
    da34:	e4 0f       	add	r30, r20
    da36:	f5 1f       	adc	r31, r21
    da38:	a2 81       	ldd	r26, Z+2	; 0x02
    da3a:	b3 81       	ldd	r27, Z+3	; 0x03
    da3c:	8c 91       	ld	r24, X
    da3e:	80 fd       	sbrc	r24, 0
    da40:	05 c0       	rjmp	.+10     	; 0xda4c <qtm_key_sensors_process+0x3e8>
    da42:	90 81       	ld	r25, Z
    da44:	97 7f       	andi	r25, 0xF7	; 247
    da46:	11 f0       	breq	.+4      	; 0xda4c <qtm_key_sensors_process+0x3e8>
    da48:	81 60       	ori	r24, 0x01	; 1
    da4a:	8c 93       	st	X, r24
    da4c:	2f 5f       	subi	r18, 0xFF	; 255
    da4e:	3f 4f       	sbci	r19, 0xFF	; 255
    da50:	4a 5f       	subi	r20, 0xFA	; 250
    da52:	5f 4f       	sbci	r21, 0xFF	; 255
    da54:	e6 cf       	rjmp	.-52     	; 0xda22 <qtm_key_sensors_process+0x3be>
    da56:	e8 81       	ld	r30, Y
    da58:	f9 81       	ldd	r31, Y+1	; 0x01
    da5a:	80 81       	ld	r24, Z
    da5c:	8f 77       	andi	r24, 0x7F	; 127
    da5e:	80 83       	st	Z, r24
    da60:	d1 10       	cpse	r13, r1
    da62:	07 c0       	rjmp	.+14     	; 0xda72 <qtm_key_sensors_process+0x40e>
    da64:	e8 81       	ld	r30, Y
    da66:	f9 81       	ldd	r31, Y+1	; 0x01
    da68:	21 10       	cpse	r2, r1
    da6a:	6f c0       	rjmp	.+222    	; 0xdb4a <qtm_key_sensors_process+0x4e6>
    da6c:	80 81       	ld	r24, Z
    da6e:	8e 7f       	andi	r24, 0xFE	; 254
    da70:	6e c0       	rjmp	.+220    	; 0xdb4e <qtm_key_sensors_process+0x4ea>
    da72:	ea 81       	ldd	r30, Y+2	; 0x02
    da74:	fb 81       	ldd	r31, Y+3	; 0x03
    da76:	81 85       	ldd	r24, Z+9	; 0x09
    da78:	88 23       	and	r24, r24
    da7a:	a1 f3       	breq	.-24     	; 0xda64 <qtm_key_sensors_process+0x400>
    da7c:	e8 81       	ld	r30, Y
    da7e:	f9 81       	ldd	r31, Y+1	; 0x01
    da80:	80 81       	ld	r24, Z
    da82:	80 68       	ori	r24, 0x80	; 128
    da84:	80 83       	st	Z, r24
    da86:	ea 81       	ldd	r30, Y+2	; 0x02
    da88:	fb 81       	ldd	r31, Y+3	; 0x03
    da8a:	81 85       	ldd	r24, Z+9	; 0x09
    da8c:	81 30       	cpi	r24, 0x01	; 1
    da8e:	51 f7       	brne	.-44     	; 0xda64 <qtm_key_sensors_process+0x400>
    da90:	40 e0       	ldi	r20, 0x00	; 0
    da92:	50 e0       	ldi	r21, 0x00	; 0
    da94:	20 e0       	ldi	r18, 0x00	; 0
    da96:	30 e0       	ldi	r19, 0x00	; 0
    da98:	96 e0       	ldi	r25, 0x06	; 6
    da9a:	d9 2e       	mov	r13, r25
    da9c:	ea 81       	ldd	r30, Y+2	; 0x02
    da9e:	fb 81       	ldd	r31, Y+3	; 0x03
    daa0:	60 81       	ld	r22, Z
    daa2:	71 81       	ldd	r23, Z+1	; 0x01
    daa4:	26 17       	cp	r18, r22
    daa6:	37 07       	cpc	r19, r23
    daa8:	e8 f6       	brcc	.-70     	; 0xda64 <qtm_key_sensors_process+0x400>
    daaa:	0c 81       	ldd	r16, Y+4	; 0x04
    daac:	1d 81       	ldd	r17, Y+5	; 0x05
    daae:	fa 01       	movw	r30, r20
    dab0:	ee 0f       	add	r30, r30
    dab2:	ff 1f       	adc	r31, r31
    dab4:	e0 0f       	add	r30, r16
    dab6:	f1 1f       	adc	r31, r17
    dab8:	80 81       	ld	r24, Z
    daba:	98 2f       	mov	r25, r24
    dabc:	97 7f       	andi	r25, 0xF7	; 247
    dabe:	a1 f1       	breq	.+104    	; 0xdb28 <qtm_key_sensors_process+0x4c4>
    dac0:	85 38       	cpi	r24, 0x85	; 133
    dac2:	11 f0       	breq	.+4      	; 0xdac8 <qtm_key_sensors_process+0x464>
    dac4:	83 30       	cpi	r24, 0x03	; 3
    dac6:	b1 f5       	brne	.+108    	; 0xdb34 <qtm_key_sensors_process+0x4d0>
    dac8:	ee 80       	ldd	r14, Y+6	; 0x06
    daca:	ff 80       	ldd	r15, Y+7	; 0x07
    dacc:	d7 01       	movw	r26, r14
    dace:	a4 0f       	add	r26, r20
    dad0:	b5 1f       	adc	r27, r21
    dad2:	12 96       	adiw	r26, 0x02	; 2
    dad4:	bc 90       	ld	r11, X
    dad6:	bb 20       	and	r11, r11
    dad8:	39 f1       	breq	.+78     	; 0xdb28 <qtm_key_sensors_process+0x4c4>
    dada:	80 e0       	ldi	r24, 0x00	; 0
    dadc:	90 e0       	ldi	r25, 0x00	; 0
    dade:	c1 2c       	mov	r12, r1
    dae0:	86 17       	cp	r24, r22
    dae2:	97 07       	cpc	r25, r23
    dae4:	f8 f4       	brcc	.+62     	; 0xdb24 <qtm_key_sensors_process+0x4c0>
    dae6:	28 17       	cp	r18, r24
    dae8:	39 07       	cpc	r19, r25
    daea:	d1 f0       	breq	.+52     	; 0xdb20 <qtm_key_sensors_process+0x4bc>
    daec:	d8 9e       	mul	r13, r24
    daee:	d0 01       	movw	r26, r0
    daf0:	d9 9e       	mul	r13, r25
    daf2:	b0 0d       	add	r27, r0
    daf4:	11 24       	eor	r1, r1
    daf6:	a0 0f       	add	r26, r16
    daf8:	b1 1f       	adc	r27, r17
    dafa:	ac 91       	ld	r26, X
    dafc:	a4 30       	cpi	r26, 0x04	; 4
    dafe:	11 f0       	breq	.+4      	; 0xdb04 <qtm_key_sensors_process+0x4a0>
    db00:	a6 38       	cpi	r26, 0x86	; 134
    db02:	71 f4       	brne	.+28     	; 0xdb20 <qtm_key_sensors_process+0x4bc>
    db04:	dc 01       	movw	r26, r24
    db06:	aa 0f       	add	r26, r26
    db08:	bb 1f       	adc	r27, r27
    db0a:	a8 0f       	add	r26, r24
    db0c:	b9 1f       	adc	r27, r25
    db0e:	ae 0d       	add	r26, r14
    db10:	bf 1d       	adc	r27, r15
    db12:	12 96       	adiw	r26, 0x02	; 2
    db14:	ac 91       	ld	r26, X
    db16:	ba 12       	cpse	r11, r26
    db18:	03 c0       	rjmp	.+6      	; 0xdb20 <qtm_key_sensors_process+0x4bc>
    db1a:	cb 01       	movw	r24, r22
    db1c:	cc 24       	eor	r12, r12
    db1e:	c3 94       	inc	r12
    db20:	01 96       	adiw	r24, 0x01	; 1
    db22:	de cf       	rjmp	.-68     	; 0xdae0 <qtm_key_sensors_process+0x47c>
    db24:	c1 10       	cpse	r12, r1
    db26:	06 c0       	rjmp	.+12     	; 0xdb34 <qtm_key_sensors_process+0x4d0>
    db28:	02 80       	ldd	r0, Z+2	; 0x02
    db2a:	f3 81       	ldd	r31, Z+3	; 0x03
    db2c:	e0 2d       	mov	r30, r0
    db2e:	80 81       	ld	r24, Z
    db30:	8e 7f       	andi	r24, 0xFE	; 254
    db32:	05 c0       	rjmp	.+10     	; 0xdb3e <qtm_key_sensors_process+0x4da>
    db34:	02 80       	ldd	r0, Z+2	; 0x02
    db36:	f3 81       	ldd	r31, Z+3	; 0x03
    db38:	e0 2d       	mov	r30, r0
    db3a:	80 81       	ld	r24, Z
    db3c:	81 60       	ori	r24, 0x01	; 1
    db3e:	80 83       	st	Z, r24
    db40:	2f 5f       	subi	r18, 0xFF	; 255
    db42:	3f 4f       	sbci	r19, 0xFF	; 255
    db44:	4d 5f       	subi	r20, 0xFD	; 253
    db46:	5f 4f       	sbci	r21, 0xFF	; 255
    db48:	a9 cf       	rjmp	.-174    	; 0xda9c <qtm_key_sensors_process+0x438>
    db4a:	80 81       	ld	r24, Z
    db4c:	81 60       	ori	r24, 0x01	; 1
    db4e:	80 83       	st	Z, r24
    db50:	80 91 3e 46 	lds	r24, 0x463E	; 0x80463e <qtm_local_ms_timecount>
    db54:	90 91 3f 46 	lds	r25, 0x463F	; 0x80463f <qtm_local_ms_timecount+0x1>
    db58:	e8 81       	ld	r30, Y
    db5a:	f9 81       	ldd	r31, Y+1	; 0x01
    db5c:	21 81       	ldd	r18, Z+1	; 0x01
    db5e:	32 81       	ldd	r19, Z+2	; 0x02
    db60:	a9 01       	movw	r20, r18
    db62:	48 53       	subi	r20, 0x38	; 56
    db64:	5f 4f       	sbci	r21, 0xFF	; 255
    db66:	48 17       	cp	r20, r24
    db68:	59 07       	cpc	r21, r25
    db6a:	38 f4       	brcc	.+14     	; 0xdb7a <qtm_key_sensors_process+0x516>
    db6c:	82 1b       	sub	r24, r18
    db6e:	93 0b       	sbc	r25, r19
    db70:	aa 24       	eor	r10, r10
    db72:	a3 94       	inc	r10
    db74:	a3 e0       	ldi	r26, 0x03	; 3
    db76:	ba 2e       	mov	r11, r26
    db78:	44 c0       	rjmp	.+136    	; 0xdc02 <qtm_key_sensors_process+0x59e>
    db7a:	82 17       	cp	r24, r18
    db7c:	93 07       	cpc	r25, r19
    db7e:	10 f0       	brcs	.+4      	; 0xdb84 <qtm_key_sensors_process+0x520>
    db80:	80 e0       	ldi	r24, 0x00	; 0
    db82:	04 c1       	rjmp	.+520    	; 0xdd8c <qtm_key_sensors_process+0x728>
    db84:	82 1b       	sub	r24, r18
    db86:	93 0b       	sbc	r25, r19
    db88:	01 97       	sbiw	r24, 0x01	; 1
    db8a:	89 3c       	cpi	r24, 0xC9	; 201
    db8c:	91 05       	cpc	r25, r1
    db8e:	c0 f3       	brcs	.-16     	; 0xdb80 <qtm_key_sensors_process+0x51c>
    db90:	ef cf       	rjmp	.-34     	; 0xdb70 <qtm_key_sensors_process+0x50c>
    db92:	88 5c       	subi	r24, 0xC8	; 200
    db94:	91 09       	sbc	r25, r1
    db96:	e8 81       	ld	r30, Y
    db98:	f9 81       	ldd	r31, Y+1	; 0x01
    db9a:	21 81       	ldd	r18, Z+1	; 0x01
    db9c:	32 81       	ldd	r19, Z+2	; 0x02
    db9e:	28 53       	subi	r18, 0x38	; 56
    dba0:	3f 4f       	sbci	r19, 0xFF	; 255
    dba2:	21 83       	std	Z+1, r18	; 0x01
    dba4:	32 83       	std	Z+2, r19	; 0x02
    dba6:	23 81       	ldd	r18, Z+3	; 0x03
    dba8:	21 11       	cpse	r18, r1
    dbaa:	96 c0       	rjmp	.+300    	; 0xdcd8 <qtm_key_sensors_process+0x674>
    dbac:	24 81       	ldd	r18, Z+4	; 0x04
    dbae:	22 23       	and	r18, r18
    dbb0:	11 f0       	breq	.+4      	; 0xdbb6 <qtm_key_sensors_process+0x552>
    dbb2:	21 50       	subi	r18, 0x01	; 1
    dbb4:	24 83       	std	Z+4, r18	; 0x04
    dbb6:	e8 81       	ld	r30, Y
    dbb8:	f9 81       	ldd	r31, Y+1	; 0x01
    dbba:	25 81       	ldd	r18, Z+5	; 0x05
    dbbc:	22 23       	and	r18, r18
    dbbe:	11 f0       	breq	.+4      	; 0xdbc4 <qtm_key_sensors_process+0x560>
    dbc0:	21 50       	subi	r18, 0x01	; 1
    dbc2:	25 83       	std	Z+5, r18	; 0x05
    dbc4:	8a 80       	ldd	r8, Y+2	; 0x02
    dbc6:	9b 80       	ldd	r9, Y+3	; 0x03
    dbc8:	d4 01       	movw	r26, r8
    dbca:	16 96       	adiw	r26, 0x06	; 6
    dbcc:	2c 91       	ld	r18, X
    dbce:	16 97       	sbiw	r26, 0x06	; 6
    dbd0:	21 11       	cpse	r18, r1
    dbd2:	1b c0       	rjmp	.+54     	; 0xdc0a <qtm_key_sensors_process+0x5a6>
    dbd4:	8a 80       	ldd	r8, Y+2	; 0x02
    dbd6:	9b 80       	ldd	r9, Y+3	; 0x03
    dbd8:	f4 01       	movw	r30, r8
    dbda:	27 81       	ldd	r18, Z+7	; 0x07
    dbdc:	21 11       	cpse	r18, r1
    dbde:	48 c0       	rjmp	.+144    	; 0xdc70 <qtm_key_sensors_process+0x60c>
    dbe0:	ea 81       	ldd	r30, Y+2	; 0x02
    dbe2:	fb 81       	ldd	r31, Y+3	; 0x03
    dbe4:	23 81       	ldd	r18, Z+3	; 0x03
    dbe6:	22 23       	and	r18, r18
    dbe8:	61 f0       	breq	.+24     	; 0xdc02 <qtm_key_sensors_process+0x59e>
    dbea:	20 e0       	ldi	r18, 0x00	; 0
    dbec:	30 e0       	ldi	r19, 0x00	; 0
    dbee:	a0 e0       	ldi	r26, 0x00	; 0
    dbf0:	b0 e0       	ldi	r27, 0x00	; 0
    dbf2:	ea 81       	ldd	r30, Y+2	; 0x02
    dbf4:	fb 81       	ldd	r31, Y+3	; 0x03
    dbf6:	40 81       	ld	r20, Z
    dbf8:	51 81       	ldd	r21, Z+1	; 0x01
    dbfa:	a4 17       	cp	r26, r20
    dbfc:	b5 07       	cpc	r27, r21
    dbfe:	08 f4       	brcc	.+2      	; 0xdc02 <qtm_key_sensors_process+0x59e>
    dc00:	6e c0       	rjmp	.+220    	; 0xdcde <qtm_key_sensors_process+0x67a>
    dc02:	89 3c       	cpi	r24, 0xC9	; 201
    dc04:	91 05       	cpc	r25, r1
    dc06:	28 f6       	brcc	.-118    	; 0xdb92 <qtm_key_sensors_process+0x52e>
    dc08:	bb cf       	rjmp	.-138    	; 0xdb80 <qtm_key_sensors_process+0x51c>
    dc0a:	08 81       	ld	r16, Y
    dc0c:	19 81       	ldd	r17, Y+1	; 0x01
    dc0e:	f8 01       	movw	r30, r16
    dc10:	24 81       	ldd	r18, Z+4	; 0x04
    dc12:	21 11       	cpse	r18, r1
    dc14:	df cf       	rjmp	.-66     	; 0xdbd4 <qtm_key_sensors_process+0x570>
    dc16:	ed 90       	ld	r14, X+
    dc18:	fc 90       	ld	r15, X
    dc1a:	60 e0       	ldi	r22, 0x00	; 0
    dc1c:	70 e0       	ldi	r23, 0x00	; 0
    dc1e:	40 e0       	ldi	r20, 0x00	; 0
    dc20:	50 e0       	ldi	r21, 0x00	; 0
    dc22:	4e 15       	cp	r20, r14
    dc24:	5f 05       	cpc	r21, r15
    dc26:	f1 f0       	breq	.+60     	; 0xdc64 <qtm_key_sensors_process+0x600>
    dc28:	ec 81       	ldd	r30, Y+4	; 0x04
    dc2a:	fd 81       	ldd	r31, Y+5	; 0x05
    dc2c:	e6 0f       	add	r30, r22
    dc2e:	f7 1f       	adc	r31, r23
    dc30:	20 81       	ld	r18, Z
    dc32:	23 30       	cpi	r18, 0x03	; 3
    dc34:	11 f0       	breq	.+4      	; 0xdc3a <qtm_key_sensors_process+0x5d6>
    dc36:	28 30       	cpi	r18, 0x08	; 8
    dc38:	81 f4       	brne	.+32     	; 0xdc5a <qtm_key_sensors_process+0x5f6>
    dc3a:	24 81       	ldd	r18, Z+4	; 0x04
    dc3c:	35 81       	ldd	r19, Z+5	; 0x05
    dc3e:	c2 80       	ldd	r12, Z+2	; 0x02
    dc40:	d3 80       	ldd	r13, Z+3	; 0x03
    dc42:	d6 01       	movw	r26, r12
    dc44:	11 96       	adiw	r26, 0x01	; 1
    dc46:	cd 90       	ld	r12, X+
    dc48:	dc 90       	ld	r13, X
    dc4a:	12 97       	sbiw	r26, 0x02	; 2
    dc4c:	2c 15       	cp	r18, r12
    dc4e:	3d 05       	cpc	r19, r13
    dc50:	20 f4       	brcc	.+8      	; 0xdc5a <qtm_key_sensors_process+0x5f6>
    dc52:	2f 5f       	subi	r18, 0xFF	; 255
    dc54:	3f 4f       	sbci	r19, 0xFF	; 255
    dc56:	24 83       	std	Z+4, r18	; 0x04
    dc58:	35 83       	std	Z+5, r19	; 0x05
    dc5a:	4f 5f       	subi	r20, 0xFF	; 255
    dc5c:	5f 4f       	sbci	r21, 0xFF	; 255
    dc5e:	6a 5f       	subi	r22, 0xFA	; 250
    dc60:	7f 4f       	sbci	r23, 0xFF	; 255
    dc62:	df cf       	rjmp	.-66     	; 0xdc22 <qtm_key_sensors_process+0x5be>
    dc64:	f4 01       	movw	r30, r8
    dc66:	26 81       	ldd	r18, Z+6	; 0x06
    dc68:	d8 01       	movw	r26, r16
    dc6a:	14 96       	adiw	r26, 0x04	; 4
    dc6c:	2c 93       	st	X, r18
    dc6e:	b2 cf       	rjmp	.-156    	; 0xdbd4 <qtm_key_sensors_process+0x570>
    dc70:	08 81       	ld	r16, Y
    dc72:	19 81       	ldd	r17, Y+1	; 0x01
    dc74:	d8 01       	movw	r26, r16
    dc76:	15 96       	adiw	r26, 0x05	; 5
    dc78:	2c 91       	ld	r18, X
    dc7a:	21 11       	cpse	r18, r1
    dc7c:	b1 cf       	rjmp	.-158    	; 0xdbe0 <qtm_key_sensors_process+0x57c>
    dc7e:	e0 80       	ld	r14, Z
    dc80:	f1 80       	ldd	r15, Z+1	; 0x01
    dc82:	60 e0       	ldi	r22, 0x00	; 0
    dc84:	70 e0       	ldi	r23, 0x00	; 0
    dc86:	40 e0       	ldi	r20, 0x00	; 0
    dc88:	50 e0       	ldi	r21, 0x00	; 0
    dc8a:	4e 15       	cp	r20, r14
    dc8c:	5f 05       	cpc	r21, r15
    dc8e:	f1 f0       	breq	.+60     	; 0xdccc <qtm_key_sensors_process+0x668>
    dc90:	ec 81       	ldd	r30, Y+4	; 0x04
    dc92:	fd 81       	ldd	r31, Y+5	; 0x05
    dc94:	e6 0f       	add	r30, r22
    dc96:	f7 1f       	adc	r31, r23
    dc98:	20 81       	ld	r18, Z
    dc9a:	23 30       	cpi	r18, 0x03	; 3
    dc9c:	11 f0       	breq	.+4      	; 0xdca2 <qtm_key_sensors_process+0x63e>
    dc9e:	28 30       	cpi	r18, 0x08	; 8
    dca0:	81 f4       	brne	.+32     	; 0xdcc2 <qtm_key_sensors_process+0x65e>
    dca2:	24 81       	ldd	r18, Z+4	; 0x04
    dca4:	35 81       	ldd	r19, Z+5	; 0x05
    dca6:	c2 80       	ldd	r12, Z+2	; 0x02
    dca8:	d3 80       	ldd	r13, Z+3	; 0x03
    dcaa:	d6 01       	movw	r26, r12
    dcac:	11 96       	adiw	r26, 0x01	; 1
    dcae:	cd 90       	ld	r12, X+
    dcb0:	dc 90       	ld	r13, X
    dcb2:	12 97       	sbiw	r26, 0x02	; 2
    dcb4:	c2 16       	cp	r12, r18
    dcb6:	d3 06       	cpc	r13, r19
    dcb8:	20 f4       	brcc	.+8      	; 0xdcc2 <qtm_key_sensors_process+0x65e>
    dcba:	21 50       	subi	r18, 0x01	; 1
    dcbc:	31 09       	sbc	r19, r1
    dcbe:	24 83       	std	Z+4, r18	; 0x04
    dcc0:	35 83       	std	Z+5, r19	; 0x05
    dcc2:	4f 5f       	subi	r20, 0xFF	; 255
    dcc4:	5f 4f       	sbci	r21, 0xFF	; 255
    dcc6:	6a 5f       	subi	r22, 0xFA	; 250
    dcc8:	7f 4f       	sbci	r23, 0xFF	; 255
    dcca:	df cf       	rjmp	.-66     	; 0xdc8a <qtm_key_sensors_process+0x626>
    dccc:	f4 01       	movw	r30, r8
    dcce:	27 81       	ldd	r18, Z+7	; 0x07
    dcd0:	d8 01       	movw	r26, r16
    dcd2:	15 96       	adiw	r26, 0x05	; 5
    dcd4:	2c 93       	st	X, r18
    dcd6:	84 cf       	rjmp	.-248    	; 0xdbe0 <qtm_key_sensors_process+0x57c>
    dcd8:	21 50       	subi	r18, 0x01	; 1
    dcda:	23 83       	std	Z+3, r18	; 0x03
    dcdc:	81 cf       	rjmp	.-254    	; 0xdbe0 <qtm_key_sensors_process+0x57c>
    dcde:	a9 01       	movw	r20, r18
    dce0:	44 0f       	add	r20, r20
    dce2:	55 1f       	adc	r21, r21
    dce4:	ec 81       	ldd	r30, Y+4	; 0x04
    dce6:	fd 81       	ldd	r31, Y+5	; 0x05
    dce8:	e4 0f       	add	r30, r20
    dcea:	f5 1f       	adc	r31, r21
    dcec:	60 81       	ld	r22, Z
    dcee:	65 38       	cpi	r22, 0x85	; 133
    dcf0:	09 f0       	breq	.+2      	; 0xdcf4 <qtm_key_sensors_process+0x690>
    dcf2:	47 c0       	rjmp	.+142    	; 0xdd82 <qtm_key_sensors_process+0x71e>
    dcf4:	61 81       	ldd	r22, Z+1	; 0x01
    dcf6:	66 23       	and	r22, r22
    dcf8:	19 f0       	breq	.+6      	; 0xdd00 <qtm_key_sensors_process+0x69c>
    dcfa:	61 50       	subi	r22, 0x01	; 1
    dcfc:	61 83       	std	Z+1, r22	; 0x01
    dcfe:	41 c0       	rjmp	.+130    	; 0xdd82 <qtm_key_sensors_process+0x71e>
    dd00:	a0 82       	st	Z, r10
    dd02:	6c 81       	ldd	r22, Y+4	; 0x04
    dd04:	7d 81       	ldd	r23, Y+5	; 0x05
    dd06:	fb 01       	movw	r30, r22
    dd08:	e4 0f       	add	r30, r20
    dd0a:	f5 1f       	adc	r31, r21
    dd0c:	02 80       	ldd	r0, Z+2	; 0x02
    dd0e:	f3 81       	ldd	r31, Z+3	; 0x03
    dd10:	e0 2d       	mov	r30, r0
    dd12:	b0 82       	st	Z, r11
    dd14:	ee 81       	ldd	r30, Y+6	; 0x06
    dd16:	ff 81       	ldd	r31, Y+7	; 0x07
    dd18:	e2 0f       	add	r30, r18
    dd1a:	f3 1f       	adc	r31, r19
    dd1c:	d2 80       	ldd	r13, Z+2	; 0x02
    dd1e:	dd 20       	and	r13, r13
    dd20:	81 f1       	breq	.+96     	; 0xdd82 <qtm_key_sensors_process+0x71e>
    dd22:	40 e0       	ldi	r20, 0x00	; 0
    dd24:	50 e0       	ldi	r21, 0x00	; 0
    dd26:	00 e0       	ldi	r16, 0x00	; 0
    dd28:	10 e0       	ldi	r17, 0x00	; 0
    dd2a:	ea 81       	ldd	r30, Y+2	; 0x02
    dd2c:	fb 81       	ldd	r31, Y+3	; 0x03
    dd2e:	60 81       	ld	r22, Z
    dd30:	71 81       	ldd	r23, Z+1	; 0x01
    dd32:	06 17       	cp	r16, r22
    dd34:	17 07       	cpc	r17, r23
    dd36:	28 f5       	brcc	.+74     	; 0xdd82 <qtm_key_sensors_process+0x71e>
    dd38:	ee 81       	ldd	r30, Y+6	; 0x06
    dd3a:	ff 81       	ldd	r31, Y+7	; 0x07
    dd3c:	e4 0f       	add	r30, r20
    dd3e:	f5 1f       	adc	r31, r21
    dd40:	62 81       	ldd	r22, Z+2	; 0x02
    dd42:	d6 12       	cpse	r13, r22
    dd44:	19 c0       	rjmp	.+50     	; 0xdd78 <qtm_key_sensors_process+0x714>
    dd46:	ba 01       	movw	r22, r20
    dd48:	66 0f       	add	r22, r22
    dd4a:	77 1f       	adc	r23, r23
    dd4c:	ec 81       	ldd	r30, Y+4	; 0x04
    dd4e:	fd 81       	ldd	r31, Y+5	; 0x05
    dd50:	4f 01       	movw	r8, r30
    dd52:	86 0e       	add	r8, r22
    dd54:	97 1e       	adc	r9, r23
    dd56:	f4 01       	movw	r30, r8
    dd58:	e2 80       	ldd	r14, Z+2	; 0x02
    dd5a:	f3 80       	ldd	r15, Z+3	; 0x03
    dd5c:	f7 01       	movw	r30, r14
    dd5e:	f0 80       	ld	r15, Z
    dd60:	f0 fe       	sbrs	r15, 0
    dd62:	0a c0       	rjmp	.+20     	; 0xdd78 <qtm_key_sensors_process+0x714>
    dd64:	f4 01       	movw	r30, r8
    dd66:	a0 82       	st	Z, r10
    dd68:	ec 81       	ldd	r30, Y+4	; 0x04
    dd6a:	fd 81       	ldd	r31, Y+5	; 0x05
    dd6c:	e6 0f       	add	r30, r22
    dd6e:	f7 1f       	adc	r31, r23
    dd70:	02 80       	ldd	r0, Z+2	; 0x02
    dd72:	f3 81       	ldd	r31, Z+3	; 0x03
    dd74:	e0 2d       	mov	r30, r0
    dd76:	b0 82       	st	Z, r11
    dd78:	0f 5f       	subi	r16, 0xFF	; 255
    dd7a:	1f 4f       	sbci	r17, 0xFF	; 255
    dd7c:	4d 5f       	subi	r20, 0xFD	; 253
    dd7e:	5f 4f       	sbci	r21, 0xFF	; 255
    dd80:	d4 cf       	rjmp	.-88     	; 0xdd2a <qtm_key_sensors_process+0x6c6>
    dd82:	11 96       	adiw	r26, 0x01	; 1
    dd84:	2d 5f       	subi	r18, 0xFD	; 253
    dd86:	3f 4f       	sbci	r19, 0xFF	; 255
    dd88:	34 cf       	rjmp	.-408    	; 0xdbf2 <qtm_key_sensors_process+0x58e>
    dd8a:	8b e0       	ldi	r24, 0x0B	; 11
    dd8c:	df 91       	pop	r29
    dd8e:	cf 91       	pop	r28
    dd90:	1f 91       	pop	r17
    dd92:	0f 91       	pop	r16
    dd94:	ff 90       	pop	r15
    dd96:	ef 90       	pop	r14
    dd98:	df 90       	pop	r13
    dd9a:	cf 90       	pop	r12
    dd9c:	bf 90       	pop	r11
    dd9e:	af 90       	pop	r10
    dda0:	9f 90       	pop	r9
    dda2:	8f 90       	pop	r8
    dda4:	7f 90       	pop	r7
    dda6:	6f 90       	pop	r6
    dda8:	5f 90       	pop	r5
    ddaa:	4f 90       	pop	r4
    ddac:	3f 90       	pop	r3
    ddae:	2f 90       	pop	r2
    ddb0:	08 95       	ret

0000ddb2 <divide>:
    ddb2:	9c 01       	movw	r18, r24
    ddb4:	61 15       	cp	r22, r1
    ddb6:	71 05       	cpc	r23, r1
    ddb8:	09 f1       	breq	.+66     	; 0xddfc <divide+0x4a>
    ddba:	4f 5f       	subi	r20, 0xFF	; 255
    ddbc:	37 fd       	sbrc	r19, 7
    ddbe:	06 c0       	rjmp	.+12     	; 0xddcc <divide+0x1a>
    ddc0:	44 23       	and	r20, r20
    ddc2:	21 f0       	breq	.+8      	; 0xddcc <divide+0x1a>
    ddc4:	41 50       	subi	r20, 0x01	; 1
    ddc6:	22 0f       	add	r18, r18
    ddc8:	33 1f       	adc	r19, r19
    ddca:	f8 cf       	rjmp	.-16     	; 0xddbc <divide+0xa>
    ddcc:	77 fd       	sbrc	r23, 7
    ddce:	04 c0       	rjmp	.+8      	; 0xddd8 <divide+0x26>
    ddd0:	4f 5f       	subi	r20, 0xFF	; 255
    ddd2:	66 0f       	add	r22, r22
    ddd4:	77 1f       	adc	r23, r23
    ddd6:	fa cf       	rjmp	.-12     	; 0xddcc <divide+0x1a>
    ddd8:	80 e0       	ldi	r24, 0x00	; 0
    ddda:	90 e0       	ldi	r25, 0x00	; 0
    dddc:	44 23       	and	r20, r20
    ddde:	81 f0       	breq	.+32     	; 0xde00 <divide+0x4e>
    dde0:	97 fd       	sbrc	r25, 7
    dde2:	0c c0       	rjmp	.+24     	; 0xddfc <divide+0x4a>
    dde4:	88 0f       	add	r24, r24
    dde6:	99 1f       	adc	r25, r25
    dde8:	41 50       	subi	r20, 0x01	; 1
    ddea:	26 17       	cp	r18, r22
    ddec:	37 07       	cpc	r19, r23
    ddee:	18 f0       	brcs	.+6      	; 0xddf6 <divide+0x44>
    ddf0:	26 1b       	sub	r18, r22
    ddf2:	37 0b       	sbc	r19, r23
    ddf4:	01 96       	adiw	r24, 0x01	; 1
    ddf6:	76 95       	lsr	r23
    ddf8:	67 95       	ror	r22
    ddfa:	f0 cf       	rjmp	.-32     	; 0xdddc <divide+0x2a>
    ddfc:	8f ef       	ldi	r24, 0xFF	; 255
    ddfe:	9f ef       	ldi	r25, 0xFF	; 255
    de00:	08 95       	ret

0000de02 <qtm_init_scroller_module>:
    de02:	cf 93       	push	r28
    de04:	df 93       	push	r29
    de06:	fc 01       	movw	r30, r24
    de08:	89 2b       	or	r24, r25
    de0a:	b9 f1       	breq	.+110    	; 0xde7a <qtm_init_scroller_module+0x78>
    de0c:	24 81       	ldd	r18, Z+4	; 0x04
    de0e:	35 81       	ldd	r19, Z+5	; 0x05
    de10:	21 15       	cp	r18, r1
    de12:	31 05       	cpc	r19, r1
    de14:	91 f1       	breq	.+100    	; 0xde7a <qtm_init_scroller_module+0x78>
    de16:	46 81       	ldd	r20, Z+6	; 0x06
    de18:	57 81       	ldd	r21, Z+7	; 0x07
    de1a:	41 15       	cp	r20, r1
    de1c:	51 05       	cpc	r21, r1
    de1e:	69 f1       	breq	.+90     	; 0xde7a <qtm_init_scroller_module+0x78>
    de20:	a0 81       	ld	r26, Z
    de22:	b1 81       	ldd	r27, Z+1	; 0x01
    de24:	1c 92       	st	X, r1
    de26:	90 e0       	ldi	r25, 0x00	; 0
    de28:	a2 81       	ldd	r26, Z+2	; 0x02
    de2a:	b3 81       	ldd	r27, Z+3	; 0x03
    de2c:	12 96       	adiw	r26, 0x02	; 2
    de2e:	8c 91       	ld	r24, X
    de30:	98 17       	cp	r25, r24
    de32:	08 f5       	brcc	.+66     	; 0xde76 <qtm_init_scroller_module+0x74>
    de34:	d9 01       	movw	r26, r18
    de36:	89 e0       	ldi	r24, 0x09	; 9
    de38:	98 9f       	mul	r25, r24
    de3a:	a0 0d       	add	r26, r0
    de3c:	b1 1d       	adc	r27, r1
    de3e:	11 24       	eor	r1, r1
    de40:	11 96       	adiw	r26, 0x01	; 1
    de42:	1c 92       	st	X, r1
    de44:	11 97       	sbiw	r26, 0x01	; 1
    de46:	ea 01       	movw	r28, r20
    de48:	88 e0       	ldi	r24, 0x08	; 8
    de4a:	98 9f       	mul	r25, r24
    de4c:	c0 0d       	add	r28, r0
    de4e:	d1 1d       	adc	r29, r1
    de50:	11 24       	eor	r1, r1
    de52:	8d 81       	ldd	r24, Y+5	; 0x05
    de54:	12 96       	adiw	r26, 0x02	; 2
    de56:	8c 93       	st	X, r24
    de58:	12 97       	sbiw	r26, 0x02	; 2
    de5a:	13 96       	adiw	r26, 0x03	; 3
    de5c:	1d 92       	st	X+, r1
    de5e:	1c 92       	st	X, r1
    de60:	14 97       	sbiw	r26, 0x04	; 4
    de62:	15 96       	adiw	r26, 0x05	; 5
    de64:	1d 92       	st	X+, r1
    de66:	1c 92       	st	X, r1
    de68:	16 97       	sbiw	r26, 0x06	; 6
    de6a:	17 96       	adiw	r26, 0x07	; 7
    de6c:	1d 92       	st	X+, r1
    de6e:	1c 92       	st	X, r1
    de70:	18 97       	sbiw	r26, 0x08	; 8
    de72:	9f 5f       	subi	r25, 0xFF	; 255
    de74:	d9 cf       	rjmp	.-78     	; 0xde28 <qtm_init_scroller_module+0x26>
    de76:	80 e0       	ldi	r24, 0x00	; 0
    de78:	01 c0       	rjmp	.+2      	; 0xde7c <qtm_init_scroller_module+0x7a>
    de7a:	8b e0       	ldi	r24, 0x0B	; 11
    de7c:	df 91       	pop	r29
    de7e:	cf 91       	pop	r28
    de80:	08 95       	ret

0000de82 <qtm_scroller_process>:
    de82:	2f 92       	push	r2
    de84:	3f 92       	push	r3
    de86:	4f 92       	push	r4
    de88:	5f 92       	push	r5
    de8a:	6f 92       	push	r6
    de8c:	7f 92       	push	r7
    de8e:	8f 92       	push	r8
    de90:	9f 92       	push	r9
    de92:	af 92       	push	r10
    de94:	bf 92       	push	r11
    de96:	cf 92       	push	r12
    de98:	df 92       	push	r13
    de9a:	ef 92       	push	r14
    de9c:	ff 92       	push	r15
    de9e:	0f 93       	push	r16
    dea0:	1f 93       	push	r17
    dea2:	cf 93       	push	r28
    dea4:	df 93       	push	r29
    dea6:	cd b7       	in	r28, 0x3d	; 61
    dea8:	de b7       	in	r29, 0x3e	; 62
    deaa:	61 97       	sbiw	r28, 0x11	; 17
    deac:	cd bf       	out	0x3d, r28	; 61
    deae:	de bf       	out	0x3e, r29	; 62
    deb0:	fc 01       	movw	r30, r24
    deb2:	00 97       	sbiw	r24, 0x00	; 0
    deb4:	09 f4       	brne	.+2      	; 0xdeb8 <qtm_scroller_process+0x36>
    deb6:	dc c2       	rjmp	.+1464   	; 0xe470 <qtm_scroller_process+0x5ee>
    deb8:	e4 80       	ldd	r14, Z+4	; 0x04
    deba:	f5 80       	ldd	r15, Z+5	; 0x05
    debc:	ea 86       	std	Y+10, r14	; 0x0a
    debe:	fb 86       	std	Y+11, r15	; 0x0b
    dec0:	ef 28       	or	r14, r15
    dec2:	09 f4       	brne	.+2      	; 0xdec6 <qtm_scroller_process+0x44>
    dec4:	d5 c2       	rjmp	.+1450   	; 0xe470 <qtm_scroller_process+0x5ee>
    dec6:	e6 80       	ldd	r14, Z+6	; 0x06
    dec8:	f7 80       	ldd	r15, Z+7	; 0x07
    deca:	e8 86       	std	Y+8, r14	; 0x08
    decc:	f9 86       	std	Y+9, r15	; 0x09
    dece:	ef 28       	or	r14, r15
    ded0:	09 f4       	brne	.+2      	; 0xded4 <qtm_scroller_process+0x52>
    ded2:	ce c2       	rjmp	.+1436   	; 0xe470 <qtm_scroller_process+0x5ee>
    ded4:	a2 81       	ldd	r26, Z+2	; 0x02
    ded6:	b3 81       	ldd	r27, Z+3	; 0x03
    ded8:	4d 90       	ld	r4, X+
    deda:	5c 90       	ld	r5, X
    dedc:	41 14       	cp	r4, r1
    dede:	51 04       	cpc	r5, r1
    dee0:	09 f4       	brne	.+2      	; 0xdee4 <qtm_scroller_process+0x62>
    dee2:	c6 c2       	rjmp	.+1420   	; 0xe470 <qtm_scroller_process+0x5ee>
    dee4:	8e 83       	std	Y+6, r24	; 0x06
    dee6:	9f 83       	std	Y+7, r25	; 0x07
    dee8:	00 e0       	ldi	r16, 0x00	; 0
    deea:	1a 82       	std	Y+2, r1	; 0x02
    deec:	91 2c       	mov	r9, r1
    deee:	16 e0       	ldi	r17, 0x06	; 6
    def0:	81 2e       	mov	r8, r17
    def2:	ae 81       	ldd	r26, Y+6	; 0x06
    def4:	bf 81       	ldd	r27, Y+7	; 0x07
    def6:	12 96       	adiw	r26, 0x02	; 2
    def8:	ed 91       	ld	r30, X+
    defa:	fc 91       	ld	r31, X
    defc:	13 97       	sbiw	r26, 0x03	; 3
    defe:	82 81       	ldd	r24, Z+2	; 0x02
    df00:	98 16       	cp	r9, r24
    df02:	08 f0       	brcs	.+2      	; 0xdf06 <qtm_scroller_process+0x84>
    df04:	b0 c2       	rjmp	.+1376   	; 0xe466 <qtm_scroller_process+0x5e4>
    df06:	68 84       	ldd	r6, Y+8	; 0x08
    df08:	79 84       	ldd	r7, Y+9	; 0x09
    df0a:	28 e0       	ldi	r18, 0x08	; 8
    df0c:	92 9e       	mul	r9, r18
    df0e:	60 0c       	add	r6, r0
    df10:	71 1c       	adc	r7, r1
    df12:	11 24       	eor	r1, r1
    df14:	d3 01       	movw	r26, r6
    df16:	11 96       	adiw	r26, 0x01	; 1
    df18:	4d 91       	ld	r20, X+
    df1a:	5c 91       	ld	r21, X
    df1c:	12 97       	sbiw	r26, 0x02	; 2
    df1e:	13 96       	adiw	r26, 0x03	; 3
    df20:	ac 90       	ld	r10, X
    df22:	7a 01       	movw	r14, r20
    df24:	ea 0c       	add	r14, r10
    df26:	f1 1c       	adc	r15, r1
    df28:	ca 01       	movw	r24, r20
    df2a:	60 e0       	ldi	r22, 0x00	; 0
    df2c:	8e 15       	cp	r24, r14
    df2e:	9f 05       	cpc	r25, r15
    df30:	70 f4       	brcc	.+28     	; 0xdf4e <qtm_scroller_process+0xcc>
    df32:	88 9e       	mul	r8, r24
    df34:	f0 01       	movw	r30, r0
    df36:	89 9e       	mul	r8, r25
    df38:	f0 0d       	add	r31, r0
    df3a:	11 24       	eor	r1, r1
    df3c:	e4 0d       	add	r30, r4
    df3e:	f5 1d       	adc	r31, r5
    df40:	20 81       	ld	r18, Z
    df42:	25 38       	cpi	r18, 0x85	; 133
    df44:	11 f4       	brne	.+4      	; 0xdf4a <qtm_scroller_process+0xc8>
    df46:	c7 01       	movw	r24, r14
    df48:	61 e0       	ldi	r22, 0x01	; 1
    df4a:	01 96       	adiw	r24, 0x01	; 1
    df4c:	ef cf       	rjmp	.-34     	; 0xdf2c <qtm_scroller_process+0xaa>
    df4e:	84 9e       	mul	r8, r20
    df50:	f0 01       	movw	r30, r0
    df52:	85 9e       	mul	r8, r21
    df54:	f0 0d       	add	r31, r0
    df56:	11 24       	eor	r1, r1
    df58:	ec 83       	std	Y+4, r30	; 0x04
    df5a:	fd 83       	std	Y+5, r31	; 0x05
    df5c:	34 97       	sbiw	r30, 0x04	; 4
    df5e:	e4 0d       	add	r30, r4
    df60:	f5 1d       	adc	r31, r5
    df62:	26 e0       	ldi	r18, 0x06	; 6
    df64:	a2 9e       	mul	r10, r18
    df66:	50 01       	movw	r10, r0
    df68:	11 24       	eor	r1, r1
    df6a:	1a 01       	movw	r2, r20
    df6c:	70 e0       	ldi	r23, 0x00	; 0
    df6e:	18 8a       	std	Y+16, r1	; 0x10
    df70:	19 8a       	std	Y+17, r1	; 0x11
    df72:	2e 14       	cp	r2, r14
    df74:	3f 04       	cpc	r3, r15
    df76:	08 f0       	brcs	.+2      	; 0xdf7a <qtm_scroller_process+0xf8>
    df78:	4f c0       	rjmp	.+158    	; 0xe018 <qtm_scroller_process+0x196>
    df7a:	86 81       	ldd	r24, Z+6	; 0x06
    df7c:	97 81       	ldd	r25, Z+7	; 0x07
    df7e:	dc 01       	movw	r26, r24
    df80:	11 96       	adiw	r26, 0x01	; 1
    df82:	2d 91       	ld	r18, X+
    df84:	3c 91       	ld	r19, X
    df86:	12 97       	sbiw	r26, 0x02	; 2
    df88:	80 85       	ldd	r24, Z+8	; 0x08
    df8a:	91 85       	ldd	r25, Z+9	; 0x09
    df8c:	28 1b       	sub	r18, r24
    df8e:	39 0b       	sbc	r19, r25
    df90:	12 16       	cp	r1, r18
    df92:	13 06       	cpc	r1, r19
    df94:	14 f0       	brlt	.+4      	; 0xdf9a <qtm_scroller_process+0x118>
    df96:	20 e0       	ldi	r18, 0x00	; 0
    df98:	30 e0       	ldi	r19, 0x00	; 0
    df9a:	24 16       	cp	r2, r20
    df9c:	35 06       	cpc	r3, r21
    df9e:	a9 f4       	brne	.+42     	; 0xdfca <qtm_scroller_process+0x148>
    dfa0:	d3 01       	movw	r26, r6
    dfa2:	8c 91       	ld	r24, X
    dfa4:	81 30       	cpi	r24, 0x01	; 1
    dfa6:	f9 f4       	brne	.+62     	; 0xdfe6 <qtm_scroller_process+0x164>
    dfa8:	6f 01       	movw	r12, r30
    dfaa:	ca 0c       	add	r12, r10
    dfac:	db 1c       	adc	r13, r11
    dfae:	d6 01       	movw	r26, r12
    dfb0:	8d 91       	ld	r24, X+
    dfb2:	9c 91       	ld	r25, X
    dfb4:	dc 01       	movw	r26, r24
    dfb6:	11 96       	adiw	r26, 0x01	; 1
    dfb8:	8d 91       	ld	r24, X+
    dfba:	9c 91       	ld	r25, X
    dfbc:	12 97       	sbiw	r26, 0x02	; 2
    dfbe:	d6 01       	movw	r26, r12
    dfc0:	12 96       	adiw	r26, 0x02	; 2
    dfc2:	cd 90       	ld	r12, X+
    dfc4:	dc 90       	ld	r13, X
    dfc6:	13 97       	sbiw	r26, 0x03	; 3
    dfc8:	09 c0       	rjmp	.+18     	; 0xdfdc <qtm_scroller_process+0x15a>
    dfca:	80 81       	ld	r24, Z
    dfcc:	91 81       	ldd	r25, Z+1	; 0x01
    dfce:	dc 01       	movw	r26, r24
    dfd0:	11 96       	adiw	r26, 0x01	; 1
    dfd2:	8d 91       	ld	r24, X+
    dfd4:	9c 91       	ld	r25, X
    dfd6:	12 97       	sbiw	r26, 0x02	; 2
    dfd8:	c2 80       	ldd	r12, Z+2	; 0x02
    dfda:	d3 80       	ldd	r13, Z+3	; 0x03
    dfdc:	8c 19       	sub	r24, r12
    dfde:	9d 09       	sbc	r25, r13
    dfe0:	18 16       	cp	r1, r24
    dfe2:	19 06       	cpc	r1, r25
    dfe4:	14 f0       	brlt	.+4      	; 0xdfea <qtm_scroller_process+0x168>
    dfe6:	80 e0       	ldi	r24, 0x00	; 0
    dfe8:	90 e0       	ldi	r25, 0x00	; 0
    dfea:	28 0f       	add	r18, r24
    dfec:	39 1f       	adc	r19, r25
    dfee:	d3 01       	movw	r26, r6
    dff0:	16 96       	adiw	r26, 0x06	; 6
    dff2:	8d 91       	ld	r24, X+
    dff4:	9c 91       	ld	r25, X
    dff6:	17 97       	sbiw	r26, 0x07	; 7
    dff8:	28 17       	cp	r18, r24
    dffa:	39 07       	cpc	r19, r25
    dffc:	40 f0       	brcs	.+16     	; 0xe00e <qtm_scroller_process+0x18c>
    dffe:	88 89       	ldd	r24, Y+16	; 0x10
    e000:	99 89       	ldd	r25, Y+17	; 0x11
    e002:	82 17       	cp	r24, r18
    e004:	93 07       	cpc	r25, r19
    e006:	10 f4       	brcc	.+4      	; 0xe00c <qtm_scroller_process+0x18a>
    e008:	28 8b       	std	Y+16, r18	; 0x10
    e00a:	39 8b       	std	Y+17, r19	; 0x11
    e00c:	71 e0       	ldi	r23, 0x01	; 1
    e00e:	9f ef       	ldi	r25, 0xFF	; 255
    e010:	29 1a       	sub	r2, r25
    e012:	39 0a       	sbc	r3, r25
    e014:	36 96       	adiw	r30, 0x06	; 6
    e016:	ad cf       	rjmp	.-166    	; 0xdf72 <qtm_scroller_process+0xf0>
    e018:	71 11       	cpse	r23, r1
    e01a:	01 c0       	rjmp	.+2      	; 0xe01e <qtm_scroller_process+0x19c>
    e01c:	60 e0       	ldi	r22, 0x00	; 0
    e01e:	a9 e0       	ldi	r26, 0x09	; 9
    e020:	9a 9e       	mul	r9, r26
    e022:	90 01       	movw	r18, r0
    e024:	11 24       	eor	r1, r1
    e026:	ea 84       	ldd	r14, Y+10	; 0x0a
    e028:	fb 84       	ldd	r15, Y+11	; 0x0b
    e02a:	e2 0e       	add	r14, r18
    e02c:	f3 1e       	adc	r15, r19
    e02e:	ee 86       	std	Y+14, r14	; 0x0e
    e030:	ff 86       	std	Y+15, r15	; 0x0f
    e032:	d7 01       	movw	r26, r14
    e034:	8c 91       	ld	r24, X
    e036:	ae 81       	ldd	r26, Y+6	; 0x06
    e038:	bf 81       	ldd	r27, Y+7	; 0x07
    e03a:	14 96       	adiw	r26, 0x04	; 4
    e03c:	ed 91       	ld	r30, X+
    e03e:	fc 91       	ld	r31, X
    e040:	15 97       	sbiw	r26, 0x05	; 5
    e042:	b8 2f       	mov	r27, r24
    e044:	b1 70       	andi	r27, 0x01	; 1
    e046:	bd 87       	std	Y+13, r27	; 0x0d
    e048:	80 ff       	sbrs	r24, 0
    e04a:	1e c0       	rjmp	.+60     	; 0xe088 <qtm_scroller_process+0x206>
    e04c:	7f 01       	movw	r14, r30
    e04e:	e2 0e       	add	r14, r18
    e050:	f3 1e       	adc	r15, r19
    e052:	d7 01       	movw	r26, r14
    e054:	17 96       	adiw	r26, 0x07	; 7
    e056:	cd 90       	ld	r12, X+
    e058:	dc 90       	ld	r13, X
    e05a:	18 97       	sbiw	r26, 0x08	; 8
    e05c:	c6 01       	movw	r24, r12
    e05e:	88 0f       	add	r24, r24
    e060:	99 1f       	adc	r25, r25
    e062:	8c 0d       	add	r24, r12
    e064:	9d 1d       	adc	r25, r13
    e066:	a8 89       	ldd	r26, Y+16	; 0x10
    e068:	b9 89       	ldd	r27, Y+17	; 0x11
    e06a:	8a 0f       	add	r24, r26
    e06c:	9b 1f       	adc	r25, r27
    e06e:	96 95       	lsr	r25
    e070:	87 95       	ror	r24
    e072:	96 95       	lsr	r25
    e074:	87 95       	ror	r24
    e076:	d7 01       	movw	r26, r14
    e078:	17 96       	adiw	r26, 0x07	; 7
    e07a:	8d 93       	st	X+, r24
    e07c:	9c 93       	st	X, r25
    e07e:	18 97       	sbiw	r26, 0x08	; 8
    e080:	77 23       	and	r23, r23
    e082:	61 f0       	breq	.+24     	; 0xe09c <qtm_scroller_process+0x21a>
    e084:	61 e0       	ldi	r22, 0x01	; 1
    e086:	0a c0       	rjmp	.+20     	; 0xe09c <qtm_scroller_process+0x21a>
    e088:	cf 01       	movw	r24, r30
    e08a:	82 0f       	add	r24, r18
    e08c:	93 1f       	adc	r25, r19
    e08e:	e8 88       	ldd	r14, Y+16	; 0x10
    e090:	f9 88       	ldd	r15, Y+17	; 0x11
    e092:	dc 01       	movw	r26, r24
    e094:	17 96       	adiw	r26, 0x07	; 7
    e096:	ed 92       	st	X+, r14
    e098:	fc 92       	st	X, r15
    e09a:	18 97       	sbiw	r26, 0x08	; 8
    e09c:	d3 01       	movw	r26, r6
    e09e:	bc 91       	ld	r27, X
    e0a0:	b9 83       	std	Y+1, r27	; 0x01
    e0a2:	b2 30       	cpi	r27, 0x02	; 2
    e0a4:	08 f0       	brcs	.+2      	; 0xe0a8 <qtm_scroller_process+0x226>
    e0a6:	d4 c1       	rjmp	.+936    	; 0xe450 <qtm_scroller_process+0x5ce>
    e0a8:	d3 01       	movw	r26, r6
    e0aa:	14 96       	adiw	r26, 0x04	; 4
    e0ac:	1c 91       	ld	r17, X
    e0ae:	10 3d       	cpi	r17, 0xD0	; 208
    e0b0:	08 f0       	brcs	.+2      	; 0xe0b4 <qtm_scroller_process+0x232>
    e0b2:	ce c1       	rjmp	.+924    	; 0xe450 <qtm_scroller_process+0x5ce>
    e0b4:	61 11       	cpse	r22, r1
    e0b6:	05 c0       	rjmp	.+10     	; 0xe0c2 <qtm_scroller_process+0x240>
    e0b8:	e2 0f       	add	r30, r18
    e0ba:	f3 1f       	adc	r31, r19
    e0bc:	17 82       	std	Z+7, r1	; 0x07
    e0be:	10 86       	std	Z+8, r1	; 0x08
    e0c0:	c8 c1       	rjmp	.+912    	; 0xe452 <qtm_scroller_process+0x5d0>
    e0c2:	f3 01       	movw	r30, r6
    e0c4:	f3 81       	ldd	r31, Z+3	; 0x03
    e0c6:	fb 83       	std	Y+3, r31	; 0x03
    e0c8:	e1 2e       	mov	r14, r17
    e0ca:	e2 94       	swap	r14
    e0cc:	9f e0       	ldi	r25, 0x0F	; 15
    e0ce:	e9 22       	and	r14, r25
    e0d0:	ec 86       	std	Y+12, r14	; 0x0c
    e0d2:	ac 80       	ldd	r10, Y+4	; 0x04
    e0d4:	bd 80       	ldd	r11, Y+5	; 0x05
    e0d6:	a4 0c       	add	r10, r4
    e0d8:	b5 1c       	adc	r11, r5
    e0da:	f5 01       	movw	r30, r10
    e0dc:	ba 01       	movw	r22, r20
    e0de:	21 2c       	mov	r2, r1
    e0e0:	31 2c       	mov	r3, r1
    e0e2:	20 e0       	ldi	r18, 0x00	; 0
    e0e4:	30 e0       	ldi	r19, 0x00	; 0
    e0e6:	8b 81       	ldd	r24, Y+3	; 0x03
    e0e8:	e8 2e       	mov	r14, r24
    e0ea:	f1 2c       	mov	r15, r1
    e0ec:	6a 01       	movw	r12, r20
    e0ee:	ce 0c       	add	r12, r14
    e0f0:	df 1c       	adc	r13, r15
    e0f2:	6c 15       	cp	r22, r12
    e0f4:	7d 05       	cpc	r23, r13
    e0f6:	b0 f4       	brcc	.+44     	; 0xe124 <qtm_scroller_process+0x2a2>
    e0f8:	a2 81       	ldd	r26, Z+2	; 0x02
    e0fa:	b3 81       	ldd	r27, Z+3	; 0x03
    e0fc:	11 96       	adiw	r26, 0x01	; 1
    e0fe:	8d 91       	ld	r24, X+
    e100:	9c 91       	ld	r25, X
    e102:	12 97       	sbiw	r26, 0x02	; 2
    e104:	a4 81       	ldd	r26, Z+4	; 0x04
    e106:	b5 81       	ldd	r27, Z+5	; 0x05
    e108:	8a 1b       	sub	r24, r26
    e10a:	9b 0b       	sbc	r25, r27
    e10c:	18 16       	cp	r1, r24
    e10e:	19 06       	cpc	r1, r25
    e110:	2c f4       	brge	.+10     	; 0xe11c <qtm_scroller_process+0x29a>
    e112:	28 16       	cp	r2, r24
    e114:	39 06       	cpc	r3, r25
    e116:	14 f4       	brge	.+4      	; 0xe11c <qtm_scroller_process+0x29a>
    e118:	1c 01       	movw	r2, r24
    e11a:	9b 01       	movw	r18, r22
    e11c:	6f 5f       	subi	r22, 0xFF	; 255
    e11e:	7f 4f       	sbci	r23, 0xFF	; 255
    e120:	36 96       	adiw	r30, 0x06	; 6
    e122:	e7 cf       	rjmp	.-50     	; 0xe0f2 <qtm_scroller_process+0x270>
    e124:	42 17       	cp	r20, r18
    e126:	53 07       	cpc	r21, r19
    e128:	79 f5       	brne	.+94     	; 0xe188 <qtm_scroller_process+0x306>
    e12a:	99 81       	ldd	r25, Y+1	; 0x01
    e12c:	91 30       	cpi	r25, 0x01	; 1
    e12e:	09 f0       	breq	.+2      	; 0xe132 <qtm_scroller_process+0x2b0>
    e130:	a1 c1       	rjmp	.+834    	; 0xe474 <qtm_scroller_process+0x5f2>
    e132:	8c 9c       	mul	r8, r12
    e134:	f0 01       	movw	r30, r0
    e136:	8d 9c       	mul	r8, r13
    e138:	f0 0d       	add	r31, r0
    e13a:	11 24       	eor	r1, r1
    e13c:	36 97       	sbiw	r30, 0x06	; 6
    e13e:	e4 0d       	add	r30, r4
    e140:	f5 1d       	adc	r31, r5
    e142:	a2 81       	ldd	r26, Z+2	; 0x02
    e144:	b3 81       	ldd	r27, Z+3	; 0x03
    e146:	11 96       	adiw	r26, 0x01	; 1
    e148:	6d 91       	ld	r22, X+
    e14a:	7c 91       	ld	r23, X
    e14c:	12 97       	sbiw	r26, 0x02	; 2
    e14e:	84 81       	ldd	r24, Z+4	; 0x04
    e150:	95 81       	ldd	r25, Z+5	; 0x05
    e152:	68 1b       	sub	r22, r24
    e154:	79 0b       	sbc	r23, r25
    e156:	ec 81       	ldd	r30, Y+4	; 0x04
    e158:	fd 81       	ldd	r31, Y+5	; 0x05
    e15a:	36 96       	adiw	r30, 0x06	; 6
    e15c:	e4 0d       	add	r30, r4
    e15e:	f5 1d       	adc	r31, r5
    e160:	a2 81       	ldd	r26, Z+2	; 0x02
    e162:	b3 81       	ldd	r27, Z+3	; 0x03
    e164:	11 96       	adiw	r26, 0x01	; 1
    e166:	8d 91       	ld	r24, X+
    e168:	9c 91       	ld	r25, X
    e16a:	12 97       	sbiw	r26, 0x02	; 2
    e16c:	04 80       	ldd	r0, Z+4	; 0x04
    e16e:	f5 81       	ldd	r31, Z+5	; 0x05
    e170:	e0 2d       	mov	r30, r0
    e172:	8e 1b       	sub	r24, r30
    e174:	9f 0b       	sbc	r25, r31
    e176:	97 ff       	sbrs	r25, 7
    e178:	02 c0       	rjmp	.+4      	; 0xe17e <qtm_scroller_process+0x2fc>
    e17a:	80 e0       	ldi	r24, 0x00	; 0
    e17c:	90 e0       	ldi	r25, 0x00	; 0
    e17e:	86 17       	cp	r24, r22
    e180:	97 07       	cpc	r25, r23
    e182:	0c f4       	brge	.+2      	; 0xe186 <qtm_scroller_process+0x304>
    e184:	7b c1       	rjmp	.+758    	; 0xe47c <qtm_scroller_process+0x5fa>
    e186:	12 c0       	rjmp	.+36     	; 0xe1ac <qtm_scroller_process+0x32a>
    e188:	82 9e       	mul	r8, r18
    e18a:	f0 01       	movw	r30, r0
    e18c:	83 9e       	mul	r8, r19
    e18e:	f0 0d       	add	r31, r0
    e190:	11 24       	eor	r1, r1
    e192:	36 97       	sbiw	r30, 0x06	; 6
    e194:	e4 0d       	add	r30, r4
    e196:	f5 1d       	adc	r31, r5
    e198:	a2 81       	ldd	r26, Z+2	; 0x02
    e19a:	b3 81       	ldd	r27, Z+3	; 0x03
    e19c:	11 96       	adiw	r26, 0x01	; 1
    e19e:	6d 91       	ld	r22, X+
    e1a0:	7c 91       	ld	r23, X
    e1a2:	12 97       	sbiw	r26, 0x02	; 2
    e1a4:	84 81       	ldd	r24, Z+4	; 0x04
    e1a6:	95 81       	ldd	r25, Z+5	; 0x05
    e1a8:	68 1b       	sub	r22, r24
    e1aa:	79 0b       	sbc	r23, r25
    e1ac:	90 e0       	ldi	r25, 0x00	; 0
    e1ae:	77 ff       	sbrs	r23, 7
    e1b0:	02 c0       	rjmp	.+4      	; 0xe1b6 <qtm_scroller_process+0x334>
    e1b2:	60 e0       	ldi	r22, 0x00	; 0
    e1b4:	70 e0       	ldi	r23, 0x00	; 0
    e1b6:	a1 e0       	ldi	r26, 0x01	; 1
    e1b8:	ca 1a       	sub	r12, r26
    e1ba:	d1 08       	sbc	r13, r1
    e1bc:	2c 15       	cp	r18, r12
    e1be:	3d 05       	cpc	r19, r13
    e1c0:	81 f4       	brne	.+32     	; 0xe1e2 <qtm_scroller_process+0x360>
    e1c2:	b9 81       	ldd	r27, Y+1	; 0x01
    e1c4:	b1 30       	cpi	r27, 0x01	; 1
    e1c6:	29 f5       	brne	.+74     	; 0xe212 <qtm_scroller_process+0x390>
    e1c8:	d5 01       	movw	r26, r10
    e1ca:	12 96       	adiw	r26, 0x02	; 2
    e1cc:	ed 91       	ld	r30, X+
    e1ce:	fc 91       	ld	r31, X
    e1d0:	13 97       	sbiw	r26, 0x03	; 3
    e1d2:	c1 80       	ldd	r12, Z+1	; 0x01
    e1d4:	d2 80       	ldd	r13, Z+2	; 0x02
    e1d6:	14 96       	adiw	r26, 0x04	; 4
    e1d8:	0d 90       	ld	r0, X+
    e1da:	bc 91       	ld	r27, X
    e1dc:	a0 2d       	mov	r26, r0
    e1de:	f6 01       	movw	r30, r12
    e1e0:	14 c0       	rjmp	.+40     	; 0xe20a <qtm_scroller_process+0x388>
    e1e2:	f9 01       	movw	r30, r18
    e1e4:	31 96       	adiw	r30, 0x01	; 1
    e1e6:	8e 9e       	mul	r8, r30
    e1e8:	d0 01       	movw	r26, r0
    e1ea:	8f 9e       	mul	r8, r31
    e1ec:	b0 0d       	add	r27, r0
    e1ee:	11 24       	eor	r1, r1
    e1f0:	a4 0d       	add	r26, r4
    e1f2:	b5 1d       	adc	r27, r5
    e1f4:	12 96       	adiw	r26, 0x02	; 2
    e1f6:	ed 91       	ld	r30, X+
    e1f8:	fc 91       	ld	r31, X
    e1fa:	13 97       	sbiw	r26, 0x03	; 3
    e1fc:	01 80       	ldd	r0, Z+1	; 0x01
    e1fe:	f2 81       	ldd	r31, Z+2	; 0x02
    e200:	e0 2d       	mov	r30, r0
    e202:	14 96       	adiw	r26, 0x04	; 4
    e204:	0d 90       	ld	r0, X+
    e206:	bc 91       	ld	r27, X
    e208:	a0 2d       	mov	r26, r0
    e20a:	ea 1b       	sub	r30, r26
    e20c:	fb 0b       	sbc	r31, r27
    e20e:	f7 ff       	sbrs	r31, 7
    e210:	02 c0       	rjmp	.+4      	; 0xe216 <qtm_scroller_process+0x394>
    e212:	e0 e0       	ldi	r30, 0x00	; 0
    e214:	f0 e0       	ldi	r31, 0x00	; 0
    e216:	bb 81       	ldd	r27, Y+3	; 0x03
    e218:	b0 31       	cpi	r27, 0x10	; 16
    e21a:	28 f0       	brcs	.+10     	; 0xe226 <qtm_scroller_process+0x3a4>
    e21c:	b4 e0       	ldi	r27, 0x04	; 4
    e21e:	ab 2e       	mov	r10, r27
    e220:	88 e0       	ldi	r24, 0x08	; 8
    e222:	b8 2e       	mov	r11, r24
    e224:	03 c0       	rjmp	.+6      	; 0xe22c <qtm_scroller_process+0x3aa>
    e226:	a1 2c       	mov	r10, r1
    e228:	ac e0       	ldi	r26, 0x0C	; 12
    e22a:	ba 2e       	mov	r11, r26
    e22c:	91 30       	cpi	r25, 0x01	; 1
    e22e:	11 f4       	brne	.+4      	; 0xe234 <qtm_scroller_process+0x3b2>
    e230:	67 01       	movw	r12, r14
    e232:	03 c0       	rjmp	.+6      	; 0xe23a <qtm_scroller_process+0x3b8>
    e234:	24 1b       	sub	r18, r20
    e236:	35 0b       	sbc	r19, r21
    e238:	69 01       	movw	r12, r18
    e23a:	0b 2c       	mov	r0, r11
    e23c:	02 c0       	rjmp	.+4      	; 0xe242 <qtm_scroller_process+0x3c0>
    e23e:	cc 0c       	add	r12, r12
    e240:	dd 1c       	adc	r13, r13
    e242:	0a 94       	dec	r0
    e244:	e2 f7       	brpl	.-8      	; 0xe23e <qtm_scroller_process+0x3bc>
    e246:	6e 17       	cp	r22, r30
    e248:	7f 07       	cpc	r23, r31
    e24a:	a8 f0       	brcs	.+42     	; 0xe276 <qtm_scroller_process+0x3f4>
    e24c:	c1 01       	movw	r24, r2
    e24e:	8e 1b       	sub	r24, r30
    e250:	9f 0b       	sbc	r25, r31
    e252:	9c 01       	movw	r18, r24
    e254:	2e 1b       	sub	r18, r30
    e256:	3f 0b       	sbc	r19, r31
    e258:	62 0f       	add	r22, r18
    e25a:	73 1f       	adc	r23, r19
    e25c:	4b 2d       	mov	r20, r11
    e25e:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <divide>
    e262:	21 e0       	ldi	r18, 0x01	; 1
    e264:	30 e0       	ldi	r19, 0x00	; 0
    e266:	02 c0       	rjmp	.+4      	; 0xe26c <qtm_scroller_process+0x3ea>
    e268:	22 0f       	add	r18, r18
    e26a:	33 1f       	adc	r19, r19
    e26c:	ba 94       	dec	r11
    e26e:	e2 f7       	brpl	.-8      	; 0xe268 <qtm_scroller_process+0x3e6>
    e270:	82 1b       	sub	r24, r18
    e272:	93 0b       	sbc	r25, r19
    e274:	0c c0       	rjmp	.+24     	; 0xe28e <qtm_scroller_process+0x40c>
    e276:	cf 01       	movw	r24, r30
    e278:	86 1b       	sub	r24, r22
    e27a:	97 0b       	sbc	r25, r23
    e27c:	f1 01       	movw	r30, r2
    e27e:	e6 1b       	sub	r30, r22
    e280:	f7 0b       	sbc	r31, r23
    e282:	bf 01       	movw	r22, r30
    e284:	68 0f       	add	r22, r24
    e286:	79 1f       	adc	r23, r25
    e288:	4b 2d       	mov	r20, r11
    e28a:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <divide>
    e28e:	8c 0d       	add	r24, r12
    e290:	9d 1d       	adc	r25, r13
    e292:	fb 81       	ldd	r31, Y+3	; 0x03
    e294:	f3 30       	cpi	r31, 0x03	; 3
    e296:	60 f0       	brcs	.+24     	; 0xe2b0 <qtm_scroller_process+0x42e>
    e298:	29 81       	ldd	r18, Y+1	; 0x01
    e29a:	21 30       	cpi	r18, 0x01	; 1
    e29c:	19 f4       	brne	.+6      	; 0xe2a4 <qtm_scroller_process+0x422>
    e29e:	4a 2d       	mov	r20, r10
    e2a0:	b7 01       	movw	r22, r14
    e2a2:	04 c0       	rjmp	.+8      	; 0xe2ac <qtm_scroller_process+0x42a>
    e2a4:	b7 01       	movw	r22, r14
    e2a6:	61 50       	subi	r22, 0x01	; 1
    e2a8:	71 09       	sbc	r23, r1
    e2aa:	4a 2d       	mov	r20, r10
    e2ac:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <divide>
    e2b0:	81 30       	cpi	r24, 0x01	; 1
    e2b2:	30 e1       	ldi	r19, 0x10	; 16
    e2b4:	93 07       	cpc	r25, r19
    e2b6:	10 f0       	brcs	.+4      	; 0xe2bc <qtm_scroller_process+0x43a>
    e2b8:	80 e0       	ldi	r24, 0x00	; 0
    e2ba:	90 e1       	ldi	r25, 0x10	; 16
    e2bc:	e9 80       	ldd	r14, Y+1	; 0x01
    e2be:	e1 10       	cpse	r14, r1
    e2c0:	17 c0       	rjmp	.+46     	; 0xe2f0 <qtm_scroller_process+0x46e>
    e2c2:	1f 70       	andi	r17, 0x0F	; 15
    e2c4:	a9 f0       	breq	.+42     	; 0xe2f0 <qtm_scroller_process+0x46e>
    e2c6:	28 e2       	ldi	r18, 0x28	; 40
    e2c8:	12 9f       	mul	r17, r18
    e2ca:	a0 01       	movw	r20, r0
    e2cc:	11 24       	eor	r1, r1
    e2ce:	84 17       	cp	r24, r20
    e2d0:	95 07       	cpc	r25, r21
    e2d2:	18 f0       	brcs	.+6      	; 0xe2da <qtm_scroller_process+0x458>
    e2d4:	84 1b       	sub	r24, r20
    e2d6:	95 0b       	sbc	r25, r21
    e2d8:	02 c0       	rjmp	.+4      	; 0xe2de <qtm_scroller_process+0x45c>
    e2da:	80 e0       	ldi	r24, 0x00	; 0
    e2dc:	90 e0       	ldi	r25, 0x00	; 0
    e2de:	44 0f       	add	r20, r20
    e2e0:	55 1f       	adc	r21, r21
    e2e2:	60 e0       	ldi	r22, 0x00	; 0
    e2e4:	70 e1       	ldi	r23, 0x10	; 16
    e2e6:	64 1b       	sub	r22, r20
    e2e8:	75 0b       	sbc	r23, r21
    e2ea:	4c e0       	ldi	r20, 0x0C	; 12
    e2ec:	0e 94 d9 6e 	call	0xddb2	; 0xddb2 <divide>
    e2f0:	2c e0       	ldi	r18, 0x0C	; 12
    e2f2:	30 e0       	ldi	r19, 0x00	; 0
    e2f4:	ec 84       	ldd	r14, Y+12	; 0x0c
    e2f6:	2e 19       	sub	r18, r14
    e2f8:	31 09       	sbc	r19, r1
    e2fa:	61 e0       	ldi	r22, 0x01	; 1
    e2fc:	70 e0       	ldi	r23, 0x00	; 0
    e2fe:	02 c0       	rjmp	.+4      	; 0xe304 <qtm_scroller_process+0x482>
    e300:	66 0f       	add	r22, r22
    e302:	77 1f       	adc	r23, r23
    e304:	ea 94       	dec	r14
    e306:	e2 f7       	brpl	.-8      	; 0xe300 <qtm_scroller_process+0x47e>
    e308:	fb 01       	movw	r30, r22
    e30a:	31 97       	sbiw	r30, 0x01	; 1
    e30c:	02 c0       	rjmp	.+4      	; 0xe312 <qtm_scroller_process+0x490>
    e30e:	96 95       	lsr	r25
    e310:	87 95       	ror	r24
    e312:	2a 95       	dec	r18
    e314:	e2 f7       	brpl	.-8      	; 0xe30e <qtm_scroller_process+0x48c>
    e316:	e8 17       	cp	r30, r24
    e318:	f9 07       	cpc	r31, r25
    e31a:	08 f4       	brcc	.+2      	; 0xe31e <qtm_scroller_process+0x49c>
    e31c:	cf 01       	movw	r24, r30
    e31e:	fd 84       	ldd	r15, Y+13	; 0x0d
    e320:	ff 20       	and	r15, r15
    e322:	d9 f1       	breq	.+118    	; 0xe39a <qtm_scroller_process+0x518>
    e324:	ae 85       	ldd	r26, Y+14	; 0x0e
    e326:	bf 85       	ldd	r27, Y+15	; 0x0f
    e328:	13 96       	adiw	r26, 0x03	; 3
    e32a:	4d 91       	ld	r20, X+
    e32c:	5c 91       	ld	r21, X
    e32e:	14 97       	sbiw	r26, 0x04	; 4
    e330:	9c 01       	movw	r18, r24
    e332:	24 1b       	sub	r18, r20
    e334:	35 0b       	sbc	r19, r21
    e336:	b9 81       	ldd	r27, Y+1	; 0x01
    e338:	b1 30       	cpi	r27, 0x01	; 1
    e33a:	a9 f4       	brne	.+42     	; 0xe366 <qtm_scroller_process+0x4e4>
    e33c:	db 01       	movw	r26, r22
    e33e:	b6 95       	lsr	r27
    e340:	a7 95       	ror	r26
    e342:	37 ff       	sbrs	r19, 7
    e344:	0a c0       	rjmp	.+20     	; 0xe35a <qtm_scroller_process+0x4d8>
    e346:	b1 95       	neg	r27
    e348:	a1 95       	neg	r26
    e34a:	b1 09       	sbc	r27, r1
    e34c:	2a 17       	cp	r18, r26
    e34e:	3b 07       	cpc	r19, r27
    e350:	0c f0       	brlt	.+2      	; 0xe354 <qtm_scroller_process+0x4d2>
    e352:	96 c0       	rjmp	.+300    	; 0xe480 <qtm_scroller_process+0x5fe>
    e354:	26 0f       	add	r18, r22
    e356:	37 1f       	adc	r19, r23
    e358:	06 c0       	rjmp	.+12     	; 0xe366 <qtm_scroller_process+0x4e4>
    e35a:	a2 17       	cp	r26, r18
    e35c:	b3 07       	cpc	r27, r19
    e35e:	0c f0       	brlt	.+2      	; 0xe362 <qtm_scroller_process+0x4e0>
    e360:	95 c0       	rjmp	.+298    	; 0xe48c <qtm_scroller_process+0x60a>
    e362:	26 1b       	sub	r18, r22
    e364:	37 0b       	sbc	r19, r23
    e366:	21 30       	cpi	r18, 0x01	; 1
    e368:	31 05       	cpc	r19, r1
    e36a:	c1 f0       	breq	.+48     	; 0xe39c <qtm_scroller_process+0x51a>
    e36c:	2f 3f       	cpi	r18, 0xFF	; 255
    e36e:	6f ef       	ldi	r22, 0xFF	; 255
    e370:	36 07       	cpc	r19, r22
    e372:	a1 f0       	breq	.+40     	; 0xe39c <qtm_scroller_process+0x51a>
    e374:	37 ff       	sbrs	r19, 7
    e376:	09 c0       	rjmp	.+18     	; 0xe38a <qtm_scroller_process+0x508>
    e378:	31 95       	neg	r19
    e37a:	21 95       	neg	r18
    e37c:	31 09       	sbc	r19, r1
    e37e:	36 95       	lsr	r19
    e380:	27 95       	ror	r18
    e382:	31 95       	neg	r19
    e384:	21 95       	neg	r18
    e386:	31 09       	sbc	r19, r1
    e388:	02 c0       	rjmp	.+4      	; 0xe38e <qtm_scroller_process+0x50c>
    e38a:	36 95       	lsr	r19
    e38c:	27 95       	ror	r18
    e38e:	24 0f       	add	r18, r20
    e390:	35 1f       	adc	r19, r21
    e392:	af 01       	movw	r20, r30
    e394:	42 23       	and	r20, r18
    e396:	53 23       	and	r21, r19
    e398:	01 c0       	rjmp	.+2      	; 0xe39c <qtm_scroller_process+0x51a>
    e39a:	ac 01       	movw	r20, r24
    e39c:	ae 85       	ldd	r26, Y+14	; 0x0e
    e39e:	bf 85       	ldd	r27, Y+15	; 0x0f
    e3a0:	13 96       	adiw	r26, 0x03	; 3
    e3a2:	8d 93       	st	X+, r24
    e3a4:	9c 93       	st	X, r25
    e3a6:	14 97       	sbiw	r26, 0x04	; 4
    e3a8:	f3 01       	movw	r30, r6
    e3aa:	a5 81       	ldd	r26, Z+5	; 0x05
    e3ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    e3ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    e3b0:	65 81       	ldd	r22, Z+5	; 0x05
    e3b2:	76 81       	ldd	r23, Z+6	; 0x06
    e3b4:	f3 01       	movw	r30, r6
    e3b6:	24 81       	ldd	r18, Z+4	; 0x04
    e3b8:	ca 01       	movw	r24, r20
    e3ba:	86 1b       	sub	r24, r22
    e3bc:	97 0b       	sbc	r25, r23
    e3be:	30 81       	ld	r19, Z
    e3c0:	31 30       	cpi	r19, 0x01	; 1
    e3c2:	e1 f4       	brne	.+56     	; 0xe3fc <qtm_scroller_process+0x57a>
    e3c4:	22 95       	swap	r18
    e3c6:	2f 70       	andi	r18, 0x0F	; 15
    e3c8:	e1 e0       	ldi	r30, 0x01	; 1
    e3ca:	f0 e0       	ldi	r31, 0x00	; 0
    e3cc:	02 c0       	rjmp	.+4      	; 0xe3d2 <qtm_scroller_process+0x550>
    e3ce:	ee 0f       	add	r30, r30
    e3d0:	ff 1f       	adc	r31, r31
    e3d2:	2a 95       	dec	r18
    e3d4:	e2 f7       	brpl	.-8      	; 0xe3ce <qtm_scroller_process+0x54c>
    e3d6:	9f 01       	movw	r18, r30
    e3d8:	36 95       	lsr	r19
    e3da:	27 95       	ror	r18
    e3dc:	97 ff       	sbrs	r25, 7
    e3de:	09 c0       	rjmp	.+18     	; 0xe3f2 <qtm_scroller_process+0x570>
    e3e0:	31 95       	neg	r19
    e3e2:	21 95       	neg	r18
    e3e4:	31 09       	sbc	r19, r1
    e3e6:	82 17       	cp	r24, r18
    e3e8:	93 07       	cpc	r25, r19
    e3ea:	54 f4       	brge	.+20     	; 0xe400 <qtm_scroller_process+0x57e>
    e3ec:	8e 0f       	add	r24, r30
    e3ee:	9f 1f       	adc	r25, r31
    e3f0:	05 c0       	rjmp	.+10     	; 0xe3fc <qtm_scroller_process+0x57a>
    e3f2:	28 17       	cp	r18, r24
    e3f4:	39 07       	cpc	r19, r25
    e3f6:	ac f4       	brge	.+42     	; 0xe422 <qtm_scroller_process+0x5a0>
    e3f8:	8e 1b       	sub	r24, r30
    e3fa:	9f 0b       	sbc	r25, r31
    e3fc:	97 ff       	sbrs	r25, 7
    e3fe:	11 c0       	rjmp	.+34     	; 0xe422 <qtm_scroller_process+0x5a0>
    e400:	91 95       	neg	r25
    e402:	81 95       	neg	r24
    e404:	91 09       	sbc	r25, r1
    e406:	ee 85       	ldd	r30, Y+14	; 0x0e
    e408:	ff 85       	ldd	r31, Y+15	; 0x0f
    e40a:	22 81       	ldd	r18, Z+2	; 0x02
    e40c:	30 e0       	ldi	r19, 0x00	; 0
    e40e:	28 17       	cp	r18, r24
    e410:	39 07       	cpc	r19, r25
    e412:	14 f0       	brlt	.+4      	; 0xe418 <qtm_scroller_process+0x596>
    e414:	80 e0       	ldi	r24, 0x00	; 0
    e416:	1a c0       	rjmp	.+52     	; 0xe44c <qtm_scroller_process+0x5ca>
    e418:	ee 85       	ldd	r30, Y+14	; 0x0e
    e41a:	ff 85       	ldd	r31, Y+15	; 0x0f
    e41c:	a1 83       	std	Z+1, r26	; 0x01
    e41e:	12 82       	std	Z+2, r1	; 0x02
    e420:	0b c0       	rjmp	.+22     	; 0xe438 <qtm_scroller_process+0x5b6>
    e422:	ee 85       	ldd	r30, Y+14	; 0x0e
    e424:	ff 85       	ldd	r31, Y+15	; 0x0f
    e426:	21 81       	ldd	r18, Z+1	; 0x01
    e428:	30 e0       	ldi	r19, 0x00	; 0
    e42a:	28 17       	cp	r18, r24
    e42c:	39 07       	cpc	r19, r25
    e42e:	94 f7       	brge	.-28     	; 0xe414 <qtm_scroller_process+0x592>
    e430:	ee 85       	ldd	r30, Y+14	; 0x0e
    e432:	ff 85       	ldd	r31, Y+15	; 0x0f
    e434:	11 82       	std	Z+1, r1	; 0x01
    e436:	a2 83       	std	Z+2, r26	; 0x02
    e438:	46 17       	cp	r20, r22
    e43a:	57 07       	cpc	r21, r23
    e43c:	59 f3       	breq	.-42     	; 0xe414 <qtm_scroller_process+0x592>
    e43e:	ae 85       	ldd	r26, Y+14	; 0x0e
    e440:	bf 85       	ldd	r27, Y+15	; 0x0f
    e442:	15 96       	adiw	r26, 0x05	; 5
    e444:	4d 93       	st	X+, r20
    e446:	5c 93       	st	X, r21
    e448:	16 97       	sbiw	r26, 0x06	; 6
    e44a:	82 e0       	ldi	r24, 0x02	; 2
    e44c:	81 68       	ori	r24, 0x81	; 129
    e44e:	02 c0       	rjmp	.+4      	; 0xe454 <qtm_scroller_process+0x5d2>
    e450:	02 e0       	ldi	r16, 0x02	; 2
    e452:	80 e0       	ldi	r24, 0x00	; 0
    e454:	ee 85       	ldd	r30, Y+14	; 0x0e
    e456:	ff 85       	ldd	r31, Y+15	; 0x0f
    e458:	80 83       	st	Z, r24
    e45a:	81 78       	andi	r24, 0x81	; 129
    e45c:	ea 80       	ldd	r14, Y+2	; 0x02
    e45e:	e8 2a       	or	r14, r24
    e460:	ea 82       	std	Y+2, r14	; 0x02
    e462:	93 94       	inc	r9
    e464:	46 cd       	rjmp	.-1396   	; 0xdef2 <qtm_scroller_process+0x70>
    e466:	ed 91       	ld	r30, X+
    e468:	fc 91       	ld	r31, X
    e46a:	ea 80       	ldd	r14, Y+2	; 0x02
    e46c:	e0 82       	st	Z, r14
    e46e:	13 c0       	rjmp	.+38     	; 0xe496 <qtm_scroller_process+0x614>
    e470:	0b e0       	ldi	r16, 0x0B	; 11
    e472:	11 c0       	rjmp	.+34     	; 0xe496 <qtm_scroller_process+0x614>
    e474:	60 e0       	ldi	r22, 0x00	; 0
    e476:	70 e0       	ldi	r23, 0x00	; 0
    e478:	90 e0       	ldi	r25, 0x00	; 0
    e47a:	9d ce       	rjmp	.-710    	; 0xe1b6 <qtm_scroller_process+0x334>
    e47c:	91 e0       	ldi	r25, 0x01	; 1
    e47e:	9b ce       	rjmp	.-714    	; 0xe1b6 <qtm_scroller_process+0x334>
    e480:	2f 3f       	cpi	r18, 0xFF	; 255
    e482:	6f ef       	ldi	r22, 0xFF	; 255
    e484:	36 07       	cpc	r19, r22
    e486:	09 f0       	breq	.+2      	; 0xe48a <qtm_scroller_process+0x608>
    e488:	77 cf       	rjmp	.-274    	; 0xe378 <qtm_scroller_process+0x4f6>
    e48a:	88 cf       	rjmp	.-240    	; 0xe39c <qtm_scroller_process+0x51a>
    e48c:	21 30       	cpi	r18, 0x01	; 1
    e48e:	31 05       	cpc	r19, r1
    e490:	09 f0       	breq	.+2      	; 0xe494 <qtm_scroller_process+0x612>
    e492:	70 cf       	rjmp	.-288    	; 0xe374 <qtm_scroller_process+0x4f2>
    e494:	83 cf       	rjmp	.-250    	; 0xe39c <qtm_scroller_process+0x51a>
    e496:	80 2f       	mov	r24, r16
    e498:	61 96       	adiw	r28, 0x11	; 17
    e49a:	cd bf       	out	0x3d, r28	; 61
    e49c:	de bf       	out	0x3e, r29	; 62
    e49e:	df 91       	pop	r29
    e4a0:	cf 91       	pop	r28
    e4a2:	1f 91       	pop	r17
    e4a4:	0f 91       	pop	r16
    e4a6:	ff 90       	pop	r15
    e4a8:	ef 90       	pop	r14
    e4aa:	df 90       	pop	r13
    e4ac:	cf 90       	pop	r12
    e4ae:	bf 90       	pop	r11
    e4b0:	af 90       	pop	r10
    e4b2:	9f 90       	pop	r9
    e4b4:	8f 90       	pop	r8
    e4b6:	7f 90       	pop	r7
    e4b8:	6f 90       	pop	r6
    e4ba:	5f 90       	pop	r5
    e4bc:	4f 90       	pop	r4
    e4be:	3f 90       	pop	r3
    e4c0:	2f 90       	pop	r2
    e4c2:	08 95       	ret

0000e4c4 <charge_share_test>:
    e4c4:	a0 91 48 47 	lds	r26, 0x4748	; 0x804748 <qtm_acquisition_control_working_set_ptr>
    e4c8:	b0 91 49 47 	lds	r27, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr+0x1>
    e4cc:	25 e0       	ldi	r18, 0x05	; 5
    e4ce:	ac 01       	movw	r20, r24
    e4d0:	24 9f       	mul	r18, r20
    e4d2:	c0 01       	movw	r24, r0
    e4d4:	25 9f       	mul	r18, r21
    e4d6:	90 0d       	add	r25, r0
    e4d8:	11 24       	eor	r1, r1
    e4da:	14 96       	adiw	r26, 0x04	; 4
    e4dc:	ed 91       	ld	r30, X+
    e4de:	fc 91       	ld	r31, X
    e4e0:	15 97       	sbiw	r26, 0x05	; 5
    e4e2:	e8 0f       	add	r30, r24
    e4e4:	f9 1f       	adc	r31, r25
    e4e6:	81 81       	ldd	r24, Z+1	; 0x01
    e4e8:	92 81       	ldd	r25, Z+2	; 0x02
    e4ea:	86 17       	cp	r24, r22
    e4ec:	97 07       	cpc	r25, r23
    e4ee:	81 f1       	breq	.+96     	; 0xe550 <charge_share_test+0x8c>
    e4f0:	86 17       	cp	r24, r22
    e4f2:	97 07       	cpc	r25, r23
    e4f4:	18 f4       	brcc	.+6      	; 0xe4fc <charge_share_test+0x38>
    e4f6:	68 1b       	sub	r22, r24
    e4f8:	79 0b       	sbc	r23, r25
    e4fa:	04 c0       	rjmp	.+8      	; 0xe504 <charge_share_test+0x40>
    e4fc:	9c 01       	movw	r18, r24
    e4fe:	26 1b       	sub	r18, r22
    e500:	37 0b       	sbc	r19, r23
    e502:	b9 01       	movw	r22, r18
    e504:	ed 91       	ld	r30, X+
    e506:	fc 91       	ld	r31, X
    e508:	82 81       	ldd	r24, Z+2	; 0x02
    e50a:	80 34       	cpi	r24, 0x40	; 64
    e50c:	11 f4       	brne	.+4      	; 0xe512 <charge_share_test+0x4e>
    e50e:	76 95       	lsr	r23
    e510:	67 95       	ror	r22
    e512:	65 38       	cpi	r22, 0x85	; 133
    e514:	71 05       	cpc	r23, r1
    e516:	d0 f4       	brcc	.+52     	; 0xe54c <charge_share_test+0x88>
    e518:	66 30       	cpi	r22, 0x06	; 6
    e51a:	71 05       	cpc	r23, r1
    e51c:	c8 f0       	brcs	.+50     	; 0xe550 <charge_share_test+0x8c>
    e51e:	e3 81       	ldd	r30, Z+3	; 0x03
    e520:	e0 73       	andi	r30, 0x30	; 48
    e522:	f0 e0       	ldi	r31, 0x00	; 0
    e524:	83 e0       	ldi	r24, 0x03	; 3
    e526:	f6 95       	lsr	r31
    e528:	e7 95       	ror	r30
    e52a:	8a 95       	dec	r24
    e52c:	e1 f7       	brne	.-8      	; 0xe526 <charge_share_test+0x62>
    e52e:	ea 54       	subi	r30, 0x4A	; 74
    e530:	fd 4b       	sbci	r31, 0xBD	; 189
    e532:	80 81       	ld	r24, Z
    e534:	91 81       	ldd	r25, Z+1	; 0x01
    e536:	68 9f       	mul	r22, r24
    e538:	90 01       	movw	r18, r0
    e53a:	69 9f       	mul	r22, r25
    e53c:	30 0d       	add	r19, r0
    e53e:	78 9f       	mul	r23, r24
    e540:	30 0d       	add	r19, r0
    e542:	11 24       	eor	r1, r1
    e544:	81 e0       	ldi	r24, 0x01	; 1
    e546:	23 2b       	or	r18, r19
    e548:	21 f4       	brne	.+8      	; 0xe552 <charge_share_test+0x8e>
    e54a:	02 c0       	rjmp	.+4      	; 0xe550 <charge_share_test+0x8c>
    e54c:	81 e0       	ldi	r24, 0x01	; 1
    e54e:	08 95       	ret
    e550:	80 e0       	ldi	r24, 0x00	; 0
    e552:	08 95       	ret

0000e554 <select_next_channel_to_measure>:
    e554:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    e558:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    e55c:	a0 91 48 47 	lds	r26, 0x4748	; 0x804748 <qtm_acquisition_control_working_set_ptr>
    e560:	b0 91 49 47 	lds	r27, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr+0x1>
    e564:	ed 91       	ld	r30, X+
    e566:	fc 91       	ld	r31, X
    e568:	11 97       	sbiw	r26, 0x01	; 1
    e56a:	40 81       	ld	r20, Z
    e56c:	51 81       	ldd	r21, Z+1	; 0x01
    e56e:	25 e0       	ldi	r18, 0x05	; 5
    e570:	28 9f       	mul	r18, r24
    e572:	b0 01       	movw	r22, r0
    e574:	29 9f       	mul	r18, r25
    e576:	70 0d       	add	r23, r0
    e578:	11 24       	eor	r1, r1
    e57a:	20 e0       	ldi	r18, 0x00	; 0
    e57c:	30 e0       	ldi	r19, 0x00	; 0
    e57e:	84 17       	cp	r24, r20
    e580:	95 07       	cpc	r25, r21
    e582:	a8 f4       	brcc	.+42     	; 0xe5ae <select_next_channel_to_measure+0x5a>
    e584:	14 96       	adiw	r26, 0x04	; 4
    e586:	ed 91       	ld	r30, X+
    e588:	fc 91       	ld	r31, X
    e58a:	15 97       	sbiw	r26, 0x05	; 5
    e58c:	e2 0f       	add	r30, r18
    e58e:	f3 1f       	adc	r31, r19
    e590:	e6 0f       	add	r30, r22
    e592:	f7 1f       	adc	r31, r23
    e594:	e0 81       	ld	r30, Z
    e596:	2b 5f       	subi	r18, 0xFB	; 251
    e598:	3f 4f       	sbci	r19, 0xFF	; 255
    e59a:	e0 fd       	sbrc	r30, 0
    e59c:	02 c0       	rjmp	.+4      	; 0xe5a2 <select_next_channel_to_measure+0x4e>
    e59e:	01 96       	adiw	r24, 0x01	; 1
    e5a0:	ee cf       	rjmp	.-36     	; 0xe57e <select_next_channel_to_measure+0x2a>
    e5a2:	80 93 45 46 	sts	0x4645, r24	; 0x804645 <current_measure_channel>
    e5a6:	90 93 46 46 	sts	0x4646, r25	; 0x804646 <current_measure_channel+0x1>
    e5aa:	80 e0       	ldi	r24, 0x00	; 0
    e5ac:	08 95       	ret
    e5ae:	10 92 45 46 	sts	0x4645, r1	; 0x804645 <current_measure_channel>
    e5b2:	10 92 46 46 	sts	0x4646, r1	; 0x804646 <current_measure_channel+0x1>
    e5b6:	81 e0       	ldi	r24, 0x01	; 1
    e5b8:	08 95       	ret

0000e5ba <qtm_measure_node>:
    e5ba:	af 92       	push	r10
    e5bc:	bf 92       	push	r11
    e5be:	cf 92       	push	r12
    e5c0:	df 92       	push	r13
    e5c2:	ef 92       	push	r14
    e5c4:	ff 92       	push	r15
    e5c6:	0f 93       	push	r16
    e5c8:	1f 93       	push	r17
    e5ca:	cf 93       	push	r28
    e5cc:	df 93       	push	r29
    e5ce:	7c 01       	movw	r14, r24
    e5d0:	e0 91 48 47 	lds	r30, 0x4748	; 0x804748 <qtm_acquisition_control_working_set_ptr>
    e5d4:	f0 91 49 47 	lds	r31, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr+0x1>
    e5d8:	84 e1       	ldi	r24, 0x14	; 20
    e5da:	8e 9d       	mul	r24, r14
    e5dc:	e0 01       	movw	r28, r0
    e5de:	8f 9d       	mul	r24, r15
    e5e0:	d0 0d       	add	r29, r0
    e5e2:	11 24       	eor	r1, r1
    e5e4:	a2 81       	ldd	r26, Z+2	; 0x02
    e5e6:	b3 81       	ldd	r27, Z+3	; 0x03
    e5e8:	ac 0f       	add	r26, r28
    e5ea:	bd 1f       	adc	r27, r29
    e5ec:	18 96       	adiw	r26, 0x08	; 8
    e5ee:	2c 91       	ld	r18, X
    e5f0:	18 97       	sbiw	r26, 0x08	; 8
    e5f2:	19 96       	adiw	r26, 0x09	; 9
    e5f4:	3c 91       	ld	r19, X
    e5f6:	19 97       	sbiw	r26, 0x09	; 9
    e5f8:	1a 96       	adiw	r26, 0x0a	; 10
    e5fa:	4c 91       	ld	r20, X
    e5fc:	1a 97       	sbiw	r26, 0x0a	; 10
    e5fe:	1b 96       	adiw	r26, 0x0b	; 11
    e600:	5c 91       	ld	r21, X
    e602:	1b 97       	sbiw	r26, 0x0b	; 11
    e604:	1c 96       	adiw	r26, 0x0c	; 12
    e606:	6c 91       	ld	r22, X
    e608:	1c 97       	sbiw	r26, 0x0c	; 12
    e60a:	1d 96       	adiw	r26, 0x0d	; 13
    e60c:	7c 91       	ld	r23, X
    e60e:	1d 97       	sbiw	r26, 0x0d	; 13
    e610:	1e 96       	adiw	r26, 0x0e	; 14
    e612:	8c 91       	ld	r24, X
    e614:	1e 97       	sbiw	r26, 0x0e	; 14
    e616:	1f 96       	adiw	r26, 0x0f	; 15
    e618:	9c 91       	ld	r25, X
    e61a:	20 93 f0 07 	sts	0x07F0, r18	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    e61e:	08 e0       	ldi	r16, 0x08	; 8
    e620:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e624:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    e628:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e62c:	20 93 f2 07 	sts	0x07F2, r18	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    e630:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e634:	20 93 f3 07 	sts	0x07F3, r18	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    e638:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e63c:	20 93 f4 07 	sts	0x07F4, r18	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    e640:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e644:	20 93 f5 07 	sts	0x07F5, r18	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    e648:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    e64c:	a0 81       	ld	r26, Z
    e64e:	b1 81       	ldd	r27, Z+1	; 0x01
    e650:	12 96       	adiw	r26, 0x02	; 2
    e652:	8c 91       	ld	r24, X
    e654:	80 38       	cpi	r24, 0x80	; 128
    e656:	09 f4       	brne	.+2      	; 0xe65a <qtm_measure_node+0xa0>
    e658:	4f c0       	rjmp	.+158    	; 0xe6f8 <qtm_measure_node+0x13e>
    e65a:	a2 81       	ldd	r26, Z+2	; 0x02
    e65c:	b3 81       	ldd	r27, Z+3	; 0x03
    e65e:	ac 0f       	add	r26, r28
    e660:	bd 1f       	adc	r27, r29
    e662:	cc 90       	ld	r12, X
    e664:	11 96       	adiw	r26, 0x01	; 1
    e666:	3c 91       	ld	r19, X
    e668:	11 97       	sbiw	r26, 0x01	; 1
    e66a:	12 96       	adiw	r26, 0x02	; 2
    e66c:	4c 91       	ld	r20, X
    e66e:	12 97       	sbiw	r26, 0x02	; 2
    e670:	13 96       	adiw	r26, 0x03	; 3
    e672:	5c 91       	ld	r21, X
    e674:	13 97       	sbiw	r26, 0x03	; 3
    e676:	14 96       	adiw	r26, 0x04	; 4
    e678:	6c 91       	ld	r22, X
    e67a:	14 97       	sbiw	r26, 0x04	; 4
    e67c:	15 96       	adiw	r26, 0x05	; 5
    e67e:	7c 91       	ld	r23, X
    e680:	15 97       	sbiw	r26, 0x05	; 5
    e682:	16 96       	adiw	r26, 0x06	; 6
    e684:	8c 91       	ld	r24, X
    e686:	16 97       	sbiw	r26, 0x06	; 6
    e688:	17 96       	adiw	r26, 0x07	; 7
    e68a:	9c 91       	ld	r25, X
    e68c:	c0 92 e8 07 	sts	0x07E8, r12	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    e690:	2c 2d       	mov	r18, r12
    e692:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e696:	d2 2e       	mov	r13, r18
    e698:	20 93 e9 07 	sts	0x07E9, r18	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    e69c:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e6a0:	12 2f       	mov	r17, r18
    e6a2:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    e6a6:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e6aa:	a2 2e       	mov	r10, r18
    e6ac:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    e6b0:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e6b4:	b2 2e       	mov	r11, r18
    e6b6:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    e6ba:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    e6be:	20 93 ed 07 	sts	0x07ED, r18	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    e6c2:	80 81       	ld	r24, Z
    e6c4:	91 81       	ldd	r25, Z+1	; 0x01
    e6c6:	dc 01       	movw	r26, r24
    e6c8:	12 96       	adiw	r26, 0x02	; 2
    e6ca:	8c 91       	ld	r24, X
    e6cc:	81 38       	cpi	r24, 0x81	; 129
    e6ce:	21 f4       	brne	.+8      	; 0xe6d8 <qtm_measure_node+0x11e>
    e6d0:	81 e0       	ldi	r24, 0x01	; 1
    e6d2:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    e6d6:	10 c0       	rjmp	.+32     	; 0xe6f8 <qtm_measure_node+0x13e>
    e6d8:	82 38       	cpi	r24, 0x82	; 130
    e6da:	71 f4       	brne	.+28     	; 0xe6f8 <qtm_measure_node+0x13e>
    e6dc:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7e07e0>
    e6e0:	c0 92 f8 07 	sts	0x07F8, r12	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    e6e4:	d0 92 f9 07 	sts	0x07F9, r13	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    e6e8:	10 93 fa 07 	sts	0x07FA, r17	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    e6ec:	a0 92 fb 07 	sts	0x07FB, r10	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    e6f0:	b0 92 fc 07 	sts	0x07FC, r11	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    e6f4:	20 93 fd 07 	sts	0x07FD, r18	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    e6f8:	25 e0       	ldi	r18, 0x05	; 5
    e6fa:	2e 9d       	mul	r18, r14
    e6fc:	c0 01       	movw	r24, r0
    e6fe:	2f 9d       	mul	r18, r15
    e700:	90 0d       	add	r25, r0
    e702:	11 24       	eor	r1, r1
    e704:	a4 81       	ldd	r26, Z+4	; 0x04
    e706:	b5 81       	ldd	r27, Z+5	; 0x05
    e708:	a8 0f       	add	r26, r24
    e70a:	b9 1f       	adc	r27, r25
    e70c:	13 96       	adiw	r26, 0x03	; 3
    e70e:	2d 91       	ld	r18, X+
    e710:	3c 91       	ld	r19, X
    e712:	14 97       	sbiw	r26, 0x04	; 4
    e714:	a9 01       	movw	r20, r18
    e716:	53 70       	andi	r21, 0x03	; 3
    e718:	40 93 e4 07 	sts	0x07E4, r20	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7e07e4>
    e71c:	50 93 e5 07 	sts	0x07E5, r21	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7e07e5>
    e720:	37 fd       	sbrc	r19, 7
    e722:	03 c0       	rjmp	.+6      	; 0xe72a <qtm_measure_node+0x170>
    e724:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    e728:	03 c0       	rjmp	.+6      	; 0xe730 <qtm_measure_node+0x176>
    e72a:	21 e0       	ldi	r18, 0x01	; 1
    e72c:	20 93 ca 07 	sts	0x07CA, r18	; 0x8007ca <__TEXT_REGION_LENGTH__+0x7e07ca>
    e730:	a4 81       	ldd	r26, Z+4	; 0x04
    e732:	b5 81       	ldd	r27, Z+5	; 0x05
    e734:	a8 0f       	add	r26, r24
    e736:	b9 1f       	adc	r27, r25
    e738:	2c 91       	ld	r18, X
    e73a:	21 ff       	sbrs	r18, 1
    e73c:	02 c0       	rjmp	.+4      	; 0xe742 <qtm_measure_node+0x188>
    e73e:	25 e0       	ldi	r18, 0x05	; 5
    e740:	2c 93       	st	X, r18
    e742:	24 81       	ldd	r18, Z+4	; 0x04
    e744:	35 81       	ldd	r19, Z+5	; 0x05
    e746:	d9 01       	movw	r26, r18
    e748:	a8 0f       	add	r26, r24
    e74a:	b9 1f       	adc	r27, r25
    e74c:	8c 91       	ld	r24, X
    e74e:	8c 71       	andi	r24, 0x1C	; 28
    e750:	69 f4       	brne	.+26     	; 0xe76c <qtm_measure_node+0x1b2>
    e752:	a2 81       	ldd	r26, Z+2	; 0x02
    e754:	b3 81       	ldd	r27, Z+3	; 0x03
    e756:	ac 0f       	add	r26, r28
    e758:	bd 1f       	adc	r27, r29
    e75a:	52 96       	adiw	r26, 0x12	; 18
    e75c:	ac 91       	ld	r26, X
    e75e:	a2 95       	swap	r26
    e760:	af 70       	andi	r26, 0x0F	; 15
    e762:	b0 e0       	ldi	r27, 0x00	; 0
    e764:	a2 54       	subi	r26, 0x42	; 66
    e766:	bd 4b       	sbci	r27, 0xBD	; 189
    e768:	8c 91       	ld	r24, X
    e76a:	01 c0       	rjmp	.+2      	; 0xe76e <qtm_measure_node+0x1b4>
    e76c:	8f e1       	ldi	r24, 0x1F	; 31
    e76e:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7e07e6>
    e772:	a2 81       	ldd	r26, Z+2	; 0x02
    e774:	b3 81       	ldd	r27, Z+3	; 0x03
    e776:	ac 0f       	add	r26, r28
    e778:	bd 1f       	adc	r27, r29
    e77a:	50 96       	adiw	r26, 0x10	; 16
    e77c:	8c 91       	ld	r24, X
    e77e:	8b 37       	cpi	r24, 0x7B	; 123
    e780:	10 f4       	brcc	.+4      	; 0xe786 <qtm_measure_node+0x1cc>
    e782:	8c 5f       	subi	r24, 0xFC	; 252
    e784:	01 c0       	rjmp	.+2      	; 0xe788 <qtm_measure_node+0x1ce>
    e786:	8f e7       	ldi	r24, 0x7F	; 127
    e788:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7e07c4>
    e78c:	a2 81       	ldd	r26, Z+2	; 0x02
    e78e:	b3 81       	ldd	r27, Z+3	; 0x03
    e790:	ac 0f       	add	r26, r28
    e792:	bd 1f       	adc	r27, r29
    e794:	53 96       	adiw	r26, 0x13	; 19
    e796:	8c 91       	ld	r24, X
    e798:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7e07c7>
    e79c:	a2 81       	ldd	r26, Z+2	; 0x02
    e79e:	b3 81       	ldd	r27, Z+3	; 0x03
    e7a0:	ac 0f       	add	r26, r28
    e7a2:	bd 1f       	adc	r27, r29
    e7a4:	51 96       	adiw	r26, 0x11	; 17
    e7a6:	8c 91       	ld	r24, X
    e7a8:	82 95       	swap	r24
    e7aa:	8f 70       	andi	r24, 0x0F	; 15
    e7ac:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7e07c9>
    e7b0:	82 81       	ldd	r24, Z+2	; 0x02
    e7b2:	93 81       	ldd	r25, Z+3	; 0x03
    e7b4:	c8 0f       	add	r28, r24
    e7b6:	d9 1f       	adc	r29, r25
    e7b8:	89 89       	ldd	r24, Y+17	; 0x11
    e7ba:	8f 70       	andi	r24, 0x0F	; 15
    e7bc:	80 68       	ori	r24, 0x80	; 128
    e7be:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__TEXT_REGION_LENGTH__+0x7e07c2>
    e7c2:	81 e8       	ldi	r24, 0x81	; 129
    e7c4:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    e7c8:	81 e0       	ldi	r24, 0x01	; 1
    e7ca:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7e07d0>
    e7ce:	df 91       	pop	r29
    e7d0:	cf 91       	pop	r28
    e7d2:	1f 91       	pop	r17
    e7d4:	0f 91       	pop	r16
    e7d6:	ff 90       	pop	r15
    e7d8:	ef 90       	pop	r14
    e7da:	df 90       	pop	r13
    e7dc:	cf 90       	pop	r12
    e7de:	bf 90       	pop	r11
    e7e0:	af 90       	pop	r10
    e7e2:	08 95       	ret

0000e7e4 <qtm_acquisition_process>:
    e7e4:	2f 92       	push	r2
    e7e6:	3f 92       	push	r3
    e7e8:	4f 92       	push	r4
    e7ea:	5f 92       	push	r5
    e7ec:	6f 92       	push	r6
    e7ee:	7f 92       	push	r7
    e7f0:	8f 92       	push	r8
    e7f2:	9f 92       	push	r9
    e7f4:	af 92       	push	r10
    e7f6:	bf 92       	push	r11
    e7f8:	cf 92       	push	r12
    e7fa:	df 92       	push	r13
    e7fc:	ef 92       	push	r14
    e7fe:	ff 92       	push	r15
    e800:	0f 93       	push	r16
    e802:	1f 93       	push	r17
    e804:	cf 93       	push	r28
    e806:	df 93       	push	r29
    e808:	cd b7       	in	r28, 0x3d	; 61
    e80a:	de b7       	in	r29, 0x3e	; 62
    e80c:	27 97       	sbiw	r28, 0x07	; 7
    e80e:	cd bf       	out	0x3d, r28	; 61
    e810:	de bf       	out	0x3e, r29	; 62
    e812:	80 91 44 46 	lds	r24, 0x4644	; 0x804644 <touch_seq_lib_state>
    e816:	88 23       	and	r24, r24
    e818:	09 f4       	brne	.+2      	; 0xe81c <qtm_acquisition_process+0x38>
    e81a:	46 c2       	rjmp	.+1164   	; 0xeca8 <qtm_acquisition_process+0x4c4>
    e81c:	00 91 48 47 	lds	r16, 0x4748	; 0x804748 <qtm_acquisition_control_working_set_ptr>
    e820:	10 91 49 47 	lds	r17, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr+0x1>
    e824:	20 91 4a 47 	lds	r18, 0x474A	; 0x80474a <qtm_raw_data_measurements_ptr>
    e828:	30 91 4b 47 	lds	r19, 0x474B	; 0x80474b <qtm_raw_data_measurements_ptr+0x1>
    e82c:	2a 83       	std	Y+2, r18	; 0x02
    e82e:	3b 83       	std	Y+3, r19	; 0x03
    e830:	c1 2c       	mov	r12, r1
    e832:	d1 2c       	mov	r13, r1
    e834:	a1 2c       	mov	r10, r1
    e836:	b1 2c       	mov	r11, r1
    e838:	21 2c       	mov	r2, r1
    e83a:	31 2c       	mov	r3, r1
    e83c:	19 82       	std	Y+1, r1	; 0x01
    e83e:	44 24       	eor	r4, r4
    e840:	4a 94       	dec	r4
    e842:	55 24       	eor	r5, r5
    e844:	53 94       	inc	r5
    e846:	77 24       	eor	r7, r7
    e848:	73 94       	inc	r7
    e84a:	d8 01       	movw	r26, r16
    e84c:	0d 90       	ld	r0, X+
    e84e:	bc 91       	ld	r27, X
    e850:	a0 2d       	mov	r26, r0
    e852:	ae 83       	std	Y+6, r26	; 0x06
    e854:	bf 83       	std	Y+7, r27	; 0x07
    e856:	8d 91       	ld	r24, X+
    e858:	9c 91       	ld	r25, X
    e85a:	28 16       	cp	r2, r24
    e85c:	39 06       	cpc	r3, r25
    e85e:	08 f0       	brcs	.+2      	; 0xe862 <qtm_acquisition_process+0x7e>
    e860:	1f c2       	rjmp	.+1086   	; 0xeca0 <qtm_acquisition_process+0x4bc>
    e862:	aa 81       	ldd	r26, Y+2	; 0x02
    e864:	bb 81       	ldd	r27, Y+3	; 0x03
    e866:	4d 91       	ld	r20, X+
    e868:	5d 91       	ld	r21, X+
    e86a:	aa 83       	std	Y+2, r26	; 0x02
    e86c:	bb 83       	std	Y+3, r27	; 0x03
    e86e:	f8 01       	movw	r30, r16
    e870:	e4 80       	ldd	r14, Z+4	; 0x04
    e872:	f5 80       	ldd	r15, Z+5	; 0x05
    e874:	ea 0c       	add	r14, r10
    e876:	fb 1c       	adc	r15, r11
    e878:	d7 01       	movw	r26, r14
    e87a:	2c 91       	ld	r18, X
    e87c:	82 2f       	mov	r24, r18
    e87e:	8c 71       	andi	r24, 0x1C	; 28
    e880:	90 e0       	ldi	r25, 0x00	; 0
    e882:	96 95       	lsr	r25
    e884:	87 95       	ror	r24
    e886:	96 95       	lsr	r25
    e888:	87 95       	ror	r24
    e88a:	82 30       	cpi	r24, 0x02	; 2
    e88c:	91 05       	cpc	r25, r1
    e88e:	09 f4       	brne	.+2      	; 0xe892 <qtm_acquisition_process+0xae>
    e890:	a0 c1       	rjmp	.+832    	; 0xebd2 <qtm_acquisition_process+0x3ee>
    e892:	28 f4       	brcc	.+10     	; 0xe89e <qtm_acquisition_process+0xba>
    e894:	00 97       	sbiw	r24, 0x00	; 0
    e896:	59 f0       	breq	.+22     	; 0xe8ae <qtm_acquisition_process+0xca>
    e898:	01 97       	sbiw	r24, 0x01	; 1
    e89a:	01 f1       	breq	.+64     	; 0xe8dc <qtm_acquisition_process+0xf8>
    e89c:	f7 c1       	rjmp	.+1006   	; 0xec8c <qtm_acquisition_process+0x4a8>
    e89e:	83 30       	cpi	r24, 0x03	; 3
    e8a0:	91 05       	cpc	r25, r1
    e8a2:	09 f4       	brne	.+2      	; 0xe8a6 <qtm_acquisition_process+0xc2>
    e8a4:	59 c1       	rjmp	.+690    	; 0xeb58 <qtm_acquisition_process+0x374>
    e8a6:	04 97       	sbiw	r24, 0x04	; 4
    e8a8:	09 f4       	brne	.+2      	; 0xe8ac <qtm_acquisition_process+0xc8>
    e8aa:	e1 c0       	rjmp	.+450    	; 0xea6e <qtm_acquisition_process+0x28a>
    e8ac:	ef c1       	rjmp	.+990    	; 0xec8c <qtm_acquisition_process+0x4a8>
    e8ae:	02 80       	ldd	r0, Z+2	; 0x02
    e8b0:	f3 81       	ldd	r31, Z+3	; 0x03
    e8b2:	e0 2d       	mov	r30, r0
    e8b4:	ec 0d       	add	r30, r12
    e8b6:	fd 1d       	adc	r31, r13
    e8b8:	92 89       	ldd	r25, Z+18	; 0x12
    e8ba:	9f 70       	andi	r25, 0x0F	; 15
    e8bc:	83 89       	ldd	r24, Z+19	; 0x13
    e8be:	98 17       	cp	r25, r24
    e8c0:	10 f4       	brcc	.+4      	; 0xe8c6 <qtm_acquisition_process+0xe2>
    e8c2:	89 1b       	sub	r24, r25
    e8c4:	01 c0       	rjmp	.+2      	; 0xe8c8 <qtm_acquisition_process+0xe4>
    e8c6:	80 e0       	ldi	r24, 0x00	; 0
    e8c8:	9a 01       	movw	r18, r20
    e8ca:	02 c0       	rjmp	.+4      	; 0xe8d0 <qtm_acquisition_process+0xec>
    e8cc:	36 95       	lsr	r19
    e8ce:	27 95       	ror	r18
    e8d0:	8a 95       	dec	r24
    e8d2:	e2 f7       	brpl	.-8      	; 0xe8cc <qtm_acquisition_process+0xe8>
    e8d4:	f7 01       	movw	r30, r14
    e8d6:	21 83       	std	Z+1, r18	; 0x01
    e8d8:	32 83       	std	Z+2, r19	; 0x02
    e8da:	d8 c1       	rjmp	.+944    	; 0xec8c <qtm_acquisition_process+0x4a8>
    e8dc:	82 81       	ldd	r24, Z+2	; 0x02
    e8de:	93 81       	ldd	r25, Z+3	; 0x03
    e8e0:	fc 01       	movw	r30, r24
    e8e2:	ec 0d       	add	r30, r12
    e8e4:	fd 1d       	adc	r31, r13
    e8e6:	4a 01       	movw	r8, r20
    e8e8:	03 88       	ldd	r0, Z+19	; 0x13
    e8ea:	02 c0       	rjmp	.+4      	; 0xe8f0 <qtm_acquisition_process+0x10c>
    e8ec:	96 94       	lsr	r9
    e8ee:	87 94       	ror	r8
    e8f0:	0a 94       	dec	r0
    e8f2:	e2 f7       	brpl	.-8      	; 0xe8ec <qtm_acquisition_process+0x108>
    e8f4:	d7 01       	movw	r26, r14
    e8f6:	11 96       	adiw	r26, 0x01	; 1
    e8f8:	8d 92       	st	X+, r8
    e8fa:	9c 92       	st	X, r9
    e8fc:	12 97       	sbiw	r26, 0x02	; 2
    e8fe:	13 96       	adiw	r26, 0x03	; 3
    e900:	8d 91       	ld	r24, X+
    e902:	9c 91       	ld	r25, X
    e904:	14 97       	sbiw	r26, 0x04	; 4
    e906:	69 2f       	mov	r22, r25
    e908:	66 1f       	adc	r22, r22
    e90a:	66 27       	eor	r22, r22
    e90c:	66 1f       	adc	r22, r22
    e90e:	81 14       	cp	r8, r1
    e910:	b2 e0       	ldi	r27, 0x02	; 2
    e912:	9b 06       	cpc	r9, r27
    e914:	30 f0       	brcs	.+12     	; 0xe922 <qtm_acquisition_process+0x13e>
    e916:	3f ef       	ldi	r19, 0xFF	; 255
    e918:	83 1a       	sub	r8, r19
    e91a:	31 e0       	ldi	r19, 0x01	; 1
    e91c:	93 0a       	sbc	r9, r19
    e91e:	41 e0       	ldi	r20, 0x01	; 1
    e920:	05 c0       	rjmp	.+10     	; 0xe92c <qtm_acquisition_process+0x148>
    e922:	a2 01       	movw	r20, r4
    e924:	48 19       	sub	r20, r8
    e926:	59 09       	sbc	r21, r9
    e928:	4a 01       	movw	r8, r20
    e92a:	40 e0       	ldi	r20, 0x00	; 0
    e92c:	96 94       	lsr	r9
    e92e:	87 94       	ror	r8
    e930:	ae 81       	ldd	r26, Y+6	; 0x06
    e932:	bf 81       	ldd	r27, Y+7	; 0x07
    e934:	12 96       	adiw	r26, 0x02	; 2
    e936:	3c 91       	ld	r19, X
    e938:	30 34       	cpi	r19, 0x40	; 64
    e93a:	29 f0       	breq	.+10     	; 0xe946 <qtm_acquisition_process+0x162>
    e93c:	44 23       	and	r20, r20
    e93e:	09 f4       	brne	.+2      	; 0xe942 <qtm_acquisition_process+0x15e>
    e940:	b6 c1       	rjmp	.+876    	; 0xecae <qtm_acquisition_process+0x4ca>
    e942:	46 2f       	mov	r20, r22
    e944:	06 c0       	rjmp	.+12     	; 0xe952 <qtm_acquisition_process+0x16e>
    e946:	97 ff       	sbrs	r25, 7
    e948:	04 c0       	rjmp	.+8      	; 0xe952 <qtm_acquisition_process+0x16e>
    e94a:	31 e0       	ldi	r19, 0x01	; 1
    e94c:	41 11       	cpse	r20, r1
    e94e:	30 e0       	ldi	r19, 0x00	; 0
    e950:	43 2f       	mov	r20, r19
    e952:	ba e0       	ldi	r27, 0x0A	; 10
    e954:	8b 16       	cp	r8, r27
    e956:	91 04       	cpc	r9, r1
    e958:	08 f0       	brcs	.+2      	; 0xe95c <qtm_acquisition_process+0x178>
    e95a:	3f c0       	rjmp	.+126    	; 0xe9da <qtm_acquisition_process+0x1f6>
    e95c:	26 fd       	sbrc	r18, 6
    e95e:	3a c0       	rjmp	.+116    	; 0xe9d4 <qtm_acquisition_process+0x1f0>
    e960:	27 fd       	sbrc	r18, 7
    e962:	94 c1       	rjmp	.+808    	; 0xec8c <qtm_acquisition_process+0x4a8>
    e964:	ae 81       	ldd	r26, Y+6	; 0x06
    e966:	bf 81       	ldd	r27, Y+7	; 0x07
    e968:	13 96       	adiw	r26, 0x03	; 3
    e96a:	8c 91       	ld	r24, X
    e96c:	83 70       	andi	r24, 0x03	; 3
    e96e:	83 30       	cpi	r24, 0x03	; 3
    e970:	59 f4       	brne	.+22     	; 0xe988 <qtm_acquisition_process+0x1a4>
    e972:	bf e7       	ldi	r27, 0x7F	; 127
    e974:	b0 8b       	std	Z+16, r27	; 0x10
    e976:	d8 01       	movw	r26, r16
    e978:	14 96       	adiw	r26, 0x04	; 4
    e97a:	ed 91       	ld	r30, X+
    e97c:	fc 91       	ld	r31, X
    e97e:	15 97       	sbiw	r26, 0x05	; 5
    e980:	ea 0d       	add	r30, r10
    e982:	fb 1d       	adc	r31, r11
    e984:	b1 e1       	ldi	r27, 0x11	; 17
    e986:	0d c0       	rjmp	.+26     	; 0xe9a2 <qtm_acquisition_process+0x1be>
    e988:	82 30       	cpi	r24, 0x02	; 2
    e98a:	69 f4       	brne	.+26     	; 0xe9a6 <qtm_acquisition_process+0x1c2>
    e98c:	81 89       	ldd	r24, Z+17	; 0x11
    e98e:	80 7f       	andi	r24, 0xF0	; 240
    e990:	81 8b       	std	Z+17, r24	; 0x11
    e992:	d8 01       	movw	r26, r16
    e994:	14 96       	adiw	r26, 0x04	; 4
    e996:	ed 91       	ld	r30, X+
    e998:	fc 91       	ld	r31, X
    e99a:	15 97       	sbiw	r26, 0x05	; 5
    e99c:	ea 0d       	add	r30, r10
    e99e:	fb 1d       	adc	r31, r11
    e9a0:	b9 e0       	ldi	r27, 0x09	; 9
    e9a2:	b0 83       	st	Z, r27
    e9a4:	73 c1       	rjmp	.+742    	; 0xec8c <qtm_acquisition_process+0x4a8>
    e9a6:	81 30       	cpi	r24, 0x01	; 1
    e9a8:	a9 f4       	brne	.+42     	; 0xe9d4 <qtm_acquisition_process+0x1f0>
    e9aa:	81 89       	ldd	r24, Z+17	; 0x11
    e9ac:	8f 70       	andi	r24, 0x0F	; 15
    e9ae:	81 8b       	std	Z+17, r24	; 0x11
    e9b0:	d8 01       	movw	r26, r16
    e9b2:	12 96       	adiw	r26, 0x02	; 2
    e9b4:	ed 91       	ld	r30, X+
    e9b6:	fc 91       	ld	r31, X
    e9b8:	13 97       	sbiw	r26, 0x03	; 3
    e9ba:	ec 0d       	add	r30, r12
    e9bc:	fd 1d       	adc	r31, r13
    e9be:	81 89       	ldd	r24, Z+17	; 0x11
    e9c0:	80 67       	ori	r24, 0x70	; 112
    e9c2:	81 8b       	std	Z+17, r24	; 0x11
    e9c4:	14 96       	adiw	r26, 0x04	; 4
    e9c6:	ed 91       	ld	r30, X+
    e9c8:	fc 91       	ld	r31, X
    e9ca:	15 97       	sbiw	r26, 0x05	; 5
    e9cc:	ea 0d       	add	r30, r10
    e9ce:	fb 1d       	adc	r31, r11
    e9d0:	bd e0       	ldi	r27, 0x0D	; 13
    e9d2:	e7 cf       	rjmp	.-50     	; 0xe9a2 <qtm_acquisition_process+0x1be>
    e9d4:	f7 01       	movw	r30, r14
    e9d6:	70 82       	st	Z, r7
    e9d8:	59 c1       	rjmp	.+690    	; 0xec8c <qtm_acquisition_process+0x4a8>
    e9da:	9c 01       	movw	r18, r24
    e9dc:	33 70       	andi	r19, 0x03	; 3
    e9de:	2f 3f       	cpi	r18, 0xFF	; 255
    e9e0:	f3 e0       	ldi	r31, 0x03	; 3
    e9e2:	3f 07       	cpc	r19, r31
    e9e4:	31 f4       	brne	.+12     	; 0xe9f2 <qtm_acquisition_process+0x20e>
    e9e6:	e1 e8       	ldi	r30, 0x81	; 129
    e9e8:	d7 01       	movw	r26, r14
    e9ea:	ec 93       	st	X, r30
    e9ec:	8f ef       	ldi	r24, 0xFF	; 255
    e9ee:	93 e0       	ldi	r25, 0x03	; 3
    e9f0:	0b c0       	rjmp	.+22     	; 0xea08 <qtm_acquisition_process+0x224>
    e9f2:	21 15       	cp	r18, r1
    e9f4:	31 05       	cpc	r19, r1
    e9f6:	59 f4       	brne	.+22     	; 0xea0e <qtm_acquisition_process+0x22a>
    e9f8:	97 ff       	sbrs	r25, 7
    e9fa:	25 c0       	rjmp	.+74     	; 0xea46 <qtm_acquisition_process+0x262>
    e9fc:	e1 e8       	ldi	r30, 0x81	; 129
    e9fe:	d7 01       	movw	r26, r14
    ea00:	ec 93       	st	X, r30
    ea02:	80 e0       	ldi	r24, 0x00	; 0
    ea04:	90 e0       	ldi	r25, 0x00	; 0
    ea06:	61 e0       	ldi	r22, 0x01	; 1
    ea08:	fe e0       	ldi	r31, 0x0E	; 14
    ea0a:	f9 83       	std	Y+1, r31	; 0x01
    ea0c:	1f c0       	rjmp	.+62     	; 0xea4c <qtm_acquisition_process+0x268>
    ea0e:	c9 01       	movw	r24, r18
    ea10:	41 11       	cpse	r20, r1
    ea12:	0f c0       	rjmp	.+30     	; 0xea32 <qtm_acquisition_process+0x24e>
    ea14:	01 96       	adiw	r24, 0x01	; 1
    ea16:	21 e0       	ldi	r18, 0x01	; 1
    ea18:	82 1a       	sub	r8, r18
    ea1a:	91 08       	sbc	r9, r1
    ea1c:	31 e0       	ldi	r19, 0x01	; 1
    ea1e:	83 16       	cp	r8, r19
    ea20:	91 04       	cpc	r9, r1
    ea22:	a1 f0       	breq	.+40     	; 0xea4c <qtm_acquisition_process+0x268>
    ea24:	8f 3f       	cpi	r24, 0xFF	; 255
    ea26:	43 e0       	ldi	r20, 0x03	; 3
    ea28:	94 07       	cpc	r25, r20
    ea2a:	a1 f7       	brne	.-24     	; 0xea14 <qtm_acquisition_process+0x230>
    ea2c:	0f c0       	rjmp	.+30     	; 0xea4c <qtm_acquisition_process+0x268>
    ea2e:	00 97       	sbiw	r24, 0x00	; 0
    ea30:	69 f0       	breq	.+26     	; 0xea4c <qtm_acquisition_process+0x268>
    ea32:	01 97       	sbiw	r24, 0x01	; 1
    ea34:	ac 01       	movw	r20, r24
    ea36:	42 1b       	sub	r20, r18
    ea38:	53 0b       	sbc	r21, r19
    ea3a:	48 0d       	add	r20, r8
    ea3c:	59 1d       	adc	r21, r9
    ea3e:	41 30       	cpi	r20, 0x01	; 1
    ea40:	51 05       	cpc	r21, r1
    ea42:	a9 f7       	brne	.-22     	; 0xea2e <qtm_acquisition_process+0x24a>
    ea44:	03 c0       	rjmp	.+6      	; 0xea4c <qtm_acquisition_process+0x268>
    ea46:	80 ef       	ldi	r24, 0xF0	; 240
    ea48:	90 e0       	ldi	r25, 0x00	; 0
    ea4a:	61 e0       	ldi	r22, 0x01	; 1
    ea4c:	d8 01       	movw	r26, r16
    ea4e:	14 96       	adiw	r26, 0x04	; 4
    ea50:	ed 91       	ld	r30, X+
    ea52:	fc 91       	ld	r31, X
    ea54:	15 97       	sbiw	r26, 0x05	; 5
    ea56:	ea 0d       	add	r30, r10
    ea58:	fb 1d       	adc	r31, r11
    ea5a:	70 e0       	ldi	r23, 0x00	; 0
    ea5c:	77 27       	eor	r23, r23
    ea5e:	66 95       	lsr	r22
    ea60:	77 95       	ror	r23
    ea62:	66 27       	eor	r22, r22
    ea64:	86 2b       	or	r24, r22
    ea66:	97 2b       	or	r25, r23
    ea68:	83 83       	std	Z+3, r24	; 0x03
    ea6a:	94 83       	std	Z+4, r25	; 0x04
    ea6c:	0f c1       	rjmp	.+542    	; 0xec8c <qtm_acquisition_process+0x4a8>
    ea6e:	f8 01       	movw	r30, r16
    ea70:	82 80       	ldd	r8, Z+2	; 0x02
    ea72:	93 80       	ldd	r9, Z+3	; 0x03
    ea74:	8c 0c       	add	r8, r12
    ea76:	9d 1c       	adc	r9, r13
    ea78:	fa 01       	movw	r30, r20
    ea7a:	d4 01       	movw	r26, r8
    ea7c:	53 96       	adiw	r26, 0x13	; 19
    ea7e:	0c 90       	ld	r0, X
    ea80:	53 97       	sbiw	r26, 0x13	; 19
    ea82:	02 c0       	rjmp	.+4      	; 0xea88 <qtm_acquisition_process+0x2a4>
    ea84:	f6 95       	lsr	r31
    ea86:	e7 95       	ror	r30
    ea88:	0a 94       	dec	r0
    ea8a:	e2 f7       	brpl	.-8      	; 0xea84 <qtm_acquisition_process+0x2a0>
    ea8c:	ec 83       	std	Y+4, r30	; 0x04
    ea8e:	fd 83       	std	Y+5, r31	; 0x05
    ea90:	50 96       	adiw	r26, 0x10	; 16
    ea92:	6c 90       	ld	r6, X
    ea94:	ff e7       	ldi	r31, 0x7F	; 127
    ea96:	6f 12       	cpse	r6, r31
    ea98:	0f c0       	rjmp	.+30     	; 0xeab8 <qtm_acquisition_process+0x2d4>
    ea9a:	ec 81       	ldd	r30, Y+4	; 0x04
    ea9c:	fd 81       	ldd	r31, Y+5	; 0x05
    ea9e:	d7 01       	movw	r26, r14
    eaa0:	11 96       	adiw	r26, 0x01	; 1
    eaa2:	ed 93       	st	X+, r30
    eaa4:	fc 93       	st	X, r31
    eaa6:	12 97       	sbiw	r26, 0x02	; 2
    eaa8:	d4 01       	movw	r26, r8
    eaaa:	50 96       	adiw	r26, 0x10	; 16
    eaac:	8c 91       	ld	r24, X
    eaae:	50 97       	sbiw	r26, 0x10	; 16
    eab0:	8f 7b       	andi	r24, 0xBF	; 191
    eab2:	50 96       	adiw	r26, 0x10	; 16
    eab4:	8c 93       	st	X, r24
    eab6:	42 c0       	rjmp	.+132    	; 0xeb3c <qtm_acquisition_process+0x358>
    eab8:	f1 2c       	mov	r15, r1
    eaba:	26 2d       	mov	r18, r6
    eabc:	30 e0       	ldi	r19, 0x00	; 0
    eabe:	c9 01       	movw	r24, r18
    eac0:	0f 2c       	mov	r0, r15
    eac2:	02 c0       	rjmp	.+4      	; 0xeac8 <qtm_acquisition_process+0x2e4>
    eac4:	96 95       	lsr	r25
    eac6:	87 95       	ror	r24
    eac8:	0a 94       	dec	r0
    eaca:	e2 f7       	brpl	.-8      	; 0xeac4 <qtm_acquisition_process+0x2e0>
    eacc:	80 ff       	sbrs	r24, 0
    eace:	03 c0       	rjmp	.+6      	; 0xead6 <qtm_acquisition_process+0x2f2>
    ead0:	8f 2d       	mov	r24, r15
    ead2:	f1 2c       	mov	r15, r1
    ead4:	01 c0       	rjmp	.+2      	; 0xead8 <qtm_acquisition_process+0x2f4>
    ead6:	87 e0       	ldi	r24, 0x07	; 7
    ead8:	8f 5f       	subi	r24, 0xFF	; 255
    eada:	87 30       	cpi	r24, 0x07	; 7
    eadc:	10 f4       	brcc	.+4      	; 0xeae2 <qtm_acquisition_process+0x2fe>
    eade:	f8 2e       	mov	r15, r24
    eae0:	ee cf       	rjmp	.-36     	; 0xeabe <qtm_acquisition_process+0x2da>
    eae2:	6c 81       	ldd	r22, Y+4	; 0x04
    eae4:	7d 81       	ldd	r23, Y+5	; 0x05
    eae6:	c1 01       	movw	r24, r2
    eae8:	0e 94 62 72 	call	0xe4c4	; 0xe4c4 <charge_share_test>
    eaec:	88 23       	and	r24, r24
    eaee:	51 f0       	breq	.+20     	; 0xeb04 <qtm_acquisition_process+0x320>
    eaf0:	81 e0       	ldi	r24, 0x01	; 1
    eaf2:	90 e0       	ldi	r25, 0x00	; 0
    eaf4:	0f 2c       	mov	r0, r15
    eaf6:	01 c0       	rjmp	.+2      	; 0xeafa <qtm_acquisition_process+0x316>
    eaf8:	88 0f       	add	r24, r24
    eafa:	0a 94       	dec	r0
    eafc:	ea f7       	brpl	.-6      	; 0xeaf8 <qtm_acquisition_process+0x314>
    eafe:	86 29       	or	r24, r6
    eb00:	f4 01       	movw	r30, r8
    eb02:	80 8b       	std	Z+16, r24	; 0x10
    eb04:	d8 01       	movw	r26, r16
    eb06:	ff 20       	and	r15, r15
    eb08:	91 f0       	breq	.+36     	; 0xeb2e <qtm_acquisition_process+0x34a>
    eb0a:	12 96       	adiw	r26, 0x02	; 2
    eb0c:	ed 91       	ld	r30, X+
    eb0e:	fc 91       	ld	r31, X
    eb10:	13 97       	sbiw	r26, 0x03	; 3
    eb12:	ec 0d       	add	r30, r12
    eb14:	fd 1d       	adc	r31, r13
    eb16:	fa 94       	dec	r15
    eb18:	81 e0       	ldi	r24, 0x01	; 1
    eb1a:	90 e0       	ldi	r25, 0x00	; 0
    eb1c:	01 c0       	rjmp	.+2      	; 0xeb20 <qtm_acquisition_process+0x33c>
    eb1e:	88 0f       	add	r24, r24
    eb20:	fa 94       	dec	r15
    eb22:	ea f7       	brpl	.-6      	; 0xeb1e <qtm_acquisition_process+0x33a>
    eb24:	80 95       	com	r24
    eb26:	90 89       	ldd	r25, Z+16	; 0x10
    eb28:	89 23       	and	r24, r25
    eb2a:	80 8b       	std	Z+16, r24	; 0x10
    eb2c:	07 c0       	rjmp	.+14     	; 0xeb3c <qtm_acquisition_process+0x358>
    eb2e:	14 96       	adiw	r26, 0x04	; 4
    eb30:	ed 91       	ld	r30, X+
    eb32:	fc 91       	ld	r31, X
    eb34:	15 97       	sbiw	r26, 0x05	; 5
    eb36:	ea 0d       	add	r30, r10
    eb38:	fb 1d       	adc	r31, r11
    eb3a:	70 82       	st	Z, r7
    eb3c:	d8 01       	movw	r26, r16
    eb3e:	14 96       	adiw	r26, 0x04	; 4
    eb40:	ed 91       	ld	r30, X+
    eb42:	fc 91       	ld	r31, X
    eb44:	15 97       	sbiw	r26, 0x05	; 5
    eb46:	ea 0d       	add	r30, r10
    eb48:	fb 1d       	adc	r31, r11
    eb4a:	80 81       	ld	r24, Z
    eb4c:	81 30       	cpi	r24, 0x01	; 1
    eb4e:	09 f0       	breq	.+2      	; 0xeb52 <qtm_acquisition_process+0x36e>
    eb50:	9d c0       	rjmp	.+314    	; 0xec8c <qtm_acquisition_process+0x4a8>
    eb52:	2c 81       	ldd	r18, Y+4	; 0x04
    eb54:	3d 81       	ldd	r19, Y+5	; 0x05
    eb56:	83 c0       	rjmp	.+262    	; 0xec5e <qtm_acquisition_process+0x47a>
    eb58:	02 80       	ldd	r0, Z+2	; 0x02
    eb5a:	f3 81       	ldd	r31, Z+3	; 0x03
    eb5c:	e0 2d       	mov	r30, r0
    eb5e:	ec 0d       	add	r30, r12
    eb60:	fd 1d       	adc	r31, r13
    eb62:	9a 01       	movw	r18, r20
    eb64:	03 88       	ldd	r0, Z+19	; 0x13
    eb66:	02 c0       	rjmp	.+4      	; 0xeb6c <qtm_acquisition_process+0x388>
    eb68:	36 95       	lsr	r19
    eb6a:	27 95       	ror	r18
    eb6c:	0a 94       	dec	r0
    eb6e:	e2 f7       	brpl	.-8      	; 0xeb68 <qtm_acquisition_process+0x384>
    eb70:	2c 83       	std	Y+4, r18	; 0x04
    eb72:	3d 83       	std	Y+5, r19	; 0x05
    eb74:	91 88       	ldd	r9, Z+17	; 0x11
    eb76:	92 94       	swap	r9
    eb78:	2f e0       	ldi	r18, 0x0F	; 15
    eb7a:	92 22       	and	r9, r18
    eb7c:	37 e0       	ldi	r19, 0x07	; 7
    eb7e:	93 16       	cp	r9, r19
    eb80:	91 f0       	breq	.+36     	; 0xeba6 <qtm_acquisition_process+0x3c2>
    eb82:	6c 81       	ldd	r22, Y+4	; 0x04
    eb84:	7d 81       	ldd	r23, Y+5	; 0x05
    eb86:	c1 01       	movw	r24, r2
    eb88:	0e 94 62 72 	call	0xe4c4	; 0xe4c4 <charge_share_test>
    eb8c:	81 11       	cpse	r24, r1
    eb8e:	04 c0       	rjmp	.+8      	; 0xeb98 <qtm_acquisition_process+0x3b4>
    eb90:	93 94       	inc	r9
    eb92:	d7 01       	movw	r26, r14
    eb94:	7c 92       	st	X, r7
    eb96:	09 c0       	rjmp	.+18     	; 0xebaa <qtm_acquisition_process+0x3c6>
    eb98:	91 10       	cpse	r9, r1
    eb9a:	03 c0       	rjmp	.+6      	; 0xeba2 <qtm_acquisition_process+0x3be>
    eb9c:	f7 01       	movw	r30, r14
    eb9e:	70 82       	st	Z, r7
    eba0:	04 c0       	rjmp	.+8      	; 0xebaa <qtm_acquisition_process+0x3c6>
    eba2:	9a 94       	dec	r9
    eba4:	02 c0       	rjmp	.+4      	; 0xebaa <qtm_acquisition_process+0x3c6>
    eba6:	96 e0       	ldi	r25, 0x06	; 6
    eba8:	99 2e       	mov	r9, r25
    ebaa:	d8 01       	movw	r26, r16
    ebac:	12 96       	adiw	r26, 0x02	; 2
    ebae:	ed 91       	ld	r30, X+
    ebb0:	fc 91       	ld	r31, X
    ebb2:	13 97       	sbiw	r26, 0x03	; 3
    ebb4:	ec 0d       	add	r30, r12
    ebb6:	fd 1d       	adc	r31, r13
    ebb8:	81 89       	ldd	r24, Z+17	; 0x11
    ebba:	8f 70       	andi	r24, 0x0F	; 15
    ebbc:	81 8b       	std	Z+17, r24	; 0x11
    ebbe:	12 96       	adiw	r26, 0x02	; 2
    ebc0:	ed 91       	ld	r30, X+
    ebc2:	fc 91       	ld	r31, X
    ebc4:	13 97       	sbiw	r26, 0x03	; 3
    ebc6:	ec 0d       	add	r30, r12
    ebc8:	fd 1d       	adc	r31, r13
    ebca:	92 94       	swap	r9
    ebcc:	80 ef       	ldi	r24, 0xF0	; 240
    ebce:	98 22       	and	r9, r24
    ebd0:	36 c0       	rjmp	.+108    	; 0xec3e <qtm_acquisition_process+0x45a>
    ebd2:	02 80       	ldd	r0, Z+2	; 0x02
    ebd4:	f3 81       	ldd	r31, Z+3	; 0x03
    ebd6:	e0 2d       	mov	r30, r0
    ebd8:	ec 0d       	add	r30, r12
    ebda:	fd 1d       	adc	r31, r13
    ebdc:	9a 01       	movw	r18, r20
    ebde:	03 88       	ldd	r0, Z+19	; 0x13
    ebe0:	02 c0       	rjmp	.+4      	; 0xebe6 <qtm_acquisition_process+0x402>
    ebe2:	36 95       	lsr	r19
    ebe4:	27 95       	ror	r18
    ebe6:	0a 94       	dec	r0
    ebe8:	e2 f7       	brpl	.-8      	; 0xebe2 <qtm_acquisition_process+0x3fe>
    ebea:	2c 83       	std	Y+4, r18	; 0x04
    ebec:	3d 83       	std	Y+5, r19	; 0x05
    ebee:	81 89       	ldd	r24, Z+17	; 0x11
    ebf0:	8f 70       	andi	r24, 0x0F	; 15
    ebf2:	98 2e       	mov	r9, r24
    ebf4:	91 f0       	breq	.+36     	; 0xec1a <qtm_acquisition_process+0x436>
    ebf6:	b9 01       	movw	r22, r18
    ebf8:	c1 01       	movw	r24, r2
    ebfa:	0e 94 62 72 	call	0xe4c4	; 0xe4c4 <charge_share_test>
    ebfe:	81 11       	cpse	r24, r1
    ec00:	04 c0       	rjmp	.+8      	; 0xec0a <qtm_acquisition_process+0x426>
    ec02:	9a 94       	dec	r9
    ec04:	d7 01       	movw	r26, r14
    ec06:	7c 92       	st	X, r7
    ec08:	0a c0       	rjmp	.+20     	; 0xec1e <qtm_acquisition_process+0x43a>
    ec0a:	b7 e0       	ldi	r27, 0x07	; 7
    ec0c:	9b 12       	cpse	r9, r27
    ec0e:	03 c0       	rjmp	.+6      	; 0xec16 <qtm_acquisition_process+0x432>
    ec10:	f7 01       	movw	r30, r14
    ec12:	70 82       	st	Z, r7
    ec14:	04 c0       	rjmp	.+8      	; 0xec1e <qtm_acquisition_process+0x43a>
    ec16:	93 94       	inc	r9
    ec18:	02 c0       	rjmp	.+4      	; 0xec1e <qtm_acquisition_process+0x43a>
    ec1a:	99 24       	eor	r9, r9
    ec1c:	93 94       	inc	r9
    ec1e:	d8 01       	movw	r26, r16
    ec20:	12 96       	adiw	r26, 0x02	; 2
    ec22:	ed 91       	ld	r30, X+
    ec24:	fc 91       	ld	r31, X
    ec26:	13 97       	sbiw	r26, 0x03	; 3
    ec28:	ec 0d       	add	r30, r12
    ec2a:	fd 1d       	adc	r31, r13
    ec2c:	81 89       	ldd	r24, Z+17	; 0x11
    ec2e:	80 7f       	andi	r24, 0xF0	; 240
    ec30:	81 8b       	std	Z+17, r24	; 0x11
    ec32:	12 96       	adiw	r26, 0x02	; 2
    ec34:	ed 91       	ld	r30, X+
    ec36:	fc 91       	ld	r31, X
    ec38:	13 97       	sbiw	r26, 0x03	; 3
    ec3a:	ec 0d       	add	r30, r12
    ec3c:	fd 1d       	adc	r31, r13
    ec3e:	81 89       	ldd	r24, Z+17	; 0x11
    ec40:	98 2a       	or	r9, r24
    ec42:	91 8a       	std	Z+17, r9	; 0x11
    ec44:	14 96       	adiw	r26, 0x04	; 4
    ec46:	ed 91       	ld	r30, X+
    ec48:	fc 91       	ld	r31, X
    ec4a:	15 97       	sbiw	r26, 0x05	; 5
    ec4c:	ea 0d       	add	r30, r10
    ec4e:	fb 1d       	adc	r31, r11
    ec50:	2c 81       	ldd	r18, Y+4	; 0x04
    ec52:	3d 81       	ldd	r19, Y+5	; 0x05
    ec54:	21 83       	std	Z+1, r18	; 0x01
    ec56:	32 83       	std	Z+2, r19	; 0x02
    ec58:	80 81       	ld	r24, Z
    ec5a:	81 30       	cpi	r24, 0x01	; 1
    ec5c:	b9 f4       	brne	.+46     	; 0xec8c <qtm_acquisition_process+0x4a8>
    ec5e:	21 15       	cp	r18, r1
    ec60:	42 e0       	ldi	r20, 0x02	; 2
    ec62:	34 07       	cpc	r19, r20
    ec64:	28 f0       	brcs	.+10     	; 0xec70 <qtm_acquisition_process+0x48c>
    ec66:	2f 5f       	subi	r18, 0xFF	; 255
    ec68:	31 40       	sbci	r19, 0x01	; 1
    ec6a:	2c 83       	std	Y+4, r18	; 0x04
    ec6c:	3d 83       	std	Y+5, r19	; 0x05
    ec6e:	07 c0       	rjmp	.+14     	; 0xec7e <qtm_acquisition_process+0x49a>
    ec70:	c2 01       	movw	r24, r4
    ec72:	ac 81       	ldd	r26, Y+4	; 0x04
    ec74:	bd 81       	ldd	r27, Y+5	; 0x05
    ec76:	8a 1b       	sub	r24, r26
    ec78:	9b 0b       	sbc	r25, r27
    ec7a:	8c 83       	std	Y+4, r24	; 0x04
    ec7c:	9d 83       	std	Y+5, r25	; 0x05
    ec7e:	2c 81       	ldd	r18, Y+4	; 0x04
    ec80:	3d 81       	ldd	r19, Y+5	; 0x05
    ec82:	2b 30       	cpi	r18, 0x0B	; 11
    ec84:	31 05       	cpc	r19, r1
    ec86:	10 f0       	brcs	.+4      	; 0xec8c <qtm_acquisition_process+0x4a8>
    ec88:	35 e4       	ldi	r19, 0x45	; 69
    ec8a:	30 83       	st	Z, r19
    ec8c:	4f ef       	ldi	r20, 0xFF	; 255
    ec8e:	24 1a       	sub	r2, r20
    ec90:	34 0a       	sbc	r3, r20
    ec92:	55 e0       	ldi	r21, 0x05	; 5
    ec94:	a5 0e       	add	r10, r21
    ec96:	b1 1c       	adc	r11, r1
    ec98:	84 e1       	ldi	r24, 0x14	; 20
    ec9a:	c8 0e       	add	r12, r24
    ec9c:	d1 1c       	adc	r13, r1
    ec9e:	d5 cd       	rjmp	.-1110   	; 0xe84a <qtm_acquisition_process+0x66>
    eca0:	82 e0       	ldi	r24, 0x02	; 2
    eca2:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    eca6:	09 c0       	rjmp	.+18     	; 0xecba <qtm_acquisition_process+0x4d6>
    eca8:	b3 e0       	ldi	r27, 0x03	; 3
    ecaa:	b9 83       	std	Y+1, r27	; 0x01
    ecac:	06 c0       	rjmp	.+12     	; 0xecba <qtm_acquisition_process+0x4d6>
    ecae:	49 2f       	mov	r20, r25
    ecb0:	40 95       	com	r20
    ecb2:	44 1f       	adc	r20, r20
    ecb4:	44 27       	eor	r20, r20
    ecb6:	44 1f       	adc	r20, r20
    ecb8:	4c ce       	rjmp	.-872    	; 0xe952 <qtm_acquisition_process+0x16e>
    ecba:	89 81       	ldd	r24, Y+1	; 0x01
    ecbc:	27 96       	adiw	r28, 0x07	; 7
    ecbe:	cd bf       	out	0x3d, r28	; 61
    ecc0:	de bf       	out	0x3e, r29	; 62
    ecc2:	df 91       	pop	r29
    ecc4:	cf 91       	pop	r28
    ecc6:	1f 91       	pop	r17
    ecc8:	0f 91       	pop	r16
    ecca:	ff 90       	pop	r15
    eccc:	ef 90       	pop	r14
    ecce:	df 90       	pop	r13
    ecd0:	cf 90       	pop	r12
    ecd2:	bf 90       	pop	r11
    ecd4:	af 90       	pop	r10
    ecd6:	9f 90       	pop	r9
    ecd8:	8f 90       	pop	r8
    ecda:	7f 90       	pop	r7
    ecdc:	6f 90       	pop	r6
    ecde:	5f 90       	pop	r5
    ece0:	4f 90       	pop	r4
    ece2:	3f 90       	pop	r3
    ece4:	2f 90       	pop	r2
    ece6:	08 95       	ret

0000ece8 <qtm_ptc_init_acquisition_module>:
    ece8:	5f 92       	push	r5
    ecea:	6f 92       	push	r6
    ecec:	7f 92       	push	r7
    ecee:	8f 92       	push	r8
    ecf0:	9f 92       	push	r9
    ecf2:	af 92       	push	r10
    ecf4:	bf 92       	push	r11
    ecf6:	cf 92       	push	r12
    ecf8:	df 92       	push	r13
    ecfa:	ef 92       	push	r14
    ecfc:	ff 92       	push	r15
    ecfe:	0f 93       	push	r16
    ed00:	1f 93       	push	r17
    ed02:	cf 93       	push	r28
    ed04:	df 93       	push	r29
    ed06:	00 97       	sbiw	r24, 0x00	; 0
    ed08:	09 f4       	brne	.+2      	; 0xed0c <qtm_ptc_init_acquisition_module+0x24>
    ed0a:	92 c0       	rjmp	.+292    	; 0xee30 <qtm_ptc_init_acquisition_module+0x148>
    ed0c:	dc 01       	movw	r26, r24
    ed0e:	ed 91       	ld	r30, X+
    ed10:	fc 91       	ld	r31, X
    ed12:	60 81       	ld	r22, Z
    ed14:	71 81       	ldd	r23, Z+1	; 0x01
    ed16:	40 e0       	ldi	r20, 0x00	; 0
    ed18:	50 e0       	ldi	r21, 0x00	; 0
    ed1a:	20 e0       	ldi	r18, 0x00	; 0
    ed1c:	30 e0       	ldi	r19, 0x00	; 0
    ed1e:	b0 e0       	ldi	r27, 0x00	; 0
    ed20:	10 e0       	ldi	r17, 0x00	; 0
    ed22:	f1 2c       	mov	r15, r1
    ed24:	e1 2c       	mov	r14, r1
    ed26:	91 2c       	mov	r9, r1
    ed28:	81 2c       	mov	r8, r1
    ed2a:	71 2c       	mov	r7, r1
    ed2c:	61 2c       	mov	r6, r1
    ed2e:	26 17       	cp	r18, r22
    ed30:	37 07       	cpc	r19, r23
    ed32:	51 f1       	breq	.+84     	; 0xed88 <qtm_ptc_init_acquisition_module+0xa0>
    ed34:	ec 01       	movw	r28, r24
    ed36:	ea 81       	ldd	r30, Y+2	; 0x02
    ed38:	fb 81       	ldd	r31, Y+3	; 0x03
    ed3a:	e4 0f       	add	r30, r20
    ed3c:	f5 1f       	adc	r31, r21
    ed3e:	a0 80       	ld	r10, Z
    ed40:	a0 85       	ldd	r26, Z+8	; 0x08
    ed42:	aa 2a       	or	r10, r26
    ed44:	b1 80       	ldd	r11, Z+1	; 0x01
    ed46:	a1 85       	ldd	r26, Z+9	; 0x09
    ed48:	ba 2a       	or	r11, r26
    ed4a:	c2 80       	ldd	r12, Z+2	; 0x02
    ed4c:	a2 85       	ldd	r26, Z+10	; 0x0a
    ed4e:	ca 2a       	or	r12, r26
    ed50:	d3 80       	ldd	r13, Z+3	; 0x03
    ed52:	a3 85       	ldd	r26, Z+11	; 0x0b
    ed54:	da 2a       	or	r13, r26
    ed56:	d4 81       	ldd	r29, Z+4	; 0x04
    ed58:	a4 85       	ldd	r26, Z+12	; 0x0c
    ed5a:	da 2b       	or	r29, r26
    ed5c:	c5 81       	ldd	r28, Z+5	; 0x05
    ed5e:	a5 85       	ldd	r26, Z+13	; 0x0d
    ed60:	ca 2b       	or	r28, r26
    ed62:	56 80       	ldd	r5, Z+6	; 0x06
    ed64:	a6 85       	ldd	r26, Z+14	; 0x0e
    ed66:	a5 29       	or	r26, r5
    ed68:	57 80       	ldd	r5, Z+7	; 0x07
    ed6a:	e7 85       	ldd	r30, Z+15	; 0x0f
    ed6c:	e5 29       	or	r30, r5
    ed6e:	ba 29       	or	r27, r10
    ed70:	1b 29       	or	r17, r11
    ed72:	fc 28       	or	r15, r12
    ed74:	ed 28       	or	r14, r13
    ed76:	9d 2a       	or	r9, r29
    ed78:	8c 2a       	or	r8, r28
    ed7a:	7a 2a       	or	r7, r26
    ed7c:	6e 2a       	or	r6, r30
    ed7e:	2f 5f       	subi	r18, 0xFF	; 255
    ed80:	3f 4f       	sbci	r19, 0xFF	; 255
    ed82:	4c 5e       	subi	r20, 0xEC	; 236
    ed84:	5f 4f       	sbci	r21, 0xFF	; 255
    ed86:	d3 cf       	rjmp	.-90     	; 0xed2e <qtm_ptc_init_acquisition_module+0x46>
    ed88:	2b 2f       	mov	r18, r27
    ed8a:	31 2f       	mov	r19, r17
    ed8c:	4f 2d       	mov	r20, r15
    ed8e:	5e 2d       	mov	r21, r14
    ed90:	69 2d       	mov	r22, r9
    ed92:	78 2d       	mov	r23, r8
    ed94:	87 2d       	mov	r24, r7
    ed96:	96 2d       	mov	r25, r6
    ed98:	a0 e0       	ldi	r26, 0x00	; 0
    ed9a:	0e 94 15 79 	call	0xf22a	; 0xf22a <__cmpdi2_s8>
    ed9e:	09 f4       	brne	.+2      	; 0xeda2 <qtm_ptc_init_acquisition_module+0xba>
    eda0:	49 c0       	rjmp	.+146    	; 0xee34 <qtm_ptc_init_acquisition_module+0x14c>
    eda2:	81 e0       	ldi	r24, 0x01	; 1
    eda4:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    eda8:	21 ed       	ldi	r18, 0xD1	; 209
    edaa:	c2 2e       	mov	r12, r18
    edac:	22 e4       	ldi	r18, 0x42	; 66
    edae:	d2 2e       	mov	r13, r18
    edb0:	c0 e0       	ldi	r28, 0x00	; 0
    edb2:	d0 e0       	ldi	r29, 0x00	; 0
    edb4:	aa 24       	eor	r10, r10
    edb6:	a3 94       	inc	r10
    edb8:	b1 2c       	mov	r11, r1
    edba:	4c e0       	ldi	r20, 0x0C	; 12
    edbc:	54 2e       	mov	r5, r20
    edbe:	2b 2f       	mov	r18, r27
    edc0:	31 2f       	mov	r19, r17
    edc2:	4f 2d       	mov	r20, r15
    edc4:	5e 2d       	mov	r21, r14
    edc6:	69 2d       	mov	r22, r9
    edc8:	78 2d       	mov	r23, r8
    edca:	87 2d       	mov	r24, r7
    edcc:	96 2d       	mov	r25, r6
    edce:	0c 2f       	mov	r16, r28
    edd0:	0e 94 f9 78 	call	0xf1f2	; 0xf1f2 <__lshrdi3>
    edd4:	21 70       	andi	r18, 0x01	; 1
    edd6:	30 e0       	ldi	r19, 0x00	; 0
    edd8:	40 e0       	ldi	r20, 0x00	; 0
    edda:	50 e0       	ldi	r21, 0x00	; 0
    eddc:	60 e0       	ldi	r22, 0x00	; 0
    edde:	70 e0       	ldi	r23, 0x00	; 0
    ede0:	80 e0       	ldi	r24, 0x00	; 0
    ede2:	90 e0       	ldi	r25, 0x00	; 0
    ede4:	a0 e0       	ldi	r26, 0x00	; 0
    ede6:	0e 94 15 79 	call	0xf22a	; 0xf22a <__cmpdi2_s8>
    edea:	c9 f0       	breq	.+50     	; 0xee1e <qtm_ptc_init_acquisition_module+0x136>
    edec:	f6 01       	movw	r30, r12
    edee:	80 81       	ld	r24, Z
    edf0:	e8 2f       	mov	r30, r24
    edf2:	e2 95       	swap	r30
    edf4:	e6 95       	lsr	r30
    edf6:	e7 70       	andi	r30, 0x07	; 7
    edf8:	f0 e0       	ldi	r31, 0x00	; 0
    edfa:	ee 0f       	add	r30, r30
    edfc:	ff 1f       	adc	r31, r31
    edfe:	ed 53       	subi	r30, 0x3D	; 61
    ee00:	fd 4b       	sbci	r31, 0xBD	; 189
    ee02:	01 90       	ld	r0, Z+
    ee04:	f0 81       	ld	r31, Z
    ee06:	e0 2d       	mov	r30, r0
    ee08:	8f 71       	andi	r24, 0x1F	; 31
    ee0a:	95 01       	movw	r18, r10
    ee0c:	02 c0       	rjmp	.+4      	; 0xee12 <qtm_ptc_init_acquisition_module+0x12a>
    ee0e:	22 0f       	add	r18, r18
    ee10:	33 1f       	adc	r19, r19
    ee12:	8a 95       	dec	r24
    ee14:	e2 f7       	brpl	.-8      	; 0xee0e <qtm_ptc_init_acquisition_module+0x126>
    ee16:	22 83       	std	Z+2, r18	; 0x02
    ee18:	26 83       	std	Z+6, r18	; 0x06
    ee1a:	53 86       	std	Z+11, r5	; 0x0b
    ee1c:	25 87       	std	Z+13, r18	; 0x0d
    ee1e:	21 96       	adiw	r28, 0x01	; 1
    ee20:	3f ef       	ldi	r19, 0xFF	; 255
    ee22:	c3 1a       	sub	r12, r19
    ee24:	d3 0a       	sbc	r13, r19
    ee26:	c0 33       	cpi	r28, 0x30	; 48
    ee28:	d1 05       	cpc	r29, r1
    ee2a:	49 f6       	brne	.-110    	; 0xedbe <qtm_ptc_init_acquisition_module+0xd6>
    ee2c:	80 e0       	ldi	r24, 0x00	; 0
    ee2e:	03 c0       	rjmp	.+6      	; 0xee36 <qtm_ptc_init_acquisition_module+0x14e>
    ee30:	8b e0       	ldi	r24, 0x0B	; 11
    ee32:	01 c0       	rjmp	.+2      	; 0xee36 <qtm_ptc_init_acquisition_module+0x14e>
    ee34:	82 e0       	ldi	r24, 0x02	; 2
    ee36:	df 91       	pop	r29
    ee38:	cf 91       	pop	r28
    ee3a:	1f 91       	pop	r17
    ee3c:	0f 91       	pop	r16
    ee3e:	ff 90       	pop	r15
    ee40:	ef 90       	pop	r14
    ee42:	df 90       	pop	r13
    ee44:	cf 90       	pop	r12
    ee46:	bf 90       	pop	r11
    ee48:	af 90       	pop	r10
    ee4a:	9f 90       	pop	r9
    ee4c:	8f 90       	pop	r8
    ee4e:	7f 90       	pop	r7
    ee50:	6f 90       	pop	r6
    ee52:	5f 90       	pop	r5
    ee54:	08 95       	ret

0000ee56 <qtm_ptc_qtlib_assign_signal_memory>:
    ee56:	00 97       	sbiw	r24, 0x00	; 0
    ee58:	31 f0       	breq	.+12     	; 0xee66 <qtm_ptc_qtlib_assign_signal_memory+0x10>
    ee5a:	80 93 4a 47 	sts	0x474A, r24	; 0x80474a <qtm_raw_data_measurements_ptr>
    ee5e:	90 93 4b 47 	sts	0x474B, r25	; 0x80474b <qtm_raw_data_measurements_ptr+0x1>
    ee62:	80 e0       	ldi	r24, 0x00	; 0
    ee64:	08 95       	ret
    ee66:	8b e0       	ldi	r24, 0x0B	; 11
    ee68:	08 95       	ret

0000ee6a <qtm_ptc_start_measurement_seq>:
    ee6a:	61 15       	cp	r22, r1
    ee6c:	71 05       	cpc	r23, r1
    ee6e:	61 f1       	breq	.+88     	; 0xeec8 <qtm_ptc_start_measurement_seq+0x5e>
    ee70:	00 97       	sbiw	r24, 0x00	; 0
    ee72:	51 f1       	breq	.+84     	; 0xeec8 <qtm_ptc_start_measurement_seq+0x5e>
    ee74:	20 91 44 46 	lds	r18, 0x4644	; 0x804644 <touch_seq_lib_state>
    ee78:	22 23       	and	r18, r18
    ee7a:	41 f1       	breq	.+80     	; 0xeecc <qtm_ptc_start_measurement_seq+0x62>
    ee7c:	24 30       	cpi	r18, 0x04	; 4
    ee7e:	41 f1       	breq	.+80     	; 0xeed0 <qtm_ptc_start_measurement_seq+0x66>
    ee80:	80 93 48 47 	sts	0x4748, r24	; 0x804748 <qtm_acquisition_control_working_set_ptr>
    ee84:	90 93 49 47 	sts	0x4749, r25	; 0x804749 <qtm_acquisition_control_working_set_ptr+0x1>
    ee88:	60 93 42 46 	sts	0x4642, r22	; 0x804642 <ptc_seq_measure_complete_pointer>
    ee8c:	70 93 43 46 	sts	0x4643, r23	; 0x804643 <ptc_seq_measure_complete_pointer+0x1>
    ee90:	dc 01       	movw	r26, r24
    ee92:	ed 91       	ld	r30, X+
    ee94:	fc 91       	ld	r31, X
    ee96:	22 81       	ldd	r18, Z+2	; 0x02
    ee98:	20 34       	cpi	r18, 0x40	; 64
    ee9a:	19 f4       	brne	.+6      	; 0xeea2 <qtm_ptc_start_measurement_seq+0x38>
    ee9c:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    eea0:	07 c0       	rjmp	.+14     	; 0xeeb0 <qtm_ptc_start_measurement_seq+0x46>
    eea2:	20 38       	cpi	r18, 0x80	; 128
    eea4:	11 f0       	breq	.+4      	; 0xeeaa <qtm_ptc_start_measurement_seq+0x40>
    eea6:	21 38       	cpi	r18, 0x81	; 129
    eea8:	31 f4       	brne	.+12     	; 0xeeb6 <qtm_ptc_start_measurement_seq+0x4c>
    eeaa:	21 e0       	ldi	r18, 0x01	; 1
    eeac:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    eeb0:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    eeb4:	11 c0       	rjmp	.+34     	; 0xeed8 <qtm_ptc_start_measurement_seq+0x6e>
    eeb6:	22 38       	cpi	r18, 0x82	; 130
    eeb8:	69 f4       	brne	.+26     	; 0xeed4 <qtm_ptc_start_measurement_seq+0x6a>
    eeba:	21 e0       	ldi	r18, 0x01	; 1
    eebc:	20 93 c1 07 	sts	0x07C1, r18	; 0x8007c1 <__TEXT_REGION_LENGTH__+0x7e07c1>
    eec0:	29 e0       	ldi	r18, 0x09	; 9
    eec2:	20 93 cb 07 	sts	0x07CB, r18	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7e07cb>
    eec6:	08 c0       	rjmp	.+16     	; 0xeed8 <qtm_ptc_start_measurement_seq+0x6e>
    eec8:	8b e0       	ldi	r24, 0x0B	; 11
    eeca:	08 95       	ret
    eecc:	83 e0       	ldi	r24, 0x03	; 3
    eece:	08 95       	ret
    eed0:	81 e0       	ldi	r24, 0x01	; 1
    eed2:	08 95       	ret
    eed4:	82 e0       	ldi	r24, 0x02	; 2
    eed6:	08 95       	ret
    eed8:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    eedc:	dc 01       	movw	r26, r24
    eede:	ed 91       	ld	r30, X+
    eee0:	fc 91       	ld	r31, X
    eee2:	84 81       	ldd	r24, Z+4	; 0x04
    eee4:	92 81       	ldd	r25, Z+2	; 0x02
    eee6:	90 34       	cpi	r25, 0x40	; 64
    eee8:	51 f4       	brne	.+20     	; 0xeefe <qtm_ptc_start_measurement_seq+0x94>
    eeea:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    eeee:	80 31       	cpi	r24, 0x10	; 16
    eef0:	10 f4       	brcc	.+4      	; 0xeef6 <qtm_ptc_start_measurement_seq+0x8c>
    eef2:	80 62       	ori	r24, 0x20	; 32
    eef4:	01 c0       	rjmp	.+2      	; 0xeef8 <qtm_ptc_start_measurement_seq+0x8e>
    eef6:	8f e2       	ldi	r24, 0x2F	; 47
    eef8:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    eefc:	08 c0       	rjmp	.+16     	; 0xef0e <qtm_ptc_start_measurement_seq+0xa4>
    eefe:	90 e2       	ldi	r25, 0x20	; 32
    ef00:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__TEXT_REGION_LENGTH__+0x7e07c3>
    ef04:	8f 30       	cpi	r24, 0x0F	; 15
    ef06:	08 f0       	brcs	.+2      	; 0xef0a <qtm_ptc_start_measurement_seq+0xa0>
    ef08:	8f e0       	ldi	r24, 0x0F	; 15
    ef0a:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7e07c5>
    ef0e:	81 e0       	ldi	r24, 0x01	; 1
    ef10:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <__TEXT_REGION_LENGTH__+0x7e07d3>
    ef14:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <__TEXT_REGION_LENGTH__+0x7e07d2>
    ef18:	80 93 f0 41 	sts	0x41F0, r24	; 0x8041f0 <qtm_which_mode_current>
    ef1c:	10 92 45 46 	sts	0x4645, r1	; 0x804645 <current_measure_channel>
    ef20:	10 92 46 46 	sts	0x4646, r1	; 0x804646 <current_measure_channel+0x1>
    ef24:	0e 94 aa 72 	call	0xe554	; 0xe554 <select_next_channel_to_measure>
    ef28:	81 11       	cpse	r24, r1
    ef2a:	0b c0       	rjmp	.+22     	; 0xef42 <qtm_ptc_start_measurement_seq+0xd8>
    ef2c:	84 e0       	ldi	r24, 0x04	; 4
    ef2e:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    ef32:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    ef36:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    ef3a:	0e 94 dd 72 	call	0xe5ba	; 0xe5ba <qtm_measure_node>
    ef3e:	80 e0       	ldi	r24, 0x00	; 0
    ef40:	08 95       	ret
    ef42:	82 e0       	ldi	r24, 0x02	; 2
    ef44:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    ef48:	08 95       	ret

0000ef4a <qtm_enable_sensor_node>:
    ef4a:	00 97       	sbiw	r24, 0x00	; 0
    ef4c:	c9 f0       	breq	.+50     	; 0xef80 <qtm_enable_sensor_node+0x36>
    ef4e:	dc 01       	movw	r26, r24
    ef50:	ed 91       	ld	r30, X+
    ef52:	fc 91       	ld	r31, X
    ef54:	11 97       	sbiw	r26, 0x01	; 1
    ef56:	20 81       	ld	r18, Z
    ef58:	31 81       	ldd	r19, Z+1	; 0x01
    ef5a:	26 17       	cp	r18, r22
    ef5c:	37 07       	cpc	r19, r23
    ef5e:	90 f0       	brcs	.+36     	; 0xef84 <qtm_enable_sensor_node+0x3a>
    ef60:	45 e0       	ldi	r20, 0x05	; 5
    ef62:	46 9f       	mul	r20, r22
    ef64:	90 01       	movw	r18, r0
    ef66:	47 9f       	mul	r20, r23
    ef68:	30 0d       	add	r19, r0
    ef6a:	11 24       	eor	r1, r1
    ef6c:	14 96       	adiw	r26, 0x04	; 4
    ef6e:	ed 91       	ld	r30, X+
    ef70:	fc 91       	ld	r31, X
    ef72:	15 97       	sbiw	r26, 0x05	; 5
    ef74:	e2 0f       	add	r30, r18
    ef76:	f3 1f       	adc	r31, r19
    ef78:	81 e0       	ldi	r24, 0x01	; 1
    ef7a:	80 83       	st	Z, r24
    ef7c:	80 e0       	ldi	r24, 0x00	; 0
    ef7e:	08 95       	ret
    ef80:	8b e0       	ldi	r24, 0x0B	; 11
    ef82:	08 95       	ret
    ef84:	82 e0       	ldi	r24, 0x02	; 2
    ef86:	08 95       	ret

0000ef88 <qtm_calibrate_sensor_node>:
    ef88:	fc 01       	movw	r30, r24
    ef8a:	89 2b       	or	r24, r25
    ef8c:	d1 f1       	breq	.+116    	; 0xf002 <qtm_calibrate_sensor_node+0x7a>
    ef8e:	a0 81       	ld	r26, Z
    ef90:	b1 81       	ldd	r27, Z+1	; 0x01
    ef92:	8d 91       	ld	r24, X+
    ef94:	9c 91       	ld	r25, X
    ef96:	11 97       	sbiw	r26, 0x01	; 1
    ef98:	86 17       	cp	r24, r22
    ef9a:	97 07       	cpc	r25, r23
    ef9c:	a0 f1       	brcs	.+104    	; 0xf006 <qtm_calibrate_sensor_node+0x7e>
    ef9e:	12 96       	adiw	r26, 0x02	; 2
    efa0:	9c 91       	ld	r25, X
    efa2:	04 80       	ldd	r0, Z+4	; 0x04
    efa4:	f5 81       	ldd	r31, Z+5	; 0x05
    efa6:	e0 2d       	mov	r30, r0
    efa8:	90 34       	cpi	r25, 0x40	; 64
    efaa:	59 f4       	brne	.+22     	; 0xefc2 <qtm_calibrate_sensor_node+0x3a>
    efac:	85 e0       	ldi	r24, 0x05	; 5
    efae:	86 9f       	mul	r24, r22
    efb0:	d0 01       	movw	r26, r0
    efb2:	87 9f       	mul	r24, r23
    efb4:	b0 0d       	add	r27, r0
    efb6:	11 24       	eor	r1, r1
    efb8:	ae 0f       	add	r26, r30
    efba:	bf 1f       	adc	r27, r31
    efbc:	80 ea       	ldi	r24, 0xA0	; 160
    efbe:	90 e0       	ldi	r25, 0x00	; 0
    efc0:	0d c0       	rjmp	.+26     	; 0xefdc <qtm_calibrate_sensor_node+0x54>
    efc2:	90 58       	subi	r25, 0x80	; 128
    efc4:	93 30       	cpi	r25, 0x03	; 3
    efc6:	80 f4       	brcc	.+32     	; 0xefe8 <qtm_calibrate_sensor_node+0x60>
    efc8:	85 e0       	ldi	r24, 0x05	; 5
    efca:	86 9f       	mul	r24, r22
    efcc:	d0 01       	movw	r26, r0
    efce:	87 9f       	mul	r24, r23
    efd0:	b0 0d       	add	r27, r0
    efd2:	11 24       	eor	r1, r1
    efd4:	ae 0f       	add	r26, r30
    efd6:	bf 1f       	adc	r27, r31
    efd8:	80 ef       	ldi	r24, 0xF0	; 240
    efda:	90 e0       	ldi	r25, 0x00	; 0
    efdc:	13 96       	adiw	r26, 0x03	; 3
    efde:	8d 93       	st	X+, r24
    efe0:	9c 93       	st	X, r25
    efe2:	14 97       	sbiw	r26, 0x04	; 4
    efe4:	80 e0       	ldi	r24, 0x00	; 0
    efe6:	01 c0       	rjmp	.+2      	; 0xefea <qtm_calibrate_sensor_node+0x62>
    efe8:	82 e0       	ldi	r24, 0x02	; 2
    efea:	95 e0       	ldi	r25, 0x05	; 5
    efec:	96 9f       	mul	r25, r22
    efee:	90 01       	movw	r18, r0
    eff0:	97 9f       	mul	r25, r23
    eff2:	30 0d       	add	r19, r0
    eff4:	11 24       	eor	r1, r1
    eff6:	e2 0f       	add	r30, r18
    eff8:	f3 1f       	adc	r31, r19
    effa:	90 81       	ld	r25, Z
    effc:	92 60       	ori	r25, 0x02	; 2
    effe:	90 83       	st	Z, r25
    f000:	08 95       	ret
    f002:	8b e0       	ldi	r24, 0x0B	; 11
    f004:	08 95       	ret
    f006:	82 e0       	ldi	r24, 0x02	; 2
    f008:	08 95       	ret

0000f00a <qtm_avr_da_ptc_handler_wcomp>:
    f00a:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    f00e:	30 91 db 07 	lds	r19, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    f012:	60 91 45 46 	lds	r22, 0x4645	; 0x804645 <current_measure_channel>
    f016:	70 91 46 46 	lds	r23, 0x4646	; 0x804646 <current_measure_channel+0x1>
    f01a:	cb 01       	movw	r24, r22
    f01c:	88 0f       	add	r24, r24
    f01e:	99 1f       	adc	r25, r25
    f020:	e0 91 4a 47 	lds	r30, 0x474A	; 0x80474a <qtm_raw_data_measurements_ptr>
    f024:	f0 91 4b 47 	lds	r31, 0x474B	; 0x80474b <qtm_raw_data_measurements_ptr+0x1>
    f028:	e8 0f       	add	r30, r24
    f02a:	f9 1f       	adc	r31, r25
    f02c:	20 83       	st	Z, r18
    f02e:	31 83       	std	Z+1, r19	; 0x01
    f030:	a0 91 48 47 	lds	r26, 0x4748	; 0x804748 <qtm_acquisition_control_working_set_ptr>
    f034:	b0 91 49 47 	lds	r27, 0x4749	; 0x804749 <qtm_acquisition_control_working_set_ptr+0x1>
    f038:	44 e1       	ldi	r20, 0x14	; 20
    f03a:	46 9f       	mul	r20, r22
    f03c:	c0 01       	movw	r24, r0
    f03e:	47 9f       	mul	r20, r23
    f040:	90 0d       	add	r25, r0
    f042:	11 24       	eor	r1, r1
    f044:	12 96       	adiw	r26, 0x02	; 2
    f046:	ed 91       	ld	r30, X+
    f048:	fc 91       	ld	r31, X
    f04a:	13 97       	sbiw	r26, 0x03	; 3
    f04c:	e8 0f       	add	r30, r24
    f04e:	f9 1f       	adc	r31, r25
    f050:	92 89       	ldd	r25, Z+18	; 0x12
    f052:	9f 70       	andi	r25, 0x0F	; 15
    f054:	83 89       	ldd	r24, Z+19	; 0x13
    f056:	98 17       	cp	r25, r24
    f058:	10 f4       	brcc	.+4      	; 0xf05e <qtm_avr_da_ptc_handler_wcomp+0x54>
    f05a:	89 1b       	sub	r24, r25
    f05c:	01 c0       	rjmp	.+2      	; 0xf060 <qtm_avr_da_ptc_handler_wcomp+0x56>
    f05e:	80 e0       	ldi	r24, 0x00	; 0
    f060:	95 e0       	ldi	r25, 0x05	; 5
    f062:	96 9f       	mul	r25, r22
    f064:	a0 01       	movw	r20, r0
    f066:	97 9f       	mul	r25, r23
    f068:	50 0d       	add	r21, r0
    f06a:	11 24       	eor	r1, r1
    f06c:	14 96       	adiw	r26, 0x04	; 4
    f06e:	ed 91       	ld	r30, X+
    f070:	fc 91       	ld	r31, X
    f072:	15 97       	sbiw	r26, 0x05	; 5
    f074:	e4 0f       	add	r30, r20
    f076:	f5 1f       	adc	r31, r21
    f078:	02 c0       	rjmp	.+4      	; 0xf07e <qtm_avr_da_ptc_handler_wcomp+0x74>
    f07a:	36 95       	lsr	r19
    f07c:	27 95       	ror	r18
    f07e:	8a 95       	dec	r24
    f080:	e2 f7       	brpl	.-8      	; 0xf07a <qtm_avr_da_ptc_handler_wcomp+0x70>
    f082:	21 83       	std	Z+1, r18	; 0x01
    f084:	32 83       	std	Z+2, r19	; 0x02
    f086:	82 e0       	ldi	r24, 0x02	; 2
    f088:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f08c:	e0 91 40 46 	lds	r30, 0x4640	; 0x804640 <ptc_wcomp_happened_pointer>
    f090:	f0 91 41 46 	lds	r31, 0x4641	; 0x804641 <ptc_wcomp_happened_pointer+0x1>
    f094:	09 94       	ijmp

0000f096 <qtm_avr_da_ptc_handler_eoc>:
    f096:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7e07c0>
    f09a:	80 91 f0 41 	lds	r24, 0x41F0	; 0x8041f0 <qtm_which_mode_current>
    f09e:	81 30       	cpi	r24, 0x01	; 1
    f0a0:	09 f0       	breq	.+2      	; 0xf0a4 <qtm_avr_da_ptc_handler_eoc+0xe>
    f0a2:	4e c0       	rjmp	.+156    	; 0xf140 <qtm_avr_da_ptc_handler_eoc+0xaa>
    f0a4:	40 91 da 07 	lds	r20, 0x07DA	; 0x8007da <__TEXT_REGION_LENGTH__+0x7e07da>
    f0a8:	50 91 db 07 	lds	r21, 0x07DB	; 0x8007db <__TEXT_REGION_LENGTH__+0x7e07db>
    f0ac:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    f0b0:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    f0b4:	9c 01       	movw	r18, r24
    f0b6:	22 0f       	add	r18, r18
    f0b8:	33 1f       	adc	r19, r19
    f0ba:	e0 91 4a 47 	lds	r30, 0x474A	; 0x80474a <qtm_raw_data_measurements_ptr>
    f0be:	f0 91 4b 47 	lds	r31, 0x474B	; 0x80474b <qtm_raw_data_measurements_ptr+0x1>
    f0c2:	e2 0f       	add	r30, r18
    f0c4:	f3 1f       	adc	r31, r19
    f0c6:	40 83       	st	Z, r20
    f0c8:	51 83       	std	Z+1, r21	; 0x01
    f0ca:	01 96       	adiw	r24, 0x01	; 1
    f0cc:	80 93 45 46 	sts	0x4645, r24	; 0x804645 <current_measure_channel>
    f0d0:	90 93 46 46 	sts	0x4646, r25	; 0x804646 <current_measure_channel+0x1>
    f0d4:	0e 94 aa 72 	call	0xe554	; 0xe554 <select_next_channel_to_measure>
    f0d8:	81 11       	cpse	r24, r1
    f0da:	09 c0       	rjmp	.+18     	; 0xf0ee <qtm_avr_da_ptc_handler_eoc+0x58>
    f0dc:	84 e0       	ldi	r24, 0x04	; 4
    f0de:	80 93 44 46 	sts	0x4644, r24	; 0x804644 <touch_seq_lib_state>
    f0e2:	80 91 45 46 	lds	r24, 0x4645	; 0x804645 <current_measure_channel>
    f0e6:	90 91 46 46 	lds	r25, 0x4646	; 0x804646 <current_measure_channel+0x1>
    f0ea:	0c 94 dd 72 	jmp	0xe5ba	; 0xe5ba <qtm_measure_node>
    f0ee:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7e07e8>
    f0f2:	10 92 e9 07 	sts	0x07E9, r1	; 0x8007e9 <__TEXT_REGION_LENGTH__+0x7e07e9>
    f0f6:	10 92 ea 07 	sts	0x07EA, r1	; 0x8007ea <__TEXT_REGION_LENGTH__+0x7e07ea>
    f0fa:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <__TEXT_REGION_LENGTH__+0x7e07eb>
    f0fe:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <__TEXT_REGION_LENGTH__+0x7e07ec>
    f102:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <__TEXT_REGION_LENGTH__+0x7e07ed>
    f106:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <__TEXT_REGION_LENGTH__+0x7e07f0>
    f10a:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <__TEXT_REGION_LENGTH__+0x7e07f1>
    f10e:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <__TEXT_REGION_LENGTH__+0x7e07f2>
    f112:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <__TEXT_REGION_LENGTH__+0x7e07f3>
    f116:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <__TEXT_REGION_LENGTH__+0x7e07f4>
    f11a:	10 92 f5 07 	sts	0x07F5, r1	; 0x8007f5 <__TEXT_REGION_LENGTH__+0x7e07f5>
    f11e:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <__TEXT_REGION_LENGTH__+0x7e07f8>
    f122:	10 92 f9 07 	sts	0x07F9, r1	; 0x8007f9 <__TEXT_REGION_LENGTH__+0x7e07f9>
    f126:	10 92 fa 07 	sts	0x07FA, r1	; 0x8007fa <__TEXT_REGION_LENGTH__+0x7e07fa>
    f12a:	10 92 fb 07 	sts	0x07FB, r1	; 0x8007fb <__TEXT_REGION_LENGTH__+0x7e07fb>
    f12e:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <__TEXT_REGION_LENGTH__+0x7e07fc>
    f132:	10 92 fd 07 	sts	0x07FD, r1	; 0x8007fd <__TEXT_REGION_LENGTH__+0x7e07fd>
    f136:	e0 91 42 46 	lds	r30, 0x4642	; 0x804642 <ptc_seq_measure_complete_pointer>
    f13a:	f0 91 43 46 	lds	r31, 0x4643	; 0x804643 <ptc_seq_measure_complete_pointer+0x1>
    f13e:	09 94       	ijmp
    f140:	0c 94 05 78 	jmp	0xf00a	; 0xf00a <qtm_avr_da_ptc_handler_wcomp>

0000f144 <__mulsi3>:
    f144:	db 01       	movw	r26, r22
    f146:	8f 93       	push	r24
    f148:	9f 93       	push	r25
    f14a:	0e 94 ec 78 	call	0xf1d8	; 0xf1d8 <__muluhisi3>
    f14e:	bf 91       	pop	r27
    f150:	af 91       	pop	r26
    f152:	a2 9f       	mul	r26, r18
    f154:	80 0d       	add	r24, r0
    f156:	91 1d       	adc	r25, r1
    f158:	a3 9f       	mul	r26, r19
    f15a:	90 0d       	add	r25, r0
    f15c:	b2 9f       	mul	r27, r18
    f15e:	90 0d       	add	r25, r0
    f160:	11 24       	eor	r1, r1
    f162:	08 95       	ret

0000f164 <__udivmodsi4>:
    f164:	a1 e2       	ldi	r26, 0x21	; 33
    f166:	1a 2e       	mov	r1, r26
    f168:	aa 1b       	sub	r26, r26
    f16a:	bb 1b       	sub	r27, r27
    f16c:	fd 01       	movw	r30, r26
    f16e:	0d c0       	rjmp	.+26     	; 0xf18a <__udivmodsi4_ep>

0000f170 <__udivmodsi4_loop>:
    f170:	aa 1f       	adc	r26, r26
    f172:	bb 1f       	adc	r27, r27
    f174:	ee 1f       	adc	r30, r30
    f176:	ff 1f       	adc	r31, r31
    f178:	a2 17       	cp	r26, r18
    f17a:	b3 07       	cpc	r27, r19
    f17c:	e4 07       	cpc	r30, r20
    f17e:	f5 07       	cpc	r31, r21
    f180:	20 f0       	brcs	.+8      	; 0xf18a <__udivmodsi4_ep>
    f182:	a2 1b       	sub	r26, r18
    f184:	b3 0b       	sbc	r27, r19
    f186:	e4 0b       	sbc	r30, r20
    f188:	f5 0b       	sbc	r31, r21

0000f18a <__udivmodsi4_ep>:
    f18a:	66 1f       	adc	r22, r22
    f18c:	77 1f       	adc	r23, r23
    f18e:	88 1f       	adc	r24, r24
    f190:	99 1f       	adc	r25, r25
    f192:	1a 94       	dec	r1
    f194:	69 f7       	brne	.-38     	; 0xf170 <__udivmodsi4_loop>
    f196:	60 95       	com	r22
    f198:	70 95       	com	r23
    f19a:	80 95       	com	r24
    f19c:	90 95       	com	r25
    f19e:	9b 01       	movw	r18, r22
    f1a0:	ac 01       	movw	r20, r24
    f1a2:	bd 01       	movw	r22, r26
    f1a4:	cf 01       	movw	r24, r30
    f1a6:	08 95       	ret

0000f1a8 <__tablejump2__>:
    f1a8:	ee 0f       	add	r30, r30
    f1aa:	ff 1f       	adc	r31, r31
    f1ac:	00 24       	eor	r0, r0
    f1ae:	00 1c       	adc	r0, r0
    f1b0:	0b be       	out	0x3b, r0	; 59
    f1b2:	07 90       	elpm	r0, Z+
    f1b4:	f6 91       	elpm	r31, Z
    f1b6:	e0 2d       	mov	r30, r0
    f1b8:	09 94       	ijmp

0000f1ba <__umulhisi3>:
    f1ba:	a2 9f       	mul	r26, r18
    f1bc:	b0 01       	movw	r22, r0
    f1be:	b3 9f       	mul	r27, r19
    f1c0:	c0 01       	movw	r24, r0
    f1c2:	a3 9f       	mul	r26, r19
    f1c4:	70 0d       	add	r23, r0
    f1c6:	81 1d       	adc	r24, r1
    f1c8:	11 24       	eor	r1, r1
    f1ca:	91 1d       	adc	r25, r1
    f1cc:	b2 9f       	mul	r27, r18
    f1ce:	70 0d       	add	r23, r0
    f1d0:	81 1d       	adc	r24, r1
    f1d2:	11 24       	eor	r1, r1
    f1d4:	91 1d       	adc	r25, r1
    f1d6:	08 95       	ret

0000f1d8 <__muluhisi3>:
    f1d8:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <__umulhisi3>
    f1dc:	a5 9f       	mul	r26, r21
    f1de:	90 0d       	add	r25, r0
    f1e0:	b4 9f       	mul	r27, r20
    f1e2:	90 0d       	add	r25, r0
    f1e4:	a4 9f       	mul	r26, r20
    f1e6:	80 0d       	add	r24, r0
    f1e8:	91 1d       	adc	r25, r1
    f1ea:	11 24       	eor	r1, r1
    f1ec:	08 95       	ret

0000f1ee <__ashrdi3>:
    f1ee:	97 fb       	bst	r25, 7
    f1f0:	10 f8       	bld	r1, 0

0000f1f2 <__lshrdi3>:
    f1f2:	16 94       	lsr	r1
    f1f4:	00 08       	sbc	r0, r0
    f1f6:	0f 93       	push	r16
    f1f8:	08 30       	cpi	r16, 0x08	; 8
    f1fa:	98 f0       	brcs	.+38     	; 0xf222 <__lshrdi3+0x30>
    f1fc:	08 50       	subi	r16, 0x08	; 8
    f1fe:	23 2f       	mov	r18, r19
    f200:	34 2f       	mov	r19, r20
    f202:	45 2f       	mov	r20, r21
    f204:	56 2f       	mov	r21, r22
    f206:	67 2f       	mov	r22, r23
    f208:	78 2f       	mov	r23, r24
    f20a:	89 2f       	mov	r24, r25
    f20c:	90 2d       	mov	r25, r0
    f20e:	f4 cf       	rjmp	.-24     	; 0xf1f8 <__lshrdi3+0x6>
    f210:	05 94       	asr	r0
    f212:	97 95       	ror	r25
    f214:	87 95       	ror	r24
    f216:	77 95       	ror	r23
    f218:	67 95       	ror	r22
    f21a:	57 95       	ror	r21
    f21c:	47 95       	ror	r20
    f21e:	37 95       	ror	r19
    f220:	27 95       	ror	r18
    f222:	0a 95       	dec	r16
    f224:	aa f7       	brpl	.-22     	; 0xf210 <__lshrdi3+0x1e>
    f226:	0f 91       	pop	r16
    f228:	08 95       	ret

0000f22a <__cmpdi2_s8>:
    f22a:	00 24       	eor	r0, r0
    f22c:	a7 fd       	sbrc	r26, 7
    f22e:	00 94       	com	r0
    f230:	2a 17       	cp	r18, r26
    f232:	30 05       	cpc	r19, r0
    f234:	40 05       	cpc	r20, r0
    f236:	50 05       	cpc	r21, r0
    f238:	60 05       	cpc	r22, r0
    f23a:	70 05       	cpc	r23, r0
    f23c:	80 05       	cpc	r24, r0
    f23e:	90 05       	cpc	r25, r0
    f240:	08 95       	ret

0000f242 <malloc>:
    f242:	0f 93       	push	r16
    f244:	1f 93       	push	r17
    f246:	cf 93       	push	r28
    f248:	df 93       	push	r29
    f24a:	82 30       	cpi	r24, 0x02	; 2
    f24c:	91 05       	cpc	r25, r1
    f24e:	10 f4       	brcc	.+4      	; 0xf254 <malloc+0x12>
    f250:	82 e0       	ldi	r24, 0x02	; 2
    f252:	90 e0       	ldi	r25, 0x00	; 0
    f254:	e0 91 4e 47 	lds	r30, 0x474E	; 0x80474e <__flp>
    f258:	f0 91 4f 47 	lds	r31, 0x474F	; 0x80474f <__flp+0x1>
    f25c:	20 e0       	ldi	r18, 0x00	; 0
    f25e:	30 e0       	ldi	r19, 0x00	; 0
    f260:	a0 e0       	ldi	r26, 0x00	; 0
    f262:	b0 e0       	ldi	r27, 0x00	; 0
    f264:	30 97       	sbiw	r30, 0x00	; 0
    f266:	19 f1       	breq	.+70     	; 0xf2ae <malloc+0x6c>
    f268:	40 81       	ld	r20, Z
    f26a:	51 81       	ldd	r21, Z+1	; 0x01
    f26c:	02 81       	ldd	r16, Z+2	; 0x02
    f26e:	13 81       	ldd	r17, Z+3	; 0x03
    f270:	48 17       	cp	r20, r24
    f272:	59 07       	cpc	r21, r25
    f274:	c8 f0       	brcs	.+50     	; 0xf2a8 <malloc+0x66>
    f276:	84 17       	cp	r24, r20
    f278:	95 07       	cpc	r25, r21
    f27a:	69 f4       	brne	.+26     	; 0xf296 <malloc+0x54>
    f27c:	10 97       	sbiw	r26, 0x00	; 0
    f27e:	31 f0       	breq	.+12     	; 0xf28c <malloc+0x4a>
    f280:	12 96       	adiw	r26, 0x02	; 2
    f282:	0c 93       	st	X, r16
    f284:	12 97       	sbiw	r26, 0x02	; 2
    f286:	13 96       	adiw	r26, 0x03	; 3
    f288:	1c 93       	st	X, r17
    f28a:	27 c0       	rjmp	.+78     	; 0xf2da <malloc+0x98>
    f28c:	00 93 4e 47 	sts	0x474E, r16	; 0x80474e <__flp>
    f290:	10 93 4f 47 	sts	0x474F, r17	; 0x80474f <__flp+0x1>
    f294:	22 c0       	rjmp	.+68     	; 0xf2da <malloc+0x98>
    f296:	21 15       	cp	r18, r1
    f298:	31 05       	cpc	r19, r1
    f29a:	19 f0       	breq	.+6      	; 0xf2a2 <malloc+0x60>
    f29c:	42 17       	cp	r20, r18
    f29e:	53 07       	cpc	r21, r19
    f2a0:	18 f4       	brcc	.+6      	; 0xf2a8 <malloc+0x66>
    f2a2:	9a 01       	movw	r18, r20
    f2a4:	bd 01       	movw	r22, r26
    f2a6:	ef 01       	movw	r28, r30
    f2a8:	df 01       	movw	r26, r30
    f2aa:	f8 01       	movw	r30, r16
    f2ac:	db cf       	rjmp	.-74     	; 0xf264 <malloc+0x22>
    f2ae:	21 15       	cp	r18, r1
    f2b0:	31 05       	cpc	r19, r1
    f2b2:	f9 f0       	breq	.+62     	; 0xf2f2 <malloc+0xb0>
    f2b4:	28 1b       	sub	r18, r24
    f2b6:	39 0b       	sbc	r19, r25
    f2b8:	24 30       	cpi	r18, 0x04	; 4
    f2ba:	31 05       	cpc	r19, r1
    f2bc:	80 f4       	brcc	.+32     	; 0xf2de <malloc+0x9c>
    f2be:	8a 81       	ldd	r24, Y+2	; 0x02
    f2c0:	9b 81       	ldd	r25, Y+3	; 0x03
    f2c2:	61 15       	cp	r22, r1
    f2c4:	71 05       	cpc	r23, r1
    f2c6:	21 f0       	breq	.+8      	; 0xf2d0 <malloc+0x8e>
    f2c8:	fb 01       	movw	r30, r22
    f2ca:	82 83       	std	Z+2, r24	; 0x02
    f2cc:	93 83       	std	Z+3, r25	; 0x03
    f2ce:	04 c0       	rjmp	.+8      	; 0xf2d8 <malloc+0x96>
    f2d0:	80 93 4e 47 	sts	0x474E, r24	; 0x80474e <__flp>
    f2d4:	90 93 4f 47 	sts	0x474F, r25	; 0x80474f <__flp+0x1>
    f2d8:	fe 01       	movw	r30, r28
    f2da:	32 96       	adiw	r30, 0x02	; 2
    f2dc:	44 c0       	rjmp	.+136    	; 0xf366 <malloc+0x124>
    f2de:	fe 01       	movw	r30, r28
    f2e0:	e2 0f       	add	r30, r18
    f2e2:	f3 1f       	adc	r31, r19
    f2e4:	81 93       	st	Z+, r24
    f2e6:	91 93       	st	Z+, r25
    f2e8:	22 50       	subi	r18, 0x02	; 2
    f2ea:	31 09       	sbc	r19, r1
    f2ec:	28 83       	st	Y, r18
    f2ee:	39 83       	std	Y+1, r19	; 0x01
    f2f0:	3a c0       	rjmp	.+116    	; 0xf366 <malloc+0x124>
    f2f2:	20 91 4c 47 	lds	r18, 0x474C	; 0x80474c <__brkval>
    f2f6:	30 91 4d 47 	lds	r19, 0x474D	; 0x80474d <__brkval+0x1>
    f2fa:	23 2b       	or	r18, r19
    f2fc:	41 f4       	brne	.+16     	; 0xf30e <malloc+0xcc>
    f2fe:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    f302:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    f306:	20 93 4c 47 	sts	0x474C, r18	; 0x80474c <__brkval>
    f30a:	30 93 4d 47 	sts	0x474D, r19	; 0x80474d <__brkval+0x1>
    f30e:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    f312:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    f316:	21 15       	cp	r18, r1
    f318:	31 05       	cpc	r19, r1
    f31a:	41 f4       	brne	.+16     	; 0xf32c <malloc+0xea>
    f31c:	2d b7       	in	r18, 0x3d	; 61
    f31e:	3e b7       	in	r19, 0x3e	; 62
    f320:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    f324:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    f328:	24 1b       	sub	r18, r20
    f32a:	35 0b       	sbc	r19, r21
    f32c:	e0 91 4c 47 	lds	r30, 0x474C	; 0x80474c <__brkval>
    f330:	f0 91 4d 47 	lds	r31, 0x474D	; 0x80474d <__brkval+0x1>
    f334:	e2 17       	cp	r30, r18
    f336:	f3 07       	cpc	r31, r19
    f338:	a0 f4       	brcc	.+40     	; 0xf362 <malloc+0x120>
    f33a:	2e 1b       	sub	r18, r30
    f33c:	3f 0b       	sbc	r19, r31
    f33e:	28 17       	cp	r18, r24
    f340:	39 07       	cpc	r19, r25
    f342:	78 f0       	brcs	.+30     	; 0xf362 <malloc+0x120>
    f344:	ac 01       	movw	r20, r24
    f346:	4e 5f       	subi	r20, 0xFE	; 254
    f348:	5f 4f       	sbci	r21, 0xFF	; 255
    f34a:	24 17       	cp	r18, r20
    f34c:	35 07       	cpc	r19, r21
    f34e:	48 f0       	brcs	.+18     	; 0xf362 <malloc+0x120>
    f350:	4e 0f       	add	r20, r30
    f352:	5f 1f       	adc	r21, r31
    f354:	40 93 4c 47 	sts	0x474C, r20	; 0x80474c <__brkval>
    f358:	50 93 4d 47 	sts	0x474D, r21	; 0x80474d <__brkval+0x1>
    f35c:	81 93       	st	Z+, r24
    f35e:	91 93       	st	Z+, r25
    f360:	02 c0       	rjmp	.+4      	; 0xf366 <malloc+0x124>
    f362:	e0 e0       	ldi	r30, 0x00	; 0
    f364:	f0 e0       	ldi	r31, 0x00	; 0
    f366:	cf 01       	movw	r24, r30
    f368:	df 91       	pop	r29
    f36a:	cf 91       	pop	r28
    f36c:	1f 91       	pop	r17
    f36e:	0f 91       	pop	r16
    f370:	08 95       	ret

0000f372 <free>:
    f372:	cf 93       	push	r28
    f374:	df 93       	push	r29
    f376:	00 97       	sbiw	r24, 0x00	; 0
    f378:	09 f4       	brne	.+2      	; 0xf37c <free+0xa>
    f37a:	81 c0       	rjmp	.+258    	; 0xf47e <free+0x10c>
    f37c:	fc 01       	movw	r30, r24
    f37e:	32 97       	sbiw	r30, 0x02	; 2
    f380:	12 82       	std	Z+2, r1	; 0x02
    f382:	13 82       	std	Z+3, r1	; 0x03
    f384:	a0 91 4e 47 	lds	r26, 0x474E	; 0x80474e <__flp>
    f388:	b0 91 4f 47 	lds	r27, 0x474F	; 0x80474f <__flp+0x1>
    f38c:	10 97       	sbiw	r26, 0x00	; 0
    f38e:	81 f4       	brne	.+32     	; 0xf3b0 <free+0x3e>
    f390:	20 81       	ld	r18, Z
    f392:	31 81       	ldd	r19, Z+1	; 0x01
    f394:	82 0f       	add	r24, r18
    f396:	93 1f       	adc	r25, r19
    f398:	20 91 4c 47 	lds	r18, 0x474C	; 0x80474c <__brkval>
    f39c:	30 91 4d 47 	lds	r19, 0x474D	; 0x80474d <__brkval+0x1>
    f3a0:	28 17       	cp	r18, r24
    f3a2:	39 07       	cpc	r19, r25
    f3a4:	51 f5       	brne	.+84     	; 0xf3fa <free+0x88>
    f3a6:	e0 93 4c 47 	sts	0x474C, r30	; 0x80474c <__brkval>
    f3aa:	f0 93 4d 47 	sts	0x474D, r31	; 0x80474d <__brkval+0x1>
    f3ae:	67 c0       	rjmp	.+206    	; 0xf47e <free+0x10c>
    f3b0:	ed 01       	movw	r28, r26
    f3b2:	20 e0       	ldi	r18, 0x00	; 0
    f3b4:	30 e0       	ldi	r19, 0x00	; 0
    f3b6:	ce 17       	cp	r28, r30
    f3b8:	df 07       	cpc	r29, r31
    f3ba:	40 f4       	brcc	.+16     	; 0xf3cc <free+0x5a>
    f3bc:	4a 81       	ldd	r20, Y+2	; 0x02
    f3be:	5b 81       	ldd	r21, Y+3	; 0x03
    f3c0:	9e 01       	movw	r18, r28
    f3c2:	41 15       	cp	r20, r1
    f3c4:	51 05       	cpc	r21, r1
    f3c6:	f1 f0       	breq	.+60     	; 0xf404 <free+0x92>
    f3c8:	ea 01       	movw	r28, r20
    f3ca:	f5 cf       	rjmp	.-22     	; 0xf3b6 <free+0x44>
    f3cc:	c2 83       	std	Z+2, r28	; 0x02
    f3ce:	d3 83       	std	Z+3, r29	; 0x03
    f3d0:	40 81       	ld	r20, Z
    f3d2:	51 81       	ldd	r21, Z+1	; 0x01
    f3d4:	84 0f       	add	r24, r20
    f3d6:	95 1f       	adc	r25, r21
    f3d8:	c8 17       	cp	r28, r24
    f3da:	d9 07       	cpc	r29, r25
    f3dc:	59 f4       	brne	.+22     	; 0xf3f4 <free+0x82>
    f3de:	88 81       	ld	r24, Y
    f3e0:	99 81       	ldd	r25, Y+1	; 0x01
    f3e2:	84 0f       	add	r24, r20
    f3e4:	95 1f       	adc	r25, r21
    f3e6:	02 96       	adiw	r24, 0x02	; 2
    f3e8:	80 83       	st	Z, r24
    f3ea:	91 83       	std	Z+1, r25	; 0x01
    f3ec:	8a 81       	ldd	r24, Y+2	; 0x02
    f3ee:	9b 81       	ldd	r25, Y+3	; 0x03
    f3f0:	82 83       	std	Z+2, r24	; 0x02
    f3f2:	93 83       	std	Z+3, r25	; 0x03
    f3f4:	21 15       	cp	r18, r1
    f3f6:	31 05       	cpc	r19, r1
    f3f8:	29 f4       	brne	.+10     	; 0xf404 <free+0x92>
    f3fa:	e0 93 4e 47 	sts	0x474E, r30	; 0x80474e <__flp>
    f3fe:	f0 93 4f 47 	sts	0x474F, r31	; 0x80474f <__flp+0x1>
    f402:	3d c0       	rjmp	.+122    	; 0xf47e <free+0x10c>
    f404:	e9 01       	movw	r28, r18
    f406:	ea 83       	std	Y+2, r30	; 0x02
    f408:	fb 83       	std	Y+3, r31	; 0x03
    f40a:	49 91       	ld	r20, Y+
    f40c:	59 91       	ld	r21, Y+
    f40e:	c4 0f       	add	r28, r20
    f410:	d5 1f       	adc	r29, r21
    f412:	ec 17       	cp	r30, r28
    f414:	fd 07       	cpc	r31, r29
    f416:	61 f4       	brne	.+24     	; 0xf430 <free+0xbe>
    f418:	80 81       	ld	r24, Z
    f41a:	91 81       	ldd	r25, Z+1	; 0x01
    f41c:	84 0f       	add	r24, r20
    f41e:	95 1f       	adc	r25, r21
    f420:	02 96       	adiw	r24, 0x02	; 2
    f422:	e9 01       	movw	r28, r18
    f424:	88 83       	st	Y, r24
    f426:	99 83       	std	Y+1, r25	; 0x01
    f428:	82 81       	ldd	r24, Z+2	; 0x02
    f42a:	93 81       	ldd	r25, Z+3	; 0x03
    f42c:	8a 83       	std	Y+2, r24	; 0x02
    f42e:	9b 83       	std	Y+3, r25	; 0x03
    f430:	e0 e0       	ldi	r30, 0x00	; 0
    f432:	f0 e0       	ldi	r31, 0x00	; 0
    f434:	12 96       	adiw	r26, 0x02	; 2
    f436:	8d 91       	ld	r24, X+
    f438:	9c 91       	ld	r25, X
    f43a:	13 97       	sbiw	r26, 0x03	; 3
    f43c:	00 97       	sbiw	r24, 0x00	; 0
    f43e:	19 f0       	breq	.+6      	; 0xf446 <free+0xd4>
    f440:	fd 01       	movw	r30, r26
    f442:	dc 01       	movw	r26, r24
    f444:	f7 cf       	rjmp	.-18     	; 0xf434 <free+0xc2>
    f446:	8d 91       	ld	r24, X+
    f448:	9c 91       	ld	r25, X
    f44a:	11 97       	sbiw	r26, 0x01	; 1
    f44c:	9d 01       	movw	r18, r26
    f44e:	2e 5f       	subi	r18, 0xFE	; 254
    f450:	3f 4f       	sbci	r19, 0xFF	; 255
    f452:	82 0f       	add	r24, r18
    f454:	93 1f       	adc	r25, r19
    f456:	20 91 4c 47 	lds	r18, 0x474C	; 0x80474c <__brkval>
    f45a:	30 91 4d 47 	lds	r19, 0x474D	; 0x80474d <__brkval+0x1>
    f45e:	28 17       	cp	r18, r24
    f460:	39 07       	cpc	r19, r25
    f462:	69 f4       	brne	.+26     	; 0xf47e <free+0x10c>
    f464:	30 97       	sbiw	r30, 0x00	; 0
    f466:	29 f4       	brne	.+10     	; 0xf472 <free+0x100>
    f468:	10 92 4e 47 	sts	0x474E, r1	; 0x80474e <__flp>
    f46c:	10 92 4f 47 	sts	0x474F, r1	; 0x80474f <__flp+0x1>
    f470:	02 c0       	rjmp	.+4      	; 0xf476 <free+0x104>
    f472:	12 82       	std	Z+2, r1	; 0x02
    f474:	13 82       	std	Z+3, r1	; 0x03
    f476:	a0 93 4c 47 	sts	0x474C, r26	; 0x80474c <__brkval>
    f47a:	b0 93 4d 47 	sts	0x474D, r27	; 0x80474d <__brkval+0x1>
    f47e:	df 91       	pop	r29
    f480:	cf 91       	pop	r28
    f482:	08 95       	ret

0000f484 <memset>:
    f484:	dc 01       	movw	r26, r24
    f486:	01 c0       	rjmp	.+2      	; 0xf48a <memset+0x6>
    f488:	6d 93       	st	X+, r22
    f48a:	41 50       	subi	r20, 0x01	; 1
    f48c:	50 40       	sbci	r21, 0x00	; 0
    f48e:	e0 f7       	brcc	.-8      	; 0xf488 <memset+0x4>
    f490:	08 95       	ret

0000f492 <_exit>:
    f492:	f8 94       	cli

0000f494 <__stop_program>:
    f494:	ff cf       	rjmp	.-2      	; 0xf494 <__stop_program>
